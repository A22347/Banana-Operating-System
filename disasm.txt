
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 f4 fa 01 c0       	mov    eax,0xc001faf4
c0000025:	3d f4 fa 01 c0       	cmp    eax,0xc001faf4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 f4 fa 01 c0       	push   0xc001faf4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 f4 fa 01 c0       	mov    eax,0xc001faf4
c0000051:	2d f4 fa 01 c0       	sub    eax,0xc001faf4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 f4 fa 01 c0       	push   0xc001faf4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 10 02 c0 00 	cmp    BYTE PTR ds:0xc00210c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb b8 cd 01 c0       	mov    ebx,0xc001cdb8
c0000097:	81 eb b4 cd 01 c0    	sub    ebx,0xc001cdb4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be b4 cd 01 c0       	mov    esi,0xc001cdb4
c00000a6:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 10 02 c0       	mov    ds:0xc00210c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 f4 fa 01 c0       	push   0xc001faf4
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 10 02 c0 01 	mov    BYTE PTR ds:0xc00210c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 10 02 c0       	push   0xc00210c8
c0000108:	68 f4 fa 01 c0       	push   0xc001faf4
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 50 2d 01 00       	call   c0013000 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 10 a0 00 00       	call   c000a2d8 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 2e 2d 01 00       	call   c0013000 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 37 32 01 00       	call   c0013528 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 86 38 01 00       	call   c0013b80 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 1e 02 c0 	lgdtd  ds:0xc0021ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 c4 fd 00 00       	jmp    c0010146 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 10 02 c0       	mov    ds:0xc00210e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 10 02 c0    	mov    DWORD PTR ds:0xc00210e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 10 02 c0    	mov    ebx,DWORD PTR ds:0xc00210e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 c0 cd 01 c0 02 	test   BYTE PTR [edx-0x3ffe3240],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 c0 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe3240],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 c0 cd 01 c0 08 	test   BYTE PTR [edx-0x3ffe3240],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 c0 cd 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3240],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 c0 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe3240],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 11 02 c0    	mov    ecx,DWORD PTR ds:0xc0021100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 11 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 11 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 11 02 c0    	mov    ecx,DWORD PTR ds:0xc002113c
c0000d3d:	c7 42 0c 34 11 02 c0 	mov    DWORD PTR [edx+0xc],0xc0021134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 11 02 c0 02 	test   BYTE PTR ds:0xc0021100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 11 02 c0    	mov    edi,DWORD PTR ds:0xc0021100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 11 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 11 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 11 02 c0 	lea    edx,[eax*8-0x3ffdeecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 11 02 c0    	mov    ebx,DWORD PTR ds:0xc0021140
c00010bf:	81 fb 34 11 02 c0    	cmp    ebx,0xc0021134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 11 02 c0       	cmp    eax,0xc0021134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 11 02 c0    	cmp    DWORD PTR ds:0xc0021130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 11 02 c0       	mov    ds:0xc002113c,eax
c00010fb:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c0001100:	a3 30 11 02 c0       	mov    ds:0xc0021130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c000110e:	c7 40 0c 34 11 02 c0 	mov    DWORD PTR [eax+0xc],0xc0021134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 10 02 c0 	lea    ebp,[edx*4-0x3ffdef08]
c000115f:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 11 02 c0 	lea    ecx,[edx*4-0x3ffdef00]
c000117a:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 14 02 c0 	or     DWORD PTR [edi*4-0x3ffdebcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 11 02 c0 	lea    eax,[eax*8-0x3ffdeecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,ecx
c0001234:	89 0d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,ecx
c000123a:	c7 41 08 34 11 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0021134
c0001241:	c7 41 0c 34 11 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0021134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 11 02 c0 	lea    edx,[ecx*8-0x3ffdeed4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 11 02 c0 	lea    edx,[eax*4-0x3ffdeed4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 14 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdebcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edi
c0001307:	89 3d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,edi
c000130d:	c7 47 08 34 11 02 c0 	mov    DWORD PTR [edi+0x8],0xc0021134
c0001314:	c7 47 0c 34 11 02 c0 	mov    DWORD PTR [edi+0xc],0xc0021134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 11 02 c0    	mov    DWORD PTR ds:0xc0021130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 11 02 c0       	mov    edx,0xc0021100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 14 02 c0    	mov    ebx,DWORD PTR ds:0xc0021454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 14 02 c0    	mov    DWORD PTR ds:0xc0021454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 14 02 c0    	push   DWORD PTR ds:0xc002145c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 14 02 c0       	mov    eax,ds:0xc002145c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 11 02 c0 00 	cmp    DWORD PTR ds:0xc002112c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 11 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 11 02 c0       	mov    eax,0xc0021134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 14 02 c0       	cmp    eax,0xc002142c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 14 02 c0       	mov    eax,ds:0xc0021468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 c4 ce 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe313c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 11 02 c0       	mov    eax,ds:0xc0021100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 11 02 c0       	mov    ds:0xc0021100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 14 02 c0    	mov    DWORD PTR ds:0xc0021444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 14 02 c0    	mov    DWORD PTR ds:0xc0021448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 14 02 c0    	mov    DWORD PTR ds:0xc002144c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 26 52 01 00       	jmp    c0016f10 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 54 52 01 00       	jmp    c0016f54 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 79 52 01 00       	jmp    c0016f98 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 20 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2fe0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 20 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2fe0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 08 f0 01 c0       	mov    edx,0xc001f008
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba dc ce 01 c0       	mov    edx,0xc001cedc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 14 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdeb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 14 02 c0    	mov    ax,ds:0xc0021480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 14 02 c0    	mov    ds:0xc0021480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 e2 ce 01 c0       	mov    eax,0xc001cee2
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad a0 cf 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3060]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 eb ce 01 c0       	mov    eax,0xc001ceeb
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 20 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2fe0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 14 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 14 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 70 cf 01 c0       	mov    eax,0xc001cf70
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 14 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 60 cf 01 c0       	mov    ebx,0xc001cf60
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 40 cf 01 c0       	mov    edx,0xc001cf40
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 50 cf 01 c0       	mov    edx,0xc001cf50
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba f2 ce 01 c0       	mov    edx,0xc001cef2
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba fe ce 01 c0       	mov    edx,0xc001cefe
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 12 cf 01 c0       	mov    edx,0xc001cf12
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 40 d3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d340
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 40 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d340
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 40 d1 01 c0       	mov    eax,0xc001d140
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 80 d0 01 c0       	mov    eax,0xc001d080
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 40 d0 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2fc0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdefe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdef80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 15 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdea30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 6d 18 01 00       	call   c00177ec <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 10 02 c0       	mov    eax,0xc0021080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 10 02 c0       	mov    eax,0xc0021020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 40 d4 01 c0       	push   0xc001d440
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 1e 02 c0       	mov    ecx,0xc0021e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 15 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdeac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdeac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeabc],esi
c000634e:	89 87 40 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeac0],eax
c0006354:	c7 87 48 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdeab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdea30],0x0
c0006370:	89 87 4c 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 15 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdea30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c00063e9:	8b 8d 4c 15 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdeab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 15 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdeac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 10 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdefe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 15 02 c0    	add    DWORD PTR [ebp-0x3ffdeab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 15 02 c0    	lea    ecx,[ebp-0x3ffdeac0]
c00064e1:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 15 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdeab4]
c000651f:	05 40 15 02 c0       	add    eax,0xc0021540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdeac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdea30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 15 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdeab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdeac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdea30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 40 15 02 c0    	lea    esi,[eax-0x3ffdeac0]
c00065e4:	83 b8 40 15 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdeac0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 48 15 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdeab8]
c0006653:	81 c2 40 15 02 c0    	add    edx,0xc0021540
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 58 15 02 c0    	lea    ebp,[eax-0x3ffdeaa8]
c00066b9:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 58 15 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdeaa8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 40 d4 01 c0       	push   0xc001d440
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 53 15 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdeaad],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 50 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeab0],eax
c000678f:	89 91 54 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeaac],edx
c0006795:	81 c1 40 15 02 c0    	add    ecx,0xc0021540
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 50 15 02 c0       	add    eax,0xc0021550
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 60 10 02 c0       	mov    ds:0xc0021060,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 b4 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb4,0x0
c00067df:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 43 d4 01 c0       	push   0xc001d443
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 b4 1e 02 c0       	mov    ds:0xc0021eb4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 4a d4 01 c0       	push   0xc001d44a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 80 10 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdef80]
c000687d:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 82 1e 02 c0       	mov    eax,0xc0021e82
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 a8 1e 02 c0       	mov    ds:0xc0021ea8,eax
c00068a0:	b8 8a 1e 02 c0       	mov    eax,0xc0021e8a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 a4 1e 02 c0       	mov    ds:0xc0021ea4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 40 15 02 c0       	push   0xc0021540
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0021540,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 20 15 02 c0       	mov    ds:0xc0021520,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 80 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdef80],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 20 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdefe0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 80 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdef80]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 20 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdefe0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 20 15 02 c0       	mov    eax,ds:0xc0021520
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 20 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021520,0x0
c00069a9:	c7 05 b0 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 5e 50 00 00       	call   c000ba36 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 51 d4 01 c0       	push   0xc001d451
c0006a09:	e8 d5 90 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0006a28:	50                   	push   eax
c0006a29:	68 6a d4 01 c0       	push   0xc001d46a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 1a c9 00 00       	call   c0013350 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 2d cb 00 00       	call   c0013578 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 cc 3f 01 c0       	push   0xc0013fcc
c0006a5a:	52                   	push   edx
c0006a5b:	e8 18 cb 00 00       	call   c0013578 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 51 02 c0       	mov    ds:0xc0025148,eax
c0006a68:	68 68 d5 01 c0       	push   0xc001d568
c0006a6d:	c6 05 bd 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ebd,0x1
c0006a74:	e8 6a 90 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006a79:	e8 2d d9 00 00       	call   c00143ab <Vm::initialise8086()>
c0006a7e:	e8 f7 3d 00 00       	call   c000a87a <Fs::initVFS()>
c0006a83:	c7 04 24 77 d4 01 c0 	mov    DWORD PTR [esp],0xc001d477
c0006a8a:	e8 54 90 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 68 d5 01 c0       	push   0xc001d568
c0006aae:	e8 30 90 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006ab3:	e8 06 95 00 00       	call   c000ffbe <Krnl::loadSystemEnv()>
c0006ab8:	e8 63 97 00 00       	call   c0010220 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 91 d4 01 c0       	push   0xc001d491
c0006ac7:	68 9a d4 01 c0       	push   0xc001d49a
c0006acc:	e8 13 ae 00 00       	call   c00118e4 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 af 48 00 00       	call   c000b388 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 8c d5 01 c0 	mov    DWORD PTR [esp],0xc001d58c
c0006ae0:	e8 fe 8f 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 3d 4f 00 00       	call   c000ba34 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 a2 d4 01 c0 	mov    DWORD PTR [esp],0xc001d4a2
c0006afe:	e8 e0 8f 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 b3 d4 01 c0       	push   0xc001d4b3
c0006b12:	e8 54 c2 00 00       	call   c0012d6b <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 7c c4 00 00       	call   c0012f9c <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 67 ce 00 00       	call   c0013994 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 cf d4 01 c0       	push   0xc001d4cf
c0006b41:	50                   	push   eax
c0006b42:	e8 69 4f 00 00       	call   c000bab0 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba d8 d5 01 c0       	mov    edx,0xc001d5d8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 85 51 01 00       	call   c001bdb6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 a4 83 00 00       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 7d 83 00 00       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 5b 83 00 00       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 39 83 00 00       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 1e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0021ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 47 82 00 00       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 22 82 00 00       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 ef 4f 01 00       	call   c001bd70 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 ec 4c 01 00       	call   c001ba90 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 3e 82 00 00       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 d8 d4 01 c0       	push   0xc001d4d8
c0006e14:	e8 42 93 00 00       	call   c001015b <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 de d4 01 c0       	push   0xc001d4de
c0006e4c:	e8 0a 93 00 00       	call   c001015b <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 ef 7b 00 00       	jmp    c000ea88 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed0,0x4
c0006ee8:	68 e4 d4 01 c0       	push   0xc001d4e4
c0006eed:	0f 94 05 60 f7 01 c0 	sete   BYTE PTR ds:0xc001f760
c0006ef4:	e8 ea 8b 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 11 77 00 00       	call   c000e620 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 fa 49 00 00       	call   c000b918 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 fc d4 01 c0 	mov    DWORD PTR [esp],0xc001d4fc
c0006f37:	e8 a7 8b 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 76 81 00 00       	call   c000f0c8 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 b7 49 00 00       	call   c000b918 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 ac d5 01 c0       	push   0xc001d5ac
c0006f7e:	e8 60 8b 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006f83:	e8 5a e5 00 00       	call   c00154e2 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 16 d5 01 c0 	mov    DWORD PTR [esp],0xc001d516
c0006f8f:	e8 4f 8b 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 f0 c6 00 00       	call   c0013690 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 31 d5 01 c0       	push   0xc001d531
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 e7 34 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 42 d5 01 c0       	push   0xc001d542
c000700e:	e8 48 91 00 00       	call   c001015b <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 4f d5 01 c0       	push   0xc001d54f
c0007023:	e8 33 91 00 00       	call   c001015b <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 59 d5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d559
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 1c 91 00 00       	jmp    c001015b <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 1e 02 c0       	mov    ds:0xc0021ec2,eax
c00070cf:	66 89 15 c0 1e 02 c0 	mov    WORD PTR ds:0xc0021ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007217:	48                   	dec    eax
c0007218:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 97 df 00 00       	call   c00151bc <HalSystemIdle()>
c0007225:	e8 48 51 01 00       	call   c001c372 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 1e 02 c0 ff 07 	mov    WORD PTR ds:0xc0021ec8,0x7ff
c000731d:	a3 ca 1e 02 c0       	mov    ds:0xc0021eca,eax
c0007322:	0f 01 1d c8 1e 02 c0 	lidtd  ds:0xc0021ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 20 bb 01 c0       	push   0xc001bb20
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 30 bb 01 c0       	push   0xc001bb30
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 3a bb 01 c0       	push   0xc001bb3a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 44 bb 01 c0       	push   0xc001bb44
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 4e bb 01 c0       	push   0xc001bb4e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 58 bb 01 c0       	push   0xc001bb58
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 62 bb 01 c0       	push   0xc001bb62
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 6c bb 01 c0       	push   0xc001bb6c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 76 bb 01 c0       	push   0xc001bb76
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 7e bb 01 c0       	push   0xc001bb7e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 88 bb 01 c0       	push   0xc001bb88
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 90 bb 01 c0       	push   0xc001bb90
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 98 bb 01 c0       	push   0xc001bb98
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 a0 bb 01 c0       	push   0xc001bba0
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 a8 bb 01 c0       	push   0xc001bba8
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 b0 bb 01 c0       	push   0xc001bbb0
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 ba bb 01 c0       	push   0xc001bbba
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 c4 bb 01 c0       	push   0xc001bbc4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 ce bb 01 c0       	push   0xc001bbce
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 68 bc 01 c0       	push   0xc001bc68
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 6f bc 01 c0       	push   0xc001bc6f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 5a bc 01 c0       	push   0xc001bc5a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 61 bc 01 c0       	push   0xc001bc61
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 d8 bb 01 c0       	push   0xc001bbd8
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 e2 bb 01 c0       	push   0xc001bbe2
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 ec bb 01 c0       	push   0xc001bbec
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 f6 bb 01 c0       	push   0xc001bbf6
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 00 bc 01 c0       	push   0xc001bc00
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 0a bc 01 c0       	push   0xc001bc0a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 14 bc 01 c0       	push   0xc001bc14
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 1e bc 01 c0       	push   0xc001bc1e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 28 bc 01 c0       	push   0xc001bc28
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 32 bc 01 c0       	push   0xc001bc32
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 3c bc 01 c0       	push   0xc001bc3c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 46 bc 01 c0       	push   0xc001bc46
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 50 bc 01 c0       	push   0xc001bc50
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 01 bd 01 c0       	push   0xc001bd01
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 0b bd 01 c0       	push   0xc001bd0b
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 15 bd 01 c0       	push   0xc001bd15
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 1f bd 01 c0       	push   0xc001bd1f
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 29 bd 01 c0       	push   0xc001bd29
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 33 bd 01 c0       	push   0xc001bd33
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 3d bd 01 c0       	push   0xc001bd3d
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 47 bd 01 c0       	push   0xc001bd47
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007614:	e8 05 24 00 00       	call   c0009a1e <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 76 bb 01 c0       	push   0xc001bb76
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 58 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f758
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fb0
c00076c2:	8b 3d 58 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f758
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 40 22 00 00       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 58 f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f758,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 58 f7 01 c0       	mov    eax,ds:0xc001f758
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 fc d5 01 c0       	push   0xc001d5fc
c000770e:	e8 c5 2d 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 2c d6 01 c0       	push   0xc001d62c
c000772d:	e8 29 8a 00 00       	call   c001015b <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 31 d6 01 c0       	push   0xc001d631
c0007743:	e8 13 8a 00 00       	call   c001015b <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007763:	48                   	dec    eax
c0007764:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007781:	e8 98 22 00 00       	call   c0009a1e <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007797:	e8 3e 1f 00 00       	call   c00096da <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 1e 02 c0       	mov    ds:0xc0021ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 38 d6 01 c0       	push   0xc001d638
c0007862:	e8 71 2c 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 09 82 00 00       	call   c000fa75 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 6d 1c 00 00       	call   c0009500 <VAS::VAS()>
c0007893:	89 1d b0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fb0,ebx
c0007899:	e8 6c 4a 01 00       	call   c001c30a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 e7 1e 00 00       	call   c00097b6 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 1e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffde114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 50 d6 01 c0       	push   0xc001d650
c000792c:	e8 2a 88 00 00       	call   c001015b <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 1e 02 c0    	lea    edx,[ebp-0x3ffde114]
c000796e:	8d 84 05 ed 1e 02 c0 	lea    eax,[ebp+eax*1-0x3ffde113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 1e 02 c0    	add    DWORD PTR ds:0xc0021ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 50 d6 01 c0       	push   0xc001d650
c0007993:	e8 c3 87 00 00       	call   c001015b <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 1e 02 c0    	sub    DWORD PTR ds:0xc0021ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 1e 02 c0       	add    eax,0xc0021eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 5c f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f75c
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 5c f7 01 c0    	add    eax,DWORD PTR ds:0xc001f75c
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 5c f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f75c
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 1e 02 c0    	dec    DWORD PTR ds:0xc0021ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 f5 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d6f5
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 d8 86 00 00       	jmp    c001015b <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 1e 02 c0    	mov    DWORD PTR ds:0xc0021ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 1e 02 c0 01 	xor    BYTE PTR ds:0xc0021efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 08 27 00 00       	call   c000a1f8 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 78 d6 01 c0       	push   0xc001d678
c0007aff:	e8 57 86 00 00       	call   c001015b <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 1e 02 c0       	mov    eax,ds:0xc0021ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 1e 02 c0    	inc    DWORD PTR ds:0xc0021ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 1e 02 c0    	cmp    DWORD PTR ds:0xc0021edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 1e 02 c0    	mov    DWORD PTR ds:0xc0021edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 1e 02 c0       	push   0xc0021eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 0b d7 01 c0       	push   0xc001d70b
c0007c18:	e8 bb 28 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 a8 d6 01 c0       	push   0xc001d6a8
c0007ca4:	e8 2f 28 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 cc d6 01 c0       	push   0xc001d6cc
c0007d40:	e8 93 27 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 1e 02 c0    	add    eax,DWORD PTR ds:0xc0021ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 31 d7 01 c0       	push   0xc001d731
c0007d76:	e8 5d 27 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 23 d7 01 c0       	push   0xc001d723
c0007de5:	e8 71 83 00 00       	call   c001015b <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 1e 02 c0 02 	add    DWORD PTR ds:0xc0021ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba 90 d7 01 c0       	mov    edx,0xc001d790
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 e8 24 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 4d d7 01 c0       	push   0xc001d74d
c0007fa7:	e8 af 81 00 00       	call   c001015b <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007ff0:	e8 a3 b7 00 00       	call   c0013798 <schedule()>
c0007ff5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 63 41 01 00       	call   c001c1f0 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 6a d7 01 c0       	push   0xc001d76a
c00080a2:	e8 b4 80 00 00       	call   c001015b <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba 90 d7 01 c0       	mov    edx,0xc001d790
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 24 d8 01 c0       	mov    edx,0xc001d824
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 71 22 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 ac 45 00 00       	call   c000c738 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 c2 e1 00 00       	call   c0016374 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 80 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0880]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 80 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0880]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 38 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe09c8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 10 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe09f0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 e5 de 00 00       	call   c0016200 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 40 df 00 00       	jmp    c0016308 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 a4 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d7a4
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 47 7d 00 00       	jmp    c001015b <KePanic(char const*)>
c0008414:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 c0 2d 00 00       	jmp    c000b32f <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be b2 d7 01 c0       	mov    esi,0xc001d7b2
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 52 da 00 00       	call   c0016308 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 24 d8 01 c0       	mov    edx,0xc001d824
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 6a 0f 00 00       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 c3 d7 01 c0       	push   0xc001d7c3
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 c9 d7 01 c0       	push   0xc001d7c9
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 cf d7 01 c0       	push   0xc001d7cf
c0008b78:	e8 de 75 00 00       	call   c001015b <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba ec d8 01 c0       	mov    edx,0xc001d8ec
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 c0 f7 01 c0       	mov    eax,ds:0xc001f7c0
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 c0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7c0,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 98 1f 02 c0       	push   0xc0021f98
c0008e80:	e8 53 35 01 00       	call   c001c3d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 94 1f 02 c0       	mov    al,ds:0xc0021f94
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 94 1f 02 c0 01 	mov    BYTE PTR ds:0xc0021f94,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d 8c 1f 02 c0    	mov    DWORD PTR ds:0xc0021f8c,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d 88 1f 02 c0    	mov    DWORD PTR ds:0xc0021f88,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 60 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0a0],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba 08 d9 01 c0       	mov    edx,0xc001d908
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba ec d8 01 c0       	mov    edx,0xc001d8ec
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 98 1f 02 c0       	push   0xc0021f98
c0009050:	e8 57 34 01 00       	call   c001c4ac <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 98 1f 02 c0       	push   0xc0021f98
c0009064:	e8 4b 34 01 00       	call   c001c4b4 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 98 1f 02 c0       	push   0xc0021f98
c0009082:	e8 51 33 01 00       	call   c001c3d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 c4 d8 01 c0       	push   0xc001d8c4
c00090a9:	e8 ad 70 00 00       	call   c001015b <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 06 13 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba 08 d9 01 c0       	mov    edx,0xc001d908
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 ba 12 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 98 1f 02 c0       	push   0xc0021f98
c000914d:	e8 5a 33 01 00       	call   c001c4ac <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 98 1f 02 c0       	push   0xc0021f98
c000916a:	e8 e7 33 01 00       	call   c001c556 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 88 1f 02 c0       	mov    eax,ds:0xc0021f88
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 60 1f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde0a0]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d 20 1f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde0e0]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 98 1f 02 c0       	push   0xc0021f98
c00091ec:	e8 a5 31 01 00       	call   c001c396 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 54 f7 01 c0       	push   0xc001f754
c00091fc:	68 98 1f 02 c0       	push   0xc0021f98
c0009201:	68 94 c3 01 c0       	push   0xc001c394
c0009206:	e8 87 11 00 00       	call   c000a392 <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 c8 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7c8
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d c8 f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7c8
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d c4 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7c4
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 c4 f7 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f7c4,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d c4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7c4,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 1c d9 01 c0       	push   0xc001d91c
c00092ff:	e8 57 6e 00 00       	call   c001015b <KePanic(char const*)>
c0009304:	8b 3d c4 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7c4
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d c4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7c4,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 c4 f7 01 c0       	mov    eax,ds:0xc001f7c4
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 c4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7c4,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 c4 f7 01 c0       	mov    ds:0xc001f7c4,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 ac 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fac
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 cc f7 01 c0 	imul   eax,DWORD PTR ds:0xc001f7cc
c00093bf:	03 05 d4 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7d4
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d cc f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7cc
c00093d5:	a1 d0 f7 01 c0       	mov    eax,ds:0xc001f7d0
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d d0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7d0,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 ac 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fac
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 83 da 01 c0       	push   0xc001da83
c0009419:	e8 3d 6d 00 00       	call   c001015b <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 28 44 02 c0       	mov    eax,ds:0xc0024428
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 9a da 01 c0       	push   0xc001da9a
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d d0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7d0,ebx
c00094b7:	c6 05 d8 f7 01 c0 43 	mov    BYTE PTR ds:0xc001f7d8,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 d4 f7 01 c0       	mov    ds:0xc001f7d4,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 cc f7 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f7cc,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 ac 1f 02 c0       	mov    ds:0xc0021fac,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 d0 f7 01 c0       	mov    eax,ds:0xc001f7d0
c00094e9:	f7 35 cc f7 01 c0    	div    DWORD PTR ds:0xc001f7cc
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS()>:
c0009500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009504:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000950f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000951a:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c000951f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009523:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000952e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009532:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009539:	90                   	nop
c000953a:	c3                   	ret    
c000953b:	90                   	nop

c000953c <VAS::VAS(VAS*)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009543:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000954e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009555:	83 ec 0c             	sub    esp,0xc
c0009558:	68 3c d9 01 c0       	push   0xc001d93c
c000955d:	e8 f9 6b 00 00       	call   c001015b <KePanic(char const*)>
c0009562:	83 c4 10             	add    esp,0x10
c0009565:	90                   	nop
c0009566:	83 c4 0c             	add    esp,0xc
c0009569:	c3                   	ret    

c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000956a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000956e:	89 c2                	mov    edx,eax
c0009570:	c1 e8 0a             	shr    eax,0xa
c0009573:	c1 ea 16             	shr    edx,0x16
c0009576:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000957b:	19 c9                	sbb    ecx,ecx
c000957d:	c1 e2 0c             	shl    edx,0xc
c0009580:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009586:	25 fc 0f 00 00       	and    eax,0xffc
c000958b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009592:	01 d0                	add    eax,edx
c0009594:	c3                   	ret    
c0009595:	90                   	nop

c0009596 <VAS::getPageTableEntry(unsigned long)>:
c0009596:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000959a:	89 ca                	mov    edx,ecx
c000959c:	c1 e9 0a             	shr    ecx,0xa
c000959f:	c1 ea 16             	shr    edx,0x16
c00095a2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095a8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095ae:	c1 e0 0c             	shl    eax,0xc
c00095b1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095b4:	c3                   	ret    

c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00095b5:	57                   	push   edi
c00095b6:	56                   	push   esi
c00095b7:	be 01 00 00 00       	mov    esi,0x1
c00095bc:	53                   	push   ebx
c00095bd:	83 ec 10             	sub    esp,0x10
c00095c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095c4:	c1 eb 0c             	shr    ebx,0xc
c00095c7:	eb 3f                	jmp    c0009608 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00095c9:	83 ec 08             	sub    esp,0x8
c00095cc:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c00095d1:	57                   	push   edi
c00095d2:	50                   	push   eax
c00095d3:	e8 be ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c00095d8:	83 c4 10             	add    esp,0x10
c00095db:	8b 00                	mov    eax,DWORD PTR [eax]
c00095dd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095e1:	f6 c4 04             	test   ah,0x4
c00095e4:	75 60                	jne    c0009646 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095e6:	80 fa 04             	cmp    dl,0x4
c00095e9:	74 79                	je     c0009664 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095eb:	80 fa 02             	cmp    dl,0x2
c00095ee:	0f 84 89 00 00 00    	je     c000967d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095f4:	80 fa 03             	cmp    dl,0x3
c00095f7:	0f 84 ae 00 00 00    	je     c00096ab <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095fd:	fe ca                	dec    dl
c00095ff:	0f 84 93 00 00 00    	je     c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009605:	43                   	inc    ebx
c0009606:	31 f6                	xor    esi,esi
c0009608:	53                   	push   ebx
c0009609:	89 df                	mov    edi,ebx
c000960b:	e8 51 fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c0009610:	c1 e7 0c             	shl    edi,0xc
c0009613:	5a                   	pop    edx
c0009614:	84 c0                	test   al,al
c0009616:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000961a:	75 ad                	jne    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000961c:	83 ec 0c             	sub    esp,0xc
c000961f:	68 b1 da 01 c0       	push   0xc001dab1
c0009624:	e8 32 6b 00 00       	call   c001015b <KePanic(char const*)>
c0009629:	5a                   	pop    edx
c000962a:	59                   	pop    ecx
c000962b:	57                   	push   edi
c000962c:	8b 3d b0 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021fb0
c0009632:	57                   	push   edi
c0009633:	e8 5e ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009638:	83 c4 10             	add    esp,0x10
c000963b:	8b 00                	mov    eax,DWORD PTR [eax]
c000963d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009641:	f6 c4 04             	test   ah,0x4
c0009644:	74 bf                	je     c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009646:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000964a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000964f:	83 ec 0c             	sub    esp,0xc
c0009652:	50                   	push   eax
c0009653:	e8 db e3 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009658:	83 c4 10             	add    esp,0x10
c000965b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000965f:	80 fa 04             	cmp    dl,0x4
c0009662:	75 87                	jne    c00095eb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009664:	89 f0                	mov    eax,esi
c0009666:	84 c0                	test   al,al
c0009668:	75 47                	jne    c00096b1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000966a:	c7 44 24 20 60 d9 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d960
c0009672:	83 c4 10             	add    esp,0x10
c0009675:	5b                   	pop    ebx
c0009676:	5e                   	pop    esi
c0009677:	5f                   	pop    edi
c0009678:	e9 de 6a 00 00       	jmp    c001015b <KePanic(char const*)>
c000967d:	89 f0                	mov    eax,esi
c000967f:	84 c0                	test   al,al
c0009681:	75 15                	jne    c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009683:	83 ec 0c             	sub    esp,0xc
c0009686:	68 cd da 01 c0       	push   0xc001dacd
c000968b:	e8 cb 6a 00 00       	call   c001015b <KePanic(char const*)>
c0009690:	83 c4 10             	add    esp,0x10
c0009693:	e9 6d ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009698:	83 ec 08             	sub    esp,0x8
c000969b:	6a 00                	push   0x0
c000969d:	53                   	push   ebx
c000969e:	e8 89 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a3:	83 c4 10             	add    esp,0x10
c00096a6:	e9 5a ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096ab:	89 f0                	mov    eax,esi
c00096ad:	84 c0                	test   al,al
c00096af:	75 15                	jne    c00096c6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096b1:	83 ec 08             	sub    esp,0x8
c00096b4:	6a 00                	push   0x0
c00096b6:	53                   	push   ebx
c00096b7:	e8 70 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096bc:	83 c4 10             	add    esp,0x10
c00096bf:	83 c4 10             	add    esp,0x10
c00096c2:	5b                   	pop    ebx
c00096c3:	5e                   	pop    esi
c00096c4:	5f                   	pop    edi
c00096c5:	c3                   	ret    
c00096c6:	c7 44 24 20 e9 da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dae9
c00096ce:	83 c4 10             	add    esp,0x10
c00096d1:	5b                   	pop    ebx
c00096d2:	5e                   	pop    esi
c00096d3:	5f                   	pop    edi
c00096d4:	e9 82 6a 00 00       	jmp    c001015b <KePanic(char const*)>
c00096d9:	90                   	nop

c00096da <VAS::freeAllocatedPages(unsigned long)>:
c00096da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096e2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096e6:	74 09                	je     c00096f1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096ec:	e9 c4 fe ff ff       	jmp    c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00096f1:	c7 44 24 04 84 d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d984
c00096f9:	e9 da 0d 00 00       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>

c00096fe <VAS::virtualToPhysical(unsigned long)>:
c00096fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009702:	50                   	push   eax
c0009703:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009707:	52                   	push   edx
c0009708:	e8 89 fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000970d:	59                   	pop    ecx
c000970e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009710:	5a                   	pop    edx
c0009711:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009716:	c3                   	ret    
c0009717:	90                   	nop

c0009718 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009718:	55                   	push   ebp
c0009719:	57                   	push   edi
c000971a:	56                   	push   esi
c000971b:	53                   	push   ebx
c000971c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009720:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009724:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009728:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000972c:	85 db                	test   ebx,ebx
c000972e:	7e 22                	jle    c0009752 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009730:	c1 e3 0c             	shl    ebx,0xc
c0009733:	01 f3                	add    ebx,esi
c0009735:	56                   	push   esi
c0009736:	81 c6 00 10 00 00    	add    esi,0x1000
c000973c:	55                   	push   ebp
c000973d:	e8 54 fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009742:	5a                   	pop    edx
c0009743:	59                   	pop    ecx
c0009744:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009746:	21 f9                	and    ecx,edi
c0009748:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000974c:	39 f3                	cmp    ebx,esi
c000974e:	89 08                	mov    DWORD PTR [eax],ecx
c0009750:	75 e3                	jne    c0009735 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009752:	5b                   	pop    ebx
c0009753:	5e                   	pop    esi
c0009754:	5f                   	pop    edi
c0009755:	5d                   	pop    ebp
c0009756:	c3                   	ret    
c0009757:	90                   	nop

c0009758 <VAS::setToWriteCombining(unsigned long, int)>:
c0009758:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000975d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009763:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000976a:	75 01                	jne    c000976d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000976c:	c3                   	ret    
c000976d:	68 80 00 00 00       	push   0x80
c0009772:	6a ff                	push   0xffffffff
c0009774:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009778:	50                   	push   eax
c0009779:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000977d:	52                   	push   edx
c000977e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009782:	51                   	push   ecx
c0009783:	e8 90 ff ff ff       	call   c0009718 <VAS::reflagRange(unsigned long, int, int, int)>
c0009788:	83 c4 14             	add    esp,0x14
c000978b:	c3                   	ret    

c000978c <VAS::mapOtherVASIn(bool, VAS*)>:
c000978c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009795:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000979c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000979f:	19 c0                	sbb    eax,eax
c00097a1:	83 ca 03             	or     edx,0x3
c00097a4:	83 e0 fc             	and    eax,0xfffffffc
c00097a7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097ae:	0f 20 d8             	mov    eax,cr3
c00097b1:	0f 22 d8             	mov    cr3,eax
c00097b4:	c3                   	ret    
c00097b5:	90                   	nop

c00097b6 <VAS::~VAS()>:
c00097b6:	83 ec 2c             	sub    esp,0x2c
c00097b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097c1:	fa                   	cli    
c00097c2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00097c7:	40                   	inc    eax
c00097c8:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00097cd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00097d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097d7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097e1:	6a 01                	push   0x1
c00097e3:	50                   	push   eax
c00097e4:	e8 a3 ff ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c00097e9:	83 c4 0c             	add    esp,0xc
c00097ec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097f4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097fc:	0f 8f d4 00 00 00    	jg     c00098d6 <VAS::~VAS()+0x120>
c0009802:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009806:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009809:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000980d:	c1 e2 02             	shl    edx,0x2
c0009810:	01 d0                	add    eax,edx
c0009812:	8b 00                	mov    eax,DWORD PTR [eax]
c0009814:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000981c:	83 e0 01             	and    eax,0x1
c000981f:	0f 84 a8 00 00 00    	je     c00098cd <VAS::~VAS()+0x117>
c0009825:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000982d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009835:	7f 72                	jg     c00098a9 <VAS::~VAS()+0xf3>
c0009837:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000983b:	c1 e0 0a             	shl    eax,0xa
c000983e:	89 c2                	mov    edx,eax
c0009840:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009844:	01 d0                	add    eax,edx
c0009846:	c1 e0 0c             	shl    eax,0xc
c0009849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000984d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009852:	8b 00                	mov    eax,DWORD PTR [eax]
c0009854:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009857:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000985d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009861:	6a 01                	push   0x1
c0009863:	50                   	push   eax
c0009864:	e8 01 fd ff ff       	call   c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009869:	83 c4 0c             	add    esp,0xc
c000986c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009874:	8b 00                	mov    eax,DWORD PTR [eax]
c0009876:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000987a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000987e:	25 01 04 00 00       	and    eax,0x401
c0009883:	3d 01 04 00 00       	cmp    eax,0x401
c0009888:	75 19                	jne    c00098a3 <VAS::~VAS()+0xed>
c000988a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000988e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009893:	83 ec 0c             	sub    esp,0xc
c0009896:	50                   	push   eax
c0009897:	e8 97 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098a3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098a7:	eb 84                	jmp    c000982d <VAS::~VAS()+0x77>
c00098a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ad:	25 00 04 00 00       	and    eax,0x400
c00098b2:	74 19                	je     c00098cd <VAS::~VAS()+0x117>
c00098b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098bd:	83 ec 0c             	sub    esp,0xc
c00098c0:	50                   	push   eax
c00098c1:	e8 6d e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098c6:	83 c4 10             	add    esp,0x10
c00098c9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098cd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098d1:	e9 1e ff ff ff       	jmp    c00097f4 <VAS::~VAS()+0x3e>
c00098d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098dd:	83 ec 0c             	sub    esp,0xc
c00098e0:	50                   	push   eax
c00098e1:	e8 cf fc ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00098e6:	83 c4 10             	add    esp,0x10
c00098e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 3a e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009900:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0009905:	48                   	dec    eax
c0009906:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000990b:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0009910:	85 c0                	test   eax,eax
c0009912:	75 01                	jne    c0009915 <VAS::~VAS()+0x15f>
c0009914:	fb                   	sti    
c0009915:	90                   	nop
c0009916:	83 c4 2c             	add    esp,0x2c
c0009919:	c3                   	ret    

c000991a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000991a:	55                   	push   ebp
c000991b:	57                   	push   edi
c000991c:	56                   	push   esi
c000991d:	53                   	push   ebx
c000991e:	83 ec 1c             	sub    esp,0x1c
c0009921:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009925:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009929:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000992f:	77 0b                	ja     c000993c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009931:	0f 20 d8             	mov    eax,cr3
c0009934:	0f 20 d8             	mov    eax,cr3
c0009937:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000993a:	75 47                	jne    c0009983 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000993c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009940:	09 d8                	or     eax,ebx
c0009942:	a9 ff 0f 00 00       	test   eax,0xfff
c0009947:	75 57                	jne    c00099a0 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009949:	89 de                	mov    esi,ebx
c000994b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000994e:	c1 ee 16             	shr    esi,0x16
c0009951:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009958:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000995c:	74 54                	je     c00099b2 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000995e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009962:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009968:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000996c:	c1 e6 0c             	shl    esi,0xc
c000996f:	c1 eb 0a             	shr    ebx,0xa
c0009972:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009978:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000997b:	83 c4 1c             	add    esp,0x1c
c000997e:	5b                   	pop    ebx
c000997f:	5e                   	pop    esi
c0009980:	5f                   	pop    edi
c0009981:	5d                   	pop    ebp
c0009982:	c3                   	ret    
c0009983:	83 ec 0c             	sub    esp,0xc
c0009986:	68 a8 d9 01 c0       	push   0xc001d9a8
c000998b:	e8 48 0b 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0009990:	83 c4 10             	add    esp,0x10
c0009993:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009997:	09 d8                	or     eax,ebx
c0009999:	a9 ff 0f 00 00       	test   eax,0xfff
c000999e:	74 a9                	je     c0009949 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099a0:	83 ec 0c             	sub    esp,0xc
c00099a3:	68 10 da 01 c0       	push   0xc001da10
c00099a8:	e8 ae 67 00 00       	call   c001015b <KePanic(char const*)>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	eb 97                	jmp    c0009949 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099b6:	e8 da e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099bb:	83 ec 0c             	sub    esp,0xc
c00099be:	89 c5                	mov    ebp,eax
c00099c0:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c00099c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099ca:	6a 01                	push   0x1
c00099cc:	e8 b4 f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00099d1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099d8:	6a 01                	push   0x1
c00099da:	50                   	push   eax
c00099db:	55                   	push   ebp
c00099dc:	81 cd 07 04 00 00    	or     ebp,0x407
c00099e2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099e6:	51                   	push   ecx
c00099e7:	e8 28 02 00 00       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099ec:	83 c4 1c             	add    esp,0x1c
c00099ef:	68 00 10 00 00       	push   0x1000
c00099f4:	6a 00                	push   0x0
c00099f6:	50                   	push   eax
c00099f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099fb:	e8 d0 6a ff ff       	call   c00004d0 <memset>
c0009a00:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a07:	e8 a9 fb ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a10:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a13:	83 c4 10             	add    esp,0x10
c0009a16:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a19:	e9 40 ff ff ff       	jmp    c000995e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a1e <VAS::allocatePages(int, int)>:
c0009a1e:	55                   	push   ebp
c0009a1f:	57                   	push   edi
c0009a20:	56                   	push   esi
c0009a21:	53                   	push   ebx
c0009a22:	83 ec 1c             	sub    esp,0x1c
c0009a25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a29:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009a2e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a34:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a3a:	83 e0 01             	and    eax,0x1
c0009a3d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a41:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a45:	0f 85 cc 00 00 00    	jne    c0009b17 <VAS::allocatePages(int, int)+0xf9>
c0009a4b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a52:	85 c0                	test   eax,eax
c0009a54:	0f 84 a1 00 00 00    	je     c0009afb <VAS::allocatePages(int, int)+0xdd>
c0009a5a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a62:	c1 e6 0c             	shl    esi,0xc
c0009a65:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a69:	85 c0                	test   eax,eax
c0009a6b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a6e:	7e 33                	jle    c0009aa3 <VAS::allocatePages(int, int)+0x85>
c0009a70:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a74:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a78:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a7e:	e8 12 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a83:	55                   	push   ebp
c0009a84:	53                   	push   ebx
c0009a85:	50                   	push   eax
c0009a86:	57                   	push   edi
c0009a87:	e8 8e fe ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a8c:	83 c4 10             	add    esp,0x10
c0009a8f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a94:	74 03                	je     c0009a99 <VAS::allocatePages(int, int)+0x7b>
c0009a96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a9f:	39 de                	cmp    esi,ebx
c0009aa1:	75 db                	jne    c0009a7e <VAS::allocatePages(int, int)+0x60>
c0009aa3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009aa8:	75 12                	jne    c0009abc <VAS::allocatePages(int, int)+0x9e>
c0009aaa:	0f 20 d8             	mov    eax,cr3
c0009aad:	0f 22 d8             	mov    cr3,eax
c0009ab0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ab4:	83 c4 1c             	add    esp,0x1c
c0009ab7:	5b                   	pop    ebx
c0009ab8:	5e                   	pop    esi
c0009ab9:	5f                   	pop    edi
c0009aba:	5d                   	pop    ebp
c0009abb:	c3                   	ret    
c0009abc:	c1 ee 0a             	shr    esi,0xa
c0009abf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ac3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ac9:	c1 eb 0a             	shr    ebx,0xa
c0009acc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ad2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ad8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ade:	39 c3                	cmp    ebx,eax
c0009ae0:	77 ce                	ja     c0009ab0 <VAS::allocatePages(int, int)+0x92>
c0009ae2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ae5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009aeb:	39 d8                	cmp    eax,ebx
c0009aed:	73 f3                	jae    c0009ae2 <VAS::allocatePages(int, int)+0xc4>
c0009aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009af3:	83 c4 1c             	add    esp,0x1c
c0009af6:	5b                   	pop    ebx
c0009af7:	5e                   	pop    esi
c0009af8:	5f                   	pop    edi
c0009af9:	5d                   	pop    ebp
c0009afa:	c3                   	ret    
c0009afb:	83 ec 0c             	sub    esp,0xc
c0009afe:	68 34 da 01 c0       	push   0xc001da34
c0009b03:	e8 53 66 00 00       	call   c001015b <KePanic(char const*)>
c0009b08:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b0f:	83 c4 10             	add    esp,0x10
c0009b12:	e9 43 ff ff ff       	jmp    c0009a5a <VAS::allocatePages(int, int)+0x3c>
c0009b17:	83 ec 0c             	sub    esp,0xc
c0009b1a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b1e:	51                   	push   ecx
c0009b1f:	e8 61 f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b28:	83 c4 10             	add    esp,0x10
c0009b2b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b30:	0f 87 9b 00 00 00    	ja     c0009bd1 <VAS::allocatePages(int, int)+0x1b3>
c0009b36:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b3a:	85 d2                	test   edx,edx
c0009b3c:	7e 3c                	jle    c0009b7a <VAS::allocatePages(int, int)+0x15c>
c0009b3e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b42:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b46:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b4a:	c1 e5 0c             	shl    ebp,0xc
c0009b4d:	81 ce 00 04 00 00    	or     esi,0x400
c0009b53:	01 dd                	add    ebp,ebx
c0009b55:	e8 3b df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b5a:	56                   	push   esi
c0009b5b:	53                   	push   ebx
c0009b5c:	50                   	push   eax
c0009b5d:	57                   	push   edi
c0009b5e:	e8 b7 fd ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b63:	83 c4 10             	add    esp,0x10
c0009b66:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b6b:	74 03                	je     c0009b70 <VAS::allocatePages(int, int)+0x152>
c0009b6d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b70:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b76:	39 dd                	cmp    ebp,ebx
c0009b78:	75 db                	jne    c0009b55 <VAS::allocatePages(int, int)+0x137>
c0009b7a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b7f:	0f 84 25 ff ff ff    	je     c0009aaa <VAS::allocatePages(int, int)+0x8c>
c0009b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b8d:	89 d3                	mov    ebx,edx
c0009b8f:	c1 e0 0c             	shl    eax,0xc
c0009b92:	c1 eb 0a             	shr    ebx,0xa
c0009b95:	01 d0                	add    eax,edx
c0009b97:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b9d:	c1 e8 0a             	shr    eax,0xa
c0009ba0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ba6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bab:	2d 00 00 40 00       	sub    eax,0x400000
c0009bb0:	39 c3                	cmp    ebx,eax
c0009bb2:	0f 87 f8 fe ff ff    	ja     c0009ab0 <VAS::allocatePages(int, int)+0x92>
c0009bb8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bbb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bc1:	39 d8                	cmp    eax,ebx
c0009bc3:	73 f3                	jae    c0009bb8 <VAS::allocatePages(int, int)+0x19a>
c0009bc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bc9:	83 c4 1c             	add    esp,0x1c
c0009bcc:	5b                   	pop    ebx
c0009bcd:	5e                   	pop    esi
c0009bce:	5f                   	pop    edi
c0009bcf:	5d                   	pop    ebp
c0009bd0:	c3                   	ret    
c0009bd1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bd6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bdc:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009be3:	0f 84 4d ff ff ff    	je     c0009b36 <VAS::allocatePages(int, int)+0x118>
c0009be9:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bf1:	e9 40 ff ff ff       	jmp    c0009b36 <VAS::allocatePages(int, int)+0x118>

c0009bf6 <VAS::setCPUSpecific(unsigned long)>:
c0009bf6:	83 ec 0c             	sub    esp,0xc
c0009bf9:	6a 05                	push   0x5
c0009bfb:	68 00 00 40 c2       	push   0xc2400000
c0009c00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c04:	50                   	push   eax
c0009c05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c09:	52                   	push   edx
c0009c0a:	e8 0b fd ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c0f:	83 c4 1c             	add    esp,0x1c
c0009c12:	c3                   	ret    
c0009c13:	90                   	nop

c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c14:	55                   	push   ebp
c0009c15:	57                   	push   edi
c0009c16:	56                   	push   esi
c0009c17:	53                   	push   ebx
c0009c18:	83 ec 1c             	sub    esp,0x1c
c0009c1b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009c20:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c2a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c2e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c34:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c38:	83 e0 01             	and    eax,0x1
c0009c3b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c43:	85 c0                	test   eax,eax
c0009c45:	7e 39                	jle    c0009c80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c4b:	89 f3                	mov    ebx,esi
c0009c4d:	c1 e0 0c             	shl    eax,0xc
c0009c50:	01 f0                	add    eax,esi
c0009c52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c56:	55                   	push   ebp
c0009c57:	53                   	push   ebx
c0009c58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c5c:	29 f0                	sub    eax,esi
c0009c5e:	01 d8                	add    eax,ebx
c0009c60:	50                   	push   eax
c0009c61:	57                   	push   edi
c0009c62:	e8 b3 fc ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c67:	83 c4 10             	add    esp,0x10
c0009c6a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c6f:	74 03                	je     c0009c74 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c71:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c74:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c7a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c7e:	75 d6                	jne    c0009c56 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c80:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c85:	75 10                	jne    c0009c97 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c87:	0f 20 d8             	mov    eax,cr3
c0009c8a:	0f 22 d8             	mov    cr3,eax
c0009c8d:	83 c4 1c             	add    esp,0x1c
c0009c90:	89 f0                	mov    eax,esi
c0009c92:	5b                   	pop    ebx
c0009c93:	5e                   	pop    esi
c0009c94:	5f                   	pop    edi
c0009c95:	5d                   	pop    ebp
c0009c96:	c3                   	ret    
c0009c97:	89 f3                	mov    ebx,esi
c0009c99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c9d:	c1 eb 0a             	shr    ebx,0xa
c0009ca0:	c1 e0 0c             	shl    eax,0xc
c0009ca3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ca9:	01 f0                	add    eax,esi
c0009cab:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cb1:	c1 e8 0a             	shr    eax,0xa
c0009cb4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cb9:	2d 00 00 40 00       	sub    eax,0x400000
c0009cbe:	39 c3                	cmp    ebx,eax
c0009cc0:	77 cb                	ja     c0009c8d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009cc2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ccb:	39 d8                	cmp    eax,ebx
c0009ccd:	73 f3                	jae    c0009cc2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009ccf:	83 c4 1c             	add    esp,0x1c
c0009cd2:	89 f0                	mov    eax,esi
c0009cd4:	5b                   	pop    ebx
c0009cd5:	5e                   	pop    esi
c0009cd6:	5f                   	pop    edi
c0009cd7:	5d                   	pop    ebp
c0009cd8:	c3                   	ret    
c0009cd9:	90                   	nop

c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009cda:	55                   	push   ebp
c0009cdb:	57                   	push   edi
c0009cdc:	56                   	push   esi
c0009cdd:	53                   	push   ebx
c0009cde:	83 ec 1c             	sub    esp,0x1c
c0009ce1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ce5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ce9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009ced:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009cf1:	a9 ff 0f 00 00       	test   eax,0xfff
c0009cf6:	75 4a                	jne    c0009d42 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009cf8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009cfc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009cff:	c1 eb 16             	shr    ebx,0x16
c0009d02:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d09:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d0d:	74 4d                	je     c0009d5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d13:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d17:	c1 e8 0a             	shr    eax,0xa
c0009d1a:	80 fa 01             	cmp    dl,0x1
c0009d1d:	19 d2                	sbb    edx,edx
c0009d1f:	c1 e3 0c             	shl    ebx,0xc
c0009d22:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d26:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d2c:	25 fc 0f 00 00       	and    eax,0xffc
c0009d31:	01 d8                	add    eax,ebx
c0009d33:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d3a:	83 c4 1c             	add    esp,0x1c
c0009d3d:	5b                   	pop    ebx
c0009d3e:	5e                   	pop    esi
c0009d3f:	5f                   	pop    edi
c0009d40:	5d                   	pop    ebp
c0009d41:	c3                   	ret    
c0009d42:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d46:	83 ec 0c             	sub    esp,0xc
c0009d49:	68 60 da 01 c0       	push   0xc001da60
c0009d4e:	e8 08 64 00 00       	call   c001015b <KePanic(char const*)>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d5a:	eb 9c                	jmp    c0009cf8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d60:	e8 30 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d65:	83 ec 0c             	sub    esp,0xc
c0009d68:	89 c5                	mov    ebp,eax
c0009d6a:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c0009d70:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d74:	6a 01                	push   0x1
c0009d76:	e8 0a f5 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009d7b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d82:	6a 01                	push   0x1
c0009d84:	50                   	push   eax
c0009d85:	55                   	push   ebp
c0009d86:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d8c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d90:	51                   	push   ecx
c0009d91:	e8 7e fe ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d96:	83 c4 1c             	add    esp,0x1c
c0009d99:	68 00 10 00 00       	push   0x1000
c0009d9e:	6a 00                	push   0x0
c0009da0:	50                   	push   eax
c0009da1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da5:	e8 26 67 ff ff       	call   c00004d0 <memset>
c0009daa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dae:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009db1:	e8 ff f7 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009db6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009db9:	83 c4 10             	add    esp,0x10
c0009dbc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009dbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009dc3:	e9 47 ff ff ff       	jmp    c0009d0f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009dc8 <VAS::VAS(bool)>:
c0009dc8:	53                   	push   ebx
c0009dc9:	83 ec 28             	sub    esp,0x28
c0009dcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009dd0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009dd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dd8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ddf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009de3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009dea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dee:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009df2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009df5:	e8 9b dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009dfa:	89 c2                	mov    edx,eax
c0009dfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e00:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e03:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0009e09:	83 ec 0c             	sub    esp,0xc
c0009e0c:	6a 01                	push   0x1
c0009e0e:	e8 72 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e13:	83 c4 10             	add    esp,0x10
c0009e16:	89 c2                	mov    edx,eax
c0009e18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e1c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e1f:	83 ec 0c             	sub    esp,0xc
c0009e22:	6a 03                	push   0x3
c0009e24:	6a 01                	push   0x1
c0009e26:	52                   	push   edx
c0009e27:	50                   	push   eax
c0009e28:	53                   	push   ebx
c0009e29:	e8 e6 fd ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e2e:	83 c4 20             	add    esp,0x20
c0009e31:	89 c2                	mov    edx,eax
c0009e33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e37:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e3a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e42:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e4a:	7f 1c                	jg     c0009e68 <VAS::VAS(bool)+0xa0>
c0009e4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e57:	c1 e2 02             	shl    edx,0x2
c0009e5a:	01 d0                	add    eax,edx
c0009e5c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e62:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e66:	eb da                	jmp    c0009e42 <VAS::VAS(bool)+0x7a>
c0009e68:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e70:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e78:	7f 7a                	jg     c0009ef4 <VAS::VAS(bool)+0x12c>
c0009e7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e7e:	2d 00 02 00 00       	sub    eax,0x200
c0009e83:	c1 e0 0c             	shl    eax,0xc
c0009e86:	83 c8 03             	or     eax,0x3
c0009e89:	89 c2                	mov    edx,eax
c0009e8b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009e90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e96:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e9c:	83 e0 10             	and    eax,0x10
c0009e9f:	84 c0                	test   al,al
c0009ea1:	74 07                	je     c0009eaa <VAS::VAS(bool)+0xe2>
c0009ea3:	b8 00 01 00 00       	mov    eax,0x100
c0009ea8:	eb 05                	jmp    c0009eaf <VAS::VAS(bool)+0xe7>
c0009eaa:	b8 00 00 00 00       	mov    eax,0x0
c0009eaf:	09 d0                	or     eax,edx
c0009eb1:	89 c1                	mov    ecx,eax
c0009eb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ebe:	c1 e2 02             	shl    edx,0x2
c0009ec1:	01 d0                	add    eax,edx
c0009ec3:	89 ca                	mov    edx,ecx
c0009ec5:	89 10                	mov    DWORD PTR [eax],edx
c0009ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ecb:	2d 40 03 00 00       	sub    eax,0x340
c0009ed0:	83 f8 7f             	cmp    eax,0x7f
c0009ed3:	77 16                	ja     c0009eeb <VAS::VAS(bool)+0x123>
c0009ed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009edc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ee0:	c1 e2 02             	shl    edx,0x2
c0009ee3:	01 d0                	add    eax,edx
c0009ee5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eeb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009eef:	e9 7c ff ff ff       	jmp    c0009e70 <VAS::VAS(bool)+0xa8>
c0009ef4:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009ef9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eff:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f05:	83 e0 10             	and    eax,0x10
c0009f08:	84 c0                	test   al,al
c0009f0a:	74 07                	je     c0009f13 <VAS::VAS(bool)+0x14b>
c0009f0c:	b8 03 41 00 00       	mov    eax,0x4103
c0009f11:	eb 05                	jmp    c0009f18 <VAS::VAS(bool)+0x150>
c0009f13:	b8 03 40 00 00       	mov    eax,0x4003
c0009f18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f1c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f1f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f25:	89 02                	mov    DWORD PTR [edx],eax
c0009f27:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f32:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f38:	83 ec 08             	sub    esp,0x8
c0009f3b:	50                   	push   eax
c0009f3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f40:	e8 b1 fc ff ff       	call   c0009bf6 <VAS::setCPUSpecific(unsigned long)>
c0009f45:	83 c4 10             	add    esp,0x10
c0009f48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f4f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f5a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f60:	83 e0 10             	and    eax,0x10
c0009f63:	84 c0                	test   al,al
c0009f65:	74 07                	je     c0009f6e <VAS::VAS(bool)+0x1a6>
c0009f67:	b8 00 01 00 00       	mov    eax,0x100
c0009f6c:	eb 05                	jmp    c0009f73 <VAS::VAS(bool)+0x1ab>
c0009f6e:	b8 00 00 00 00       	mov    eax,0x0
c0009f73:	09 c2                	or     edx,eax
c0009f75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f7c:	05 fc 0f 00 00       	add    eax,0xffc
c0009f81:	83 ca 03             	or     edx,0x3
c0009f84:	89 10                	mov    DWORD PTR [eax],edx
c0009f86:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f91:	83 ec 0c             	sub    esp,0xc
c0009f94:	50                   	push   eax
c0009f95:	e8 12 1c 00 00       	call   c000bbac <Device::getName()>
c0009f9a:	83 c4 10             	add    esp,0x10
c0009f9d:	83 ec 08             	sub    esp,0x8
c0009fa0:	68 03 db 01 c0       	push   0xc001db03
c0009fa5:	50                   	push   eax
c0009fa6:	e8 35 67 ff ff       	call   c00006e0 <strcmp>
c0009fab:	83 c4 10             	add    esp,0x10
c0009fae:	85 c0                	test   eax,eax
c0009fb0:	0f 94 c0             	sete   al
c0009fb3:	84 c0                	test   al,al
c0009fb5:	0f 84 87 00 00 00    	je     c000a042 <VAS::VAS(bool)+0x27a>
c0009fbb:	fa                   	cli    
c0009fbc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0009fc1:	40                   	inc    eax
c0009fc2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0009fc7:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fcc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fd2:	05 7c 09 00 00       	add    eax,0x97c
c0009fd7:	83 ec 0c             	sub    esp,0xc
c0009fda:	50                   	push   eax
c0009fdb:	e8 d6 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009fe0:	83 c4 10             	add    esp,0x10
c0009fe3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fe8:	89 c3                	mov    ebx,eax
c0009fea:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ff5:	05 7c 09 00 00       	add    eax,0x97c
c0009ffa:	83 ec 0c             	sub    esp,0xc
c0009ffd:	50                   	push   eax
c0009ffe:	e8 b3 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a003:	83 c4 10             	add    esp,0x10
c000a006:	83 ec 08             	sub    esp,0x8
c000a009:	50                   	push   eax
c000a00a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a00e:	e8 83 f5 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a013:	83 c4 10             	add    esp,0x10
c000a016:	8b 00                	mov    eax,DWORD PTR [eax]
c000a018:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a01d:	6a 11                	push   0x11
c000a01f:	53                   	push   ebx
c000a020:	50                   	push   eax
c000a021:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a025:	e8 f0 f8 ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a02a:	83 c4 10             	add    esp,0x10
c000a02d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a032:	48                   	dec    eax
c000a033:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a038:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a03d:	85 c0                	test   eax,eax
c000a03f:	75 01                	jne    c000a042 <VAS::VAS(bool)+0x27a>
c000a041:	fb                   	sti    
c000a042:	90                   	nop
c000a043:	83 c4 28             	add    esp,0x28
c000a046:	5b                   	pop    ebx
c000a047:	c3                   	ret    

c000a048 <VAS::evict(unsigned long)>:
c000a048:	55                   	push   ebp
c000a049:	57                   	push   edi
c000a04a:	56                   	push   esi
c000a04b:	53                   	push   ebx
c000a04c:	83 ec 1c             	sub    esp,0x1c
c000a04f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a053:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a057:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a05b:	e8 66 f3 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a060:	8b 0d cc f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7cc
c000a066:	89 c7                	mov    edi,eax
c000a068:	85 c9                	test   ecx,ecx
c000a06a:	7e 3e                	jle    c000a0aa <VAS::evict(unsigned long)+0x62>
c000a06c:	89 ee                	mov    esi,ebp
c000a06e:	31 db                	xor    ebx,ebx
c000a070:	83 ec 0c             	sub    esp,0xc
c000a073:	57                   	push   edi
c000a074:	e8 3b f3 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a079:	89 34 24             	mov    DWORD PTR [esp],esi
c000a07c:	01 d8                	add    eax,ebx
c000a07e:	6a 01                	push   0x1
c000a080:	31 d2                	xor    edx,edx
c000a082:	43                   	inc    ebx
c000a083:	52                   	push   edx
c000a084:	81 c6 00 02 00 00    	add    esi,0x200
c000a08a:	50                   	push   eax
c000a08b:	0f be 05 d8 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f7d8
c000a092:	8b 14 85 1c 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbce4]
c000a099:	52                   	push   edx
c000a09a:	e8 cd 2b 00 00       	call   c000cc6c <LogicalDisk::write(unsigned long long, int, void*)>
c000a09f:	83 c4 20             	add    esp,0x20
c000a0a2:	39 1d cc f7 01 c0    	cmp    DWORD PTR ds:0xc001f7cc,ebx
c000a0a8:	7f c6                	jg     c000a070 <VAS::evict(unsigned long)+0x28>
c000a0aa:	83 ec 08             	sub    esp,0x8
c000a0ad:	c1 e7 0b             	shl    edi,0xb
c000a0b0:	55                   	push   ebp
c000a0b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0b5:	50                   	push   eax
c000a0b6:	e8 db f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a0bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0bd:	89 d1                	mov    ecx,edx
c000a0bf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0c5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a0cb:	09 cf                	or     edi,ecx
c000a0cd:	89 38                	mov    DWORD PTR [eax],edi
c000a0cf:	89 14 24             	mov    DWORD PTR [esp],edx
c000a0d2:	ff 05 a8 1f 02 c0    	inc    DWORD PTR ds:0xc0021fa8
c000a0d8:	e8 56 d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a0dd:	0f 20 d8             	mov    eax,cr3
c000a0e0:	0f 22 d8             	mov    cr3,eax
c000a0e3:	a1 a4 1f 02 c0       	mov    eax,ds:0xc0021fa4
c000a0e8:	c7 44 24 40 11 db 01 c0 	mov    DWORD PTR [esp+0x40],0xc001db11
c000a0f0:	8d 50 01             	lea    edx,[eax+0x1]
c000a0f3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0f7:	89 15 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,edx
c000a0fd:	83 c4 2c             	add    esp,0x2c
c000a100:	5b                   	pop    ebx
c000a101:	5e                   	pop    esi
c000a102:	5f                   	pop    edi
c000a103:	5d                   	pop    ebp
c000a104:	e9 cf 03 00 00       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a109:	90                   	nop

c000a10a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a10a:	55                   	push   ebp
c000a10b:	57                   	push   edi
c000a10c:	56                   	push   esi
c000a10d:	53                   	push   ebx
c000a10e:	83 ec 14             	sub    esp,0x14
c000a111:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a115:	53                   	push   ebx
c000a116:	68 22 db 01 c0       	push   0xc001db22
c000a11b:	e8 b8 03 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a120:	83 c4 10             	add    esp,0x10
c000a123:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a129:	74 21                	je     c000a14c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a12b:	83 ec 08             	sub    esp,0x8
c000a12e:	53                   	push   ebx
c000a12f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a133:	57                   	push   edi
c000a134:	e8 5d f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a139:	83 c4 10             	add    esp,0x10
c000a13c:	89 c6                	mov    esi,eax
c000a13e:	85 c0                	test   eax,eax
c000a140:	74 0a                	je     c000a14c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a142:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a144:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a14a:	74 0a                	je     c000a156 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a14c:	31 c0                	xor    eax,eax
c000a14e:	83 c4 0c             	add    esp,0xc
c000a151:	5b                   	pop    ebx
c000a152:	5e                   	pop    esi
c000a153:	5f                   	pop    edi
c000a154:	5d                   	pop    ebp
c000a155:	c3                   	ret    
c000a156:	e8 3a d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a15b:	c1 ed 0b             	shr    ebp,0xb
c000a15e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a160:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a166:	09 c2                	or     edx,eax
c000a168:	81 ca 01 08 00 00    	or     edx,0x801
c000a16e:	89 16                	mov    DWORD PTR [esi],edx
c000a170:	8b 35 cc f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f7cc
c000a176:	85 f6                	test   esi,esi
c000a178:	7e 3e                	jle    c000a1b8 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a17a:	89 df                	mov    edi,ebx
c000a17c:	31 f6                	xor    esi,esi
c000a17e:	83 ec 0c             	sub    esp,0xc
c000a181:	55                   	push   ebp
c000a182:	e8 2d f2 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a187:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a18a:	01 f0                	add    eax,esi
c000a18c:	6a 01                	push   0x1
c000a18e:	31 d2                	xor    edx,edx
c000a190:	46                   	inc    esi
c000a191:	52                   	push   edx
c000a192:	81 c7 00 02 00 00    	add    edi,0x200
c000a198:	50                   	push   eax
c000a199:	0f be 05 d8 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f7d8
c000a1a0:	8b 0c 85 1c 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbce4]
c000a1a7:	51                   	push   ecx
c000a1a8:	e8 53 2a 00 00       	call   c000cc00 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1ad:	83 c4 20             	add    esp,0x20
c000a1b0:	39 35 cc f7 01 c0    	cmp    DWORD PTR ds:0xc001f7cc,esi
c000a1b6:	7f c6                	jg     c000a17e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1b8:	a1 a8 1f 02 c0       	mov    eax,ds:0xc0021fa8
c000a1bd:	48                   	dec    eax
c000a1be:	52                   	push   edx
c000a1bf:	a3 a8 1f 02 c0       	mov    ds:0xc0021fa8,eax
c000a1c4:	50                   	push   eax
c000a1c5:	53                   	push   ebx
c000a1c6:	68 35 db 01 c0       	push   0xc001db35
c000a1cb:	e8 08 03 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a1d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a1d3:	e8 be f1 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a1d8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a1dd:	83 c4 10             	add    esp,0x10
c000a1e0:	48                   	dec    eax
c000a1e1:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a1e6:	85 c0                	test   eax,eax
c000a1e8:	75 01                	jne    c000a1eb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a1ea:	fb                   	sti    
c000a1eb:	0f 20 d8             	mov    eax,cr3
c000a1ee:	0f 22 d8             	mov    cr3,eax
c000a1f1:	b0 01                	mov    al,0x1
c000a1f3:	e9 56 ff ff ff       	jmp    c000a14e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a1f8 <VAS::scanForEviction()>:
c000a1f8:	57                   	push   edi
c000a1f9:	31 ff                	xor    edi,edi
c000a1fb:	56                   	push   esi
c000a1fc:	53                   	push   ebx
c000a1fd:	83 ec 10             	sub    esp,0x10
c000a200:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a204:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a207:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a20d:	75 0e                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a20f:	89 da                	mov    edx,ebx
c000a211:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a214:	c1 ea 16             	shr    edx,0x16
c000a217:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a21b:	74 4e                	je     c000a26b <VAS::scanForEviction()+0x73>
c000a21d:	53                   	push   ebx
c000a21e:	56                   	push   esi
c000a21f:	e8 72 f3 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a224:	5a                   	pop    edx
c000a225:	8b 10                	mov    edx,DWORD PTR [eax]
c000a227:	59                   	pop    ecx
c000a228:	89 d1                	mov    ecx,edx
c000a22a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a230:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a236:	74 3e                	je     c000a276 <VAS::scanForEviction()+0x7e>
c000a238:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a23e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a244:	76 2b                	jbe    c000a271 <VAS::scanForEviction()+0x79>
c000a246:	47                   	inc    edi
c000a247:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a24e:	83 ff 03             	cmp    edi,0x3
c000a251:	74 32                	je     c000a285 <VAS::scanForEviction()+0x8d>
c000a253:	31 db                	xor    ebx,ebx
c000a255:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a25b:	75 c0                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a25d:	89 da                	mov    edx,ebx
c000a25f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a262:	c1 ea 16             	shr    edx,0x16
c000a265:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a269:	75 b2                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a26b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a271:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a274:	eb 91                	jmp    c000a207 <VAS::scanForEviction()+0xf>
c000a276:	f6 c2 20             	test   dl,0x20
c000a279:	74 13                	je     c000a28e <VAS::scanForEviction()+0x96>
c000a27b:	83 e2 df             	and    edx,0xffffffdf
c000a27e:	89 10                	mov    DWORD PTR [eax],edx
c000a280:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a283:	eb b3                	jmp    c000a238 <VAS::scanForEviction()+0x40>
c000a285:	83 c4 10             	add    esp,0x10
c000a288:	31 c0                	xor    eax,eax
c000a28a:	5b                   	pop    ebx
c000a28b:	5e                   	pop    esi
c000a28c:	5f                   	pop    edi
c000a28d:	c3                   	ret    
c000a28e:	83 ec 08             	sub    esp,0x8
c000a291:	89 d0                	mov    eax,edx
c000a293:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a298:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a29c:	53                   	push   ebx
c000a29d:	68 4a db 01 c0       	push   0xc001db4a
c000a2a2:	e8 31 02 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a2a7:	58                   	pop    eax
c000a2a8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2ab:	5a                   	pop    edx
c000a2ac:	51                   	push   ecx
c000a2ad:	56                   	push   esi
c000a2ae:	e8 95 fd ff ff       	call   c000a048 <VAS::evict(unsigned long)>
c000a2b3:	5b                   	pop    ebx
c000a2b4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2b7:	5f                   	pop    edi
c000a2b8:	50                   	push   eax
c000a2b9:	68 5e db 01 c0       	push   0xc001db5e
c000a2be:	e8 15 02 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a2c3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2d1:	83 c4 10             	add    esp,0x10
c000a2d4:	5b                   	pop    ebx
c000a2d5:	5e                   	pop    esi
c000a2d6:	5f                   	pop    edi
c000a2d7:	c3                   	ret    

c000a2d8 <mapVASFirstTime>:
c000a2d8:	55                   	push   ebp
c000a2d9:	57                   	push   edi
c000a2da:	56                   	push   esi
c000a2db:	53                   	push   ebx
c000a2dc:	83 ec 0c             	sub    esp,0xc
c000a2df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a2e4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a2e7:	4a                   	dec    edx
c000a2e8:	0f 84 8c 00 00 00    	je     c000a37a <mapVASFirstTime+0xa2>
c000a2ee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a2f1:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a2f4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a2f9:	c1 e5 15             	shl    ebp,0x15
c000a2fc:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a301:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a307:	29 eb                	sub    ebx,ebp
c000a309:	29 ef                	sub    edi,ebp
c000a30b:	e8 85 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a310:	83 ec 0c             	sub    esp,0xc
c000a313:	68 03 04 00 00       	push   0x403
c000a318:	6a 01                	push   0x1
c000a31a:	53                   	push   ebx
c000a31b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a321:	50                   	push   eax
c000a322:	56                   	push   esi
c000a323:	e8 ec f8 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a328:	83 c4 20             	add    esp,0x20
c000a32b:	39 fb                	cmp    ebx,edi
c000a32d:	75 dc                	jne    c000a30b <mapVASFirstTime+0x33>
c000a32f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a334:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a339:	29 eb                	sub    ebx,ebp
c000a33b:	29 ef                	sub    edi,ebp
c000a33d:	e8 53 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a342:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a346:	19 d2                	sbb    edx,edx
c000a348:	83 ec 0c             	sub    esp,0xc
c000a34b:	83 e2 04             	and    edx,0x4
c000a34e:	81 c2 03 04 00 00    	add    edx,0x403
c000a354:	52                   	push   edx
c000a355:	6a 01                	push   0x1
c000a357:	53                   	push   ebx
c000a358:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a35e:	50                   	push   eax
c000a35f:	56                   	push   esi
c000a360:	e8 af f8 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a365:	83 c4 20             	add    esp,0x20
c000a368:	39 df                	cmp    edi,ebx
c000a36a:	75 d1                	jne    c000a33d <mapVASFirstTime+0x65>
c000a36c:	0f 20 d8             	mov    eax,cr3
c000a36f:	0f 22 d8             	mov    cr3,eax
c000a372:	83 c4 0c             	add    esp,0xc
c000a375:	5b                   	pop    ebx
c000a376:	5e                   	pop    esi
c000a377:	5f                   	pop    edi
c000a378:	5d                   	pop    ebp
c000a379:	c3                   	ret    
c000a37a:	83 ec 0c             	sub    esp,0xc
c000a37d:	68 71 db 01 c0       	push   0xc001db71
c000a382:	e8 51 01 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a387:	83 c4 10             	add    esp,0x10
c000a38a:	83 c4 0c             	add    esp,0xc
c000a38d:	5b                   	pop    ebx
c000a38e:	5e                   	pop    esi
c000a38f:	5f                   	pop    edi
c000a390:	5d                   	pop    ebp
c000a391:	c3                   	ret    

c000a392 <__cxa_atexit>:
c000a392:	31 c0                	xor    eax,eax
c000a394:	c3                   	ret    

c000a395 <__cxa_finalize>:
c000a395:	c3                   	ret    

c000a396 <__stack_chk_fail>:
c000a396:	55                   	push   ebp
c000a397:	89 e5                	mov    ebp,esp
c000a399:	83 ec 10             	sub    esp,0x10
c000a39c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a39f:	68 8a db 01 c0       	push   0xc001db8a
c000a3a4:	e8 2f 01 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a3a9:	58                   	pop    eax
c000a3aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3ad:	5a                   	pop    edx
c000a3ae:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a3b1:	68 8a db 01 c0       	push   0xc001db8a
c000a3b6:	e8 1d 01 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a3bb:	c7 04 24 92 db 01 c0 	mov    DWORD PTR [esp],0xc001db92
c000a3c2:	e8 94 5d 00 00       	call   c001015b <KePanic(char const*)>
c000a3c7:	83 c4 10             	add    esp,0x10
c000a3ca:	c9                   	leave  
c000a3cb:	c3                   	ret    

c000a3cc <__cxa_pure_virtual>:
c000a3cc:	83 ec 18             	sub    esp,0x18
c000a3cf:	68 aa db 01 c0       	push   0xc001dbaa
c000a3d4:	e8 82 5d 00 00       	call   c001015b <KePanic(char const*)>
c000a3d9:	83 c4 1c             	add    esp,0x1c
c000a3dc:	c3                   	ret    

c000a3dd <operator new[](unsigned long)>:
c000a3dd:	e9 d7 d3 ff ff       	jmp    c00077b9 <malloc>

c000a3e2 <operator delete(void*, unsigned long)>:
c000a3e2:	e9 f2 d3 ff ff       	jmp    c00077d9 <rfree>

c000a3e7 <operator delete[](void*)>:
c000a3e7:	e9 ed d3 ff ff       	jmp    c00077d9 <rfree>

c000a3ec <operator delete[](void*, unsigned long)>:
c000a3ec:	e9 e8 d3 ff ff       	jmp    c00077d9 <rfree>

c000a3f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a3f1:	55                   	push   ebp
c000a3f2:	b9 04 00 00 00       	mov    ecx,0x4
c000a3f7:	57                   	push   edi
c000a3f8:	56                   	push   esi
c000a3f9:	be b3 d7 01 c0       	mov    esi,0xc001d7b3
c000a3fe:	53                   	push   ebx
c000a3ff:	83 ec 20             	sub    esp,0x20
c000a402:	a1 b2 d7 01 c0       	mov    eax,ds:0xc001d7b2
c000a407:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a40b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a40f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a413:	a1 bf d7 01 c0       	mov    eax,ds:0xc001d7bf
c000a418:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a41c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a420:	fc                   	cld    
c000a421:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a423:	89 ee                	mov    esi,ebp
c000a425:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a429:	eb 02                	jmp    c000a42d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a42b:	89 c6                	mov    esi,eax
c000a42d:	31 d2                	xor    edx,edx
c000a42f:	41                   	inc    ecx
c000a430:	89 f0                	mov    eax,esi
c000a432:	f7 f3                	div    ebx
c000a434:	39 de                	cmp    esi,ebx
c000a436:	73 f3                	jae    c000a42b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a438:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a43b:	eb 02                	jmp    c000a43f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a43d:	89 c5                	mov    ebp,eax
c000a43f:	31 d2                	xor    edx,edx
c000a441:	49                   	dec    ecx
c000a442:	89 e8                	mov    eax,ebp
c000a444:	f7 f3                	div    ebx
c000a446:	39 dd                	cmp    ebp,ebx
c000a448:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a44c:	88 11                	mov    BYTE PTR [ecx],dl
c000a44e:	73 ed                	jae    c000a43d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a454:	83 c4 20             	add    esp,0x20
c000a457:	5b                   	pop    ebx
c000a458:	5e                   	pop    esi
c000a459:	5f                   	pop    edi
c000a45a:	5d                   	pop    ebp
c000a45b:	c3                   	ret    

c000a45c <Dbg::logc(char)>:
c000a45c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a460:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a467:	75 12                	jne    c000a47b <Dbg::logc(char)+0x1f>
c000a469:	ba fd 03 00 00       	mov    edx,0x3fd
c000a46e:	ec                   	in     al,dx
c000a46f:	a8 20                	test   al,0x20
c000a471:	74 fb                	je     c000a46e <Dbg::logc(char)+0x12>
c000a473:	ba f8 03 00 00       	mov    edx,0x3f8
c000a478:	88 c8                	mov    al,cl
c000a47a:	ee                   	out    dx,al
c000a47b:	c3                   	ret    

c000a47c <Dbg::logs(char*)>:
c000a47c:	53                   	push   ebx
c000a47d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a481:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a484:	84 c0                	test   al,al
c000a486:	74 0f                	je     c000a497 <Dbg::logs(char*)+0x1b>
c000a488:	50                   	push   eax
c000a489:	43                   	inc    ebx
c000a48a:	e8 cd ff ff ff       	call   c000a45c <Dbg::logc(char)>
c000a48f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a492:	5a                   	pop    edx
c000a493:	84 c0                	test   al,al
c000a495:	75 f1                	jne    c000a488 <Dbg::logs(char*)+0xc>
c000a497:	5b                   	pop    ebx
c000a498:	c3                   	ret    

c000a499 <Dbg::logWriteInt(unsigned int)>:
c000a499:	83 ec 10             	sub    esp,0x10
c000a49c:	6a 0a                	push   0xa
c000a49e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4a2:	50                   	push   eax
c000a4a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4a7:	50                   	push   eax
c000a4a8:	e8 44 ff ff ff       	call   c000a3f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4ad:	50                   	push   eax
c000a4ae:	e8 c9 ff ff ff       	call   c000a47c <Dbg::logs(char*)>
c000a4b3:	83 c4 20             	add    esp,0x20
c000a4b6:	c3                   	ret    

c000a4b7 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a4b7:	83 ec 10             	sub    esp,0x10
c000a4ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4be:	50                   	push   eax
c000a4bf:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4c3:	50                   	push   eax
c000a4c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4c8:	52                   	push   edx
c000a4c9:	e8 23 ff ff ff       	call   c000a3f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4ce:	50                   	push   eax
c000a4cf:	e8 a8 ff ff ff       	call   c000a47c <Dbg::logs(char*)>
c000a4d4:	83 c4 20             	add    esp,0x20
c000a4d7:	c3                   	ret    

c000a4d8 <Dbg::kprintf(char const*, ...)>:
c000a4d8:	55                   	push   ebp
c000a4d9:	57                   	push   edi
c000a4da:	56                   	push   esi
c000a4db:	53                   	push   ebx
c000a4dc:	83 ec 0c             	sub    esp,0xc
c000a4df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a4e3:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a4ea:	74 08                	je     c000a4f4 <Dbg::kprintf(char const*, ...)+0x1c>
c000a4ec:	83 c4 0c             	add    esp,0xc
c000a4ef:	5b                   	pop    ebx
c000a4f0:	5e                   	pop    esi
c000a4f1:	5f                   	pop    edi
c000a4f2:	5d                   	pop    ebp
c000a4f3:	c3                   	ret    
c000a4f4:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a4f8:	31 ff                	xor    edi,edi
c000a4fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4fe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a501:	84 c0                	test   al,al
c000a503:	74 e7                	je     c000a4ec <Dbg::kprintf(char const*, ...)+0x14>
c000a505:	8d 77 01             	lea    esi,[edi+0x1]
c000a508:	3c 25                	cmp    al,0x25
c000a50a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a50d:	75 47                	jne    c000a556 <Dbg::kprintf(char const*, ...)+0x7e>
c000a50f:	83 c7 02             	add    edi,0x2
c000a512:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a515:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a518:	83 e8 25             	sub    eax,0x25
c000a51b:	3c 53                	cmp    al,0x53
c000a51d:	0f 87 d2 00 00 00    	ja     c000a5f5 <Dbg::kprintf(char const*, ...)+0x11d>
c000a523:	25 ff 00 00 00       	and    eax,0xff
c000a528:	ff 24 85 c0 db 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2440]
c000a52f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a533:	89 c8                	mov    eax,ecx
c000a535:	83 c1 04             	add    ecx,0x4
c000a538:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a53c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a53e:	55                   	push   ebp
c000a53f:	e8 55 ff ff ff       	call   c000a499 <Dbg::logWriteInt(unsigned int)>
c000a544:	58                   	pop    eax
c000a545:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a548:	84 c0                	test   al,al
c000a54a:	74 a0                	je     c000a4ec <Dbg::kprintf(char const*, ...)+0x14>
c000a54c:	8d 77 01             	lea    esi,[edi+0x1]
c000a54f:	3c 25                	cmp    al,0x25
c000a551:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a554:	74 b9                	je     c000a50f <Dbg::kprintf(char const*, ...)+0x37>
c000a556:	50                   	push   eax
c000a557:	89 f7                	mov    edi,esi
c000a559:	e8 fe fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a55e:	89 ee                	mov    esi,ebp
c000a560:	58                   	pop    eax
c000a561:	eb e2                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a563:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a567:	89 c8                	mov    eax,ecx
c000a569:	83 c1 04             	add    ecx,0x4
c000a56c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a56e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a572:	50                   	push   eax
c000a573:	e8 04 ff ff ff       	call   c000a47c <Dbg::logs(char*)>
c000a578:	58                   	pop    eax
c000a579:	eb ca                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a57b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a57f:	89 d0                	mov    eax,edx
c000a581:	83 c2 04             	add    edx,0x4
c000a584:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a588:	8b 00                	mov    eax,DWORD PTR [eax]
c000a58a:	50                   	push   eax
c000a58b:	e8 09 ff ff ff       	call   c000a499 <Dbg::logWriteInt(unsigned int)>
c000a590:	58                   	pop    eax
c000a591:	eb b2                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a593:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a597:	89 d0                	mov    eax,edx
c000a599:	83 c2 04             	add    edx,0x4
c000a59c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a59f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5a3:	50                   	push   eax
c000a5a4:	e8 b3 fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a5a9:	58                   	pop    eax
c000a5aa:	eb 99                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5b0:	89 c8                	mov    eax,ecx
c000a5b2:	83 c1 04             	add    ecx,0x4
c000a5b5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5b9:	6a 10                	push   0x10
c000a5bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5bd:	51                   	push   ecx
c000a5be:	e8 f4 fe ff ff       	call   c000a4b7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5c3:	5d                   	pop    ebp
c000a5c4:	58                   	pop    eax
c000a5c5:	e9 7b ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5ce:	89 d0                	mov    eax,edx
c000a5d0:	83 c2 08             	add    edx,0x8
c000a5d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5d7:	6a 10                	push   0x10
c000a5d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5db:	50                   	push   eax
c000a5dc:	e8 d6 fe ff ff       	call   c000a4b7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5e1:	58                   	pop    eax
c000a5e2:	5a                   	pop    edx
c000a5e3:	e9 5d ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5e8:	6a 25                	push   0x25
c000a5ea:	e8 6d fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a5ef:	5a                   	pop    edx
c000a5f0:	e9 50 ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5f5:	6a 25                	push   0x25
c000a5f7:	e8 60 fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a5fc:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a600:	50                   	push   eax
c000a601:	e8 56 fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a606:	5a                   	pop    edx
c000a607:	59                   	pop    ecx
c000a608:	e9 38 ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a60d:	90                   	nop

c000a60e <File::read(unsigned long long, void*, int*)>:
c000a60e:	53                   	push   ebx
c000a60f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a613:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a617:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a61e:	3c 19                	cmp    al,0x19
c000a620:	77 35                	ja     c000a657 <File::read(unsigned long long, void*, int*)+0x49>
c000a622:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a629:	85 c0                	test   eax,eax
c000a62b:	74 2a                	je     c000a657 <File::read(unsigned long long, void*, int*)+0x49>
c000a62d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a633:	85 c0                	test   eax,eax
c000a635:	74 20                	je     c000a657 <File::read(unsigned long long, void*, int*)+0x49>
c000a637:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a63b:	74 21                	je     c000a65e <File::read(unsigned long long, void*, int*)+0x50>
c000a63d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a63f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a643:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a649:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a64d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a651:	5b                   	pop    ebx
c000a652:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a655:	ff e0                	jmp    eax
c000a657:	b8 0b 00 00 00       	mov    eax,0xb
c000a65c:	eb 05                	jmp    c000a663 <File::read(unsigned long long, void*, int*)+0x55>
c000a65e:	b8 05 00 00 00       	mov    eax,0x5
c000a663:	5b                   	pop    ebx
c000a664:	c3                   	ret    
c000a665:	90                   	nop

c000a666 <File::write(unsigned long long, void*, int*)>:
c000a666:	53                   	push   ebx
c000a667:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a66b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a66f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a676:	3c 19                	cmp    al,0x19
c000a678:	77 35                	ja     c000a6af <File::write(unsigned long long, void*, int*)+0x49>
c000a67a:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a681:	85 c0                	test   eax,eax
c000a683:	74 2a                	je     c000a6af <File::write(unsigned long long, void*, int*)+0x49>
c000a685:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a68b:	85 c0                	test   eax,eax
c000a68d:	74 20                	je     c000a6af <File::write(unsigned long long, void*, int*)+0x49>
c000a68f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a693:	74 21                	je     c000a6b6 <File::write(unsigned long long, void*, int*)+0x50>
c000a695:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a697:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a69b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6a9:	5b                   	pop    ebx
c000a6aa:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a6ad:	ff e0                	jmp    eax
c000a6af:	b8 0b 00 00 00       	mov    eax,0xb
c000a6b4:	eb 05                	jmp    c000a6bb <File::write(unsigned long long, void*, int*)+0x55>
c000a6b6:	b8 05 00 00 00       	mov    eax,0x5
c000a6bb:	5b                   	pop    ebx
c000a6bc:	c3                   	ret    
c000a6bd:	90                   	nop

c000a6be <Directory::read(unsigned long long, void*, int*)>:
c000a6be:	53                   	push   ebx
c000a6bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6c7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6ce:	3c 19                	cmp    al,0x19
c000a6d0:	77 35                	ja     c000a707 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6d2:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a6d9:	85 c0                	test   eax,eax
c000a6db:	74 2a                	je     c000a707 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6dd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6e3:	85 c0                	test   eax,eax
c000a6e5:	74 20                	je     c000a707 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6eb:	74 21                	je     c000a70e <Directory::read(unsigned long long, void*, int*)+0x50>
c000a6ed:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6f3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a701:	5b                   	pop    ebx
c000a702:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a705:	ff e0                	jmp    eax
c000a707:	b8 0b 00 00 00       	mov    eax,0xb
c000a70c:	eb 05                	jmp    c000a713 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a70e:	b8 05 00 00 00       	mov    eax,0x5
c000a713:	5b                   	pop    ebx
c000a714:	c3                   	ret    
c000a715:	90                   	nop

c000a716 <Directory::write(unsigned long long, void*, int*)>:
c000a716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a71a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a721:	b8 0b 00 00 00       	mov    eax,0xb
c000a726:	80 fa 19             	cmp    dl,0x19
c000a729:	77 18                	ja     c000a743 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a72b:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000a732:	85 d2                	test   edx,edx
c000a734:	74 0d                	je     c000a743 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a736:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a73d:	19 c0                	sbb    eax,eax
c000a73f:	83 e0 0a             	and    eax,0xa
c000a742:	40                   	inc    eax
c000a743:	c3                   	ret    

c000a744 <File::isAtty()>:
c000a744:	31 c0                	xor    eax,eax
c000a746:	c3                   	ret    
c000a747:	90                   	nop

c000a748 <Directory::isAtty()>:
c000a748:	31 c0                	xor    eax,eax
c000a74a:	c3                   	ret    
c000a74b:	90                   	nop

c000a74c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a74c:	b8 0a 00 00 00       	mov    eax,0xa
c000a751:	c3                   	ret    

c000a752 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a752:	b8 0a 00 00 00       	mov    eax,0xa
c000a757:	c3                   	ret    

c000a758 <Filesystem::allocateSwapfile(char const*, int)>:
c000a758:	31 c0                	xor    eax,eax
c000a75a:	31 d2                	xor    edx,edx
c000a75c:	c3                   	ret    
c000a75d:	90                   	nop

c000a75e <File::~File()>:
c000a75e:	83 ec 0c             	sub    esp,0xc
c000a761:	ba 80 dd 01 c0       	mov    edx,0xc001dd80
c000a766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a76a:	89 10                	mov    DWORD PTR [eax],edx
c000a76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a770:	83 ec 0c             	sub    esp,0xc
c000a773:	50                   	push   eax
c000a774:	e8 ab e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a779:	83 c4 10             	add    esp,0x10
c000a77c:	90                   	nop
c000a77d:	83 c4 0c             	add    esp,0xc
c000a780:	c3                   	ret    
c000a781:	90                   	nop

c000a782 <File::~File()>:
c000a782:	83 ec 0c             	sub    esp,0xc
c000a785:	83 ec 0c             	sub    esp,0xc
c000a788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a78c:	e8 cd ff ff ff       	call   c000a75e <File::~File()>
c000a791:	83 c4 10             	add    esp,0x10
c000a794:	83 ec 08             	sub    esp,0x8
c000a797:	68 14 01 00 00       	push   0x114
c000a79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7a0:	e8 3d fc ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000a7a5:	83 c4 10             	add    esp,0x10
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	c3                   	ret    

c000a7ac <Directory::~Directory()>:
c000a7ac:	83 ec 0c             	sub    esp,0xc
c000a7af:	ba 9c dd 01 c0       	mov    edx,0xc001dd9c
c000a7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7b8:	89 10                	mov    DWORD PTR [eax],edx
c000a7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7be:	83 ec 0c             	sub    esp,0xc
c000a7c1:	50                   	push   eax
c000a7c2:	e8 5d e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	90                   	nop
c000a7cb:	83 c4 0c             	add    esp,0xc
c000a7ce:	c3                   	ret    
c000a7cf:	90                   	nop

c000a7d0 <Directory::~Directory()>:
c000a7d0:	83 ec 0c             	sub    esp,0xc
c000a7d3:	83 ec 0c             	sub    esp,0xc
c000a7d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7da:	e8 cd ff ff ff       	call   c000a7ac <Directory::~Directory()>
c000a7df:	83 c4 10             	add    esp,0x10
c000a7e2:	83 ec 08             	sub    esp,0x8
c000a7e5:	68 14 01 00 00       	push   0x114
c000a7ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ee:	e8 ef fb ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000a7f3:	83 c4 10             	add    esp,0x10
c000a7f6:	83 c4 0c             	add    esp,0xc
c000a7f9:	c3                   	ret    

c000a7fa <Filesystem::Filesystem()>:
c000a7fa:	ba 18 dd 01 c0       	mov    edx,0xc001dd18
c000a7ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a803:	89 10                	mov    DWORD PTR [eax],edx
c000a805:	8b 15 b4 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fb4
c000a80b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a80f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a816:	a3 b4 1f 02 c0       	mov    ds:0xc0021fb4,eax
c000a81b:	90                   	nop
c000a81c:	c3                   	ret    
c000a81d:	90                   	nop

c000a81e <Filesystem::~Filesystem()>:
c000a81e:	ba 18 dd 01 c0       	mov    edx,0xc001dd18
c000a823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a827:	89 10                	mov    DWORD PTR [eax],edx
c000a829:	90                   	nop
c000a82a:	c3                   	ret    
c000a82b:	90                   	nop

c000a82c <Filesystem::~Filesystem()>:
c000a82c:	83 ec 0c             	sub    esp,0xc
c000a82f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a833:	e8 e6 ff ff ff       	call   c000a81e <Filesystem::~Filesystem()>
c000a838:	83 c4 04             	add    esp,0x4
c000a83b:	83 ec 08             	sub    esp,0x8
c000a83e:	6a 08                	push   0x8
c000a840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a844:	e8 99 fb ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000a849:	83 c4 10             	add    esp,0x10
c000a84c:	83 c4 0c             	add    esp,0xc
c000a84f:	c3                   	ret    

c000a850 <Fs::getcwd(Process*, char*, int)>:
c000a850:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a854:	31 c0                	xor    eax,eax
c000a856:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a859:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a85d:	7d 15                	jge    c000a874 <Fs::getcwd(Process*, char*, int)+0x24>
c000a85f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a863:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a86a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a86d:	84 c9                	test   cl,cl
c000a86f:	74 06                	je     c000a877 <Fs::getcwd(Process*, char*, int)+0x27>
c000a871:	40                   	inc    eax
c000a872:	eb e2                	jmp    c000a856 <Fs::getcwd(Process*, char*, int)+0x6>
c000a874:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a877:	31 c0                	xor    eax,eax
c000a879:	c3                   	ret    

c000a87a <Fs::initVFS()>:
c000a87a:	83 ec 18             	sub    esp,0x18
c000a87d:	6a 08                	push   0x8
c000a87f:	e8 35 cf ff ff       	call   c00077b9 <malloc>
c000a884:	89 04 24             	mov    DWORD PTR [esp],eax
c000a887:	e8 28 c8 00 00       	call   c00170b4 <FAT::FAT()>
c000a88c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a893:	e8 21 cf ff ff       	call   c00077b9 <malloc>
c000a898:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89b:	e8 70 d5 00 00       	call   c0017e10 <ISO9660::ISO9660()>
c000a8a0:	83 c4 1c             	add    esp,0x1c
c000a8a3:	c3                   	ret    

c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a8a4:	55                   	push   ebp
c000a8a5:	57                   	push   edi
c000a8a6:	56                   	push   esi
c000a8a7:	53                   	push   ebx
c000a8a8:	81 ec 10 04 00 00    	sub    esp,0x410
c000a8ae:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a8b5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a8bc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a8c3:	68 00 04 00 00       	push   0x400
c000a8c8:	6a 00                	push   0x0
c000a8ca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a8ce:	56                   	push   esi
c000a8cf:	e8 fc 5b ff ff       	call   c00004d0 <memset>
c000a8d4:	83 c4 10             	add    esp,0x10
c000a8d7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a8db:	75 0b                	jne    c000a8e8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a8dd:	50                   	push   eax
c000a8de:	50                   	push   eax
c000a8df:	57                   	push   edi
c000a8e0:	56                   	push   esi
c000a8e1:	e8 1a 5d ff ff       	call   c0000600 <strcpy>
c000a8e6:	eb 41                	jmp    c000a929 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a8e8:	8a 07                	mov    al,BYTE PTR [edi]
c000a8ea:	3c 5c                	cmp    al,0x5c
c000a8ec:	74 04                	je     c000a8f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a8ee:	3c 2f                	cmp    al,0x2f
c000a8f0:	75 18                	jne    c000a90a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a8f2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a8f5:	3c 60                	cmp    al,0x60
c000a8f7:	7e 03                	jle    c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a8f9:	83 e8 20             	sub    eax,0x20
c000a8fc:	88 04 24             	mov    BYTE PTR [esp],al
c000a8ff:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a906:	50                   	push   eax
c000a907:	50                   	push   eax
c000a908:	eb 18                	jmp    c000a922 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a90a:	50                   	push   eax
c000a90b:	50                   	push   eax
c000a90c:	55                   	push   ebp
c000a90d:	56                   	push   esi
c000a90e:	e8 ed 5c ff ff       	call   c0000600 <strcpy>
c000a913:	5a                   	pop    edx
c000a914:	59                   	pop    ecx
c000a915:	68 6a eb 01 c0       	push   0xc001eb6a
c000a91a:	56                   	push   esi
c000a91b:	e8 a0 5e ff ff       	call   c00007c0 <strcat>
c000a920:	5d                   	pop    ebp
c000a921:	58                   	pop    eax
c000a922:	57                   	push   edi
c000a923:	56                   	push   esi
c000a924:	e8 97 5e ff ff       	call   c00007c0 <strcat>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a92f:	3c 60                	cmp    al,0x60
c000a931:	7e 03                	jle    c000a936 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a933:	83 e8 20             	sub    eax,0x20
c000a936:	88 04 24             	mov    BYTE PTR [esp],al
c000a939:	88 03                	mov    BYTE PTR [ebx],al
c000a93b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a942:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a948:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a94c:	bf 03 00 00 00       	mov    edi,0x3
c000a951:	b8 03 00 00 00       	mov    eax,0x3
c000a956:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a959:	84 d2                	test   dl,dl
c000a95b:	0f 84 91 00 00 00    	je     c000a9f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a961:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a964:	80 fa 5c             	cmp    dl,0x5c
c000a967:	74 05                	je     c000a96e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a969:	80 fa 2f             	cmp    dl,0x2f
c000a96c:	75 12                	jne    c000a980 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a96e:	89 c5                	mov    ebp,eax
c000a970:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a975:	74 09                	je     c000a980 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a977:	40                   	inc    eax
c000a978:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a97c:	89 cf                	mov    edi,ecx
c000a97e:	eb d6                	jmp    c000a956 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a980:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a985:	75 5b                	jne    c000a9e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a987:	80 fa 2e             	cmp    dl,0x2e
c000a98a:	75 56                	jne    c000a9e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a98c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a990:	74 19                	je     c000a9ab <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a992:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a997:	74 53                	je     c000a9ec <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a999:	89 f9                	mov    ecx,edi
c000a99b:	41                   	inc    ecx
c000a99c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a99f:	80 fa 2f             	cmp    dl,0x2f
c000a9a2:	74 f7                	je     c000a99b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9a4:	80 fa 5c             	cmp    dl,0x5c
c000a9a7:	74 f2                	je     c000a99b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9a9:	eb d1                	jmp    c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ab:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9b0:	74 3a                	je     c000a9ec <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9b2:	83 f8 03             	cmp    eax,0x3
c000a9b5:	74 c5                	je     c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9b7:	41                   	inc    ecx
c000a9b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9bb:	80 fa 2f             	cmp    dl,0x2f
c000a9be:	74 f7                	je     c000a9b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9c0:	80 fa 5c             	cmp    dl,0x5c
c000a9c3:	74 f2                	je     c000a9b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9c5:	48                   	dec    eax
c000a9c6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9ca:	75 06                	jne    c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9cc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9d0:	eb f3                	jmp    c000a9c5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a9d2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9d6:	74 07                	je     c000a9df <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a9d8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9dc:	48                   	dec    eax
c000a9dd:	eb f3                	jmp    c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9df:	40                   	inc    eax
c000a9e0:	eb 9a                	jmp    c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9e2:	80 fa 2f             	cmp    dl,0x2f
c000a9e5:	74 95                	je     c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9e7:	80 fa 5c             	cmp    dl,0x5c
c000a9ea:	74 90                	je     c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ec:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a9ef:	40                   	inc    eax
c000a9f0:	eb 8a                	jmp    c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9f2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9f6:	83 ec 0c             	sub    esp,0xc
c000a9f9:	53                   	push   ebx
c000a9fa:	e8 41 5b ff ff       	call   c0000540 <strlen>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa07:	75 26                	jne    c000aa2f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa09:	83 ec 0c             	sub    esp,0xc
c000aa0c:	53                   	push   ebx
c000aa0d:	e8 2e 5b ff ff       	call   c0000540 <strlen>
c000aa12:	83 c4 10             	add    esp,0x10
c000aa15:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa1a:	74 26                	je     c000aa42 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa1c:	83 ec 0c             	sub    esp,0xc
c000aa1f:	53                   	push   ebx
c000aa20:	e8 1b 5b ff ff       	call   c0000540 <strlen>
c000aa25:	83 c4 10             	add    esp,0x10
c000aa28:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa2d:	eb c7                	jmp    c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aa2f:	83 ec 0c             	sub    esp,0xc
c000aa32:	53                   	push   ebx
c000aa33:	e8 08 5b ff ff       	call   c0000540 <strlen>
c000aa38:	83 c4 10             	add    esp,0x10
c000aa3b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa40:	74 c7                	je     c000aa09 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa42:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa48:	5b                   	pop    ebx
c000aa49:	5e                   	pop    esi
c000aa4a:	5f                   	pop    edi
c000aa4b:	5d                   	pop    ebp
c000aa4c:	c3                   	ret    
c000aa4d:	90                   	nop

c000aa4e <File::File(char const*, Process*)>:
c000aa4e:	83 ec 0c             	sub    esp,0xc
c000aa51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa55:	83 ec 08             	sub    esp,0x8
c000aa58:	6a 00                	push   0x0
c000aa5a:	50                   	push   eax
c000aa5b:	e8 e2 e3 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000aa60:	83 c4 10             	add    esp,0x10
c000aa63:	ba 80 dd 01 c0       	mov    edx,0xc001dd80
c000aa68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa6c:	89 10                	mov    DWORD PTR [eax],edx
c000aa6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aa72:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aa78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa7c:	83 c0 0d             	add    eax,0xd
c000aa7f:	83 ec 04             	sub    esp,0x4
c000aa82:	52                   	push   edx
c000aa83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa87:	50                   	push   eax
c000aa88:	e8 17 fe ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa8d:	83 c4 10             	add    esp,0x10
c000aa90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa94:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aa97:	8d 50 bf             	lea    edx,[eax-0x41]
c000aa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aaa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aaac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aab6:	25 ff 00 00 00       	and    eax,0xff
c000aabb:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000aac2:	85 c0                	test   eax,eax
c000aac4:	74 42                	je     c000ab08 <File::File(char const*, Process*)+0xba>
c000aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaca:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aad0:	25 ff 00 00 00       	and    eax,0xff
c000aad5:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000aadc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aae2:	85 c0                	test   eax,eax
c000aae4:	75 22                	jne    c000ab08 <File::File(char const*, Process*)+0xba>
c000aae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaea:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aaf0:	25 ff 00 00 00       	and    eax,0xff
c000aaf5:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000aafc:	83 ec 0c             	sub    esp,0xc
c000aaff:	50                   	push   eax
c000ab00:	e8 39 20 00 00       	call   c000cb3e <LogicalDisk::mount()>
c000ab05:	83 c4 10             	add    esp,0x10
c000ab08:	90                   	nop
c000ab09:	83 c4 0c             	add    esp,0xc
c000ab0c:	c3                   	ret    
c000ab0d:	90                   	nop

c000ab0e <File::open(FileOpenMode)>:
c000ab0e:	53                   	push   ebx
c000ab0f:	b8 0b 00 00 00       	mov    eax,0xb
c000ab14:	83 ec 08             	sub    esp,0x8
c000ab17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab1b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab22:	80 fa 19             	cmp    dl,0x19
c000ab25:	77 40                	ja     c000ab67 <File::open(FileOpenMode)+0x59>
c000ab27:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ab2e:	85 d2                	test   edx,edx
c000ab30:	74 35                	je     c000ab67 <File::open(FileOpenMode)+0x59>
c000ab32:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab38:	85 d2                	test   edx,edx
c000ab3a:	74 2b                	je     c000ab67 <File::open(FileOpenMode)+0x59>
c000ab3c:	b8 06 00 00 00       	mov    eax,0x6
c000ab41:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab45:	75 20                	jne    c000ab67 <File::open(FileOpenMode)+0x59>
c000ab47:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab49:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ab4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab53:	51                   	push   ecx
c000ab54:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab57:	51                   	push   ecx
c000ab58:	52                   	push   edx
c000ab59:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab5c:	83 c4 10             	add    esp,0x10
c000ab5f:	85 c0                	test   eax,eax
c000ab61:	75 04                	jne    c000ab67 <File::open(FileOpenMode)+0x59>
c000ab63:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab67:	83 c4 08             	add    esp,0x8
c000ab6a:	5b                   	pop    ebx
c000ab6b:	c3                   	ret    

c000ab6c <File::close()>:
c000ab6c:	53                   	push   ebx
c000ab6d:	b8 0b 00 00 00       	mov    eax,0xb
c000ab72:	83 ec 08             	sub    esp,0x8
c000ab75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ab79:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ab80:	80 fa 19             	cmp    dl,0x19
c000ab83:	77 41                	ja     c000abc6 <File::close()+0x5a>
c000ab85:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ab8c:	85 db                	test   ebx,ebx
c000ab8e:	74 36                	je     c000abc6 <File::close()+0x5a>
c000ab90:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ab97:	74 2d                	je     c000abc6 <File::close()+0x5a>
c000ab99:	b8 05 00 00 00       	mov    eax,0x5
c000ab9e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000aba2:	74 22                	je     c000abc6 <File::close()+0x5a>
c000aba4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000aba8:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000abaf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000abb5:	53                   	push   ebx
c000abb6:	53                   	push   ebx
c000abb7:	8b 10                	mov    edx,DWORD PTR [eax]
c000abb9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abbf:	50                   	push   eax
c000abc0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000abc3:	83 c4 10             	add    esp,0x10
c000abc6:	83 c4 08             	add    esp,0x8
c000abc9:	5b                   	pop    ebx
c000abca:	c3                   	ret    
c000abcb:	90                   	nop

c000abcc <File::seek(unsigned long long)>:
c000abcc:	56                   	push   esi
c000abcd:	53                   	push   ebx
c000abce:	b8 0b 00 00 00       	mov    eax,0xb
c000abd3:	51                   	push   ecx
c000abd4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000abd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000abdc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000abe3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000abe7:	80 fa 19             	cmp    dl,0x19
c000abea:	77 31                	ja     c000ac1d <File::seek(unsigned long long)+0x51>
c000abec:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000abf3:	85 d2                	test   edx,edx
c000abf5:	74 26                	je     c000ac1d <File::seek(unsigned long long)+0x51>
c000abf7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abfd:	85 d2                	test   edx,edx
c000abff:	74 1c                	je     c000ac1d <File::seek(unsigned long long)+0x51>
c000ac01:	b8 05 00 00 00       	mov    eax,0x5
c000ac06:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac0a:	74 11                	je     c000ac1d <File::seek(unsigned long long)+0x51>
c000ac0c:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac0e:	53                   	push   ebx
c000ac0f:	51                   	push   ecx
c000ac10:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac16:	52                   	push   edx
c000ac17:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac1a:	83 c4 10             	add    esp,0x10
c000ac1d:	5a                   	pop    edx
c000ac1e:	5b                   	pop    ebx
c000ac1f:	5e                   	pop    esi
c000ac20:	c3                   	ret    
c000ac21:	90                   	nop

c000ac22 <File::tell(unsigned long long*)>:
c000ac22:	83 ec 0c             	sub    esp,0xc
c000ac25:	b8 0b 00 00 00       	mov    eax,0xb
c000ac2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac2e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac35:	80 fa 19             	cmp    dl,0x19
c000ac38:	77 34                	ja     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac3a:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac41:	85 d2                	test   edx,edx
c000ac43:	74 29                	je     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac45:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac4b:	85 d2                	test   edx,edx
c000ac4d:	74 1f                	je     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac4f:	b8 05 00 00 00       	mov    eax,0x5
c000ac54:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac58:	74 14                	je     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac5a:	50                   	push   eax
c000ac5b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac61:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac67:	52                   	push   edx
c000ac68:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ac6b:	83 c4 10             	add    esp,0x10
c000ac6e:	83 c4 0c             	add    esp,0xc
c000ac71:	c3                   	ret    

c000ac72 <File::rewind()>:
c000ac72:	83 ec 10             	sub    esp,0x10
c000ac75:	6a 00                	push   0x0
c000ac77:	6a 00                	push   0x0
c000ac79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac7d:	e8 4a ff ff ff       	call   c000abcc <File::seek(unsigned long long)>
c000ac82:	83 c4 1c             	add    esp,0x1c
c000ac85:	c3                   	ret    

c000ac86 <File::unlink()>:
c000ac86:	83 ec 0c             	sub    esp,0xc
c000ac89:	b8 0b 00 00 00       	mov    eax,0xb
c000ac8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac99:	80 f9 19             	cmp    cl,0x19
c000ac9c:	77 2f                	ja     c000accd <File::unlink()+0x47>
c000ac9e:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000aca5:	85 c9                	test   ecx,ecx
c000aca7:	74 24                	je     c000accd <File::unlink()+0x47>
c000aca9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acaf:	85 c9                	test   ecx,ecx
c000acb1:	74 1a                	je     c000accd <File::unlink()+0x47>
c000acb3:	b8 06 00 00 00       	mov    eax,0x6
c000acb8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acbc:	75 0f                	jne    c000accd <File::unlink()+0x47>
c000acbe:	83 c2 0d             	add    edx,0xd
c000acc1:	50                   	push   eax
c000acc2:	50                   	push   eax
c000acc3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000acc5:	52                   	push   edx
c000acc6:	51                   	push   ecx
c000acc7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000acca:	83 c4 10             	add    esp,0x10
c000accd:	83 c4 0c             	add    esp,0xc
c000acd0:	c3                   	ret    
c000acd1:	90                   	nop

c000acd2 <File::rename(char const*)>:
c000acd2:	83 ec 0c             	sub    esp,0xc
c000acd5:	b8 0b 00 00 00       	mov    eax,0xb
c000acda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acde:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ace5:	80 f9 19             	cmp    cl,0x19
c000ace8:	77 32                	ja     c000ad1c <File::rename(char const*)+0x4a>
c000acea:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000acf1:	85 c9                	test   ecx,ecx
c000acf3:	74 27                	je     c000ad1c <File::rename(char const*)+0x4a>
c000acf5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acfb:	85 c9                	test   ecx,ecx
c000acfd:	74 1d                	je     c000ad1c <File::rename(char const*)+0x4a>
c000acff:	b8 06 00 00 00       	mov    eax,0x6
c000ad04:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad08:	75 12                	jne    c000ad1c <File::rename(char const*)+0x4a>
c000ad0a:	83 c2 0d             	add    edx,0xd
c000ad0d:	50                   	push   eax
c000ad0e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad14:	52                   	push   edx
c000ad15:	51                   	push   ecx
c000ad16:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	83 c4 0c             	add    esp,0xc
c000ad1f:	c3                   	ret    

c000ad20 <File::chfatattr(unsigned char, unsigned char)>:
c000ad20:	57                   	push   edi
c000ad21:	b8 0b 00 00 00       	mov    eax,0xb
c000ad26:	56                   	push   esi
c000ad27:	53                   	push   ebx
c000ad28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad30:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad37:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad3b:	80 f9 19             	cmp    cl,0x19
c000ad3e:	77 37                	ja     c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad40:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad47:	85 c9                	test   ecx,ecx
c000ad49:	74 2c                	je     c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad4b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad51:	85 c9                	test   ecx,ecx
c000ad53:	74 22                	je     c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad55:	b8 06 00 00 00       	mov    eax,0x6
c000ad5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad5e:	75 17                	jne    c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad60:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad62:	89 f0                	mov    eax,esi
c000ad64:	83 c2 0d             	add    edx,0xd
c000ad67:	0f b6 f0             	movzx  esi,al
c000ad6a:	0f b6 db             	movzx  ebx,bl
c000ad6d:	56                   	push   esi
c000ad6e:	53                   	push   ebx
c000ad6f:	52                   	push   edx
c000ad70:	51                   	push   ecx
c000ad71:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ad74:	83 c4 10             	add    esp,0x10
c000ad77:	5b                   	pop    ebx
c000ad78:	5e                   	pop    esi
c000ad79:	5f                   	pop    edi
c000ad7a:	c3                   	ret    
c000ad7b:	90                   	nop

c000ad7c <File::exists()>:
c000ad7c:	83 ec 0c             	sub    esp,0xc
c000ad7f:	31 c0                	xor    eax,eax
c000ad81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad85:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad8c:	80 f9 19             	cmp    cl,0x19
c000ad8f:	77 24                	ja     c000adb5 <File::exists()+0x39>
c000ad91:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad98:	85 c9                	test   ecx,ecx
c000ad9a:	74 19                	je     c000adb5 <File::exists()+0x39>
c000ad9c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ada2:	85 c9                	test   ecx,ecx
c000ada4:	74 0f                	je     c000adb5 <File::exists()+0x39>
c000ada6:	83 c2 0d             	add    edx,0xd
c000ada9:	50                   	push   eax
c000adaa:	50                   	push   eax
c000adab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adad:	52                   	push   edx
c000adae:	51                   	push   ecx
c000adaf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000adb2:	83 c4 10             	add    esp,0x10
c000adb5:	83 c4 0c             	add    esp,0xc
c000adb8:	c3                   	ret    
c000adb9:	90                   	nop

c000adba <File::stat(unsigned long long*, bool*)>:
c000adba:	56                   	push   esi
c000adbb:	53                   	push   ebx
c000adbc:	50                   	push   eax
c000adbd:	b8 0b 00 00 00       	mov    eax,0xb
c000adc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adc6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000add1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000add5:	80 f9 19             	cmp    cl,0x19
c000add8:	77 3d                	ja     c000ae17 <File::stat(unsigned long long*, bool*)+0x5d>
c000adda:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ade1:	85 c9                	test   ecx,ecx
c000ade3:	74 32                	je     c000ae17 <File::stat(unsigned long long*, bool*)+0x5d>
c000ade5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adeb:	85 c9                	test   ecx,ecx
c000aded:	74 28                	je     c000ae17 <File::stat(unsigned long long*, bool*)+0x5d>
c000adef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adf1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adf5:	74 13                	je     c000ae0a <File::stat(unsigned long long*, bool*)+0x50>
c000adf7:	83 ec 04             	sub    esp,0x4
c000adfa:	56                   	push   esi
c000adfb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae01:	51                   	push   ecx
c000ae02:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae05:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae08:	eb 0a                	jmp    c000ae14 <File::stat(unsigned long long*, bool*)+0x5a>
c000ae0a:	53                   	push   ebx
c000ae0b:	83 c2 0d             	add    edx,0xd
c000ae0e:	56                   	push   esi
c000ae0f:	52                   	push   edx
c000ae10:	51                   	push   ecx
c000ae11:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae14:	83 c4 10             	add    esp,0x10
c000ae17:	5a                   	pop    edx
c000ae18:	5b                   	pop    ebx
c000ae19:	5e                   	pop    esi
c000ae1a:	c3                   	ret    

c000ae1b <Fs::setcwd(Process*, char*)>:
c000ae1b:	55                   	push   ebp
c000ae1c:	57                   	push   edi
c000ae1d:	56                   	push   esi
c000ae1e:	53                   	push   ebx
c000ae1f:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae25:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae2c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ae32:	57                   	push   edi
c000ae33:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae3a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae3e:	56                   	push   esi
c000ae3f:	e8 60 fa ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae44:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae47:	e8 f4 56 ff ff       	call   c0000540 <strlen>
c000ae4c:	83 c4 10             	add    esp,0x10
c000ae4f:	83 f8 02             	cmp    eax,0x2
c000ae52:	77 15                	ja     c000ae69 <Fs::setcwd(Process*, char*)+0x4e>
c000ae54:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae59:	83 eb 41             	sub    ebx,0x41
c000ae5c:	8b 04 9d 20 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbbe0]
c000ae63:	85 c0                	test   eax,eax
c000ae65:	75 1c                	jne    c000ae83 <Fs::setcwd(Process*, char*)+0x68>
c000ae67:	eb 2f                	jmp    c000ae98 <Fs::setcwd(Process*, char*)+0x7d>
c000ae69:	83 ec 0c             	sub    esp,0xc
c000ae6c:	56                   	push   esi
c000ae6d:	e8 ce 56 ff ff       	call   c0000540 <strlen>
c000ae72:	83 c4 10             	add    esp,0x10
c000ae75:	83 f8 03             	cmp    eax,0x3
c000ae78:	75 57                	jne    c000aed1 <Fs::setcwd(Process*, char*)+0xb6>
c000ae7a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000ae7f:	75 50                	jne    c000aed1 <Fs::setcwd(Process*, char*)+0xb6>
c000ae81:	eb d1                	jmp    c000ae54 <Fs::setcwd(Process*, char*)+0x39>
c000ae83:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae8a:	75 0c                	jne    c000ae98 <Fs::setcwd(Process*, char*)+0x7d>
c000ae8c:	83 ec 0c             	sub    esp,0xc
c000ae8f:	50                   	push   eax
c000ae90:	e8 a9 1c 00 00       	call   c000cb3e <LogicalDisk::mount()>
c000ae95:	83 c4 10             	add    esp,0x10
c000ae98:	b8 03 00 00 00       	mov    eax,0x3
c000ae9d:	83 fb 19             	cmp    ebx,0x19
c000aea0:	0f 87 c6 00 00 00    	ja     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000aea6:	8b 14 9d 20 44 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdbbe0]
c000aead:	b8 05 00 00 00       	mov    eax,0x5
c000aeb2:	85 d2                	test   edx,edx
c000aeb4:	0f 84 b2 00 00 00    	je     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000aeba:	b8 06 00 00 00       	mov    eax,0x6
c000aebf:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000aec6:	0f 85 92 00 00 00    	jne    c000af5e <Fs::setcwd(Process*, char*)+0x143>
c000aecc:	e9 9b 00 00 00       	jmp    c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000aed1:	83 ec 0c             	sub    esp,0xc
c000aed4:	68 14 01 00 00       	push   0x114
c000aed9:	e8 db c8 ff ff       	call   c00077b9 <malloc>
c000aede:	83 c4 0c             	add    esp,0xc
c000aee1:	89 c3                	mov    ebx,eax
c000aee3:	55                   	push   ebp
c000aee4:	56                   	push   esi
c000aee5:	50                   	push   eax
c000aee6:	e8 63 fb ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000aeeb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aef0:	83 c4 0c             	add    esp,0xc
c000aef3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000aef7:	50                   	push   eax
c000aef8:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aefc:	50                   	push   eax
c000aefd:	53                   	push   ebx
c000aefe:	e8 b7 fe ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	83 f8 02             	cmp    eax,0x2
c000af09:	74 04                	je     c000af0f <Fs::setcwd(Process*, char*)+0xf4>
c000af0b:	85 c0                	test   eax,eax
c000af0d:	74 1c                	je     c000af2b <Fs::setcwd(Process*, char*)+0x110>
c000af0f:	b8 01 00 00 00       	mov    eax,0x1
c000af14:	85 db                	test   ebx,ebx
c000af16:	74 54                	je     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af18:	83 ec 0c             	sub    esp,0xc
c000af1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af1d:	53                   	push   ebx
c000af1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af21:	83 c4 10             	add    esp,0x10
c000af24:	b8 01 00 00 00       	mov    eax,0x1
c000af29:	eb 41                	jmp    c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af2b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000af30:	75 1c                	jne    c000af4e <Fs::setcwd(Process*, char*)+0x133>
c000af32:	b8 02 00 00 00       	mov    eax,0x2
c000af37:	85 db                	test   ebx,ebx
c000af39:	74 31                	je     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af40:	53                   	push   ebx
c000af41:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af44:	83 c4 10             	add    esp,0x10
c000af47:	b8 02 00 00 00       	mov    eax,0x2
c000af4c:	eb 1e                	jmp    c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af4e:	85 db                	test   ebx,ebx
c000af50:	74 0c                	je     c000af5e <Fs::setcwd(Process*, char*)+0x143>
c000af52:	83 ec 0c             	sub    esp,0xc
c000af55:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af57:	53                   	push   ebx
c000af58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	50                   	push   eax
c000af5f:	50                   	push   eax
c000af60:	56                   	push   esi
c000af61:	57                   	push   edi
c000af62:	e8 99 56 ff ff       	call   c0000600 <strcpy>
c000af67:	83 c4 10             	add    esp,0x10
c000af6a:	31 c0                	xor    eax,eax
c000af6c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000af72:	5b                   	pop    ebx
c000af73:	5e                   	pop    esi
c000af74:	5f                   	pop    edi
c000af75:	5d                   	pop    ebp
c000af76:	c3                   	ret    
c000af77:	90                   	nop

c000af78 <Directory::Directory(char const*, Process*)>:
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7f:	83 ec 08             	sub    esp,0x8
c000af82:	6a 00                	push   0x0
c000af84:	50                   	push   eax
c000af85:	e8 b8 de ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000af8a:	83 c4 10             	add    esp,0x10
c000af8d:	ba 9c dd 01 c0       	mov    edx,0xc001dd9c
c000af92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af96:	89 10                	mov    DWORD PTR [eax],edx
c000af98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af9c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000afa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa6:	83 c0 0d             	add    eax,0xd
c000afa9:	83 ec 04             	sub    esp,0x4
c000afac:	52                   	push   edx
c000afad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afb1:	50                   	push   eax
c000afb2:	e8 ed f8 ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afbe:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000afc1:	8d 50 bf             	lea    edx,[eax-0x41]
c000afc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afda:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afe0:	25 ff 00 00 00       	and    eax,0xff
c000afe5:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000afec:	85 c0                	test   eax,eax
c000afee:	74 42                	je     c000b032 <Directory::Directory(char const*, Process*)+0xba>
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000affa:	25 ff 00 00 00       	and    eax,0xff
c000afff:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b006:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b00c:	85 c0                	test   eax,eax
c000b00e:	75 22                	jne    c000b032 <Directory::Directory(char const*, Process*)+0xba>
c000b010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b014:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b01a:	25 ff 00 00 00       	and    eax,0xff
c000b01f:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b026:	83 ec 0c             	sub    esp,0xc
c000b029:	50                   	push   eax
c000b02a:	e8 0f 1b 00 00       	call   c000cb3e <LogicalDisk::mount()>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	90                   	nop
c000b033:	83 c4 0c             	add    esp,0xc
c000b036:	c3                   	ret    
c000b037:	90                   	nop

c000b038 <Directory::open()>:
c000b038:	53                   	push   ebx
c000b039:	b8 0b 00 00 00       	mov    eax,0xb
c000b03e:	83 ec 08             	sub    esp,0x8
c000b041:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b045:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b04c:	80 fa 19             	cmp    dl,0x19
c000b04f:	77 3d                	ja     c000b08e <Directory::open()+0x56>
c000b051:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b058:	85 d2                	test   edx,edx
c000b05a:	74 32                	je     c000b08e <Directory::open()+0x56>
c000b05c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b062:	85 d2                	test   edx,edx
c000b064:	74 28                	je     c000b08e <Directory::open()+0x56>
c000b066:	b8 06 00 00 00       	mov    eax,0x6
c000b06b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b06f:	75 1d                	jne    c000b08e <Directory::open()+0x56>
c000b071:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b077:	50                   	push   eax
c000b078:	8b 02                	mov    eax,DWORD PTR [edx]
c000b07a:	51                   	push   ecx
c000b07b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b07e:	51                   	push   ecx
c000b07f:	52                   	push   edx
c000b080:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	85 c0                	test   eax,eax
c000b088:	75 04                	jne    c000b08e <Directory::open()+0x56>
c000b08a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b08e:	83 c4 08             	add    esp,0x8
c000b091:	5b                   	pop    ebx
c000b092:	c3                   	ret    
c000b093:	90                   	nop

c000b094 <Directory::close()>:
c000b094:	53                   	push   ebx
c000b095:	b8 0b 00 00 00       	mov    eax,0xb
c000b09a:	83 ec 08             	sub    esp,0x8
c000b09d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0a1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0a8:	80 fa 19             	cmp    dl,0x19
c000b0ab:	77 41                	ja     c000b0ee <Directory::close()+0x5a>
c000b0ad:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b0b4:	85 db                	test   ebx,ebx
c000b0b6:	74 36                	je     c000b0ee <Directory::close()+0x5a>
c000b0b8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b0bf:	74 2d                	je     c000b0ee <Directory::close()+0x5a>
c000b0c1:	b8 05 00 00 00       	mov    eax,0x5
c000b0c6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0ca:	74 22                	je     c000b0ee <Directory::close()+0x5a>
c000b0cc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b0d0:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000b0d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0dd:	53                   	push   ebx
c000b0de:	53                   	push   ebx
c000b0df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b0e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0e7:	50                   	push   eax
c000b0e8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b0eb:	83 c4 10             	add    esp,0x10
c000b0ee:	83 c4 08             	add    esp,0x8
c000b0f1:	5b                   	pop    ebx
c000b0f2:	c3                   	ret    
c000b0f3:	90                   	nop

c000b0f4 <Directory::unlink()>:
c000b0f4:	83 ec 0c             	sub    esp,0xc
c000b0f7:	b8 0b 00 00 00       	mov    eax,0xb
c000b0fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b100:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b107:	80 f9 19             	cmp    cl,0x19
c000b10a:	77 2f                	ja     c000b13b <Directory::unlink()+0x47>
c000b10c:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b113:	85 c9                	test   ecx,ecx
c000b115:	74 24                	je     c000b13b <Directory::unlink()+0x47>
c000b117:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b11d:	85 c9                	test   ecx,ecx
c000b11f:	74 1a                	je     c000b13b <Directory::unlink()+0x47>
c000b121:	b8 06 00 00 00       	mov    eax,0x6
c000b126:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b12a:	75 0f                	jne    c000b13b <Directory::unlink()+0x47>
c000b12c:	83 c2 0d             	add    edx,0xd
c000b12f:	50                   	push   eax
c000b130:	50                   	push   eax
c000b131:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b133:	52                   	push   edx
c000b134:	51                   	push   ecx
c000b135:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b138:	83 c4 10             	add    esp,0x10
c000b13b:	83 c4 0c             	add    esp,0xc
c000b13e:	c3                   	ret    
c000b13f:	90                   	nop

c000b140 <Directory::rename(char const*)>:
c000b140:	83 ec 0c             	sub    esp,0xc
c000b143:	b8 0b 00 00 00       	mov    eax,0xb
c000b148:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b14c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b153:	80 f9 19             	cmp    cl,0x19
c000b156:	77 32                	ja     c000b18a <Directory::rename(char const*)+0x4a>
c000b158:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b15f:	85 c9                	test   ecx,ecx
c000b161:	74 27                	je     c000b18a <Directory::rename(char const*)+0x4a>
c000b163:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b169:	85 c9                	test   ecx,ecx
c000b16b:	74 1d                	je     c000b18a <Directory::rename(char const*)+0x4a>
c000b16d:	b8 06 00 00 00       	mov    eax,0x6
c000b172:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b176:	75 12                	jne    c000b18a <Directory::rename(char const*)+0x4a>
c000b178:	83 c2 0d             	add    edx,0xd
c000b17b:	50                   	push   eax
c000b17c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b17e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b182:	52                   	push   edx
c000b183:	51                   	push   ecx
c000b184:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b187:	83 c4 10             	add    esp,0x10
c000b18a:	83 c4 0c             	add    esp,0xc
c000b18d:	c3                   	ret    

c000b18e <Directory::exists()>:
c000b18e:	83 ec 0c             	sub    esp,0xc
c000b191:	31 c0                	xor    eax,eax
c000b193:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b197:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b19e:	80 f9 19             	cmp    cl,0x19
c000b1a1:	77 24                	ja     c000b1c7 <Directory::exists()+0x39>
c000b1a3:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b1aa:	85 c9                	test   ecx,ecx
c000b1ac:	74 19                	je     c000b1c7 <Directory::exists()+0x39>
c000b1ae:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1b4:	85 c9                	test   ecx,ecx
c000b1b6:	74 0f                	je     c000b1c7 <Directory::exists()+0x39>
c000b1b8:	83 c2 0d             	add    edx,0xd
c000b1bb:	50                   	push   eax
c000b1bc:	50                   	push   eax
c000b1bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1bf:	52                   	push   edx
c000b1c0:	51                   	push   ecx
c000b1c1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b1c4:	83 c4 10             	add    esp,0x10
c000b1c7:	83 c4 0c             	add    esp,0xc
c000b1ca:	c3                   	ret    
c000b1cb:	90                   	nop

c000b1cc <Directory::read(dirent*)>:
c000b1cc:	83 ec 1c             	sub    esp,0x1c
c000b1cf:	b8 0b 00 00 00       	mov    eax,0xb
c000b1d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1d8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1df:	80 fa 19             	cmp    dl,0x19
c000b1e2:	77 30                	ja     c000b214 <Directory::read(dirent*)+0x48>
c000b1e4:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b1eb:	85 d2                	test   edx,edx
c000b1ed:	74 25                	je     c000b214 <Directory::read(dirent*)+0x48>
c000b1ef:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b1f6:	74 1c                	je     c000b214 <Directory::read(dirent*)+0x48>
c000b1f8:	83 ec 0c             	sub    esp,0xc
c000b1fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b201:	52                   	push   edx
c000b202:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b206:	6a 00                	push   0x0
c000b208:	68 10 01 00 00       	push   0x110
c000b20d:	51                   	push   ecx
c000b20e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b211:	83 c4 20             	add    esp,0x20
c000b214:	83 c4 1c             	add    esp,0x1c
c000b217:	c3                   	ret    

c000b218 <Directory::create()>:
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	b8 0b 00 00 00       	mov    eax,0xb
c000b220:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b224:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b22b:	80 f9 19             	cmp    cl,0x19
c000b22e:	77 2f                	ja     c000b25f <Directory::create()+0x47>
c000b230:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b237:	85 c9                	test   ecx,ecx
c000b239:	74 24                	je     c000b25f <Directory::create()+0x47>
c000b23b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b241:	85 c9                	test   ecx,ecx
c000b243:	74 1a                	je     c000b25f <Directory::create()+0x47>
c000b245:	b8 06 00 00 00       	mov    eax,0x6
c000b24a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b24e:	75 0f                	jne    c000b25f <Directory::create()+0x47>
c000b250:	83 c2 0d             	add    edx,0xd
c000b253:	50                   	push   eax
c000b254:	50                   	push   eax
c000b255:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b257:	52                   	push   edx
c000b258:	51                   	push   ecx
c000b259:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b25c:	83 c4 10             	add    esp,0x10
c000b25f:	83 c4 0c             	add    esp,0xc
c000b262:	c3                   	ret    
c000b263:	90                   	nop

c000b264 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b264:	b8 0a 00 00 00       	mov    eax,0xa
c000b269:	c3                   	ret    
c000b26a:	66 90                	xchg   ax,ax

c000b26c <Bus::Bus(char const*)>:
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	83 ec 08             	sub    esp,0x8
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	50                   	push   eax
c000b27b:	e8 30 08 00 00       	call   c000bab0 <Device::Device(char const*)>
c000b280:	83 c4 10             	add    esp,0x10
c000b283:	ba b8 dd 01 c0       	mov    edx,0xc001ddb8
c000b288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28c:	89 10                	mov    DWORD PTR [eax],edx
c000b28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b292:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b29c:	90                   	nop
c000b29d:	83 c4 0c             	add    esp,0xc
c000b2a0:	c3                   	ret    
c000b2a1:	90                   	nop
c000b2a2:	66 90                	xchg   ax,ax

c000b2a4 <Bus::~Bus()>:
c000b2a4:	83 ec 0c             	sub    esp,0xc
c000b2a7:	ba b8 dd 01 c0       	mov    edx,0xc001ddb8
c000b2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b0:	89 10                	mov    DWORD PTR [eax],edx
c000b2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b6:	83 ec 0c             	sub    esp,0xc
c000b2b9:	50                   	push   eax
c000b2ba:	e8 5b 05 00 00       	call   c000b81a <Device::~Device()>
c000b2bf:	83 c4 10             	add    esp,0x10
c000b2c2:	90                   	nop
c000b2c3:	83 c4 0c             	add    esp,0xc
c000b2c6:	c3                   	ret    
c000b2c7:	90                   	nop

c000b2c8 <Bus::~Bus()>:
c000b2c8:	83 ec 0c             	sub    esp,0xc
c000b2cb:	83 ec 0c             	sub    esp,0xc
c000b2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2d2:	e8 cd ff ff ff       	call   c000b2a4 <Bus::~Bus()>
c000b2d7:	83 c4 10             	add    esp,0x10
c000b2da:	83 ec 08             	sub    esp,0x8
c000b2dd:	68 58 01 00 00       	push   0x158
c000b2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2e6:	e8 f7 f0 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000b2eb:	83 c4 10             	add    esp,0x10
c000b2ee:	83 c4 0c             	add    esp,0xc
c000b2f1:	c3                   	ret    

c000b2f2 <beepThread(void*)>:
c000b2f2:	83 ec 0c             	sub    esp,0xc
c000b2f5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000b2fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2fe:	48                   	dec    eax
c000b2ff:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000b304:	75 01                	jne    c000b307 <beepThread(void*)+0x15>
c000b306:	fb                   	sti    
c000b307:	83 ec 0c             	sub    esp,0xc
c000b30a:	6b c2 0a             	imul   eax,edx,0xa
c000b30d:	50                   	push   eax
c000b30e:	e8 85 87 00 00       	call   c0013a98 <milliTenthSleep(unsigned int)>
c000b313:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b31a:	e8 2b a5 00 00       	call   c001584a <HalMakeBeep(int)>
c000b31f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b327:	83 c4 1c             	add    esp,0x1c
c000b32a:	e9 65 86 00 00       	jmp    c0013994 <blockTask(TaskState)>

c000b32f <Krnl::beep(int, int, bool)>:
c000b32f:	56                   	push   esi
c000b330:	53                   	push   ebx
c000b331:	83 ec 10             	sub    esp,0x10
c000b334:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b338:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b33c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b340:	e8 05 a5 00 00       	call   c001584a <HalMakeBeep(int)>
c000b345:	83 c4 10             	add    esp,0x10
c000b348:	89 f0                	mov    eax,esi
c000b34a:	84 c0                	test   al,al
c000b34c:	74 1e                	je     c000b36c <Krnl::beep(int, int, bool)+0x3d>
c000b34e:	83 ec 0c             	sub    esp,0xc
c000b351:	6b db 0a             	imul   ebx,ebx,0xa
c000b354:	53                   	push   ebx
c000b355:	e8 3e 87 00 00       	call   c0013a98 <milliTenthSleep(unsigned int)>
c000b35a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b362:	83 c4 14             	add    esp,0x14
c000b365:	5b                   	pop    ebx
c000b366:	5e                   	pop    esi
c000b367:	e9 de a4 00 00       	jmp    c001584a <HalMakeBeep(int)>
c000b36c:	68 e6 00 00 00       	push   0xe6
c000b371:	53                   	push   ebx
c000b372:	68 f2 b2 00 c0       	push   0xc000b2f2
c000b377:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b37d:	e8 f6 81 00 00       	call   c0013578 <Process::createThread(void (*)(void*), void*, int)>
c000b382:	83 c4 14             	add    esp,0x14
c000b385:	5b                   	pop    ebx
c000b386:	5e                   	pop    esi
c000b387:	c3                   	ret    

c000b388 <User::loadClockSettings(int)>:
c000b388:	53                   	push   ebx
c000b389:	83 ec 14             	sub    esp,0x14
c000b38c:	68 14 01 00 00       	push   0x114
c000b391:	e8 23 c4 ff ff       	call   c00077b9 <malloc>
c000b396:	83 c4 0c             	add    esp,0xc
c000b399:	89 c3                	mov    ebx,eax
c000b39b:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b3a1:	68 dc dd 01 c0       	push   0xc001dddc
c000b3a6:	50                   	push   eax
c000b3a7:	e8 a2 f6 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000b3ac:	58                   	pop    eax
c000b3ad:	5a                   	pop    edx
c000b3ae:	6a 01                	push   0x1
c000b3b0:	53                   	push   ebx
c000b3b1:	e8 58 f7 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000b3b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3b9:	e8 ae f7 ff ff       	call   c000ab6c <File::close()>
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	85 db                	test   ebx,ebx
c000b3c3:	74 0f                	je     c000b3d4 <User::loadClockSettings(int)+0x4c>
c000b3c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b3ce:	83 c4 08             	add    esp,0x8
c000b3d1:	5b                   	pop    ebx
c000b3d2:	ff e0                	jmp    eax
c000b3d4:	83 c4 08             	add    esp,0x8
c000b3d7:	5b                   	pop    ebx
c000b3d8:	c3                   	ret    
c000b3d9:	90                   	nop

c000b3da <Clock::Clock(char const*)>:
c000b3da:	83 ec 0c             	sub    esp,0xc
c000b3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e1:	83 ec 08             	sub    esp,0x8
c000b3e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e8:	50                   	push   eax
c000b3e9:	e8 c2 06 00 00       	call   c000bab0 <Device::Device(char const*)>
c000b3ee:	83 c4 10             	add    esp,0x10
c000b3f1:	ba 04 de 01 c0       	mov    edx,0xc001de04
c000b3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3fa:	89 10                	mov    DWORD PTR [eax],edx
c000b3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b400:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b40a:	90                   	nop
c000b40b:	83 c4 0c             	add    esp,0xc
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <Clock::~Clock()>:
c000b410:	83 ec 0c             	sub    esp,0xc
c000b413:	ba 04 de 01 c0       	mov    edx,0xc001de04
c000b418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b41c:	89 10                	mov    DWORD PTR [eax],edx
c000b41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b422:	83 ec 0c             	sub    esp,0xc
c000b425:	50                   	push   eax
c000b426:	e8 ef 03 00 00       	call   c000b81a <Device::~Device()>
c000b42b:	83 c4 10             	add    esp,0x10
c000b42e:	90                   	nop
c000b42f:	83 c4 0c             	add    esp,0xc
c000b432:	c3                   	ret    
c000b433:	90                   	nop

c000b434 <Clock::~Clock()>:
c000b434:	83 ec 0c             	sub    esp,0xc
c000b437:	83 ec 0c             	sub    esp,0xc
c000b43a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b43e:	e8 cd ff ff ff       	call   c000b410 <Clock::~Clock()>
c000b443:	83 c4 10             	add    esp,0x10
c000b446:	83 ec 08             	sub    esp,0x8
c000b449:	68 58 01 00 00       	push   0x158
c000b44e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b452:	e8 8b ef ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000b457:	83 c4 10             	add    esp,0x10
c000b45a:	83 c4 0c             	add    esp,0xc
c000b45d:	c3                   	ret    

c000b45e <Clock::timeInSecondsLocal()>:
c000b45e:	53                   	push   ebx
c000b45f:	83 ec 14             	sub    esp,0x14
c000b462:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b466:	8b 10                	mov    edx,DWORD PTR [eax]
c000b468:	50                   	push   eax
c000b469:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b46c:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b473:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b479:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b47f:	89 cb                	mov    ebx,ecx
c000b481:	c1 fb 1f             	sar    ebx,0x1f
c000b484:	01 c8                	add    eax,ecx
c000b486:	11 da                	adc    edx,ebx
c000b488:	83 c4 10             	add    esp,0x10
c000b48b:	31 c9                	xor    ecx,ecx
c000b48d:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b494:	74 05                	je     c000b49b <Clock::timeInSecondsLocal()+0x3d>
c000b496:	b9 08 07 00 00       	mov    ecx,0x708
c000b49b:	31 db                	xor    ebx,ebx
c000b49d:	01 c8                	add    eax,ecx
c000b49f:	11 da                	adc    edx,ebx
c000b4a1:	83 c4 08             	add    esp,0x8
c000b4a4:	5b                   	pop    ebx
c000b4a5:	c3                   	ret    

c000b4a6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b4a6:	57                   	push   edi
c000b4a7:	56                   	push   esi
c000b4a8:	53                   	push   ebx
c000b4a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b4b7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b4ba:	0f b6 05 b8 1f 02 c0 	movzx  eax,BYTE PTR ds:0xc0021fb8
c000b4c1:	03 05 bc 1f 02 c0    	add    eax,DWORD PTR ds:0xc0021fbc
c000b4c7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b4cd:	99                   	cdq    
c000b4ce:	29 c6                	sub    esi,eax
c000b4d0:	19 d7                	sbb    edi,edx
c000b4d2:	89 f0                	mov    eax,esi
c000b4d4:	89 fa                	mov    edx,edi
c000b4d6:	31 f6                	xor    esi,esi
c000b4d8:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b4df:	74 05                	je     c000b4e6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b4e1:	be 08 07 00 00       	mov    esi,0x708
c000b4e6:	31 ff                	xor    edi,edi
c000b4e8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b4ec:	29 f0                	sub    eax,esi
c000b4ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4f2:	19 fa                	sbb    edx,edi
c000b4f4:	89 d8                	mov    eax,ebx
c000b4f6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4fa:	5b                   	pop    ebx
c000b4fb:	5e                   	pop    esi
c000b4fc:	5f                   	pop    edi
c000b4fd:	ff e0                	jmp    eax

c000b4ff <datetimeToSeconds(datetime_t)>:
c000b4ff:	55                   	push   ebp
c000b500:	57                   	push   edi
c000b501:	56                   	push   esi
c000b502:	53                   	push   ebx
c000b503:	83 ec 14             	sub    esp,0x14
c000b506:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b50a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b50e:	89 d3                	mov    ebx,edx
c000b510:	0f b6 c6             	movzx  eax,dh
c000b513:	c1 eb 10             	shr    ebx,0x10
c000b516:	48                   	dec    eax
c000b517:	66 81 eb 6c 07       	sub    bx,0x76c
c000b51c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b520:	0f b6 f5             	movzx  esi,ch
c000b523:	89 cf                	mov    edi,ecx
c000b525:	6b f6 3c             	imul   esi,esi,0x3c
c000b528:	c1 ef 10             	shr    edi,0x10
c000b52b:	0f b6 c9             	movzx  ecx,cl
c000b52e:	89 f8                	mov    eax,edi
c000b530:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b536:	0f b6 f8             	movzx  edi,al
c000b539:	0f b6 d2             	movzx  edx,dl
c000b53c:	01 fe                	add    esi,edi
c000b53e:	01 f1                	add    ecx,esi
c000b540:	0f b7 f3             	movzx  esi,bx
c000b543:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b547:	c1 f9 1f             	sar    ecx,0x1f
c000b54a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b54f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b553:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b558:	8b 0c 8d 40 de 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe21c0]
c000b55f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b563:	76 29                	jbe    c000b58e <datetimeToSeconds(datetime_t)+0x8f>
c000b565:	f6 c3 03             	test   bl,0x3
c000b568:	75 24                	jne    c000b58e <datetimeToSeconds(datetime_t)+0x8f>
c000b56a:	31 d2                	xor    edx,edx
c000b56c:	bf 64 00 00 00       	mov    edi,0x64
c000b571:	89 d8                	mov    eax,ebx
c000b573:	66 f7 f7             	div    di
c000b576:	66 85 d2             	test   dx,dx
c000b579:	75 12                	jne    c000b58d <datetimeToSeconds(datetime_t)+0x8e>
c000b57b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b581:	bf 90 01 00 00       	mov    edi,0x190
c000b586:	99                   	cdq    
c000b587:	f7 ff                	idiv   edi
c000b589:	85 d2                	test   edx,edx
c000b58b:	75 01                	jne    c000b58e <datetimeToSeconds(datetime_t)+0x8f>
c000b58d:	41                   	inc    ecx
c000b58e:	66 83 fb 46          	cmp    bx,0x46
c000b592:	76 45                	jbe    c000b5d9 <datetimeToSeconds(datetime_t)+0xda>
c000b594:	bb 46 00 00 00       	mov    ebx,0x46
c000b599:	bf 64 00 00 00       	mov    edi,0x64
c000b59e:	bd 90 01 00 00       	mov    ebp,0x190
c000b5a3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5a8:	f6 c3 03             	test   bl,0x3
c000b5ab:	75 23                	jne    c000b5d0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5ad:	89 d8                	mov    eax,ebx
c000b5af:	99                   	cdq    
c000b5b0:	f7 ff                	idiv   edi
c000b5b2:	b8 6e 01 00 00       	mov    eax,0x16e
c000b5b7:	85 d2                	test   edx,edx
c000b5b9:	75 15                	jne    c000b5d0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5bb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b5c1:	99                   	cdq    
c000b5c2:	f7 fd                	idiv   ebp
c000b5c4:	31 c0                	xor    eax,eax
c000b5c6:	85 d2                	test   edx,edx
c000b5c8:	0f 94 c0             	sete   al
c000b5cb:	05 6d 01 00 00       	add    eax,0x16d
c000b5d0:	01 c1                	add    ecx,eax
c000b5d2:	43                   	inc    ebx
c000b5d3:	39 f3                	cmp    ebx,esi
c000b5d5:	7c cc                	jl     c000b5a3 <datetimeToSeconds(datetime_t)+0xa4>
c000b5d7:	eb 3b                	jmp    c000b614 <datetimeToSeconds(datetime_t)+0x115>
c000b5d9:	74 39                	je     c000b614 <datetimeToSeconds(datetime_t)+0x115>
c000b5db:	b8 45 00 00 00       	mov    eax,0x45
c000b5e0:	89 c2                	mov    edx,eax
c000b5e2:	83 e2 03             	and    edx,0x3
c000b5e5:	39 f0                	cmp    eax,esi
c000b5e7:	7e 13                	jle    c000b5fc <datetimeToSeconds(datetime_t)+0xfd>
c000b5e9:	85 d2                	test   edx,edx
c000b5eb:	0f 94 c2             	sete   dl
c000b5ee:	48                   	dec    eax
c000b5ef:	0f b6 d2             	movzx  edx,dl
c000b5f2:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b5f8:	29 d1                	sub    ecx,edx
c000b5fa:	eb e4                	jmp    c000b5e0 <datetimeToSeconds(datetime_t)+0xe1>
c000b5fc:	b8 6d 01 00 00       	mov    eax,0x16d
c000b601:	85 d2                	test   edx,edx
c000b603:	75 0d                	jne    c000b612 <datetimeToSeconds(datetime_t)+0x113>
c000b605:	31 c0                	xor    eax,eax
c000b607:	66 85 db             	test   bx,bx
c000b60a:	0f 95 c0             	setne  al
c000b60d:	05 6d 01 00 00       	add    eax,0x16d
c000b612:	29 c1                	sub    ecx,eax
c000b614:	b8 80 51 01 00       	mov    eax,0x15180
c000b619:	f7 e9                	imul   ecx
c000b61b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b61f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b623:	83 c4 14             	add    esp,0x14
c000b626:	5b                   	pop    ebx
c000b627:	5e                   	pop    esi
c000b628:	5f                   	pop    edi
c000b629:	5d                   	pop    ebp
c000b62a:	c3                   	ret    
c000b62b:	90                   	nop

c000b62c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b62c:	57                   	push   edi
c000b62d:	56                   	push   esi
c000b62e:	53                   	push   ebx
c000b62f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b633:	8b 06                	mov    eax,DWORD PTR [esi]
c000b635:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b638:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b63c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b640:	e8 ba fe ff ff       	call   c000b4ff <datetimeToSeconds(datetime_t)>
c000b645:	59                   	pop    ecx
c000b646:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b64d:	5b                   	pop    ebx
c000b64e:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b654:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b65a:	89 cb                	mov    ebx,ecx
c000b65c:	c1 fb 1f             	sar    ebx,0x1f
c000b65f:	29 c8                	sub    eax,ecx
c000b661:	19 da                	sbb    edx,ebx
c000b663:	31 c9                	xor    ecx,ecx
c000b665:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b66c:	74 05                	je     c000b673 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b66e:	b9 08 07 00 00       	mov    ecx,0x708
c000b673:	31 db                	xor    ebx,ebx
c000b675:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b679:	29 c8                	sub    eax,ecx
c000b67b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b67f:	19 da                	sbb    edx,ebx
c000b681:	89 f8                	mov    eax,edi
c000b683:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b687:	5b                   	pop    ebx
c000b688:	5e                   	pop    esi
c000b689:	5f                   	pop    edi
c000b68a:	ff e0                	jmp    eax

c000b68c <secondsToDatetime(unsigned long long)>:
c000b68c:	55                   	push   ebp
c000b68d:	57                   	push   edi
c000b68e:	56                   	push   esi
c000b68f:	53                   	push   ebx
c000b690:	83 ec 1c             	sub    esp,0x1c
c000b693:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b697:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b69b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b69f:	6a 00                	push   0x0
c000b6a1:	68 80 51 01 00       	push   0x15180
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	e8 43 0a 01 00       	call   c001c0f0 <__udivdi3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b6b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6ba:	6a 00                	push   0x0
c000b6bc:	68 80 51 01 00       	push   0x15180
c000b6c1:	55                   	push   ebp
c000b6c2:	57                   	push   edi
c000b6c3:	bf 10 0e 00 00       	mov    edi,0xe10
c000b6c8:	e8 23 0b 01 00       	call   c001c1f0 <__umoddi3>
c000b6cd:	83 c4 10             	add    esp,0x10
c000b6d0:	99                   	cdq    
c000b6d1:	f7 ff                	idiv   edi
c000b6d3:	bf 3c 00 00 00       	mov    edi,0x3c
c000b6d8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b6db:	89 d0                	mov    eax,edx
c000b6dd:	99                   	cdq    
c000b6de:	f7 ff                	idiv   edi
c000b6e0:	85 db                	test   ebx,ebx
c000b6e2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b6e5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b6e8:	79 11                	jns    c000b6fb <secondsToDatetime(unsigned long long)+0x6f>
c000b6ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b6ee:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b6f4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b6f9:	eb 07                	jmp    c000b702 <secondsToDatetime(unsigned long long)+0x76>
c000b6fb:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b700:	89 d8                	mov    eax,ebx
c000b702:	bf b4 05 00 00       	mov    edi,0x5b4
c000b707:	99                   	cdq    
c000b708:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b70d:	f7 f9                	idiv   ecx
c000b70f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b714:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b718:	31 d2                	xor    edx,edx
c000b71a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b722:	01 c3                	add    ebx,eax
c000b724:	89 d8                	mov    eax,ebx
c000b726:	f7 f1                	div    ecx
c000b728:	31 d2                	xor    edx,edx
c000b72a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b72d:	89 d8                	mov    eax,ebx
c000b72f:	f7 f7                	div    edi
c000b731:	31 d2                	xor    edx,edx
c000b733:	29 c1                	sub    ecx,eax
c000b735:	89 d8                	mov    eax,ebx
c000b737:	f7 f5                	div    ebp
c000b739:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b73e:	29 c1                	sub    ecx,eax
c000b740:	31 d2                	xor    edx,edx
c000b742:	89 c8                	mov    eax,ecx
c000b744:	f7 f5                	div    ebp
c000b746:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b74b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b74f:	31 d2                	xor    edx,edx
c000b751:	89 c8                	mov    eax,ecx
c000b753:	f7 f5                	div    ebp
c000b755:	31 d2                	xor    edx,edx
c000b757:	01 c3                	add    ebx,eax
c000b759:	89 c8                	mov    eax,ecx
c000b75b:	f7 f7                	div    edi
c000b75d:	bf 99 00 00 00       	mov    edi,0x99
c000b762:	29 c3                	sub    ebx,eax
c000b764:	31 d2                	xor    edx,edx
c000b766:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b76e:	29 c3                	sub    ebx,eax
c000b770:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b773:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b776:	bb 05 00 00 00       	mov    ebx,0x5
c000b77b:	83 c1 02             	add    ecx,0x2
c000b77e:	89 c8                	mov    eax,ecx
c000b780:	f7 f7                	div    edi
c000b782:	31 d2                	xor    edx,edx
c000b784:	89 c7                	mov    edi,eax
c000b786:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b78c:	83 c0 02             	add    eax,0x2
c000b78f:	f7 f3                	div    ebx
c000b791:	89 eb                	mov    ebx,ebp
c000b793:	29 c3                	sub    ebx,eax
c000b795:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b79b:	88 1e                	mov    BYTE PTR [esi],bl
c000b79d:	19 c0                	sbb    eax,eax
c000b79f:	31 d2                	xor    edx,edx
c000b7a1:	83 e0 0c             	and    eax,0xc
c000b7a4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b7a8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b7b0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b7b4:	83 f9 01             	cmp    ecx,0x1
c000b7b7:	0f 96 c2             	setbe  dl
c000b7ba:	41                   	inc    ecx
c000b7bb:	01 d0                	add    eax,edx
c000b7bd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b7c0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b7c4:	83 c4 1c             	add    esp,0x1c
c000b7c7:	89 f0                	mov    eax,esi
c000b7c9:	5b                   	pop    ebx
c000b7ca:	5e                   	pop    esi
c000b7cb:	5f                   	pop    edi
c000b7cc:	5d                   	pop    ebp
c000b7cd:	c2 04 00             	ret    0x4

c000b7d0 <Clock::timeInDatetimeLocal()>:
c000b7d0:	53                   	push   ebx
c000b7d1:	83 ec 14             	sub    esp,0x14
c000b7d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b7d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7dc:	e8 7d fc ff ff       	call   c000b45e <Clock::timeInSecondsLocal()>
c000b7e1:	83 c4 0c             	add    esp,0xc
c000b7e4:	52                   	push   edx
c000b7e5:	50                   	push   eax
c000b7e6:	53                   	push   ebx
c000b7e7:	e8 a0 fe ff ff       	call   c000b68c <secondsToDatetime(unsigned long long)>
c000b7ec:	89 d8                	mov    eax,ebx
c000b7ee:	83 c4 14             	add    esp,0x14
c000b7f1:	5b                   	pop    ebx
c000b7f2:	c2 04 00             	ret    0x4
c000b7f5:	90                   	nop

c000b7f6 <Device::hibernate()>:
c000b7f6:	c3                   	ret    
c000b7f7:	90                   	nop

c000b7f8 <Device::wake()>:
c000b7f8:	c3                   	ret    
c000b7f9:	90                   	nop

c000b7fa <Device::detect()>:
c000b7fa:	c3                   	ret    
c000b7fb:	90                   	nop

c000b7fc <Device::disableLegacy()>:
c000b7fc:	c3                   	ret    
c000b7fd:	90                   	nop

c000b7fe <Device::powerSaving(PowerSavingLevel)>:
c000b7fe:	c3                   	ret    
c000b7ff:	90                   	nop

c000b800 <DriverlessDevice::close(int, int, void*)>:
c000b800:	31 c0                	xor    eax,eax
c000b802:	c3                   	ret    
c000b803:	90                   	nop

c000b804 <DriverlessDevice::detect()>:
c000b804:	c3                   	ret    
c000b805:	90                   	nop

c000b806 <DriverlessDevice::open(int, int, void*)>:
c000b806:	83 ec 18             	sub    esp,0x18
c000b809:	68 70 de 01 c0       	push   0xc001de70
c000b80e:	e8 48 49 00 00       	call   c001015b <KePanic(char const*)>
c000b813:	83 c8 ff             	or     eax,0xffffffff
c000b816:	83 c4 1c             	add    esp,0x1c
c000b819:	c3                   	ret    

c000b81a <Device::~Device()>:
c000b81a:	ba d0 de 01 c0       	mov    edx,0xc001ded0
c000b81f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b823:	89 10                	mov    DWORD PTR [eax],edx
c000b825:	90                   	nop
c000b826:	c3                   	ret    
c000b827:	90                   	nop

c000b828 <Device::~Device()>:
c000b828:	83 ec 0c             	sub    esp,0xc
c000b82b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b82f:	e8 e6 ff ff ff       	call   c000b81a <Device::~Device()>
c000b834:	83 c4 04             	add    esp,0x4
c000b837:	83 ec 08             	sub    esp,0x8
c000b83a:	68 58 01 00 00       	push   0x158
c000b83f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b843:	e8 9a eb ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000b848:	83 c4 10             	add    esp,0x10
c000b84b:	83 c4 0c             	add    esp,0xc
c000b84e:	c3                   	ret    
c000b84f:	90                   	nop

c000b850 <Device::findAndLoadDriver()>:
c000b850:	c7 44 24 04 8e de 01 c0 	mov    DWORD PTR [esp+0x4],0xc001de8e
c000b858:	e9 7b ec ff ff       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>
c000b85d:	90                   	nop

c000b85e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b85e:	57                   	push   edi
c000b85f:	b9 09 00 00 00       	mov    ecx,0x9
c000b864:	56                   	push   esi
c000b865:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b869:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b86d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b877:	81 c7 18 01 00 00    	add    edi,0x118
c000b87d:	fc                   	cld    
c000b87e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b880:	5e                   	pop    esi
c000b881:	5f                   	pop    edi
c000b882:	c3                   	ret    
c000b883:	90                   	nop

c000b884 <Device::preOpenACPI(void*, char*, char*)>:
c000b884:	57                   	push   edi
c000b885:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b88a:	56                   	push   esi
c000b88b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b88f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b893:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b89d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b8a3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b8a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b8ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8af:	b9 0e 00 00 00       	mov    ecx,0xe
c000b8b4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b8ba:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b8be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8c0:	5e                   	pop    esi
c000b8c1:	5f                   	pop    edi
c000b8c2:	c3                   	ret    
c000b8c3:	90                   	nop

c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b8c4:	53                   	push   ebx
c000b8c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b8cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8d5:	0f b6 c0             	movzx  eax,al
c000b8d8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b8dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b8e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b8e8:	5b                   	pop    ebx
c000b8e9:	e9 a6 05 00 00       	jmp    c000be94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b8ee <Device::getParent()>:
c000b8ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8f2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b8f8:	c3                   	ret    
c000b8f9:	90                   	nop

c000b8fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b8fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b902:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b907:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b90b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b90f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b913:	e9 e8 06 00 00       	jmp    c000c000 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b918 <Device::addChild(Device*)>:
c000b918:	53                   	push   ebx
c000b919:	83 ec 08             	sub    esp,0x8
c000b91c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b920:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b924:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b92a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b930:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b932:	85 d2                	test   edx,edx
c000b934:	74 04                	je     c000b93a <Device::addChild(Device*)+0x22>
c000b936:	89 d3                	mov    ebx,edx
c000b938:	eb f6                	jmp    c000b930 <Device::addChild(Device*)+0x18>
c000b93a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b93d:	83 ec 0c             	sub    esp,0xc
c000b940:	6a 08                	push   0x8
c000b942:	e8 72 be ff ff       	call   c00077b9 <malloc>
c000b947:	89 03                	mov    DWORD PTR [ebx],eax
c000b949:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b94f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b956:	83 c4 18             	add    esp,0x18
c000b959:	5b                   	pop    ebx
c000b95a:	c3                   	ret    
c000b95b:	90                   	nop

c000b95c <Device::removeAllChildren()>:
c000b95c:	56                   	push   esi
c000b95d:	53                   	push   ebx
c000b95e:	52                   	push   edx
c000b95f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b963:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b969:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b96c:	74 17                	je     c000b985 <Device::removeAllChildren()+0x29>
c000b96e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b971:	85 c0                	test   eax,eax
c000b973:	74 0c                	je     c000b981 <Device::removeAllChildren()+0x25>
c000b975:	83 ec 0c             	sub    esp,0xc
c000b978:	8b 10                	mov    edx,DWORD PTR [eax]
c000b97a:	50                   	push   eax
c000b97b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b983:	eb e4                	jmp    c000b969 <Device::removeAllChildren()+0xd>
c000b985:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b98b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b991:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b997:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b99e:	58                   	pop    eax
c000b99f:	5b                   	pop    ebx
c000b9a0:	5e                   	pop    esi
c000b9a1:	c3                   	ret    

c000b9a2 <Device::hibernateAll()>:
c000b9a2:	53                   	push   ebx
c000b9a3:	83 ec 14             	sub    esp,0x14
c000b9a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9ac:	53                   	push   ebx
c000b9ad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b9b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9b6:	83 c4 10             	add    esp,0x10
c000b9b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9bc:	74 0f                	je     c000b9cd <Device::hibernateAll()+0x2b>
c000b9be:	83 ec 0c             	sub    esp,0xc
c000b9c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9c4:	e8 d9 ff ff ff       	call   c000b9a2 <Device::hibernateAll()>
c000b9c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9cb:	eb e9                	jmp    c000b9b6 <Device::hibernateAll()+0x14>
c000b9cd:	83 c4 08             	add    esp,0x8
c000b9d0:	5b                   	pop    ebx
c000b9d1:	c3                   	ret    

c000b9d2 <Device::wakeAll()>:
c000b9d2:	53                   	push   ebx
c000b9d3:	83 ec 14             	sub    esp,0x14
c000b9d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9da:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9dc:	53                   	push   ebx
c000b9dd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b9e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9ec:	74 0f                	je     c000b9fd <Device::wakeAll()+0x2b>
c000b9ee:	83 ec 0c             	sub    esp,0xc
c000b9f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9f4:	e8 d9 ff ff ff       	call   c000b9d2 <Device::wakeAll()>
c000b9f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9fb:	eb e9                	jmp    c000b9e6 <Device::wakeAll()+0x14>
c000b9fd:	83 c4 08             	add    esp,0x8
c000ba00:	5b                   	pop    ebx
c000ba01:	c3                   	ret    

c000ba02 <Device::detectAll()>:
c000ba02:	53                   	push   ebx
c000ba03:	83 ec 14             	sub    esp,0x14
c000ba06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba0c:	53                   	push   ebx
c000ba0d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba16:	83 c4 10             	add    esp,0x10
c000ba19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba1c:	74 0f                	je     c000ba2d <Device::detectAll()+0x2b>
c000ba1e:	83 ec 0c             	sub    esp,0xc
c000ba21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba24:	e8 d9 ff ff ff       	call   c000ba02 <Device::detectAll()>
c000ba29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba2b:	eb e9                	jmp    c000ba16 <Device::detectAll()+0x14>
c000ba2d:	83 c4 08             	add    esp,0x8
c000ba30:	5b                   	pop    ebx
c000ba31:	c3                   	ret    

c000ba32 <Device::disableLegacyAll()>:
c000ba32:	c3                   	ret    
c000ba33:	90                   	nop

c000ba34 <Device::loadDriversForAll()>:
c000ba34:	c3                   	ret    
c000ba35:	90                   	nop

c000ba36 <Device::closeAll()>:
c000ba36:	53                   	push   ebx
c000ba37:	83 ec 08             	sub    esp,0x8
c000ba3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba40:	6a 00                	push   0x0
c000ba42:	6a 00                	push   0x0
c000ba44:	6a 00                	push   0x0
c000ba46:	53                   	push   ebx
c000ba47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba4a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba50:	83 c4 10             	add    esp,0x10
c000ba53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba56:	74 0f                	je     c000ba67 <Device::closeAll()+0x31>
c000ba58:	83 ec 0c             	sub    esp,0xc
c000ba5b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba5e:	e8 d3 ff ff ff       	call   c000ba36 <Device::closeAll()>
c000ba63:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba65:	eb e9                	jmp    c000ba50 <Device::closeAll()+0x1a>
c000ba67:	83 c4 08             	add    esp,0x8
c000ba6a:	5b                   	pop    ebx
c000ba6b:	c3                   	ret    

c000ba6c <Device::powerSavingAll(PowerSavingLevel)>:
c000ba6c:	56                   	push   esi
c000ba6d:	53                   	push   ebx
c000ba6e:	83 ec 0c             	sub    esp,0xc
c000ba71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba75:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ba79:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba7b:	56                   	push   esi
c000ba7c:	53                   	push   ebx
c000ba7d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ba80:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba86:	83 c4 10             	add    esp,0x10
c000ba89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba8c:	74 0f                	je     c000ba9d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba8e:	52                   	push   edx
c000ba8f:	52                   	push   edx
c000ba90:	56                   	push   esi
c000ba91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba94:	e8 d3 ff ff ff       	call   c000ba6c <Device::powerSavingAll(PowerSavingLevel)>
c000ba99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba9b:	eb e9                	jmp    c000ba86 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ba9d:	58                   	pop    eax
c000ba9e:	5b                   	pop    ebx
c000ba9f:	5e                   	pop    esi
c000baa0:	c3                   	ret    
c000baa1:	90                   	nop

c000baa2 <Device::setName(char const*)>:
c000baa2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000baaa:	e9 51 4b ff ff       	jmp    c0000600 <strcpy>
c000baaf:	90                   	nop

c000bab0 <Device::Device(char const*)>:
c000bab0:	83 ec 1c             	sub    esp,0x1c
c000bab3:	ba d0 de 01 c0       	mov    edx,0xc001ded0
c000bab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000babc:	89 10                	mov    DWORD PTR [eax],edx
c000babe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bacc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bade:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baec:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000baf6:	83 ec 08             	sub    esp,0x8
c000baf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bafd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb01:	e8 9c ff ff ff       	call   c000baa2 <Device::setName(char const*)>
c000bb06:	83 c4 10             	add    esp,0x10
c000bb09:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb11:	83 ec 0c             	sub    esp,0xc
c000bb14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb18:	e8 9c bc ff ff       	call   c00077b9 <malloc>
c000bb1d:	83 c4 10             	add    esp,0x10
c000bb20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb31:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bb37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb3b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb5c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb67:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bb6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb72:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb80:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb8e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb9c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bba6:	90                   	nop
c000bba7:	83 c4 1c             	add    esp,0x1c
c000bbaa:	c3                   	ret    
c000bbab:	90                   	nop

c000bbac <Device::getName()>:
c000bbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbb0:	05 d0 00 00 00       	add    eax,0xd0
c000bbb5:	c3                   	ret    

c000bbb6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bbb6:	83 ec 0c             	sub    esp,0xc
c000bbb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbbd:	83 ec 08             	sub    esp,0x8
c000bbc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbc4:	50                   	push   eax
c000bbc5:	e8 e6 fe ff ff       	call   c000bab0 <Device::Device(char const*)>
c000bbca:	83 c4 10             	add    esp,0x10
c000bbcd:	ba fc de 01 c0       	mov    edx,0xc001defc
c000bbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbd6:	89 10                	mov    DWORD PTR [eax],edx
c000bbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbdc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bbe6:	90                   	nop
c000bbe7:	83 c4 0c             	add    esp,0xc
c000bbea:	c3                   	ret    
c000bbeb:	90                   	nop

c000bbec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bbec:	57                   	push   edi
c000bbed:	56                   	push   esi
c000bbee:	53                   	push   ebx
c000bbef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbf3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbf7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbfb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc01:	75 0c                	jne    c000bc0f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc03:	52                   	push   edx
c000bc04:	52                   	push   edx
c000bc05:	53                   	push   ebx
c000bc06:	56                   	push   esi
c000bc07:	e8 96 09 01 00       	call   c001c5a2 <LinkedList<Device>::addElement(Device*)>
c000bc0c:	83 c4 10             	add    esp,0x10
c000bc0f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc18:	74 12                	je     c000bc2c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc1a:	50                   	push   eax
c000bc1b:	57                   	push   edi
c000bc1c:	56                   	push   esi
c000bc1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc20:	e8 c7 ff ff ff       	call   c000bbec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc27:	83 c4 10             	add    esp,0x10
c000bc2a:	eb e9                	jmp    c000bc15 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc2c:	5b                   	pop    ebx
c000bc2d:	5e                   	pop    esi
c000bc2e:	5f                   	pop    edi
c000bc2f:	c3                   	ret    

c000bc30 <getDevicesOfType(DeviceType)>:
c000bc30:	53                   	push   ebx
c000bc31:	83 ec 14             	sub    esp,0x14
c000bc34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc38:	53                   	push   ebx
c000bc39:	e8 40 0a 01 00       	call   c001c67e <LinkedList<Device>::LinkedList()>
c000bc3e:	83 c4 0c             	add    esp,0xc
c000bc41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc45:	53                   	push   ebx
c000bc46:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000bc4c:	e8 9b ff ff ff       	call   c000bbec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc51:	89 d8                	mov    eax,ebx
c000bc53:	83 c4 18             	add    esp,0x18
c000bc56:	5b                   	pop    ebx
c000bc57:	c2 04 00             	ret    0x4
c000bc5a:	66 90                	xchg   ax,ax

c000bc5c <HardDiskController::HardDiskController(char const*)>:
c000bc5c:	83 ec 0c             	sub    esp,0xc
c000bc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc63:	83 ec 08             	sub    esp,0x8
c000bc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6a:	50                   	push   eax
c000bc6b:	e8 40 fe ff ff       	call   c000bab0 <Device::Device(char const*)>
c000bc70:	83 c4 10             	add    esp,0x10
c000bc73:	ba 28 df 01 c0       	mov    edx,0xc001df28
c000bc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc7c:	89 10                	mov    DWORD PTR [eax],edx
c000bc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc82:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc8c:	90                   	nop
c000bc8d:	83 c4 0c             	add    esp,0xc
c000bc90:	c3                   	ret    
c000bc91:	90                   	nop
c000bc92:	66 90                	xchg   ax,ax

c000bc94 <HardDiskController::~HardDiskController()>:
c000bc94:	83 ec 0c             	sub    esp,0xc
c000bc97:	ba 28 df 01 c0       	mov    edx,0xc001df28
c000bc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca0:	89 10                	mov    DWORD PTR [eax],edx
c000bca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca6:	83 ec 0c             	sub    esp,0xc
c000bca9:	50                   	push   eax
c000bcaa:	e8 6b fb ff ff       	call   c000b81a <Device::~Device()>
c000bcaf:	83 c4 10             	add    esp,0x10
c000bcb2:	90                   	nop
c000bcb3:	83 c4 0c             	add    esp,0xc
c000bcb6:	c3                   	ret    
c000bcb7:	90                   	nop

c000bcb8 <HardDiskController::~HardDiskController()>:
c000bcb8:	83 ec 0c             	sub    esp,0xc
c000bcbb:	83 ec 0c             	sub    esp,0xc
c000bcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc2:	e8 cd ff ff ff       	call   c000bc94 <HardDiskController::~HardDiskController()>
c000bcc7:	83 c4 10             	add    esp,0x10
c000bcca:	83 ec 08             	sub    esp,0x8
c000bccd:	68 58 01 00 00       	push   0x158
c000bcd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcd6:	e8 07 e7 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000bcdb:	83 c4 10             	add    esp,0x10
c000bcde:	83 c4 0c             	add    esp,0xc
c000bce1:	c3                   	ret    

c000bce2 <PhysicalDisk::eject()>:
c000bce2:	83 c8 ff             	or     eax,0xffffffff
c000bce5:	c3                   	ret    

c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bce6:	83 ec 0c             	sub    esp,0xc
c000bce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bced:	83 ec 08             	sub    esp,0x8
c000bcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf4:	50                   	push   eax
c000bcf5:	e8 b6 fd ff ff       	call   c000bab0 <Device::Device(char const*)>
c000bcfa:	83 c4 10             	add    esp,0x10
c000bcfd:	ba 54 df 01 c0       	mov    edx,0xc001df54
c000bd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd06:	89 10                	mov    DWORD PTR [eax],edx
c000bd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd17:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd22:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd34:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd3e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd48:	90                   	nop
c000bd49:	83 c4 0c             	add    esp,0xc
c000bd4c:	c3                   	ret    
c000bd4d:	90                   	nop

c000bd4e <PhysicalDisk::startCache()>:
c000bd4e:	56                   	push   esi
c000bd4f:	53                   	push   ebx
c000bd50:	83 ec 10             	sub    esp,0x10
c000bd53:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd57:	6a 44                	push   0x44
c000bd59:	e8 5b ba ff ff       	call   c00077b9 <malloc>
c000bd5e:	89 c6                	mov    esi,eax
c000bd60:	58                   	pop    eax
c000bd61:	5a                   	pop    edx
c000bd62:	53                   	push   ebx
c000bd63:	56                   	push   esi
c000bd64:	e8 eb 15 00 00       	call   c000d354 <VCache::VCache(PhysicalDisk*)>
c000bd69:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bd6f:	83 c4 14             	add    esp,0x14
c000bd72:	5b                   	pop    ebx
c000bd73:	5e                   	pop    esi
c000bd74:	c3                   	ret    
c000bd75:	90                   	nop

c000bd76 <PhysicalDisk::~PhysicalDisk()>:
c000bd76:	83 ec 0c             	sub    esp,0xc
c000bd79:	ba 54 df 01 c0       	mov    edx,0xc001df54
c000bd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd82:	89 10                	mov    DWORD PTR [eax],edx
c000bd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd88:	83 ec 0c             	sub    esp,0xc
c000bd8b:	50                   	push   eax
c000bd8c:	e8 89 fa ff ff       	call   c000b81a <Device::~Device()>
c000bd91:	83 c4 10             	add    esp,0x10
c000bd94:	90                   	nop
c000bd95:	83 c4 0c             	add    esp,0xc
c000bd98:	c3                   	ret    
c000bd99:	90                   	nop

c000bd9a <PhysicalDisk::~PhysicalDisk()>:
c000bd9a:	83 ec 0c             	sub    esp,0xc
c000bd9d:	83 ec 0c             	sub    esp,0xc
c000bda0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bda4:	e8 cd ff ff ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c000bda9:	83 c4 10             	add    esp,0x10
c000bdac:	83 ec 08             	sub    esp,0x8
c000bdaf:	68 6c 01 00 00       	push   0x16c
c000bdb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb8:	e8 25 e6 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000bdbd:	83 c4 10             	add    esp,0x10
c000bdc0:	83 c4 0c             	add    esp,0xc
c000bdc3:	c3                   	ret    

c000bdc4 <int_handler>:
c000bdc4:	55                   	push   ebp
c000bdc5:	57                   	push   edi
c000bdc6:	56                   	push   esi
c000bdc7:	53                   	push   ebx
c000bdc8:	83 ec 0c             	sub    esp,0xc
c000bdcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bdcf:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000bdd6:	74 0b                	je     c000bde3 <int_handler+0x1f>
c000bdd8:	fa                   	cli    
c000bdd9:	f4                   	hlt    
c000bdda:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000bde1:	75 f5                	jne    c000bdd8 <int_handler+0x14>
c000bde3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bde6:	8d 46 e0             	lea    eax,[esi-0x20]
c000bde9:	83 f8 17             	cmp    eax,0x17
c000bdec:	76 3e                	jbe    c000be2c <int_handler+0x68>
c000bdee:	c1 e6 04             	shl    esi,0x4
c000bdf1:	31 db                	xor    ebx,ebx
c000bdf3:	8d ae c0 2f 02 c0    	lea    ebp,[esi-0x3ffdd040]
c000bdf9:	81 c6 c0 1f 02 c0    	add    esi,0xc0021fc0
c000bdff:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be03:	85 c0                	test   eax,eax
c000be05:	74 13                	je     c000be1a <int_handler+0x56>
c000be07:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be0a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be0e:	74 2a                	je     c000be3a <int_handler+0x76>
c000be10:	83 ec 08             	sub    esp,0x8
c000be13:	52                   	push   edx
c000be14:	57                   	push   edi
c000be15:	ff d0                	call   eax
c000be17:	83 c4 10             	add    esp,0x10
c000be1a:	43                   	inc    ebx
c000be1b:	83 fb 04             	cmp    ebx,0x4
c000be1e:	75 df                	jne    c000bdff <int_handler+0x3b>
c000be20:	83 c4 0c             	add    esp,0xc
c000be23:	31 c0                	xor    eax,eax
c000be25:	5b                   	pop    ebx
c000be26:	31 d2                	xor    edx,edx
c000be28:	5e                   	pop    esi
c000be29:	5f                   	pop    edi
c000be2a:	5d                   	pop    ebp
c000be2b:	c3                   	ret    
c000be2c:	83 ec 0c             	sub    esp,0xc
c000be2f:	50                   	push   eax
c000be30:	e8 52 9a 00 00       	call   c0015887 <HalEndOfInterrupt(int)>
c000be35:	83 c4 10             	add    esp,0x10
c000be38:	eb b4                	jmp    c000bdee <int_handler+0x2a>
c000be3a:	83 ec 08             	sub    esp,0x8
c000be3d:	52                   	push   edx
c000be3e:	57                   	push   edi
c000be3f:	ff d0                	call   eax
c000be41:	83 c4 10             	add    esp,0x10
c000be44:	83 c4 0c             	add    esp,0xc
c000be47:	5b                   	pop    ebx
c000be48:	5e                   	pop    esi
c000be49:	5f                   	pop    edi
c000be4a:	5d                   	pop    ebp
c000be4b:	c3                   	ret    

c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000be4c:	56                   	push   esi
c000be4d:	31 c0                	xor    eax,eax
c000be4f:	53                   	push   ebx
c000be50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be58:	89 ca                	mov    edx,ecx
c000be5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be5e:	c1 e2 04             	shl    edx,0x4
c000be61:	83 bc 82 c0 2f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdd040],0x0
c000be69:	74 15                	je     c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be6b:	40                   	inc    eax
c000be6c:	83 f8 04             	cmp    eax,0x4
c000be6f:	75 f0                	jne    c000be61 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000be71:	c7 44 24 0c 84 df 01 c0 	mov    DWORD PTR [esp+0xc],0xc001df84
c000be79:	5b                   	pop    ebx
c000be7a:	5e                   	pop    esi
c000be7b:	e9 db 42 00 00       	jmp    c001015b <KePanic(char const*)>
c000be80:	8d 04 88             	lea    eax,[eax+ecx*4]
c000be83:	89 1c 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],ebx
c000be8a:	89 34 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],esi
c000be91:	5b                   	pop    ebx
c000be92:	5e                   	pop    esi
c000be93:	c3                   	ret    

c000be94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be94:	57                   	push   edi
c000be95:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000be9b:	56                   	push   esi
c000be9c:	53                   	push   ebx
c000be9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bea1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bea5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000beac:	74 5b                	je     c000bf09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000beae:	89 c7                	mov    edi,eax
c000beb0:	84 c0                	test   al,al
c000beb2:	74 24                	je     c000bed8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000beb4:	83 fe 0f             	cmp    esi,0xf
c000beb7:	0f 8f d9 00 00 00    	jg     c000bf96 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bebd:	8a 86 e0 f7 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0820]
c000bec3:	25 ff 00 00 00       	and    eax,0xff
c000bec8:	66 8b bc 00 60 47 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdb8a0]
c000bed0:	89 c6                	mov    esi,eax
c000bed2:	66 d1 ef             	shr    di,1
c000bed5:	83 e7 01             	and    edi,0x1
c000bed8:	83 ec 08             	sub    esp,0x8
c000bedb:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bee0:	31 db                	xor    ebx,ebx
c000bee2:	50                   	push   eax
c000bee3:	68 91 df 01 c0       	push   0xc001df91
c000bee8:	e8 eb e5 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000beed:	83 c4 10             	add    esp,0x10
c000bef0:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bef5:	85 c0                	test   eax,eax
c000bef7:	7f 51                	jg     c000bf4a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bef9:	83 ec 0c             	sub    esp,0xc
c000befc:	68 a8 df 01 c0       	push   0xc001dfa8
c000bf01:	e8 55 42 00 00       	call   c001015b <KePanic(char const*)>
c000bf06:	83 c4 10             	add    esp,0x10
c000bf09:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf0c:	31 d2                	xor    edx,edx
c000bf0e:	89 c8                	mov    eax,ecx
c000bf10:	c1 e0 04             	shl    eax,0x4
c000bf13:	8b 9c 90 c0 2f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdd040]
c000bf1a:	85 db                	test   ebx,ebx
c000bf1c:	0f 84 8b 00 00 00    	je     c000bfad <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf22:	42                   	inc    edx
c000bf23:	83 fa 04             	cmp    edx,0x4
c000bf26:	75 eb                	jne    c000bf13 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf28:	83 ec 0c             	sub    esp,0xc
c000bf2b:	68 fc df 01 c0       	push   0xc001dffc
c000bf30:	e8 26 42 00 00       	call   c001015b <KePanic(char const*)>
c000bf35:	83 c4 10             	add    esp,0x10
c000bf38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf3d:	5b                   	pop    ebx
c000bf3e:	5e                   	pop    esi
c000bf3f:	5f                   	pop    edi
c000bf40:	c3                   	ret    
c000bf41:	43                   	inc    ebx
c000bf42:	39 1d 60 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b60,ebx
c000bf48:	7e af                	jle    c000bef9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf4a:	83 ec 08             	sub    esp,0x8
c000bf4d:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000bf54:	56                   	push   esi
c000bf55:	50                   	push   eax
c000bf56:	e8 19 f6 00 00       	call   c001b574 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf5b:	83 c4 10             	add    esp,0x10
c000bf5e:	84 c0                	test   al,al
c000bf60:	74 df                	je     c000bf41 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf62:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf68:	50                   	push   eax
c000bf69:	8d 46 20             	lea    eax,[esi+0x20]
c000bf6c:	57                   	push   edi
c000bf6d:	25 ff 00 00 00       	and    eax,0xff
c000bf72:	6a 00                	push   0x0
c000bf74:	50                   	push   eax
c000bf75:	89 f0                	mov    eax,esi
c000bf77:	6a 00                	push   0x0
c000bf79:	25 ff 00 00 00       	and    eax,0xff
c000bf7e:	6a 00                	push   0x0
c000bf80:	50                   	push   eax
c000bf81:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000bf88:	50                   	push   eax
c000bf89:	e8 60 f7 00 00       	call   c001b6ee <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf8e:	83 c4 20             	add    esp,0x20
c000bf91:	e9 73 ff ff ff       	jmp    c000bf09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf96:	83 ec 0c             	sub    esp,0xc
c000bf99:	31 ff                	xor    edi,edi
c000bf9b:	68 c4 df 01 c0       	push   0xc001dfc4
c000bfa0:	e8 b6 41 00 00       	call   c001015b <KePanic(char const*)>
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	e9 2b ff ff ff       	jmp    c000bed8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfad:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bfb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bfb4:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000bfbb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bfbf:	5b                   	pop    ebx
c000bfc0:	89 14 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],edx
c000bfc7:	89 f0                	mov    eax,esi
c000bfc9:	5e                   	pop    esi
c000bfca:	5f                   	pop    edi
c000bfcb:	c3                   	ret    

c000bfcc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bfcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bfd4:	c1 e0 04             	shl    eax,0x4
c000bfd7:	8d 50 10             	lea    edx,[eax+0x10]
c000bfda:	39 88 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ecx
c000bfe0:	74 08                	je     c000bfea <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bfe2:	83 c0 04             	add    eax,0x4
c000bfe5:	39 d0                	cmp    eax,edx
c000bfe7:	75 f1                	jne    c000bfda <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bfe9:	c3                   	ret    
c000bfea:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000bff4:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000bffe:	eb e2                	jmp    c000bfe2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c000 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c000:	53                   	push   ebx
c000c001:	83 ec 08             	sub    esp,0x8
c000c004:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c008:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c00d:	74 0e                	je     c000c01d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c00f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000c014:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c01b:	75 37                	jne    c000c054 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c021:	83 c0 20             	add    eax,0x20
c000c024:	c1 e0 04             	shl    eax,0x4
c000c027:	8d 50 10             	lea    edx,[eax+0x10]
c000c02a:	39 98 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ebx
c000c030:	74 0c                	je     c000c03e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c032:	83 c0 04             	add    eax,0x4
c000c035:	39 d0                	cmp    eax,edx
c000c037:	75 f1                	jne    c000c02a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c039:	83 c4 08             	add    esp,0x8
c000c03c:	5b                   	pop    ebx
c000c03d:	c3                   	ret    
c000c03e:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c048:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c052:	eb de                	jmp    c000c032 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c054:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c059:	7f 12                	jg     c000c06d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c05b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c05f:	31 c0                	xor    eax,eax
c000c061:	8a 81 e0 f7 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0820]
c000c067:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c06b:	eb b0                	jmp    c000c01d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c06d:	83 ec 0c             	sub    esp,0xc
c000c070:	68 b5 df 01 c0       	push   0xc001dfb5
c000c075:	e8 e1 40 00 00       	call   c001015b <KePanic(char const*)>
c000c07a:	83 c4 10             	add    esp,0x10
c000c07d:	eb 9e                	jmp    c000c01d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c07f <setupINTS()>:
c000c07f:	31 c0                	xor    eax,eax
c000c081:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c08b:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c095:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c09f:	c7 80 c4 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde03c],0x0
c000c0a9:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c0b3:	c7 80 c8 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde038],0x0
c000c0bd:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c0c7:	c7 80 cc 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde034],0x0
c000c0d1:	83 c0 10             	add    eax,0x10
c000c0d4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c0d9:	75 a6                	jne    c000c081 <setupINTS()+0x2>
c000c0db:	c3                   	ret    

c000c0dc <convertLegacyIRQNumber(int)>:
c000c0dc:	83 ec 0c             	sub    esp,0xc
c000c0df:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000c0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c0f0:	74 0f                	je     c000c101 <convertLegacyIRQNumber(int)+0x25>
c000c0f2:	83 f8 0f             	cmp    eax,0xf
c000c0f5:	7f 0e                	jg     c000c105 <convertLegacyIRQNumber(int)+0x29>
c000c0f7:	31 c9                	xor    ecx,ecx
c000c0f9:	8a 88 e0 f7 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0820]
c000c0ff:	89 c8                	mov    eax,ecx
c000c101:	83 c4 0c             	add    esp,0xc
c000c104:	c3                   	ret    
c000c105:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c109:	83 ec 0c             	sub    esp,0xc
c000c10c:	68 c4 df 01 c0       	push   0xc001dfc4
c000c111:	e8 45 40 00 00       	call   c001015b <KePanic(char const*)>
c000c116:	83 c4 10             	add    esp,0x10
c000c119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11d:	83 c4 0c             	add    esp,0xc
c000c120:	c3                   	ret    
c000c121:	90                   	nop

c000c122 <startGUI(void*)>:
c000c122:	55                   	push   ebp
c000c123:	89 e5                	mov    ebp,esp
c000c125:	53                   	push   ebx
c000c126:	83 ec 04             	sub    esp,0x4
c000c129:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c12e:	48                   	dec    eax
c000c12f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c134:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c139:	85 c0                	test   eax,eax
c000c13b:	75 01                	jne    c000c13e <startGUI(void*)+0x1c>
c000c13d:	fb                   	sti    
c000c13e:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c144:	83 ec 08             	sub    esp,0x8
c000c147:	6a 01                	push   0x1
c000c149:	68 21 e0 01 c0       	push   0xc001e021
c000c14e:	e8 18 6c 00 00       	call   c0012d6b <Thr::loadDLL(char const*, bool)>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	83 ec 08             	sub    esp,0x8
c000c159:	53                   	push   ebx
c000c15a:	50                   	push   eax
c000c15b:	e8 3c 6e 00 00       	call   c0012f9c <Thr::executeDLL(unsigned long, void*)>
c000c160:	83 c4 10             	add    esp,0x10
c000c163:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c169:	83 ec 08             	sub    esp,0x8
c000c16c:	6a 01                	push   0x1
c000c16e:	68 3b e0 01 c0       	push   0xc001e03b
c000c173:	e8 f3 6b 00 00       	call   c0012d6b <Thr::loadDLL(char const*, bool)>
c000c178:	83 c4 10             	add    esp,0x10
c000c17b:	83 ec 08             	sub    esp,0x8
c000c17e:	53                   	push   ebx
c000c17f:	50                   	push   eax
c000c180:	e8 17 6e 00 00       	call   c0012f9c <Thr::executeDLL(unsigned long, void*)>
c000c185:	83 c4 10             	add    esp,0x10
c000c188:	90                   	nop
c000c189:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c18c:	c9                   	leave  
c000c18d:	c3                   	ret    

c000c18e <startGUIVESA(void*)>:
c000c18e:	55                   	push   ebp
c000c18f:	89 e5                	mov    ebp,esp
c000c191:	53                   	push   ebx
c000c192:	83 ec 04             	sub    esp,0x4
c000c195:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c19a:	48                   	dec    eax
c000c19b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c1a0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1a5:	85 c0                	test   eax,eax
c000c1a7:	75 01                	jne    c000c1aa <startGUIVESA(void*)+0x1c>
c000c1a9:	fb                   	sti    
c000c1aa:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c1b0:	83 ec 08             	sub    esp,0x8
c000c1b3:	6a 01                	push   0x1
c000c1b5:	68 59 e0 01 c0       	push   0xc001e059
c000c1ba:	e8 ac 6b 00 00       	call   c0012d6b <Thr::loadDLL(char const*, bool)>
c000c1bf:	83 c4 10             	add    esp,0x10
c000c1c2:	83 ec 08             	sub    esp,0x8
c000c1c5:	53                   	push   ebx
c000c1c6:	50                   	push   eax
c000c1c7:	e8 d0 6d 00 00       	call   c0012f9c <Thr::executeDLL(unsigned long, void*)>
c000c1cc:	83 c4 10             	add    esp,0x10
c000c1cf:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c1d5:	83 ec 08             	sub    esp,0x8
c000c1d8:	6a 01                	push   0x1
c000c1da:	68 3b e0 01 c0       	push   0xc001e03b
c000c1df:	e8 87 6b 00 00       	call   c0012d6b <Thr::loadDLL(char const*, bool)>
c000c1e4:	83 c4 10             	add    esp,0x10
c000c1e7:	83 ec 08             	sub    esp,0x8
c000c1ea:	53                   	push   ebx
c000c1eb:	50                   	push   eax
c000c1ec:	e8 ab 6d 00 00       	call   c0012f9c <Thr::executeDLL(unsigned long, void*)>
c000c1f1:	83 c4 10             	add    esp,0x10
c000c1f4:	90                   	nop
c000c1f5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c1f8:	c9                   	leave  
c000c1f9:	c3                   	ret    

c000c1fa <sendKeyToTerminal(unsigned char)>:
c000c1fa:	55                   	push   ebp
c000c1fb:	89 e5                	mov    ebp,esp
c000c1fd:	83 ec 28             	sub    esp,0x28
c000c200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c203:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c206:	8b 15 04 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f04
c000c20c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c20f:	25 ff 00 00 00       	and    eax,0xff
c000c214:	83 ec 08             	sub    esp,0x8
c000c217:	50                   	push   eax
c000c218:	52                   	push   edx
c000c219:	e8 28 c8 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c21e:	83 c4 10             	add    esp,0x10
c000c221:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c225:	74 0a                	je     c000c231 <sendKeyToTerminal(unsigned char)+0x37>
c000c227:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c22b:	0f 85 8f 00 00 00    	jne    c000c2c0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c231:	fa                   	cli    
c000c232:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c237:	40                   	inc    eax
c000c238:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c23d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c242:	40                   	inc    eax
c000c243:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c248:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c000c24d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c250:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000c25a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c25e:	74 1f                	je     c000c27f <sendKeyToTerminal(unsigned char)+0x85>
c000c260:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c263:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c266:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c269:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c26c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c26f:	83 ec 0c             	sub    esp,0xc
c000c272:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c275:	e8 e2 79 00 00       	call   c0013c5c <unblockTask(ThreadControlBlock*)>
c000c27a:	83 c4 10             	add    esp,0x10
c000c27d:	eb db                	jmp    c000c25a <sendKeyToTerminal(unsigned char)+0x60>
c000c27f:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c284:	48                   	dec    eax
c000c285:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c28a:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c28f:	85 c0                	test   eax,eax
c000c291:	75 18                	jne    c000c2ab <sendKeyToTerminal(unsigned char)+0xb1>
c000c293:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c000c298:	85 c0                	test   eax,eax
c000c29a:	74 0f                	je     c000c2ab <sendKeyToTerminal(unsigned char)+0xb1>
c000c29c:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000c2a6:	e8 ed 74 00 00       	call   c0013798 <schedule()>
c000c2ab:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2b0:	48                   	dec    eax
c000c2b1:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c2b6:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2bb:	85 c0                	test   eax,eax
c000c2bd:	75 01                	jne    c000c2c0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c2bf:	fb                   	sti    
c000c2c0:	90                   	nop
c000c2c1:	c9                   	leave  
c000c2c2:	c3                   	ret    

c000c2c3 <sendKeyboardToken(KeyboardToken)>:
c000c2c3:	55                   	push   ebp
c000c2c4:	89 e5                	mov    ebp,esp
c000c2c6:	83 ec 18             	sub    esp,0x18
c000c2c9:	e8 dd 3e 00 00       	call   c00101ab <Krnl::userIOReceived()>
c000c2ce:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c2d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2d4:	25 ff ff 00 00       	and    eax,0xffff
c000c2d9:	83 f2 01             	xor    edx,0x1
c000c2dc:	88 90 e0 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc020],dl
c000c2e2:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c2e7:	85 c0                	test   eax,eax
c000c2e9:	74 24                	je     c000c30f <sendKeyboardToken(KeyboardToken)+0x4c>
c000c2eb:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c2f1:	83 ec 04             	sub    esp,0x4
c000c2f4:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c2f9:	83 ec 08             	sub    esp,0x8
c000c2fc:	89 e2                	mov    edx,esp
c000c2fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c301:	89 02                	mov    DWORD PTR [edx],eax
c000c303:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c306:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c30a:	ff d1                	call   ecx
c000c30c:	83 c4 10             	add    esp,0x10
c000c30f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c313:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c316:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c31b:	38 c2                	cmp    dl,al
c000c31d:	74 1e                	je     c000c33d <sendKeyboardToken(KeyboardToken)+0x7a>
c000c31f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c322:	a2 e8 43 02 c0       	mov    ds:0xc00243e8,al
c000c327:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c32c:	25 ff 00 00 00       	and    eax,0xff
c000c331:	83 ec 0c             	sub    esp,0xc
c000c334:	50                   	push   eax
c000c335:	e8 5e be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c33a:	83 c4 10             	add    esp,0x10
c000c33d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c340:	84 c0                	test   al,al
c000c342:	0f 84 ae 00 00 00    	je     c000c3f6 <sendKeyboardToken(KeyboardToken)+0x133>
c000c348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c34b:	66 3d 10 03          	cmp    ax,0x310
c000c34f:	75 06                	jne    c000c357 <sendKeyboardToken(KeyboardToken)+0x94>
c000c351:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c357:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c35a:	66 3d 11 03          	cmp    ax,0x311
c000c35e:	75 06                	jne    c000c366 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c360:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c369:	66 3d 12 03          	cmp    ax,0x312
c000c36d:	75 06                	jne    c000c375 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c36f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c378:	66 3d 13 03          	cmp    ax,0x313
c000c37c:	75 06                	jne    c000c384 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c37e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c384:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c387:	66 3d 14 03          	cmp    ax,0x314
c000c38b:	75 06                	jne    c000c393 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c38d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c393:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c396:	66 3d 15 03          	cmp    ax,0x315
c000c39a:	75 06                	jne    c000c3a2 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c39c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a5:	66 3d 16 03          	cmp    ax,0x316
c000c3a9:	75 06                	jne    c000c3b1 <sendKeyboardToken(KeyboardToken)+0xee>
c000c3ab:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c3b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3b4:	66 3d 17 03          	cmp    ax,0x317
c000c3b8:	75 06                	jne    c000c3c0 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c3ba:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c3c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3c3:	66 3d 18 03          	cmp    ax,0x318
c000c3c7:	75 06                	jne    c000c3cf <sendKeyboardToken(KeyboardToken)+0x10c>
c000c3c9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c3cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3d2:	66 3d 19 03          	cmp    ax,0x319
c000c3d6:	75 06                	jne    c000c3de <sendKeyboardToken(KeyboardToken)+0x11b>
c000c3d8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c3de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e1:	66 3d 1a 03          	cmp    ax,0x31a
c000c3e5:	0f 85 c9 00 00 00    	jne    c000c4b4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3eb:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c3f1:	e9 be 00 00 00       	jmp    c000c4b4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f9:	66 3d 10 03          	cmp    ax,0x310
c000c3fd:	75 0a                	jne    c000c409 <sendKeyboardToken(KeyboardToken)+0x146>
c000c3ff:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c405:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c40c:	66 3d 11 03          	cmp    ax,0x311
c000c410:	75 0a                	jne    c000c41c <sendKeyboardToken(KeyboardToken)+0x159>
c000c412:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c418:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c41c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41f:	66 3d 12 03          	cmp    ax,0x312
c000c423:	75 0a                	jne    c000c42f <sendKeyboardToken(KeyboardToken)+0x16c>
c000c425:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c42b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c42f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c432:	66 3d 13 03          	cmp    ax,0x313
c000c436:	75 0a                	jne    c000c442 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c438:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c43e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c445:	66 3d 14 03          	cmp    ax,0x314
c000c449:	75 0a                	jne    c000c455 <sendKeyboardToken(KeyboardToken)+0x192>
c000c44b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c451:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c458:	66 3d 15 03          	cmp    ax,0x315
c000c45c:	75 0a                	jne    c000c468 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c45e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c464:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c46b:	66 3d 16 03          	cmp    ax,0x316
c000c46f:	75 0a                	jne    c000c47b <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c471:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c477:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c47b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47e:	66 3d 17 03          	cmp    ax,0x317
c000c482:	75 0a                	jne    c000c48e <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c484:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c48a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c48e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c491:	66 3d 18 03          	cmp    ax,0x318
c000c495:	75 0a                	jne    c000c4a1 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c497:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c49d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a4:	66 3d 19 03          	cmp    ax,0x319
c000c4a8:	75 0a                	jne    c000c4b4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4aa:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c4b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b7:	66 3d 00 02          	cmp    ax,0x200
c000c4bb:	75 2c                	jne    c000c4e9 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4bd:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c4c2:	83 f0 01             	xor    eax,0x1
c000c4c5:	84 c0                	test   al,al
c000c4c7:	74 20                	je     c000c4e9 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4c9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c4ce:	6a 01                	push   0x1
c000c4d0:	6a 00                	push   0x0
c000c4d2:	68 22 c1 00 c0       	push   0xc000c122
c000c4d7:	50                   	push   eax
c000c4d8:	e8 9b 70 00 00       	call   c0013578 <Process::createThread(void (*)(void*), void*, int)>
c000c4dd:	83 c4 10             	add    esp,0x10
c000c4e0:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c4e7:	eb 33                	jmp    c000c51c <sendKeyboardToken(KeyboardToken)+0x259>
c000c4e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ec:	66 3d 01 02          	cmp    ax,0x201
c000c4f0:	75 2a                	jne    c000c51c <sendKeyboardToken(KeyboardToken)+0x259>
c000c4f2:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c4f7:	83 f0 01             	xor    eax,0x1
c000c4fa:	84 c0                	test   al,al
c000c4fc:	74 1e                	je     c000c51c <sendKeyboardToken(KeyboardToken)+0x259>
c000c4fe:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c503:	6a 01                	push   0x1
c000c505:	6a 00                	push   0x0
c000c507:	68 8e c1 00 c0       	push   0xc000c18e
c000c50c:	50                   	push   eax
c000c50d:	e8 66 70 00 00       	call   c0013578 <Process::createThread(void (*)(void*), void*, int)>
c000c512:	83 c4 10             	add    esp,0x10
c000c515:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c51c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c51f:	66 3d 1d 03          	cmp    ax,0x31d
c000c523:	75 06                	jne    c000c52b <sendKeyboardToken(KeyboardToken)+0x268>
c000c525:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c52b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52e:	66 3d 1c 03          	cmp    ax,0x31c
c000c532:	75 06                	jne    c000c53a <sendKeyboardToken(KeyboardToken)+0x277>
c000c534:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c53a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53d:	66 3d 1b 03          	cmp    ax,0x31b
c000c541:	75 06                	jne    c000c549 <sendKeyboardToken(KeyboardToken)+0x286>
c000c543:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54c:	66 3d 1e 03          	cmp    ax,0x31e
c000c550:	75 06                	jne    c000c558 <sendKeyboardToken(KeyboardToken)+0x295>
c000c552:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c55b:	66 3d 1f 03          	cmp    ax,0x31f
c000c55f:	75 06                	jne    c000c567 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c561:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c56a:	66 3d 1a 03          	cmp    ax,0x31a
c000c56e:	75 06                	jne    c000c576 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c570:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c576:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c57a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c57d:	83 f0 01             	xor    eax,0x1
c000c580:	84 c0                	test   al,al
c000c582:	74 7b                	je     c000c5ff <sendKeyboardToken(KeyboardToken)+0x33c>
c000c584:	a0 e1 40 02 c0       	mov    al,ds:0xc00240e1
c000c589:	84 c0                	test   al,al
c000c58b:	74 43                	je     c000c5d0 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c58d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c591:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c595:	74 2d                	je     c000c5c4 <sendKeyboardToken(KeyboardToken)+0x301>
c000c597:	8b 15 e4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243e4
c000c59d:	89 d0                	mov    eax,edx
c000c59f:	c1 e0 02             	shl    eax,0x2
c000c5a2:	01 d0                	add    eax,edx
c000c5a4:	01 c0                	add    eax,eax
c000c5a6:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c5ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ae:	25 ff ff 00 00       	and    eax,0xffff
c000c5b3:	8d 50 d0             	lea    edx,[eax-0x30]
c000c5b6:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c5bb:	01 d0                	add    eax,edx
c000c5bd:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c5c2:	eb 71                	jmp    c000c635 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5c4:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c5ce:	eb 65                	jmp    c000c635 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5d0:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c5d5:	85 c0                	test   eax,eax
c000c5d7:	74 1a                	je     c000c5f3 <sendKeyboardToken(KeyboardToken)+0x330>
c000c5d9:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c5de:	25 ff 00 00 00       	and    eax,0xff
c000c5e3:	83 ec 0c             	sub    esp,0xc
c000c5e6:	50                   	push   eax
c000c5e7:	e8 0e fc ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c5ec:	83 c4 10             	add    esp,0x10
c000c5ef:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5f3:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c5fd:	eb 36                	jmp    c000c635 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c602:	66 3d 01 01          	cmp    ax,0x101
c000c606:	75 2d                	jne    c000c635 <sendKeyboardToken(KeyboardToken)+0x372>
c000c608:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c60d:	85 c0                	test   eax,eax
c000c60f:	74 1a                	je     c000c62b <sendKeyboardToken(KeyboardToken)+0x368>
c000c611:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c616:	25 ff 00 00 00       	and    eax,0xff
c000c61b:	83 ec 0c             	sub    esp,0xc
c000c61e:	50                   	push   eax
c000c61f:	e8 d6 fb ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c624:	83 c4 10             	add    esp,0x10
c000c627:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c62b:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c635:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c638:	83 f0 01             	xor    eax,0x1
c000c63b:	84 c0                	test   al,al
c000c63d:	74 4e                	je     c000c68d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c63f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c642:	83 f0 01             	xor    eax,0x1
c000c645:	84 c0                	test   al,al
c000c647:	74 44                	je     c000c68d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c649:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c64e:	83 f0 01             	xor    eax,0x1
c000c651:	84 c0                	test   al,al
c000c653:	74 38                	je     c000c68d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c658:	66 83 f8 1f          	cmp    ax,0x1f
c000c65c:	76 09                	jbe    c000c667 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c65e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c661:	66 83 f8 7e          	cmp    ax,0x7e
c000c665:	76 12                	jbe    c000c679 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66a:	66 83 f8 0a          	cmp    ax,0xa
c000c66e:	74 09                	je     c000c679 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c673:	66 83 f8 08          	cmp    ax,0x8
c000c677:	75 14                	jne    c000c68d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67c:	25 ff 00 00 00       	and    eax,0xff
c000c681:	83 ec 0c             	sub    esp,0xc
c000c684:	50                   	push   eax
c000c685:	e8 70 fb ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c690:	83 f0 01             	xor    eax,0x1
c000c693:	84 c0                	test   al,al
c000c695:	74 51                	je     c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c697:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c69a:	83 f0 01             	xor    eax,0x1
c000c69d:	84 c0                	test   al,al
c000c69f:	74 47                	je     c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6a1:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c6a6:	84 c0                	test   al,al
c000c6a8:	74 3e                	je     c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ad:	66 83 f8 3f          	cmp    ax,0x3f
c000c6b1:	76 35                	jbe    c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b6:	66 83 f8 7f          	cmp    ax,0x7f
c000c6ba:	77 2c                	ja     c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6bf:	88 c2                	mov    dl,al
c000c6c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c4:	66 83 f8 5f          	cmp    ax,0x5f
c000c6c8:	76 04                	jbe    c000c6ce <sendKeyboardToken(KeyboardToken)+0x40b>
c000c6ca:	b0 20                	mov    al,0x20
c000c6cc:	eb 02                	jmp    c000c6d0 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c6ce:	b0 00                	mov    al,0x0
c000c6d0:	29 c2                	sub    edx,eax
c000c6d2:	88 d0                	mov    al,dl
c000c6d4:	83 e8 40             	sub    eax,0x40
c000c6d7:	25 ff 00 00 00       	and    eax,0xff
c000c6dc:	83 ec 0c             	sub    esp,0xc
c000c6df:	50                   	push   eax
c000c6e0:	e8 15 fb ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c6e5:	83 c4 10             	add    esp,0x10
c000c6e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6eb:	66 3d 00 03          	cmp    ax,0x300
c000c6ef:	75 0f                	jne    c000c700 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c6f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6f4:	83 f0 01             	xor    eax,0x1
c000c6f7:	84 c0                	test   al,al
c000c6f9:	74 05                	je     c000c700 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c6fb:	e8 99 ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c700:	90                   	nop
c000c701:	c9                   	leave  
c000c702:	c3                   	ret    

c000c703 <clearInternalKeybuffer(VgaText*)>:
c000c703:	55                   	push   ebp
c000c704:	89 e5                	mov    ebp,esp
c000c706:	83 ec 08             	sub    esp,0x8
c000c709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c70c:	05 b2 00 00 00       	add    eax,0xb2
c000c711:	83 ec 0c             	sub    esp,0xc
c000c714:	50                   	push   eax
c000c715:	e8 26 3e ff ff       	call   c0000540 <strlen>
c000c71a:	83 c4 10             	add    esp,0x10
c000c71d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c720:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c726:	83 ec 04             	sub    esp,0x4
c000c729:	50                   	push   eax
c000c72a:	6a 00                	push   0x0
c000c72c:	52                   	push   edx
c000c72d:	e8 9e 3d ff ff       	call   c00004d0 <memset>
c000c732:	83 c4 10             	add    esp,0x10
c000c735:	90                   	nop
c000c736:	c9                   	leave  
c000c737:	c3                   	ret    

c000c738 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c738:	55                   	push   ebp
c000c739:	89 e5                	mov    ebp,esp
c000c73b:	83 ec 18             	sub    esp,0x18
c000c73e:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c743:	85 c0                	test   eax,eax
c000c745:	74 2a                	je     c000c771 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c747:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c74d:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c753:	83 ec 04             	sub    esp,0x4
c000c756:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c75b:	83 ec 08             	sub    esp,0x8
c000c75e:	89 e2                	mov    edx,esp
c000c760:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c763:	89 02                	mov    DWORD PTR [edx],eax
c000c765:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c768:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c76c:	ff d1                	call   ecx
c000c76e:	83 c4 10             	add    esp,0x10
c000c771:	fb                   	sti    
c000c772:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c779:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c77d:	0f 84 db 00 00 00    	je     c000c85e <readKeyboard(VgaText*, char*, unsigned long)+0x126>
c000c783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c786:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c78c:	84 c0                	test   al,al
c000c78e:	75 28                	jne    c000c7b8 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c790:	fa                   	cli    
c000c791:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c796:	40                   	inc    eax
c000c797:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c79c:	e8 f7 6f 00 00       	call   c0013798 <schedule()>
c000c7a1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c7a6:	48                   	dec    eax
c000c7a7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c7ac:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c7b1:	85 c0                	test   eax,eax
c000c7b3:	75 ce                	jne    c000c783 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7b5:	fb                   	sti    
c000c7b6:	eb cb                	jmp    c000c783 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7bb:	8d 50 01             	lea    edx,[eax+0x1]
c000c7be:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c7c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7c4:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c7ca:	88 10                	mov    BYTE PTR [eax],dl
c000c7cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7cf:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7d5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c7d8:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c7dc:	75 2e                	jne    c000c80c <readKeyboard(VgaText*, char*, unsigned long)+0xd4>
c000c7de:	83 ec 0c             	sub    esp,0xc
c000c7e1:	68 74 e0 01 c0       	push   0xc001e074
c000c7e6:	e8 ed dc ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000c7eb:	83 c4 10             	add    esp,0x10
c000c7ee:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c7f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000c7f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c7f8:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c7fe:	83 ec 08             	sub    esp,0x8
c000c801:	6a 02                	push   0x2
c000c803:	50                   	push   eax
c000c804:	e8 84 3d 00 00       	call   c001058d <KeRaiseSignal(SigHandlerBlock*, int)>
c000c809:	83 c4 10             	add    esp,0x10
c000c80c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c80f:	05 b2 00 00 00       	add    eax,0xb2
c000c814:	83 ec 0c             	sub    esp,0xc
c000c817:	50                   	push   eax
c000c818:	e8 23 3d ff ff       	call   c0000540 <strlen>
c000c81d:	83 c4 10             	add    esp,0x10
c000c820:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c823:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c829:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c82c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c82f:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c835:	83 ec 04             	sub    esp,0x4
c000c838:	50                   	push   eax
c000c839:	51                   	push   ecx
c000c83a:	52                   	push   edx
c000c83b:	e8 a0 3b ff ff       	call   c00003e0 <memmove>
c000c840:	83 c4 10             	add    esp,0x10
c000c843:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c846:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c849:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c84d:	74 0a                	je     c000c859 <readKeyboard(VgaText*, char*, unsigned long)+0x121>
c000c84f:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c853:	0f 85 20 ff ff ff    	jne    c000c779 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c859:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c85c:	eb 03                	jmp    c000c861 <readKeyboard(VgaText*, char*, unsigned long)+0x129>
c000c85e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c861:	c9                   	leave  
c000c862:	c3                   	ret    
c000c863:	90                   	nop

c000c864 <Keyboard::Keyboard(char const*)>:
c000c864:	83 ec 0c             	sub    esp,0xc
c000c867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c86b:	83 ec 08             	sub    esp,0x8
c000c86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c872:	50                   	push   eax
c000c873:	e8 38 f2 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000c878:	83 c4 10             	add    esp,0x10
c000c87b:	ba 8c e0 01 c0       	mov    edx,0xc001e08c
c000c880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c884:	89 10                	mov    DWORD PTR [eax],edx
c000c886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c88a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c894:	c6 05 c4 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fc4,0x1
c000c89b:	90                   	nop
c000c89c:	83 c4 0c             	add    esp,0xc
c000c89f:	c3                   	ret    

c000c8a0 <Keyboard::~Keyboard()>:
c000c8a0:	83 ec 0c             	sub    esp,0xc
c000c8a3:	ba 8c e0 01 c0       	mov    edx,0xc001e08c
c000c8a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8ac:	89 10                	mov    DWORD PTR [eax],edx
c000c8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b2:	83 ec 0c             	sub    esp,0xc
c000c8b5:	50                   	push   eax
c000c8b6:	e8 5f ef ff ff       	call   c000b81a <Device::~Device()>
c000c8bb:	83 c4 10             	add    esp,0x10
c000c8be:	90                   	nop
c000c8bf:	83 c4 0c             	add    esp,0xc
c000c8c2:	c3                   	ret    
c000c8c3:	90                   	nop

c000c8c4 <Keyboard::~Keyboard()>:
c000c8c4:	83 ec 0c             	sub    esp,0xc
c000c8c7:	83 ec 0c             	sub    esp,0xc
c000c8ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ce:	e8 cd ff ff ff       	call   c000c8a0 <Keyboard::~Keyboard()>
c000c8d3:	83 c4 10             	add    esp,0x10
c000c8d6:	83 ec 08             	sub    esp,0x8
c000c8d9:	68 5c 01 00 00       	push   0x15c
c000c8de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8e2:	e8 fb da ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000c8e7:	83 c4 10             	add    esp,0x10
c000c8ea:	83 c4 0c             	add    esp,0xc
c000c8ed:	c3                   	ret    

c000c8ee <LogicalDisk::close(int, int, void*)>:
c000c8ee:	83 c8 ff             	or     eax,0xffffffff
c000c8f1:	c3                   	ret    

c000c8f2 <LogicalDisk::~LogicalDisk()>:
c000c8f2:	83 ec 0c             	sub    esp,0xc
c000c8f5:	ba 04 e1 01 c0       	mov    edx,0xc001e104
c000c8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8fe:	89 10                	mov    DWORD PTR [eax],edx
c000c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c904:	83 ec 0c             	sub    esp,0xc
c000c907:	50                   	push   eax
c000c908:	e8 0d ef ff ff       	call   c000b81a <Device::~Device()>
c000c90d:	83 c4 10             	add    esp,0x10
c000c910:	90                   	nop
c000c911:	83 c4 0c             	add    esp,0xc
c000c914:	c3                   	ret    
c000c915:	90                   	nop

c000c916 <LogicalDisk::~LogicalDisk()>:
c000c916:	83 ec 0c             	sub    esp,0xc
c000c919:	83 ec 0c             	sub    esp,0xc
c000c91c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c920:	e8 cd ff ff ff       	call   c000c8f2 <LogicalDisk::~LogicalDisk()>
c000c925:	83 c4 10             	add    esp,0x10
c000c928:	83 ec 08             	sub    esp,0x8
c000c92b:	68 74 01 00 00       	push   0x174
c000c930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c934:	e8 a9 da ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000c939:	83 c4 10             	add    esp,0x10
c000c93c:	83 c4 0c             	add    esp,0xc
c000c93f:	c3                   	ret    

c000c940 <LogicalDisk::open(int, int, void*)>:
c000c940:	83 ec 18             	sub    esp,0x18
c000c943:	68 b8 e0 01 c0       	push   0xc001e0b8
c000c948:	e8 0e 38 00 00       	call   c001015b <KePanic(char const*)>
c000c94d:	83 c8 ff             	or     eax,0xffffffff
c000c950:	83 c4 1c             	add    esp,0x1c
c000c953:	c3                   	ret    

c000c954 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c954:	53                   	push   ebx
c000c955:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c959:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c95d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c961:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c967:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c96d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c973:	77 10                	ja     c000c985 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c975:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c97b:	89 d3                	mov    ebx,edx
c000c97d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c983:	72 05                	jb     c000c98a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c985:	83 c8 ff             	or     eax,0xffffffff
c000c988:	89 c2                	mov    edx,eax
c000c98a:	5b                   	pop    ebx
c000c98b:	c3                   	ret    

c000c98c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c98c:	56                   	push   esi
c000c98d:	83 c8 ff             	or     eax,0xffffffff
c000c990:	53                   	push   ebx
c000c991:	89 c2                	mov    edx,eax
c000c993:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c997:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c99b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c99f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c9a5:	77 27                	ja     c000c9ce <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9a7:	89 d8                	mov    eax,ebx
c000c9a9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c9af:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c9b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c9ba:	89 c2                	mov    edx,eax
c000c9bc:	73 10                	jae    c000c9ce <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9be:	89 c8                	mov    eax,ecx
c000c9c0:	89 da                	mov    edx,ebx
c000c9c2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c9c8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c9ce:	5b                   	pop    ebx
c000c9cf:	5e                   	pop    esi
c000c9d0:	c3                   	ret    
c000c9d1:	90                   	nop

c000c9d2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c9d2:	83 ec 1c             	sub    esp,0x1c
c000c9d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c9e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c9e9:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f8:	83 ec 08             	sub    esp,0x8
c000c9fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9ff:	50                   	push   eax
c000ca00:	e8 ab f0 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000ca05:	83 c4 10             	add    esp,0x10
c000ca08:	ba 04 e1 01 c0       	mov    edx,0xc001e104
c000ca0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca11:	89 10                	mov    DWORD PTR [eax],edx
c000ca13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca17:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca22:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca2d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ca37:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca43:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ca49:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ca4f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ca56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca5a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ca60:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ca66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca6e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ca74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca78:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca82:	90                   	nop
c000ca83:	83 c4 1c             	add    esp,0x1c
c000ca86:	c3                   	ret    
c000ca87:	90                   	nop

c000ca88 <LogicalDisk::assignDriveLetter()>:
c000ca88:	55                   	push   ebp
c000ca89:	57                   	push   edi
c000ca8a:	56                   	push   esi
c000ca8b:	53                   	push   ebx
c000ca8c:	83 ec 14             	sub    esp,0x14
c000ca8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca93:	8b 3d 00 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024400
c000ca99:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ca9f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000caa3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000caa9:	8b 3d 04 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024404
c000caaf:	3c 01                	cmp    al,0x1
c000cab1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cab5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cab9:	19 c0                	sbb    eax,eax
c000cabb:	83 e0 02             	and    eax,0x2
c000cabe:	83 c0 41             	add    eax,0x41
c000cac1:	0f be e8             	movsx  ebp,al
c000cac4:	3c 43                	cmp    al,0x43
c000cac6:	75 10                	jne    c000cad8 <LogicalDisk::assignDriveLetter()+0x50>
c000cac8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cacf:	75 5d                	jne    c000cb2e <LogicalDisk::assignDriveLetter()+0xa6>
c000cad1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cad6:	75 56                	jne    c000cb2e <LogicalDisk::assignDriveLetter()+0xa6>
c000cad8:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cadb:	ba 01 00 00 00       	mov    edx,0x1
c000cae0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cae4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cae8:	d3 e2                	shl    edx,cl
c000caea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caee:	89 d7                	mov    edi,edx
c000caf0:	89 d6                	mov    esi,edx
c000caf2:	c1 ff 1f             	sar    edi,0x1f
c000caf5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000caf9:	21 f9                	and    ecx,edi
c000cafb:	09 d1                	or     ecx,edx
c000cafd:	75 2f                	jne    c000cb2e <LogicalDisk::assignDriveLetter()+0xa6>
c000caff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cb03:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb07:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cb0d:	09 f2                	or     edx,esi
c000cb0f:	89 15 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,edx
c000cb15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb19:	09 fa                	or     edx,edi
c000cb1b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cb1f:	89 15 04 44 02 c0    	mov    DWORD PTR ds:0xc0024404,edx
c000cb25:	89 1c bd 20 44 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbbe0],ebx
c000cb2c:	eb 08                	jmp    c000cb36 <LogicalDisk::assignDriveLetter()+0xae>
c000cb2e:	45                   	inc    ebp
c000cb2f:	40                   	inc    eax
c000cb30:	3c 5b                	cmp    al,0x5b
c000cb32:	75 90                	jne    c000cac4 <LogicalDisk::assignDriveLetter()+0x3c>
c000cb34:	31 c0                	xor    eax,eax
c000cb36:	83 c4 14             	add    esp,0x14
c000cb39:	5b                   	pop    ebx
c000cb3a:	5e                   	pop    esi
c000cb3b:	5f                   	pop    edi
c000cb3c:	5d                   	pop    ebp
c000cb3d:	c3                   	ret    

c000cb3e <LogicalDisk::mount()>:
c000cb3e:	56                   	push   esi
c000cb3f:	53                   	push   ebx
c000cb40:	53                   	push   ebx
c000cb41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb45:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c000cb4b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cb55:	85 db                	test   ebx,ebx
c000cb57:	74 27                	je     c000cb80 <LogicalDisk::mount()+0x42>
c000cb59:	51                   	push   ecx
c000cb5a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cb61:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb63:	83 e8 41             	sub    eax,0x41
c000cb66:	50                   	push   eax
c000cb67:	56                   	push   esi
c000cb68:	53                   	push   ebx
c000cb69:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb6c:	83 c4 10             	add    esp,0x10
c000cb6f:	84 c0                	test   al,al
c000cb71:	74 08                	je     c000cb7b <LogicalDisk::mount()+0x3d>
c000cb73:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cb79:	eb 07                	jmp    c000cb82 <LogicalDisk::mount()+0x44>
c000cb7b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb7e:	eb d5                	jmp    c000cb55 <LogicalDisk::mount()+0x17>
c000cb80:	31 c0                	xor    eax,eax
c000cb82:	5a                   	pop    edx
c000cb83:	5b                   	pop    ebx
c000cb84:	5e                   	pop    esi
c000cb85:	c3                   	ret    

c000cb86 <LogicalDisk::unmount()>:
c000cb86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb8a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb94:	c3                   	ret    
c000cb95:	90                   	nop

c000cb96 <LogicalDisk::eject()>:
c000cb96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb9a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cba0:	8b 10                	mov    edx,DWORD PTR [eax]
c000cba2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cba6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cba9:	90                   	nop

c000cbaa <LogicalDisk::unassignDriveLetter()>:
c000cbaa:	57                   	push   edi
c000cbab:	56                   	push   esi
c000cbac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbb0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cbb7:	84 c9                	test   cl,cl
c000cbb9:	75 0f                	jne    c000cbca <LogicalDisk::unassignDriveLetter()+0x20>
c000cbbb:	c7 44 24 0c dc e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e0dc
c000cbc3:	5e                   	pop    esi
c000cbc4:	5f                   	pop    edi
c000cbc5:	e9 91 35 00 00       	jmp    c001015b <KePanic(char const*)>
c000cbca:	83 e9 41             	sub    ecx,0x41
c000cbcd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cbd4:	b8 01 00 00 00       	mov    eax,0x1
c000cbd9:	c7 04 8d 20 44 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbbe0],0x0
c000cbe4:	d3 e0                	shl    eax,cl
c000cbe6:	89 c7                	mov    edi,eax
c000cbe8:	f7 d0                	not    eax
c000cbea:	c1 ff 1f             	sar    edi,0x1f
c000cbed:	21 05 00 44 02 c0    	and    DWORD PTR ds:0xc0024400,eax
c000cbf3:	89 fe                	mov    esi,edi
c000cbf5:	f7 d6                	not    esi
c000cbf7:	21 35 04 44 02 c0    	and    DWORD PTR ds:0xc0024404,esi
c000cbfd:	5e                   	pop    esi
c000cbfe:	5f                   	pop    edi
c000cbff:	c3                   	ret    

c000cc00 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cc00:	57                   	push   edi
c000cc01:	56                   	push   esi
c000cc02:	53                   	push   ebx
c000cc03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc0b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc13:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc19:	77 41                	ja     c000cc5c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cc1b:	99                   	cdq    
c000cc1c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc22:	01 c8                	add    eax,ecx
c000cc24:	11 da                	adc    edx,ebx
c000cc26:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc2c:	19 d7                	sbb    edi,edx
c000cc2e:	72 33                	jb     c000cc63 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cc30:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc36:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc3c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc40:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc44:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc4a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc54:	5b                   	pop    ebx
c000cc55:	5e                   	pop    esi
c000cc56:	5f                   	pop    edi
c000cc57:	e9 4e 0a 00 00       	jmp    c000d6aa <VCache::read(unsigned long long, int, void*)>
c000cc5c:	b8 05 00 00 00       	mov    eax,0x5
c000cc61:	eb 05                	jmp    c000cc68 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cc63:	b8 07 00 00 00       	mov    eax,0x7
c000cc68:	5b                   	pop    ebx
c000cc69:	5e                   	pop    esi
c000cc6a:	5f                   	pop    edi
c000cc6b:	c3                   	ret    

c000cc6c <LogicalDisk::write(unsigned long long, int, void*)>:
c000cc6c:	57                   	push   edi
c000cc6d:	56                   	push   esi
c000cc6e:	53                   	push   ebx
c000cc6f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc77:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc7f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc85:	77 41                	ja     c000ccc8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc87:	99                   	cdq    
c000cc88:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc8e:	01 c8                	add    eax,ecx
c000cc90:	11 da                	adc    edx,ebx
c000cc92:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc98:	19 d7                	sbb    edi,edx
c000cc9a:	72 33                	jb     c000cccf <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cc9c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cca2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cca8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ccac:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ccb0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ccb6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ccbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccc0:	5b                   	pop    ebx
c000ccc1:	5e                   	pop    esi
c000ccc2:	5f                   	pop    edi
c000ccc3:	e9 cc 08 00 00       	jmp    c000d594 <VCache::write(unsigned long long, int, void*)>
c000ccc8:	b8 05 00 00 00       	mov    eax,0x5
c000cccd:	eb 05                	jmp    c000ccd4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cccf:	b8 07 00 00 00       	mov    eax,0x7
c000ccd4:	5b                   	pop    ebx
c000ccd5:	5e                   	pop    esi
c000ccd6:	5f                   	pop    edi
c000ccd7:	c3                   	ret    

c000ccd8 <Mouse::Mouse(char const*)>:
c000ccd8:	83 ec 0c             	sub    esp,0xc
c000ccdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccdf:	83 ec 08             	sub    esp,0x8
c000cce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce6:	50                   	push   eax
c000cce7:	e8 c4 ed ff ff       	call   c000bab0 <Device::Device(char const*)>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	ba 30 e1 01 c0       	mov    edx,0xc001e130
c000ccf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf8:	89 10                	mov    DWORD PTR [eax],edx
c000ccfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccfe:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cd08:	90                   	nop
c000cd09:	83 c4 0c             	add    esp,0xc
c000cd0c:	c3                   	ret    
c000cd0d:	90                   	nop
c000cd0e:	66 90                	xchg   ax,ax

c000cd10 <Mouse::~Mouse()>:
c000cd10:	83 ec 0c             	sub    esp,0xc
c000cd13:	ba 30 e1 01 c0       	mov    edx,0xc001e130
c000cd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd1c:	89 10                	mov    DWORD PTR [eax],edx
c000cd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd22:	83 ec 0c             	sub    esp,0xc
c000cd25:	50                   	push   eax
c000cd26:	e8 ef ea ff ff       	call   c000b81a <Device::~Device()>
c000cd2b:	83 c4 10             	add    esp,0x10
c000cd2e:	90                   	nop
c000cd2f:	83 c4 0c             	add    esp,0xc
c000cd32:	c3                   	ret    
c000cd33:	90                   	nop

c000cd34 <Mouse::~Mouse()>:
c000cd34:	83 ec 0c             	sub    esp,0xc
c000cd37:	83 ec 0c             	sub    esp,0xc
c000cd3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd3e:	e8 cd ff ff ff       	call   c000cd10 <Mouse::~Mouse()>
c000cd43:	83 c4 10             	add    esp,0x10
c000cd46:	83 ec 08             	sub    esp,0x8
c000cd49:	68 58 01 00 00       	push   0x158
c000cd4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd52:	e8 8b d6 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000cd57:	83 c4 10             	add    esp,0x10
c000cd5a:	83 c4 0c             	add    esp,0xc
c000cd5d:	c3                   	ret    

c000cd5e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cd5e:	55                   	push   ebp
c000cd5f:	57                   	push   edi
c000cd60:	56                   	push   esi
c000cd61:	53                   	push   ebx
c000cd62:	81 ec 28 01 00 00    	sub    esp,0x128
c000cd68:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cd6f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cd76:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd7d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd84:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd88:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd8c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd93:	e8 14 ee ff ff       	call   c000bbac <Device::getName()>
c000cd98:	5a                   	pop    edx
c000cd99:	59                   	pop    ecx
c000cd9a:	50                   	push   eax
c000cd9b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cd9f:	55                   	push   ebp
c000cda0:	e8 5b 38 ff ff       	call   c0000600 <strcpy>
c000cda5:	5b                   	pop    ebx
c000cda6:	58                   	pop    eax
c000cda7:	68 54 e1 01 c0       	push   0xc001e154
c000cdac:	55                   	push   ebp
c000cdad:	e8 0e 3a ff ff       	call   c00007c0 <strcat>
c000cdb2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cdb9:	e8 fb a9 ff ff       	call   c00077b9 <malloc>
c000cdbe:	83 c4 0c             	add    esp,0xc
c000cdc1:	89 c3                	mov    ebx,eax
c000cdc3:	57                   	push   edi
c000cdc4:	56                   	push   esi
c000cdc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdcd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cdd4:	55                   	push   ebp
c000cdd5:	50                   	push   eax
c000cdd6:	e8 f7 fb ff ff       	call   c000c9d2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cddb:	83 c4 14             	add    esp,0x14
c000cdde:	53                   	push   ebx
c000cddf:	e8 a4 fc ff ff       	call   c000ca88 <LogicalDisk::assignDriveLetter()>
c000cde4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cde7:	e8 52 fd ff ff       	call   c000cb3e <LogicalDisk::mount()>
c000cdec:	58                   	pop    eax
c000cded:	5a                   	pop    edx
c000cdee:	53                   	push   ebx
c000cdef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cdf6:	e8 1d eb ff ff       	call   c000b918 <Device::addChild(Device*)>
c000cdfb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ce01:	5b                   	pop    ebx
c000ce02:	5e                   	pop    esi
c000ce03:	5f                   	pop    edi
c000ce04:	5d                   	pop    ebp
c000ce05:	c3                   	ret    

c000ce06 <createPartitionsForDisk(PhysicalDisk*)>:
c000ce06:	55                   	push   ebp
c000ce07:	57                   	push   edi
c000ce08:	56                   	push   esi
c000ce09:	53                   	push   ebx
c000ce0a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ce10:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ce17:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ce1d:	3d 00 02 00 00       	cmp    eax,0x200
c000ce22:	74 27                	je     c000ce4b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ce24:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ce2a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ce30:	83 ec 10             	sub    esp,0x10
c000ce33:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ce37:	99                   	cdq    
c000ce38:	c1 e6 0a             	shl    esi,0xa
c000ce3b:	52                   	push   edx
c000ce3c:	89 fd                	mov    ebp,edi
c000ce3e:	50                   	push   eax
c000ce3f:	55                   	push   ebp
c000ce40:	56                   	push   esi
c000ce41:	e8 aa f2 00 00       	call   c001c0f0 <__udivdi3>
c000ce46:	e9 b1 00 00 00       	jmp    c000cefc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce4b:	83 ec 0c             	sub    esp,0xc
c000ce4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce50:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ce54:	56                   	push   esi
c000ce55:	6a 01                	push   0x1
c000ce57:	6a 00                	push   0x0
c000ce59:	6a 00                	push   0x0
c000ce5b:	53                   	push   ebx
c000ce5c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce5f:	83 c4 20             	add    esp,0x20
c000ce62:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ce6a:	75 0a                	jne    c000ce76 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ce6c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ce74:	74 2c                	je     c000cea2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ce76:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce7c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce82:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce88:	83 ec 10             	sub    esp,0x10
c000ce8b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce8f:	89 f7                	mov    edi,esi
c000ce91:	c1 e0 0a             	shl    eax,0xa
c000ce94:	c1 ff 1f             	sar    edi,0x1f
c000ce97:	57                   	push   edi
c000ce98:	56                   	push   esi
c000ce99:	52                   	push   edx
c000ce9a:	50                   	push   eax
c000ce9b:	e8 50 f2 00 00       	call   c001c0f0 <__udivdi3>
c000cea0:	eb 5a                	jmp    c000cefc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cea2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cea9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ceb0:	83 e1 7f             	and    ecx,0x7f
c000ceb3:	83 e0 7f             	and    eax,0x7f
c000ceb6:	01 c1                	add    ecx,eax
c000ceb8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cebf:	83 e0 7f             	and    eax,0x7f
c000cec2:	01 c1                	add    ecx,eax
c000cec4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cecb:	83 e0 7f             	and    eax,0x7f
c000cece:	00 c1                	add    cl,al
c000ced0:	74 41                	je     c000cf13 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ced2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ced8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cede:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cee4:	83 ec 10             	sub    esp,0x10
c000cee7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ceeb:	89 f7                	mov    edi,esi
c000ceed:	c1 e0 0a             	shl    eax,0xa
c000cef0:	c1 ff 1f             	sar    edi,0x1f
c000cef3:	57                   	push   edi
c000cef4:	56                   	push   esi
c000cef5:	52                   	push   edx
c000cef6:	50                   	push   eax
c000cef7:	e8 f4 f1 00 00       	call   c001c0f0 <__udivdi3>
c000cefc:	83 c4 14             	add    esp,0x14
c000ceff:	52                   	push   edx
c000cf00:	50                   	push   eax
c000cf01:	6a 00                	push   0x0
c000cf03:	6a 00                	push   0x0
c000cf05:	53                   	push   ebx
c000cf06:	e8 53 fe ff ff       	call   c000cd5e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf0b:	83 c4 20             	add    esp,0x20
c000cf0e:	e9 79 01 00 00       	jmp    c000d08c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cf13:	89 f0                	mov    eax,esi
c000cf15:	31 f6                	xor    esi,esi
c000cf17:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cf1e:	75 02                	jne    c000cf22 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cf20:	89 f1                	mov    ecx,esi
c000cf22:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cf29:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cf30:	c1 e2 08             	shl    edx,0x8
c000cf33:	c1 e7 10             	shl    edi,0x10
c000cf36:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cf3e:	09 fa                	or     edx,edi
c000cf40:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cf48:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cf4f:	83 c0 10             	add    eax,0x10
c000cf52:	09 fa                	or     edx,edi
c000cf54:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cf5b:	c1 e7 18             	shl    edi,0x18
c000cf5e:	09 fa                	or     edx,edi
c000cf60:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cf67:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cf6b:	c1 e7 10             	shl    edi,0x10
c000cf6e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cf75:	c1 e2 08             	shl    edx,0x8
c000cf78:	09 fa                	or     edx,edi
c000cf7a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf81:	09 fa                	or     edx,edi
c000cf83:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf8a:	c1 e7 18             	shl    edi,0x18
c000cf8d:	09 fa                	or     edx,edi
c000cf8f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cf93:	46                   	inc    esi
c000cf94:	83 fe 04             	cmp    esi,0x4
c000cf97:	0f 85 7a ff ff ff    	jne    c000cf17 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cf9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfa1:	83 f0 01             	xor    eax,0x1
c000cfa4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cfa8:	75 57                	jne    c000d001 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cfaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfae:	83 f0 01             	xor    eax,0x1
c000cfb1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cfb5:	75 4a                	jne    c000d001 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cfb7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cfbb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfc3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfcb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfd1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfd7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfdd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfe1:	89 f7                	mov    edi,esi
c000cfe3:	c1 e0 0a             	shl    eax,0xa
c000cfe6:	c1 ff 1f             	sar    edi,0x1f
c000cfe9:	57                   	push   edi
c000cfea:	56                   	push   esi
c000cfeb:	52                   	push   edx
c000cfec:	50                   	push   eax
c000cfed:	e8 fe f0 00 00       	call   c001c0f0 <__udivdi3>
c000cff2:	83 c4 10             	add    esp,0x10
c000cff5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cff9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cffd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d001:	84 c9                	test   cl,cl
c000d003:	74 53                	je     c000d058 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d005:	0f b6 c9             	movzx  ecx,cl
c000d008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d00c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d010:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d014:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d018:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d01c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d020:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d024:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d028:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d02c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d030:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d034:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d038:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d03c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d040:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d044:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d048:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d04c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d050:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d054:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d058:	31 ed                	xor    ebp,ebp
c000d05a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d05e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d062:	89 f8                	mov    eax,edi
c000d064:	09 f0                	or     eax,esi
c000d066:	74 1e                	je     c000d086 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d068:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d06c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d070:	89 d1                	mov    ecx,edx
c000d072:	09 c1                	or     ecx,eax
c000d074:	74 10                	je     c000d086 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d076:	83 ec 0c             	sub    esp,0xc
c000d079:	57                   	push   edi
c000d07a:	56                   	push   esi
c000d07b:	52                   	push   edx
c000d07c:	50                   	push   eax
c000d07d:	53                   	push   ebx
c000d07e:	e8 db fc ff ff       	call   c000cd5e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d083:	83 c4 20             	add    esp,0x20
c000d086:	45                   	inc    ebp
c000d087:	83 fd 04             	cmp    ebp,0x4
c000d08a:	75 ce                	jne    c000d05a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d08c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d092:	5b                   	pop    ebx
c000d093:	5e                   	pop    esi
c000d094:	5f                   	pop    edi
c000d095:	5d                   	pop    ebp
c000d096:	c3                   	ret    
c000d097:	90                   	nop

c000d098 <Serial::Serial(char const*)>:
c000d098:	83 ec 0c             	sub    esp,0xc
c000d09b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d09f:	83 ec 08             	sub    esp,0x8
c000d0a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0a6:	50                   	push   eax
c000d0a7:	e8 04 ea ff ff       	call   c000bab0 <Device::Device(char const*)>
c000d0ac:	83 c4 10             	add    esp,0x10
c000d0af:	ba 68 e1 01 c0       	mov    edx,0xc001e168
c000d0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0b8:	89 10                	mov    DWORD PTR [eax],edx
c000d0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0be:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d0c8:	90                   	nop
c000d0c9:	83 c4 0c             	add    esp,0xc
c000d0cc:	c3                   	ret    
c000d0cd:	90                   	nop
c000d0ce:	66 90                	xchg   ax,ax

c000d0d0 <Serial::~Serial()>:
c000d0d0:	83 ec 0c             	sub    esp,0xc
c000d0d3:	ba 68 e1 01 c0       	mov    edx,0xc001e168
c000d0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0dc:	89 10                	mov    DWORD PTR [eax],edx
c000d0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0e2:	83 ec 0c             	sub    esp,0xc
c000d0e5:	50                   	push   eax
c000d0e6:	e8 2f e7 ff ff       	call   c000b81a <Device::~Device()>
c000d0eb:	83 c4 10             	add    esp,0x10
c000d0ee:	90                   	nop
c000d0ef:	83 c4 0c             	add    esp,0xc
c000d0f2:	c3                   	ret    
c000d0f3:	90                   	nop

c000d0f4 <Serial::~Serial()>:
c000d0f4:	83 ec 0c             	sub    esp,0xc
c000d0f7:	83 ec 0c             	sub    esp,0xc
c000d0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fe:	e8 cd ff ff ff       	call   c000d0d0 <Serial::~Serial()>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	83 ec 08             	sub    esp,0x8
c000d109:	68 58 01 00 00       	push   0x158
c000d10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d112:	e8 cb d2 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d117:	83 c4 10             	add    esp,0x10
c000d11a:	83 c4 0c             	add    esp,0xc
c000d11d:	c3                   	ret    
c000d11e:	66 90                	xchg   ax,ax

c000d120 <Timer::Timer(char const*)>:
c000d120:	83 ec 0c             	sub    esp,0xc
c000d123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d127:	83 ec 08             	sub    esp,0x8
c000d12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d12e:	50                   	push   eax
c000d12f:	e8 7c e9 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000d134:	83 c4 10             	add    esp,0x10
c000d137:	ba ac e1 01 c0       	mov    edx,0xc001e1ac
c000d13c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d140:	89 10                	mov    DWORD PTR [eax],edx
c000d142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d146:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d150:	90                   	nop
c000d151:	83 c4 0c             	add    esp,0xc
c000d154:	c3                   	ret    
c000d155:	90                   	nop
c000d156:	66 90                	xchg   ax,ax

c000d158 <Timer::~Timer()>:
c000d158:	83 ec 0c             	sub    esp,0xc
c000d15b:	ba ac e1 01 c0       	mov    edx,0xc001e1ac
c000d160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d164:	89 10                	mov    DWORD PTR [eax],edx
c000d166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d16a:	83 ec 0c             	sub    esp,0xc
c000d16d:	50                   	push   eax
c000d16e:	e8 a7 e6 ff ff       	call   c000b81a <Device::~Device()>
c000d173:	83 c4 10             	add    esp,0x10
c000d176:	90                   	nop
c000d177:	83 c4 0c             	add    esp,0xc
c000d17a:	c3                   	ret    
c000d17b:	90                   	nop

c000d17c <Timer::~Timer()>:
c000d17c:	83 ec 0c             	sub    esp,0xc
c000d17f:	83 ec 0c             	sub    esp,0xc
c000d182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d186:	e8 cd ff ff ff       	call   c000d158 <Timer::~Timer()>
c000d18b:	83 c4 10             	add    esp,0x10
c000d18e:	83 ec 08             	sub    esp,0x8
c000d191:	68 5c 01 00 00       	push   0x15c
c000d196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d19a:	e8 43 d2 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d19f:	83 c4 10             	add    esp,0x10
c000d1a2:	83 c4 0c             	add    esp,0xc
c000d1a5:	c3                   	ret    

c000d1a6 <Timer::read()>:
c000d1a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1aa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1b0:	c3                   	ret    

c000d1b1 <setupTimer(int)>:
c000d1b1:	53                   	push   ebx
c000d1b2:	83 ec 14             	sub    esp,0x14
c000d1b5:	68 5c 01 00 00       	push   0x15c
c000d1ba:	e8 fa a5 ff ff       	call   c00077b9 <malloc>
c000d1bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1c2:	89 c3                	mov    ebx,eax
c000d1c4:	e8 43 e8 00 00       	call   c001ba0c <PIT::PIT()>
c000d1c9:	58                   	pop    eax
c000d1ca:	5a                   	pop    edx
c000d1cb:	53                   	push   ebx
c000d1cc:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000d1d2:	e8 41 e7 ff ff       	call   c000b918 <Device::addChild(Device*)>
c000d1d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1d9:	6a 00                	push   0x0
c000d1db:	6a 00                	push   0x0
c000d1dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d1e1:	53                   	push   ebx
c000d1e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1e5:	89 d8                	mov    eax,ebx
c000d1e7:	83 c4 28             	add    esp,0x28
c000d1ea:	5b                   	pop    ebx
c000d1eb:	c3                   	ret    

c000d1ec <timerHandler(unsigned int)>:
c000d1ec:	56                   	push   esi
c000d1ed:	53                   	push   ebx
c000d1ee:	51                   	push   ecx
c000d1ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f3:	01 05 8c 44 02 c0    	add    DWORD PTR ds:0xc002448c,eax
c000d1f9:	80 3d bd 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebd,0x0
c000d200:	0f 84 4a 01 00 00    	je     c000d350 <timerHandler(unsigned int)+0x164>
c000d206:	fa                   	cli    
c000d207:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d20d:	83 ec 0c             	sub    esp,0xc
c000d210:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c000d216:	68 78 51 02 c0       	push   0xc0025178
c000d21b:	e8 a0 f4 00 00       	call   c001c6c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d220:	83 c4 10             	add    esp,0x10
c000d223:	84 c0                	test   al,al
c000d225:	0f 85 a1 00 00 00    	jne    c000d2cc <timerHandler(unsigned int)+0xe0>
c000d22b:	83 ec 0c             	sub    esp,0xc
c000d22e:	68 78 51 02 c0       	push   0xc0025178
c000d233:	e8 a4 f4 00 00       	call   c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d238:	83 c4 10             	add    esp,0x10
c000d23b:	89 c6                	mov    esi,eax
c000d23d:	8d 76 00             	lea    esi,[esi+0x0]
c000d240:	83 ec 0c             	sub    esp,0xc
c000d243:	68 78 51 02 c0       	push   0xc0025178
c000d248:	e8 8f f4 00 00       	call   c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d24d:	c7 04 24 78 51 02 c0 	mov    DWORD PTR [esp],0xc0025178
c000d254:	89 c3                	mov    ebx,eax
c000d256:	e8 89 f4 00 00       	call   c001c6e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d25b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d25e:	83 c4 10             	add    esp,0x10
c000d261:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c000d267:	77 23                	ja     c000d28c <timerHandler(unsigned int)+0xa0>
c000d269:	83 ec 0c             	sub    esp,0xc
c000d26c:	53                   	push   ebx
c000d26d:	e8 ea 69 00 00       	call   c0013c5c <unblockTask(ThreadControlBlock*)>
c000d272:	83 c4 10             	add    esp,0x10
c000d275:	39 de                	cmp    esi,ebx
c000d277:	75 27                	jne    c000d2a0 <timerHandler(unsigned int)+0xb4>
c000d279:	83 ec 0c             	sub    esp,0xc
c000d27c:	68 78 51 02 c0       	push   0xc0025178
c000d281:	e8 56 f4 00 00       	call   c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d286:	89 c6                	mov    esi,eax
c000d288:	eb 12                	jmp    c000d29c <timerHandler(unsigned int)+0xb0>
c000d28a:	66 90                	xchg   ax,ax
c000d28c:	52                   	push   edx
c000d28d:	52                   	push   edx
c000d28e:	53                   	push   ebx
c000d28f:	68 78 51 02 c0       	push   0xc0025178
c000d294:	e8 03 f5 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d299:	8d 76 00             	lea    esi,[esi+0x0]
c000d29c:	83 c4 10             	add    esp,0x10
c000d29f:	90                   	nop
c000d2a0:	83 ec 0c             	sub    esp,0xc
c000d2a3:	68 78 51 02 c0       	push   0xc0025178
c000d2a8:	e8 13 f4 00 00       	call   c001c6c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d2ad:	83 c4 10             	add    esp,0x10
c000d2b0:	84 c0                	test   al,al
c000d2b2:	75 18                	jne    c000d2cc <timerHandler(unsigned int)+0xe0>
c000d2b4:	83 ec 0c             	sub    esp,0xc
c000d2b7:	68 78 51 02 c0       	push   0xc0025178
c000d2bc:	e8 1b f4 00 00       	call   c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2c1:	83 c4 10             	add    esp,0x10
c000d2c4:	39 f0                	cmp    eax,esi
c000d2c6:	0f 85 74 ff ff ff    	jne    c000d240 <timerHandler(unsigned int)+0x54>
c000d2cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d2d1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d2d5:	74 41                	je     c000d318 <timerHandler(unsigned int)+0x12c>
c000d2d7:	80 3d bc 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebc,0x0
c000d2de:	74 38                	je     c000d318 <timerHandler(unsigned int)+0x12c>
c000d2e0:	fa                   	cli    
c000d2e1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d2e7:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c000d2ec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2f2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d2f5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2fb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d2fe:	72 08                	jb     c000d308 <timerHandler(unsigned int)+0x11c>
c000d300:	e8 93 64 00 00       	call   c0013798 <schedule()>
c000d305:	8d 76 00             	lea    esi,[esi+0x0]
c000d308:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d30d:	48                   	dec    eax
c000d30e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d313:	75 03                	jne    c000d318 <timerHandler(unsigned int)+0x12c>
c000d315:	fb                   	sti    
c000d316:	66 90                	xchg   ax,ax
c000d318:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000d31d:	48                   	dec    eax
c000d31e:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000d323:	75 1b                	jne    c000d340 <timerHandler(unsigned int)+0x154>
c000d325:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c000d32c:	74 12                	je     c000d340 <timerHandler(unsigned int)+0x154>
c000d32e:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000d338:	e8 5b 64 00 00       	call   c0013798 <schedule()>
c000d33d:	8d 76 00             	lea    esi,[esi+0x0]
c000d340:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d345:	48                   	dec    eax
c000d346:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d34b:	75 03                	jne    c000d350 <timerHandler(unsigned int)+0x164>
c000d34d:	fb                   	sti    
c000d34e:	66 90                	xchg   ax,ax
c000d350:	58                   	pop    eax
c000d351:	5b                   	pop    ebx
c000d352:	5e                   	pop    esi
c000d353:	c3                   	ret    

c000d354 <VCache::VCache(PhysicalDisk*)>:
c000d354:	53                   	push   ebx
c000d355:	83 ec 18             	sub    esp,0x18
c000d358:	ba dc e1 01 c0       	mov    edx,0xc001e1dc
c000d35d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d361:	89 10                	mov    DWORD PTR [eax],edx
c000d363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d367:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d36e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d372:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d37d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d384:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d38b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d38f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d396:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d39d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3a1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d3a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ac:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d3b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3b4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d3bb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d3c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3c6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d3ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ce:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d3d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3de:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d3e5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d3ed:	83 ec 0c             	sub    esp,0xc
c000d3f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3f4:	e8 c0 a3 ff ff       	call   c00077b9 <malloc>
c000d3f9:	83 c4 10             	add    esp,0x10
c000d3fc:	89 c3                	mov    ebx,eax
c000d3fe:	83 ec 0c             	sub    esp,0xc
c000d401:	53                   	push   ebx
c000d402:	e8 5d 61 00 00       	call   c0013564 <Mutex::Mutex()>
c000d407:	83 c4 10             	add    esp,0x10
c000d40a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d40e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d415:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d419:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d41c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d420:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d427:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d42b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d435:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d438:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d43c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d442:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d448:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d44c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d44f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d456:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d45a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d45e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d464:	05 00 01 00 00       	add    eax,0x100
c000d469:	c1 e0 04             	shl    eax,0x4
c000d46c:	83 ec 0c             	sub    esp,0xc
c000d46f:	50                   	push   eax
c000d470:	e8 44 a3 ff ff       	call   c00077b9 <malloc>
c000d475:	83 c4 10             	add    esp,0x10
c000d478:	89 c2                	mov    edx,eax
c000d47a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d47e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d485:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d48c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d490:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d494:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d498:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d49e:	c1 e0 06             	shl    eax,0x6
c000d4a1:	83 ec 0c             	sub    esp,0xc
c000d4a4:	50                   	push   eax
c000d4a5:	e8 0f a3 ff ff       	call   c00077b9 <malloc>
c000d4aa:	83 c4 10             	add    esp,0x10
c000d4ad:	89 c2                	mov    edx,eax
c000d4af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4b3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d4b6:	90                   	nop
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	5b                   	pop    ebx
c000d4bb:	c3                   	ret    

c000d4bc <VCache::invalidateReadBuffer()>:
c000d4bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4c0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d4c6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d4ca:	c3                   	ret    
c000d4cb:	90                   	nop

c000d4cc <VCache::writeWriteBuffer()>:
c000d4cc:	53                   	push   ebx
c000d4cd:	83 ec 08             	sub    esp,0x8
c000d4d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4d4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d4d8:	74 1e                	je     c000d4f8 <VCache::writeWriteBuffer()+0x2c>
c000d4da:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d4dd:	83 ec 0c             	sub    esp,0xc
c000d4e0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4e2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d4e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d4e8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d4eb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4ee:	50                   	push   eax
c000d4ef:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d4f8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d4ff:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d506:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d50a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d511:	83 c4 08             	add    esp,0x8
c000d514:	5b                   	pop    ebx
c000d515:	c3                   	ret    
c000d516:	66 90                	xchg   ax,ax

c000d518 <VCache::~VCache()>:
c000d518:	83 ec 0c             	sub    esp,0xc
c000d51b:	ba dc e1 01 c0       	mov    edx,0xc001e1dc
c000d520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d524:	89 10                	mov    DWORD PTR [eax],edx
c000d526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d52a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d52d:	84 c0                	test   al,al
c000d52f:	74 0f                	je     c000d540 <VCache::~VCache()+0x28>
c000d531:	83 ec 0c             	sub    esp,0xc
c000d534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d538:	e8 8f ff ff ff       	call   c000d4cc <VCache::writeWriteBuffer()>
c000d53d:	83 c4 10             	add    esp,0x10
c000d540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d544:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d547:	83 ec 0c             	sub    esp,0xc
c000d54a:	50                   	push   eax
c000d54b:	e8 79 a2 ff ff       	call   c00077c9 <free>
c000d550:	83 c4 10             	add    esp,0x10
c000d553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d557:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d55a:	83 ec 0c             	sub    esp,0xc
c000d55d:	50                   	push   eax
c000d55e:	e8 66 a2 ff ff       	call   c00077c9 <free>
c000d563:	83 c4 10             	add    esp,0x10
c000d566:	90                   	nop
c000d567:	83 c4 0c             	add    esp,0xc
c000d56a:	c3                   	ret    
c000d56b:	90                   	nop

c000d56c <VCache::~VCache()>:
c000d56c:	83 ec 0c             	sub    esp,0xc
c000d56f:	83 ec 0c             	sub    esp,0xc
c000d572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d576:	e8 9d ff ff ff       	call   c000d518 <VCache::~VCache()>
c000d57b:	83 c4 10             	add    esp,0x10
c000d57e:	83 ec 08             	sub    esp,0x8
c000d581:	6a 44                	push   0x44
c000d583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d587:	e8 56 ce ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d58c:	83 c4 10             	add    esp,0x10
c000d58f:	83 c4 0c             	add    esp,0xc
c000d592:	c3                   	ret    
c000d593:	90                   	nop

c000d594 <VCache::write(unsigned long long, int, void*)>:
c000d594:	55                   	push   ebp
c000d595:	57                   	push   edi
c000d596:	56                   	push   esi
c000d597:	53                   	push   ebx
c000d598:	83 ec 1c             	sub    esp,0x1c
c000d59b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d59f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d5a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5a7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d5ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d5af:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d5b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d5b7:	31 c0                	xor    eax,eax
c000d5b9:	8d 76 00             	lea    esi,[esi+0x0]
c000d5bc:	39 e8                	cmp    eax,ebp
c000d5be:	7d 18                	jge    c000d5d8 <VCache::write(unsigned long long, int, void*)+0x44>
c000d5c0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d5c3:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d5c9:	0f af c8             	imul   ecx,eax
c000d5cc:	89 ca                	mov    edx,ecx
c000d5ce:	01 f2                	add    edx,esi
c000d5d0:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d5d2:	40                   	inc    eax
c000d5d3:	eb e7                	jmp    c000d5bc <VCache::write(unsigned long long, int, void*)+0x28>
c000d5d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d5d8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d5dc:	74 0a                	je     c000d5e8 <VCache::write(unsigned long long, int, void*)+0x54>
c000d5de:	53                   	push   ebx
c000d5df:	e8 d8 fe ff ff       	call   c000d4bc <VCache::invalidateReadBuffer()>
c000d5e4:	58                   	pop    eax
c000d5e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d5e8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d5ec:	74 5a                	je     c000d648 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d5ee:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d5f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d5f5:	89 f8                	mov    eax,edi
c000d5f7:	99                   	cdq    
c000d5f8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d5fb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d5fe:	31 c1                	xor    ecx,eax
c000d600:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d604:	31 d0                	xor    eax,edx
c000d606:	09 c1                	or     ecx,eax
c000d608:	75 32                	jne    c000d63c <VCache::write(unsigned long long, int, void*)+0xa8>
c000d60a:	83 fd 01             	cmp    ebp,0x1
c000d60d:	75 2d                	jne    c000d63c <VCache::write(unsigned long long, int, void*)+0xa8>
c000d60f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d612:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d618:	0f af f9             	imul   edi,ecx
c000d61b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d61e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d620:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d623:	40                   	inc    eax
c000d624:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d627:	83 f8 40             	cmp    eax,0x40
c000d62a:	75 74                	jne    c000d6a0 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d62c:	83 ec 0c             	sub    esp,0xc
c000d62f:	53                   	push   ebx
c000d630:	e8 97 fe ff ff       	call   c000d4cc <VCache::writeWriteBuffer()>
c000d635:	83 c4 10             	add    esp,0x10
c000d638:	eb 66                	jmp    c000d6a0 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d63a:	66 90                	xchg   ax,ax
c000d63c:	83 ec 0c             	sub    esp,0xc
c000d63f:	53                   	push   ebx
c000d640:	e8 87 fe ff ff       	call   c000d4cc <VCache::writeWriteBuffer()>
c000d645:	83 c4 10             	add    esp,0x10
c000d648:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d64b:	83 fd 3f             	cmp    ebp,0x3f
c000d64e:	7f 24                	jg     c000d674 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d654:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d657:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d65a:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d65e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d662:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d665:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d668:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d66e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d670:	eb 2e                	jmp    c000d6a0 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d672:	66 90                	xchg   ax,ax
c000d674:	8b 10                	mov    edx,DWORD PTR [eax]
c000d676:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d67a:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d67e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d682:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d686:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d68a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d68e:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d692:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d695:	83 c4 1c             	add    esp,0x1c
c000d698:	5b                   	pop    ebx
c000d699:	5e                   	pop    esi
c000d69a:	5f                   	pop    edi
c000d69b:	5d                   	pop    ebp
c000d69c:	ff e0                	jmp    eax
c000d69e:	66 90                	xchg   ax,ax
c000d6a0:	83 c4 1c             	add    esp,0x1c
c000d6a3:	31 c0                	xor    eax,eax
c000d6a5:	5b                   	pop    ebx
c000d6a6:	5e                   	pop    esi
c000d6a7:	5f                   	pop    edi
c000d6a8:	5d                   	pop    ebp
c000d6a9:	c3                   	ret    

c000d6aa <VCache::read(unsigned long long, int, void*)>:
c000d6aa:	55                   	push   ebp
c000d6ab:	57                   	push   edi
c000d6ac:	56                   	push   esi
c000d6ad:	53                   	push   ebx
c000d6ae:	83 ec 1c             	sub    esp,0x1c
c000d6b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d6b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d6b9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d6bd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d6c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6c5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d6c9:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d6cd:	74 0d                	je     c000d6dc <VCache::read(unsigned long long, int, void*)+0x32>
c000d6cf:	83 ec 0c             	sub    esp,0xc
c000d6d2:	55                   	push   ebp
c000d6d3:	e8 f4 fd ff ff       	call   c000d4cc <VCache::writeWriteBuffer()>
c000d6d8:	83 c4 10             	add    esp,0x10
c000d6db:	90                   	nop
c000d6dc:	83 ec 0c             	sub    esp,0xc
c000d6df:	55                   	push   ebp
c000d6e0:	e8 d7 fd ff ff       	call   c000d4bc <VCache::invalidateReadBuffer()>
c000d6e5:	83 c4 0c             	add    esp,0xc
c000d6e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6eb:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d6f1:	6a 00                	push   0x0
c000d6f3:	53                   	push   ebx
c000d6f4:	e8 d7 2d ff ff       	call   c00004d0 <memset>
c000d6f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6fc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d700:	8b 10                	mov    edx,DWORD PTR [eax]
c000d702:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d706:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d70a:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d70e:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d712:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d716:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d719:	83 c4 2c             	add    esp,0x2c
c000d71c:	5b                   	pop    ebx
c000d71d:	5e                   	pop    esi
c000d71e:	5f                   	pop    edi
c000d71f:	5d                   	pop    ebp
c000d720:	ff e0                	jmp    eax

c000d722 <Video::putrect(int, int, int, int, unsigned int)>:
c000d722:	55                   	push   ebp
c000d723:	57                   	push   edi
c000d724:	56                   	push   esi
c000d725:	53                   	push   ebx
c000d726:	83 ec 1c             	sub    esp,0x1c
c000d729:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d72d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d731:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d735:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d739:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d73d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d741:	01 df                	add    edi,ebx
c000d743:	39 fb                	cmp    ebx,edi
c000d745:	7d 1f                	jge    c000d766 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d747:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d74b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d74f:	7d 12                	jge    c000d763 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d751:	8b 16                	mov    edx,DWORD PTR [esi]
c000d753:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d757:	53                   	push   ebx
c000d758:	55                   	push   ebp
c000d759:	45                   	inc    ebp
c000d75a:	56                   	push   esi
c000d75b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d75e:	83 c4 10             	add    esp,0x10
c000d761:	eb e8                	jmp    c000d74b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d763:	43                   	inc    ebx
c000d764:	eb dd                	jmp    c000d743 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d766:	83 c4 1c             	add    esp,0x1c
c000d769:	5b                   	pop    ebx
c000d76a:	5e                   	pop    esi
c000d76b:	5f                   	pop    edi
c000d76c:	5d                   	pop    ebp
c000d76d:	c3                   	ret    

c000d76e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d76e:	55                   	push   ebp
c000d76f:	57                   	push   edi
c000d770:	31 ff                	xor    edi,edi
c000d772:	56                   	push   esi
c000d773:	53                   	push   ebx
c000d774:	83 ec 1c             	sub    esp,0x1c
c000d777:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d77b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d77f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d786:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d78b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d78f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d793:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d797:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d79a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d79e:	01 f9                	add    ecx,edi
c000d7a0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d7a4:	7d 2f                	jge    c000d7d5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d7a6:	31 f6                	xor    esi,esi
c000d7a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d7ac:	01 f2                	add    edx,esi
c000d7ae:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d7b2:	7d 1a                	jge    c000d7ce <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d7b4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7b7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d7ba:	46                   	inc    esi
c000d7bb:	51                   	push   ecx
c000d7bc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d7c0:	52                   	push   edx
c000d7c1:	55                   	push   ebp
c000d7c2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7c5:	83 c4 10             	add    esp,0x10
c000d7c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7cc:	eb da                	jmp    c000d7a8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d7ce:	47                   	inc    edi
c000d7cf:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d7d3:	eb c5                	jmp    c000d79a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d7d5:	83 c4 1c             	add    esp,0x1c
c000d7d8:	5b                   	pop    ebx
c000d7d9:	5e                   	pop    esi
c000d7da:	5f                   	pop    edi
c000d7db:	5d                   	pop    ebp
c000d7dc:	c3                   	ret    
c000d7dd:	90                   	nop

c000d7de <Video::blit(unsigned int*, int, int, int, int)>:
c000d7de:	55                   	push   ebp
c000d7df:	57                   	push   edi
c000d7e0:	56                   	push   esi
c000d7e1:	53                   	push   ebx
c000d7e2:	83 ec 1c             	sub    esp,0x1c
c000d7e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d7e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7ed:	85 c0                	test   eax,eax
c000d7ef:	79 02                	jns    c000d7f3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d7f1:	31 c0                	xor    eax,eax
c000d7f3:	c1 e0 02             	shl    eax,0x2
c000d7f6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d7fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7fe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d802:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d806:	39 d8                	cmp    eax,ebx
c000d808:	7e 49                	jle    c000d853 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d80a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d810:	7c 41                	jl     c000d853 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d812:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d816:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d81a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d81e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d822:	39 f9                	cmp    ecx,edi
c000d824:	7e 22                	jle    c000d848 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d826:	83 c5 04             	add    ebp,0x4
c000d829:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d82f:	7c 14                	jl     c000d845 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d831:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d833:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d836:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d83a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d83e:	56                   	push   esi
c000d83f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d842:	83 c4 10             	add    esp,0x10
c000d845:	47                   	inc    edi
c000d846:	eb d2                	jmp    c000d81a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d848:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d84c:	43                   	inc    ebx
c000d84d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d851:	eb ab                	jmp    c000d7fe <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d853:	83 c4 1c             	add    esp,0x1c
c000d856:	5b                   	pop    ebx
c000d857:	5e                   	pop    esi
c000d858:	5f                   	pop    edi
c000d859:	5d                   	pop    ebp
c000d85a:	c3                   	ret    
c000d85b:	90                   	nop

c000d85c <Video::clearScreen(unsigned int)>:
c000d85c:	57                   	push   edi
c000d85d:	56                   	push   esi
c000d85e:	53                   	push   ebx
c000d85f:	31 db                	xor    ebx,ebx
c000d861:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d865:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d86b:	7e 1f                	jle    c000d88c <Video::clearScreen(unsigned int)+0x30>
c000d86d:	31 ff                	xor    edi,edi
c000d86f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d875:	7e 12                	jle    c000d889 <Video::clearScreen(unsigned int)+0x2d>
c000d877:	8b 06                	mov    eax,DWORD PTR [esi]
c000d879:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d87d:	53                   	push   ebx
c000d87e:	57                   	push   edi
c000d87f:	47                   	inc    edi
c000d880:	56                   	push   esi
c000d881:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d884:	83 c4 10             	add    esp,0x10
c000d887:	eb e6                	jmp    c000d86f <Video::clearScreen(unsigned int)+0x13>
c000d889:	43                   	inc    ebx
c000d88a:	eb d9                	jmp    c000d865 <Video::clearScreen(unsigned int)+0x9>
c000d88c:	5b                   	pop    ebx
c000d88d:	5e                   	pop    esi
c000d88e:	5f                   	pop    edi
c000d88f:	c3                   	ret    

c000d890 <Video::putpixel(int, int, unsigned int)>:
c000d890:	c7 44 24 04 e4 e1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e1e4
c000d898:	e9 be 28 00 00       	jmp    c001015b <KePanic(char const*)>
c000d89d:	90                   	nop

c000d89e <Video::Video(char const*)>:
c000d89e:	83 ec 0c             	sub    esp,0xc
c000d8a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a5:	83 ec 08             	sub    esp,0x8
c000d8a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ac:	50                   	push   eax
c000d8ad:	e8 fe e1 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000d8b2:	83 c4 10             	add    esp,0x10
c000d8b5:	ba 54 e2 01 c0       	mov    edx,0xc001e254
c000d8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8be:	89 10                	mov    DWORD PTR [eax],edx
c000d8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d8ce:	90                   	nop
c000d8cf:	83 c4 0c             	add    esp,0xc
c000d8d2:	c3                   	ret    
c000d8d3:	90                   	nop

c000d8d4 <Video::~Video()>:
c000d8d4:	83 ec 0c             	sub    esp,0xc
c000d8d7:	ba 54 e2 01 c0       	mov    edx,0xc001e254
c000d8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8e0:	89 10                	mov    DWORD PTR [eax],edx
c000d8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8e6:	83 ec 0c             	sub    esp,0xc
c000d8e9:	50                   	push   eax
c000d8ea:	e8 2b df ff ff       	call   c000b81a <Device::~Device()>
c000d8ef:	83 c4 10             	add    esp,0x10
c000d8f2:	90                   	nop
c000d8f3:	83 c4 0c             	add    esp,0xc
c000d8f6:	c3                   	ret    
c000d8f7:	90                   	nop

c000d8f8 <Video::~Video()>:
c000d8f8:	83 ec 0c             	sub    esp,0xc
c000d8fb:	83 ec 0c             	sub    esp,0xc
c000d8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d902:	e8 cd ff ff ff       	call   c000d8d4 <Video::~Video()>
c000d907:	83 c4 10             	add    esp,0x10
c000d90a:	83 ec 08             	sub    esp,0x8
c000d90d:	68 64 01 00 00       	push   0x164
c000d912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d916:	e8 c7 ca ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d91b:	83 c4 10             	add    esp,0x10
c000d91e:	83 c4 0c             	add    esp,0xc
c000d921:	c3                   	ret    

c000d922 <Video::isMonochrome()>:
c000d922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d926:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d92c:	c3                   	ret    
c000d92d:	90                   	nop

c000d92e <Video::getWidth()>:
c000d92e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d932:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d938:	c3                   	ret    
c000d939:	90                   	nop

c000d93a <Video::getHeight()>:
c000d93a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d93e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d944:	c3                   	ret    
c000d945:	90                   	nop

c000d946 <Video::drawCursor(int, int, unsigned char*, int)>:
c000d946:	55                   	push   ebp
c000d947:	57                   	push   edi
c000d948:	56                   	push   esi
c000d949:	53                   	push   ebx
c000d94a:	83 ec 2c             	sub    esp,0x2c
c000d94d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d951:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d955:	83 f8 01             	cmp    eax,0x1
c000d958:	19 c9                	sbb    ecx,ecx
c000d95a:	31 db                	xor    ebx,ebx
c000d95c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d960:	89 cd                	mov    ebp,ecx
c000d962:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d96a:	f7 d5                	not    ebp
c000d96c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d972:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d976:	01 d8                	add    eax,ebx
c000d978:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d97c:	56                   	push   esi
c000d97d:	e8 b8 ff ff ff       	call   c000d93a <Video::getHeight()>
c000d982:	59                   	pop    ecx
c000d983:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d987:	7e 70                	jle    c000d9f9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d989:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d98d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d991:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d994:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d998:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d99c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d9a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9a7:	89 f8                	mov    eax,edi
c000d9a9:	83 c0 20             	add    eax,0x20
c000d9ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d9b0:	56                   	push   esi
c000d9b1:	e8 78 ff ff ff       	call   c000d92e <Video::getWidth()>
c000d9b6:	5a                   	pop    edx
c000d9b7:	39 c7                	cmp    edi,eax
c000d9b9:	7d 34                	jge    c000d9ef <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d9bb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d9c0:	74 05                	je     c000d9c7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d9c2:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9c4:	55                   	push   ebp
c000d9c5:	eb 0d                	jmp    c000d9d4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d9c7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d9cc:	74 12                	je     c000d9e0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d9ce:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9d8:	57                   	push   edi
c000d9d9:	56                   	push   esi
c000d9da:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9dd:	83 c4 10             	add    esp,0x10
c000d9e0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d9e4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d9e8:	47                   	inc    edi
c000d9e9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d9ed:	75 c1                	jne    c000d9b0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d9ef:	43                   	inc    ebx
c000d9f0:	83 fb 20             	cmp    ebx,0x20
c000d9f3:	0f 85 79 ff ff ff    	jne    c000d972 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d9f9:	83 c4 2c             	add    esp,0x2c
c000d9fc:	5b                   	pop    ebx
c000d9fd:	5e                   	pop    esi
c000d9fe:	5f                   	pop    edi
c000d9ff:	5d                   	pop    ebp
c000da00:	c3                   	ret    
c000da01:	90                   	nop

c000da02 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000da02:	55                   	push   ebp
c000da03:	57                   	push   edi
c000da04:	56                   	push   esi
c000da05:	53                   	push   ebx
c000da06:	83 ec 28             	sub    esp,0x28
c000da09:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000da0d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000da11:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000da15:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000da19:	c1 e6 08             	shl    esi,0x8
c000da1c:	01 c6                	add    esi,eax
c000da1e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000da22:	c1 e0 08             	shl    eax,0x8
c000da25:	01 d0                	add    eax,edx
c000da27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da2f:	0f af c6             	imul   eax,esi
c000da32:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da39:	50                   	push   eax
c000da3a:	e8 7a 9d ff ff       	call   c00077b9 <malloc>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 c7                	mov    edi,eax
c000da44:	85 c0                	test   eax,eax
c000da46:	75 10                	jne    c000da58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000da48:	83 ec 0c             	sub    esp,0xc
c000da4b:	68 05 e2 01 c0       	push   0xc001e205
c000da50:	e8 06 27 00 00       	call   c001015b <KePanic(char const*)>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da5b:	ba 12 00 00 00       	mov    edx,0x12
c000da60:	84 c0                	test   al,al
c000da62:	74 11                	je     c000da75 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da64:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da68:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da6c:	c1 fa 03             	sar    edx,0x3
c000da6f:	0f af d1             	imul   edx,ecx
c000da72:	83 c2 12             	add    edx,0x12
c000da75:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000da79:	74 04                	je     c000da7f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000da7b:	85 f6                	test   esi,esi
c000da7d:	75 12                	jne    c000da91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000da7f:	83 ec 0c             	sub    esp,0xc
c000da82:	68 15 e2 01 c0       	push   0xc001e215
c000da87:	e8 4c ca ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000da8c:	e9 b8 00 00 00       	jmp    c000db49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000da91:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000da95:	80 f9 02             	cmp    cl,0x2
c000da98:	0f 85 96 00 00 00    	jne    c000db34 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000da9e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000daa3:	75 0e                	jne    c000dab3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000daa5:	84 c0                	test   al,al
c000daa7:	75 0a                	jne    c000dab3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000daa9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000daac:	83 e8 18             	sub    eax,0x18
c000daaf:	a8 f7                	test   al,0xf7
c000dab1:	74 0a                	je     c000dabd <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dab3:	83 ec 0c             	sub    esp,0xc
c000dab6:	68 2a e2 01 c0       	push   0xc001e22a
c000dabb:	eb 7f                	jmp    c000db3c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dabd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dac5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dacd:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dad1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dad9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dadd:	75 0c                	jne    c000daeb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dadf:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dae4:	c1 e0 18             	shl    eax,0x18
c000dae7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000daeb:	45                   	inc    ebp
c000daec:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000daf1:	c1 e1 10             	shl    ecx,0x10
c000daf4:	89 c8                	mov    eax,ecx
c000daf6:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dafb:	c1 e1 08             	shl    ecx,0x8
c000dafe:	09 c1                	or     ecx,eax
c000db00:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000db04:	09 c1                	or     ecx,eax
c000db06:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000db0a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000db0e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000db12:	c1 f8 03             	sar    eax,0x3
c000db15:	01 c2                	add    edx,eax
c000db17:	89 e8                	mov    eax,ebp
c000db19:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000db1d:	39 c6                	cmp    esi,eax
c000db1f:	7f b0                	jg     c000dad1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000db21:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db29:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db2c:	7e 22                	jle    c000db50 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db2e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000db32:	eb 99                	jmp    c000dacd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000db34:	50                   	push   eax
c000db35:	50                   	push   eax
c000db36:	51                   	push   ecx
c000db37:	68 38 e2 01 c0       	push   0xc001e238
c000db3c:	e8 97 c9 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000db41:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db44:	e8 80 9c ff ff       	call   c00077c9 <free>
c000db49:	83 c4 10             	add    esp,0x10
c000db4c:	31 ff                	xor    edi,edi
c000db4e:	eb 0f                	jmp    c000db5f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000db50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000db54:	89 30                	mov    DWORD PTR [eax],esi
c000db56:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db5a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db5d:	89 30                	mov    DWORD PTR [eax],esi
c000db5f:	83 c4 1c             	add    esp,0x1c
c000db62:	89 f8                	mov    eax,edi
c000db64:	5b                   	pop    ebx
c000db65:	5e                   	pop    esi
c000db66:	5f                   	pop    edi
c000db67:	5d                   	pop    ebp
c000db68:	c3                   	ret    
c000db69:	90                   	nop

c000db6a <Video::putTGA(int, int, unsigned char*, int)>:
c000db6a:	55                   	push   ebp
c000db6b:	57                   	push   edi
c000db6c:	56                   	push   esi
c000db6d:	53                   	push   ebx
c000db6e:	83 ec 28             	sub    esp,0x28
c000db71:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db79:	50                   	push   eax
c000db7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db7e:	50                   	push   eax
c000db7f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db83:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db87:	56                   	push   esi
c000db88:	e8 75 fe ff ff       	call   c000da02 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000db8d:	83 c4 20             	add    esp,0x20
c000db90:	85 c0                	test   eax,eax
c000db92:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db96:	74 35                	je     c000dbcd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db98:	89 c7                	mov    edi,eax
c000db9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db9e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dba2:	39 d8                	cmp    eax,ebx
c000dba4:	7e 27                	jle    c000dbcd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dba6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dbaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbae:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dbb2:	39 e8                	cmp    eax,ebp
c000dbb4:	7e 14                	jle    c000dbca <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dbb6:	8b 06                	mov    eax,DWORD PTR [esi]
c000dbb8:	83 c7 04             	add    edi,0x4
c000dbbb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dbbe:	53                   	push   ebx
c000dbbf:	55                   	push   ebp
c000dbc0:	45                   	inc    ebp
c000dbc1:	56                   	push   esi
c000dbc2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dbc5:	83 c4 10             	add    esp,0x10
c000dbc8:	eb e0                	jmp    c000dbaa <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dbca:	43                   	inc    ebx
c000dbcb:	eb cd                	jmp    c000db9a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dbcd:	83 c4 1c             	add    esp,0x1c
c000dbd0:	5b                   	pop    ebx
c000dbd1:	5e                   	pop    esi
c000dbd2:	5f                   	pop    edi
c000dbd3:	5d                   	pop    ebp
c000dbd4:	c3                   	ret    
c000dbd5:	66 90                	xchg   ax,ax
c000dbd7:	90                   	nop

c000dbd8 <ACPI::close(int, int, void*)>:
c000dbd8:	83 ec 1c             	sub    esp,0x1c
c000dbdb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dbe3:	74 0b                	je     c000dbf0 <ACPI::close(int, int, void*)+0x18>
c000dbe5:	b8 00 00 00 00       	mov    eax,0x0
c000dbea:	e9 9d 00 00 00       	jmp    c000dc8c <ACPI::close(int, int, void*)+0xb4>
c000dbef:	90                   	nop
c000dbf0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dbf5:	75 29                	jne    c000dc20 <ACPI::close(int, int, void*)+0x48>
c000dbf7:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dbfc:	85 c0                	test   eax,eax
c000dbfe:	74 08                	je     c000dc08 <ACPI::close(int, int, void*)+0x30>
c000dc00:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dc05:	ff d0                	call   eax
c000dc07:	90                   	nop
c000dc08:	83 ec 0c             	sub    esp,0xc
c000dc0b:	68 94 e2 01 c0       	push   0xc001e294
c000dc10:	e8 46 25 00 00       	call   c001015b <KePanic(char const*)>
c000dc15:	83 c4 10             	add    esp,0x10
c000dc18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc1d:	eb 6d                	jmp    c000dc8c <ACPI::close(int, int, void*)+0xb4>
c000dc1f:	90                   	nop
c000dc20:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc25:	75 5d                	jne    c000dc84 <ACPI::close(int, int, void*)+0xac>
c000dc27:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dc2c:	85 c0                	test   eax,eax
c000dc2e:	74 08                	je     c000dc38 <ACPI::close(int, int, void*)+0x60>
c000dc30:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dc35:	ff d0                	call   eax
c000dc37:	90                   	nop
c000dc38:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc3d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc44:	25 ff 00 00 00       	and    eax,0xff
c000dc49:	83 e0 02             	and    eax,0x2
c000dc4c:	74 1e                	je     c000dc6c <ACPI::close(int, int, void*)+0x94>
c000dc4e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dc55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc59:	89 c2                	mov    edx,eax
c000dc5b:	ec                   	in     al,dx
c000dc5c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc60:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc64:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc68:	eb d6                	jmp    c000dc40 <ACPI::close(int, int, void*)+0x68>
c000dc6a:	66 90                	xchg   ax,ax
c000dc6c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc73:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dc78:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dc7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc80:	ee                   	out    dx,al
c000dc81:	8d 76 00             	lea    esi,[esi+0x0]
c000dc84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc89:	8d 76 00             	lea    esi,[esi+0x0]
c000dc8c:	83 c4 1c             	add    esp,0x1c
c000dc8f:	c3                   	ret    

c000dc90 <findRSDP()>:
c000dc90:	83 ec 1c             	sub    esp,0x1c
c000dc93:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dc98:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc9e:	83 e0 04             	and    eax,0x4
c000dca1:	84 c0                	test   al,al
c000dca3:	75 07                	jne    c000dcac <findRSDP()+0x1c>
c000dca5:	b8 00 00 00 00       	mov    eax,0x0
c000dcaa:	eb 70                	jmp    c000dd1c <findRSDP()+0x8c>
c000dcac:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c000dcb1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dcb6:	7f 1c                	jg     c000dcd4 <findRSDP()+0x44>
c000dcb8:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dcbd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dcc3:	83 e2 fb             	and    edx,0xfffffffb
c000dcc6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dccc:	b8 00 00 00 00       	mov    eax,0x0
c000dcd1:	eb 49                	jmp    c000dd1c <findRSDP()+0x8c>
c000dcd3:	90                   	nop
c000dcd4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dcdc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dce4:	77 2e                	ja     c000dd14 <findRSDP()+0x84>
c000dce6:	83 ec 04             	sub    esp,0x4
c000dce9:	6a 08                	push   0x8
c000dceb:	68 2f e3 01 c0       	push   0xc001e32f
c000dcf0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcf4:	e8 97 26 ff ff       	call   c0000390 <memcmp>
c000dcf9:	83 c4 10             	add    esp,0x10
c000dcfc:	85 c0                	test   eax,eax
c000dcfe:	0f 94 c0             	sete   al
c000dd01:	84 c0                	test   al,al
c000dd03:	74 07                	je     c000dd0c <findRSDP()+0x7c>
c000dd05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd09:	eb 11                	jmp    c000dd1c <findRSDP()+0x8c>
c000dd0b:	90                   	nop
c000dd0c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dd11:	eb c9                	jmp    c000dcdc <findRSDP()+0x4c>
c000dd13:	90                   	nop
c000dd14:	b8 00 00 00 00       	mov    eax,0x0
c000dd19:	8d 76 00             	lea    esi,[esi+0x0]
c000dd1c:	83 c4 1c             	add    esp,0x1c
c000dd1f:	c3                   	ret    

c000dd20 <loadACPITables(unsigned char*)>:
c000dd20:	57                   	push   edi
c000dd21:	56                   	push   esi
c000dd22:	53                   	push   ebx
c000dd23:	83 ec 60             	sub    esp,0x60
c000dd26:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd2b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd31:	83 e0 04             	and    eax,0x4
c000dd34:	84 c0                	test   al,al
c000dd36:	0f 84 3c 02 00 00    	je     c000df78 <loadACPITables(unsigned char*)+0x258>
c000dd3c:	a0 c0 46 02 c0       	mov    al,ds:0xc00246c0
c000dd41:	84 c0                	test   al,al
c000dd43:	74 77                	je     c000ddbc <loadACPITables(unsigned char*)+0x9c>
c000dd45:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd49:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dd4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd54:	83 e8 24             	sub    eax,0x24
c000dd57:	c1 e8 03             	shr    eax,0x3
c000dd5a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd5e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd66:	66 90                	xchg   ax,ax
c000dd68:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd6c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd70:	0f 8d b6 00 00 00    	jge    c000de2c <loadACPITables(unsigned char*)+0x10c>
c000dd76:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd7a:	83 c0 24             	add    eax,0x24
c000dd7d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dd81:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd85:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dd89:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd8d:	c1 e0 03             	shl    eax,0x3
c000dd90:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dd94:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dd98:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dd9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd9d:	89 c1                	mov    ecx,eax
c000dd9f:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000dda4:	8d 50 01             	lea    edx,[eax+0x1]
c000dda7:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000ddad:	89 ca                	mov    edx,ecx
c000ddaf:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000ddb6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000ddba:	eb ac                	jmp    c000dd68 <loadACPITables(unsigned char*)+0x48>
c000ddbc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddc0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddcb:	83 e8 24             	sub    eax,0x24
c000ddce:	c1 e8 02             	shr    eax,0x2
c000ddd1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ddd5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000dddd:	8d 76 00             	lea    esi,[esi+0x0]
c000dde0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dde4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000dde8:	7d 42                	jge    c000de2c <loadACPITables(unsigned char*)+0x10c>
c000ddea:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddee:	83 c0 24             	add    eax,0x24
c000ddf1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ddf5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ddf9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ddfd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de01:	c1 e0 02             	shl    eax,0x2
c000de04:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de0e:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000de13:	8d 50 01             	lea    edx,[eax+0x1]
c000de16:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000de1c:	89 ca                	mov    edx,ecx
c000de1e:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000de25:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de29:	eb b5                	jmp    c000dde0 <loadACPITables(unsigned char*)+0xc0>
c000de2b:	90                   	nop
c000de2c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000de34:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000de39:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de3d:	0f 8d 39 01 00 00    	jge    c000df7c <loadACPITables(unsigned char*)+0x25c>
c000de43:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de47:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000de4e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de56:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de5e:	25 ff 0f 00 00       	and    eax,0xfff
c000de63:	89 c6                	mov    esi,eax
c000de65:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000de6b:	83 ec 0c             	sub    esp,0xc
c000de6e:	6a 01                	push   0x1
c000de70:	e8 10 b4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000de75:	83 c4 10             	add    esp,0x10
c000de78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de7c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de82:	83 ec 0c             	sub    esp,0xc
c000de85:	6a 01                	push   0x1
c000de87:	6a 01                	push   0x1
c000de89:	50                   	push   eax
c000de8a:	52                   	push   edx
c000de8b:	53                   	push   ebx
c000de8c:	e8 83 bd ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000de91:	83 c4 20             	add    esp,0x20
c000de94:	09 f0                	or     eax,esi
c000de96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de9a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de9e:	c1 e0 03             	shl    eax,0x3
c000dea1:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000dea6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000deaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000deb2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000deba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000debe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dec2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dec6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000deca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dece:	89 c6                	mov    esi,eax
c000ded0:	89 d7                	mov    edi,edx
c000ded2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ded4:	89 c8                	mov    eax,ecx
c000ded6:	89 fa                	mov    edx,edi
c000ded8:	89 f3                	mov    ebx,esi
c000deda:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000dede:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000dee2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000deed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000def1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000def5:	05 00 10 00 00       	add    eax,0x1000
c000defa:	c1 e8 0c             	shr    eax,0xc
c000defd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df05:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df0d:	25 ff 0f 00 00       	and    eax,0xfff
c000df12:	89 c6                	mov    esi,eax
c000df14:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000df1a:	83 ec 0c             	sub    esp,0xc
c000df1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df21:	e8 5f b3 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000df26:	83 c4 10             	add    esp,0x10
c000df29:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df2d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df33:	83 ec 0c             	sub    esp,0xc
c000df36:	6a 01                	push   0x1
c000df38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df3c:	50                   	push   eax
c000df3d:	52                   	push   edx
c000df3e:	53                   	push   ebx
c000df3f:	e8 d0 bc ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df44:	83 c4 20             	add    esp,0x20
c000df47:	09 f0                	or     eax,esi
c000df49:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df51:	83 ec 0c             	sub    esp,0xc
c000df54:	50                   	push   eax
c000df55:	e8 5b b6 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c000df5a:	83 c4 10             	add    esp,0x10
c000df5d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df61:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df65:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000df6c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df70:	e9 bf fe ff ff       	jmp    c000de34 <loadACPITables(unsigned char*)+0x114>
c000df75:	8d 76 00             	lea    esi,[esi+0x0]
c000df78:	90                   	nop
c000df79:	8d 76 00             	lea    esi,[esi+0x0]
c000df7c:	83 c4 60             	add    esp,0x60
c000df7f:	5b                   	pop    ebx
c000df80:	5e                   	pop    esi
c000df81:	5f                   	pop    edi
c000df82:	c3                   	ret    
c000df83:	90                   	nop

c000df84 <findRSDT(unsigned char*)>:
c000df84:	57                   	push   edi
c000df85:	56                   	push   esi
c000df86:	53                   	push   ebx
c000df87:	83 ec 50             	sub    esp,0x50
c000df8a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000df8f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df95:	83 e0 04             	and    eax,0x4
c000df98:	84 c0                	test   al,al
c000df9a:	75 0c                	jne    c000dfa8 <findRSDT(unsigned char*)+0x24>
c000df9c:	b8 00 00 00 00       	mov    eax,0x0
c000dfa1:	e9 26 01 00 00       	jmp    c000e0cc <findRSDT(unsigned char*)+0x148>
c000dfa6:	66 90                	xchg   ax,ax
c000dfa8:	89 e0                	mov    eax,esp
c000dfaa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dfae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dfb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dfb6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000dfbe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dfc2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dfca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000dfce:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dfd2:	89 c6                	mov    esi,eax
c000dfd4:	89 d7                	mov    edi,edx
c000dfd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfd8:	89 c8                	mov    eax,ecx
c000dfda:	89 fa                	mov    edx,edi
c000dfdc:	89 f3                	mov    ebx,esi
c000dfde:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000dfe2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dfe6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dfea:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dfee:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000dff2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000dffa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dffe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e002:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e00e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e012:	25 ff 0f 00 00       	and    eax,0xfff
c000e017:	89 c6                	mov    esi,eax
c000e019:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e01f:	83 ec 0c             	sub    esp,0xc
c000e022:	6a 02                	push   0x2
c000e024:	e8 5c b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e029:	83 c4 10             	add    esp,0x10
c000e02c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e030:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e036:	83 ec 0c             	sub    esp,0xc
c000e039:	6a 01                	push   0x1
c000e03b:	6a 02                	push   0x2
c000e03d:	50                   	push   eax
c000e03e:	52                   	push   edx
c000e03f:	53                   	push   ebx
c000e040:	e8 cf bb ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e045:	83 c4 20             	add    esp,0x20
c000e048:	09 f0                	or     eax,esi
c000e04a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e04e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e052:	25 ff 0f 00 00       	and    eax,0xfff
c000e057:	89 c6                	mov    esi,eax
c000e059:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e05f:	83 ec 0c             	sub    esp,0xc
c000e062:	6a 02                	push   0x2
c000e064:	e8 1c b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e069:	83 c4 10             	add    esp,0x10
c000e06c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e070:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e076:	83 ec 0c             	sub    esp,0xc
c000e079:	6a 01                	push   0x1
c000e07b:	6a 02                	push   0x2
c000e07d:	50                   	push   eax
c000e07e:	52                   	push   edx
c000e07f:	53                   	push   ebx
c000e080:	e8 8f bb ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e085:	83 c4 20             	add    esp,0x20
c000e088:	09 f0                	or     eax,esi
c000e08a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e08e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e093:	75 13                	jne    c000e0a8 <findRSDT(unsigned char*)+0x124>
c000e095:	c6 05 c0 46 02 c0 00 	mov    BYTE PTR ds:0xc00246c0,0x0
c000e09c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0a4:	eb 22                	jmp    c000e0c8 <findRSDT(unsigned char*)+0x144>
c000e0a6:	66 90                	xchg   ax,ax
c000e0a8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e0ad:	75 11                	jne    c000e0c0 <findRSDT(unsigned char*)+0x13c>
c000e0af:	c6 05 c0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246c0,0x1
c000e0b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e0ba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0be:	eb 08                	jmp    c000e0c8 <findRSDT(unsigned char*)+0x144>
c000e0c0:	b8 00 00 00 00       	mov    eax,0x0
c000e0c5:	eb 05                	jmp    c000e0cc <findRSDT(unsigned char*)+0x148>
c000e0c7:	90                   	nop
c000e0c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0cc:	83 c4 50             	add    esp,0x50
c000e0cf:	5b                   	pop    ebx
c000e0d0:	5e                   	pop    esi
c000e0d1:	5f                   	pop    edi
c000e0d2:	c3                   	ret    
c000e0d3:	90                   	nop

c000e0d4 <findDataTable(unsigned char*, char*)>:
c000e0d4:	83 ec 1c             	sub    esp,0x1c
c000e0d7:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e0dc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0e2:	83 e0 04             	and    eax,0x4
c000e0e5:	84 c0                	test   al,al
c000e0e7:	75 07                	jne    c000e0f0 <findDataTable(unsigned char*, char*)+0x1c>
c000e0e9:	b8 00 00 00 00       	mov    eax,0x0
c000e0ee:	eb 58                	jmp    c000e148 <findDataTable(unsigned char*, char*)+0x74>
c000e0f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0f8:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000e0fd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e101:	7d 3d                	jge    c000e140 <findDataTable(unsigned char*, char*)+0x6c>
c000e103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e107:	c1 e0 03             	shl    eax,0x3
c000e10a:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000e10f:	83 ec 04             	sub    esp,0x4
c000e112:	6a 04                	push   0x4
c000e114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e118:	50                   	push   eax
c000e119:	e8 72 22 ff ff       	call   c0000390 <memcmp>
c000e11e:	83 c4 10             	add    esp,0x10
c000e121:	85 c0                	test   eax,eax
c000e123:	0f 94 c0             	sete   al
c000e126:	84 c0                	test   al,al
c000e128:	74 0e                	je     c000e138 <findDataTable(unsigned char*, char*)+0x64>
c000e12a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e12e:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000e135:	eb 11                	jmp    c000e148 <findDataTable(unsigned char*, char*)+0x74>
c000e137:	90                   	nop
c000e138:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e13c:	eb ba                	jmp    c000e0f8 <findDataTable(unsigned char*, char*)+0x24>
c000e13e:	66 90                	xchg   ax,ax
c000e140:	b8 00 00 00 00       	mov    eax,0x0
c000e145:	8d 76 00             	lea    esi,[esi+0x0]
c000e148:	83 c4 1c             	add    esp,0x1c
c000e14b:	c3                   	ret    

c000e14c <scanMADT()>:
c000e14c:	53                   	push   ebx
c000e14d:	83 ec 38             	sub    esp,0x38
c000e150:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000e155:	25 00 04 00 00       	and    eax,0x400
c000e15a:	74 14                	je     c000e170 <scanMADT()+0x24>
c000e15c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e161:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e167:	83 e2 fb             	and    edx,0xfffffffb
c000e16a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e170:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e175:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e17b:	83 e0 04             	and    eax,0x4
c000e17e:	84 c0                	test   al,al
c000e180:	0f 84 8a 04 00 00    	je     c000e610 <scanMADT()+0x4c4>
c000e186:	e8 05 fb ff ff       	call   c000dc90 <findRSDP()>
c000e18b:	a3 cc 46 02 c0       	mov    ds:0xc00246cc,eax
c000e190:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e195:	85 c0                	test   eax,eax
c000e197:	75 1b                	jne    c000e1b4 <scanMADT()+0x68>
c000e199:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e19e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1a4:	83 e2 fb             	and    edx,0xfffffffb
c000e1a7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1ad:	e9 66 04 00 00       	jmp    c000e618 <scanMADT()+0x4cc>
c000e1b2:	66 90                	xchg   ax,ax
c000e1b4:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e1b9:	83 ec 0c             	sub    esp,0xc
c000e1bc:	50                   	push   eax
c000e1bd:	e8 c2 fd ff ff       	call   c000df84 <findRSDT(unsigned char*)>
c000e1c2:	83 c4 10             	add    esp,0x10
c000e1c5:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c000e1ca:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e1cf:	85 c0                	test   eax,eax
c000e1d1:	75 19                	jne    c000e1ec <scanMADT()+0xa0>
c000e1d3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e1d8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1de:	83 e2 fb             	and    edx,0xfffffffb
c000e1e1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1e7:	e9 2c 04 00 00       	jmp    c000e618 <scanMADT()+0x4cc>
c000e1ec:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e1f1:	83 ec 0c             	sub    esp,0xc
c000e1f4:	50                   	push   eax
c000e1f5:	e8 26 fb ff ff       	call   c000dd20 <loadACPITables(unsigned char*)>
c000e1fa:	83 c4 10             	add    esp,0x10
c000e1fd:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e202:	83 ec 08             	sub    esp,0x8
c000e205:	68 38 e3 01 c0       	push   0xc001e338
c000e20a:	50                   	push   eax
c000e20b:	e8 c4 fe ff ff       	call   c000e0d4 <findDataTable(unsigned char*, char*)>
c000e210:	83 c4 10             	add    esp,0x10
c000e213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e217:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e21c:	75 1a                	jne    c000e238 <scanMADT()+0xec>
c000e21e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e223:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e229:	83 e2 fe             	and    edx,0xfffffffe
c000e22c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e232:	e9 e1 03 00 00       	jmp    c000e618 <scanMADT()+0x4cc>
c000e237:	90                   	nop
c000e238:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e240:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e244:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e247:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e24b:	0f 87 c7 03 00 00    	ja     c000e618 <scanMADT()+0x4cc>
c000e251:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e259:	0f 87 b9 03 00 00    	ja     c000e618 <scanMADT()+0x4cc>
c000e25f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e263:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e267:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e26b:	8d 50 01             	lea    edx,[eax+0x1]
c000e26e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e272:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e276:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e27a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e27e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e282:	8d 50 01             	lea    edx,[eax+0x1]
c000e285:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e289:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e28d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e291:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e295:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e29a:	0f 86 74 03 00 00    	jbe    c000e614 <scanMADT()+0x4c8>
c000e2a0:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e2a5:	75 5d                	jne    c000e304 <scanMADT()+0x1b8>
c000e2a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2ab:	8d 50 01             	lea    edx,[eax+0x1]
c000e2ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2b2:	8a 15 c0 48 02 c0    	mov    dl,BYTE PTR ds:0xc00248c0
c000e2b8:	81 e2 ff 00 00 00    	and    edx,0xff
c000e2be:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2c2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2c6:	88 82 00 49 02 c0    	mov    BYTE PTR [edx-0x3ffdb700],al
c000e2cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e2d0:	8d 42 01             	lea    eax,[edx+0x1]
c000e2d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e2d7:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c000e2dc:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2df:	88 0d c0 48 02 c0    	mov    BYTE PTR ds:0xc00248c0,cl
c000e2e5:	25 ff 00 00 00       	and    eax,0xff
c000e2ea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2ee:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e2f2:	88 90 e0 48 02 c0    	mov    BYTE PTR [eax-0x3ffdb720],dl
c000e2f8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e2fd:	e9 f6 02 00 00       	jmp    c000e5f8 <scanMADT()+0x4ac>
c000e302:	66 90                	xchg   ax,ax
c000e304:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e309:	0f 85 29 01 00 00    	jne    c000e438 <scanMADT()+0x2ec>
c000e30f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e313:	8d 50 01             	lea    edx,[eax+0x1]
c000e316:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e31a:	8a 15 80 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024780
c000e320:	81 e2 ff 00 00 00    	and    edx,0xff
c000e326:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e32a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e32e:	88 82 a0 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb860],al
c000e334:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e338:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e33c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e340:	01 d0                	add    eax,edx
c000e342:	83 c0 2c             	add    eax,0x2c
c000e345:	8a 00                	mov    al,BYTE PTR [eax]
c000e347:	31 d2                	xor    edx,edx
c000e349:	88 c2                	mov    dl,al
c000e34b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e34f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e352:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e356:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e35a:	25 ff 00 00 00       	and    eax,0xff
c000e35f:	c1 e0 08             	shl    eax,0x8
c000e362:	89 d1                	mov    ecx,edx
c000e364:	09 c1                	or     ecx,eax
c000e366:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e36a:	8d 50 02             	lea    edx,[eax+0x2]
c000e36d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e371:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e375:	25 ff 00 00 00       	and    eax,0xff
c000e37a:	c1 e0 10             	shl    eax,0x10
c000e37d:	09 c1                	or     ecx,eax
c000e37f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e383:	8d 50 03             	lea    edx,[eax+0x3]
c000e386:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e38a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e38e:	25 ff 00 00 00       	and    eax,0xff
c000e393:	c1 e0 18             	shl    eax,0x18
c000e396:	09 c1                	or     ecx,eax
c000e398:	89 ca                	mov    edx,ecx
c000e39a:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e39f:	25 ff 00 00 00       	and    eax,0xff
c000e3a4:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c000e3ab:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3b0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3b8:	01 d0                	add    eax,edx
c000e3ba:	83 c0 2c             	add    eax,0x2c
c000e3bd:	8a 00                	mov    al,BYTE PTR [eax]
c000e3bf:	31 d2                	xor    edx,edx
c000e3c1:	88 c2                	mov    dl,al
c000e3c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3c7:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3ce:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3d2:	25 ff 00 00 00       	and    eax,0xff
c000e3d7:	c1 e0 08             	shl    eax,0x8
c000e3da:	89 d1                	mov    ecx,edx
c000e3dc:	09 c1                	or     ecx,eax
c000e3de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3e2:	8d 50 02             	lea    edx,[eax+0x2]
c000e3e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3e9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3ed:	25 ff 00 00 00       	and    eax,0xff
c000e3f2:	c1 e0 10             	shl    eax,0x10
c000e3f5:	09 c1                	or     ecx,eax
c000e3f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3fb:	8d 50 03             	lea    edx,[eax+0x3]
c000e3fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e402:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e406:	25 ff 00 00 00       	and    eax,0xff
c000e40b:	c1 e0 18             	shl    eax,0x18
c000e40e:	09 c1                	or     ecx,eax
c000e410:	89 ca                	mov    edx,ecx
c000e412:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e417:	25 ff 00 00 00       	and    eax,0xff
c000e41c:	89 14 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],edx
c000e423:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e428:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e42d:	40                   	inc    eax
c000e42e:	a2 80 47 02 c0       	mov    ds:0xc0024780,al
c000e433:	e9 c0 01 00 00       	jmp    c000e5f8 <scanMADT()+0x4ac>
c000e438:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e43d:	0f 85 fd 00 00 00    	jne    c000e540 <scanMADT()+0x3f4>
c000e443:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e447:	8d 50 01             	lea    edx,[eax+0x1]
c000e44a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e44e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e452:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e456:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e45a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e45e:	8d 50 01             	lea    edx,[eax+0x1]
c000e461:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e465:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e469:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e46d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e471:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e475:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e479:	01 d0                	add    eax,edx
c000e47b:	83 c0 2c             	add    eax,0x2c
c000e47e:	8a 00                	mov    al,BYTE PTR [eax]
c000e480:	31 d2                	xor    edx,edx
c000e482:	88 c2                	mov    dl,al
c000e484:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e488:	8d 48 01             	lea    ecx,[eax+0x1]
c000e48b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e48f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e493:	25 ff 00 00 00       	and    eax,0xff
c000e498:	c1 e0 08             	shl    eax,0x8
c000e49b:	89 d1                	mov    ecx,edx
c000e49d:	09 c1                	or     ecx,eax
c000e49f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4a3:	8d 50 02             	lea    edx,[eax+0x2]
c000e4a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4aa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4ae:	25 ff 00 00 00       	and    eax,0xff
c000e4b3:	c1 e0 10             	shl    eax,0x10
c000e4b6:	09 c1                	or     ecx,eax
c000e4b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4bc:	8d 50 03             	lea    edx,[eax+0x3]
c000e4bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4c3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4c7:	25 ff 00 00 00       	and    eax,0xff
c000e4cc:	c1 e0 18             	shl    eax,0x18
c000e4cf:	09 c8                	or     eax,ecx
c000e4d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4d5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4e2:	01 d0                	add    eax,edx
c000e4e4:	83 c0 2c             	add    eax,0x2c
c000e4e7:	8a 00                	mov    al,BYTE PTR [eax]
c000e4e9:	25 ff 00 00 00       	and    eax,0xff
c000e4ee:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e4f2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e4f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4f9:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e4fd:	81 e2 ff 00 00 00    	and    edx,0xff
c000e503:	c1 e2 08             	shl    edx,0x8
c000e506:	09 d0                	or     eax,edx
c000e508:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e50d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e512:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e516:	25 ff 00 00 00       	and    eax,0xff
c000e51b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e51f:	88 90 e0 f7 01 c0    	mov    BYTE PTR [eax-0x3ffe0820],dl
c000e525:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e529:	31 d2                	xor    edx,edx
c000e52b:	88 c2                	mov    dl,al
c000e52d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e532:	66 89 84 12 60 47 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdb8a0],ax
c000e53a:	e9 b9 00 00 00       	jmp    c000e5f8 <scanMADT()+0x4ac>
c000e53f:	90                   	nop
c000e540:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e545:	0f 85 a1 00 00 00    	jne    c000e5ec <scanMADT()+0x4a0>
c000e54b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e54f:	8d 50 01             	lea    edx,[eax+0x1]
c000e552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e556:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e55a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e55e:	25 ff 00 00 00       	and    eax,0xff
c000e563:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e567:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e56b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e56f:	01 d0                	add    eax,edx
c000e571:	83 c0 2c             	add    eax,0x2c
c000e574:	8a 00                	mov    al,BYTE PTR [eax]
c000e576:	31 d2                	xor    edx,edx
c000e578:	88 c2                	mov    dl,al
c000e57a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e57e:	8d 48 01             	lea    ecx,[eax+0x1]
c000e581:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e585:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e589:	25 ff 00 00 00       	and    eax,0xff
c000e58e:	c1 e0 08             	shl    eax,0x8
c000e591:	09 d0                	or     eax,edx
c000e593:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e597:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e59c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5a0:	8d 50 01             	lea    edx,[eax+0x1]
c000e5a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5ab:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5af:	25 ff 00 00 00       	and    eax,0xff
c000e5b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5bc:	c1 e0 08             	shl    eax,0x8
c000e5bf:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e5c3:	89 c1                	mov    ecx,eax
c000e5c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5c9:	c1 e0 18             	shl    eax,0x18
c000e5cc:	89 c3                	mov    ebx,eax
c000e5ce:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e5d3:	8d 50 01             	lea    edx,[eax+0x1]
c000e5d6:	89 15 d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,edx
c000e5dc:	09 d9                	or     ecx,ebx
c000e5de:	89 ca                	mov    edx,ecx
c000e5e0:	89 14 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],edx
c000e5e7:	eb 0f                	jmp    c000e5f8 <scanMADT()+0x4ac>
c000e5e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e5ec:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e5f1:	75 05                	jne    c000e5f8 <scanMADT()+0x4ac>
c000e5f3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e5f8:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e5fc:	31 d2                	xor    edx,edx
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e604:	01 d0                	add    eax,edx
c000e606:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e60a:	e9 31 fc ff ff       	jmp    c000e240 <scanMADT()+0xf4>
c000e60f:	90                   	nop
c000e610:	90                   	nop
c000e611:	eb 05                	jmp    c000e618 <scanMADT()+0x4cc>
c000e613:	90                   	nop
c000e614:	90                   	nop
c000e615:	8d 76 00             	lea    esi,[esi+0x0]
c000e618:	83 c4 38             	add    esp,0x38
c000e61b:	5b                   	pop    ebx
c000e61c:	c3                   	ret    
c000e61d:	90                   	nop
c000e61e:	66 90                	xchg   ax,ax

c000e620 <ACPI::ACPI()>:
c000e620:	83 ec 0c             	sub    esp,0xc
c000e623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e627:	83 ec 08             	sub    esp,0x8
c000e62a:	68 3d e3 01 c0       	push   0xc001e33d
c000e62f:	50                   	push   eax
c000e630:	e8 7b d4 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000e635:	83 c4 10             	add    esp,0x10
c000e638:	ba 74 e4 01 c0       	mov    edx,0xc001e474
c000e63d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e641:	89 10                	mov    DWORD PTR [eax],edx
c000e643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e647:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e652:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e660:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e66a:	e8 dd fa ff ff       	call   c000e14c <scanMADT()>
c000e66f:	90                   	nop
c000e670:	83 c4 0c             	add    esp,0xc
c000e673:	c3                   	ret    

c000e674 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e674:	83 ec 2c             	sub    esp,0x2c
c000e677:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e67b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e67f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e683:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e687:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e68c:	88 d0                	mov    al,dl
c000e68e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e692:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e697:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e69f:	90                   	nop
c000e6a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6a4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e6aa:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e6ae:	0f 8d 9c 00 00 00    	jge    c000e750 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e6b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6bc:	83 c2 2a             	add    edx,0x2a
c000e6bf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e6c3:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e6c8:	75 7a                	jne    c000e744 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6d2:	83 c2 2a             	add    edx,0x2a
c000e6d5:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e6d9:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e6dd:	75 65                	jne    c000e744 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6df:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e6e4:	74 3a                	je     c000e720 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e6e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6ee:	83 c2 2a             	add    edx,0x2a
c000e6f1:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e6f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6fc:	39 c2                	cmp    edx,eax
c000e6fe:	74 10                	je     c000e710 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	68 b8 e2 01 c0       	push   0xc001e2b8
c000e708:	e8 4e 1a 00 00       	call   c001015b <KePanic(char const*)>
c000e70d:	83 c4 10             	add    esp,0x10
c000e710:	83 ec 0c             	sub    esp,0xc
c000e713:	68 42 e3 01 c0       	push   0xc001e342
c000e718:	e8 3e 1a 00 00       	call   c001015b <KePanic(char const*)>
c000e71d:	83 c4 10             	add    esp,0x10
c000e720:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e724:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e728:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e72c:	83 c2 2a             	add    edx,0x2a
c000e72f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e733:	8b 02                	mov    eax,DWORD PTR [edx]
c000e735:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e738:	89 01                	mov    DWORD PTR [ecx],eax
c000e73a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e73d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e742:	66 90                	xchg   ax,ax
c000e744:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e748:	e9 53 ff ff ff       	jmp    c000e6a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e74d:	8d 76 00             	lea    esi,[esi+0x0]
c000e750:	90                   	nop
c000e751:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e755:	83 c4 2c             	add    esp,0x2c
c000e758:	c2 04 00             	ret    0x4
c000e75b:	90                   	nop

c000e75c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e75c:	83 ec 1c             	sub    esp,0x1c
c000e75f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e763:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e767:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e76b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e770:	88 c8                	mov    al,cl
c000e772:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e776:	88 d0                	mov    al,dl
c000e778:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e77c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e780:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e78a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e78d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e791:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e799:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e79f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e7a3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e7a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7aa:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e7af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7b3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7b9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e7bd:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c4:	83 c2 2a             	add    edx,0x2a
c000e7c7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e7cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7cf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7dc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e7e0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e7e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7ee:	8d 50 01             	lea    edx,[eax+0x1]
c000e7f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f5:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e7fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ff:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e805:	3d 00 02 00 00       	cmp    eax,0x200
c000e80a:	75 10                	jne    c000e81c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e80c:	83 ec 0c             	sub    esp,0xc
c000e80f:	68 51 e3 01 c0       	push   0xc001e351
c000e814:	e8 42 19 00 00       	call   c001015b <KePanic(char const*)>
c000e819:	83 c4 10             	add    esp,0x10
c000e81c:	90                   	nop
c000e81d:	83 c4 1c             	add    esp,0x1c
c000e820:	c3                   	ret    
c000e821:	90                   	nop
c000e822:	66 90                	xchg   ax,ax

c000e824 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e824:	b8 00 00 00 00       	mov    eax,0x0
c000e829:	c3                   	ret    
c000e82a:	66 90                	xchg   ax,ax

c000e82c <ACPI::detectPCI()>:
c000e82c:	53                   	push   ebx
c000e82d:	83 ec 28             	sub    esp,0x28
c000e830:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e835:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e83a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e83f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e845:	83 e0 04             	and    eax,0x4
c000e848:	84 c0                	test   al,al
c000e84a:	74 2c                	je     c000e878 <ACPI::detectPCI()+0x4c>
c000e84c:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e851:	83 ec 08             	sub    esp,0x8
c000e854:	68 6e e3 01 c0       	push   0xc001e36e
c000e859:	50                   	push   eax
c000e85a:	e8 75 f8 ff ff       	call   c000e0d4 <findDataTable(unsigned char*, char*)>
c000e85f:	83 c4 10             	add    esp,0x10
c000e862:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e866:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e86b:	74 0b                	je     c000e878 <ACPI::detectPCI()+0x4c>
c000e86d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e872:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e877:	90                   	nop
c000e878:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e880:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e884:	8a 00                	mov    al,BYTE PTR [eax]
c000e886:	3c 01                	cmp    al,0x1
c000e888:	75 0e                	jne    c000e898 <ACPI::detectPCI()+0x6c>
c000e88a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e88f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e894:	eb 2a                	jmp    c000e8c0 <ACPI::detectPCI()+0x94>
c000e896:	66 90                	xchg   ax,ax
c000e898:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e89c:	8a 00                	mov    al,BYTE PTR [eax]
c000e89e:	3c 02                	cmp    al,0x2
c000e8a0:	75 1e                	jne    c000e8c0 <ACPI::detectPCI()+0x94>
c000e8a2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8a7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8ac:	74 12                	je     c000e8c0 <ACPI::detectPCI()+0x94>
c000e8ae:	83 ec 0c             	sub    esp,0xc
c000e8b1:	68 e8 e2 01 c0       	push   0xc001e2e8
c000e8b6:	e8 a0 18 00 00       	call   c001015b <KePanic(char const*)>
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	66 90                	xchg   ax,ax
c000e8c0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e8c4:	83 f0 01             	xor    eax,0x1
c000e8c7:	84 c0                	test   al,al
c000e8c9:	74 41                	je     c000e90c <ACPI::detectPCI()+0xe0>
c000e8cb:	e8 60 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e8d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8d4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8d9:	75 0d                	jne    c000e8e8 <ACPI::detectPCI()+0xbc>
c000e8db:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8e0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8e5:	eb 25                	jmp    c000e90c <ACPI::detectPCI()+0xe0>
c000e8e7:	90                   	nop
c000e8e8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e8ed:	75 1d                	jne    c000e90c <ACPI::detectPCI()+0xe0>
c000e8ef:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8f4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8f9:	74 11                	je     c000e90c <ACPI::detectPCI()+0xe0>
c000e8fb:	83 ec 0c             	sub    esp,0xc
c000e8fe:	68 e8 e2 01 c0       	push   0xc001e2e8
c000e903:	e8 53 18 00 00       	call   c001015b <KePanic(char const*)>
c000e908:	83 c4 10             	add    esp,0x10
c000e90b:	90                   	nop
c000e90c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e911:	0f 84 85 00 00 00    	je     c000e99c <ACPI::detectPCI()+0x170>
c000e917:	83 ec 0c             	sub    esp,0xc
c000e91a:	68 73 e3 01 c0       	push   0xc001e373
c000e91f:	e8 bf 11 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000e924:	83 c4 10             	add    esp,0x10
c000e927:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e92f:	83 ec 0c             	sub    esp,0xc
c000e932:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e936:	e8 7e 8e ff ff       	call   c00077b9 <malloc>
c000e93b:	83 c4 10             	add    esp,0x10
c000e93e:	89 c3                	mov    ebx,eax
c000e940:	83 ec 0c             	sub    esp,0xc
c000e943:	53                   	push   ebx
c000e944:	e8 f5 9a 00 00       	call   c001843e <PCI::PCI()>
c000e949:	83 c4 10             	add    esp,0x10
c000e94c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e950:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e954:	83 ec 08             	sub    esp,0x8
c000e957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e95b:	50                   	push   eax
c000e95c:	e8 b7 cf ff ff       	call   c000b918 <Device::addChild(Device*)>
c000e961:	83 c4 10             	add    esp,0x10
c000e964:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e968:	8b 00                	mov    eax,DWORD PTR [eax]
c000e96a:	83 c0 08             	add    eax,0x8
c000e96d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e96f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e974:	74 0a                	je     c000e980 <ACPI::detectPCI()+0x154>
c000e976:	ba 01 00 00 00       	mov    edx,0x1
c000e97b:	eb 0b                	jmp    c000e988 <ACPI::detectPCI()+0x15c>
c000e97d:	8d 76 00             	lea    esi,[esi+0x0]
c000e980:	ba 02 00 00 00       	mov    edx,0x2
c000e985:	8d 76 00             	lea    esi,[esi+0x0]
c000e988:	6a 00                	push   0x0
c000e98a:	6a 00                	push   0x0
c000e98c:	52                   	push   edx
c000e98d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e991:	ff d0                	call   eax
c000e993:	83 c4 10             	add    esp,0x10
c000e996:	e9 91 00 00 00       	jmp    c000ea2c <ACPI::detectPCI()+0x200>
c000e99b:	90                   	nop
c000e99c:	83 ec 0c             	sub    esp,0xc
c000e99f:	68 8b e3 01 c0       	push   0xc001e38b
c000e9a4:	e8 3a 11 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000e9a9:	83 c4 10             	add    esp,0x10
c000e9ac:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e9b3:	83 ec 0c             	sub    esp,0xc
c000e9b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e9ba:	e8 fa 8d ff ff       	call   c00077b9 <malloc>
c000e9bf:	83 c4 10             	add    esp,0x10
c000e9c2:	89 c3                	mov    ebx,eax
c000e9c4:	83 ec 0c             	sub    esp,0xc
c000e9c7:	53                   	push   ebx
c000e9c8:	e8 9d a5 00 00       	call   c0018f6a <IDE::IDE()>
c000e9cd:	83 c4 10             	add    esp,0x10
c000e9d0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e9d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9d8:	83 ec 08             	sub    esp,0x8
c000e9db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9df:	50                   	push   eax
c000e9e0:	e8 33 cf ff ff       	call   c000b918 <Device::addChild(Device*)>
c000e9e5:	83 c4 10             	add    esp,0x10
c000e9e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9ec:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e9f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9fa:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ea03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea07:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ea10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea14:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea16:	83 c0 08             	add    eax,0x8
c000ea19:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea1b:	6a 00                	push   0x0
c000ea1d:	6a 00                	push   0x0
c000ea1f:	6a 00                	push   0x0
c000ea21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea25:	ff d0                	call   eax
c000ea27:	83 c4 10             	add    esp,0x10
c000ea2a:	66 90                	xchg   ax,ax
c000ea2c:	90                   	nop
c000ea2d:	83 c4 28             	add    esp,0x28
c000ea30:	5b                   	pop    ebx
c000ea31:	c3                   	ret    
c000ea32:	66 90                	xchg   ax,ax

c000ea34 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ea34:	83 ec 1c             	sub    esp,0x1c
c000ea37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea3b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea3e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea42:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000ea48:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea4c:	25 ff 00 00 00       	and    eax,0xff
c000ea51:	83 ec 08             	sub    esp,0x8
c000ea54:	50                   	push   eax
c000ea55:	52                   	push   edx
c000ea56:	e8 4b 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000ea5b:	83 c4 10             	add    esp,0x10
c000ea5e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea62:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000ea68:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea6c:	25 ff 00 00 00       	and    eax,0xff
c000ea71:	83 ec 04             	sub    esp,0x4
c000ea74:	6a 01                	push   0x1
c000ea76:	50                   	push   eax
c000ea77:	52                   	push   edx
c000ea78:	e8 3f 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ea7d:	83 c4 10             	add    esp,0x10
c000ea80:	90                   	nop
c000ea81:	83 c4 1c             	add    esp,0x1c
c000ea84:	c3                   	ret    
c000ea85:	90                   	nop
c000ea86:	66 90                	xchg   ax,ax

c000ea88 <ACPI::sleep()>:
c000ea88:	83 ec 0c             	sub    esp,0xc
c000ea8b:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000ea90:	85 c0                	test   eax,eax
c000ea92:	74 08                	je     c000ea9c <ACPI::sleep()+0x14>
c000ea94:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000ea99:	ff d0                	call   eax
c000ea9b:	90                   	nop
c000ea9c:	90                   	nop
c000ea9d:	83 c4 0c             	add    esp,0xc
c000eaa0:	c3                   	ret    
c000eaa1:	90                   	nop
c000eaa2:	66 90                	xchg   ax,ax

c000eaa4 <ACPI::open(int, int, void*)>:
c000eaa4:	57                   	push   edi
c000eaa5:	56                   	push   esi
c000eaa6:	53                   	push   ebx
c000eaa7:	81 ec 70 01 00 00    	sub    esp,0x170
c000eaad:	83 ec 0c             	sub    esp,0xc
c000eab0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eab7:	e8 70 fd ff ff       	call   c000e82c <ACPI::detectPCI()>
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	83 ec 0c             	sub    esp,0xc
c000eac2:	68 10 e3 01 c0       	push   0xc001e310
c000eac7:	e8 17 10 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000eacc:	83 c4 10             	add    esp,0x10
c000eacf:	83 ec 0c             	sub    esp,0xc
c000ead2:	68 a0 e3 01 c0       	push   0xc001e3a0
c000ead7:	e8 18 38 00 00       	call   c00122f4 <Thr::loadKernelSymbolTable(char const*)>
c000eadc:	83 c4 10             	add    esp,0x10
c000eadf:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eae7:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eaf2:	83 ec 0c             	sub    esp,0xc
c000eaf5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eafc:	e8 b8 8c ff ff       	call   c00077b9 <malloc>
c000eb01:	83 c4 10             	add    esp,0x10
c000eb04:	89 c3                	mov    ebx,eax
c000eb06:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000eb0b:	83 ec 04             	sub    esp,0x4
c000eb0e:	50                   	push   eax
c000eb0f:	68 be e3 01 c0       	push   0xc001e3be
c000eb14:	53                   	push   ebx
c000eb15:	e8 34 bf ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000eb1a:	83 c4 10             	add    esp,0x10
c000eb1d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb24:	83 ec 08             	sub    esp,0x8
c000eb27:	6a 01                	push   0x1
c000eb29:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb30:	e8 d9 bf ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000eb35:	83 c4 10             	add    esp,0x10
c000eb38:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb3f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb47:	75 17                	jne    c000eb60 <ACPI::open(int, int, void*)+0xbc>
c000eb49:	83 ec 0c             	sub    esp,0xc
c000eb4c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb53:	e8 14 c0 ff ff       	call   c000ab6c <File::close()>
c000eb58:	83 c4 10             	add    esp,0x10
c000eb5b:	eb 0b                	jmp    c000eb68 <ACPI::open(int, int, void*)+0xc4>
c000eb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb60:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb68:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb70:	74 1e                	je     c000eb90 <ACPI::open(int, int, void*)+0xec>
c000eb72:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eb79:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb7b:	83 c0 08             	add    eax,0x8
c000eb7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb80:	83 ec 0c             	sub    esp,0xc
c000eb83:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb8a:	ff d0                	call   eax
c000eb8c:	83 c4 10             	add    esp,0x10
c000eb8f:	90                   	nop
c000eb90:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eb97:	83 f0 01             	xor    eax,0x1
c000eb9a:	84 c0                	test   al,al
c000eb9c:	74 42                	je     c000ebe0 <ACPI::open(int, int, void*)+0x13c>
c000eb9e:	83 ec 0c             	sub    esp,0xc
c000eba1:	68 dc e3 01 c0       	push   0xc001e3dc
c000eba6:	e8 38 0f 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000ebab:	83 c4 10             	add    esp,0x10
c000ebae:	83 ec 04             	sub    esp,0x4
c000ebb1:	6a 0c                	push   0xc
c000ebb3:	68 f7 e3 01 c0       	push   0xc001e3f7
c000ebb8:	68 08 e4 01 c0       	push   0xc001e408
c000ebbd:	e8 22 2d 00 00       	call   c00118e4 <Reg::readIntWithDefault(char*, char*, int)>
c000ebc2:	83 c4 10             	add    esp,0x10
c000ebc5:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ebd6:	e8 b4 a8 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000ebdb:	83 c4 10             	add    esp,0x10
c000ebde:	66 90                	xchg   ax,ax
c000ebe0:	83 ec 0c             	sub    esp,0xc
c000ebe3:	68 77 d4 01 c0       	push   0xc001d477
c000ebe8:	e8 f6 0e 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000ebed:	83 c4 10             	add    esp,0x10
c000ebf0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ebf7:	83 ec 08             	sub    esp,0x8
c000ebfa:	6a 12                	push   0x12
c000ebfc:	50                   	push   eax
c000ebfd:	e8 2e d0 ff ff       	call   c000bc30 <getDevicesOfType(DeviceType)>
c000ec02:	83 c4 0c             	add    esp,0xc
c000ec05:	8d 76 00             	lea    esi,[esi+0x0]
c000ec08:	83 ec 0c             	sub    esp,0xc
c000ec0b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec12:	50                   	push   eax
c000ec13:	e8 b4 dc 00 00       	call   c001c8cc <LinkedList<Device>::isEmpty()>
c000ec18:	83 c4 10             	add    esp,0x10
c000ec1b:	83 f0 01             	xor    eax,0x1
c000ec1e:	84 c0                	test   al,al
c000ec20:	0f 84 46 01 00 00    	je     c000ed6c <ACPI::open(int, int, void*)+0x2c8>
c000ec26:	83 ec 0c             	sub    esp,0xc
c000ec29:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec30:	50                   	push   eax
c000ec31:	e8 b2 dc 00 00       	call   c001c8e8 <LinkedList<Device>::getFirstElement()>
c000ec36:	83 c4 10             	add    esp,0x10
c000ec39:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec40:	83 ec 0c             	sub    esp,0xc
c000ec43:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec4a:	50                   	push   eax
c000ec4b:	e8 a0 dc 00 00       	call   c001c8f0 <LinkedList<Device>::removeFirst()>
c000ec50:	83 c4 10             	add    esp,0x10
c000ec53:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec5a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec61:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec6c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec72:	ba 09 00 00 00       	mov    edx,0x9
c000ec77:	fc                   	cld    
c000ec78:	89 c7                	mov    edi,eax
c000ec7a:	89 de                	mov    esi,ebx
c000ec7c:	89 d1                	mov    ecx,edx
c000ec7e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec80:	83 ec 08             	sub    esp,0x8
c000ec83:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ec87:	50                   	push   eax
c000ec88:	83 ec 24             	sub    esp,0x24
c000ec8b:	89 e0                	mov    eax,esp
c000ec8d:	89 c3                	mov    ebx,eax
c000ec8f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ec93:	ba 09 00 00 00       	mov    edx,0x9
c000ec98:	89 df                	mov    edi,ebx
c000ec9a:	89 c6                	mov    esi,eax
c000ec9c:	89 d1                	mov    ecx,edx
c000ec9e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eca0:	e8 7b 9c 00 00       	call   c0018920 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000eca5:	83 c4 30             	add    esp,0x30
c000eca8:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ecaf:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ecb7:	0f 84 4b ff ff ff    	je     c000ec08 <ACPI::open(int, int, void*)+0x164>
c000ecbd:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ecc8:	83 ec 0c             	sub    esp,0xc
c000eccb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ecd2:	e8 e2 8a ff ff       	call   c00077b9 <malloc>
c000ecd7:	83 c4 10             	add    esp,0x10
c000ecda:	89 c3                	mov    ebx,eax
c000ecdc:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ece1:	83 ec 04             	sub    esp,0x4
c000ece4:	50                   	push   eax
c000ece5:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecec:	53                   	push   ebx
c000eced:	e8 5c bd ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000ecf2:	83 c4 10             	add    esp,0x10
c000ecf5:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ecfc:	83 ec 0c             	sub    esp,0xc
c000ecff:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed06:	e8 71 c0 ff ff       	call   c000ad7c <File::exists()>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	84 c0                	test   al,al
c000ed10:	74 2a                	je     c000ed3c <ACPI::open(int, int, void*)+0x298>
c000ed12:	83 ec 08             	sub    esp,0x8
c000ed15:	6a 01                	push   0x1
c000ed17:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed1e:	e8 48 40 00 00       	call   c0012d6b <Thr::loadDLL(char const*, bool)>
c000ed23:	83 c4 10             	add    esp,0x10
c000ed26:	83 ec 08             	sub    esp,0x8
c000ed29:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed30:	50                   	push   eax
c000ed31:	e8 66 42 00 00       	call   c0012f9c <Thr::executeDLL(unsigned long, void*)>
c000ed36:	83 c4 10             	add    esp,0x10
c000ed39:	8d 76 00             	lea    esi,[esi+0x0]
c000ed3c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed44:	0f 84 be fe ff ff    	je     c000ec08 <ACPI::open(int, int, void*)+0x164>
c000ed4a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ed51:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed53:	83 c0 08             	add    eax,0x8
c000ed56:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed58:	83 ec 0c             	sub    esp,0xc
c000ed5b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed62:	ff d0                	call   eax
c000ed64:	83 c4 10             	add    esp,0x10
c000ed67:	e9 9c fe ff ff       	jmp    c000ec08 <ACPI::open(int, int, void*)+0x164>
c000ed6c:	83 ec 0c             	sub    esp,0xc
c000ed6f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed76:	50                   	push   eax
c000ed77:	e8 4c db 00 00       	call   c001c8c8 <LinkedList<Device>::~LinkedList()>
c000ed7c:	83 c4 10             	add    esp,0x10
c000ed7f:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000ed85:	83 ec 08             	sub    esp,0x8
c000ed88:	6a 01                	push   0x1
c000ed8a:	68 0f e4 01 c0       	push   0xc001e40f
c000ed8f:	e8 d7 3f 00 00       	call   c0012d6b <Thr::loadDLL(char const*, bool)>
c000ed94:	83 c4 10             	add    esp,0x10
c000ed97:	83 ec 08             	sub    esp,0x8
c000ed9a:	53                   	push   ebx
c000ed9b:	50                   	push   eax
c000ed9c:	e8 fb 41 00 00       	call   c0012f9c <Thr::executeDLL(unsigned long, void*)>
c000eda1:	83 c4 10             	add    esp,0x10
c000eda4:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000eda9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000edaf:	83 e0 04             	and    eax,0x4
c000edb2:	84 c0                	test   al,al
c000edb4:	0f 84 16 01 00 00    	je     c000eed0 <ACPI::open(int, int, void*)+0x42c>
c000edba:	83 ec 0c             	sub    esp,0xc
c000edbd:	68 2c e4 01 c0       	push   0xc001e42c
c000edc2:	e8 1c 0d 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000edc7:	83 c4 10             	add    esp,0x10
c000edca:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000edd5:	83 ec 0c             	sub    esp,0xc
c000edd8:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000eddf:	e8 d5 89 ff ff       	call   c00077b9 <malloc>
c000ede4:	83 c4 10             	add    esp,0x10
c000ede7:	89 c3                	mov    ebx,eax
c000ede9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000edee:	83 ec 04             	sub    esp,0x4
c000edf1:	50                   	push   eax
c000edf2:	68 49 e4 01 c0       	push   0xc001e449
c000edf7:	53                   	push   ebx
c000edf8:	e8 51 bc ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000edfd:	83 c4 10             	add    esp,0x10
c000ee00:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ee07:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee0f:	74 1b                	je     c000ee2c <ACPI::open(int, int, void*)+0x388>
c000ee11:	83 ec 0c             	sub    esp,0xc
c000ee14:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee1b:	e8 5c bf ff ff       	call   c000ad7c <File::exists()>
c000ee20:	83 c4 10             	add    esp,0x10
c000ee23:	84 c0                	test   al,al
c000ee25:	74 05                	je     c000ee2c <ACPI::open(int, int, void*)+0x388>
c000ee27:	b0 01                	mov    al,0x1
c000ee29:	eb 05                	jmp    c000ee30 <ACPI::open(int, int, void*)+0x38c>
c000ee2b:	90                   	nop
c000ee2c:	b0 00                	mov    al,0x0
c000ee2e:	66 90                	xchg   ax,ax
c000ee30:	84 c0                	test   al,al
c000ee32:	74 28                	je     c000ee5c <ACPI::open(int, int, void*)+0x3b8>
c000ee34:	83 ec 08             	sub    esp,0x8
c000ee37:	6a 01                	push   0x1
c000ee39:	68 49 e4 01 c0       	push   0xc001e449
c000ee3e:	e8 28 3f 00 00       	call   c0012d6b <Thr::loadDLL(char const*, bool)>
c000ee43:	83 c4 10             	add    esp,0x10
c000ee46:	83 ec 08             	sub    esp,0x8
c000ee49:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ee50:	50                   	push   eax
c000ee51:	e8 46 41 00 00       	call   c0012f9c <Thr::executeDLL(unsigned long, void*)>
c000ee56:	83 c4 10             	add    esp,0x10
c000ee59:	8d 76 00             	lea    esi,[esi+0x0]
c000ee5c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee64:	74 2a                	je     c000ee90 <ACPI::open(int, int, void*)+0x3ec>
c000ee66:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee6e:	74 20                	je     c000ee90 <ACPI::open(int, int, void*)+0x3ec>
c000ee70:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee77:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee79:	83 c0 08             	add    eax,0x8
c000ee7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee7e:	83 ec 0c             	sub    esp,0xc
c000ee81:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee88:	ff d0                	call   eax
c000ee8a:	83 c4 10             	add    esp,0x10
c000ee8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee90:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000ee95:	83 ec 08             	sub    esp,0x8
c000ee98:	68 66 e4 01 c0       	push   0xc001e466
c000ee9d:	50                   	push   eax
c000ee9e:	e8 31 f2 ff ff       	call   c000e0d4 <findDataTable(unsigned char*, char*)>
c000eea3:	83 c4 10             	add    esp,0x10
c000eea6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000eead:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000eeb5:	74 19                	je     c000eed0 <ACPI::open(int, int, void*)+0x42c>
c000eeb7:	83 ec 08             	sub    esp,0x8
c000eeba:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eec1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eec8:	e8 67 fb ff ff       	call   c000ea34 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000eecd:	83 c4 10             	add    esp,0x10
c000eed0:	b8 00 00 00 00       	mov    eax,0x0
c000eed5:	81 c4 70 01 00 00    	add    esp,0x170
c000eedb:	5b                   	pop    ebx
c000eedc:	5e                   	pop    esi
c000eedd:	5f                   	pop    edi
c000eede:	c3                   	ret    
c000eedf:	90                   	nop

c000eee0 <CPU::close(int, int, void*)>:
c000eee0:	31 c0                	xor    eax,eax
c000eee2:	c3                   	ret    
c000eee3:	90                   	nop

c000eee4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000eee4:	60                   	pusha  
c000eee5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eef1:	9c                   	pushf  
c000eef2:	fa                   	cli    
c000eef3:	0f 09                	wbinvd 
c000eef5:	0f 30                	wrmsr  
c000eef7:	9d                   	popf   
c000eef8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eefc:	89 02                	mov    DWORD PTR [edx],eax
c000eefe:	61                   	popa   
c000eeff:	c3                   	ret    

c000ef00 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ef00:	60                   	pusha  
c000ef01:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef05:	9c                   	pushf  
c000ef06:	fa                   	cli    
c000ef07:	0f 09                	wbinvd 
c000ef09:	31 c0                	xor    eax,eax
c000ef0b:	31 d2                	xor    edx,edx
c000ef0d:	0f 32                	rdmsr  
c000ef0f:	9d                   	popf   
c000ef10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef14:	89 02                	mov    DWORD PTR [edx],eax
c000ef16:	61                   	popa   
c000ef17:	c3                   	ret    

c000ef18 <CPU::AMD_K6_writeback(int, int, int)>:
c000ef18:	56                   	push   esi
c000ef19:	53                   	push   ebx
c000ef1a:	83 ec 10             	sub    esp,0x10
c000ef1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef21:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef26:	75 5d                	jne    c000ef85 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef28:	83 f8 08             	cmp    eax,0x8
c000ef2b:	75 09                	jne    c000ef36 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef2d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ef32:	7e 13                	jle    c000ef47 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef34:	eb 30                	jmp    c000ef66 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef36:	83 f8 06             	cmp    eax,0x6
c000ef39:	7c 4a                	jl     c000ef85 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef3b:	83 f8 07             	cmp    eax,0x7
c000ef3e:	7e 07                	jle    c000ef47 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef40:	83 f8 09             	cmp    eax,0x9
c000ef43:	74 21                	je     c000ef66 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef45:	eb 3e                	jmp    c000ef85 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef47:	89 e6                	mov    esi,esp
c000ef49:	8b 1d dc 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021edc
c000ef4f:	56                   	push   esi
c000ef50:	c1 eb 15             	shr    ebx,0x15
c000ef53:	68 82 00 00 c0       	push   0xc0000082
c000ef58:	83 e3 7e             	and    ebx,0x7e
c000ef5b:	e8 a0 ff ff ff       	call   c000ef00 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef60:	56                   	push   esi
c000ef61:	6a 00                	push   0x0
c000ef63:	53                   	push   ebx
c000ef64:	eb 12                	jmp    c000ef78 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef66:	89 e3                	mov    ebx,esp
c000ef68:	53                   	push   ebx
c000ef69:	68 82 00 00 c0       	push   0xc0000082
c000ef6e:	e8 8d ff ff ff       	call   c000ef00 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef73:	53                   	push   ebx
c000ef74:	6a 00                	push   0x0
c000ef76:	6a 00                	push   0x0
c000ef78:	68 82 00 00 c0       	push   0xc0000082
c000ef7d:	e8 62 ff ff ff       	call   c000eee4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ef82:	83 c4 18             	add    esp,0x18
c000ef85:	83 c4 10             	add    esp,0x10
c000ef88:	5b                   	pop    ebx
c000ef89:	5e                   	pop    esi
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ef8c:	55                   	push   ebp
c000ef8d:	57                   	push   edi
c000ef8e:	56                   	push   esi
c000ef8f:	53                   	push   ebx
c000ef90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef94:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef98:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef9c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000efa0:	39 05 f0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7f0,eax
c000efa6:	75 23                	jne    c000efcb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000efa8:	a1 2c 49 02 c0       	mov    eax,ds:0xc002492c
c000efad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000efb1:	89 06                	mov    DWORD PTR [esi],eax
c000efb3:	a1 28 49 02 c0       	mov    eax,ds:0xc0024928
c000efb8:	89 07                	mov    DWORD PTR [edi],eax
c000efba:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c000efbf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000efc2:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c000efc7:	89 02                	mov    DWORD PTR [edx],eax
c000efc9:	eb 3f                	jmp    c000f00a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000efcb:	31 c9                	xor    ecx,ecx
c000efcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efd1:	0f a2                	cpuid  
c000efd3:	89 06                	mov    DWORD PTR [esi],eax
c000efd5:	89 1f                	mov    DWORD PTR [edi],ebx
c000efd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efdb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000efde:	89 10                	mov    DWORD PTR [eax],edx
c000efe0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efe4:	a3 f0 f7 01 c0       	mov    ds:0xc001f7f0,eax
c000efe9:	8b 06                	mov    eax,DWORD PTR [esi]
c000efeb:	a3 2c 49 02 c0       	mov    ds:0xc002492c,eax
c000eff0:	8b 07                	mov    eax,DWORD PTR [edi]
c000eff2:	a3 28 49 02 c0       	mov    ds:0xc0024928,eax
c000eff7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000effa:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c000efff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f003:	8b 00                	mov    eax,DWORD PTR [eax]
c000f005:	a3 20 49 02 c0       	mov    ds:0xc0024920,eax
c000f00a:	5b                   	pop    ebx
c000f00b:	5e                   	pop    esi
c000f00c:	5f                   	pop    edi
c000f00d:	5d                   	pop    ebp
c000f00e:	c3                   	ret    
c000f00f:	90                   	nop

c000f010 <CPU::cpuidCheckEDX(unsigned int)>:
c000f010:	83 ec 10             	sub    esp,0x10
c000f013:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f017:	50                   	push   eax
c000f018:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f01c:	50                   	push   eax
c000f01d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f021:	50                   	push   eax
c000f022:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f026:	50                   	push   eax
c000f027:	6a 01                	push   0x1
c000f029:	e8 5e ff ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f02e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f032:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f036:	0f 95 c0             	setne  al
c000f039:	83 c4 24             	add    esp,0x24
c000f03c:	c3                   	ret    
c000f03d:	90                   	nop

c000f03e <CPU::cpuidCheckECX(unsigned int)>:
c000f03e:	83 ec 10             	sub    esp,0x10
c000f041:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f045:	50                   	push   eax
c000f046:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04a:	50                   	push   eax
c000f04b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04f:	50                   	push   eax
c000f050:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f054:	50                   	push   eax
c000f055:	6a 01                	push   0x1
c000f057:	e8 30 ff ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f05c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f060:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f064:	0f 95 c0             	setne  al
c000f067:	83 c4 24             	add    esp,0x24
c000f06a:	c3                   	ret    
c000f06b:	90                   	nop

c000f06c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f06c:	83 ec 10             	sub    esp,0x10
c000f06f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f073:	50                   	push   eax
c000f074:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f078:	50                   	push   eax
c000f079:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f07d:	50                   	push   eax
c000f07e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f082:	50                   	push   eax
c000f083:	6a 07                	push   0x7
c000f085:	e8 02 ff ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f08a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f08e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f092:	0f 95 c0             	setne  al
c000f095:	83 c4 24             	add    esp,0x24
c000f098:	c3                   	ret    
c000f099:	90                   	nop

c000f09a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f09a:	83 ec 10             	sub    esp,0x10
c000f09d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a1:	50                   	push   eax
c000f0a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a6:	50                   	push   eax
c000f0a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0ab:	50                   	push   eax
c000f0ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0b0:	50                   	push   eax
c000f0b1:	6a 07                	push   0x7
c000f0b3:	e8 d4 fe ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0bc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f0c0:	0f 95 c0             	setne  al
c000f0c3:	83 c4 24             	add    esp,0x24
c000f0c6:	c3                   	ret    
c000f0c7:	90                   	nop

c000f0c8 <CPU::CPU()>:
c000f0c8:	83 ec 0c             	sub    esp,0xc
c000f0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0cf:	83 ec 08             	sub    esp,0x8
c000f0d2:	68 89 e5 01 c0       	push   0xc001e589
c000f0d7:	50                   	push   eax
c000f0d8:	e8 d3 c9 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000f0dd:	83 c4 10             	add    esp,0x10
c000f0e0:	ba 10 e6 01 c0       	mov    edx,0xc001e610
c000f0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0e9:	89 10                	mov    DWORD PTR [eax],edx
c000f0eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ef:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f0f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0fd:	05 78 01 00 00       	add    eax,0x178
c000f102:	83 ec 0c             	sub    esp,0xc
c000f105:	50                   	push   eax
c000f106:	e8 6f 7f ff ff       	call   c000707a <GDT::GDT()>
c000f10b:	83 c4 10             	add    esp,0x10
c000f10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f112:	05 7c 09 00 00       	add    eax,0x97c
c000f117:	83 ec 0c             	sub    esp,0xc
c000f11a:	50                   	push   eax
c000f11b:	e8 94 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f120:	83 c4 10             	add    esp,0x10
c000f123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f127:	05 7c 11 00 00       	add    eax,0x117c
c000f12c:	83 ec 0c             	sub    esp,0xc
c000f12f:	50                   	push   eax
c000f130:	e8 93 9a ff ff       	call   c0008bc8 <TSS::TSS()>
c000f135:	83 c4 10             	add    esp,0x10
c000f138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f13c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f147:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f151:	90                   	nop
c000f152:	83 c4 0c             	add    esp,0xc
c000f155:	c3                   	ret    

c000f156 <CPU::displayFeatures()>:
c000f156:	c3                   	ret    
c000f157:	90                   	nop

c000f158 <CPU::detectFeatures()>:
c000f158:	55                   	push   ebp
c000f159:	57                   	push   edi
c000f15a:	56                   	push   esi
c000f15b:	53                   	push   ebx
c000f15c:	83 ec 30             	sub    esp,0x30
c000f15f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f163:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f16d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f174:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f17a:	6a 0d                	push   0xd
c000f17c:	6a 00                	push   0x0
c000f17e:	55                   	push   ebp
c000f17f:	e8 4c 13 ff ff       	call   c00004d0 <memset>
c000f184:	83 c4 10             	add    esp,0x10
c000f187:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f18c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f193:	0f 84 d5 05 00 00    	je     c000f76e <CPU::detectFeatures()+0x616>
c000f199:	83 ec 0c             	sub    esp,0xc
c000f19c:	89 ef                	mov    edi,ebp
c000f19e:	6a 10                	push   0x10
c000f1a0:	e8 6b fe ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f1a5:	83 e0 01             	and    eax,0x1
c000f1a8:	8d 14 00             	lea    edx,[eax+eax*1]
c000f1ab:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1b1:	83 e0 fd             	and    eax,0xfffffffd
c000f1b4:	09 d0                	or     eax,edx
c000f1b6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1bc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f1c3:	e8 48 fe ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f1c8:	83 e0 01             	and    eax,0x1
c000f1cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1d2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1d8:	83 e0 fb             	and    eax,0xfffffffb
c000f1db:	09 d0                	or     eax,edx
c000f1dd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1e3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1ea:	e8 21 fe ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f1ef:	83 e0 01             	and    eax,0x1
c000f1f2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f1f9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1ff:	83 e0 f7             	and    eax,0xfffffff7
c000f202:	09 d0                	or     eax,edx
c000f204:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f20a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f211:	e8 fa fd ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f216:	83 e0 01             	and    eax,0x1
c000f219:	c1 e0 04             	shl    eax,0x4
c000f21c:	88 c2                	mov    dl,al
c000f21e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f224:	83 e0 ef             	and    eax,0xffffffef
c000f227:	09 d0                	or     eax,edx
c000f229:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f22f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f236:	e8 d5 fd ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f23b:	83 e0 01             	and    eax,0x1
c000f23e:	c1 e0 05             	shl    eax,0x5
c000f241:	88 c2                	mov    dl,al
c000f243:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f249:	83 e0 df             	and    eax,0xffffffdf
c000f24c:	09 d0                	or     eax,edx
c000f24e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f254:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f25b:	e8 b0 fd ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f260:	83 e0 01             	and    eax,0x1
c000f263:	8d 14 00             	lea    edx,[eax+eax*1]
c000f266:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f26c:	83 e0 fd             	and    eax,0xfffffffd
c000f26f:	09 d0                	or     eax,edx
c000f271:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f277:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f27e:	e8 8d fd ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f283:	83 e0 01             	and    eax,0x1
c000f286:	c1 e0 06             	shl    eax,0x6
c000f289:	88 c2                	mov    dl,al
c000f28b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f291:	83 e0 bf             	and    eax,0xffffffbf
c000f294:	09 d0                	or     eax,edx
c000f296:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f29c:	58                   	pop    eax
c000f29d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2a1:	50                   	push   eax
c000f2a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2a6:	50                   	push   eax
c000f2a7:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f2ab:	56                   	push   esi
c000f2ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2b0:	50                   	push   eax
c000f2b1:	6a 00                	push   0x0
c000f2b3:	e8 d4 fc ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2b8:	b8 04 00 00 00       	mov    eax,0x4
c000f2bd:	89 c1                	mov    ecx,eax
c000f2bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2c1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f2c7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f2cb:	89 c1                	mov    ecx,eax
c000f2cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2cf:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f2d5:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f2d9:	89 c1                	mov    ecx,eax
c000f2db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2dd:	83 c4 18             	add    esp,0x18
c000f2e0:	68 98 e4 01 c0       	push   0xc001e498
c000f2e5:	55                   	push   ebp
c000f2e6:	e8 f5 13 ff ff       	call   c00006e0 <strcmp>
c000f2eb:	83 c4 10             	add    esp,0x10
c000f2ee:	85 c0                	test   eax,eax
c000f2f0:	75 0f                	jne    c000f301 <CPU::detectFeatures()+0x1a9>
c000f2f2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f2fc:	e9 22 02 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f301:	50                   	push   eax
c000f302:	50                   	push   eax
c000f303:	68 a5 e4 01 c0       	push   0xc001e4a5
c000f308:	55                   	push   ebp
c000f309:	e8 d2 13 ff ff       	call   c00006e0 <strcmp>
c000f30e:	83 c4 10             	add    esp,0x10
c000f311:	85 c0                	test   eax,eax
c000f313:	74 dd                	je     c000f2f2 <CPU::detectFeatures()+0x19a>
c000f315:	50                   	push   eax
c000f316:	50                   	push   eax
c000f317:	68 b2 e4 01 c0       	push   0xc001e4b2
c000f31c:	55                   	push   ebp
c000f31d:	e8 be 13 ff ff       	call   c00006e0 <strcmp>
c000f322:	83 c4 10             	add    esp,0x10
c000f325:	85 c0                	test   eax,eax
c000f327:	74 2a                	je     c000f353 <CPU::detectFeatures()+0x1fb>
c000f329:	50                   	push   eax
c000f32a:	50                   	push   eax
c000f32b:	68 bf e4 01 c0       	push   0xc001e4bf
c000f330:	55                   	push   ebp
c000f331:	e8 aa 13 ff ff       	call   c00006e0 <strcmp>
c000f336:	83 c4 10             	add    esp,0x10
c000f339:	85 c0                	test   eax,eax
c000f33b:	74 16                	je     c000f353 <CPU::detectFeatures()+0x1fb>
c000f33d:	50                   	push   eax
c000f33e:	50                   	push   eax
c000f33f:	68 cc e4 01 c0       	push   0xc001e4cc
c000f344:	55                   	push   ebp
c000f345:	e8 96 13 ff ff       	call   c00006e0 <strcmp>
c000f34a:	83 c4 10             	add    esp,0x10
c000f34d:	85 c0                	test   eax,eax
c000f34f:	74 48                	je     c000f399 <CPU::detectFeatures()+0x241>
c000f351:	eb 0f                	jmp    c000f362 <CPU::detectFeatures()+0x20a>
c000f353:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f35d:	e9 c1 01 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f362:	50                   	push   eax
c000f363:	50                   	push   eax
c000f364:	68 d9 e4 01 c0       	push   0xc001e4d9
c000f369:	55                   	push   ebp
c000f36a:	e8 71 13 ff ff       	call   c00006e0 <strcmp>
c000f36f:	83 c4 10             	add    esp,0x10
c000f372:	85 c0                	test   eax,eax
c000f374:	74 23                	je     c000f399 <CPU::detectFeatures()+0x241>
c000f376:	57                   	push   edi
c000f377:	57                   	push   edi
c000f378:	68 e6 e4 01 c0       	push   0xc001e4e6
c000f37d:	55                   	push   ebp
c000f37e:	e8 5d 13 ff ff       	call   c00006e0 <strcmp>
c000f383:	83 c4 10             	add    esp,0x10
c000f386:	85 c0                	test   eax,eax
c000f388:	75 1e                	jne    c000f3a8 <CPU::detectFeatures()+0x250>
c000f38a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f394:	e9 8a 01 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f399:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f3a3:	e9 7b 01 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f3a8:	56                   	push   esi
c000f3a9:	56                   	push   esi
c000f3aa:	68 f3 e4 01 c0       	push   0xc001e4f3
c000f3af:	55                   	push   ebp
c000f3b0:	e8 2b 13 ff ff       	call   c00006e0 <strcmp>
c000f3b5:	83 c4 10             	add    esp,0x10
c000f3b8:	85 c0                	test   eax,eax
c000f3ba:	75 0f                	jne    c000f3cb <CPU::detectFeatures()+0x273>
c000f3bc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f3c6:	e9 58 01 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f3cb:	51                   	push   ecx
c000f3cc:	51                   	push   ecx
c000f3cd:	68 b2 e4 01 c0       	push   0xc001e4b2
c000f3d2:	55                   	push   ebp
c000f3d3:	e8 08 13 ff ff       	call   c00006e0 <strcmp>
c000f3d8:	83 c4 10             	add    esp,0x10
c000f3db:	85 c0                	test   eax,eax
c000f3dd:	75 0f                	jne    c000f3ee <CPU::detectFeatures()+0x296>
c000f3df:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f3e9:	e9 35 01 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f3ee:	52                   	push   edx
c000f3ef:	52                   	push   edx
c000f3f0:	68 00 e5 01 c0       	push   0xc001e500
c000f3f5:	55                   	push   ebp
c000f3f6:	e8 e5 12 ff ff       	call   c00006e0 <strcmp>
c000f3fb:	83 c4 10             	add    esp,0x10
c000f3fe:	85 c0                	test   eax,eax
c000f400:	75 0f                	jne    c000f411 <CPU::detectFeatures()+0x2b9>
c000f402:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f40c:	e9 12 01 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f411:	50                   	push   eax
c000f412:	50                   	push   eax
c000f413:	68 0d e5 01 c0       	push   0xc001e50d
c000f418:	55                   	push   ebp
c000f419:	e8 c2 12 ff ff       	call   c00006e0 <strcmp>
c000f41e:	83 c4 10             	add    esp,0x10
c000f421:	85 c0                	test   eax,eax
c000f423:	75 0f                	jne    c000f434 <CPU::detectFeatures()+0x2dc>
c000f425:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f42f:	e9 ef 00 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f434:	50                   	push   eax
c000f435:	50                   	push   eax
c000f436:	68 1a e5 01 c0       	push   0xc001e51a
c000f43b:	55                   	push   ebp
c000f43c:	e8 9f 12 ff ff       	call   c00006e0 <strcmp>
c000f441:	83 c4 10             	add    esp,0x10
c000f444:	85 c0                	test   eax,eax
c000f446:	75 0f                	jne    c000f457 <CPU::detectFeatures()+0x2ff>
c000f448:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f452:	e9 cc 00 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f457:	50                   	push   eax
c000f458:	50                   	push   eax
c000f459:	68 27 e5 01 c0       	push   0xc001e527
c000f45e:	55                   	push   ebp
c000f45f:	e8 7c 12 ff ff       	call   c00006e0 <strcmp>
c000f464:	83 c4 10             	add    esp,0x10
c000f467:	85 c0                	test   eax,eax
c000f469:	75 0f                	jne    c000f47a <CPU::detectFeatures()+0x322>
c000f46b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f475:	e9 a9 00 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f47a:	50                   	push   eax
c000f47b:	50                   	push   eax
c000f47c:	68 34 e5 01 c0       	push   0xc001e534
c000f481:	55                   	push   ebp
c000f482:	e8 59 12 ff ff       	call   c00006e0 <strcmp>
c000f487:	83 c4 10             	add    esp,0x10
c000f48a:	85 c0                	test   eax,eax
c000f48c:	75 0f                	jne    c000f49d <CPU::detectFeatures()+0x345>
c000f48e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f498:	e9 86 00 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f49d:	50                   	push   eax
c000f49e:	50                   	push   eax
c000f49f:	68 41 e5 01 c0       	push   0xc001e541
c000f4a4:	55                   	push   ebp
c000f4a5:	e8 36 12 ff ff       	call   c00006e0 <strcmp>
c000f4aa:	83 c4 10             	add    esp,0x10
c000f4ad:	85 c0                	test   eax,eax
c000f4af:	75 0c                	jne    c000f4bd <CPU::detectFeatures()+0x365>
c000f4b1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f4bb:	eb 66                	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f4bd:	50                   	push   eax
c000f4be:	50                   	push   eax
c000f4bf:	68 4e e5 01 c0       	push   0xc001e54e
c000f4c4:	55                   	push   ebp
c000f4c5:	e8 16 12 ff ff       	call   c00006e0 <strcmp>
c000f4ca:	83 c4 10             	add    esp,0x10
c000f4cd:	85 c0                	test   eax,eax
c000f4cf:	75 0c                	jne    c000f4dd <CPU::detectFeatures()+0x385>
c000f4d1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f4db:	eb 46                	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f4dd:	57                   	push   edi
c000f4de:	57                   	push   edi
c000f4df:	68 5b e5 01 c0       	push   0xc001e55b
c000f4e4:	55                   	push   ebp
c000f4e5:	e8 f6 11 ff ff       	call   c00006e0 <strcmp>
c000f4ea:	83 c4 10             	add    esp,0x10
c000f4ed:	85 c0                	test   eax,eax
c000f4ef:	74 e0                	je     c000f4d1 <CPU::detectFeatures()+0x379>
c000f4f1:	56                   	push   esi
c000f4f2:	56                   	push   esi
c000f4f3:	68 68 e5 01 c0       	push   0xc001e568
c000f4f8:	55                   	push   ebp
c000f4f9:	e8 e2 11 ff ff       	call   c00006e0 <strcmp>
c000f4fe:	83 c4 10             	add    esp,0x10
c000f501:	85 c0                	test   eax,eax
c000f503:	74 cc                	je     c000f4d1 <CPU::detectFeatures()+0x379>
c000f505:	51                   	push   ecx
c000f506:	51                   	push   ecx
c000f507:	68 75 e5 01 c0       	push   0xc001e575
c000f50c:	55                   	push   ebp
c000f50d:	e8 ce 11 ff ff       	call   c00006e0 <strcmp>
c000f512:	83 c4 10             	add    esp,0x10
c000f515:	85 c0                	test   eax,eax
c000f517:	74 b8                	je     c000f4d1 <CPU::detectFeatures()+0x379>
c000f519:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f523:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f528:	0f 86 be 00 00 00    	jbe    c000f5ec <CPU::detectFeatures()+0x494>
c000f52e:	83 ec 0c             	sub    esp,0xc
c000f531:	68 80 00 00 00       	push   0x80
c000f536:	e8 31 fb ff ff       	call   c000f06c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f53b:	83 e0 01             	and    eax,0x1
c000f53e:	c1 e0 06             	shl    eax,0x6
c000f541:	88 c2                	mov    dl,al
c000f543:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f549:	83 e0 bf             	and    eax,0xffffffbf
c000f54c:	09 d0                	or     eax,edx
c000f54e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f554:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f55b:	e8 0c fb ff ff       	call   c000f06c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f560:	83 e0 01             	and    eax,0x1
c000f563:	c1 e0 04             	shl    eax,0x4
c000f566:	88 c2                	mov    dl,al
c000f568:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f56e:	83 e0 ef             	and    eax,0xffffffef
c000f571:	09 d0                	or     eax,edx
c000f573:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f579:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f580:	e8 e7 fa ff ff       	call   c000f06c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f585:	c1 e0 07             	shl    eax,0x7
c000f588:	88 c2                	mov    dl,al
c000f58a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f590:	83 e0 7f             	and    eax,0x7f
c000f593:	09 d0                	or     eax,edx
c000f595:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f59b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f5a2:	e8 f3 fa ff ff       	call   c000f09a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5a7:	83 e0 01             	and    eax,0x1
c000f5aa:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f5b1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f5b7:	83 e0 f7             	and    eax,0xfffffff7
c000f5ba:	09 d0                	or     eax,edx
c000f5bc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5c2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f5c9:	e8 cc fa ff ff       	call   c000f09a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5ce:	83 c4 10             	add    esp,0x10
c000f5d1:	83 e0 01             	and    eax,0x1
c000f5d4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f5db:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f5e1:	83 e0 fb             	and    eax,0xfffffffb
c000f5e4:	09 d0                	or     eax,edx
c000f5e6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f5ec:	83 ec 0c             	sub    esp,0xc
c000f5ef:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5f3:	50                   	push   eax
c000f5f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5f8:	50                   	push   eax
c000f5f9:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f5fd:	56                   	push   esi
c000f5fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f602:	50                   	push   eax
c000f603:	6a 01                	push   0x1
c000f605:	e8 82 f9 ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f60a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f60e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f614:	88 ca                	mov    dl,cl
c000f616:	83 e0 f0             	and    eax,0xfffffff0
c000f619:	83 e2 0f             	and    edx,0xf
c000f61c:	09 d0                	or     eax,edx
c000f61e:	88 ca                	mov    dl,cl
c000f620:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f626:	c0 ea 04             	shr    dl,0x4
c000f629:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f62d:	0f b6 c2             	movzx  eax,dl
c000f630:	83 c4 20             	add    esp,0x20
c000f633:	c1 e0 06             	shl    eax,0x6
c000f636:	89 c7                	mov    edi,eax
c000f638:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f63e:	66 25 3f c0          	and    ax,0xc03f
c000f642:	09 f8                	or     eax,edi
c000f644:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f64b:	89 c8                	mov    eax,ecx
c000f64d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f654:	c1 e8 08             	shr    eax,0x8
c000f657:	83 e5 3f             	and    ebp,0x3f
c000f65a:	83 e0 0f             	and    eax,0xf
c000f65d:	89 c7                	mov    edi,eax
c000f65f:	c1 e7 06             	shl    edi,0x6
c000f662:	09 ef                	or     edi,ebp
c000f664:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f66b:	89 fa                	mov    edx,edi
c000f66d:	83 e5 c0             	and    ebp,0xffffffc0
c000f670:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f676:	88 c2                	mov    dl,al
c000f678:	c0 ea 02             	shr    dl,0x2
c000f67b:	89 d7                	mov    edi,edx
c000f67d:	09 ef                	or     edi,ebp
c000f67f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f685:	89 fa                	mov    edx,edi
c000f687:	83 e5 cf             	and    ebp,0xffffffcf
c000f68a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f690:	89 cf                	mov    edi,ecx
c000f692:	c1 ef 0c             	shr    edi,0xc
c000f695:	83 e7 03             	and    edi,0x3
c000f698:	c1 e7 04             	shl    edi,0x4
c000f69b:	09 ef                	or     edi,ebp
c000f69d:	3c 06                	cmp    al,0x6
c000f69f:	89 fa                	mov    edx,edi
c000f6a1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f6a7:	74 04                	je     c000f6ad <CPU::detectFeatures()+0x555>
c000f6a9:	3c 0f                	cmp    al,0xf
c000f6ab:	75 5c                	jne    c000f709 <CPU::detectFeatures()+0x5b1>
c000f6ad:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f6b1:	89 cf                	mov    edi,ecx
c000f6b3:	c1 ef 10             	shr    edi,0x10
c000f6b6:	c1 e7 04             	shl    edi,0x4
c000f6b9:	09 fa                	or     edx,edi
c000f6bb:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f6c1:	0f b6 d2             	movzx  edx,dl
c000f6c4:	66 81 e7 3f c0       	and    di,0xc03f
c000f6c9:	c1 e2 06             	shl    edx,0x6
c000f6cc:	09 fa                	or     edx,edi
c000f6ce:	3c 0f                	cmp    al,0xf
c000f6d0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f6d7:	75 30                	jne    c000f709 <CPU::detectFeatures()+0x5b1>
c000f6d9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f6df:	c1 e9 14             	shr    ecx,0x14
c000f6e2:	83 e0 3f             	and    eax,0x3f
c000f6e5:	83 c1 0f             	add    ecx,0xf
c000f6e8:	88 ca                	mov    dl,cl
c000f6ea:	c0 e9 02             	shr    cl,0x2
c000f6ed:	c1 e2 06             	shl    edx,0x6
c000f6f0:	09 d0                	or     eax,edx
c000f6f2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f6f8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f6fe:	83 e0 c0             	and    eax,0xffffffc0
c000f701:	09 c1                	or     ecx,eax
c000f703:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f709:	83 ec 0c             	sub    esp,0xc
c000f70c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f713:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f717:	50                   	push   eax
c000f718:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f71c:	55                   	push   ebp
c000f71d:	56                   	push   esi
c000f71e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f722:	57                   	push   edi
c000f723:	68 00 00 00 80       	push   0x80000000
c000f728:	e8 5f f8 ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f72d:	83 c4 20             	add    esp,0x20
c000f730:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f738:	76 22                	jbe    c000f75c <CPU::detectFeatures()+0x604>
c000f73a:	83 ec 0c             	sub    esp,0xc
c000f73d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f741:	50                   	push   eax
c000f742:	55                   	push   ebp
c000f743:	56                   	push   esi
c000f744:	57                   	push   edi
c000f745:	68 01 00 00 80       	push   0x80000001
c000f74a:	e8 3d f8 ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f74f:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f759:	83 c4 20             	add    esp,0x20
c000f75c:	52                   	push   edx
c000f75d:	52                   	push   edx
c000f75e:	68 81 e5 01 c0       	push   0xc001e581
c000f763:	53                   	push   ebx
c000f764:	e8 39 c3 ff ff       	call   c000baa2 <Device::setName(char const*)>
c000f769:	83 c4 10             	add    esp,0x10
c000f76c:	eb 67                	jmp    c000f7d5 <CPU::detectFeatures()+0x67d>
c000f76e:	50                   	push   eax
c000f76f:	50                   	push   eax
c000f770:	68 e6 e4 01 c0       	push   0xc001e4e6
c000f775:	55                   	push   ebp
c000f776:	e8 85 0e ff ff       	call   c0000600 <strcpy>
c000f77b:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f785:	e8 39 0a ff ff       	call   c00001c3 <is486>
c000f78a:	83 c4 10             	add    esp,0x10
c000f78d:	85 c0                	test   eax,eax
c000f78f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f795:	74 1d                	je     c000f7b4 <CPU::detectFeatures()+0x65c>
c000f797:	83 c8 07             	or     eax,0x7
c000f79a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7a0:	0f 20 c0             	mov    eax,cr0
c000f7a3:	83 e0 14             	and    eax,0x14
c000f7a6:	83 f8 04             	cmp    eax,0x4
c000f7a9:	75 0e                	jne    c000f7b9 <CPU::detectFeatures()+0x661>
c000f7ab:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f7b2:	eb 21                	jmp    c000f7d5 <CPU::detectFeatures()+0x67d>
c000f7b4:	83 e0 f8             	and    eax,0xfffffff8
c000f7b7:	eb e1                	jmp    c000f79a <CPU::detectFeatures()+0x642>
c000f7b9:	e8 e0 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7be:	83 e0 01             	and    eax,0x1
c000f7c1:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7c4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7ca:	83 e0 fd             	and    eax,0xfffffffd
c000f7cd:	09 d0                	or     eax,edx
c000f7cf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7d5:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f7dc:	74 0e                	je     c000f7ec <CPU::detectFeatures()+0x694>
c000f7de:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f7e3:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f7ea:	eb 20                	jmp    c000f80c <CPU::detectFeatures()+0x6b4>
c000f7ec:	e8 ad 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7f1:	83 e0 01             	and    eax,0x1
c000f7f4:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7f7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7fd:	83 e0 fd             	and    eax,0xfffffffd
c000f800:	09 d0                	or     eax,edx
c000f802:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f808:	a8 02                	test   al,0x2
c000f80a:	75 d2                	jne    c000f7de <CPU::detectFeatures()+0x686>
c000f80c:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f813:	83 c4 2c             	add    esp,0x2c
c000f816:	5b                   	pop    ebx
c000f817:	5e                   	pop    esi
c000f818:	5f                   	pop    edi
c000f819:	5d                   	pop    ebp
c000f81a:	c3                   	ret    
c000f81b:	90                   	nop

c000f81c <CPU::setupSMEP()>:
c000f81c:	0f 20 e0             	mov    eax,cr4
c000f81f:	0d 00 00 10 00       	or     eax,0x100000
c000f824:	0f 22 e0             	mov    cr4,eax
c000f827:	c3                   	ret    

c000f828 <CPU::setupUMIP()>:
c000f828:	0f 20 e0             	mov    eax,cr4
c000f82b:	80 cc 08             	or     ah,0x8
c000f82e:	0f 22 e0             	mov    cr4,eax
c000f831:	c3                   	ret    

c000f832 <CPU::setupTSC()>:
c000f832:	0f 20 e0             	mov    eax,cr4
c000f835:	83 c8 04             	or     eax,0x4
c000f838:	0f 22 e0             	mov    cr4,eax
c000f83b:	c3                   	ret    

c000f83c <CPU::setupLargePages()>:
c000f83c:	0f 20 e0             	mov    eax,cr4
c000f83f:	83 c8 10             	or     eax,0x10
c000f842:	0f 22 e0             	mov    cr4,eax
c000f845:	c3                   	ret    

c000f846 <CPU::setupPAT()>:
c000f846:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f84b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f852:	74 2c                	je     c000f880 <CPU::setupPAT()+0x3a>
c000f854:	53                   	push   ebx
c000f855:	83 ec 10             	sub    esp,0x10
c000f858:	68 77 02 00 00       	push   0x277
c000f85d:	50                   	push   eax
c000f85e:	e8 8f 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f863:	83 e2 f8             	and    edx,0xfffffff8
c000f866:	83 ca 01             	or     edx,0x1
c000f869:	52                   	push   edx
c000f86a:	50                   	push   eax
c000f86b:	68 77 02 00 00       	push   0x277
c000f870:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000f876:	e8 a3 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f87b:	83 c4 28             	add    esp,0x28
c000f87e:	5b                   	pop    ebx
c000f87f:	c3                   	ret    
c000f880:	c3                   	ret    
c000f881:	90                   	nop

c000f882 <CPU::setupMTRR()>:
c000f882:	c3                   	ret    
c000f883:	90                   	nop

c000f884 <CPU::setupGlobalPages()>:
c000f884:	0f 20 e0             	mov    eax,cr4
c000f887:	0c 80                	or     al,0x80
c000f889:	0f 22 e0             	mov    cr4,eax
c000f88c:	c3                   	ret    
c000f88d:	90                   	nop

c000f88e <CPU::allowUsermodeDataAccess()>:
c000f88e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f892:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f899:	74 03                	je     c000f89e <CPU::allowUsermodeDataAccess()+0x10>
c000f89b:	0f 01 cb             	stac   
c000f89e:	c3                   	ret    
c000f89f:	90                   	nop

c000f8a0 <CPU::prohibitUsermodeDataAccess()>:
c000f8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8a4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8ab:	74 03                	je     c000f8b0 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f8ad:	0f 01 ca             	clac   
c000f8b0:	c3                   	ret    
c000f8b1:	90                   	nop

c000f8b2 <CPU::setupSMAP()>:
c000f8b2:	0f 20 e0             	mov    eax,cr4
c000f8b5:	0d 00 00 20 00       	or     eax,0x200000
c000f8ba:	0f 22 e0             	mov    cr4,eax
c000f8bd:	eb e1                	jmp    c000f8a0 <CPU::prohibitUsermodeDataAccess()>
c000f8bf:	90                   	nop

c000f8c0 <CPU::setupFeatures()>:
c000f8c0:	53                   	push   ebx
c000f8c1:	83 ec 08             	sub    esp,0x8
c000f8c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8c8:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f8cf:	74 18                	je     c000f8e9 <CPU::setupFeatures()+0x29>
c000f8d1:	83 ec 0c             	sub    esp,0xc
c000f8d4:	68 8d e5 01 c0       	push   0xc001e58d
c000f8d9:	e8 fa ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f8de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8e1:	e8 42 ff ff ff       	call   c000f828 <CPU::setupUMIP()>
c000f8e6:	83 c4 10             	add    esp,0x10
c000f8e9:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f8f0:	74 18                	je     c000f90a <CPU::setupFeatures()+0x4a>
c000f8f2:	83 ec 0c             	sub    esp,0xc
c000f8f5:	68 97 e5 01 c0       	push   0xc001e597
c000f8fa:	e8 d9 ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f8ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f902:	e8 2b ff ff ff       	call   c000f832 <CPU::setupTSC()>
c000f907:	83 c4 10             	add    esp,0x10
c000f90a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f911:	74 18                	je     c000f92b <CPU::setupFeatures()+0x6b>
c000f913:	83 ec 0c             	sub    esp,0xc
c000f916:	68 a0 e5 01 c0       	push   0xc001e5a0
c000f91b:	e8 b8 ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f920:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f923:	e8 14 ff ff ff       	call   c000f83c <CPU::setupLargePages()>
c000f928:	83 c4 10             	add    esp,0x10
c000f92b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f932:	74 18                	je     c000f94c <CPU::setupFeatures()+0x8c>
c000f934:	83 ec 0c             	sub    esp,0xc
c000f937:	68 a9 e5 01 c0       	push   0xc001e5a9
c000f93c:	e8 97 ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f941:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f944:	e8 3b ff ff ff       	call   c000f884 <CPU::setupGlobalPages()>
c000f949:	83 c4 10             	add    esp,0x10
c000f94c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f953:	74 18                	je     c000f96d <CPU::setupFeatures()+0xad>
c000f955:	83 ec 0c             	sub    esp,0xc
c000f958:	68 bb e5 01 c0       	push   0xc001e5bb
c000f95d:	e8 76 ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f962:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f965:	e8 dc fe ff ff       	call   c000f846 <CPU::setupPAT()>
c000f96a:	83 c4 10             	add    esp,0x10
c000f96d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f974:	74 11                	je     c000f987 <CPU::setupFeatures()+0xc7>
c000f976:	c7 44 24 10 c4 e5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e5c4
c000f97e:	83 c4 08             	add    esp,0x8
c000f981:	5b                   	pop    ebx
c000f982:	e9 51 ab ff ff       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f987:	83 c4 08             	add    esp,0x8
c000f98a:	5b                   	pop    ebx
c000f98b:	c3                   	ret    

c000f98c <CPU::open(int, int, void*)>:
c000f98c:	57                   	push   edi
c000f98d:	56                   	push   esi
c000f98e:	53                   	push   ebx
c000f98f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f993:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f997:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f99d:	83 ec 0c             	sub    esp,0xc
c000f9a0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f9a6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f9ac:	50                   	push   eax
c000f9ad:	e8 2a 77 ff ff       	call   c00070dc <GDT::setup()>
c000f9b2:	83 c4 0c             	add    esp,0xc
c000f9b5:	6a 00                	push   0x0
c000f9b7:	68 ef be ad de       	push   0xdeadbeef
c000f9bc:	57                   	push   edi
c000f9bd:	e8 4a 92 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000f9c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f9c5:	e8 22 92 ff ff       	call   c0008bec <TSS::flush()>
c000f9ca:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f9d0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9d3:	e8 52 79 ff ff       	call   c000732a <IDT::setup()>
c000f9d8:	b8 00 04 00 00       	mov    eax,0x400
c000f9dd:	0f 23 f8             	mov    db7,eax
c000f9e0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f9ea:	e8 a6 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000f9ef:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f9f5:	89 30                	mov    DWORD PTR [eax],esi
c000f9f7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000f9fd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fa00:	58                   	pop    eax
c000fa01:	5a                   	pop    edx
c000fa02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fa08:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fa0c:	e8 e5 a1 ff ff       	call   c0009bf6 <VAS::setCPUSpecific(unsigned long)>
c000fa11:	c7 04 24 ce e5 01 c0 	mov    DWORD PTR [esp],0xc001e5ce
c000fa18:	e8 c6 00 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000fa1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa20:	e8 33 f7 ff ff       	call   c000f158 <CPU::detectFeatures()>
c000fa25:	c7 04 24 f1 e5 01 c0 	mov    DWORD PTR [esp],0xc001e5f1
c000fa2c:	e8 b2 00 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000fa31:	e8 6e 5c 00 00       	call   c00156a4 <HalInitialise()>
c000fa36:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000fa3b:	83 e0 10             	and    eax,0x10
c000fa3e:	83 f8 01             	cmp    eax,0x1
c000fa41:	19 c0                	sbb    eax,eax
c000fa43:	83 e0 46             	and    eax,0x46
c000fa46:	83 c0 1e             	add    eax,0x1e
c000fa49:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa4c:	e8 60 d7 ff ff       	call   c000d1b1 <setupTimer(int)>
c000fa51:	83 c4 10             	add    esp,0x10
c000fa54:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa5a:	f6 05 d0 1e 02 c0 20 	test   BYTE PTR ds:0xc0021ed0,0x20
c000fa61:	74 0c                	je     c000fa6f <CPU::open(int, int, void*)+0xe3>
c000fa63:	83 ec 0c             	sub    esp,0xc
c000fa66:	53                   	push   ebx
c000fa67:	e8 54 fe ff ff       	call   c000f8c0 <CPU::setupFeatures()>
c000fa6c:	83 c4 10             	add    esp,0x10
c000fa6f:	5b                   	pop    ebx
c000fa70:	31 c0                	xor    eax,eax
c000fa72:	5e                   	pop    esi
c000fa73:	5f                   	pop    edi
c000fa74:	c3                   	ret    

c000fa75 <KeDisplaySplashScreen()>:
c000fa75:	55                   	push   ebp
c000fa76:	bd 05 00 00 00       	mov    ebp,0x5
c000fa7b:	57                   	push   edi
c000fa7c:	bf 00 f8 01 c0       	mov    edi,0xc001f800
c000fa81:	56                   	push   esi
c000fa82:	be 0a 00 00 00       	mov    esi,0xa
c000fa87:	53                   	push   ebx
c000fa88:	31 db                	xor    ebx,ebx
c000fa8a:	83 ec 0c             	sub    esp,0xc
c000fa8d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fa90:	84 c0                	test   al,al
c000fa92:	74 47                	je     c000fadb <KeDisplaySplashScreen()+0x66>
c000fa94:	80 bb 36 f8 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe07ca],0xdb
c000fa9b:	75 13                	jne    c000fab0 <KeDisplaySplashScreen()+0x3b>
c000fa9d:	0f b6 93 35 f8 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe07cb]
c000faa4:	83 e2 fe             	and    edx,0xfffffffe
c000faa7:	81 fa ba 00 00 00    	cmp    edx,0xba
c000faad:	75 01                	jne    c000fab0 <KeDisplaySplashScreen()+0x3b>
c000faaf:	46                   	inc    esi
c000fab0:	3c 0d                	cmp    al,0xd
c000fab2:	74 24                	je     c000fad8 <KeDisplaySplashScreen()+0x63>
c000fab4:	3c 0a                	cmp    al,0xa
c000fab6:	75 0a                	jne    c000fac2 <KeDisplaySplashScreen()+0x4d>
c000fab8:	45                   	inc    ebp
c000fab9:	be 0a 00 00 00       	mov    esi,0xa
c000fabe:	31 db                	xor    ebx,ebx
c000fac0:	eb 16                	jmp    c000fad8 <KeDisplaySplashScreen()+0x63>
c000fac2:	83 ec 0c             	sub    esp,0xc
c000fac5:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fac8:	55                   	push   ebp
c000fac9:	43                   	inc    ebx
c000faca:	52                   	push   edx
c000facb:	6a 00                	push   0x0
c000facd:	6a 0e                	push   0xe
c000facf:	50                   	push   eax
c000fad0:	e8 33 68 00 00       	call   c0016308 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fad5:	83 c4 20             	add    esp,0x20
c000fad8:	47                   	inc    edi
c000fad9:	eb b2                	jmp    c000fa8d <KeDisplaySplashScreen()+0x18>
c000fadb:	83 c4 0c             	add    esp,0xc
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	5d                   	pop    ebp
c000fae2:	c3                   	ret    

c000fae3 <KeSetBootMessage(char const*)>:
c000fae3:	57                   	push   edi
c000fae4:	56                   	push   esi
c000fae5:	53                   	push   ebx
c000fae6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000faec:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000faf3:	68 9e 00 00 00       	push   0x9e
c000faf8:	6a 00                	push   0x0
c000fafa:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fafe:	56                   	push   esi
c000faff:	e8 cc 09 ff ff       	call   c00004d0 <memset>
c000fb04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb07:	e8 34 0a ff ff       	call   c0000540 <strlen>
c000fb0c:	ba 50 00 00 00       	mov    edx,0x50
c000fb11:	83 c4 10             	add    esp,0x10
c000fb14:	29 c2                	sub    edx,eax
c000fb16:	31 c9                	xor    ecx,ecx
c000fb18:	83 e2 fe             	and    edx,0xfffffffe
c000fb1b:	01 f2                	add    edx,esi
c000fb1d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fb22:	84 c0                	test   al,al
c000fb24:	74 0a                	je     c000fb30 <KeSetBootMessage(char const*)+0x4d>
c000fb26:	80 cc 0f             	or     ah,0xf
c000fb29:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb2d:	41                   	inc    ecx
c000fb2e:	eb ed                	jmp    c000fb1d <KeSetBootMessage(char const*)+0x3a>
c000fb30:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fb35:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb3c:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb42:	5b                   	pop    ebx
c000fb43:	5e                   	pop    esi
c000fb44:	5f                   	pop    edi
c000fb45:	c3                   	ret    

c000fb46 <EnvVarContainer::getEnv(char const*)>:
c000fb46:	57                   	push   edi
c000fb47:	56                   	push   esi
c000fb48:	53                   	push   ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb4f:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fb51:	7e 2b                	jle    c000fb7e <EnvVarContainer::getEnv(char const*)+0x38>
c000fb53:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb5a:	50                   	push   eax
c000fb5b:	50                   	push   eax
c000fb5c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb5f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb66:	e8 75 0b ff ff       	call   c00006e0 <strcmp>
c000fb6b:	83 c4 10             	add    esp,0x10
c000fb6e:	85 c0                	test   eax,eax
c000fb70:	75 09                	jne    c000fb7b <EnvVarContainer::getEnv(char const*)+0x35>
c000fb72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb75:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fb79:	eb 05                	jmp    c000fb80 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fb7b:	43                   	inc    ebx
c000fb7c:	eb d1                	jmp    c000fb4f <EnvVarContainer::getEnv(char const*)+0x9>
c000fb7e:	31 c0                	xor    eax,eax
c000fb80:	5b                   	pop    ebx
c000fb81:	5e                   	pop    esi
c000fb82:	5f                   	pop    edi
c000fb83:	c3                   	ret    

c000fb84 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fb84:	55                   	push   ebp
c000fb85:	57                   	push   edi
c000fb86:	56                   	push   esi
c000fb87:	53                   	push   ebx
c000fb88:	83 ec 28             	sub    esp,0x28
c000fb8b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fb8f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fb97:	56                   	push   esi
c000fb98:	e8 a3 09 ff ff       	call   c0000540 <strlen>
c000fb9d:	40                   	inc    eax
c000fb9e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fba1:	e8 13 7c ff ff       	call   c00077b9 <malloc>
c000fba6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fba9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbad:	e8 8e 09 ff ff       	call   c0000540 <strlen>
c000fbb2:	40                   	inc    eax
c000fbb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbb6:	e8 fe 7b ff ff       	call   c00077b9 <malloc>
c000fbbb:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbbe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fbc2:	e8 79 09 ff ff       	call   c0000540 <strlen>
c000fbc7:	83 c4 0c             	add    esp,0xc
c000fbca:	40                   	inc    eax
c000fbcb:	50                   	push   eax
c000fbcc:	6a 00                	push   0x0
c000fbce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbd2:	e8 f9 08 ff ff       	call   c00004d0 <memset>
c000fbd7:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbda:	e8 61 09 ff ff       	call   c0000540 <strlen>
c000fbdf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fbe3:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbe6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbeb:	89 de                	mov    esi,ebx
c000fbed:	e8 4e 09 ff ff       	call   c0000540 <strlen>
c000fbf2:	83 c4 0c             	add    esp,0xc
c000fbf5:	40                   	inc    eax
c000fbf6:	50                   	push   eax
c000fbf7:	6a 00                	push   0x0
c000fbf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbfd:	e8 ce 08 ff ff       	call   c00004d0 <memset>
c000fc02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc05:	e8 36 09 ff ff       	call   c0000540 <strlen>
c000fc0a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fc0e:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fc16:	40                   	inc    eax
c000fc17:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fc1a:	c1 e0 03             	shl    eax,0x3
c000fc1d:	5a                   	pop    edx
c000fc1e:	59                   	pop    ecx
c000fc1f:	50                   	push   eax
c000fc20:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fc23:	e8 7d 7b ff ff       	call   c00077a5 <realloc>
c000fc28:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc2c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc2f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fc32:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fc36:	b9 08 00 00 00       	mov    ecx,0x8
c000fc3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc3d:	83 c4 2c             	add    esp,0x2c
c000fc40:	5b                   	pop    ebx
c000fc41:	5e                   	pop    esi
c000fc42:	5f                   	pop    edi
c000fc43:	5d                   	pop    ebp
c000fc44:	c3                   	ret    
c000fc45:	90                   	nop

c000fc46 <EnvVarContainer::deleteEnv(char const*)>:
c000fc46:	c3                   	ret    
c000fc47:	90                   	nop

c000fc48 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fc48:	55                   	push   ebp
c000fc49:	57                   	push   edi
c000fc4a:	56                   	push   esi
c000fc4b:	53                   	push   ebx
c000fc4c:	81 ec 38 01 00 00    	sub    esp,0x138
c000fc52:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc59:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc60:	68 14 01 00 00       	push   0x114
c000fc65:	e8 4f 7b ff ff       	call   c00077b9 <malloc>
c000fc6a:	83 c4 0c             	add    esp,0xc
c000fc6d:	89 c3                	mov    ebx,eax
c000fc6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc72:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc79:	50                   	push   eax
c000fc7a:	e8 cf ad ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000fc7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc82:	e8 f5 b0 ff ff       	call   c000ad7c <File::exists()>
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	84 c0                	test   al,al
c000fc8c:	75 31                	jne    c000fcbf <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fc8e:	50                   	push   eax
c000fc8f:	50                   	push   eax
c000fc90:	6a 12                	push   0x12
c000fc92:	53                   	push   ebx
c000fc93:	e8 76 ae ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000fc98:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc9a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fc9d:	89 34 24             	mov    DWORD PTR [esp],esi
c000fca0:	e8 9b 08 ff ff       	call   c0000540 <strlen>
c000fca5:	5a                   	pop    edx
c000fca6:	31 d2                	xor    edx,edx
c000fca8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fcac:	51                   	push   ecx
c000fcad:	56                   	push   esi
c000fcae:	52                   	push   edx
c000fcaf:	50                   	push   eax
c000fcb0:	53                   	push   ebx
c000fcb1:	ff d7                	call   edi
c000fcb3:	83 c4 14             	add    esp,0x14
c000fcb6:	53                   	push   ebx
c000fcb7:	e8 b0 ae ff ff       	call   c000ab6c <File::close()>
c000fcbc:	83 c4 10             	add    esp,0x10
c000fcbf:	56                   	push   esi
c000fcc0:	31 f6                	xor    esi,esi
c000fcc2:	68 00 01 00 00       	push   0x100
c000fcc7:	6a 00                	push   0x0
c000fcc9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fccd:	50                   	push   eax
c000fcce:	e8 fd 07 ff ff       	call   c00004d0 <memset>
c000fcd3:	5f                   	pop    edi
c000fcd4:	58                   	pop    eax
c000fcd5:	6a 01                	push   0x1
c000fcd7:	53                   	push   ebx
c000fcd8:	e8 31 ae ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000fcdd:	83 c4 10             	add    esp,0x10
c000fce0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fce8:	83 ec 0c             	sub    esp,0xc
c000fceb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fced:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fcf1:	51                   	push   ecx
c000fcf2:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fcf6:	52                   	push   edx
c000fcf7:	6a 00                	push   0x0
c000fcf9:	6a 01                	push   0x1
c000fcfb:	53                   	push   ebx
c000fcfc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fcff:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fd03:	83 c4 20             	add    esp,0x20
c000fd06:	3c 0d                	cmp    al,0xd
c000fd08:	0f 84 09 01 00 00    	je     c000fe17 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd0e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd13:	0f 84 ef 00 00 00    	je     c000fe08 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd19:	3c 0a                	cmp    al,0xa
c000fd1b:	74 13                	je     c000fd30 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd1d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd22:	74 0c                	je     c000fd30 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd24:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd2a:	0f 8e d8 00 00 00    	jle    c000fe08 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd34:	83 ec 0c             	sub    esp,0xc
c000fd37:	8d 78 01             	lea    edi,[eax+0x1]
c000fd3a:	57                   	push   edi
c000fd3b:	e8 79 7a ff ff       	call   c00077b9 <malloc>
c000fd40:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd44:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd48:	8d 56 04             	lea    edx,[esi+0x4]
c000fd4b:	89 14 24             	mov    DWORD PTR [esp],edx
c000fd4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd52:	e8 62 7a ff ff       	call   c00077b9 <malloc>
c000fd57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd5b:	83 c4 0c             	add    esp,0xc
c000fd5e:	57                   	push   edi
c000fd5f:	6a 00                	push   0x0
c000fd61:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd65:	e8 66 07 ff ff       	call   c00004d0 <memset>
c000fd6a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd6e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd72:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd78:	83 c4 0c             	add    esp,0xc
c000fd7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd7f:	52                   	push   edx
c000fd80:	6a 00                	push   0x0
c000fd82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd86:	e8 45 07 ff ff       	call   c00004d0 <memset>
c000fd8b:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd8f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fd93:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd96:	e8 a5 07 ff ff       	call   c0000540 <strlen>
c000fd9b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fd9f:	89 c1                	mov    ecx,eax
c000fda1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fda3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fda6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fda9:	40                   	inc    eax
c000fdaa:	83 c4 10             	add    esp,0x10
c000fdad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fdb0:	85 d2                	test   edx,edx
c000fdb2:	75 0c                	jne    c000fdc0 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fdb4:	83 ec 0c             	sub    esp,0xc
c000fdb7:	6a 08                	push   0x8
c000fdb9:	e8 fb 79 ff ff       	call   c00077b9 <malloc>
c000fdbe:	eb 0c                	jmp    c000fdcc <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fdc0:	c1 e0 03             	shl    eax,0x3
c000fdc3:	51                   	push   ecx
c000fdc4:	51                   	push   ecx
c000fdc5:	50                   	push   eax
c000fdc6:	52                   	push   edx
c000fdc7:	e8 d9 79 ff ff       	call   c00077a5 <realloc>
c000fdcc:	83 c4 10             	add    esp,0x10
c000fdcf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fdd2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fdd5:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fdd8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fddc:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fde0:	b9 08 00 00 00       	mov    ecx,0x8
c000fde5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fde7:	31 f6                	xor    esi,esi
c000fde9:	50                   	push   eax
c000fdea:	68 00 01 00 00       	push   0x100
c000fdef:	6a 00                	push   0x0
c000fdf1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fdf5:	50                   	push   eax
c000fdf6:	e8 d5 06 ff ff       	call   c00004d0 <memset>
c000fdfb:	83 c4 10             	add    esp,0x10
c000fdfe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe06:	eb 0f                	jmp    c000fe17 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe08:	3c 3d                	cmp    al,0x3d
c000fe0a:	74 07                	je     c000fe13 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fe0c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fe10:	46                   	inc    esi
c000fe11:	eb 04                	jmp    c000fe17 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe13:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fe17:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe1c:	0f 85 c6 fe ff ff    	jne    c000fce8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fe22:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe28:	5b                   	pop    ebx
c000fe29:	5e                   	pop    esi
c000fe2a:	5f                   	pop    edi
c000fe2b:	5d                   	pop    ebp
c000fe2c:	c3                   	ret    
c000fe2d:	90                   	nop

c000fe2e <EnvVarContainer::__loadSystem()>:
c000fe2e:	83 ec 10             	sub    esp,0x10
c000fe31:	68 60 f9 01 c0       	push   0xc001f960
c000fe36:	68 34 e6 01 c0       	push   0xc001e634
c000fe3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe3f:	e8 04 fe ff ff       	call   c000fc48 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe44:	83 c4 1c             	add    esp,0x1c
c000fe47:	c3                   	ret    

c000fe48 <EnvVarContainer::__loadUser()>:
c000fe48:	c3                   	ret    
c000fe49:	90                   	nop

c000fe4a <EnvVarContainer::EnvVarContainer(Process*)>:
c000fe4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe5c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe6a:	90                   	nop
c000fe6b:	c3                   	ret    

c000fe6c <EnvVarContainer::~EnvVarContainer()>:
c000fe6c:	83 ec 0c             	sub    esp,0xc
c000fe6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe76:	85 c0                	test   eax,eax
c000fe78:	74 1d                	je     c000fe97 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe80:	85 c0                	test   eax,eax
c000fe82:	74 13                	je     c000fe97 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe8b:	83 ec 0c             	sub    esp,0xc
c000fe8e:	50                   	push   eax
c000fe8f:	e8 35 79 ff ff       	call   c00077c9 <free>
c000fe94:	83 c4 10             	add    esp,0x10
c000fe97:	90                   	nop
c000fe98:	83 c4 0c             	add    esp,0xc
c000fe9b:	c3                   	ret    

c000fe9c <Krnl::getEnv(Process*, char const*)>:
c000fe9c:	53                   	push   ebx
c000fe9d:	83 ec 08             	sub    esp,0x8
c000fea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fea8:	39 05 90 51 02 c0    	cmp    DWORD PTR ds:0xc0025190,eax
c000feae:	74 04                	je     c000feb4 <Krnl::getEnv(Process*, char const*)+0x18>
c000feb0:	85 c0                	test   eax,eax
c000feb2:	75 0b                	jne    c000febf <Krnl::getEnv(Process*, char const*)+0x23>
c000feb4:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000feb9:	85 c0                	test   eax,eax
c000febb:	75 19                	jne    c000fed6 <Krnl::getEnv(Process*, char const*)+0x3a>
c000febd:	eb 27                	jmp    c000fee6 <Krnl::getEnv(Process*, char const*)+0x4a>
c000febf:	52                   	push   edx
c000fec0:	52                   	push   edx
c000fec1:	53                   	push   ebx
c000fec2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fec8:	e8 79 fc ff ff       	call   c000fb46 <EnvVarContainer::getEnv(char const*)>
c000fecd:	83 c4 10             	add    esp,0x10
c000fed0:	85 c0                	test   eax,eax
c000fed2:	75 28                	jne    c000fefc <Krnl::getEnv(Process*, char const*)+0x60>
c000fed4:	eb de                	jmp    c000feb4 <Krnl::getEnv(Process*, char const*)+0x18>
c000fed6:	52                   	push   edx
c000fed7:	52                   	push   edx
c000fed8:	53                   	push   ebx
c000fed9:	50                   	push   eax
c000feda:	e8 67 fc ff ff       	call   c000fb46 <EnvVarContainer::getEnv(char const*)>
c000fedf:	83 c4 10             	add    esp,0x10
c000fee2:	85 c0                	test   eax,eax
c000fee4:	75 16                	jne    c000fefc <Krnl::getEnv(Process*, char const*)+0x60>
c000fee6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000feea:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c000feef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fef3:	83 c4 08             	add    esp,0x8
c000fef6:	5b                   	pop    ebx
c000fef7:	e9 4a fc ff ff       	jmp    c000fb46 <EnvVarContainer::getEnv(char const*)>
c000fefc:	83 c4 08             	add    esp,0x8
c000feff:	5b                   	pop    ebx
c000ff00:	c3                   	ret    

c000ff01 <Krnl::setEnvSystem(char const*, char const*)>:
c000ff01:	83 ec 10             	sub    esp,0x10
c000ff04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff0c:	ff 35 34 49 02 c0    	push   DWORD PTR ds:0xc0024934
c000ff12:	e8 6d fc ff ff       	call   c000fb84 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff17:	83 c4 1c             	add    esp,0x1c
c000ff1a:	c3                   	ret    

c000ff1b <Krnl::setEnvUser(char const*, char const*)>:
c000ff1b:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ff20:	85 c0                	test   eax,eax
c000ff22:	74 15                	je     c000ff39 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff24:	83 ec 10             	sub    esp,0x10
c000ff27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff2f:	50                   	push   eax
c000ff30:	e8 4f fc ff ff       	call   c000fb84 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff35:	83 c4 1c             	add    esp,0x1c
c000ff38:	c3                   	ret    
c000ff39:	c3                   	ret    

c000ff3a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff3e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff48:	e9 37 fc ff ff       	jmp    c000fb84 <EnvVarContainer::setEnv(char const*, char const*)>

c000ff4d <Krnl::deleteEnvSystem(char const*)>:
c000ff4d:	c3                   	ret    

c000ff4e <Krnl::deleteEnvUser(char const*)>:
c000ff4e:	c3                   	ret    

c000ff4f <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ff4f:	c3                   	ret    

c000ff50 <Krnl::newProcessEnv(Process*)>:
c000ff50:	83 ec 28             	sub    esp,0x28
c000ff53:	6a 0c                	push   0xc
c000ff55:	e8 5f 78 ff ff       	call   c00077b9 <malloc>
c000ff5a:	5a                   	pop    edx
c000ff5b:	59                   	pop    ecx
c000ff5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff60:	50                   	push   eax
c000ff61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff65:	e8 e0 fe ff ff       	call   c000fe4a <EnvVarContainer::EnvVarContainer(Process*)>
c000ff6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff6e:	83 c4 2c             	add    esp,0x2c
c000ff71:	c3                   	ret    

c000ff72 <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff72:	57                   	push   edi
c000ff73:	56                   	push   esi
c000ff74:	53                   	push   ebx
c000ff75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff79:	83 ec 0c             	sub    esp,0xc
c000ff7c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ff82:	6a 0c                	push   0xc
c000ff84:	e8 30 78 ff ff       	call   c00077b9 <malloc>
c000ff89:	89 c3                	mov    ebx,eax
c000ff8b:	58                   	pop    eax
c000ff8c:	5a                   	pop    edx
c000ff8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff91:	53                   	push   ebx
c000ff92:	e8 b3 fe ff ff       	call   c000fe4a <EnvVarContainer::EnvVarContainer(Process*)>
c000ff97:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff99:	89 03                	mov    DWORD PTR [ebx],eax
c000ff9b:	c1 e0 03             	shl    eax,0x3
c000ff9e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffa1:	e8 13 78 ff ff       	call   c00077b9 <malloc>
c000ffa6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ffa9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ffab:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ffae:	c1 e1 03             	shl    ecx,0x3
c000ffb1:	89 c7                	mov    edi,eax
c000ffb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffb5:	83 c4 10             	add    esp,0x10
c000ffb8:	89 d8                	mov    eax,ebx
c000ffba:	5b                   	pop    ebx
c000ffbb:	5e                   	pop    esi
c000ffbc:	5f                   	pop    edi
c000ffbd:	c3                   	ret    

c000ffbe <Krnl::loadSystemEnv()>:
c000ffbe:	53                   	push   ebx
c000ffbf:	83 ec 14             	sub    esp,0x14
c000ffc2:	6a 0c                	push   0xc
c000ffc4:	e8 f0 77 ff ff       	call   c00077b9 <malloc>
c000ffc9:	89 c3                	mov    ebx,eax
c000ffcb:	58                   	pop    eax
c000ffcc:	5a                   	pop    edx
c000ffcd:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000ffd3:	53                   	push   ebx
c000ffd4:	e8 71 fe ff ff       	call   c000fe4a <EnvVarContainer::EnvVarContainer(Process*)>
c000ffd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffdc:	89 1d 34 49 02 c0    	mov    DWORD PTR ds:0xc0024934,ebx
c000ffe2:	e8 47 fe ff ff       	call   c000fe2e <EnvVarContainer::__loadSystem()>
c000ffe7:	83 c4 18             	add    esp,0x18
c000ffea:	5b                   	pop    ebx
c000ffeb:	c3                   	ret    

c000ffec <Krnl::loadUserEnv()>:
c000ffec:	53                   	push   ebx
c000ffed:	83 ec 14             	sub    esp,0x14
c000fff0:	6a 0c                	push   0xc
c000fff2:	e8 c2 77 ff ff       	call   c00077b9 <malloc>
c000fff7:	89 c3                	mov    ebx,eax
c000fff9:	58                   	pop    eax
c000fffa:	5a                   	pop    edx
c000fffb:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010001:	53                   	push   ebx
c0010002:	e8 43 fe ff ff       	call   c000fe4a <EnvVarContainer::EnvVarContainer(Process*)>
c0010007:	89 1d 30 49 02 c0    	mov    DWORD PTR ds:0xc0024930,ebx
c001000d:	83 c4 18             	add    esp,0x18
c0010010:	5b                   	pop    ebx
c0010011:	c3                   	ret    

c0010012 <Krnl::flushEnv()>:
c0010012:	c3                   	ret    

c0010013 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010013:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010017:	8b 15 30 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024930
c001001d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010023:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c0010028:	8b 00                	mov    eax,DWORD PTR [eax]
c001002a:	03 01                	add    eax,DWORD PTR [ecx]
c001002c:	85 d2                	test   edx,edx
c001002e:	74 02                	je     c0010032 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010030:	03 02                	add    eax,DWORD PTR [edx]
c0010032:	c3                   	ret    

c0010033 <Krnl::getProcessEnvPair(Process*, int)>:
c0010033:	57                   	push   edi
c0010034:	56                   	push   esi
c0010035:	8b 35 30 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024930
c001003b:	53                   	push   ebx
c001003c:	85 f6                	test   esi,esi
c001003e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010042:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010046:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001004c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010050:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010052:	75 16                	jne    c001006a <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010054:	39 c2                	cmp    edx,eax
c0010056:	7c 16                	jl     c001006e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010058:	8b 0d 34 49 02 c0    	mov    ecx,DWORD PTR ds:0xc0024934
c001005e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010060:	01 c6                	add    esi,eax
c0010062:	39 d6                	cmp    esi,edx
c0010064:	7e 3c                	jle    c00100a2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010066:	29 c2                	sub    edx,eax
c0010068:	eb 04                	jmp    c001006e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001006a:	39 c2                	cmp    edx,eax
c001006c:	7d 05                	jge    c0010073 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001006e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010071:	eb 20                	jmp    c0010093 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010073:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010075:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010078:	39 d1                	cmp    ecx,edx
c001007a:	7e 04                	jle    c0010080 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001007c:	29 c2                	sub    edx,eax
c001007e:	eb 10                	jmp    c0010090 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010080:	8b 35 34 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024934
c0010086:	03 0e                	add    ecx,DWORD PTR [esi]
c0010088:	39 d1                	cmp    ecx,edx
c001008a:	7e 16                	jle    c00100a2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001008c:	29 c2                	sub    edx,eax
c001008e:	29 fa                	sub    edx,edi
c0010090:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010093:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010096:	8b 02                	mov    eax,DWORD PTR [edx]
c0010098:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001009b:	89 03                	mov    DWORD PTR [ebx],eax
c001009d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00100a0:	eb 1d                	jmp    c00100bf <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00100a2:	83 ec 0c             	sub    esp,0xc
c00100a5:	68 56 e6 01 c0       	push   0xc001e656
c00100aa:	e8 ac 00 00 00       	call   c001015b <KePanic(char const*)>
c00100af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00100b5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00100bc:	83 c4 10             	add    esp,0x10
c00100bf:	89 d8                	mov    eax,ebx
c00100c1:	5b                   	pop    ebx
c00100c2:	5e                   	pop    esi
c00100c3:	5f                   	pop    edi
c00100c4:	c2 04 00             	ret    0x4

c00100c7 <CPU::current()>:
c00100c7:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00100cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00100d2:	c3                   	ret    

c00100d3 <operator new(unsigned long)>:
c00100d3:	e9 e1 76 ff ff       	jmp    c00077b9 <malloc>

c00100d8 <operator delete(void*)>:
c00100d8:	e9 fc 76 ff ff       	jmp    c00077d9 <rfree>

c00100dd <disableIRQs()>:
c00100dd:	fa                   	cli    
c00100de:	c3                   	ret    

c00100df <enableIRQs()>:
c00100df:	fb                   	sti    
c00100e0:	c3                   	ret    

c00100e1 <lockScheduler()>:
c00100e1:	fa                   	cli    
c00100e2:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00100e8:	c3                   	ret    

c00100e9 <unlockScheduler()>:
c00100e9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00100ee:	48                   	dec    eax
c00100ef:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00100f4:	75 01                	jne    c00100f7 <unlockScheduler()+0xe>
c00100f6:	fb                   	sti    
c00100f7:	c3                   	ret    

c00100f8 <lockStuff()>:
c00100f8:	fa                   	cli    
c00100f9:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00100ff:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0010105:	c3                   	ret    

c0010106 <unlockStuff()>:
c0010106:	83 ec 0c             	sub    esp,0xc
c0010109:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001010e:	48                   	dec    eax
c001010f:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0010114:	75 18                	jne    c001012e <unlockStuff()+0x28>
c0010116:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c001011d:	74 0f                	je     c001012e <unlockStuff()+0x28>
c001011f:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0010129:	e8 6a 36 00 00       	call   c0013798 <schedule()>
c001012e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010133:	48                   	dec    eax
c0010134:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010139:	75 01                	jne    c001013c <unlockStuff()+0x36>
c001013b:	fb                   	sti    
c001013c:	83 c4 0c             	add    esp,0xc
c001013f:	c3                   	ret    

c0010140 <Virt::getAKernelVAS()>:
c0010140:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0010145:	c3                   	ret    

c0010146 <__not_memcpy>:
c0010146:	57                   	push   edi
c0010147:	56                   	push   esi
c0010148:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001014c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010150:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010154:	89 c7                	mov    edi,eax
c0010156:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010158:	5e                   	pop    esi
c0010159:	5f                   	pop    edi
c001015a:	c3                   	ret    

c001015b <KePanic(char const*)>:
c001015b:	c6 05 38 49 02 c0 01 	mov    BYTE PTR ds:0xc0024938,0x1
c0010162:	e9 29 54 00 00       	jmp    c0015590 <HalPanic(char const*)>

c0010167 <Krnl::powerThread(void*)>:
c0010167:	83 ec 0c             	sub    esp,0xc
c001016a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001016f:	48                   	dec    eax
c0010170:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010175:	75 01                	jne    c0010178 <Krnl::powerThread(void*)+0x11>
c0010177:	fb                   	sti    
c0010178:	83 ec 0c             	sub    esp,0xc
c001017b:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c0010182:	6a 0a                	push   0xa
c0010184:	e8 1f 39 00 00       	call   c0013aa8 <sleep(unsigned int)>
c0010189:	83 05 84 49 02 c0 0a 	add    DWORD PTR ds:0xc0024984,0xa
c0010190:	83 c4 10             	add    esp,0x10
c0010193:	eb e3                	jmp    c0010178 <Krnl::powerThread(void*)+0x11>

c0010195 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010195:	57                   	push   edi
c0010196:	b9 09 00 00 00       	mov    ecx,0x9
c001019b:	56                   	push   esi
c001019c:	bf 60 49 02 c0       	mov    edi,0xc0024960
c00101a1:	fc                   	cld    
c00101a2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00101a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00101a8:	5e                   	pop    esi
c00101a9:	5f                   	pop    edi
c00101aa:	c3                   	ret    

c00101ab <Krnl::userIOReceived()>:
c00101ab:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c00101b5:	c3                   	ret    

c00101b6 <Krnl::handlePowerButton()>:
c00101b6:	83 ec 0c             	sub    esp,0xc
c00101b9:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c00101be:	83 f8 02             	cmp    eax,0x2
c00101c1:	75 10                	jne    c00101d3 <Krnl::handlePowerButton()+0x1d>
c00101c3:	83 ec 0c             	sub    esp,0xc
c00101c6:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00101cc:	e8 85 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101d1:	eb 11                	jmp    c00101e4 <Krnl::handlePowerButton()+0x2e>
c00101d3:	48                   	dec    eax
c00101d4:	75 11                	jne    c00101e7 <Krnl::handlePowerButton()+0x31>
c00101d6:	83 ec 0c             	sub    esp,0xc
c00101d9:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00101df:	e8 a2 6c ff ff       	call   c0006e86 <Computer::sleep()>
c00101e4:	83 c4 10             	add    esp,0x10
c00101e7:	83 c4 0c             	add    esp,0xc
c00101ea:	c3                   	ret    

c00101eb <Krnl::handleSleepButton()>:
c00101eb:	83 ec 0c             	sub    esp,0xc
c00101ee:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c00101f3:	83 f8 02             	cmp    eax,0x2
c00101f6:	75 10                	jne    c0010208 <Krnl::handleSleepButton()+0x1d>
c00101f8:	83 ec 0c             	sub    esp,0xc
c00101fb:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010201:	e8 50 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c0010206:	eb 11                	jmp    c0010219 <Krnl::handleSleepButton()+0x2e>
c0010208:	48                   	dec    eax
c0010209:	75 11                	jne    c001021c <Krnl::handleSleepButton()+0x31>
c001020b:	83 ec 0c             	sub    esp,0xc
c001020e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010214:	e8 6d 6c ff ff       	call   c0006e86 <Computer::sleep()>
c0010219:	83 c4 10             	add    esp,0x10
c001021c:	83 c4 0c             	add    esp,0xc
c001021f:	c3                   	ret    

c0010220 <Krnl::setupPowerManager()>:
c0010220:	83 ec 0c             	sub    esp,0xc
c0010223:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c001022d:	68 f0 00 00 00       	push   0xf0
c0010232:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c0010239:	6a 00                	push   0x0
c001023b:	68 67 01 01 c0       	push   0xc0010167
c0010240:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010246:	e8 2d 33 00 00       	call   c0013578 <Process::createThread(void (*)(void*), void*, int)>
c001024b:	c7 05 60 49 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0024960,0x2
c0010255:	c7 05 64 49 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024964,0x1
c001025f:	c7 05 68 49 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0024968,0x3
c0010269:	c7 05 6c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002496c,0x0
c0010273:	c7 05 78 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024978,0x0
c001027d:	c7 05 70 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024970,0x0
c0010287:	c7 05 7c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002497c,0x0
c0010291:	c7 05 74 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024974,0x3c
c001029b:	c7 05 80 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024980,0x3c
c00102a5:	83 c4 1c             	add    esp,0x1c
c00102a8:	c3                   	ret    
c00102a9:	66 90                	xchg   ax,ax
c00102ab:	90                   	nop

c00102ac <KeResolveCompatibilitySymbol(char*)>:
c00102ac:	83 ec 0c             	sub    esp,0xc
c00102af:	83 ec 08             	sub    esp,0x8
c00102b2:	68 70 e6 01 c0       	push   0xc001e670
c00102b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102bb:	e8 20 04 ff ff       	call   c00006e0 <strcmp>
c00102c0:	83 c4 10             	add    esp,0x10
c00102c3:	85 c0                	test   eax,eax
c00102c5:	0f 94 c0             	sete   al
c00102c8:	84 c0                	test   al,al
c00102ca:	74 0c                	je     c00102d8 <KeResolveCompatibilitySymbol(char*)+0x2c>
c00102cc:	b8 b8 1e 02 c0       	mov    eax,0xc0021eb8
c00102d1:	e9 62 01 00 00       	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102d6:	66 90                	xchg   ax,ax
c00102d8:	83 ec 08             	sub    esp,0x8
c00102db:	68 79 e6 01 c0       	push   0xc001e679
c00102e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e4:	e8 f7 03 ff ff       	call   c00006e0 <strcmp>
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	85 c0                	test   eax,eax
c00102ee:	0f 94 c0             	sete   al
c00102f1:	84 c0                	test   al,al
c00102f3:	74 0b                	je     c0010300 <KeResolveCompatibilitySymbol(char*)+0x54>
c00102f5:	b8 f0 c0 01 c0       	mov    eax,0xc001c0f0
c00102fa:	e9 39 01 00 00       	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102ff:	90                   	nop
c0010300:	83 ec 08             	sub    esp,0x8
c0010303:	68 83 e6 01 c0       	push   0xc001e683
c0010308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001030c:	e8 cf 03 ff ff       	call   c00006e0 <strcmp>
c0010311:	83 c4 10             	add    esp,0x10
c0010314:	85 c0                	test   eax,eax
c0010316:	0f 94 c0             	sete   al
c0010319:	84 c0                	test   al,al
c001031b:	74 0b                	je     c0010328 <KeResolveCompatibilitySymbol(char*)+0x7c>
c001031d:	b8 24 be 01 c0       	mov    eax,0xc001be24
c0010322:	e9 11 01 00 00       	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010327:	90                   	nop
c0010328:	83 ec 08             	sub    esp,0x8
c001032b:	68 8c e6 01 c0       	push   0xc001e68c
c0010330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010334:	e8 a7 03 ff ff       	call   c00006e0 <strcmp>
c0010339:	83 c4 10             	add    esp,0x10
c001033c:	85 c0                	test   eax,eax
c001033e:	0f 94 c0             	sete   al
c0010341:	84 c0                	test   al,al
c0010343:	74 0b                	je     c0010350 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010345:	b8 5b 01 01 c0       	mov    eax,0xc001015b
c001034a:	e9 e9 00 00 00       	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001034f:	90                   	nop
c0010350:	83 ec 08             	sub    esp,0x8
c0010353:	68 9f e6 01 c0       	push   0xc001e69f
c0010358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001035c:	e8 7f 03 ff ff       	call   c00006e0 <strcmp>
c0010361:	83 c4 10             	add    esp,0x10
c0010364:	85 c0                	test   eax,eax
c0010366:	0f 94 c0             	sete   al
c0010369:	84 c0                	test   al,al
c001036b:	74 0b                	je     c0010378 <KeResolveCompatibilitySymbol(char*)+0xcc>
c001036d:	b8 e3 fa 00 c0       	mov    eax,0xc000fae3
c0010372:	e9 c1 00 00 00       	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010377:	90                   	nop
c0010378:	83 ec 08             	sub    esp,0x8
c001037b:	68 bc e6 01 c0       	push   0xc001e6bc
c0010380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010384:	e8 57 03 ff ff       	call   c00006e0 <strcmp>
c0010389:	83 c4 10             	add    esp,0x10
c001038c:	85 c0                	test   eax,eax
c001038e:	0f 94 c0             	sete   al
c0010391:	84 c0                	test   al,al
c0010393:	74 0b                	je     c00103a0 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010395:	b8 f0 c1 01 c0       	mov    eax,0xc001c1f0
c001039a:	e9 99 00 00 00       	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001039f:	90                   	nop
c00103a0:	83 ec 08             	sub    esp,0x8
c00103a3:	68 c6 e6 01 c0       	push   0xc001e6c6
c00103a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103ac:	e8 2f 03 ff ff       	call   c00006e0 <strcmp>
c00103b1:	83 c4 10             	add    esp,0x10
c00103b4:	85 c0                	test   eax,eax
c00103b6:	0f 94 c0             	sete   al
c00103b9:	84 c0                	test   al,al
c00103bb:	74 07                	je     c00103c4 <KeResolveCompatibilitySymbol(char*)+0x118>
c00103bd:	b8 70 bf 01 c0       	mov    eax,0xc001bf70
c00103c2:	eb 74                	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103c4:	83 ec 08             	sub    esp,0x8
c00103c7:	68 cf e6 01 c0       	push   0xc001e6cf
c00103cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103d0:	e8 0b 03 ff ff       	call   c00006e0 <strcmp>
c00103d5:	83 c4 10             	add    esp,0x10
c00103d8:	85 c0                	test   eax,eax
c00103da:	0f 94 c0             	sete   al
c00103dd:	84 c0                	test   al,al
c00103df:	74 07                	je     c00103e8 <KeResolveCompatibilitySymbol(char*)+0x13c>
c00103e1:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c00103e6:	eb 50                	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103e8:	83 ec 08             	sub    esp,0x8
c00103eb:	68 e7 e6 01 c0       	push   0xc001e6e7
c00103f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103f4:	e8 e7 02 ff ff       	call   c00006e0 <strcmp>
c00103f9:	83 c4 10             	add    esp,0x10
c00103fc:	85 c0                	test   eax,eax
c00103fe:	0f 94 c0             	sete   al
c0010401:	84 c0                	test   al,al
c0010403:	74 07                	je     c001040c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010405:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c001040a:	eb 2c                	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001040c:	83 ec 08             	sub    esp,0x8
c001040f:	68 f4 e6 01 c0       	push   0xc001e6f4
c0010414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010418:	e8 c3 02 ff ff       	call   c00006e0 <strcmp>
c001041d:	83 c4 10             	add    esp,0x10
c0010420:	85 c0                	test   eax,eax
c0010422:	0f 94 c0             	sete   al
c0010425:	84 c0                	test   al,al
c0010427:	74 07                	je     c0010430 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010429:	b8 bd 1e 02 c0       	mov    eax,0xc0021ebd
c001042e:	eb 08                	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010430:	b8 00 00 00 00       	mov    eax,0x0
c0010435:	8d 76 00             	lea    esi,[esi+0x0]
c0010438:	83 c4 0c             	add    esp,0xc
c001043b:	c3                   	ret    

c001043c <KiSigKill(int)>:
c001043c:	57                   	push   edi
c001043d:	b9 0a 00 00 00       	mov    ecx,0xa
c0010442:	56                   	push   esi
c0010443:	be 3d e7 01 c0       	mov    esi,0xc001e73d
c0010448:	83 ec 14             	sub    esp,0x14
c001044b:	8d 7c 24 06          	lea    edi,[esp+0x6]
c001044f:	fc                   	cld    
c0010450:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010452:	8d 44 24 06          	lea    eax,[esp+0x6]
c0010456:	50                   	push   eax
c0010457:	6a 00                	push   0x0
c0010459:	6a 00                	push   0x0
c001045b:	6a 27                	push   0x27
c001045d:	e8 f0 fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010462:	83 c4 24             	add    esp,0x24
c0010465:	5e                   	pop    esi
c0010466:	5f                   	pop    edi
c0010467:	c3                   	ret    

c0010468 <KiDefaultSignalHandlerIgnore(int)>:
c0010468:	c3                   	ret    

c0010469 <KiDefaultSignalHandlerPause(int)>:
c0010469:	57                   	push   edi
c001046a:	b9 07 00 00 00       	mov    ecx,0x7
c001046f:	56                   	push   esi
c0010470:	be 47 e7 01 c0       	mov    esi,0xc001e747
c0010475:	83 ec 24             	sub    esp,0x24
c0010478:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001047c:	fc                   	cld    
c001047d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001047f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010483:	50                   	push   eax
c0010484:	6a 00                	push   0x0
c0010486:	6a 00                	push   0x0
c0010488:	6a 27                	push   0x27
c001048a:	e8 c3 fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001048f:	83 c4 34             	add    esp,0x34
c0010492:	5e                   	pop    esi
c0010493:	5f                   	pop    edi
c0010494:	c3                   	ret    

c0010495 <KiDefaultSignalHandlerResume(int)>:
c0010495:	57                   	push   edi
c0010496:	b9 1d 00 00 00       	mov    ecx,0x1d
c001049b:	56                   	push   esi
c001049c:	be 63 e7 01 c0       	mov    esi,0xc001e763
c00104a1:	83 ec 24             	sub    esp,0x24
c00104a4:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00104a8:	fc                   	cld    
c00104a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104ab:	8d 44 24 03          	lea    eax,[esp+0x3]
c00104af:	50                   	push   eax
c00104b0:	6a 00                	push   0x0
c00104b2:	6a 00                	push   0x0
c00104b4:	6a 27                	push   0x27
c00104b6:	e8 97 fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00104bb:	83 c4 34             	add    esp,0x34
c00104be:	5e                   	pop    esi
c00104bf:	5f                   	pop    edi
c00104c0:	c3                   	ret    

c00104c1 <KeDeinitSignals(SigHandlerBlock*)>:
c00104c1:	e9 03 73 ff ff       	jmp    c00077c9 <free>

c00104c6 <KeInitSignals()>:
c00104c6:	53                   	push   ebx
c00104c7:	83 ec 10             	sub    esp,0x10
c00104ca:	68 00 00 02 c0       	push   0xc0020000
c00104cf:	68 80 e7 01 c0       	push   0xc001e780
c00104d4:	e8 ff 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00104d9:	58                   	pop    eax
c00104da:	5a                   	pop    edx
c00104db:	68 7d 00 02 c0       	push   0xc002007d
c00104e0:	68 98 e7 01 c0       	push   0xc001e798
c00104e5:	e8 ee 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00104ea:	59                   	pop    ecx
c00104eb:	5b                   	pop    ebx
c00104ec:	ff 35 00 00 02 c0    	push   DWORD PTR ds:0xc0020000
c00104f2:	68 80 e7 01 c0       	push   0xc001e780
c00104f7:	e8 dc 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00104fc:	58                   	pop    eax
c00104fd:	5a                   	pop    edx
c00104fe:	ff 35 7d 00 02 c0    	push   DWORD PTR ds:0xc002007d
c0010504:	68 98 e7 01 c0       	push   0xc001e798
c0010509:	e8 ca 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001050e:	c7 04 24 c8 00 00 00 	mov    DWORD PTR [esp],0xc8
c0010515:	e8 9f 72 ff ff       	call   c00077b9 <malloc>
c001051a:	83 c4 0c             	add    esp,0xc
c001051d:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010527:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010531:	89 c3                	mov    ebx,eax
c0010533:	6a 20                	push   0x20
c0010535:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001053b:	6a 00                	push   0x0
c001053d:	50                   	push   eax
c001053e:	e8 8d ff fe ff       	call   c00004d0 <memset>
c0010543:	83 c4 0c             	add    esp,0xc
c0010546:	6a 44                	push   0x44
c0010548:	6a 00                	push   0x0
c001054a:	53                   	push   ebx
c001054b:	e8 80 ff fe ff       	call   c00004d0 <memset>
c0010550:	89 d8                	mov    eax,ebx
c0010552:	83 c4 18             	add    esp,0x18
c0010555:	5b                   	pop    ebx
c0010556:	c3                   	ret    

c0010557 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010557:	53                   	push   ebx
c0010558:	b8 01 00 00 00       	mov    eax,0x1
c001055d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010561:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010565:	83 f9 10             	cmp    ecx,0x10
c0010568:	7f 21                	jg     c001058b <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001056a:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001056d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010571:	89 03                	mov    DWORD PTR [ebx],eax
c0010573:	b8 01 00 00 00       	mov    eax,0x1
c0010578:	d3 e0                	shl    eax,cl
c001057a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001057e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010581:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010589:	31 c0                	xor    eax,eax
c001058b:	5b                   	pop    ebx
c001058c:	c3                   	ret    

c001058d <KeRaiseSignal(SigHandlerBlock*, int)>:
c001058d:	55                   	push   ebp
c001058e:	57                   	push   edi
c001058f:	bf 08 00 00 00       	mov    edi,0x8
c0010594:	56                   	push   esi
c0010595:	53                   	push   ebx
c0010596:	83 ec 18             	sub    esp,0x18
c0010599:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001059d:	68 b0 e7 01 c0       	push   0xc001e7b0
c00105a2:	e8 31 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00105a7:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00105ae:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00105b4:	83 c4 10             	add    esp,0x10
c00105b7:	31 c9                	xor    ecx,ecx
c00105b9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00105bd:	99                   	cdq    
c00105be:	f7 ff                	idiv   edi
c00105c0:	8d 42 24             	lea    eax,[edx+0x24]
c00105c3:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00105c7:	85 f6                	test   esi,esi
c00105c9:	75 1a                	jne    c00105e5 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00105cb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00105cf:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00105d3:	50                   	push   eax
c00105d4:	50                   	push   eax
c00105d5:	52                   	push   edx
c00105d6:	68 c1 e7 01 c0       	push   0xc001e7c1
c00105db:	e8 f8 9e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00105e0:	83 c4 10             	add    esp,0x10
c00105e3:	eb 1b                	jmp    c0010600 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00105e5:	41                   	inc    ecx
c00105e6:	83 f9 08             	cmp    ecx,0x8
c00105e9:	75 ce                	jne    c00105b9 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00105eb:	83 ec 0c             	sub    esp,0xc
c00105ee:	be 01 00 00 00       	mov    esi,0x1
c00105f3:	68 e2 e7 01 c0       	push   0xc001e7e2
c00105f8:	e8 db 9e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00105fd:	83 c4 10             	add    esp,0x10
c0010600:	83 c4 0c             	add    esp,0xc
c0010603:	89 f0                	mov    eax,esi
c0010605:	5b                   	pop    ebx
c0010606:	5e                   	pop    esi
c0010607:	5f                   	pop    edi
c0010608:	5d                   	pop    ebp
c0010609:	c3                   	ret    

c001060a <KeCheckSignal(SigHandlerBlock*)>:
c001060a:	55                   	push   ebp
c001060b:	57                   	push   edi
c001060c:	56                   	push   esi
c001060d:	53                   	push   ebx
c001060e:	51                   	push   ecx
c001060f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010613:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001061a:	75 07                	jne    c0010623 <KeCheckSignal(SigHandlerBlock*)+0x19>
c001061c:	31 c0                	xor    eax,eax
c001061e:	e9 cc 00 00 00       	jmp    c00106ef <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010623:	31 c9                	xor    ecx,ecx
c0010625:	bf 08 00 00 00       	mov    edi,0x8
c001062a:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010630:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010633:	99                   	cdq    
c0010634:	f7 ff                	idiv   edi
c0010636:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c001063d:	85 d2                	test   edx,edx
c001063f:	0f 84 94 00 00 00    	je     c00106d9 <KeCheckSignal(SigHandlerBlock*)+0xcf>
c0010645:	88 d1                	mov    cl,dl
c0010647:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001064d:	bf 01 00 00 00       	mov    edi,0x1
c0010652:	89 04 24             	mov    DWORD PTR [esp],eax
c0010655:	d3 e7                	shl    edi,cl
c0010657:	bd 01 00 00 00       	mov    ebp,0x1
c001065c:	31 c9                	xor    ecx,ecx
c001065e:	89 e8                	mov    eax,ebp
c0010660:	d3 e0                	shl    eax,cl
c0010662:	85 04 24             	test   DWORD PTR [esp],eax
c0010665:	74 06                	je     c001066d <KeCheckSignal(SigHandlerBlock*)+0x63>
c0010667:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001066b:	75 af                	jne    c001061c <KeCheckSignal(SigHandlerBlock*)+0x12>
c001066d:	41                   	inc    ecx
c001066e:	83 f9 11             	cmp    ecx,0x11
c0010671:	75 eb                	jne    c001065e <KeCheckSignal(SigHandlerBlock*)+0x54>
c0010673:	8d 4e 01             	lea    ecx,[esi+0x1]
c0010676:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010679:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c001067f:	09 f8                	or     eax,edi
c0010681:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c001068c:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010692:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010699:	31 c0                	xor    eax,eax
c001069b:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00106a3:	74 09                	je     c00106ae <KeCheckSignal(SigHandlerBlock*)+0xa4>
c00106a5:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00106ac:	eb 06                	jmp    c00106b4 <KeCheckSignal(SigHandlerBlock*)+0xaa>
c00106ae:	40                   	inc    eax
c00106af:	83 f8 08             	cmp    eax,0x8
c00106b2:	75 e7                	jne    c001069b <KeCheckSignal(SigHandlerBlock*)+0x91>
c00106b4:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c00106b7:	83 fa 09             	cmp    edx,0x9
c00106ba:	75 07                	jne    c00106c3 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c00106bc:	b8 3c 04 01 c0       	mov    eax,0xc001043c
c00106c1:	eb 2c                	jmp    c00106ef <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106c3:	83 f8 01             	cmp    eax,0x1
c00106c6:	0f 84 50 ff ff ff    	je     c001061c <KeCheckSignal(SigHandlerBlock*)+0x12>
c00106cc:	85 c0                	test   eax,eax
c00106ce:	75 1f                	jne    c00106ef <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106d0:	8b 04 95 c0 f9 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0640]
c00106d7:	eb 16                	jmp    c00106ef <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106d9:	46                   	inc    esi
c00106da:	41                   	inc    ecx
c00106db:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00106e1:	83 f9 08             	cmp    ecx,0x8
c00106e4:	0f 85 40 ff ff ff    	jne    c001062a <KeCheckSignal(SigHandlerBlock*)+0x20>
c00106ea:	e9 2d ff ff ff       	jmp    c001061c <KeCheckSignal(SigHandlerBlock*)+0x12>
c00106ef:	5a                   	pop    edx
c00106f0:	5b                   	pop    ebx
c00106f1:	5e                   	pop    esi
c00106f2:	5f                   	pop    edi
c00106f3:	5d                   	pop    ebp
c00106f4:	c3                   	ret    

c00106f5 <KiCheckSignalZ>:
c00106f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106fd:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010703:	e8 02 ff ff ff       	call   c001060a <KeCheckSignal(SigHandlerBlock*)>
c0010708:	5a                   	pop    edx
c0010709:	c3                   	ret    

c001070a <KeCompleteSignal(SigHandlerBlock*, int)>:
c001070a:	56                   	push   esi
c001070b:	53                   	push   ebx
c001070c:	bb 01 00 00 00       	mov    ebx,0x1
c0010711:	52                   	push   edx
c0010712:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010716:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001071a:	d3 e3                	shl    ebx,cl
c001071c:	83 f9 10             	cmp    ecx,0x10
c001071f:	7f 08                	jg     c0010729 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010721:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010727:	75 10                	jne    c0010739 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010729:	83 ec 0c             	sub    esp,0xc
c001072c:	68 f3 e7 01 c0       	push   0xc001e7f3
c0010731:	e8 25 fa ff ff       	call   c001015b <KePanic(char const*)>
c0010736:	83 c4 10             	add    esp,0x10
c0010739:	f7 d3                	not    ebx
c001073b:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010741:	58                   	pop    eax
c0010742:	5b                   	pop    ebx
c0010743:	5e                   	pop    esi
c0010744:	c3                   	ret    

c0010745 <SysSeekDir(regs*)>:
c0010745:	31 c0                	xor    eax,eax
c0010747:	31 d2                	xor    edx,edx
c0010749:	c3                   	ret    

c001074a <SysTellDir(regs*)>:
c001074a:	31 c0                	xor    eax,eax
c001074c:	31 d2                	xor    edx,edx
c001074e:	c3                   	ret    

c001074f <SysVerify(regs*)>:
c001074f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010753:	31 d2                	xor    edx,edx
c0010755:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010758:	c3                   	ret    

c0010759 <SysGetArgc(regs*)>:
c0010759:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001075e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010761:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010767:	99                   	cdq    
c0010768:	c3                   	ret    

c0010769 <SysTTYName(regs*)>:
c0010769:	b8 01 00 00 00       	mov    eax,0x1
c001076e:	31 d2                	xor    edx,edx
c0010770:	c3                   	ret    

c0010771 <SysFormatDisk(regs*)>:
c0010771:	56                   	push   esi
c0010772:	53                   	push   ebx
c0010773:	50                   	push   eax
c0010774:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010778:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c001077e:	eb 28                	jmp    c00107a8 <SysFormatDisk(regs*)+0x37>
c0010780:	83 ec 0c             	sub    esp,0xc
c0010783:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010786:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010789:	8b 13                	mov    edx,DWORD PTR [ebx]
c001078b:	51                   	push   ecx
c001078c:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001078f:	51                   	push   ecx
c0010790:	50                   	push   eax
c0010791:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0010798:	50                   	push   eax
c0010799:	53                   	push   ebx
c001079a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001079d:	83 c4 20             	add    esp,0x20
c00107a0:	83 f8 08             	cmp    eax,0x8
c00107a3:	75 12                	jne    c00107b7 <SysFormatDisk(regs*)+0x46>
c00107a5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00107a8:	85 db                	test   ebx,ebx
c00107aa:	75 d4                	jne    c0010780 <SysFormatDisk(regs*)+0xf>
c00107ac:	59                   	pop    ecx
c00107ad:	b8 03 00 00 00       	mov    eax,0x3
c00107b2:	31 d2                	xor    edx,edx
c00107b4:	5b                   	pop    ebx
c00107b5:	5e                   	pop    esi
c00107b6:	c3                   	ret    
c00107b7:	85 c0                	test   eax,eax
c00107b9:	74 1b                	je     c00107d6 <SysFormatDisk(regs*)+0x65>
c00107bb:	83 f8 09             	cmp    eax,0x9
c00107be:	74 0b                	je     c00107cb <SysFormatDisk(regs*)+0x5a>
c00107c0:	59                   	pop    ecx
c00107c1:	b8 02 00 00 00       	mov    eax,0x2
c00107c6:	31 d2                	xor    edx,edx
c00107c8:	5b                   	pop    ebx
c00107c9:	5e                   	pop    esi
c00107ca:	c3                   	ret    
c00107cb:	59                   	pop    ecx
c00107cc:	b8 01 00 00 00       	mov    eax,0x1
c00107d1:	31 d2                	xor    edx,edx
c00107d3:	5b                   	pop    ebx
c00107d4:	5e                   	pop    esi
c00107d5:	c3                   	ret    
c00107d6:	59                   	pop    ecx
c00107d7:	31 c0                	xor    eax,eax
c00107d9:	31 d2                	xor    edx,edx
c00107db:	5b                   	pop    ebx
c00107dc:	5e                   	pop    esi
c00107dd:	c3                   	ret    

c00107de <SysSetDiskVolumeLabel(regs*)>:
c00107de:	56                   	push   esi
c00107df:	53                   	push   ebx
c00107e0:	53                   	push   ebx
c00107e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107e5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00107e8:	83 f8 19             	cmp    eax,0x19
c00107eb:	77 2d                	ja     c001081a <SysSetDiskVolumeLabel(regs*)+0x3c>
c00107ed:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c00107f4:	85 c9                	test   ecx,ecx
c00107f6:	74 22                	je     c001081a <SysSetDiskVolumeLabel(regs*)+0x3c>
c00107f8:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00107fb:	85 db                	test   ebx,ebx
c00107fd:	74 1b                	je     c001081a <SysSetDiskVolumeLabel(regs*)+0x3c>
c00107ff:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010805:	85 d2                	test   edx,edx
c0010807:	74 11                	je     c001081a <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010809:	8b 32                	mov    esi,DWORD PTR [edx]
c001080b:	53                   	push   ebx
c001080c:	50                   	push   eax
c001080d:	51                   	push   ecx
c001080e:	52                   	push   edx
c001080f:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010812:	83 c4 10             	add    esp,0x10
c0010815:	99                   	cdq    
c0010816:	59                   	pop    ecx
c0010817:	5b                   	pop    ebx
c0010818:	5e                   	pop    esi
c0010819:	c3                   	ret    
c001081a:	59                   	pop    ecx
c001081b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010820:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010825:	5b                   	pop    ebx
c0010826:	5e                   	pop    esi
c0010827:	c3                   	ret    

c0010828 <SysGetDiskVolumeLabel(regs*)>:
c0010828:	57                   	push   edi
c0010829:	56                   	push   esi
c001082a:	53                   	push   ebx
c001082b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010832:	83 fa 19             	cmp    edx,0x19
c0010835:	77 38                	ja     c001086f <SysGetDiskVolumeLabel(regs*)+0x47>
c0010837:	8b 0c 95 20 44 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbbe0]
c001083e:	85 c9                	test   ecx,ecx
c0010840:	74 2d                	je     c001086f <SysGetDiskVolumeLabel(regs*)+0x47>
c0010842:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010845:	85 db                	test   ebx,ebx
c0010847:	74 26                	je     c001086f <SysGetDiskVolumeLabel(regs*)+0x47>
c0010849:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001084c:	85 f6                	test   esi,esi
c001084e:	74 1f                	je     c001086f <SysGetDiskVolumeLabel(regs*)+0x47>
c0010850:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010856:	85 c0                	test   eax,eax
c0010858:	74 15                	je     c001086f <SysGetDiskVolumeLabel(regs*)+0x47>
c001085a:	83 ec 0c             	sub    esp,0xc
c001085d:	8b 38                	mov    edi,DWORD PTR [eax]
c001085f:	56                   	push   esi
c0010860:	53                   	push   ebx
c0010861:	52                   	push   edx
c0010862:	51                   	push   ecx
c0010863:	50                   	push   eax
c0010864:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010867:	83 c4 20             	add    esp,0x20
c001086a:	99                   	cdq    
c001086b:	5b                   	pop    ebx
c001086c:	5e                   	pop    esi
c001086d:	5f                   	pop    edi
c001086e:	c3                   	ret    
c001086f:	5b                   	pop    ebx
c0010870:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010875:	ba ff ff ff ff       	mov    edx,0xffffffff
c001087a:	5e                   	pop    esi
c001087b:	5f                   	pop    edi
c001087c:	c3                   	ret    

c001087d <SysShutdown(regs*)>:
c001087d:	83 ec 0c             	sub    esp,0xc
c0010880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010884:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010887:	85 c0                	test   eax,eax
c0010889:	74 18                	je     c00108a3 <SysShutdown(regs*)+0x26>
c001088b:	83 f8 01             	cmp    eax,0x1
c001088e:	74 38                	je     c00108c8 <SysShutdown(regs*)+0x4b>
c0010890:	83 f8 02             	cmp    eax,0x2
c0010893:	74 24                	je     c00108b9 <SysShutdown(regs*)+0x3c>
c0010895:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001089a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001089f:	83 c4 0c             	add    esp,0xc
c00108a2:	c3                   	ret    
c00108a3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00108a8:	8b 10                	mov    edx,DWORD PTR [eax]
c00108aa:	6a 00                	push   0x0
c00108ac:	6a 00                	push   0x0
c00108ae:	6a 00                	push   0x0
c00108b0:	50                   	push   eax
c00108b1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00108b4:	83 c4 10             	add    esp,0x10
c00108b7:	eb dc                	jmp    c0010895 <SysShutdown(regs*)+0x18>
c00108b9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00108be:	8b 10                	mov    edx,DWORD PTR [eax]
c00108c0:	6a 00                	push   0x0
c00108c2:	6a 00                	push   0x0
c00108c4:	6a 01                	push   0x1
c00108c6:	eb e8                	jmp    c00108b0 <SysShutdown(regs*)+0x33>
c00108c8:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c00108cd:	85 c0                	test   eax,eax
c00108cf:	74 02                	je     c00108d3 <SysShutdown(regs*)+0x56>
c00108d1:	ff d0                	call   eax
c00108d3:	31 c0                	xor    eax,eax
c00108d5:	31 d2                	xor    edx,edx
c00108d7:	83 c4 0c             	add    esp,0xc
c00108da:	c3                   	ret    

c00108db <SysRealpath(regs*)>:
c00108db:	83 ec 0c             	sub    esp,0xc
c00108de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00108e5:	85 d2                	test   edx,edx
c00108e7:	74 07                	je     c00108f0 <SysRealpath(regs*)+0x15>
c00108e9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00108ec:	85 c0                	test   eax,eax
c00108ee:	75 0b                	jne    c00108fb <SysRealpath(regs*)+0x20>
c00108f0:	b8 01 00 00 00       	mov    eax,0x1
c00108f5:	31 d2                	xor    edx,edx
c00108f7:	83 c4 0c             	add    esp,0xc
c00108fa:	c3                   	ret    
c00108fb:	51                   	push   ecx
c00108fc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010902:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010905:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001090b:	51                   	push   ecx
c001090c:	52                   	push   edx
c001090d:	50                   	push   eax
c001090e:	e8 91 9f ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010913:	83 c4 10             	add    esp,0x10
c0010916:	31 c0                	xor    eax,eax
c0010918:	31 d2                	xor    edx,edx
c001091a:	83 c4 0c             	add    esp,0xc
c001091d:	c3                   	ret    

c001091e <SysReadDir(regs*)>:
c001091e:	53                   	push   ebx
c001091f:	83 ec 18             	sub    esp,0x18
c0010922:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010926:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010929:	83 f8 02             	cmp    eax,0x2
c001092c:	76 61                	jbe    c001098f <SysReadDir(regs*)+0x71>
c001092e:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010935:	77 49                	ja     c0010980 <SysReadDir(regs*)+0x62>
c0010937:	83 ec 0c             	sub    esp,0xc
c001093a:	50                   	push   eax
c001093b:	e8 ef 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	85 c0                	test   eax,eax
c0010945:	74 39                	je     c0010980 <SysReadDir(regs*)+0x62>
c0010947:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001094f:	83 ec 0c             	sub    esp,0xc
c0010952:	8b 10                	mov    edx,DWORD PTR [eax]
c0010954:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010958:	51                   	push   ecx
c0010959:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001095c:	51                   	push   ecx
c001095d:	6a 00                	push   0x0
c001095f:	68 10 01 00 00       	push   0x110
c0010964:	50                   	push   eax
c0010965:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010968:	83 c4 20             	add    esp,0x20
c001096b:	85 c0                	test   eax,eax
c001096d:	74 29                	je     c0010998 <SysReadDir(regs*)+0x7a>
c001096f:	83 f8 07             	cmp    eax,0x7
c0010972:	74 1b                	je     c001098f <SysReadDir(regs*)+0x71>
c0010974:	b8 02 00 00 00       	mov    eax,0x2
c0010979:	31 d2                	xor    edx,edx
c001097b:	83 c4 18             	add    esp,0x18
c001097e:	5b                   	pop    ebx
c001097f:	c3                   	ret    
c0010980:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010985:	ba ff ff ff ff       	mov    edx,0xffffffff
c001098a:	83 c4 18             	add    esp,0x18
c001098d:	5b                   	pop    ebx
c001098e:	c3                   	ret    
c001098f:	b8 01 00 00 00       	mov    eax,0x1
c0010994:	31 d2                	xor    edx,edx
c0010996:	eb e3                	jmp    c001097b <SysReadDir(regs*)+0x5d>
c0010998:	31 c0                	xor    eax,eax
c001099a:	31 d2                	xor    edx,edx
c001099c:	eb dd                	jmp    c001097b <SysReadDir(regs*)+0x5d>

c001099e <SysIsATTY(regs*)>:
c001099e:	83 ec 0c             	sub    esp,0xc
c00109a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109a8:	83 f8 02             	cmp    eax,0x2
c00109ab:	76 07                	jbe    c00109b4 <SysIsATTY(regs*)+0x16>
c00109ad:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00109b2:	75 28                	jne    c00109dc <SysIsATTY(regs*)+0x3e>
c00109b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00109c2:	85 c0                	test   eax,eax
c00109c4:	74 26                	je     c00109ec <SysIsATTY(regs*)+0x4e>
c00109c6:	83 ec 0c             	sub    esp,0xc
c00109c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00109cb:	50                   	push   eax
c00109cc:	ff 12                	call   DWORD PTR [edx]
c00109ce:	31 d2                	xor    edx,edx
c00109d0:	25 ff 00 00 00       	and    eax,0xff
c00109d5:	83 c4 10             	add    esp,0x10
c00109d8:	83 c4 0c             	add    esp,0xc
c00109db:	c3                   	ret    
c00109dc:	83 ec 0c             	sub    esp,0xc
c00109df:	50                   	push   eax
c00109e0:	e8 4a 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c00109e5:	83 c4 10             	add    esp,0x10
c00109e8:	85 c0                	test   eax,eax
c00109ea:	75 da                	jne    c00109c6 <SysIsATTY(regs*)+0x28>
c00109ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109f6:	83 c4 0c             	add    esp,0xc
c00109f9:	c3                   	ret    

c00109fa <SysSeek(regs*)>:
c00109fa:	53                   	push   ebx
c00109fb:	83 ec 08             	sub    esp,0x8
c00109fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a02:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a05:	8d 50 fd             	lea    edx,[eax-0x3]
c0010a08:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010a0e:	77 34                	ja     c0010a44 <SysSeek(regs*)+0x4a>
c0010a10:	83 ec 0c             	sub    esp,0xc
c0010a13:	50                   	push   eax
c0010a14:	e8 16 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a19:	83 c4 0c             	add    esp,0xc
c0010a1c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a1f:	31 db                	xor    ebx,ebx
c0010a21:	53                   	push   ebx
c0010a22:	51                   	push   ecx
c0010a23:	50                   	push   eax
c0010a24:	e8 a3 a1 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0010a29:	83 c4 10             	add    esp,0x10
c0010a2c:	85 c0                	test   eax,eax
c0010a2e:	0f 95 c0             	setne  al
c0010a31:	31 d2                	xor    edx,edx
c0010a33:	25 ff 00 00 00       	and    eax,0xff
c0010a38:	f7 d8                	neg    eax
c0010a3a:	83 d2 00             	adc    edx,0x0
c0010a3d:	83 c4 08             	add    esp,0x8
c0010a40:	f7 da                	neg    edx
c0010a42:	5b                   	pop    ebx
c0010a43:	c3                   	ret    
c0010a44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a49:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a4e:	83 c4 08             	add    esp,0x8
c0010a51:	5b                   	pop    ebx
c0010a52:	c3                   	ret    

c0010a53 <SysTell(regs*)>:
c0010a53:	53                   	push   ebx
c0010a54:	83 ec 08             	sub    esp,0x8
c0010a57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a5b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a5e:	83 f8 02             	cmp    eax,0x2
c0010a61:	76 50                	jbe    c0010ab3 <SysTell(regs*)+0x60>
c0010a63:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010a68:	76 19                	jbe    c0010a83 <SysTell(regs*)+0x30>
c0010a6a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a6d:	31 d2                	xor    edx,edx
c0010a6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010a75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010a7c:	31 c0                	xor    eax,eax
c0010a7e:	83 c4 08             	add    esp,0x8
c0010a81:	5b                   	pop    ebx
c0010a82:	c3                   	ret    
c0010a83:	83 ec 0c             	sub    esp,0xc
c0010a86:	50                   	push   eax
c0010a87:	e8 a3 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a8c:	5a                   	pop    edx
c0010a8d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010a90:	59                   	pop    ecx
c0010a91:	53                   	push   ebx
c0010a92:	50                   	push   eax
c0010a93:	e8 8a a1 ff ff       	call   c000ac22 <File::tell(unsigned long long*)>
c0010a98:	83 c4 10             	add    esp,0x10
c0010a9b:	85 c0                	test   eax,eax
c0010a9d:	0f 95 c0             	setne  al
c0010aa0:	31 d2                	xor    edx,edx
c0010aa2:	25 ff 00 00 00       	and    eax,0xff
c0010aa7:	f7 d8                	neg    eax
c0010aa9:	83 d2 00             	adc    edx,0x0
c0010aac:	83 c4 08             	add    esp,0x8
c0010aaf:	f7 da                	neg    edx
c0010ab1:	5b                   	pop    ebx
c0010ab2:	c3                   	ret    
c0010ab3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ab8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010abd:	83 c4 08             	add    esp,0x8
c0010ac0:	5b                   	pop    ebx
c0010ac1:	c3                   	ret    

c0010ac2 <SysSize(regs*)>:
c0010ac2:	53                   	push   ebx
c0010ac3:	83 ec 18             	sub    esp,0x18
c0010ac6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010aca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010acd:	83 f8 02             	cmp    eax,0x2
c0010ad0:	76 56                	jbe    c0010b28 <SysSize(regs*)+0x66>
c0010ad2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ad7:	76 19                	jbe    c0010af2 <SysSize(regs*)+0x30>
c0010ad9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010adc:	31 d2                	xor    edx,edx
c0010ade:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ae4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010aeb:	31 c0                	xor    eax,eax
c0010aed:	83 c4 18             	add    esp,0x18
c0010af0:	5b                   	pop    ebx
c0010af1:	c3                   	ret    
c0010af2:	83 ec 0c             	sub    esp,0xc
c0010af5:	50                   	push   eax
c0010af6:	e8 34 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010afb:	83 c4 0c             	add    esp,0xc
c0010afe:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010b02:	52                   	push   edx
c0010b03:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b06:	52                   	push   edx
c0010b07:	50                   	push   eax
c0010b08:	e8 ad a2 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0010b0d:	83 c4 10             	add    esp,0x10
c0010b10:	85 c0                	test   eax,eax
c0010b12:	0f 95 c0             	setne  al
c0010b15:	31 d2                	xor    edx,edx
c0010b17:	25 ff 00 00 00       	and    eax,0xff
c0010b1c:	f7 d8                	neg    eax
c0010b1e:	83 d2 00             	adc    edx,0x0
c0010b21:	83 c4 18             	add    esp,0x18
c0010b24:	f7 da                	neg    edx
c0010b26:	5b                   	pop    ebx
c0010b27:	c3                   	ret    
c0010b28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b32:	83 c4 18             	add    esp,0x18
c0010b35:	5b                   	pop    ebx
c0010b36:	c3                   	ret    

c0010b37 <SysSizeFromFilename(regs*)>:
c0010b37:	57                   	push   edi
c0010b38:	56                   	push   esi
c0010b39:	53                   	push   ebx
c0010b3a:	83 ec 20             	sub    esp,0x20
c0010b3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010b41:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010b44:	83 fb 02             	cmp    ebx,0x2
c0010b47:	0f 86 8c 00 00 00    	jbe    c0010bd9 <SysSizeFromFilename(regs*)+0xa2>
c0010b4d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010b53:	76 1b                	jbe    c0010b70 <SysSizeFromFilename(regs*)+0x39>
c0010b55:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b58:	31 d2                	xor    edx,edx
c0010b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b67:	83 c4 20             	add    esp,0x20
c0010b6a:	31 c0                	xor    eax,eax
c0010b6c:	5b                   	pop    ebx
c0010b6d:	5e                   	pop    esi
c0010b6e:	5f                   	pop    edi
c0010b6f:	c3                   	ret    
c0010b70:	83 ec 0c             	sub    esp,0xc
c0010b73:	68 14 01 00 00       	push   0x114
c0010b78:	e8 3c 6c ff ff       	call   c00077b9 <malloc>
c0010b7d:	83 c4 0c             	add    esp,0xc
c0010b80:	89 c7                	mov    edi,eax
c0010b82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b87:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b8a:	50                   	push   eax
c0010b8b:	53                   	push   ebx
c0010b8c:	57                   	push   edi
c0010b8d:	e8 bc 9e ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010b92:	83 c4 0c             	add    esp,0xc
c0010b95:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010b99:	50                   	push   eax
c0010b9a:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010b9d:	52                   	push   edx
c0010b9e:	57                   	push   edi
c0010b9f:	e8 16 a2 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0010ba4:	83 c4 10             	add    esp,0x10
c0010ba7:	85 ff                	test   edi,edi
c0010ba9:	74 14                	je     c0010bbf <SysSizeFromFilename(regs*)+0x88>
c0010bab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010baf:	8b 17                	mov    edx,DWORD PTR [edi]
c0010bb1:	83 ec 0c             	sub    esp,0xc
c0010bb4:	57                   	push   edi
c0010bb5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010bb8:	83 c4 10             	add    esp,0x10
c0010bbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bbf:	85 c0                	test   eax,eax
c0010bc1:	0f 95 c0             	setne  al
c0010bc4:	31 d2                	xor    edx,edx
c0010bc6:	25 ff 00 00 00       	and    eax,0xff
c0010bcb:	f7 d8                	neg    eax
c0010bcd:	83 d2 00             	adc    edx,0x0
c0010bd0:	83 c4 20             	add    esp,0x20
c0010bd3:	f7 da                	neg    edx
c0010bd5:	5b                   	pop    ebx
c0010bd6:	5e                   	pop    esi
c0010bd7:	5f                   	pop    edi
c0010bd8:	c3                   	ret    
c0010bd9:	83 c4 20             	add    esp,0x20
c0010bdc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010be1:	5b                   	pop    ebx
c0010be2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010be7:	5e                   	pop    esi
c0010be8:	5f                   	pop    edi
c0010be9:	c3                   	ret    

c0010bea <SysClose(regs*)>:
c0010bea:	53                   	push   ebx
c0010beb:	83 ec 08             	sub    esp,0x8
c0010bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010bf5:	83 f8 02             	cmp    eax,0x2
c0010bf8:	76 41                	jbe    c0010c3b <SysClose(regs*)+0x51>
c0010bfa:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010c00:	83 fa 01             	cmp    edx,0x1
c0010c03:	76 2d                	jbe    c0010c32 <SysClose(regs*)+0x48>
c0010c05:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c0a:	77 2f                	ja     c0010c3b <SysClose(regs*)+0x51>
c0010c0c:	83 ec 0c             	sub    esp,0xc
c0010c0f:	50                   	push   eax
c0010c10:	e8 1a 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010c15:	89 c3                	mov    ebx,eax
c0010c17:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c1a:	e8 4d 9f ff ff       	call   c000ab6c <File::close()>
c0010c1f:	83 c4 10             	add    esp,0x10
c0010c22:	85 db                	test   ebx,ebx
c0010c24:	74 0c                	je     c0010c32 <SysClose(regs*)+0x48>
c0010c26:	83 ec 0c             	sub    esp,0xc
c0010c29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c2b:	53                   	push   ebx
c0010c2c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c2f:	83 c4 10             	add    esp,0x10
c0010c32:	31 c0                	xor    eax,eax
c0010c34:	31 d2                	xor    edx,edx
c0010c36:	83 c4 08             	add    esp,0x8
c0010c39:	5b                   	pop    ebx
c0010c3a:	c3                   	ret    
c0010c3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c40:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c45:	83 c4 08             	add    esp,0x8
c0010c48:	5b                   	pop    ebx
c0010c49:	c3                   	ret    

c0010c4a <SysOpenDir(regs*)>:
c0010c4a:	57                   	push   edi
c0010c4b:	56                   	push   esi
c0010c4c:	53                   	push   ebx
c0010c4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c51:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c54:	85 c0                	test   eax,eax
c0010c56:	0f 84 e7 00 00 00    	je     c0010d43 <SysOpenDir(regs*)+0xf9>
c0010c5c:	83 ec 0c             	sub    esp,0xc
c0010c5f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c62:	56                   	push   esi
c0010c63:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010c66:	57                   	push   edi
c0010c67:	50                   	push   eax
c0010c68:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010c6b:	50                   	push   eax
c0010c6c:	68 04 e8 01 c0       	push   0xc001e804
c0010c71:	e8 62 98 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010c76:	83 c4 18             	add    esp,0x18
c0010c79:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c7c:	50                   	push   eax
c0010c7d:	68 2a e8 01 c0       	push   0xc001e82a
c0010c82:	e8 51 98 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010c87:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010c8e:	e8 26 6b ff ff       	call   c00077b9 <malloc>
c0010c93:	83 c4 0c             	add    esp,0xc
c0010c96:	89 c6                	mov    esi,eax
c0010c98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ca0:	50                   	push   eax
c0010ca1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ca4:	50                   	push   eax
c0010ca5:	56                   	push   esi
c0010ca6:	e8 cd a2 ff ff       	call   c000af78 <Directory::Directory(char const*, Process*)>
c0010cab:	c7 04 24 1e f6 01 c0 	mov    DWORD PTR [esp],0xc001f61e
c0010cb2:	e8 21 98 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010cb7:	83 c4 10             	add    esp,0x10
c0010cba:	85 f6                	test   esi,esi
c0010cbc:	0f 84 8f 00 00 00    	je     c0010d51 <SysOpenDir(regs*)+0x107>
c0010cc2:	83 ec 0c             	sub    esp,0xc
c0010cc5:	68 3f e8 01 c0       	push   0xc001e83f
c0010cca:	e8 09 98 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010ccf:	58                   	pop    eax
c0010cd0:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010cd3:	5a                   	pop    edx
c0010cd4:	51                   	push   ecx
c0010cd5:	68 43 e8 01 c0       	push   0xc001e843
c0010cda:	e8 f9 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010cdf:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ce2:	e8 51 a3 ff ff       	call   c000b038 <Directory::open()>
c0010ce7:	c7 04 24 4b d6 01 c0 	mov    DWORD PTR [esp],0xc001d64b
c0010cee:	89 c7                	mov    edi,eax
c0010cf0:	e8 e3 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010cf5:	83 c4 10             	add    esp,0x10
c0010cf8:	85 ff                	test   edi,edi
c0010cfa:	75 37                	jne    c0010d33 <SysOpenDir(regs*)+0xe9>
c0010cfc:	83 ec 0c             	sub    esp,0xc
c0010cff:	68 54 e8 01 c0       	push   0xc001e854
c0010d04:	e8 cf 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010d09:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d0c:	e8 29 81 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010d11:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d14:	89 02                	mov    DWORD PTR [edx],eax
c0010d16:	c1 f8 1f             	sar    eax,0x1f
c0010d19:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d1c:	c7 04 24 58 e8 01 c0 	mov    DWORD PTR [esp],0xc001e858
c0010d23:	e8 b0 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010d28:	83 c4 10             	add    esp,0x10
c0010d2b:	31 c0                	xor    eax,eax
c0010d2d:	5b                   	pop    ebx
c0010d2e:	31 d2                	xor    edx,edx
c0010d30:	5e                   	pop    esi
c0010d31:	5f                   	pop    edi
c0010d32:	c3                   	ret    
c0010d33:	83 ec 0c             	sub    esp,0xc
c0010d36:	68 50 e8 01 c0       	push   0xc001e850
c0010d3b:	e8 98 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	5b                   	pop    ebx
c0010d44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d49:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d4e:	5e                   	pop    esi
c0010d4f:	5f                   	pop    edi
c0010d50:	c3                   	ret    
c0010d51:	83 ec 0c             	sub    esp,0xc
c0010d54:	68 3b e8 01 c0       	push   0xc001e83b
c0010d59:	eb e0                	jmp    c0010d3b <SysOpenDir(regs*)+0xf1>

c0010d5b <SysCloseDir(regs*)>:
c0010d5b:	53                   	push   ebx
c0010d5c:	83 ec 08             	sub    esp,0x8
c0010d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d63:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d66:	8d 50 fd             	lea    edx,[eax-0x3]
c0010d69:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010d6f:	77 2f                	ja     c0010da0 <SysCloseDir(regs*)+0x45>
c0010d71:	83 ec 0c             	sub    esp,0xc
c0010d74:	50                   	push   eax
c0010d75:	e8 b5 83 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010d7a:	89 c3                	mov    ebx,eax
c0010d7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d7f:	e8 10 a3 ff ff       	call   c000b094 <Directory::close()>
c0010d84:	83 c4 10             	add    esp,0x10
c0010d87:	85 db                	test   ebx,ebx
c0010d89:	74 0c                	je     c0010d97 <SysCloseDir(regs*)+0x3c>
c0010d8b:	83 ec 0c             	sub    esp,0xc
c0010d8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d90:	53                   	push   ebx
c0010d91:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d94:	83 c4 10             	add    esp,0x10
c0010d97:	31 c0                	xor    eax,eax
c0010d99:	31 d2                	xor    edx,edx
c0010d9b:	83 c4 08             	add    esp,0x8
c0010d9e:	5b                   	pop    ebx
c0010d9f:	c3                   	ret    
c0010da0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010da5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010daa:	83 c4 08             	add    esp,0x8
c0010dad:	5b                   	pop    ebx
c0010dae:	c3                   	ret    

c0010daf <SysMakeDir(regs*)>:
c0010daf:	56                   	push   esi
c0010db0:	53                   	push   ebx
c0010db1:	83 ec 10             	sub    esp,0x10
c0010db4:	68 14 01 00 00       	push   0x114
c0010db9:	e8 fb 69 ff ff       	call   c00077b9 <malloc>
c0010dbe:	83 c4 0c             	add    esp,0xc
c0010dc1:	89 c3                	mov    ebx,eax
c0010dc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dc8:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010dcb:	56                   	push   esi
c0010dcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010dd0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010dd3:	50                   	push   eax
c0010dd4:	53                   	push   ebx
c0010dd5:	e8 9e a1 ff ff       	call   c000af78 <Directory::Directory(char const*, Process*)>
c0010dda:	83 c4 10             	add    esp,0x10
c0010ddd:	85 db                	test   ebx,ebx
c0010ddf:	74 32                	je     c0010e13 <SysMakeDir(regs*)+0x64>
c0010de1:	83 ec 0c             	sub    esp,0xc
c0010de4:	53                   	push   ebx
c0010de5:	e8 2e a4 ff ff       	call   c000b218 <Directory::create()>
c0010dea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ded:	89 c6                	mov    esi,eax
c0010def:	e8 a0 a2 ff ff       	call   c000b094 <Directory::close()>
c0010df4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010df6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010df9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dfc:	83 c4 10             	add    esp,0x10
c0010dff:	31 c0                	xor    eax,eax
c0010e01:	59                   	pop    ecx
c0010e02:	85 f6                	test   esi,esi
c0010e04:	5b                   	pop    ebx
c0010e05:	0f 95 c0             	setne  al
c0010e08:	5e                   	pop    esi
c0010e09:	31 d2                	xor    edx,edx
c0010e0b:	f7 d8                	neg    eax
c0010e0d:	83 d2 00             	adc    edx,0x0
c0010e10:	f7 da                	neg    edx
c0010e12:	c3                   	ret    
c0010e13:	59                   	pop    ecx
c0010e14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e19:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e1e:	5b                   	pop    ebx
c0010e1f:	5e                   	pop    esi
c0010e20:	c3                   	ret    

c0010e21 <SysWait(regs*)>:
c0010e21:	83 ec 10             	sub    esp,0x10
c0010e24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e28:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e2b:	52                   	push   edx
c0010e2c:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e2f:	51                   	push   ecx
c0010e30:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e33:	50                   	push   eax
c0010e34:	e8 8b 2b 00 00       	call   c00139c4 <waitTask(int, int*, int)>
c0010e39:	83 c4 1c             	add    esp,0x1c
c0010e3c:	99                   	cdq    
c0010e3d:	c3                   	ret    

c0010e3e <SysNotImpl(regs*)>:
c0010e3e:	83 ec 18             	sub    esp,0x18
c0010e41:	68 5c e8 01 c0       	push   0xc001e85c
c0010e46:	e8 10 f3 ff ff       	call   c001015b <KePanic(char const*)>
c0010e4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e50:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e55:	83 c4 1c             	add    esp,0x1c
c0010e58:	c3                   	ret    

c0010e59 <SysPanic(regs*)>:
c0010e59:	83 ec 18             	sub    esp,0x18
c0010e5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e60:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e63:	50                   	push   eax
c0010e64:	e8 f2 f2 ff ff       	call   c001015b <KePanic(char const*)>
c0010e69:	b8 01 00 00 00       	mov    eax,0x1
c0010e6e:	31 d2                	xor    edx,edx
c0010e70:	83 c4 1c             	add    esp,0x1c
c0010e73:	c3                   	ret    

c0010e74 <SysRmdir(regs*)>:
c0010e74:	56                   	push   esi
c0010e75:	53                   	push   ebx
c0010e76:	83 ec 20             	sub    esp,0x20
c0010e79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010e7d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010e80:	68 14 01 00 00       	push   0x114
c0010e85:	e8 2f 69 ff ff       	call   c00077b9 <malloc>
c0010e8a:	83 c4 0c             	add    esp,0xc
c0010e8d:	89 c3                	mov    ebx,eax
c0010e8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e97:	50                   	push   eax
c0010e98:	56                   	push   esi
c0010e99:	53                   	push   ebx
c0010e9a:	e8 af 9b ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010e9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ea2:	e8 df 9d ff ff       	call   c000ac86 <File::unlink()>
c0010ea7:	83 c4 10             	add    esp,0x10
c0010eaa:	85 db                	test   ebx,ebx
c0010eac:	74 14                	je     c0010ec2 <SysRmdir(regs*)+0x4e>
c0010eae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010eb2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010eb4:	83 ec 0c             	sub    esp,0xc
c0010eb7:	53                   	push   ebx
c0010eb8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ebb:	83 c4 10             	add    esp,0x10
c0010ebe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ec2:	85 c0                	test   eax,eax
c0010ec4:	0f 95 c0             	setne  al
c0010ec7:	31 d2                	xor    edx,edx
c0010ec9:	25 ff 00 00 00       	and    eax,0xff
c0010ece:	f7 d8                	neg    eax
c0010ed0:	83 d2 00             	adc    edx,0x0
c0010ed3:	83 c4 14             	add    esp,0x14
c0010ed6:	f7 da                	neg    edx
c0010ed8:	5b                   	pop    ebx
c0010ed9:	5e                   	pop    esi
c0010eda:	c3                   	ret    

c0010edb <SysUnlink(regs*)>:
c0010edb:	56                   	push   esi
c0010edc:	53                   	push   ebx
c0010edd:	83 ec 20             	sub    esp,0x20
c0010ee0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ee4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ee7:	68 14 01 00 00       	push   0x114
c0010eec:	e8 c8 68 ff ff       	call   c00077b9 <malloc>
c0010ef1:	83 c4 0c             	add    esp,0xc
c0010ef4:	89 c3                	mov    ebx,eax
c0010ef6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010efb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010efe:	50                   	push   eax
c0010eff:	56                   	push   esi
c0010f00:	53                   	push   ebx
c0010f01:	e8 48 9b ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010f06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f09:	e8 78 9d ff ff       	call   c000ac86 <File::unlink()>
c0010f0e:	83 c4 10             	add    esp,0x10
c0010f11:	85 db                	test   ebx,ebx
c0010f13:	74 14                	je     c0010f29 <SysUnlink(regs*)+0x4e>
c0010f15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f19:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f1b:	83 ec 0c             	sub    esp,0xc
c0010f1e:	53                   	push   ebx
c0010f1f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f22:	83 c4 10             	add    esp,0x10
c0010f25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f29:	85 c0                	test   eax,eax
c0010f2b:	0f 95 c0             	setne  al
c0010f2e:	31 d2                	xor    edx,edx
c0010f30:	25 ff 00 00 00       	and    eax,0xff
c0010f35:	f7 d8                	neg    eax
c0010f37:	83 d2 00             	adc    edx,0x0
c0010f3a:	83 c4 14             	add    esp,0x14
c0010f3d:	f7 da                	neg    edx
c0010f3f:	5b                   	pop    ebx
c0010f40:	5e                   	pop    esi
c0010f41:	c3                   	ret    

c0010f42 <SysGetArgv(regs*)>:
c0010f42:	83 ec 0c             	sub    esp,0xc
c0010f45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f49:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f4c:	85 c0                	test   eax,eax
c0010f4e:	78 2c                	js     c0010f7c <SysGetArgv(regs*)+0x3a>
c0010f50:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010f56:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010f59:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010f5f:	7d 1b                	jge    c0010f7c <SysGetArgv(regs*)+0x3a>
c0010f61:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010f68:	85 c0                	test   eax,eax
c0010f6a:	74 18                	je     c0010f84 <SysGetArgv(regs*)+0x42>
c0010f6c:	83 ec 08             	sub    esp,0x8
c0010f6f:	50                   	push   eax
c0010f70:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010f73:	50                   	push   eax
c0010f74:	e8 87 f6 fe ff       	call   c0000600 <strcpy>
c0010f79:	83 c4 10             	add    esp,0x10
c0010f7c:	31 c0                	xor    eax,eax
c0010f7e:	31 d2                	xor    edx,edx
c0010f80:	83 c4 0c             	add    esp,0xc
c0010f83:	c3                   	ret    
c0010f84:	b8 01 00 00 00       	mov    eax,0x1
c0010f89:	31 d2                	xor    edx,edx
c0010f8b:	83 c4 0c             	add    esp,0xc
c0010f8e:	c3                   	ret    

c0010f8f <SysUSleep(regs*)>:
c0010f8f:	83 ec 1c             	sub    esp,0x1c
c0010f92:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010f96:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010f99:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010f9c:	6a 00                	push   0x0
c0010f9e:	6a 64                	push   0x64
c0010fa0:	52                   	push   edx
c0010fa1:	50                   	push   eax
c0010fa2:	e8 49 b1 00 00       	call   c001c0f0 <__udivdi3>
c0010fa7:	83 c4 14             	add    esp,0x14
c0010faa:	50                   	push   eax
c0010fab:	e8 e8 2a 00 00       	call   c0013a98 <milliTenthSleep(unsigned int)>
c0010fb0:	31 c0                	xor    eax,eax
c0010fb2:	31 d2                	xor    edx,edx
c0010fb4:	83 c4 1c             	add    esp,0x1c
c0010fb7:	c3                   	ret    

c0010fb8 <SysSpawn(regs*)>:
c0010fb8:	56                   	push   esi
c0010fb9:	53                   	push   ebx
c0010fba:	50                   	push   eax
c0010fbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fbf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010fc2:	85 c0                	test   eax,eax
c0010fc4:	75 08                	jne    c0010fce <SysSpawn(regs*)+0x16>
c0010fc6:	59                   	pop    ecx
c0010fc7:	31 c0                	xor    eax,eax
c0010fc9:	31 d2                	xor    edx,edx
c0010fcb:	5b                   	pop    ebx
c0010fcc:	5e                   	pop    esi
c0010fcd:	c3                   	ret    
c0010fce:	83 ec 0c             	sub    esp,0xc
c0010fd1:	68 24 07 00 00       	push   0x724
c0010fd6:	e8 de 67 ff ff       	call   c00077b9 <malloc>
c0010fdb:	83 c4 10             	add    esp,0x10
c0010fde:	89 c6                	mov    esi,eax
c0010fe0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010fe3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fe6:	85 c0                	test   eax,eax
c0010fe8:	75 33                	jne    c001101d <SysSpawn(regs*)+0x65>
c0010fea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ff2:	52                   	push   edx
c0010ff3:	50                   	push   eax
c0010ff4:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010ff7:	53                   	push   ebx
c0010ff8:	56                   	push   esi
c0010ff9:	e8 46 21 00 00       	call   c0013144 <Process::Process(char const*, Process*, char**)>
c0010ffe:	83 c4 10             	add    esp,0x10
c0011001:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011008:	75 bc                	jne    c0010fc6 <SysSpawn(regs*)+0xe>
c001100a:	83 ec 0c             	sub    esp,0xc
c001100d:	56                   	push   esi
c001100e:	e8 5d 26 00 00       	call   c0013670 <Process::createUserThread()>
c0011013:	8b 06                	mov    eax,DWORD PTR [esi]
c0011015:	83 c4 10             	add    esp,0x10
c0011018:	99                   	cdq    
c0011019:	59                   	pop    ecx
c001101a:	5b                   	pop    ebx
c001101b:	5e                   	pop    esi
c001101c:	c3                   	ret    
c001101d:	31 c0                	xor    eax,eax
c001101f:	eb d1                	jmp    c0010ff2 <SysSpawn(regs*)+0x3a>

c0011021 <SysGetEnv(regs*)>:
c0011021:	57                   	push   edi
c0011022:	56                   	push   esi
c0011023:	53                   	push   ebx
c0011024:	83 ec 1c             	sub    esp,0x1c
c0011027:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001102b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011030:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011033:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011036:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011039:	50                   	push   eax
c001103a:	e8 d4 ef ff ff       	call   c0010013 <Krnl::getProcessTotalEnvCount(Process*)>
c001103f:	83 c4 10             	add    esp,0x10
c0011042:	39 c7                	cmp    edi,eax
c0011044:	7c 14                	jl     c001105a <SysGetEnv(regs*)+0x39>
c0011046:	85 f6                	test   esi,esi
c0011048:	75 0b                	jne    c0011055 <SysGetEnv(regs*)+0x34>
c001104a:	83 c4 10             	add    esp,0x10
c001104d:	31 c0                	xor    eax,eax
c001104f:	5b                   	pop    ebx
c0011050:	31 d2                	xor    edx,edx
c0011052:	5e                   	pop    esi
c0011053:	5f                   	pop    edi
c0011054:	c3                   	ret    
c0011055:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011058:	eb f0                	jmp    c001104a <SysGetEnv(regs*)+0x29>
c001105a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001105e:	52                   	push   edx
c001105f:	57                   	push   edi
c0011060:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011066:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011069:	51                   	push   ecx
c001106a:	50                   	push   eax
c001106b:	e8 c3 ef ff ff       	call   c0010033 <Krnl::getProcessEnvPair(Process*, int)>
c0011070:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011073:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011077:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001107b:	83 c4 0c             	add    esp,0xc
c001107e:	85 db                	test   ebx,ebx
c0011080:	75 23                	jne    c00110a5 <SysGetEnv(regs*)+0x84>
c0011082:	83 ec 0c             	sub    esp,0xc
c0011085:	50                   	push   eax
c0011086:	e8 b5 f4 fe ff       	call   c0000540 <strlen>
c001108b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001108e:	89 c3                	mov    ebx,eax
c0011090:	e8 ab f4 fe ff       	call   c0000540 <strlen>
c0011095:	31 d2                	xor    edx,edx
c0011097:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001109b:	83 c4 10             	add    esp,0x10
c001109e:	83 c4 10             	add    esp,0x10
c00110a1:	5b                   	pop    ebx
c00110a2:	5e                   	pop    esi
c00110a3:	5f                   	pop    edi
c00110a4:	c3                   	ret    
c00110a5:	83 ec 08             	sub    esp,0x8
c00110a8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110ab:	50                   	push   eax
c00110ac:	56                   	push   esi
c00110ad:	e8 4e f5 fe ff       	call   c0000600 <strcpy>
c00110b2:	58                   	pop    eax
c00110b3:	5a                   	pop    edx
c00110b4:	68 76 e8 01 c0       	push   0xc001e876
c00110b9:	56                   	push   esi
c00110ba:	e8 01 f7 fe ff       	call   c00007c0 <strcat>
c00110bf:	59                   	pop    ecx
c00110c0:	5b                   	pop    ebx
c00110c1:	57                   	push   edi
c00110c2:	56                   	push   esi
c00110c3:	e8 f8 f6 fe ff       	call   c00007c0 <strcat>
c00110c8:	83 c4 10             	add    esp,0x10
c00110cb:	e9 7a ff ff ff       	jmp    c001104a <SysGetEnv(regs*)+0x29>

c00110d0 <SysSetFatAttrib(regs*)>:
c00110d0:	57                   	push   edi
c00110d1:	56                   	push   esi
c00110d2:	53                   	push   ebx
c00110d3:	83 ec 1c             	sub    esp,0x1c
c00110d6:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00110da:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00110dd:	68 14 01 00 00       	push   0x114
c00110e2:	e8 d2 66 ff ff       	call   c00077b9 <malloc>
c00110e7:	83 c4 0c             	add    esp,0xc
c00110ea:	89 c3                	mov    ebx,eax
c00110ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110f4:	50                   	push   eax
c00110f5:	57                   	push   edi
c00110f6:	53                   	push   ebx
c00110f7:	e8 52 99 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c00110fc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00110ff:	83 c4 0c             	add    esp,0xc
c0011102:	0f b6 d4             	movzx  edx,ah
c0011105:	25 ff 00 00 00       	and    eax,0xff
c001110a:	52                   	push   edx
c001110b:	50                   	push   eax
c001110c:	53                   	push   ebx
c001110d:	e8 0e 9c ff ff       	call   c000ad20 <File::chfatattr(unsigned char, unsigned char)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	85 db                	test   ebx,ebx
c0011117:	74 14                	je     c001112d <SysSetFatAttrib(regs*)+0x5d>
c0011119:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001111d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001111f:	83 ec 0c             	sub    esp,0xc
c0011122:	53                   	push   ebx
c0011123:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011126:	83 c4 10             	add    esp,0x10
c0011129:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001112d:	85 c0                	test   eax,eax
c001112f:	0f 95 c0             	setne  al
c0011132:	31 d2                	xor    edx,edx
c0011134:	25 ff 00 00 00       	and    eax,0xff
c0011139:	f7 d8                	neg    eax
c001113b:	83 d2 00             	adc    edx,0x0
c001113e:	83 c4 10             	add    esp,0x10
c0011141:	f7 da                	neg    edx
c0011143:	5b                   	pop    ebx
c0011144:	5e                   	pop    esi
c0011145:	5f                   	pop    edi
c0011146:	c3                   	ret    

c0011147 <SysPipe(regs*)>:
c0011147:	57                   	push   edi
c0011148:	56                   	push   esi
c0011149:	53                   	push   ebx
c001114a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001114e:	83 ec 0c             	sub    esp,0xc
c0011151:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011154:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011157:	6a 20                	push   0x20
c0011159:	e8 5b 66 ff ff       	call   c00077b9 <malloc>
c001115e:	89 c3                	mov    ebx,eax
c0011160:	58                   	pop    eax
c0011161:	5a                   	pop    edx
c0011162:	68 00 50 00 00       	push   0x5000
c0011167:	53                   	push   ebx
c0011168:	e8 51 6f ff ff       	call   c00080be <Pipe::Pipe(int)>
c001116d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011170:	e8 c5 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0011175:	89 07                	mov    DWORD PTR [edi],eax
c0011177:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001117a:	e8 bb 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c001117f:	83 c4 10             	add    esp,0x10
c0011182:	89 06                	mov    DWORD PTR [esi],eax
c0011184:	31 d2                	xor    edx,edx
c0011186:	5b                   	pop    ebx
c0011187:	31 c0                	xor    eax,eax
c0011189:	5e                   	pop    esi
c001118a:	5f                   	pop    edi
c001118b:	c3                   	ret    

c001118c <SysGetUnixTime(regs*)>:
c001118c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011191:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011197:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001119b:	e9 be a2 ff ff       	jmp    c000b45e <Clock::timeInSecondsLocal()>

c00111a0 <string_ends_with(char const*, char const*)>:
c00111a0:	57                   	push   edi
c00111a1:	56                   	push   esi
c00111a2:	53                   	push   ebx
c00111a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00111ab:	83 ec 0c             	sub    esp,0xc
c00111ae:	53                   	push   ebx
c00111af:	e8 8c f3 fe ff       	call   c0000540 <strlen>
c00111b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111b7:	89 c6                	mov    esi,eax
c00111b9:	e8 82 f3 fe ff       	call   c0000540 <strlen>
c00111be:	83 c4 10             	add    esp,0x10
c00111c1:	39 c6                	cmp    esi,eax
c00111c3:	7d 06                	jge    c00111cb <string_ends_with(char const*, char const*)+0x2b>
c00111c5:	5b                   	pop    ebx
c00111c6:	31 c0                	xor    eax,eax
c00111c8:	5e                   	pop    esi
c00111c9:	5f                   	pop    edi
c00111ca:	c3                   	ret    
c00111cb:	83 ec 08             	sub    esp,0x8
c00111ce:	29 c6                	sub    esi,eax
c00111d0:	57                   	push   edi
c00111d1:	01 f3                	add    ebx,esi
c00111d3:	53                   	push   ebx
c00111d4:	e8 07 f5 fe ff       	call   c00006e0 <strcmp>
c00111d9:	83 c4 10             	add    esp,0x10
c00111dc:	85 c0                	test   eax,eax
c00111de:	5b                   	pop    ebx
c00111df:	0f 94 c0             	sete   al
c00111e2:	5e                   	pop    esi
c00111e3:	25 ff 00 00 00       	and    eax,0xff
c00111e8:	5f                   	pop    edi
c00111e9:	c3                   	ret    

c00111ea <SysOpen(regs*)>:
c00111ea:	56                   	push   esi
c00111eb:	53                   	push   ebx
c00111ec:	81 ec 04 01 00 00    	sub    esp,0x104
c00111f2:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00111f9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00111fc:	85 d2                	test   edx,edx
c00111fe:	0f 84 cc 01 00 00    	je     c00113d0 <SysOpen(regs*)+0x1e6>
c0011204:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011207:	85 c0                	test   eax,eax
c0011209:	0f 84 c1 01 00 00    	je     c00113d0 <SysOpen(regs*)+0x1e6>
c001120f:	83 ec 08             	sub    esp,0x8
c0011212:	50                   	push   eax
c0011213:	68 78 e8 01 c0       	push   0xc001e878
c0011218:	e8 bb 92 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001121d:	83 c4 0c             	add    esp,0xc
c0011220:	68 85 e8 01 c0       	push   0xc001e885
c0011225:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011228:	50                   	push   eax
c0011229:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001122d:	56                   	push   esi
c001122e:	e8 71 96 ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011233:	89 34 24             	mov    DWORD PTR [esp],esi
c0011236:	e8 05 f3 fe ff       	call   c0000540 <strlen>
c001123b:	83 c4 10             	add    esp,0x10
c001123e:	48                   	dec    eax
c001123f:	74 1d                	je     c001125e <SysOpen(regs*)+0x74>
c0011241:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011244:	eb 0f                	jmp    c0011255 <SysOpen(regs*)+0x6b>
c0011246:	80 fa 3a             	cmp    dl,0x3a
c0011249:	74 0f                	je     c001125a <SysOpen(regs*)+0x70>
c001124b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001124f:	48                   	dec    eax
c0011250:	74 0c                	je     c001125e <SysOpen(regs*)+0x74>
c0011252:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011255:	80 fa 2e             	cmp    dl,0x2e
c0011258:	75 ec                	jne    c0011246 <SysOpen(regs*)+0x5c>
c001125a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001125e:	83 ec 08             	sub    esp,0x8
c0011261:	68 89 e8 01 c0       	push   0xc001e889
c0011266:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011269:	50                   	push   eax
c001126a:	e8 31 ff ff ff       	call   c00111a0 <string_ends_with(char const*, char const*)>
c001126f:	83 c4 10             	add    esp,0x10
c0011272:	85 c0                	test   eax,eax
c0011274:	74 1d                	je     c0011293 <SysOpen(regs*)+0xa9>
c0011276:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011279:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001127f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011286:	81 c4 04 01 00 00    	add    esp,0x104
c001128c:	31 c0                	xor    eax,eax
c001128e:	31 d2                	xor    edx,edx
c0011290:	5b                   	pop    ebx
c0011291:	5e                   	pop    esi
c0011292:	c3                   	ret    
c0011293:	83 ec 08             	sub    esp,0x8
c0011296:	68 8e e8 01 c0       	push   0xc001e88e
c001129b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001129e:	50                   	push   eax
c001129f:	e8 fc fe ff ff       	call   c00111a0 <string_ends_with(char const*, char const*)>
c00112a4:	83 c4 10             	add    esp,0x10
c00112a7:	85 c0                	test   eax,eax
c00112a9:	75 cb                	jne    c0011276 <SysOpen(regs*)+0x8c>
c00112ab:	83 ec 08             	sub    esp,0x8
c00112ae:	68 8a e8 01 c0       	push   0xc001e88a
c00112b3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112b6:	50                   	push   eax
c00112b7:	e8 24 f4 fe ff       	call   c00006e0 <strcmp>
c00112bc:	83 c4 10             	add    esp,0x10
c00112bf:	85 c0                	test   eax,eax
c00112c1:	74 b3                	je     c0011276 <SysOpen(regs*)+0x8c>
c00112c3:	83 ec 08             	sub    esp,0x8
c00112c6:	68 89 e8 01 c0       	push   0xc001e889
c00112cb:	56                   	push   esi
c00112cc:	e8 cf fe ff ff       	call   c00111a0 <string_ends_with(char const*, char const*)>
c00112d1:	83 c4 10             	add    esp,0x10
c00112d4:	85 c0                	test   eax,eax
c00112d6:	75 9e                	jne    c0011276 <SysOpen(regs*)+0x8c>
c00112d8:	83 ec 08             	sub    esp,0x8
c00112db:	68 93 e8 01 c0       	push   0xc001e893
c00112e0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112e3:	50                   	push   eax
c00112e4:	e8 b7 fe ff ff       	call   c00111a0 <string_ends_with(char const*, char const*)>
c00112e9:	83 c4 10             	add    esp,0x10
c00112ec:	85 c0                	test   eax,eax
c00112ee:	0f 85 ef 00 00 00    	jne    c00113e3 <SysOpen(regs*)+0x1f9>
c00112f4:	83 ec 08             	sub    esp,0x8
c00112f7:	68 98 e8 01 c0       	push   0xc001e898
c00112fc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112ff:	50                   	push   eax
c0011300:	e8 9b fe ff ff       	call   c00111a0 <string_ends_with(char const*, char const*)>
c0011305:	83 c4 10             	add    esp,0x10
c0011308:	85 c0                	test   eax,eax
c001130a:	0f 85 d3 00 00 00    	jne    c00113e3 <SysOpen(regs*)+0x1f9>
c0011310:	83 ec 08             	sub    esp,0x8
c0011313:	68 94 e8 01 c0       	push   0xc001e894
c0011318:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001131b:	51                   	push   ecx
c001131c:	e8 bf f3 fe ff       	call   c00006e0 <strcmp>
c0011321:	83 c4 10             	add    esp,0x10
c0011324:	85 c0                	test   eax,eax
c0011326:	0f 84 b7 00 00 00    	je     c00113e3 <SysOpen(regs*)+0x1f9>
c001132c:	83 ec 08             	sub    esp,0x8
c001132f:	68 93 e8 01 c0       	push   0xc001e893
c0011334:	56                   	push   esi
c0011335:	e8 66 fe ff ff       	call   c00111a0 <string_ends_with(char const*, char const*)>
c001133a:	83 c4 10             	add    esp,0x10
c001133d:	85 c0                	test   eax,eax
c001133f:	0f 85 9e 00 00 00    	jne    c00113e3 <SysOpen(regs*)+0x1f9>
c0011345:	83 ec 0c             	sub    esp,0xc
c0011348:	68 14 01 00 00       	push   0x114
c001134d:	e8 67 64 ff ff       	call   c00077b9 <malloc>
c0011352:	83 c4 0c             	add    esp,0xc
c0011355:	89 c6                	mov    esi,eax
c0011357:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001135c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001135f:	50                   	push   eax
c0011360:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011363:	52                   	push   edx
c0011364:	56                   	push   esi
c0011365:	e8 e4 96 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c001136a:	83 c4 10             	add    esp,0x10
c001136d:	85 f6                	test   esi,esi
c001136f:	74 5f                	je     c00113d0 <SysOpen(regs*)+0x1e6>
c0011371:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011374:	89 d0                	mov    eax,edx
c0011376:	25 ff 00 00 00       	and    eax,0xff
c001137b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001137e:	89 d0                	mov    eax,edx
c0011380:	83 e0 01             	and    eax,0x1
c0011383:	f6 c2 02             	test   dl,0x2
c0011386:	74 03                	je     c001138b <SysOpen(regs*)+0x1a1>
c0011388:	83 c8 02             	or     eax,0x2
c001138b:	f6 c2 04             	test   dl,0x4
c001138e:	74 03                	je     c0011393 <SysOpen(regs*)+0x1a9>
c0011390:	83 c8 04             	or     eax,0x4
c0011393:	f6 c2 08             	test   dl,0x8
c0011396:	74 03                	je     c001139b <SysOpen(regs*)+0x1b1>
c0011398:	83 c8 0a             	or     eax,0xa
c001139b:	83 e2 10             	and    edx,0x10
c001139e:	74 03                	je     c00113a3 <SysOpen(regs*)+0x1b9>
c00113a0:	83 c8 12             	or     eax,0x12
c00113a3:	83 ec 08             	sub    esp,0x8
c00113a6:	50                   	push   eax
c00113a7:	56                   	push   esi
c00113a8:	e8 61 97 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c00113ad:	83 c4 10             	add    esp,0x10
c00113b0:	85 c0                	test   eax,eax
c00113b2:	75 1c                	jne    c00113d0 <SysOpen(regs*)+0x1e6>
c00113b4:	83 ec 0c             	sub    esp,0xc
c00113b7:	56                   	push   esi
c00113b8:	e8 7d 7a ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00113bd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113c0:	83 c4 10             	add    esp,0x10
c00113c3:	89 02                	mov    DWORD PTR [edx],eax
c00113c5:	c1 f8 1f             	sar    eax,0x1f
c00113c8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113cb:	e9 b6 fe ff ff       	jmp    c0011286 <SysOpen(regs*)+0x9c>
c00113d0:	81 c4 04 01 00 00    	add    esp,0x104
c00113d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113db:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113e0:	5b                   	pop    ebx
c00113e1:	5e                   	pop    esi
c00113e2:	c3                   	ret    
c00113e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113e6:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00113ec:	e9 8e fe ff ff       	jmp    c001127f <SysOpen(regs*)+0x95>

c00113f1 <KeSystemCall(regs*, void*)>:
c00113f1:	53                   	push   ebx
c00113f2:	83 ec 10             	sub    esp,0x10
c00113f5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00113f9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00113fc:	68 9d e8 01 c0       	push   0xc001e89d
c0011401:	e8 d2 90 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011406:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011409:	83 c4 10             	add    esp,0x10
c001140c:	83 f8 32             	cmp    eax,0x32
c001140f:	77 16                	ja     c0011427 <KeSystemCall(regs*, void*)+0x36>
c0011411:	8b 14 85 20 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe05e0]
c0011418:	85 d2                	test   edx,edx
c001141a:	74 0b                	je     c0011427 <KeSystemCall(regs*, void*)+0x36>
c001141c:	83 ec 0c             	sub    esp,0xc
c001141f:	53                   	push   ebx
c0011420:	ff d2                	call   edx
c0011422:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011425:	eb 0d                	jmp    c0011434 <KeSystemCall(regs*, void*)+0x43>
c0011427:	52                   	push   edx
c0011428:	52                   	push   edx
c0011429:	50                   	push   eax
c001142a:	68 ad e8 01 c0       	push   0xc001e8ad
c001142f:	e8 a4 90 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011434:	83 c4 10             	add    esp,0x10
c0011437:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001143c:	31 d2                	xor    edx,edx
c001143e:	83 c4 08             	add    esp,0x8
c0011441:	5b                   	pop    ebx
c0011442:	c3                   	ret    

c0011443 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011443:	55                   	push   ebp
c0011444:	57                   	push   edi
c0011445:	56                   	push   esi
c0011446:	53                   	push   ebx
c0011447:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001144d:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011454:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011456:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011459:	80 fb 40             	cmp    bl,0x40
c001145c:	75 1b                	jne    c0011479 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001145e:	8a 16                	mov    dl,BYTE PTR [esi]
c0011460:	84 d2                	test   dl,dl
c0011462:	0f 84 f1 00 00 00    	je     c0011559 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011468:	8d 46 01             	lea    eax,[esi+0x1]
c001146b:	80 fa 3a             	cmp    dl,0x3a
c001146e:	74 04                	je     c0011474 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0011470:	89 c6                	mov    esi,eax
c0011472:	eb ea                	jmp    c001145e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011474:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011477:	89 c6                	mov    esi,eax
c0011479:	50                   	push   eax
c001147a:	6a 40                	push   0x40
c001147c:	6a 00                	push   0x0
c001147e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011482:	50                   	push   eax
c0011483:	e8 48 f0 fe ff       	call   c00004d0 <memset>
c0011488:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001148f:	31 c0                	xor    eax,eax
c0011491:	83 c4 10             	add    esp,0x10
c0011494:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011496:	84 c9                	test   cl,cl
c0011498:	0f 84 bb 00 00 00    	je     c0011559 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001149e:	3d c7 00 00 00       	cmp    eax,0xc7
c00114a3:	0f 8f b0 00 00 00    	jg     c0011559 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114a9:	80 f9 0a             	cmp    cl,0xa
c00114ac:	0f 85 98 00 00 00    	jne    c001154a <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00114b2:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00114b7:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00114bb:	a8 df                	test   al,0xdf
c00114bd:	0f 94 c1             	sete   cl
c00114c0:	3c 23                	cmp    al,0x23
c00114c2:	0f 94 c2             	sete   dl
c00114c5:	08 d1                	or     cl,dl
c00114c7:	75 4a                	jne    c0011513 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114c9:	8d 50 f7             	lea    edx,[eax-0x9]
c00114cc:	80 fa 01             	cmp    dl,0x1
c00114cf:	76 42                	jbe    c0011513 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114d1:	3c 5b                	cmp    al,0x5b
c00114d3:	75 42                	jne    c0011517 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00114d5:	80 fb 40             	cmp    bl,0x40
c00114d8:	75 39                	jne    c0011513 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114da:	83 ec 0c             	sub    esp,0xc
c00114dd:	8d 54 24 65          	lea    edx,[esp+0x65]
c00114e1:	52                   	push   edx
c00114e2:	e8 59 f0 fe ff       	call   c0000540 <strlen>
c00114e7:	83 c4 10             	add    esp,0x10
c00114ea:	83 f8 3f             	cmp    eax,0x3f
c00114ed:	77 6a                	ja     c0011559 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114ef:	50                   	push   eax
c00114f0:	50                   	push   eax
c00114f1:	8d 54 24 61          	lea    edx,[esp+0x61]
c00114f5:	52                   	push   edx
c00114f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00114fa:	52                   	push   edx
c00114fb:	e8 00 f1 fe ff       	call   c0000600 <strcpy>
c0011500:	58                   	pop    eax
c0011501:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011505:	52                   	push   edx
c0011506:	e8 35 f0 fe ff       	call   c0000540 <strlen>
c001150b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	31 d2                	xor    edx,edx
c0011515:	eb 3a                	jmp    c0011551 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011517:	80 fb 40             	cmp    bl,0x40
c001151a:	74 06                	je     c0011522 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001151c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011520:	eb 20                	jmp    c0011542 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011522:	50                   	push   eax
c0011523:	50                   	push   eax
c0011524:	55                   	push   ebp
c0011525:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011529:	50                   	push   eax
c001152a:	e8 b1 f1 fe ff       	call   c00006e0 <strcmp>
c001152f:	83 c4 10             	add    esp,0x10
c0011532:	85 c0                	test   eax,eax
c0011534:	75 dd                	jne    c0011513 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011536:	eb e4                	jmp    c001151c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011538:	8d 50 01             	lea    edx,[eax+0x1]
c001153b:	80 f9 3d             	cmp    cl,0x3d
c001153e:	74 1d                	je     c001155d <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0011540:	89 d0                	mov    eax,edx
c0011542:	8a 08                	mov    cl,BYTE PTR [eax]
c0011544:	84 c9                	test   cl,cl
c0011546:	75 f0                	jne    c0011538 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011548:	eb 0f                	jmp    c0011559 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001154a:	8d 50 01             	lea    edx,[eax+0x1]
c001154d:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0011551:	47                   	inc    edi
c0011552:	89 d0                	mov    eax,edx
c0011554:	e9 3b ff ff ff       	jmp    c0011494 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011559:	31 c0                	xor    eax,eax
c001155b:	eb 33                	jmp    c0011590 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001155d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011561:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011564:	50                   	push   eax
c0011565:	50                   	push   eax
c0011566:	8d 44 24 60          	lea    eax,[esp+0x60]
c001156a:	50                   	push   eax
c001156b:	56                   	push   esi
c001156c:	e8 6f f1 fe ff       	call   c00006e0 <strcmp>
c0011571:	83 c4 10             	add    esp,0x10
c0011574:	85 c0                	test   eax,eax
c0011576:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001157a:	75 97                	jne    c0011513 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001157c:	51                   	push   ecx
c001157d:	51                   	push   ecx
c001157e:	52                   	push   edx
c001157f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011586:	e8 75 f0 fe ff       	call   c0000600 <strcpy>
c001158b:	83 c4 10             	add    esp,0x10
c001158e:	b0 01                	mov    al,0x1
c0011590:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011596:	5b                   	pop    ebx
c0011597:	5e                   	pop    esi
c0011598:	5f                   	pop    edi
c0011599:	5d                   	pop    ebp
c001159a:	c3                   	ret    

c001159b <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001159b:	57                   	push   edi
c001159c:	56                   	push   esi
c001159d:	53                   	push   ebx
c001159e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00115a4:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00115ab:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00115b2:	53                   	push   ebx
c00115b3:	e8 88 ef fe ff       	call   c0000540 <strlen>
c00115b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00115bb:	89 c7                	mov    edi,eax
c00115bd:	e8 7e ef fe ff       	call   c0000540 <strlen>
c00115c2:	83 c4 10             	add    esp,0x10
c00115c5:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00115c9:	3d ff 00 00 00       	cmp    eax,0xff
c00115ce:	0f 87 d3 00 00 00    	ja     c00116a7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00115d4:	57                   	push   edi
c00115d5:	57                   	push   edi
c00115d6:	56                   	push   esi
c00115d7:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00115db:	56                   	push   esi
c00115dc:	e8 1f f0 fe ff       	call   c0000600 <strcpy>
c00115e1:	58                   	pop    eax
c00115e2:	5a                   	pop    edx
c00115e3:	68 6a eb 01 c0       	push   0xc001eb6a
c00115e8:	56                   	push   esi
c00115e9:	e8 d2 f1 fe ff       	call   c00007c0 <strcat>
c00115ee:	59                   	pop    ecx
c00115ef:	5f                   	pop    edi
c00115f0:	53                   	push   ebx
c00115f1:	56                   	push   esi
c00115f2:	e8 c9 f1 fe ff       	call   c00007c0 <strcat>
c00115f7:	58                   	pop    eax
c00115f8:	5a                   	pop    edx
c00115f9:	68 c1 e8 01 c0       	push   0xc001e8c1
c00115fe:	56                   	push   esi
c00115ff:	e8 bc f1 fe ff       	call   c00007c0 <strcat>
c0011604:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001160b:	e8 a9 61 ff ff       	call   c00077b9 <malloc>
c0011610:	83 c4 0c             	add    esp,0xc
c0011613:	89 c3                	mov    ebx,eax
c0011615:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001161b:	56                   	push   esi
c001161c:	50                   	push   eax
c001161d:	e8 2c 94 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0011622:	83 c4 10             	add    esp,0x10
c0011625:	85 db                	test   ebx,ebx
c0011627:	74 7e                	je     c00116a7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011629:	51                   	push   ecx
c001162a:	51                   	push   ecx
c001162b:	6a 01                	push   0x1
c001162d:	53                   	push   ebx
c001162e:	e8 db 94 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0011633:	83 c4 10             	add    esp,0x10
c0011636:	85 c0                	test   eax,eax
c0011638:	74 08                	je     c0011642 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001163a:	83 ec 0c             	sub    esp,0xc
c001163d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001163f:	53                   	push   ebx
c0011640:	eb 5f                	jmp    c00116a1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011642:	52                   	push   edx
c0011643:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011647:	50                   	push   eax
c0011648:	8d 44 24 20          	lea    eax,[esp+0x20]
c001164c:	50                   	push   eax
c001164d:	53                   	push   ebx
c001164e:	e8 67 97 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0011653:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011657:	83 c4 10             	add    esp,0x10
c001165a:	89 c1                	mov    ecx,eax
c001165c:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0011660:	74 31                	je     c0011693 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011662:	83 ec 0c             	sub    esp,0xc
c0011665:	50                   	push   eax
c0011666:	e8 4e 61 ff ff       	call   c00077b9 <malloc>
c001166b:	89 c6                	mov    esi,eax
c001166d:	58                   	pop    eax
c001166e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011670:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011674:	52                   	push   edx
c0011675:	56                   	push   esi
c0011676:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001167a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001167e:	53                   	push   ebx
c001167f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011682:	83 c4 20             	add    esp,0x20
c0011685:	85 c0                	test   eax,eax
c0011687:	75 0a                	jne    c0011693 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011689:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001168d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011691:	74 18                	je     c00116ab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0011693:	83 ec 0c             	sub    esp,0xc
c0011696:	53                   	push   ebx
c0011697:	e8 d0 94 ff ff       	call   c000ab6c <File::close()>
c001169c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001169e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116a4:	83 c4 10             	add    esp,0x10
c00116a7:	31 c0                	xor    eax,eax
c00116a9:	eb 3b                	jmp    c00116e6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00116ab:	83 ec 0c             	sub    esp,0xc
c00116ae:	53                   	push   ebx
c00116af:	e8 b8 94 ff ff       	call   c000ab6c <File::close()>
c00116b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116bc:	83 c4 0c             	add    esp,0xc
c00116bf:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116c6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116cd:	56                   	push   esi
c00116ce:	e8 70 fd ff ff       	call   c0011443 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00116d3:	89 34 24             	mov    DWORD PTR [esp],esi
c00116d6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00116da:	e8 ea 60 ff ff       	call   c00077c9 <free>
c00116df:	83 c4 10             	add    esp,0x10
c00116e2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00116e6:	81 c4 20 01 00 00    	add    esp,0x120
c00116ec:	5b                   	pop    ebx
c00116ed:	5e                   	pop    esi
c00116ee:	5f                   	pop    edi
c00116ef:	c3                   	ret    

c00116f0 <Reg::getLine(char*, char*, char*)>:
c00116f0:	57                   	push   edi
c00116f1:	56                   	push   esi
c00116f2:	53                   	push   ebx
c00116f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00116fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00116ff:	57                   	push   edi
c0011700:	56                   	push   esi
c0011701:	53                   	push   ebx
c0011702:	68 c6 e8 01 c0       	push   0xc001e8c6
c0011707:	e8 8f fe ff ff       	call   c001159b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001170c:	83 c4 10             	add    esp,0x10
c001170f:	84 c0                	test   al,al
c0011711:	75 10                	jne    c0011723 <Reg::getLine(char*, char*, char*)+0x33>
c0011713:	57                   	push   edi
c0011714:	56                   	push   esi
c0011715:	53                   	push   ebx
c0011716:	68 eb e8 01 c0       	push   0xc001e8eb
c001171b:	e8 7b fe ff ff       	call   c001159b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011720:	83 c4 10             	add    esp,0x10
c0011723:	5b                   	pop    ebx
c0011724:	5e                   	pop    esi
c0011725:	5f                   	pop    edi
c0011726:	c3                   	ret    

c0011727 <Reg::readInt(char*, char*, int*)>:
c0011727:	55                   	push   ebp
c0011728:	57                   	push   edi
c0011729:	56                   	push   esi
c001172a:	53                   	push   ebx
c001172b:	81 ec f0 00 00 00    	sub    esp,0xf0
c0011731:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011735:	57                   	push   edi
c0011736:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001173d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011744:	e8 a7 ff ff ff       	call   c00116f0 <Reg::getLine(char*, char*, char*)>
c0011749:	83 c4 10             	add    esp,0x10
c001174c:	84 c0                	test   al,al
c001174e:	0f 84 b3 00 00 00    	je     c0011807 <Reg::readInt(char*, char*, int*)+0xe0>
c0011754:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011758:	80 fa 2b             	cmp    dl,0x2b
c001175b:	74 0c                	je     c0011769 <Reg::readInt(char*, char*, int*)+0x42>
c001175d:	80 fa 2d             	cmp    dl,0x2d
c0011760:	75 0e                	jne    c0011770 <Reg::readInt(char*, char*, int*)+0x49>
c0011762:	ba 01 00 00 00       	mov    edx,0x1
c0011767:	eb 0b                	jmp    c0011774 <Reg::readInt(char*, char*, int*)+0x4d>
c0011769:	ba 01 00 00 00       	mov    edx,0x1
c001176e:	eb 02                	jmp    c0011772 <Reg::readInt(char*, char*, int*)+0x4b>
c0011770:	31 d2                	xor    edx,edx
c0011772:	31 c0                	xor    eax,eax
c0011774:	be 0a 00 00 00       	mov    esi,0xa
c0011779:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001177e:	75 20                	jne    c00117a0 <Reg::readInt(char*, char*, int*)+0x79>
c0011780:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0011784:	80 f9 78             	cmp    cl,0x78
c0011787:	75 0a                	jne    c0011793 <Reg::readInt(char*, char*, int*)+0x6c>
c0011789:	83 c2 02             	add    edx,0x2
c001178c:	be 10 00 00 00       	mov    esi,0x10
c0011791:	eb 0d                	jmp    c00117a0 <Reg::readInt(char*, char*, int*)+0x79>
c0011793:	80 f9 62             	cmp    cl,0x62
c0011796:	75 08                	jne    c00117a0 <Reg::readInt(char*, char*, int*)+0x79>
c0011798:	83 c2 02             	add    edx,0x2
c001179b:	be 02 00 00 00       	mov    esi,0x2
c00117a0:	01 d7                	add    edi,edx
c00117a2:	31 d2                	xor    edx,edx
c00117a4:	8a 1f                	mov    bl,BYTE PTR [edi]
c00117a6:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00117aa:	80 fb 0d             	cmp    bl,0xd
c00117ad:	0f 94 c3             	sete   bl
c00117b0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117b5:	0f 94 c1             	sete   cl
c00117b8:	08 cb                	or     bl,cl
c00117ba:	75 3a                	jne    c00117f6 <Reg::readInt(char*, char*, int*)+0xcf>
c00117bc:	0f af d6             	imul   edx,esi
c00117bf:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00117c4:	83 fe 10             	cmp    esi,0x10
c00117c7:	75 26                	jne    c00117ef <Reg::readInt(char*, char*, int*)+0xc8>
c00117c9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117cd:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00117d0:	89 e9                	mov    ecx,ebp
c00117d2:	80 f9 05             	cmp    cl,0x5
c00117d5:	77 06                	ja     c00117dd <Reg::readInt(char*, char*, int*)+0xb6>
c00117d7:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00117db:	eb 16                	jmp    c00117f3 <Reg::readInt(char*, char*, int*)+0xcc>
c00117dd:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117e1:	83 e9 61             	sub    ecx,0x61
c00117e4:	80 f9 05             	cmp    cl,0x5
c00117e7:	77 06                	ja     c00117ef <Reg::readInt(char*, char*, int*)+0xc8>
c00117e9:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00117ed:	eb 04                	jmp    c00117f3 <Reg::readInt(char*, char*, int*)+0xcc>
c00117ef:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00117f3:	47                   	inc    edi
c00117f4:	eb ae                	jmp    c00117a4 <Reg::readInt(char*, char*, int*)+0x7d>
c00117f6:	84 c0                	test   al,al
c00117f8:	74 02                	je     c00117fc <Reg::readInt(char*, char*, int*)+0xd5>
c00117fa:	f7 da                	neg    edx
c00117fc:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011803:	89 10                	mov    DWORD PTR [eax],edx
c0011805:	88 d8                	mov    al,bl
c0011807:	81 c4 ec 00 00 00    	add    esp,0xec
c001180d:	5b                   	pop    ebx
c001180e:	5e                   	pop    esi
c001180f:	5f                   	pop    edi
c0011810:	5d                   	pop    ebp
c0011811:	c3                   	ret    

c0011812 <Reg::readString(char*, char*, char*, int)>:
c0011812:	57                   	push   edi
c0011813:	56                   	push   esi
c0011814:	53                   	push   ebx
c0011815:	81 ec d4 00 00 00    	sub    esp,0xd4
c001181b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011822:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011826:	57                   	push   edi
c0011827:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001182e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011835:	e8 b6 fe ff ff       	call   c00116f0 <Reg::getLine(char*, char*, char*)>
c001183a:	83 c4 10             	add    esp,0x10
c001183d:	89 c6                	mov    esi,eax
c001183f:	84 c0                	test   al,al
c0011841:	74 44                	je     c0011887 <Reg::readString(char*, char*, char*, int)+0x75>
c0011843:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001184a:	31 c0                	xor    eax,eax
c001184c:	4a                   	dec    edx
c001184d:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011850:	84 c9                	test   cl,cl
c0011852:	74 0f                	je     c0011863 <Reg::readString(char*, char*, char*, int)+0x51>
c0011854:	39 c2                	cmp    edx,eax
c0011856:	7e 0b                	jle    c0011863 <Reg::readString(char*, char*, char*, int)+0x51>
c0011858:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001185b:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011860:	40                   	inc    eax
c0011861:	eb ea                	jmp    c001184d <Reg::readString(char*, char*, char*, int)+0x3b>
c0011863:	83 ec 0c             	sub    esp,0xc
c0011866:	53                   	push   ebx
c0011867:	e8 d4 ec fe ff       	call   c0000540 <strlen>
c001186c:	83 c4 10             	add    esp,0x10
c001186f:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011874:	75 11                	jne    c0011887 <Reg::readString(char*, char*, char*, int)+0x75>
c0011876:	83 ec 0c             	sub    esp,0xc
c0011879:	53                   	push   ebx
c001187a:	e8 c1 ec fe ff       	call   c0000540 <strlen>
c001187f:	83 c4 10             	add    esp,0x10
c0011882:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011887:	81 c4 d0 00 00 00    	add    esp,0xd0
c001188d:	89 f0                	mov    eax,esi
c001188f:	5b                   	pop    ebx
c0011890:	5e                   	pop    esi
c0011891:	5f                   	pop    edi
c0011892:	c3                   	ret    

c0011893 <Reg::readBool(char*, char*, bool*)>:
c0011893:	83 ec 20             	sub    esp,0x20
c0011896:	8d 44 24 10          	lea    eax,[esp+0x10]
c001189a:	50                   	push   eax
c001189b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001189f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118a3:	e8 7f fe ff ff       	call   c0011727 <Reg::readInt(char*, char*, int*)>
c00118a8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00118ad:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00118b1:	0f 95 02             	setne  BYTE PTR [edx]
c00118b4:	83 c4 2c             	add    esp,0x2c
c00118b7:	c3                   	ret    

c00118b8 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00118b8:	53                   	push   ebx
c00118b9:	83 ec 1c             	sub    esp,0x1c
c00118bc:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00118c0:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118c4:	50                   	push   eax
c00118c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118cd:	e8 c1 ff ff ff       	call   c0011893 <Reg::readBool(char*, char*, bool*)>
c00118d2:	83 c4 10             	add    esp,0x10
c00118d5:	84 c0                	test   al,al
c00118d7:	74 04                	je     c00118dd <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00118d9:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00118dd:	88 d8                	mov    al,bl
c00118df:	83 c4 18             	add    esp,0x18
c00118e2:	5b                   	pop    ebx
c00118e3:	c3                   	ret    

c00118e4 <Reg::readIntWithDefault(char*, char*, int)>:
c00118e4:	53                   	push   ebx
c00118e5:	83 ec 1c             	sub    esp,0x1c
c00118e8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00118ec:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118f0:	50                   	push   eax
c00118f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118f9:	e8 29 fe ff ff       	call   c0011727 <Reg::readInt(char*, char*, int*)>
c00118fe:	83 c4 10             	add    esp,0x10
c0011901:	84 c0                	test   al,al
c0011903:	74 04                	je     c0011909 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011905:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011909:	89 d8                	mov    eax,ebx
c001190b:	83 c4 18             	add    esp,0x18
c001190e:	5b                   	pop    ebx
c001190f:	c3                   	ret    

c0011910 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011910:	57                   	push   edi
c0011911:	56                   	push   esi
c0011912:	56                   	push   esi
c0011913:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011917:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001191b:	56                   	push   esi
c001191c:	57                   	push   edi
c001191d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011925:	e8 e8 fe ff ff       	call   c0011812 <Reg::readString(char*, char*, char*, int)>
c001192a:	83 c4 10             	add    esp,0x10
c001192d:	84 c0                	test   al,al
c001192f:	75 1a                	jne    c001194b <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011931:	51                   	push   ecx
c0011932:	56                   	push   esi
c0011933:	6a 00                	push   0x0
c0011935:	57                   	push   edi
c0011936:	e8 95 eb fe ff       	call   c00004d0 <memset>
c001193b:	8d 4e ff             	lea    ecx,[esi-0x1]
c001193e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011942:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011944:	83 c4 10             	add    esp,0x10
c0011947:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001194b:	89 f8                	mov    eax,edi
c001194d:	5a                   	pop    edx
c001194e:	5e                   	pop    esi
c001194f:	5f                   	pop    edi
c0011950:	c3                   	ret    

c0011951 <SysEject(regs*)>:
c0011951:	83 ec 0c             	sub    esp,0xc
c0011954:	83 ca ff             	or     edx,0xffffffff
c0011957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001195b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001195e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011963:	83 e9 41             	sub    ecx,0x41
c0011966:	83 f9 19             	cmp    ecx,0x19
c0011969:	77 18                	ja     c0011983 <SysEject(regs*)+0x32>
c001196b:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0011972:	85 c9                	test   ecx,ecx
c0011974:	74 0d                	je     c0011983 <SysEject(regs*)+0x32>
c0011976:	83 ec 0c             	sub    esp,0xc
c0011979:	51                   	push   ecx
c001197a:	e8 17 b2 ff ff       	call   c000cb96 <LogicalDisk::eject()>
c001197f:	83 c4 10             	add    esp,0x10
c0011982:	99                   	cdq    
c0011983:	83 c4 0c             	add    esp,0xc
c0011986:	c3                   	ret    

c0011987 <SysExit(regs*)>:
c0011987:	83 ec 18             	sub    esp,0x18
c001198a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001198e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011991:	e8 26 27 00 00       	call   c00140bc <terminateTask(int)>
c0011996:	83 c8 ff             	or     eax,0xffffffff
c0011999:	83 c4 1c             	add    esp,0x1c
c001199c:	89 c2                	mov    edx,eax
c001199e:	c3                   	ret    

c001199f <SysGetCwd(regs*)>:
c001199f:	83 ec 10             	sub    esp,0x10
c00119a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119a6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00119a9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119b1:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00119b4:	e8 97 8e ff ff       	call   c000a850 <Fs::getcwd(Process*, char*, int)>
c00119b9:	83 c4 1c             	add    esp,0x1c
c00119bc:	99                   	cdq    
c00119bd:	c3                   	ret    

c00119be <SysGetPID(regs*)>:
c00119be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00119c8:	99                   	cdq    
c00119c9:	c3                   	ret    

c00119ca <SysGetRAMData(regs*)>:
c00119ca:	8b 0d e8 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021ee8
c00119d0:	69 05 e4 1e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0021ee4,0xc8
c00119da:	99                   	cdq    
c00119db:	f7 f9                	idiv   ecx
c00119dd:	c1 e0 18             	shl    eax,0x18
c00119e0:	09 c8                	or     eax,ecx
c00119e2:	99                   	cdq    
c00119e3:	c3                   	ret    

c00119e4 <SysGetVGAPtr(regs*)>:
c00119e4:	55                   	push   ebp
c00119e5:	57                   	push   edi
c00119e6:	56                   	push   esi
c00119e7:	53                   	push   ebx
c00119e8:	83 ec 18             	sub    esp,0x18
c00119eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00119ef:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00119f2:	e8 c5 21 00 00       	call   c0013bbc <Thr::processFromPID(int)>
c00119f7:	83 c4 10             	add    esp,0x10
c00119fa:	89 c1                	mov    ecx,eax
c00119fc:	b8 01 00 00 00       	mov    eax,0x1
c0011a01:	85 c9                	test   ecx,ecx
c0011a03:	74 57                	je     c0011a5c <SysGetVGAPtr(regs*)+0x78>
c0011a05:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a0b:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a0f:	74 0c                	je     c0011a1d <SysGetVGAPtr(regs*)+0x39>
c0011a11:	83 ec 0c             	sub    esp,0xc
c0011a14:	55                   	push   ebp
c0011a15:	e8 dd 69 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011a1a:	83 c4 10             	add    esp,0x10
c0011a1d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a20:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a23:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a2a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a2d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a30:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a36:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a39:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a3c:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011a42:	50                   	push   eax
c0011a43:	50                   	push   eax
c0011a44:	68 06 e9 01 c0       	push   0xc001e906
c0011a49:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a4c:	05 a8 0f 00 00       	add    eax,0xfa8
c0011a51:	50                   	push   eax
c0011a52:	e8 a9 eb fe ff       	call   c0000600 <strcpy>
c0011a57:	83 c4 10             	add    esp,0x10
c0011a5a:	31 c0                	xor    eax,eax
c0011a5c:	83 c4 0c             	add    esp,0xc
c0011a5f:	31 d2                	xor    edx,edx
c0011a61:	5b                   	pop    ebx
c0011a62:	5e                   	pop    esi
c0011a63:	5f                   	pop    edi
c0011a64:	5d                   	pop    ebp
c0011a65:	c3                   	ret    

c0011a66 <SysLoadDLL(regs*)>:
c0011a66:	56                   	push   esi
c0011a67:	53                   	push   ebx
c0011a68:	31 d2                	xor    edx,edx
c0011a6a:	51                   	push   ecx
c0011a6b:	b8 01 00 00 00       	mov    eax,0x1
c0011a70:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a74:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011a78:	0f 84 8c 00 00 00    	je     c0011b0a <SysLoadDLL(regs*)+0xa4>
c0011a7e:	83 ec 0c             	sub    esp,0xc
c0011a81:	68 14 01 00 00       	push   0x114
c0011a86:	e8 2e 5d ff ff       	call   c00077b9 <malloc>
c0011a8b:	83 c4 0c             	add    esp,0xc
c0011a8e:	89 c3                	mov    ebx,eax
c0011a90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a95:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011a98:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011a9b:	53                   	push   ebx
c0011a9c:	e8 ad 8f ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0011aa1:	83 c4 10             	add    esp,0x10
c0011aa4:	31 d2                	xor    edx,edx
c0011aa6:	b8 02 00 00 00       	mov    eax,0x2
c0011aab:	85 db                	test   ebx,ebx
c0011aad:	74 5b                	je     c0011b0a <SysLoadDLL(regs*)+0xa4>
c0011aaf:	83 ec 0c             	sub    esp,0xc
c0011ab2:	53                   	push   ebx
c0011ab3:	e8 c4 92 ff ff       	call   c000ad7c <File::exists()>
c0011ab8:	83 c4 10             	add    esp,0x10
c0011abb:	84 c0                	test   al,al
c0011abd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011abf:	75 11                	jne    c0011ad2 <SysLoadDLL(regs*)+0x6c>
c0011ac1:	83 ec 0c             	sub    esp,0xc
c0011ac4:	53                   	push   ebx
c0011ac5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ac8:	83 c4 10             	add    esp,0x10
c0011acb:	b8 03 00 00 00       	mov    eax,0x3
c0011ad0:	eb 36                	jmp    c0011b08 <SysLoadDLL(regs*)+0xa2>
c0011ad2:	83 ec 0c             	sub    esp,0xc
c0011ad5:	53                   	push   ebx
c0011ad6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ad9:	58                   	pop    eax
c0011ada:	5a                   	pop    edx
c0011adb:	6a 00                	push   0x0
c0011add:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011ae0:	e8 86 12 00 00       	call   c0012d6b <Thr::loadDLL(char const*, bool)>
c0011ae5:	83 c4 10             	add    esp,0x10
c0011ae8:	89 c1                	mov    ecx,eax
c0011aea:	31 d2                	xor    edx,edx
c0011aec:	b8 04 00 00 00       	mov    eax,0x4
c0011af1:	85 c9                	test   ecx,ecx
c0011af3:	74 15                	je     c0011b0a <SysLoadDLL(regs*)+0xa4>
c0011af5:	53                   	push   ebx
c0011af6:	53                   	push   ebx
c0011af7:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0011afd:	51                   	push   ecx
c0011afe:	e8 99 14 00 00       	call   c0012f9c <Thr::executeDLL(unsigned long, void*)>
c0011b03:	83 c4 10             	add    esp,0x10
c0011b06:	31 c0                	xor    eax,eax
c0011b08:	31 d2                	xor    edx,edx
c0011b0a:	59                   	pop    ecx
c0011b0b:	5b                   	pop    ebx
c0011b0c:	5e                   	pop    esi
c0011b0d:	c3                   	ret    

c0011b0e <SysRead(regs*)>:
c0011b0e:	57                   	push   edi
c0011b0f:	56                   	push   esi
c0011b10:	53                   	push   ebx
c0011b11:	83 ec 10             	sub    esp,0x10
c0011b14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b18:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b1b:	83 f8 02             	cmp    eax,0x2
c0011b1e:	77 10                	ja     c0011b30 <SysRead(regs*)+0x22>
c0011b20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b28:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b2e:	eb 0e                	jmp    c0011b3e <SysRead(regs*)+0x30>
c0011b30:	83 ec 0c             	sub    esp,0xc
c0011b33:	50                   	push   eax
c0011b34:	e8 f6 75 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011b39:	83 c4 10             	add    esp,0x10
c0011b3c:	89 c1                	mov    ecx,eax
c0011b3e:	83 c8 ff             	or     eax,0xffffffff
c0011b41:	85 c9                	test   ecx,ecx
c0011b43:	89 c2                	mov    edx,eax
c0011b45:	74 28                	je     c0011b6f <SysRead(regs*)+0x61>
c0011b47:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b4f:	31 ff                	xor    edi,edi
c0011b51:	83 ec 0c             	sub    esp,0xc
c0011b54:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011b56:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b5a:	52                   	push   edx
c0011b5b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011b5e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011b61:	57                   	push   edi
c0011b62:	56                   	push   esi
c0011b63:	51                   	push   ecx
c0011b64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011b67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b6b:	83 c4 20             	add    esp,0x20
c0011b6e:	99                   	cdq    
c0011b6f:	83 c4 10             	add    esp,0x10
c0011b72:	5b                   	pop    ebx
c0011b73:	5e                   	pop    esi
c0011b74:	5f                   	pop    edi
c0011b75:	c3                   	ret    

c0011b76 <SysRegisterSignal(regs*)>:
c0011b76:	83 ec 18             	sub    esp,0x18
c0011b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b7d:	6a 00                	push   0x0
c0011b7f:	6a 00                	push   0x0
c0011b81:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011b84:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011b87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b8c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b8f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011b95:	e8 bd e9 ff ff       	call   c0010557 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011b9a:	83 c4 2c             	add    esp,0x2c
c0011b9d:	99                   	cdq    
c0011b9e:	c3                   	ret    

c0011b9f <SysSbrk(regs*)>:
c0011b9f:	56                   	push   esi
c0011ba0:	53                   	push   ebx
c0011ba1:	83 ec 0c             	sub    esp,0xc
c0011ba4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ba8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011bab:	68 10 e9 01 c0       	push   0xc001e910
c0011bb0:	e8 23 89 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011bb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bba:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011bbd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bc0:	83 c4 10             	add    esp,0x10
c0011bc3:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011bc9:	85 db                	test   ebx,ebx
c0011bcb:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011bce:	74 02                	je     c0011bd2 <SysSbrk(regs*)+0x33>
c0011bd0:	79 06                	jns    c0011bd8 <SysSbrk(regs*)+0x39>
c0011bd2:	89 f0                	mov    eax,esi
c0011bd4:	31 d2                	xor    edx,edx
c0011bd6:	eb 2a                	jmp    c0011c02 <SysSbrk(regs*)+0x63>
c0011bd8:	83 c8 ff             	or     eax,0xffffffff
c0011bdb:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011be1:	89 c2                	mov    edx,eax
c0011be3:	77 1d                	ja     c0011c02 <SysSbrk(regs*)+0x63>
c0011be5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011beb:	50                   	push   eax
c0011bec:	c1 ea 0c             	shr    edx,0xc
c0011bef:	68 07 0c 00 00       	push   0xc07
c0011bf4:	52                   	push   edx
c0011bf5:	51                   	push   ecx
c0011bf6:	e8 23 7e ff ff       	call   c0009a1e <VAS::allocatePages(int, int)>
c0011bfb:	89 f0                	mov    eax,esi
c0011bfd:	31 d2                	xor    edx,edx
c0011bff:	83 c4 10             	add    esp,0x10
c0011c02:	59                   	pop    ecx
c0011c03:	5b                   	pop    ebx
c0011c04:	5e                   	pop    esi
c0011c05:	c3                   	ret    

c0011c06 <SysSetCwd(regs*)>:
c0011c06:	83 ec 14             	sub    esp,0x14
c0011c09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c0d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c15:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c18:	e8 fe 91 ff ff       	call   c000ae1b <Fs::setcwd(Process*, char*)>
c0011c1d:	83 c4 1c             	add    esp,0x1c
c0011c20:	99                   	cdq    
c0011c21:	c3                   	ret    

c0011c22 <SysSetTime(regs*)>:
c0011c22:	55                   	push   ebp
c0011c23:	31 c9                	xor    ecx,ecx
c0011c25:	57                   	push   edi
c0011c26:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c2b:	56                   	push   esi
c0011c2c:	53                   	push   ebx
c0011c2d:	31 db                	xor    ebx,ebx
c0011c2f:	83 ec 10             	sub    esp,0x10
c0011c32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c36:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c39:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c3c:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c3f:	89 c2                	mov    edx,eax
c0011c41:	66 81 ef 6c 07       	sub    di,0x76c
c0011c46:	83 e2 1f             	and    edx,0x1f
c0011c49:	c1 e7 10             	shl    edi,0x10
c0011c4c:	42                   	inc    edx
c0011c4d:	c1 e8 05             	shr    eax,0x5
c0011c50:	88 d1                	mov    cl,dl
c0011c52:	31 d2                	xor    edx,edx
c0011c54:	f7 f5                	div    ebp
c0011c56:	89 dd                	mov    ebp,ebx
c0011c58:	88 d5                	mov    ch,dl
c0011c5a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011c60:	0f b7 c1             	movzx  eax,cx
c0011c63:	31 d2                	xor    edx,edx
c0011c65:	09 f8                	or     eax,edi
c0011c67:	bf 3c 00 00 00       	mov    edi,0x3c
c0011c6c:	89 c1                	mov    ecx,eax
c0011c6e:	89 f0                	mov    eax,esi
c0011c70:	f7 f7                	div    edi
c0011c72:	c1 e2 10             	shl    edx,0x10
c0011c75:	09 d5                	or     ebp,edx
c0011c77:	31 d2                	xor    edx,edx
c0011c79:	89 eb                	mov    ebx,ebp
c0011c7b:	f7 f7                	div    edi
c0011c7d:	bf 10 0e 00 00       	mov    edi,0xe10
c0011c82:	88 d7                	mov    bh,dl
c0011c84:	89 f0                	mov    eax,esi
c0011c86:	31 d2                	xor    edx,edx
c0011c88:	f7 f7                	div    edi
c0011c8a:	bf 18 00 00 00       	mov    edi,0x18
c0011c8f:	31 d2                	xor    edx,edx
c0011c91:	f7 f7                	div    edi
c0011c93:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011c98:	88 d3                	mov    bl,dl
c0011c9a:	53                   	push   ebx
c0011c9b:	51                   	push   ecx
c0011c9c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011ca2:	e8 85 99 ff ff       	call   c000b62c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011ca7:	83 c4 1c             	add    esp,0x1c
c0011caa:	83 f0 01             	xor    eax,0x1
c0011cad:	5b                   	pop    ebx
c0011cae:	0f b6 c0             	movzx  eax,al
c0011cb1:	5e                   	pop    esi
c0011cb2:	31 d2                	xor    edx,edx
c0011cb4:	5f                   	pop    edi
c0011cb5:	5d                   	pop    ebp
c0011cb6:	c3                   	ret    

c0011cb7 <SysTimezone(regs*)>:
c0011cb7:	53                   	push   ebx
c0011cb8:	83 ec 08             	sub    esp,0x8
c0011cbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cbf:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011cc3:	75 17                	jne    c0011cdc <SysTimezone(regs*)+0x25>
c0011cc5:	83 ec 0c             	sub    esp,0xc
c0011cc8:	68 1c e9 01 c0       	push   0xc001e91c
c0011ccd:	e8 06 88 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011cd2:	83 c8 ff             	or     eax,0xffffffff
c0011cd5:	83 c4 10             	add    esp,0x10
c0011cd8:	89 c2                	mov    edx,eax
c0011cda:	eb 20                	jmp    c0011cfc <SysTimezone(regs*)+0x45>
c0011cdc:	83 ec 0c             	sub    esp,0xc
c0011cdf:	68 31 e9 01 c0       	push   0xc001e931
c0011ce4:	e8 ef 87 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011ce9:	58                   	pop    eax
c0011cea:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011ced:	e8 96 96 ff ff       	call   c000b388 <User::loadClockSettings(int)>
c0011cf2:	83 c4 10             	add    esp,0x10
c0011cf5:	b8 01 00 00 00       	mov    eax,0x1
c0011cfa:	31 d2                	xor    edx,edx
c0011cfc:	83 c4 08             	add    esp,0x8
c0011cff:	5b                   	pop    ebx
c0011d00:	c3                   	ret    

c0011d01 <SysWrite(regs*)>:
c0011d01:	57                   	push   edi
c0011d02:	56                   	push   esi
c0011d03:	53                   	push   ebx
c0011d04:	83 ec 10             	sub    esp,0x10
c0011d07:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d0b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d0e:	83 f8 02             	cmp    eax,0x2
c0011d11:	77 10                	ja     c0011d23 <SysWrite(regs*)+0x22>
c0011d13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d18:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d1b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d21:	eb 0e                	jmp    c0011d31 <SysWrite(regs*)+0x30>
c0011d23:	83 ec 0c             	sub    esp,0xc
c0011d26:	50                   	push   eax
c0011d27:	e8 03 74 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011d2c:	83 c4 10             	add    esp,0x10
c0011d2f:	89 c1                	mov    ecx,eax
c0011d31:	83 c8 ff             	or     eax,0xffffffff
c0011d34:	85 c9                	test   ecx,ecx
c0011d36:	89 c2                	mov    edx,eax
c0011d38:	74 28                	je     c0011d62 <SysWrite(regs*)+0x61>
c0011d3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d42:	31 ff                	xor    edi,edi
c0011d44:	83 ec 0c             	sub    esp,0xc
c0011d47:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d49:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d4d:	52                   	push   edx
c0011d4e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d51:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d54:	57                   	push   edi
c0011d55:	56                   	push   esi
c0011d56:	51                   	push   ecx
c0011d57:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d5e:	83 c4 20             	add    esp,0x20
c0011d61:	99                   	cdq    
c0011d62:	83 c4 10             	add    esp,0x10
c0011d65:	5b                   	pop    ebx
c0011d66:	5e                   	pop    esi
c0011d67:	5f                   	pop    edi
c0011d68:	c3                   	ret    

c0011d69 <SysWsbe(regs*)>:
c0011d69:	57                   	push   edi
c0011d6a:	b9 0b 00 00 00       	mov    ecx,0xb
c0011d6f:	56                   	push   esi
c0011d70:	be 70 e9 01 c0       	mov    esi,0xc001e970
c0011d75:	53                   	push   ebx
c0011d76:	83 ec 30             	sub    esp,0x30
c0011d79:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011d7d:	fc                   	cld    
c0011d7e:	83 ec 0c             	sub    esp,0xc
c0011d81:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011d83:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011d87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d8c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d8f:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011d95:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d97:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011d9a:	57                   	push   edi
c0011d9b:	e8 a0 e7 fe ff       	call   c0000540 <strlen>
c0011da0:	5a                   	pop    edx
c0011da1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011da5:	52                   	push   edx
c0011da6:	31 d2                	xor    edx,edx
c0011da8:	57                   	push   edi
c0011da9:	52                   	push   edx
c0011daa:	50                   	push   eax
c0011dab:	56                   	push   esi
c0011dac:	ff d3                	call   ebx
c0011dae:	83 c4 14             	add    esp,0x14
c0011db1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011db5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011db8:	e8 ff 22 00 00       	call   c00140bc <terminateTask(int)>
c0011dbd:	83 c4 40             	add    esp,0x40
c0011dc0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011dc5:	5b                   	pop    ebx
c0011dc6:	31 d2                	xor    edx,edx
c0011dc8:	5e                   	pop    esi
c0011dc9:	5f                   	pop    edi
c0011dca:	c3                   	ret    

c0011dcb <SysYield(regs*)>:
c0011dcb:	83 ec 0c             	sub    esp,0xc
c0011dce:	fa                   	cli    
c0011dcf:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011dd5:	e8 be 19 00 00       	call   c0013798 <schedule()>
c0011dda:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011ddf:	48                   	dec    eax
c0011de0:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011de5:	75 01                	jne    c0011de8 <SysYield(regs*)+0x1d>
c0011de7:	fb                   	sti    
c0011de8:	31 c0                	xor    eax,eax
c0011dea:	31 d2                	xor    edx,edx
c0011dec:	83 c4 0c             	add    esp,0xc
c0011def:	c3                   	ret    

c0011df0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011df0:	55                   	push   ebp
c0011df1:	57                   	push   edi
c0011df2:	56                   	push   esi
c0011df3:	53                   	push   ebx
c0011df4:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011dfa:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e02:	0f 95 c2             	setne  dl
c0011e05:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e0d:	0f 94 c0             	sete   al
c0011e10:	84 c2                	test   dl,al
c0011e12:	74 34                	je     c0011e48 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e14:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e1f:	74 27                	je     c0011e48 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e21:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e28:	05 00 10 00 00       	add    eax,0x1000
c0011e2d:	89 c1                	mov    ecx,eax
c0011e2f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e34:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e3a:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e41:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011e48:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011e4f:	83 ec 0c             	sub    esp,0xc
c0011e52:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e58:	6a 01                	push   0x1
c0011e5a:	e8 26 74 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011e5f:	83 c4 10             	add    esp,0x10
c0011e62:	89 c3                	mov    ebx,eax
c0011e64:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011e6a:	0f 86 25 01 00 00    	jbe    c0011f95 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011e70:	c1 ee 0c             	shr    esi,0xc
c0011e73:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011e7a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011e7e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011e86:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011e8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e91:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011e98:	29 ef                	sub    edi,ebp
c0011e9a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011e9e:	0f 83 f8 00 00 00    	jae    c0011f9c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011ea4:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011eaa:	76 05                	jbe    c0011eb1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011eac:	bf 00 10 00 00       	mov    edi,0x1000
c0011eb1:	83 ec 0c             	sub    esp,0xc
c0011eb4:	31 d2                	xor    edx,edx
c0011eb6:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011ebd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ebf:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011ec3:	50                   	push   eax
c0011ec4:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011ec8:	56                   	push   esi
c0011ec9:	52                   	push   edx
c0011eca:	57                   	push   edi
c0011ecb:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011ed2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ed5:	83 c4 20             	add    esp,0x20
c0011ed8:	85 c0                	test   eax,eax
c0011eda:	75 06                	jne    c0011ee2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011edc:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011ee0:	74 13                	je     c0011ef5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011ee2:	83 ec 0c             	sub    esp,0xc
c0011ee5:	53                   	push   ebx
c0011ee6:	e8 ca 76 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011eeb:	83 c4 10             	add    esp,0x10
c0011eee:	31 c0                	xor    eax,eax
c0011ef0:	e9 7c 01 00 00       	jmp    c0012071 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011ef5:	fa                   	cli    
c0011ef6:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011efc:	e8 94 5b ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011f01:	6a 07                	push   0x7
c0011f03:	89 c7                	mov    edi,eax
c0011f05:	53                   	push   ebx
c0011f06:	50                   	push   eax
c0011f07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f0c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f0f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f15:	e8 00 7a ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f1a:	83 c4 0c             	add    esp,0xc
c0011f1d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f24:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f2a:	6a 00                	push   0x0
c0011f2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f31:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f34:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f3a:	e8 4d 78 ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c0011f3f:	58                   	pop    eax
c0011f40:	5a                   	pop    edx
c0011f41:	68 07 0c 00 00       	push   0xc07
c0011f46:	55                   	push   ebp
c0011f47:	57                   	push   edi
c0011f48:	89 df                	mov    edi,ebx
c0011f4a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011f51:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f57:	6a 00                	push   0x0
c0011f59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f5e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f61:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f67:	e8 6e 7d ff ff       	call   c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011f6c:	b9 00 10 00 00       	mov    ecx,0x1000
c0011f71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f73:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011f78:	83 c4 20             	add    esp,0x20
c0011f7b:	48                   	dec    eax
c0011f7c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011f81:	85 c0                	test   eax,eax
c0011f83:	75 01                	jne    c0011f86 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011f85:	fb                   	sti    
c0011f86:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011f8c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011f90:	e9 f1 fe ff ff       	jmp    c0011e86 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011f95:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011f9c:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011fa3:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011fa9:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011faf:	0f 86 ae 00 00 00    	jbe    c0012063 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011fb5:	fa                   	cli    
c0011fb6:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011fbc:	c1 ee 0c             	shr    esi,0xc
c0011fbf:	51                   	push   ecx
c0011fc0:	31 ff                	xor    edi,edi
c0011fc2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011fc9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fcf:	6a 00                	push   0x0
c0011fd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fd6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fd9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fdf:	e8 a8 77 ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c0011fe4:	83 c4 10             	add    esp,0x10
c0011fe7:	e8 a9 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011fec:	47                   	inc    edi
c0011fed:	6a 07                	push   0x7
c0011fef:	53                   	push   ebx
c0011ff0:	50                   	push   eax
c0011ff1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011ff5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011ffb:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011ffe:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012004:	e8 11 79 ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012009:	58                   	pop    eax
c001200a:	5a                   	pop    edx
c001200b:	68 07 0c 00 00       	push   0xc07
c0012010:	55                   	push   ebp
c0012011:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012017:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001201b:	50                   	push   eax
c001201c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012023:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012029:	6a 00                	push   0x0
c001202b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012030:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012033:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012039:	e8 9c 7c ff ff       	call   c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001203e:	83 c4 1c             	add    esp,0x1c
c0012041:	68 00 10 00 00       	push   0x1000
c0012046:	6a 00                	push   0x0
c0012048:	53                   	push   ebx
c0012049:	e8 82 e4 fe ff       	call   c00004d0 <memset>
c001204e:	83 c4 10             	add    esp,0x10
c0012051:	39 fe                	cmp    esi,edi
c0012053:	77 92                	ja     c0011fe7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012055:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001205a:	48                   	dec    eax
c001205b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0012060:	75 01                	jne    c0012063 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012062:	fb                   	sti    
c0012063:	83 ec 0c             	sub    esp,0xc
c0012066:	53                   	push   ebx
c0012067:	e8 49 75 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c001206c:	83 c4 10             	add    esp,0x10
c001206f:	b0 01                	mov    al,0x1
c0012071:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012077:	5b                   	pop    ebx
c0012078:	5e                   	pop    esi
c0012079:	5f                   	pop    edi
c001207a:	5d                   	pop    ebp
c001207b:	c3                   	ret    

c001207c <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001207c:	55                   	push   ebp
c001207d:	57                   	push   edi
c001207e:	56                   	push   esi
c001207f:	53                   	push   ebx
c0012080:	83 ec 48             	sub    esp,0x48
c0012083:	68 14 01 00 00       	push   0x114
c0012088:	e8 2c 57 ff ff       	call   c00077b9 <malloc>
c001208d:	83 c4 0c             	add    esp,0xc
c0012090:	89 c6                	mov    esi,eax
c0012092:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012096:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001209a:	50                   	push   eax
c001209b:	e8 ae 89 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c00120a0:	58                   	pop    eax
c00120a1:	5a                   	pop    edx
c00120a2:	6a 01                	push   0x1
c00120a4:	56                   	push   esi
c00120a5:	e8 64 8a ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c00120aa:	83 c4 10             	add    esp,0x10
c00120ad:	85 c0                	test   eax,eax
c00120af:	0f 85 47 01 00 00    	jne    c00121fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120b5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120bd:	83 ec 0c             	sub    esp,0xc
c00120c0:	6a 34                	push   0x34
c00120c2:	e8 f2 56 ff ff       	call   c00077b9 <malloc>
c00120c7:	89 c3                	mov    ebx,eax
c00120c9:	58                   	pop    eax
c00120ca:	8b 06                	mov    eax,DWORD PTR [esi]
c00120cc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00120d0:	57                   	push   edi
c00120d1:	53                   	push   ebx
c00120d2:	6a 00                	push   0x0
c00120d4:	6a 34                	push   0x34
c00120d6:	56                   	push   esi
c00120d7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120da:	83 c4 20             	add    esp,0x20
c00120dd:	85 c0                	test   eax,eax
c00120df:	0f 85 17 01 00 00    	jne    c00121fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120e5:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00120eb:	0f 85 0b 01 00 00    	jne    c00121fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120f4:	85 c0                	test   eax,eax
c00120f6:	0f 84 00 01 00 00    	je     c00121fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120fc:	31 d2                	xor    edx,edx
c00120fe:	55                   	push   ebp
c00120ff:	52                   	push   edx
c0012100:	50                   	push   eax
c0012101:	56                   	push   esi
c0012102:	e8 c5 8a ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012107:	83 c4 10             	add    esp,0x10
c001210a:	85 c0                	test   eax,eax
c001210c:	0f 85 ea 00 00 00    	jne    c00121fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012112:	83 ec 0c             	sub    esp,0xc
c0012115:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012118:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001211c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012120:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012124:	0f af c2             	imul   eax,edx
c0012127:	50                   	push   eax
c0012128:	e8 8c 56 ff ff       	call   c00077b9 <malloc>
c001212d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001212f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012133:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012136:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001213a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001213e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012142:	0f af c2             	imul   eax,edx
c0012145:	99                   	cdq    
c0012146:	52                   	push   edx
c0012147:	50                   	push   eax
c0012148:	56                   	push   esi
c0012149:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001214c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001214f:	83 c4 20             	add    esp,0x20
c0012152:	85 c0                	test   eax,eax
c0012154:	0f 84 a2 00 00 00    	je     c00121fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001215a:	31 d2                	xor    edx,edx
c001215c:	51                   	push   ecx
c001215d:	52                   	push   edx
c001215e:	50                   	push   eax
c001215f:	56                   	push   esi
c0012160:	e8 67 8a ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012165:	83 c4 10             	add    esp,0x10
c0012168:	85 c0                	test   eax,eax
c001216a:	0f 85 8c 00 00 00    	jne    c00121fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012170:	83 ec 0c             	sub    esp,0xc
c0012173:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012177:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001217b:	31 ed                	xor    ebp,ebp
c001217d:	0f af c2             	imul   eax,edx
c0012180:	50                   	push   eax
c0012181:	e8 33 56 ff ff       	call   c00077b9 <malloc>
c0012186:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012188:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001218c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001218f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012193:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012197:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001219b:	0f af c2             	imul   eax,edx
c001219e:	99                   	cdq    
c001219f:	52                   	push   edx
c00121a0:	50                   	push   eax
c00121a1:	56                   	push   esi
c00121a2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121a5:	83 c4 20             	add    esp,0x20
c00121a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121b0:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00121b4:	0f 86 80 00 00 00    	jbe    c001223a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00121ba:	0f b7 fd             	movzx  edi,bp
c00121bd:	c1 e7 05             	shl    edi,0x5
c00121c0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00121c4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00121c7:	75 6b                	jne    c0012234 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00121c9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121d0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00121d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121d7:	52                   	push   edx
c00121d8:	31 d2                	xor    edx,edx
c00121da:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121dd:	52                   	push   edx
c00121de:	50                   	push   eax
c00121df:	56                   	push   esi
c00121e0:	e8 e7 89 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00121e5:	83 c4 10             	add    esp,0x10
c00121e8:	85 c0                	test   eax,eax
c00121ea:	74 17                	je     c0012203 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00121ec:	83 ec 0c             	sub    esp,0xc
c00121ef:	68 9c e9 01 c0       	push   0xc001e99c
c00121f4:	e8 df 82 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00121f9:	83 c4 10             	add    esp,0x10
c00121fc:	31 c0                	xor    eax,eax
c00121fe:	e9 87 00 00 00       	jmp    c001228a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012203:	83 ec 0c             	sub    esp,0xc
c0012206:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012209:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001220c:	50                   	push   eax
c001220d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012215:	56                   	push   esi
c0012216:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001221a:	e8 d1 fb ff ff       	call   c0011df0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001221f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012223:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012227:	83 c4 20             	add    esp,0x20
c001222a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001222e:	73 04                	jae    c0012234 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012230:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012234:	45                   	inc    ebp
c0012235:	e9 76 ff ff ff       	jmp    c00121b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001223a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001223e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012246:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001224c:	83 ec 0c             	sub    esp,0xc
c001224f:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012255:	25 00 f0 ff ff       	and    eax,0xfffff000
c001225a:	05 00 10 00 00       	add    eax,0x1000
c001225f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012266:	e8 5e 55 ff ff       	call   c00077c9 <free>
c001226b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001226e:	e8 56 55 ff ff       	call   c00077c9 <free>
c0012273:	58                   	pop    eax
c0012274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012278:	e8 4c 55 ff ff       	call   c00077c9 <free>
c001227d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012280:	e8 e7 88 ff ff       	call   c000ab6c <File::close()>
c0012285:	83 c4 10             	add    esp,0x10
c0012288:	b0 01                	mov    al,0x1
c001228a:	83 c4 3c             	add    esp,0x3c
c001228d:	5b                   	pop    ebx
c001228e:	5e                   	pop    esi
c001228f:	5f                   	pop    edi
c0012290:	5d                   	pop    ebp
c0012291:	c3                   	ret    

c0012292 <Thr::runtimeReferenceHelper()>:
c0012292:	83 ec 18             	sub    esp,0x18
c0012295:	68 a4 e9 01 c0       	push   0xc001e9a4
c001229a:	e8 39 82 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001229f:	fa                   	cli    
c00122a0:	83 c4 10             	add    esp,0x10
c00122a3:	eb fe                	jmp    c00122a3 <Thr::runtimeReferenceHelper()+0x11>

c00122a5 <Thr::getAddressOfKernelSymbol(char const*)>:
c00122a5:	57                   	push   edi
c00122a6:	56                   	push   esi
c00122a7:	53                   	push   ebx
c00122a8:	31 db                	xor    ebx,ebx
c00122aa:	39 1d 40 51 02 c0    	cmp    DWORD PTR ds:0xc0025140,ebx
c00122b0:	7e 3c                	jle    c00122ee <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00122b2:	8b 34 9d c0 50 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf40]
c00122b9:	31 ff                	xor    edi,edi
c00122bb:	39 3c 9d c0 4f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb040],edi
c00122c2:	7e 27                	jle    c00122eb <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00122c4:	50                   	push   eax
c00122c5:	50                   	push   eax
c00122c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122ca:	8b 06                	mov    eax,DWORD PTR [esi]
c00122cc:	03 04 9d 40 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdafc0]
c00122d3:	50                   	push   eax
c00122d4:	e8 07 e4 fe ff       	call   c00006e0 <strcmp>
c00122d9:	83 c4 10             	add    esp,0x10
c00122dc:	85 c0                	test   eax,eax
c00122de:	75 05                	jne    c00122e5 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00122e0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00122e3:	eb 0b                	jmp    c00122f0 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00122e5:	83 c6 10             	add    esi,0x10
c00122e8:	47                   	inc    edi
c00122e9:	eb d0                	jmp    c00122bb <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00122eb:	43                   	inc    ebx
c00122ec:	eb bc                	jmp    c00122aa <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00122ee:	31 c0                	xor    eax,eax
c00122f0:	5b                   	pop    ebx
c00122f1:	5e                   	pop    esi
c00122f2:	5f                   	pop    edi
c00122f3:	c3                   	ret    

c00122f4 <Thr::loadKernelSymbolTable(char const*)>:
c00122f4:	55                   	push   ebp
c00122f5:	57                   	push   edi
c00122f6:	56                   	push   esi
c00122f7:	53                   	push   ebx
c00122f8:	83 ec 68             	sub    esp,0x68
c00122fb:	8b 35 90 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025190
c0012301:	68 14 01 00 00       	push   0x114
c0012306:	e8 ae 54 ff ff       	call   c00077b9 <malloc>
c001230b:	83 c4 0c             	add    esp,0xc
c001230e:	89 c3                	mov    ebx,eax
c0012310:	56                   	push   esi
c0012311:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012315:	50                   	push   eax
c0012316:	e8 33 87 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c001231b:	5e                   	pop    esi
c001231c:	5f                   	pop    edi
c001231d:	6a 01                	push   0x1
c001231f:	53                   	push   ebx
c0012320:	e8 e9 87 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0012325:	83 c4 10             	add    esp,0x10
c0012328:	85 c0                	test   eax,eax
c001232a:	74 0a                	je     c0012336 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001232c:	83 ec 0c             	sub    esp,0xc
c001232f:	68 c6 e9 01 c0       	push   0xc001e9c6
c0012334:	eb 34                	jmp    c001236a <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012336:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001233e:	83 ec 0c             	sub    esp,0xc
c0012341:	6a 34                	push   0x34
c0012343:	e8 71 54 ff ff       	call   c00077b9 <malloc>
c0012348:	59                   	pop    ecx
c0012349:	89 c7                	mov    edi,eax
c001234b:	8d 74 24 34          	lea    esi,[esp+0x34]
c001234f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012351:	56                   	push   esi
c0012352:	57                   	push   edi
c0012353:	6a 00                	push   0x0
c0012355:	6a 34                	push   0x34
c0012357:	53                   	push   ebx
c0012358:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001235b:	83 c4 20             	add    esp,0x20
c001235e:	85 c0                	test   eax,eax
c0012360:	74 17                	je     c0012379 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012362:	83 ec 0c             	sub    esp,0xc
c0012365:	68 dd e9 01 c0       	push   0xc001e9dd
c001236a:	e8 ec dd ff ff       	call   c001015b <KePanic(char const*)>
c001236f:	83 c4 10             	add    esp,0x10
c0012372:	31 c0                	xor    eax,eax
c0012374:	e9 31 02 00 00       	jmp    c00125aa <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012379:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001237f:	75 e1                	jne    c0012362 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012381:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012384:	85 c0                	test   eax,eax
c0012386:	74 da                	je     c0012362 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012388:	52                   	push   edx
c0012389:	31 d2                	xor    edx,edx
c001238b:	52                   	push   edx
c001238c:	50                   	push   eax
c001238d:	53                   	push   ebx
c001238e:	e8 39 88 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012393:	83 c4 10             	add    esp,0x10
c0012396:	85 c0                	test   eax,eax
c0012398:	75 c8                	jne    c0012362 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001239a:	83 ec 0c             	sub    esp,0xc
c001239d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123a1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123a5:	31 ed                	xor    ebp,ebp
c00123a7:	0f af c2             	imul   eax,edx
c00123aa:	50                   	push   eax
c00123ab:	e8 09 54 ff ff       	call   c00077b9 <malloc>
c00123b0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123b6:	89 34 24             	mov    DWORD PTR [esp],esi
c00123b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123bd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123c1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123c5:	0f af c2             	imul   eax,edx
c00123c8:	99                   	cdq    
c00123c9:	52                   	push   edx
c00123ca:	50                   	push   eax
c00123cb:	53                   	push   ebx
c00123cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00123cf:	83 c4 20             	add    esp,0x20
c00123d2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00123e2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00123ea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00123f2:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00123f6:	0f 86 aa 00 00 00    	jbe    c00124a6 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00123fc:	0f b7 f5             	movzx  esi,bp
c00123ff:	6b f6 28             	imul   esi,esi,0x28
c0012402:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012406:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012409:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001240d:	50                   	push   eax
c001240e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012412:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012416:	8b 16                	mov    edx,DWORD PTR [esi]
c0012418:	6b c0 28             	imul   eax,eax,0x28
c001241b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001241f:	89 d0                	mov    eax,edx
c0012421:	31 d2                	xor    edx,edx
c0012423:	52                   	push   edx
c0012424:	50                   	push   eax
c0012425:	53                   	push   ebx
c0012426:	e8 a1 87 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c001242b:	83 c4 0c             	add    esp,0xc
c001242e:	6a 20                	push   0x20
c0012430:	6a 00                	push   0x0
c0012432:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012436:	52                   	push   edx
c0012437:	e8 94 e0 fe ff       	call   c00004d0 <memset>
c001243c:	58                   	pop    eax
c001243d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001243f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012443:	51                   	push   ecx
c0012444:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012448:	52                   	push   edx
c0012449:	6a 00                	push   0x0
c001244b:	6a 1f                	push   0x1f
c001244d:	53                   	push   ebx
c001244e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012451:	83 c4 18             	add    esp,0x18
c0012454:	68 f4 e9 01 c0       	push   0xc001e9f4
c0012459:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001245d:	52                   	push   edx
c001245e:	e8 7d e2 fe ff       	call   c00006e0 <strcmp>
c0012463:	83 c4 10             	add    esp,0x10
c0012466:	85 c0                	test   eax,eax
c0012468:	75 0f                	jne    c0012479 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001246a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001246d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012471:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012475:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012479:	50                   	push   eax
c001247a:	50                   	push   eax
c001247b:	68 fc e9 01 c0       	push   0xc001e9fc
c0012480:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012484:	50                   	push   eax
c0012485:	e8 56 e2 fe ff       	call   c00006e0 <strcmp>
c001248a:	83 c4 10             	add    esp,0x10
c001248d:	85 c0                	test   eax,eax
c001248f:	75 0f                	jne    c00124a0 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012491:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012494:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012498:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001249c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124a0:	45                   	inc    ebp
c00124a1:	e9 4c ff ff ff       	jmp    c00123f2 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00124a6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00124ab:	75 10                	jne    c00124bd <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00124ad:	83 ec 0c             	sub    esp,0xc
c00124b0:	68 04 ea 01 c0       	push   0xc001ea04
c00124b5:	e8 a1 dc ff ff       	call   c001015b <KePanic(char const*)>
c00124ba:	83 c4 10             	add    esp,0x10
c00124bd:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00124c2:	75 10                	jne    c00124d4 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00124c4:	83 ec 0c             	sub    esp,0xc
c00124c7:	68 04 ea 01 c0       	push   0xc001ea04
c00124cc:	e8 8a dc ff ff       	call   c001015b <KePanic(char const*)>
c00124d1:	83 c4 10             	add    esp,0x10
c00124d4:	31 d2                	xor    edx,edx
c00124d6:	50                   	push   eax
c00124d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124db:	52                   	push   edx
c00124dc:	50                   	push   eax
c00124dd:	53                   	push   ebx
c00124de:	e8 e9 86 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00124e3:	5a                   	pop    edx
c00124e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00124e8:	e8 cc 52 ff ff       	call   c00077b9 <malloc>
c00124ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00124f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124f5:	31 c9                	xor    ecx,ecx
c00124f7:	5e                   	pop    esi
c00124f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124fa:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00124fe:	55                   	push   ebp
c00124ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012503:	51                   	push   ecx
c0012504:	52                   	push   edx
c0012505:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012509:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001250d:	53                   	push   ebx
c001250e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012511:	83 c4 14             	add    esp,0x14
c0012514:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012518:	e8 9c 52 ff ff       	call   c00077b9 <malloc>
c001251d:	89 c6                	mov    esi,eax
c001251f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012521:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012524:	56                   	push   esi
c0012525:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012529:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001252d:	51                   	push   ecx
c001252e:	52                   	push   edx
c001252f:	53                   	push   ebx
c0012530:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012533:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012537:	8b 15 40 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025140
c001253d:	83 c4 1c             	add    esp,0x1c
c0012540:	c1 e8 04             	shr    eax,0x4
c0012543:	89 04 95 c0 4f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb040],eax
c001254a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001254e:	31 d2                	xor    edx,edx
c0012550:	52                   	push   edx
c0012551:	50                   	push   eax
c0012552:	53                   	push   ebx
c0012553:	e8 74 86 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012558:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001255a:	31 d2                	xor    edx,edx
c001255c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001255f:	56                   	push   esi
c0012560:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012564:	52                   	push   edx
c0012565:	50                   	push   eax
c0012566:	53                   	push   ebx
c0012567:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001256a:	83 c4 14             	add    esp,0x14
c001256d:	53                   	push   ebx
c001256e:	e8 f9 85 ff ff       	call   c000ab6c <File::close()>
c0012573:	5d                   	pop    ebp
c0012574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012578:	e8 4c 52 ff ff       	call   c00077c9 <free>
c001257d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012580:	e8 44 52 ff ff       	call   c00077c9 <free>
c0012585:	a1 40 51 02 c0       	mov    eax,ds:0xc0025140
c001258a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001258e:	8d 50 01             	lea    edx,[eax+0x1]
c0012591:	89 0c 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],ecx
c0012598:	89 34 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],esi
c001259f:	89 15 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edx
c00125a5:	83 c4 10             	add    esp,0x10
c00125a8:	b0 01                	mov    al,0x1
c00125aa:	83 c4 5c             	add    esp,0x5c
c00125ad:	5b                   	pop    ebx
c00125ae:	5e                   	pop    esi
c00125af:	5f                   	pop    edi
c00125b0:	5d                   	pop    ebp
c00125b1:	c3                   	ret    

c00125b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00125b2:	55                   	push   ebp
c00125b3:	57                   	push   edi
c00125b4:	56                   	push   esi
c00125b5:	53                   	push   ebx
c00125b6:	81 ec 68 03 00 00    	sub    esp,0x368
c00125bc:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00125c3:	8b 1d 90 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025190
c00125c9:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00125cd:	68 14 01 00 00       	push   0x114
c00125d2:	e8 e2 51 ff ff       	call   c00077b9 <malloc>
c00125d7:	83 c4 0c             	add    esp,0xc
c00125da:	89 c5                	mov    ebp,eax
c00125dc:	53                   	push   ebx
c00125dd:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00125e4:	50                   	push   eax
c00125e5:	e8 64 84 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c00125ea:	5e                   	pop    esi
c00125eb:	5f                   	pop    edi
c00125ec:	6a 01                	push   0x1
c00125ee:	55                   	push   ebp
c00125ef:	e8 1a 85 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c00125f4:	83 c4 10             	add    esp,0x10
c00125f7:	85 c0                	test   eax,eax
c00125f9:	0f 85 a7 06 00 00    	jne    c0012ca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00125ff:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012607:	83 ec 0c             	sub    esp,0xc
c001260a:	6a 34                	push   0x34
c001260c:	e8 a8 51 ff ff       	call   c00077b9 <malloc>
c0012611:	5b                   	pop    ebx
c0012612:	89 c7                	mov    edi,eax
c0012614:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012618:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001261b:	53                   	push   ebx
c001261c:	57                   	push   edi
c001261d:	6a 00                	push   0x0
c001261f:	6a 34                	push   0x34
c0012621:	55                   	push   ebp
c0012622:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012625:	83 c4 20             	add    esp,0x20
c0012628:	85 c0                	test   eax,eax
c001262a:	0f 85 76 06 00 00    	jne    c0012ca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012630:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012636:	0f 85 6a 06 00 00    	jne    c0012ca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001263c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001263f:	85 c0                	test   eax,eax
c0012641:	0f 84 5f 06 00 00    	je     c0012ca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012647:	31 d2                	xor    edx,edx
c0012649:	51                   	push   ecx
c001264a:	52                   	push   edx
c001264b:	50                   	push   eax
c001264c:	55                   	push   ebp
c001264d:	e8 7a 85 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012652:	83 c4 10             	add    esp,0x10
c0012655:	85 c0                	test   eax,eax
c0012657:	0f 85 49 06 00 00    	jne    c0012ca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001265d:	83 ec 0c             	sub    esp,0xc
c0012660:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012663:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012667:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001266b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001266f:	0f af c2             	imul   eax,edx
c0012672:	50                   	push   eax
c0012673:	e8 41 51 ff ff       	call   c00077b9 <malloc>
c0012678:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001267b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001267f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012682:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012686:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001268a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001268e:	0f af c2             	imul   eax,edx
c0012691:	99                   	cdq    
c0012692:	52                   	push   edx
c0012693:	50                   	push   eax
c0012694:	55                   	push   ebp
c0012695:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012698:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001269b:	83 c4 20             	add    esp,0x20
c001269e:	85 c0                	test   eax,eax
c00126a0:	0f 84 00 06 00 00    	je     c0012ca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126a6:	52                   	push   edx
c00126a7:	31 d2                	xor    edx,edx
c00126a9:	52                   	push   edx
c00126aa:	50                   	push   eax
c00126ab:	55                   	push   ebp
c00126ac:	e8 1b 85 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00126b1:	83 c4 10             	add    esp,0x10
c00126b4:	85 c0                	test   eax,eax
c00126b6:	0f 85 ea 05 00 00    	jne    c0012ca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126bc:	83 ec 0c             	sub    esp,0xc
c00126bf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126c3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126c7:	31 f6                	xor    esi,esi
c00126c9:	0f af c2             	imul   eax,edx
c00126cc:	50                   	push   eax
c00126cd:	e8 e7 50 ff ff       	call   c00077b9 <malloc>
c00126d2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00126d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126e0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126e4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126e8:	0f af c2             	imul   eax,edx
c00126eb:	99                   	cdq    
c00126ec:	52                   	push   edx
c00126ed:	50                   	push   eax
c00126ee:	55                   	push   ebp
c00126ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126f2:	83 c4 20             	add    esp,0x20
c00126f5:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00126f9:	0f 86 8a 00 00 00    	jbe    c0012789 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00126ff:	0f b7 de             	movzx  ebx,si
c0012702:	c1 e3 05             	shl    ebx,0x5
c0012705:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012709:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001270c:	75 75                	jne    c0012783 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001270e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012711:	31 d2                	xor    edx,edx
c0012713:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012717:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001271a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001271e:	50                   	push   eax
c001271f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012722:	52                   	push   edx
c0012723:	50                   	push   eax
c0012724:	55                   	push   ebp
c0012725:	e8 a2 84 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c001272a:	83 c4 10             	add    esp,0x10
c001272d:	85 c0                	test   eax,eax
c001272f:	0f 85 71 05 00 00    	jne    c0012ca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012735:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001273c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001273f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012743:	31 d2                	xor    edx,edx
c0012745:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012749:	83 ec 0c             	sub    esp,0xc
c001274c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012750:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012757:	50                   	push   eax
c0012758:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001275c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012760:	52                   	push   edx
c0012761:	50                   	push   eax
c0012762:	55                   	push   ebp
c0012763:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012766:	83 c4 1c             	add    esp,0x1c
c0012769:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001276c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001276f:	50                   	push   eax
c0012770:	6a 00                	push   0x0
c0012772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012776:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001277a:	50                   	push   eax
c001277b:	e8 50 dd fe ff       	call   c00004d0 <memset>
c0012780:	83 c4 10             	add    esp,0x10
c0012783:	46                   	inc    esi
c0012784:	e9 6c ff ff ff       	jmp    c00126f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012789:	53                   	push   ebx
c001278a:	31 db                	xor    ebx,ebx
c001278c:	68 00 01 00 00       	push   0x100
c0012791:	6a 00                	push   0x0
c0012793:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012797:	50                   	push   eax
c0012798:	e8 33 dd fe ff       	call   c00004d0 <memset>
c001279d:	83 c4 0c             	add    esp,0xc
c00127a0:	68 00 01 00 00       	push   0x100
c00127a5:	6a 00                	push   0x0
c00127a7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00127ae:	50                   	push   eax
c00127af:	e8 1c dd fe ff       	call   c00004d0 <memset>
c00127b4:	83 c4 10             	add    esp,0x10
c00127b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00127bf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00127c7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00127cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127d7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00127df:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00127e3:	0f 86 30 01 00 00    	jbe    c0012919 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00127e9:	0f b7 f3             	movzx  esi,bx
c00127ec:	6b f6 28             	imul   esi,esi,0x28
c00127ef:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00127f3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00127f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127fa:	52                   	push   edx
c00127fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00127ff:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012803:	8b 06                	mov    eax,DWORD PTR [esi]
c0012805:	6b d2 28             	imul   edx,edx,0x28
c0012808:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001280c:	31 d2                	xor    edx,edx
c001280e:	52                   	push   edx
c001280f:	50                   	push   eax
c0012810:	55                   	push   ebp
c0012811:	e8 b6 83 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012816:	83 c4 0c             	add    esp,0xc
c0012819:	6a 20                	push   0x20
c001281b:	6a 00                	push   0x0
c001281d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012824:	51                   	push   ecx
c0012825:	e8 a6 dc fe ff       	call   c00004d0 <memset>
c001282a:	59                   	pop    ecx
c001282b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001282e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012832:	52                   	push   edx
c0012833:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001283a:	51                   	push   ecx
c001283b:	6a 00                	push   0x0
c001283d:	6a 1f                	push   0x1f
c001283f:	55                   	push   ebp
c0012840:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012843:	83 c4 1c             	add    esp,0x1c
c0012846:	6a 09                	push   0x9
c0012848:	68 1e ea 01 c0       	push   0xc001ea1e
c001284d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012854:	51                   	push   ecx
c0012855:	e8 36 db fe ff       	call   c0000390 <memcmp>
c001285a:	83 c4 10             	add    esp,0x10
c001285d:	85 c0                	test   eax,eax
c001285f:	75 21                	jne    c0012882 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012861:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012865:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012869:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001286d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012871:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012874:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001287b:	89 d0                	mov    eax,edx
c001287d:	40                   	inc    eax
c001287e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012882:	50                   	push   eax
c0012883:	6a 09                	push   0x9
c0012885:	68 28 ea 01 c0       	push   0xc001ea28
c001288a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012891:	50                   	push   eax
c0012892:	e8 f9 da fe ff       	call   c0000390 <memcmp>
c0012897:	83 c4 10             	add    esp,0x10
c001289a:	85 c0                	test   eax,eax
c001289c:	75 21                	jne    c00128bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001289e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128a6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128ae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128b1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128b8:	89 d0                	mov    eax,edx
c00128ba:	40                   	inc    eax
c00128bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128bf:	50                   	push   eax
c00128c0:	50                   	push   eax
c00128c1:	68 f4 e9 01 c0       	push   0xc001e9f4
c00128c6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128cd:	50                   	push   eax
c00128ce:	e8 0d de fe ff       	call   c00006e0 <strcmp>
c00128d3:	83 c4 10             	add    esp,0x10
c00128d6:	85 c0                	test   eax,eax
c00128d8:	75 0f                	jne    c00128e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00128da:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00128e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128e9:	50                   	push   eax
c00128ea:	50                   	push   eax
c00128eb:	68 fc e9 01 c0       	push   0xc001e9fc
c00128f0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128f7:	50                   	push   eax
c00128f8:	e8 e3 dd fe ff       	call   c00006e0 <strcmp>
c00128fd:	83 c4 10             	add    esp,0x10
c0012900:	85 c0                	test   eax,eax
c0012902:	75 0f                	jne    c0012913 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012904:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012907:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001290b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001290f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012913:	43                   	inc    ebx
c0012914:	e9 c6 fe ff ff       	jmp    c00127df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012919:	31 d2                	xor    edx,edx
c001291b:	50                   	push   eax
c001291c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012920:	52                   	push   edx
c0012921:	50                   	push   eax
c0012922:	55                   	push   ebp
c0012923:	e8 a4 82 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012928:	58                   	pop    eax
c0012929:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001292d:	e8 87 4e ff ff       	call   c00077b9 <malloc>
c0012932:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012935:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012939:	31 d2                	xor    edx,edx
c001293b:	58                   	pop    eax
c001293c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012940:	53                   	push   ebx
c0012941:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012945:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012949:	52                   	push   edx
c001294a:	50                   	push   eax
c001294b:	55                   	push   ebp
c001294c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001294f:	83 c4 14             	add    esp,0x14
c0012952:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012956:	e8 5e 4e ff ff       	call   c00077b9 <malloc>
c001295b:	31 d2                	xor    edx,edx
c001295d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012961:	83 c4 0c             	add    esp,0xc
c0012964:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012968:	52                   	push   edx
c0012969:	50                   	push   eax
c001296a:	55                   	push   ebp
c001296b:	e8 5c 82 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012970:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012973:	31 d2                	xor    edx,edx
c0012975:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001297c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012980:	52                   	push   edx
c0012981:	50                   	push   eax
c0012982:	55                   	push   ebp
c0012983:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012986:	83 c4 20             	add    esp,0x20
c0012989:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012991:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012995:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012999:	0f 84 0b 03 00 00    	je     c0012caa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001299f:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00129a6:	31 d2                	xor    edx,edx
c00129a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129ac:	c1 e8 03             	shr    eax,0x3
c00129af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00129b3:	51                   	push   ecx
c00129b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129b8:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00129bc:	52                   	push   edx
c00129bd:	50                   	push   eax
c00129be:	55                   	push   ebp
c00129bf:	e8 08 82 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00129c4:	5b                   	pop    ebx
c00129c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129c9:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00129d0:	e8 e4 4d ff ff       	call   c00077b9 <malloc>
c00129d5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129dc:	31 d2                	xor    edx,edx
c00129de:	5e                   	pop    esi
c00129df:	8d 44 24 58          	lea    eax,[esp+0x58]
c00129e3:	50                   	push   eax
c00129e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129ec:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00129f3:	52                   	push   edx
c00129f4:	50                   	push   eax
c00129f5:	55                   	push   ebp
c00129f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129f9:	83 c4 20             	add    esp,0x20
c00129fc:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a04:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a08:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a0c:	0f 8d 7c 02 00 00    	jge    c0012c8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a1a:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a1f:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a2a:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a2e:	89 d8                	mov    eax,ebx
c0012a30:	c1 e8 08             	shr    eax,0x8
c0012a33:	89 c6                	mov    esi,eax
c0012a35:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a39:	c1 e6 04             	shl    esi,0x4
c0012a3c:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a40:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012a43:	85 d2                	test   edx,edx
c0012a45:	0f 85 bf 00 00 00    	jne    c0012b0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a4b:	83 ec 0c             	sub    esp,0xc
c0012a4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a52:	03 06                	add    eax,DWORD PTR [esi]
c0012a54:	50                   	push   eax
c0012a55:	e8 4b f8 ff ff       	call   c00122a5 <Thr::getAddressOfKernelSymbol(char const*)>
c0012a5a:	83 c4 10             	add    esp,0x10
c0012a5d:	89 c2                	mov    edx,eax
c0012a5f:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012a64:	85 c0                	test   eax,eax
c0012a66:	0f 85 9e 00 00 00    	jne    c0012b0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a6c:	83 ec 0c             	sub    esp,0xc
c0012a6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a73:	03 06                	add    eax,DWORD PTR [esi]
c0012a75:	50                   	push   eax
c0012a76:	e8 31 d8 ff ff       	call   c00102ac <KeResolveCompatibilitySymbol(char*)>
c0012a7b:	83 c4 10             	add    esp,0x10
c0012a7e:	89 c2                	mov    edx,eax
c0012a80:	85 c0                	test   eax,eax
c0012a82:	0f 85 82 00 00 00    	jne    c0012b0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a88:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012a8c:	50                   	push   eax
c0012a8d:	50                   	push   eax
c0012a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a92:	03 06                	add    eax,DWORD PTR [esi]
c0012a94:	50                   	push   eax
c0012a95:	68 32 ea 01 c0       	push   0xc001ea32
c0012a9a:	e8 39 7a ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012a9f:	58                   	pop    eax
c0012aa0:	5a                   	pop    edx
c0012aa1:	68 4c ea 01 c0       	push   0xc001ea4c
c0012aa6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012aad:	50                   	push   eax
c0012aae:	e8 4d db fe ff       	call   c0000600 <strcpy>
c0012ab3:	59                   	pop    ecx
c0012ab4:	58                   	pop    eax
c0012ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ab9:	03 06                	add    eax,DWORD PTR [esi]
c0012abb:	50                   	push   eax
c0012abc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ac3:	50                   	push   eax
c0012ac4:	e8 f7 dc fe ff       	call   c00007c0 <strcat>
c0012ac9:	58                   	pop    eax
c0012aca:	5a                   	pop    edx
c0012acb:	68 e2 ea 01 c0       	push   0xc001eae2
c0012ad0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ad7:	50                   	push   eax
c0012ad8:	e8 e3 dc fe ff       	call   c00007c0 <strcat>
c0012add:	83 c4 10             	add    esp,0x10
c0012ae0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012ae5:	0f 84 5d 01 00 00    	je     c0012c48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012aeb:	83 ec 0c             	sub    esp,0xc
c0012aee:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012af5:	50                   	push   eax
c0012af6:	e8 60 d6 ff ff       	call   c001015b <KePanic(char const*)>
c0012afb:	83 c4 10             	add    esp,0x10
c0012afe:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b02:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b06:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b0a:	80 fb 01             	cmp    bl,0x1
c0012b0d:	0f 85 88 00 00 00    	jne    c0012b9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b13:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b1a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b1e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b22:	01 ce                	add    esi,ecx
c0012b24:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b2a:	0f 94 c0             	sete   al
c0012b2d:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b33:	0f 94 c3             	sete   bl
c0012b36:	09 c3                	or     ebx,eax
c0012b38:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b3a:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b3f:	74 41                	je     c0012b82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b41:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b44:	84 db                	test   bl,bl
c0012b46:	75 15                	jne    c0012b5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012b48:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b4c:	66 83 f8 0c          	cmp    ax,0xc
c0012b50:	76 05                	jbe    c0012b57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012b52:	b8 0c 00 00 00       	mov    eax,0xc
c0012b57:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b5b:	76 37                	jbe    c0012b94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b5d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012b61:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b66:	0f 84 dc 00 00 00    	je     c0012c48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b6c:	83 ec 0c             	sub    esp,0xc
c0012b6f:	68 63 ea 01 c0       	push   0xc001ea63
c0012b74:	e8 e2 d5 ff ff       	call   c001015b <KePanic(char const*)>
c0012b79:	83 c4 10             	add    esp,0x10
c0012b7c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012b80:	eb 12                	jmp    c0012b94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b82:	01 c1                	add    ecx,eax
c0012b84:	84 db                	test   bl,bl
c0012b86:	75 0c                	jne    c0012b94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b88:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b8c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b90:	77 02                	ja     c0012b94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b92:	01 d1                	add    ecx,edx
c0012b94:	89 0e                	mov    DWORD PTR [esi],ecx
c0012b96:	e9 ea 00 00 00       	jmp    c0012c85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012b9b:	80 fb 02             	cmp    bl,0x2
c0012b9e:	75 7c                	jne    c0012c1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012ba0:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012ba7:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012bab:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012baf:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012bb5:	74 20                	je     c0012bd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bb7:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012bbd:	74 18                	je     c0012bd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bbf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bc3:	b9 0a 00 00 00       	mov    ecx,0xa
c0012bc8:	66 83 f8 0e          	cmp    ax,0xe
c0012bcc:	77 03                	ja     c0012bd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012bce:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012bd1:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012bd5:	76 1f                	jbe    c0012bf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012bd7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012bdb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012be0:	74 66                	je     c0012c48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012be2:	83 ec 0c             	sub    esp,0xc
c0012be5:	68 7f ea 01 c0       	push   0xc001ea7f
c0012bea:	e8 6c d5 ff ff       	call   c001015b <KePanic(char const*)>
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012bf6:	8b 06                	mov    eax,DWORD PTR [esi]
c0012bf8:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012bfd:	74 13                	je     c0012c12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012bff:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c03:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c0a:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c0e:	01 c8                	add    eax,ecx
c0012c10:	eb 04                	jmp    c0012c16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c12:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c16:	01 c2                	add    edx,eax
c0012c18:	89 16                	mov    DWORD PTR [esi],edx
c0012c1a:	eb 69                	jmp    c0012c85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c1c:	0f b6 db             	movzx  ebx,bl
c0012c1f:	50                   	push   eax
c0012c20:	50                   	push   eax
c0012c21:	53                   	push   ebx
c0012c22:	68 9b ea 01 c0       	push   0xc001ea9b
c0012c27:	e8 ac 78 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c34:	74 12                	je     c0012c48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c36:	83 ec 0c             	sub    esp,0xc
c0012c39:	68 a6 ea 01 c0       	push   0xc001eaa6
c0012c3e:	e8 18 d5 ff ff       	call   c001015b <KePanic(char const*)>
c0012c43:	83 c4 10             	add    esp,0x10
c0012c46:	eb 3d                	jmp    c0012c85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c48:	83 ec 0c             	sub    esp,0xc
c0012c4b:	55                   	push   ebp
c0012c4c:	e8 1b 7f ff ff       	call   c000ab6c <File::close()>
c0012c51:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c54:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c5a:	59                   	pop    ecx
c0012c5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c5f:	e8 65 4b ff ff       	call   c00077c9 <free>
c0012c64:	5b                   	pop    ebx
c0012c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c69:	e8 5b 4b ff ff       	call   c00077c9 <free>
c0012c6e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c71:	e8 53 4b ff ff       	call   c00077c9 <free>
c0012c76:	5e                   	pop    esi
c0012c77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c7b:	e8 49 4b ff ff       	call   c00077c9 <free>
c0012c80:	83 c4 10             	add    esp,0x10
c0012c83:	eb 21                	jmp    c0012ca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012c85:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012c89:	e9 76 fd ff ff       	jmp    c0012a04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012c8e:	83 ec 0c             	sub    esp,0xc
c0012c91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c95:	e8 2f 4b ff ff       	call   c00077c9 <free>
c0012c9a:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012c9e:	83 c4 10             	add    esp,0x10
c0012ca1:	e9 eb fc ff ff       	jmp    c0012991 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012ca6:	31 c0                	xor    eax,eax
c0012ca8:	eb 33                	jmp    c0012cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012caa:	83 ec 0c             	sub    esp,0xc
c0012cad:	55                   	push   ebp
c0012cae:	e8 b9 7e ff ff       	call   c000ab6c <File::close()>
c0012cb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cb6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012cb9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cbc:	58                   	pop    eax
c0012cbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cc1:	e8 03 4b ff ff       	call   c00077c9 <free>
c0012cc6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cc9:	e8 fb 4a ff ff       	call   c00077c9 <free>
c0012cce:	5a                   	pop    edx
c0012ccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cd3:	e8 f1 4a ff ff       	call   c00077c9 <free>
c0012cd8:	83 c4 10             	add    esp,0x10
c0012cdb:	b0 01                	mov    al,0x1
c0012cdd:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012ce3:	5b                   	pop    ebx
c0012ce4:	5e                   	pop    esi
c0012ce5:	5f                   	pop    edi
c0012ce6:	5d                   	pop    ebp
c0012ce7:	c3                   	ret    

c0012ce8 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012ce8:	56                   	push   esi
c0012ce9:	31 d2                	xor    edx,edx
c0012ceb:	53                   	push   ebx
c0012cec:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012cf2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012cf6:	39 d3                	cmp    ebx,edx
c0012cf8:	7e 1b                	jle    c0012d15 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012cfa:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c0012d01:	39 c8                	cmp    eax,ecx
c0012d03:	77 0d                	ja     c0012d12 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d05:	8b 34 95 c0 49 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb640]
c0012d0c:	01 c6                	add    esi,eax
c0012d0e:	39 ce                	cmp    esi,ecx
c0012d10:	77 05                	ja     c0012d17 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d12:	42                   	inc    edx
c0012d13:	eb e1                	jmp    c0012cf6 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d15:	31 c0                	xor    eax,eax
c0012d17:	5b                   	pop    ebx
c0012d18:	5e                   	pop    esi
c0012d19:	c3                   	ret    

c0012d1a <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d1a:	53                   	push   ebx
c0012d1b:	31 c0                	xor    eax,eax
c0012d1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d21:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012d27:	39 c3                	cmp    ebx,eax
c0012d29:	7e 22                	jle    c0012d4d <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d2b:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c0012d32:	39 ca                	cmp    edx,ecx
c0012d34:	77 14                	ja     c0012d4a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d36:	03 14 85 c0 49 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb640]
c0012d3d:	39 ca                	cmp    edx,ecx
c0012d3f:	76 09                	jbe    c0012d4a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d41:	8b 04 85 c0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb240]
c0012d48:	eb 05                	jmp    c0012d4f <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012d4a:	40                   	inc    eax
c0012d4b:	eb da                	jmp    c0012d27 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012d4d:	31 c0                	xor    eax,eax
c0012d4f:	5b                   	pop    ebx
c0012d50:	c3                   	ret    

c0012d51 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012d51:	53                   	push   ebx
c0012d52:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d56:	53                   	push   ebx
c0012d57:	e8 8c ff ff ff       	call   c0012ce8 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012d5c:	5a                   	pop    edx
c0012d5d:	31 d2                	xor    edx,edx
c0012d5f:	85 c0                	test   eax,eax
c0012d61:	74 04                	je     c0012d67 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012d63:	89 da                	mov    edx,ebx
c0012d65:	29 c2                	sub    edx,eax
c0012d67:	89 d0                	mov    eax,edx
c0012d69:	5b                   	pop    ebx
c0012d6a:	c3                   	ret    

c0012d6b <Thr::loadDLL(char const*, bool)>:
c0012d6b:	55                   	push   ebp
c0012d6c:	57                   	push   edi
c0012d6d:	56                   	push   esi
c0012d6e:	53                   	push   ebx
c0012d6f:	81 ec 34 01 00 00    	sub    esp,0x134
c0012d75:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012d7c:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012d83:	56                   	push   esi
c0012d84:	68 be ea 01 c0       	push   0xc001eabe
c0012d89:	e8 4a 77 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012d8e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012d95:	e8 1f 4a ff ff       	call   c00077b9 <malloc>
c0012d9a:	83 c4 0c             	add    esp,0xc
c0012d9d:	89 c3                	mov    ebx,eax
c0012d9f:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0012da5:	56                   	push   esi
c0012da6:	50                   	push   eax
c0012da7:	e8 a2 7c ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0012dac:	83 c4 10             	add    esp,0x10
c0012daf:	85 db                	test   ebx,ebx
c0012db1:	75 3c                	jne    c0012def <Thr::loadDLL(char const*, bool)+0x84>
c0012db3:	89 f8                	mov    eax,edi
c0012db5:	84 c0                	test   al,al
c0012db7:	0f 84 d2 01 00 00    	je     c0012f8f <Thr::loadDLL(char const*, bool)+0x224>
c0012dbd:	55                   	push   ebp
c0012dbe:	55                   	push   ebp
c0012dbf:	68 cf ea 01 c0       	push   0xc001eacf
c0012dc4:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012dc8:	55                   	push   ebp
c0012dc9:	e8 32 d8 fe ff       	call   c0000600 <strcpy>
c0012dce:	58                   	pop    eax
c0012dcf:	5a                   	pop    edx
c0012dd0:	56                   	push   esi
c0012dd1:	55                   	push   ebp
c0012dd2:	e8 e9 d9 fe ff       	call   c00007c0 <strcat>
c0012dd7:	59                   	pop    ecx
c0012dd8:	58                   	pop    eax
c0012dd9:	68 e2 ea 01 c0       	push   0xc001eae2
c0012dde:	55                   	push   ebp
c0012ddf:	e8 dc d9 fe ff       	call   c00007c0 <strcat>
c0012de4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012de7:	e8 6f d3 ff ff       	call   c001015b <KePanic(char const*)>
c0012dec:	83 c4 10             	add    esp,0x10
c0012def:	51                   	push   ecx
c0012df0:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012df4:	50                   	push   eax
c0012df5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012df9:	50                   	push   eax
c0012dfa:	53                   	push   ebx
c0012dfb:	e8 ba 7f ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0012e00:	83 c4 10             	add    esp,0x10
c0012e03:	85 db                	test   ebx,ebx
c0012e05:	74 0c                	je     c0012e13 <Thr::loadDLL(char const*, bool)+0xa8>
c0012e07:	83 ec 0c             	sub    esp,0xc
c0012e0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e0c:	53                   	push   ebx
c0012e0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e10:	83 c4 10             	add    esp,0x10
c0012e13:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e18:	75 0a                	jne    c0012e24 <Thr::loadDLL(char const*, bool)+0xb9>
c0012e1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e1e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e22:	75 3c                	jne    c0012e60 <Thr::loadDLL(char const*, bool)+0xf5>
c0012e24:	89 f8                	mov    eax,edi
c0012e26:	84 c0                	test   al,al
c0012e28:	0f 84 49 01 00 00    	je     c0012f77 <Thr::loadDLL(char const*, bool)+0x20c>
c0012e2e:	51                   	push   ecx
c0012e2f:	51                   	push   ecx
c0012e30:	68 cf ea 01 c0       	push   0xc001eacf
c0012e35:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e39:	53                   	push   ebx
c0012e3a:	e8 c1 d7 fe ff       	call   c0000600 <strcpy>
c0012e3f:	5d                   	pop    ebp
c0012e40:	58                   	pop    eax
c0012e41:	56                   	push   esi
c0012e42:	53                   	push   ebx
c0012e43:	e8 78 d9 fe ff       	call   c00007c0 <strcat>
c0012e48:	58                   	pop    eax
c0012e49:	5a                   	pop    edx
c0012e4a:	68 e2 ea 01 c0       	push   0xc001eae2
c0012e4f:	53                   	push   ebx
c0012e50:	e8 6b d9 fe ff       	call   c00007c0 <strcat>
c0012e55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e58:	e8 fe d2 ff ff       	call   c001015b <KePanic(char const*)>
c0012e5d:	83 c4 10             	add    esp,0x10
c0012e60:	52                   	push   edx
c0012e61:	6a 03                	push   0x3
c0012e63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e67:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012e6b:	05 ff 0f 00 00       	add    eax,0xfff
c0012e70:	83 d2 00             	adc    edx,0x0
c0012e73:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012e77:	50                   	push   eax
c0012e78:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012e7e:	e8 9b 6b ff ff       	call   c0009a1e <VAS::allocatePages(int, int)>
c0012e83:	59                   	pop    ecx
c0012e84:	89 c3                	mov    ebx,eax
c0012e86:	5d                   	pop    ebp
c0012e87:	50                   	push   eax
c0012e88:	68 16 d7 01 c0       	push   0xc001d716
c0012e8d:	e8 46 76 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012e92:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e95:	e8 a6 d6 fe ff       	call   c0000540 <strlen>
c0012e9a:	8b 2d a0 49 02 c0    	mov    ebp,DWORD PTR ds:0xc00249a0
c0012ea0:	40                   	inc    eax
c0012ea1:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ea4:	e8 10 49 ff ff       	call   c00077b9 <malloc>
c0012ea9:	89 04 ad c0 4d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb240],eax
c0012eb0:	58                   	pop    eax
c0012eb1:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012eb6:	5a                   	pop    edx
c0012eb7:	56                   	push   esi
c0012eb8:	ff 34 85 c0 4d 02 c0 	push   DWORD PTR [eax*4-0x3ffdb240]
c0012ebf:	e8 3c d7 fe ff       	call   c0000600 <strcpy>
c0012ec4:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012ec9:	8d 50 01             	lea    edx,[eax+0x1]
c0012ecc:	89 1c 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],ebx
c0012ed3:	89 15 a0 49 02 c0    	mov    DWORD PTR ds:0xc00249a0,edx
c0012ed9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012edd:	83 c4 0c             	add    esp,0xc
c0012ee0:	89 14 85 c0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb640],edx
c0012ee7:	6a 01                	push   0x1
c0012ee9:	53                   	push   ebx
c0012eea:	56                   	push   esi
c0012eeb:	e8 c2 f6 ff ff       	call   c00125b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012ef0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012ef4:	83 c4 10             	add    esp,0x10
c0012ef7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012efc:	0f 85 89 00 00 00    	jne    c0012f8b <Thr::loadDLL(char const*, bool)+0x220>
c0012f02:	89 f8                	mov    eax,edi
c0012f04:	84 c0                	test   al,al
c0012f06:	74 73                	je     c0012f7b <Thr::loadDLL(char const*, bool)+0x210>
c0012f08:	83 ec 0c             	sub    esp,0xc
c0012f0b:	68 e4 ea 01 c0       	push   0xc001eae4
c0012f10:	e8 46 d2 ff ff       	call   c001015b <KePanic(char const*)>
c0012f15:	83 c4 10             	add    esp,0x10
c0012f18:	eb 61                	jmp    c0012f7b <Thr::loadDLL(char const*, bool)+0x210>
c0012f1a:	50                   	push   eax
c0012f1b:	50                   	push   eax
c0012f1c:	89 e8                	mov    eax,ebp
c0012f1e:	c1 e0 0c             	shl    eax,0xc
c0012f21:	01 d8                	add    eax,ebx
c0012f23:	50                   	push   eax
c0012f24:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012f2a:	e8 67 66 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0012f2f:	83 c4 10             	add    esp,0x10
c0012f32:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f34:	a8 60                	test   al,0x60
c0012f36:	75 11                	jne    c0012f49 <Thr::loadDLL(char const*, bool)+0x1de>
c0012f38:	83 ec 0c             	sub    esp,0xc
c0012f3b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f40:	50                   	push   eax
c0012f41:	e8 ed 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012f46:	83 c4 10             	add    esp,0x10
c0012f49:	45                   	inc    ebp
c0012f4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f52:	05 ff 0f 00 00       	add    eax,0xfff
c0012f57:	bf 00 00 00 00       	mov    edi,0x0
c0012f5c:	83 d2 00             	adc    edx,0x0
c0012f5f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f63:	c1 ea 0c             	shr    edx,0xc
c0012f66:	39 c5                	cmp    ebp,eax
c0012f68:	89 d1                	mov    ecx,edx
c0012f6a:	89 f8                	mov    eax,edi
c0012f6c:	19 c8                	sbb    eax,ecx
c0012f6e:	72 aa                	jb     c0012f1a <Thr::loadDLL(char const*, bool)+0x1af>
c0012f70:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f75:	75 18                	jne    c0012f8f <Thr::loadDLL(char const*, bool)+0x224>
c0012f77:	31 db                	xor    ebx,ebx
c0012f79:	eb 14                	jmp    c0012f8f <Thr::loadDLL(char const*, bool)+0x224>
c0012f7b:	83 ec 0c             	sub    esp,0xc
c0012f7e:	68 03 eb 01 c0       	push   0xc001eb03
c0012f83:	e8 d3 d1 ff ff       	call   c001015b <KePanic(char const*)>
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	31 ed                	xor    ebp,ebp
c0012f8d:	eb bb                	jmp    c0012f4a <Thr::loadDLL(char const*, bool)+0x1df>
c0012f8f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012f95:	89 d8                	mov    eax,ebx
c0012f97:	5b                   	pop    ebx
c0012f98:	5e                   	pop    esi
c0012f99:	5f                   	pop    edi
c0012f9a:	5d                   	pop    ebp
c0012f9b:	c3                   	ret    

c0012f9c <Thr::executeDLL(unsigned long, void*)>:
c0012f9c:	56                   	push   esi
c0012f9d:	53                   	push   ebx
c0012f9e:	52                   	push   edx
c0012f9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fa3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fa7:	85 db                	test   ebx,ebx
c0012fa9:	75 10                	jne    c0012fbb <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012fab:	83 ec 0c             	sub    esp,0xc
c0012fae:	68 1f eb 01 c0       	push   0xc001eb1f
c0012fb3:	e8 a3 d1 ff ff       	call   c001015b <KePanic(char const*)>
c0012fb8:	83 c4 10             	add    esp,0x10
c0012fbb:	50                   	push   eax
c0012fbc:	50                   	push   eax
c0012fbd:	53                   	push   ebx
c0012fbe:	68 49 eb 01 c0       	push   0xc001eb49
c0012fc3:	e8 10 75 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012fc8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012fcc:	89 d8                	mov    eax,ebx
c0012fce:	83 c4 14             	add    esp,0x14
c0012fd1:	5b                   	pop    ebx
c0012fd2:	5e                   	pop    esi
c0012fd3:	ff e0                	jmp    eax
c0012fd5:	66 90                	xchg   ax,ax
c0012fd7:	90                   	nop

c0012fd8 <userModeEntryPoint(void*)>:
c0012fd8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0012fdd:	48                   	dec    eax
c0012fde:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0012fe3:	75 03                	jne    c0012fe8 <userModeEntryPoint(void*)+0x10>
c0012fe5:	fb                   	sti    
c0012fe6:	66 90                	xchg   ax,ax
c0012fe8:	fb                   	sti    
c0012fe9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012ff1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012ff7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ffb:	e9 3f d2 fe ff       	jmp    c000023f <goToUsermode>

c0013000 <changeTSS>:
c0013000:	83 ec 14             	sub    esp,0x14
c0013003:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013008:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001300b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013010:	c1 e2 15             	shl    edx,0x15
c0013013:	29 d0                	sub    eax,edx
c0013015:	50                   	push   eax
c0013016:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001301b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013021:	05 7c 11 00 00       	add    eax,0x117c
c0013026:	50                   	push   eax
c0013027:	e8 ac 5b ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c001302c:	83 c4 1c             	add    esp,0x1c
c001302f:	c3                   	ret    

c0013030 <switchToThread(ThreadControlBlock*)>:
c0013030:	57                   	push   edi
c0013031:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013036:	56                   	push   esi
c0013037:	85 c0                	test   eax,eax
c0013039:	53                   	push   ebx
c001303a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001303e:	0f 85 90 00 00 00    	jne    c00130d4 <switchToThread(ThreadControlBlock*)+0xa4>
c0013044:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013047:	80 fa ff             	cmp    dl,0xff
c001304a:	0f 84 80 00 00 00    	je     c00130d0 <switchToThread(ThreadControlBlock*)+0xa0>
c0013050:	81 e2 ff 00 00 00    	and    edx,0xff
c0013056:	b8 00 04 00 00       	mov    eax,0x400
c001305b:	29 d0                	sub    eax,edx
c001305d:	d1 f8                	sar    eax,1
c001305f:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0013062:	66 90                	xchg   ax,ax
c0013064:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013067:	e8 1d 26 00 00       	call   c0015689 <HalQueryPerformanceCounter()>
c001306c:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0013071:	89 15 ac 51 02 c0    	mov    DWORD PTR ds:0xc00251ac,edx
c0013077:	89 c6                	mov    esi,eax
c0013079:	89 d7                	mov    edi,edx
c001307b:	2b 35 98 51 02 c0    	sub    esi,DWORD PTR ds:0xc0025198
c0013081:	a3 98 51 02 c0       	mov    ds:0xc0025198,eax
c0013086:	1b 3d 9c 51 02 c0    	sbb    edi,DWORD PTR ds:0xc002519c
c001308c:	89 35 a0 51 02 c0    	mov    DWORD PTR ds:0xc00251a0,esi
c0013092:	89 3d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edi
c0013098:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001309e:	89 15 9c 51 02 c0    	mov    DWORD PTR ds:0xc002519c,edx
c00130a4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00130a7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00130aa:	01 c6                	add    esi,eax
c00130ac:	11 d7                	adc    edi,edx
c00130ae:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00130b1:	83 ec 0c             	sub    esp,0xc
c00130b4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00130b7:	53                   	push   ebx
c00130b8:	e8 ba d1 fe ff       	call   c0000277 <switchToThreadASM>
c00130bd:	0f 20 c0             	mov    eax,cr0
c00130c0:	83 c8 08             	or     eax,0x8
c00130c3:	0f 22 c0             	mov    cr0,eax
c00130c6:	83 c4 10             	add    esp,0x10
c00130c9:	5b                   	pop    ebx
c00130ca:	5e                   	pop    esi
c00130cb:	5f                   	pop    edi
c00130cc:	c3                   	ret    
c00130cd:	8d 76 00             	lea    esi,[esi+0x0]
c00130d0:	31 c0                	xor    eax,eax
c00130d2:	eb 90                	jmp    c0013064 <switchToThread(ThreadControlBlock*)+0x34>
c00130d4:	5b                   	pop    ebx
c00130d5:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00130df:	5e                   	pop    esi
c00130e0:	5f                   	pop    edi
c00130e1:	c3                   	ret    
c00130e2:	66 90                	xchg   ax,ax

c00130e4 <Process::addArgs(char**)>:
c00130e4:	57                   	push   edi
c00130e5:	56                   	push   esi
c00130e6:	53                   	push   ebx
c00130e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00130eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00130ef:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00130f9:	85 ff                	test   edi,edi
c00130fb:	74 43                	je     c0013140 <Process::addArgs(char**)+0x5c>
c00130fd:	8b 07                	mov    eax,DWORD PTR [edi]
c00130ff:	85 c0                	test   eax,eax
c0013101:	74 3d                	je     c0013140 <Process::addArgs(char**)+0x5c>
c0013103:	31 db                	xor    ebx,ebx
c0013105:	8d 76 00             	lea    esi,[esi+0x0]
c0013108:	83 ec 0c             	sub    esp,0xc
c001310b:	50                   	push   eax
c001310c:	e8 2f d4 fe ff       	call   c0000540 <strlen>
c0013111:	40                   	inc    eax
c0013112:	89 04 24             	mov    DWORD PTR [esp],eax
c0013115:	e8 9f 46 ff ff       	call   c00077b9 <malloc>
c001311a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013121:	5a                   	pop    edx
c0013122:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013125:	59                   	pop    ecx
c0013126:	43                   	inc    ebx
c0013127:	52                   	push   edx
c0013128:	50                   	push   eax
c0013129:	e8 d2 d4 fe ff       	call   c0000600 <strcpy>
c001312e:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013134:	83 c4 10             	add    esp,0x10
c0013137:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001313a:	85 c0                	test   eax,eax
c001313c:	75 ca                	jne    c0013108 <Process::addArgs(char**)+0x24>
c001313e:	66 90                	xchg   ax,ax
c0013140:	5b                   	pop    ebx
c0013141:	5e                   	pop    esi
c0013142:	5f                   	pop    edi
c0013143:	c3                   	ret    

c0013144 <Process::Process(char const*, Process*, char**)>:
c0013144:	56                   	push   esi
c0013145:	53                   	push   ebx
c0013146:	83 ec 14             	sub    esp,0x14
c0013149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001314d:	05 0c 02 00 00       	add    eax,0x20c
c0013152:	bb 07 00 00 00       	mov    ebx,0x7
c0013157:	89 c6                	mov    esi,eax
c0013159:	8d 76 00             	lea    esi,[esi+0x0]
c001315c:	85 db                	test   ebx,ebx
c001315e:	78 14                	js     c0013174 <Process::Process(char const*, Process*, char**)+0x30>
c0013160:	83 ec 0c             	sub    esp,0xc
c0013163:	56                   	push   esi
c0013164:	e8 93 98 00 00       	call   c001c9fc <ThreadControlBlock::ThreadControlBlock()>
c0013169:	83 c4 10             	add    esp,0x10
c001316c:	83 c6 5f             	add    esi,0x5f
c001316f:	4b                   	dec    ebx
c0013170:	eb ea                	jmp    c001315c <Process::Process(char const*, Process*, char**)+0x18>
c0013172:	66 90                	xchg   ax,ax
c0013174:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013178:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001317f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013183:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001318a:	83 ec 0c             	sub    esp,0xc
c001318d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013191:	e8 ba cd ff ff       	call   c000ff50 <Krnl::newProcessEnv(Process*)>
c0013196:	83 c4 10             	add    esp,0x10
c0013199:	89 c2                	mov    edx,eax
c001319b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001319f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00131a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131a9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00131b2:	a1 ec fa 01 c0       	mov    eax,ds:0xc001faec
c00131b7:	8d 50 01             	lea    edx,[eax+0x1]
c00131ba:	89 15 ec fa 01 c0    	mov    DWORD PTR ds:0xc001faec,edx
c00131c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00131c4:	89 02                	mov    DWORD PTR [edx],eax
c00131c6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00131ce:	83 ec 0c             	sub    esp,0xc
c00131d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131d5:	e8 df 45 ff ff       	call   c00077b9 <malloc>
c00131da:	83 c4 10             	add    esp,0x10
c00131dd:	89 c3                	mov    ebx,eax
c00131df:	83 ec 08             	sub    esp,0x8
c00131e2:	6a 00                	push   0x0
c00131e4:	53                   	push   ebx
c00131e5:	e8 de 6b ff ff       	call   c0009dc8 <VAS::VAS(bool)>
c00131ea:	83 c4 10             	add    esp,0x10
c00131ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131f1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00131f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131fb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013209:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001320d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013213:	e8 ae d2 ff ff       	call   c00104c6 <KeInitSignals()>
c0013218:	89 c2                	mov    edx,eax
c001321a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001321e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013224:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013228:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001322e:	85 c0                	test   eax,eax
c0013230:	74 42                	je     c0013274 <Process::Process(char const*, Process*, char**)+0x130>
c0013232:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013236:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001323c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013246:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001324c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013250:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013256:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001325c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013260:	05 0c 01 00 00       	add    eax,0x10c
c0013265:	83 ec 08             	sub    esp,0x8
c0013268:	52                   	push   edx
c0013269:	50                   	push   eax
c001326a:	e8 91 d3 fe ff       	call   c0000600 <strcpy>
c001326f:	83 c4 10             	add    esp,0x10
c0013272:	eb 64                	jmp    c00132d8 <Process::Process(char const*, Process*, char**)+0x194>
c0013274:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c001327c:	83 ec 0c             	sub    esp,0xc
c001327f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013283:	e8 31 45 ff ff       	call   c00077b9 <malloc>
c0013288:	83 c4 10             	add    esp,0x10
c001328b:	89 c3                	mov    ebx,eax
c001328d:	83 ec 08             	sub    esp,0x8
c0013290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013294:	53                   	push   ebx
c0013295:	e8 60 56 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c001329a:	83 c4 10             	add    esp,0x10
c001329d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132a1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00132a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00132b1:	83 ec 0c             	sub    esp,0xc
c00132b4:	50                   	push   eax
c00132b5:	e8 e0 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00132ba:	83 c4 10             	add    esp,0x10
c00132bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132c1:	05 0c 01 00 00       	add    eax,0x10c
c00132c6:	83 ec 08             	sub    esp,0x8
c00132c9:	68 68 eb 01 c0       	push   0xc001eb68
c00132ce:	50                   	push   eax
c00132cf:	e8 2c d3 fe ff       	call   c0000600 <strcpy>
c00132d4:	83 c4 10             	add    esp,0x10
c00132d7:	90                   	nop
c00132d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132dc:	83 c0 0c             	add    eax,0xc
c00132df:	83 ec 08             	sub    esp,0x8
c00132e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132e6:	50                   	push   eax
c00132e7:	e8 14 d3 fe ff       	call   c0000600 <strcpy>
c00132ec:	83 c4 10             	add    esp,0x10
c00132ef:	83 ec 08             	sub    esp,0x8
c00132f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132fa:	e8 e5 fd ff ff       	call   c00130e4 <Process::addArgs(char**)>
c00132ff:	83 c4 10             	add    esp,0x10
c0013302:	83 ec 08             	sub    esp,0x8
c0013305:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013309:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001330d:	e8 6a ed ff ff       	call   c001207c <Thr::loadProgramIntoMemory(Process*, char const*)>
c0013312:	83 c4 10             	add    esp,0x10
c0013315:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013319:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001331d:	83 f0 01             	xor    eax,0x1
c0013320:	88 c2                	mov    dl,al
c0013322:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013326:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001332c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013330:	25 ff 00 00 00       	and    eax,0xff
c0013335:	83 ec 08             	sub    esp,0x8
c0013338:	50                   	push   eax
c0013339:	68 c0 eb 01 c0       	push   0xc001ebc0
c001333e:	e8 95 71 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013343:	83 c4 10             	add    esp,0x10
c0013346:	90                   	nop
c0013347:	83 c4 14             	add    esp,0x14
c001334a:	5b                   	pop    ebx
c001334b:	5e                   	pop    esi
c001334c:	c3                   	ret    
c001334d:	90                   	nop
c001334e:	66 90                	xchg   ax,ax

c0013350 <Process::Process(bool, char const*, Process*, char**)>:
c0013350:	56                   	push   esi
c0013351:	53                   	push   ebx
c0013352:	83 ec 24             	sub    esp,0x24
c0013355:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013359:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001335d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013361:	05 0c 02 00 00       	add    eax,0x20c
c0013366:	bb 07 00 00 00       	mov    ebx,0x7
c001336b:	89 c6                	mov    esi,eax
c001336d:	8d 76 00             	lea    esi,[esi+0x0]
c0013370:	85 db                	test   ebx,ebx
c0013372:	78 14                	js     c0013388 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013374:	83 ec 0c             	sub    esp,0xc
c0013377:	56                   	push   esi
c0013378:	e8 7f 96 00 00       	call   c001c9fc <ThreadControlBlock::ThreadControlBlock()>
c001337d:	83 c4 10             	add    esp,0x10
c0013380:	83 c6 5f             	add    esi,0x5f
c0013383:	4b                   	dec    ebx
c0013384:	eb ea                	jmp    c0013370 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0013386:	66 90                	xchg   ax,ax
c0013388:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001338c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013393:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013397:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001339e:	83 ec 0c             	sub    esp,0xc
c00133a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00133a5:	e8 a6 cb ff ff       	call   c000ff50 <Krnl::newProcessEnv(Process*)>
c00133aa:	83 c4 10             	add    esp,0x10
c00133ad:	89 c2                	mov    edx,eax
c00133af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133b3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00133b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133bd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00133c6:	a1 ec fa 01 c0       	mov    eax,ds:0xc001faec
c00133cb:	8d 50 01             	lea    edx,[eax+0x1]
c00133ce:	89 15 ec fa 01 c0    	mov    DWORD PTR ds:0xc001faec,edx
c00133d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00133d8:	89 02                	mov    DWORD PTR [edx],eax
c00133da:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00133e2:	83 ec 0c             	sub    esp,0xc
c00133e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00133e9:	e8 cb 43 ff ff       	call   c00077b9 <malloc>
c00133ee:	83 c4 10             	add    esp,0x10
c00133f1:	89 c3                	mov    ebx,eax
c00133f3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00133f7:	25 ff 00 00 00       	and    eax,0xff
c00133fc:	83 ec 08             	sub    esp,0x8
c00133ff:	50                   	push   eax
c0013400:	53                   	push   ebx
c0013401:	e8 c2 69 ff ff       	call   c0009dc8 <VAS::VAS(bool)>
c0013406:	83 c4 10             	add    esp,0x10
c0013409:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001340d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013413:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013417:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013421:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013425:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013429:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001342f:	e8 92 d0 ff ff       	call   c00104c6 <KeInitSignals()>
c0013434:	89 c2                	mov    edx,eax
c0013436:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001343a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013440:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013444:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001344a:	85 c0                	test   eax,eax
c001344c:	74 42                	je     c0013490 <Process::Process(bool, char const*, Process*, char**)+0x140>
c001344e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013452:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013458:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001345e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013462:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013468:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001346c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013472:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013478:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001347c:	05 0c 01 00 00       	add    eax,0x10c
c0013481:	83 ec 08             	sub    esp,0x8
c0013484:	52                   	push   edx
c0013485:	50                   	push   eax
c0013486:	e8 75 d1 fe ff       	call   c0000600 <strcpy>
c001348b:	83 c4 10             	add    esp,0x10
c001348e:	eb 64                	jmp    c00134f4 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c0013490:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013498:	83 ec 0c             	sub    esp,0xc
c001349b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001349f:	e8 15 43 ff ff       	call   c00077b9 <malloc>
c00134a4:	83 c4 10             	add    esp,0x10
c00134a7:	89 c3                	mov    ebx,eax
c00134a9:	83 ec 08             	sub    esp,0x8
c00134ac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00134b0:	53                   	push   ebx
c00134b1:	e8 44 54 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00134b6:	83 c4 10             	add    esp,0x10
c00134b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134bd:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00134c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00134cd:	83 ec 0c             	sub    esp,0xc
c00134d0:	50                   	push   eax
c00134d1:	e8 c4 4c ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00134d6:	83 c4 10             	add    esp,0x10
c00134d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134dd:	05 0c 01 00 00       	add    eax,0x10c
c00134e2:	83 ec 08             	sub    esp,0x8
c00134e5:	68 68 eb 01 c0       	push   0xc001eb68
c00134ea:	50                   	push   eax
c00134eb:	e8 10 d1 fe ff       	call   c0000600 <strcpy>
c00134f0:	83 c4 10             	add    esp,0x10
c00134f3:	90                   	nop
c00134f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134f8:	83 c0 0c             	add    eax,0xc
c00134fb:	83 ec 08             	sub    esp,0x8
c00134fe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013502:	50                   	push   eax
c0013503:	e8 f8 d0 fe ff       	call   c0000600 <strcpy>
c0013508:	83 c4 10             	add    esp,0x10
c001350b:	83 ec 08             	sub    esp,0x8
c001350e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013512:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013516:	e8 c9 fb ff ff       	call   c00130e4 <Process::addArgs(char**)>
c001351b:	83 c4 10             	add    esp,0x10
c001351e:	90                   	nop
c001351f:	83 c4 24             	add    esp,0x24
c0013522:	5b                   	pop    ebx
c0013523:	5e                   	pop    esi
c0013524:	c3                   	ret    
c0013525:	8d 76 00             	lea    esi,[esi+0x0]

c0013528 <taskStartupFunction>:
c0013528:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001352d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013530:	c3                   	ret    
c0013531:	90                   	nop
c0013532:	66 90                	xchg   ax,ax

c0013534 <Semaphore::Semaphore(int)>:
c0013534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013538:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001353c:	89 10                	mov    DWORD PTR [eax],edx
c001353e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013542:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001354d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013558:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001355f:	90                   	nop
c0013560:	c3                   	ret    
c0013561:	90                   	nop
c0013562:	66 90                	xchg   ax,ax

c0013564 <Mutex::Mutex()>:
c0013564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013568:	6a 01                	push   0x1
c001356a:	50                   	push   eax
c001356b:	e8 c4 ff ff ff       	call   c0013534 <Semaphore::Semaphore(int)>
c0013570:	83 c4 08             	add    esp,0x8
c0013573:	90                   	nop
c0013574:	c3                   	ret    
c0013575:	90                   	nop
c0013576:	66 90                	xchg   ax,ax

c0013578 <Process::createThread(void (*)(void*), void*, int)>:
c0013578:	57                   	push   edi
c0013579:	31 c9                	xor    ecx,ecx
c001357b:	56                   	push   esi
c001357c:	53                   	push   ebx
c001357d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013581:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013588:	89 f2                	mov    edx,esi
c001358a:	66 90                	xchg   ax,ax
c001358c:	31 c0                	xor    eax,eax
c001358e:	66 89 d0             	mov    ax,dx
c0013591:	83 e2 01             	and    edx,0x1
c0013594:	74 12                	je     c00135a8 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013596:	d1 f8                	sar    eax,1
c0013598:	41                   	inc    ecx
c0013599:	89 c2                	mov    edx,eax
c001359b:	83 f9 10             	cmp    ecx,0x10
c001359e:	75 ec                	jne    c001358c <Process::createThread(void (*)(void*), void*, int)+0x14>
c00135a0:	31 db                	xor    ebx,ebx
c00135a2:	89 d8                	mov    eax,ebx
c00135a4:	5b                   	pop    ebx
c00135a5:	5e                   	pop    esi
c00135a6:	5f                   	pop    edi
c00135a7:	c3                   	ret    
c00135a8:	b8 01 00 00 00       	mov    eax,0x1
c00135ad:	d3 e0                	shl    eax,cl
c00135af:	09 c6                	or     esi,eax
c00135b1:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135b4:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00135bb:	01 c0                	add    eax,eax
c00135bd:	01 c8                	add    eax,ecx
c00135bf:	8d 04 80             	lea    eax,[eax+eax*4]
c00135c2:	01 d8                	add    eax,ebx
c00135c4:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00135cb:	75 0b                	jne    c00135d8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00135cd:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00135d7:	90                   	nop
c00135d8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00135de:	83 ec 08             	sub    esp,0x8
c00135e1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00135e4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135e7:	01 c0                	add    eax,eax
c00135e9:	01 c8                	add    eax,ecx
c00135eb:	8d 3c 80             	lea    edi,[eax+eax*4]
c00135ee:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00135f1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00135f7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00135fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013601:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013607:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001360d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013614:	89 ca                	mov    edx,ecx
c0013616:	f7 da                	neg    edx
c0013618:	c1 e2 15             	shl    edx,0x15
c001361b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013621:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013627:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001362b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013635:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001363b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001363f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013645:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001364f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013659:	53                   	push   ebx
c001365a:	68 84 51 02 c0       	push   0xc0025184
c001365f:	e8 38 91 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013664:	83 c4 10             	add    esp,0x10
c0013667:	89 d8                	mov    eax,ebx
c0013669:	5b                   	pop    ebx
c001366a:	5e                   	pop    esi
c001366b:	5f                   	pop    edi
c001366c:	c3                   	ret    
c001366d:	90                   	nop
c001366e:	66 90                	xchg   ax,ax

c0013670 <Process::createUserThread()>:
c0013670:	83 ec 0c             	sub    esp,0xc
c0013673:	68 80 00 00 00       	push   0x80
c0013678:	6a 00                	push   0x0
c001367a:	68 d8 2f 01 c0       	push   0xc0012fd8
c001367f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013683:	50                   	push   eax
c0013684:	e8 ef fe ff ff       	call   c0013578 <Process::createThread(void (*)(void*), void*, int)>
c0013689:	83 c4 1c             	add    esp,0x1c
c001368c:	c3                   	ret    
c001368d:	8d 76 00             	lea    esi,[esi+0x0]

c0013690 <setupMultitasking(void (*)())>:
c0013690:	56                   	push   esi
c0013691:	53                   	push   ebx
c0013692:	53                   	push   ebx
c0013693:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013697:	eb 13                	jmp    c00136ac <setupMultitasking(void (*)())+0x1c>
c0013699:	8d 76 00             	lea    esi,[esi+0x0]
c001369c:	83 ec 0c             	sub    esp,0xc
c001369f:	68 84 51 02 c0       	push   0xc0025184
c00136a4:	e8 3b 90 00 00       	call   c001c6e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00136a9:	83 c4 10             	add    esp,0x10
c00136ac:	83 ec 0c             	sub    esp,0xc
c00136af:	68 84 51 02 c0       	push   0xc0025184
c00136b4:	e8 07 90 00 00       	call   c001c6c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00136b9:	83 c4 10             	add    esp,0x10
c00136bc:	84 c0                	test   al,al
c00136be:	74 dc                	je     c001369c <setupMultitasking(void (*)())+0xc>
c00136c0:	83 ec 0c             	sub    esp,0xc
c00136c3:	68 24 07 00 00       	push   0x724
c00136c8:	e8 ec 40 ff ff       	call   c00077b9 <malloc>
c00136cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00136d4:	89 c3                	mov    ebx,eax
c00136d6:	6a 00                	push   0x0
c00136d8:	68 6c eb 01 c0       	push   0xc001eb6c
c00136dd:	6a 01                	push   0x1
c00136df:	50                   	push   eax
c00136e0:	e8 6b fc ff ff       	call   c0013350 <Process::Process(bool, char const*, Process*, char**)>
c00136e5:	83 c4 14             	add    esp,0x14
c00136e8:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00136ee:	89 1d 90 51 02 c0    	mov    DWORD PTR ds:0xc0025190,ebx
c00136f4:	50                   	push   eax
c00136f5:	e8 fd 4c ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00136fa:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013702:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001370c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013712:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013715:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001371f:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013725:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001372b:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013735:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001373f:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013749:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001374f:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013755:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001375f:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013765:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001376f:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013775:	5a                   	pop    edx
c0013776:	59                   	pop    ecx
c0013777:	68 68 eb 01 c0       	push   0xc001eb68
c001377c:	50                   	push   eax
c001377d:	e8 7e ce fe ff       	call   c0000600 <strcpy>
c0013782:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013789:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001378d:	83 c4 14             	add    esp,0x14
c0013790:	5b                   	pop    ebx
c0013791:	5e                   	pop    esi
c0013792:	e9 d2 ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0013797:	90                   	nop

c0013798 <schedule()>:
c0013798:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c001379e:	85 d2                	test   edx,edx
c00137a0:	74 0e                	je     c00137b0 <schedule()+0x18>
c00137a2:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00137ac:	c3                   	ret    
c00137ad:	8d 76 00             	lea    esi,[esi+0x0]
c00137b0:	53                   	push   ebx
c00137b1:	83 ec 14             	sub    esp,0x14
c00137b4:	68 84 51 02 c0       	push   0xc0025184
c00137b9:	e8 02 8f 00 00       	call   c001c6c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	84 c0                	test   al,al
c00137c3:	75 3b                	jne    c0013800 <schedule()+0x68>
c00137c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137ca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00137cd:	4a                   	dec    edx
c00137ce:	74 38                	je     c0013808 <schedule()+0x70>
c00137d0:	83 ec 0c             	sub    esp,0xc
c00137d3:	68 84 51 02 c0       	push   0xc0025184
c00137d8:	e8 ff 8e 00 00       	call   c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137dd:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c00137e4:	89 c3                	mov    ebx,eax
c00137e6:	e8 f9 8e 00 00       	call   c001c6e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00137eb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00137f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137f5:	e8 36 f8 ff ff       	call   c0013030 <switchToThread(ThreadControlBlock*)>
c00137fa:	83 c4 10             	add    esp,0x10
c00137fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013800:	83 c4 08             	add    esp,0x8
c0013803:	5b                   	pop    ebx
c0013804:	c3                   	ret    
c0013805:	8d 76 00             	lea    esi,[esi+0x0]
c0013808:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001380f:	83 ec 08             	sub    esp,0x8
c0013812:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013817:	50                   	push   eax
c0013818:	68 84 51 02 c0       	push   0xc0025184
c001381d:	e8 7a 8f 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013822:	83 c4 10             	add    esp,0x10
c0013825:	eb a9                	jmp    c00137d0 <schedule()+0x38>
c0013827:	90                   	nop

c0013828 <Semaphore::tryAcquire()>:
c0013828:	53                   	push   ebx
c0013829:	83 ec 08             	sub    esp,0x8
c001382c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013830:	fa                   	cli    
c0013831:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013836:	8d 50 01             	lea    edx,[eax+0x1]
c0013839:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001383f:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c0013845:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013848:	89 1d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ebx
c001384e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013851:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013853:	7c 33                	jl     c0013888 <Semaphore::tryAcquire()+0x60>
c0013855:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c001385b:	85 d2                	test   edx,edx
c001385d:	75 0d                	jne    c001386c <Semaphore::tryAcquire()+0x44>
c001385f:	8b 15 60 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025160
c0013865:	85 d2                	test   edx,edx
c0013867:	75 6b                	jne    c00138d4 <Semaphore::tryAcquire()+0xac>
c0013869:	8d 76 00             	lea    esi,[esi+0x0]
c001386c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013871:	85 c0                	test   eax,eax
c0013873:	74 0b                	je     c0013880 <Semaphore::tryAcquire()+0x58>
c0013875:	8d 76 00             	lea    esi,[esi+0x0]
c0013878:	31 c0                	xor    eax,eax
c001387a:	83 c4 08             	add    esp,0x8
c001387d:	5b                   	pop    ebx
c001387e:	c3                   	ret    
c001387f:	90                   	nop
c0013880:	fb                   	sti    
c0013881:	83 c4 08             	add    esp,0x8
c0013884:	5b                   	pop    ebx
c0013885:	c3                   	ret    
c0013886:	66 90                	xchg   ax,ax
c0013888:	43                   	inc    ebx
c0013889:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c001388f:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013892:	85 d2                	test   edx,edx
c0013894:	75 22                	jne    c00138b8 <Semaphore::tryAcquire()+0x90>
c0013896:	8b 0d 60 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025160
c001389c:	85 c9                	test   ecx,ecx
c001389e:	74 18                	je     c00138b8 <Semaphore::tryAcquire()+0x90>
c00138a0:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00138aa:	e8 e9 fe ff ff       	call   c0013798 <schedule()>
c00138af:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00138b4:	48                   	dec    eax
c00138b5:	8d 76 00             	lea    esi,[esi+0x0]
c00138b8:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00138bd:	85 c0                	test   eax,eax
c00138bf:	75 0b                	jne    c00138cc <Semaphore::tryAcquire()+0xa4>
c00138c1:	fb                   	sti    
c00138c2:	b0 01                	mov    al,0x1
c00138c4:	83 c4 08             	add    esp,0x8
c00138c7:	5b                   	pop    ebx
c00138c8:	c3                   	ret    
c00138c9:	8d 76 00             	lea    esi,[esi+0x0]
c00138cc:	b0 01                	mov    al,0x1
c00138ce:	83 c4 08             	add    esp,0x8
c00138d1:	5b                   	pop    ebx
c00138d2:	c3                   	ret    
c00138d3:	90                   	nop
c00138d4:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00138de:	e8 b5 fe ff ff       	call   c0013798 <schedule()>
c00138e3:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00138e8:	48                   	dec    eax
c00138e9:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00138ee:	85 c0                	test   eax,eax
c00138f0:	75 86                	jne    c0013878 <Semaphore::tryAcquire()+0x50>
c00138f2:	eb 8c                	jmp    c0013880 <Semaphore::tryAcquire()+0x58>

c00138f4 <Semaphore::assertLocked(char const*)>:
c00138f4:	83 ec 0c             	sub    esp,0xc
c00138f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138fb:	fa                   	cli    
c00138fc:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013902:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013907:	8d 48 01             	lea    ecx,[eax+0x1]
c001390a:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013910:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013912:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013915:	7c 29                	jl     c0013940 <Semaphore::assertLocked(char const*)+0x4c>
c0013917:	90                   	nop
c0013918:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001391d:	85 c0                	test   eax,eax
c001391f:	75 0b                	jne    c001392c <Semaphore::assertLocked(char const*)+0x38>
c0013921:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013926:	85 c0                	test   eax,eax
c0013928:	75 2e                	jne    c0013958 <Semaphore::assertLocked(char const*)+0x64>
c001392a:	66 90                	xchg   ax,ax
c001392c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013931:	48                   	dec    eax
c0013932:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013937:	75 03                	jne    c001393c <Semaphore::assertLocked(char const*)+0x48>
c0013939:	fb                   	sti    
c001393a:	66 90                	xchg   ax,ax
c001393c:	83 c4 0c             	add    esp,0xc
c001393f:	c3                   	ret    
c0013940:	83 ec 0c             	sub    esp,0xc
c0013943:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013947:	52                   	push   edx
c0013948:	e8 0e c8 ff ff       	call   c001015b <KePanic(char const*)>
c001394d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013952:	83 c4 10             	add    esp,0x10
c0013955:	48                   	dec    eax
c0013956:	eb c0                	jmp    c0013918 <Semaphore::assertLocked(char const*)+0x24>
c0013958:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013962:	e8 31 fe ff ff       	call   c0013798 <schedule()>
c0013967:	eb c3                	jmp    c001392c <Semaphore::assertLocked(char const*)+0x38>
c0013969:	8d 76 00             	lea    esi,[esi+0x0]

c001396c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001396c:	83 ec 0c             	sub    esp,0xc
c001396f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013974:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013978:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001397b:	e8 18 fe ff ff       	call   c0013798 <schedule()>
c0013980:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013985:	48                   	dec    eax
c0013986:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001398b:	75 03                	jne    c0013990 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001398d:	fb                   	sti    
c001398e:	66 90                	xchg   ax,ax
c0013990:	83 c4 0c             	add    esp,0xc
c0013993:	c3                   	ret    

c0013994 <blockTask(TaskState)>:
c0013994:	83 ec 0c             	sub    esp,0xc
c0013997:	fa                   	cli    
c0013998:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001399e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00139aa:	e8 e9 fd ff ff       	call   c0013798 <schedule()>
c00139af:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00139b4:	48                   	dec    eax
c00139b5:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00139ba:	75 04                	jne    c00139c0 <blockTask(TaskState)+0x2c>
c00139bc:	fb                   	sti    
c00139bd:	8d 76 00             	lea    esi,[esi+0x0]
c00139c0:	83 c4 0c             	add    esp,0xc
c00139c3:	c3                   	ret    

c00139c4 <waitTask(int, int*, int)>:
c00139c4:	83 ec 18             	sub    esp,0x18
c00139c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00139d0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00139d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139dc:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00139df:	6a 07                	push   0x7
c00139e1:	e8 ae ff ff ff       	call   c0013994 <blockTask(TaskState)>
c00139e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139eb:	83 c4 10             	add    esp,0x10
c00139ee:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00139f1:	85 d2                	test   edx,edx
c00139f3:	74 0b                	je     c0013a00 <waitTask(int, int*, int)+0x3c>
c00139f5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00139f8:	89 02                	mov    DWORD PTR [edx],eax
c00139fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139ff:	90                   	nop
c0013a00:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013a03:	83 c4 0c             	add    esp,0xc
c0013a06:	c3                   	ret    
c0013a07:	90                   	nop

c0013a08 <milliTenthSleepUntil(unsigned int)>:
c0013a08:	83 ec 0c             	sub    esp,0xc
c0013a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0f:	39 05 8c 44 02 c0    	cmp    DWORD PTR ds:0xc002448c,eax
c0013a15:	76 05                	jbe    c0013a1c <milliTenthSleepUntil(unsigned int)+0x14>
c0013a17:	90                   	nop
c0013a18:	83 c4 0c             	add    esp,0xc
c0013a1b:	c3                   	ret    
c0013a1c:	fa                   	cli    
c0013a1d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013a23:	83 ec 08             	sub    esp,0x8
c0013a26:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0013a2c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a32:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013a35:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a3b:	52                   	push   edx
c0013a3c:	68 78 51 02 c0       	push   0xc0025178
c0013a41:	e8 56 8d 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a46:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013a4d:	e8 42 ff ff ff       	call   c0013994 <blockTask(TaskState)>
c0013a52:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013a57:	83 c4 10             	add    esp,0x10
c0013a5a:	48                   	dec    eax
c0013a5b:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013a60:	85 c0                	test   eax,eax
c0013a62:	75 0c                	jne    c0013a70 <milliTenthSleepUntil(unsigned int)+0x68>
c0013a64:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013a69:	85 c0                	test   eax,eax
c0013a6b:	75 17                	jne    c0013a84 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a70:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a75:	48                   	dec    eax
c0013a76:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a7b:	75 9b                	jne    c0013a18 <milliTenthSleepUntil(unsigned int)+0x10>
c0013a7d:	fb                   	sti    
c0013a7e:	83 c4 0c             	add    esp,0xc
c0013a81:	c3                   	ret    
c0013a82:	66 90                	xchg   ax,ax
c0013a84:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013a8e:	e8 05 fd ff ff       	call   c0013798 <schedule()>
c0013a93:	eb db                	jmp    c0013a70 <milliTenthSleepUntil(unsigned int)+0x68>
c0013a95:	8d 76 00             	lea    esi,[esi+0x0]

c0013a98 <milliTenthSleep(unsigned int)>:
c0013a98:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c0013a9d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013aa1:	e9 62 ff ff ff       	jmp    c0013a08 <milliTenthSleepUntil(unsigned int)>
c0013aa6:	66 90                	xchg   ax,ax

c0013aa8 <sleep(unsigned int)>:
c0013aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013aac:	8d 04 80             	lea    eax,[eax+eax*4]
c0013aaf:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ab2:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ab5:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ab8:	c1 e0 04             	shl    eax,0x4
c0013abb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013abf:	eb d7                	jmp    c0013a98 <milliTenthSleep(unsigned int)>
c0013ac1:	90                   	nop
c0013ac2:	66 90                	xchg   ax,ax

c0013ac4 <Semaphore::acquire()>:
c0013ac4:	83 ec 0c             	sub    esp,0xc
c0013ac7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013acb:	fa                   	cli    
c0013acc:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013ad1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013ad7:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ada:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013ae0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013ae3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013ae5:	7d 2d                	jge    c0013b14 <Semaphore::acquire()+0x50>
c0013ae7:	41                   	inc    ecx
c0013ae8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013aeb:	90                   	nop
c0013aec:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013af1:	85 c0                	test   eax,eax
c0013af3:	75 0b                	jne    c0013b00 <Semaphore::acquire()+0x3c>
c0013af5:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013afa:	85 c0                	test   eax,eax
c0013afc:	75 62                	jne    c0013b60 <Semaphore::acquire()+0x9c>
c0013afe:	66 90                	xchg   ax,ax
c0013b00:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013b05:	48                   	dec    eax
c0013b06:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013b0b:	75 03                	jne    c0013b10 <Semaphore::acquire()+0x4c>
c0013b0d:	fb                   	sti    
c0013b0e:	66 90                	xchg   ax,ax
c0013b10:	83 c4 0c             	add    esp,0xc
c0013b13:	c3                   	ret    
c0013b14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b19:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013b20:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013b23:	85 c9                	test   ecx,ecx
c0013b25:	74 4d                	je     c0013b74 <Semaphore::acquire()+0xb0>
c0013b27:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013b2a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b30:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013b33:	90                   	nop
c0013b34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b39:	83 ec 0c             	sub    esp,0xc
c0013b3c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013b3f:	68 e8 eb 01 c0       	push   0xc001ebe8
c0013b44:	e8 8f 69 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013b49:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013b50:	e8 3f fe ff ff       	call   c0013994 <blockTask(TaskState)>
c0013b55:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013b5a:	83 c4 10             	add    esp,0x10
c0013b5d:	48                   	dec    eax
c0013b5e:	eb 8c                	jmp    c0013aec <Semaphore::acquire()+0x28>
c0013b60:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013b6a:	e8 29 fc ff ff       	call   c0013798 <schedule()>
c0013b6f:	eb 8f                	jmp    c0013b00 <Semaphore::acquire()+0x3c>
c0013b71:	8d 76 00             	lea    esi,[esi+0x0]
c0013b74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b79:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013b7c:	eb b6                	jmp    c0013b34 <Semaphore::acquire()+0x70>
c0013b7e:	66 90                	xchg   ax,ax

c0013b80 <taskReturned>:
c0013b80:	83 ec 18             	sub    esp,0x18
c0013b83:	68 08 ec 01 c0       	push   0xc001ec08
c0013b88:	e8 ce c5 ff ff       	call   c001015b <KePanic(char const*)>
c0013b8d:	83 c4 10             	add    esp,0x10
c0013b90:	83 ec 0c             	sub    esp,0xc
c0013b93:	6a 02                	push   0x2
c0013b95:	e8 fa fd ff ff       	call   c0013994 <blockTask(TaskState)>
c0013b9a:	fa                   	cli    
c0013b9b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013ba1:	e8 f2 fb ff ff       	call   c0013798 <schedule()>
c0013ba6:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013bab:	83 c4 10             	add    esp,0x10
c0013bae:	48                   	dec    eax
c0013baf:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013bb4:	85 c0                	test   eax,eax
c0013bb6:	75 d8                	jne    c0013b90 <taskReturned+0x10>
c0013bb8:	fb                   	sti    
c0013bb9:	eb d5                	jmp    c0013b90 <taskReturned+0x10>
c0013bbb:	90                   	nop

c0013bbc <Thr::processFromPID(int)>:
c0013bbc:	57                   	push   edi
c0013bbd:	56                   	push   esi
c0013bbe:	53                   	push   ebx
c0013bbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bc3:	fa                   	cli    
c0013bc4:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013bca:	83 ec 0c             	sub    esp,0xc
c0013bcd:	68 84 51 02 c0       	push   0xc0025184
c0013bd2:	e8 05 8b 00 00       	call   c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bd7:	83 c4 10             	add    esp,0x10
c0013bda:	89 c7                	mov    edi,eax
c0013bdc:	eb 16                	jmp    c0013bf4 <Thr::processFromPID(int)+0x38>
c0013bde:	66 90                	xchg   ax,ax
c0013be0:	83 ec 0c             	sub    esp,0xc
c0013be3:	68 84 51 02 c0       	push   0xc0025184
c0013be8:	e8 ef 8a 00 00       	call   c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bed:	83 c4 10             	add    esp,0x10
c0013bf0:	39 f8                	cmp    eax,edi
c0013bf2:	74 4c                	je     c0013c40 <Thr::processFromPID(int)+0x84>
c0013bf4:	83 ec 0c             	sub    esp,0xc
c0013bf7:	68 84 51 02 c0       	push   0xc0025184
c0013bfc:	e8 db 8a 00 00       	call   c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c01:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013c08:	89 c3                	mov    ebx,eax
c0013c0a:	e8 d5 8a 00 00       	call   c001c6e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c0f:	58                   	pop    eax
c0013c10:	5a                   	pop    edx
c0013c11:	53                   	push   ebx
c0013c12:	68 84 51 02 c0       	push   0xc0025184
c0013c17:	e8 80 8b 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c1c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c1f:	83 c4 10             	add    esp,0x10
c0013c22:	39 30                	cmp    DWORD PTR [eax],esi
c0013c24:	75 ba                	jne    c0013be0 <Thr::processFromPID(int)+0x24>
c0013c26:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c2b:	48                   	dec    eax
c0013c2c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c31:	74 09                	je     c0013c3c <Thr::processFromPID(int)+0x80>
c0013c33:	90                   	nop
c0013c34:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c37:	5b                   	pop    ebx
c0013c38:	5e                   	pop    esi
c0013c39:	5f                   	pop    edi
c0013c3a:	c3                   	ret    
c0013c3b:	90                   	nop
c0013c3c:	fb                   	sti    
c0013c3d:	eb f5                	jmp    c0013c34 <Thr::processFromPID(int)+0x78>
c0013c3f:	90                   	nop
c0013c40:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c45:	48                   	dec    eax
c0013c46:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c4b:	75 07                	jne    c0013c54 <Thr::processFromPID(int)+0x98>
c0013c4d:	fb                   	sti    
c0013c4e:	5b                   	pop    ebx
c0013c4f:	5e                   	pop    esi
c0013c50:	5f                   	pop    edi
c0013c51:	c3                   	ret    
c0013c52:	66 90                	xchg   ax,ax
c0013c54:	5b                   	pop    ebx
c0013c55:	31 c0                	xor    eax,eax
c0013c57:	5e                   	pop    esi
c0013c58:	5f                   	pop    edi
c0013c59:	c3                   	ret    
c0013c5a:	66 90                	xchg   ax,ax

c0013c5c <unblockTask(ThreadControlBlock*)>:
c0013c5c:	53                   	push   ebx
c0013c5d:	83 ec 08             	sub    esp,0x8
c0013c60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c64:	fa                   	cli    
c0013c65:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c6e:	85 c0                	test   eax,eax
c0013c70:	74 66                	je     c0013cd8 <unblockTask(ThreadControlBlock*)+0x7c>
c0013c72:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c75:	48                   	dec    eax
c0013c76:	74 38                	je     c0013cb0 <unblockTask(ThreadControlBlock*)+0x54>
c0013c78:	83 ec 0c             	sub    esp,0xc
c0013c7b:	68 84 51 02 c0       	push   0xc0025184
c0013c80:	e8 57 8a 00 00       	call   c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c85:	83 c4 10             	add    esp,0x10
c0013c88:	85 c0                	test   eax,eax
c0013c8a:	75 1c                	jne    c0013ca8 <unblockTask(ThreadControlBlock*)+0x4c>
c0013c8c:	eb 5e                	jmp    c0013cec <unblockTask(ThreadControlBlock*)+0x90>
c0013c8e:	66 90                	xchg   ax,ax
c0013c90:	83 ec 08             	sub    esp,0x8
c0013c93:	50                   	push   eax
c0013c94:	68 84 51 02 c0       	push   0xc0025184
c0013c99:	e8 ee 8d 00 00       	call   c001ca8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c9e:	83 c4 10             	add    esp,0x10
c0013ca1:	85 c0                	test   eax,eax
c0013ca3:	74 47                	je     c0013cec <unblockTask(ThreadControlBlock*)+0x90>
c0013ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ca8:	39 c3                	cmp    ebx,eax
c0013caa:	75 e4                	jne    c0013c90 <unblockTask(ThreadControlBlock*)+0x34>
c0013cac:	eb 12                	jmp    c0013cc0 <unblockTask(ThreadControlBlock*)+0x64>
c0013cae:	66 90                	xchg   ax,ax
c0013cb0:	83 ec 0c             	sub    esp,0xc
c0013cb3:	68 8a eb 01 c0       	push   0xc001eb8a
c0013cb8:	e8 1b 68 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013cbd:	83 c4 10             	add    esp,0x10
c0013cc0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013cc5:	48                   	dec    eax
c0013cc6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013ccb:	75 03                	jne    c0013cd0 <unblockTask(ThreadControlBlock*)+0x74>
c0013ccd:	fb                   	sti    
c0013cce:	66 90                	xchg   ax,ax
c0013cd0:	83 c4 08             	add    esp,0x8
c0013cd3:	5b                   	pop    ebx
c0013cd4:	c3                   	ret    
c0013cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0013cd8:	83 ec 0c             	sub    esp,0xc
c0013cdb:	68 73 eb 01 c0       	push   0xc001eb73
c0013ce0:	e8 f3 67 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013ce5:	83 c4 10             	add    esp,0x10
c0013ce8:	eb d6                	jmp    c0013cc0 <unblockTask(ThreadControlBlock*)+0x64>
c0013cea:	66 90                	xchg   ax,ax
c0013cec:	83 ec 08             	sub    esp,0x8
c0013cef:	53                   	push   ebx
c0013cf0:	68 84 51 02 c0       	push   0xc0025184
c0013cf5:	e8 a2 8a 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013cfa:	83 c4 10             	add    esp,0x10
c0013cfd:	eb c1                	jmp    c0013cc0 <unblockTask(ThreadControlBlock*)+0x64>
c0013cff:	90                   	nop

c0013d00 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013d00:	55                   	push   ebp
c0013d01:	57                   	push   edi
c0013d02:	56                   	push   esi
c0013d03:	53                   	push   ebx
c0013d04:	83 ec 1c             	sub    esp,0x1c
c0013d07:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013d0b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d0e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013d14:	85 ed                	test   ebp,ebp
c0013d16:	7e 24                	jle    c0013d3c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013d18:	31 f6                	xor    esi,esi
c0013d1a:	66 90                	xchg   ax,ax
c0013d1c:	83 ec 0c             	sub    esp,0xc
c0013d1f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013d26:	46                   	inc    esi
c0013d27:	57                   	push   edi
c0013d28:	e8 9c 3a ff ff       	call   c00077c9 <free>
c0013d2d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d30:	83 c4 10             	add    esp,0x10
c0013d33:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013d39:	7f e1                	jg     c0013d1c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013d3b:	90                   	nop
c0013d3c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013d46:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013d4b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013d4e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013d51:	d3 c0                	rol    eax,cl
c0013d53:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013d5a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d5d:	89 f7                	mov    edi,esi
c0013d5f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013d67:	0f 85 77 01 00 00    	jne    c0013ee4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013d6d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013d73:	85 ed                	test   ebp,ebp
c0013d75:	74 1d                	je     c0013d94 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013d77:	83 ec 0c             	sub    esp,0xc
c0013d7a:	55                   	push   ebp
c0013d7b:	e8 ec c0 ff ff       	call   c000fe6c <EnvVarContainer::~EnvVarContainer()>
c0013d80:	59                   	pop    ecx
c0013d81:	5e                   	pop    esi
c0013d82:	6a 0c                	push   0xc
c0013d84:	55                   	push   ebp
c0013d85:	e8 58 66 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0013d8a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d8d:	83 c4 10             	add    esp,0x10
c0013d90:	89 f7                	mov    edi,esi
c0013d92:	66 90                	xchg   ax,ax
c0013d94:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013d9a:	85 c0                	test   eax,eax
c0013d9c:	0f 84 b6 00 00 00    	je     c0013e58 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013da2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013da5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013da9:	31 c9                	xor    ecx,ecx
c0013dab:	eb 17                	jmp    c0013dc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013dad:	8d 76 00             	lea    esi,[esi+0x0]
c0013db0:	41                   	inc    ecx
c0013db1:	83 f9 10             	cmp    ecx,0x10
c0013db4:	0f 84 9e 00 00 00    	je     c0013e58 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013dba:	66 90                	xchg   ax,ax
c0013dbc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013dc2:	66 90                	xchg   ax,ax
c0013dc4:	31 d2                	xor    edx,edx
c0013dc6:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013dcd:	d3 fa                	sar    edx,cl
c0013dcf:	83 e2 01             	and    edx,0x1
c0013dd2:	74 dc                	je     c0013db0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013dd4:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013dd7:	01 d2                	add    edx,edx
c0013dd9:	01 ca                	add    edx,ecx
c0013ddb:	8d 14 92             	lea    edx,[edx+edx*4]
c0013dde:	01 d0                	add    eax,edx
c0013de0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013de6:	83 fd 07             	cmp    ebp,0x7
c0013de9:	75 c5                	jne    c0013db0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013deb:	05 40 02 00 00       	add    eax,0x240
c0013df0:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013df3:	83 fd ff             	cmp    ebp,0xffffffff
c0013df6:	0f 8c f0 00 00 00    	jl     c0013eec <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013dfc:	0f 84 ae 01 00 00    	je     c0013fb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013e02:	85 ed                	test   ebp,ebp
c0013e04:	0f 84 92 01 00 00    	je     c0013f9c <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013e0a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013e0c:	75 a2                	jne    c0013db0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e0e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e18:	01 d0                	add    eax,edx
c0013e1a:	66 90                	xchg   ax,ax
c0013e1c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013e20:	83 ec 0c             	sub    esp,0xc
c0013e23:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013e29:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e2c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013e32:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013e39:	50                   	push   eax
c0013e3a:	e8 1d fe ff ff       	call   c0013c5c <unblockTask(ThreadControlBlock*)>
c0013e3f:	83 c4 10             	add    esp,0x10
c0013e42:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e45:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013e49:	89 f7                	mov    edi,esi
c0013e4b:	41                   	inc    ecx
c0013e4c:	83 f9 10             	cmp    ecx,0x10
c0013e4f:	0f 85 67 ff ff ff    	jne    c0013dbc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013e55:	8d 76 00             	lea    esi,[esi+0x0]
c0013e58:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013e5e:	85 c0                	test   eax,eax
c0013e60:	74 62                	je     c0013ec4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e62:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013e68:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013e6e:	74 54                	je     c0013ec4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e70:	83 ec 0c             	sub    esp,0xc
c0013e73:	68 84 51 02 c0       	push   0xc0025184
c0013e78:	e8 5f 88 00 00       	call   c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e7d:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013e84:	89 c7                	mov    edi,eax
c0013e86:	e8 35 88 00 00       	call   c001c6c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013e8b:	83 c4 10             	add    esp,0x10
c0013e8e:	84 c0                	test   al,al
c0013e90:	0f 84 ce 00 00 00    	je     c0013f64 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013e96:	66 90                	xchg   ax,ax
c0013e98:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e9b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013ea1:	85 d2                	test   edx,edx
c0013ea3:	74 0f                	je     c0013eb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013ea5:	83 ec 0c             	sub    esp,0xc
c0013ea8:	8b 02                	mov    eax,DWORD PTR [edx]
c0013eaa:	52                   	push   edx
c0013eab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013eae:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013eb1:	83 c4 10             	add    esp,0x10
c0013eb4:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013ebe:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ec4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013eca:	85 db                	test   ebx,ebx
c0013ecc:	74 16                	je     c0013ee4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013ece:	83 ec 0c             	sub    esp,0xc
c0013ed1:	53                   	push   ebx
c0013ed2:	e8 df 58 ff ff       	call   c00097b6 <VAS::~VAS()>
c0013ed7:	58                   	pop    eax
c0013ed8:	5a                   	pop    edx
c0013ed9:	6a 14                	push   0x14
c0013edb:	53                   	push   ebx
c0013edc:	e8 01 65 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0013ee1:	83 c4 10             	add    esp,0x10
c0013ee4:	83 c4 1c             	add    esp,0x1c
c0013ee7:	5b                   	pop    ebx
c0013ee8:	5e                   	pop    esi
c0013ee9:	5f                   	pop    edi
c0013eea:	5d                   	pop    ebp
c0013eeb:	c3                   	ret    
c0013eec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ef0:	83 ec 0c             	sub    esp,0xc
c0013ef3:	68 3c ec 01 c0       	push   0xc001ec3c
c0013ef8:	e8 5e c2 ff ff       	call   c001015b <KePanic(char const*)>
c0013efd:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f00:	83 c4 10             	add    esp,0x10
c0013f03:	89 f7                	mov    edi,esi
c0013f05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f09:	e9 a2 fe ff ff       	jmp    c0013db0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f0e:	66 90                	xchg   ax,ax
c0013f10:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f16:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013f1c:	75 1e                	jne    c0013f3c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f1e:	83 ec 0c             	sub    esp,0xc
c0013f21:	68 a4 ec 01 c0       	push   0xc001eca4
c0013f26:	e8 ad 65 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013f2b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f32:	e8 5d fa ff ff       	call   c0013994 <blockTask(TaskState)>
c0013f37:	83 c4 10             	add    esp,0x10
c0013f3a:	66 90                	xchg   ax,ax
c0013f3c:	83 ec 08             	sub    esp,0x8
c0013f3f:	56                   	push   esi
c0013f40:	68 84 51 02 c0       	push   0xc0025184
c0013f45:	e8 52 88 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f4a:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013f51:	e8 86 87 00 00       	call   c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f56:	83 c4 10             	add    esp,0x10
c0013f59:	39 f8                	cmp    eax,edi
c0013f5b:	0f 84 37 ff ff ff    	je     c0013e98 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013f61:	8d 76 00             	lea    esi,[esi+0x0]
c0013f64:	83 ec 0c             	sub    esp,0xc
c0013f67:	68 84 51 02 c0       	push   0xc0025184
c0013f6c:	e8 6b 87 00 00       	call   c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f71:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013f78:	89 c6                	mov    esi,eax
c0013f7a:	e8 65 87 00 00       	call   c001c6e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013f7f:	83 c4 10             	add    esp,0x10
c0013f82:	39 f3                	cmp    ebx,esi
c0013f84:	74 b6                	je     c0013f3c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f86:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013f89:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f8c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013f92:	75 a8                	jne    c0013f3c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f94:	e9 77 ff ff ff       	jmp    c0013f10 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013f99:	8d 76 00             	lea    esi,[esi+0x0]
c0013f9c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fa0:	83 ec 0c             	sub    esp,0xc
c0013fa3:	68 70 ec 01 c0       	push   0xc001ec70
c0013fa8:	e9 4b ff ff ff       	jmp    c0013ef8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013fad:	8d 76 00             	lea    esi,[esi+0x0]
c0013fb0:	8b 36                	mov    esi,DWORD PTR [esi]
c0013fb2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fb6:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013fb9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fbc:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013fc2:	01 d7                	add    edi,edx
c0013fc4:	89 f8                	mov    eax,edi
c0013fc6:	e9 51 fe ff ff       	jmp    c0013e1c <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013fcb:	90                   	nop

c0013fcc <cleanerTaskFunction(void*)>:
c0013fcc:	53                   	push   ebx
c0013fcd:	83 ec 08             	sub    esp,0x8
c0013fd0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013fd5:	48                   	dec    eax
c0013fd6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013fdb:	75 03                	jne    c0013fe0 <cleanerTaskFunction(void*)+0x14>
c0013fdd:	fb                   	sti    
c0013fde:	66 90                	xchg   ax,ax
c0013fe0:	fa                   	cli    
c0013fe1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013fe6:	80 3d 4c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002514c,0x0
c0013fed:	8d 50 01             	lea    edx,[eax+0x1]
c0013ff0:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0013ff6:	0f 84 ac 00 00 00    	je     c00140a8 <cleanerTaskFunction(void*)+0xdc>
c0013ffc:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014001:	85 c0                	test   eax,eax
c0014003:	75 03                	jne    c0014008 <cleanerTaskFunction(void*)+0x3c>
c0014005:	fb                   	sti    
c0014006:	66 90                	xchg   ax,ax
c0014008:	c6 05 4c 51 02 c0 00 	mov    BYTE PTR ds:0xc002514c,0x0
c001400f:	fa                   	cli    
c0014010:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014016:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c001401c:	fa                   	cli    
c001401d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014023:	eb 2b                	jmp    c0014050 <cleanerTaskFunction(void*)+0x84>
c0014025:	8d 76 00             	lea    esi,[esi+0x0]
c0014028:	83 ec 0c             	sub    esp,0xc
c001402b:	68 6c 51 02 c0       	push   0xc002516c
c0014030:	e8 a7 86 00 00       	call   c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014035:	c7 04 24 6c 51 02 c0 	mov    DWORD PTR [esp],0xc002516c
c001403c:	89 c3                	mov    ebx,eax
c001403e:	e8 a1 86 00 00       	call   c001c6e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014043:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014046:	e8 b5 fc ff ff       	call   c0013d00 <cleanupTerminatedTask(ThreadControlBlock*)>
c001404b:	83 c4 10             	add    esp,0x10
c001404e:	66 90                	xchg   ax,ax
c0014050:	83 ec 0c             	sub    esp,0xc
c0014053:	68 6c 51 02 c0       	push   0xc002516c
c0014058:	e8 63 86 00 00       	call   c001c6c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001405d:	83 c4 10             	add    esp,0x10
c0014060:	84 c0                	test   al,al
c0014062:	74 c4                	je     c0014028 <cleanerTaskFunction(void*)+0x5c>
c0014064:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014069:	48                   	dec    eax
c001406a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001406f:	75 03                	jne    c0014074 <cleanerTaskFunction(void*)+0xa8>
c0014071:	fb                   	sti    
c0014072:	66 90                	xchg   ax,ax
c0014074:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014079:	48                   	dec    eax
c001407a:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001407f:	0f 85 4b ff ff ff    	jne    c0013fd0 <cleanerTaskFunction(void*)+0x4>
c0014085:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c001408a:	85 c0                	test   eax,eax
c001408c:	0f 84 3e ff ff ff    	je     c0013fd0 <cleanerTaskFunction(void*)+0x4>
c0014092:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001409c:	e8 f7 f6 ff ff       	call   c0013798 <schedule()>
c00140a1:	e9 2a ff ff ff       	jmp    c0013fd0 <cleanerTaskFunction(void*)+0x4>
c00140a6:	66 90                	xchg   ax,ax
c00140a8:	83 ec 0c             	sub    esp,0xc
c00140ab:	6a 02                	push   0x2
c00140ad:	e8 ba f8 ff ff       	call   c001396c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00140b2:	83 c4 10             	add    esp,0x10
c00140b5:	e9 4e ff ff ff       	jmp    c0014008 <cleanerTaskFunction(void*)+0x3c>
c00140ba:	66 90                	xchg   ax,ax

c00140bc <terminateTask(int)>:
c00140bc:	83 ec 14             	sub    esp,0x14
c00140bf:	fa                   	cli    
c00140c0:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00140c6:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c00140cc:	fa                   	cli    
c00140cd:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00140d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140dc:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00140df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140e4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00140e7:	50                   	push   eax
c00140e8:	68 6c 51 02 c0       	push   0xc002516c
c00140ed:	e8 aa 86 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00140f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140f7:	83 c4 10             	add    esp,0x10
c00140fa:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014101:	a1 48 51 02 c0       	mov    eax,ds:0xc0025148
c0014106:	85 c0                	test   eax,eax
c0014108:	74 5e                	je     c0014168 <terminateTask(int)+0xac>
c001410a:	83 ec 0c             	sub    esp,0xc
c001410d:	c6 05 4c 51 02 c0 01 	mov    BYTE PTR ds:0xc002514c,0x1
c0014114:	50                   	push   eax
c0014115:	e8 42 fb ff ff       	call   c0013c5c <unblockTask(ThreadControlBlock*)>
c001411a:	83 c4 10             	add    esp,0x10
c001411d:	8d 76 00             	lea    esi,[esi+0x0]
c0014120:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014125:	48                   	dec    eax
c0014126:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001412b:	75 03                	jne    c0014130 <terminateTask(int)+0x74>
c001412d:	fb                   	sti    
c001412e:	66 90                	xchg   ax,ax
c0014130:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014135:	48                   	dec    eax
c0014136:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001413b:	75 0b                	jne    c0014148 <terminateTask(int)+0x8c>
c001413d:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c0014144:	75 36                	jne    c001417c <terminateTask(int)+0xc0>
c0014146:	66 90                	xchg   ax,ax
c0014148:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001414d:	48                   	dec    eax
c001414e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014153:	75 03                	jne    c0014158 <terminateTask(int)+0x9c>
c0014155:	fb                   	sti    
c0014156:	66 90                	xchg   ax,ax
c0014158:	fa                   	cli    
c0014159:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001415f:	90                   	nop
c0014160:	e8 33 f6 ff ff       	call   c0013798 <schedule()>
c0014165:	eb e1                	jmp    c0014148 <terminateTask(int)+0x8c>
c0014167:	90                   	nop
c0014168:	83 ec 0c             	sub    esp,0xc
c001416b:	68 a1 eb 01 c0       	push   0xc001eba1
c0014170:	e8 63 63 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014175:	83 c4 10             	add    esp,0x10
c0014178:	eb a6                	jmp    c0014120 <terminateTask(int)+0x64>
c001417a:	66 90                	xchg   ax,ax
c001417c:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0014186:	eb d8                	jmp    c0014160 <terminateTask(int)+0xa4>

c0014188 <Thr::terminateFromIRQ(int)>:
c0014188:	83 ec 18             	sub    esp,0x18
c001418b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001418f:	50                   	push   eax
c0014190:	e8 27 ff ff ff       	call   c00140bc <terminateTask(int)>
c0014195:	90                   	nop
c0014196:	66 90                	xchg   ax,ax

c0014198 <Semaphore::release()>:
c0014198:	83 ec 0c             	sub    esp,0xc
c001419b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001419f:	fa                   	cli    
c00141a0:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00141a5:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00141ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00141ae:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c00141b4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00141b7:	85 c9                	test   ecx,ecx
c00141b9:	74 41                	je     c00141fc <Semaphore::release()+0x64>
c00141bb:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00141be:	83 ec 0c             	sub    esp,0xc
c00141c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00141c4:	51                   	push   ecx
c00141c5:	e8 92 fa ff ff       	call   c0013c5c <unblockTask(ThreadControlBlock*)>
c00141ca:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00141cf:	83 c4 10             	add    esp,0x10
c00141d2:	48                   	dec    eax
c00141d3:	90                   	nop
c00141d4:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00141d9:	85 c0                	test   eax,eax
c00141db:	75 0b                	jne    c00141e8 <Semaphore::release()+0x50>
c00141dd:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c00141e2:	85 c0                	test   eax,eax
c00141e4:	75 1e                	jne    c0014204 <Semaphore::release()+0x6c>
c00141e6:	66 90                	xchg   ax,ax
c00141e8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00141ed:	48                   	dec    eax
c00141ee:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00141f3:	75 03                	jne    c00141f8 <Semaphore::release()+0x60>
c00141f5:	fb                   	sti    
c00141f6:	66 90                	xchg   ax,ax
c00141f8:	83 c4 0c             	add    esp,0xc
c00141fb:	c3                   	ret    
c00141fc:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00141ff:	eb d3                	jmp    c00141d4 <Semaphore::release()+0x3c>
c0014201:	8d 76 00             	lea    esi,[esi+0x0]
c0014204:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001420e:	e8 85 f5 ff ff       	call   c0013798 <schedule()>
c0014213:	eb d3                	jmp    c00141e8 <Semaphore::release()+0x50>
c0014215:	8d 76 00             	lea    esi,[esi+0x0]

c0014218 <__static_initialization_and_destruction_0(int, int)>:
c0014218:	83 ec 0c             	sub    esp,0xc
c001421b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014220:	0f 85 8e 00 00 00    	jne    c00142b4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014226:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001422e:	0f 85 80 00 00 00    	jne    c00142b4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014234:	83 ec 0c             	sub    esp,0xc
c0014237:	68 84 51 02 c0       	push   0xc0025184
c001423c:	e8 07 88 00 00       	call   c001ca48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014241:	83 c4 10             	add    esp,0x10
c0014244:	83 ec 04             	sub    esp,0x4
c0014247:	68 54 f7 01 c0       	push   0xc001f754
c001424c:	68 84 51 02 c0       	push   0xc0025184
c0014251:	68 f8 c9 01 c0       	push   0xc001c9f8
c0014256:	e8 37 61 ff ff       	call   c000a392 <__cxa_atexit>
c001425b:	83 c4 10             	add    esp,0x10
c001425e:	83 ec 0c             	sub    esp,0xc
c0014261:	68 78 51 02 c0       	push   0xc0025178
c0014266:	e8 dd 87 00 00       	call   c001ca48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001426b:	83 c4 10             	add    esp,0x10
c001426e:	83 ec 04             	sub    esp,0x4
c0014271:	68 54 f7 01 c0       	push   0xc001f754
c0014276:	68 78 51 02 c0       	push   0xc0025178
c001427b:	68 f8 c9 01 c0       	push   0xc001c9f8
c0014280:	e8 0d 61 ff ff       	call   c000a392 <__cxa_atexit>
c0014285:	83 c4 10             	add    esp,0x10
c0014288:	83 ec 0c             	sub    esp,0xc
c001428b:	68 6c 51 02 c0       	push   0xc002516c
c0014290:	e8 b3 87 00 00       	call   c001ca48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014295:	83 c4 10             	add    esp,0x10
c0014298:	83 ec 04             	sub    esp,0x4
c001429b:	68 54 f7 01 c0       	push   0xc001f754
c00142a0:	68 6c 51 02 c0       	push   0xc002516c
c00142a5:	68 f8 c9 01 c0       	push   0xc001c9f8
c00142aa:	e8 e3 60 ff ff       	call   c000a392 <__cxa_atexit>
c00142af:	83 c4 10             	add    esp,0x10
c00142b2:	66 90                	xchg   ax,ax
c00142b4:	90                   	nop
c00142b5:	83 c4 0c             	add    esp,0xc
c00142b8:	c3                   	ret    
c00142b9:	8d 76 00             	lea    esi,[esi+0x0]

c00142bc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00142bc:	83 ec 0c             	sub    esp,0xc
c00142bf:	83 ec 08             	sub    esp,0x8
c00142c2:	68 ff ff 00 00       	push   0xffff
c00142c7:	6a 01                	push   0x1
c00142c9:	e8 4a ff ff ff       	call   c0014218 <__static_initialization_and_destruction_0(int, int)>
c00142ce:	83 c4 10             	add    esp,0x10
c00142d1:	83 c4 0c             	add    esp,0xc
c00142d4:	c3                   	ret    

c00142d5 <Vm::inbv(unsigned short)>:
c00142d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142d9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00142de:	75 06                	jne    c00142e6 <Vm::inbv(unsigned short)+0x11>
c00142e0:	a0 cc 51 02 c0       	mov    al,ds:0xc00251cc
c00142e5:	c3                   	ret    
c00142e6:	ec                   	in     al,dx
c00142e7:	c3                   	ret    

c00142e8 <Vm::outbv(unsigned short, unsigned char)>:
c00142e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142f0:	66 81 fa fe fe       	cmp    dx,0xfefe
c00142f5:	75 25                	jne    c001431c <Vm::outbv(unsigned short, unsigned char)+0x34>
c00142f7:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c00142fd:	8d 51 01             	lea    edx,[ecx+0x1]
c0014300:	88 81 e0 51 02 c0    	mov    BYTE PTR [ecx-0x3ffdae20],al
c0014306:	89 15 cc 51 02 c0    	mov    DWORD PTR ds:0xc00251cc,edx
c001430c:	83 fa 20             	cmp    edx,0x20
c001430f:	75 0c                	jne    c001431d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014311:	c7 05 cc 51 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x1f
c001431b:	c3                   	ret    
c001431c:	ee                   	out    dx,al
c001431d:	c3                   	ret    

c001431e <Vm::realToLinear(unsigned short, unsigned short)>:
c001431e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014323:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014328:	c1 e0 04             	shl    eax,0x4
c001432b:	01 d0                	add    eax,edx
c001432d:	c3                   	ret    

c001432e <Vm::getSegment(unsigned int)>:
c001432e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014332:	c1 e8 10             	shr    eax,0x10
c0014335:	c3                   	ret    

c0014336 <Vm::getOffset(unsigned int)>:
c0014336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001433a:	c3                   	ret    

c001433b <Vm::mainloop2()>:
c001433b:	83 ec 18             	sub    esp,0x18
c001433e:	fa                   	cli    
c001433f:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014345:	6a 02                	push   0x2
c0014347:	c6 05 c5 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c5,0x1
c001434e:	e8 19 f6 ff ff       	call   c001396c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014353:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014358:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001435c:	52                   	push   edx
c001435d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014361:	52                   	push   edx
c0014362:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0014366:	52                   	push   edx
c0014367:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001436b:	50                   	push   eax
c001436c:	e8 9e be fe ff       	call   c000020f <goToVM86>
c0014371:	83 c4 2c             	add    esp,0x2c
c0014374:	c3                   	ret    

c0014375 <Vm::mainVm8086Loop(void*)>:
c0014375:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001437a:	48                   	dec    eax
c001437b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014380:	75 01                	jne    c0014383 <Vm::mainVm8086Loop(void*)+0xe>
c0014382:	fb                   	sti    
c0014383:	eb b6                	jmp    c001433b <Vm::mainloop2()>

c0014385 <Vm::mainloop3(unsigned long)>:
c0014385:	83 ec 18             	sub    esp,0x18
c0014388:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001438c:	fa                   	cli    
c001438d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014393:	6a 02                	push   0x2
c0014395:	c6 05 c4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c4,0x1
c001439c:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c00143a1:	e8 c6 f5 ff ff       	call   c001396c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143a6:	83 c4 1c             	add    esp,0x1c
c00143a9:	eb 90                	jmp    c001433b <Vm::mainloop2()>

c00143ab <Vm::initialise8086()>:
c00143ab:	83 ec 0c             	sub    esp,0xc
c00143ae:	68 80 00 00 00       	push   0x80
c00143b3:	6a 00                	push   0x0
c00143b5:	68 75 43 01 c0       	push   0xc0014375
c00143ba:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00143c0:	e8 b3 f1 ff ff       	call   c0013578 <Process::createThread(void (*)(void*), void*, int)>
c00143c5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00143cc:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c00143d1:	68 00 01 00 00       	push   0x100
c00143d6:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00143db:	6a 00                	push   0x0
c00143dd:	6a 00                	push   0x0
c00143df:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143e5:	e8 2a 58 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00143ea:	83 c4 2c             	add    esp,0x2c
c00143ed:	c3                   	ret    

c00143ee <Vm::finish8086()>:
c00143ee:	53                   	push   ebx
c00143ef:	83 ec 08             	sub    esp,0x8
c00143f2:	fa                   	cli    
c00143f3:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00143f9:	80 3d c4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c4,0x0
c0014400:	75 15                	jne    c0014417 <Vm::finish8086()+0x29>
c0014402:	e8 91 f3 ff ff       	call   c0013798 <schedule()>
c0014407:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001440c:	48                   	dec    eax
c001440d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014412:	75 de                	jne    c00143f2 <Vm::finish8086()+0x4>
c0014414:	fb                   	sti    
c0014415:	eb db                	jmp    c00143f2 <Vm::finish8086()+0x4>
c0014417:	83 ec 0c             	sub    esp,0xc
c001441a:	8b 1d c0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251c0
c0014420:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014426:	c6 05 c4 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c4,0x0
c001442d:	e8 2a f8 ff ff       	call   c0013c5c <unblockTask(ThreadControlBlock*)>
c0014432:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014437:	83 c4 10             	add    esp,0x10
c001443a:	8d 50 ff             	lea    edx,[eax-0x1]
c001443d:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0014443:	85 d2                	test   edx,edx
c0014445:	75 01                	jne    c0014448 <Vm::finish8086()+0x5a>
c0014447:	fb                   	sti    
c0014448:	89 d8                	mov    eax,ebx
c001444a:	83 c4 08             	add    esp,0x8
c001444d:	5b                   	pop    ebx
c001444e:	c3                   	ret    

c001444f <Vm::getOutput8086(unsigned char*)>:
c001444f:	57                   	push   edi
c0014450:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c0014456:	56                   	push   esi
c0014457:	be e0 51 02 c0       	mov    esi,0xc00251e0
c001445c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014462:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c0014467:	5e                   	pop    esi
c0014468:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c0014472:	5f                   	pop    edi
c0014473:	c3                   	ret    

c0014474 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014474:	55                   	push   ebp
c0014475:	57                   	push   edi
c0014476:	56                   	push   esi
c0014477:	53                   	push   ebx
c0014478:	83 ec 0c             	sub    esp,0xc
c001447b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001447f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014483:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014487:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001448b:	fa                   	cli    
c001448c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014492:	80 3d c5 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c5,0x0
c0014499:	75 15                	jne    c00144b0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001449b:	e8 f8 f2 ff ff       	call   c0013798 <schedule()>
c00144a0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00144a5:	48                   	dec    eax
c00144a6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00144ab:	75 de                	jne    c001448b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144ad:	fb                   	sti    
c00144ae:	eb db                	jmp    c001448b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144b0:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c00144b5:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00144bf:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00144c3:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00144c7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00144cb:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00144cf:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00144d3:	0f b7 ff             	movzx  edi,di
c00144d6:	0f b7 f6             	movzx  esi,si
c00144d9:	50                   	push   eax
c00144da:	6a 20                	push   0x20
c00144dc:	6a 00                	push   0x0
c00144de:	68 e0 51 02 c0       	push   0xc00251e0
c00144e3:	e8 e8 bf fe ff       	call   c00004d0 <memset>
c00144e8:	5a                   	pop    edx
c00144e9:	59                   	pop    ecx
c00144ea:	57                   	push   edi
c00144eb:	56                   	push   esi
c00144ec:	e8 2d fe ff ff       	call   c001431e <Vm::realToLinear(unsigned short, unsigned short)>
c00144f1:	83 c4 10             	add    esp,0x10
c00144f4:	89 c7                	mov    edi,eax
c00144f6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00144fa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00144fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014500:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014505:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c001450c:	48                   	dec    eax
c001450d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014512:	75 01                	jne    c0014515 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014514:	fb                   	sti    
c0014515:	83 ec 0c             	sub    esp,0xc
c0014518:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001451e:	e8 39 f7 ff ff       	call   c0013c5c <unblockTask(ThreadControlBlock*)>
c0014523:	83 c4 1c             	add    esp,0x1c
c0014526:	b0 01                	mov    al,0x1
c0014528:	5b                   	pop    ebx
c0014529:	5e                   	pop    esi
c001452a:	5f                   	pop    edi
c001452b:	5d                   	pop    ebp
c001452c:	c3                   	ret    

c001452d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001452d:	55                   	push   ebp
c001452e:	57                   	push   edi
c001452f:	56                   	push   esi
c0014530:	53                   	push   ebx
c0014531:	83 ec 2c             	sub    esp,0x2c
c0014534:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014538:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001453c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014540:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014544:	fa                   	cli    
c0014545:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001454b:	0f b6 35 c5 51 02 c0 	movzx  esi,BYTE PTR ds:0xc00251c5
c0014552:	89 f0                	mov    eax,esi
c0014554:	84 c0                	test   al,al
c0014556:	75 1d                	jne    c0014575 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014558:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001455c:	e8 37 f2 ff ff       	call   c0013798 <schedule()>
c0014561:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014566:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001456a:	48                   	dec    eax
c001456b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014570:	75 d2                	jne    c0014544 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014572:	fb                   	sti    
c0014573:	eb cf                	jmp    c0014544 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014575:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c001457a:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c0014584:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014588:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001458c:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014590:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014594:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014598:	50                   	push   eax
c0014599:	6a 20                	push   0x20
c001459b:	6a 00                	push   0x0
c001459d:	68 e0 51 02 c0       	push   0xc00251e0
c00145a2:	e8 29 bf fe ff       	call   c00004d0 <memset>
c00145a7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145ae:	e8 06 32 ff ff       	call   c00077b9 <malloc>
c00145b3:	83 c4 0c             	add    esp,0xc
c00145b6:	89 c3                	mov    ebx,eax
c00145b8:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00145be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00145c2:	50                   	push   eax
c00145c3:	e8 86 64 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c00145c8:	83 c4 10             	add    esp,0x10
c00145cb:	85 db                	test   ebx,ebx
c00145cd:	75 0a                	jne    c00145d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00145cf:	83 ec 0c             	sub    esp,0xc
c00145d2:	68 cc ec 01 c0       	push   0xc001eccc
c00145d7:	eb 3e                	jmp    c0014617 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00145d9:	50                   	push   eax
c00145da:	8d 44 24 17          	lea    eax,[esp+0x17]
c00145de:	50                   	push   eax
c00145df:	8d 44 24 20          	lea    eax,[esp+0x20]
c00145e3:	50                   	push   eax
c00145e4:	53                   	push   ebx
c00145e5:	e8 d0 67 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c00145ea:	83 c4 10             	add    esp,0x10
c00145ed:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00145f2:	74 0a                	je     c00145fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00145f4:	83 ec 0c             	sub    esp,0xc
c00145f7:	68 e0 ec 01 c0       	push   0xc001ece0
c00145fc:	eb 19                	jmp    c0014617 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00145fe:	51                   	push   ecx
c00145ff:	51                   	push   ecx
c0014600:	6a 01                	push   0x1
c0014602:	53                   	push   ebx
c0014603:	e8 06 65 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0014608:	83 c4 10             	add    esp,0x10
c001460b:	85 c0                	test   eax,eax
c001460d:	74 24                	je     c0014633 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001460f:	83 ec 0c             	sub    esp,0xc
c0014612:	68 f9 ec 01 c0       	push   0xc001ecf9
c0014617:	e8 3f bb ff ff       	call   c001015b <KePanic(char const*)>
c001461c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014621:	83 c4 10             	add    esp,0x10
c0014624:	48                   	dec    eax
c0014625:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001462a:	85 c0                	test   eax,eax
c001462c:	75 01                	jne    c001462f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001462e:	fb                   	sti    
c001462f:	31 f6                	xor    esi,esi
c0014631:	eb 58                	jmp    c001468b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014633:	0f b7 ed             	movzx  ebp,bp
c0014636:	50                   	push   eax
c0014637:	0f b7 ff             	movzx  edi,di
c001463a:	50                   	push   eax
c001463b:	55                   	push   ebp
c001463c:	57                   	push   edi
c001463d:	e8 dc fc ff ff       	call   c001431e <Vm::realToLinear(unsigned short, unsigned short)>
c0014642:	5a                   	pop    edx
c0014643:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014645:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014649:	51                   	push   ecx
c001464a:	50                   	push   eax
c001464b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001464f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014653:	53                   	push   ebx
c0014654:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014657:	83 c4 14             	add    esp,0x14
c001465a:	53                   	push   ebx
c001465b:	e8 0c 65 ff ff       	call   c000ab6c <File::close()>
c0014660:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014665:	83 c4 10             	add    esp,0x10
c0014668:	48                   	dec    eax
c0014669:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c0014670:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014675:	85 c0                	test   eax,eax
c0014677:	75 01                	jne    c001467a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014679:	fb                   	sti    
c001467a:	83 ec 0c             	sub    esp,0xc
c001467d:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014683:	e8 d4 f5 ff ff       	call   c0013c5c <unblockTask(ThreadControlBlock*)>
c0014688:	83 c4 10             	add    esp,0x10
c001468b:	83 c4 2c             	add    esp,0x2c
c001468e:	89 f0                	mov    eax,esi
c0014690:	5b                   	pop    ebx
c0014691:	5e                   	pop    esi
c0014692:	5f                   	pop    edi
c0014693:	5d                   	pop    ebp
c0014694:	c3                   	ret    

c0014695 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014695:	57                   	push   edi
c0014696:	56                   	push   esi
c0014697:	53                   	push   ebx
c0014698:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001469c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00146a4:	83 e8 06             	sub    eax,0x6
c00146a7:	0f b7 c0             	movzx  eax,ax
c00146aa:	50                   	push   eax
c00146ab:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00146b0:	50                   	push   eax
c00146b1:	e8 68 fc ff ff       	call   c001431e <Vm::realToLinear(unsigned short, unsigned short)>
c00146b6:	5a                   	pop    edx
c00146b7:	5e                   	pop    esi
c00146b8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00146bb:	8d 56 fa             	lea    edx,[esi-0x6]
c00146be:	81 e2 ff ff 00 00    	and    edx,0xffff
c00146c4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00146c7:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00146ca:	83 c2 02             	add    edx,0x2
c00146cd:	66 89 10             	mov    WORD PTR [eax],dx
c00146d0:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00146d3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00146d7:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00146da:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00146de:	89 d6                	mov    esi,edx
c00146e0:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00146e6:	66 81 e6 ff fd       	and    si,0xfdff
c00146eb:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00146ef:	74 07                	je     c00146f8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00146f1:	89 d6                	mov    esi,edx
c00146f3:	66 81 ce 00 02       	or     si,0x200
c00146f8:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00146fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014701:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014705:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001470d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014710:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014718:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001471b:	5b                   	pop    ebx
c001471c:	5e                   	pop    esi
c001471d:	5f                   	pop    edi
c001471e:	c3                   	ret    

c001471f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001471f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014724:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014729:	c1 e0 04             	shl    eax,0x4
c001472c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001472f:	c3                   	ret    

c0014730 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014730:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014735:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001473a:	c1 e0 04             	shl    eax,0x4
c001473d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014741:	c3                   	ret    

c0014742 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014742:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014747:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001474c:	c1 e0 04             	shl    eax,0x4
c001474f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014752:	c3                   	ret    

c0014753 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014753:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014758:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001475d:	c1 e0 04             	shl    eax,0x4
c0014760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014764:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014767:	c3                   	ret    

c0014768 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014768:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001476d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014772:	c1 e0 04             	shl    eax,0x4
c0014775:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014779:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001477d:	c3                   	ret    

c001477e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001477e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014783:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014788:	c1 e0 04             	shl    eax,0x4
c001478b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001478f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014792:	c3                   	ret    

c0014793 <Vm::faultHandler(regs*)>:
c0014793:	55                   	push   ebp
c0014794:	57                   	push   edi
c0014795:	56                   	push   esi
c0014796:	53                   	push   ebx
c0014797:	83 ec 1c             	sub    esp,0x1c
c001479a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001479e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00147a1:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00147a5:	0f b7 f8             	movzx  edi,ax
c00147a8:	52                   	push   edx
c00147a9:	0f b7 c0             	movzx  eax,ax
c00147ac:	50                   	push   eax
c00147ad:	e8 6c fb ff ff       	call   c001431e <Vm::realToLinear(unsigned short, unsigned short)>
c00147b2:	5a                   	pop    edx
c00147b3:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00147b6:	59                   	pop    ecx
c00147b7:	89 c1                	mov    ecx,eax
c00147b9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00147bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147c9:	0f b7 c5             	movzx  eax,bp
c00147cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147d0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00147d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147d8:	e8 41 fb ff ff       	call   c001431e <Vm::realToLinear(unsigned short, unsigned short)>
c00147dd:	5e                   	pop    esi
c00147de:	be 06 00 00 00       	mov    esi,0x6
c00147e3:	5a                   	pop    edx
c00147e4:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00147e9:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00147ee:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00147f1:	80 fa 9d             	cmp    dl,0x9d
c00147f4:	0f 84 2c 02 00 00    	je     c0014a26 <Vm::faultHandler(regs*)+0x293>
c00147fa:	0f 87 91 00 00 00    	ja     c0014891 <Vm::faultHandler(regs*)+0xfe>
c0014800:	80 fa 66             	cmp    dl,0x66
c0014803:	0f 84 98 01 00 00    	je     c00149a1 <Vm::faultHandler(regs*)+0x20e>
c0014809:	77 47                	ja     c0014852 <Vm::faultHandler(regs*)+0xbf>
c001480b:	80 fa 36             	cmp    dl,0x36
c001480e:	0f 84 80 01 00 00    	je     c0014994 <Vm::faultHandler(regs*)+0x201>
c0014814:	77 1a                	ja     c0014830 <Vm::faultHandler(regs*)+0x9d>
c0014816:	80 fa 26             	cmp    dl,0x26
c0014819:	0f 84 4e 01 00 00    	je     c001496d <Vm::faultHandler(regs*)+0x1da>
c001481f:	80 fa 2e             	cmp    dl,0x2e
c0014822:	0f 85 e2 05 00 00    	jne    c0014e0a <Vm::faultHandler(regs*)+0x677>
c0014828:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001482b:	31 f6                	xor    esi,esi
c001482d:	41                   	inc    ecx
c001482e:	eb be                	jmp    c00147ee <Vm::faultHandler(regs*)+0x5b>
c0014830:	80 fa 64             	cmp    dl,0x64
c0014833:	0f 84 41 01 00 00    	je     c001497a <Vm::faultHandler(regs*)+0x1e7>
c0014839:	0f 87 48 01 00 00    	ja     c0014987 <Vm::faultHandler(regs*)+0x1f4>
c001483f:	80 fa 3e             	cmp    dl,0x3e
c0014842:	0f 85 c2 05 00 00    	jne    c0014e0a <Vm::faultHandler(regs*)+0x677>
c0014848:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001484b:	be 01 00 00 00       	mov    esi,0x1
c0014850:	eb db                	jmp    c001482d <Vm::faultHandler(regs*)+0x9a>
c0014852:	80 fa 6d             	cmp    dl,0x6d
c0014855:	0f 84 ec 02 00 00    	je     c0014b47 <Vm::faultHandler(regs*)+0x3b4>
c001485b:	77 17                	ja     c0014874 <Vm::faultHandler(regs*)+0xe1>
c001485d:	80 fa 67             	cmp    dl,0x67
c0014860:	0f 84 48 01 00 00    	je     c00149ae <Vm::faultHandler(regs*)+0x21b>
c0014866:	80 fa 6c             	cmp    dl,0x6c
c0014869:	0f 84 69 02 00 00    	je     c0014ad8 <Vm::faultHandler(regs*)+0x345>
c001486f:	e9 96 05 00 00       	jmp    c0014e0a <Vm::faultHandler(regs*)+0x677>
c0014874:	80 fa 6f             	cmp    dl,0x6f
c0014877:	0f 84 f4 03 00 00    	je     c0014c71 <Vm::faultHandler(regs*)+0x4de>
c001487d:	0f 82 59 03 00 00    	jb     c0014bdc <Vm::faultHandler(regs*)+0x449>
c0014883:	80 fa 9c             	cmp    dl,0x9c
c0014886:	0f 84 2f 01 00 00    	je     c00149bb <Vm::faultHandler(regs*)+0x228>
c001488c:	e9 79 05 00 00       	jmp    c0014e0a <Vm::faultHandler(regs*)+0x677>
c0014891:	80 fa ec             	cmp    dl,0xec
c0014894:	0f 84 14 05 00 00    	je     c0014dae <Vm::faultHandler(regs*)+0x61b>
c001489a:	77 7b                	ja     c0014917 <Vm::faultHandler(regs*)+0x184>
c001489c:	80 fa e4             	cmp    dl,0xe4
c001489f:	0f 84 93 04 00 00    	je     c0014d38 <Vm::faultHandler(regs*)+0x5a5>
c00148a5:	77 53                	ja     c00148fa <Vm::faultHandler(regs*)+0x167>
c00148a7:	80 fa cd             	cmp    dl,0xcd
c00148aa:	0f 84 d9 01 00 00    	je     c0014a89 <Vm::faultHandler(regs*)+0x2f6>
c00148b0:	80 fa cf             	cmp    dl,0xcf
c00148b3:	0f 85 51 05 00 00    	jne    c0014e0a <Vm::faultHandler(regs*)+0x677>
c00148b9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00148bc:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00148bf:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00148c3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00148c6:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00148ca:	81 ca 00 02 02 00    	or     edx,0x20200
c00148d0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00148d3:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148dd:	66 c1 e8 09          	shr    ax,0x9
c00148e1:	83 e0 01             	and    eax,0x1
c00148e4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00148e7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00148ea:	83 c0 06             	add    eax,0x6
c00148ed:	25 ff ff 00 00       	and    eax,0xffff
c00148f2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00148f5:	e9 0c 05 00 00       	jmp    c0014e06 <Vm::faultHandler(regs*)+0x673>
c00148fa:	80 fa e6             	cmp    dl,0xe6
c00148fd:	0f 84 7f 04 00 00    	je     c0014d82 <Vm::faultHandler(regs*)+0x5ef>
c0014903:	0f 82 4b 04 00 00    	jb     c0014d54 <Vm::faultHandler(regs*)+0x5c1>
c0014909:	80 fa e7             	cmp    dl,0xe7
c001490c:	0f 84 87 04 00 00    	je     c0014d99 <Vm::faultHandler(regs*)+0x606>
c0014912:	e9 f3 04 00 00       	jmp    c0014e0a <Vm::faultHandler(regs*)+0x677>
c0014917:	80 fa ef             	cmp    dl,0xef
c001491a:	0f 84 d1 04 00 00    	je     c0014df1 <Vm::faultHandler(regs*)+0x65e>
c0014920:	77 28                	ja     c001494a <Vm::faultHandler(regs*)+0x1b7>
c0014922:	80 fa ed             	cmp    dl,0xed
c0014925:	0f 84 9f 04 00 00    	je     c0014dca <Vm::faultHandler(regs*)+0x637>
c001492b:	80 fa ee             	cmp    dl,0xee
c001492e:	0f 85 d6 04 00 00    	jne    c0014e0a <Vm::faultHandler(regs*)+0x677>
c0014934:	50                   	push   eax
c0014935:	50                   	push   eax
c0014936:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001493a:	50                   	push   eax
c001493b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001493f:	50                   	push   eax
c0014940:	e8 a3 f9 ff ff       	call   c00142e8 <Vm::outbv(unsigned short, unsigned char)>
c0014945:	e9 9f 04 00 00       	jmp    c0014de9 <Vm::faultHandler(regs*)+0x656>
c001494a:	80 fa fa             	cmp    dl,0xfa
c001494d:	0f 84 69 01 00 00    	je     c0014abc <Vm::faultHandler(regs*)+0x329>
c0014953:	80 fa fb             	cmp    dl,0xfb
c0014956:	0f 84 6e 01 00 00    	je     c0014aca <Vm::faultHandler(regs*)+0x337>
c001495c:	80 fa f3             	cmp    dl,0xf3
c001495f:	0f 85 a5 04 00 00    	jne    c0014e0a <Vm::faultHandler(regs*)+0x677>
c0014965:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014968:	e9 c0 fe ff ff       	jmp    c001482d <Vm::faultHandler(regs*)+0x9a>
c001496d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014970:	be 02 00 00 00       	mov    esi,0x2
c0014975:	e9 b3 fe ff ff       	jmp    c001482d <Vm::faultHandler(regs*)+0x9a>
c001497a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001497d:	be 03 00 00 00       	mov    esi,0x3
c0014982:	e9 a6 fe ff ff       	jmp    c001482d <Vm::faultHandler(regs*)+0x9a>
c0014987:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001498a:	be 04 00 00 00       	mov    esi,0x4
c001498f:	e9 99 fe ff ff       	jmp    c001482d <Vm::faultHandler(regs*)+0x9a>
c0014994:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014997:	be 05 00 00 00       	mov    esi,0x5
c001499c:	e9 8c fe ff ff       	jmp    c001482d <Vm::faultHandler(regs*)+0x9a>
c00149a1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149a4:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00149a9:	e9 7f fe ff ff       	jmp    c001482d <Vm::faultHandler(regs*)+0x9a>
c00149ae:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149b1:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00149b6:	e9 72 fe ff ff       	jmp    c001482d <Vm::faultHandler(regs*)+0x9a>
c00149bb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00149be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00149c2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149c7:	74 30                	je     c00149f9 <Vm::faultHandler(regs*)+0x266>
c00149c9:	83 e9 04             	sub    ecx,0x4
c00149cc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00149d2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00149d8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00149db:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00149de:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00149e4:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00149e8:	0f 84 15 04 00 00    	je     c0014e03 <Vm::faultHandler(regs*)+0x670>
c00149ee:	80 ce 02             	or     dh,0x2
c00149f1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00149f4:	e9 0a 04 00 00       	jmp    c0014e03 <Vm::faultHandler(regs*)+0x670>
c00149f9:	83 e9 02             	sub    ecx,0x2
c00149fc:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a02:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a05:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a09:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a0f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a13:	74 05                	je     c0014a1a <Vm::faultHandler(regs*)+0x287>
c0014a15:	80 ce 02             	or     dh,0x2
c0014a18:	eb 03                	jmp    c0014a1d <Vm::faultHandler(regs*)+0x28a>
c0014a1a:	80 e6 fd             	and    dh,0xfd
c0014a1d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a21:	e9 dd 03 00 00       	jmp    c0014e03 <Vm::faultHandler(regs*)+0x670>
c0014a26:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a2b:	74 2a                	je     c0014a57 <Vm::faultHandler(regs*)+0x2c4>
c0014a2d:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a2f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a35:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a3b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a40:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a46:	c1 e8 09             	shr    eax,0x9
c0014a49:	83 e0 01             	and    eax,0x1
c0014a4c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a4f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a52:	83 c0 04             	add    eax,0x4
c0014a55:	eb 25                	jmp    c0014a7c <Vm::faultHandler(regs*)+0x2e9>
c0014a57:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a5a:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a60:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a63:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014a66:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a6c:	66 c1 e8 09          	shr    ax,0x9
c0014a70:	83 e0 01             	and    eax,0x1
c0014a73:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a76:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a79:	83 c0 02             	add    eax,0x2
c0014a7c:	25 ff ff 00 00       	and    eax,0xffff
c0014a81:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014a84:	e9 7a 03 00 00       	jmp    c0014e03 <Vm::faultHandler(regs*)+0x670>
c0014a89:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014a8d:	3c ee                	cmp    al,0xee
c0014a8f:	75 10                	jne    c0014aa1 <Vm::faultHandler(regs*)+0x30e>
c0014a91:	83 ec 0c             	sub    esp,0xc
c0014a94:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014a97:	e8 e9 f8 ff ff       	call   c0014385 <Vm::mainloop3(unsigned long)>
c0014a9c:	e9 4b 03 00 00       	jmp    c0014dec <Vm::faultHandler(regs*)+0x659>
c0014aa1:	83 ec 0c             	sub    esp,0xc
c0014aa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014aa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014aac:	51                   	push   ecx
c0014aad:	50                   	push   eax
c0014aae:	53                   	push   ebx
c0014aaf:	e8 e1 fb ff ff       	call   c0014695 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014ab4:	83 c4 20             	add    esp,0x20
c0014ab7:	e9 4a 03 00 00       	jmp    c0014e06 <Vm::faultHandler(regs*)+0x673>
c0014abc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ac1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014ac5:	e9 39 03 00 00       	jmp    c0014e03 <Vm::faultHandler(regs*)+0x670>
c0014aca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014acf:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014ad3:	e9 2b 03 00 00       	jmp    c0014e03 <Vm::faultHandler(regs*)+0x670>
c0014ad8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014adb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014ae0:	74 2b                	je     c0014b0d <Vm::faultHandler(regs*)+0x37a>
c0014ae2:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014ae9:	76 22                	jbe    c0014b0d <Vm::faultHandler(regs*)+0x37a>
c0014aeb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014aef:	50                   	push   eax
c0014af0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014af4:	50                   	push   eax
c0014af5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014af9:	50                   	push   eax
c0014afa:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014afe:	50                   	push   eax
c0014aff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b03:	50                   	push   eax
c0014b04:	6a 6c                	push   0x6c
c0014b06:	6a 6c                	push   0x6c
c0014b08:	e9 b9 01 00 00       	jmp    c0014cc6 <Vm::faultHandler(regs*)+0x533>
c0014b0d:	83 ec 0c             	sub    esp,0xc
c0014b10:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014b14:	0f b7 f6             	movzx  esi,si
c0014b17:	50                   	push   eax
c0014b18:	e8 b8 f7 ff ff       	call   c00142d5 <Vm::inbv(unsigned short)>
c0014b1d:	83 c4 0c             	add    esp,0xc
c0014b20:	0f b6 c0             	movzx  eax,al
c0014b23:	50                   	push   eax
c0014b24:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014b28:	50                   	push   eax
c0014b29:	56                   	push   esi
c0014b2a:	e8 24 fc ff ff       	call   c0014753 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014b2f:	83 c4 10             	add    esp,0x10
c0014b32:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b35:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b39:	74 03                	je     c0014b3e <Vm::faultHandler(regs*)+0x3ab>
c0014b3b:	48                   	dec    eax
c0014b3c:	eb 01                	jmp    c0014b3f <Vm::faultHandler(regs*)+0x3ac>
c0014b3e:	40                   	inc    eax
c0014b3f:	0f b7 c0             	movzx  eax,ax
c0014b42:	e9 8d 00 00 00       	jmp    c0014bd4 <Vm::faultHandler(regs*)+0x441>
c0014b47:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b4a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b4d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b52:	74 29                	je     c0014b7d <Vm::faultHandler(regs*)+0x3ea>
c0014b54:	3d ff ff 00 00       	cmp    eax,0xffff
c0014b59:	76 22                	jbe    c0014b7d <Vm::faultHandler(regs*)+0x3ea>
c0014b5b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b5f:	50                   	push   eax
c0014b60:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b64:	50                   	push   eax
c0014b65:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b69:	50                   	push   eax
c0014b6a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b6e:	50                   	push   eax
c0014b6f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b73:	50                   	push   eax
c0014b74:	6a 6d                	push   0x6d
c0014b76:	6a 6d                	push   0x6d
c0014b78:	e9 49 01 00 00       	jmp    c0014cc6 <Vm::faultHandler(regs*)+0x533>
c0014b7d:	0f b7 c8             	movzx  ecx,ax
c0014b80:	0f b7 f6             	movzx  esi,si
c0014b83:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014b86:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b8b:	74 20                	je     c0014bad <Vm::faultHandler(regs*)+0x41a>
c0014b8d:	ed                   	in     eax,dx
c0014b8e:	55                   	push   ebp
c0014b8f:	50                   	push   eax
c0014b90:	51                   	push   ecx
c0014b91:	56                   	push   esi
c0014b92:	e8 e7 fb ff ff       	call   c001477e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014b97:	83 c4 10             	add    esp,0x10
c0014b9a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b9d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ba1:	74 05                	je     c0014ba8 <Vm::faultHandler(regs*)+0x415>
c0014ba3:	83 e8 04             	sub    eax,0x4
c0014ba6:	eb 27                	jmp    c0014bcf <Vm::faultHandler(regs*)+0x43c>
c0014ba8:	83 c0 04             	add    eax,0x4
c0014bab:	eb 22                	jmp    c0014bcf <Vm::faultHandler(regs*)+0x43c>
c0014bad:	66 ed                	in     ax,dx
c0014baf:	0f b7 c0             	movzx  eax,ax
c0014bb2:	57                   	push   edi
c0014bb3:	50                   	push   eax
c0014bb4:	51                   	push   ecx
c0014bb5:	56                   	push   esi
c0014bb6:	e8 ad fb ff ff       	call   c0014768 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014bbb:	83 c4 10             	add    esp,0x10
c0014bbe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bc1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bc5:	74 05                	je     c0014bcc <Vm::faultHandler(regs*)+0x439>
c0014bc7:	83 e8 02             	sub    eax,0x2
c0014bca:	eb 03                	jmp    c0014bcf <Vm::faultHandler(regs*)+0x43c>
c0014bcc:	83 c0 02             	add    eax,0x2
c0014bcf:	25 ff ff 00 00       	and    eax,0xffff
c0014bd4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014bd7:	e9 27 02 00 00       	jmp    c0014e03 <Vm::faultHandler(regs*)+0x670>
c0014bdc:	8d 46 ff             	lea    eax,[esi-0x1]
c0014bdf:	3c 05                	cmp    al,0x5
c0014be1:	77 24                	ja     c0014c07 <Vm::faultHandler(regs*)+0x474>
c0014be3:	0f b6 c0             	movzx  eax,al
c0014be6:	ff 24 85 6c ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1294]
c0014bed:	0f b7 fd             	movzx  edi,bp
c0014bf0:	eb 15                	jmp    c0014c07 <Vm::faultHandler(regs*)+0x474>
c0014bf2:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014bf6:	eb 0f                	jmp    c0014c07 <Vm::faultHandler(regs*)+0x474>
c0014bf8:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014bfc:	eb 09                	jmp    c0014c07 <Vm::faultHandler(regs*)+0x474>
c0014bfe:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014c02:	eb 03                	jmp    c0014c07 <Vm::faultHandler(regs*)+0x474>
c0014c04:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014c07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c0a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c0f:	74 29                	je     c0014c3a <Vm::faultHandler(regs*)+0x4a7>
c0014c11:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c16:	76 22                	jbe    c0014c3a <Vm::faultHandler(regs*)+0x4a7>
c0014c18:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c1c:	50                   	push   eax
c0014c1d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c21:	50                   	push   eax
c0014c22:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c26:	50                   	push   eax
c0014c27:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c2b:	50                   	push   eax
c0014c2c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c30:	50                   	push   eax
c0014c31:	6a 6e                	push   0x6e
c0014c33:	6a 6e                	push   0x6e
c0014c35:	e9 8c 00 00 00       	jmp    c0014cc6 <Vm::faultHandler(regs*)+0x533>
c0014c3a:	0f b7 c0             	movzx  eax,ax
c0014c3d:	52                   	push   edx
c0014c3e:	52                   	push   edx
c0014c3f:	50                   	push   eax
c0014c40:	57                   	push   edi
c0014c41:	e8 d9 fa ff ff       	call   c001471f <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014c46:	59                   	pop    ecx
c0014c47:	0f b6 c0             	movzx  eax,al
c0014c4a:	5e                   	pop    esi
c0014c4b:	50                   	push   eax
c0014c4c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c50:	50                   	push   eax
c0014c51:	e8 92 f6 ff ff       	call   c00142e8 <Vm::outbv(unsigned short, unsigned char)>
c0014c56:	83 c4 10             	add    esp,0x10
c0014c59:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c5c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c60:	74 03                	je     c0014c65 <Vm::faultHandler(regs*)+0x4d2>
c0014c62:	48                   	dec    eax
c0014c63:	eb 01                	jmp    c0014c66 <Vm::faultHandler(regs*)+0x4d3>
c0014c65:	40                   	inc    eax
c0014c66:	0f b7 c0             	movzx  eax,ax
c0014c69:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014c6c:	e9 92 01 00 00       	jmp    c0014e03 <Vm::faultHandler(regs*)+0x670>
c0014c71:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c74:	3c 05                	cmp    al,0x5
c0014c76:	77 1f                	ja     c0014c97 <Vm::faultHandler(regs*)+0x504>
c0014c78:	0f b6 c0             	movzx  eax,al
c0014c7b:	ff 24 85 84 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe127c]
c0014c82:	89 ef                	mov    edi,ebp
c0014c84:	eb 11                	jmp    c0014c97 <Vm::faultHandler(regs*)+0x504>
c0014c86:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014c89:	eb 0c                	jmp    c0014c97 <Vm::faultHandler(regs*)+0x504>
c0014c8b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014c8e:	eb 07                	jmp    c0014c97 <Vm::faultHandler(regs*)+0x504>
c0014c90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014c93:	eb 02                	jmp    c0014c97 <Vm::faultHandler(regs*)+0x504>
c0014c95:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014c97:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014c9a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c9f:	74 37                	je     c0014cd8 <Vm::faultHandler(regs*)+0x545>
c0014ca1:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014ca7:	76 2f                	jbe    c0014cd8 <Vm::faultHandler(regs*)+0x545>
c0014ca9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cad:	50                   	push   eax
c0014cae:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cb2:	50                   	push   eax
c0014cb3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cb7:	50                   	push   eax
c0014cb8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014cbc:	50                   	push   eax
c0014cbd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014cc1:	50                   	push   eax
c0014cc2:	6a 6f                	push   0x6f
c0014cc4:	6a 6f                	push   0x6f
c0014cc6:	68 12 ed 01 c0       	push   0xc001ed12
c0014ccb:	e8 08 58 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014cd0:	83 c4 20             	add    esp,0x20
c0014cd3:	e9 86 01 00 00       	jmp    c0014e5e <Vm::faultHandler(regs*)+0x6cb>
c0014cd8:	0f b7 d7             	movzx  edx,di
c0014cdb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014cde:	0f b7 c6             	movzx  eax,si
c0014ce1:	81 e1 00 04 00 00    	and    ecx,0x400
c0014ce7:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014cea:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cef:	74 1d                	je     c0014d0e <Vm::faultHandler(regs*)+0x57b>
c0014cf1:	55                   	push   ebp
c0014cf2:	55                   	push   ebp
c0014cf3:	50                   	push   eax
c0014cf4:	52                   	push   edx
c0014cf5:	e8 48 fa ff ff       	call   c0014742 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014cfa:	83 c4 10             	add    esp,0x10
c0014cfd:	89 fa                	mov    edx,edi
c0014cff:	ef                   	out    dx,eax
c0014d00:	85 c9                	test   ecx,ecx
c0014d02:	74 05                	je     c0014d09 <Vm::faultHandler(regs*)+0x576>
c0014d04:	83 ee 04             	sub    esi,0x4
c0014d07:	eb 21                	jmp    c0014d2a <Vm::faultHandler(regs*)+0x597>
c0014d09:	83 c6 04             	add    esi,0x4
c0014d0c:	eb 1c                	jmp    c0014d2a <Vm::faultHandler(regs*)+0x597>
c0014d0e:	55                   	push   ebp
c0014d0f:	55                   	push   ebp
c0014d10:	50                   	push   eax
c0014d11:	52                   	push   edx
c0014d12:	e8 19 fa ff ff       	call   c0014730 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014d17:	83 c4 10             	add    esp,0x10
c0014d1a:	89 fa                	mov    edx,edi
c0014d1c:	66 ef                	out    dx,ax
c0014d1e:	85 c9                	test   ecx,ecx
c0014d20:	74 05                	je     c0014d27 <Vm::faultHandler(regs*)+0x594>
c0014d22:	83 ee 02             	sub    esi,0x2
c0014d25:	eb 03                	jmp    c0014d2a <Vm::faultHandler(regs*)+0x597>
c0014d27:	83 c6 02             	add    esi,0x2
c0014d2a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014d30:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014d33:	e9 cb 00 00 00       	jmp    c0014e03 <Vm::faultHandler(regs*)+0x670>
c0014d38:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014d3f:	83 ec 0c             	sub    esp,0xc
c0014d42:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d46:	50                   	push   eax
c0014d47:	e8 89 f5 ff ff       	call   c00142d5 <Vm::inbv(unsigned short)>
c0014d4c:	0f b6 c0             	movzx  eax,al
c0014d4f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014d52:	eb 3f                	jmp    c0014d93 <Vm::faultHandler(regs*)+0x600>
c0014d54:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d59:	74 07                	je     c0014d62 <Vm::faultHandler(regs*)+0x5cf>
c0014d5b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d5f:	ed                   	in     eax,dx
c0014d60:	eb 14                	jmp    c0014d76 <Vm::faultHandler(regs*)+0x5e3>
c0014d62:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014d65:	66 31 f6             	xor    si,si
c0014d68:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014d6b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d6f:	66 ed                	in     ax,dx
c0014d71:	0f b7 c0             	movzx  eax,ax
c0014d74:	09 f0                	or     eax,esi
c0014d76:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014d79:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014d7d:	e9 84 00 00 00       	jmp    c0014e06 <Vm::faultHandler(regs*)+0x673>
c0014d82:	52                   	push   edx
c0014d83:	52                   	push   edx
c0014d84:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014d88:	50                   	push   eax
c0014d89:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d8d:	50                   	push   eax
c0014d8e:	e8 55 f5 ff ff       	call   c00142e8 <Vm::outbv(unsigned short, unsigned char)>
c0014d93:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014d97:	eb 53                	jmp    c0014dec <Vm::faultHandler(regs*)+0x659>
c0014d99:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014d9c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014da0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014da5:	74 03                	je     c0014daa <Vm::faultHandler(regs*)+0x617>
c0014da7:	ef                   	out    dx,eax
c0014da8:	eb cf                	jmp    c0014d79 <Vm::faultHandler(regs*)+0x5e6>
c0014daa:	66 ef                	out    dx,ax
c0014dac:	eb cb                	jmp    c0014d79 <Vm::faultHandler(regs*)+0x5e6>
c0014dae:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014db5:	83 ec 0c             	sub    esp,0xc
c0014db8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014dbc:	50                   	push   eax
c0014dbd:	e8 13 f5 ff ff       	call   c00142d5 <Vm::inbv(unsigned short)>
c0014dc2:	0f b6 c0             	movzx  eax,al
c0014dc5:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014dc8:	eb 1f                	jmp    c0014de9 <Vm::faultHandler(regs*)+0x656>
c0014dca:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014dcd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014dd2:	74 03                	je     c0014dd7 <Vm::faultHandler(regs*)+0x644>
c0014dd4:	ed                   	in     eax,dx
c0014dd5:	eb 0d                	jmp    c0014de4 <Vm::faultHandler(regs*)+0x651>
c0014dd7:	66 ed                	in     ax,dx
c0014dd9:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014ddc:	0f b7 c0             	movzx  eax,ax
c0014ddf:	66 31 d2             	xor    dx,dx
c0014de2:	09 d0                	or     eax,edx
c0014de4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014de7:	eb 1a                	jmp    c0014e03 <Vm::faultHandler(regs*)+0x670>
c0014de9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014dec:	83 c4 10             	add    esp,0x10
c0014def:	eb 15                	jmp    c0014e06 <Vm::faultHandler(regs*)+0x673>
c0014df1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014df4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014df7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014dfc:	74 03                	je     c0014e01 <Vm::faultHandler(regs*)+0x66e>
c0014dfe:	ef                   	out    dx,eax
c0014dff:	eb 02                	jmp    c0014e03 <Vm::faultHandler(regs*)+0x670>
c0014e01:	66 ef                	out    dx,ax
c0014e03:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e06:	b0 01                	mov    al,0x1
c0014e08:	eb 56                	jmp    c0014e60 <Vm::faultHandler(regs*)+0x6cd>
c0014e0a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e0e:	50                   	push   eax
c0014e0f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e13:	50                   	push   eax
c0014e14:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e18:	50                   	push   eax
c0014e19:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e1d:	50                   	push   eax
c0014e1e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e22:	50                   	push   eax
c0014e23:	52                   	push   edx
c0014e24:	52                   	push   edx
c0014e25:	68 3f ed 01 c0       	push   0xc001ed3f
c0014e2a:	e8 a9 56 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014e2f:	83 c4 20             	add    esp,0x20
c0014e32:	83 ec 0c             	sub    esp,0xc
c0014e35:	6a 60                	push   0x60
c0014e37:	e8 99 f4 ff ff       	call   c00142d5 <Vm::inbv(unsigned short)>
c0014e3c:	83 c4 10             	add    esp,0x10
c0014e3f:	3c 1c                	cmp    al,0x1c
c0014e41:	74 04                	je     c0014e47 <Vm::faultHandler(regs*)+0x6b4>
c0014e43:	3c 5a                	cmp    al,0x5a
c0014e45:	75 eb                	jne    c0014e32 <Vm::faultHandler(regs*)+0x69f>
c0014e47:	3c 5a                	cmp    al,0x5a
c0014e49:	74 04                	je     c0014e4f <Vm::faultHandler(regs*)+0x6bc>
c0014e4b:	3c 1c                	cmp    al,0x1c
c0014e4d:	75 0f                	jne    c0014e5e <Vm::faultHandler(regs*)+0x6cb>
c0014e4f:	83 ec 0c             	sub    esp,0xc
c0014e52:	6a 60                	push   0x60
c0014e54:	e8 7c f4 ff ff       	call   c00142d5 <Vm::inbv(unsigned short)>
c0014e59:	83 c4 10             	add    esp,0x10
c0014e5c:	eb e9                	jmp    c0014e47 <Vm::faultHandler(regs*)+0x6b4>
c0014e5e:	31 c0                	xor    eax,eax
c0014e60:	83 c4 1c             	add    esp,0x1c
c0014e63:	5b                   	pop    ebx
c0014e64:	5e                   	pop    esi
c0014e65:	5f                   	pop    edi
c0014e66:	5d                   	pop    ebp
c0014e67:	c3                   	ret    

c0014e68 <noCopro(unsigned long)>:
c0014e68:	c3                   	ret    

c0014e69 <nmiHandler(regs*, void*)>:
c0014e69:	83 ec 0c             	sub    esp,0xc
c0014e6c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0014e71:	83 ec 0c             	sub    esp,0xc
c0014e74:	50                   	push   eax
c0014e75:	e8 60 21 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014e7a:	83 c4 10             	add    esp,0x10
c0014e7d:	90                   	nop
c0014e7e:	83 c4 0c             	add    esp,0xc
c0014e81:	c3                   	ret    

c0014e82 <doubleFault(regs*, void*)>:
c0014e82:	55                   	push   ebp
c0014e83:	89 e5                	mov    ebp,esp
c0014e85:	83 ec 08             	sub    esp,0x8
c0014e88:	83 ec 0c             	sub    esp,0xc
c0014e8b:	68 9c ed 01 c0       	push   0xc001ed9c
c0014e90:	e8 c6 b2 ff ff       	call   c001015b <KePanic(char const*)>
c0014e95:	83 c4 10             	add    esp,0x10
c0014e98:	90                   	nop
c0014e99:	c9                   	leave  
c0014e9a:	c3                   	ret    

c0014e9b <displayDebugInfo(regs*)>:
c0014e9b:	83 ec 1c             	sub    esp,0x1c
c0014e9e:	0f 20 c0             	mov    eax,cr0
c0014ea1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ea5:	0f 20 d0             	mov    eax,cr2
c0014ea8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014eac:	0f 20 d8             	mov    eax,cr3
c0014eaf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014eb3:	0f 20 e0             	mov    eax,cr4
c0014eb6:	89 04 24             	mov    DWORD PTR [esp],eax
c0014eb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ebd:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014ec0:	83 ec 08             	sub    esp,0x8
c0014ec3:	50                   	push   eax
c0014ec4:	68 b8 ed 01 c0       	push   0xc001edb8
c0014ec9:	e8 0a 56 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014ece:	83 c4 10             	add    esp,0x10
c0014ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ed5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ed8:	83 ec 08             	sub    esp,0x8
c0014edb:	50                   	push   eax
c0014edc:	68 a9 ed 01 c0       	push   0xc001eda9
c0014ee1:	e8 f2 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014ee6:	83 c4 10             	add    esp,0x10
c0014ee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eed:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014ef0:	83 ec 08             	sub    esp,0x8
c0014ef3:	50                   	push   eax
c0014ef4:	68 b4 ed 01 c0       	push   0xc001edb4
c0014ef9:	e8 da 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014efe:	83 c4 10             	add    esp,0x10
c0014f01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f05:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f08:	83 ec 08             	sub    esp,0x8
c0014f0b:	50                   	push   eax
c0014f0c:	68 c3 ed 01 c0       	push   0xc001edc3
c0014f11:	e8 c2 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014f16:	83 c4 10             	add    esp,0x10
c0014f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f1d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014f20:	83 ec 08             	sub    esp,0x8
c0014f23:	50                   	push   eax
c0014f24:	68 ce ed 01 c0       	push   0xc001edce
c0014f29:	e8 aa 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014f2e:	83 c4 10             	add    esp,0x10
c0014f31:	83 ec 08             	sub    esp,0x8
c0014f34:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f38:	68 d9 ed 01 c0       	push   0xc001edd9
c0014f3d:	e8 96 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014f42:	83 c4 10             	add    esp,0x10
c0014f45:	83 ec 08             	sub    esp,0x8
c0014f48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014f4c:	68 e4 ed 01 c0       	push   0xc001ede4
c0014f51:	e8 82 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014f56:	83 c4 10             	add    esp,0x10
c0014f59:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f5e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f64:	83 ec 0c             	sub    esp,0xc
c0014f67:	50                   	push   eax
c0014f68:	e8 8a 34 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014f6d:	83 c4 10             	add    esp,0x10
c0014f70:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f7b:	83 ec 08             	sub    esp,0x8
c0014f7e:	68 ef ed 01 c0       	push   0xc001edef
c0014f83:	50                   	push   eax
c0014f84:	e8 ad 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014f89:	83 c4 10             	add    esp,0x10
c0014f8c:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f91:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f97:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014f9c:	8b 12                	mov    edx,DWORD PTR [edx]
c0014f9e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014fa1:	83 c2 0c             	add    edx,0xc
c0014fa4:	83 ec 08             	sub    esp,0x8
c0014fa7:	52                   	push   edx
c0014fa8:	50                   	push   eax
c0014fa9:	e8 88 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fae:	83 c4 10             	add    esp,0x10
c0014fb1:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fb6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fbc:	83 ec 08             	sub    esp,0x8
c0014fbf:	68 f8 ed 01 c0       	push   0xc001edf8
c0014fc4:	50                   	push   eax
c0014fc5:	e8 6c 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fca:	83 c4 10             	add    esp,0x10
c0014fcd:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fd2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fd8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014fdc:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014fdf:	83 ec 08             	sub    esp,0x8
c0014fe2:	52                   	push   edx
c0014fe3:	50                   	push   eax
c0014fe4:	e8 07 37 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014fe9:	83 c4 10             	add    esp,0x10
c0014fec:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014ff1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ff7:	83 ec 08             	sub    esp,0x8
c0014ffa:	68 00 ee 01 c0       	push   0xc001ee00
c0014fff:	50                   	push   eax
c0015000:	e8 31 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015005:	83 c4 10             	add    esp,0x10
c0015008:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001500d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015013:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015017:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001501a:	83 ec 08             	sub    esp,0x8
c001501d:	52                   	push   edx
c001501e:	50                   	push   eax
c001501f:	e8 cc 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015024:	83 c4 10             	add    esp,0x10
c0015027:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001502c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015032:	83 ec 08             	sub    esp,0x8
c0015035:	68 08 ee 01 c0       	push   0xc001ee08
c001503a:	50                   	push   eax
c001503b:	e8 f6 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015040:	83 c4 10             	add    esp,0x10
c0015043:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015048:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001504e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015052:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015055:	83 ec 08             	sub    esp,0x8
c0015058:	52                   	push   edx
c0015059:	50                   	push   eax
c001505a:	e8 91 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001505f:	83 c4 10             	add    esp,0x10
c0015062:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015067:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001506d:	83 ec 08             	sub    esp,0x8
c0015070:	68 10 ee 01 c0       	push   0xc001ee10
c0015075:	50                   	push   eax
c0015076:	e8 bb 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001507b:	83 c4 10             	add    esp,0x10
c001507e:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015083:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015089:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001508d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015090:	83 ec 08             	sub    esp,0x8
c0015093:	52                   	push   edx
c0015094:	50                   	push   eax
c0015095:	e8 56 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001509a:	83 c4 10             	add    esp,0x10
c001509d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150a2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150a8:	83 ec 08             	sub    esp,0x8
c00150ab:	68 18 ee 01 c0       	push   0xc001ee18
c00150b0:	50                   	push   eax
c00150b1:	e8 80 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150b6:	83 c4 10             	add    esp,0x10
c00150b9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150be:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150c8:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00150cb:	83 ec 08             	sub    esp,0x8
c00150ce:	52                   	push   edx
c00150cf:	50                   	push   eax
c00150d0:	e8 1b 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150d5:	83 c4 10             	add    esp,0x10
c00150d8:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150dd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150e3:	83 ec 08             	sub    esp,0x8
c00150e6:	68 20 ee 01 c0       	push   0xc001ee20
c00150eb:	50                   	push   eax
c00150ec:	e8 45 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150f1:	83 c4 10             	add    esp,0x10
c00150f4:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150f9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015103:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015106:	83 ec 08             	sub    esp,0x8
c0015109:	52                   	push   edx
c001510a:	50                   	push   eax
c001510b:	e8 e0 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015110:	83 c4 10             	add    esp,0x10
c0015113:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015118:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001511e:	83 ec 08             	sub    esp,0x8
c0015121:	68 28 ee 01 c0       	push   0xc001ee28
c0015126:	50                   	push   eax
c0015127:	e8 0a 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001512c:	83 c4 10             	add    esp,0x10
c001512f:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015134:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001513a:	83 ec 08             	sub    esp,0x8
c001513d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015141:	50                   	push   eax
c0015142:	e8 a9 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015147:	83 c4 10             	add    esp,0x10
c001514a:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001514f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015155:	83 ec 08             	sub    esp,0x8
c0015158:	68 31 ee 01 c0       	push   0xc001ee31
c001515d:	50                   	push   eax
c001515e:	e8 d3 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015163:	83 c4 10             	add    esp,0x10
c0015166:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001516b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015171:	83 ec 08             	sub    esp,0x8
c0015174:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015178:	50                   	push   eax
c0015179:	e8 72 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001517e:	83 c4 10             	add    esp,0x10
c0015181:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015186:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001518c:	83 ec 08             	sub    esp,0x8
c001518f:	68 39 ee 01 c0       	push   0xc001ee39
c0015194:	50                   	push   eax
c0015195:	e8 9c 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001519a:	83 c4 10             	add    esp,0x10
c001519d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151a2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151a8:	83 ec 08             	sub    esp,0x8
c00151ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00151af:	50                   	push   eax
c00151b0:	e8 3b 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151b5:	83 c4 10             	add    esp,0x10
c00151b8:	fa                   	cli    
c00151b9:	f4                   	hlt    
c00151ba:	eb fe                	jmp    c00151ba <displayDebugInfo(regs*)+0x31f>

c00151bc <HalSystemIdle()>:
c00151bc:	56                   	push   esi
c00151bd:	53                   	push   ebx
c00151be:	83 ec 14             	sub    esp,0x14
c00151c1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00151c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151cc:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00151d2:	83 e0 04             	and    eax,0x4
c00151d5:	84 c0                	test   al,al
c00151d7:	0f 95 c0             	setne  al
c00151da:	84 c0                	test   al,al
c00151dc:	74 4c                	je     c001522a <HalSystemIdle()+0x6e>
c00151de:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00151e3:	83 ec 08             	sub    esp,0x8
c00151e6:	68 e1 00 00 00       	push   0xe1
c00151eb:	50                   	push   eax
c00151ec:	e8 01 1c ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00151f1:	83 c4 10             	add    esp,0x10
c00151f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00151f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00151fc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015201:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015205:	83 e2 02             	and    edx,0x2
c0015208:	89 d3                	mov    ebx,edx
c001520a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001520e:	83 e2 00             	and    edx,0x0
c0015211:	89 d6                	mov    esi,edx
c0015213:	56                   	push   esi
c0015214:	53                   	push   ebx
c0015215:	68 e1 00 00 00       	push   0xe1
c001521a:	50                   	push   eax
c001521b:	e8 fe 1b ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0015220:	83 c4 10             	add    esp,0x10
c0015223:	e8 6c af fe ff       	call   c0000194 <doTPAUSE>
c0015228:	eb 01                	jmp    c001522b <HalSystemIdle()+0x6f>
c001522a:	f4                   	hlt    
c001522b:	90                   	nop
c001522c:	83 c4 14             	add    esp,0x14
c001522f:	5b                   	pop    ebx
c0015230:	5e                   	pop    esi
c0015231:	c3                   	ret    

c0015232 <displayProgramFault(char const*)>:
c0015232:	83 ec 0c             	sub    esp,0xc
c0015235:	83 ec 0c             	sub    esp,0xc
c0015238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001523c:	e8 97 52 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015241:	83 c4 10             	add    esp,0x10
c0015244:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015249:	8b 00                	mov    eax,DWORD PTR [eax]
c001524b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001524e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015254:	85 c0                	test   eax,eax
c0015256:	74 21                	je     c0015279 <displayProgramFault(char const*)+0x47>
c0015258:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001525d:	8b 00                	mov    eax,DWORD PTR [eax]
c001525f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015262:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015268:	6a 04                	push   0x4
c001526a:	6a 0f                	push   0xf
c001526c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015270:	50                   	push   eax
c0015271:	e8 32 35 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015276:	83 c4 10             	add    esp,0x10
c0015279:	90                   	nop
c001527a:	83 c4 0c             	add    esp,0xc
c001527d:	c3                   	ret    

c001527e <gpFault(regs*, void*)>:
c001527e:	83 ec 1c             	sub    esp,0x1c
c0015281:	c7 05 10 52 02 c0 93 47 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc0014793
c001528b:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c0015290:	85 c0                	test   eax,eax
c0015292:	74 1c                	je     c00152b0 <gpFault(regs*, void*)+0x32>
c0015294:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c0015299:	83 ec 0c             	sub    esp,0xc
c001529c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152a0:	ff d0                	call   eax
c00152a2:	83 c4 10             	add    esp,0x10
c00152a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00152a9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00152ae:	75 2e                	jne    c00152de <gpFault(regs*, void*)+0x60>
c00152b0:	83 ec 0c             	sub    esp,0xc
c00152b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152b7:	e8 df fb ff ff       	call   c0014e9b <displayDebugInfo(regs*)>
c00152bc:	83 c4 10             	add    esp,0x10
c00152bf:	83 ec 0c             	sub    esp,0xc
c00152c2:	68 41 ee 01 c0       	push   0xc001ee41
c00152c7:	e8 66 ff ff ff       	call   c0015232 <displayProgramFault(char const*)>
c00152cc:	83 c4 10             	add    esp,0x10
c00152cf:	83 ec 0c             	sub    esp,0xc
c00152d2:	6a 00                	push   0x0
c00152d4:	e8 af ee ff ff       	call   c0014188 <Thr::terminateFromIRQ(int)>
c00152d9:	83 c4 10             	add    esp,0x10
c00152dc:	eb 01                	jmp    c00152df <gpFault(regs*, void*)+0x61>
c00152de:	90                   	nop
c00152df:	83 c4 1c             	add    esp,0x1c
c00152e2:	c3                   	ret    

c00152e3 <pgFault(regs*, void*)>:
c00152e3:	83 ec 1c             	sub    esp,0x1c
c00152e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152ea:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152ed:	0f 20 d0             	mov    eax,cr2
c00152f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00152f8:	83 ec 04             	sub    esp,0x4
c00152fb:	52                   	push   edx
c00152fc:	50                   	push   eax
c00152fd:	68 20 ef 01 c0       	push   0xc001ef20
c0015302:	e8 d1 51 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015307:	83 c4 10             	add    esp,0x10
c001530a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001530f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015311:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015314:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001531a:	0f 20 d2             	mov    edx,cr2
c001531d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015321:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015325:	83 ec 08             	sub    esp,0x8
c0015328:	52                   	push   edx
c0015329:	50                   	push   eax
c001532a:	e8 db 4d ff ff       	call   c000a10a <VAS::tryLoadBackOffDisk(unsigned long)>
c001532f:	83 c4 10             	add    esp,0x10
c0015332:	84 c0                	test   al,al
c0015334:	75 2e                	jne    c0015364 <pgFault(regs*, void*)+0x81>
c0015336:	83 ec 0c             	sub    esp,0xc
c0015339:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001533d:	e8 59 fb ff ff       	call   c0014e9b <displayDebugInfo(regs*)>
c0015342:	83 c4 10             	add    esp,0x10
c0015345:	83 ec 0c             	sub    esp,0xc
c0015348:	68 5a ee 01 c0       	push   0xc001ee5a
c001534d:	e8 e0 fe ff ff       	call   c0015232 <displayProgramFault(char const*)>
c0015352:	83 c4 10             	add    esp,0x10
c0015355:	83 ec 0c             	sub    esp,0xc
c0015358:	6a 00                	push   0x0
c001535a:	e8 29 ee ff ff       	call   c0014188 <Thr::terminateFromIRQ(int)>
c001535f:	83 c4 10             	add    esp,0x10
c0015362:	eb 01                	jmp    c0015365 <pgFault(regs*, void*)+0x82>
c0015364:	90                   	nop
c0015365:	83 c4 1c             	add    esp,0x1c
c0015368:	c3                   	ret    

c0015369 <otherISRHandler(regs*, void*)>:
c0015369:	83 ec 0c             	sub    esp,0xc
c001536c:	83 ec 0c             	sub    esp,0xc
c001536f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015373:	e8 23 fb ff ff       	call   c0014e9b <displayDebugInfo(regs*)>
c0015378:	83 c4 10             	add    esp,0x10
c001537b:	83 ec 0c             	sub    esp,0xc
c001537e:	68 48 ef 01 c0       	push   0xc001ef48
c0015383:	e8 aa fe ff ff       	call   c0015232 <displayProgramFault(char const*)>
c0015388:	83 c4 10             	add    esp,0x10
c001538b:	83 ec 0c             	sub    esp,0xc
c001538e:	6a 00                	push   0x0
c0015390:	e8 f3 ed ff ff       	call   c0014188 <Thr::terminateFromIRQ(int)>
c0015395:	83 c4 10             	add    esp,0x10
c0015398:	90                   	nop
c0015399:	83 c4 0c             	add    esp,0xc
c001539c:	c3                   	ret    

c001539d <opcodeFault(regs*, void*)>:
c001539d:	55                   	push   ebp
c001539e:	89 e5                	mov    ebp,esp
c00153a0:	83 ec 08             	sub    esp,0x8
c00153a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a9:	83 ec 08             	sub    esp,0x8
c00153ac:	50                   	push   eax
c00153ad:	68 65 ee 01 c0       	push   0xc001ee65
c00153b2:	e8 21 51 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00153b7:	83 c4 10             	add    esp,0x10
c00153ba:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00153bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153c5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00153cb:	84 c0                	test   al,al
c00153cd:	74 21                	je     c00153f0 <opcodeFault(regs*, void*)+0x53>
c00153cf:	83 ec 0c             	sub    esp,0xc
c00153d2:	68 70 ef 01 c0       	push   0xc001ef70
c00153d7:	e8 fc 50 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00153dc:	83 c4 10             	add    esp,0x10
c00153df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e5:	8d 50 19             	lea    edx,[eax+0x19]
c00153e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153eb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ee:	eb 2b                	jmp    c001541b <opcodeFault(regs*, void*)+0x7e>
c00153f0:	83 ec 0c             	sub    esp,0xc
c00153f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00153f6:	e8 a0 fa ff ff       	call   c0014e9b <displayDebugInfo(regs*)>
c00153fb:	83 c4 10             	add    esp,0x10
c00153fe:	83 ec 0c             	sub    esp,0xc
c0015401:	68 73 ee 01 c0       	push   0xc001ee73
c0015406:	e8 27 fe ff ff       	call   c0015232 <displayProgramFault(char const*)>
c001540b:	83 c4 10             	add    esp,0x10
c001540e:	83 ec 0c             	sub    esp,0xc
c0015411:	6a 00                	push   0x0
c0015413:	e8 70 ed ff ff       	call   c0014188 <Thr::terminateFromIRQ(int)>
c0015418:	83 c4 10             	add    esp,0x10
c001541b:	c9                   	leave  
c001541c:	c3                   	ret    

c001541d <i386SaveCoprocessor(void*)>:
c001541d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015421:	83 c0 3f             	add    eax,0x3f
c0015424:	83 e0 c0             	and    eax,0xffffffc0
c0015427:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001542b:	ff 25 0c 52 02 c0    	jmp    DWORD PTR ds:0xc002520c

c0015431 <i386LoadCoprocessor(void*)>:
c0015431:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015435:	83 c0 3f             	add    eax,0x3f
c0015438:	83 e0 c0             	and    eax,0xffffffc0
c001543b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001543f:	ff 25 08 52 02 c0    	jmp    DWORD PTR ds:0xc0025208

c0015445 <x87EmulHandler(regs*, void*)>:
c0015445:	53                   	push   ebx
c0015446:	83 ec 08             	sub    esp,0x8
c0015449:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001544e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015452:	74 10                	je     c0015464 <x87EmulHandler(regs*, void*)+0x1f>
c0015454:	83 ec 0c             	sub    esp,0xc
c0015457:	68 80 ee 01 c0       	push   0xc001ee80
c001545c:	e8 fa ac ff ff       	call   c001015b <KePanic(char const*)>
c0015461:	83 c4 10             	add    esp,0x10
c0015464:	0f 20 c0             	mov    eax,cr0
c0015467:	a8 08                	test   al,0x8
c0015469:	74 59                	je     c00154c4 <x87EmulHandler(regs*, void*)+0x7f>
c001546b:	0f 06                	clts   
c001546d:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c0015472:	85 c0                	test   eax,eax
c0015474:	74 0e                	je     c0015484 <x87EmulHandler(regs*, void*)+0x3f>
c0015476:	83 ec 0c             	sub    esp,0xc
c0015479:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001547c:	e8 9c ff ff ff       	call   c001541d <i386SaveCoprocessor(void*)>
c0015481:	83 c4 10             	add    esp,0x10
c0015484:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001548a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001548e:	75 12                	jne    c00154a2 <x87EmulHandler(regs*, void*)+0x5d>
c0015490:	83 ec 0c             	sub    esp,0xc
c0015493:	68 40 02 00 00       	push   0x240
c0015498:	e8 1c 23 ff ff       	call   c00077b9 <malloc>
c001549d:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00154a0:	eb 10                	jmp    c00154b2 <x87EmulHandler(regs*, void*)+0x6d>
c00154a2:	83 ec 0c             	sub    esp,0xc
c00154a5:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c00154aa:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154ad:	e8 7f ff ff ff       	call   c0015431 <i386LoadCoprocessor(void*)>
c00154b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154b7:	83 c4 10             	add    esp,0x10
c00154ba:	a3 04 52 02 c0       	mov    ds:0xc0025204,eax
c00154bf:	83 c4 08             	add    esp,0x8
c00154c2:	5b                   	pop    ebx
c00154c3:	c3                   	ret    
c00154c4:	83 ec 0c             	sub    esp,0xc
c00154c7:	68 94 ee 01 c0       	push   0xc001ee94
c00154cc:	e8 07 50 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00154d1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00154d9:	83 c4 18             	add    esp,0x18
c00154dc:	5b                   	pop    ebx
c00154dd:	e9 a6 ec ff ff       	jmp    c0014188 <Thr::terminateFromIRQ(int)>

c00154e2 <HalInitialiseCoprocessor()>:
c00154e2:	83 ec 10             	sub    esp,0x10
c00154e5:	c7 05 04 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025204,0x0
c00154ef:	6a 00                	push   0x0
c00154f1:	68 45 54 01 c0       	push   0xc0015445
c00154f6:	6a 07                	push   0x7
c00154f8:	e8 4f 69 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154fd:	e8 8e 65 00 00       	call   c001ba90 <avxDetect>
c0015502:	83 c4 10             	add    esp,0x10
c0015505:	85 c0                	test   eax,eax
c0015507:	74 1c                	je     c0015525 <HalInitialiseCoprocessor()+0x43>
c0015509:	c7 05 0c 52 02 c0 ba ba 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001baba
c0015513:	c7 05 08 52 02 c0 cb ba 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bacb
c001551d:	83 c4 0c             	add    esp,0xc
c0015520:	e9 b7 65 00 00       	jmp    c001badc <avxInit>
c0015525:	e8 46 68 00 00       	call   c001bd70 <absolutelyNoChanceInHell>
c001552a:	85 c0                	test   eax,eax
c001552c:	74 1c                	je     c001554a <HalInitialiseCoprocessor()+0x68>
c001552e:	c7 05 0c 52 02 c0 88 bd 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bd88
c0015538:	c7 05 08 52 02 c0 90 bd 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bd90
c0015542:	83 c4 0c             	add    esp,0xc
c0015545:	e9 4e 68 00 00       	jmp    c001bd98 <sseInit>
c001554a:	e8 67 68 00 00       	call   c001bdb6 <x87Detect>
c001554f:	85 c0                	test   eax,eax
c0015551:	74 1c                	je     c001556f <HalInitialiseCoprocessor()+0x8d>
c0015553:	c7 05 0c 52 02 c0 d1 bd 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bdd1
c001555d:	c7 05 08 52 02 c0 d8 bd 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bdd8
c0015567:	83 c4 0c             	add    esp,0xc
c001556a:	e9 70 68 00 00       	jmp    c001bddf <x87Init>
c001556f:	c7 05 0c 52 02 c0 68 4e 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0014e68
c0015579:	c7 05 08 52 02 c0 68 4e 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0014e68
c0015583:	0f 20 c0             	mov    eax,cr0
c0015586:	83 c8 04             	or     eax,0x4
c0015589:	0f 22 c0             	mov    cr0,eax
c001558c:	83 c4 0c             	add    esp,0xc
c001558f:	c3                   	ret    

c0015590 <HalPanic(char const*)>:
c0015590:	53                   	push   ebx
c0015591:	83 ec 10             	sub    esp,0x10
c0015594:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015598:	fa                   	cli    
c0015599:	53                   	push   ebx
c001559a:	68 aa ee 01 c0       	push   0xc001eeaa
c001559f:	e8 34 4f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00155a4:	83 c4 0c             	add    esp,0xc
c00155a7:	6a 01                	push   0x1
c00155a9:	6a 0f                	push   0xf
c00155ab:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155b1:	e8 94 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155b6:	58                   	pop    eax
c00155b7:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155bd:	e8 80 2e ff ff       	call   c0008442 <VgaText::clearScreen()>
c00155c2:	5a                   	pop    edx
c00155c3:	59                   	pop    ecx
c00155c4:	68 c8 d7 01 c0       	push   0xc001d7c8
c00155c9:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155cf:	e8 ae 2c ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c00155d4:	83 c4 0c             	add    esp,0xc
c00155d7:	6a 01                	push   0x1
c00155d9:	6a 0f                	push   0xf
c00155db:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155e1:	e8 64 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155e6:	58                   	pop    eax
c00155e7:	5a                   	pop    edx
c00155e8:	68 c3 ee 01 c0       	push   0xc001eec3
c00155ed:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155f3:	e8 3e 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00155f8:	83 c4 0c             	add    esp,0xc
c00155fb:	6a 0f                	push   0xf
c00155fd:	6a 01                	push   0x1
c00155ff:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015605:	e8 40 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001560a:	59                   	pop    ecx
c001560b:	58                   	pop    eax
c001560c:	68 cc ee 01 c0       	push   0xc001eecc
c0015611:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015617:	e8 1a 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001561c:	83 c4 0c             	add    esp,0xc
c001561f:	6a 01                	push   0x1
c0015621:	6a 0f                	push   0xf
c0015623:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015629:	e8 1c 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001562e:	58                   	pop    eax
c001562f:	5a                   	pop    edx
c0015630:	68 10 ef 01 c0       	push   0xc001ef10
c0015635:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001563b:	e8 f6 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015640:	59                   	pop    ecx
c0015641:	58                   	pop    eax
c0015642:	68 d9 ee 01 c0       	push   0xc001eed9
c0015647:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001564d:	e8 e4 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015652:	58                   	pop    eax
c0015653:	5a                   	pop    edx
c0015654:	68 13 ef 01 c0       	push   0xc001ef13
c0015659:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001565f:	e8 d2 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015664:	59                   	pop    ecx
c0015665:	58                   	pop    eax
c0015666:	53                   	push   ebx
c0015667:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001566d:	e8 c4 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015672:	58                   	pop    eax
c0015673:	5a                   	pop    edx
c0015674:	68 10 ef 01 c0       	push   0xc001ef10
c0015679:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001567f:	e8 b2 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015684:	83 c4 10             	add    esp,0x10
c0015687:	eb fe                	jmp    c0015687 <HalPanic(char const*)+0xf7>

c0015689 <HalQueryPerformanceCounter()>:
c0015689:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001568e:	31 d2                	xor    edx,edx
c0015690:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015696:	31 c0                	xor    eax,eax
c0015698:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001569f:	74 02                	je     c00156a3 <HalQueryPerformanceCounter()+0x1a>
c00156a1:	0f 31                	rdtsc  
c00156a3:	c3                   	ret    

c00156a4 <HalInitialise()>:
c00156a4:	53                   	push   ebx
c00156a5:	83 ec 08             	sub    esp,0x8
c00156a8:	e8 d2 69 ff ff       	call   c000c07f <setupINTS()>
c00156ad:	80 3d 80 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024780,0x0
c00156b4:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00156b9:	75 07                	jne    c00156c2 <HalInitialise()+0x1e>
c00156bb:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00156c2:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00156c8:	83 e0 01             	and    eax,0x1
c00156cb:	a2 00 52 02 c0       	mov    ds:0xc0025200,al
c00156d0:	e8 a7 02 00 00       	call   c001597c <picOpen()>
c00156d5:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c00156dc:	74 0a                	je     c00156e8 <HalInitialise()+0x44>
c00156de:	e8 e1 01 00 00       	call   c00158c4 <picDisable()>
c00156e3:	e8 26 5d 00 00       	call   c001b40e <apicOpen()>
c00156e8:	bb 0f 00 00 00       	mov    ebx,0xf
c00156ed:	50                   	push   eax
c00156ee:	6a 00                	push   0x0
c00156f0:	68 69 53 01 c0       	push   0xc0015369
c00156f5:	6a 00                	push   0x0
c00156f7:	e8 50 67 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00156fc:	83 c4 0c             	add    esp,0xc
c00156ff:	6a 00                	push   0x0
c0015701:	68 69 53 01 c0       	push   0xc0015369
c0015706:	6a 01                	push   0x1
c0015708:	e8 3f 67 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001570d:	83 c4 0c             	add    esp,0xc
c0015710:	6a 00                	push   0x0
c0015712:	68 69 4e 01 c0       	push   0xc0014e69
c0015717:	6a 02                	push   0x2
c0015719:	e8 2e 67 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001571e:	83 c4 0c             	add    esp,0xc
c0015721:	6a 00                	push   0x0
c0015723:	68 69 53 01 c0       	push   0xc0015369
c0015728:	6a 03                	push   0x3
c001572a:	e8 1d 67 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001572f:	83 c4 0c             	add    esp,0xc
c0015732:	6a 00                	push   0x0
c0015734:	68 69 53 01 c0       	push   0xc0015369
c0015739:	6a 04                	push   0x4
c001573b:	e8 0c 67 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015740:	83 c4 0c             	add    esp,0xc
c0015743:	6a 00                	push   0x0
c0015745:	68 69 53 01 c0       	push   0xc0015369
c001574a:	6a 05                	push   0x5
c001574c:	e8 fb 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015751:	83 c4 0c             	add    esp,0xc
c0015754:	6a 00                	push   0x0
c0015756:	68 9d 53 01 c0       	push   0xc001539d
c001575b:	6a 06                	push   0x6
c001575d:	e8 ea 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015762:	83 c4 0c             	add    esp,0xc
c0015765:	6a 00                	push   0x0
c0015767:	68 82 4e 01 c0       	push   0xc0014e82
c001576c:	6a 08                	push   0x8
c001576e:	e8 d9 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015773:	83 c4 0c             	add    esp,0xc
c0015776:	6a 00                	push   0x0
c0015778:	68 69 53 01 c0       	push   0xc0015369
c001577d:	6a 09                	push   0x9
c001577f:	e8 c8 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015784:	83 c4 0c             	add    esp,0xc
c0015787:	6a 00                	push   0x0
c0015789:	68 69 53 01 c0       	push   0xc0015369
c001578e:	6a 0a                	push   0xa
c0015790:	e8 b7 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015795:	83 c4 0c             	add    esp,0xc
c0015798:	6a 00                	push   0x0
c001579a:	68 69 53 01 c0       	push   0xc0015369
c001579f:	6a 0b                	push   0xb
c00157a1:	e8 a6 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157a6:	83 c4 0c             	add    esp,0xc
c00157a9:	6a 00                	push   0x0
c00157ab:	68 7e 52 01 c0       	push   0xc001527e
c00157b0:	6a 0d                	push   0xd
c00157b2:	e8 95 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157b7:	83 c4 0c             	add    esp,0xc
c00157ba:	6a 00                	push   0x0
c00157bc:	68 e3 52 01 c0       	push   0xc00152e3
c00157c1:	6a 0e                	push   0xe
c00157c3:	e8 84 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157c8:	83 c4 10             	add    esp,0x10
c00157cb:	50                   	push   eax
c00157cc:	6a 00                	push   0x0
c00157ce:	68 69 53 01 c0       	push   0xc0015369
c00157d3:	53                   	push   ebx
c00157d4:	43                   	inc    ebx
c00157d5:	e8 72 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157da:	83 c4 10             	add    esp,0x10
c00157dd:	83 fb 1e             	cmp    ebx,0x1e
c00157e0:	75 e9                	jne    c00157cb <HalInitialise()+0x127>
c00157e2:	50                   	push   eax
c00157e3:	6a 00                	push   0x0
c00157e5:	68 f1 13 01 c0       	push   0xc00113f1
c00157ea:	6a 60                	push   0x60
c00157ec:	e8 5b 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157f1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00157f6:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015800:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015807:	e8 ad 1f ff ff       	call   c00077b9 <malloc>
c001580c:	89 04 24             	mov    DWORD PTR [esp],eax
c001580f:	89 c3                	mov    ebx,eax
c0015811:	e8 2e 09 00 00       	call   c0016144 <RTC::RTC()>
c0015816:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015820:	5a                   	pop    edx
c0015821:	59                   	pop    ecx
c0015822:	53                   	push   ebx
c0015823:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015829:	e8 ea 60 ff ff       	call   c000b918 <Device::addChild(Device*)>
c001582e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015830:	6a 00                	push   0x0
c0015832:	6a 00                	push   0x0
c0015834:	6a 00                	push   0x0
c0015836:	53                   	push   ebx
c0015837:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001583a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001583f:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015845:	83 c4 28             	add    esp,0x28
c0015848:	5b                   	pop    ebx
c0015849:	c3                   	ret    

c001584a <HalMakeBeep(int)>:
c001584a:	53                   	push   ebx
c001584b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001584f:	85 db                	test   ebx,ebx
c0015851:	75 07                	jne    c001585a <HalMakeBeep(int)+0x10>
c0015853:	e4 61                	in     al,0x61
c0015855:	83 e0 fc             	and    eax,0xfffffffc
c0015858:	eb 26                	jmp    c0015880 <HalMakeBeep(int)+0x36>
c001585a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001585f:	99                   	cdq    
c0015860:	f7 fb                	idiv   ebx
c0015862:	89 c1                	mov    ecx,eax
c0015864:	b0 b6                	mov    al,0xb6
c0015866:	e6 43                	out    0x43,al
c0015868:	88 c8                	mov    al,cl
c001586a:	e6 42                	out    0x42,al
c001586c:	89 c8                	mov    eax,ecx
c001586e:	c1 e8 08             	shr    eax,0x8
c0015871:	e6 42                	out    0x42,al
c0015873:	e4 61                	in     al,0x61
c0015875:	88 c2                	mov    dl,al
c0015877:	83 ca 03             	or     edx,0x3
c001587a:	38 c2                	cmp    dl,al
c001587c:	74 04                	je     c0015882 <HalMakeBeep(int)+0x38>
c001587e:	88 d0                	mov    al,dl
c0015880:	e6 61                	out    0x61,al
c0015882:	5b                   	pop    ebx
c0015883:	c3                   	ret    

c0015884 <HalGetRand()>:
c0015884:	31 c0                	xor    eax,eax
c0015886:	c3                   	ret    

c0015887 <HalEndOfInterrupt(int)>:
c0015887:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c001588e:	74 23                	je     c00158b3 <HalEndOfInterrupt(int)+0x2c>
c0015890:	83 ec 14             	sub    esp,0x14
c0015893:	6a 1b                	push   0x1b
c0015895:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001589b:	e8 52 15 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00158a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158a5:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00158af:	83 c4 1c             	add    esp,0x1c
c00158b2:	c3                   	ret    
c00158b3:	e9 54 02 00 00       	jmp    c0015b0c <picEOI(int)>

c00158b8 <HalRestart()>:
c00158b8:	c3                   	ret    

c00158b9 <HalShutdown()>:
c00158b9:	c3                   	ret    

c00158ba <HalSleep()>:
c00158ba:	c3                   	ret    
c00158bb:	90                   	nop

c00158bc <picIoWait()>:
c00158bc:	eb 00                	jmp    c00158be <picIoWait()+0x2>
c00158be:	eb 00                	jmp    c00158c0 <picIoWait()+0x4>
c00158c0:	90                   	nop
c00158c1:	c3                   	ret    
c00158c2:	66 90                	xchg   ax,ax

c00158c4 <picDisable()>:
c00158c4:	83 ec 10             	sub    esp,0x10
c00158c7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00158ce:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00158d3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00158d7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00158dc:	ee                   	out    dx,al
c00158dd:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00158e4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00158e9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00158ed:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00158f2:	ee                   	out    dx,al
c00158f3:	90                   	nop
c00158f4:	83 c4 10             	add    esp,0x10
c00158f7:	c3                   	ret    

c00158f8 <picGetIRQReg(int)>:
c00158f8:	83 ec 10             	sub    esp,0x10
c00158fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00158ff:	25 ff 00 00 00       	and    eax,0xff
c0015904:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001590b:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001590f:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015913:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015918:	ee                   	out    dx,al
c0015919:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001591d:	25 ff 00 00 00       	and    eax,0xff
c0015922:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015929:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001592d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015931:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015936:	ee                   	out    dx,al
c0015937:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001593e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015943:	89 c2                	mov    edx,eax
c0015945:	ec                   	in     al,dx
c0015946:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001594a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001594e:	25 ff 00 00 00       	and    eax,0xff
c0015953:	c1 e0 08             	shl    eax,0x8
c0015956:	89 c1                	mov    ecx,eax
c0015958:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001595f:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015964:	89 c2                	mov    edx,eax
c0015966:	ec                   	in     al,dx
c0015967:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001596b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001596f:	25 ff 00 00 00       	and    eax,0xff
c0015974:	09 c8                	or     eax,ecx
c0015976:	83 c4 10             	add    esp,0x10
c0015979:	c3                   	ret    
c001597a:	66 90                	xchg   ax,ax

c001597c <picOpen()>:
c001597c:	83 ec 50             	sub    esp,0x50
c001597f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015986:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001598b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001598f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015993:	ee                   	out    dx,al
c0015994:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001599b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00159a0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00159a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00159a8:	ee                   	out    dx,al
c00159a9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00159b1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00159b9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00159c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00159c4:	89 c2                	mov    edx,eax
c00159c6:	ec                   	in     al,dx
c00159c7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00159cb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00159cf:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00159d3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00159da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00159de:	89 c2                	mov    edx,eax
c00159e0:	ec                   	in     al,dx
c00159e1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00159e5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00159e9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00159ed:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00159f4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00159f9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00159fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a01:	ee                   	out    dx,al
c0015a02:	e8 b5 fe ff ff       	call   c00158bc <picIoWait()>
c0015a07:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015a0e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015a13:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015a17:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a1b:	ee                   	out    dx,al
c0015a1c:	e8 9b fe ff ff       	call   c00158bc <picIoWait()>
c0015a21:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a25:	25 ff 00 00 00       	and    eax,0xff
c0015a2a:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015a31:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015a35:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015a39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a3d:	ee                   	out    dx,al
c0015a3e:	e8 79 fe ff ff       	call   c00158bc <picIoWait()>
c0015a43:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015a47:	25 ff 00 00 00       	and    eax,0xff
c0015a4c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015a53:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015a57:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015a5b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015a5f:	ee                   	out    dx,al
c0015a60:	e8 57 fe ff ff       	call   c00158bc <picIoWait()>
c0015a65:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015a6c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015a71:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015a75:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015a79:	ee                   	out    dx,al
c0015a7a:	e8 3d fe ff ff       	call   c00158bc <picIoWait()>
c0015a7f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015a86:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015a8b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015a8f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015a93:	ee                   	out    dx,al
c0015a94:	e8 23 fe ff ff       	call   c00158bc <picIoWait()>
c0015a99:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015aa0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015aa5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015aa9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015aad:	ee                   	out    dx,al
c0015aae:	e8 09 fe ff ff       	call   c00158bc <picIoWait()>
c0015ab3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015aba:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015abf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015ac3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ac7:	ee                   	out    dx,al
c0015ac8:	e8 ef fd ff ff       	call   c00158bc <picIoWait()>
c0015acd:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015ad1:	25 ff 00 00 00       	and    eax,0xff
c0015ad6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015add:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015ae1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015ae5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015ae9:	ee                   	out    dx,al
c0015aea:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015aee:	25 ff 00 00 00       	and    eax,0xff
c0015af3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015afa:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015afe:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015b02:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015b06:	ee                   	out    dx,al
c0015b07:	90                   	nop
c0015b08:	83 c4 50             	add    esp,0x50
c0015b0b:	c3                   	ret    

c0015b0c <picEOI(int)>:
c0015b0c:	83 ec 10             	sub    esp,0x10
c0015b0f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b14:	75 22                	jne    c0015b38 <picEOI(int)+0x2c>
c0015b16:	6a 0b                	push   0xb
c0015b18:	e8 db fd ff ff       	call   c00158f8 <picGetIRQReg(int)>
c0015b1d:	83 c4 04             	add    esp,0x4
c0015b20:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015b25:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b2a:	25 ff ff 00 00       	and    eax,0xffff
c0015b2f:	25 80 00 00 00       	and    eax,0x80
c0015b34:	74 72                	je     c0015ba8 <picEOI(int)+0x9c>
c0015b36:	66 90                	xchg   ax,ax
c0015b38:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015b3d:	75 31                	jne    c0015b70 <picEOI(int)+0x64>
c0015b3f:	6a 0b                	push   0xb
c0015b41:	e8 b2 fd ff ff       	call   c00158f8 <picGetIRQReg(int)>
c0015b46:	83 c4 04             	add    esp,0x4
c0015b49:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b52:	66 85 c0             	test   ax,ax
c0015b55:	78 19                	js     c0015b70 <picEOI(int)+0x64>
c0015b57:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015b5e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015b63:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015b67:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015b6c:	ee                   	out    dx,al
c0015b6d:	eb 3d                	jmp    c0015bac <picEOI(int)+0xa0>
c0015b6f:	90                   	nop
c0015b70:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b75:	7e 19                	jle    c0015b90 <picEOI(int)+0x84>
c0015b77:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015b7e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015b83:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015b87:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015b8c:	ee                   	out    dx,al
c0015b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b90:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015b97:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015b9c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015ba0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015ba5:	ee                   	out    dx,al
c0015ba6:	eb 04                	jmp    c0015bac <picEOI(int)+0xa0>
c0015ba8:	90                   	nop
c0015ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bac:	83 c4 10             	add    esp,0x10
c0015baf:	c3                   	ret    

c0015bb0 <RTC::open(int, int, void*)>:
c0015bb0:	31 c0                	xor    eax,eax
c0015bb2:	c3                   	ret    
c0015bb3:	90                   	nop

c0015bb4 <RTC::close(int, int, void*)>:
c0015bb4:	31 c0                	xor    eax,eax
c0015bb6:	c3                   	ret    
c0015bb7:	90                   	nop

c0015bb8 <RTC::timeInSecondsUTC()>:
c0015bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bbc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015bc2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015bc8:	c3                   	ret    
c0015bc9:	90                   	nop

c0015bca <RTC::timeInDatetimeUTC()>:
c0015bca:	53                   	push   ebx
c0015bcb:	83 ec 14             	sub    esp,0x14
c0015bce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd6:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bd8:	50                   	push   eax
c0015bd9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015bdc:	83 c4 0c             	add    esp,0xc
c0015bdf:	52                   	push   edx
c0015be0:	50                   	push   eax
c0015be1:	53                   	push   ebx
c0015be2:	e8 a5 5a ff ff       	call   c000b68c <secondsToDatetime(unsigned long long)>
c0015be7:	89 d8                	mov    eax,ebx
c0015be9:	83 c4 14             	add    esp,0x14
c0015bec:	5b                   	pop    ebx
c0015bed:	c2 04 00             	ret    0x4

c0015bf0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015bf0:	56                   	push   esi
c0015bf1:	53                   	push   ebx
c0015bf2:	83 ec 14             	sub    esp,0x14
c0015bf5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015bf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bfb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015bfe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c02:	52                   	push   edx
c0015c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c0b:	50                   	push   eax
c0015c0c:	e8 7b 5a ff ff       	call   c000b68c <secondsToDatetime(unsigned long long)>
c0015c11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c15:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c19:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c1d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015c21:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c25:	89 f0                	mov    eax,esi
c0015c27:	83 c4 20             	add    esp,0x20
c0015c2a:	5b                   	pop    ebx
c0015c2b:	5e                   	pop    esi
c0015c2c:	ff e0                	jmp    eax

c0015c2e <RTC::~RTC()>:
c0015c2e:	83 ec 0c             	sub    esp,0xc
c0015c31:	ba b0 ef 01 c0       	mov    edx,0xc001efb0
c0015c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c3a:	89 10                	mov    DWORD PTR [eax],edx
c0015c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c40:	83 ec 0c             	sub    esp,0xc
c0015c43:	50                   	push   eax
c0015c44:	e8 c7 57 ff ff       	call   c000b410 <Clock::~Clock()>
c0015c49:	83 c4 10             	add    esp,0x10
c0015c4c:	90                   	nop
c0015c4d:	83 c4 0c             	add    esp,0xc
c0015c50:	c3                   	ret    
c0015c51:	90                   	nop

c0015c52 <RTC::~RTC()>:
c0015c52:	83 ec 0c             	sub    esp,0xc
c0015c55:	83 ec 0c             	sub    esp,0xc
c0015c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c5c:	e8 cd ff ff ff       	call   c0015c2e <RTC::~RTC()>
c0015c61:	83 c4 10             	add    esp,0x10
c0015c64:	83 ec 08             	sub    esp,0x8
c0015c67:	68 60 01 00 00       	push   0x160
c0015c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c70:	e8 6d 47 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0015c75:	83 c4 10             	add    esp,0x10
c0015c78:	83 c4 0c             	add    esp,0xc
c0015c7b:	c3                   	ret    

c0015c7c <RTC::get_update_in_progress_flag()>:
c0015c7c:	83 ec 14             	sub    esp,0x14
c0015c7f:	6a 0a                	push   0xa
c0015c81:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015c87:	e8 1a 12 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015c8c:	83 c4 1c             	add    esp,0x1c
c0015c8f:	c0 e8 07             	shr    al,0x7
c0015c92:	c3                   	ret    
c0015c93:	90                   	nop

c0015c94 <RTC::completeRTCRefresh()>:
c0015c94:	55                   	push   ebp
c0015c95:	57                   	push   edi
c0015c96:	56                   	push   esi
c0015c97:	53                   	push   ebx
c0015c98:	83 ec 2c             	sub    esp,0x2c
c0015c9b:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015ca1:	83 ec 0c             	sub    esp,0xc
c0015ca4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ca8:	e8 cf ff ff ff       	call   c0015c7c <RTC::get_update_in_progress_flag()>
c0015cad:	83 c4 10             	add    esp,0x10
c0015cb0:	84 c0                	test   al,al
c0015cb2:	74 0e                	je     c0015cc2 <RTC::completeRTCRefresh()+0x2e>
c0015cb4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015cba:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015cc0:	73 df                	jae    c0015ca1 <RTC::completeRTCRefresh()+0xd>
c0015cc2:	55                   	push   ebp
c0015cc3:	55                   	push   ebp
c0015cc4:	6a 00                	push   0x0
c0015cc6:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ccc:	e8 d5 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cd1:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015cd5:	58                   	pop    eax
c0015cd6:	5a                   	pop    edx
c0015cd7:	6a 02                	push   0x2
c0015cd9:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015cdf:	e8 c2 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ce4:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015ce8:	59                   	pop    ecx
c0015ce9:	5b                   	pop    ebx
c0015cea:	6a 04                	push   0x4
c0015cec:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015cf2:	e8 af 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cf7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015cfb:	5e                   	pop    esi
c0015cfc:	5f                   	pop    edi
c0015cfd:	6a 07                	push   0x7
c0015cff:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d05:	e8 9c 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d0a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d0e:	5d                   	pop    ebp
c0015d0f:	58                   	pop    eax
c0015d10:	6a 08                	push   0x8
c0015d12:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d18:	e8 89 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d1d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015d21:	58                   	pop    eax
c0015d22:	5a                   	pop    edx
c0015d23:	6a 09                	push   0x9
c0015d25:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d2b:	e8 76 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d30:	83 c4 10             	add    esp,0x10
c0015d33:	0f b6 e8             	movzx  ebp,al
c0015d36:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d43:	e8 34 ff ff ff       	call   c0015c7c <RTC::get_update_in_progress_flag()>
c0015d48:	83 c4 10             	add    esp,0x10
c0015d4b:	84 c0                	test   al,al
c0015d4d:	74 0e                	je     c0015d5d <RTC::completeRTCRefresh()+0xc9>
c0015d4f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d55:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015d5b:	73 df                	jae    c0015d3c <RTC::completeRTCRefresh()+0xa8>
c0015d5d:	50                   	push   eax
c0015d5e:	50                   	push   eax
c0015d5f:	6a 00                	push   0x0
c0015d61:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d67:	e8 3a 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d6c:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015d70:	58                   	pop    eax
c0015d71:	5a                   	pop    edx
c0015d72:	6a 02                	push   0x2
c0015d74:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d7a:	e8 27 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d7f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015d83:	59                   	pop    ecx
c0015d84:	5b                   	pop    ebx
c0015d85:	6a 04                	push   0x4
c0015d87:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d8d:	e8 14 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d92:	5e                   	pop    esi
c0015d93:	88 c3                	mov    bl,al
c0015d95:	5f                   	pop    edi
c0015d96:	6a 07                	push   0x7
c0015d98:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d9e:	e8 03 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015da3:	89 c6                	mov    esi,eax
c0015da5:	58                   	pop    eax
c0015da6:	5a                   	pop    edx
c0015da7:	6a 08                	push   0x8
c0015da9:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015daf:	e8 f2 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015db4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015db8:	59                   	pop    ecx
c0015db9:	5f                   	pop    edi
c0015dba:	6a 09                	push   0x9
c0015dbc:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dc2:	e8 df 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dc7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015dcb:	0f b6 f8             	movzx  edi,al
c0015dce:	83 c4 10             	add    esp,0x10
c0015dd1:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015dd5:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015dd9:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015ddd:	89 f1                	mov    ecx,esi
c0015ddf:	0f 94 c0             	sete   al
c0015de2:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015de6:	0f 94 c2             	sete   dl
c0015de9:	21 d0                	and    eax,edx
c0015deb:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015def:	0f 94 c2             	sete   dl
c0015df2:	21 c2                	and    edx,eax
c0015df4:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015df8:	0f 94 c0             	sete   al
c0015dfb:	21 d0                	and    eax,edx
c0015dfd:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e01:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015e05:	0f 94 c1             	sete   cl
c0015e08:	84 c8                	test   al,cl
c0015e0a:	75 29                	jne    c0015e35 <RTC::completeRTCRefresh()+0x1a1>
c0015e0c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e10:	89 fd                	mov    ebp,edi
c0015e12:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015e16:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015e1a:	89 f0                	mov    eax,esi
c0015e1c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015e20:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e24:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e28:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e2c:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015e30:	e9 01 ff ff ff       	jmp    c0015d36 <RTC::completeRTCRefresh()+0xa2>
c0015e35:	39 fd                	cmp    ebp,edi
c0015e37:	75 d3                	jne    c0015e0c <RTC::completeRTCRefresh()+0x178>
c0015e39:	55                   	push   ebp
c0015e3a:	55                   	push   ebp
c0015e3b:	6a 0b                	push   0xb
c0015e3d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e43:	e8 5e 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e48:	83 c4 10             	add    esp,0x10
c0015e4b:	89 c5                	mov    ebp,eax
c0015e4d:	a8 04                	test   al,0x4
c0015e4f:	75 78                	jne    c0015ec9 <RTC::completeRTCRefresh()+0x235>
c0015e51:	b1 0a                	mov    cl,0xa
c0015e53:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015e57:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e5b:	83 e2 0f             	and    edx,0xf
c0015e5e:	c0 e8 04             	shr    al,0x4
c0015e61:	c1 ef 04             	shr    edi,0x4
c0015e64:	f6 e1                	mul    cl
c0015e66:	6b ff 0a             	imul   edi,edi,0xa
c0015e69:	01 d0                	add    eax,edx
c0015e6b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e6f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015e73:	83 e2 0f             	and    edx,0xf
c0015e76:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e7a:	c0 e8 04             	shr    al,0x4
c0015e7d:	f6 e1                	mul    cl
c0015e7f:	01 d0                	add    eax,edx
c0015e81:	88 da                	mov    dl,bl
c0015e83:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015e87:	83 e2 0f             	and    edx,0xf
c0015e8a:	88 d8                	mov    al,bl
c0015e8c:	83 e3 80             	and    ebx,0xffffff80
c0015e8f:	c0 e8 04             	shr    al,0x4
c0015e92:	83 e0 07             	and    eax,0x7
c0015e95:	f6 e1                	mul    cl
c0015e97:	01 d0                	add    eax,edx
c0015e99:	89 f2                	mov    edx,esi
c0015e9b:	09 c3                	or     ebx,eax
c0015e9d:	83 e2 0f             	and    edx,0xf
c0015ea0:	89 f0                	mov    eax,esi
c0015ea2:	c0 e8 04             	shr    al,0x4
c0015ea5:	f6 e1                	mul    cl
c0015ea7:	8d 34 02             	lea    esi,[edx+eax*1]
c0015eaa:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015eae:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015eb2:	83 e2 0f             	and    edx,0xf
c0015eb5:	c0 e8 04             	shr    al,0x4
c0015eb8:	f6 e1                	mul    cl
c0015eba:	01 d0                	add    eax,edx
c0015ebc:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015ec0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ec4:	83 e0 0f             	and    eax,0xf
c0015ec7:	01 c7                	add    edi,eax
c0015ec9:	83 e5 02             	and    ebp,0x2
c0015ecc:	75 14                	jne    c0015ee2 <RTC::completeRTCRefresh()+0x24e>
c0015ece:	84 db                	test   bl,bl
c0015ed0:	79 10                	jns    c0015ee2 <RTC::completeRTCRefresh()+0x24e>
c0015ed2:	83 e3 7f             	and    ebx,0x7f
c0015ed5:	b9 18 00 00 00       	mov    ecx,0x18
c0015eda:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015edd:	99                   	cdq    
c0015ede:	f7 f9                	idiv   ecx
c0015ee0:	88 d3                	mov    bl,dl
c0015ee2:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015ee8:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015eee:	77 06                	ja     c0015ef6 <RTC::completeRTCRefresh()+0x262>
c0015ef0:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015ef6:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015efb:	31 d2                	xor    edx,edx
c0015efd:	c1 e1 10             	shl    ecx,0x10
c0015f00:	89 d7                	mov    edi,edx
c0015f02:	c1 e5 10             	shl    ebp,0x10
c0015f05:	31 c0                	xor    eax,eax
c0015f07:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015f0d:	09 cf                	or     edi,ecx
c0015f0f:	89 fa                	mov    edx,edi
c0015f11:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015f15:	88 da                	mov    dl,bl
c0015f17:	89 f3                	mov    ebx,esi
c0015f19:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015f1d:	88 d8                	mov    al,bl
c0015f1f:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015f23:	0f b7 c8             	movzx  ecx,ax
c0015f26:	09 e9                	or     ecx,ebp
c0015f28:	89 c8                	mov    eax,ecx
c0015f2a:	51                   	push   ecx
c0015f2b:	51                   	push   ecx
c0015f2c:	52                   	push   edx
c0015f2d:	50                   	push   eax
c0015f2e:	e8 cc 55 ff ff       	call   c000b4ff <datetimeToSeconds(datetime_t)>
c0015f33:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015f37:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015f3d:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015f43:	83 c4 3c             	add    esp,0x3c
c0015f46:	5b                   	pop    ebx
c0015f47:	5e                   	pop    esi
c0015f48:	5f                   	pop    edi
c0015f49:	5d                   	pop    ebp
c0015f4a:	c3                   	ret    
c0015f4b:	90                   	nop

c0015f4c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015f4c:	55                   	push   ebp
c0015f4d:	57                   	push   edi
c0015f4e:	56                   	push   esi
c0015f4f:	53                   	push   ebx
c0015f50:	83 ec 30             	sub    esp,0x30
c0015f53:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015f57:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015f5b:	6a 00                	push   0x0
c0015f5d:	6a 00                	push   0x0
c0015f5f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f65:	e8 52 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f6a:	83 c4 0c             	add    esp,0xc
c0015f6d:	6a 00                	push   0x0
c0015f6f:	6a 02                	push   0x2
c0015f71:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f77:	e8 40 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f7c:	31 d2                	xor    edx,edx
c0015f7e:	89 f9                	mov    ecx,edi
c0015f80:	89 f8                	mov    eax,edi
c0015f82:	c1 e9 10             	shr    ecx,0x10
c0015f85:	0f b6 c4             	movzx  eax,ah
c0015f88:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015f8c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015f90:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015f94:	b9 64 00 00 00       	mov    ecx,0x64
c0015f99:	89 f0                	mov    eax,esi
c0015f9b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015f9f:	89 f0                	mov    eax,esi
c0015fa1:	0f b6 c4             	movzx  eax,ah
c0015fa4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015fa8:	89 f0                	mov    eax,esi
c0015faa:	c1 e8 10             	shr    eax,0x10
c0015fad:	66 f7 f1             	div    cx
c0015fb0:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015fb5:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015fba:	59                   	pop    ecx
c0015fbb:	5b                   	pop    ebx
c0015fbc:	89 fb                	mov    ebx,edi
c0015fbe:	6a 0b                	push   0xb
c0015fc0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015fc6:	e8 db 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015fcb:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015fcf:	83 c4 10             	add    esp,0x10
c0015fd2:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015fd7:	75 74                	jne    c001604d <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015fd9:	b2 0a                	mov    dl,0xa
c0015fdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015fdf:	0f b6 c1             	movzx  eax,cl
c0015fe2:	f6 f2                	div    dl
c0015fe4:	88 c3                	mov    bl,al
c0015fe6:	88 e0                	mov    al,ah
c0015fe8:	c1 e3 04             	shl    ebx,0x4
c0015feb:	09 c3                	or     ebx,eax
c0015fed:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015ff2:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015ff6:	f6 f2                	div    dl
c0015ff8:	88 c1                	mov    cl,al
c0015ffa:	88 e0                	mov    al,ah
c0015ffc:	c1 e1 04             	shl    ecx,0x4
c0015fff:	09 c1                	or     ecx,eax
c0016001:	89 f8                	mov    eax,edi
c0016003:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016007:	0f b6 c0             	movzx  eax,al
c001600a:	f6 f2                	div    dl
c001600c:	88 c3                	mov    bl,al
c001600e:	88 e0                	mov    al,ah
c0016010:	c1 e3 04             	shl    ebx,0x4
c0016013:	09 c3                	or     ebx,eax
c0016015:	89 f0                	mov    eax,esi
c0016017:	0f b6 c0             	movzx  eax,al
c001601a:	f6 f2                	div    dl
c001601c:	88 c1                	mov    cl,al
c001601e:	88 e0                	mov    al,ah
c0016020:	c1 e1 04             	shl    ecx,0x4
c0016023:	09 c1                	or     ecx,eax
c0016025:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001602a:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001602e:	f6 f2                	div    dl
c0016030:	88 c1                	mov    cl,al
c0016032:	88 e0                	mov    al,ah
c0016034:	c1 e1 04             	shl    ecx,0x4
c0016037:	09 c1                	or     ecx,eax
c0016039:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001603e:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0016042:	f6 f2                	div    dl
c0016044:	89 c5                	mov    ebp,eax
c0016046:	88 e0                	mov    al,ah
c0016048:	c1 e5 04             	shl    ebp,0x4
c001604b:	09 c5                	or     ebp,eax
c001604d:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0016052:	75 17                	jne    c001606b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016054:	80 fb 0b             	cmp    bl,0xb
c0016057:	76 0c                	jbe    c0016065 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016059:	80 eb 0c             	sub    bl,0xc
c001605c:	75 02                	jne    c0016060 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001605e:	b3 0c                	mov    bl,0xc
c0016060:	83 cb 80             	or     ebx,0xffffff80
c0016063:	eb 06                	jmp    c001606b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016065:	84 db                	test   bl,bl
c0016067:	75 02                	jne    c001606b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016069:	b3 0c                	mov    bl,0xc
c001606b:	0f b6 db             	movzx  ebx,bl
c001606e:	50                   	push   eax
c001606f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016074:	50                   	push   eax
c0016075:	6a 00                	push   0x0
c0016077:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001607d:	e8 3a 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016082:	83 c4 0c             	add    esp,0xc
c0016085:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001608a:	50                   	push   eax
c001608b:	6a 02                	push   0x2
c001608d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016093:	e8 24 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016098:	83 c4 0c             	add    esp,0xc
c001609b:	53                   	push   ebx
c001609c:	6a 04                	push   0x4
c001609e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160a4:	e8 13 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160a9:	83 c4 0c             	add    esp,0xc
c00160ac:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00160b1:	50                   	push   eax
c00160b2:	6a 07                	push   0x7
c00160b4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160ba:	e8 fd 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160bf:	83 c4 0c             	add    esp,0xc
c00160c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00160c7:	50                   	push   eax
c00160c8:	6a 08                	push   0x8
c00160ca:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160d0:	e8 e7 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160d5:	83 c4 0c             	add    esp,0xc
c00160d8:	89 e8                	mov    eax,ebp
c00160da:	0f b6 e8             	movzx  ebp,al
c00160dd:	55                   	push   ebp
c00160de:	6a 09                	push   0x9
c00160e0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160e6:	e8 d1 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160eb:	5a                   	pop    edx
c00160ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00160f0:	e8 9f fb ff ff       	call   c0015c94 <RTC::completeRTCRefresh()>
c00160f5:	83 c4 3c             	add    esp,0x3c
c00160f8:	b0 01                	mov    al,0x1
c00160fa:	5b                   	pop    ebx
c00160fb:	5e                   	pop    esi
c00160fc:	5f                   	pop    edi
c00160fd:	5d                   	pop    ebp
c00160fe:	c3                   	ret    

c00160ff <rtcIRQHandler(regs*, void*)>:
c00160ff:	53                   	push   ebx
c0016100:	83 ec 10             	sub    esp,0x10
c0016103:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016107:	6a 0c                	push   0xc
c0016109:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001610f:	e8 92 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016114:	83 c4 10             	add    esp,0x10
c0016117:	84 c0                	test   al,al
c0016119:	79 24                	jns    c001613f <rtcIRQHandler(regs*, void*)+0x40>
c001611b:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0016122:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016129:	66 ff 05 14 52 02 c0 	inc    WORD PTR ds:0xc0025214
c0016130:	75 0d                	jne    c001613f <rtcIRQHandler(regs*, void*)+0x40>
c0016132:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016136:	83 c4 08             	add    esp,0x8
c0016139:	5b                   	pop    ebx
c001613a:	e9 55 fb ff ff       	jmp    c0015c94 <RTC::completeRTCRefresh()>
c001613f:	83 c4 08             	add    esp,0x8
c0016142:	5b                   	pop    ebx
c0016143:	c3                   	ret    

c0016144 <RTC::RTC()>:
c0016144:	83 ec 1c             	sub    esp,0x1c
c0016147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001614b:	83 ec 08             	sub    esp,0x8
c001614e:	68 93 ef 01 c0       	push   0xc001ef93
c0016153:	50                   	push   eax
c0016154:	e8 81 52 ff ff       	call   c000b3da <Clock::Clock(char const*)>
c0016159:	83 c4 10             	add    esp,0x10
c001615c:	ba b0 ef 01 c0       	mov    edx,0xc001efb0
c0016161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016165:	89 10                	mov    DWORD PTR [eax],edx
c0016167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001616b:	83 ec 0c             	sub    esp,0xc
c001616e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016172:	6a 01                	push   0x1
c0016174:	68 ff 60 01 c0       	push   0xc00160ff
c0016179:	6a 08                	push   0x8
c001617b:	50                   	push   eax
c001617c:	e8 43 57 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016181:	83 c4 20             	add    esp,0x20
c0016184:	89 c2                	mov    edx,eax
c0016186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001618a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016190:	fa                   	cli    
c0016191:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0016196:	40                   	inc    eax
c0016197:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001619c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00161a1:	83 ec 08             	sub    esp,0x8
c00161a4:	6a 0b                	push   0xb
c00161a6:	50                   	push   eax
c00161a7:	e8 fa 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00161ac:	83 c4 10             	add    esp,0x10
c00161af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00161b3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00161b8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00161bc:	83 ca 10             	or     edx,0x10
c00161bf:	81 e2 ff 00 00 00    	and    edx,0xff
c00161c5:	83 ec 04             	sub    esp,0x4
c00161c8:	52                   	push   edx
c00161c9:	6a 0b                	push   0xb
c00161cb:	50                   	push   eax
c00161cc:	e8 eb 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161d1:	83 c4 10             	add    esp,0x10
c00161d4:	83 ec 0c             	sub    esp,0xc
c00161d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161db:	e8 b4 fa ff ff       	call   c0015c94 <RTC::completeRTCRefresh()>
c00161e0:	83 c4 10             	add    esp,0x10
c00161e3:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161e8:	48                   	dec    eax
c00161e9:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00161ee:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161f3:	85 c0                	test   eax,eax
c00161f5:	75 01                	jne    c00161f8 <RTC::RTC()+0xb4>
c00161f7:	fb                   	sti    
c00161f8:	90                   	nop
c00161f9:	83 c4 1c             	add    esp,0x1c
c00161fc:	c3                   	ret    
c00161fd:	66 90                	xchg   ax,ax
c00161ff:	90                   	nop

c0016200 <HalConsoleScroll(int, int)>:
c0016200:	83 ec 10             	sub    esp,0x10
c0016203:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001620b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0016213:	90                   	nop
c0016214:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016219:	0f 8f e1 00 00 00    	jg     c0016300 <HalConsoleScroll(int, int)+0x100>
c001621f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016227:	90                   	nop
c0016228:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016230:	0f 8f be 00 00 00    	jg     c00162f4 <HalConsoleScroll(int, int)+0xf4>
c0016236:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001623a:	89 d0                	mov    eax,edx
c001623c:	c1 e0 02             	shl    eax,0x2
c001623f:	01 d0                	add    eax,edx
c0016241:	c1 e0 05             	shl    eax,0x5
c0016244:	89 c2                	mov    edx,eax
c0016246:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001624a:	01 d0                	add    eax,edx
c001624c:	89 c2                	mov    edx,eax
c001624e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016252:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016255:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016259:	89 d0                	mov    eax,edx
c001625b:	c1 e0 02             	shl    eax,0x2
c001625e:	01 d0                	add    eax,edx
c0016260:	c1 e0 05             	shl    eax,0x5
c0016263:	89 c2                	mov    edx,eax
c0016265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016269:	01 d0                	add    eax,edx
c001626b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016271:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016275:	01 c2                	add    edx,eax
c0016277:	8a 01                	mov    al,BYTE PTR [ecx]
c0016279:	88 02                	mov    BYTE PTR [edx],al
c001627b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016280:	75 66                	jne    c00162e8 <HalConsoleScroll(int, int)+0xe8>
c0016282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016286:	83 e0 01             	and    eax,0x1
c0016289:	74 39                	je     c00162c4 <HalConsoleScroll(int, int)+0xc4>
c001628b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001628f:	83 e0 0f             	and    eax,0xf
c0016292:	88 c2                	mov    dl,al
c0016294:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016298:	c1 e0 04             	shl    eax,0x4
c001629b:	88 d1                	mov    cl,dl
c001629d:	09 c1                	or     ecx,eax
c001629f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162a3:	89 d0                	mov    eax,edx
c00162a5:	c1 e0 02             	shl    eax,0x2
c00162a8:	01 d0                	add    eax,edx
c00162aa:	c1 e0 05             	shl    eax,0x5
c00162ad:	89 c2                	mov    edx,eax
c00162af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162b3:	01 d0                	add    eax,edx
c00162b5:	89 c2                	mov    edx,eax
c00162b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162bb:	01 d0                	add    eax,edx
c00162bd:	88 ca                	mov    dl,cl
c00162bf:	88 10                	mov    BYTE PTR [eax],dl
c00162c1:	eb 25                	jmp    c00162e8 <HalConsoleScroll(int, int)+0xe8>
c00162c3:	90                   	nop
c00162c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162c8:	89 d0                	mov    eax,edx
c00162ca:	c1 e0 02             	shl    eax,0x2
c00162cd:	01 d0                	add    eax,edx
c00162cf:	c1 e0 05             	shl    eax,0x5
c00162d2:	89 c2                	mov    edx,eax
c00162d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162d8:	01 d0                	add    eax,edx
c00162da:	89 c2                	mov    edx,eax
c00162dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162e0:	01 d0                	add    eax,edx
c00162e2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00162e5:	8d 76 00             	lea    esi,[esi+0x0]
c00162e8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00162ec:	e9 37 ff ff ff       	jmp    c0016228 <HalConsoleScroll(int, int)+0x28>
c00162f1:	8d 76 00             	lea    esi,[esi+0x0]
c00162f4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00162f8:	e9 17 ff ff ff       	jmp    c0016214 <HalConsoleScroll(int, int)+0x14>
c00162fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016300:	90                   	nop
c0016301:	83 c4 10             	add    esp,0x10
c0016304:	c3                   	ret    
c0016305:	8d 76 00             	lea    esi,[esi+0x0]

c0016308 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016308:	83 ec 14             	sub    esp,0x14
c001630b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001630f:	88 04 24             	mov    BYTE PTR [esp],al
c0016312:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016315:	25 ff 00 00 00       	and    eax,0xff
c001631a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001631e:	89 d1                	mov    ecx,edx
c0016320:	83 e1 0f             	and    ecx,0xf
c0016323:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016327:	c1 e2 04             	shl    edx,0x4
c001632a:	81 e2 ff 00 00 00    	and    edx,0xff
c0016330:	09 ca                	or     edx,ecx
c0016332:	c1 e2 08             	shl    edx,0x8
c0016335:	09 d0                	or     eax,edx
c0016337:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001633c:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016344:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016348:	89 d0                	mov    eax,edx
c001634a:	c1 e0 02             	shl    eax,0x2
c001634d:	01 d0                	add    eax,edx
c001634f:	c1 e0 04             	shl    eax,0x4
c0016352:	89 c2                	mov    edx,eax
c0016354:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016358:	01 d0                	add    eax,edx
c001635a:	01 c0                	add    eax,eax
c001635c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0016360:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016364:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016369:	66 89 02             	mov    WORD PTR [edx],ax
c001636c:	90                   	nop
c001636d:	83 c4 14             	add    esp,0x14
c0016370:	c3                   	ret    
c0016371:	8d 76 00             	lea    esi,[esi+0x0]

c0016374 <HalConsoleCursorUpdate(int, int)>:
c0016374:	83 ec 20             	sub    esp,0x20
c0016377:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001637b:	89 c2                	mov    edx,eax
c001637d:	89 d0                	mov    eax,edx
c001637f:	c1 e0 02             	shl    eax,0x2
c0016382:	01 d0                	add    eax,edx
c0016384:	c1 e0 04             	shl    eax,0x4
c0016387:	89 c2                	mov    edx,eax
c0016389:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001638d:	01 d0                	add    eax,edx
c001638f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016394:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001639b:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00163a0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00163a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163a8:	ee                   	out    dx,al
c00163a9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163ae:	25 ff 00 00 00       	and    eax,0xff
c00163b3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00163ba:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00163be:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00163c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163c6:	ee                   	out    dx,al
c00163c7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00163ce:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00163d3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00163d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00163db:	ee                   	out    dx,al
c00163dc:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163e1:	66 c1 e8 08          	shr    ax,0x8
c00163e5:	25 ff 00 00 00       	and    eax,0xff
c00163ea:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00163f1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00163f5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00163f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163fd:	ee                   	out    dx,al
c00163fe:	90                   	nop
c00163ff:	83 c4 20             	add    esp,0x20
c0016402:	c3                   	ret    
c0016403:	90                   	nop

c0016404 <FAT::getName()>:
c0016404:	b8 e4 ef 01 c0       	mov    eax,0xc001efe4
c0016409:	c3                   	ret    
c001640a:	66 90                	xchg   ax,ax

c001640c <FAT::tell(void*, unsigned long long*)>:
c001640c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016411:	75 09                	jne    c001641c <FAT::tell(void*, unsigned long long*)+0x10>
c0016413:	b8 04 00 00 00       	mov    eax,0x4
c0016418:	c3                   	ret    
c0016419:	8d 76 00             	lea    esi,[esi+0x0]
c001641c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016421:	75 09                	jne    c001642c <FAT::tell(void*, unsigned long long*)+0x20>
c0016423:	b8 04 00 00 00       	mov    eax,0x4
c0016428:	c3                   	ret    
c0016429:	8d 76 00             	lea    esi,[esi+0x0]
c001642c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016430:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016433:	ba 00 00 00 00       	mov    edx,0x0
c0016438:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001643c:	89 01                	mov    DWORD PTR [ecx],eax
c001643e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016441:	b8 00 00 00 00       	mov    eax,0x0
c0016446:	c3                   	ret    
c0016447:	90                   	nop

c0016448 <FAT::stat(void*, unsigned long long*)>:
c0016448:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001644d:	75 09                	jne    c0016458 <FAT::stat(void*, unsigned long long*)+0x10>
c001644f:	b8 04 00 00 00       	mov    eax,0x4
c0016454:	c3                   	ret    
c0016455:	8d 76 00             	lea    esi,[esi+0x0]
c0016458:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001645d:	75 09                	jne    c0016468 <FAT::stat(void*, unsigned long long*)+0x20>
c001645f:	b8 04 00 00 00       	mov    eax,0x4
c0016464:	c3                   	ret    
c0016465:	8d 76 00             	lea    esi,[esi+0x0]
c0016468:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001646c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001646f:	ba 00 00 00 00       	mov    edx,0x0
c0016474:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016478:	89 01                	mov    DWORD PTR [ecx],eax
c001647a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001647d:	b8 00 00 00 00       	mov    eax,0x0
c0016482:	c3                   	ret    
c0016483:	90                   	nop

c0016484 <FAT::~FAT()>:
c0016484:	83 ec 0c             	sub    esp,0xc
c0016487:	ba 30 f0 01 c0       	mov    edx,0xc001f030
c001648c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016490:	89 10                	mov    DWORD PTR [eax],edx
c0016492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016496:	83 ec 0c             	sub    esp,0xc
c0016499:	50                   	push   eax
c001649a:	e8 7f 43 ff ff       	call   c000a81e <Filesystem::~Filesystem()>
c001649f:	83 c4 10             	add    esp,0x10
c00164a2:	90                   	nop
c00164a3:	83 c4 0c             	add    esp,0xc
c00164a6:	c3                   	ret    
c00164a7:	90                   	nop

c00164a8 <FAT::~FAT()>:
c00164a8:	83 ec 0c             	sub    esp,0xc
c00164ab:	83 ec 0c             	sub    esp,0xc
c00164ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164b2:	e8 cd ff ff ff       	call   c0016484 <FAT::~FAT()>
c00164b7:	83 c4 10             	add    esp,0x10
c00164ba:	83 ec 08             	sub    esp,0x8
c00164bd:	6a 08                	push   0x8
c00164bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c3:	e8 1a 3f ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c00164c8:	83 c4 10             	add    esp,0x10
c00164cb:	83 c4 0c             	add    esp,0xc
c00164ce:	c3                   	ret    
c00164cf:	90                   	nop

c00164d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00164d0:	83 ec 1c             	sub    esp,0x1c
c00164d3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00164da:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00164df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164e3:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00164ea:	83 f8 ff             	cmp    eax,0xffffffff
c00164ed:	75 35                	jne    c0016524 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00164ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00164f3:	88 c2                	mov    dl,al
c00164f5:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00164fa:	01 d0                	add    eax,edx
c00164fc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016500:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016506:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001650a:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016511:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016516:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001651a:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016521:	eb 19                	jmp    c001653c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0016523:	90                   	nop
c0016524:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016528:	88 c2                	mov    dl,al
c001652a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001652e:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016535:	01 d0                	add    eax,edx
c0016537:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001653b:	90                   	nop
c001653c:	83 ec 04             	sub    esp,0x4
c001653f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016543:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016547:	8d 44 24 15          	lea    eax,[esp+0x15]
c001654b:	50                   	push   eax
c001654c:	e8 03 e9 fe ff       	call   c0004e54 <f_getlabel>
c0016551:	83 c4 10             	add    esp,0x10
c0016554:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016558:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001655d:	75 09                	jne    c0016568 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001655f:	b8 00 00 00 00       	mov    eax,0x0
c0016564:	eb 0a                	jmp    c0016570 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016566:	66 90                	xchg   ax,ax
c0016568:	b8 01 00 00 00       	mov    eax,0x1
c001656d:	8d 76 00             	lea    esi,[esi+0x0]
c0016570:	83 c4 1c             	add    esp,0x1c
c0016573:	c3                   	ret    

c0016574 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016574:	57                   	push   edi
c0016575:	83 ec 58             	sub    esp,0x58
c0016578:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016580:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016584:	b8 00 00 00 00       	mov    eax,0x0
c0016589:	b9 0f 00 00 00       	mov    ecx,0xf
c001658e:	fc                   	cld    
c001658f:	89 d7                	mov    edi,edx
c0016591:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016593:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016597:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001659e:	83 f8 ff             	cmp    eax,0xffffffff
c00165a1:	75 35                	jne    c00165d8 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00165a3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165a7:	88 c2                	mov    dl,al
c00165a9:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165ae:	01 d0                	add    eax,edx
c00165b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165b4:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00165ba:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165be:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00165c5:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165ca:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00165ce:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00165d5:	eb 19                	jmp    c00165f0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00165d7:	90                   	nop
c00165d8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165dc:	88 c2                	mov    dl,al
c00165de:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165e2:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00165e9:	01 d0                	add    eax,edx
c00165eb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165ef:	90                   	nop
c00165f0:	83 ec 08             	sub    esp,0x8
c00165f3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00165f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165fb:	50                   	push   eax
c00165fc:	e8 bf a1 fe ff       	call   c00007c0 <strcat>
c0016601:	83 c4 10             	add    esp,0x10
c0016604:	83 ec 0c             	sub    esp,0xc
c0016607:	8d 44 24 18          	lea    eax,[esp+0x18]
c001660b:	50                   	push   eax
c001660c:	e8 94 e9 fe ff       	call   c0004fa5 <f_setlabel>
c0016611:	83 c4 10             	add    esp,0x10
c0016614:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016618:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001661d:	75 09                	jne    c0016628 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001661f:	b8 00 00 00 00       	mov    eax,0x0
c0016624:	eb 0a                	jmp    c0016630 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016626:	66 90                	xchg   ax,ax
c0016628:	b8 01 00 00 00       	mov    eax,0x1
c001662d:	8d 76 00             	lea    esi,[esi+0x0]
c0016630:	83 c4 58             	add    esp,0x58
c0016633:	5f                   	pop    edi
c0016634:	c3                   	ret    
c0016635:	90                   	nop
c0016636:	66 90                	xchg   ax,ax

c0016638 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016638:	83 ec 2c             	sub    esp,0x2c
c001663b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016643:	83 ec 08             	sub    esp,0x8
c0016646:	68 08 f0 01 c0       	push   0xc001f008
c001664b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001664f:	e8 8c a0 fe ff       	call   c00006e0 <strcmp>
c0016654:	83 c4 10             	add    esp,0x10
c0016657:	85 c0                	test   eax,eax
c0016659:	0f 94 c0             	sete   al
c001665c:	84 c0                	test   al,al
c001665e:	74 10                	je     c0016670 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016660:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016668:	e9 b3 00 00 00       	jmp    c0016720 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001666d:	8d 76 00             	lea    esi,[esi+0x0]
c0016670:	83 ec 08             	sub    esp,0x8
c0016673:	68 fa ef 01 c0       	push   0xc001effa
c0016678:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001667c:	e8 5f a0 fe ff       	call   c00006e0 <strcmp>
c0016681:	83 c4 10             	add    esp,0x10
c0016684:	85 c0                	test   eax,eax
c0016686:	0f 94 c0             	sete   al
c0016689:	84 c0                	test   al,al
c001668b:	74 0f                	je     c001669c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001668d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016695:	e9 86 00 00 00       	jmp    c0016720 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001669a:	66 90                	xchg   ax,ax
c001669c:	83 ec 08             	sub    esp,0x8
c001669f:	68 00 f0 01 c0       	push   0xc001f000
c00166a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166a8:	e8 33 a0 fe ff       	call   c00006e0 <strcmp>
c00166ad:	83 c4 10             	add    esp,0x10
c00166b0:	85 c0                	test   eax,eax
c00166b2:	0f 94 c0             	sete   al
c00166b5:	84 c0                	test   al,al
c00166b7:	74 0b                	je     c00166c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00166b9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166c1:	eb 5d                	jmp    c0016720 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166c3:	90                   	nop
c00166c4:	83 ec 08             	sub    esp,0x8
c00166c7:	68 dc ce 01 c0       	push   0xc001cedc
c00166cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166d0:	e8 0b a0 fe ff       	call   c00006e0 <strcmp>
c00166d5:	83 c4 10             	add    esp,0x10
c00166d8:	85 c0                	test   eax,eax
c00166da:	0f 94 c0             	sete   al
c00166dd:	84 c0                	test   al,al
c00166df:	74 0b                	je     c00166ec <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00166e1:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00166e9:	eb 35                	jmp    c0016720 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166eb:	90                   	nop
c00166ec:	83 ec 08             	sub    esp,0x8
c00166ef:	68 06 f0 01 c0       	push   0xc001f006
c00166f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166f8:	e8 e3 9f fe ff       	call   c00006e0 <strcmp>
c00166fd:	83 c4 10             	add    esp,0x10
c0016700:	85 c0                	test   eax,eax
c0016702:	0f 94 c0             	sete   al
c0016705:	84 c0                	test   al,al
c0016707:	74 0b                	je     c0016714 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016709:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016711:	eb 0d                	jmp    c0016720 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016713:	90                   	nop
c0016714:	b8 08 00 00 00       	mov    eax,0x8
c0016719:	e9 ea 00 00 00       	jmp    c0016808 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001671e:	66 90                	xchg   ax,ax
c0016720:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016727:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001672c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016730:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016737:	83 f8 ff             	cmp    eax,0xffffffff
c001673a:	75 34                	jne    c0016770 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001673c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016740:	88 c2                	mov    dl,al
c0016742:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016747:	01 d0                	add    eax,edx
c0016749:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001674d:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016753:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016757:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c001675e:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016763:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016767:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c001676e:	eb 18                	jmp    c0016788 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016770:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016774:	88 c2                	mov    dl,al
c0016776:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001677a:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016781:	01 d0                	add    eax,edx
c0016783:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016787:	90                   	nop
c0016788:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001678c:	88 04 24             	mov    BYTE PTR [esp],al
c001678f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016797:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001679f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00167a4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00167ac:	83 ec 0c             	sub    esp,0xc
c00167af:	68 00 20 00 00       	push   0x2000
c00167b4:	e8 00 10 ff ff       	call   c00077b9 <malloc>
c00167b9:	83 c4 10             	add    esp,0x10
c00167bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167c0:	68 00 20 00 00       	push   0x2000
c00167c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167c9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00167cd:	50                   	push   eax
c00167ce:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00167d2:	50                   	push   eax
c00167d3:	e8 bd ea fe ff       	call   c0005295 <f_mkfs>
c00167d8:	83 c4 10             	add    esp,0x10
c00167db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00167e4:	75 0a                	jne    c00167f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00167e6:	b8 00 00 00 00       	mov    eax,0x0
c00167eb:	eb 1b                	jmp    c0016808 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167ed:	8d 76 00             	lea    esi,[esi+0x0]
c00167f0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00167f5:	75 09                	jne    c0016800 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00167f7:	b8 09 00 00 00       	mov    eax,0x9
c00167fc:	eb 0a                	jmp    c0016808 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167fe:	66 90                	xchg   ax,ax
c0016800:	b8 01 00 00 00       	mov    eax,0x1
c0016805:	8d 76 00             	lea    esi,[esi+0x0]
c0016808:	83 c4 2c             	add    esp,0x2c
c001680b:	c3                   	ret    

c001680c <FAT::tryMount(LogicalDisk*, int)>:
c001680c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016812:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016817:	83 f8 14             	cmp    eax,0x14
c001681a:	75 18                	jne    c0016834 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001681c:	83 ec 0c             	sub    esp,0xc
c001681f:	68 0c f0 01 c0       	push   0xc001f00c
c0016824:	e8 32 99 ff ff       	call   c001015b <KePanic(char const*)>
c0016829:	83 c4 10             	add    esp,0x10
c001682c:	b0 00                	mov    al,0x0
c001682e:	e9 e9 01 00 00       	jmp    c0016a1c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016833:	90                   	nop
c0016834:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001683b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016841:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016847:	3d 00 02 00 00       	cmp    eax,0x200
c001684c:	74 0a                	je     c0016858 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001684e:	b0 00                	mov    al,0x0
c0016850:	e9 c7 01 00 00       	jmp    c0016a1c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016855:	8d 76 00             	lea    esi,[esi+0x0]
c0016858:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016860:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016867:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001686e:	83 f8 ff             	cmp    eax,0xffffffff
c0016871:	74 09                	je     c001687c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016873:	b0 01                	mov    al,0x1
c0016875:	e9 a2 01 00 00       	jmp    c0016a1c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001687a:	66 90                	xchg   ax,ax
c001687c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016886:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001688e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016895:	88 c2                	mov    dl,al
c0016897:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001689c:	01 d0                	add    eax,edx
c001689e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00168a5:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00168ab:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00168b2:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00168b9:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00168be:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00168c5:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00168cc:	83 ec 0c             	sub    esp,0xc
c00168cf:	68 34 02 00 00       	push   0x234
c00168d4:	e8 e0 0e ff ff       	call   c00077b9 <malloc>
c00168d9:	83 c4 10             	add    esp,0x10
c00168dc:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00168e3:	83 ec 04             	sub    esp,0x4
c00168e6:	6a 00                	push   0x0
c00168e8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00168ef:	50                   	push   eax
c00168f0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00168f7:	e8 bf d1 fe ff       	call   c0003abb <f_mount>
c00168fc:	83 c4 10             	add    esp,0x10
c00168ff:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016906:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001690e:	74 1c                	je     c001692c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016910:	83 ec 0c             	sub    esp,0xc
c0016913:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001691a:	e8 ba 0e ff ff       	call   c00077d9 <rfree>
c001691f:	83 c4 10             	add    esp,0x10
c0016922:	b0 00                	mov    al,0x0
c0016924:	e9 f3 00 00 00       	jmp    c0016a1c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016929:	8d 76 00             	lea    esi,[esi+0x0]
c001692c:	83 ec 04             	sub    esp,0x4
c001692f:	68 00 01 00 00       	push   0x100
c0016934:	6a 00                	push   0x0
c0016936:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001693d:	50                   	push   eax
c001693e:	e8 8d 9b fe ff       	call   c00004d0 <memset>
c0016943:	83 c4 10             	add    esp,0x10
c0016946:	83 ec 08             	sub    esp,0x8
c0016949:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016950:	50                   	push   eax
c0016951:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016958:	50                   	push   eax
c0016959:	e8 62 9e fe ff       	call   c00007c0 <strcat>
c001695e:	83 c4 10             	add    esp,0x10
c0016961:	83 ec 08             	sub    esp,0x8
c0016964:	68 1a f0 01 c0       	push   0xc001f01a
c0016969:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016970:	50                   	push   eax
c0016971:	e8 4a 9e fe ff       	call   c00007c0 <strcat>
c0016976:	83 c4 10             	add    esp,0x10
c0016979:	83 ec 04             	sub    esp,0x4
c001697c:	6a 01                	push   0x1
c001697e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016985:	50                   	push   eax
c0016986:	8d 44 24 14          	lea    eax,[esp+0x14]
c001698a:	50                   	push   eax
c001698b:	e8 8d d1 fe ff       	call   c0003b1d <f_open>
c0016990:	83 c4 10             	add    esp,0x10
c0016993:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001699a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00169a1:	85 c0                	test   eax,eax
c00169a3:	74 0b                	je     c00169b0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00169a5:	78 31                	js     c00169d8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169a7:	83 e8 04             	sub    eax,0x4
c00169aa:	83 f8 01             	cmp    eax,0x1
c00169ad:	77 29                	ja     c00169d8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169af:	90                   	nop
c00169b0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00169b8:	83 ec 0c             	sub    esp,0xc
c00169bb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169bf:	50                   	push   eax
c00169c0:	e8 0b d9 fe ff       	call   c00042d0 <f_close>
c00169c5:	83 c4 10             	add    esp,0x10
c00169c8:	90                   	nop
c00169c9:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c00169d1:	74 41                	je     c0016a14 <FAT::tryMount(LogicalDisk*, int)+0x208>
c00169d3:	eb 33                	jmp    c0016a08 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00169d5:	8d 76 00             	lea    esi,[esi+0x0]
c00169d8:	83 ec 0c             	sub    esp,0xc
c00169db:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169e2:	e8 f2 0d ff ff       	call   c00077d9 <rfree>
c00169e7:	83 c4 10             	add    esp,0x10
c00169ea:	83 ec 04             	sub    esp,0x4
c00169ed:	6a 00                	push   0x0
c00169ef:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169f6:	50                   	push   eax
c00169f7:	6a 00                	push   0x0
c00169f9:	e8 bd d0 fe ff       	call   c0003abb <f_mount>
c00169fe:	83 c4 10             	add    esp,0x10
c0016a01:	b0 00                	mov    al,0x0
c0016a03:	eb 17                	jmp    c0016a1c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a05:	8d 76 00             	lea    esi,[esi+0x0]
c0016a08:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016a0d:	40                   	inc    eax
c0016a0e:	a3 20 52 02 c0       	mov    ds:0xc0025220,eax
c0016a13:	90                   	nop
c0016a14:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016a1b:	90                   	nop
c0016a1c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016a22:	c3                   	ret    
c0016a23:	90                   	nop

c0016a24 <FAT::allocateSwapfile(char const*, int)>:
c0016a24:	55                   	push   ebp
c0016a25:	57                   	push   edi
c0016a26:	56                   	push   esi
c0016a27:	53                   	push   ebx
c0016a28:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016a2e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016a39:	83 ec 0c             	sub    esp,0xc
c0016a3c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016a43:	e8 71 0d ff ff       	call   c00077b9 <malloc>
c0016a48:	83 c4 10             	add    esp,0x10
c0016a4b:	89 c7                	mov    edi,eax
c0016a4d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0016a52:	83 ec 04             	sub    esp,0x4
c0016a55:	50                   	push   eax
c0016a56:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016a5d:	57                   	push   edi
c0016a5e:	e8 eb 3f ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0016a63:	83 c4 10             	add    esp,0x10
c0016a66:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016a6d:	83 ec 04             	sub    esp,0x4
c0016a70:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016a74:	50                   	push   eax
c0016a75:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016a79:	50                   	push   eax
c0016a7a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016a81:	e8 34 43 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0016a86:	83 c4 10             	add    esp,0x10
c0016a89:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016a90:	c1 e0 14             	shl    eax,0x14
c0016a93:	89 c7                	mov    edi,eax
c0016a95:	89 c5                	mov    ebp,eax
c0016a97:	c1 fd 1f             	sar    ebp,0x1f
c0016a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016aa2:	89 f9                	mov    ecx,edi
c0016aa4:	31 c1                	xor    ecx,eax
c0016aa6:	89 cb                	mov    ebx,ecx
c0016aa8:	89 e9                	mov    ecx,ebp
c0016aaa:	31 d1                	xor    ecx,edx
c0016aac:	89 ce                	mov    esi,ecx
c0016aae:	89 f0                	mov    eax,esi
c0016ab0:	09 d8                	or     eax,ebx
c0016ab2:	0f 84 9c 00 00 00    	je     c0016b54 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016ab8:	83 ec 0c             	sub    esp,0xc
c0016abb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ac2:	e8 bf 41 ff ff       	call   c000ac86 <File::unlink()>
c0016ac7:	83 c4 10             	add    esp,0x10
c0016aca:	83 ec 08             	sub    esp,0x8
c0016acd:	6a 12                	push   0x12
c0016acf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ad6:	e8 33 40 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0016adb:	83 c4 10             	add    esp,0x10
c0016ade:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ae5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016aeb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016af2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016af9:	c1 e0 14             	shl    eax,0x14
c0016afc:	83 ec 04             	sub    esp,0x4
c0016aff:	6a 01                	push   0x1
c0016b01:	50                   	push   eax
c0016b02:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016b09:	e8 27 e6 fe ff       	call   c0005135 <f_expand>
c0016b0e:	83 c4 10             	add    esp,0x10
c0016b11:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b18:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b1a:	83 c0 10             	add    eax,0x10
c0016b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b1f:	83 ec 0c             	sub    esp,0xc
c0016b22:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b26:	52                   	push   edx
c0016b27:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016b2b:	52                   	push   edx
c0016b2c:	6a 00                	push   0x0
c0016b2e:	68 00 04 00 00       	push   0x400
c0016b33:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b3a:	ff d0                	call   eax
c0016b3c:	83 c4 20             	add    esp,0x20
c0016b3f:	83 ec 0c             	sub    esp,0xc
c0016b42:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b49:	e8 1e 40 ff ff       	call   c000ab6c <File::close()>
c0016b4e:	83 c4 10             	add    esp,0x10
c0016b51:	8d 76 00             	lea    esi,[esi+0x0]
c0016b54:	83 ec 08             	sub    esp,0x8
c0016b57:	6a 01                	push   0x1
c0016b59:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b60:	e8 a9 3f ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0016b65:	83 c4 10             	add    esp,0x10
c0016b68:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b71:	83 c0 0c             	add    eax,0xc
c0016b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b76:	83 ec 0c             	sub    esp,0xc
c0016b79:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b7d:	52                   	push   edx
c0016b7e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016b82:	52                   	push   edx
c0016b83:	6a 00                	push   0x0
c0016b85:	6a 04                	push   0x4
c0016b87:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b8e:	ff d0                	call   eax
c0016b90:	83 c4 20             	add    esp,0x20
c0016b93:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b9a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016ba0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016ba7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016bae:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016bb1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016bb8:	83 ec 0c             	sub    esp,0xc
c0016bbb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bc2:	e8 a5 3f ff ff       	call   c000ab6c <File::close()>
c0016bc7:	83 c4 10             	add    esp,0x10
c0016bca:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016bd1:	ba 00 00 00 00       	mov    edx,0x0
c0016bd6:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016bdc:	5b                   	pop    ebx
c0016bdd:	5e                   	pop    esi
c0016bde:	5f                   	pop    edi
c0016bdf:	5d                   	pop    ebp
c0016be0:	c3                   	ret    
c0016be1:	90                   	nop
c0016be2:	66 90                	xchg   ax,ax

c0016be4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016be4:	57                   	push   edi
c0016be5:	56                   	push   esi
c0016be6:	53                   	push   ebx
c0016be7:	81 ec 50 02 00 00    	sub    esp,0x250
c0016bed:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016bf5:	74 0d                	je     c0016c04 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016bf7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016bff:	75 0f                	jne    c0016c10 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016c01:	8d 76 00             	lea    esi,[esi+0x0]
c0016c04:	b8 04 00 00 00       	mov    eax,0x4
c0016c09:	e9 36 01 00 00       	jmp    c0016d44 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016c0e:	66 90                	xchg   ax,ax
c0016c10:	83 ec 08             	sub    esp,0x8
c0016c13:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c1a:	50                   	push   eax
c0016c1b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016c22:	e8 6c d9 fe ff       	call   c0004593 <f_readdir>
c0016c27:	83 c4 10             	add    esp,0x10
c0016c2a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016c31:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016c38:	83 ec 0c             	sub    esp,0xc
c0016c3b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016c42:	83 c0 16             	add    eax,0x16
c0016c45:	50                   	push   eax
c0016c46:	e8 f5 98 fe ff       	call   c0000540 <strlen>
c0016c4b:	83 c4 10             	add    esp,0x10
c0016c4e:	ba 00 00 00 00       	mov    edx,0x0
c0016c53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c57:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016c5b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016c62:	25 ff 00 00 00       	and    eax,0xff
c0016c67:	83 e0 10             	and    eax,0x10
c0016c6a:	74 08                	je     c0016c74 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016c6c:	b8 02 00 00 00       	mov    eax,0x2
c0016c71:	eb 09                	jmp    c0016c7c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016c73:	90                   	nop
c0016c74:	b8 01 00 00 00       	mov    eax,0x1
c0016c79:	8d 76 00             	lea    esi,[esi+0x0]
c0016c7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c80:	83 ec 08             	sub    esp,0x8
c0016c83:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c8a:	83 c0 16             	add    eax,0x16
c0016c8d:	50                   	push   eax
c0016c8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016c92:	83 c0 10             	add    eax,0x10
c0016c95:	50                   	push   eax
c0016c96:	e8 65 99 fe ff       	call   c0000600 <strcpy>
c0016c9b:	83 c4 10             	add    esp,0x10
c0016c9e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016ca5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016cac:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cb0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016cb7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016cbe:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016cc5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016ccc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016cd3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016cda:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016ce1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016ce8:	89 c6                	mov    esi,eax
c0016cea:	89 d7                	mov    edi,edx
c0016cec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cee:	89 c8                	mov    eax,ecx
c0016cf0:	89 fa                	mov    edx,edi
c0016cf2:	89 f3                	mov    ebx,esi
c0016cf4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016cfb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016d02:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016d09:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016d10:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016d16:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016d1d:	84 c0                	test   al,al
c0016d1f:	75 07                	jne    c0016d28 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016d21:	b8 07 00 00 00       	mov    eax,0x7
c0016d26:	eb 1c                	jmp    c0016d44 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d28:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016d2f:	85 c0                	test   eax,eax
c0016d31:	75 09                	jne    c0016d3c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016d33:	b8 00 00 00 00       	mov    eax,0x0
c0016d38:	eb 0a                	jmp    c0016d44 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d3a:	66 90                	xchg   ax,ax
c0016d3c:	b8 01 00 00 00       	mov    eax,0x1
c0016d41:	8d 76 00             	lea    esi,[esi+0x0]
c0016d44:	81 c4 50 02 00 00    	add    esp,0x250
c0016d4a:	5b                   	pop    ebx
c0016d4b:	5e                   	pop    esi
c0016d4c:	5f                   	pop    edi
c0016d4d:	c3                   	ret    
c0016d4e:	66 90                	xchg   ax,ax

c0016d50 <FAT::read(void*, unsigned long, void*, int*)>:
c0016d50:	83 ec 1c             	sub    esp,0x1c
c0016d53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d58:	74 0a                	je     c0016d64 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016d5a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016d5f:	75 0b                	jne    c0016d6c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016d61:	8d 76 00             	lea    esi,[esi+0x0]
c0016d64:	b8 04 00 00 00       	mov    eax,0x4
c0016d69:	eb 41                	jmp    c0016dac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016d6b:	90                   	nop
c0016d6c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d70:	50                   	push   eax
c0016d71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016d7d:	e8 66 d0 fe ff       	call   c0003de8 <f_read>
c0016d82:	83 c4 10             	add    esp,0x10
c0016d85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d8d:	89 c2                	mov    edx,eax
c0016d8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d93:	89 10                	mov    DWORD PTR [eax],edx
c0016d95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d99:	85 c0                	test   eax,eax
c0016d9b:	75 07                	jne    c0016da4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016d9d:	b8 00 00 00 00       	mov    eax,0x0
c0016da2:	eb 08                	jmp    c0016dac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016da4:	b8 01 00 00 00       	mov    eax,0x1
c0016da9:	8d 76 00             	lea    esi,[esi+0x0]
c0016dac:	83 c4 1c             	add    esp,0x1c
c0016daf:	c3                   	ret    

c0016db0 <FAT::write(void*, unsigned long, void*, int*)>:
c0016db0:	83 ec 1c             	sub    esp,0x1c
c0016db3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016db8:	74 0a                	je     c0016dc4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016dba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016dbf:	75 0b                	jne    c0016dcc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0016dc4:	b8 04 00 00 00       	mov    eax,0x4
c0016dc9:	eb 41                	jmp    c0016e0c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016dcb:	90                   	nop
c0016dcc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dd0:	50                   	push   eax
c0016dd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dd5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016dd9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ddd:	e8 05 d2 fe ff       	call   c0003fe7 <f_write>
c0016de2:	83 c4 10             	add    esp,0x10
c0016de5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016de9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ded:	89 c2                	mov    edx,eax
c0016def:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016df3:	89 10                	mov    DWORD PTR [eax],edx
c0016df5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016df9:	85 c0                	test   eax,eax
c0016dfb:	75 07                	jne    c0016e04 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016dfd:	b8 00 00 00 00       	mov    eax,0x0
c0016e02:	eb 08                	jmp    c0016e0c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e04:	b8 01 00 00 00       	mov    eax,0x1
c0016e09:	8d 76 00             	lea    esi,[esi+0x0]
c0016e0c:	83 c4 1c             	add    esp,0x1c
c0016e0f:	c3                   	ret    

c0016e10 <FAT::close(void*)>:
c0016e10:	83 ec 1c             	sub    esp,0x1c
c0016e13:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e18:	75 0a                	jne    c0016e24 <FAT::close(void*)+0x14>
c0016e1a:	b8 04 00 00 00       	mov    eax,0x4
c0016e1f:	eb 3f                	jmp    c0016e60 <FAT::close(void*)+0x50>
c0016e21:	8d 76 00             	lea    esi,[esi+0x0]
c0016e24:	83 ec 0c             	sub    esp,0xc
c0016e27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e2b:	e8 a0 d4 fe ff       	call   c00042d0 <f_close>
c0016e30:	83 c4 10             	add    esp,0x10
c0016e33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e37:	83 ec 0c             	sub    esp,0xc
c0016e3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e3e:	e8 86 09 ff ff       	call   c00077c9 <free>
c0016e43:	83 c4 10             	add    esp,0x10
c0016e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e4a:	85 c0                	test   eax,eax
c0016e4c:	75 0a                	jne    c0016e58 <FAT::close(void*)+0x48>
c0016e4e:	b8 00 00 00 00       	mov    eax,0x0
c0016e53:	eb 0b                	jmp    c0016e60 <FAT::close(void*)+0x50>
c0016e55:	8d 76 00             	lea    esi,[esi+0x0]
c0016e58:	b8 01 00 00 00       	mov    eax,0x1
c0016e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e60:	83 c4 1c             	add    esp,0x1c
c0016e63:	c3                   	ret    

c0016e64 <FAT::closeDir(void*)>:
c0016e64:	83 ec 1c             	sub    esp,0x1c
c0016e67:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e6c:	75 0a                	jne    c0016e78 <FAT::closeDir(void*)+0x14>
c0016e6e:	b8 04 00 00 00       	mov    eax,0x4
c0016e73:	eb 3f                	jmp    c0016eb4 <FAT::closeDir(void*)+0x50>
c0016e75:	8d 76 00             	lea    esi,[esi+0x0]
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e7f:	e8 ed d6 fe ff       	call   c0004571 <f_closedir>
c0016e84:	83 c4 10             	add    esp,0x10
c0016e87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e8b:	83 ec 0c             	sub    esp,0xc
c0016e8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e92:	e8 32 09 ff ff       	call   c00077c9 <free>
c0016e97:	83 c4 10             	add    esp,0x10
c0016e9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e9e:	85 c0                	test   eax,eax
c0016ea0:	75 0a                	jne    c0016eac <FAT::closeDir(void*)+0x48>
c0016ea2:	b8 00 00 00 00       	mov    eax,0x0
c0016ea7:	eb 0b                	jmp    c0016eb4 <FAT::closeDir(void*)+0x50>
c0016ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0016eac:	b8 01 00 00 00       	mov    eax,0x1
c0016eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0016eb4:	83 c4 1c             	add    esp,0x1c
c0016eb7:	c3                   	ret    

c0016eb8 <FAT::seek(void*, unsigned long long)>:
c0016eb8:	83 ec 2c             	sub    esp,0x2c
c0016ebb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ebf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ec3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ec7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ecb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016ed0:	75 0a                	jne    c0016edc <FAT::seek(void*, unsigned long long)+0x24>
c0016ed2:	b8 04 00 00 00       	mov    eax,0x4
c0016ed7:	eb 33                	jmp    c0016f0c <FAT::seek(void*, unsigned long long)+0x54>
c0016ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0016edc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ee0:	83 ec 08             	sub    esp,0x8
c0016ee3:	50                   	push   eax
c0016ee4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ee8:	e8 12 d4 fe ff       	call   c00042ff <f_lseek>
c0016eed:	83 c4 10             	add    esp,0x10
c0016ef0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ef4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ef8:	85 c0                	test   eax,eax
c0016efa:	75 08                	jne    c0016f04 <FAT::seek(void*, unsigned long long)+0x4c>
c0016efc:	b8 00 00 00 00       	mov    eax,0x0
c0016f01:	eb 09                	jmp    c0016f0c <FAT::seek(void*, unsigned long long)+0x54>
c0016f03:	90                   	nop
c0016f04:	b8 01 00 00 00       	mov    eax,0x1
c0016f09:	8d 76 00             	lea    esi,[esi+0x0]
c0016f0c:	83 c4 2c             	add    esp,0x2c
c0016f0f:	c3                   	ret    

c0016f10 <fatWrapperReadDisk>:
c0016f10:	53                   	push   ebx
c0016f11:	83 ec 18             	sub    esp,0x18
c0016f14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f18:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f1c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f20:	25 ff 00 00 00       	and    eax,0xff
c0016f25:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016f2c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f34:	ba 00 00 00 00       	mov    edx,0x0
c0016f39:	83 ec 0c             	sub    esp,0xc
c0016f3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f40:	53                   	push   ebx
c0016f41:	52                   	push   edx
c0016f42:	50                   	push   eax
c0016f43:	51                   	push   ecx
c0016f44:	e8 b7 5c ff ff       	call   c000cc00 <LogicalDisk::read(unsigned long long, int, void*)>
c0016f49:	83 c4 20             	add    esp,0x20
c0016f4c:	83 c4 18             	add    esp,0x18
c0016f4f:	5b                   	pop    ebx
c0016f50:	c3                   	ret    
c0016f51:	8d 76 00             	lea    esi,[esi+0x0]

c0016f54 <fatWrapperWriteDisk>:
c0016f54:	53                   	push   ebx
c0016f55:	83 ec 18             	sub    esp,0x18
c0016f58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f5c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f60:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f64:	25 ff 00 00 00       	and    eax,0xff
c0016f69:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016f70:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f78:	ba 00 00 00 00       	mov    edx,0x0
c0016f7d:	83 ec 0c             	sub    esp,0xc
c0016f80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f84:	53                   	push   ebx
c0016f85:	52                   	push   edx
c0016f86:	50                   	push   eax
c0016f87:	51                   	push   ecx
c0016f88:	e8 df 5c ff ff       	call   c000cc6c <LogicalDisk::write(unsigned long long, int, void*)>
c0016f8d:	83 c4 20             	add    esp,0x20
c0016f90:	83 c4 18             	add    esp,0x18
c0016f93:	5b                   	pop    ebx
c0016f94:	c3                   	ret    
c0016f95:	8d 76 00             	lea    esi,[esi+0x0]

c0016f98 <fatWrapperIoctl>:
c0016f98:	53                   	push   ebx
c0016f99:	83 ec 28             	sub    esp,0x28
c0016f9c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016fa0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fa4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016fa8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016fac:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016fb1:	75 35                	jne    c0016fe8 <fatWrapperIoctl+0x50>
c0016fb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fb7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fbb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fbf:	25 ff 00 00 00       	and    eax,0xff
c0016fc4:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0016fcb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016fd1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fd7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016fdb:	66 89 02             	mov    WORD PTR [edx],ax
c0016fde:	b8 00 00 00 00       	mov    eax,0x0
c0016fe3:	e9 c4 00 00 00       	jmp    c00170ac <fatWrapperIoctl+0x114>
c0016fe8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016fed:	75 75                	jne    c0017064 <fatWrapperIoctl+0xcc>
c0016fef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ff7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016ffb:	25 ff 00 00 00       	and    eax,0xff
c0017000:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0017007:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001700d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017013:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017019:	89 c8                	mov    eax,ecx
c001701b:	89 da                	mov    edx,ebx
c001701d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017021:	c1 e0 0a             	shl    eax,0xa
c0017024:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017028:	81 e1 ff 00 00 00    	and    ecx,0xff
c001702e:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0017035:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001703b:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0017041:	89 cb                	mov    ebx,ecx
c0017043:	c1 fb 1f             	sar    ebx,0x1f
c0017046:	53                   	push   ebx
c0017047:	51                   	push   ecx
c0017048:	52                   	push   edx
c0017049:	50                   	push   eax
c001704a:	e8 a1 50 00 00       	call   c001c0f0 <__udivdi3>
c001704f:	83 c4 10             	add    esp,0x10
c0017052:	89 c2                	mov    edx,eax
c0017054:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017058:	89 10                	mov    DWORD PTR [eax],edx
c001705a:	b8 00 00 00 00       	mov    eax,0x0
c001705f:	eb 4b                	jmp    c00170ac <fatWrapperIoctl+0x114>
c0017061:	8d 76 00             	lea    esi,[esi+0x0]
c0017064:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017069:	75 09                	jne    c0017074 <fatWrapperIoctl+0xdc>
c001706b:	b8 00 00 00 00       	mov    eax,0x0
c0017070:	eb 3a                	jmp    c00170ac <fatWrapperIoctl+0x114>
c0017072:	66 90                	xchg   ax,ax
c0017074:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017079:	75 19                	jne    c0017094 <fatWrapperIoctl+0xfc>
c001707b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001707f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017083:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017087:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001708d:	b8 00 00 00 00       	mov    eax,0x0
c0017092:	eb 18                	jmp    c00170ac <fatWrapperIoctl+0x114>
c0017094:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017099:	75 09                	jne    c00170a4 <fatWrapperIoctl+0x10c>
c001709b:	b8 00 00 00 00       	mov    eax,0x0
c00170a0:	eb 0a                	jmp    c00170ac <fatWrapperIoctl+0x114>
c00170a2:	66 90                	xchg   ax,ax
c00170a4:	b8 04 00 00 00       	mov    eax,0x4
c00170a9:	8d 76 00             	lea    esi,[esi+0x0]
c00170ac:	83 c4 28             	add    esp,0x28
c00170af:	5b                   	pop    ebx
c00170b0:	c3                   	ret    
c00170b1:	90                   	nop
c00170b2:	66 90                	xchg   ax,ax

c00170b4 <FAT::FAT()>:
c00170b4:	83 ec 1c             	sub    esp,0x1c
c00170b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bb:	83 ec 0c             	sub    esp,0xc
c00170be:	50                   	push   eax
c00170bf:	e8 36 37 ff ff       	call   c000a7fa <Filesystem::Filesystem()>
c00170c4:	83 c4 10             	add    esp,0x10
c00170c7:	ba 30 f0 01 c0       	mov    edx,0xc001f030
c00170cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d0:	89 10                	mov    DWORD PTR [eax],edx
c00170d2:	c7 05 20 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025220,0x0
c00170dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00170e4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00170e9:	7f 15                	jg     c0017100 <FAT::FAT()+0x4c>
c00170eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170ef:	c7 04 85 40 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdadc0],0xffffffff
c00170fa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00170fe:	eb e4                	jmp    c00170e4 <FAT::FAT()+0x30>
c0017100:	90                   	nop
c0017101:	83 c4 1c             	add    esp,0x1c
c0017104:	c3                   	ret    
c0017105:	90                   	nop
c0017106:	66 90                	xchg   ax,ax

c0017108 <FAT::fixFilepath(char*)>:
c0017108:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001710c:	8a 00                	mov    al,BYTE PTR [eax]
c001710e:	3c 40                	cmp    al,0x40
c0017110:	7e 2e                	jle    c0017140 <FAT::fixFilepath(char*)+0x38>
c0017112:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017116:	8a 00                	mov    al,BYTE PTR [eax]
c0017118:	83 e8 41             	sub    eax,0x41
c001711b:	88 c2                	mov    dl,al
c001711d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017121:	88 10                	mov    BYTE PTR [eax],dl
c0017123:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017127:	8a 00                	mov    al,BYTE PTR [eax]
c0017129:	0f be c0             	movsx  eax,al
c001712c:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0017133:	83 c0 30             	add    eax,0x30
c0017136:	88 c2                	mov    dl,al
c0017138:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001713c:	88 10                	mov    BYTE PTR [eax],dl
c001713e:	66 90                	xchg   ax,ax
c0017140:	90                   	nop
c0017141:	c3                   	ret    
c0017142:	66 90                	xchg   ax,ax

c0017144 <FAT::open(char const*, void**, FileOpenMode)>:
c0017144:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001714a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017152:	74 0c                	je     c0017160 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017154:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001715c:	75 0e                	jne    c001716c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001715e:	66 90                	xchg   ax,ax
c0017160:	b8 04 00 00 00       	mov    eax,0x4
c0017165:	e9 0a 01 00 00       	jmp    c0017274 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001716a:	66 90                	xchg   ax,ax
c001716c:	83 ec 08             	sub    esp,0x8
c001716f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017176:	8d 44 24 14          	lea    eax,[esp+0x14]
c001717a:	50                   	push   eax
c001717b:	e8 80 94 fe ff       	call   c0000600 <strcpy>
c0017180:	83 c4 10             	add    esp,0x10
c0017183:	83 ec 08             	sub    esp,0x8
c0017186:	8d 44 24 10          	lea    eax,[esp+0x10]
c001718a:	50                   	push   eax
c001718b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017192:	e8 71 ff ff ff       	call   c0017108 <FAT::fixFilepath(char*)>
c0017197:	83 c4 10             	add    esp,0x10
c001719a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00171a2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171a9:	83 e0 01             	and    eax,0x1
c00171ac:	74 0a                	je     c00171b8 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00171ae:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00171b6:	66 90                	xchg   ax,ax
c00171b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171bf:	83 e0 04             	and    eax,0x4
c00171c2:	74 10                	je     c00171d4 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00171c4:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00171cc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00171d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171db:	83 e0 02             	and    eax,0x2
c00171de:	74 08                	je     c00171e8 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00171e0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00171e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171ef:	83 e0 08             	and    eax,0x8
c00171f2:	74 08                	je     c00171fc <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00171f4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00171fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017203:	83 e0 10             	and    eax,0x10
c0017206:	74 08                	je     c0017210 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017208:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017210:	83 ec 0c             	sub    esp,0xc
c0017213:	68 28 02 00 00       	push   0x228
c0017218:	e8 9c 05 ff ff       	call   c00077b9 <malloc>
c001721d:	83 c4 10             	add    esp,0x10
c0017220:	89 c2                	mov    edx,eax
c0017222:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017229:	89 10                	mov    DWORD PTR [eax],edx
c001722b:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0017232:	31 d2                	xor    edx,edx
c0017234:	88 c2                	mov    dl,al
c0017236:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001723d:	8b 00                	mov    eax,DWORD PTR [eax]
c001723f:	83 ec 04             	sub    esp,0x4
c0017242:	52                   	push   edx
c0017243:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017247:	52                   	push   edx
c0017248:	50                   	push   eax
c0017249:	e8 cf c8 fe ff       	call   c0003b1d <f_open>
c001724e:	83 c4 10             	add    esp,0x10
c0017251:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017258:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017260:	74 0a                	je     c001726c <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0017262:	b8 01 00 00 00       	mov    eax,0x1
c0017267:	eb 0b                	jmp    c0017274 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017269:	8d 76 00             	lea    esi,[esi+0x0]
c001726c:	b8 00 00 00 00       	mov    eax,0x0
c0017271:	8d 76 00             	lea    esi,[esi+0x0]
c0017274:	81 c4 1c 01 00 00    	add    esp,0x11c
c001727a:	c3                   	ret    
c001727b:	90                   	nop

c001727c <FAT::openDir(char const*, void**)>:
c001727c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017282:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001728a:	74 0c                	je     c0017298 <FAT::openDir(char const*, void**)+0x1c>
c001728c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017294:	75 0e                	jne    c00172a4 <FAT::openDir(char const*, void**)+0x28>
c0017296:	66 90                	xchg   ax,ax
c0017298:	b8 04 00 00 00       	mov    eax,0x4
c001729d:	e9 82 00 00 00       	jmp    c0017324 <FAT::openDir(char const*, void**)+0xa8>
c00172a2:	66 90                	xchg   ax,ax
c00172a4:	83 ec 08             	sub    esp,0x8
c00172a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172b2:	50                   	push   eax
c00172b3:	e8 48 93 fe ff       	call   c0000600 <strcpy>
c00172b8:	83 c4 10             	add    esp,0x10
c00172bb:	83 ec 08             	sub    esp,0x8
c00172be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172c2:	50                   	push   eax
c00172c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172ca:	e8 39 fe ff ff       	call   c0017108 <FAT::fixFilepath(char*)>
c00172cf:	83 c4 10             	add    esp,0x10
c00172d2:	83 ec 0c             	sub    esp,0xc
c00172d5:	6a 30                	push   0x30
c00172d7:	e8 dd 04 ff ff       	call   c00077b9 <malloc>
c00172dc:	83 c4 10             	add    esp,0x10
c00172df:	89 c2                	mov    edx,eax
c00172e1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172e8:	89 10                	mov    DWORD PTR [eax],edx
c00172ea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00172f3:	83 ec 08             	sub    esp,0x8
c00172f6:	8d 54 24 14          	lea    edx,[esp+0x14]
c00172fa:	52                   	push   edx
c00172fb:	50                   	push   eax
c00172fc:	e8 a5 d1 fe ff       	call   c00044a6 <f_opendir>
c0017301:	83 c4 10             	add    esp,0x10
c0017304:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001730b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0017313:	74 07                	je     c001731c <FAT::openDir(char const*, void**)+0xa0>
c0017315:	b8 01 00 00 00       	mov    eax,0x1
c001731a:	eb 08                	jmp    c0017324 <FAT::openDir(char const*, void**)+0xa8>
c001731c:	b8 00 00 00 00       	mov    eax,0x0
c0017321:	8d 76 00             	lea    esi,[esi+0x0]
c0017324:	81 c4 1c 01 00 00    	add    esp,0x11c
c001732a:	c3                   	ret    
c001732b:	90                   	nop

c001732c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001732c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017332:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001733a:	75 0c                	jne    c0017348 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001733c:	b8 04 00 00 00       	mov    eax,0x4
c0017341:	e9 d6 00 00 00       	jmp    c001741c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017346:	66 90                	xchg   ax,ax
c0017348:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0017350:	75 0a                	jne    c001735c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0017352:	b8 04 00 00 00       	mov    eax,0x4
c0017357:	e9 c0 00 00 00       	jmp    c001741c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001735c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017364:	75 0a                	jne    c0017370 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017366:	b8 04 00 00 00       	mov    eax,0x4
c001736b:	e9 ac 00 00 00       	jmp    c001741c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017370:	83 ec 08             	sub    esp,0x8
c0017373:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001737a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017381:	50                   	push   eax
c0017382:	e8 79 92 fe ff       	call   c0000600 <strcpy>
c0017387:	83 c4 10             	add    esp,0x10
c001738a:	83 ec 08             	sub    esp,0x8
c001738d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017394:	50                   	push   eax
c0017395:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001739c:	e8 67 fd ff ff       	call   c0017108 <FAT::fixFilepath(char*)>
c00173a1:	83 c4 10             	add    esp,0x10
c00173a4:	83 ec 08             	sub    esp,0x8
c00173a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00173ab:	50                   	push   eax
c00173ac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173b3:	50                   	push   eax
c00173b4:	e8 6c d2 fe ff       	call   c0004625 <f_stat>
c00173b9:	83 c4 10             	add    esp,0x10
c00173bc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00173c3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00173ca:	85 c0                	test   eax,eax
c00173cc:	74 0a                	je     c00173d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00173ce:	83 f8 04             	cmp    eax,0x4
c00173d1:	74 39                	je     c001740c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00173d3:	eb 3f                	jmp    c0017414 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00173d5:	8d 76 00             	lea    esi,[esi+0x0]
c00173d8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00173dc:	25 ff 00 00 00       	and    eax,0xff
c00173e1:	83 e0 10             	and    eax,0x10
c00173e4:	0f 95 c2             	setne  dl
c00173e7:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00173ee:	88 10                	mov    BYTE PTR [eax],dl
c00173f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173f4:	ba 00 00 00 00       	mov    edx,0x0
c00173f9:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017400:	89 01                	mov    DWORD PTR [ecx],eax
c0017402:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017405:	b8 00 00 00 00       	mov    eax,0x0
c001740a:	eb 10                	jmp    c001741c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001740c:	b8 02 00 00 00       	mov    eax,0x2
c0017411:	eb 09                	jmp    c001741c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017413:	90                   	nop
c0017414:	b8 01 00 00 00       	mov    eax,0x1
c0017419:	8d 76 00             	lea    esi,[esi+0x0]
c001741c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017422:	c3                   	ret    
c0017423:	90                   	nop

c0017424 <FAT::unlink(char const*)>:
c0017424:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001742a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017432:	75 08                	jne    c001743c <FAT::unlink(char const*)+0x18>
c0017434:	b8 04 00 00 00       	mov    eax,0x4
c0017439:	eb 61                	jmp    c001749c <FAT::unlink(char const*)+0x78>
c001743b:	90                   	nop
c001743c:	83 ec 08             	sub    esp,0x8
c001743f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017446:	8d 44 24 18          	lea    eax,[esp+0x18]
c001744a:	50                   	push   eax
c001744b:	e8 b0 91 fe ff       	call   c0000600 <strcpy>
c0017450:	83 c4 10             	add    esp,0x10
c0017453:	83 ec 08             	sub    esp,0x8
c0017456:	8d 44 24 14          	lea    eax,[esp+0x14]
c001745a:	50                   	push   eax
c001745b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017462:	e8 a1 fc ff ff       	call   c0017108 <FAT::fixFilepath(char*)>
c0017467:	83 c4 10             	add    esp,0x10
c001746a:	83 ec 0c             	sub    esp,0xc
c001746d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017471:	50                   	push   eax
c0017472:	e8 13 d4 fe ff       	call   c000488a <f_unlink>
c0017477:	83 c4 10             	add    esp,0x10
c001747a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017481:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017488:	85 c0                	test   eax,eax
c001748a:	75 08                	jne    c0017494 <FAT::unlink(char const*)+0x70>
c001748c:	b8 00 00 00 00       	mov    eax,0x0
c0017491:	eb 09                	jmp    c001749c <FAT::unlink(char const*)+0x78>
c0017493:	90                   	nop
c0017494:	b8 01 00 00 00       	mov    eax,0x1
c0017499:	8d 76 00             	lea    esi,[esi+0x0]
c001749c:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174a2:	c3                   	ret    
c00174a3:	90                   	nop

c00174a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00174a4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00174aa:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00174b1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00174b8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00174bc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00174c0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00174c8:	75 0a                	jne    c00174d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00174ca:	b8 04 00 00 00       	mov    eax,0x4
c00174cf:	e9 54 01 00 00       	jmp    c0017628 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00174d4:	83 ec 08             	sub    esp,0x8
c00174d7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00174de:	8d 44 24 24          	lea    eax,[esp+0x24]
c00174e2:	50                   	push   eax
c00174e3:	e8 18 91 fe ff       	call   c0000600 <strcpy>
c00174e8:	83 c4 10             	add    esp,0x10
c00174eb:	83 ec 08             	sub    esp,0x8
c00174ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c00174f2:	50                   	push   eax
c00174f3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00174fa:	e8 09 fc ff ff       	call   c0017108 <FAT::fixFilepath(char*)>
c00174ff:	83 c4 10             	add    esp,0x10
c0017502:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001750a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0017512:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017516:	25 ff 00 00 00       	and    eax,0xff
c001751b:	83 e0 01             	and    eax,0x1
c001751e:	74 08                	je     c0017528 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017520:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017528:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001752c:	25 ff 00 00 00       	and    eax,0xff
c0017531:	83 e0 02             	and    eax,0x2
c0017534:	74 0a                	je     c0017540 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017536:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001753e:	66 90                	xchg   ax,ax
c0017540:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017544:	25 ff 00 00 00       	and    eax,0xff
c0017549:	83 e0 04             	and    eax,0x4
c001754c:	74 0a                	je     c0017558 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001754e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017556:	66 90                	xchg   ax,ax
c0017558:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001755c:	25 ff 00 00 00       	and    eax,0xff
c0017561:	83 e0 08             	and    eax,0x8
c0017564:	74 0a                	je     c0017570 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017566:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001756e:	66 90                	xchg   ax,ax
c0017570:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017574:	25 ff 00 00 00       	and    eax,0xff
c0017579:	83 e0 01             	and    eax,0x1
c001757c:	74 0a                	je     c0017588 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001757e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017586:	66 90                	xchg   ax,ax
c0017588:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001758c:	25 ff 00 00 00       	and    eax,0xff
c0017591:	83 e0 02             	and    eax,0x2
c0017594:	74 0a                	je     c00175a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017596:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001759e:	66 90                	xchg   ax,ax
c00175a0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175a4:	25 ff 00 00 00       	and    eax,0xff
c00175a9:	83 e0 04             	and    eax,0x4
c00175ac:	74 0a                	je     c00175b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00175ae:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00175b6:	66 90                	xchg   ax,ax
c00175b8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175bc:	25 ff 00 00 00       	and    eax,0xff
c00175c1:	83 e0 08             	and    eax,0x8
c00175c4:	74 0a                	je     c00175d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00175c6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00175ce:	66 90                	xchg   ax,ax
c00175d0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00175d7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00175de:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00175e5:	31 d2                	xor    edx,edx
c00175e7:	88 c2                	mov    dl,al
c00175e9:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00175f0:	25 ff 00 00 00       	and    eax,0xff
c00175f5:	83 ec 04             	sub    esp,0x4
c00175f8:	52                   	push   edx
c00175f9:	50                   	push   eax
c00175fa:	8d 44 24 24          	lea    eax,[esp+0x24]
c00175fe:	50                   	push   eax
c00175ff:	e8 f9 d6 fe ff       	call   c0004cfd <f_chmod>
c0017604:	83 c4 10             	add    esp,0x10
c0017607:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001760e:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017615:	85 c0                	test   eax,eax
c0017617:	75 07                	jne    c0017620 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017619:	b8 00 00 00 00       	mov    eax,0x0
c001761e:	eb 08                	jmp    c0017628 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017620:	b8 01 00 00 00       	mov    eax,0x1
c0017625:	8d 76 00             	lea    esi,[esi+0x0]
c0017628:	81 c4 2c 01 00 00    	add    esp,0x12c
c001762e:	c3                   	ret    
c001762f:	90                   	nop

c0017630 <FAT::rename(char const*, char const*)>:
c0017630:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017636:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001763e:	74 0c                	je     c001764c <FAT::rename(char const*, char const*)+0x1c>
c0017640:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017648:	75 0e                	jne    c0017658 <FAT::rename(char const*, char const*)+0x28>
c001764a:	66 90                	xchg   ax,ax
c001764c:	b8 04 00 00 00       	mov    eax,0x4
c0017651:	e9 9e 00 00 00       	jmp    c00176f4 <FAT::rename(char const*, char const*)+0xc4>
c0017656:	66 90                	xchg   ax,ax
c0017658:	83 ec 08             	sub    esp,0x8
c001765b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017662:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017669:	50                   	push   eax
c001766a:	e8 91 8f fe ff       	call   c0000600 <strcpy>
c001766f:	83 c4 10             	add    esp,0x10
c0017672:	83 ec 08             	sub    esp,0x8
c0017675:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001767c:	50                   	push   eax
c001767d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017684:	e8 7f fa ff ff       	call   c0017108 <FAT::fixFilepath(char*)>
c0017689:	83 c4 10             	add    esp,0x10
c001768c:	83 ec 08             	sub    esp,0x8
c001768f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017696:	8d 44 24 18          	lea    eax,[esp+0x18]
c001769a:	50                   	push   eax
c001769b:	e8 60 8f fe ff       	call   c0000600 <strcpy>
c00176a0:	83 c4 10             	add    esp,0x10
c00176a3:	83 ec 08             	sub    esp,0x8
c00176a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176aa:	50                   	push   eax
c00176ab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176b2:	e8 51 fa ff ff       	call   c0017108 <FAT::fixFilepath(char*)>
c00176b7:	83 c4 10             	add    esp,0x10
c00176ba:	83 ec 08             	sub    esp,0x8
c00176bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176c1:	50                   	push   eax
c00176c2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00176c9:	50                   	push   eax
c00176ca:	e8 78 d4 fe ff       	call   c0004b47 <f_rename>
c00176cf:	83 c4 10             	add    esp,0x10
c00176d2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00176d9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00176e0:	85 c0                	test   eax,eax
c00176e2:	75 08                	jne    c00176ec <FAT::rename(char const*, char const*)+0xbc>
c00176e4:	b8 00 00 00 00       	mov    eax,0x0
c00176e9:	eb 09                	jmp    c00176f4 <FAT::rename(char const*, char const*)+0xc4>
c00176eb:	90                   	nop
c00176ec:	b8 01 00 00 00       	mov    eax,0x1
c00176f1:	8d 76 00             	lea    esi,[esi+0x0]
c00176f4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00176fa:	c3                   	ret    
c00176fb:	90                   	nop

c00176fc <FAT::mkdir(char const*)>:
c00176fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017702:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001770a:	75 08                	jne    c0017714 <FAT::mkdir(char const*)+0x18>
c001770c:	b8 04 00 00 00       	mov    eax,0x4
c0017711:	eb 61                	jmp    c0017774 <FAT::mkdir(char const*)+0x78>
c0017713:	90                   	nop
c0017714:	83 ec 08             	sub    esp,0x8
c0017717:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001771e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017722:	50                   	push   eax
c0017723:	e8 d8 8e fe ff       	call   c0000600 <strcpy>
c0017728:	83 c4 10             	add    esp,0x10
c001772b:	83 ec 08             	sub    esp,0x8
c001772e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017732:	50                   	push   eax
c0017733:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001773a:	e8 c9 f9 ff ff       	call   c0017108 <FAT::fixFilepath(char*)>
c001773f:	83 c4 10             	add    esp,0x10
c0017742:	83 ec 0c             	sub    esp,0xc
c0017745:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017749:	50                   	push   eax
c001774a:	e8 5d d2 fe ff       	call   c00049ac <f_mkdir>
c001774f:	83 c4 10             	add    esp,0x10
c0017752:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017759:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017760:	85 c0                	test   eax,eax
c0017762:	75 08                	jne    c001776c <FAT::mkdir(char const*)+0x70>
c0017764:	b8 00 00 00 00       	mov    eax,0x0
c0017769:	eb 09                	jmp    c0017774 <FAT::mkdir(char const*)+0x78>
c001776b:	90                   	nop
c001776c:	b8 01 00 00 00       	mov    eax,0x1
c0017771:	8d 76 00             	lea    esi,[esi+0x0]
c0017774:	81 c4 1c 01 00 00    	add    esp,0x11c
c001777a:	c3                   	ret    
c001777b:	90                   	nop

c001777c <FAT::exists(char const*)>:
c001777c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017782:	83 ec 08             	sub    esp,0x8
c0017785:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001778c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017790:	50                   	push   eax
c0017791:	e8 6a 8e fe ff       	call   c0000600 <strcpy>
c0017796:	83 c4 10             	add    esp,0x10
c0017799:	83 ec 08             	sub    esp,0x8
c001779c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177a0:	50                   	push   eax
c00177a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177a8:	e8 5b f9 ff ff       	call   c0017108 <FAT::fixFilepath(char*)>
c00177ad:	83 c4 10             	add    esp,0x10
c00177b0:	83 ec 08             	sub    esp,0x8
c00177b3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00177ba:	50                   	push   eax
c00177bb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177bf:	50                   	push   eax
c00177c0:	e8 60 ce fe ff       	call   c0004625 <f_stat>
c00177c5:	83 c4 10             	add    esp,0x10
c00177c8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00177cf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00177d6:	85 c0                	test   eax,eax
c00177d8:	75 06                	jne    c00177e0 <FAT::exists(char const*)+0x64>
c00177da:	b0 01                	mov    al,0x1
c00177dc:	eb 06                	jmp    c00177e4 <FAT::exists(char const*)+0x68>
c00177de:	66 90                	xchg   ax,ax
c00177e0:	b0 00                	mov    al,0x0
c00177e2:	66 90                	xchg   ax,ax
c00177e4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00177ea:	c3                   	ret    
c00177eb:	90                   	nop

c00177ec <isoReadDiscSectorHelper>:
c00177ec:	83 ec 2c             	sub    esp,0x2c
c00177ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177f3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00177f7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00177fc:	83 e8 41             	sub    eax,0x41
c00177ff:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0017806:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001780a:	ba 00 00 00 00       	mov    edx,0x0
c001780f:	83 ec 0c             	sub    esp,0xc
c0017812:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017816:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001781a:	52                   	push   edx
c001781b:	50                   	push   eax
c001781c:	51                   	push   ecx
c001781d:	e8 de 53 ff ff       	call   c000cc00 <LogicalDisk::read(unsigned long long, int, void*)>
c0017822:	83 c4 20             	add    esp,0x20
c0017825:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017829:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001782e:	74 0c                	je     c001783c <isoReadDiscSectorHelper+0x50>
c0017830:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017834:	c1 e0 0b             	shl    eax,0xb
c0017837:	eb 0b                	jmp    c0017844 <isoReadDiscSectorHelper+0x58>
c0017839:	8d 76 00             	lea    esi,[esi+0x0]
c001783c:	b8 00 00 00 00       	mov    eax,0x0
c0017841:	8d 76 00             	lea    esi,[esi+0x0]
c0017844:	83 c4 2c             	add    esp,0x2c
c0017847:	c3                   	ret    

c0017848 <iso_kprintf>:
c0017848:	83 ec 0c             	sub    esp,0xc
c001784b:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017850:	83 ec 08             	sub    esp,0x8
c0017853:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017857:	50                   	push   eax
c0017858:	e8 d9 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001785d:	83 c4 10             	add    esp,0x10
c0017860:	90                   	nop
c0017861:	83 c4 0c             	add    esp,0xc
c0017864:	c3                   	ret    
c0017865:	8d 76 00             	lea    esi,[esi+0x0]

c0017868 <iso_kprintfd>:
c0017868:	83 ec 0c             	sub    esp,0xc
c001786b:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017870:	83 ec 08             	sub    esp,0x8
c0017873:	68 90 f0 01 c0       	push   0xc001f090
c0017878:	50                   	push   eax
c0017879:	e8 b8 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001787e:	83 c4 10             	add    esp,0x10
c0017881:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017886:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001788a:	83 ec 08             	sub    esp,0x8
c001788d:	52                   	push   edx
c001788e:	50                   	push   eax
c001788f:	e8 5c 0e ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0017894:	83 c4 10             	add    esp,0x10
c0017897:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c001789c:	83 ec 08             	sub    esp,0x8
c001789f:	68 11 ef 01 c0       	push   0xc001ef11
c00178a4:	50                   	push   eax
c00178a5:	e8 8c 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178aa:	83 c4 10             	add    esp,0x10
c00178ad:	90                   	nop
c00178ae:	83 c4 0c             	add    esp,0xc
c00178b1:	c3                   	ret    

c00178b2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00178b2:	b8 08 00 00 00       	mov    eax,0x8
c00178b7:	c3                   	ret    

c00178b8 <ISO9660::getName()>:
c00178b8:	b8 93 f0 01 c0       	mov    eax,0xc001f093
c00178bd:	c3                   	ret    

c00178be <ISO9660::closeDir(void*)>:
c00178be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00178c4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00178c7:	90                   	nop

c00178c8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00178c8:	b8 01 00 00 00       	mov    eax,0x1
c00178cd:	c3                   	ret    

c00178ce <ISO9660::unlink(char const*)>:
c00178ce:	b8 01 00 00 00       	mov    eax,0x1
c00178d3:	c3                   	ret    

c00178d4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00178d4:	b8 03 00 00 00       	mov    eax,0x3
c00178d9:	c3                   	ret    

c00178da <ISO9660::rename(char const*, char const*)>:
c00178da:	b8 01 00 00 00       	mov    eax,0x1
c00178df:	c3                   	ret    

c00178e0 <ISO9660::mkdir(char const*)>:
c00178e0:	b8 01 00 00 00       	mov    eax,0x1
c00178e5:	c3                   	ret    

c00178e6 <ISO9660::~ISO9660()>:
c00178e6:	83 ec 0c             	sub    esp,0xc
c00178e9:	ba e4 f0 01 c0       	mov    edx,0xc001f0e4
c00178ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f2:	89 10                	mov    DWORD PTR [eax],edx
c00178f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f8:	83 ec 0c             	sub    esp,0xc
c00178fb:	50                   	push   eax
c00178fc:	e8 1d 2f ff ff       	call   c000a81e <Filesystem::~Filesystem()>
c0017901:	83 c4 10             	add    esp,0x10
c0017904:	90                   	nop
c0017905:	83 c4 0c             	add    esp,0xc
c0017908:	c3                   	ret    
c0017909:	90                   	nop

c001790a <ISO9660::~ISO9660()>:
c001790a:	83 ec 0c             	sub    esp,0xc
c001790d:	83 ec 0c             	sub    esp,0xc
c0017910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017914:	e8 cd ff ff ff       	call   c00178e6 <ISO9660::~ISO9660()>
c0017919:	83 c4 10             	add    esp,0x10
c001791c:	83 ec 08             	sub    esp,0x8
c001791f:	6a 08                	push   0x8
c0017921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017925:	e8 b8 2a ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001792a:	83 c4 10             	add    esp,0x10
c001792d:	83 c4 0c             	add    esp,0xc
c0017930:	c3                   	ret    
c0017931:	90                   	nop

c0017932 <ISO9660::exists(char const*)>:
c0017932:	83 ec 18             	sub    esp,0x18
c0017935:	68 ae f0 01 c0       	push   0xc001f0ae
c001793a:	e8 1c 88 ff ff       	call   c001015b <KePanic(char const*)>
c001793f:	31 c0                	xor    eax,eax
c0017941:	83 c4 1c             	add    esp,0x1c
c0017944:	c3                   	ret    
c0017945:	90                   	nop

c0017946 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017946:	56                   	push   esi
c0017947:	53                   	push   ebx
c0017948:	50                   	push   eax
c0017949:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001794d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017951:	85 db                	test   ebx,ebx
c0017953:	0f 84 82 00 00 00    	je     c00179db <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017959:	85 f6                	test   esi,esi
c001795b:	74 7e                	je     c00179db <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c001795d:	ba 03 00 00 00       	mov    edx,0x3
c0017962:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017967:	75 77                	jne    c00179e0 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017969:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001796c:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017972:	74 34                	je     c00179a8 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017974:	83 ec 0c             	sub    esp,0xc
c0017977:	50                   	push   eax
c0017978:	e8 42 ee fe ff       	call   c00067bf <init_percd>
c001797d:	83 c4 10             	add    esp,0x10
c0017980:	ba 0b 00 00 00       	mov    edx,0xb
c0017985:	40                   	inc    eax
c0017986:	74 58                	je     c00179e0 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017988:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c001798f:	74 10                	je     c00179a1 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c0017991:	83 ec 0c             	sub    esp,0xc
c0017994:	68 cc f0 01 c0       	push   0xc001f0cc
c0017999:	e8 bd 87 ff ff       	call   c001015b <KePanic(char const*)>
c001799e:	83 c4 10             	add    esp,0x10
c00179a1:	8a 03                	mov    al,BYTE PTR [ebx]
c00179a3:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c00179a8:	83 ec 0c             	sub    esp,0xc
c00179ab:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c00179b2:	83 c3 03             	add    ebx,0x3
c00179b5:	50                   	push   eax
c00179b6:	e8 04 ee fe ff       	call   c00067bf <init_percd>
c00179bb:	59                   	pop    ecx
c00179bc:	58                   	pop    eax
c00179bd:	6a 00                	push   0x0
c00179bf:	53                   	push   ebx
c00179c0:	e8 38 e9 fe ff       	call   c00062fd <iso_open>
c00179c5:	83 c4 10             	add    esp,0x10
c00179c8:	ba 01 00 00 00       	mov    edx,0x1
c00179cd:	83 f8 ff             	cmp    eax,0xffffffff
c00179d0:	74 0e                	je     c00179e0 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179d2:	83 c0 64             	add    eax,0x64
c00179d5:	31 d2                	xor    edx,edx
c00179d7:	89 06                	mov    DWORD PTR [esi],eax
c00179d9:	eb 05                	jmp    c00179e0 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179db:	ba 04 00 00 00       	mov    edx,0x4
c00179e0:	89 d0                	mov    eax,edx
c00179e2:	5a                   	pop    edx
c00179e3:	5b                   	pop    ebx
c00179e4:	5e                   	pop    esi
c00179e5:	c3                   	ret    

c00179e6 <ISO9660::openDir(char const*, void**)>:
c00179e6:	56                   	push   esi
c00179e7:	53                   	push   ebx
c00179e8:	50                   	push   eax
c00179e9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00179ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00179f1:	85 db                	test   ebx,ebx
c00179f3:	74 76                	je     c0017a6b <ISO9660::openDir(char const*, void**)+0x85>
c00179f5:	85 f6                	test   esi,esi
c00179f7:	74 72                	je     c0017a6b <ISO9660::openDir(char const*, void**)+0x85>
c00179f9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00179fc:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017a02:	74 34                	je     c0017a38 <ISO9660::openDir(char const*, void**)+0x52>
c0017a04:	83 ec 0c             	sub    esp,0xc
c0017a07:	50                   	push   eax
c0017a08:	e8 b2 ed fe ff       	call   c00067bf <init_percd>
c0017a0d:	83 c4 10             	add    esp,0x10
c0017a10:	ba 0b 00 00 00       	mov    edx,0xb
c0017a15:	40                   	inc    eax
c0017a16:	74 58                	je     c0017a70 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a18:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017a1f:	74 10                	je     c0017a31 <ISO9660::openDir(char const*, void**)+0x4b>
c0017a21:	83 ec 0c             	sub    esp,0xc
c0017a24:	68 cc f0 01 c0       	push   0xc001f0cc
c0017a29:	e8 2d 87 ff ff       	call   c001015b <KePanic(char const*)>
c0017a2e:	83 c4 10             	add    esp,0x10
c0017a31:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a33:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017a38:	83 ec 0c             	sub    esp,0xc
c0017a3b:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017a42:	83 c3 03             	add    ebx,0x3
c0017a45:	50                   	push   eax
c0017a46:	e8 74 ed fe ff       	call   c00067bf <init_percd>
c0017a4b:	59                   	pop    ecx
c0017a4c:	58                   	pop    eax
c0017a4d:	6a 01                	push   0x1
c0017a4f:	53                   	push   ebx
c0017a50:	e8 a8 e8 fe ff       	call   c00062fd <iso_open>
c0017a55:	83 c4 10             	add    esp,0x10
c0017a58:	ba 01 00 00 00       	mov    edx,0x1
c0017a5d:	83 f8 ff             	cmp    eax,0xffffffff
c0017a60:	74 0e                	je     c0017a70 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a62:	83 c0 64             	add    eax,0x64
c0017a65:	31 d2                	xor    edx,edx
c0017a67:	89 06                	mov    DWORD PTR [esi],eax
c0017a69:	eb 05                	jmp    c0017a70 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a6b:	ba 04 00 00 00       	mov    edx,0x4
c0017a70:	89 d0                	mov    eax,edx
c0017a72:	5a                   	pop    edx
c0017a73:	5b                   	pop    ebx
c0017a74:	5e                   	pop    esi
c0017a75:	c3                   	ret    

c0017a76 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017a76:	53                   	push   ebx
c0017a77:	83 ec 08             	sub    esp,0x8
c0017a7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a7e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a82:	85 c0                	test   eax,eax
c0017a84:	74 25                	je     c0017aab <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017a86:	85 db                	test   ebx,ebx
c0017a88:	74 21                	je     c0017aab <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017a8a:	83 e8 64             	sub    eax,0x64
c0017a8d:	52                   	push   edx
c0017a8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a96:	50                   	push   eax
c0017a97:	e8 09 e9 fe ff       	call   c00063a5 <iso_read>
c0017a9c:	83 c4 10             	add    esp,0x10
c0017a9f:	89 03                	mov    DWORD PTR [ebx],eax
c0017aa1:	09 d0                	or     eax,edx
c0017aa3:	0f 94 c0             	sete   al
c0017aa6:	0f b6 c0             	movzx  eax,al
c0017aa9:	eb 05                	jmp    c0017ab0 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017aab:	b8 04 00 00 00       	mov    eax,0x4
c0017ab0:	83 c4 08             	add    esp,0x8
c0017ab3:	5b                   	pop    ebx
c0017ab4:	c3                   	ret    
c0017ab5:	90                   	nop

c0017ab6 <ISO9660::seek(void*, unsigned long long)>:
c0017ab6:	57                   	push   edi
c0017ab7:	56                   	push   esi
c0017ab8:	b8 04 00 00 00       	mov    eax,0x4
c0017abd:	51                   	push   ecx
c0017abe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ac2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ac6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017aca:	85 d2                	test   edx,edx
c0017acc:	74 1c                	je     c0017aea <ISO9660::seek(void*, unsigned long long)+0x34>
c0017ace:	6a 00                	push   0x0
c0017ad0:	83 ea 64             	sub    edx,0x64
c0017ad3:	57                   	push   edi
c0017ad4:	56                   	push   esi
c0017ad5:	52                   	push   edx
c0017ad6:	e8 e0 e9 fe ff       	call   c00064bb <iso_seek>
c0017adb:	83 c4 10             	add    esp,0x10
c0017ade:	31 f0                	xor    eax,esi
c0017ae0:	31 fa                	xor    edx,edi
c0017ae2:	09 d0                	or     eax,edx
c0017ae4:	0f 95 c0             	setne  al
c0017ae7:	0f b6 c0             	movzx  eax,al
c0017aea:	5a                   	pop    edx
c0017aeb:	5e                   	pop    esi
c0017aec:	5f                   	pop    edi
c0017aed:	c3                   	ret    

c0017aee <ISO9660::tell(void*, unsigned long long*)>:
c0017aee:	53                   	push   ebx
c0017aef:	83 ec 08             	sub    esp,0x8
c0017af2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017af6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017afa:	85 c0                	test   eax,eax
c0017afc:	74 1c                	je     c0017b1a <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017afe:	85 db                	test   ebx,ebx
c0017b00:	74 18                	je     c0017b1a <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b02:	83 ec 0c             	sub    esp,0xc
c0017b05:	83 e8 64             	sub    eax,0x64
c0017b08:	50                   	push   eax
c0017b09:	e8 31 ea fe ff       	call   c000653f <iso_tell>
c0017b0e:	83 c4 10             	add    esp,0x10
c0017b11:	89 03                	mov    DWORD PTR [ebx],eax
c0017b13:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017b16:	31 c0                	xor    eax,eax
c0017b18:	eb 05                	jmp    c0017b1f <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017b1a:	b8 04 00 00 00       	mov    eax,0x4
c0017b1f:	83 c4 08             	add    esp,0x8
c0017b22:	5b                   	pop    ebx
c0017b23:	c3                   	ret    

c0017b24 <ISO9660::stat(void*, unsigned long long*)>:
c0017b24:	53                   	push   ebx
c0017b25:	83 ec 08             	sub    esp,0x8
c0017b28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b2c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b30:	85 c0                	test   eax,eax
c0017b32:	74 20                	je     c0017b54 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b34:	85 db                	test   ebx,ebx
c0017b36:	74 1c                	je     c0017b54 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b38:	83 ec 0c             	sub    esp,0xc
c0017b3b:	83 e8 64             	sub    eax,0x64
c0017b3e:	50                   	push   eax
c0017b3f:	e8 2c ea fe ff       	call   c0006570 <iso_total>
c0017b44:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017b4b:	89 03                	mov    DWORD PTR [ebx],eax
c0017b4d:	83 c4 10             	add    esp,0x10
c0017b50:	31 c0                	xor    eax,eax
c0017b52:	eb 05                	jmp    c0017b59 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017b54:	b8 04 00 00 00       	mov    eax,0x4
c0017b59:	83 c4 08             	add    esp,0x8
c0017b5c:	5b                   	pop    ebx
c0017b5d:	c3                   	ret    

c0017b5e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017b5e:	55                   	push   ebp
c0017b5f:	57                   	push   edi
c0017b60:	56                   	push   esi
c0017b61:	53                   	push   ebx
c0017b62:	83 ec 0c             	sub    esp,0xc
c0017b65:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017b69:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017b6d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017b71:	85 ff                	test   edi,edi
c0017b73:	0f 94 c2             	sete   dl
c0017b76:	85 f6                	test   esi,esi
c0017b78:	0f 94 c0             	sete   al
c0017b7b:	08 c2                	or     dl,al
c0017b7d:	0f 85 9e 00 00 00    	jne    c0017c21 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017b83:	85 db                	test   ebx,ebx
c0017b85:	0f 84 96 00 00 00    	je     c0017c21 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017b8b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017b8e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017b94:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017b9b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b9e:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017ba4:	74 34                	je     c0017bda <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017ba6:	83 ec 0c             	sub    esp,0xc
c0017ba9:	50                   	push   eax
c0017baa:	e8 10 ec fe ff       	call   c00067bf <init_percd>
c0017baf:	83 c4 10             	add    esp,0x10
c0017bb2:	ba 0b 00 00 00       	mov    edx,0xb
c0017bb7:	40                   	inc    eax
c0017bb8:	74 6c                	je     c0017c26 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017bba:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017bc1:	74 10                	je     c0017bd3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017bc3:	83 ec 0c             	sub    esp,0xc
c0017bc6:	68 cc f0 01 c0       	push   0xc001f0cc
c0017bcb:	e8 8b 85 ff ff       	call   c001015b <KePanic(char const*)>
c0017bd0:	83 c4 10             	add    esp,0x10
c0017bd3:	8a 03                	mov    al,BYTE PTR [ebx]
c0017bd5:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017bda:	83 c3 03             	add    ebx,0x3
c0017bdd:	52                   	push   edx
c0017bde:	52                   	push   edx
c0017bdf:	6a 00                	push   0x0
c0017be1:	53                   	push   ebx
c0017be2:	e8 16 e7 fe ff       	call   c00062fd <iso_open>
c0017be7:	83 c4 10             	add    esp,0x10
c0017bea:	89 c5                	mov    ebp,eax
c0017bec:	83 f8 ff             	cmp    eax,0xffffffff
c0017bef:	75 0f                	jne    c0017c00 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017bf1:	50                   	push   eax
c0017bf2:	50                   	push   eax
c0017bf3:	6a 01                	push   0x1
c0017bf5:	53                   	push   ebx
c0017bf6:	e8 02 e7 fe ff       	call   c00062fd <iso_open>
c0017bfb:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017bfe:	eb 1a                	jmp    c0017c1a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017c00:	83 ec 0c             	sub    esp,0xc
c0017c03:	50                   	push   eax
c0017c04:	e8 67 e9 fe ff       	call   c0006570 <iso_total>
c0017c09:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c10:	89 06                	mov    DWORD PTR [esi],eax
c0017c12:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c15:	e8 6d e7 fe ff       	call   c0006387 <iso_close>
c0017c1a:	83 c4 10             	add    esp,0x10
c0017c1d:	31 d2                	xor    edx,edx
c0017c1f:	eb 05                	jmp    c0017c26 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c21:	ba 04 00 00 00       	mov    edx,0x4
c0017c26:	83 c4 0c             	add    esp,0xc
c0017c29:	89 d0                	mov    eax,edx
c0017c2b:	5b                   	pop    ebx
c0017c2c:	5e                   	pop    esi
c0017c2d:	5f                   	pop    edi
c0017c2e:	5d                   	pop    ebp
c0017c2f:	c3                   	ret    

c0017c30 <ISO9660::close(void*)>:
c0017c30:	83 ec 0c             	sub    esp,0xc
c0017c33:	b8 04 00 00 00       	mov    eax,0x4
c0017c38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c3c:	85 d2                	test   edx,edx
c0017c3e:	74 11                	je     c0017c51 <ISO9660::close(void*)+0x21>
c0017c40:	83 ec 0c             	sub    esp,0xc
c0017c43:	83 ea 64             	sub    edx,0x64
c0017c46:	52                   	push   edx
c0017c47:	e8 3b e7 fe ff       	call   c0006387 <iso_close>
c0017c4c:	83 c4 10             	add    esp,0x10
c0017c4f:	31 c0                	xor    eax,eax
c0017c51:	83 c4 0c             	add    esp,0xc
c0017c54:	c3                   	ret    
c0017c55:	90                   	nop

c0017c56 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017c56:	55                   	push   ebp
c0017c57:	57                   	push   edi
c0017c58:	56                   	push   esi
c0017c59:	53                   	push   ebx
c0017c5a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017c60:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017c67:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017c6e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017c75:	85 c0                	test   eax,eax
c0017c77:	0f 84 96 00 00 00    	je     c0017d13 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017c7d:	85 db                	test   ebx,ebx
c0017c7f:	0f 84 8e 00 00 00    	je     c0017d13 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017c85:	83 ec 0c             	sub    esp,0xc
c0017c88:	83 e8 64             	sub    eax,0x64
c0017c8b:	50                   	push   eax
c0017c8c:	e8 30 e9 fe ff       	call   c00065c1 <iso_readdir>
c0017c91:	83 c4 10             	add    esp,0x10
c0017c94:	89 c6                	mov    esi,eax
c0017c96:	85 c0                	test   eax,eax
c0017c98:	75 18                	jne    c0017cb2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017c9a:	52                   	push   edx
c0017c9b:	68 10 01 00 00       	push   0x110
c0017ca0:	6a 00                	push   0x0
c0017ca2:	57                   	push   edi
c0017ca3:	e8 28 88 fe ff       	call   c00004d0 <memset>
c0017ca8:	83 c4 10             	add    esp,0x10
c0017cab:	b8 01 00 00 00       	mov    eax,0x1
c0017cb0:	eb 66                	jmp    c0017d18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017cb2:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017cb8:	8d 68 08             	lea    ebp,[eax+0x8]
c0017cbb:	83 ec 0c             	sub    esp,0xc
c0017cbe:	55                   	push   ebp
c0017cbf:	e8 7c 88 fe ff       	call   c0000540 <strlen>
c0017cc4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017cd0:	83 c4 10             	add    esp,0x10
c0017cd3:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017cd7:	75 0a                	jne    c0017ce3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017cd9:	b8 02 00 00 00       	mov    eax,0x2
c0017cde:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017ce1:	74 05                	je     c0017ce8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017ce3:	b8 01 00 00 00       	mov    eax,0x1
c0017ce8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cec:	50                   	push   eax
c0017ced:	50                   	push   eax
c0017cee:	55                   	push   ebp
c0017cef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017cf3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017cf7:	50                   	push   eax
c0017cf8:	e8 03 89 fe ff       	call   c0000600 <strcpy>
c0017cfd:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017d04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d06:	31 c0                	xor    eax,eax
c0017d08:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017d0e:	83 c4 10             	add    esp,0x10
c0017d11:	eb 05                	jmp    c0017d18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d13:	b8 04 00 00 00       	mov    eax,0x4
c0017d18:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017d1e:	5b                   	pop    ebx
c0017d1f:	5e                   	pop    esi
c0017d20:	5f                   	pop    edi
c0017d21:	5d                   	pop    ebp
c0017d22:	c3                   	ret    

c0017d23 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017d23:	57                   	push   edi
c0017d24:	56                   	push   esi
c0017d25:	53                   	push   ebx
c0017d26:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d2a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d2e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017d32:	39 35 24 53 02 c0    	cmp    DWORD PTR ds:0xc0025324,esi
c0017d38:	75 08                	jne    c0017d42 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017d3a:	38 1d f0 fa 01 c0    	cmp    BYTE PTR ds:0xc001faf0,bl
c0017d40:	74 4a                	je     c0017d8c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d42:	83 ec 0c             	sub    esp,0xc
c0017d45:	31 d2                	xor    edx,edx
c0017d47:	68 40 53 02 c0       	push   0xc0025340
c0017d4c:	0f be c3             	movsx  eax,bl
c0017d4f:	6a 01                	push   0x1
c0017d51:	52                   	push   edx
c0017d52:	56                   	push   esi
c0017d53:	ff 34 85 1c 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbce4]
c0017d5a:	e8 a1 4e ff ff       	call   c000cc00 <LogicalDisk::read(unsigned long long, int, void*)>
c0017d5f:	83 c4 20             	add    esp,0x20
c0017d62:	85 c0                	test   eax,eax
c0017d64:	75 0e                	jne    c0017d74 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017d66:	89 35 24 53 02 c0    	mov    DWORD PTR ds:0xc0025324,esi
c0017d6c:	88 1d f0 fa 01 c0    	mov    BYTE PTR ds:0xc001faf0,bl
c0017d72:	eb 18                	jmp    c0017d8c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d74:	50                   	push   eax
c0017d75:	68 00 08 00 00       	push   0x800
c0017d7a:	6a 00                	push   0x0
c0017d7c:	57                   	push   edi
c0017d7d:	e8 4e 87 fe ff       	call   c00004d0 <memset>
c0017d82:	83 c4 10             	add    esp,0x10
c0017d85:	b8 01 00 00 00       	mov    eax,0x1
c0017d8a:	eb 0e                	jmp    c0017d9a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017d8c:	be 40 53 02 c0       	mov    esi,0xc0025340
c0017d91:	b9 00 08 00 00       	mov    ecx,0x800
c0017d96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d98:	31 c0                	xor    eax,eax
c0017d9a:	5b                   	pop    ebx
c0017d9b:	5e                   	pop    esi
c0017d9c:	5f                   	pop    edi
c0017d9d:	c3                   	ret    

c0017d9e <ISO9660::tryMount(LogicalDisk*, int)>:
c0017d9e:	53                   	push   ebx
c0017d9f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017da5:	c7 05 24 53 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0025324,0xdeadbeef
c0017daf:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017db6:	8d 58 41             	lea    ebx,[eax+0x41]
c0017db9:	0f be db             	movsx  ebx,bl
c0017dbc:	53                   	push   ebx
c0017dbd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017dc1:	50                   	push   eax
c0017dc2:	6a 10                	push   0x10
c0017dc4:	e8 5a ff ff ff       	call   c0017d23 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017dc9:	83 c4 10             	add    esp,0x10
c0017dcc:	31 d2                	xor    edx,edx
c0017dce:	85 c0                	test   eax,eax
c0017dd0:	75 33                	jne    c0017e05 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dd2:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017dd7:	75 2c                	jne    c0017e05 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dd9:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017dde:	75 25                	jne    c0017e05 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017de0:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017de5:	75 1e                	jne    c0017e05 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017de7:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017dec:	75 17                	jne    c0017e05 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dee:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017df3:	75 10                	jne    c0017e05 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017df5:	83 ec 0c             	sub    esp,0xc
c0017df8:	53                   	push   ebx
c0017df9:	e8 c1 e9 fe ff       	call   c00067bf <init_percd>
c0017dfe:	83 c4 10             	add    esp,0x10
c0017e01:	40                   	inc    eax
c0017e02:	0f 95 c2             	setne  dl
c0017e05:	88 d0                	mov    al,dl
c0017e07:	81 c4 08 08 00 00    	add    esp,0x808
c0017e0d:	5b                   	pop    ebx
c0017e0e:	c3                   	ret    
c0017e0f:	90                   	nop

c0017e10 <ISO9660::ISO9660()>:
c0017e10:	83 ec 0c             	sub    esp,0xc
c0017e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e17:	83 ec 0c             	sub    esp,0xc
c0017e1a:	50                   	push   eax
c0017e1b:	e8 da 29 ff ff       	call   c000a7fa <Filesystem::Filesystem()>
c0017e20:	83 c4 10             	add    esp,0x10
c0017e23:	ba e4 f0 01 c0       	mov    edx,0xc001f0e4
c0017e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e2c:	89 10                	mov    DWORD PTR [eax],edx
c0017e2e:	e8 8e ea fe ff       	call   c00068c1 <fs_iso9660_init>
c0017e33:	90                   	nop
c0017e34:	83 c4 0c             	add    esp,0xc
c0017e37:	c3                   	ret    

c0017e38 <SoundCard::beginPlayback()>:
c0017e38:	c7 44 24 04 44 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f144
c0017e40:	e9 16 83 ff ff       	jmp    c001015b <KePanic(char const*)>
c0017e45:	90                   	nop

c0017e46 <SoundCard::stopPlayback()>:
c0017e46:	c7 44 24 04 44 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f144
c0017e4e:	e9 08 83 ff ff       	jmp    c001015b <KePanic(char const*)>
c0017e53:	90                   	nop

c0017e54 <SoundCard::SoundCard(char const*)>:
c0017e54:	83 ec 1c             	sub    esp,0x1c
c0017e57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e5b:	83 ec 08             	sub    esp,0x8
c0017e5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e62:	50                   	push   eax
c0017e63:	e8 48 3c ff ff       	call   c000bab0 <Device::Device(char const*)>
c0017e68:	83 c4 10             	add    esp,0x10
c0017e6b:	ba 90 f1 01 c0       	mov    edx,0xc001f190
c0017e70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e74:	89 10                	mov    DWORD PTR [eax],edx
c0017e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e7a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017e81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e85:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017e8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e93:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017e9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ea1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eaf:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017eb9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ec1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017ec6:	7f 19                	jg     c0017ee1 <SoundCard::SoundCard(char const*)+0x8d>
c0017ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ecc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ed0:	83 c2 54             	add    edx,0x54
c0017ed3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017edb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017edf:	eb e0                	jmp    c0017ec1 <SoundCard::SoundCard(char const*)+0x6d>
c0017ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee5:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017eec:	90                   	nop
c0017eed:	83 c4 1c             	add    esp,0x1c
c0017ef0:	c3                   	ret    
c0017ef1:	90                   	nop

c0017ef2 <SoundCard::~SoundCard()>:
c0017ef2:	83 ec 0c             	sub    esp,0xc
c0017ef5:	ba 90 f1 01 c0       	mov    edx,0xc001f190
c0017efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017efe:	89 10                	mov    DWORD PTR [eax],edx
c0017f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f04:	83 ec 0c             	sub    esp,0xc
c0017f07:	50                   	push   eax
c0017f08:	e8 0d 39 ff ff       	call   c000b81a <Device::~Device()>
c0017f0d:	83 c4 10             	add    esp,0x10
c0017f10:	90                   	nop
c0017f11:	83 c4 0c             	add    esp,0xc
c0017f14:	c3                   	ret    
c0017f15:	90                   	nop

c0017f16 <SoundCard::~SoundCard()>:
c0017f16:	83 ec 0c             	sub    esp,0xc
c0017f19:	83 ec 0c             	sub    esp,0xc
c0017f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f20:	e8 cd ff ff ff       	call   c0017ef2 <SoundCard::~SoundCard()>
c0017f25:	83 c4 10             	add    esp,0x10
c0017f28:	83 ec 08             	sub    esp,0x8
c0017f2b:	68 e8 01 00 00       	push   0x1e8
c0017f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f34:	e8 a9 24 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0017f39:	83 c4 10             	add    esp,0x10
c0017f3c:	83 c4 0c             	add    esp,0xc
c0017f3f:	c3                   	ret    

c0017f40 <SoundCard::configureRates(int, int, int)>:
c0017f40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017f44:	31 c0                	xor    eax,eax
c0017f46:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017f4d:	75 20                	jne    c0017f6f <SoundCard::configureRates(int, int, int)+0x2f>
c0017f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f53:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017f59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f5d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f67:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017f6d:	b0 01                	mov    al,0x1
c0017f6f:	c3                   	ret    

c0017f70 <SoundCard::getSamples16(int, short*)>:
c0017f70:	55                   	push   ebp
c0017f71:	57                   	push   edi
c0017f72:	31 ff                	xor    edi,edi
c0017f74:	56                   	push   esi
c0017f75:	53                   	push   ebx
c0017f76:	31 db                	xor    ebx,ebx
c0017f78:	83 ec 10             	sub    esp,0x10
c0017f7b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017f7f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017f83:	8d 04 36             	lea    eax,[esi+esi*1]
c0017f86:	50                   	push   eax
c0017f87:	6a 00                	push   0x0
c0017f89:	55                   	push   ebp
c0017f8a:	e8 41 85 fe ff       	call   c00004d0 <memset>
c0017f8f:	83 c4 10             	add    esp,0x10
c0017f92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f96:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017f9d:	85 c0                	test   eax,eax
c0017f9f:	74 1b                	je     c0017fbc <SoundCard::getSamples16(int, short*)+0x4c>
c0017fa1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017fa5:	75 15                	jne    c0017fbc <SoundCard::getSamples16(int, short*)+0x4c>
c0017fa7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017fab:	55                   	push   ebp
c0017fac:	56                   	push   esi
c0017fad:	50                   	push   eax
c0017fae:	e8 ed 02 00 00       	call   c00182a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017fb3:	83 c4 10             	add    esp,0x10
c0017fb6:	39 c7                	cmp    edi,eax
c0017fb8:	7d 02                	jge    c0017fbc <SoundCard::getSamples16(int, short*)+0x4c>
c0017fba:	89 c7                	mov    edi,eax
c0017fbc:	43                   	inc    ebx
c0017fbd:	83 fb 20             	cmp    ebx,0x20
c0017fc0:	75 d0                	jne    c0017f92 <SoundCard::getSamples16(int, short*)+0x22>
c0017fc2:	83 c4 0c             	add    esp,0xc
c0017fc5:	89 f8                	mov    eax,edi
c0017fc7:	5b                   	pop    ebx
c0017fc8:	5e                   	pop    esi
c0017fc9:	5f                   	pop    edi
c0017fca:	5d                   	pop    ebp
c0017fcb:	c3                   	ret    

c0017fcc <SoundCard::getSamples32(int, int*)>:
c0017fcc:	55                   	push   ebp
c0017fcd:	57                   	push   edi
c0017fce:	31 ff                	xor    edi,edi
c0017fd0:	56                   	push   esi
c0017fd1:	31 f6                	xor    esi,esi
c0017fd3:	53                   	push   ebx
c0017fd4:	83 ec 10             	sub    esp,0x10
c0017fd7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fdb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017fdf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017fe3:	c1 e0 02             	shl    eax,0x2
c0017fe6:	50                   	push   eax
c0017fe7:	6a 00                	push   0x0
c0017fe9:	55                   	push   ebp
c0017fea:	e8 e1 84 fe ff       	call   c00004d0 <memset>
c0017fef:	83 c4 10             	add    esp,0x10
c0017ff2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017ff9:	85 c0                	test   eax,eax
c0017ffb:	74 1b                	je     c0018018 <SoundCard::getSamples32(int, int*)+0x4c>
c0017ffd:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018001:	75 15                	jne    c0018018 <SoundCard::getSamples32(int, int*)+0x4c>
c0018003:	53                   	push   ebx
c0018004:	55                   	push   ebp
c0018005:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018009:	50                   	push   eax
c001800a:	e8 55 03 00 00       	call   c0018364 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001800f:	83 c4 10             	add    esp,0x10
c0018012:	39 c6                	cmp    esi,eax
c0018014:	7d 02                	jge    c0018018 <SoundCard::getSamples32(int, int*)+0x4c>
c0018016:	89 c6                	mov    esi,eax
c0018018:	47                   	inc    edi
c0018019:	83 ff 20             	cmp    edi,0x20
c001801c:	75 d4                	jne    c0017ff2 <SoundCard::getSamples32(int, int*)+0x26>
c001801e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018024:	85 f6                	test   esi,esi
c0018026:	75 0f                	jne    c0018037 <SoundCard::getSamples32(int, int*)+0x6b>
c0018028:	84 c0                	test   al,al
c001802a:	74 1b                	je     c0018047 <SoundCard::getSamples32(int, int*)+0x7b>
c001802c:	83 ec 0c             	sub    esp,0xc
c001802f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018031:	53                   	push   ebx
c0018032:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018035:	eb 0d                	jmp    c0018044 <SoundCard::getSamples32(int, int*)+0x78>
c0018037:	84 c0                	test   al,al
c0018039:	75 0c                	jne    c0018047 <SoundCard::getSamples32(int, int*)+0x7b>
c001803b:	83 ec 0c             	sub    esp,0xc
c001803e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018040:	53                   	push   ebx
c0018041:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018044:	83 c4 10             	add    esp,0x10
c0018047:	83 c4 0c             	add    esp,0xc
c001804a:	89 f0                	mov    eax,esi
c001804c:	5b                   	pop    ebx
c001804d:	5e                   	pop    esi
c001804e:	5f                   	pop    edi
c001804f:	5d                   	pop    ebp
c0018050:	c3                   	ret    
c0018051:	90                   	nop

c0018052 <SoundCard::addChannel(SoundPort*)>:
c0018052:	83 ec 0c             	sub    esp,0xc
c0018055:	31 c0                	xor    eax,eax
c0018057:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001805b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018063:	74 1b                	je     c0018080 <SoundCard::addChannel(SoundPort*)+0x2e>
c0018065:	40                   	inc    eax
c0018066:	83 f8 20             	cmp    eax,0x20
c0018069:	75 f0                	jne    c001805b <SoundCard::addChannel(SoundPort*)+0x9>
c001806b:	83 ec 0c             	sub    esp,0xc
c001806e:	68 69 f1 01 c0       	push   0xc001f169
c0018073:	e8 e3 80 ff ff       	call   c001015b <KePanic(char const*)>
c0018078:	83 c4 10             	add    esp,0x10
c001807b:	83 c8 ff             	or     eax,0xffffffff
c001807e:	eb 0b                	jmp    c001808b <SoundCard::addChannel(SoundPort*)+0x39>
c0018080:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018084:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001808b:	83 c4 0c             	add    esp,0xc
c001808e:	c3                   	ret    
c001808f:	90                   	nop

c0018090 <SoundCard::removeChannel(int)>:
c0018090:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018094:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018098:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00180a3:	c3                   	ret    

c00180a4 <SoundPort::SoundPort(int, int, int, int)>:
c00180a4:	83 ec 0c             	sub    esp,0xc
c00180a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ab:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00180b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00180ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00180c2:	89 10                	mov    DWORD PTR [eax],edx
c00180c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00180cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180d7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00180da:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00180df:	75 13                	jne    c00180f4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00180e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00180e7:	05 a0 0f 00 00       	add    eax,0xfa0
c00180ec:	01 c0                	add    eax,eax
c00180ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00180f2:	66 90                	xchg   ax,ax
c00180f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180fc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00180ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018103:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001810a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001810e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018111:	c1 e0 02             	shl    eax,0x2
c0018114:	83 ec 0c             	sub    esp,0xc
c0018117:	50                   	push   eax
c0018118:	e8 9c f6 fe ff       	call   c00077b9 <malloc>
c001811d:	83 c4 10             	add    esp,0x10
c0018120:	89 c2                	mov    edx,eax
c0018122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018126:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018129:	90                   	nop
c001812a:	83 c4 0c             	add    esp,0xc
c001812d:	c3                   	ret    
c001812e:	66 90                	xchg   ax,ax

c0018130 <SoundPort::~SoundPort()>:
c0018130:	83 ec 0c             	sub    esp,0xc
c0018133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018137:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001813a:	85 c0                	test   eax,eax
c001813c:	74 1e                	je     c001815c <SoundPort::~SoundPort()+0x2c>
c001813e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018142:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018145:	83 ec 0c             	sub    esp,0xc
c0018148:	50                   	push   eax
c0018149:	e8 7b f6 fe ff       	call   c00077c9 <free>
c001814e:	83 c4 10             	add    esp,0x10
c0018151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018155:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001815c:	90                   	nop
c001815d:	83 c4 0c             	add    esp,0xc
c0018160:	c3                   	ret    
c0018161:	90                   	nop
c0018162:	66 90                	xchg   ax,ax

c0018164 <SoundPort::unpause()>:
c0018164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018168:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001816c:	c3                   	ret    
c001816d:	90                   	nop
c001816e:	66 90                	xchg   ax,ax

c0018170 <SoundPort::pause()>:
c0018170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018174:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018178:	c3                   	ret    
c0018179:	90                   	nop
c001817a:	66 90                	xchg   ax,ax

c001817c <SoundPort::getBufferUsed()>:
c001817c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018180:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018183:	c3                   	ret    

c0018184 <SoundPort::getBufferSize()>:
c0018184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018188:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001818b:	c3                   	ret    

c001818c <SoundPort::buffer16(short*, int)>:
c001818c:	55                   	push   ebp
c001818d:	57                   	push   edi
c001818e:	56                   	push   esi
c001818f:	53                   	push   ebx
c0018190:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018194:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018198:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001819b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001819e:	74 68                	je     c0018208 <SoundPort::buffer16(short*, int)+0x7c>
c00181a0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00181a4:	85 c9                	test   ecx,ecx
c00181a6:	7e 60                	jle    c0018208 <SoundPort::buffer16(short*, int)+0x7c>
c00181a8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00181ac:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00181af:	c1 e1 0f             	shl    ecx,0xf
c00181b2:	8d 70 01             	lea    esi,[eax+0x1]
c00181b5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00181b8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00181bb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181be:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181c1:	74 4d                	je     c0018210 <SoundPort::buffer16(short*, int)+0x84>
c00181c3:	31 f6                	xor    esi,esi
c00181c5:	eb 21                	jmp    c00181e8 <SoundPort::buffer16(short*, int)+0x5c>
c00181c7:	90                   	nop
c00181c8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00181cd:	8d 79 01             	lea    edi,[ecx+0x1]
c00181d0:	c1 e3 0f             	shl    ebx,0xf
c00181d3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00181d6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00181d9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00181dc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181df:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181e2:	74 1c                	je     c0018200 <SoundPort::buffer16(short*, int)+0x74>
c00181e4:	89 c6                	mov    esi,eax
c00181e6:	66 90                	xchg   ax,ax
c00181e8:	8d 46 01             	lea    eax,[esi+0x1]
c00181eb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00181ef:	75 d7                	jne    c00181c8 <SoundPort::buffer16(short*, int)+0x3c>
c00181f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181f5:	8d 76 00             	lea    esi,[esi+0x0]
c00181f8:	5b                   	pop    ebx
c00181f9:	5e                   	pop    esi
c00181fa:	5f                   	pop    edi
c00181fb:	5d                   	pop    ebp
c00181fc:	c3                   	ret    
c00181fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018200:	5b                   	pop    ebx
c0018201:	8d 46 02             	lea    eax,[esi+0x2]
c0018204:	5e                   	pop    esi
c0018205:	5f                   	pop    edi
c0018206:	5d                   	pop    ebp
c0018207:	c3                   	ret    
c0018208:	5b                   	pop    ebx
c0018209:	31 c0                	xor    eax,eax
c001820b:	5e                   	pop    esi
c001820c:	5f                   	pop    edi
c001820d:	5d                   	pop    ebp
c001820e:	c3                   	ret    
c001820f:	90                   	nop
c0018210:	b8 01 00 00 00       	mov    eax,0x1
c0018215:	eb e1                	jmp    c00181f8 <SoundPort::buffer16(short*, int)+0x6c>
c0018217:	90                   	nop

c0018218 <SoundPort::buffer32(int*, int)>:
c0018218:	55                   	push   ebp
c0018219:	57                   	push   edi
c001821a:	56                   	push   esi
c001821b:	53                   	push   ebx
c001821c:	51                   	push   ecx
c001821d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018225:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018228:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001822c:	89 04 24             	mov    DWORD PTR [esp],eax
c001822f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018232:	74 5c                	je     c0018290 <SoundPort::buffer32(int*, int)+0x78>
c0018234:	85 c0                	test   eax,eax
c0018236:	7e 58                	jle    c0018290 <SoundPort::buffer32(int*, int)+0x78>
c0018238:	8d 71 01             	lea    esi,[ecx+0x1]
c001823b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001823e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018241:	8b 37                	mov    esi,DWORD PTR [edi]
c0018243:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018246:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018249:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001824c:	74 4a                	je     c0018298 <SoundPort::buffer32(int*, int)+0x80>
c001824e:	31 f6                	xor    esi,esi
c0018250:	eb 1e                	jmp    c0018270 <SoundPort::buffer32(int*, int)+0x58>
c0018252:	66 90                	xchg   ax,ax
c0018254:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018257:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001825a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001825d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018260:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018264:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018267:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001826a:	74 18                	je     c0018284 <SoundPort::buffer32(int*, int)+0x6c>
c001826c:	89 de                	mov    esi,ebx
c001826e:	66 90                	xchg   ax,ax
c0018270:	8d 5e 01             	lea    ebx,[esi+0x1]
c0018273:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018276:	75 dc                	jne    c0018254 <SoundPort::buffer32(int*, int)+0x3c>
c0018278:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001827b:	90                   	nop
c001827c:	5a                   	pop    edx
c001827d:	5b                   	pop    ebx
c001827e:	5e                   	pop    esi
c001827f:	5f                   	pop    edi
c0018280:	5d                   	pop    ebp
c0018281:	c3                   	ret    
c0018282:	66 90                	xchg   ax,ax
c0018284:	5a                   	pop    edx
c0018285:	8d 46 02             	lea    eax,[esi+0x2]
c0018288:	5b                   	pop    ebx
c0018289:	5e                   	pop    esi
c001828a:	5f                   	pop    edi
c001828b:	5d                   	pop    ebp
c001828c:	c3                   	ret    
c001828d:	8d 76 00             	lea    esi,[esi+0x0]
c0018290:	5a                   	pop    edx
c0018291:	31 c0                	xor    eax,eax
c0018293:	5b                   	pop    ebx
c0018294:	5e                   	pop    esi
c0018295:	5f                   	pop    edi
c0018296:	5d                   	pop    ebp
c0018297:	c3                   	ret    
c0018298:	b8 01 00 00 00       	mov    eax,0x1
c001829d:	eb dd                	jmp    c001827c <SoundPort::buffer32(int*, int)+0x64>
c001829f:	90                   	nop

c00182a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00182a0:	57                   	push   edi
c00182a1:	56                   	push   esi
c00182a2:	53                   	push   ebx
c00182a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00182a7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00182ab:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00182b1:	39 03                	cmp    DWORD PTR [ebx],eax
c00182b3:	74 13                	je     c00182c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00182b5:	83 ec 0c             	sub    esp,0xc
c00182b8:	68 bc f1 01 c0       	push   0xc001f1bc
c00182bd:	e8 99 7e ff ff       	call   c001015b <KePanic(char const*)>
c00182c2:	83 c4 10             	add    esp,0x10
c00182c5:	8d 76 00             	lea    esi,[esi+0x0]
c00182c8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00182ce:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00182d1:	74 11                	je     c00182e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00182d3:	83 ec 0c             	sub    esp,0xc
c00182d6:	68 fb f1 01 c0       	push   0xc001f1fb
c00182db:	e8 7b 7e ff ff       	call   c001015b <KePanic(char const*)>
c00182e0:	83 c4 10             	add    esp,0x10
c00182e3:	90                   	nop
c00182e4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00182ea:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00182ed:	74 11                	je     c0018300 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00182ef:	83 ec 0c             	sub    esp,0xc
c00182f2:	68 fb f1 01 c0       	push   0xc001f1fb
c00182f7:	e8 5f 7e ff ff       	call   c001015b <KePanic(char const*)>
c00182fc:	83 c4 10             	add    esp,0x10
c00182ff:	90                   	nop
c0018300:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018303:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018307:	7e 07                	jle    c0018310 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018309:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001830d:	8d 76 00             	lea    esi,[esi+0x0]
c0018310:	85 f6                	test   esi,esi
c0018312:	7e 2c                	jle    c0018340 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018314:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018318:	8d 3c 36             	lea    edi,[esi+esi*1]
c001831b:	31 c9                	xor    ecx,ecx
c001831d:	01 d7                	add    edi,edx
c001831f:	90                   	nop
c0018320:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018323:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018326:	85 c0                	test   eax,eax
c0018328:	79 06                	jns    c0018330 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001832a:	05 ff 7f 00 00       	add    eax,0x7fff
c001832f:	90                   	nop
c0018330:	c1 f8 0f             	sar    eax,0xf
c0018333:	83 c1 04             	add    ecx,0x4
c0018336:	66 01 02             	add    WORD PTR [edx],ax
c0018339:	83 c2 02             	add    edx,0x2
c001833c:	39 d7                	cmp    edi,edx
c001833e:	75 e0                	jne    c0018320 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018340:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0018343:	50                   	push   eax
c0018344:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018347:	29 f0                	sub    eax,esi
c0018349:	c1 e0 02             	shl    eax,0x2
c001834c:	50                   	push   eax
c001834d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018350:	50                   	push   eax
c0018351:	52                   	push   edx
c0018352:	e8 89 80 fe ff       	call   c00003e0 <memmove>
c0018357:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001835a:	83 c4 10             	add    esp,0x10
c001835d:	89 f0                	mov    eax,esi
c001835f:	5b                   	pop    ebx
c0018360:	5e                   	pop    esi
c0018361:	5f                   	pop    edi
c0018362:	c3                   	ret    
c0018363:	90                   	nop

c0018364 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018364:	57                   	push   edi
c0018365:	56                   	push   esi
c0018366:	53                   	push   ebx
c0018367:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001836b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001836f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018373:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018379:	39 06                	cmp    DWORD PTR [esi],eax
c001837b:	74 13                	je     c0018390 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001837d:	83 ec 0c             	sub    esp,0xc
c0018380:	68 dc f1 01 c0       	push   0xc001f1dc
c0018385:	e8 d1 7d ff ff       	call   c001015b <KePanic(char const*)>
c001838a:	83 c4 10             	add    esp,0x10
c001838d:	8d 76 00             	lea    esi,[esi+0x0]
c0018390:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0018396:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018399:	74 11                	je     c00183ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001839b:	83 ec 0c             	sub    esp,0xc
c001839e:	68 17 f2 01 c0       	push   0xc001f217
c00183a3:	e8 b3 7d ff ff       	call   c001015b <KePanic(char const*)>
c00183a8:	83 c4 10             	add    esp,0x10
c00183ab:	90                   	nop
c00183ac:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00183b2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00183b5:	74 11                	je     c00183c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00183b7:	83 ec 0c             	sub    esp,0xc
c00183ba:	68 17 f2 01 c0       	push   0xc001f217
c00183bf:	e8 97 7d ff ff       	call   c001015b <KePanic(char const*)>
c00183c4:	83 c4 10             	add    esp,0x10
c00183c7:	90                   	nop
c00183c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00183cb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00183cf:	7e 07                	jle    c00183d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00183d1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00183d5:	8d 76 00             	lea    esi,[esi+0x0]
c00183d8:	85 ff                	test   edi,edi
c00183da:	7e 1c                	jle    c00183f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00183dc:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00183e3:	31 c0                	xor    eax,eax
c00183e5:	8d 76 00             	lea    esi,[esi+0x0]
c00183e8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00183eb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00183ee:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00183f1:	83 c0 04             	add    eax,0x4
c00183f4:	39 c1                	cmp    ecx,eax
c00183f6:	75 f0                	jne    c00183e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00183f8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00183fb:	50                   	push   eax
c00183fc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00183ff:	29 f8                	sub    eax,edi
c0018401:	c1 e0 02             	shl    eax,0x2
c0018404:	50                   	push   eax
c0018405:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018408:	50                   	push   eax
c0018409:	52                   	push   edx
c001840a:	e8 d1 7f fe ff       	call   c00003e0 <memmove>
c001840f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018412:	83 c4 10             	add    esp,0x10
c0018415:	89 f8                	mov    eax,edi
c0018417:	5b                   	pop    ebx
c0018418:	5e                   	pop    esi
c0018419:	5f                   	pop    edi
c001841a:	c3                   	ret    
c001841b:	90                   	nop

c001841c <PCI::open(int, int, void*)>:
c001841c:	83 ec 18             	sub    esp,0x18
c001841f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018423:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018427:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001842d:	8b 10                	mov    edx,DWORD PTR [eax]
c001842f:	50                   	push   eax
c0018430:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018433:	31 c0                	xor    eax,eax
c0018435:	83 c4 1c             	add    esp,0x1c
c0018438:	c3                   	ret    
c0018439:	90                   	nop

c001843a <PCI::close(int, int, void*)>:
c001843a:	31 c0                	xor    eax,eax
c001843c:	c3                   	ret    
c001843d:	90                   	nop

c001843e <PCI::PCI()>:
c001843e:	83 ec 0c             	sub    esp,0xc
c0018441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018445:	83 ec 08             	sub    esp,0x8
c0018448:	68 33 f2 01 c0       	push   0xc001f233
c001844d:	50                   	push   eax
c001844e:	e8 19 2e ff ff       	call   c000b26c <Bus::Bus(char const*)>
c0018453:	83 c4 10             	add    esp,0x10
c0018456:	ba dc f2 01 c0       	mov    edx,0xc001f2dc
c001845b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001845f:	89 10                	mov    DWORD PTR [eax],edx
c0018461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018465:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001846f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018473:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c0018478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001847c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018482:	31 d2                	xor    edx,edx
c0018484:	88 c2                	mov    dl,al
c0018486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001848a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018495:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001849b:	31 d2                	xor    edx,edx
c001849d:	88 c2                	mov    dl,al
c001849f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184a3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00184a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184b2:	8d 50 01             	lea    edx,[eax+0x1]
c00184b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184b9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00184bf:	31 d2                	xor    edx,edx
c00184c1:	88 c2                	mov    dl,al
c00184c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184c7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00184cb:	83 c9 c0             	or     ecx,0xffffffc0
c00184ce:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00184d2:	90                   	nop
c00184d3:	83 c4 0c             	add    esp,0xc
c00184d6:	c3                   	ret    
c00184d7:	90                   	nop

c00184d8 <PCI::readBAR8(unsigned int, int)>:
c00184d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184e0:	f6 c2 01             	test   dl,0x1
c00184e3:	74 07                	je     c00184ec <PCI::readBAR8(unsigned int, int)+0x14>
c00184e5:	83 e2 fc             	and    edx,0xfffffffc
c00184e8:	01 c2                	add    edx,eax
c00184ea:	ec                   	in     al,dx
c00184eb:	c3                   	ret    
c00184ec:	83 e2 f0             	and    edx,0xfffffff0
c00184ef:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00184f2:	c3                   	ret    
c00184f3:	90                   	nop

c00184f4 <PCI::readBAR16(unsigned int, int)>:
c00184f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184fc:	f6 c2 01             	test   dl,0x1
c00184ff:	74 08                	je     c0018509 <PCI::readBAR16(unsigned int, int)+0x15>
c0018501:	83 e2 fc             	and    edx,0xfffffffc
c0018504:	01 c2                	add    edx,eax
c0018506:	66 ed                	in     ax,dx
c0018508:	c3                   	ret    
c0018509:	83 e2 f0             	and    edx,0xfffffff0
c001850c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018510:	c3                   	ret    
c0018511:	90                   	nop

c0018512 <PCI::readBAR32(unsigned int, int)>:
c0018512:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018516:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001851a:	f6 c2 01             	test   dl,0x1
c001851d:	74 07                	je     c0018526 <PCI::readBAR32(unsigned int, int)+0x14>
c001851f:	83 e2 fc             	and    edx,0xfffffffc
c0018522:	01 c2                	add    edx,eax
c0018524:	ed                   	in     eax,dx
c0018525:	c3                   	ret    
c0018526:	83 e2 f0             	and    edx,0xfffffff0
c0018529:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001852c:	c3                   	ret    
c001852d:	90                   	nop

c001852e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001852e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018532:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018536:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001853a:	f6 c2 01             	test   dl,0x1
c001853d:	74 07                	je     c0018546 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001853f:	83 e2 fc             	and    edx,0xfffffffc
c0018542:	01 ca                	add    edx,ecx
c0018544:	ee                   	out    dx,al
c0018545:	c3                   	ret    
c0018546:	83 e2 f0             	and    edx,0xfffffff0
c0018549:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001854c:	c3                   	ret    
c001854d:	90                   	nop

c001854e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001854e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018552:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018556:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001855a:	f6 c2 01             	test   dl,0x1
c001855d:	74 08                	je     c0018567 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001855f:	83 e2 fc             	and    edx,0xfffffffc
c0018562:	01 ca                	add    edx,ecx
c0018564:	66 ef                	out    dx,ax
c0018566:	c3                   	ret    
c0018567:	83 e2 f0             	and    edx,0xfffffff0
c001856a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001856e:	c3                   	ret    
c001856f:	90                   	nop

c0018570 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018570:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018574:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018578:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001857c:	f6 c2 01             	test   dl,0x1
c001857f:	74 07                	je     c0018588 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018581:	83 e2 fc             	and    edx,0xfffffffc
c0018584:	01 ca                	add    edx,ecx
c0018586:	ef                   	out    dx,eax
c0018587:	c3                   	ret    
c0018588:	83 e2 f0             	and    edx,0xfffffff0
c001858b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001858e:	c3                   	ret    
c001858f:	90                   	nop

c0018590 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018590:	55                   	push   ebp
c0018591:	57                   	push   edi
c0018592:	56                   	push   esi
c0018593:	53                   	push   ebx
c0018594:	83 ec 0c             	sub    esp,0xc
c0018597:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001859b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001859f:	89 f0                	mov    eax,esi
c00185a1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00185a5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00185a9:	3c 07                	cmp    al,0x7
c00185ab:	76 10                	jbe    c00185bd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00185ad:	83 ec 0c             	sub    esp,0xc
c00185b0:	68 3b f2 01 c0       	push   0xc001f23b
c00185b5:	e8 a1 7b ff ff       	call   c001015b <KePanic(char const*)>
c00185ba:	83 c4 10             	add    esp,0x10
c00185bd:	80 fb 0f             	cmp    bl,0xf
c00185c0:	76 10                	jbe    c00185d2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00185c2:	83 ec 0c             	sub    esp,0xc
c00185c5:	68 6b f2 01 c0       	push   0xc001f26b
c00185ca:	e8 8c 7b ff ff       	call   c001015b <KePanic(char const*)>
c00185cf:	83 c4 10             	add    esp,0x10
c00185d2:	8d 04 36             	lea    eax,[esi+esi*1]
c00185d5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00185da:	83 c8 f0             	or     eax,0xfffffff0
c00185dd:	ee                   	out    dx,al
c00185de:	ba fa 0c 00 00       	mov    edx,0xcfa
c00185e3:	89 e8                	mov    eax,ebp
c00185e5:	ee                   	out    dx,al
c00185e6:	83 c4 0c             	add    esp,0xc
c00185e9:	89 d8                	mov    eax,ebx
c00185eb:	66 81 e7 fc 00       	and    di,0xfc
c00185f0:	5b                   	pop    ebx
c00185f1:	c1 e0 08             	shl    eax,0x8
c00185f4:	5e                   	pop    esi
c00185f5:	09 f8                	or     eax,edi
c00185f7:	5f                   	pop    edi
c00185f8:	66 0d 00 c0          	or     ax,0xc000
c00185fc:	5d                   	pop    ebp
c00185fd:	c3                   	ret    

c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00185fe:	57                   	push   edi
c00185ff:	56                   	push   esi
c0018600:	53                   	push   ebx
c0018601:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018605:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018609:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001860f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018613:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018617:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001861b:	83 ff 01             	cmp    edi,0x1
c001861e:	75 3e                	jne    c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018620:	89 de                	mov    esi,ebx
c0018622:	0f b6 c0             	movzx  eax,al
c0018625:	81 e6 fc 00 00 00    	and    esi,0xfc
c001862b:	c1 e0 10             	shl    eax,0x10
c001862e:	0f b6 c9             	movzx  ecx,cl
c0018631:	09 f0                	or     eax,esi
c0018633:	c1 e1 08             	shl    ecx,0x8
c0018636:	0f b6 d2             	movzx  edx,dl
c0018639:	09 c8                	or     eax,ecx
c001863b:	c1 e2 0b             	shl    edx,0xb
c001863e:	09 d0                	or     eax,edx
c0018640:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018645:	0d 00 00 00 80       	or     eax,0x80000000
c001864a:	ef                   	out    dx,eax
c001864b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018650:	ed                   	in     eax,dx
c0018651:	83 e3 02             	and    ebx,0x2
c0018654:	0f b6 cb             	movzx  ecx,bl
c0018657:	c1 e1 03             	shl    ecx,0x3
c001865a:	d3 e8                	shr    eax,cl
c001865c:	eb 43                	jmp    c00186a1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001865e:	83 ff 02             	cmp    edi,0x2
c0018661:	75 2c                	jne    c001868f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018663:	83 ec 0c             	sub    esp,0xc
c0018666:	0f b6 c9             	movzx  ecx,cl
c0018669:	0f b6 d2             	movzx  edx,dl
c001866c:	0f b6 fb             	movzx  edi,bl
c001866f:	0f b6 c0             	movzx  eax,al
c0018672:	57                   	push   edi
c0018673:	51                   	push   ecx
c0018674:	52                   	push   edx
c0018675:	50                   	push   eax
c0018676:	56                   	push   esi
c0018677:	e8 14 ff ff ff       	call   c0018590 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001867c:	89 c2                	mov    edx,eax
c001867e:	ed                   	in     eax,dx
c001867f:	83 e3 02             	and    ebx,0x2
c0018682:	83 c4 20             	add    esp,0x20
c0018685:	0f b6 cb             	movzx  ecx,bl
c0018688:	c1 e1 03             	shl    ecx,0x3
c001868b:	d3 e8                	shr    eax,cl
c001868d:	eb 12                	jmp    c00186a1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001868f:	83 ec 0c             	sub    esp,0xc
c0018692:	68 9b f2 01 c0       	push   0xc001f29b
c0018697:	e8 bf 7a ff ff       	call   c001015b <KePanic(char const*)>
c001869c:	83 c4 10             	add    esp,0x10
c001869f:	31 c0                	xor    eax,eax
c00186a1:	5b                   	pop    ebx
c00186a2:	5e                   	pop    esi
c00186a3:	5f                   	pop    edi
c00186a4:	c3                   	ret    
c00186a5:	90                   	nop

c00186a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00186a6:	83 ec 18             	sub    esp,0x18
c00186a9:	6a 00                	push   0x0
c00186ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186b0:	50                   	push   eax
c00186b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186b6:	50                   	push   eax
c00186b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186bc:	50                   	push   eax
c00186bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186c1:	e8 38 ff ff ff       	call   c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186c6:	83 c4 2c             	add    esp,0x2c
c00186c9:	c3                   	ret    

c00186ca <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00186ca:	83 ec 18             	sub    esp,0x18
c00186cd:	6a 0e                	push   0xe
c00186cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186d4:	50                   	push   eax
c00186d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186da:	50                   	push   eax
c00186db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186e0:	50                   	push   eax
c00186e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186e5:	e8 14 ff ff ff       	call   c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186ea:	83 c4 2c             	add    esp,0x2c
c00186ed:	0f b6 c0             	movzx  eax,al
c00186f0:	c3                   	ret    
c00186f1:	90                   	nop

c00186f2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00186f2:	55                   	push   ebp
c00186f3:	57                   	push   edi
c00186f4:	56                   	push   esi
c00186f5:	53                   	push   ebx
c00186f6:	83 ec 18             	sub    esp,0x18
c00186f9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00186fe:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018703:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018708:	6a 0a                	push   0xa
c001870a:	56                   	push   esi
c001870b:	55                   	push   ebp
c001870c:	57                   	push   edi
c001870d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018711:	e8 e8 fe ff ff       	call   c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018716:	83 c4 14             	add    esp,0x14
c0018719:	89 c3                	mov    ebx,eax
c001871b:	6a 0a                	push   0xa
c001871d:	0f b6 db             	movzx  ebx,bl
c0018720:	56                   	push   esi
c0018721:	55                   	push   ebp
c0018722:	57                   	push   edi
c0018723:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018727:	e8 d2 fe ff ff       	call   c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001872c:	83 c4 2c             	add    esp,0x2c
c001872f:	25 00 ff 00 00       	and    eax,0xff00
c0018734:	09 d8                	or     eax,ebx
c0018736:	5b                   	pop    ebx
c0018737:	5e                   	pop    esi
c0018738:	5f                   	pop    edi
c0018739:	5d                   	pop    ebp
c001873a:	c3                   	ret    
c001873b:	90                   	nop

c001873c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001873c:	83 ec 18             	sub    esp,0x18
c001873f:	6a 08                	push   0x8
c0018741:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018746:	50                   	push   eax
c0018747:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001874c:	50                   	push   eax
c001874d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018752:	50                   	push   eax
c0018753:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018757:	e8 a2 fe ff ff       	call   c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001875c:	83 c4 2c             	add    esp,0x2c
c001875f:	0f b6 c4             	movzx  eax,ah
c0018762:	c3                   	ret    
c0018763:	90                   	nop

c0018764 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018764:	83 ec 18             	sub    esp,0x18
c0018767:	6a 08                	push   0x8
c0018769:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001876e:	50                   	push   eax
c001876f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018774:	50                   	push   eax
c0018775:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001877a:	50                   	push   eax
c001877b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001877f:	e8 7a fe ff ff       	call   c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018784:	83 c4 2c             	add    esp,0x2c
c0018787:	c3                   	ret    

c0018788 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018788:	83 ec 18             	sub    esp,0x18
c001878b:	6a 3c                	push   0x3c
c001878d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018792:	50                   	push   eax
c0018793:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018798:	50                   	push   eax
c0018799:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001879e:	50                   	push   eax
c001879f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187a3:	e8 56 fe ff ff       	call   c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187a8:	83 c4 2c             	add    esp,0x2c
c00187ab:	c3                   	ret    

c00187ac <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00187ac:	83 ec 18             	sub    esp,0x18
c00187af:	6a 18                	push   0x18
c00187b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187b6:	50                   	push   eax
c00187b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187bc:	50                   	push   eax
c00187bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187c2:	50                   	push   eax
c00187c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187c7:	e8 32 fe ff ff       	call   c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187cc:	83 c4 2c             	add    esp,0x2c
c00187cf:	0f b6 c4             	movzx  eax,ah
c00187d2:	c3                   	ret    
c00187d3:	90                   	nop

c00187d4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00187d4:	55                   	push   ebp
c00187d5:	57                   	push   edi
c00187d6:	56                   	push   esi
c00187d7:	53                   	push   ebx
c00187d8:	83 ec 28             	sub    esp,0x28
c00187db:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00187df:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00187e4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00187e9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00187ee:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00187f5:	8d 43 12             	lea    eax,[ebx+0x12]
c00187f8:	83 c3 10             	add    ebx,0x10
c00187fb:	0f b6 c0             	movzx  eax,al
c00187fe:	0f b6 db             	movzx  ebx,bl
c0018801:	50                   	push   eax
c0018802:	51                   	push   ecx
c0018803:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018807:	57                   	push   edi
c0018808:	55                   	push   ebp
c0018809:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001880d:	e8 ec fd ff ff       	call   c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018812:	83 c4 14             	add    esp,0x14
c0018815:	89 c6                	mov    esi,eax
c0018817:	53                   	push   ebx
c0018818:	c1 e6 10             	shl    esi,0x10
c001881b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001881f:	51                   	push   ecx
c0018820:	57                   	push   edi
c0018821:	55                   	push   ebp
c0018822:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018826:	e8 d3 fd ff ff       	call   c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001882b:	83 c4 3c             	add    esp,0x3c
c001882e:	0f b7 c0             	movzx  eax,ax
c0018831:	5b                   	pop    ebx
c0018832:	09 f0                	or     eax,esi
c0018834:	5e                   	pop    esi
c0018835:	5f                   	pop    edi
c0018836:	5d                   	pop    ebp
c0018837:	c3                   	ret    

c0018838 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018838:	55                   	push   ebp
c0018839:	57                   	push   edi
c001883a:	56                   	push   esi
c001883b:	53                   	push   ebx
c001883c:	83 ec 0c             	sub    esp,0xc
c001883f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018843:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018847:	89 f5                	mov    ebp,esi
c0018849:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001884f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018853:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018857:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001885b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001885f:	83 f9 01             	cmp    ecx,0x1
c0018862:	75 5d                	jne    c00188c1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018864:	0f b6 c8             	movzx  ecx,al
c0018867:	0f b6 d2             	movzx  edx,dl
c001886a:	c1 e1 10             	shl    ecx,0x10
c001886d:	c1 e2 0b             	shl    edx,0xb
c0018870:	89 f0                	mov    eax,esi
c0018872:	25 fc 00 00 00       	and    eax,0xfc
c0018877:	09 c1                	or     ecx,eax
c0018879:	89 e8                	mov    eax,ebp
c001887b:	0f b6 c0             	movzx  eax,al
c001887e:	c1 e0 08             	shl    eax,0x8
c0018881:	09 c1                	or     ecx,eax
c0018883:	09 d1                	or     ecx,edx
c0018885:	ba f8 0c 00 00       	mov    edx,0xcf8
c001888a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018890:	89 c8                	mov    eax,ecx
c0018892:	ef                   	out    dx,eax
c0018893:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018898:	ed                   	in     eax,dx
c0018899:	0f b7 db             	movzx  ebx,bx
c001889c:	83 e6 02             	and    esi,0x2
c001889f:	74 0a                	je     c00188ab <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00188a1:	0f b7 d0             	movzx  edx,ax
c00188a4:	c1 e3 10             	shl    ebx,0x10
c00188a7:	09 d3                	or     ebx,edx
c00188a9:	eb 05                	jmp    c00188b0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00188ab:	66 31 c0             	xor    ax,ax
c00188ae:	09 c3                	or     ebx,eax
c00188b0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00188b5:	89 c8                	mov    eax,ecx
c00188b7:	ef                   	out    dx,eax
c00188b8:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188bd:	89 d8                	mov    eax,ebx
c00188bf:	eb 41                	jmp    c0018902 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00188c1:	83 f9 02             	cmp    ecx,0x2
c00188c4:	75 45                	jne    c001890b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00188c6:	83 ec 0c             	sub    esp,0xc
c00188c9:	0f b6 d2             	movzx  edx,dl
c00188cc:	89 f1                	mov    ecx,esi
c00188ce:	0f b6 c0             	movzx  eax,al
c00188d1:	0f b6 f1             	movzx  esi,cl
c00188d4:	89 e9                	mov    ecx,ebp
c00188d6:	56                   	push   esi
c00188d7:	0f b6 c9             	movzx  ecx,cl
c00188da:	51                   	push   ecx
c00188db:	52                   	push   edx
c00188dc:	50                   	push   eax
c00188dd:	57                   	push   edi
c00188de:	e8 ad fc ff ff       	call   c0018590 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188e3:	89 c2                	mov    edx,eax
c00188e5:	ed                   	in     eax,dx
c00188e6:	83 c4 20             	add    esp,0x20
c00188e9:	0f b7 db             	movzx  ebx,bx
c00188ec:	f6 c2 02             	test   dl,0x2
c00188ef:	74 0c                	je     c00188fd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00188f1:	0f b7 c8             	movzx  ecx,ax
c00188f4:	89 d8                	mov    eax,ebx
c00188f6:	c1 e0 10             	shl    eax,0x10
c00188f9:	09 c8                	or     eax,ecx
c00188fb:	eb 05                	jmp    c0018902 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00188fd:	66 31 c0             	xor    ax,ax
c0018900:	09 d8                	or     eax,ebx
c0018902:	ef                   	out    dx,eax
c0018903:	83 c4 0c             	add    esp,0xc
c0018906:	5b                   	pop    ebx
c0018907:	5e                   	pop    esi
c0018908:	5f                   	pop    edi
c0018909:	5d                   	pop    ebp
c001890a:	c3                   	ret    
c001890b:	c7 44 24 20 9b f2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f29b
c0018913:	83 c4 0c             	add    esp,0xc
c0018916:	5b                   	pop    ebx
c0018917:	5e                   	pop    esi
c0018918:	5f                   	pop    edi
c0018919:	5d                   	pop    ebp
c001891a:	e9 3c 78 ff ff       	jmp    c001015b <KePanic(char const*)>
c001891f:	90                   	nop

c0018920 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018920:	55                   	push   ebp
c0018921:	57                   	push   edi
c0018922:	56                   	push   esi
c0018923:	53                   	push   ebx
c0018924:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001892a:	80 3d 4c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b4c,0x0
c0018931:	0f 85 84 00 00 00    	jne    c00189bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018937:	83 ec 0c             	sub    esp,0xc
c001893a:	68 14 01 00 00       	push   0x114
c001893f:	e8 75 ee fe ff       	call   c00077b9 <malloc>
c0018944:	83 c4 0c             	add    esp,0xc
c0018947:	89 c3                	mov    ebx,eax
c0018949:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001894f:	68 a1 f2 01 c0       	push   0xc001f2a1
c0018954:	50                   	push   eax
c0018955:	e8 f4 20 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c001895a:	5a                   	pop    edx
c001895b:	59                   	pop    ecx
c001895c:	6a 01                	push   0x1
c001895e:	53                   	push   ebx
c001895f:	e8 aa 21 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0018964:	83 c4 0c             	add    esp,0xc
c0018967:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001896b:	50                   	push   eax
c001896c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018970:	50                   	push   eax
c0018971:	53                   	push   ebx
c0018972:	e8 43 24 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0018977:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001897b:	40                   	inc    eax
c001897c:	89 04 24             	mov    DWORD PTR [esp],eax
c001897f:	e8 35 ee fe ff       	call   c00077b9 <malloc>
c0018984:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018988:	a3 48 5b 02 c0       	mov    ds:0xc0025b48,eax
c001898d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018991:	5e                   	pop    esi
c0018992:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018994:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018998:	51                   	push   ecx
c0018999:	50                   	push   eax
c001899a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001899e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00189a2:	53                   	push   ebx
c00189a3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00189a6:	83 c4 14             	add    esp,0x14
c00189a9:	53                   	push   ebx
c00189aa:	e8 bd 21 ff ff       	call   c000ab6c <File::close()>
c00189af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189b3:	83 c4 10             	add    esp,0x10
c00189b6:	a3 44 5b 02 c0       	mov    ds:0xc0025b44,eax
c00189bb:	a1 44 5b 02 c0       	mov    eax,ds:0xc0025b44
c00189c0:	8b 15 48 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b48
c00189c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00189c9:	31 ff                	xor    edi,edi
c00189cb:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00189d3:	31 f6                	xor    esi,esi
c00189d5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00189da:	31 db                	xor    ebx,ebx
c00189dc:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00189e4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00189e9:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00189f0:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00189f4:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00189fb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00189ff:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018a02:	0f 8e 6b 01 00 00    	jle    c0018b73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018a08:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018a0b:	d4 40                	aam    0x40
c0018a0d:	d5 39                	aad    0x39
c0018a0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a13:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018a17:	d4 40                	aam    0x40
c0018a19:	d5 39                	aad    0x39
c0018a1b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018a1f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018a23:	d4 40                	aam    0x40
c0018a25:	d5 39                	aad    0x39
c0018a27:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018a2b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018a2f:	d4 40                	aam    0x40
c0018a31:	d5 39                	aad    0x39
c0018a33:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018a37:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018a3b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018a3f:	3c 56                	cmp    al,0x56
c0018a41:	74 45                	je     c0018a88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018a43:	d4 40                	aam    0x40
c0018a45:	d5 39                	aad    0x39
c0018a47:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a4a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018a4e:	0f b6 c9             	movzx  ecx,cl
c0018a51:	c1 e1 04             	shl    ecx,0x4
c0018a54:	d4 40                	aam    0x40
c0018a56:	d5 39                	aad    0x39
c0018a58:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a5b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018a5f:	0f b6 db             	movzx  ebx,bl
c0018a62:	09 cb                	or     ebx,ecx
c0018a64:	c1 e3 04             	shl    ebx,0x4
c0018a67:	d4 40                	aam    0x40
c0018a69:	d5 39                	aad    0x39
c0018a6b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a6e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018a72:	0f b6 c9             	movzx  ecx,cl
c0018a75:	09 cb                	or     ebx,ecx
c0018a77:	c1 e3 04             	shl    ebx,0x4
c0018a7a:	89 d9                	mov    ecx,ebx
c0018a7c:	d4 40                	aam    0x40
c0018a7e:	d5 39                	aad    0x39
c0018a80:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a83:	0f b6 db             	movzx  ebx,bl
c0018a86:	09 cb                	or     ebx,ecx
c0018a88:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018a8c:	80 f9 44             	cmp    cl,0x44
c0018a8f:	74 47                	je     c0018ad8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018a91:	88 c8                	mov    al,cl
c0018a93:	d4 40                	aam    0x40
c0018a95:	d5 39                	aad    0x39
c0018a97:	83 e8 30             	sub    eax,0x30
c0018a9a:	0f b6 e8             	movzx  ebp,al
c0018a9d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018aa1:	c1 e5 04             	shl    ebp,0x4
c0018aa4:	d4 40                	aam    0x40
c0018aa6:	d5 39                	aad    0x39
c0018aa8:	83 e8 30             	sub    eax,0x30
c0018aab:	0f b6 f0             	movzx  esi,al
c0018aae:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018ab2:	09 ee                	or     esi,ebp
c0018ab4:	c1 e6 04             	shl    esi,0x4
c0018ab7:	d4 40                	aam    0x40
c0018ab9:	d5 39                	aad    0x39
c0018abb:	83 e8 30             	sub    eax,0x30
c0018abe:	0f b6 e8             	movzx  ebp,al
c0018ac1:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018ac5:	09 ee                	or     esi,ebp
c0018ac7:	c1 e6 04             	shl    esi,0x4
c0018aca:	89 f5                	mov    ebp,esi
c0018acc:	d4 40                	aam    0x40
c0018ace:	d5 39                	aad    0x39
c0018ad0:	83 e8 30             	sub    eax,0x30
c0018ad3:	0f b6 f0             	movzx  esi,al
c0018ad6:	09 ee                	or     esi,ebp
c0018ad8:	83 c7 10             	add    edi,0x10
c0018adb:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018adf:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018ae2:	3c 0a                	cmp    al,0xa
c0018ae4:	74 09                	je     c0018aef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018ae6:	45                   	inc    ebp
c0018ae7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018aea:	75 16                	jne    c0018b02 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018aec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018aef:	3c 0a                	cmp    al,0xa
c0018af1:	0f 94 c0             	sete   al
c0018af4:	0f b6 c0             	movzx  eax,al
c0018af7:	01 c7                	add    edi,eax
c0018af9:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018afe:	75 0c                	jne    c0018b0c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018b00:	eb 15                	jmp    c0018b17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018b02:	47                   	inc    edi
c0018b03:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018b06:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018b0a:	eb d3                	jmp    c0018adf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018b0c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018b11:	0f 85 e8 fe ff ff    	jne    c00189ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b17:	80 f9 44             	cmp    cl,0x44
c0018b1a:	74 0b                	je     c0018b27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018b1c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018b21:	0f 85 d8 fe ff ff    	jne    c00189ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b27:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018b2b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b2f:	c1 e1 04             	shl    ecx,0x4
c0018b32:	83 e8 30             	sub    eax,0x30
c0018b35:	09 c8                	or     eax,ecx
c0018b37:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018b3b:	0f 85 be fe ff ff    	jne    c00189ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b41:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018b45:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018b49:	c1 e1 04             	shl    ecx,0x4
c0018b4c:	83 e8 30             	sub    eax,0x30
c0018b4f:	09 c8                	or     eax,ecx
c0018b51:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018b55:	0f 85 a4 fe ff ff    	jne    c00189ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b5b:	50                   	push   eax
c0018b5c:	50                   	push   eax
c0018b5d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b61:	50                   	push   eax
c0018b62:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018b69:	e8 92 7a fe ff       	call   c0000600 <strcpy>
c0018b6e:	83 c4 10             	add    esp,0x10
c0018b71:	eb 15                	jmp    c0018b88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018b73:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b7a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018b85:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018b88:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b8f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018b95:	5b                   	pop    ebx
c0018b96:	5e                   	pop    esi
c0018b97:	5f                   	pop    edi
c0018b98:	5d                   	pop    ebp
c0018b99:	c3                   	ret    

c0018b9a <PCI::checkBus(unsigned char)>:
c0018b9a:	56                   	push   esi
c0018b9b:	53                   	push   ebx
c0018b9c:	31 f6                	xor    esi,esi
c0018b9e:	51                   	push   ecx
c0018b9f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018ba3:	0f b6 c3             	movzx  eax,bl
c0018ba6:	52                   	push   edx
c0018ba7:	56                   	push   esi
c0018ba8:	46                   	inc    esi
c0018ba9:	50                   	push   eax
c0018baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018bae:	e8 f3 02 00 00       	call   c0018ea6 <PCI::checkDevice(unsigned char, unsigned char)>
c0018bb3:	83 c4 10             	add    esp,0x10
c0018bb6:	83 fe 20             	cmp    esi,0x20
c0018bb9:	75 e8                	jne    c0018ba3 <PCI::checkBus(unsigned char)+0x9>
c0018bbb:	58                   	pop    eax
c0018bbc:	5b                   	pop    ebx
c0018bbd:	5e                   	pop    esi
c0018bbe:	c3                   	ret    
c0018bbf:	90                   	nop

c0018bc0 <PCI::foundDevice(PCIDeviceInfo)>:
c0018bc0:	55                   	push   ebp
c0018bc1:	57                   	push   edi
c0018bc2:	56                   	push   esi
c0018bc3:	53                   	push   ebx
c0018bc4:	83 ec 1c             	sub    esp,0x1c
c0018bc7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018bcb:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018bd1:	0f 84 52 01 00 00    	je     c0018d29 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018bd7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018bdb:	66 81 f9 06 04       	cmp    cx,0x406
c0018be0:	75 2c                	jne    c0018c0e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018be2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018be7:	50                   	push   eax
c0018be8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018bed:	50                   	push   eax
c0018bee:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018bf3:	50                   	push   eax
c0018bf4:	56                   	push   esi
c0018bf5:	e8 b2 fb ff ff       	call   c00187ac <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018bfa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018bfe:	0f b6 c0             	movzx  eax,al
c0018c01:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018c05:	83 c4 2c             	add    esp,0x2c
c0018c08:	5b                   	pop    ebx
c0018c09:	5e                   	pop    esi
c0018c0a:	5f                   	pop    edi
c0018c0b:	5d                   	pop    ebp
c0018c0c:	eb 8c                	jmp    c0018b9a <PCI::checkBus(unsigned char)>
c0018c0e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c12:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018c18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c1c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018c20:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018c24:	88 d3                	mov    bl,dl
c0018c26:	85 c0                	test   eax,eax
c0018c28:	74 33                	je     c0018c5d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018c2a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018c2d:	85 d2                	test   edx,edx
c0018c2f:	74 28                	je     c0018c59 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c31:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018c37:	31 ef                	xor    edi,ebp
c0018c39:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018c3f:	75 18                	jne    c0018c59 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c41:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018c45:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018c4b:	75 0c                	jne    c0018c59 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c4d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018c53:	0f 84 d0 00 00 00    	je     c0018d29 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c59:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c5b:	eb c9                	jmp    c0018c26 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018c5d:	66 81 f9 01 06       	cmp    cx,0x601
c0018c62:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018c66:	75 19                	jne    c0018c81 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018c68:	83 ec 0c             	sub    esp,0xc
c0018c6b:	68 64 01 00 00       	push   0x164
c0018c70:	e8 44 eb fe ff       	call   c00077b9 <malloc>
c0018c75:	89 c5                	mov    ebp,eax
c0018c77:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c7a:	e8 47 0e 00 00       	call   c0019ac6 <SATABus::SATABus()>
c0018c7f:	eb 1e                	jmp    c0018c9f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018c81:	66 81 f9 01 01       	cmp    cx,0x101
c0018c86:	75 60                	jne    c0018ce8 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018c88:	83 ec 0c             	sub    esp,0xc
c0018c8b:	68 70 02 00 00       	push   0x270
c0018c90:	e8 24 eb fe ff       	call   c00077b9 <malloc>
c0018c95:	89 c5                	mov    ebp,eax
c0018c97:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c9a:	e8 cb 02 00 00       	call   c0018f6a <IDE::IDE()>
c0018c9f:	58                   	pop    eax
c0018ca0:	5a                   	pop    edx
c0018ca1:	55                   	push   ebp
c0018ca2:	56                   	push   esi
c0018ca3:	e8 70 2c ff ff       	call   c000b918 <Device::addChild(Device*)>
c0018ca8:	83 ec 1c             	sub    esp,0x1c
c0018cab:	b9 09 00 00 00       	mov    ecx,0x9
c0018cb0:	fc                   	cld    
c0018cb1:	89 e7                	mov    edi,esp
c0018cb3:	89 de                	mov    esi,ebx
c0018cb5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018cb7:	55                   	push   ebp
c0018cb8:	e8 a1 2b ff ff       	call   c000b85e <Device::preOpenPCI(PCIDeviceInfo)>
c0018cbd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cc0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018cc4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018ccc:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018cd4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018cdc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018cdf:	83 c4 4c             	add    esp,0x4c
c0018ce2:	5b                   	pop    ebx
c0018ce3:	5e                   	pop    esi
c0018ce4:	5f                   	pop    edi
c0018ce5:	5d                   	pop    ebp
c0018ce6:	ff e0                	jmp    eax
c0018ce8:	83 ec 0c             	sub    esp,0xc
c0018ceb:	68 58 01 00 00       	push   0x158
c0018cf0:	e8 c4 ea fe ff       	call   c00077b9 <malloc>
c0018cf5:	89 c5                	mov    ebp,eax
c0018cf7:	58                   	pop    eax
c0018cf8:	5a                   	pop    edx
c0018cf9:	68 ba f2 01 c0       	push   0xc001f2ba
c0018cfe:	55                   	push   ebp
c0018cff:	e8 b2 2e ff ff       	call   c000bbb6 <DriverlessDevice::DriverlessDevice(char const*)>
c0018d04:	59                   	pop    ecx
c0018d05:	5f                   	pop    edi
c0018d06:	55                   	push   ebp
c0018d07:	56                   	push   esi
c0018d08:	e8 0b 2c ff ff       	call   c000b918 <Device::addChild(Device*)>
c0018d0d:	b9 09 00 00 00       	mov    ecx,0x9
c0018d12:	fc                   	cld    
c0018d13:	89 df                	mov    edi,ebx
c0018d15:	89 de                	mov    esi,ebx
c0018d17:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d19:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018d1d:	83 c4 2c             	add    esp,0x2c
c0018d20:	5b                   	pop    ebx
c0018d21:	5e                   	pop    esi
c0018d22:	5f                   	pop    edi
c0018d23:	5d                   	pop    ebp
c0018d24:	e9 35 2b ff ff       	jmp    c000b85e <Device::preOpenPCI(PCIDeviceInfo)>
c0018d29:	83 c4 1c             	add    esp,0x1c
c0018d2c:	5b                   	pop    ebx
c0018d2d:	5e                   	pop    esi
c0018d2e:	5f                   	pop    edi
c0018d2f:	5d                   	pop    ebp
c0018d30:	c3                   	ret    
c0018d31:	90                   	nop

c0018d32 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018d32:	55                   	push   ebp
c0018d33:	57                   	push   edi
c0018d34:	56                   	push   esi
c0018d35:	53                   	push   ebx
c0018d36:	83 ec 68             	sub    esp,0x68
c0018d39:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018d3d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018d44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d48:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018d4f:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018d54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018d58:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018d5f:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018d64:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018d68:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018d6d:	6a 0c                	push   0xc
c0018d6f:	57                   	push   edi
c0018d70:	53                   	push   ebx
c0018d71:	56                   	push   esi
c0018d72:	55                   	push   ebp
c0018d73:	e8 86 f8 ff ff       	call   c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018d78:	83 c4 20             	add    esp,0x20
c0018d7b:	57                   	push   edi
c0018d7c:	53                   	push   ebx
c0018d7d:	56                   	push   esi
c0018d7e:	55                   	push   ebp
c0018d7f:	e8 6e f9 ff ff       	call   c00186f2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018d84:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018d89:	57                   	push   edi
c0018d8a:	53                   	push   ebx
c0018d8b:	56                   	push   esi
c0018d8c:	55                   	push   ebp
c0018d8d:	e8 f6 f9 ff ff       	call   c0018788 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018d92:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018d96:	83 c4 14             	add    esp,0x14
c0018d99:	6a 3c                	push   0x3c
c0018d9b:	57                   	push   edi
c0018d9c:	53                   	push   ebx
c0018d9d:	56                   	push   esi
c0018d9e:	55                   	push   ebp
c0018d9f:	e8 5a f8 ff ff       	call   c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018da4:	0f b6 c4             	movzx  eax,ah
c0018da7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018dab:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018daf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018db3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0018db8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018dbe:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018dc4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018dc8:	83 c4 20             	add    esp,0x20
c0018dcb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018dd0:	74 30                	je     c0018e02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018dd2:	31 c0                	xor    eax,eax
c0018dd4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018dd8:	7e 28                	jle    c0018e02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018dda:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018de2:	39 cb                	cmp    ebx,ecx
c0018de4:	75 19                	jne    c0018dff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018de6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018dee:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018df2:	75 0b                	jne    c0018dff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018df4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018dfb:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018dff:	40                   	inc    eax
c0018e00:	eb d2                	jmp    c0018dd4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018e02:	31 d2                	xor    edx,edx
c0018e04:	83 ec 0c             	sub    esp,0xc
c0018e07:	57                   	push   edi
c0018e08:	53                   	push   ebx
c0018e09:	56                   	push   esi
c0018e0a:	52                   	push   edx
c0018e0b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018e0f:	55                   	push   ebp
c0018e10:	e8 bf f9 ff ff       	call   c00187d4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e19:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018e1d:	42                   	inc    edx
c0018e1e:	83 c4 20             	add    esp,0x20
c0018e21:	83 fa 06             	cmp    edx,0x6
c0018e24:	75 de                	jne    c0018e04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018e26:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e2b:	83 ec 0c             	sub    esp,0xc
c0018e2e:	86 e0                	xchg   al,ah
c0018e30:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018e35:	6a 02                	push   0x2
c0018e37:	57                   	push   edi
c0018e38:	53                   	push   ebx
c0018e39:	56                   	push   esi
c0018e3a:	55                   	push   ebp
c0018e3b:	e8 be f7 ff ff       	call   c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e40:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018e45:	83 c4 20             	add    esp,0x20
c0018e48:	57                   	push   edi
c0018e49:	53                   	push   ebx
c0018e4a:	56                   	push   esi
c0018e4b:	55                   	push   ebp
c0018e4c:	e8 eb f8 ff ff       	call   c001873c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018e51:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018e55:	57                   	push   edi
c0018e56:	53                   	push   ebx
c0018e57:	56                   	push   esi
c0018e58:	55                   	push   ebp
c0018e59:	e8 48 f8 ff ff       	call   c00186a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018e5e:	b9 09 00 00 00       	mov    ecx,0x9
c0018e63:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018e68:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018e6c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018e70:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018e74:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018e78:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018e7c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018e80:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018e84:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018e88:	83 ec 0c             	sub    esp,0xc
c0018e8b:	fc                   	cld    
c0018e8c:	89 e7                	mov    edi,esp
c0018e8e:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018e92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e94:	55                   	push   ebp
c0018e95:	e8 26 fd ff ff       	call   c0018bc0 <PCI::foundDevice(PCIDeviceInfo)>
c0018e9a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018ea0:	5b                   	pop    ebx
c0018ea1:	5e                   	pop    esi
c0018ea2:	5f                   	pop    edi
c0018ea3:	5d                   	pop    ebp
c0018ea4:	c3                   	ret    
c0018ea5:	90                   	nop

c0018ea6 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018ea6:	55                   	push   ebp
c0018ea7:	57                   	push   edi
c0018ea8:	56                   	push   esi
c0018ea9:	53                   	push   ebx
c0018eaa:	83 ec 0c             	sub    esp,0xc
c0018ead:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018eb1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018eb6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018ebb:	6a 00                	push   0x0
c0018ebd:	56                   	push   esi
c0018ebe:	57                   	push   edi
c0018ebf:	55                   	push   ebp
c0018ec0:	e8 e1 f7 ff ff       	call   c00186a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ec5:	6a 00                	push   0x0
c0018ec7:	56                   	push   esi
c0018ec8:	57                   	push   edi
c0018ec9:	55                   	push   ebp
c0018eca:	e8 63 fe ff ff       	call   c0018d32 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018ecf:	83 c4 20             	add    esp,0x20
c0018ed2:	6a 00                	push   0x0
c0018ed4:	56                   	push   esi
c0018ed5:	57                   	push   edi
c0018ed6:	55                   	push   ebp
c0018ed7:	e8 ee f7 ff ff       	call   c00186ca <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018edc:	83 c4 10             	add    esp,0x10
c0018edf:	84 c0                	test   al,al
c0018ee1:	79 27                	jns    c0018f0a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018ee3:	bb 01 00 00 00       	mov    ebx,0x1
c0018ee8:	53                   	push   ebx
c0018ee9:	56                   	push   esi
c0018eea:	57                   	push   edi
c0018eeb:	55                   	push   ebp
c0018eec:	e8 b5 f7 ff ff       	call   c00186a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ef1:	83 c4 10             	add    esp,0x10
c0018ef4:	66 40                	inc    ax
c0018ef6:	74 0c                	je     c0018f04 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018ef8:	53                   	push   ebx
c0018ef9:	56                   	push   esi
c0018efa:	57                   	push   edi
c0018efb:	55                   	push   ebp
c0018efc:	e8 31 fe ff ff       	call   c0018d32 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f01:	83 c4 10             	add    esp,0x10
c0018f04:	43                   	inc    ebx
c0018f05:	83 fb 08             	cmp    ebx,0x8
c0018f08:	75 de                	jne    c0018ee8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018f0a:	83 c4 0c             	add    esp,0xc
c0018f0d:	5b                   	pop    ebx
c0018f0e:	5e                   	pop    esi
c0018f0f:	5f                   	pop    edi
c0018f10:	5d                   	pop    ebp
c0018f11:	c3                   	ret    

c0018f12 <PCI::detect()>:
c0018f12:	56                   	push   esi
c0018f13:	53                   	push   ebx
c0018f14:	53                   	push   ebx
c0018f15:	31 db                	xor    ebx,ebx
c0018f17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018f1b:	6a 00                	push   0x0
c0018f1d:	6a 00                	push   0x0
c0018f1f:	6a 00                	push   0x0
c0018f21:	56                   	push   esi
c0018f22:	e8 a3 f7 ff ff       	call   c00186ca <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f27:	83 c4 10             	add    esp,0x10
c0018f2a:	a8 80                	test   al,0x80
c0018f2c:	75 21                	jne    c0018f4f <PCI::detect()+0x3d>
c0018f2e:	51                   	push   ecx
c0018f2f:	51                   	push   ecx
c0018f30:	6a 00                	push   0x0
c0018f32:	56                   	push   esi
c0018f33:	e8 62 fc ff ff       	call   c0018b9a <PCI::checkBus(unsigned char)>
c0018f38:	83 c4 10             	add    esp,0x10
c0018f3b:	eb 24                	jmp    c0018f61 <PCI::detect()+0x4f>
c0018f3d:	52                   	push   edx
c0018f3e:	52                   	push   edx
c0018f3f:	53                   	push   ebx
c0018f40:	43                   	inc    ebx
c0018f41:	56                   	push   esi
c0018f42:	e8 53 fc ff ff       	call   c0018b9a <PCI::checkBus(unsigned char)>
c0018f47:	83 c4 10             	add    esp,0x10
c0018f4a:	83 fb 08             	cmp    ebx,0x8
c0018f4d:	74 12                	je     c0018f61 <PCI::detect()+0x4f>
c0018f4f:	53                   	push   ebx
c0018f50:	6a 00                	push   0x0
c0018f52:	6a 00                	push   0x0
c0018f54:	56                   	push   esi
c0018f55:	e8 4c f7 ff ff       	call   c00186a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f5a:	83 c4 10             	add    esp,0x10
c0018f5d:	66 40                	inc    ax
c0018f5f:	74 dc                	je     c0018f3d <PCI::detect()+0x2b>
c0018f61:	58                   	pop    eax
c0018f62:	5b                   	pop    ebx
c0018f63:	5e                   	pop    esi
c0018f64:	c3                   	ret    
c0018f65:	90                   	nop

c0018f66 <IDE::close(int, int, void*)>:
c0018f66:	83 c8 ff             	or     eax,0xffffffff
c0018f69:	c3                   	ret    

c0018f6a <IDE::IDE()>:
c0018f6a:	83 ec 0c             	sub    esp,0xc
c0018f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f71:	83 ec 08             	sub    esp,0x8
c0018f74:	68 00 f3 01 c0       	push   0xc001f300
c0018f79:	50                   	push   eax
c0018f7a:	e8 dd 2c ff ff       	call   c000bc5c <HardDiskController::HardDiskController(char const*)>
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	ba 90 f3 01 c0       	mov    edx,0xc001f390
c0018f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f8b:	89 10                	mov    DWORD PTR [eax],edx
c0018f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f91:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018f98:	90                   	nop
c0018f99:	83 c4 0c             	add    esp,0xc
c0018f9c:	c3                   	ret    
c0018f9d:	90                   	nop

c0018f9e <IDE::prepareInterrupt(unsigned char)>:
c0018f9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fa3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018fa7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018faf:	c3                   	ret    

c0018fb0 <selectDrive(unsigned char, unsigned char)>:
c0018fb0:	c3                   	ret    
c0018fb1:	90                   	nop

c0018fb2 <IDE::getBase(unsigned char)>:
c0018fb2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018fb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fbb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018fc3:	c3                   	ret    

c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018fc4:	55                   	push   ebp
c0018fc5:	57                   	push   edi
c0018fc6:	56                   	push   esi
c0018fc7:	53                   	push   ebx
c0018fc8:	83 ec 1c             	sub    esp,0x1c
c0018fcb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018fcf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018fd3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018fd6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018fda:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018fde:	80 f9 03             	cmp    cl,0x3
c0018fe1:	77 51                	ja     c0019034 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018fe3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fe7:	0f b6 f2             	movzx  esi,dl
c0018fea:	0f b6 db             	movzx  ebx,bl
c0018fed:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018ff0:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018ff4:	83 ca 80             	or     edx,0xffffff80
c0018ff7:	0f b6 d2             	movzx  edx,dl
c0018ffa:	52                   	push   edx
c0018ffb:	6a 0c                	push   0xc
c0018ffd:	56                   	push   esi
c0018ffe:	57                   	push   edi
c0018fff:	e8 c0 ff ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019004:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019009:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001900d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019011:	ee                   	out    dx,al
c0019012:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019017:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001901b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001901f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019023:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001902b:	83 c4 2c             	add    esp,0x2c
c001902e:	5b                   	pop    ebx
c001902f:	5e                   	pop    esi
c0019030:	5f                   	pop    edi
c0019031:	5d                   	pop    ebp
c0019032:	eb 90                	jmp    c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019034:	80 fb 07             	cmp    bl,0x7
c0019037:	77 12                	ja     c001904b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019039:	0f b6 d2             	movzx  edx,dl
c001903c:	0f b6 db             	movzx  ebx,bl
c001903f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019047:	89 da                	mov    edx,ebx
c0019049:	eb 2f                	jmp    c001907a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001904b:	80 fb 0d             	cmp    bl,0xd
c001904e:	77 13                	ja     c0019063 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019050:	0f b6 d2             	movzx  edx,dl
c0019053:	0f b6 db             	movzx  ebx,bl
c0019056:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001905d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019061:	eb 17                	jmp    c001907a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019063:	80 fb 15             	cmp    bl,0x15
c0019066:	77 13                	ja     c001907b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019068:	0f b6 d2             	movzx  edx,dl
c001906b:	0f b6 db             	movzx  ebx,bl
c001906e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019076:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001907a:	ee                   	out    dx,al
c001907b:	83 c4 1c             	add    esp,0x1c
c001907e:	5b                   	pop    ebx
c001907f:	5e                   	pop    esi
c0019080:	5f                   	pop    edi
c0019081:	5d                   	pop    ebp
c0019082:	c3                   	ret    
c0019083:	90                   	nop

c0019084 <IDE::read(unsigned char, unsigned char)>:
c0019084:	55                   	push   ebp
c0019085:	57                   	push   edi
c0019086:	56                   	push   esi
c0019087:	53                   	push   ebx
c0019088:	83 ec 1c             	sub    esp,0x1c
c001908b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001908f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019093:	8d 43 f8             	lea    eax,[ebx-0x8]
c0019096:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001909a:	3c 03                	cmp    al,0x3
c001909c:	77 43                	ja     c00190e1 <IDE::read(unsigned char, unsigned char)+0x5d>
c001909e:	0f b6 f2             	movzx  esi,dl
c00190a1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190a4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00190a8:	83 c8 80             	or     eax,0xffffff80
c00190ab:	0f b6 c0             	movzx  eax,al
c00190ae:	50                   	push   eax
c00190af:	6a 0c                	push   0xc
c00190b1:	56                   	push   esi
c00190b2:	57                   	push   edi
c00190b3:	e8 0c ff ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190b8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00190bd:	0f b6 c3             	movzx  eax,bl
c00190c0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00190c4:	ec                   	in     al,dx
c00190c5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00190c9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00190ce:	52                   	push   edx
c00190cf:	6a 0c                	push   0xc
c00190d1:	56                   	push   esi
c00190d2:	57                   	push   edi
c00190d3:	e8 ec fe ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190d8:	83 c4 20             	add    esp,0x20
c00190db:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00190df:	eb 49                	jmp    c001912a <IDE::read(unsigned char, unsigned char)+0xa6>
c00190e1:	80 fb 07             	cmp    bl,0x7
c00190e4:	77 12                	ja     c00190f8 <IDE::read(unsigned char, unsigned char)+0x74>
c00190e6:	0f b6 d2             	movzx  edx,dl
c00190e9:	0f b6 c3             	movzx  eax,bl
c00190ec:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00190f4:	89 c2                	mov    edx,eax
c00190f6:	eb 31                	jmp    c0019129 <IDE::read(unsigned char, unsigned char)+0xa5>
c00190f8:	80 fb 0d             	cmp    bl,0xd
c00190fb:	77 13                	ja     c0019110 <IDE::read(unsigned char, unsigned char)+0x8c>
c00190fd:	0f b6 d2             	movzx  edx,dl
c0019100:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019107:	0f b6 d3             	movzx  edx,bl
c001910a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001910e:	eb 19                	jmp    c0019129 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019110:	31 c0                	xor    eax,eax
c0019112:	80 fb 15             	cmp    bl,0x15
c0019115:	77 13                	ja     c001912a <IDE::read(unsigned char, unsigned char)+0xa6>
c0019117:	0f b6 d2             	movzx  edx,dl
c001911a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0019122:	0f b6 d3             	movzx  edx,bl
c0019125:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019129:	ec                   	in     al,dx
c001912a:	83 c4 1c             	add    esp,0x1c
c001912d:	5b                   	pop    ebx
c001912e:	5e                   	pop    esi
c001912f:	5f                   	pop    edi
c0019130:	5d                   	pop    ebp
c0019131:	c3                   	ret    

c0019132 <IDE::waitInterrupt(unsigned char)>:
c0019132:	57                   	push   edi
c0019133:	56                   	push   esi
c0019134:	31 f6                	xor    esi,esi
c0019136:	53                   	push   ebx
c0019137:	83 ec 10             	sub    esp,0x10
c001913a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001913e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019142:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019146:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001914b:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0019152:	84 db                	test   bl,bl
c0019154:	75 33                	jne    c0019189 <IDE::waitInterrupt(unsigned char)+0x57>
c0019156:	52                   	push   edx
c0019157:	6a 0c                	push   0xc
c0019159:	50                   	push   eax
c001915a:	57                   	push   edi
c001915b:	e8 24 ff ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c0019160:	83 c4 10             	add    esp,0x10
c0019163:	a8 01                	test   al,0x1
c0019165:	75 2a                	jne    c0019191 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019167:	f7 c6 04 00 00 00    	test   esi,0x4
c001916d:	75 12                	jne    c0019181 <IDE::waitInterrupt(unsigned char)+0x4f>
c001916f:	83 fe 32             	cmp    esi,0x32
c0019172:	7e 0d                	jle    c0019181 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019174:	83 ec 0c             	sub    esp,0xc
c0019177:	6a 64                	push   0x64
c0019179:	e8 1a a9 ff ff       	call   c0013a98 <milliTenthSleep(unsigned int)>
c001917e:	83 c4 10             	add    esp,0x10
c0019181:	83 fe 3c             	cmp    esi,0x3c
c0019184:	74 0b                	je     c0019191 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019186:	46                   	inc    esi
c0019187:	eb bd                	jmp    c0019146 <IDE::waitInterrupt(unsigned char)+0x14>
c0019189:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019191:	83 c4 10             	add    esp,0x10
c0019194:	88 d8                	mov    al,bl
c0019196:	5b                   	pop    ebx
c0019197:	5e                   	pop    esi
c0019198:	5f                   	pop    edi
c0019199:	c3                   	ret    

c001919a <ideChannel0IRQHandler(regs*, void*)>:
c001919a:	83 ec 10             	sub    esp,0x10
c001919d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191a1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00191a8:	6a 07                	push   0x7
c00191aa:	6a 00                	push   0x0
c00191ac:	50                   	push   eax
c00191ad:	e8 d2 fe ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c00191b2:	83 c4 1c             	add    esp,0x1c
c00191b5:	c3                   	ret    

c00191b6 <ideChannel1IRQHandler(regs*, void*)>:
c00191b6:	83 ec 10             	sub    esp,0x10
c00191b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191bd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00191c4:	6a 07                	push   0x7
c00191c6:	6a 01                	push   0x1
c00191c8:	50                   	push   eax
c00191c9:	e8 b6 fe ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c00191ce:	83 c4 1c             	add    esp,0x1c
c00191d1:	c3                   	ret    

c00191d2 <IDE::enableIRQs(unsigned char, bool)>:
c00191d2:	57                   	push   edi
c00191d3:	56                   	push   esi
c00191d4:	be 04 00 00 00       	mov    esi,0x4
c00191d9:	53                   	push   ebx
c00191da:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00191df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00191e3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00191e8:	0f 94 c0             	sete   al
c00191eb:	01 c0                	add    eax,eax
c00191ed:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00191f4:	0f b6 c0             	movzx  eax,al
c00191f7:	50                   	push   eax
c00191f8:	6a 0c                	push   0xc
c00191fa:	57                   	push   edi
c00191fb:	53                   	push   ebx
c00191fc:	e8 c3 fd ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019201:	83 c4 10             	add    esp,0x10
c0019204:	50                   	push   eax
c0019205:	6a 0c                	push   0xc
c0019207:	57                   	push   edi
c0019208:	53                   	push   ebx
c0019209:	e8 76 fe ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c001920e:	83 c4 10             	add    esp,0x10
c0019211:	4e                   	dec    esi
c0019212:	75 f0                	jne    c0019204 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019214:	5b                   	pop    ebx
c0019215:	5e                   	pop    esi
c0019216:	5f                   	pop    edi
c0019217:	c3                   	ret    

c0019218 <IDE::open(int, int, void*)>:
c0019218:	55                   	push   ebp
c0019219:	57                   	push   edi
c001921a:	56                   	push   esi
c001921b:	53                   	push   ebx
c001921c:	83 ec 1c             	sub    esp,0x1c
c001921f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019223:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001922c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019235:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001923c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0019243:	0f 85 b0 02 00 00    	jne    c00194f9 <IDE::open(int, int, void*)+0x2e1>
c0019249:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001924f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0019253:	83 e0 7f             	and    eax,0x7f
c0019256:	3c 05                	cmp    al,0x5
c0019258:	74 04                	je     c001925e <IDE::open(int, int, void*)+0x46>
c001925a:	3c 0f                	cmp    al,0xf
c001925c:	75 32                	jne    c0019290 <IDE::open(int, int, void*)+0x78>
c001925e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019264:	83 e0 fc             	and    eax,0xfffffffc
c0019267:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001926e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019274:	83 e0 fc             	and    eax,0xfffffffc
c0019277:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001927e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019284:	83 e0 fc             	and    eax,0xfffffffc
c0019287:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001928e:	eb 14                	jmp    c00192a4 <IDE::open(int, int, void*)+0x8c>
c0019290:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001929a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00192a4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00192ab:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00192b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192b6:	89 c6                	mov    esi,eax
c00192b8:	bf f8 0c 00 00       	mov    edi,0xcf8
c00192bd:	c1 e6 10             	shl    esi,0x10
c00192c0:	89 e8                	mov    eax,ebp
c00192c2:	89 fa                	mov    edx,edi
c00192c4:	c1 e0 0b             	shl    eax,0xb
c00192c7:	09 f0                	or     eax,esi
c00192c9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00192d0:	c1 e6 08             	shl    esi,0x8
c00192d3:	09 c6                	or     esi,eax
c00192d5:	89 f0                	mov    eax,esi
c00192d7:	0d 08 00 00 80       	or     eax,0x80000008
c00192dc:	ef                   	out    dx,eax
c00192dd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00192e2:	89 ca                	mov    edx,ecx
c00192e4:	ed                   	in     eax,dx
c00192e5:	c1 e8 10             	shr    eax,0x10
c00192e8:	3d ff ff 00 00       	cmp    eax,0xffff
c00192ed:	0f 84 f5 00 00 00    	je     c00193e8 <IDE::open(int, int, void*)+0x1d0>
c00192f3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00192f9:	89 fa                	mov    edx,edi
c00192fb:	89 f0                	mov    eax,esi
c00192fd:	ef                   	out    dx,eax
c00192fe:	b0 fe                	mov    al,0xfe
c0019300:	89 ca                	mov    edx,ecx
c0019302:	ee                   	out    dx,al
c0019303:	89 f0                	mov    eax,esi
c0019305:	89 fa                	mov    edx,edi
c0019307:	ef                   	out    dx,eax
c0019308:	89 ca                	mov    edx,ecx
c001930a:	ed                   	in     eax,dx
c001930b:	3c fe                	cmp    al,0xfe
c001930d:	0f 85 a9 00 00 00    	jne    c00193bc <IDE::open(int, int, void*)+0x1a4>
c0019313:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c0019319:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019320:	74 33                	je     c0019355 <IDE::open(int, int, void*)+0x13d>
c0019322:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019328:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001932c:	40                   	inc    eax
c001932d:	83 ec 0c             	sub    esp,0xc
c0019330:	0f b6 c0             	movzx  eax,al
c0019333:	50                   	push   eax
c0019334:	55                   	push   ebp
c0019335:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019339:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001933f:	51                   	push   ecx
c0019340:	e8 2f 53 ff ff       	call   c000e674 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019345:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001934a:	83 c4 1c             	add    esp,0x1c
c001934d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019353:	eb 0a                	jmp    c001935f <IDE::open(int, int, void*)+0x147>
c0019355:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001935f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019366:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001936d:	c1 e1 10             	shl    ecx,0x10
c0019370:	c1 e0 08             	shl    eax,0x8
c0019373:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019378:	09 c1                	or     ecx,eax
c001937a:	89 fa                	mov    edx,edi
c001937c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0019383:	c1 e0 0b             	shl    eax,0xb
c0019386:	09 c1                	or     ecx,eax
c0019388:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001938e:	89 c8                	mov    eax,ecx
c0019390:	ef                   	out    dx,eax
c0019391:	be fc 0c 00 00       	mov    esi,0xcfc
c0019396:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001939c:	89 f2                	mov    edx,esi
c001939e:	ee                   	out    dx,al
c001939f:	89 c8                	mov    eax,ecx
c00193a1:	89 fa                	mov    edx,edi
c00193a3:	ef                   	out    dx,eax
c00193a4:	89 f2                	mov    edx,esi
c00193a6:	ed                   	in     eax,dx
c00193a7:	0f b6 c0             	movzx  eax,al
c00193aa:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00193b0:	74 46                	je     c00193f8 <IDE::open(int, int, void*)+0x1e0>
c00193b2:	83 ec 0c             	sub    esp,0xc
c00193b5:	68 18 f3 01 c0       	push   0xc001f318
c00193ba:	eb 34                	jmp    c00193f0 <IDE::open(int, int, void*)+0x1d8>
c00193bc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00193c5:	75 17                	jne    c00193de <IDE::open(int, int, void*)+0x1c6>
c00193c7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00193cc:	74 07                	je     c00193d5 <IDE::open(int, int, void*)+0x1bd>
c00193ce:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00193d3:	75 09                	jne    c00193de <IDE::open(int, int, void*)+0x1c6>
c00193d5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00193dc:	eb 1a                	jmp    c00193f8 <IDE::open(int, int, void*)+0x1e0>
c00193de:	83 ec 0c             	sub    esp,0xc
c00193e1:	68 20 f3 01 c0       	push   0xc001f320
c00193e6:	eb 08                	jmp    c00193f0 <IDE::open(int, int, void*)+0x1d8>
c00193e8:	83 ec 0c             	sub    esp,0xc
c00193eb:	68 51 f3 01 c0       	push   0xc001f351
c00193f0:	e8 66 6d ff ff       	call   c001015b <KePanic(char const*)>
c00193f5:	83 c4 10             	add    esp,0x10
c00193f8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00193ff:	79 1a                	jns    c001941b <IDE::open(int, int, void*)+0x203>
c0019401:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019407:	83 e0 fc             	and    eax,0xfffffffc
c001940a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019411:	83 c0 08             	add    eax,0x8
c0019414:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001941b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019421:	89 c2                	mov    edx,eax
c0019423:	83 e2 0f             	and    edx,0xf
c0019426:	66 83 fa 08          	cmp    dx,0x8
c001942a:	75 0a                	jne    c0019436 <IDE::open(int, int, void*)+0x21e>
c001942c:	83 e8 02             	sub    eax,0x2
c001942f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019436:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001943c:	89 c2                	mov    edx,eax
c001943e:	83 e2 0f             	and    edx,0xf
c0019441:	66 83 fa 08          	cmp    dx,0x8
c0019445:	75 0a                	jne    c0019451 <IDE::open(int, int, void*)+0x239>
c0019447:	83 e8 02             	sub    eax,0x2
c001944a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019451:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019458:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001945f:	89 d0                	mov    eax,edx
c0019461:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019464:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019468:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001946c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001946f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019474:	0f b6 c9             	movzx  ecx,cl
c0019477:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001947e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019481:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019485:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019489:	8d 50 02             	lea    edx,[eax+0x2]
c001948c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019491:	0f b6 d2             	movzx  edx,dl
c0019494:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001949a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001949d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194a1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00194a5:	8d 48 03             	lea    ecx,[eax+0x3]
c00194a8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194ad:	0f b6 c9             	movzx  ecx,cl
c00194b0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00194b6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00194b9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00194bd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00194c1:	8d 50 04             	lea    edx,[eax+0x4]
c00194c4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00194ca:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00194cf:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00194d6:	66 85 f6             	test   si,si
c00194d9:	74 5b                	je     c0019536 <IDE::open(int, int, void*)+0x31e>
c00194db:	0f b6 d2             	movzx  edx,dl
c00194de:	83 c0 05             	add    eax,0x5
c00194e1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194e4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194e8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00194ec:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00194f2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194f7:	eb 3d                	jmp    c0019536 <IDE::open(int, int, void*)+0x31e>
c00194f9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00194ff:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019506:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001950d:	66 05 06 02          	add    ax,0x206
c0019511:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019518:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001951f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019526:	66 05 06 02          	add    ax,0x206
c001952a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019531:	e9 e5 fe ff ff       	jmp    c001941b <IDE::open(int, int, void*)+0x203>
c0019536:	50                   	push   eax
c0019537:	50                   	push   eax
c0019538:	6a 00                	push   0x0
c001953a:	53                   	push   ebx
c001953b:	e8 5e fa ff ff       	call   c0018f9e <IDE::prepareInterrupt(unsigned char)>
c0019540:	5a                   	pop    edx
c0019541:	59                   	pop    ecx
c0019542:	6a 01                	push   0x1
c0019544:	53                   	push   ebx
c0019545:	e8 54 fa ff ff       	call   c0018f9e <IDE::prepareInterrupt(unsigned char)>
c001954a:	83 c4 0c             	add    esp,0xc
c001954d:	6a 00                	push   0x0
c001954f:	6a 00                	push   0x0
c0019551:	53                   	push   ebx
c0019552:	e8 7b fc ff ff       	call   c00191d2 <IDE::enableIRQs(unsigned char, bool)>
c0019557:	83 c4 0c             	add    esp,0xc
c001955a:	6a 00                	push   0x0
c001955c:	6a 01                	push   0x1
c001955e:	53                   	push   ebx
c001955f:	e8 6e fc ff ff       	call   c00191d2 <IDE::enableIRQs(unsigned char, bool)>
c0019564:	83 c4 10             	add    esp,0x10
c0019567:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001956e:	74 34                	je     c00195a4 <IDE::open(int, int, void*)+0x38c>
c0019570:	83 ec 0c             	sub    esp,0xc
c0019573:	53                   	push   ebx
c0019574:	6a 01                	push   0x1
c0019576:	68 9a 91 01 c0       	push   0xc001919a
c001957b:	6a 0e                	push   0xe
c001957d:	53                   	push   ebx
c001957e:	e8 41 23 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019583:	83 c4 14             	add    esp,0x14
c0019586:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001958c:	53                   	push   ebx
c001958d:	6a 01                	push   0x1
c001958f:	68 b6 91 01 c0       	push   0xc00191b6
c0019594:	6a 0f                	push   0xf
c0019596:	53                   	push   ebx
c0019597:	e8 28 23 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001959c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00195a2:	eb 38                	jmp    c00195dc <IDE::open(int, int, void*)+0x3c4>
c00195a4:	83 ec 0c             	sub    esp,0xc
c00195a7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00195b1:	53                   	push   ebx
c00195b2:	6a 00                	push   0x0
c00195b4:	68 9a 91 01 c0       	push   0xc001919a
c00195b9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00195bf:	53                   	push   ebx
c00195c0:	e8 ff 22 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195c5:	83 c4 14             	add    esp,0x14
c00195c8:	53                   	push   ebx
c00195c9:	6a 00                	push   0x0
c00195cb:	68 b6 91 01 c0       	push   0xc00191b6
c00195d0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00195d6:	53                   	push   ebx
c00195d7:	e8 e8 22 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00195de:	83 c4 20             	add    esp,0x20
c00195e1:	83 ec 0c             	sub    esp,0xc
c00195e4:	53                   	push   ebx
c00195e5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00195e8:	83 c4 0c             	add    esp,0xc
c00195eb:	6a 07                	push   0x7
c00195ed:	6a 00                	push   0x0
c00195ef:	53                   	push   ebx
c00195f0:	e8 8f fa ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c00195f5:	83 c4 0c             	add    esp,0xc
c00195f8:	6a 07                	push   0x7
c00195fa:	6a 01                	push   0x1
c00195fc:	53                   	push   ebx
c00195fd:	e8 82 fa ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c0019602:	83 c4 0c             	add    esp,0xc
c0019605:	6a 01                	push   0x1
c0019607:	6a 00                	push   0x0
c0019609:	53                   	push   ebx
c001960a:	e8 c3 fb ff ff       	call   c00191d2 <IDE::enableIRQs(unsigned char, bool)>
c001960f:	83 c4 0c             	add    esp,0xc
c0019612:	6a 01                	push   0x1
c0019614:	6a 01                	push   0x1
c0019616:	53                   	push   ebx
c0019617:	e8 b6 fb ff ff       	call   c00191d2 <IDE::enableIRQs(unsigned char, bool)>
c001961c:	83 c4 2c             	add    esp,0x2c
c001961f:	31 c0                	xor    eax,eax
c0019621:	5b                   	pop    ebx
c0019622:	5e                   	pop    esi
c0019623:	5f                   	pop    edi
c0019624:	5d                   	pop    ebp
c0019625:	c3                   	ret    

c0019626 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019626:	55                   	push   ebp
c0019627:	57                   	push   edi
c0019628:	56                   	push   esi
c0019629:	53                   	push   ebx
c001962a:	83 ec 1c             	sub    esp,0x1c
c001962d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019631:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019635:	8d 50 f8             	lea    edx,[eax-0x8]
c0019638:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001963c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019640:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019644:	80 fa 03             	cmp    dl,0x3
c0019647:	77 5d                	ja     c00196a6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019649:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001964d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019651:	0f b6 db             	movzx  ebx,bl
c0019654:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019657:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001965b:	83 ca 80             	or     edx,0xffffff80
c001965e:	0f b6 d2             	movzx  edx,dl
c0019661:	52                   	push   edx
c0019662:	6a 0c                	push   0xc
c0019664:	53                   	push   ebx
c0019665:	56                   	push   esi
c0019666:	e8 59 f9 ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001966b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019670:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019674:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019678:	0f b6 c0             	movzx  eax,al
c001967b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001967f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019681:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019686:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001968a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001968e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019692:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001969a:	83 c4 2c             	add    esp,0x2c
c001969d:	5b                   	pop    ebx
c001969e:	5e                   	pop    esi
c001969f:	5f                   	pop    edi
c00196a0:	5d                   	pop    ebp
c00196a1:	e9 1e f9 ff ff       	jmp    c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196a6:	3c 07                	cmp    al,0x7
c00196a8:	77 10                	ja     c00196ba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00196aa:	0f b6 db             	movzx  ebx,bl
c00196ad:	0f b6 d0             	movzx  edx,al
c00196b0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00196b8:	eb 2d                	jmp    c00196e7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196ba:	3c 0d                	cmp    al,0xd
c00196bc:	77 13                	ja     c00196d1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00196be:	0f b6 db             	movzx  ebx,bl
c00196c1:	0f b6 c0             	movzx  eax,al
c00196c4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00196cb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00196cf:	eb 16                	jmp    c00196e7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196d1:	3c 15                	cmp    al,0x15
c00196d3:	77 14                	ja     c00196e9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00196d5:	0f b6 db             	movzx  ebx,bl
c00196d8:	0f b6 c0             	movzx  eax,al
c00196db:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00196e3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00196e7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00196e9:	83 c4 1c             	add    esp,0x1c
c00196ec:	5b                   	pop    ebx
c00196ed:	5e                   	pop    esi
c00196ee:	5f                   	pop    edi
c00196ef:	5d                   	pop    ebp
c00196f0:	c3                   	ret    
c00196f1:	90                   	nop

c00196f2 <IDE::detect()>:
c00196f2:	55                   	push   ebp
c00196f3:	57                   	push   edi
c00196f4:	56                   	push   esi
c00196f5:	53                   	push   ebx
c00196f6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00196fc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019703:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001970a:	0f 85 97 02 00 00    	jne    c00199a7 <IDE::detect()+0x2b5>
c0019710:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019717:	31 f6                	xor    esi,esi
c0019719:	31 ed                	xor    ebp,ebp
c001971b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019723:	89 e8                	mov    eax,ebp
c0019725:	c1 e0 06             	shl    eax,0x6
c0019728:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019730:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019734:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019738:	c1 e0 04             	shl    eax,0x4
c001973b:	83 c8 a0             	or     eax,0xffffffa0
c001973e:	0f b6 c0             	movzx  eax,al
c0019741:	50                   	push   eax
c0019742:	6a 06                	push   0x6
c0019744:	56                   	push   esi
c0019745:	53                   	push   ebx
c0019746:	e8 79 f8 ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001974b:	83 c4 0c             	add    esp,0xc
c001974e:	6a 0c                	push   0xc
c0019750:	56                   	push   esi
c0019751:	53                   	push   ebx
c0019752:	e8 2d f9 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c0019757:	83 c4 0c             	add    esp,0xc
c001975a:	6a 0c                	push   0xc
c001975c:	56                   	push   esi
c001975d:	53                   	push   ebx
c001975e:	e8 21 f9 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c0019763:	83 c4 0c             	add    esp,0xc
c0019766:	6a 0c                	push   0xc
c0019768:	56                   	push   esi
c0019769:	53                   	push   ebx
c001976a:	e8 15 f9 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c001976f:	83 c4 0c             	add    esp,0xc
c0019772:	6a 0c                	push   0xc
c0019774:	56                   	push   esi
c0019775:	53                   	push   ebx
c0019776:	e8 09 f9 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c001977b:	68 ec 00 00 00       	push   0xec
c0019780:	6a 07                	push   0x7
c0019782:	56                   	push   esi
c0019783:	53                   	push   ebx
c0019784:	e8 3b f8 ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019789:	83 c4 1c             	add    esp,0x1c
c001978c:	6a 0c                	push   0xc
c001978e:	56                   	push   esi
c001978f:	53                   	push   ebx
c0019790:	e8 ef f8 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c0019795:	83 c4 0c             	add    esp,0xc
c0019798:	6a 0c                	push   0xc
c001979a:	56                   	push   esi
c001979b:	53                   	push   ebx
c001979c:	e8 e3 f8 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c00197a1:	83 c4 0c             	add    esp,0xc
c00197a4:	6a 0c                	push   0xc
c00197a6:	56                   	push   esi
c00197a7:	53                   	push   ebx
c00197a8:	e8 d7 f8 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c00197ad:	83 c4 0c             	add    esp,0xc
c00197b0:	6a 0c                	push   0xc
c00197b2:	56                   	push   esi
c00197b3:	53                   	push   ebx
c00197b4:	e8 cb f8 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c00197b9:	83 c4 0c             	add    esp,0xc
c00197bc:	6a 0c                	push   0xc
c00197be:	56                   	push   esi
c00197bf:	53                   	push   ebx
c00197c0:	e8 bf f8 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c00197c5:	83 c4 10             	add    esp,0x10
c00197c8:	84 c0                	test   al,al
c00197ca:	0f 84 5f 01 00 00    	je     c001992f <IDE::detect()+0x23d>
c00197d0:	31 ff                	xor    edi,edi
c00197d2:	50                   	push   eax
c00197d3:	6a 0c                	push   0xc
c00197d5:	56                   	push   esi
c00197d6:	53                   	push   ebx
c00197d7:	e8 a8 f8 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c00197dc:	83 c4 10             	add    esp,0x10
c00197df:	a8 01                	test   al,0x1
c00197e1:	0f 85 69 01 00 00    	jne    c0019950 <IDE::detect()+0x25e>
c00197e7:	84 c0                	test   al,al
c00197e9:	78 04                	js     c00197ef <IDE::detect()+0xfd>
c00197eb:	a8 08                	test   al,0x8
c00197ed:	75 23                	jne    c0019812 <IDE::detect()+0x120>
c00197ef:	47                   	inc    edi
c00197f0:	81 ff 17 01 00 00    	cmp    edi,0x117
c00197f6:	7e da                	jle    c00197d2 <IDE::detect()+0xe0>
c00197f8:	83 ec 0c             	sub    esp,0xc
c00197fb:	6a 32                	push   0x32
c00197fd:	e8 96 a2 ff ff       	call   c0013a98 <milliTenthSleep(unsigned int)>
c0019802:	83 c4 10             	add    esp,0x10
c0019805:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001980b:	75 c5                	jne    c00197d2 <IDE::detect()+0xe0>
c001980d:	e9 3e 01 00 00       	jmp    c0019950 <IDE::detect()+0x25e>
c0019812:	31 c9                	xor    ecx,ecx
c0019814:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019818:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001981c:	83 ec 0c             	sub    esp,0xc
c001981f:	68 80 00 00 00       	push   0x80
c0019824:	57                   	push   edi
c0019825:	6a 00                	push   0x0
c0019827:	56                   	push   esi
c0019828:	53                   	push   ebx
c0019829:	e8 f8 fd ff ff       	call   c0019626 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001982e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019833:	89 e8                	mov    eax,ebp
c0019835:	89 d1                	mov    ecx,edx
c0019837:	c1 e0 06             	shl    eax,0x6
c001983a:	01 d8                	add    eax,ebx
c001983c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019843:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001984a:	89 f2                	mov    edx,esi
c001984c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019852:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019856:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001985c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019860:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019867:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001986f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019876:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001987e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019884:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001988b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019891:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019895:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019899:	83 c4 20             	add    esp,0x20
c001989c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001989f:	83 c0 02             	add    eax,0x2
c00198a2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00198a8:	83 c7 02             	add    edi,0x2
c00198ab:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00198ae:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00198b4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00198b8:	75 e2                	jne    c001989c <IDE::detect()+0x1aa>
c00198ba:	89 e8                	mov    eax,ebp
c00198bc:	c1 e0 06             	shl    eax,0x6
c00198bf:	01 d8                	add    eax,ebx
c00198c1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00198c7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00198ce:	66 c1 ea 09          	shr    dx,0x9
c00198d2:	83 e2 01             	and    edx,0x1
c00198d5:	84 c9                	test   cl,cl
c00198d7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00198dd:	75 22                	jne    c0019901 <IDE::detect()+0x20f>
c00198df:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00198e6:	74 46                	je     c001992e <IDE::detect()+0x23c>
c00198e8:	83 ec 0c             	sub    esp,0xc
c00198eb:	68 7c 01 00 00       	push   0x17c
c00198f0:	e8 c4 de fe ff       	call   c00077b9 <malloc>
c00198f5:	89 c7                	mov    edi,eax
c00198f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00198fa:	e8 11 05 00 00       	call   c0019e10 <ATA::ATA()>
c00198ff:	eb 17                	jmp    c0019918 <IDE::detect()+0x226>
c0019901:	83 ec 0c             	sub    esp,0xc
c0019904:	68 84 01 00 00       	push   0x184
c0019909:	e8 ab de fe ff       	call   c00077b9 <malloc>
c001990e:	89 c7                	mov    edi,eax
c0019910:	89 04 24             	mov    DWORD PTR [esp],eax
c0019913:	e8 f0 0a 00 00       	call   c001a408 <ATAPI::ATAPI()>
c0019918:	5a                   	pop    edx
c0019919:	59                   	pop    ecx
c001991a:	57                   	push   edi
c001991b:	53                   	push   ebx
c001991c:	e8 f7 1f ff ff       	call   c000b918 <Device::addChild(Device*)>
c0019921:	8b 07                	mov    eax,DWORD PTR [edi]
c0019923:	53                   	push   ebx
c0019924:	55                   	push   ebp
c0019925:	6a 00                	push   0x0
c0019927:	57                   	push   edi
c0019928:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001992b:	83 c4 20             	add    esp,0x20
c001992e:	45                   	inc    ebp
c001992f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019934:	74 0d                	je     c0019943 <IDE::detect()+0x251>
c0019936:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001993e:	e9 e0 fd ff ff       	jmp    c0019723 <IDE::detect()+0x31>
c0019943:	4e                   	dec    esi
c0019944:	74 61                	je     c00199a7 <IDE::detect()+0x2b5>
c0019946:	be 01 00 00 00       	mov    esi,0x1
c001994b:	e9 cb fd ff ff       	jmp    c001971b <IDE::detect()+0x29>
c0019950:	50                   	push   eax
c0019951:	6a 04                	push   0x4
c0019953:	56                   	push   esi
c0019954:	53                   	push   ebx
c0019955:	e8 2a f7 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c001995a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001995e:	83 c4 0c             	add    esp,0xc
c0019961:	6a 05                	push   0x5
c0019963:	56                   	push   esi
c0019964:	53                   	push   ebx
c0019965:	e8 1a f7 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c001996a:	83 c4 10             	add    esp,0x10
c001996d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019971:	80 fa 14             	cmp    dl,0x14
c0019974:	75 04                	jne    c001997a <IDE::detect()+0x288>
c0019976:	3c eb                	cmp    al,0xeb
c0019978:	eb 07                	jmp    c0019981 <IDE::detect()+0x28f>
c001997a:	3c 96                	cmp    al,0x96
c001997c:	75 b1                	jne    c001992f <IDE::detect()+0x23d>
c001997e:	80 fa 69             	cmp    dl,0x69
c0019981:	75 ac                	jne    c001992f <IDE::detect()+0x23d>
c0019983:	68 a1 00 00 00       	push   0xa1
c0019988:	6a 07                	push   0x7
c001998a:	56                   	push   esi
c001998b:	53                   	push   ebx
c001998c:	e8 33 f6 ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019991:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019998:	e8 fb a0 ff ff       	call   c0013a98 <milliTenthSleep(unsigned int)>
c001999d:	83 c4 10             	add    esp,0x10
c00199a0:	b1 01                	mov    cl,0x1
c00199a2:	e9 6d fe ff ff       	jmp    c0019814 <IDE::detect()+0x122>
c00199a7:	81 c4 1c 02 00 00    	add    esp,0x21c
c00199ad:	5b                   	pop    ebx
c00199ae:	5e                   	pop    esi
c00199af:	5f                   	pop    edi
c00199b0:	5d                   	pop    ebp
c00199b1:	c3                   	ret    

c00199b2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00199b2:	55                   	push   ebp
c00199b3:	57                   	push   edi
c00199b4:	56                   	push   esi
c00199b5:	53                   	push   ebx
c00199b6:	83 ec 1c             	sub    esp,0x1c
c00199b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00199c1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00199c5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00199c9:	88 c3                	mov    bl,al
c00199cb:	84 c0                	test   al,al
c00199cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199d1:	0f 84 81 00 00 00    	je     c0019a58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00199d7:	83 ec 0c             	sub    esp,0xc
c00199da:	68 7b f3 01 c0       	push   0xc001f37b
c00199df:	e8 f4 0a ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00199e4:	83 c4 10             	add    esp,0x10
c00199e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199eb:	3c 01                	cmp    al,0x1
c00199ed:	74 63                	je     c0019a52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00199ef:	3c 02                	cmp    al,0x2
c00199f1:	75 53                	jne    c0019a46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00199f3:	01 f6                	add    esi,esi
c00199f5:	09 ee                	or     esi,ebp
c00199f7:	50                   	push   eax
c00199f8:	89 f0                	mov    eax,esi
c00199fa:	6a 01                	push   0x1
c00199fc:	0f b6 f0             	movzx  esi,al
c00199ff:	c1 e6 06             	shl    esi,0x6
c0019a02:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019a0a:	50                   	push   eax
c0019a0b:	57                   	push   edi
c0019a0c:	e8 73 f6 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c0019a11:	83 c4 10             	add    esp,0x10
c0019a14:	a8 01                	test   al,0x1
c0019a16:	74 02                	je     c0019a1a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019a18:	b3 07                	mov    bl,0x7
c0019a1a:	a8 02                	test   al,0x2
c0019a1c:	74 02                	je     c0019a20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019a1e:	b3 03                	mov    bl,0x3
c0019a20:	a8 04                	test   al,0x4
c0019a22:	74 02                	je     c0019a26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019a24:	b3 14                	mov    bl,0x14
c0019a26:	a8 08                	test   al,0x8
c0019a28:	74 02                	je     c0019a2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019a2a:	b3 03                	mov    bl,0x3
c0019a2c:	a8 10                	test   al,0x10
c0019a2e:	74 02                	je     c0019a32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019a30:	b3 15                	mov    bl,0x15
c0019a32:	a8 20                	test   al,0x20
c0019a34:	74 02                	je     c0019a38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019a36:	b3 03                	mov    bl,0x3
c0019a38:	a8 40                	test   al,0x40
c0019a3a:	74 02                	je     c0019a3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019a3c:	b3 16                	mov    bl,0x16
c0019a3e:	84 c0                	test   al,al
c0019a40:	79 16                	jns    c0019a58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a42:	b3 0d                	mov    bl,0xd
c0019a44:	eb 12                	jmp    c0019a58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a46:	3c 03                	cmp    al,0x3
c0019a48:	74 0c                	je     c0019a56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019a4a:	3c 04                	cmp    al,0x4
c0019a4c:	75 0a                	jne    c0019a58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a4e:	b3 08                	mov    bl,0x8
c0019a50:	eb 06                	jmp    c0019a58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a52:	b3 13                	mov    bl,0x13
c0019a54:	eb 02                	jmp    c0019a58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a56:	b3 17                	mov    bl,0x17
c0019a58:	83 c4 1c             	add    esp,0x1c
c0019a5b:	88 d8                	mov    al,bl
c0019a5d:	5b                   	pop    ebx
c0019a5e:	5e                   	pop    esi
c0019a5f:	5f                   	pop    edi
c0019a60:	5d                   	pop    ebp
c0019a61:	c3                   	ret    

c0019a62 <IDE::polling(unsigned char, unsigned int)>:
c0019a62:	55                   	push   ebp
c0019a63:	bd 04 00 00 00       	mov    ebp,0x4
c0019a68:	57                   	push   edi
c0019a69:	56                   	push   esi
c0019a6a:	53                   	push   ebx
c0019a6b:	83 ec 0c             	sub    esp,0xc
c0019a6e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a72:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019a76:	0f b6 f3             	movzx  esi,bl
c0019a79:	52                   	push   edx
c0019a7a:	6a 0c                	push   0xc
c0019a7c:	56                   	push   esi
c0019a7d:	57                   	push   edi
c0019a7e:	e8 01 f6 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c0019a83:	83 c4 10             	add    esp,0x10
c0019a86:	4d                   	dec    ebp
c0019a87:	75 ed                	jne    c0019a76 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019a89:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019a8e:	50                   	push   eax
c0019a8f:	6a 0c                	push   0xc
c0019a91:	56                   	push   esi
c0019a92:	57                   	push   edi
c0019a93:	e8 ec f5 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c0019a98:	83 c4 10             	add    esp,0x10
c0019a9b:	a8 01                	test   al,0x1
c0019a9d:	75 17                	jne    c0019ab6 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019a9f:	a8 20                	test   al,0x20
c0019aa1:	75 0f                	jne    c0019ab2 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019aa3:	4b                   	dec    ebx
c0019aa4:	74 10                	je     c0019ab6 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019aa6:	84 c0                	test   al,al
c0019aa8:	78 e4                	js     c0019a8e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019aaa:	a8 08                	test   al,0x8
c0019aac:	74 e0                	je     c0019a8e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019aae:	31 c0                	xor    eax,eax
c0019ab0:	eb 06                	jmp    c0019ab8 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019ab2:	b0 01                	mov    al,0x1
c0019ab4:	eb 02                	jmp    c0019ab8 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019ab6:	b0 02                	mov    al,0x2
c0019ab8:	83 c4 0c             	add    esp,0xc
c0019abb:	5b                   	pop    ebx
c0019abc:	5e                   	pop    esi
c0019abd:	5f                   	pop    edi
c0019abe:	5d                   	pop    ebp
c0019abf:	c3                   	ret    

c0019ac0 <SATABus::close(int, int, void*)>:
c0019ac0:	31 c0                	xor    eax,eax
c0019ac2:	c3                   	ret    
c0019ac3:	90                   	nop

c0019ac4 <SATABus::detect()>:
c0019ac4:	c3                   	ret    
c0019ac5:	90                   	nop

c0019ac6 <SATABus::SATABus()>:
c0019ac6:	83 ec 0c             	sub    esp,0xc
c0019ac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019acd:	83 ec 08             	sub    esp,0x8
c0019ad0:	68 b4 f3 01 c0       	push   0xc001f3b4
c0019ad5:	50                   	push   eax
c0019ad6:	e8 81 21 ff ff       	call   c000bc5c <HardDiskController::HardDiskController(char const*)>
c0019adb:	83 c4 10             	add    esp,0x10
c0019ade:	ba e0 f3 01 c0       	mov    edx,0xc001f3e0
c0019ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ae7:	89 10                	mov    DWORD PTR [eax],edx
c0019ae9:	83 ec 0c             	sub    esp,0xc
c0019aec:	6a 50                	push   0x50
c0019aee:	e8 60 e0 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019af3:	83 c4 10             	add    esp,0x10
c0019af6:	89 c2                	mov    edx,eax
c0019af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019afc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019b02:	83 ec 0c             	sub    esp,0xc
c0019b05:	6a 50                	push   0x50
c0019b07:	e8 79 f7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0019b0c:	83 c4 10             	add    esp,0x10
c0019b0f:	89 c2                	mov    edx,eax
c0019b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b15:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019b1b:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0019b20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b24:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019b2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b2e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019b34:	83 ec 0c             	sub    esp,0xc
c0019b37:	6a 03                	push   0x3
c0019b39:	6a 50                	push   0x50
c0019b3b:	51                   	push   ecx
c0019b3c:	52                   	push   edx
c0019b3d:	50                   	push   eax
c0019b3e:	e8 d1 00 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019b43:	83 c4 20             	add    esp,0x20
c0019b46:	90                   	nop
c0019b47:	83 c4 0c             	add    esp,0xc
c0019b4a:	c3                   	ret    
c0019b4b:	90                   	nop

c0019b4c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019b4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b50:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019b53:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019b56:	09 c2                	or     edx,eax
c0019b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019b62:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019b64:	31 c0                	xor    eax,eax
c0019b66:	c1 e9 08             	shr    ecx,0x8
c0019b69:	83 e1 0f             	and    ecx,0xf
c0019b6c:	39 c8                	cmp    eax,ecx
c0019b6e:	74 0a                	je     c0019b7a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019b70:	f6 c2 01             	test   dl,0x1
c0019b73:	74 08                	je     c0019b7d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019b75:	d1 ea                	shr    edx,1
c0019b77:	40                   	inc    eax
c0019b78:	eb f2                	jmp    c0019b6c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019b7a:	83 c8 ff             	or     eax,0xffffffff
c0019b7d:	c3                   	ret    

c0019b7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019b7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019b82:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019b85:	89 c2                	mov    edx,eax
c0019b87:	c1 ea 08             	shr    edx,0x8
c0019b8a:	83 e2 0f             	and    edx,0xf
c0019b8d:	fe ca                	dec    dl
c0019b8f:	75 31                	jne    c0019bc2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019b91:	83 e0 0f             	and    eax,0xf
c0019b94:	3c 03                	cmp    al,0x3
c0019b96:	75 2a                	jne    c0019bc2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019b98:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019b9b:	b8 02 00 00 00       	mov    eax,0x2
c0019ba0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019ba6:	74 1c                	je     c0019bc4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019ba8:	b8 04 00 00 00       	mov    eax,0x4
c0019bad:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019bb3:	74 0f                	je     c0019bc4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019bb5:	31 c0                	xor    eax,eax
c0019bb7:	83 fa 03             	cmp    edx,0x3
c0019bba:	0f 94 c0             	sete   al
c0019bbd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019bc1:	c3                   	ret    
c0019bc2:	31 c0                	xor    eax,eax
c0019bc4:	c3                   	ret    
c0019bc5:	90                   	nop

c0019bc6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019bc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bcd:	0f ba e2 0f          	bt     edx,0xf
c0019bd1:	72 f7                	jb     c0019bca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019bd3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bd6:	83 ca 10             	or     edx,0x10
c0019bd9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bdc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bdf:	83 ca 01             	or     edx,0x1
c0019be2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019be5:	c3                   	ret    

c0019be6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019be6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bed:	83 e2 fe             	and    edx,0xfffffffe
c0019bf0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bf3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bf6:	83 e2 ef             	and    edx,0xffffffef
c0019bf9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bfc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bff:	0f ba e2 0e          	bt     edx,0xe
c0019c03:	72 f7                	jb     c0019bfc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c05:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c08:	0f ba e2 0f          	bt     edx,0xf
c0019c0c:	72 ee                	jb     c0019bfc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c0e:	c3                   	ret    
c0019c0f:	90                   	nop

c0019c10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019c10:	55                   	push   ebp
c0019c11:	57                   	push   edi
c0019c12:	56                   	push   esi
c0019c13:	53                   	push   ebx
c0019c14:	83 ec 1c             	sub    esp,0x1c
c0019c17:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019c1f:	53                   	push   ebx
c0019c20:	56                   	push   esi
c0019c21:	e8 c0 ff ff ff       	call   c0019be6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019c26:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019c2a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c30:	83 ec 0c             	sub    esp,0xc
c0019c33:	c1 e5 0a             	shl    ebp,0xa
c0019c36:	01 e8                	add    eax,ebp
c0019c38:	89 03                	mov    DWORD PTR [ebx],eax
c0019c3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c3c:	68 00 04 00 00       	push   0x400
c0019c41:	6a 00                	push   0x0
c0019c43:	50                   	push   eax
c0019c44:	e8 87 68 fe ff       	call   c00004d0 <memset>
c0019c49:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019c4f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019c53:	01 e8                	add    eax,ebp
c0019c55:	83 c4 1c             	add    esp,0x1c
c0019c58:	89 03                	mov    DWORD PTR [ebx],eax
c0019c5a:	c1 e2 08             	shl    edx,0x8
c0019c5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019c64:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019c6a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c70:	01 f8                	add    eax,edi
c0019c72:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019c75:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019c78:	68 00 01 00 00       	push   0x100
c0019c7d:	6a 00                	push   0x0
c0019c7f:	50                   	push   eax
c0019c80:	e8 4b 68 fe ff       	call   c00004d0 <memset>
c0019c85:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019c8b:	01 fa                	add    edx,edi
c0019c8d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019c91:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019c94:	c1 e7 0d             	shl    edi,0xd
c0019c97:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019c9e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019ca4:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019caa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cae:	31 ff                	xor    edi,edi
c0019cb0:	83 c4 10             	add    esp,0x10
c0019cb3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cbd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019cc3:	83 c5 20             	add    ebp,0x20
c0019cc6:	01 f8                	add    eax,edi
c0019cc8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019ccb:	52                   	push   edx
c0019ccc:	68 00 01 00 00       	push   0x100
c0019cd1:	6a 00                	push   0x0
c0019cd3:	50                   	push   eax
c0019cd4:	e8 f7 67 fe ff       	call   c00004d0 <memset>
c0019cd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cdd:	83 c4 10             	add    esp,0x10
c0019ce0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019ce6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019ced:	01 f8                	add    eax,edi
c0019cef:	81 c7 00 01 00 00    	add    edi,0x100
c0019cf5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019cf8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019cfe:	75 b3                	jne    c0019cb3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019d00:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d07:	50                   	push   eax
c0019d08:	50                   	push   eax
c0019d09:	53                   	push   ebx
c0019d0a:	56                   	push   esi
c0019d0b:	e8 b6 fe ff ff       	call   c0019bc6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019d10:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d17:	83 c4 2c             	add    esp,0x2c
c0019d1a:	5b                   	pop    ebx
c0019d1b:	5e                   	pop    esi
c0019d1c:	5f                   	pop    edi
c0019d1d:	5d                   	pop    ebp
c0019d1e:	c3                   	ret    
c0019d1f:	90                   	nop

c0019d20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019d20:	55                   	push   ebp
c0019d21:	57                   	push   edi
c0019d22:	56                   	push   esi
c0019d23:	53                   	push   ebx
c0019d24:	31 db                	xor    ebx,ebx
c0019d26:	83 ec 0c             	sub    esp,0xc
c0019d29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d2d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019d31:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019d34:	f7 c7 01 00 00 00    	test   edi,0x1
c0019d3a:	74 7a                	je     c0019db6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d3c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019d40:	89 d8                	mov    eax,ebx
c0019d42:	c1 e0 07             	shl    eax,0x7
c0019d45:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019d4c:	55                   	push   ebp
c0019d4d:	56                   	push   esi
c0019d4e:	e8 2b fe ff ff       	call   c0019b7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019d53:	5a                   	pop    edx
c0019d54:	83 f8 01             	cmp    eax,0x1
c0019d57:	59                   	pop    ecx
c0019d58:	75 21                	jne    c0019d7b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019d5a:	50                   	push   eax
c0019d5b:	53                   	push   ebx
c0019d5c:	55                   	push   ebp
c0019d5d:	56                   	push   esi
c0019d5e:	e8 ad fe ff ff       	call   c0019c10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d63:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019d6a:	e8 4a da fe ff       	call   c00077b9 <malloc>
c0019d6f:	89 c5                	mov    ebp,eax
c0019d71:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d74:	e8 43 0d 00 00       	call   c001aabc <SATA::SATA()>
c0019d79:	eb 24                	jmp    c0019d9f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019d7b:	83 f8 04             	cmp    eax,0x4
c0019d7e:	75 36                	jne    c0019db6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d80:	51                   	push   ecx
c0019d81:	53                   	push   ebx
c0019d82:	55                   	push   ebp
c0019d83:	56                   	push   esi
c0019d84:	e8 87 fe ff ff       	call   c0019c10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d89:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019d90:	e8 24 da fe ff       	call   c00077b9 <malloc>
c0019d95:	89 c5                	mov    ebp,eax
c0019d97:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d9a:	e8 79 10 00 00       	call   c001ae18 <SATAPI::SATAPI()>
c0019d9f:	58                   	pop    eax
c0019da0:	5a                   	pop    edx
c0019da1:	55                   	push   ebp
c0019da2:	56                   	push   esi
c0019da3:	e8 70 1b ff ff       	call   c000b918 <Device::addChild(Device*)>
c0019da8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019dab:	56                   	push   esi
c0019dac:	6a 00                	push   0x0
c0019dae:	53                   	push   ebx
c0019daf:	55                   	push   ebp
c0019db0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019db3:	83 c4 20             	add    esp,0x20
c0019db6:	d1 ef                	shr    edi,1
c0019db8:	43                   	inc    ebx
c0019db9:	83 fb 20             	cmp    ebx,0x20
c0019dbc:	0f 85 72 ff ff ff    	jne    c0019d34 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019dc2:	83 c4 0c             	add    esp,0xc
c0019dc5:	5b                   	pop    ebx
c0019dc6:	5e                   	pop    esi
c0019dc7:	5f                   	pop    edi
c0019dc8:	5d                   	pop    ebp
c0019dc9:	c3                   	ret    

c0019dca <SATABus::open(int, int, void*)>:
c0019dca:	83 ec 14             	sub    esp,0x14
c0019dcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019dd1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019dd7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019ddd:	52                   	push   edx
c0019dde:	50                   	push   eax
c0019ddf:	e8 3c ff ff ff       	call   c0019d20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019de4:	31 c0                	xor    eax,eax
c0019de6:	83 c4 1c             	add    esp,0x1c
c0019de9:	c3                   	ret    

c0019dea <ATA::close(int, int, void*)>:
c0019dea:	83 ec 0c             	sub    esp,0xc
c0019ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019df1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019df7:	85 c0                	test   eax,eax
c0019df9:	74 0c                	je     c0019e07 <ATA::close(int, int, void*)+0x1d>
c0019dfb:	83 ec 0c             	sub    esp,0xc
c0019dfe:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e00:	50                   	push   eax
c0019e01:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019e04:	83 c4 10             	add    esp,0x10
c0019e07:	31 c0                	xor    eax,eax
c0019e09:	83 c4 0c             	add    esp,0xc
c0019e0c:	c3                   	ret    
c0019e0d:	90                   	nop

c0019e0e <ATA::powerSaving(PowerSavingLevel)>:
c0019e0e:	c3                   	ret    
c0019e0f:	90                   	nop

c0019e10 <ATA::ATA()>:
c0019e10:	83 ec 0c             	sub    esp,0xc
c0019e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e17:	83 ec 04             	sub    esp,0x4
c0019e1a:	68 00 02 00 00       	push   0x200
c0019e1f:	68 ad f4 01 c0       	push   0xc001f4ad
c0019e24:	50                   	push   eax
c0019e25:	e8 bc 1e ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019e2a:	83 c4 10             	add    esp,0x10
c0019e2d:	ba 20 f4 01 c0       	mov    edx,0xc001f420
c0019e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e36:	89 10                	mov    DWORD PTR [eax],edx
c0019e38:	90                   	nop
c0019e39:	83 c4 0c             	add    esp,0xc
c0019e3c:	c3                   	ret    
c0019e3d:	90                   	nop

c0019e3e <ATA::flush(bool)>:
c0019e3e:	53                   	push   ebx
c0019e3f:	83 ec 08             	sub    esp,0x8
c0019e42:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019e47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e4b:	19 c0                	sbb    eax,eax
c0019e4d:	83 e0 fd             	and    eax,0xfffffffd
c0019e50:	05 ea 00 00 00       	add    eax,0xea
c0019e55:	50                   	push   eax
c0019e56:	6a 07                	push   0x7
c0019e58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e5f:	50                   	push   eax
c0019e60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e66:	e8 59 f1 ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e6b:	83 c4 0c             	add    esp,0xc
c0019e6e:	6a 00                	push   0x0
c0019e70:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e77:	50                   	push   eax
c0019e78:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e7e:	e8 df fb ff ff       	call   c0019a62 <IDE::polling(unsigned char, unsigned int)>
c0019e83:	83 c4 18             	add    esp,0x18
c0019e86:	5b                   	pop    ebx
c0019e87:	c3                   	ret    

c0019e88 <ATA::readyForCommand()>:
c0019e88:	56                   	push   esi
c0019e89:	53                   	push   ebx
c0019e8a:	53                   	push   ebx
c0019e8b:	31 db                	xor    ebx,ebx
c0019e8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e91:	51                   	push   ecx
c0019e92:	6a 0c                	push   0xc
c0019e94:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019e9b:	50                   	push   eax
c0019e9c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019ea2:	e8 dd f1 ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c0019ea7:	83 c4 10             	add    esp,0x10
c0019eaa:	a8 88                	test   al,0x88
c0019eac:	74 1f                	je     c0019ecd <ATA::readyForCommand()+0x45>
c0019eae:	43                   	inc    ebx
c0019eaf:	83 fb 63             	cmp    ebx,0x63
c0019eb2:	7e dd                	jle    c0019e91 <ATA::readyForCommand()+0x9>
c0019eb4:	83 ec 0c             	sub    esp,0xc
c0019eb7:	6a 0a                	push   0xa
c0019eb9:	e8 da 9b ff ff       	call   c0013a98 <milliTenthSleep(unsigned int)>
c0019ebe:	83 c4 10             	add    esp,0x10
c0019ec1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019ec7:	75 c8                	jne    c0019e91 <ATA::readyForCommand()+0x9>
c0019ec9:	31 c0                	xor    eax,eax
c0019ecb:	eb 02                	jmp    c0019ecf <ATA::readyForCommand()+0x47>
c0019ecd:	b0 01                	mov    al,0x1
c0019ecf:	5a                   	pop    edx
c0019ed0:	5b                   	pop    ebx
c0019ed1:	5e                   	pop    esi
c0019ed2:	c3                   	ret    
c0019ed3:	90                   	nop

c0019ed4 <ATA::access(unsigned long long, int, void*, bool)>:
c0019ed4:	55                   	push   ebp
c0019ed5:	57                   	push   edi
c0019ed6:	56                   	push   esi
c0019ed7:	53                   	push   ebx
c0019ed8:	83 ec 2c             	sub    esp,0x2c
c0019edb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019edf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019ee3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019ee7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019eeb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019eef:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019ef3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019ef7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019efd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f01:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f0b:	c1 e0 06             	shl    eax,0x6
c0019f0e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019f16:	74 5d                	je     c0019f75 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019f18:	89 fa                	mov    edx,edi
c0019f1a:	89 f0                	mov    eax,esi
c0019f1c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019f20:	c1 ea 1c             	shr    edx,0x1c
c0019f23:	89 d1                	mov    ecx,edx
c0019f25:	09 c1                	or     ecx,eax
c0019f27:	74 25                	je     c0019f4e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019f29:	31 ed                	xor    ebp,ebp
c0019f2b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019f32:	89 fa                	mov    edx,edi
c0019f34:	89 f0                	mov    eax,esi
c0019f36:	0f ad d0             	shrd   eax,edx,cl
c0019f39:	d3 ea                	shr    edx,cl
c0019f3b:	f6 c1 20             	test   cl,0x20
c0019f3e:	74 02                	je     c0019f42 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019f40:	89 d0                	mov    eax,edx
c0019f42:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019f46:	45                   	inc    ebp
c0019f47:	83 fd 06             	cmp    ebp,0x6
c0019f4a:	75 df                	jne    c0019f2b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019f4c:	eb 76                	jmp    c0019fc4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019f4e:	89 f0                	mov    eax,esi
c0019f50:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019f55:	89 fa                	mov    edx,edi
c0019f57:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019f5e:	0f ac d0 10          	shrd   eax,edx,0x10
c0019f62:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019f67:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019f6b:	c1 ee 18             	shr    esi,0x18
c0019f6e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019f73:	eb 56                	jmp    c0019fcb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019f75:	6a 00                	push   0x0
c0019f77:	6a 3f                	push   0x3f
c0019f79:	57                   	push   edi
c0019f7a:	56                   	push   esi
c0019f7b:	e8 70 22 00 00       	call   c001c1f0 <__umoddi3>
c0019f80:	83 c4 10             	add    esp,0x10
c0019f83:	40                   	inc    eax
c0019f84:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019f88:	6a 00                	push   0x0
c0019f8a:	68 f0 03 00 00       	push   0x3f0
c0019f8f:	57                   	push   edi
c0019f90:	56                   	push   esi
c0019f91:	e8 5a 21 00 00       	call   c001c0f0 <__udivdi3>
c0019f96:	83 c4 10             	add    esp,0x10
c0019f99:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019f9e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019fa5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019faa:	6a 00                	push   0x0
c0019fac:	6a 3f                	push   0x3f
c0019fae:	57                   	push   edi
c0019faf:	56                   	push   esi
c0019fb0:	e8 3b 21 00 00       	call   c001c0f0 <__udivdi3>
c0019fb5:	83 c4 10             	add    esp,0x10
c0019fb8:	89 c6                	mov    esi,eax
c0019fba:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019fbf:	83 e6 0f             	and    esi,0xf
c0019fc2:	eb 07                	jmp    c0019fcb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019fc4:	31 f6                	xor    esi,esi
c0019fc6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019fcb:	bf 01 00 00 00       	mov    edi,0x1
c0019fd0:	50                   	push   eax
c0019fd1:	6a 00                	push   0x0
c0019fd3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fda:	50                   	push   eax
c0019fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019fdf:	e8 ee f1 ff ff       	call   c00191d2 <IDE::enableIRQs(unsigned char, bool)>
c0019fe4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fe7:	e8 9c fe ff ff       	call   c0019e88 <ATA::readyForCommand()>
c0019fec:	83 c4 10             	add    esp,0x10
c0019fef:	84 c0                	test   al,al
c0019ff1:	0f 84 4e 02 00 00    	je     c001a245 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019ff7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019ffd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a003:	c1 e0 04             	shl    eax,0x4
c001a006:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a00d:	09 c6                	or     esi,eax
c001a00f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a014:	75 05                	jne    c001a01b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a016:	83 ce a0             	or     esi,0xffffffa0
c001a019:	eb 03                	jmp    c001a01e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a01b:	83 ce e0             	or     esi,0xffffffe0
c001a01e:	89 f0                	mov    eax,esi
c001a020:	0f b6 f0             	movzx  esi,al
c001a023:	56                   	push   esi
c001a024:	6a 06                	push   0x6
c001a026:	51                   	push   ecx
c001a027:	52                   	push   edx
c001a028:	e8 97 ef ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a02d:	83 c4 10             	add    esp,0x10
c001a030:	6a 00                	push   0x0
c001a032:	6a 01                	push   0x1
c001a034:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a03b:	50                   	push   eax
c001a03c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a042:	e8 7d ef ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a047:	83 c4 10             	add    esp,0x10
c001a04a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a04f:	75 6e                	jne    c001a0bf <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a051:	6a 00                	push   0x0
c001a053:	6a 08                	push   0x8
c001a055:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a05c:	50                   	push   eax
c001a05d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a063:	e8 5c ef ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a068:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a06d:	50                   	push   eax
c001a06e:	6a 09                	push   0x9
c001a070:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a077:	50                   	push   eax
c001a078:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a07e:	e8 41 ef ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a083:	83 c4 20             	add    esp,0x20
c001a086:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a08b:	50                   	push   eax
c001a08c:	6a 0a                	push   0xa
c001a08e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a095:	50                   	push   eax
c001a096:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a09c:	e8 23 ef ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0a1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a0a6:	50                   	push   eax
c001a0a7:	6a 0b                	push   0xb
c001a0a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0b0:	50                   	push   eax
c001a0b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0b7:	e8 08 ef ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0bc:	83 c4 20             	add    esp,0x20
c001a0bf:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a0c4:	50                   	push   eax
c001a0c5:	6a 02                	push   0x2
c001a0c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0ce:	50                   	push   eax
c001a0cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0d5:	e8 ea ee ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0da:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a0df:	50                   	push   eax
c001a0e0:	6a 03                	push   0x3
c001a0e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0e9:	50                   	push   eax
c001a0ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0f0:	e8 cf ee ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0f5:	83 c4 20             	add    esp,0x20
c001a0f8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a0fd:	50                   	push   eax
c001a0fe:	6a 04                	push   0x4
c001a100:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a107:	50                   	push   eax
c001a108:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a10e:	e8 b1 ee ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a113:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a118:	50                   	push   eax
c001a119:	6a 05                	push   0x5
c001a11b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a122:	50                   	push   eax
c001a123:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a129:	e8 96 ee ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a12e:	83 c4 20             	add    esp,0x20
c001a131:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a136:	0f 94 c0             	sete   al
c001a139:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a13e:	74 09                	je     c001a149 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a140:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a147:	eb 07                	jmp    c001a150 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a149:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a150:	0f b6 c0             	movzx  eax,al
c001a153:	50                   	push   eax
c001a154:	6a 07                	push   0x7
c001a156:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a15d:	50                   	push   eax
c001a15e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a164:	e8 5b ee ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a169:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a16d:	83 c4 10             	add    esp,0x10
c001a170:	85 f6                	test   esi,esi
c001a172:	0f 84 ae 00 00 00    	je     c001a226 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a178:	50                   	push   eax
c001a179:	6a 01                	push   0x1
c001a17b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a182:	50                   	push   eax
c001a183:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a189:	e8 d4 f8 ff ff       	call   c0019a62 <IDE::polling(unsigned char, unsigned int)>
c001a18e:	83 c4 10             	add    esp,0x10
c001a191:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a197:	84 c0                	test   al,al
c001a199:	74 20                	je     c001a1bb <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a19b:	0f b6 f8             	movzx  edi,al
c001a19e:	0f b6 d2             	movzx  edx,dl
c001a1a1:	57                   	push   edi
c001a1a2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a1a9:	50                   	push   eax
c001a1aa:	52                   	push   edx
c001a1ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1b1:	e8 fc f7 ff ff       	call   c00199b2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a1b6:	e9 87 00 00 00       	jmp    c001a242 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a1bb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a1c0:	74 33                	je     c001a1f5 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a1c2:	31 ed                	xor    ebp,ebp
c001a1c4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a1c8:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a1cc:	50                   	push   eax
c001a1cd:	50                   	push   eax
c001a1ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1d5:	50                   	push   eax
c001a1d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1dc:	e8 d1 ed ff ff       	call   c0018fb2 <IDE::getBase(unsigned char)>
c001a1e1:	89 c2                	mov    edx,eax
c001a1e3:	89 f8                	mov    eax,edi
c001a1e5:	66 ef                	out    dx,ax
c001a1e7:	45                   	inc    ebp
c001a1e8:	83 c4 10             	add    esp,0x10
c001a1eb:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a1f1:	75 d1                	jne    c001a1c4 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a1f3:	eb 23                	jmp    c001a218 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a1f5:	0f b6 d2             	movzx  edx,dl
c001a1f8:	51                   	push   ecx
c001a1f9:	51                   	push   ecx
c001a1fa:	52                   	push   edx
c001a1fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a201:	e8 ac ed ff ff       	call   c0018fb2 <IDE::getBase(unsigned char)>
c001a206:	b9 00 01 00 00       	mov    ecx,0x100
c001a20b:	89 c2                	mov    edx,eax
c001a20d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a211:	fc                   	cld    
c001a212:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a215:	83 c4 10             	add    esp,0x10
c001a218:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a220:	4e                   	dec    esi
c001a221:	e9 4a ff ff ff       	jmp    c001a170 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a226:	31 ff                	xor    edi,edi
c001a228:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a22d:	74 16                	je     c001a245 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a22f:	50                   	push   eax
c001a230:	50                   	push   eax
c001a231:	31 c0                	xor    eax,eax
c001a233:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a238:	0f 94 c0             	sete   al
c001a23b:	50                   	push   eax
c001a23c:	53                   	push   ebx
c001a23d:	e8 fc fb ff ff       	call   c0019e3e <ATA::flush(bool)>
c001a242:	83 c4 10             	add    esp,0x10
c001a245:	83 c4 2c             	add    esp,0x2c
c001a248:	89 f8                	mov    eax,edi
c001a24a:	5b                   	pop    ebx
c001a24b:	5e                   	pop    esi
c001a24c:	5f                   	pop    edi
c001a24d:	5d                   	pop    ebp
c001a24e:	c3                   	ret    
c001a24f:	90                   	nop

c001a250 <ATA::read(unsigned long long, int, void*)>:
c001a250:	57                   	push   edi
c001a251:	b8 04 00 00 00       	mov    eax,0x4
c001a256:	56                   	push   esi
c001a257:	53                   	push   ebx
c001a258:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a25c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a260:	8d 7a ff             	lea    edi,[edx-0x1]
c001a263:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a267:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a26b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a271:	77 25                	ja     c001a298 <ATA::read(unsigned long long, int, void*)+0x48>
c001a273:	b8 06 00 00 00       	mov    eax,0x6
c001a278:	85 f6                	test   esi,esi
c001a27a:	74 1c                	je     c001a298 <ATA::read(unsigned long long, int, void*)+0x48>
c001a27c:	50                   	push   eax
c001a27d:	50                   	push   eax
c001a27e:	6a 00                	push   0x0
c001a280:	56                   	push   esi
c001a281:	52                   	push   edx
c001a282:	53                   	push   ebx
c001a283:	51                   	push   ecx
c001a284:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a288:	e8 47 fc ff ff       	call   c0019ed4 <ATA::access(unsigned long long, int, void*, bool)>
c001a28d:	83 c4 20             	add    esp,0x20
c001a290:	85 c0                	test   eax,eax
c001a292:	0f 95 c0             	setne  al
c001a295:	0f b6 c0             	movzx  eax,al
c001a298:	5b                   	pop    ebx
c001a299:	5e                   	pop    esi
c001a29a:	5f                   	pop    edi
c001a29b:	c3                   	ret    

c001a29c <ATA::write(unsigned long long, int, void*)>:
c001a29c:	57                   	push   edi
c001a29d:	b8 04 00 00 00       	mov    eax,0x4
c001a2a2:	56                   	push   esi
c001a2a3:	53                   	push   ebx
c001a2a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2a8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a2ac:	8d 7a ff             	lea    edi,[edx-0x1]
c001a2af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a2b3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a2b7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a2bd:	77 25                	ja     c001a2e4 <ATA::write(unsigned long long, int, void*)+0x48>
c001a2bf:	b8 06 00 00 00       	mov    eax,0x6
c001a2c4:	85 f6                	test   esi,esi
c001a2c6:	74 1c                	je     c001a2e4 <ATA::write(unsigned long long, int, void*)+0x48>
c001a2c8:	50                   	push   eax
c001a2c9:	50                   	push   eax
c001a2ca:	6a 01                	push   0x1
c001a2cc:	56                   	push   esi
c001a2cd:	52                   	push   edx
c001a2ce:	53                   	push   ebx
c001a2cf:	51                   	push   ecx
c001a2d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2d4:	e8 fb fb ff ff       	call   c0019ed4 <ATA::access(unsigned long long, int, void*, bool)>
c001a2d9:	83 c4 20             	add    esp,0x20
c001a2dc:	85 c0                	test   eax,eax
c001a2de:	0f 95 c0             	setne  al
c001a2e1:	0f b6 c0             	movzx  eax,al
c001a2e4:	5b                   	pop    ebx
c001a2e5:	5e                   	pop    esi
c001a2e6:	5f                   	pop    edi
c001a2e7:	c3                   	ret    

c001a2e8 <ATA::detectCHS()>:
c001a2e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a2ec:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a2f2:	c1 e0 06             	shl    eax,0x6
c001a2f5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a2fb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a305:	c7 44 24 04 04 f4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f404
c001a30d:	e9 49 5e ff ff       	jmp    c001015b <KePanic(char const*)>

c001a312 <ATA::open(int, int, void*)>:
c001a312:	53                   	push   ebx
c001a313:	83 ec 08             	sub    esp,0x8
c001a316:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a31a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a31e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a322:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a328:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a32e:	c1 e0 06             	shl    eax,0x6
c001a331:	01 d0                	add    eax,edx
c001a333:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a33a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a340:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a347:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a351:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a357:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a35e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a365:	75 0c                	jne    c001a373 <ATA::open(int, int, void*)+0x61>
c001a367:	83 ec 0c             	sub    esp,0xc
c001a36a:	53                   	push   ebx
c001a36b:	e8 78 ff ff ff       	call   c001a2e8 <ATA::detectCHS()>
c001a370:	83 c4 10             	add    esp,0x10
c001a373:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a379:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a37f:	c1 e0 06             	shl    eax,0x6
c001a382:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a389:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a393:	d1 e8                	shr    eax,1
c001a395:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a39b:	6a 04                	push   0x4
c001a39d:	6a 0c                	push   0xc
c001a39f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3a6:	50                   	push   eax
c001a3a7:	52                   	push   edx
c001a3a8:	e8 17 ec ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3ad:	90                   	nop
c001a3ae:	90                   	nop
c001a3af:	6a 00                	push   0x0
c001a3b1:	6a 0c                	push   0xc
c001a3b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3ba:	50                   	push   eax
c001a3bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a3c1:	e8 fe eb ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3c6:	83 c4 14             	add    esp,0x14
c001a3c9:	53                   	push   ebx
c001a3ca:	e8 7f 19 ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001a3cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3d2:	e8 2f 2a ff ff       	call   c000ce06 <createPartitionsForDisk(PhysicalDisk*)>
c001a3d7:	31 c0                	xor    eax,eax
c001a3d9:	83 c4 18             	add    esp,0x18
c001a3dc:	5b                   	pop    ebx
c001a3dd:	c3                   	ret    

c001a3de <ATAPI::write(unsigned long long, int, void*)>:
c001a3de:	b8 03 00 00 00       	mov    eax,0x3
c001a3e3:	c3                   	ret    

c001a3e4 <ATAPI::close(int, int, void*)>:
c001a3e4:	83 ec 0c             	sub    esp,0xc
c001a3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a3f1:	85 c0                	test   eax,eax
c001a3f3:	74 0c                	je     c001a401 <ATAPI::close(int, int, void*)+0x1d>
c001a3f5:	83 ec 0c             	sub    esp,0xc
c001a3f8:	8b 10                	mov    edx,DWORD PTR [eax]
c001a3fa:	50                   	push   eax
c001a3fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a3fe:	83 c4 10             	add    esp,0x10
c001a401:	31 c0                	xor    eax,eax
c001a403:	83 c4 0c             	add    esp,0xc
c001a406:	c3                   	ret    
c001a407:	90                   	nop

c001a408 <ATAPI::ATAPI()>:
c001a408:	83 ec 0c             	sub    esp,0xc
c001a40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a40f:	83 ec 04             	sub    esp,0x4
c001a412:	68 00 08 00 00       	push   0x800
c001a417:	68 4d f5 01 c0       	push   0xc001f54d
c001a41c:	50                   	push   eax
c001a41d:	e8 c4 18 ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a422:	83 c4 10             	add    esp,0x10
c001a425:	ba 68 f4 01 c0       	mov    edx,0xc001f468
c001a42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a42e:	89 10                	mov    DWORD PTR [eax],edx
c001a430:	90                   	nop
c001a431:	83 c4 0c             	add    esp,0xc
c001a434:	c3                   	ret    
c001a435:	90                   	nop

c001a436 <ATAPI::readyForCommand()>:
c001a436:	56                   	push   esi
c001a437:	53                   	push   ebx
c001a438:	53                   	push   ebx
c001a439:	31 db                	xor    ebx,ebx
c001a43b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a43f:	51                   	push   ecx
c001a440:	6a 0c                	push   0xc
c001a442:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a449:	50                   	push   eax
c001a44a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a450:	e8 2f ec ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c001a455:	83 c4 10             	add    esp,0x10
c001a458:	a8 88                	test   al,0x88
c001a45a:	74 25                	je     c001a481 <ATAPI::readyForCommand()+0x4b>
c001a45c:	43                   	inc    ebx
c001a45d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a463:	7e da                	jle    c001a43f <ATAPI::readyForCommand()+0x9>
c001a465:	83 ec 0c             	sub    esp,0xc
c001a468:	68 5e 01 00 00       	push   0x15e
c001a46d:	e8 26 96 ff ff       	call   c0013a98 <milliTenthSleep(unsigned int)>
c001a472:	83 c4 10             	add    esp,0x10
c001a475:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a47b:	75 c2                	jne    c001a43f <ATAPI::readyForCommand()+0x9>
c001a47d:	31 c0                	xor    eax,eax
c001a47f:	eb 02                	jmp    c001a483 <ATAPI::readyForCommand()+0x4d>
c001a481:	b0 01                	mov    al,0x1
c001a483:	5a                   	pop    edx
c001a484:	5b                   	pop    ebx
c001a485:	5e                   	pop    esi
c001a486:	c3                   	ret    
c001a487:	90                   	nop

c001a488 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a488:	55                   	push   ebp
c001a489:	57                   	push   edi
c001a48a:	56                   	push   esi
c001a48b:	53                   	push   ebx
c001a48c:	83 ec 20             	sub    esp,0x20
c001a48f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a493:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a497:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a49b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a49f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a4a3:	6a 01                	push   0x1
c001a4a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4ac:	50                   	push   eax
c001a4ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4b3:	e8 1a ed ff ff       	call   c00191d2 <IDE::enableIRQs(unsigned char, bool)>
c001a4b8:	5e                   	pop    esi
c001a4b9:	58                   	pop    eax
c001a4ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4c1:	50                   	push   eax
c001a4c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4c8:	e8 d1 ea ff ff       	call   c0018f9e <IDE::prepareInterrupt(unsigned char)>
c001a4cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a4d0:	e8 61 ff ff ff       	call   c001a436 <ATAPI::readyForCommand()>
c001a4d5:	83 c4 10             	add    esp,0x10
c001a4d8:	84 c0                	test   al,al
c001a4da:	75 0a                	jne    c001a4e6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a4dc:	bb 01 00 00 00       	mov    ebx,0x1
c001a4e1:	e9 57 02 00 00       	jmp    c001a73d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a4e6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a4ec:	c1 e0 04             	shl    eax,0x4
c001a4ef:	0f b6 c0             	movzx  eax,al
c001a4f2:	50                   	push   eax
c001a4f3:	6a 06                	push   0x6
c001a4f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4fc:	50                   	push   eax
c001a4fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a503:	e8 bc ea ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a508:	6a 00                	push   0x0
c001a50a:	6a 01                	push   0x1
c001a50c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a513:	50                   	push   eax
c001a514:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a51a:	e8 a5 ea ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a51f:	83 c4 20             	add    esp,0x20
c001a522:	0f b6 c3             	movzx  eax,bl
c001a525:	0f b6 df             	movzx  ebx,bh
c001a528:	50                   	push   eax
c001a529:	6a 04                	push   0x4
c001a52b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a532:	50                   	push   eax
c001a533:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a539:	e8 86 ea ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a53e:	53                   	push   ebx
c001a53f:	6a 05                	push   0x5
c001a541:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a548:	50                   	push   eax
c001a549:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a54f:	e8 70 ea ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a554:	83 c4 20             	add    esp,0x20
c001a557:	68 a0 00 00 00       	push   0xa0
c001a55c:	6a 07                	push   0x7
c001a55e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a565:	50                   	push   eax
c001a566:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a56c:	e8 53 ea ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a571:	83 c4 0c             	add    esp,0xc
c001a574:	6a 01                	push   0x1
c001a576:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a57d:	50                   	push   eax
c001a57e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a584:	e8 d9 f4 ff ff       	call   c0019a62 <IDE::polling(unsigned char, unsigned int)>
c001a589:	83 c4 10             	add    esp,0x10
c001a58c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a592:	84 c0                	test   al,al
c001a594:	74 23                	je     c001a5b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a596:	0f b6 d8             	movzx  ebx,al
c001a599:	0f b6 d2             	movzx  edx,dl
c001a59c:	53                   	push   ebx
c001a59d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a5a4:	50                   	push   eax
c001a5a5:	52                   	push   edx
c001a5a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5ac:	e8 01 f4 ff ff       	call   c00199b2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a5b1:	83 c4 10             	add    esp,0x10
c001a5b4:	e9 84 01 00 00       	jmp    c001a73d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a5b9:	0f b6 d2             	movzx  edx,dl
c001a5bc:	53                   	push   ebx
c001a5bd:	53                   	push   ebx
c001a5be:	52                   	push   edx
c001a5bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5c5:	e8 e8 e9 ff ff       	call   c0018fb2 <IDE::getBase(unsigned char)>
c001a5ca:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a5ce:	b9 06 00 00 00       	mov    ecx,0x6
c001a5d3:	89 c2                	mov    edx,eax
c001a5d5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a5d8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a5dc:	83 c4 10             	add    esp,0x10
c001a5df:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a5e5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a5ec:	85 db                	test   ebx,ebx
c001a5ee:	0f 84 ec 00 00 00    	je     c001a6e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a5f4:	51                   	push   ecx
c001a5f5:	51                   	push   ecx
c001a5f6:	52                   	push   edx
c001a5f7:	50                   	push   eax
c001a5f8:	e8 35 eb ff ff       	call   c0019132 <IDE::waitInterrupt(unsigned char)>
c001a5fd:	83 c4 10             	add    esp,0x10
c001a600:	84 c0                	test   al,al
c001a602:	0f 84 d4 fe ff ff    	je     c001a4dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a608:	56                   	push   esi
c001a609:	56                   	push   esi
c001a60a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a611:	50                   	push   eax
c001a612:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a618:	e8 81 e9 ff ff       	call   c0018f9e <IDE::prepareInterrupt(unsigned char)>
c001a61d:	83 c4 0c             	add    esp,0xc
c001a620:	6a 04                	push   0x4
c001a622:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a629:	50                   	push   eax
c001a62a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a630:	e8 4f ea ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c001a635:	83 c4 0c             	add    esp,0xc
c001a638:	89 c6                	mov    esi,eax
c001a63a:	6a 05                	push   0x5
c001a63c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a643:	50                   	push   eax
c001a644:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a64a:	e8 35 ea ff ff       	call   c0019084 <IDE::read(unsigned char, unsigned char)>
c001a64f:	89 f1                	mov    ecx,esi
c001a651:	0f b6 c0             	movzx  eax,al
c001a654:	0f b6 f1             	movzx  esi,cl
c001a657:	c1 e0 08             	shl    eax,0x8
c001a65a:	09 c6                	or     esi,eax
c001a65c:	d1 fe                	sar    esi,1
c001a65e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a662:	83 c4 10             	add    esp,0x10
c001a665:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a66a:	74 41                	je     c001a6ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a66c:	31 c9                	xor    ecx,ecx
c001a66e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a674:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a67b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a67f:	75 0a                	jne    c001a68b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a681:	01 c9                	add    ecx,ecx
c001a683:	01 cd                	add    ebp,ecx
c001a685:	4b                   	dec    ebx
c001a686:	e9 54 ff ff ff       	jmp    c001a5df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a68b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a690:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a694:	51                   	push   ecx
c001a695:	51                   	push   ecx
c001a696:	52                   	push   edx
c001a697:	50                   	push   eax
c001a698:	e8 15 e9 ff ff       	call   c0018fb2 <IDE::getBase(unsigned char)>
c001a69d:	89 c2                	mov    edx,eax
c001a69f:	89 f0                	mov    eax,esi
c001a6a1:	66 ef                	out    dx,ax
c001a6a3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a6a7:	83 c4 10             	add    esp,0x10
c001a6aa:	41                   	inc    ecx
c001a6ab:	eb c1                	jmp    c001a66e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a6ad:	31 f6                	xor    esi,esi
c001a6af:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6b5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6bc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a6c0:	75 06                	jne    c001a6c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a6c2:	01 f6                	add    esi,esi
c001a6c4:	01 f5                	add    ebp,esi
c001a6c6:	eb bd                	jmp    c001a685 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a6c8:	51                   	push   ecx
c001a6c9:	51                   	push   ecx
c001a6ca:	52                   	push   edx
c001a6cb:	50                   	push   eax
c001a6cc:	e8 e1 e8 ff ff       	call   c0018fb2 <IDE::getBase(unsigned char)>
c001a6d1:	89 c2                	mov    edx,eax
c001a6d3:	66 ed                	in     ax,dx
c001a6d5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a6da:	83 c4 10             	add    esp,0x10
c001a6dd:	46                   	inc    esi
c001a6de:	eb cf                	jmp    c001a6af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a6e0:	51                   	push   ecx
c001a6e1:	51                   	push   ecx
c001a6e2:	52                   	push   edx
c001a6e3:	50                   	push   eax
c001a6e4:	e8 49 ea ff ff       	call   c0019132 <IDE::waitInterrupt(unsigned char)>
c001a6e9:	83 c4 10             	add    esp,0x10
c001a6ec:	84 c0                	test   al,al
c001a6ee:	0f 84 e8 fd ff ff    	je     c001a4dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a6f4:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a6f9:	52                   	push   edx
c001a6fa:	52                   	push   edx
c001a6fb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a702:	50                   	push   eax
c001a703:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a709:	e8 90 e8 ff ff       	call   c0018f9e <IDE::prepareInterrupt(unsigned char)>
c001a70e:	83 c4 10             	add    esp,0x10
c001a711:	50                   	push   eax
c001a712:	50                   	push   eax
c001a713:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a71a:	50                   	push   eax
c001a71b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a721:	e8 8c e8 ff ff       	call   c0018fb2 <IDE::getBase(unsigned char)>
c001a726:	8d 50 07             	lea    edx,[eax+0x7]
c001a729:	ec                   	in     al,dx
c001a72a:	83 c4 10             	add    esp,0x10
c001a72d:	a8 88                	test   al,0x88
c001a72f:	74 0a                	je     c001a73b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a731:	4b                   	dec    ebx
c001a732:	75 dd                	jne    c001a711 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a734:	bb 02 00 00 00       	mov    ebx,0x2
c001a739:	eb 02                	jmp    c001a73d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a73b:	31 db                	xor    ebx,ebx
c001a73d:	83 c4 1c             	add    esp,0x1c
c001a740:	89 d8                	mov    eax,ebx
c001a742:	5b                   	pop    ebx
c001a743:	5e                   	pop    esi
c001a744:	5f                   	pop    edi
c001a745:	5d                   	pop    ebp
c001a746:	c3                   	ret    
c001a747:	90                   	nop

c001a748 <ATAPI::diskRemoved()>:
c001a748:	53                   	push   ebx
c001a749:	83 ec 14             	sub    esp,0x14
c001a74c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a750:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a757:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a75d:	e8 24 24 ff ff       	call   c000cb86 <LogicalDisk::unmount()>
c001a762:	58                   	pop    eax
c001a763:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a769:	e8 5e 2d ff ff       	call   c000d4cc <VCache::writeWriteBuffer()>
c001a76e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a774:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a778:	83 c4 18             	add    esp,0x18
c001a77b:	5b                   	pop    ebx
c001a77c:	e9 3b 2d ff ff       	jmp    c000d4bc <VCache::invalidateReadBuffer()>
c001a781:	90                   	nop

c001a782 <ATAPI::eject()>:
c001a782:	57                   	push   edi
c001a783:	b9 03 00 00 00       	mov    ecx,0x3
c001a788:	53                   	push   ebx
c001a789:	83 ec 14             	sub    esp,0x14
c001a78c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a790:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a794:	fc                   	cld    
c001a795:	31 c0                	xor    eax,eax
c001a797:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a799:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a79e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a7a3:	50                   	push   eax
c001a7a4:	50                   	push   eax
c001a7a5:	6a 00                	push   0x0
c001a7a7:	6a 00                	push   0x0
c001a7a9:	6a 00                	push   0x0
c001a7ab:	6a 02                	push   0x2
c001a7ad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7b1:	50                   	push   eax
c001a7b2:	53                   	push   ebx
c001a7b3:	e8 d0 fc ff ff       	call   c001a488 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a7b8:	83 c4 14             	add    esp,0x14
c001a7bb:	53                   	push   ebx
c001a7bc:	e8 87 ff ff ff       	call   c001a748 <ATAPI::diskRemoved()>
c001a7c1:	83 c4 24             	add    esp,0x24
c001a7c4:	31 c0                	xor    eax,eax
c001a7c6:	5b                   	pop    ebx
c001a7c7:	5f                   	pop    edi
c001a7c8:	c3                   	ret    
c001a7c9:	90                   	nop

c001a7ca <ATAPI::diskInserted()>:
c001a7ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7ce:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a7d5:	c3                   	ret    

c001a7d6 <ATAPI::detectMedia()>:
c001a7d6:	56                   	push   esi
c001a7d7:	53                   	push   ebx
c001a7d8:	83 ec 28             	sub    esp,0x28
c001a7db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a7df:	6a 0c                	push   0xc
c001a7e1:	6a 00                	push   0x0
c001a7e3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a7e7:	56                   	push   esi
c001a7e8:	e8 e3 5c fe ff       	call   c00004d0 <memset>
c001a7ed:	58                   	pop    eax
c001a7ee:	5a                   	pop    edx
c001a7ef:	6a 00                	push   0x0
c001a7f1:	6a 00                	push   0x0
c001a7f3:	6a 00                	push   0x0
c001a7f5:	6a 00                	push   0x0
c001a7f7:	56                   	push   esi
c001a7f8:	53                   	push   ebx
c001a7f9:	e8 8a fc ff ff       	call   c001a488 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a7fe:	83 c4 1c             	add    esp,0x1c
c001a801:	6a 0c                	push   0xc
c001a803:	6a 00                	push   0x0
c001a805:	56                   	push   esi
c001a806:	e8 c5 5c fe ff       	call   c00004d0 <memset>
c001a80b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a810:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a815:	59                   	pop    ecx
c001a816:	58                   	pop    eax
c001a817:	6a 01                	push   0x1
c001a819:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a81d:	50                   	push   eax
c001a81e:	6a 00                	push   0x0
c001a820:	6a 12                	push   0x12
c001a822:	56                   	push   esi
c001a823:	53                   	push   ebx
c001a824:	e8 5f fc ff ff       	call   c001a488 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a829:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a82d:	83 c4 20             	add    esp,0x20
c001a830:	83 e0 7f             	and    eax,0x7f
c001a833:	3c 70                	cmp    al,0x70
c001a835:	74 15                	je     c001a84c <ATAPI::detectMedia()+0x76>
c001a837:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a83e:	75 0c                	jne    c001a84c <ATAPI::detectMedia()+0x76>
c001a840:	83 ec 0c             	sub    esp,0xc
c001a843:	53                   	push   ebx
c001a844:	e8 81 ff ff ff       	call   c001a7ca <ATAPI::diskInserted()>
c001a849:	83 c4 10             	add    esp,0x10
c001a84c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a850:	83 e0 0f             	and    eax,0xf
c001a853:	3c 02                	cmp    al,0x2
c001a855:	75 1b                	jne    c001a872 <ATAPI::detectMedia()+0x9c>
c001a857:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a85c:	75 2d                	jne    c001a88b <ATAPI::detectMedia()+0xb5>
c001a85e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a865:	74 24                	je     c001a88b <ATAPI::detectMedia()+0xb5>
c001a867:	83 ec 0c             	sub    esp,0xc
c001a86a:	53                   	push   ebx
c001a86b:	e8 d8 fe ff ff       	call   c001a748 <ATAPI::diskRemoved()>
c001a870:	eb 16                	jmp    c001a888 <ATAPI::detectMedia()+0xb2>
c001a872:	84 c0                	test   al,al
c001a874:	75 15                	jne    c001a88b <ATAPI::detectMedia()+0xb5>
c001a876:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a87d:	75 0c                	jne    c001a88b <ATAPI::detectMedia()+0xb5>
c001a87f:	83 ec 0c             	sub    esp,0xc
c001a882:	53                   	push   ebx
c001a883:	e8 42 ff ff ff       	call   c001a7ca <ATAPI::diskInserted()>
c001a888:	83 c4 10             	add    esp,0x10
c001a88b:	83 c4 24             	add    esp,0x24
c001a88e:	5b                   	pop    ebx
c001a88f:	5e                   	pop    esi
c001a890:	c3                   	ret    
c001a891:	90                   	nop

c001a892 <ATAPI::open(int, int, void*)>:
c001a892:	56                   	push   esi
c001a893:	53                   	push   ebx
c001a894:	50                   	push   eax
c001a895:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a899:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a89d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8a1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a8a7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a8ad:	c1 e0 06             	shl    eax,0x6
c001a8b0:	01 d0                	add    eax,edx
c001a8b2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a8b9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a8bf:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a8c6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a8d0:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a8d6:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a8dd:	6a 04                	push   0x4
c001a8df:	6a 0c                	push   0xc
c001a8e1:	51                   	push   ecx
c001a8e2:	52                   	push   edx
c001a8e3:	e8 dc e6 ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8e8:	90                   	nop
c001a8e9:	90                   	nop
c001a8ea:	6a 00                	push   0x0
c001a8ec:	6a 0c                	push   0xc
c001a8ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a8f5:	50                   	push   eax
c001a8f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a8fc:	e8 c3 e6 ff ff       	call   c0018fc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a901:	83 c4 14             	add    esp,0x14
c001a904:	68 74 01 00 00       	push   0x174
c001a909:	e8 ab ce fe ff       	call   c00077b9 <malloc>
c001a90e:	83 c4 0c             	add    esp,0xc
c001a911:	89 c6                	mov    esi,eax
c001a913:	6a 00                	push   0x0
c001a915:	68 ff ff ff 7f       	push   0x7fffffff
c001a91a:	6a 00                	push   0x0
c001a91c:	6a 00                	push   0x0
c001a91e:	53                   	push   ebx
c001a91f:	68 04 f6 01 c0       	push   0xc001f604
c001a924:	50                   	push   eax
c001a925:	e8 a8 20 ff ff       	call   c000c9d2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a92a:	83 c4 14             	add    esp,0x14
c001a92d:	56                   	push   esi
c001a92e:	e8 55 21 ff ff       	call   c000ca88 <LogicalDisk::assignDriveLetter()>
c001a933:	5a                   	pop    edx
c001a934:	0f be c0             	movsx  eax,al
c001a937:	59                   	pop    ecx
c001a938:	50                   	push   eax
c001a939:	68 50 f4 01 c0       	push   0xc001f450
c001a93e:	e8 95 fb fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001a943:	58                   	pop    eax
c001a944:	5a                   	pop    edx
c001a945:	56                   	push   esi
c001a946:	53                   	push   ebx
c001a947:	e8 cc 0f ff ff       	call   c000b918 <Device::addChild(Device*)>
c001a94c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a952:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a955:	e8 f4 13 ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001a95a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a961:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a964:	e8 6d fe ff ff       	call   c001a7d6 <ATAPI::detectMedia()>
c001a969:	83 c4 14             	add    esp,0x14
c001a96c:	31 c0                	xor    eax,eax
c001a96e:	5b                   	pop    ebx
c001a96f:	5e                   	pop    esi
c001a970:	c3                   	ret    
c001a971:	90                   	nop

c001a972 <ATAPI::read(unsigned long long, int, void*)>:
c001a972:	55                   	push   ebp
c001a973:	57                   	push   edi
c001a974:	56                   	push   esi
c001a975:	53                   	push   ebx
c001a976:	83 ec 1c             	sub    esp,0x1c
c001a979:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a97d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a981:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a985:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a98c:	74 3c                	je     c001a9ca <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a98e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a992:	b9 03 00 00 00       	mov    ecx,0x3
c001a997:	fc                   	cld    
c001a998:	31 c0                	xor    eax,eax
c001a99a:	0f ce                	bswap  esi
c001a99c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a99e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a9a3:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a9a7:	89 e8                	mov    eax,ebp
c001a9a9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a9ad:	50                   	push   eax
c001a9ae:	50                   	push   eax
c001a9af:	55                   	push   ebp
c001a9b0:	c1 e5 0b             	shl    ebp,0xb
c001a9b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a9b7:	6a 00                	push   0x0
c001a9b9:	55                   	push   ebp
c001a9ba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9be:	50                   	push   eax
c001a9bf:	53                   	push   ebx
c001a9c0:	e8 c3 fa ff ff       	call   c001a488 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a9c5:	83 c4 20             	add    esp,0x20
c001a9c8:	eb 1a                	jmp    c001a9e4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a9ca:	83 ec 0c             	sub    esp,0xc
c001a9cd:	53                   	push   ebx
c001a9ce:	e8 03 fe ff ff       	call   c001a7d6 <ATAPI::detectMedia()>
c001a9d3:	83 c4 10             	add    esp,0x10
c001a9d6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9dd:	75 af                	jne    c001a98e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a9df:	b8 02 00 00 00       	mov    eax,0x2
c001a9e4:	83 c4 1c             	add    esp,0x1c
c001a9e7:	5b                   	pop    ebx
c001a9e8:	5e                   	pop    esi
c001a9e9:	5f                   	pop    edi
c001a9ea:	5d                   	pop    ebp
c001a9eb:	c3                   	ret    

c001a9ec <SATA::close(int, int, void*)>:
c001a9ec:	83 ec 0c             	sub    esp,0xc
c001a9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a9f9:	85 c0                	test   eax,eax
c001a9fb:	74 0c                	je     c001aa09 <SATA::close(int, int, void*)+0x1d>
c001a9fd:	83 ec 0c             	sub    esp,0xc
c001aa00:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa02:	50                   	push   eax
c001aa03:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aa06:	83 c4 10             	add    esp,0x10
c001aa09:	31 c0                	xor    eax,eax
c001aa0b:	83 c4 0c             	add    esp,0xc
c001aa0e:	c3                   	ret    
c001aa0f:	90                   	nop

c001aa10 <SATA::powerSaving(PowerSavingLevel)>:
c001aa10:	c3                   	ret    
c001aa11:	90                   	nop

c001aa12 <SATA::open(int, int, void*)>:
c001aa12:	56                   	push   esi
c001aa13:	53                   	push   ebx
c001aa14:	50                   	push   eax
c001aa15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa1d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aa27:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aa2d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aa37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa3b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aa45:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aa4b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aa52:	e8 3e d0 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aa57:	89 c6                	mov    esi,eax
c001aa59:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa5f:	81 c6 00 10 00 00    	add    esi,0x1000
c001aa65:	e8 2b d0 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aa6a:	39 c6                	cmp    esi,eax
c001aa6c:	74 10                	je     c001aa7e <SATA::open(int, int, void*)+0x6c>
c001aa6e:	83 ec 0c             	sub    esp,0xc
c001aa71:	68 98 f4 01 c0       	push   0xc001f498
c001aa76:	e8 e0 56 ff ff       	call   c001015b <KePanic(char const*)>
c001aa7b:	83 c4 10             	add    esp,0x10
c001aa7e:	83 ec 0c             	sub    esp,0xc
c001aa81:	6a 02                	push   0x2
c001aa83:	e8 fd e7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001aa88:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aa8e:	6a 03                	push   0x3
c001aa90:	50                   	push   eax
c001aa91:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aa97:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001aa9d:	e8 78 ee fe ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c001aaa2:	83 c4 14             	add    esp,0x14
c001aaa5:	53                   	push   ebx
c001aaa6:	e8 a3 12 ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001aaab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aaae:	e8 53 23 ff ff       	call   c000ce06 <createPartitionsForDisk(PhysicalDisk*)>
c001aab3:	83 c4 14             	add    esp,0x14
c001aab6:	31 c0                	xor    eax,eax
c001aab8:	5b                   	pop    ebx
c001aab9:	5e                   	pop    esi
c001aaba:	c3                   	ret    
c001aabb:	90                   	nop

c001aabc <SATA::SATA()>:
c001aabc:	83 ec 0c             	sub    esp,0xc
c001aabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aac3:	83 ec 04             	sub    esp,0x4
c001aac6:	68 00 02 00 00       	push   0x200
c001aacb:	68 ac f4 01 c0       	push   0xc001f4ac
c001aad0:	50                   	push   eax
c001aad1:	e8 10 12 ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aad6:	83 c4 10             	add    esp,0x10
c001aad9:	ba 1c f5 01 c0       	mov    edx,0xc001f51c
c001aade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aae2:	89 10                	mov    DWORD PTR [eax],edx
c001aae4:	90                   	nop
c001aae5:	83 c4 0c             	add    esp,0xc
c001aae8:	c3                   	ret    
c001aae9:	90                   	nop

c001aaea <SATA::access(unsigned long long, int, void*, bool)>:
c001aaea:	55                   	push   ebp
c001aaeb:	57                   	push   edi
c001aaec:	56                   	push   esi
c001aaed:	53                   	push   ebx
c001aaee:	83 ec 2c             	sub    esp,0x2c
c001aaf1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001aaf5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001aaf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aafd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ab01:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab05:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ab0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab0e:	7e 10                	jle    c001ab20 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ab10:	83 ec 0c             	sub    esp,0xc
c001ab13:	68 bc f4 01 c0       	push   0xc001f4bc
c001ab18:	e8 3e 56 ff ff       	call   c001015b <KePanic(char const*)>
c001ab1d:	83 c4 10             	add    esp,0x10
c001ab20:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ab26:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ab2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab36:	89 d0                	mov    eax,edx
c001ab38:	c1 e0 07             	shl    eax,0x7
c001ab3b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ab3f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ab49:	51                   	push   ecx
c001ab4a:	8d 42 02             	lea    eax,[edx+0x2]
c001ab4d:	51                   	push   ecx
c001ab4e:	c1 e0 07             	shl    eax,0x7
c001ab51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ab55:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ab59:	50                   	push   eax
c001ab5a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ab60:	e8 e7 ef ff ff       	call   c0019b4c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ab65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab69:	83 c4 10             	add    esp,0x10
c001ab6c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ab71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab75:	0f 84 4f 01 00 00    	je     c001acca <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ab7b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab7f:	c1 e0 09             	shl    eax,0x9
c001ab82:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ab87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab8b:	74 0e                	je     c001ab9b <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ab8d:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ab93:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ab97:	89 c1                	mov    ecx,eax
c001ab99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ab9f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001aba5:	8d 42 02             	lea    eax,[edx+0x2]
c001aba8:	c1 e0 07             	shl    eax,0x7
c001abab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001abaf:	8b 00                	mov    eax,DWORD PTR [eax]
c001abb1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001abb7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001abbd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001abc1:	c1 e1 05             	shl    ecx,0x5
c001abc4:	01 c8                	add    eax,ecx
c001abc6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001abca:	83 e1 01             	and    ecx,0x1
c001abcd:	89 ce                	mov    esi,ecx
c001abcf:	8a 08                	mov    cl,BYTE PTR [eax]
c001abd1:	c1 e6 06             	shl    esi,0x6
c001abd4:	83 e1 bf             	and    ecx,0xffffffbf
c001abd7:	09 f1                	or     ecx,esi
c001abd9:	88 08                	mov    BYTE PTR [eax],cl
c001abdb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001abdd:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001abe3:	81 c9 05 00 01 00    	or     ecx,0x10005
c001abe9:	89 08                	mov    DWORD PTR [eax],ecx
c001abeb:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001abf1:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001abf7:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001abfd:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ac00:	50                   	push   eax
c001ac01:	68 90 00 00 00       	push   0x90
c001ac06:	6a 00                	push   0x0
c001ac08:	56                   	push   esi
c001ac09:	e8 c2 58 fe ff       	call   c00004d0 <memset>
c001ac0e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ac14:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ac18:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ac1e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ac22:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac26:	83 c4 10             	add    esp,0x10
c001ac29:	48                   	dec    eax
c001ac2a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ac2f:	89 c1                	mov    ecx,eax
c001ac31:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ac37:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ac3c:	09 c8                	or     eax,ecx
c001ac3e:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ac44:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ac47:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ac4e:	66 25 00 7f          	and    ax,0x7f00
c001ac52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac56:	66 0d 27 80          	or     ax,0x8027
c001ac5a:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ac5f:	66 89 06             	mov    WORD PTR [esi],ax
c001ac62:	19 c0                	sbb    eax,eax
c001ac64:	83 e0 f0             	and    eax,0xfffffff0
c001ac67:	83 c0 35             	add    eax,0x35
c001ac6a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ac6d:	89 e8                	mov    eax,ebp
c001ac6f:	c1 e8 10             	shr    eax,0x10
c001ac72:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ac75:	89 e8                	mov    eax,ebp
c001ac77:	c1 e8 18             	shr    eax,0x18
c001ac7a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ac7d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ac81:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ac84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac88:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ac8b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac8f:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ac93:	89 d6                	mov    esi,edx
c001ac95:	31 c0                	xor    eax,eax
c001ac97:	c1 e6 07             	shl    esi,0x7
c001ac9a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ac9e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001aca4:	80 e1 88             	and    cl,0x88
c001aca7:	74 0a                	je     c001acb3 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001aca9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001acae:	74 0a                	je     c001acba <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001acb0:	40                   	inc    eax
c001acb1:	eb eb                	jmp    c001ac9e <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001acb3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001acb8:	75 17                	jne    c001acd1 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001acba:	83 ec 0c             	sub    esp,0xc
c001acbd:	68 f5 f4 01 c0       	push   0xc001f4f5
c001acc2:	e8 11 f8 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001acc7:	83 c4 10             	add    esp,0x10
c001acca:	b8 01 00 00 00       	mov    eax,0x1
c001accf:	eb 5d                	jmp    c001ad2e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001acd1:	b8 01 00 00 00       	mov    eax,0x1
c001acd6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001acda:	c1 e2 07             	shl    edx,0x7
c001acdd:	d3 e0                	shl    eax,cl
c001acdf:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ace3:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ace9:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001acef:	85 c8                	test   eax,ecx
c001acf1:	74 16                	je     c001ad09 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001acf3:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001acf9:	0f ba e1 1e          	bt     ecx,0x1e
c001acfd:	73 ea                	jae    c001ace9 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001acff:	83 ec 0c             	sub    esp,0xc
c001ad02:	68 03 f5 01 c0       	push   0xc001f503
c001ad07:	eb b9                	jmp    c001acc2 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ad09:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ad0f:	0f ba e0 1e          	bt     eax,0x1e
c001ad13:	72 b5                	jb     c001acca <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ad15:	31 c0                	xor    eax,eax
c001ad17:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ad1c:	75 10                	jne    c001ad2e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad1e:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ad24:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ad28:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad2e:	83 c4 2c             	add    esp,0x2c
c001ad31:	5b                   	pop    ebx
c001ad32:	5e                   	pop    esi
c001ad33:	5f                   	pop    edi
c001ad34:	5d                   	pop    ebp
c001ad35:	c3                   	ret    

c001ad36 <SATA::read(unsigned long long, int, void*)>:
c001ad36:	57                   	push   edi
c001ad37:	b8 04 00 00 00       	mov    eax,0x4
c001ad3c:	56                   	push   esi
c001ad3d:	53                   	push   ebx
c001ad3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad46:	8d 7a ff             	lea    edi,[edx-0x1]
c001ad49:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ad4d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ad51:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ad57:	77 25                	ja     c001ad7e <SATA::read(unsigned long long, int, void*)+0x48>
c001ad59:	b8 06 00 00 00       	mov    eax,0x6
c001ad5e:	85 f6                	test   esi,esi
c001ad60:	74 1c                	je     c001ad7e <SATA::read(unsigned long long, int, void*)+0x48>
c001ad62:	50                   	push   eax
c001ad63:	50                   	push   eax
c001ad64:	6a 00                	push   0x0
c001ad66:	56                   	push   esi
c001ad67:	52                   	push   edx
c001ad68:	53                   	push   ebx
c001ad69:	51                   	push   ecx
c001ad6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad6e:	e8 77 fd ff ff       	call   c001aaea <SATA::access(unsigned long long, int, void*, bool)>
c001ad73:	83 c4 20             	add    esp,0x20
c001ad76:	85 c0                	test   eax,eax
c001ad78:	0f 95 c0             	setne  al
c001ad7b:	0f b6 c0             	movzx  eax,al
c001ad7e:	5b                   	pop    ebx
c001ad7f:	5e                   	pop    esi
c001ad80:	5f                   	pop    edi
c001ad81:	c3                   	ret    

c001ad82 <SATA::write(unsigned long long, int, void*)>:
c001ad82:	55                   	push   ebp
c001ad83:	b8 04 00 00 00       	mov    eax,0x4
c001ad88:	57                   	push   edi
c001ad89:	56                   	push   esi
c001ad8a:	53                   	push   ebx
c001ad8b:	83 ec 0c             	sub    esp,0xc
c001ad8e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ad92:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ad96:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ad99:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ad9d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ada1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ada7:	77 3d                	ja     c001ade6 <SATA::write(unsigned long long, int, void*)+0x64>
c001ada9:	b8 06 00 00 00       	mov    eax,0x6
c001adae:	85 ed                	test   ebp,ebp
c001adb0:	74 34                	je     c001ade6 <SATA::write(unsigned long long, int, void*)+0x64>
c001adb2:	c1 e3 09             	shl    ebx,0x9
c001adb5:	01 eb                	add    ebx,ebp
c001adb7:	89 d6                	mov    esi,edx
c001adb9:	89 cf                	mov    edi,ecx
c001adbb:	83 c6 01             	add    esi,0x1
c001adbe:	83 d7 00             	adc    edi,0x0
c001adc1:	50                   	push   eax
c001adc2:	50                   	push   eax
c001adc3:	6a 01                	push   0x1
c001adc5:	55                   	push   ebp
c001adc6:	81 c5 00 02 00 00    	add    ebp,0x200
c001adcc:	6a 01                	push   0x1
c001adce:	51                   	push   ecx
c001adcf:	52                   	push   edx
c001add0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001add4:	e8 11 fd ff ff       	call   c001aaea <SATA::access(unsigned long long, int, void*, bool)>
c001add9:	83 c4 20             	add    esp,0x20
c001addc:	89 f2                	mov    edx,esi
c001adde:	89 f9                	mov    ecx,edi
c001ade0:	39 dd                	cmp    ebp,ebx
c001ade2:	75 d3                	jne    c001adb7 <SATA::write(unsigned long long, int, void*)+0x35>
c001ade4:	31 c0                	xor    eax,eax
c001ade6:	83 c4 0c             	add    esp,0xc
c001ade9:	5b                   	pop    ebx
c001adea:	5e                   	pop    esi
c001adeb:	5f                   	pop    edi
c001adec:	5d                   	pop    ebp
c001aded:	c3                   	ret    

c001adee <SATAPI::write(unsigned long long, int, void*)>:
c001adee:	b8 03 00 00 00       	mov    eax,0x3
c001adf3:	c3                   	ret    

c001adf4 <SATAPI::close(int, int, void*)>:
c001adf4:	83 ec 0c             	sub    esp,0xc
c001adf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adfb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae01:	85 c0                	test   eax,eax
c001ae03:	74 0c                	je     c001ae11 <SATAPI::close(int, int, void*)+0x1d>
c001ae05:	83 ec 0c             	sub    esp,0xc
c001ae08:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae0a:	50                   	push   eax
c001ae0b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ae0e:	83 c4 10             	add    esp,0x10
c001ae11:	31 c0                	xor    eax,eax
c001ae13:	83 c4 0c             	add    esp,0xc
c001ae16:	c3                   	ret    
c001ae17:	90                   	nop

c001ae18 <SATAPI::SATAPI()>:
c001ae18:	83 ec 0c             	sub    esp,0xc
c001ae1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1f:	83 ec 04             	sub    esp,0x4
c001ae22:	68 00 08 00 00       	push   0x800
c001ae27:	68 4c f5 01 c0       	push   0xc001f54c
c001ae2c:	50                   	push   eax
c001ae2d:	e8 b4 0e ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ae32:	83 c4 10             	add    esp,0x10
c001ae35:	ba 54 f6 01 c0       	mov    edx,0xc001f654
c001ae3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3e:	89 10                	mov    DWORD PTR [eax],edx
c001ae40:	90                   	nop
c001ae41:	83 c4 0c             	add    esp,0xc
c001ae44:	c3                   	ret    
c001ae45:	90                   	nop

c001ae46 <SATAPI::diskRemoved()>:
c001ae46:	c3                   	ret    
c001ae47:	90                   	nop

c001ae48 <SATAPI::diskInserted()>:
c001ae48:	83 ec 18             	sub    esp,0x18
c001ae4b:	68 58 f5 01 c0       	push   0xc001f558
c001ae50:	e8 83 f6 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001ae55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae59:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ae60:	83 c4 1c             	add    esp,0x1c
c001ae63:	c3                   	ret    

c001ae64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ae64:	55                   	push   ebp
c001ae65:	57                   	push   edi
c001ae66:	56                   	push   esi
c001ae67:	53                   	push   ebx
c001ae68:	83 ec 38             	sub    esp,0x38
c001ae6b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ae6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ae73:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ae77:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ae7b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ae7f:	68 70 f5 01 c0       	push   0xc001f570
c001ae84:	e8 4f f6 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001ae89:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ae8f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ae95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae99:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001ae9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aea3:	83 c0 02             	add    eax,0x2
c001aea6:	c1 e0 07             	shl    eax,0x7
c001aea9:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aead:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aeb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aeb5:	c1 e0 07             	shl    eax,0x7
c001aeb8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aebc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aec0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aeca:	58                   	pop    eax
c001aecb:	5a                   	pop    edx
c001aecc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aed0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aed6:	e8 71 ec ff ff       	call   c0019b4c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aedb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aedf:	83 c4 10             	add    esp,0x10
c001aee2:	b8 01 00 00 00       	mov    eax,0x1
c001aee7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aeec:	0f 84 49 02 00 00    	je     c001b13b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001aef2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aefc:	8b 00                	mov    eax,DWORD PTR [eax]
c001aefe:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001af04:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001af0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af0e:	c1 e1 05             	shl    ecx,0x5
c001af11:	01 c8                	add    eax,ecx
c001af13:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af15:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001af1b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001af21:	89 08                	mov    DWORD PTR [eax],ecx
c001af23:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af29:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001af2f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001af35:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001af38:	8d 7b 40             	lea    edi,[ebx+0x40]
c001af3b:	50                   	push   eax
c001af3c:	68 90 00 00 00       	push   0x90
c001af41:	6a 00                	push   0x0
c001af43:	53                   	push   ebx
c001af44:	e8 87 55 fe ff       	call   c00004d0 <memset>
c001af49:	b9 0c 00 00 00       	mov    ecx,0xc
c001af4e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001af52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af54:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001af5a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001af5e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001af64:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001af68:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001af6c:	48                   	dec    eax
c001af6d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001af72:	89 c1                	mov    ecx,eax
c001af74:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001af7a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001af7f:	09 c8                	or     eax,ecx
c001af81:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001af87:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001af8a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001af91:	66 25 00 7f          	and    ax,0x7f00
c001af95:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001af99:	66 0d 27 80          	or     ax,0x8027
c001af9d:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001afa1:	66 89 03             	mov    WORD PTR [ebx],ax
c001afa4:	89 d0                	mov    eax,edx
c001afa6:	c1 ea 18             	shr    edx,0x18
c001afa9:	c1 e8 10             	shr    eax,0x10
c001afac:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001afaf:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001afb2:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001afb6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001afb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afbd:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001afc0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001afc4:	83 c4 10             	add    esp,0x10
c001afc7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001afcb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afcf:	31 c0                	xor    eax,eax
c001afd1:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001afd7:	80 e1 88             	and    cl,0x88
c001afda:	74 0a                	je     c001afe6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001afdc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001afe1:	74 0a                	je     c001afed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001afe3:	40                   	inc    eax
c001afe4:	eb eb                	jmp    c001afd1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001afe6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001afeb:	75 43                	jne    c001b030 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001afed:	83 ec 0c             	sub    esp,0xc
c001aff0:	68 8a f5 01 c0       	push   0xc001f58a
c001aff5:	e8 de f4 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001affa:	58                   	pop    eax
c001affb:	5a                   	pop    edx
c001affc:	68 9f f5 01 c0       	push   0xc001f59f
c001b001:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001b007:	e8 2a d7 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b00c:	59                   	pop    ecx
c001b00d:	5b                   	pop    ebx
c001b00e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b012:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b018:	e8 c9 eb ff ff       	call   c0019be6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b01d:	5e                   	pop    esi
c001b01e:	5f                   	pop    edi
c001b01f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b023:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b029:	e8 98 eb ff ff       	call   c0019bc6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b02e:	eb 48                	jmp    c001b078 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b030:	be 01 00 00 00       	mov    esi,0x1
c001b035:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b039:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b03d:	d3 e6                	shl    esi,cl
c001b03f:	c1 e7 07             	shl    edi,0x7
c001b042:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b048:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b04d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b051:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b057:	85 c6                	test   esi,eax
c001b059:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b05f:	0f 84 a3 00 00 00    	je     c001b108 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b065:	0f ba e0 1e          	bt     eax,0x1e
c001b069:	73 1a                	jae    c001b085 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b06b:	83 ec 0c             	sub    esp,0xc
c001b06e:	68 b1 f5 01 c0       	push   0xc001f5b1
c001b073:	e8 60 f4 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001b078:	83 c4 10             	add    esp,0x10
c001b07b:	b8 01 00 00 00       	mov    eax,0x1
c001b080:	e9 b6 00 00 00       	jmp    c001b13b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b085:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b08b:	83 f8 0d             	cmp    eax,0xd
c001b08e:	77 0a                	ja     c001b09a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b090:	83 ec 0c             	sub    esp,0xc
c001b093:	68 c8 00 00 00       	push   0xc8
c001b098:	eb 28                	jmp    c001b0c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b09a:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b0a0:	83 f8 0d             	cmp    eax,0xd
c001b0a3:	77 0a                	ja     c001b0af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b0a5:	83 ec 0c             	sub    esp,0xc
c001b0a8:	68 58 02 00 00       	push   0x258
c001b0ad:	eb 13                	jmp    c001b0c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b0af:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b0b5:	83 f8 06             	cmp    eax,0x6
c001b0b8:	77 10                	ja     c001b0ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b0ba:	83 ec 0c             	sub    esp,0xc
c001b0bd:	68 dc 05 00 00       	push   0x5dc
c001b0c2:	e8 d1 89 ff ff       	call   c0013a98 <milliTenthSleep(unsigned int)>
c001b0c7:	83 c4 10             	add    esp,0x10
c001b0ca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b0ce:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b0d1:	75 06                	jne    c001b0d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b0d3:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b0d7:	74 15                	je     c001b0ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b0d9:	83 fb 06             	cmp    ebx,0x6
c001b0dc:	77 10                	ja     c001b0ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b0de:	83 ec 0c             	sub    esp,0xc
c001b0e1:	68 c4 09 00 00       	push   0x9c4
c001b0e6:	e8 ad 89 ff ff       	call   c0013a98 <milliTenthSleep(unsigned int)>
c001b0eb:	83 c4 10             	add    esp,0x10
c001b0ee:	43                   	inc    ebx
c001b0ef:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b0f5:	0f 85 56 ff ff ff    	jne    c001b051 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b0fb:	83 ec 0c             	sub    esp,0xc
c001b0fe:	68 c4 f5 01 c0       	push   0xc001f5c4
c001b103:	e9 6b ff ff ff       	jmp    c001b073 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b108:	0f ba e0 1e          	bt     eax,0x1e
c001b10c:	73 0d                	jae    c001b11b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b10e:	83 ec 0c             	sub    esp,0xc
c001b111:	68 d8 f5 01 c0       	push   0xc001f5d8
c001b116:	e9 58 ff ff ff       	jmp    c001b073 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b11b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b120:	74 17                	je     c001b139 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b122:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b127:	74 10                	je     c001b139 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b129:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b12f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b133:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b137:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b139:	31 c0                	xor    eax,eax
c001b13b:	83 c4 2c             	add    esp,0x2c
c001b13e:	5b                   	pop    ebx
c001b13f:	5e                   	pop    esi
c001b140:	5f                   	pop    edi
c001b141:	5d                   	pop    ebp
c001b142:	c3                   	ret    
c001b143:	90                   	nop

c001b144 <SATAPI::eject()>:
c001b144:	57                   	push   edi
c001b145:	b9 03 00 00 00       	mov    ecx,0x3
c001b14a:	83 ec 18             	sub    esp,0x18
c001b14d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b151:	fc                   	cld    
c001b152:	31 c0                	xor    eax,eax
c001b154:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b156:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b15b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b160:	50                   	push   eax
c001b161:	6a 00                	push   0x0
c001b163:	6a 00                	push   0x0
c001b165:	6a 00                	push   0x0
c001b167:	6a 00                	push   0x0
c001b169:	6a 02                	push   0x2
c001b16b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b16f:	50                   	push   eax
c001b170:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b174:	e8 eb fc ff ff       	call   c001ae64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b179:	31 c0                	xor    eax,eax
c001b17b:	83 c4 38             	add    esp,0x38
c001b17e:	5f                   	pop    edi
c001b17f:	c3                   	ret    

c001b180 <SATAPI::detectMedia()>:
c001b180:	53                   	push   ebx
c001b181:	83 ec 14             	sub    esp,0x14
c001b184:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b188:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b18e:	e8 39 23 ff ff       	call   c000d4cc <VCache::writeWriteBuffer()>
c001b193:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b199:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b19d:	83 c4 18             	add    esp,0x18
c001b1a0:	5b                   	pop    ebx
c001b1a1:	e9 16 23 ff ff       	jmp    c000d4bc <VCache::invalidateReadBuffer()>

c001b1a6 <SATAPI::open(int, int, void*)>:
c001b1a6:	56                   	push   esi
c001b1a7:	53                   	push   ebx
c001b1a8:	51                   	push   ecx
c001b1a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1b1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b1bb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b1c1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b1cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1cf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b1d9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b1df:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b1e6:	e8 aa c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b1eb:	89 c6                	mov    esi,eax
c001b1ed:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b1f3:	81 c6 00 10 00 00    	add    esi,0x1000
c001b1f9:	e8 97 c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b1fe:	39 c6                	cmp    esi,eax
c001b200:	74 10                	je     c001b212 <SATAPI::open(int, int, void*)+0x6c>
c001b202:	83 ec 0c             	sub    esp,0xc
c001b205:	68 ed f5 01 c0       	push   0xc001f5ed
c001b20a:	e8 4c 4f ff ff       	call   c001015b <KePanic(char const*)>
c001b20f:	83 c4 10             	add    esp,0x10
c001b212:	83 ec 0c             	sub    esp,0xc
c001b215:	6a 02                	push   0x2
c001b217:	e8 69 e0 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001b21c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b222:	6a 03                	push   0x3
c001b224:	50                   	push   eax
c001b225:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b22b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001b231:	e8 e4 e6 fe ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b236:	83 c4 14             	add    esp,0x14
c001b239:	68 74 01 00 00       	push   0x174
c001b23e:	e8 76 c5 fe ff       	call   c00077b9 <malloc>
c001b243:	83 c4 0c             	add    esp,0xc
c001b246:	89 c6                	mov    esi,eax
c001b248:	6a 00                	push   0x0
c001b24a:	68 ff ff ff 7f       	push   0x7fffffff
c001b24f:	6a 00                	push   0x0
c001b251:	6a 00                	push   0x0
c001b253:	53                   	push   ebx
c001b254:	68 03 f6 01 c0       	push   0xc001f603
c001b259:	50                   	push   eax
c001b25a:	e8 73 17 ff ff       	call   c000c9d2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b25f:	83 c4 14             	add    esp,0x14
c001b262:	56                   	push   esi
c001b263:	e8 20 18 ff ff       	call   c000ca88 <LogicalDisk::assignDriveLetter()>
c001b268:	5a                   	pop    edx
c001b269:	0f be c0             	movsx  eax,al
c001b26c:	59                   	pop    ecx
c001b26d:	50                   	push   eax
c001b26e:	68 50 f4 01 c0       	push   0xc001f450
c001b273:	e8 60 f2 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001b278:	58                   	pop    eax
c001b279:	5a                   	pop    edx
c001b27a:	56                   	push   esi
c001b27b:	53                   	push   ebx
c001b27c:	e8 97 06 ff ff       	call   c000b918 <Device::addChild(Device*)>
c001b281:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b287:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b28a:	e8 bf 0a ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001b28f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b296:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b299:	e8 e2 fe ff ff       	call   c001b180 <SATAPI::detectMedia()>
c001b29e:	83 c4 14             	add    esp,0x14
c001b2a1:	31 c0                	xor    eax,eax
c001b2a3:	5b                   	pop    ebx
c001b2a4:	5e                   	pop    esi
c001b2a5:	c3                   	ret    

c001b2a6 <SATAPI::read(unsigned long long, int, void*)>:
c001b2a6:	57                   	push   edi
c001b2a7:	56                   	push   esi
c001b2a8:	53                   	push   ebx
c001b2a9:	83 ec 3c             	sub    esp,0x3c
c001b2ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b2b0:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b2b4:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b2b8:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b2bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b2c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b2c4:	68 11 f6 01 c0       	push   0xc001f611
c001b2c9:	e8 0a f2 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001b2ce:	83 c4 10             	add    esp,0x10
c001b2d1:	83 fe 04             	cmp    esi,0x4
c001b2d4:	7e 10                	jle    c001b2e6 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b2d6:	83 ec 0c             	sub    esp,0xc
c001b2d9:	68 22 f6 01 c0       	push   0xc001f622
c001b2de:	e8 78 4e ff ff       	call   c001015b <KePanic(char const*)>
c001b2e3:	83 c4 10             	add    esp,0x10
c001b2e6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b2ec:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b2f2:	51                   	push   ecx
c001b2f3:	50                   	push   eax
c001b2f4:	83 c0 02             	add    eax,0x2
c001b2f7:	c1 e0 07             	shl    eax,0x7
c001b2fa:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b300:	50                   	push   eax
c001b301:	52                   	push   edx
c001b302:	e8 09 e9 ff ff       	call   c0019c10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b307:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b30b:	b9 03 00 00 00       	mov    ecx,0x3
c001b310:	fc                   	cld    
c001b311:	31 c0                	xor    eax,eax
c001b313:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b315:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b31a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b31f:	83 c4 0c             	add    esp,0xc
c001b322:	6a 00                	push   0x0
c001b324:	6a 00                	push   0x0
c001b326:	6a 00                	push   0x0
c001b328:	6a 00                	push   0x0
c001b32a:	6a 02                	push   0x2
c001b32c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b330:	50                   	push   eax
c001b331:	53                   	push   ebx
c001b332:	e8 2d fb ff ff       	call   c001ae64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b337:	83 c4 20             	add    esp,0x20
c001b33a:	85 c0                	test   eax,eax
c001b33c:	75 44                	jne    c001b382 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b33e:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b342:	b9 03 00 00 00       	mov    ecx,0x3
c001b347:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b349:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b34d:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b352:	0f c8                	bswap  eax
c001b354:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b358:	89 f0                	mov    eax,esi
c001b35a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b35e:	50                   	push   eax
c001b35f:	56                   	push   esi
c001b360:	c1 e6 0b             	shl    esi,0xb
c001b363:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b367:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b36b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b36f:	56                   	push   esi
c001b370:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b374:	50                   	push   eax
c001b375:	53                   	push   ebx
c001b376:	e8 e9 fa ff ff       	call   c001ae64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b37b:	83 c4 20             	add    esp,0x20
c001b37e:	85 c0                	test   eax,eax
c001b380:	74 14                	je     c001b396 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b382:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b386:	83 ec 0c             	sub    esp,0xc
c001b389:	53                   	push   ebx
c001b38a:	e8 f1 fd ff ff       	call   c001b180 <SATAPI::detectMedia()>
c001b38f:	83 c4 10             	add    esp,0x10
c001b392:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b396:	83 c4 30             	add    esp,0x30
c001b399:	5b                   	pop    ebx
c001b39a:	5e                   	pop    esi
c001b39b:	5f                   	pop    edi
c001b39c:	c3                   	ret    
c001b39d:	90                   	nop

c001b39e <IOAPIC::close(int, int, void*)>:
c001b39e:	b8 00 00 00 00       	mov    eax,0x0
c001b3a3:	c3                   	ret    

c001b3a4 <apicGetBase()>:
c001b3a4:	55                   	push   ebp
c001b3a5:	89 e5                	mov    ebp,esp
c001b3a7:	83 ec 18             	sub    esp,0x18
c001b3aa:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b3af:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b3b5:	83 e0 08             	and    eax,0x8
c001b3b8:	84 c0                	test   al,al
c001b3ba:	75 07                	jne    c001b3c3 <apicGetBase()+0x1f>
c001b3bc:	b8 00 00 00 00       	mov    eax,0x0
c001b3c1:	eb 21                	jmp    c001b3e4 <apicGetBase()+0x40>
c001b3c3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b3c8:	83 ec 08             	sub    esp,0x8
c001b3cb:	6a 1b                	push   0x1b
c001b3cd:	50                   	push   eax
c001b3ce:	e8 1f ba fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b3d3:	83 c4 10             	add    esp,0x10
c001b3d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b3d9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b3dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b3df:	25 00 00 ff ff       	and    eax,0xffff0000
c001b3e4:	c9                   	leave  
c001b3e5:	c3                   	ret    

c001b3e6 <IOAPIC::IOAPIC()>:
c001b3e6:	83 ec 0c             	sub    esp,0xc
c001b3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3ed:	83 ec 08             	sub    esp,0x8
c001b3f0:	68 84 f6 01 c0       	push   0xc001f684
c001b3f5:	50                   	push   eax
c001b3f6:	e8 b5 06 ff ff       	call   c000bab0 <Device::Device(char const*)>
c001b3fb:	83 c4 10             	add    esp,0x10
c001b3fe:	ba 94 f6 01 c0       	mov    edx,0xc001f694
c001b403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b407:	89 10                	mov    DWORD PTR [eax],edx
c001b409:	90                   	nop
c001b40a:	83 c4 0c             	add    esp,0xc
c001b40d:	c3                   	ret    

c001b40e <apicOpen()>:
c001b40e:	55                   	push   ebp
c001b40f:	89 e5                	mov    ebp,esp
c001b411:	53                   	push   ebx
c001b412:	83 ec 34             	sub    esp,0x34
c001b415:	a0 a0 5b 02 c0       	mov    al,ds:0xc0025ba0
c001b41a:	83 f0 01             	xor    eax,0x1
c001b41d:	84 c0                	test   al,al
c001b41f:	0f 84 9d 00 00 00    	je     c001b4c2 <apicOpen()+0xb4>
c001b425:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b429:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c001b42e:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b431:	0f 83 84 00 00 00    	jae    c001b4bb <apicOpen()+0xad>
c001b437:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b43e:	83 ec 0c             	sub    esp,0xc
c001b441:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b444:	e8 70 c3 fe ff       	call   c00077b9 <malloc>
c001b449:	83 c4 10             	add    esp,0x10
c001b44c:	89 c3                	mov    ebx,eax
c001b44e:	83 ec 0c             	sub    esp,0xc
c001b451:	53                   	push   ebx
c001b452:	e8 8f ff ff ff       	call   c001b3e6 <IOAPIC::IOAPIC()>
c001b457:	83 c4 10             	add    esp,0x10
c001b45a:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b45d:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b460:	25 ff 00 00 00       	and    eax,0xff
c001b465:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b468:	89 14 85 80 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda480],edx
c001b46f:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c001b474:	40                   	inc    eax
c001b475:	a3 60 5b 02 c0       	mov    ds:0xc0025b60,eax
c001b47a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b47f:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b485:	83 ec 08             	sub    esp,0x8
c001b488:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b48b:	50                   	push   eax
c001b48c:	e8 87 04 ff ff       	call   c000b918 <Device::addChild(Device*)>
c001b491:	83 c4 10             	add    esp,0x10
c001b494:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b497:	8b 00                	mov    eax,DWORD PTR [eax]
c001b499:	83 c0 08             	add    eax,0x8
c001b49c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b49e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b4a1:	25 ff 00 00 00       	and    eax,0xff
c001b4a6:	6a 00                	push   0x0
c001b4a8:	6a 00                	push   0x0
c001b4aa:	50                   	push   eax
c001b4ab:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b4ae:	ff d2                	call   edx
c001b4b0:	83 c4 10             	add    esp,0x10
c001b4b3:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b4b6:	e9 6e ff ff ff       	jmp    c001b429 <apicOpen()+0x1b>
c001b4bb:	c6 05 a0 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025ba0,0x1
c001b4c2:	e8 dd fe ff ff       	call   c001b3a4 <apicGetBase()>
c001b4c7:	05 f0 00 00 00       	add    eax,0xf0
c001b4cc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b4cf:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b4d2:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4d4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b4d7:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b4de:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b4e5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b4e8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b4eb:	89 10                	mov    DWORD PTR [eax],edx
c001b4ed:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b4f4:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c001b4f9:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b4fc:	7d 70                	jge    c001b56e <apicOpen()+0x160>
c001b4fe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b501:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b508:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b50b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b50e:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b515:	c1 e8 08             	shr    eax,0x8
c001b518:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b51c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b51f:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b526:	c1 e8 18             	shr    eax,0x18
c001b529:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b52c:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b530:	75 37                	jne    c001b569 <apicOpen()+0x15b>
c001b532:	e8 6d fe ff ff       	call   c001b3a4 <apicGetBase()>
c001b537:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b53b:	75 07                	jne    c001b544 <apicOpen()+0x136>
c001b53d:	ba 60 03 00 00       	mov    edx,0x360
c001b542:	eb 05                	jmp    c001b549 <apicOpen()+0x13b>
c001b544:	ba 50 03 00 00       	mov    edx,0x350
c001b549:	01 d0                	add    eax,edx
c001b54b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b54e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b551:	8b 00                	mov    eax,DWORD PTR [eax]
c001b553:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b556:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b55d:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b561:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b564:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b567:	89 10                	mov    DWORD PTR [eax],edx
c001b569:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b56c:	eb 86                	jmp    c001b4f4 <apicOpen()+0xe6>
c001b56e:	90                   	nop
c001b56f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b572:	c9                   	leave  
c001b573:	c3                   	ret    

c001b574 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b574:	55                   	push   ebp
c001b575:	89 e5                	mov    ebp,esp
c001b577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b57a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b580:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b583:	72 1d                	jb     c001b5a2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b588:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b58e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b591:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b597:	01 d0                	add    eax,edx
c001b599:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b59c:	73 04                	jae    c001b5a2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b59e:	b0 01                	mov    al,0x1
c001b5a0:	eb 02                	jmp    c001b5a4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b5a2:	b0 00                	mov    al,0x0
c001b5a4:	5d                   	pop    ebp
c001b5a5:	c3                   	ret    

c001b5a6 <IOAPIC::read(int)>:
c001b5a6:	55                   	push   ebp
c001b5a7:	89 e5                	mov    ebp,esp
c001b5a9:	83 ec 10             	sub    esp,0x10
c001b5ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5af:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b5b5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b5b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b5bb:	31 d2                	xor    edx,edx
c001b5bd:	88 c2                	mov    dl,al
c001b5bf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b5c2:	89 10                	mov    DWORD PTR [eax],edx
c001b5c4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b5c7:	83 c0 10             	add    eax,0x10
c001b5ca:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5cc:	c9                   	leave  
c001b5cd:	c3                   	ret    

c001b5ce <IOAPIC::open(int, int, void*)>:
c001b5ce:	55                   	push   ebp
c001b5cf:	89 e5                	mov    ebp,esp
c001b5d1:	57                   	push   edi
c001b5d2:	56                   	push   esi
c001b5d3:	53                   	push   ebx
c001b5d4:	83 ec 04             	sub    esp,0x4
c001b5d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5da:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b5dd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b5e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b5ec:	8b 14 85 c0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb840]
c001b5f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5f6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b5fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5ff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b605:	8b 14 85 40 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb7c0]
c001b60c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b60f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b615:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b618:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b61e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b621:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b627:	89 c6                	mov    esi,eax
c001b629:	81 e6 ff 00 00 00    	and    esi,0xff
c001b62f:	89 d0                	mov    eax,edx
c001b631:	ba 00 00 00 00       	mov    edx,0x0
c001b636:	89 c7                	mov    edi,eax
c001b638:	83 e7 ff             	and    edi,0xffffffff
c001b63b:	89 f9                	mov    ecx,edi
c001b63d:	89 d0                	mov    eax,edx
c001b63f:	25 ff 00 00 00       	and    eax,0xff
c001b644:	89 c3                	mov    ebx,eax
c001b646:	89 c8                	mov    eax,ecx
c001b648:	89 da                	mov    edx,ebx
c001b64a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b64d:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b650:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b654:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b658:	83 e0 00             	and    eax,0x0
c001b65b:	09 d0                	or     eax,edx
c001b65d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b664:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b66a:	8d 50 01             	lea    edx,[eax+0x1]
c001b66d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b670:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b676:	31 d2                	xor    edx,edx
c001b678:	88 c2                	mov    dl,al
c001b67a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b67d:	83 c2 08             	add    edx,0x8
c001b680:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b684:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b68a:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b690:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b694:	6a 01                	push   0x1
c001b696:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b699:	e8 08 ff ff ff       	call   c001b5a6 <IOAPIC::read(int)>
c001b69e:	83 c4 08             	add    esp,0x8
c001b6a1:	c1 f8 10             	sar    eax,0x10
c001b6a4:	25 ff 00 00 00       	and    eax,0xff
c001b6a9:	8d 50 01             	lea    edx,[eax+0x1]
c001b6ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6af:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b6b5:	b8 00 00 00 00       	mov    eax,0x0
c001b6ba:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b6bd:	5b                   	pop    ebx
c001b6be:	5e                   	pop    esi
c001b6bf:	5f                   	pop    edi
c001b6c0:	5d                   	pop    ebp
c001b6c1:	c3                   	ret    

c001b6c2 <IOAPIC::write(int, int)>:
c001b6c2:	55                   	push   ebp
c001b6c3:	89 e5                	mov    ebp,esp
c001b6c5:	83 ec 10             	sub    esp,0x10
c001b6c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6cb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b6d1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b6d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6d7:	31 d2                	xor    edx,edx
c001b6d9:	88 c2                	mov    dl,al
c001b6db:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6de:	89 10                	mov    DWORD PTR [eax],edx
c001b6e0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6e3:	8d 50 10             	lea    edx,[eax+0x10]
c001b6e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b6e9:	89 02                	mov    DWORD PTR [edx],eax
c001b6eb:	90                   	nop
c001b6ec:	c9                   	leave  
c001b6ed:	c3                   	ret    

c001b6ee <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b6ee:	55                   	push   ebp
c001b6ef:	89 e5                	mov    ebp,esp
c001b6f1:	53                   	push   ebx
c001b6f2:	83 ec 2c             	sub    esp,0x2c
c001b6f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6f8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b6fb:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b6fe:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b701:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b704:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b707:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b70a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b70d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b710:	88 d8                	mov    al,bl
c001b712:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b715:	88 c8                	mov    al,cl
c001b717:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b71a:	88 d0                	mov    al,dl
c001b71c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b71f:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b722:	25 ff 00 00 00       	and    eax,0xff
c001b727:	83 c0 08             	add    eax,0x8
c001b72a:	01 c0                	add    eax,eax
c001b72c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b72f:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b732:	25 ff 00 00 00       	and    eax,0xff
c001b737:	83 c0 08             	add    eax,0x8
c001b73a:	01 c0                	add    eax,eax
c001b73c:	40                   	inc    eax
c001b73d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b740:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b743:	50                   	push   eax
c001b744:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b747:	e8 5a fe ff ff       	call   c001b5a6 <IOAPIC::read(int)>
c001b74c:	83 c4 08             	add    esp,0x8
c001b74f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b752:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b759:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b75c:	c1 e0 18             	shl    eax,0x18
c001b75f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b762:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b765:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b768:	52                   	push   edx
c001b769:	50                   	push   eax
c001b76a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b76d:	e8 50 ff ff ff       	call   c001b6c2 <IOAPIC::write(int, int)>
c001b772:	83 c4 0c             	add    esp,0xc
c001b775:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b778:	50                   	push   eax
c001b779:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b77c:	e8 25 fe ff ff       	call   c001b5a6 <IOAPIC::read(int)>
c001b781:	83 c4 08             	add    esp,0x8
c001b784:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b787:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b78e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b795:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b79c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b7a0:	74 09                	je     c001b7ab <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b7a2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b7a9:	eb 07                	jmp    c001b7b2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b7ab:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b7b2:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b7b6:	74 09                	je     c001b7c1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b7b8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b7bf:	eb 07                	jmp    c001b7c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b7c1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b7c8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b7cf:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b7d2:	25 ff 00 00 00       	and    eax,0xff
c001b7d7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b7da:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b7dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b7e0:	52                   	push   edx
c001b7e1:	50                   	push   eax
c001b7e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7e5:	e8 d8 fe ff ff       	call   c001b6c2 <IOAPIC::write(int, int)>
c001b7ea:	83 c4 0c             	add    esp,0xc
c001b7ed:	90                   	nop
c001b7ee:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b7f1:	c9                   	leave  
c001b7f2:	c3                   	ret    
c001b7f3:	90                   	nop

c001b7f4 <APICTimer::close(int, int, void*)>:
c001b7f4:	b8 00 00 00 00       	mov    eax,0x0
c001b7f9:	c3                   	ret    
c001b7fa:	66 90                	xchg   ax,ax

c001b7fc <apicTimerHandler(regs*, void*)>:
c001b7fc:	83 ec 0c             	sub    esp,0xc
c001b7ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b803:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b805:	b8 10 27 00 00       	mov    eax,0x2710
c001b80a:	ba 00 00 00 00       	mov    edx,0x0
c001b80f:	f7 f1                	div    ecx
c001b811:	83 ec 0c             	sub    esp,0xc
c001b814:	50                   	push   eax
c001b815:	e8 d2 19 ff ff       	call   c000d1ec <timerHandler(unsigned int)>
c001b81a:	83 c4 10             	add    esp,0x10
c001b81d:	90                   	nop
c001b81e:	83 c4 0c             	add    esp,0xc
c001b821:	c3                   	ret    
c001b822:	66 90                	xchg   ax,ax

c001b824 <APICTimer::open(int, int, void*)>:
c001b824:	83 ec 0c             	sub    esp,0xc
c001b827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b82b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b82d:	83 c0 24             	add    eax,0x24
c001b830:	8b 00                	mov    eax,DWORD PTR [eax]
c001b832:	83 ec 08             	sub    esp,0x8
c001b835:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b839:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b83d:	ff d0                	call   eax
c001b83f:	83 c4 10             	add    esp,0x10
c001b842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b846:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b84a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b854:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b858:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b85e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b862:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b868:	83 ec 0c             	sub    esp,0xc
c001b86b:	51                   	push   ecx
c001b86c:	6a 01                	push   0x1
c001b86e:	68 fc b7 01 c0       	push   0xc001b7fc
c001b873:	52                   	push   edx
c001b874:	50                   	push   eax
c001b875:	e8 4a 00 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b87a:	83 c4 20             	add    esp,0x20
c001b87d:	89 c2                	mov    edx,eax
c001b87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b883:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b889:	b8 00 00 00 00       	mov    eax,0x0
c001b88e:	83 c4 0c             	add    esp,0xc
c001b891:	c3                   	ret    
c001b892:	66 90                	xchg   ax,ax

c001b894 <APICTimer::write(int)>:
c001b894:	83 ec 0c             	sub    esp,0xc
c001b897:	83 ec 0c             	sub    esp,0xc
c001b89a:	68 b8 f6 01 c0       	push   0xc001f6b8
c001b89f:	e8 b7 48 ff ff       	call   c001015b <KePanic(char const*)>
c001b8a4:	83 c4 10             	add    esp,0x10
c001b8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8af:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8b5:	90                   	nop
c001b8b6:	83 c4 0c             	add    esp,0xc
c001b8b9:	c3                   	ret    
c001b8ba:	66 90                	xchg   ax,ax

c001b8bc <APICTimer::APICTimer()>:
c001b8bc:	83 ec 0c             	sub    esp,0xc
c001b8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c3:	83 ec 08             	sub    esp,0x8
c001b8c6:	68 c8 f6 01 c0       	push   0xc001f6c8
c001b8cb:	50                   	push   eax
c001b8cc:	e8 4f 18 ff ff       	call   c000d120 <Timer::Timer(char const*)>
c001b8d1:	83 c4 10             	add    esp,0x10
c001b8d4:	ba dc f6 01 c0       	mov    edx,0xc001f6dc
c001b8d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8dd:	89 10                	mov    DWORD PTR [eax],edx
c001b8df:	90                   	nop
c001b8e0:	83 c4 0c             	add    esp,0xc
c001b8e3:	c3                   	ret    

c001b8e4 <PIT::write(int)>:
c001b8e4:	83 ec 10             	sub    esp,0x10
c001b8e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8ef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8f9:	a3 a4 5b 02 c0       	mov    ds:0xc0025ba4,eax
c001b8fe:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b903:	99                   	cdq    
c001b904:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b908:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b90c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b913:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b918:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b91c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b921:	ee                   	out    dx,al
c001b922:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b926:	25 ff 00 00 00       	and    eax,0xff
c001b92b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b932:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b936:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b93a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b93f:	ee                   	out    dx,al
c001b940:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b944:	c1 f8 08             	sar    eax,0x8
c001b947:	25 ff 00 00 00       	and    eax,0xff
c001b94c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b953:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b957:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b95b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b960:	ee                   	out    dx,al
c001b961:	90                   	nop
c001b962:	83 c4 10             	add    esp,0x10
c001b965:	c3                   	ret    
c001b966:	66 90                	xchg   ax,ax

c001b968 <pitHandler(regs*, void*)>:
c001b968:	83 ec 0c             	sub    esp,0xc
c001b96b:	8b 0d a4 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba4
c001b971:	b8 10 27 00 00       	mov    eax,0x2710
c001b976:	99                   	cdq    
c001b977:	f7 f9                	idiv   ecx
c001b979:	83 ec 0c             	sub    esp,0xc
c001b97c:	50                   	push   eax
c001b97d:	e8 6a 18 ff ff       	call   c000d1ec <timerHandler(unsigned int)>
c001b982:	83 c4 10             	add    esp,0x10
c001b985:	90                   	nop
c001b986:	83 c4 0c             	add    esp,0xc
c001b989:	c3                   	ret    
c001b98a:	66 90                	xchg   ax,ax

c001b98c <PIT::open(int, int, void*)>:
c001b98c:	83 ec 0c             	sub    esp,0xc
c001b98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b993:	8b 00                	mov    eax,DWORD PTR [eax]
c001b995:	83 c0 24             	add    eax,0x24
c001b998:	8b 00                	mov    eax,DWORD PTR [eax]
c001b99a:	83 ec 08             	sub    esp,0x8
c001b99d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9a5:	ff d0                	call   eax
c001b9a7:	83 c4 10             	add    esp,0x10
c001b9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ae:	83 ec 0c             	sub    esp,0xc
c001b9b1:	6a 00                	push   0x0
c001b9b3:	6a 01                	push   0x1
c001b9b5:	68 68 b9 01 c0       	push   0xc001b968
c001b9ba:	6a 00                	push   0x0
c001b9bc:	50                   	push   eax
c001b9bd:	e8 02 ff fe ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9c2:	83 c4 20             	add    esp,0x20
c001b9c5:	89 c2                	mov    edx,eax
c001b9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9cb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b9d1:	b8 00 00 00 00       	mov    eax,0x0
c001b9d6:	83 c4 0c             	add    esp,0xc
c001b9d9:	c3                   	ret    
c001b9da:	66 90                	xchg   ax,ax

c001b9dc <PIT::close(int, int, void*)>:
c001b9dc:	83 ec 0c             	sub    esp,0xc
c001b9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f1:	6a 01                	push   0x1
c001b9f3:	68 68 b9 01 c0       	push   0xc001b968
c001b9f8:	6a 00                	push   0x0
c001b9fa:	50                   	push   eax
c001b9fb:	e8 fa fe fe ff       	call   c000b8fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ba00:	83 c4 10             	add    esp,0x10
c001ba03:	b8 00 00 00 00       	mov    eax,0x0
c001ba08:	83 c4 0c             	add    esp,0xc
c001ba0b:	c3                   	ret    

c001ba0c <PIT::PIT()>:
c001ba0c:	83 ec 0c             	sub    esp,0xc
c001ba0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba13:	83 ec 08             	sub    esp,0x8
c001ba16:	68 04 f7 01 c0       	push   0xc001f704
c001ba1b:	50                   	push   eax
c001ba1c:	e8 ff 16 ff ff       	call   c000d120 <Timer::Timer(char const*)>
c001ba21:	83 c4 10             	add    esp,0x10
c001ba24:	ba 2c f7 01 c0       	mov    edx,0xc001f72c
c001ba29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2d:	89 10                	mov    DWORD PTR [eax],edx
c001ba2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba39:	31 d2                	xor    edx,edx
c001ba3b:	88 c2                	mov    dl,al
c001ba3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba41:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ba48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba52:	31 d2                	xor    edx,edx
c001ba54:	88 c2                	mov    dl,al
c001ba56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ba5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba63:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba69:	8d 50 01             	lea    edx,[eax+0x1]
c001ba6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba70:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ba76:	31 d2                	xor    edx,edx
c001ba78:	88 c2                	mov    dl,al
c001ba7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ba82:	83 e1 3f             	and    ecx,0x3f
c001ba85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ba89:	90                   	nop
c001ba8a:	83 c4 0c             	add    esp,0xc
c001ba8d:	c3                   	ret    
c001ba8e:	66 90                	xchg   ax,ax

c001ba90 <avxDetect>:
c001ba90:	b8 01 00 00 00       	mov    eax,0x1
c001ba95:	0f a2                	cpuid  
c001ba97:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ba9d:	74 15                	je     c001bab4 <avxDetect.noAVX>
c001ba9f:	b8 01 00 00 00       	mov    eax,0x1
c001baa4:	0f a2                	cpuid  
c001baa6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001baac:	74 06                	je     c001bab4 <avxDetect.noAVX>
c001baae:	b8 01 00 00 00       	mov    eax,0x1
c001bab3:	c3                   	ret    

c001bab4 <avxDetect.noAVX>:
c001bab4:	b8 00 00 00 00       	mov    eax,0x0
c001bab9:	c3                   	ret    

c001baba <avxSave>:
c001baba:	53                   	push   ebx
c001babb:	52                   	push   edx
c001babc:	31 c0                	xor    eax,eax
c001babe:	48                   	dec    eax
c001babf:	89 c2                	mov    edx,eax
c001bac1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bac5:	0f ae 23             	xsave  [ebx]
c001bac8:	5a                   	pop    edx
c001bac9:	5b                   	pop    ebx
c001baca:	c3                   	ret    

c001bacb <avxLoad>:
c001bacb:	53                   	push   ebx
c001bacc:	52                   	push   edx
c001bacd:	31 c0                	xor    eax,eax
c001bacf:	48                   	dec    eax
c001bad0:	89 c2                	mov    edx,eax
c001bad2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bad6:	0f ae 2b             	xrstor [ebx]
c001bad9:	5a                   	pop    edx
c001bada:	5b                   	pop    ebx
c001badb:	c3                   	ret    

c001badc <avxInit>:
c001badc:	e8 b7 02 00 00       	call   c001bd98 <sseInit>
c001bae1:	50                   	push   eax
c001bae2:	51                   	push   ecx
c001bae3:	0f 20 e0             	mov    eax,cr4
c001bae6:	0d 00 00 04 00       	or     eax,0x40000
c001baeb:	0f 22 e0             	mov    cr4,eax
c001baee:	31 c9                	xor    ecx,ecx
c001baf0:	0f 01 d0             	xgetbv 
c001baf3:	0d 07 00 00 00       	or     eax,0x7
c001baf8:	0f 01 d1             	xsetbv 
c001bafb:	59                   	pop    ecx
c001bafc:	58                   	pop    eax
c001bafd:	c3                   	ret    

c001bafe <avxClose>:
c001bafe:	c3                   	ret    

c001baff <wouldSheSayYes>:
c001baff:	c3                   	ret    
c001bb00:	49                   	dec    ecx
c001bb01:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bb05:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bb09:	75 20                	jne    c001bb2b <isr0+0xb>
c001bb0b:	4e                   	dec    esi
c001bb0c:	79 61                	jns    c001bb6f <isr7+0x3>
c001bb0e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bb13:	66 90                	xchg   ax,ax
c001bb15:	66 90                	xchg   ax,ax
c001bb17:	66 90                	xchg   ax,ax
c001bb19:	66 90                	xchg   ax,ax
c001bb1b:	66 90                	xchg   ax,ax
c001bb1d:	66 90                	xchg   ax,ax
c001bb1f:	90                   	nop

c001bb20 <isr0>:
c001bb20:	fa                   	cli    
c001bb21:	68 00 00 00 00       	push   0x0
c001bb26:	68 00 00 00 00       	push   0x0
c001bb2b:	e9 44 01 00 00       	jmp    c001bc74 <int_common_stub>

c001bb30 <isr1>:
c001bb30:	fa                   	cli    
c001bb31:	6a 00                	push   0x0
c001bb33:	6a 01                	push   0x1
c001bb35:	e9 3a 01 00 00       	jmp    c001bc74 <int_common_stub>

c001bb3a <isr2>:
c001bb3a:	fa                   	cli    
c001bb3b:	6a 00                	push   0x0
c001bb3d:	6a 02                	push   0x2
c001bb3f:	e9 30 01 00 00       	jmp    c001bc74 <int_common_stub>

c001bb44 <isr3>:
c001bb44:	fa                   	cli    
c001bb45:	6a 00                	push   0x0
c001bb47:	6a 03                	push   0x3
c001bb49:	e9 26 01 00 00       	jmp    c001bc74 <int_common_stub>

c001bb4e <isr4>:
c001bb4e:	fa                   	cli    
c001bb4f:	6a 00                	push   0x0
c001bb51:	6a 04                	push   0x4
c001bb53:	e9 1c 01 00 00       	jmp    c001bc74 <int_common_stub>

c001bb58 <isr5>:
c001bb58:	fa                   	cli    
c001bb59:	6a 00                	push   0x0
c001bb5b:	6a 05                	push   0x5
c001bb5d:	e9 12 01 00 00       	jmp    c001bc74 <int_common_stub>

c001bb62 <isr6>:
c001bb62:	fa                   	cli    
c001bb63:	6a 00                	push   0x0
c001bb65:	6a 06                	push   0x6
c001bb67:	e9 08 01 00 00       	jmp    c001bc74 <int_common_stub>

c001bb6c <isr7>:
c001bb6c:	fa                   	cli    
c001bb6d:	6a 00                	push   0x0
c001bb6f:	6a 07                	push   0x7
c001bb71:	e9 fe 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bb76 <isr8>:
c001bb76:	fa                   	cli    
c001bb77:	6a 08                	push   0x8
c001bb79:	e9 f6 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bb7e <isr9>:
c001bb7e:	fa                   	cli    
c001bb7f:	6a 00                	push   0x0
c001bb81:	6a 09                	push   0x9
c001bb83:	e9 ec 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bb88 <isr10>:
c001bb88:	fa                   	cli    
c001bb89:	6a 0a                	push   0xa
c001bb8b:	e9 e4 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bb90 <isr11>:
c001bb90:	fa                   	cli    
c001bb91:	6a 0b                	push   0xb
c001bb93:	e9 dc 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bb98 <isr12>:
c001bb98:	fa                   	cli    
c001bb99:	6a 0c                	push   0xc
c001bb9b:	e9 d4 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bba0 <isr13>:
c001bba0:	fa                   	cli    
c001bba1:	6a 0d                	push   0xd
c001bba3:	e9 cc 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bba8 <isr14>:
c001bba8:	fa                   	cli    
c001bba9:	6a 0e                	push   0xe
c001bbab:	e9 c4 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bbb0 <isr15>:
c001bbb0:	fa                   	cli    
c001bbb1:	6a 00                	push   0x0
c001bbb3:	6a 0f                	push   0xf
c001bbb5:	e9 ba 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bbba <isr16>:
c001bbba:	fa                   	cli    
c001bbbb:	6a 00                	push   0x0
c001bbbd:	6a 10                	push   0x10
c001bbbf:	e9 b0 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bbc4 <isr17>:
c001bbc4:	fa                   	cli    
c001bbc5:	6a 00                	push   0x0
c001bbc7:	6a 11                	push   0x11
c001bbc9:	e9 a6 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bbce <isr18>:
c001bbce:	fa                   	cli    
c001bbcf:	6a 00                	push   0x0
c001bbd1:	6a 12                	push   0x12
c001bbd3:	e9 9c 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bbd8 <irq3>:
c001bbd8:	fa                   	cli    
c001bbd9:	6a 00                	push   0x0
c001bbdb:	6a 23                	push   0x23
c001bbdd:	e9 92 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bbe2 <irq4>:
c001bbe2:	fa                   	cli    
c001bbe3:	6a 00                	push   0x0
c001bbe5:	6a 24                	push   0x24
c001bbe7:	e9 88 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bbec <irq5>:
c001bbec:	fa                   	cli    
c001bbed:	6a 00                	push   0x0
c001bbef:	6a 25                	push   0x25
c001bbf1:	e9 7e 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bbf6 <irq6>:
c001bbf6:	fa                   	cli    
c001bbf7:	6a 00                	push   0x0
c001bbf9:	6a 26                	push   0x26
c001bbfb:	e9 74 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bc00 <irq7>:
c001bc00:	fa                   	cli    
c001bc01:	6a 00                	push   0x0
c001bc03:	6a 27                	push   0x27
c001bc05:	e9 6a 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bc0a <irq8>:
c001bc0a:	fa                   	cli    
c001bc0b:	6a 00                	push   0x0
c001bc0d:	6a 28                	push   0x28
c001bc0f:	e9 60 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bc14 <irq9>:
c001bc14:	fa                   	cli    
c001bc15:	6a 00                	push   0x0
c001bc17:	6a 29                	push   0x29
c001bc19:	e9 56 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bc1e <irq10>:
c001bc1e:	fa                   	cli    
c001bc1f:	6a 00                	push   0x0
c001bc21:	6a 2a                	push   0x2a
c001bc23:	e9 4c 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bc28 <irq11>:
c001bc28:	fa                   	cli    
c001bc29:	6a 00                	push   0x0
c001bc2b:	6a 2b                	push   0x2b
c001bc2d:	e9 42 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bc32 <irq12>:
c001bc32:	fa                   	cli    
c001bc33:	6a 00                	push   0x0
c001bc35:	6a 2c                	push   0x2c
c001bc37:	e9 38 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bc3c <irq13>:
c001bc3c:	fa                   	cli    
c001bc3d:	6a 00                	push   0x0
c001bc3f:	6a 2d                	push   0x2d
c001bc41:	e9 2e 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bc46 <irq14>:
c001bc46:	fa                   	cli    
c001bc47:	6a 00                	push   0x0
c001bc49:	6a 2e                	push   0x2e
c001bc4b:	e9 24 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bc50 <irq15>:
c001bc50:	fa                   	cli    
c001bc51:	6a 00                	push   0x0
c001bc53:	6a 2f                	push   0x2f
c001bc55:	e9 1a 00 00 00       	jmp    c001bc74 <int_common_stub>

c001bc5a <irq1>:
c001bc5a:	fa                   	cli    
c001bc5b:	6a 00                	push   0x0
c001bc5d:	6a 21                	push   0x21
c001bc5f:	eb 13                	jmp    c001bc74 <int_common_stub>

c001bc61 <irq2>:
c001bc61:	fa                   	cli    
c001bc62:	6a 00                	push   0x0
c001bc64:	6a 22                	push   0x22
c001bc66:	eb 0c                	jmp    c001bc74 <int_common_stub>

c001bc68 <isr96>:
c001bc68:	6a 00                	push   0x0
c001bc6a:	6a 60                	push   0x60
c001bc6c:	fb                   	sti    
c001bc6d:	eb 37                	jmp    c001bca6 <syscall_common_stub>

c001bc6f <irq0>:
c001bc6f:	fa                   	cli    
c001bc70:	6a 00                	push   0x0
c001bc72:	6a 20                	push   0x20

c001bc74 <int_common_stub>:
c001bc74:	60                   	pusha  
c001bc75:	1e                   	push   ds
c001bc76:	06                   	push   es
c001bc77:	0f a0                	push   fs
c001bc79:	0f a8                	push   gs
c001bc7b:	66 b8 10 00          	mov    ax,0x10
c001bc7f:	66 8e d8             	mov    ds,ax
c001bc82:	66 8e c0             	mov    es,ax
c001bc85:	66 8e e0             	mov    fs,ax
c001bc88:	66 8e e8             	mov    gs,ax
c001bc8b:	54                   	push   esp
c001bc8c:	fc                   	cld    
c001bc8d:	e8 32 01 ff ff       	call   c000bdc4 <int_handler>
c001bc92:	81 c4 04 00 00 00    	add    esp,0x4
c001bc98:	0f a9                	pop    gs
c001bc9a:	0f a1                	pop    fs
c001bc9c:	07                   	pop    es
c001bc9d:	1f                   	pop    ds
c001bc9e:	61                   	popa   
c001bc9f:	81 c4 08 00 00 00    	add    esp,0x8
c001bca5:	cf                   	iret   

c001bca6 <syscall_common_stub>:
c001bca6:	60                   	pusha  
c001bca7:	1e                   	push   ds
c001bca8:	06                   	push   es
c001bca9:	0f a0                	push   fs
c001bcab:	0f a8                	push   gs
c001bcad:	66 b8 10 00          	mov    ax,0x10
c001bcb1:	66 8e d8             	mov    ds,ax
c001bcb4:	66 8e c0             	mov    es,ax
c001bcb7:	66 8e e0             	mov    fs,ax
c001bcba:	66 8e e8             	mov    gs,ax
c001bcbd:	54                   	push   esp
c001bcbe:	fc                   	cld    
c001bcbf:	e8 00 01 ff ff       	call   c000bdc4 <int_handler>
c001bcc4:	81 c4 04 00 00 00    	add    esp,0x4
c001bcca:	0f a9                	pop    gs
c001bccc:	0f a1                	pop    fs
c001bcce:	07                   	pop    es
c001bccf:	1f                   	pop    ds
c001bcd0:	e8 20 4a ff ff       	call   c00106f5 <KiCheckSignalZ>
c001bcd5:	3d 00 00 00 00       	cmp    eax,0x0
c001bcda:	74 1d                	je     c001bcf9 <syscall_common_stub.skipSignals>
c001bcdc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001bce0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bce4:	89 e3                	mov    ebx,esp
c001bce6:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001bce9:	51                   	push   ecx
c001bcea:	68 01 bd 01 c0       	push   0xc001bd01
c001bcef:	89 dc                	mov    esp,ebx
c001bcf1:	61                   	popa   
c001bcf2:	81 c4 08 00 00 00    	add    esp,0x8
c001bcf8:	cf                   	iret   

c001bcf9 <syscall_common_stub.skipSignals>:
c001bcf9:	61                   	popa   
c001bcfa:	81 c4 08 00 00 00    	add    esp,0x8
c001bd00:	cf                   	iret   

c001bd01 <irq16>:
c001bd01:	fa                   	cli    
c001bd02:	6a 00                	push   0x0
c001bd04:	6a 30                	push   0x30
c001bd06:	e9 69 ff ff ff       	jmp    c001bc74 <int_common_stub>

c001bd0b <irq17>:
c001bd0b:	fa                   	cli    
c001bd0c:	6a 00                	push   0x0
c001bd0e:	6a 31                	push   0x31
c001bd10:	e9 5f ff ff ff       	jmp    c001bc74 <int_common_stub>

c001bd15 <irq18>:
c001bd15:	fa                   	cli    
c001bd16:	6a 00                	push   0x0
c001bd18:	6a 32                	push   0x32
c001bd1a:	e9 55 ff ff ff       	jmp    c001bc74 <int_common_stub>

c001bd1f <irq19>:
c001bd1f:	fa                   	cli    
c001bd20:	6a 00                	push   0x0
c001bd22:	6a 33                	push   0x33
c001bd24:	e9 4b ff ff ff       	jmp    c001bc74 <int_common_stub>

c001bd29 <irq20>:
c001bd29:	fa                   	cli    
c001bd2a:	6a 00                	push   0x0
c001bd2c:	6a 34                	push   0x34
c001bd2e:	e9 41 ff ff ff       	jmp    c001bc74 <int_common_stub>

c001bd33 <irq21>:
c001bd33:	fa                   	cli    
c001bd34:	6a 00                	push   0x0
c001bd36:	6a 35                	push   0x35
c001bd38:	e9 37 ff ff ff       	jmp    c001bc74 <int_common_stub>

c001bd3d <irq22>:
c001bd3d:	fa                   	cli    
c001bd3e:	6a 00                	push   0x0
c001bd40:	6a 36                	push   0x36
c001bd42:	e9 2d ff ff ff       	jmp    c001bc74 <int_common_stub>

c001bd47 <irq23>:
c001bd47:	fa                   	cli    
c001bd48:	6a 00                	push   0x0
c001bd4a:	6a 37                	push   0x37
c001bd4c:	e9 23 ff ff ff       	jmp    c001bc74 <int_common_stub>
c001bd51:	66 90                	xchg   ax,ax
c001bd53:	66 90                	xchg   ax,ax
c001bd55:	66 90                	xchg   ax,ax
c001bd57:	66 90                	xchg   ax,ax
c001bd59:	66 90                	xchg   ax,ax
c001bd5b:	66 90                	xchg   ax,ax
c001bd5d:	66 90                	xchg   ax,ax
c001bd5f:	90                   	nop

c001bd60 <i386GetRDRAND>:
c001bd60:	b9 64 00 00 00       	mov    ecx,0x64

c001bd65 <retry>:
c001bd65:	0f c7 f0             	rdrand eax
c001bd68:	72 05                	jb     c001bd6f <retry.done>
c001bd6a:	e2 f9                	loop   c001bd65 <retry>

c001bd6c <retry.fail>:
c001bd6c:	31 c0                	xor    eax,eax
c001bd6e:	c3                   	ret    

c001bd6f <retry.done>:
c001bd6f:	c3                   	ret    

c001bd70 <absolutelyNoChanceInHell>:
c001bd70:	b8 01 00 00 00       	mov    eax,0x1
c001bd75:	0f a2                	cpuid  
c001bd77:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bd7d:	74 06                	je     c001bd85 <sseDetect.noSSE>
c001bd7f:	b8 01 00 00 00       	mov    eax,0x1
c001bd84:	c3                   	ret    

c001bd85 <sseDetect.noSSE>:
c001bd85:	31 c0                	xor    eax,eax
c001bd87:	c3                   	ret    

c001bd88 <sseSave>:
c001bd88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd8c:	0f ae 00             	fxsave [eax]
c001bd8f:	c3                   	ret    

c001bd90 <sseLoad>:
c001bd90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd94:	0f ae 08             	fxrstor [eax]
c001bd97:	c3                   	ret    

c001bd98 <sseInit>:
c001bd98:	e8 42 00 00 00       	call   c001bddf <x87Init>
c001bd9d:	0f 20 e0             	mov    eax,cr4
c001bda0:	66 0d 00 06          	or     ax,0x600
c001bda4:	0f 22 e0             	mov    cr4,eax
c001bda7:	c3                   	ret    

c001bda8 <sseClose>:
c001bda8:	c3                   	ret    
c001bda9:	66 90                	xchg   ax,ax
c001bdab:	66 90                	xchg   ax,ax
c001bdad:	66 90                	xchg   ax,ax
c001bdaf:	90                   	nop

c001bdb0 <value_37F>:
c001bdb0:	7f 03                	jg     c001bdb5 <value_37A+0x1>

c001bdb2 <value_37E>:
c001bdb2:	7e 03                	jle    c001bdb7 <x87Detect+0x1>

c001bdb4 <value_37A>:
c001bdb4:	7a 03                	jp     c001bdb9 <x87Detect+0x3>

c001bdb6 <x87Detect>:
c001bdb6:	b8 01 00 00 00       	mov    eax,0x1
c001bdbb:	0f a2                	cpuid  
c001bdbd:	f7 c2 01 00 00 00    	test   edx,0x1
c001bdc3:	74 06                	je     c001bdcb <x87Detect.nox87>
c001bdc5:	b8 01 00 00 00       	mov    eax,0x1
c001bdca:	c3                   	ret    

c001bdcb <x87Detect.nox87>:
c001bdcb:	b8 00 00 00 00       	mov    eax,0x0
c001bdd0:	c3                   	ret    

c001bdd1 <x87Save>:
c001bdd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdd5:	dd 30                	fnsave [eax]
c001bdd7:	c3                   	ret    

c001bdd8 <x87Load>:
c001bdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bddc:	dd 20                	frstor [eax]
c001bdde:	c3                   	ret    

c001bddf <x87Init>:
c001bddf:	0f 20 c0             	mov    eax,cr0
c001bde2:	66 25 fb ff          	and    ax,0xfffb
c001bde6:	66 0d 22 00          	or     ax,0x22
c001bdea:	0f 22 c0             	mov    cr0,eax
c001bded:	db e3                	fninit 
c001bdef:	0f 06                	clts   
c001bdf1:	d9 2d b4 bd 01 c0    	fldcw  WORD PTR ds:0xc001bdb4
c001bdf7:	c3                   	ret    

c001bdf8 <x87Close>:
c001bdf8:	c3                   	ret    
c001bdf9:	66 90                	xchg   ax,ax
c001bdfb:	90                   	nop

c001bdfc <__do_global_ctors_aux>:
c001bdfc:	a1 ac cd 01 c0       	mov    eax,ds:0xc001cdac
c001be01:	83 f8 ff             	cmp    eax,0xffffffff
c001be04:	74 1a                	je     c001be20 <__do_global_ctors_aux+0x24>
c001be06:	55                   	push   ebp
c001be07:	89 e5                	mov    ebp,esp
c001be09:	53                   	push   ebx
c001be0a:	52                   	push   edx
c001be0b:	bb ac cd 01 c0       	mov    ebx,0xc001cdac
c001be10:	ff d0                	call   eax
c001be12:	83 eb 04             	sub    ebx,0x4
c001be15:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be17:	83 f8 ff             	cmp    eax,0xffffffff
c001be1a:	75 f4                	jne    c001be10 <__do_global_ctors_aux+0x14>
c001be1c:	58                   	pop    eax
c001be1d:	5b                   	pop    ebx
c001be1e:	5d                   	pop    ebp
c001be1f:	c3                   	ret    
c001be20:	c3                   	ret    
c001be21:	66 90                	xchg   ax,ax
c001be23:	90                   	nop

c001be24 <__divdi3>:
c001be24:	55                   	push   ebp
c001be25:	57                   	push   edi
c001be26:	56                   	push   esi
c001be27:	53                   	push   ebx
c001be28:	83 ec 1c             	sub    esp,0x1c
c001be2b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be33:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001be36:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001be3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be3e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001be42:	85 db                	test   ebx,ebx
c001be44:	0f 88 8e 00 00 00    	js     c001bed8 <__divdi3+0xb4>
c001be4a:	89 dd                	mov    ebp,ebx
c001be4c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001be54:	89 d3                	mov    ebx,edx
c001be56:	85 d2                	test   edx,edx
c001be58:	79 0d                	jns    c001be67 <__divdi3+0x43>
c001be5a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001be5e:	f7 d8                	neg    eax
c001be60:	83 d2 00             	adc    edx,0x0
c001be63:	f7 da                	neg    edx
c001be65:	89 d3                	mov    ebx,edx
c001be67:	89 c7                	mov    edi,eax
c001be69:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001be6c:	85 db                	test   ebx,ebx
c001be6e:	75 48                	jne    c001beb8 <__divdi3+0x94>
c001be70:	39 ef                	cmp    edi,ebp
c001be72:	76 24                	jbe    c001be98 <__divdi3+0x74>
c001be74:	89 ea                	mov    edx,ebp
c001be76:	f7 f7                	div    edi
c001be78:	89 c1                	mov    ecx,eax
c001be7a:	31 f6                	xor    esi,esi
c001be7c:	89 c8                	mov    eax,ecx
c001be7e:	89 f2                	mov    edx,esi
c001be80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001be84:	85 c9                	test   ecx,ecx
c001be86:	74 07                	je     c001be8f <__divdi3+0x6b>
c001be88:	f7 d8                	neg    eax
c001be8a:	83 d2 00             	adc    edx,0x0
c001be8d:	f7 da                	neg    edx
c001be8f:	83 c4 1c             	add    esp,0x1c
c001be92:	5b                   	pop    ebx
c001be93:	5e                   	pop    esi
c001be94:	5f                   	pop    edi
c001be95:	5d                   	pop    ebp
c001be96:	c3                   	ret    
c001be97:	90                   	nop
c001be98:	85 ff                	test   edi,edi
c001be9a:	75 0b                	jne    c001bea7 <__divdi3+0x83>
c001be9c:	b8 01 00 00 00       	mov    eax,0x1
c001bea1:	31 d2                	xor    edx,edx
c001bea3:	f7 f3                	div    ebx
c001bea5:	89 c7                	mov    edi,eax
c001bea7:	31 d2                	xor    edx,edx
c001bea9:	89 e8                	mov    eax,ebp
c001beab:	f7 f7                	div    edi
c001bead:	89 c6                	mov    esi,eax
c001beaf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001beb2:	f7 f7                	div    edi
c001beb4:	89 c1                	mov    ecx,eax
c001beb6:	eb c4                	jmp    c001be7c <__divdi3+0x58>
c001beb8:	39 eb                	cmp    ebx,ebp
c001beba:	77 3c                	ja     c001bef8 <__divdi3+0xd4>
c001bebc:	0f bd f3             	bsr    esi,ebx
c001bebf:	83 f6 1f             	xor    esi,0x1f
c001bec2:	75 40                	jne    c001bf04 <__divdi3+0xe0>
c001bec4:	39 eb                	cmp    ebx,ebp
c001bec6:	72 09                	jb     c001bed1 <__divdi3+0xad>
c001bec8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001becb:	0f 87 97 00 00 00    	ja     c001bf68 <__divdi3+0x144>
c001bed1:	b9 01 00 00 00       	mov    ecx,0x1
c001bed6:	eb a4                	jmp    c001be7c <__divdi3+0x58>
c001bed8:	f7 d9                	neg    ecx
c001beda:	83 d3 00             	adc    ebx,0x0
c001bedd:	f7 db                	neg    ebx
c001bedf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bee2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bee6:	89 dd                	mov    ebp,ebx
c001bee8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bef0:	e9 5f ff ff ff       	jmp    c001be54 <__divdi3+0x30>
c001bef5:	8d 76 00             	lea    esi,[esi+0x0]
c001bef8:	31 f6                	xor    esi,esi
c001befa:	31 c9                	xor    ecx,ecx
c001befc:	e9 7b ff ff ff       	jmp    c001be7c <__divdi3+0x58>
c001bf01:	8d 76 00             	lea    esi,[esi+0x0]
c001bf04:	b8 20 00 00 00       	mov    eax,0x20
c001bf09:	29 f0                	sub    eax,esi
c001bf0b:	89 f1                	mov    ecx,esi
c001bf0d:	d3 e3                	shl    ebx,cl
c001bf0f:	89 fa                	mov    edx,edi
c001bf11:	88 c1                	mov    cl,al
c001bf13:	d3 ea                	shr    edx,cl
c001bf15:	09 da                	or     edx,ebx
c001bf17:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf1b:	89 f1                	mov    ecx,esi
c001bf1d:	d3 e7                	shl    edi,cl
c001bf1f:	89 eb                	mov    ebx,ebp
c001bf21:	88 c1                	mov    cl,al
c001bf23:	d3 eb                	shr    ebx,cl
c001bf25:	89 f1                	mov    ecx,esi
c001bf27:	d3 e5                	shl    ebp,cl
c001bf29:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bf2c:	88 c1                	mov    cl,al
c001bf2e:	d3 ea                	shr    edx,cl
c001bf30:	09 d5                	or     ebp,edx
c001bf32:	89 e8                	mov    eax,ebp
c001bf34:	89 da                	mov    edx,ebx
c001bf36:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bf3a:	89 d3                	mov    ebx,edx
c001bf3c:	89 c5                	mov    ebp,eax
c001bf3e:	f7 e7                	mul    edi
c001bf40:	39 d3                	cmp    ebx,edx
c001bf42:	72 18                	jb     c001bf5c <__divdi3+0x138>
c001bf44:	74 0a                	je     c001bf50 <__divdi3+0x12c>
c001bf46:	89 e9                	mov    ecx,ebp
c001bf48:	31 f6                	xor    esi,esi
c001bf4a:	e9 2d ff ff ff       	jmp    c001be7c <__divdi3+0x58>
c001bf4f:	90                   	nop
c001bf50:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bf53:	89 f1                	mov    ecx,esi
c001bf55:	d3 e7                	shl    edi,cl
c001bf57:	39 c7                	cmp    edi,eax
c001bf59:	73 eb                	jae    c001bf46 <__divdi3+0x122>
c001bf5b:	90                   	nop
c001bf5c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bf5f:	31 f6                	xor    esi,esi
c001bf61:	e9 16 ff ff ff       	jmp    c001be7c <__divdi3+0x58>
c001bf66:	66 90                	xchg   ax,ax
c001bf68:	31 c9                	xor    ecx,ecx
c001bf6a:	e9 0d ff ff ff       	jmp    c001be7c <__divdi3+0x58>
c001bf6f:	90                   	nop

c001bf70 <__moddi3>:
c001bf70:	55                   	push   ebp
c001bf71:	57                   	push   edi
c001bf72:	56                   	push   esi
c001bf73:	53                   	push   ebx
c001bf74:	83 ec 2c             	sub    esp,0x2c
c001bf77:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bf7b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bf7f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bf83:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bf87:	85 db                	test   ebx,ebx
c001bf89:	0f 88 85 00 00 00    	js     c001c014 <__moddi3+0xa4>
c001bf8f:	89 de                	mov    esi,ebx
c001bf91:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bf99:	89 d7                	mov    edi,edx
c001bf9b:	85 d2                	test   edx,edx
c001bf9d:	79 09                	jns    c001bfa8 <__moddi3+0x38>
c001bf9f:	f7 d8                	neg    eax
c001bfa1:	83 d2 00             	adc    edx,0x0
c001bfa4:	f7 da                	neg    edx
c001bfa6:	89 d7                	mov    edi,edx
c001bfa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfac:	89 cd                	mov    ebp,ecx
c001bfae:	85 ff                	test   edi,edi
c001bfb0:	75 52                	jne    c001c004 <__moddi3+0x94>
c001bfb2:	89 c3                	mov    ebx,eax
c001bfb4:	39 f0                	cmp    eax,esi
c001bfb6:	76 24                	jbe    c001bfdc <__moddi3+0x6c>
c001bfb8:	89 c8                	mov    eax,ecx
c001bfba:	89 f2                	mov    edx,esi
c001bfbc:	f7 f3                	div    ebx
c001bfbe:	89 d6                	mov    esi,edx
c001bfc0:	89 f0                	mov    eax,esi
c001bfc2:	31 d2                	xor    edx,edx
c001bfc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bfc8:	85 c9                	test   ecx,ecx
c001bfca:	74 07                	je     c001bfd3 <__moddi3+0x63>
c001bfcc:	f7 d8                	neg    eax
c001bfce:	83 d2 00             	adc    edx,0x0
c001bfd1:	f7 da                	neg    edx
c001bfd3:	83 c4 2c             	add    esp,0x2c
c001bfd6:	5b                   	pop    ebx
c001bfd7:	5e                   	pop    esi
c001bfd8:	5f                   	pop    edi
c001bfd9:	5d                   	pop    ebp
c001bfda:	c3                   	ret    
c001bfdb:	90                   	nop
c001bfdc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bfe0:	85 db                	test   ebx,ebx
c001bfe2:	75 0d                	jne    c001bff1 <__moddi3+0x81>
c001bfe4:	b8 01 00 00 00       	mov    eax,0x1
c001bfe9:	31 d2                	xor    edx,edx
c001bfeb:	f7 f7                	div    edi
c001bfed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bff1:	89 f0                	mov    eax,esi
c001bff3:	31 d2                	xor    edx,edx
c001bff5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bff9:	f7 f7                	div    edi
c001bffb:	89 e8                	mov    eax,ebp
c001bffd:	f7 f7                	div    edi
c001bfff:	89 d6                	mov    esi,edx
c001c001:	eb bd                	jmp    c001bfc0 <__moddi3+0x50>
c001c003:	90                   	nop
c001c004:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c008:	39 f7                	cmp    edi,esi
c001c00a:	76 20                	jbe    c001c02c <__moddi3+0xbc>
c001c00c:	89 c8                	mov    eax,ecx
c001c00e:	89 f2                	mov    edx,esi
c001c010:	eb b2                	jmp    c001bfc4 <__moddi3+0x54>
c001c012:	66 90                	xchg   ax,ax
c001c014:	f7 d9                	neg    ecx
c001c016:	83 d3 00             	adc    ebx,0x0
c001c019:	f7 db                	neg    ebx
c001c01b:	89 de                	mov    esi,ebx
c001c01d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c025:	e9 6f ff ff ff       	jmp    c001bf99 <__moddi3+0x29>
c001c02a:	66 90                	xchg   ax,ax
c001c02c:	0f bd c7             	bsr    eax,edi
c001c02f:	83 f0 1f             	xor    eax,0x1f
c001c032:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c036:	75 24                	jne    c001c05c <__moddi3+0xec>
c001c038:	39 f7                	cmp    edi,esi
c001c03a:	72 06                	jb     c001c042 <__moddi3+0xd2>
c001c03c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c040:	77 0c                	ja     c001c04e <__moddi3+0xde>
c001c042:	89 e9                	mov    ecx,ebp
c001c044:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c048:	19 fe                	sbb    esi,edi
c001c04a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c04e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c052:	89 f2                	mov    edx,esi
c001c054:	e9 6b ff ff ff       	jmp    c001bfc4 <__moddi3+0x54>
c001c059:	8d 76 00             	lea    esi,[esi+0x0]
c001c05c:	b8 20 00 00 00       	mov    eax,0x20
c001c061:	89 c2                	mov    edx,eax
c001c063:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c067:	29 da                	sub    edx,ebx
c001c069:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c06d:	88 d9                	mov    cl,bl
c001c06f:	d3 e7                	shl    edi,cl
c001c071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c075:	88 d1                	mov    cl,dl
c001c077:	d3 e8                	shr    eax,cl
c001c079:	09 c7                	or     edi,eax
c001c07b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c07f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c083:	89 d8                	mov    eax,ebx
c001c085:	88 d9                	mov    cl,bl
c001c087:	d3 e7                	shl    edi,cl
c001c089:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c08d:	89 f3                	mov    ebx,esi
c001c08f:	88 d1                	mov    cl,dl
c001c091:	d3 eb                	shr    ebx,cl
c001c093:	89 c7                	mov    edi,eax
c001c095:	88 c1                	mov    cl,al
c001c097:	d3 e6                	shl    esi,cl
c001c099:	89 e8                	mov    eax,ebp
c001c09b:	88 d1                	mov    cl,dl
c001c09d:	d3 e8                	shr    eax,cl
c001c09f:	09 f0                	or     eax,esi
c001c0a1:	89 f9                	mov    ecx,edi
c001c0a3:	d3 e5                	shl    ebp,cl
c001c0a5:	89 da                	mov    edx,ebx
c001c0a7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c0ab:	89 d3                	mov    ebx,edx
c001c0ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c0b1:	89 c6                	mov    esi,eax
c001c0b3:	89 d1                	mov    ecx,edx
c001c0b5:	39 d3                	cmp    ebx,edx
c001c0b7:	72 27                	jb     c001c0e0 <__moddi3+0x170>
c001c0b9:	74 21                	je     c001c0dc <__moddi3+0x16c>
c001c0bb:	29 f5                	sub    ebp,esi
c001c0bd:	19 cb                	sbb    ebx,ecx
c001c0bf:	89 de                	mov    esi,ebx
c001c0c1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c0c5:	d3 e6                	shl    esi,cl
c001c0c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0cb:	89 f9                	mov    ecx,edi
c001c0cd:	d3 ed                	shr    ebp,cl
c001c0cf:	09 ee                	or     esi,ebp
c001c0d1:	89 f0                	mov    eax,esi
c001c0d3:	d3 eb                	shr    ebx,cl
c001c0d5:	89 da                	mov    edx,ebx
c001c0d7:	e9 e8 fe ff ff       	jmp    c001bfc4 <__moddi3+0x54>
c001c0dc:	39 c5                	cmp    ebp,eax
c001c0de:	73 db                	jae    c001c0bb <__moddi3+0x14b>
c001c0e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c0e4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c0e8:	89 d1                	mov    ecx,edx
c001c0ea:	89 c6                	mov    esi,eax
c001c0ec:	eb cd                	jmp    c001c0bb <__moddi3+0x14b>
c001c0ee:	66 90                	xchg   ax,ax

c001c0f0 <__udivdi3>:
c001c0f0:	55                   	push   ebp
c001c0f1:	57                   	push   edi
c001c0f2:	56                   	push   esi
c001c0f3:	53                   	push   ebx
c001c0f4:	83 ec 1c             	sub    esp,0x1c
c001c0f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c0fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c0ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c103:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c107:	85 d2                	test   edx,edx
c001c109:	75 41                	jne    c001c14c <__udivdi3+0x5c>
c001c10b:	39 f7                	cmp    edi,esi
c001c10d:	76 15                	jbe    c001c124 <__udivdi3+0x34>
c001c10f:	89 e8                	mov    eax,ebp
c001c111:	89 f2                	mov    edx,esi
c001c113:	f7 f7                	div    edi
c001c115:	31 db                	xor    ebx,ebx
c001c117:	89 da                	mov    edx,ebx
c001c119:	83 c4 1c             	add    esp,0x1c
c001c11c:	5b                   	pop    ebx
c001c11d:	5e                   	pop    esi
c001c11e:	5f                   	pop    edi
c001c11f:	5d                   	pop    ebp
c001c120:	c3                   	ret    
c001c121:	8d 76 00             	lea    esi,[esi+0x0]
c001c124:	89 f9                	mov    ecx,edi
c001c126:	85 ff                	test   edi,edi
c001c128:	75 0b                	jne    c001c135 <__udivdi3+0x45>
c001c12a:	b8 01 00 00 00       	mov    eax,0x1
c001c12f:	31 d2                	xor    edx,edx
c001c131:	f7 f7                	div    edi
c001c133:	89 c1                	mov    ecx,eax
c001c135:	31 d2                	xor    edx,edx
c001c137:	89 f0                	mov    eax,esi
c001c139:	f7 f1                	div    ecx
c001c13b:	89 c3                	mov    ebx,eax
c001c13d:	89 e8                	mov    eax,ebp
c001c13f:	f7 f1                	div    ecx
c001c141:	89 da                	mov    edx,ebx
c001c143:	83 c4 1c             	add    esp,0x1c
c001c146:	5b                   	pop    ebx
c001c147:	5e                   	pop    esi
c001c148:	5f                   	pop    edi
c001c149:	5d                   	pop    ebp
c001c14a:	c3                   	ret    
c001c14b:	90                   	nop
c001c14c:	39 f2                	cmp    edx,esi
c001c14e:	77 1c                	ja     c001c16c <__udivdi3+0x7c>
c001c150:	0f bd da             	bsr    ebx,edx
c001c153:	83 f3 1f             	xor    ebx,0x1f
c001c156:	75 24                	jne    c001c17c <__udivdi3+0x8c>
c001c158:	39 f2                	cmp    edx,esi
c001c15a:	72 08                	jb     c001c164 <__udivdi3+0x74>
c001c15c:	39 ef                	cmp    edi,ebp
c001c15e:	0f 87 84 00 00 00    	ja     c001c1e8 <__udivdi3+0xf8>
c001c164:	b8 01 00 00 00       	mov    eax,0x1
c001c169:	eb ac                	jmp    c001c117 <__udivdi3+0x27>
c001c16b:	90                   	nop
c001c16c:	31 db                	xor    ebx,ebx
c001c16e:	31 c0                	xor    eax,eax
c001c170:	89 da                	mov    edx,ebx
c001c172:	83 c4 1c             	add    esp,0x1c
c001c175:	5b                   	pop    ebx
c001c176:	5e                   	pop    esi
c001c177:	5f                   	pop    edi
c001c178:	5d                   	pop    ebp
c001c179:	c3                   	ret    
c001c17a:	66 90                	xchg   ax,ax
c001c17c:	b8 20 00 00 00       	mov    eax,0x20
c001c181:	29 d8                	sub    eax,ebx
c001c183:	88 d9                	mov    cl,bl
c001c185:	d3 e2                	shl    edx,cl
c001c187:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c18b:	89 fa                	mov    edx,edi
c001c18d:	88 c1                	mov    cl,al
c001c18f:	d3 ea                	shr    edx,cl
c001c191:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c195:	09 d1                	or     ecx,edx
c001c197:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c19b:	88 d9                	mov    cl,bl
c001c19d:	d3 e7                	shl    edi,cl
c001c19f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1a3:	89 f7                	mov    edi,esi
c001c1a5:	88 c1                	mov    cl,al
c001c1a7:	d3 ef                	shr    edi,cl
c001c1a9:	88 d9                	mov    cl,bl
c001c1ab:	d3 e6                	shl    esi,cl
c001c1ad:	89 ea                	mov    edx,ebp
c001c1af:	88 c1                	mov    cl,al
c001c1b1:	d3 ea                	shr    edx,cl
c001c1b3:	09 d6                	or     esi,edx
c001c1b5:	89 f0                	mov    eax,esi
c001c1b7:	89 fa                	mov    edx,edi
c001c1b9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c1bd:	89 d7                	mov    edi,edx
c001c1bf:	89 c6                	mov    esi,eax
c001c1c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1c5:	39 d7                	cmp    edi,edx
c001c1c7:	72 13                	jb     c001c1dc <__udivdi3+0xec>
c001c1c9:	74 09                	je     c001c1d4 <__udivdi3+0xe4>
c001c1cb:	89 f0                	mov    eax,esi
c001c1cd:	31 db                	xor    ebx,ebx
c001c1cf:	e9 43 ff ff ff       	jmp    c001c117 <__udivdi3+0x27>
c001c1d4:	88 d9                	mov    cl,bl
c001c1d6:	d3 e5                	shl    ebp,cl
c001c1d8:	39 c5                	cmp    ebp,eax
c001c1da:	73 ef                	jae    c001c1cb <__udivdi3+0xdb>
c001c1dc:	8d 46 ff             	lea    eax,[esi-0x1]
c001c1df:	31 db                	xor    ebx,ebx
c001c1e1:	e9 31 ff ff ff       	jmp    c001c117 <__udivdi3+0x27>
c001c1e6:	66 90                	xchg   ax,ax
c001c1e8:	31 c0                	xor    eax,eax
c001c1ea:	e9 28 ff ff ff       	jmp    c001c117 <__udivdi3+0x27>
c001c1ef:	90                   	nop

c001c1f0 <__umoddi3>:
c001c1f0:	55                   	push   ebp
c001c1f1:	57                   	push   edi
c001c1f2:	56                   	push   esi
c001c1f3:	53                   	push   ebx
c001c1f4:	83 ec 1c             	sub    esp,0x1c
c001c1f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c1fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c1ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c203:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c207:	89 da                	mov    edx,ebx
c001c209:	85 c0                	test   eax,eax
c001c20b:	75 37                	jne    c001c244 <__umoddi3+0x54>
c001c20d:	39 df                	cmp    edi,ebx
c001c20f:	76 13                	jbe    c001c224 <__umoddi3+0x34>
c001c211:	89 f0                	mov    eax,esi
c001c213:	f7 f7                	div    edi
c001c215:	89 d0                	mov    eax,edx
c001c217:	31 d2                	xor    edx,edx
c001c219:	83 c4 1c             	add    esp,0x1c
c001c21c:	5b                   	pop    ebx
c001c21d:	5e                   	pop    esi
c001c21e:	5f                   	pop    edi
c001c21f:	5d                   	pop    ebp
c001c220:	c3                   	ret    
c001c221:	8d 76 00             	lea    esi,[esi+0x0]
c001c224:	89 fd                	mov    ebp,edi
c001c226:	85 ff                	test   edi,edi
c001c228:	75 0b                	jne    c001c235 <__umoddi3+0x45>
c001c22a:	b8 01 00 00 00       	mov    eax,0x1
c001c22f:	31 d2                	xor    edx,edx
c001c231:	f7 f7                	div    edi
c001c233:	89 c5                	mov    ebp,eax
c001c235:	89 d8                	mov    eax,ebx
c001c237:	31 d2                	xor    edx,edx
c001c239:	f7 f5                	div    ebp
c001c23b:	89 f0                	mov    eax,esi
c001c23d:	f7 f5                	div    ebp
c001c23f:	89 d0                	mov    eax,edx
c001c241:	eb d4                	jmp    c001c217 <__umoddi3+0x27>
c001c243:	90                   	nop
c001c244:	89 f1                	mov    ecx,esi
c001c246:	39 d8                	cmp    eax,ebx
c001c248:	76 0a                	jbe    c001c254 <__umoddi3+0x64>
c001c24a:	89 f0                	mov    eax,esi
c001c24c:	83 c4 1c             	add    esp,0x1c
c001c24f:	5b                   	pop    ebx
c001c250:	5e                   	pop    esi
c001c251:	5f                   	pop    edi
c001c252:	5d                   	pop    ebp
c001c253:	c3                   	ret    
c001c254:	0f bd e8             	bsr    ebp,eax
c001c257:	83 f5 1f             	xor    ebp,0x1f
c001c25a:	75 1c                	jne    c001c278 <__umoddi3+0x88>
c001c25c:	39 d8                	cmp    eax,ebx
c001c25e:	72 04                	jb     c001c264 <__umoddi3+0x74>
c001c260:	39 f7                	cmp    edi,esi
c001c262:	77 08                	ja     c001c26c <__umoddi3+0x7c>
c001c264:	89 da                	mov    edx,ebx
c001c266:	29 fe                	sub    esi,edi
c001c268:	19 c2                	sbb    edx,eax
c001c26a:	89 f1                	mov    ecx,esi
c001c26c:	89 c8                	mov    eax,ecx
c001c26e:	83 c4 1c             	add    esp,0x1c
c001c271:	5b                   	pop    ebx
c001c272:	5e                   	pop    esi
c001c273:	5f                   	pop    edi
c001c274:	5d                   	pop    ebp
c001c275:	c3                   	ret    
c001c276:	66 90                	xchg   ax,ax
c001c278:	ba 20 00 00 00       	mov    edx,0x20
c001c27d:	29 ea                	sub    edx,ebp
c001c27f:	89 e9                	mov    ecx,ebp
c001c281:	d3 e0                	shl    eax,cl
c001c283:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c287:	89 f8                	mov    eax,edi
c001c289:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c28d:	88 d1                	mov    cl,dl
c001c28f:	d3 e8                	shr    eax,cl
c001c291:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c295:	09 c1                	or     ecx,eax
c001c297:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c29b:	89 e9                	mov    ecx,ebp
c001c29d:	d3 e7                	shl    edi,cl
c001c29f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2a3:	89 d8                	mov    eax,ebx
c001c2a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c2a9:	88 d1                	mov    cl,dl
c001c2ab:	d3 e8                	shr    eax,cl
c001c2ad:	89 c7                	mov    edi,eax
c001c2af:	89 e9                	mov    ecx,ebp
c001c2b1:	d3 e3                	shl    ebx,cl
c001c2b3:	89 f0                	mov    eax,esi
c001c2b5:	88 d1                	mov    cl,dl
c001c2b7:	d3 e8                	shr    eax,cl
c001c2b9:	09 d8                	or     eax,ebx
c001c2bb:	89 e9                	mov    ecx,ebp
c001c2bd:	d3 e6                	shl    esi,cl
c001c2bf:	89 f3                	mov    ebx,esi
c001c2c1:	89 fa                	mov    edx,edi
c001c2c3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2c7:	89 d1                	mov    ecx,edx
c001c2c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2cd:	89 c6                	mov    esi,eax
c001c2cf:	89 d7                	mov    edi,edx
c001c2d1:	39 d1                	cmp    ecx,edx
c001c2d3:	72 27                	jb     c001c2fc <__umoddi3+0x10c>
c001c2d5:	74 21                	je     c001c2f8 <__umoddi3+0x108>
c001c2d7:	89 ca                	mov    edx,ecx
c001c2d9:	29 f3                	sub    ebx,esi
c001c2db:	19 fa                	sbb    edx,edi
c001c2dd:	89 d0                	mov    eax,edx
c001c2df:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c2e3:	d3 e0                	shl    eax,cl
c001c2e5:	89 e9                	mov    ecx,ebp
c001c2e7:	d3 eb                	shr    ebx,cl
c001c2e9:	09 d8                	or     eax,ebx
c001c2eb:	d3 ea                	shr    edx,cl
c001c2ed:	83 c4 1c             	add    esp,0x1c
c001c2f0:	5b                   	pop    ebx
c001c2f1:	5e                   	pop    esi
c001c2f2:	5f                   	pop    edi
c001c2f3:	5d                   	pop    ebp
c001c2f4:	c3                   	ret    
c001c2f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c2f8:	39 c3                	cmp    ebx,eax
c001c2fa:	73 db                	jae    c001c2d7 <__umoddi3+0xe7>
c001c2fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c300:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c304:	89 d7                	mov    edi,edx
c001c306:	89 c6                	mov    esi,eax
c001c308:	eb cd                	jmp    c001c2d7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c30a <_init>:
c001c30a:	55                   	push   ebp
c001c30b:	89 e5                	mov    ebp,esp
c001c30d:	e8 e2 3d fe ff       	call   c00000f4 <frame_dummy>
c001c312:	e8 e5 fa ff ff       	call   c001bdfc <__do_global_ctors_aux>
c001c317:	5d                   	pop    ebp
c001c318:	c3                   	ret    

Disassembly of section .fini:

c001c319 <_fini>:
c001c319:	55                   	push   ebp
c001c31a:	89 e5                	mov    ebp,esp
c001c31c:	e8 63 3d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c321:	5d                   	pop    ebp
c001c322:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c324 <Computer::~Computer()>:
c001c324:	83 ec 0c             	sub    esp,0xc
c001c327:	ba d8 d5 01 c0       	mov    edx,0xc001d5d8
c001c32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c330:	89 10                	mov    DWORD PTR [eax],edx
c001c332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c336:	83 ec 0c             	sub    esp,0xc
c001c339:	50                   	push   eax
c001c33a:	e8 db f4 fe ff       	call   c000b81a <Device::~Device()>
c001c33f:	83 c4 10             	add    esp,0x10
c001c342:	90                   	nop
c001c343:	83 c4 0c             	add    esp,0xc
c001c346:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c348 <Computer::~Computer()>:
c001c348:	83 ec 0c             	sub    esp,0xc
c001c34b:	83 ec 0c             	sub    esp,0xc
c001c34e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c352:	e8 cd ff ff ff       	call   c001c324 <Computer::~Computer()>
c001c357:	83 c4 10             	add    esp,0x10
c001c35a:	83 ec 08             	sub    esp,0x8
c001c35d:	68 70 01 00 00       	push   0x170
c001c362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c366:	e8 77 e0 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c36b:	83 c4 10             	add    esp,0x10
c001c36e:	83 c4 0c             	add    esp,0xc
c001c371:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c372 <idleCommon()>:
c001c372:	83 ec 0c             	sub    esp,0xc
c001c375:	fa                   	cli    
c001c376:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001c37c:	e8 17 74 ff ff       	call   c0013798 <schedule()>
c001c381:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001c386:	48                   	dec    eax
c001c387:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001c38c:	75 01                	jne    c001c38f <idleCommon()+0x1d>
c001c38e:	fb                   	sti    
c001c38f:	83 c4 0c             	add    esp,0xc
c001c392:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c394 <LinkedList<UnixFile>::~LinkedList()>:
c001c394:	90                   	nop
c001c395:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c396 <LinkedList<UnixFile>::LinkedList()>:
c001c396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c39a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3d6:	90                   	nop
c001c3d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c3d8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c3d8:	83 ec 0c             	sub    esp,0xc
c001c3db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c3e0:	75 10                	jne    c001c3f2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c3e2:	83 ec 0c             	sub    esp,0xc
c001c3e5:	68 38 d8 01 c0       	push   0xc001d838
c001c3ea:	e8 6c 3d ff ff       	call   c001015b <KePanic(char const*)>
c001c3ef:	83 c4 10             	add    esp,0x10
c001c3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3f8:	85 c0                	test   eax,eax
c001c3fa:	74 34                	je     c001c430 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c400:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c403:	85 c0                	test   eax,eax
c001c405:	74 29                	je     c001c430 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c40b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c40e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c412:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c419:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c41d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c424:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c427:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c42e:	eb 65                	jmp    c001c495 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c434:	8b 00                	mov    eax,DWORD PTR [eax]
c001c436:	85 c0                	test   eax,eax
c001c438:	75 4b                	jne    c001c485 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c43e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c441:	85 c0                	test   eax,eax
c001c443:	75 40                	jne    c001c485 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c449:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c44d:	89 10                	mov    DWORD PTR [eax],edx
c001c44f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c453:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c457:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c45e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c461:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c46f:	85 c0                	test   eax,eax
c001c471:	74 22                	je     c001c495 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c473:	83 ec 0c             	sub    esp,0xc
c001c476:	68 5a d8 01 c0       	push   0xc001d85a
c001c47b:	e8 db 3c ff ff       	call   c001015b <KePanic(char const*)>
c001c480:	83 c4 10             	add    esp,0x10
c001c483:	eb 10                	jmp    c001c495 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c485:	83 ec 0c             	sub    esp,0xc
c001c488:	68 64 d8 01 c0       	push   0xc001d864
c001c48d:	e8 c9 3c ff ff       	call   c001015b <KePanic(char const*)>
c001c492:	83 c4 10             	add    esp,0x10
c001c495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c499:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c49c:	8d 50 01             	lea    edx,[eax+0x1]
c001c49f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4a6:	90                   	nop
c001c4a7:	83 c4 0c             	add    esp,0xc
c001c4aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c4ac <LinkedList<UnixFile>::getFirstElement()>:
c001c4ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c4b4 <LinkedList<UnixFile>::removeFirst()>:
c001c4b4:	83 ec 0c             	sub    esp,0xc
c001c4b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4bd:	85 c0                	test   eax,eax
c001c4bf:	75 12                	jne    c001c4d3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c4c1:	83 ec 0c             	sub    esp,0xc
c001c4c4:	68 70 d8 01 c0       	push   0xc001d870
c001c4c9:	e8 8d 3c ff ff       	call   c001015b <KePanic(char const*)>
c001c4ce:	83 c4 10             	add    esp,0x10
c001c4d1:	eb 7e                	jmp    c001c551 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c4d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4dd:	85 c0                	test   eax,eax
c001c4df:	74 10                	je     c001c4f1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c4e1:	83 ec 0c             	sub    esp,0xc
c001c4e4:	68 bb d8 01 c0       	push   0xc001d8bb
c001c4e9:	e8 6d 3c ff ff       	call   c001015b <KePanic(char const*)>
c001c4ee:	83 c4 10             	add    esp,0x10
c001c4f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4fa:	85 c0                	test   eax,eax
c001c4fc:	75 33                	jne    c001c531 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c502:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c50c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c517:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c51a:	83 f8 01             	cmp    eax,0x1
c001c51d:	74 21                	je     c001c540 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c51f:	83 ec 0c             	sub    esp,0xc
c001c522:	68 94 d8 01 c0       	push   0xc001d894
c001c527:	e8 2f 3c ff ff       	call   c001015b <KePanic(char const*)>
c001c52c:	83 c4 10             	add    esp,0x10
c001c52f:	eb 0f                	jmp    c001c540 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c535:	8b 00                	mov    eax,DWORD PTR [eax]
c001c537:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c53a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53e:	89 10                	mov    DWORD PTR [eax],edx
c001c540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c544:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c547:	8d 50 ff             	lea    edx,[eax-0x1]
c001c54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c551:	83 c4 0c             	add    esp,0xc
c001c554:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c556 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c556:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c55a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c55d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c55e <DriverlessDevice::~DriverlessDevice()>:
c001c55e:	ba fc de 01 c0       	mov    edx,0xc001defc
c001c563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c567:	89 10                	mov    DWORD PTR [eax],edx
c001c569:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c56d:	50                   	push   eax
c001c56e:	e8 a7 f2 fe ff       	call   c000b81a <Device::~Device()>
c001c573:	83 c4 04             	add    esp,0x4
c001c576:	90                   	nop
c001c577:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c578 <DriverlessDevice::~DriverlessDevice()>:
c001c578:	83 ec 0c             	sub    esp,0xc
c001c57b:	83 ec 0c             	sub    esp,0xc
c001c57e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c582:	e8 d7 ff ff ff       	call   c001c55e <DriverlessDevice::~DriverlessDevice()>
c001c587:	83 c4 10             	add    esp,0x10
c001c58a:	83 ec 08             	sub    esp,0x8
c001c58d:	68 58 01 00 00       	push   0x158
c001c592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c596:	e8 47 de fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c59b:	83 c4 10             	add    esp,0x10
c001c59e:	83 c4 0c             	add    esp,0xc
c001c5a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c5a2 <LinkedList<Device>::addElement(Device*)>:
c001c5a2:	83 ec 0c             	sub    esp,0xc
c001c5a5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c5aa:	75 10                	jne    c001c5bc <LinkedList<Device>::addElement(Device*)+0x1a>
c001c5ac:	83 ec 0c             	sub    esp,0xc
c001c5af:	68 38 d8 01 c0       	push   0xc001d838
c001c5b4:	e8 a2 3b ff ff       	call   c001015b <KePanic(char const*)>
c001c5b9:	83 c4 10             	add    esp,0x10
c001c5bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5c2:	85 c0                	test   eax,eax
c001c5c4:	74 3a                	je     c001c600 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c5c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5cd:	85 c0                	test   eax,eax
c001c5cf:	74 2f                	je     c001c600 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c5d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5dc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c5ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5f4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c5fe:	eb 68                	jmp    c001c668 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c604:	8b 00                	mov    eax,DWORD PTR [eax]
c001c606:	85 c0                	test   eax,eax
c001c608:	75 4e                	jne    c001c658 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c611:	85 c0                	test   eax,eax
c001c613:	75 43                	jne    c001c658 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c619:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c61d:	89 10                	mov    DWORD PTR [eax],edx
c001c61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c623:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c627:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c631:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c63b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c642:	85 c0                	test   eax,eax
c001c644:	74 22                	je     c001c668 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c646:	83 ec 0c             	sub    esp,0xc
c001c649:	68 5a d8 01 c0       	push   0xc001d85a
c001c64e:	e8 08 3b ff ff       	call   c001015b <KePanic(char const*)>
c001c653:	83 c4 10             	add    esp,0x10
c001c656:	eb 10                	jmp    c001c668 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c658:	83 ec 0c             	sub    esp,0xc
c001c65b:	68 64 d8 01 c0       	push   0xc001d864
c001c660:	e8 f6 3a ff ff       	call   c001015b <KePanic(char const*)>
c001c665:	83 c4 10             	add    esp,0x10
c001c668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c66c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c66f:	8d 50 01             	lea    edx,[eax+0x1]
c001c672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c676:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c679:	90                   	nop
c001c67a:	83 c4 0c             	add    esp,0xc
c001c67d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c67e <LinkedList<Device>::LinkedList()>:
c001c67e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c682:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c68c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c693:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c697:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c69e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6be:	90                   	nop
c001c6bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c6c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c6c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6c6:	85 c0                	test   eax,eax
c001c6c8:	75 0e                	jne    c001c6d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c6ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6d1:	85 c0                	test   eax,eax
c001c6d3:	75 03                	jne    c001c6d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c6d5:	b0 01                	mov    al,0x1
c001c6d7:	c3                   	ret    
c001c6d8:	b0 00                	mov    al,0x0
c001c6da:	90                   	nop
c001c6db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c6dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c6dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c6e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c6e4:	83 ec 0c             	sub    esp,0xc
c001c6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6ed:	85 c0                	test   eax,eax
c001c6ef:	75 17                	jne    c001c708 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c6f1:	83 ec 0c             	sub    esp,0xc
c001c6f4:	68 70 d8 01 c0       	push   0xc001d870
c001c6f9:	e8 5d 3a ff ff       	call   c001015b <KePanic(char const*)>
c001c6fe:	83 c4 10             	add    esp,0x10
c001c701:	e9 92 00 00 00       	jmp    c001c798 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c706:	66 90                	xchg   ax,ax
c001c708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c70f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c712:	85 c0                	test   eax,eax
c001c714:	0f 95 c0             	setne  al
c001c717:	84 c0                	test   al,al
c001c719:	74 11                	je     c001c72c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c71b:	83 ec 0c             	sub    esp,0xc
c001c71e:	68 bb d8 01 c0       	push   0xc001d8bb
c001c723:	e8 33 3a ff ff       	call   c001015b <KePanic(char const*)>
c001c728:	83 c4 10             	add    esp,0x10
c001c72b:	90                   	nop
c001c72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c730:	8b 00                	mov    eax,DWORD PTR [eax]
c001c732:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c735:	85 c0                	test   eax,eax
c001c737:	0f 94 c0             	sete   al
c001c73a:	84 c0                	test   al,al
c001c73c:	74 36                	je     c001c774 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c742:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c757:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c75a:	83 f8 01             	cmp    eax,0x1
c001c75d:	74 25                	je     c001c784 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c75f:	83 ec 0c             	sub    esp,0xc
c001c762:	68 94 d8 01 c0       	push   0xc001d894
c001c767:	e8 ef 39 ff ff       	call   c001015b <KePanic(char const*)>
c001c76c:	83 c4 10             	add    esp,0x10
c001c76f:	eb 13                	jmp    c001c784 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c771:	8d 76 00             	lea    esi,[esi+0x0]
c001c774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c778:	8b 00                	mov    eax,DWORD PTR [eax]
c001c77a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c77d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c781:	89 10                	mov    DWORD PTR [eax],edx
c001c783:	90                   	nop
c001c784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c788:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c78b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c792:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c795:	8d 76 00             	lea    esi,[esi+0x0]
c001c798:	83 c4 0c             	add    esp,0xc
c001c79b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c79c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c79c:	83 ec 0c             	sub    esp,0xc
c001c79f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c7a4:	75 12                	jne    c001c7b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c7a6:	83 ec 0c             	sub    esp,0xc
c001c7a9:	68 38 d8 01 c0       	push   0xc001d838
c001c7ae:	e8 a8 39 ff ff       	call   c001015b <KePanic(char const*)>
c001c7b3:	83 c4 10             	add    esp,0x10
c001c7b6:	66 90                	xchg   ax,ax
c001c7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7be:	85 c0                	test   eax,eax
c001c7c0:	74 36                	je     c001c7f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7c9:	85 c0                	test   eax,eax
c001c7cb:	74 2b                	je     c001c7f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7d8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7ed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c7f4:	eb 6a                	jmp    c001c860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c7f6:	66 90                	xchg   ax,ax
c001c7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7fe:	85 c0                	test   eax,eax
c001c800:	75 4e                	jne    c001c850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c806:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c809:	85 c0                	test   eax,eax
c001c80b:	75 43                	jne    c001c850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c80d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c811:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c815:	89 10                	mov    DWORD PTR [eax],edx
c001c817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c81f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c829:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c834:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c837:	85 c0                	test   eax,eax
c001c839:	74 25                	je     c001c860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c83b:	83 ec 0c             	sub    esp,0xc
c001c83e:	68 5a d8 01 c0       	push   0xc001d85a
c001c843:	e8 13 39 ff ff       	call   c001015b <KePanic(char const*)>
c001c848:	83 c4 10             	add    esp,0x10
c001c84b:	eb 13                	jmp    c001c860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c84d:	8d 76 00             	lea    esi,[esi+0x0]
c001c850:	83 ec 0c             	sub    esp,0xc
c001c853:	68 64 d8 01 c0       	push   0xc001d864
c001c858:	e8 fe 38 ff ff       	call   c001015b <KePanic(char const*)>
c001c85d:	83 c4 10             	add    esp,0x10
c001c860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c864:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c867:	8d 50 01             	lea    edx,[eax+0x1]
c001c86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c871:	90                   	nop
c001c872:	83 c4 0c             	add    esp,0xc
c001c875:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c878 <ACPI::~ACPI()>:
c001c878:	83 ec 0c             	sub    esp,0xc
c001c87b:	ba 74 e4 01 c0       	mov    edx,0xc001e474
c001c880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c884:	89 10                	mov    DWORD PTR [eax],edx
c001c886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88a:	83 ec 0c             	sub    esp,0xc
c001c88d:	50                   	push   eax
c001c88e:	e8 87 ef fe ff       	call   c000b81a <Device::~Device()>
c001c893:	83 c4 10             	add    esp,0x10
c001c896:	90                   	nop
c001c897:	83 c4 0c             	add    esp,0xc
c001c89a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c89c <ACPI::~ACPI()>:
c001c89c:	83 ec 0c             	sub    esp,0xc
c001c89f:	83 ec 0c             	sub    esp,0xc
c001c8a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8a6:	e8 cd ff ff ff       	call   c001c878 <ACPI::~ACPI()>
c001c8ab:	83 c4 10             	add    esp,0x10
c001c8ae:	83 ec 08             	sub    esp,0x8
c001c8b1:	68 64 12 00 00       	push   0x1264
c001c8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8ba:	e8 23 db fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c8bf:	83 c4 10             	add    esp,0x10
c001c8c2:	83 c4 0c             	add    esp,0xc
c001c8c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c8c8 <LinkedList<Device>::~LinkedList()>:
c001c8c8:	90                   	nop
c001c8c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c8cc <LinkedList<Device>::isEmpty()>:
c001c8cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8d2:	85 c0                	test   eax,eax
c001c8d4:	75 0e                	jne    c001c8e4 <LinkedList<Device>::isEmpty()+0x18>
c001c8d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8dd:	85 c0                	test   eax,eax
c001c8df:	75 03                	jne    c001c8e4 <LinkedList<Device>::isEmpty()+0x18>
c001c8e1:	b0 01                	mov    al,0x1
c001c8e3:	c3                   	ret    
c001c8e4:	b0 00                	mov    al,0x0
c001c8e6:	90                   	nop
c001c8e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c8e8 <LinkedList<Device>::getFirstElement()>:
c001c8e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c8f0 <LinkedList<Device>::removeFirst()>:
c001c8f0:	83 ec 0c             	sub    esp,0xc
c001c8f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8f9:	85 c0                	test   eax,eax
c001c8fb:	75 17                	jne    c001c914 <LinkedList<Device>::removeFirst()+0x24>
c001c8fd:	83 ec 0c             	sub    esp,0xc
c001c900:	68 70 d8 01 c0       	push   0xc001d870
c001c905:	e8 51 38 ff ff       	call   c001015b <KePanic(char const*)>
c001c90a:	83 c4 10             	add    esp,0x10
c001c90d:	e9 92 00 00 00       	jmp    c001c9a4 <LinkedList<Device>::removeFirst()+0xb4>
c001c912:	66 90                	xchg   ax,ax
c001c914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c918:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c91b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c921:	85 c0                	test   eax,eax
c001c923:	74 13                	je     c001c938 <LinkedList<Device>::removeFirst()+0x48>
c001c925:	83 ec 0c             	sub    esp,0xc
c001c928:	68 bb d8 01 c0       	push   0xc001d8bb
c001c92d:	e8 29 38 ff ff       	call   c001015b <KePanic(char const*)>
c001c932:	83 c4 10             	add    esp,0x10
c001c935:	8d 76 00             	lea    esi,[esi+0x0]
c001c938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c93e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c944:	85 c0                	test   eax,eax
c001c946:	75 34                	jne    c001c97c <LinkedList<Device>::removeFirst()+0x8c>
c001c948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c956:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c961:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c964:	83 f8 01             	cmp    eax,0x1
c001c967:	74 27                	je     c001c990 <LinkedList<Device>::removeFirst()+0xa0>
c001c969:	83 ec 0c             	sub    esp,0xc
c001c96c:	68 94 d8 01 c0       	push   0xc001d894
c001c971:	e8 e5 37 ff ff       	call   c001015b <KePanic(char const*)>
c001c976:	83 c4 10             	add    esp,0x10
c001c979:	eb 15                	jmp    c001c990 <LinkedList<Device>::removeFirst()+0xa0>
c001c97b:	90                   	nop
c001c97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c980:	8b 00                	mov    eax,DWORD PTR [eax]
c001c982:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c98c:	89 10                	mov    DWORD PTR [eax],edx
c001c98e:	66 90                	xchg   ax,ax
c001c990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c994:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c997:	8d 50 ff             	lea    edx,[eax-0x1]
c001c99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c99e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c9a4:	83 c4 0c             	add    esp,0xc
c001c9a7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c9a8 <CPU::~CPU()>:
c001c9a8:	83 ec 0c             	sub    esp,0xc
c001c9ab:	ba 10 e6 01 c0       	mov    edx,0xc001e610
c001c9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b4:	89 10                	mov    DWORD PTR [eax],edx
c001c9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ba:	83 ec 0c             	sub    esp,0xc
c001c9bd:	50                   	push   eax
c001c9be:	e8 57 ee fe ff       	call   c000b81a <Device::~Device()>
c001c9c3:	83 c4 10             	add    esp,0x10
c001c9c6:	90                   	nop
c001c9c7:	83 c4 0c             	add    esp,0xc
c001c9ca:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c9cc <CPU::~CPU()>:
c001c9cc:	83 ec 0c             	sub    esp,0xc
c001c9cf:	83 ec 0c             	sub    esp,0xc
c001c9d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9d6:	e8 cd ff ff ff       	call   c001c9a8 <CPU::~CPU()>
c001c9db:	83 c4 10             	add    esp,0x10
c001c9de:	83 ec 08             	sub    esp,0x8
c001c9e1:	68 94 11 00 00       	push   0x1194
c001c9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9ea:	e8 f3 d9 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c9ef:	83 c4 10             	add    esp,0x10
c001c9f2:	83 c4 0c             	add    esp,0xc
c001c9f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c9f8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c9f8:	90                   	nop
c001c9f9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c9fc <ThreadControlBlock::ThreadControlBlock()>:
c001c9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca00:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ca07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca0b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ca12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca16:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ca1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca21:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ca28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca2c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ca33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca37:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ca3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca3f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ca43:	90                   	nop
c001ca44:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ca48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ca48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca61:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca88:	90                   	nop
c001ca89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ca8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ca8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ca93:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ca94 <PCI::~PCI()>:
c001ca94:	83 ec 0c             	sub    esp,0xc
c001ca97:	ba dc f2 01 c0       	mov    edx,0xc001f2dc
c001ca9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa0:	89 10                	mov    DWORD PTR [eax],edx
c001caa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa6:	83 ec 0c             	sub    esp,0xc
c001caa9:	50                   	push   eax
c001caaa:	e8 f5 e7 fe ff       	call   c000b2a4 <Bus::~Bus()>
c001caaf:	83 c4 10             	add    esp,0x10
c001cab2:	90                   	nop
c001cab3:	83 c4 0c             	add    esp,0xc
c001cab6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cab8 <PCI::~PCI()>:
c001cab8:	83 ec 0c             	sub    esp,0xc
c001cabb:	83 ec 0c             	sub    esp,0xc
c001cabe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cac2:	e8 cd ff ff ff       	call   c001ca94 <PCI::~PCI()>
c001cac7:	83 c4 10             	add    esp,0x10
c001caca:	83 ec 08             	sub    esp,0x8
c001cacd:	68 5c 01 00 00       	push   0x15c
c001cad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cad6:	e8 07 d9 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cadb:	83 c4 10             	add    esp,0x10
c001cade:	83 c4 0c             	add    esp,0xc
c001cae1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cae2 <IDE::~IDE()>:
c001cae2:	83 ec 0c             	sub    esp,0xc
c001cae5:	ba 90 f3 01 c0       	mov    edx,0xc001f390
c001caea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caee:	89 10                	mov    DWORD PTR [eax],edx
c001caf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf4:	83 ec 0c             	sub    esp,0xc
c001caf7:	50                   	push   eax
c001caf8:	e8 97 f1 fe ff       	call   c000bc94 <HardDiskController::~HardDiskController()>
c001cafd:	83 c4 10             	add    esp,0x10
c001cb00:	90                   	nop
c001cb01:	83 c4 0c             	add    esp,0xc
c001cb04:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cb06 <IDE::~IDE()>:
c001cb06:	83 ec 0c             	sub    esp,0xc
c001cb09:	83 ec 0c             	sub    esp,0xc
c001cb0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb10:	e8 cd ff ff ff       	call   c001cae2 <IDE::~IDE()>
c001cb15:	83 c4 10             	add    esp,0x10
c001cb18:	83 ec 08             	sub    esp,0x8
c001cb1b:	68 70 02 00 00       	push   0x270
c001cb20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb24:	e8 b9 d8 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cb29:	83 c4 10             	add    esp,0x10
c001cb2c:	83 c4 0c             	add    esp,0xc
c001cb2f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cb30 <SATABus::~SATABus()>:
c001cb30:	83 ec 0c             	sub    esp,0xc
c001cb33:	ba e0 f3 01 c0       	mov    edx,0xc001f3e0
c001cb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb3c:	89 10                	mov    DWORD PTR [eax],edx
c001cb3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb42:	83 ec 0c             	sub    esp,0xc
c001cb45:	50                   	push   eax
c001cb46:	e8 49 f1 fe ff       	call   c000bc94 <HardDiskController::~HardDiskController()>
c001cb4b:	83 c4 10             	add    esp,0x10
c001cb4e:	90                   	nop
c001cb4f:	83 c4 0c             	add    esp,0xc
c001cb52:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cb54 <SATABus::~SATABus()>:
c001cb54:	83 ec 0c             	sub    esp,0xc
c001cb57:	83 ec 0c             	sub    esp,0xc
c001cb5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb5e:	e8 cd ff ff ff       	call   c001cb30 <SATABus::~SATABus()>
c001cb63:	83 c4 10             	add    esp,0x10
c001cb66:	83 ec 08             	sub    esp,0x8
c001cb69:	68 64 01 00 00       	push   0x164
c001cb6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb72:	e8 6b d8 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cb77:	83 c4 10             	add    esp,0x10
c001cb7a:	83 c4 0c             	add    esp,0xc
c001cb7d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cb7e <ATA::~ATA()>:
c001cb7e:	83 ec 0c             	sub    esp,0xc
c001cb81:	ba 20 f4 01 c0       	mov    edx,0xc001f420
c001cb86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb8a:	89 10                	mov    DWORD PTR [eax],edx
c001cb8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb90:	83 ec 0c             	sub    esp,0xc
c001cb93:	50                   	push   eax
c001cb94:	e8 dd f1 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001cb99:	83 c4 10             	add    esp,0x10
c001cb9c:	90                   	nop
c001cb9d:	83 c4 0c             	add    esp,0xc
c001cba0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cba2 <ATA::~ATA()>:
c001cba2:	83 ec 0c             	sub    esp,0xc
c001cba5:	83 ec 0c             	sub    esp,0xc
c001cba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbac:	e8 cd ff ff ff       	call   c001cb7e <ATA::~ATA()>
c001cbb1:	83 c4 10             	add    esp,0x10
c001cbb4:	83 ec 08             	sub    esp,0x8
c001cbb7:	68 7c 01 00 00       	push   0x17c
c001cbbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbc0:	e8 1d d8 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cbc5:	83 c4 10             	add    esp,0x10
c001cbc8:	83 c4 0c             	add    esp,0xc
c001cbcb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cbcc <ATAPI::~ATAPI()>:
c001cbcc:	83 ec 0c             	sub    esp,0xc
c001cbcf:	ba 68 f4 01 c0       	mov    edx,0xc001f468
c001cbd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd8:	89 10                	mov    DWORD PTR [eax],edx
c001cbda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbde:	83 ec 0c             	sub    esp,0xc
c001cbe1:	50                   	push   eax
c001cbe2:	e8 8f f1 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001cbe7:	83 c4 10             	add    esp,0x10
c001cbea:	90                   	nop
c001cbeb:	83 c4 0c             	add    esp,0xc
c001cbee:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cbf0 <ATAPI::~ATAPI()>:
c001cbf0:	83 ec 0c             	sub    esp,0xc
c001cbf3:	83 ec 0c             	sub    esp,0xc
c001cbf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbfa:	e8 cd ff ff ff       	call   c001cbcc <ATAPI::~ATAPI()>
c001cbff:	83 c4 10             	add    esp,0x10
c001cc02:	83 ec 08             	sub    esp,0x8
c001cc05:	68 84 01 00 00       	push   0x184
c001cc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc0e:	e8 cf d7 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cc13:	83 c4 10             	add    esp,0x10
c001cc16:	83 c4 0c             	add    esp,0xc
c001cc19:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cc1a <SATA::~SATA()>:
c001cc1a:	83 ec 0c             	sub    esp,0xc
c001cc1d:	ba 1c f5 01 c0       	mov    edx,0xc001f51c
c001cc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc26:	89 10                	mov    DWORD PTR [eax],edx
c001cc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2c:	83 ec 0c             	sub    esp,0xc
c001cc2f:	50                   	push   eax
c001cc30:	e8 41 f1 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001cc35:	83 c4 10             	add    esp,0x10
c001cc38:	90                   	nop
c001cc39:	83 c4 0c             	add    esp,0xc
c001cc3c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cc3e <SATA::~SATA()>:
c001cc3e:	83 ec 0c             	sub    esp,0xc
c001cc41:	83 ec 0c             	sub    esp,0xc
c001cc44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc48:	e8 cd ff ff ff       	call   c001cc1a <SATA::~SATA()>
c001cc4d:	83 c4 10             	add    esp,0x10
c001cc50:	83 ec 08             	sub    esp,0x8
c001cc53:	68 7c 01 00 00       	push   0x17c
c001cc58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc5c:	e8 81 d7 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cc61:	83 c4 10             	add    esp,0x10
c001cc64:	83 c4 0c             	add    esp,0xc
c001cc67:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cc68 <SATAPI::~SATAPI()>:
c001cc68:	83 ec 0c             	sub    esp,0xc
c001cc6b:	ba 54 f6 01 c0       	mov    edx,0xc001f654
c001cc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc74:	89 10                	mov    DWORD PTR [eax],edx
c001cc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc7a:	83 ec 0c             	sub    esp,0xc
c001cc7d:	50                   	push   eax
c001cc7e:	e8 f3 f0 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001cc83:	83 c4 10             	add    esp,0x10
c001cc86:	90                   	nop
c001cc87:	83 c4 0c             	add    esp,0xc
c001cc8a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cc8c <SATAPI::~SATAPI()>:
c001cc8c:	83 ec 0c             	sub    esp,0xc
c001cc8f:	83 ec 0c             	sub    esp,0xc
c001cc92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc96:	e8 cd ff ff ff       	call   c001cc68 <SATAPI::~SATAPI()>
c001cc9b:	83 c4 10             	add    esp,0x10
c001cc9e:	83 ec 08             	sub    esp,0x8
c001cca1:	68 84 01 00 00       	push   0x184
c001cca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccaa:	e8 33 d7 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001ccaf:	83 c4 10             	add    esp,0x10
c001ccb2:	83 c4 0c             	add    esp,0xc
c001ccb5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ccb6 <IOAPIC::~IOAPIC()>:
c001ccb6:	83 ec 0c             	sub    esp,0xc
c001ccb9:	ba 94 f6 01 c0       	mov    edx,0xc001f694
c001ccbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc2:	89 10                	mov    DWORD PTR [eax],edx
c001ccc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc8:	83 ec 0c             	sub    esp,0xc
c001cccb:	50                   	push   eax
c001cccc:	e8 49 eb fe ff       	call   c000b81a <Device::~Device()>
c001ccd1:	83 c4 10             	add    esp,0x10
c001ccd4:	90                   	nop
c001ccd5:	83 c4 0c             	add    esp,0xc
c001ccd8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ccda <IOAPIC::~IOAPIC()>:
c001ccda:	83 ec 0c             	sub    esp,0xc
c001ccdd:	83 ec 0c             	sub    esp,0xc
c001cce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cce4:	e8 cd ff ff ff       	call   c001ccb6 <IOAPIC::~IOAPIC()>
c001cce9:	83 c4 10             	add    esp,0x10
c001ccec:	83 ec 08             	sub    esp,0x8
c001ccef:	68 68 01 00 00       	push   0x168
c001ccf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccf8:	e8 e5 d6 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001ccfd:	83 c4 10             	add    esp,0x10
c001cd00:	83 c4 0c             	add    esp,0xc
c001cd03:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cd04 <APICTimer::~APICTimer()>:
c001cd04:	83 ec 0c             	sub    esp,0xc
c001cd07:	ba dc f6 01 c0       	mov    edx,0xc001f6dc
c001cd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd10:	89 10                	mov    DWORD PTR [eax],edx
c001cd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd16:	83 ec 0c             	sub    esp,0xc
c001cd19:	50                   	push   eax
c001cd1a:	e8 39 04 ff ff       	call   c000d158 <Timer::~Timer()>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	90                   	nop
c001cd23:	83 c4 0c             	add    esp,0xc
c001cd26:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cd28 <APICTimer::~APICTimer()>:
c001cd28:	83 ec 0c             	sub    esp,0xc
c001cd2b:	83 ec 0c             	sub    esp,0xc
c001cd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd32:	e8 cd ff ff ff       	call   c001cd04 <APICTimer::~APICTimer()>
c001cd37:	83 c4 10             	add    esp,0x10
c001cd3a:	83 ec 08             	sub    esp,0x8
c001cd3d:	68 60 01 00 00       	push   0x160
c001cd42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd46:	e8 97 d6 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cd4b:	83 c4 10             	add    esp,0x10
c001cd4e:	83 c4 0c             	add    esp,0xc
c001cd51:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cd54 <PIT::~PIT()>:
c001cd54:	83 ec 0c             	sub    esp,0xc
c001cd57:	ba 2c f7 01 c0       	mov    edx,0xc001f72c
c001cd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd60:	89 10                	mov    DWORD PTR [eax],edx
c001cd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd66:	83 ec 0c             	sub    esp,0xc
c001cd69:	50                   	push   eax
c001cd6a:	e8 e9 03 ff ff       	call   c000d158 <Timer::~Timer()>
c001cd6f:	83 c4 10             	add    esp,0x10
c001cd72:	90                   	nop
c001cd73:	83 c4 0c             	add    esp,0xc
c001cd76:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cd78 <PIT::~PIT()>:
c001cd78:	83 ec 0c             	sub    esp,0xc
c001cd7b:	83 ec 0c             	sub    esp,0xc
c001cd7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd82:	e8 cd ff ff ff       	call   c001cd54 <PIT::~PIT()>
c001cd87:	83 c4 10             	add    esp,0x10
c001cd8a:	83 ec 08             	sub    esp,0x8
c001cd8d:	68 5c 01 00 00       	push   0x15c
c001cd92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd96:	e8 47 d6 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cd9b:	83 c4 10             	add    esp,0x10
c001cd9e:	83 c4 0c             	add    esp,0xc
c001cda1:	c3                   	ret    

Disassembly of section userkernel:

c0020000 <KiDefaultSignalHandlerAbort(int)>:
c0020000:	57                   	push   edi
c0020001:	b9 07 00 00 00       	mov    ecx,0x7
c0020006:	56                   	push   esi
c0020007:	be 01 e7 01 c0       	mov    esi,0xc001e701
c002000c:	83 ec 24             	sub    esp,0x24
c002000f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020013:	fc                   	cld    
c0020014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002001a:	50                   	push   eax
c002001b:	6a 00                	push   0x0
c002001d:	6a 00                	push   0x0
c002001f:	6a 27                	push   0x27
c0020021:	e8 2c 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020026:	83 c4 34             	add    esp,0x34
c0020029:	5e                   	pop    esi
c002002a:	5f                   	pop    edi
c002002b:	c3                   	ret    

c002002c <KiDefaultSignalHandlerTerminate(int)>:
c002002c:	57                   	push   edi
c002002d:	b9 08 00 00 00       	mov    ecx,0x8
c0020032:	56                   	push   esi
c0020033:	be 1d e7 01 c0       	mov    esi,0xc001e71d
c0020038:	83 ec 24             	sub    esp,0x24
c002003b:	89 e7                	mov    edi,esp
c002003d:	fc                   	cld    
c002003e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020040:	54                   	push   esp
c0020041:	6a 00                	push   0x0
c0020043:	6a 00                	push   0x0
c0020045:	6a 27                	push   0x27
c0020047:	e8 06 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002004c:	83 c4 34             	add    esp,0x34
c002004f:	5e                   	pop    esi
c0020050:	5f                   	pop    edi
c0020051:	c3                   	ret    

c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0020052:	53                   	push   ebx
c0020053:	83 ec 10             	sub    esp,0x10
c0020056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002005a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002005e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020066:	cd 60                	int    0x60
c0020068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002006c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	5b                   	pop    ebx
c002007c:	c3                   	ret    
