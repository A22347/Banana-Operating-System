
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 25 fc 00 00       	call   c000fc45 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 03 91 02 00       	call   c0029128 <_init>
c0000025:	c3                   	ret    
c0000026:	bb be 9d 02 c0       	mov    ebx,0xc0029dbe
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb cc 9d 02 c0    	cmp    ebx,0xc0029dcc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 e6 02 c0       	mov    eax,0xc002e698
c0000049:	3d 98 e6 02 c0       	cmp    eax,0xc002e698
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 e6 02 c0       	push   0xc002e698
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 e6 02 c0       	mov    eax,0xc002e698
c0000075:	2d 98 e6 02 c0       	sub    eax,0xc002e698
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 e6 02 c0       	push   0xc002e698
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 ec 02 c0 00 	cmp    BYTE PTR ds:0xc002ecc8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d4 9d 02 c0       	mov    ebx,0xc0029dd4
c00000bb:	81 eb d0 9d 02 c0    	sub    ebx,0xc0029dd0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d0 9d 02 c0       	mov    esi,0xc0029dd0
c00000ca:	a1 cc ec 02 c0       	mov    eax,ds:0xc002eccc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc ec 02 c0       	mov    ds:0xc002eccc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc ec 02 c0       	mov    eax,ds:0xc002eccc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 e6 02 c0       	push   0xc002e698
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ecc8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 ec 02 c0       	push   0xc002ecd0
c000012c:	68 98 e6 02 c0       	push   0xc002e698
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 ed db 01 00       	call   c001df90 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 b2 28 01 00       	call   c0012c6d <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 cb db 01 00       	call   c001df90 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 73 e0 01 00       	call   c001e457 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 d1 e6 01 00       	call   c001eabe <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 10 f1 02 c0 	lgdtd  ds:0xc002f110
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 a2 45 01 00       	call   c0014b83 <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000645 <hexStrToInt>:
c0000645:	56                   	push   esi
c0000646:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064a:	31 d2                	xor    edx,edx

c000064c <hexStrToInt.looping>:
c000064c:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064d:	84 c0                	test   al,al
c000064f:	74 0d                	je     c000065e <hexStrToInt.end>
c0000651:	d4 40                	aam    0x40
c0000653:	d5 39                	aad    0x39
c0000655:	2c 30                	sub    al,0x30
c0000657:	c1 e2 04             	shl    edx,0x4
c000065a:	08 c2                	or     dl,al
c000065c:	eb ee                	jmp    c000064c <hexStrToInt.looping>

c000065e <hexStrToInt.end>:
c000065e:	89 d0                	mov    eax,edx
c0000660:	5e                   	pop    esi
c0000661:	c3                   	ret    

c0000662 <memcpy>:
c0000662:	e8 e8 de 00 00       	call   c000e54f <__not_memcpy>
c0000667:	90                   	nop

c0000668 <memcmp>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000676:	85 f6                	test   esi,esi
c0000678:	74 1d                	je     c0000697 <memcmp+0x2f>
c000067a:	8a 08                	mov    cl,BYTE PTR [eax]
c000067c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067f:	38 cb                	cmp    bl,cl
c0000681:	75 19                	jne    c000069c <memcmp+0x34>
c0000683:	01 c6                	add    esi,eax
c0000685:	eb 0a                	jmp    c0000691 <memcmp+0x29>
c0000687:	90                   	nop
c0000688:	8a 08                	mov    cl,BYTE PTR [eax]
c000068a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000068d:	38 d9                	cmp    cl,bl
c000068f:	75 0b                	jne    c000069c <memcmp+0x34>
c0000691:	40                   	inc    eax
c0000692:	42                   	inc    edx
c0000693:	39 f0                	cmp    eax,esi
c0000695:	75 f1                	jne    c0000688 <memcmp+0x20>
c0000697:	31 c0                	xor    eax,eax
c0000699:	5b                   	pop    ebx
c000069a:	5e                   	pop    esi
c000069b:	c3                   	ret    
c000069c:	0f b6 c1             	movzx  eax,cl
c000069f:	29 d8                	sub    eax,ebx
c00006a1:	5b                   	pop    ebx
c00006a2:	5e                   	pop    esi
c00006a3:	c3                   	ret    

c00006a4 <memmove>:
c00006a4:	55                   	push   ebp
c00006a5:	57                   	push   edi
c00006a6:	56                   	push   esi
c00006a7:	53                   	push   ebx
c00006a8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b4:	39 dd                	cmp    ebp,ebx
c00006b6:	0f 83 80 00 00 00    	jae    c000073c <memmove+0x98>
c00006bc:	85 d2                	test   edx,edx
c00006be:	74 74                	je     c0000734 <memmove+0x90>
c00006c0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006c3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c6:	39 cd                	cmp    ebp,ecx
c00006c8:	0f 93 c1             	setae  cl
c00006cb:	39 f3                	cmp    ebx,esi
c00006cd:	0f 93 c0             	setae  al
c00006d0:	89 c6                	mov    esi,eax
c00006d2:	09 ce                	or     esi,ecx
c00006d4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d7:	89 f0                	mov    eax,esi
c00006d9:	83 f9 0c             	cmp    ecx,0xc
c00006dc:	0f 97 c1             	seta   cl
c00006df:	84 c8                	test   al,cl
c00006e1:	74 75                	je     c0000758 <memmove+0xb4>
c00006e3:	89 e9                	mov    ecx,ebp
c00006e5:	09 d9                	or     ecx,ebx
c00006e7:	83 e1 03             	and    ecx,0x3
c00006ea:	75 6c                	jne    c0000758 <memmove+0xb4>
c00006ec:	89 d7                	mov    edi,edx
c00006ee:	89 d9                	mov    ecx,ebx
c00006f0:	83 e7 fc             	and    edi,0xfffffffc
c00006f3:	89 ee                	mov    esi,ebp
c00006f5:	01 df                	add    edi,ebx
c00006f7:	90                   	nop
c00006f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006fa:	83 c6 04             	add    esi,0x4
c00006fd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000700:	83 c1 04             	add    ecx,0x4
c0000703:	39 f9                	cmp    ecx,edi
c0000705:	75 f1                	jne    c00006f8 <memmove+0x54>
c0000707:	89 d1                	mov    ecx,edx
c0000709:	89 d7                	mov    edi,edx
c000070b:	83 e1 fc             	and    ecx,0xfffffffc
c000070e:	29 cf                	sub    edi,ecx
c0000710:	01 cb                	add    ebx,ecx
c0000712:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000716:	39 ca                	cmp    edx,ecx
c0000718:	74 1a                	je     c0000734 <memmove+0x90>
c000071a:	8a 03                	mov    al,BYTE PTR [ebx]
c000071c:	83 ff 01             	cmp    edi,0x1
c000071f:	88 06                	mov    BYTE PTR [esi],al
c0000721:	74 11                	je     c0000734 <memmove+0x90>
c0000723:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000726:	83 ff 02             	cmp    edi,0x2
c0000729:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000072c:	74 06                	je     c0000734 <memmove+0x90>
c000072e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000731:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000734:	5b                   	pop    ebx
c0000735:	89 e8                	mov    eax,ebp
c0000737:	5e                   	pop    esi
c0000738:	5f                   	pop    edi
c0000739:	5d                   	pop    ebp
c000073a:	c3                   	ret    
c000073b:	90                   	nop
c000073c:	76 f6                	jbe    c0000734 <memmove+0x90>
c000073e:	85 d2                	test   edx,edx
c0000740:	74 f2                	je     c0000734 <memmove+0x90>
c0000742:	4b                   	dec    ebx
c0000743:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000746:	66 90                	xchg   ax,ax
c0000748:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000074b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074e:	4a                   	dec    edx
c000074f:	75 f7                	jne    c0000748 <memmove+0xa4>
c0000751:	5b                   	pop    ebx
c0000752:	89 e8                	mov    eax,ebp
c0000754:	5e                   	pop    esi
c0000755:	5f                   	pop    edi
c0000756:	5d                   	pop    ebp
c0000757:	c3                   	ret    
c0000758:	01 ea                	add    edx,ebp
c000075a:	89 e9                	mov    ecx,ebp
c000075c:	8a 03                	mov    al,BYTE PTR [ebx]
c000075e:	41                   	inc    ecx
c000075f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000762:	43                   	inc    ebx
c0000763:	39 d1                	cmp    ecx,edx
c0000765:	75 f5                	jne    c000075c <memmove+0xb8>
c0000767:	eb cb                	jmp    c0000734 <memmove+0x90>
c0000769:	8d 76 00             	lea    esi,[esi+0x0]

c000076c <memset>:
c000076c:	57                   	push   edi
c000076d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000771:	85 c9                	test   ecx,ecx
c0000773:	74 0b                	je     c0000780 <memset+0x14>
c0000775:	fc                   	cld    
c0000776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000077e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	66 90                	xchg   ax,ax

c0000788 <strlen>:
c0000788:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000078c:	31 c0                	xor    eax,eax
c000078e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000791:	74 09                	je     c000079c <strlen+0x14>
c0000793:	90                   	nop
c0000794:	40                   	inc    eax
c0000795:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000799:	75 f9                	jne    c0000794 <strlen+0xc>
c000079b:	c3                   	ret    
c000079c:	c3                   	ret    
c000079d:	8d 76 00             	lea    esi,[esi+0x0]

c00007a0 <strpbrk>:
c00007a0:	57                   	push   edi
c00007a1:	56                   	push   esi
c00007a2:	53                   	push   ebx
c00007a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ab:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ad:	84 db                	test   bl,bl
c00007af:	74 21                	je     c00007d2 <strpbrk+0x32>
c00007b1:	8a 07                	mov    al,BYTE PTR [edi]
c00007b3:	84 c0                	test   al,al
c00007b5:	74 14                	je     c00007cb <strpbrk+0x2b>
c00007b7:	38 d8                	cmp    al,bl
c00007b9:	74 19                	je     c00007d4 <strpbrk+0x34>
c00007bb:	89 fa                	mov    edx,edi
c00007bd:	eb 05                	jmp    c00007c4 <strpbrk+0x24>
c00007bf:	90                   	nop
c00007c0:	38 d9                	cmp    cl,bl
c00007c2:	74 10                	je     c00007d4 <strpbrk+0x34>
c00007c4:	42                   	inc    edx
c00007c5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007c7:	84 c9                	test   cl,cl
c00007c9:	75 f5                	jne    c00007c0 <strpbrk+0x20>
c00007cb:	46                   	inc    esi
c00007cc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ce:	84 db                	test   bl,bl
c00007d0:	75 e1                	jne    c00007b3 <strpbrk+0x13>
c00007d2:	31 f6                	xor    esi,esi
c00007d4:	89 f0                	mov    eax,esi
c00007d6:	5b                   	pop    ebx
c00007d7:	5e                   	pop    esi
c00007d8:	5f                   	pop    edi
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strtok>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007e6:	85 db                	test   ebx,ebx
c00007e8:	75 07                	jne    c00007f1 <strtok+0x15>
c00007ea:	eb 2c                	jmp    c0000818 <strtok+0x3c>
c00007ec:	43                   	inc    ebx
c00007ed:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007f1:	56                   	push   esi
c00007f2:	53                   	push   ebx
c00007f3:	e8 a8 ff ff ff       	call   c00007a0 <strpbrk>
c00007f8:	5a                   	pop    edx
c00007f9:	a3 e8 ec 02 c0       	mov    ds:0xc002ece8,eax
c00007fe:	59                   	pop    ecx
c00007ff:	39 d8                	cmp    eax,ebx
c0000801:	74 e9                	je     c00007ec <strtok+0x10>
c0000803:	85 c0                	test   eax,eax
c0000805:	74 1b                	je     c0000822 <strtok+0x46>
c0000807:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000080a:	8d 50 01             	lea    edx,[eax+0x1]
c000080d:	89 d8                	mov    eax,ebx
c000080f:	89 15 e8 ec 02 c0    	mov    DWORD PTR ds:0xc002ece8,edx
c0000815:	5b                   	pop    ebx
c0000816:	5e                   	pop    esi
c0000817:	c3                   	ret    
c0000818:	8b 1d e8 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ece8
c000081e:	85 db                	test   ebx,ebx
c0000820:	75 cf                	jne    c00007f1 <strtok+0x15>
c0000822:	31 c0                	xor    eax,eax
c0000824:	5b                   	pop    ebx
c0000825:	5e                   	pop    esi
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strcpy>:
c0000828:	53                   	push   ebx
c0000829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000082d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000831:	89 c3                	mov    ebx,eax
c0000833:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000835:	84 d2                	test   dl,dl
c0000837:	74 0d                	je     c0000846 <strcpy+0x1e>
c0000839:	8d 76 00             	lea    esi,[esi+0x0]
c000083c:	88 13                	mov    BYTE PTR [ebx],dl
c000083e:	41                   	inc    ecx
c000083f:	43                   	inc    ebx
c0000840:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000842:	84 d2                	test   dl,dl
c0000844:	75 f6                	jne    c000083c <strcpy+0x14>
c0000846:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000849:	5b                   	pop    ebx
c000084a:	c3                   	ret    
c000084b:	90                   	nop

c000084c <strncpy>:
c000084c:	55                   	push   ebp
c000084d:	57                   	push   edi
c000084e:	56                   	push   esi
c000084f:	53                   	push   ebx
c0000850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000854:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000858:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000085c:	85 c0                	test   eax,eax
c000085e:	74 39                	je     c0000899 <strncpy+0x4d>
c0000860:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000862:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000865:	8d 55 01             	lea    edx,[ebp+0x1]
c0000868:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000086b:	84 db                	test   bl,bl
c000086d:	74 31                	je     c00008a0 <strncpy+0x54>
c000086f:	85 c9                	test   ecx,ecx
c0000871:	74 26                	je     c0000899 <strncpy+0x4d>
c0000873:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000876:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000879:	8d 55 02             	lea    edx,[ebp+0x2]
c000087c:	8d 46 02             	lea    eax,[esi+0x2]
c000087f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000882:	84 db                	test   bl,bl
c0000884:	75 0f                	jne    c0000895 <strncpy+0x49>
c0000886:	eb 18                	jmp    c00008a0 <strncpy+0x54>
c0000888:	40                   	inc    eax
c0000889:	42                   	inc    edx
c000088a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000088d:	49                   	dec    ecx
c000088e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000891:	84 db                	test   bl,bl
c0000893:	74 0b                	je     c00008a0 <strncpy+0x54>
c0000895:	85 c9                	test   ecx,ecx
c0000897:	75 ef                	jne    c0000888 <strncpy+0x3c>
c0000899:	5b                   	pop    ebx
c000089a:	89 e8                	mov    eax,ebp
c000089c:	5e                   	pop    esi
c000089d:	5f                   	pop    edi
c000089e:	5d                   	pop    ebp
c000089f:	c3                   	ret    
c00008a0:	85 c9                	test   ecx,ecx
c00008a2:	74 f5                	je     c0000899 <strncpy+0x4d>
c00008a4:	fc                   	cld    
c00008a5:	31 c0                	xor    eax,eax
c00008a7:	89 d7                	mov    edi,edx
c00008a9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008ab:	89 e8                	mov    eax,ebp
c00008ad:	5b                   	pop    ebx
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	5d                   	pop    ebp
c00008b1:	c3                   	ret    
c00008b2:	66 90                	xchg   ax,ax

c00008b4 <strcmp>:
c00008b4:	56                   	push   esi
c00008b5:	53                   	push   ebx
c00008b6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008be:	8a 16                	mov    dl,BYTE PTR [esi]
c00008c0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008c3:	38 d1                	cmp    cl,dl
c00008c5:	75 1d                	jne    c00008e4 <strcmp+0x30>
c00008c7:	84 c9                	test   cl,cl
c00008c9:	74 21                	je     c00008ec <strcmp+0x38>
c00008cb:	b8 01 00 00 00       	mov    eax,0x1
c00008d0:	eb 07                	jmp    c00008d9 <strcmp+0x25>
c00008d2:	66 90                	xchg   ax,ax
c00008d4:	40                   	inc    eax
c00008d5:	84 d2                	test   dl,dl
c00008d7:	74 13                	je     c00008ec <strcmp+0x38>
c00008d9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008dc:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008e0:	38 ca                	cmp    dl,cl
c00008e2:	74 f0                	je     c00008d4 <strcmp+0x20>
c00008e4:	0f b6 c2             	movzx  eax,dl
c00008e7:	5b                   	pop    ebx
c00008e8:	29 c8                	sub    eax,ecx
c00008ea:	5e                   	pop    esi
c00008eb:	c3                   	ret    
c00008ec:	31 c0                	xor    eax,eax
c00008ee:	5b                   	pop    ebx
c00008ef:	5e                   	pop    esi
c00008f0:	c3                   	ret    
c00008f1:	8d 76 00             	lea    esi,[esi+0x0]

c00008f4 <strchr>:
c00008f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f8:	8a 10                	mov    dl,BYTE PTR [eax]
c00008fa:	84 d2                	test   dl,dl
c00008fc:	74 15                	je     c0000913 <strchr+0x1f>
c00008fe:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000902:	38 ca                	cmp    dl,cl
c0000904:	75 06                	jne    c000090c <strchr+0x18>
c0000906:	eb 0e                	jmp    c0000916 <strchr+0x22>
c0000908:	38 ca                	cmp    dl,cl
c000090a:	74 09                	je     c0000915 <strchr+0x21>
c000090c:	40                   	inc    eax
c000090d:	8a 10                	mov    dl,BYTE PTR [eax]
c000090f:	84 d2                	test   dl,dl
c0000911:	75 f5                	jne    c0000908 <strchr+0x14>
c0000913:	31 c0                	xor    eax,eax
c0000915:	c3                   	ret    
c0000916:	c3                   	ret    
c0000917:	90                   	nop

c0000918 <strncmp>:
c0000918:	57                   	push   edi
c0000919:	56                   	push   esi
c000091a:	53                   	push   ebx
c000091b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000091f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000923:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000927:	85 ff                	test   edi,edi
c0000929:	74 28                	je     c0000953 <strncmp+0x3b>
c000092b:	8a 16                	mov    dl,BYTE PTR [esi]
c000092d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000930:	38 d1                	cmp    cl,dl
c0000932:	75 28                	jne    c000095c <strncmp+0x44>
c0000934:	8d 46 01             	lea    eax,[esi+0x1]
c0000937:	84 c9                	test   cl,cl
c0000939:	74 18                	je     c0000953 <strncmp+0x3b>
c000093b:	01 fe                	add    esi,edi
c000093d:	eb 0f                	jmp    c000094e <strncmp+0x36>
c000093f:	90                   	nop
c0000940:	8a 10                	mov    dl,BYTE PTR [eax]
c0000942:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000945:	38 ca                	cmp    dl,cl
c0000947:	75 13                	jne    c000095c <strncmp+0x44>
c0000949:	40                   	inc    eax
c000094a:	84 d2                	test   dl,dl
c000094c:	74 05                	je     c0000953 <strncmp+0x3b>
c000094e:	43                   	inc    ebx
c000094f:	39 c6                	cmp    esi,eax
c0000951:	75 ed                	jne    c0000940 <strncmp+0x28>
c0000953:	5b                   	pop    ebx
c0000954:	31 c0                	xor    eax,eax
c0000956:	5e                   	pop    esi
c0000957:	5f                   	pop    edi
c0000958:	c3                   	ret    
c0000959:	8d 76 00             	lea    esi,[esi+0x0]
c000095c:	5b                   	pop    ebx
c000095d:	0f b6 c2             	movzx  eax,dl
c0000960:	5e                   	pop    esi
c0000961:	29 c8                	sub    eax,ecx
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]

c0000968 <strcat>:
c0000968:	56                   	push   esi
c0000969:	53                   	push   ebx
c000096a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000096e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000972:	89 c3                	mov    ebx,eax
c0000974:	eb 04                	jmp    c000097a <strcat+0x12>
c0000976:	66 90                	xchg   ax,ax
c0000978:	89 d3                	mov    ebx,edx
c000097a:	8d 53 01             	lea    edx,[ebx+0x1]
c000097d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000981:	75 f5                	jne    c0000978 <strcat+0x10>
c0000983:	31 d2                	xor    edx,edx
c0000985:	8d 76 00             	lea    esi,[esi+0x0]
c0000988:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000098b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000098e:	42                   	inc    edx
c000098f:	84 c9                	test   cl,cl
c0000991:	75 f5                	jne    c0000988 <strcat+0x20>
c0000993:	5b                   	pop    ebx
c0000994:	5e                   	pop    esi
c0000995:	c3                   	ret    
c0000996:	66 90                	xchg   ax,ax

c0000998 <strncat>:
c0000998:	56                   	push   esi
c0000999:	53                   	push   ebx
c000099a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000099e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009a6:	85 f6                	test   esi,esi
c00009a8:	74 1e                	je     c00009c8 <strncat+0x30>
c00009aa:	89 c2                	mov    edx,eax
c00009ac:	42                   	inc    edx
c00009ad:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009b1:	75 f9                	jne    c00009ac <strncat+0x14>
c00009b3:	01 ce                	add    esi,ecx
c00009b5:	eb 06                	jmp    c00009bd <strncat+0x25>
c00009b7:	90                   	nop
c00009b8:	39 f1                	cmp    ecx,esi
c00009ba:	74 10                	je     c00009cc <strncat+0x34>
c00009bc:	42                   	inc    edx
c00009bd:	41                   	inc    ecx
c00009be:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009c1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009c4:	84 db                	test   bl,bl
c00009c6:	75 f0                	jne    c00009b8 <strncat+0x20>
c00009c8:	5b                   	pop    ebx
c00009c9:	5e                   	pop    esi
c00009ca:	c3                   	ret    
c00009cb:	90                   	nop
c00009cc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009cf:	5b                   	pop    ebx
c00009d0:	5e                   	pop    esi
c00009d1:	c3                   	ret    
c00009d2:	66 90                	xchg   ax,ax

c00009d4 <strstr>:
c00009d4:	57                   	push   edi
c00009d5:	56                   	push   esi
c00009d6:	53                   	push   ebx
c00009d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009df:	57                   	push   edi
c00009e0:	e8 a3 fd ff ff       	call   c0000788 <strlen>
c00009e5:	59                   	pop    ecx
c00009e6:	85 c0                	test   eax,eax
c00009e8:	74 2a                	je     c0000a14 <strstr+0x40>
c00009ea:	89 c6                	mov    esi,eax
c00009ec:	eb 12                	jmp    c0000a00 <strstr+0x2c>
c00009ee:	66 90                	xchg   ax,ax
c00009f0:	56                   	push   esi
c00009f1:	57                   	push   edi
c00009f2:	53                   	push   ebx
c00009f3:	e8 70 fc ff ff       	call   c0000668 <memcmp>
c00009f8:	83 c4 0c             	add    esp,0xc
c00009fb:	85 c0                	test   eax,eax
c00009fd:	74 15                	je     c0000a14 <strstr+0x40>
c00009ff:	43                   	inc    ebx
c0000a00:	53                   	push   ebx
c0000a01:	e8 82 fd ff ff       	call   c0000788 <strlen>
c0000a06:	5a                   	pop    edx
c0000a07:	39 f0                	cmp    eax,esi
c0000a09:	73 e5                	jae    c00009f0 <strstr+0x1c>
c0000a0b:	5b                   	pop    ebx
c0000a0c:	31 c0                	xor    eax,eax
c0000a0e:	5e                   	pop    esi
c0000a0f:	5f                   	pop    edi
c0000a10:	c3                   	ret    
c0000a11:	8d 76 00             	lea    esi,[esi+0x0]
c0000a14:	89 d8                	mov    eax,ebx
c0000a16:	5b                   	pop    ebx
c0000a17:	5e                   	pop    esi
c0000a18:	5f                   	pop    edi
c0000a19:	c3                   	ret    
c0000a1a:	66 90                	xchg   ax,ax

c0000a1c <toupper>:
c0000a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a20:	0f b6 d0             	movzx  edx,al
c0000a23:	f6 82 e0 9d 02 c0 02 	test   BYTE PTR [edx-0x3ffd6220],0x2
c0000a2a:	74 03                	je     c0000a2f <toupper+0x13>
c0000a2c:	83 e8 20             	sub    eax,0x20
c0000a2f:	c3                   	ret    

c0000a30 <tolower>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 e0 9d 02 c0 01 	test   BYTE PTR [edx-0x3ffd6220],0x1
c0000a3e:	74 03                	je     c0000a43 <tolower+0x13>
c0000a40:	83 c0 20             	add    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <simple_strtoul>:
c0000a44:	55                   	push   ebp
c0000a45:	57                   	push   edi
c0000a46:	56                   	push   esi
c0000a47:	53                   	push   ebx
c0000a48:	83 ec 08             	sub    esp,0x8
c0000a4b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a53:	90                   	nop
c0000a54:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a57:	f6 82 e0 9d 02 c0 08 	test   BYTE PTR [edx-0x3ffd6220],0x8
c0000a5e:	75 05                	jne    c0000a65 <simple_strtoul+0x21>
c0000a60:	80 fa 09             	cmp    dl,0x9
c0000a63:	75 03                	jne    c0000a68 <simple_strtoul+0x24>
c0000a65:	41                   	inc    ecx
c0000a66:	eb ec                	jmp    c0000a54 <simple_strtoul+0x10>
c0000a68:	80 fa 2d             	cmp    dl,0x2d
c0000a6b:	0f 84 1b 01 00 00    	je     c0000b8c <simple_strtoul+0x148>
c0000a71:	80 fa 2b             	cmp    dl,0x2b
c0000a74:	0f 84 c2 00 00 00    	je     c0000b3c <simple_strtoul+0xf8>
c0000a7a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a82:	85 f6                	test   esi,esi
c0000a84:	0f 85 c3 00 00 00    	jne    c0000b4d <simple_strtoul+0x109>
c0000a8a:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a8c:	80 fa 30             	cmp    dl,0x30
c0000a8f:	0f 84 47 01 00 00    	je     c0000bdc <simple_strtoul+0x198>
c0000a95:	be 0a 00 00 00       	mov    esi,0xa
c0000a9a:	84 d2                	test   dl,dl
c0000a9c:	0f 84 6f 01 00 00    	je     c0000c11 <simple_strtoul+0x1cd>
c0000aa2:	31 ed                	xor    ebp,ebp
c0000aa4:	31 ff                	xor    edi,edi
c0000aa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000aad:	eb 2b                	jmp    c0000ada <simple_strtoul+0x96>
c0000aaf:	90                   	nop
c0000ab0:	83 eb 30             	sub    ebx,0x30
c0000ab3:	39 f3                	cmp    ebx,esi
c0000ab5:	73 4d                	jae    c0000b04 <simple_strtoul+0xc0>
c0000ab7:	31 d2                	xor    edx,edx
c0000ab9:	89 d8                	mov    eax,ebx
c0000abb:	f7 d0                	not    eax
c0000abd:	f7 f6                	div    esi
c0000abf:	39 f8                	cmp    eax,edi
c0000ac1:	0f 82 b1 00 00 00    	jb     c0000b78 <simple_strtoul+0x134>
c0000ac7:	0f af fe             	imul   edi,esi
c0000aca:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ad1:	01 df                	add    edi,ebx
c0000ad3:	41                   	inc    ecx
c0000ad4:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ad6:	84 d2                	test   dl,dl
c0000ad8:	74 2a                	je     c0000b04 <simple_strtoul+0xc0>
c0000ada:	0f b6 da             	movzx  ebx,dl
c0000add:	f6 83 e0 9d 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6220],0x4
c0000ae4:	75 ca                	jne    c0000ab0 <simple_strtoul+0x6c>
c0000ae6:	0f be d2             	movsx  edx,dl
c0000ae9:	52                   	push   edx
c0000aea:	e8 2d ff ff ff       	call   c0000a1c <toupper>
c0000aef:	5b                   	pop    ebx
c0000af0:	0f b6 d0             	movzx  edx,al
c0000af3:	f6 82 e0 9d 02 c0 01 	test   BYTE PTR [edx-0x3ffd6220],0x1
c0000afa:	74 08                	je     c0000b04 <simple_strtoul+0xc0>
c0000afc:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000aff:	39 f3                	cmp    ebx,esi
c0000b01:	72 b4                	jb     c0000ab7 <simple_strtoul+0x73>
c0000b03:	90                   	nop
c0000b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b08:	85 c0                	test   eax,eax
c0000b0a:	74 14                	je     c0000b20 <simple_strtoul+0xdc>
c0000b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b0f:	09 f8                	or     eax,edi
c0000b11:	75 71                	jne    c0000b84 <simple_strtoul+0x140>
c0000b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b17:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b1b:	31 ff                	xor    edi,edi
c0000b1d:	89 30                	mov    DWORD PTR [eax],esi
c0000b1f:	90                   	nop
c0000b20:	4d                   	dec    ebp
c0000b21:	75 05                	jne    c0000b28 <simple_strtoul+0xe4>
c0000b23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b28:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b2d:	75 02                	jne    c0000b31 <simple_strtoul+0xed>
c0000b2f:	f7 df                	neg    edi
c0000b31:	83 c4 08             	add    esp,0x8
c0000b34:	89 f8                	mov    eax,edi
c0000b36:	5b                   	pop    ebx
c0000b37:	5e                   	pop    esi
c0000b38:	5f                   	pop    edi
c0000b39:	5d                   	pop    ebp
c0000b3a:	c3                   	ret    
c0000b3b:	90                   	nop
c0000b3c:	41                   	inc    ecx
c0000b3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b45:	85 f6                	test   esi,esi
c0000b47:	0f 84 3d ff ff ff    	je     c0000a8a <simple_strtoul+0x46>
c0000b4d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b50:	83 f8 22             	cmp    eax,0x22
c0000b53:	77 6a                	ja     c0000bbf <simple_strtoul+0x17b>
c0000b55:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b57:	83 fe 08             	cmp    esi,0x8
c0000b5a:	0f 84 a2 00 00 00    	je     c0000c02 <simple_strtoul+0x1be>
c0000b60:	83 fe 10             	cmp    esi,0x10
c0000b63:	0f 85 31 ff ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000b69:	80 fa 30             	cmp    dl,0x30
c0000b6c:	74 2c                	je     c0000b9a <simple_strtoul+0x156>
c0000b6e:	be 10 00 00 00       	mov    esi,0x10
c0000b73:	e9 22 ff ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000b78:	bd 01 00 00 00       	mov    ebp,0x1
c0000b7d:	31 ff                	xor    edi,edi
c0000b7f:	e9 4f ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x8f>
c0000b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b88:	89 08                	mov    DWORD PTR [eax],ecx
c0000b8a:	eb 94                	jmp    c0000b20 <simple_strtoul+0xdc>
c0000b8c:	41                   	inc    ecx
c0000b8d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b95:	e9 e8 fe ff ff       	jmp    c0000a82 <simple_strtoul+0x3e>
c0000b9a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b9e:	88 04 24             	mov    BYTE PTR [esp],al
c0000ba1:	50                   	push   eax
c0000ba2:	e8 89 fe ff ff       	call   c0000a30 <tolower>
c0000ba7:	5e                   	pop    esi
c0000ba8:	83 f8 78             	cmp    eax,0x78
c0000bab:	0f 84 84 00 00 00    	je     c0000c35 <simple_strtoul+0x1f1>
c0000bb1:	41                   	inc    ecx
c0000bb2:	be 10 00 00 00       	mov    esi,0x10
c0000bb7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bba:	e9 db fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000bbf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bc3:	85 ff                	test   edi,edi
c0000bc5:	74 5c                	je     c0000c23 <simple_strtoul+0x1df>
c0000bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bcb:	85 c9                	test   ecx,ecx
c0000bcd:	75 4e                	jne    c0000c1d <simple_strtoul+0x1d9>
c0000bcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bd5:	31 ff                	xor    edi,edi
c0000bd7:	e9 4c ff ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000bdc:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000be0:	88 04 24             	mov    BYTE PTR [esp],al
c0000be3:	50                   	push   eax
c0000be4:	e8 47 fe ff ff       	call   c0000a30 <tolower>
c0000be9:	5d                   	pop    ebp
c0000bea:	83 f8 78             	cmp    eax,0x78
c0000bed:	74 3b                	je     c0000c2a <simple_strtoul+0x1e6>
c0000bef:	41                   	inc    ecx
c0000bf0:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bf3:	80 fa 30             	cmp    dl,0x30
c0000bf6:	74 13                	je     c0000c0b <simple_strtoul+0x1c7>
c0000bf8:	be 08 00 00 00       	mov    esi,0x8
c0000bfd:	e9 98 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000c02:	80 fa 30             	cmp    dl,0x30
c0000c05:	0f 85 8f fe ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000c0b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c0e:	41                   	inc    ecx
c0000c0f:	eb e7                	jmp    c0000bf8 <simple_strtoul+0x1b4>
c0000c11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c15:	85 d2                	test   edx,edx
c0000c17:	74 0a                	je     c0000c23 <simple_strtoul+0x1df>
c0000c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c21:	89 30                	mov    DWORD PTR [eax],esi
c0000c23:	31 ff                	xor    edi,edi
c0000c25:	e9 fe fe ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000c2a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c2d:	83 c1 02             	add    ecx,0x2
c0000c30:	e9 34 ff ff ff       	jmp    c0000b69 <simple_strtoul+0x125>
c0000c35:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c38:	be 10 00 00 00       	mov    esi,0x10
c0000c3d:	83 c1 02             	add    ecx,0x2
c0000c40:	e9 55 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>

c0000c45 <largebin_index>:
c0000c45:	89 c2                	mov    edx,eax
c0000c47:	c1 ea 08             	shr    edx,0x8
c0000c4a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c50:	77 10                	ja     c0000c62 <largebin_index+0x1d>
c0000c52:	0f bd d2             	bsr    edx,edx
c0000c55:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c58:	d3 e8                	shr    eax,cl
c0000c5a:	83 e0 03             	and    eax,0x3
c0000c5d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c61:	c3                   	ret    
c0000c62:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c67:	c3                   	ret    

c0000c68 <malloc_init_state>:
c0000c68:	53                   	push   ebx
c0000c69:	8d 50 34             	lea    edx,[eax+0x34]
c0000c6c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c72:	89 d1                	mov    ecx,edx
c0000c74:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c77:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c7a:	83 c2 08             	add    edx,0x8
c0000c7d:	39 da                	cmp    edx,ebx
c0000c7f:	75 f3                	jne    c0000c74 <malloc_init_state+0xc>
c0000c81:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c83:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c8d:	83 e2 03             	and    edx,0x3
c0000c90:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c9a:	83 ca 48             	or     edx,0x48
c0000c9d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000ca7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cb1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cbd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cc7:	5b                   	pop    ebx
c0000cc8:	c3                   	ret    

c0000cc9 <malloc_consolidate>:
c0000cc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ccb:	85 d2                	test   edx,edx
c0000ccd:	0f 84 d8 00 00 00    	je     c0000dab <malloc_consolidate+0xe2>
c0000cd3:	55                   	push   ebp
c0000cd4:	83 e2 fd             	and    edx,0xfffffffd
c0000cd7:	57                   	push   edi
c0000cd8:	89 c5                	mov    ebp,eax
c0000cda:	56                   	push   esi
c0000cdb:	8d 78 34             	lea    edi,[eax+0x34]
c0000cde:	53                   	push   ebx
c0000cdf:	83 ec 10             	sub    esp,0x10
c0000ce2:	89 10                	mov    DWORD PTR [eax],edx
c0000ce4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ce8:	c1 ea 03             	shr    edx,0x3
c0000ceb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cf3:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cf6:	85 d2                	test   edx,edx
c0000cf8:	0f 84 98 00 00 00    	je     c0000d96 <malloc_consolidate+0xcd>
c0000cfe:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d05:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d08:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d0f:	89 f9                	mov    ecx,edi
c0000d11:	83 e1 fe             	and    ecx,0xfffffffe
c0000d14:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d17:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d1a:	83 e3 fc             	and    ebx,0xfffffffc
c0000d1d:	83 e7 01             	and    edi,0x1
c0000d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d23:	75 14                	jne    c0000d39 <malloc_consolidate+0x70>
c0000d25:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d27:	29 fa                	sub    edx,edi
c0000d29:	01 f9                	add    ecx,edi
c0000d2b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2e:	89 fb                	mov    ebx,edi
c0000d30:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d33:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d36:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d39:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d3c:	74 40                	je     c0000d7e <malloc_consolidate+0xb5>
c0000d3e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d41:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d44:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d48:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d4b:	83 e7 01             	and    edi,0x1
c0000d4e:	75 0e                	jne    c0000d5e <malloc_consolidate+0x95>
c0000d50:	01 d9                	add    ecx,ebx
c0000d52:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d55:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d5b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d5e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d61:	89 ce                	mov    esi,ecx
c0000d63:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d66:	83 ce 01             	or     esi,0x1
c0000d69:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d6c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d6f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d72:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d76:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d79:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d7c:	eb 0c                	jmp    c0000d8a <malloc_consolidate+0xc1>
c0000d7e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d8e:	85 d2                	test   edx,edx
c0000d90:	0f 85 6f ff ff ff    	jne    c0000d05 <malloc_consolidate+0x3c>
c0000d96:	83 c5 04             	add    ebp,0x4
c0000d99:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d9d:	0f 85 50 ff ff ff    	jne    c0000cf3 <malloc_consolidate+0x2a>
c0000da3:	83 c4 10             	add    esp,0x10
c0000da6:	5b                   	pop    ebx
c0000da7:	5e                   	pop    esi
c0000da8:	5f                   	pop    edi
c0000da9:	5d                   	pop    ebp
c0000daa:	c3                   	ret    
c0000dab:	e9 b8 fe ff ff       	jmp    c0000c68 <malloc_init_state>

c0000db0 <dlfree>:
c0000db0:	57                   	push   edi
c0000db1:	56                   	push   esi
c0000db2:	53                   	push   ebx
c0000db3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000db7:	85 db                	test   ebx,ebx
c0000db9:	0f 84 e2 00 00 00    	je     c0000ea1 <dlfree+0xf1>
c0000dbf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dc2:	8b 0d 00 ed 02 c0    	mov    ecx,DWORD PTR ds:0xc002ed00
c0000dc8:	89 f0                	mov    eax,esi
c0000dca:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dcd:	83 e0 fc             	and    eax,0xfffffffc
c0000dd0:	39 c1                	cmp    ecx,eax
c0000dd2:	72 24                	jb     c0000df8 <dlfree+0x48>
c0000dd4:	83 c9 03             	or     ecx,0x3
c0000dd7:	c1 e8 03             	shr    eax,0x3
c0000dda:	89 0d 00 ed 02 c0    	mov    DWORD PTR ds:0xc002ed00,ecx
c0000de0:	83 e8 02             	sub    eax,0x2
c0000de3:	8b 0c 85 04 ed 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd12fc]
c0000dea:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dec:	89 14 85 04 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd12fc],edx
c0000df3:	e9 a9 00 00 00       	jmp    c0000ea1 <dlfree+0xf1>
c0000df8:	83 e6 02             	and    esi,0x2
c0000dfb:	0f 85 a0 00 00 00    	jne    c0000ea1 <dlfree+0xf1>
c0000e01:	83 c9 01             	or     ecx,0x1
c0000e04:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e07:	89 0d 00 ed 02 c0    	mov    DWORD PTR ds:0xc002ed00,ecx
c0000e0d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e10:	83 e1 fc             	and    ecx,0xfffffffc
c0000e13:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e17:	75 13                	jne    c0000e2c <dlfree+0x7c>
c0000e19:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e1c:	29 da                	sub    edx,ebx
c0000e1e:	01 d8                	add    eax,ebx
c0000e20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e23:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e26:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e29:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e2c:	39 35 2c ed 02 c0    	cmp    DWORD PTR ds:0xc002ed2c,esi
c0000e32:	74 40                	je     c0000e74 <dlfree+0xc4>
c0000e34:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e38:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e3b:	80 e3 01             	and    bl,0x1
c0000e3e:	75 0e                	jne    c0000e4e <dlfree+0x9e>
c0000e40:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e43:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e46:	01 c8                	add    eax,ecx
c0000e48:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e4b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e4e:	8b 0d 3c ed 02 c0    	mov    ecx,DWORD PTR ds:0xc002ed3c
c0000e54:	c7 42 0c 34 ed 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ed34
c0000e5b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e5e:	89 15 3c ed 02 c0    	mov    DWORD PTR ds:0xc002ed3c,edx
c0000e64:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e67:	89 c1                	mov    ecx,eax
c0000e69:	83 c9 01             	or     ecx,0x1
c0000e6c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e6f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e72:	eb 10                	jmp    c0000e84 <dlfree+0xd4>
c0000e74:	01 c8                	add    eax,ecx
c0000e76:	89 c1                	mov    ecx,eax
c0000e78:	83 c9 01             	or     ecx,0x1
c0000e7b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7e:	89 15 2c ed 02 c0    	mov    DWORD PTR ds:0xc002ed2c,edx
c0000e84:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e89:	76 16                	jbe    c0000ea1 <dlfree+0xf1>
c0000e8b:	f6 05 00 ed 02 c0 02 	test   BYTE PTR ds:0xc002ed00,0x2
c0000e92:	74 0d                	je     c0000ea1 <dlfree+0xf1>
c0000e94:	5b                   	pop    ebx
c0000e95:	b8 00 ed 02 c0       	mov    eax,0xc002ed00
c0000e9a:	5e                   	pop    esi
c0000e9b:	5f                   	pop    edi
c0000e9c:	e9 28 fe ff ff       	jmp    c0000cc9 <malloc_consolidate>
c0000ea1:	5b                   	pop    ebx
c0000ea2:	5e                   	pop    esi
c0000ea3:	5f                   	pop    edi
c0000ea4:	c3                   	ret    

c0000ea5 <sYSMALLOc>:
c0000ea5:	55                   	push   ebp
c0000ea6:	57                   	push   edi
c0000ea7:	56                   	push   esi
c0000ea8:	53                   	push   ebx
c0000ea9:	89 d3                	mov    ebx,edx
c0000eab:	83 ec 2c             	sub    esp,0x2c
c0000eae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000eb2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000eb8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ebb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ebe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ec2:	74 1f                	je     c0000ee3 <sYSMALLOc+0x3e>
c0000ec4:	89 d8                	mov    eax,ebx
c0000ec6:	e8 fe fd ff ff       	call   c0000cc9 <malloc_consolidate>
c0000ecb:	83 ec 0c             	sub    esp,0xc
c0000ece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ed2:	83 e8 07             	sub    eax,0x7
c0000ed5:	50                   	push   eax
c0000ed6:	e8 30 02 00 00       	call   c000110b <dlmalloc>
c0000edb:	83 c4 10             	add    esp,0x10
c0000ede:	e9 20 02 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000ee3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ee6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000eec:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000eef:	83 e0 fc             	and    eax,0xfffffffc
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000efa:	83 c0 10             	add    eax,0x10
c0000efd:	01 c1                	add    ecx,eax
c0000eff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f03:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f0a:	74 04                	je     c0000f10 <sYSMALLOc+0x6b>
c0000f0c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f10:	f7 da                	neg    edx
c0000f12:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f1a:	21 d1                	and    ecx,edx
c0000f1c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f20:	7f 07                	jg     c0000f29 <sYSMALLOc+0x84>
c0000f22:	31 c0                	xor    eax,eax
c0000f24:	e9 da 01 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000f29:	83 ec 0c             	sub    esp,0xc
c0000f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f30:	e8 e7 e7 00 00       	call   c000f71c <sbrk>
c0000f35:	83 c4 10             	add    esp,0x10
c0000f38:	89 c6                	mov    esi,eax
c0000f3a:	83 f8 ff             	cmp    eax,0xffffffff
c0000f3d:	74 e3                	je     c0000f22 <sYSMALLOc+0x7d>
c0000f3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f43:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f47:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f4a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f50:	39 f1                	cmp    ecx,esi
c0000f52:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f58:	75 13                	jne    c0000f6d <sYSMALLOc+0xc8>
c0000f5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f5e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f62:	83 c8 01             	or     eax,0x1
c0000f65:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f68:	e9 3e 01 00 00       	jmp    c00010ab <sYSMALLOc+0x206>
c0000f6d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f73:	88 d0                	mov    al,dl
c0000f75:	83 e0 01             	and    eax,0x1
c0000f78:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f7d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f81:	0f 95 c0             	setne  al
c0000f84:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f88:	39 f1                	cmp    ecx,esi
c0000f8a:	76 12                	jbe    c0000f9e <sYSMALLOc+0xf9>
c0000f8c:	84 c0                	test   al,al
c0000f8e:	74 0e                	je     c0000f9e <sYSMALLOc+0xf9>
c0000f90:	83 e2 fe             	and    edx,0xfffffffe
c0000f93:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f99:	e9 83 00 00 00       	jmp    c0001021 <sYSMALLOc+0x17c>
c0000f9e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fa3:	74 7c                	je     c0001021 <sYSMALLOc+0x17c>
c0000fa5:	84 c0                	test   al,al
c0000fa7:	74 0c                	je     c0000fb5 <sYSMALLOc+0x110>
c0000fa9:	89 f0                	mov    eax,esi
c0000fab:	29 c8                	sub    eax,ecx
c0000fad:	01 e8                	add    eax,ebp
c0000faf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fb5:	89 f2                	mov    edx,esi
c0000fb7:	83 e2 07             	and    edx,0x7
c0000fba:	74 0c                	je     c0000fc8 <sYSMALLOc+0x123>
c0000fbc:	b8 08 00 00 00       	mov    eax,0x8
c0000fc1:	29 d0                	sub    eax,edx
c0000fc3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fc6:	eb 04                	jmp    c0000fcc <sYSMALLOc+0x127>
c0000fc8:	89 f5                	mov    ebp,esi
c0000fca:	31 c0                	xor    eax,eax
c0000fcc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fd8:	01 c1                	add    ecx,eax
c0000fda:	83 ec 0c             	sub    esp,0xc
c0000fdd:	01 f1                	add    ecx,esi
c0000fdf:	01 ca                	add    edx,ecx
c0000fe1:	29 c8                	sub    eax,ecx
c0000fe3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fe7:	01 c2                	add    edx,eax
c0000fe9:	52                   	push   edx
c0000fea:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fee:	e8 29 e7 00 00       	call   c000f71c <sbrk>
c0000ff3:	83 c4 10             	add    esp,0x10
c0000ff6:	83 f8 ff             	cmp    eax,0xffffffff
c0000ff9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ffd:	75 0f                	jne    c000100e <sYSMALLOc+0x169>
c0000fff:	83 ec 0c             	sub    esp,0xc
c0001002:	6a 00                	push   0x0
c0001004:	e8 13 e7 00 00       	call   c000f71c <sbrk>
c0001009:	83 c4 10             	add    esp,0x10
c000100c:	eb 30                	jmp    c000103e <sYSMALLOc+0x199>
c000100e:	39 c6                	cmp    esi,eax
c0001010:	76 33                	jbe    c0001045 <sYSMALLOc+0x1a0>
c0001012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001016:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000101d:	01 f0                	add    eax,esi
c000101f:	eb 1d                	jmp    c000103e <sYSMALLOc+0x199>
c0001021:	83 ec 0c             	sub    esp,0xc
c0001024:	89 f5                	mov    ebp,esi
c0001026:	6a 00                	push   0x0
c0001028:	e8 ef e6 00 00       	call   c000f71c <sbrk>
c000102d:	89 c2                	mov    edx,eax
c000102f:	29 f2                	sub    edx,esi
c0001031:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001035:	83 c4 10             	add    esp,0x10
c0001038:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103e:	31 d2                	xor    edx,edx
c0001040:	83 f8 ff             	cmp    eax,0xffffffff
c0001043:	74 66                	je     c00010ab <sYSMALLOc+0x206>
c0001045:	29 e8                	sub    eax,ebp
c0001047:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000104a:	01 d0                	add    eax,edx
c000104c:	83 c8 01             	or     eax,0x1
c000104f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001052:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001058:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000105d:	74 4c                	je     c00010ab <sYSMALLOc+0x206>
c000105f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001063:	83 e8 0c             	sub    eax,0xc
c0001066:	83 e0 f8             	and    eax,0xfffffff8
c0001069:	89 c2                	mov    edx,eax
c000106b:	83 ca 01             	or     edx,0x1
c000106e:	83 f8 0f             	cmp    eax,0xf
c0001071:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001074:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000107c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001084:	76 25                	jbe    c00010ab <sYSMALLOc+0x206>
c0001086:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000108c:	83 ec 0c             	sub    esp,0xc
c000108f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001099:	83 c7 08             	add    edi,0x8
c000109c:	57                   	push   edi
c000109d:	e8 0e fd ff ff       	call   c0000db0 <dlfree>
c00010a2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010a8:	83 c4 10             	add    esp,0x10
c00010ab:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010b1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010b7:	73 06                	jae    c00010bf <sYSMALLOc+0x21a>
c00010b9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010bf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010c5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x22e>
c00010cd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010d9:	83 e2 fc             	and    edx,0xfffffffc
c00010dc:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010e0:	0f 82 3c fe ff ff    	jb     c0000f22 <sYSMALLOc+0x7d>
c00010e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ea:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010ed:	29 fa                	sub    edx,edi
c00010ef:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010f2:	83 ca 01             	or     edx,0x1
c00010f5:	89 fb                	mov    ebx,edi
c00010f7:	83 c0 08             	add    eax,0x8
c00010fa:	83 cb 01             	or     ebx,0x1
c00010fd:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001100:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001103:	83 c4 2c             	add    esp,0x2c
c0001106:	5b                   	pop    ebx
c0001107:	5e                   	pop    esi
c0001108:	5f                   	pop    edi
c0001109:	5d                   	pop    ebp
c000110a:	c3                   	ret    

c000110b <dlmalloc>:
c000110b:	55                   	push   ebp
c000110c:	57                   	push   edi
c000110d:	56                   	push   esi
c000110e:	53                   	push   ebx
c000110f:	83 ec 1c             	sub    esp,0x1c
c0001112:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001116:	83 f8 df             	cmp    eax,0xffffffdf
c0001119:	0f 87 70 03 00 00    	ja     c000148f <dlmalloc+0x384>
c000111f:	83 c0 0b             	add    eax,0xb
c0001122:	be 10 00 00 00       	mov    esi,0x10
c0001127:	83 f8 0f             	cmp    eax,0xf
c000112a:	76 05                	jbe    c0001131 <dlmalloc+0x26>
c000112c:	83 e0 f8             	and    eax,0xfffffff8
c000112f:	89 c6                	mov    esi,eax
c0001131:	8b 3d 00 ed 02 c0    	mov    edi,DWORD PTR ds:0xc002ed00
c0001137:	f7 c7 01 00 00 00    	test   edi,0x1
c000113d:	75 17                	jne    c0001156 <dlmalloc+0x4b>
c000113f:	85 ff                	test   edi,edi
c0001141:	0f 85 05 03 00 00    	jne    c000144c <dlmalloc+0x341>
c0001147:	b8 00 ed 02 c0       	mov    eax,0xc002ed00
c000114c:	e8 78 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c0001151:	e9 f6 02 00 00       	jmp    c000144c <dlmalloc+0x341>
c0001156:	39 f7                	cmp    edi,esi
c0001158:	72 1f                	jb     c0001179 <dlmalloc+0x6e>
c000115a:	89 f2                	mov    edx,esi
c000115c:	c1 ea 03             	shr    edx,0x3
c000115f:	83 ea 02             	sub    edx,0x2
c0001162:	8b 04 95 04 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd12fc]
c0001169:	85 c0                	test   eax,eax
c000116b:	74 0c                	je     c0001179 <dlmalloc+0x6e>
c000116d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001170:	89 0c 95 04 ed 02 c0 	mov    DWORD PTR [edx*4-0x3ffd12fc],ecx
c0001177:	eb 30                	jmp    c00011a9 <dlmalloc+0x9e>
c0001179:	89 f0                	mov    eax,esi
c000117b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001181:	77 2e                	ja     c00011b1 <dlmalloc+0xa6>
c0001183:	c1 e8 03             	shr    eax,0x3
c0001186:	8d 14 c5 34 ed 02 c0 	lea    edx,[eax*8-0x3ffd12cc]
c000118d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001191:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001194:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001197:	39 c3                	cmp    ebx,eax
c0001199:	74 2e                	je     c00011c9 <dlmalloc+0xbe>
c000119b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000119e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011a3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011a6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011a9:	83 c0 08             	add    eax,0x8
c00011ac:	e9 e0 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c00011b1:	e8 8f fa ff ff       	call   c0000c45 <largebin_index>
c00011b6:	83 e7 02             	and    edi,0x2
c00011b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011bd:	74 0a                	je     c00011c9 <dlmalloc+0xbe>
c00011bf:	b8 00 ed 02 c0       	mov    eax,0xc002ed00
c00011c4:	e8 00 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c00011c9:	8d 46 10             	lea    eax,[esi+0x10]
c00011cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011d0:	8b 1d 40 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed40
c00011d6:	81 fb 34 ed 02 c0    	cmp    ebx,0xc002ed34
c00011dc:	0f 84 13 01 00 00    	je     c00012f5 <dlmalloc+0x1ea>
c00011e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011e5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011e8:	83 e7 fc             	and    edi,0xfffffffc
c00011eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011f1:	77 4c                	ja     c000123f <dlmalloc+0x134>
c00011f3:	3d 34 ed 02 c0       	cmp    eax,0xc002ed34
c00011f8:	75 45                	jne    c000123f <dlmalloc+0x134>
c00011fa:	39 1d 30 ed 02 c0    	cmp    DWORD PTR ds:0xc002ed30,ebx
c0001200:	75 3d                	jne    c000123f <dlmalloc+0x134>
c0001202:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001206:	73 37                	jae    c000123f <dlmalloc+0x134>
c0001208:	8d 04 33             	lea    eax,[ebx+esi*1]
c000120b:	89 fa                	mov    edx,edi
c000120d:	a3 3c ed 02 c0       	mov    ds:0xc002ed3c,eax
c0001212:	a3 40 ed 02 c0       	mov    ds:0xc002ed40,eax
c0001217:	a3 30 ed 02 c0       	mov    ds:0xc002ed30,eax
c000121c:	29 f2                	sub    edx,esi
c000121e:	c7 40 08 34 ed 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ed34
c0001225:	c7 40 0c 34 ed 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ed34
c000122c:	83 ce 01             	or     esi,0x1
c000122f:	89 d1                	mov    ecx,edx
c0001231:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001234:	83 c9 01             	or     ecx,0x1
c0001237:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000123a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000123d:	eb 15                	jmp    c0001254 <dlmalloc+0x149>
c000123f:	a3 40 ed 02 c0       	mov    ds:0xc002ed40,eax
c0001244:	39 fe                	cmp    esi,edi
c0001246:	c7 40 08 34 ed 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ed34
c000124d:	75 0d                	jne    c000125c <dlmalloc+0x151>
c000124f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001254:	8d 43 08             	lea    eax,[ebx+0x8]
c0001257:	e9 35 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000125c:	89 f8                	mov    eax,edi
c000125e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001264:	77 19                	ja     c000127f <dlmalloc+0x174>
c0001266:	c1 e8 03             	shr    eax,0x3
c0001269:	8d 14 00             	lea    edx,[eax+eax*1]
c000126c:	83 c2 0d             	add    edx,0xd
c000126f:	8d 2c 95 f8 ec 02 c0 	lea    ebp,[edx*4-0x3ffd1308]
c0001276:	8b 14 95 00 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1300]
c000127d:	eb 46                	jmp    c00012c5 <dlmalloc+0x1ba>
c000127f:	e8 c1 f9 ff ff       	call   c0000c45 <largebin_index>
c0001284:	8d 14 00             	lea    edx,[eax+eax*1]
c0001287:	83 c2 0d             	add    edx,0xd
c000128a:	8d 0c 95 00 ed 02 c0 	lea    ecx,[edx*4-0x3ffd1300]
c0001291:	8b 14 95 00 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1300]
c0001298:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000129b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000129f:	89 d5                	mov    ebp,edx
c00012a1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012a5:	74 1e                	je     c00012c5 <dlmalloc+0x1ba>
c00012a7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012aa:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012ad:	77 12                	ja     c00012c1 <dlmalloc+0x1b6>
c00012af:	83 cf 01             	or     edi,0x1
c00012b2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012b5:	76 05                	jbe    c00012bc <dlmalloc+0x1b1>
c00012b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ba:	eb f6                	jmp    c00012b2 <dlmalloc+0x1a7>
c00012bc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012bf:	eb 04                	jmp    c00012c5 <dlmalloc+0x1ba>
c00012c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012c5:	89 c7                	mov    edi,eax
c00012c7:	88 c1                	mov    cl,al
c00012c9:	c1 ff 05             	sar    edi,0x5
c00012cc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012d0:	bf 01 00 00 00       	mov    edi,0x1
c00012d5:	d3 e7                	shl    edi,cl
c00012d7:	89 f8                	mov    eax,edi
c00012d9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012dd:	09 04 bd 34 f0 02 c0 	or     DWORD PTR [edi*4-0x3ffd0fcc],eax
c00012e4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012e7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ea:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012ed:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012f0:	e9 db fe ff ff       	jmp    c00011d0 <dlmalloc+0xc5>
c00012f5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012fb:	76 78                	jbe    c0001375 <dlmalloc+0x26a>
c00012fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001301:	8d 04 c5 34 ed 02 c0 	lea    eax,[eax*8-0x3ffd12cc]
c0001308:	8d 48 f8             	lea    ecx,[eax-0x8]
c000130b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000130e:	39 ca                	cmp    edx,ecx
c0001310:	74 63                	je     c0001375 <dlmalloc+0x26a>
c0001312:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001315:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001318:	83 e3 fc             	and    ebx,0xfffffffc
c000131b:	39 de                	cmp    esi,ebx
c000131d:	77 52                	ja     c0001371 <dlmalloc+0x266>
c000131f:	89 df                	mov    edi,ebx
c0001321:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001324:	29 f7                	sub    edi,esi
c0001326:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001329:	01 d3                	add    ebx,edx
c000132b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000132e:	83 ff 0f             	cmp    edi,0xf
c0001331:	8d 42 08             	lea    eax,[edx+0x8]
c0001334:	77 09                	ja     c000133f <dlmalloc+0x234>
c0001336:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000133a:	e9 52 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000133f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001342:	83 ce 01             	or     esi,0x1
c0001345:	89 0d 3c ed 02 c0    	mov    DWORD PTR ds:0xc002ed3c,ecx
c000134b:	89 0d 40 ed 02 c0    	mov    DWORD PTR ds:0xc002ed40,ecx
c0001351:	c7 41 08 34 ed 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ed34
c0001358:	c7 41 0c 34 ed 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ed34
c000135f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001362:	89 fa                	mov    edx,edi
c0001364:	83 ca 01             	or     edx,0x1
c0001367:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000136a:	89 3b                	mov    DWORD PTR [ebx],edi
c000136c:	e9 20 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c0001371:	89 c2                	mov    edx,eax
c0001373:	eb 99                	jmp    c000130e <dlmalloc+0x203>
c0001375:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001379:	b8 01 00 00 00       	mov    eax,0x1
c000137e:	41                   	inc    ecx
c000137f:	89 cb                	mov    ebx,ecx
c0001381:	8d 14 cd 2c ed 02 c0 	lea    edx,[ecx*8-0x3ffd12d4]
c0001388:	c1 eb 05             	shr    ebx,0x5
c000138b:	d3 e0                	shl    eax,cl
c000138d:	8b 3c 9d 34 f0 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0fcc]
c0001394:	39 f8                	cmp    eax,edi
c0001396:	77 04                	ja     c000139c <dlmalloc+0x291>
c0001398:	85 c0                	test   eax,eax
c000139a:	75 26                	jne    c00013c2 <dlmalloc+0x2b7>
c000139c:	43                   	inc    ebx
c000139d:	83 fb 02             	cmp    ebx,0x2
c00013a0:	0f 87 a6 00 00 00    	ja     c000144c <dlmalloc+0x341>
c00013a6:	8b 3c 9d 34 f0 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0fcc]
c00013ad:	85 ff                	test   edi,edi
c00013af:	74 eb                	je     c000139c <dlmalloc+0x291>
c00013b1:	89 d8                	mov    eax,ebx
c00013b3:	c1 e0 06             	shl    eax,0x6
c00013b6:	8d 14 85 2c ed 02 c0 	lea    edx,[eax*4-0x3ffd12d4]
c00013bd:	b8 01 00 00 00       	mov    eax,0x1
c00013c2:	85 f8                	test   eax,edi
c00013c4:	75 07                	jne    c00013cd <dlmalloc+0x2c2>
c00013c6:	83 c2 08             	add    edx,0x8
c00013c9:	01 c0                	add    eax,eax
c00013cb:	eb f5                	jmp    c00013c2 <dlmalloc+0x2b7>
c00013cd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013d0:	39 ca                	cmp    edx,ecx
c00013d2:	75 14                	jne    c00013e8 <dlmalloc+0x2dd>
c00013d4:	89 c1                	mov    ecx,eax
c00013d6:	83 c2 08             	add    edx,0x8
c00013d9:	f7 d1                	not    ecx
c00013db:	01 c0                	add    eax,eax
c00013dd:	21 cf                	and    edi,ecx
c00013df:	89 3c 9d 34 f0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0fcc],edi
c00013e6:	eb ac                	jmp    c0001394 <dlmalloc+0x289>
c00013e8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013eb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013ee:	83 e0 fc             	and    eax,0xfffffffc
c00013f1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013f4:	89 c3                	mov    ebx,eax
c00013f6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013f9:	29 f3                	sub    ebx,esi
c00013fb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013fe:	83 fb 0f             	cmp    ebx,0xf
c0001401:	8d 41 08             	lea    eax,[ecx+0x8]
c0001404:	77 09                	ja     c000140f <dlmalloc+0x304>
c0001406:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000140a:	e9 82 00 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000140f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001412:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001418:	89 3d 3c ed 02 c0    	mov    DWORD PTR ds:0xc002ed3c,edi
c000141e:	89 3d 40 ed 02 c0    	mov    DWORD PTR ds:0xc002ed40,edi
c0001424:	c7 47 08 34 ed 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ed34
c000142b:	c7 47 0c 34 ed 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ed34
c0001432:	77 06                	ja     c000143a <dlmalloc+0x32f>
c0001434:	89 3d 30 ed 02 c0    	mov    DWORD PTR ds:0xc002ed30,edi
c000143a:	83 ce 01             	or     esi,0x1
c000143d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001440:	89 d9                	mov    ecx,ebx
c0001442:	83 c9 01             	or     ecx,0x1
c0001445:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001448:	89 1a                	mov    DWORD PTR [edx],ebx
c000144a:	eb 45                	jmp    c0001491 <dlmalloc+0x386>
c000144c:	a1 2c ed 02 c0       	mov    eax,ds:0xc002ed2c
c0001451:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001454:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001457:	83 e2 fc             	and    edx,0xfffffffc
c000145a:	39 d1                	cmp    ecx,edx
c000145c:	77 1e                	ja     c000147c <dlmalloc+0x371>
c000145e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001461:	89 f3                	mov    ebx,esi
c0001463:	89 0d 2c ed 02 c0    	mov    DWORD PTR ds:0xc002ed2c,ecx
c0001469:	83 cb 01             	or     ebx,0x1
c000146c:	29 f2                	sub    edx,esi
c000146e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001471:	83 ca 01             	or     edx,0x1
c0001474:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001477:	e9 2d fd ff ff       	jmp    c00011a9 <dlmalloc+0x9e>
c000147c:	83 c4 1c             	add    esp,0x1c
c000147f:	89 f0                	mov    eax,esi
c0001481:	5b                   	pop    ebx
c0001482:	ba 00 ed 02 c0       	mov    edx,0xc002ed00
c0001487:	5e                   	pop    esi
c0001488:	5f                   	pop    edi
c0001489:	5d                   	pop    ebp
c000148a:	e9 16 fa ff ff       	jmp    c0000ea5 <sYSMALLOc>
c000148f:	31 c0                	xor    eax,eax
c0001491:	83 c4 1c             	add    esp,0x1c
c0001494:	5b                   	pop    ebx
c0001495:	5e                   	pop    esi
c0001496:	5f                   	pop    edi
c0001497:	5d                   	pop    ebp
c0001498:	c3                   	ret    

c0001499 <iALLOc>:
c0001499:	55                   	push   ebp
c000149a:	89 c5                	mov    ebp,eax
c000149c:	57                   	push   edi
c000149d:	56                   	push   esi
c000149e:	53                   	push   ebx
c000149f:	83 ec 2c             	sub    esp,0x2c
c00014a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014a6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ae:	83 3d 00 ed 02 c0 00 	cmp    DWORD PTR ds:0xc002ed00,0x0
c00014b5:	75 12                	jne    c00014c9 <iALLOc+0x30>
c00014b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014bb:	b8 00 ed 02 c0       	mov    eax,0xc002ed00
c00014c0:	e8 04 f8 ff ff       	call   c0000cc9 <malloc_consolidate>
c00014c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014ce:	74 12                	je     c00014e2 <iALLOc+0x49>
c00014d0:	85 ed                	test   ebp,ebp
c00014d2:	0f 84 64 01 00 00    	je     c000163c <iALLOc+0x1a3>
c00014d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014e0:	eb 33                	jmp    c0001515 <iALLOc+0x7c>
c00014e2:	85 ed                	test   ebp,ebp
c00014e4:	75 14                	jne    c00014fa <iALLOc+0x61>
c00014e6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014ee:	83 c4 2c             	add    esp,0x2c
c00014f1:	5b                   	pop    ebx
c00014f2:	5e                   	pop    esi
c00014f3:	5f                   	pop    edi
c00014f4:	5d                   	pop    ebp
c00014f5:	e9 11 fc ff ff       	jmp    c000110b <dlmalloc>
c00014fa:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001501:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001509:	83 f8 0f             	cmp    eax,0xf
c000150c:	76 07                	jbe    c0001515 <iALLOc+0x7c>
c000150e:	83 e0 f8             	and    eax,0xfffffff8
c0001511:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001515:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000151a:	75 09                	jne    c0001525 <iALLOc+0x8c>
c000151c:	89 d0                	mov    eax,edx
c000151e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001521:	31 f6                	xor    esi,esi
c0001523:	eb 3b                	jmp    c0001560 <iALLOc+0xc7>
c0001525:	8b 02                	mov    eax,DWORD PTR [edx]
c0001527:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000152f:	83 c0 0b             	add    eax,0xb
c0001532:	83 f8 0f             	cmp    eax,0xf
c0001535:	76 07                	jbe    c000153e <iALLOc+0xa5>
c0001537:	83 e0 f8             	and    eax,0xfffffff8
c000153a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000153e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001542:	0f af f5             	imul   esi,ebp
c0001545:	eb 25                	jmp    c000156c <iALLOc+0xd3>
c0001547:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001549:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000154c:	bb 10 00 00 00       	mov    ebx,0x10
c0001551:	83 f9 0f             	cmp    ecx,0xf
c0001554:	76 05                	jbe    c000155b <iALLOc+0xc2>
c0001556:	83 e1 f8             	and    ecx,0xfffffff8
c0001559:	89 cb                	mov    ebx,ecx
c000155b:	01 de                	add    esi,ebx
c000155d:	83 c0 04             	add    eax,0x4
c0001560:	39 c7                	cmp    edi,eax
c0001562:	75 e3                	jne    c0001547 <iALLOc+0xae>
c0001564:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000156c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001570:	8b 1d 54 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f054
c0001576:	83 ec 0c             	sub    esp,0xc
c0001579:	c7 05 54 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f054,0x0
c0001583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001587:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000158b:	50                   	push   eax
c000158c:	e8 7a fb ff ff       	call   c000110b <dlmalloc>
c0001591:	83 c4 10             	add    esp,0x10
c0001594:	89 1d 54 f0 02 c0    	mov    DWORD PTR ds:0xc002f054,ebx
c000159a:	85 c0                	test   eax,eax
c000159c:	0f 84 92 00 00 00    	je     c0001634 <iALLOc+0x19b>
c00015a2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015a5:	8d 78 f8             	lea    edi,[eax-0x8]
c00015a8:	83 e3 fc             	and    ebx,0xfffffffc
c00015ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015af:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015b4:	74 1e                	je     c00015d4 <iALLOc+0x13b>
c00015b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ba:	89 d9                	mov    ecx,ebx
c00015bc:	52                   	push   edx
c00015bd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015c1:	83 e9 04             	sub    ecx,0x4
c00015c4:	51                   	push   ecx
c00015c5:	6a 00                	push   0x0
c00015c7:	50                   	push   eax
c00015c8:	e8 9f f1 ff ff       	call   c000076c <memset>
c00015cd:	83 c4 10             	add    esp,0x10
c00015d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015d9:	75 14                	jne    c00015ef <iALLOc+0x156>
c00015db:	8d 04 37             	lea    eax,[edi+esi*1]
c00015de:	29 f3                	sub    ebx,esi
c00015e0:	8d 48 08             	lea    ecx,[eax+0x8]
c00015e3:	83 cb 01             	or     ebx,0x1
c00015e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015ed:	89 f3                	mov    ebx,esi
c00015ef:	31 c0                	xor    eax,eax
c00015f1:	4d                   	dec    ebp
c00015f2:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015f9:	39 c5                	cmp    ebp,eax
c00015fb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015fe:	74 2c                	je     c000162c <iALLOc+0x193>
c0001600:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001604:	85 c9                	test   ecx,ecx
c0001606:	75 15                	jne    c000161d <iALLOc+0x184>
c0001608:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000160b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000160e:	b9 10 00 00 00       	mov    ecx,0x10
c0001613:	83 fe 0f             	cmp    esi,0xf
c0001616:	76 05                	jbe    c000161d <iALLOc+0x184>
c0001618:	83 e6 f8             	and    esi,0xfffffff8
c000161b:	89 f1                	mov    ecx,esi
c000161d:	89 ce                	mov    esi,ecx
c000161f:	29 cb                	sub    ebx,ecx
c0001621:	83 ce 01             	or     esi,0x1
c0001624:	40                   	inc    eax
c0001625:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001628:	01 cf                	add    edi,ecx
c000162a:	eb c6                	jmp    c00015f2 <iALLOc+0x159>
c000162c:	83 cb 01             	or     ebx,0x1
c000162f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001632:	eb 08                	jmp    c000163c <iALLOc+0x1a3>
c0001634:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000163c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001640:	83 c4 2c             	add    esp,0x2c
c0001643:	5b                   	pop    ebx
c0001644:	5e                   	pop    esi
c0001645:	5f                   	pop    edi
c0001646:	5d                   	pop    ebp
c0001647:	c3                   	ret    

c0001648 <dlrealloc>:
c0001648:	55                   	push   ebp
c0001649:	57                   	push   edi
c000164a:	56                   	push   esi
c000164b:	53                   	push   ebx
c000164c:	83 ec 1c             	sub    esp,0x1c
c000164f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001653:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001657:	85 db                	test   ebx,ebx
c0001659:	75 10                	jne    c000166b <dlrealloc+0x23>
c000165b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000165f:	83 c4 1c             	add    esp,0x1c
c0001662:	5b                   	pop    ebx
c0001663:	5e                   	pop    esi
c0001664:	5f                   	pop    edi
c0001665:	5d                   	pop    ebp
c0001666:	e9 a0 fa ff ff       	jmp    c000110b <dlmalloc>
c000166b:	83 f8 df             	cmp    eax,0xffffffdf
c000166e:	76 07                	jbe    c0001677 <dlrealloc+0x2f>
c0001670:	31 db                	xor    ebx,ebx
c0001672:	e9 73 01 00 00       	jmp    c00017ea <dlrealloc+0x1a2>
c0001677:	83 c0 0b             	add    eax,0xb
c000167a:	bf 10 00 00 00       	mov    edi,0x10
c000167f:	83 f8 0f             	cmp    eax,0xf
c0001682:	76 05                	jbe    c0001689 <dlrealloc+0x41>
c0001684:	83 e0 f8             	and    eax,0xfffffff8
c0001687:	89 c7                	mov    edi,eax
c0001689:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000168c:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000168f:	89 c6                	mov    esi,eax
c0001691:	83 e6 fc             	and    esi,0xfffffffc
c0001694:	a8 02                	test   al,0x2
c0001696:	75 d8                	jne    c0001670 <dlrealloc+0x28>
c0001698:	39 f7                	cmp    edi,esi
c000169a:	0f 86 0c 01 00 00    	jbe    c00017ac <dlrealloc+0x164>
c00016a0:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016a4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016a7:	39 15 2c ed 02 c0    	cmp    DWORD PTR ds:0xc002ed2c,edx
c00016ad:	75 33                	jne    c00016e2 <dlrealloc+0x9a>
c00016af:	83 e1 fc             	and    ecx,0xfffffffc
c00016b2:	01 f1                	add    ecx,esi
c00016b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016b8:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016bb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016bf:	77 49                	ja     c000170a <dlrealloc+0xc2>
c00016c1:	01 fd                	add    ebp,edi
c00016c3:	83 e0 01             	and    eax,0x1
c00016c6:	09 f8                	or     eax,edi
c00016c8:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016cb:	89 2d 2c ed 02 c0    	mov    DWORD PTR ds:0xc002ed2c,ebp
c00016d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016d5:	29 f8                	sub    eax,edi
c00016d7:	83 c8 01             	or     eax,0x1
c00016da:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016dd:	e9 08 01 00 00       	jmp    c00017ea <dlrealloc+0x1a2>
c00016e2:	89 c8                	mov    eax,ecx
c00016e4:	83 e0 fe             	and    eax,0xfffffffe
c00016e7:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016ec:	75 1c                	jne    c000170a <dlrealloc+0xc2>
c00016ee:	83 e1 fc             	and    ecx,0xfffffffc
c00016f1:	01 f1                	add    ecx,esi
c00016f3:	39 cf                	cmp    edi,ecx
c00016f5:	77 13                	ja     c000170a <dlrealloc+0xc2>
c00016f7:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016fa:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016fd:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001700:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001703:	89 ce                	mov    esi,ecx
c0001705:	e9 a2 00 00 00       	jmp    c00017ac <dlrealloc+0x164>
c000170a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000170e:	8d 47 f9             	lea    eax,[edi-0x7]
c0001711:	83 ec 0c             	sub    esp,0xc
c0001714:	50                   	push   eax
c0001715:	e8 f1 f9 ff ff       	call   c000110b <dlmalloc>
c000171a:	83 c4 10             	add    esp,0x10
c000171d:	85 c0                	test   eax,eax
c000171f:	0f 84 4b ff ff ff    	je     c0001670 <dlrealloc+0x28>
c0001725:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001728:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000172c:	39 ca                	cmp    edx,ecx
c000172e:	75 0a                	jne    c000173a <dlrealloc+0xf2>
c0001730:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001733:	83 e0 fc             	and    eax,0xfffffffc
c0001736:	01 c6                	add    esi,eax
c0001738:	eb 72                	jmp    c00017ac <dlrealloc+0x164>
c000173a:	83 ee 04             	sub    esi,0x4
c000173d:	83 fe 27             	cmp    esi,0x27
c0001740:	76 0f                	jbe    c0001751 <dlrealloc+0x109>
c0001742:	31 d2                	xor    edx,edx
c0001744:	39 d6                	cmp    esi,edx
c0001746:	76 4c                	jbe    c0001794 <dlrealloc+0x14c>
c0001748:	8a 0c 13             	mov    cl,BYTE PTR [ebx+edx*1]
c000174b:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000174e:	42                   	inc    edx
c000174f:	eb f3                	jmp    c0001744 <dlrealloc+0xfc>
c0001751:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001753:	83 fe 13             	cmp    esi,0x13
c0001756:	89 10                	mov    DWORD PTR [eax],edx
c0001758:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000175b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000175e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001761:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001764:	76 2e                	jbe    c0001794 <dlrealloc+0x14c>
c0001766:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001769:	83 fe 1b             	cmp    esi,0x1b
c000176c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000176f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001772:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001775:	76 1d                	jbe    c0001794 <dlrealloc+0x14c>
c0001777:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000177a:	83 fe 23             	cmp    esi,0x23
c000177d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001780:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001783:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001786:	76 0c                	jbe    c0001794 <dlrealloc+0x14c>
c0001788:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000178b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000178e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001791:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001794:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001798:	83 ec 0c             	sub    esp,0xc
c000179b:	53                   	push   ebx
c000179c:	e8 0f f6 ff ff       	call   c0000db0 <dlfree>
c00017a1:	83 c4 10             	add    esp,0x10
c00017a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017a8:	89 c3                	mov    ebx,eax
c00017aa:	eb 3e                	jmp    c00017ea <dlrealloc+0x1a2>
c00017ac:	89 f2                	mov    edx,esi
c00017ae:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017b1:	29 fa                	sub    edx,edi
c00017b3:	83 e1 01             	and    ecx,0x1
c00017b6:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017ba:	83 fa 0f             	cmp    edx,0xf
c00017bd:	77 0b                	ja     c00017ca <dlrealloc+0x182>
c00017bf:	09 ce                	or     esi,ecx
c00017c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017c8:	eb 20                	jmp    c00017ea <dlrealloc+0x1a2>
c00017ca:	01 fd                	add    ebp,edi
c00017cc:	83 ec 0c             	sub    esp,0xc
c00017cf:	09 cf                	or     edi,ecx
c00017d1:	83 ca 01             	or     edx,0x1
c00017d4:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017d7:	83 c5 08             	add    ebp,0x8
c00017da:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017e1:	55                   	push   ebp
c00017e2:	e8 c9 f5 ff ff       	call   c0000db0 <dlfree>
c00017e7:	83 c4 10             	add    esp,0x10
c00017ea:	83 c4 1c             	add    esp,0x1c
c00017ed:	89 d8                	mov    eax,ebx
c00017ef:	5b                   	pop    ebx
c00017f0:	5e                   	pop    esi
c00017f1:	5f                   	pop    edi
c00017f2:	5d                   	pop    ebp
c00017f3:	c3                   	ret    

c00017f4 <dlmemalign>:
c00017f4:	55                   	push   ebp
c00017f5:	57                   	push   edi
c00017f6:	56                   	push   esi
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 0c             	sub    esp,0xc
c00017fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001803:	83 fa 08             	cmp    edx,0x8
c0001806:	77 10                	ja     c0001818 <dlmemalign+0x24>
c0001808:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000180c:	83 c4 0c             	add    esp,0xc
c000180f:	5b                   	pop    ebx
c0001810:	5e                   	pop    esi
c0001811:	5f                   	pop    edi
c0001812:	5d                   	pop    ebp
c0001813:	e9 f3 f8 ff ff       	jmp    c000110b <dlmalloc>
c0001818:	bf 10 00 00 00       	mov    edi,0x10
c000181d:	83 fa 0f             	cmp    edx,0xf
c0001820:	76 13                	jbe    c0001835 <dlmemalign+0x41>
c0001822:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001825:	85 d1                	test   ecx,edx
c0001827:	75 04                	jne    c000182d <dlmemalign+0x39>
c0001829:	89 d7                	mov    edi,edx
c000182b:	eb 08                	jmp    c0001835 <dlmemalign+0x41>
c000182d:	39 d7                	cmp    edi,edx
c000182f:	73 04                	jae    c0001835 <dlmemalign+0x41>
c0001831:	01 ff                	add    edi,edi
c0001833:	eb f8                	jmp    c000182d <dlmemalign+0x39>
c0001835:	83 f8 df             	cmp    eax,0xffffffdf
c0001838:	76 07                	jbe    c0001841 <dlmemalign+0x4d>
c000183a:	31 c0                	xor    eax,eax
c000183c:	e9 ce 00 00 00       	jmp    c000190f <dlmemalign+0x11b>
c0001841:	83 c0 0b             	add    eax,0xb
c0001844:	bd 10 00 00 00       	mov    ebp,0x10
c0001849:	83 f8 0f             	cmp    eax,0xf
c000184c:	76 05                	jbe    c0001853 <dlmemalign+0x5f>
c000184e:	83 e0 f8             	and    eax,0xfffffff8
c0001851:	89 c5                	mov    ebp,eax
c0001853:	83 ec 0c             	sub    esp,0xc
c0001856:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000185a:	50                   	push   eax
c000185b:	e8 ab f8 ff ff       	call   c000110b <dlmalloc>
c0001860:	83 c4 10             	add    esp,0x10
c0001863:	89 c1                	mov    ecx,eax
c0001865:	85 c0                	test   eax,eax
c0001867:	74 d1                	je     c000183a <dlmemalign+0x46>
c0001869:	31 d2                	xor    edx,edx
c000186b:	8d 70 f8             	lea    esi,[eax-0x8]
c000186e:	f7 f7                	div    edi
c0001870:	85 d2                	test   edx,edx
c0001872:	74 62                	je     c00018d6 <dlmemalign+0xe2>
c0001874:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001878:	89 f8                	mov    eax,edi
c000187a:	f7 d8                	neg    eax
c000187c:	21 c3                	and    ebx,eax
c000187e:	83 eb 08             	sub    ebx,0x8
c0001881:	89 d8                	mov    eax,ebx
c0001883:	29 f0                	sub    eax,esi
c0001885:	83 f8 0f             	cmp    eax,0xf
c0001888:	77 02                	ja     c000188c <dlmemalign+0x98>
c000188a:	01 fb                	add    ebx,edi
c000188c:	89 d8                	mov    eax,ebx
c000188e:	29 f0                	sub    eax,esi
c0001890:	89 c6                	mov    esi,eax
c0001892:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001895:	89 c2                	mov    edx,eax
c0001897:	83 e2 fc             	and    edx,0xfffffffc
c000189a:	29 f2                	sub    edx,esi
c000189c:	a8 02                	test   al,0x2
c000189e:	74 10                	je     c00018b0 <dlmemalign+0xbc>
c00018a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018a3:	83 ca 02             	or     edx,0x2
c00018a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00018a9:	89 33                	mov    DWORD PTR [ebx],esi
c00018ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018ae:	eb 5f                	jmp    c000190f <dlmemalign+0x11b>
c00018b0:	83 ec 0c             	sub    esp,0xc
c00018b3:	89 d0                	mov    eax,edx
c00018b5:	83 c8 01             	or     eax,0x1
c00018b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018c3:	83 e0 01             	and    eax,0x1
c00018c6:	09 f0                	or     eax,esi
c00018c8:	89 de                	mov    esi,ebx
c00018ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018cd:	51                   	push   ecx
c00018ce:	e8 dd f4 ff ff       	call   c0000db0 <dlfree>
c00018d3:	83 c4 10             	add    esp,0x10
c00018d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d9:	a8 02                	test   al,0x2
c00018db:	75 2f                	jne    c000190c <dlmemalign+0x118>
c00018dd:	83 e0 fc             	and    eax,0xfffffffc
c00018e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00018e3:	39 c2                	cmp    edx,eax
c00018e5:	73 25                	jae    c000190c <dlmemalign+0x118>
c00018e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ea:	83 ec 0c             	sub    esp,0xc
c00018ed:	29 e8                	sub    eax,ebp
c00018ef:	83 c2 08             	add    edx,0x8
c00018f2:	83 c8 01             	or     eax,0x1
c00018f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018fb:	83 e0 01             	and    eax,0x1
c00018fe:	09 c5                	or     ebp,eax
c0001900:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001903:	52                   	push   edx
c0001904:	e8 a7 f4 ff ff       	call   c0000db0 <dlfree>
c0001909:	83 c4 10             	add    esp,0x10
c000190c:	8d 46 08             	lea    eax,[esi+0x8]
c000190f:	83 c4 0c             	add    esp,0xc
c0001912:	5b                   	pop    ebx
c0001913:	5e                   	pop    esi
c0001914:	5f                   	pop    edi
c0001915:	5d                   	pop    ebp
c0001916:	c3                   	ret    

c0001917 <dlcalloc>:
c0001917:	53                   	push   ebx
c0001918:	83 ec 14             	sub    esp,0x14
c000191b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000191f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001924:	50                   	push   eax
c0001925:	e8 e1 f7 ff ff       	call   c000110b <dlmalloc>
c000192a:	83 c4 10             	add    esp,0x10
c000192d:	89 c3                	mov    ebx,eax
c000192f:	85 c0                	test   eax,eax
c0001931:	74 77                	je     c00019aa <dlcalloc+0x93>
c0001933:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001936:	89 d0                	mov    eax,edx
c0001938:	83 e0 fc             	and    eax,0xfffffffc
c000193b:	80 e2 02             	and    dl,0x2
c000193e:	75 5a                	jne    c000199a <dlcalloc+0x83>
c0001940:	83 e8 04             	sub    eax,0x4
c0001943:	83 f8 27             	cmp    eax,0x27
c0001946:	76 03                	jbe    c000194b <dlcalloc+0x34>
c0001948:	51                   	push   ecx
c0001949:	eb 53                	jmp    c000199e <dlcalloc+0x87>
c000194b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001951:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001958:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000195f:	83 f8 13             	cmp    eax,0x13
c0001962:	76 46                	jbe    c00019aa <dlcalloc+0x93>
c0001964:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000196b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001972:	83 f8 1b             	cmp    eax,0x1b
c0001975:	76 33                	jbe    c00019aa <dlcalloc+0x93>
c0001977:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000197e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001985:	83 f8 23             	cmp    eax,0x23
c0001988:	76 20                	jbe    c00019aa <dlcalloc+0x93>
c000198a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001991:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001998:	eb 10                	jmp    c00019aa <dlcalloc+0x93>
c000199a:	83 e8 08             	sub    eax,0x8
c000199d:	52                   	push   edx
c000199e:	50                   	push   eax
c000199f:	6a 00                	push   0x0
c00019a1:	53                   	push   ebx
c00019a2:	e8 c5 ed ff ff       	call   c000076c <memset>
c00019a7:	83 c4 10             	add    esp,0x10
c00019aa:	89 d8                	mov    eax,ebx
c00019ac:	83 c4 08             	add    esp,0x8
c00019af:	5b                   	pop    ebx
c00019b0:	c3                   	ret    

c00019b1 <dlcfree>:
c00019b1:	e9 fa f3 ff ff       	jmp    c0000db0 <dlfree>

c00019b6 <dlindependent_calloc>:
c00019b6:	83 ec 28             	sub    esp,0x28
c00019b9:	b9 03 00 00 00       	mov    ecx,0x3
c00019be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d2:	e8 c2 fa ff ff       	call   c0001499 <iALLOc>
c00019d7:	83 c4 2c             	add    esp,0x2c
c00019da:	c3                   	ret    

c00019db <dlindependent_comalloc>:
c00019db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e3:	31 c9                	xor    ecx,ecx
c00019e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019ed:	e9 a7 fa ff ff       	jmp    c0001499 <iALLOc>

c00019f2 <dlvalloc>:
c00019f2:	83 ec 0c             	sub    esp,0xc
c00019f5:	83 3d 00 ed 02 c0 00 	cmp    DWORD PTR ds:0xc002ed00,0x0
c00019fc:	75 0a                	jne    c0001a08 <dlvalloc+0x16>
c00019fe:	b8 00 ed 02 c0       	mov    eax,0xc002ed00
c0001a03:	e8 c1 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a08:	50                   	push   eax
c0001a09:	50                   	push   eax
c0001a0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a0e:	ff 35 5c f0 02 c0    	push   DWORD PTR ds:0xc002f05c
c0001a14:	e8 db fd ff ff       	call   c00017f4 <dlmemalign>
c0001a19:	83 c4 1c             	add    esp,0x1c
c0001a1c:	c3                   	ret    

c0001a1d <dlpvalloc>:
c0001a1d:	83 ec 0c             	sub    esp,0xc
c0001a20:	83 3d 00 ed 02 c0 00 	cmp    DWORD PTR ds:0xc002ed00,0x0
c0001a27:	75 0a                	jne    c0001a33 <dlpvalloc+0x16>
c0001a29:	b8 00 ed 02 c0       	mov    eax,0xc002ed00
c0001a2e:	e8 96 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a33:	a1 5c f0 02 c0       	mov    eax,ds:0xc002f05c
c0001a38:	89 c1                	mov    ecx,eax
c0001a3a:	52                   	push   edx
c0001a3b:	f7 d9                	neg    ecx
c0001a3d:	52                   	push   edx
c0001a3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a42:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a46:	21 ca                	and    edx,ecx
c0001a48:	52                   	push   edx
c0001a49:	50                   	push   eax
c0001a4a:	e8 a5 fd ff ff       	call   c00017f4 <dlmemalign>
c0001a4f:	83 c4 1c             	add    esp,0x1c
c0001a52:	c3                   	ret    

c0001a53 <dlmalloc_trim>:
c0001a53:	b8 00 ed 02 c0       	mov    eax,0xc002ed00
c0001a58:	e8 6c f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a5d:	31 c0                	xor    eax,eax
c0001a5f:	c3                   	ret    

c0001a60 <dlmalloc_usable_size>:
c0001a60:	53                   	push   ebx
c0001a61:	31 c0                	xor    eax,eax
c0001a63:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a67:	85 c9                	test   ecx,ecx
c0001a69:	74 24                	je     c0001a8f <dlmalloc_usable_size+0x2f>
c0001a6b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a6e:	f6 c2 02             	test   dl,0x2
c0001a71:	74 08                	je     c0001a7b <dlmalloc_usable_size+0x1b>
c0001a73:	83 e2 fc             	and    edx,0xfffffffc
c0001a76:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a79:	eb 14                	jmp    c0001a8f <dlmalloc_usable_size+0x2f>
c0001a7b:	89 d3                	mov    ebx,edx
c0001a7d:	31 c0                	xor    eax,eax
c0001a7f:	83 e3 fe             	and    ebx,0xfffffffe
c0001a82:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a87:	74 06                	je     c0001a8f <dlmalloc_usable_size+0x2f>
c0001a89:	83 e2 fc             	and    edx,0xfffffffc
c0001a8c:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a8f:	5b                   	pop    ebx
c0001a90:	c3                   	ret    

c0001a91 <dlmallinfo>:
c0001a91:	55                   	push   ebp
c0001a92:	57                   	push   edi
c0001a93:	56                   	push   esi
c0001a94:	53                   	push   ebx
c0001a95:	83 ec 08             	sub    esp,0x8
c0001a98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a9c:	83 3d 2c ed 02 c0 00 	cmp    DWORD PTR ds:0xc002ed2c,0x0
c0001aa3:	75 0a                	jne    c0001aaf <dlmallinfo+0x1e>
c0001aa5:	b8 00 ed 02 c0       	mov    eax,0xc002ed00
c0001aaa:	e8 1a f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001aaf:	a1 2c ed 02 c0       	mov    eax,ds:0xc002ed2c
c0001ab4:	31 ed                	xor    ebp,ebp
c0001ab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ab9:	31 c9                	xor    ecx,ecx
c0001abb:	83 e0 fc             	and    eax,0xfffffffc
c0001abe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ac2:	31 c0                	xor    eax,eax
c0001ac4:	8b 14 85 04 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd12fc]
c0001acb:	85 d2                	test   edx,edx
c0001acd:	74 0e                	je     c0001add <dlmallinfo+0x4c>
c0001acf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ad2:	45                   	inc    ebp
c0001ad3:	83 e6 fc             	and    esi,0xfffffffc
c0001ad6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ad9:	01 f1                	add    ecx,esi
c0001adb:	eb ee                	jmp    c0001acb <dlmallinfo+0x3a>
c0001add:	40                   	inc    eax
c0001ade:	83 f8 0a             	cmp    eax,0xa
c0001ae1:	75 e1                	jne    c0001ac4 <dlmallinfo+0x33>
c0001ae3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ae7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001aee:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001af1:	b8 34 ed 02 c0       	mov    eax,0xc002ed34
c0001af6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001af9:	39 f0                	cmp    eax,esi
c0001afb:	74 10                	je     c0001b0d <dlmallinfo+0x7c>
c0001afd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b00:	ff 04 24             	inc    DWORD PTR [esp]
c0001b03:	83 e7 fc             	and    edi,0xfffffffc
c0001b06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b09:	01 fa                	add    edx,edi
c0001b0b:	eb ec                	jmp    c0001af9 <dlmallinfo+0x68>
c0001b0d:	83 c0 08             	add    eax,0x8
c0001b10:	3d 2c f0 02 c0       	cmp    eax,0xc002f02c
c0001b15:	75 df                	jne    c0001af6 <dlmallinfo+0x65>
c0001b17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b20:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0001b25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b28:	89 03                	mov    DWORD PTR [ebx],eax
c0001b2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b2d:	8b 35 50 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f050
c0001b33:	29 d0                	sub    eax,edx
c0001b35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b3b:	8b 35 64 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f064
c0001b41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b4b:	8b 35 74 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f074
c0001b51:	89 d8                	mov    eax,ebx
c0001b53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b56:	83 c4 08             	add    esp,0x8
c0001b59:	5b                   	pop    ebx
c0001b5a:	5e                   	pop    esi
c0001b5b:	5f                   	pop    edi
c0001b5c:	5d                   	pop    ebp
c0001b5d:	c2 04 00             	ret    0x4

c0001b60 <dlmalloc_stats>:
c0001b60:	83 ec 30             	sub    esp,0x30
c0001b63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b67:	50                   	push   eax
c0001b68:	e8 24 ff ff ff       	call   c0001a91 <dlmallinfo>
c0001b6d:	83 c4 30             	add    esp,0x30
c0001b70:	c3                   	ret    

c0001b71 <dlmallopt>:
c0001b71:	56                   	push   esi
c0001b72:	b8 00 ed 02 c0       	mov    eax,0xc002ed00
c0001b77:	53                   	push   ebx
c0001b78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b80:	e8 44 f1 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001b85:	8d 46 04             	lea    eax,[esi+0x4]
c0001b88:	83 f8 05             	cmp    eax,0x5
c0001b8b:	77 67                	ja     c0001bf4 <dlmallopt+0x83>
c0001b8d:	ff 24 85 e4 9e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd611c]
c0001b94:	83 fb 50             	cmp    ebx,0x50
c0001b97:	77 5b                	ja     c0001bf4 <dlmallopt+0x83>
c0001b99:	ba 08 00 00 00       	mov    edx,0x8
c0001b9e:	85 db                	test   ebx,ebx
c0001ba0:	74 12                	je     c0001bb4 <dlmallopt+0x43>
c0001ba2:	83 c3 0b             	add    ebx,0xb
c0001ba5:	ba 10 00 00 00       	mov    edx,0x10
c0001baa:	83 fb 0f             	cmp    ebx,0xf
c0001bad:	76 05                	jbe    c0001bb4 <dlmallopt+0x43>
c0001baf:	89 da                	mov    edx,ebx
c0001bb1:	83 e2 f8             	and    edx,0xfffffff8
c0001bb4:	a1 00 ed 02 c0       	mov    eax,ds:0xc002ed00
c0001bb9:	83 e0 03             	and    eax,0x3
c0001bbc:	09 d0                	or     eax,edx
c0001bbe:	a3 00 ed 02 c0       	mov    ds:0xc002ed00,eax
c0001bc3:	eb 31                	jmp    c0001bf6 <dlmallopt+0x85>
c0001bc5:	89 1d 44 f0 02 c0    	mov    DWORD PTR ds:0xc002f044,ebx
c0001bcb:	eb 06                	jmp    c0001bd3 <dlmallopt+0x62>
c0001bcd:	89 1d 48 f0 02 c0    	mov    DWORD PTR ds:0xc002f048,ebx
c0001bd3:	be 01 00 00 00       	mov    esi,0x1
c0001bd8:	eb 1c                	jmp    c0001bf6 <dlmallopt+0x85>
c0001bda:	89 1d 4c f0 02 c0    	mov    DWORD PTR ds:0xc002f04c,ebx
c0001be0:	eb f1                	jmp    c0001bd3 <dlmallopt+0x62>
c0001be2:	31 f6                	xor    esi,esi
c0001be4:	85 db                	test   ebx,ebx
c0001be6:	75 0e                	jne    c0001bf6 <dlmallopt+0x85>
c0001be8:	c7 05 54 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f054,0x0
c0001bf2:	eb df                	jmp    c0001bd3 <dlmallopt+0x62>
c0001bf4:	31 f6                	xor    esi,esi
c0001bf6:	89 f0                	mov    eax,esi
c0001bf8:	5b                   	pop    ebx
c0001bf9:	5e                   	pop    esi
c0001bfa:	c3                   	ret    

c0001bfb <disk_status>:
c0001bfb:	31 c0                	xor    eax,eax
c0001bfd:	c3                   	ret    

c0001bfe <disk_initialize>:
c0001bfe:	31 c0                	xor    eax,eax
c0001c00:	c3                   	ret    

c0001c01 <disk_read>:
c0001c01:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c06:	0f b6 04 85 e0 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd820]
c0001c0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c12:	e9 93 fb 01 00       	jmp    c00217aa <fatWrapperReadDisk>

c0001c17 <disk_write>:
c0001c17:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1c:	0f b6 04 85 e0 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd820]
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	e9 c4 fb 01 00       	jmp    c00217f1 <fatWrapperWriteDisk>

c0001c2d <disk_ioctl>:
c0001c2d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c3b:	0f b6 04 85 e0 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd820]
c0001c43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c47:	e9 ec fb 01 00       	jmp    c0021838 <fatWrapperIoctl>

c0001c4c <ld_word>:
c0001c4c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c53:	c1 e2 08             	shl    edx,0x8
c0001c56:	09 d0                	or     eax,edx
c0001c58:	c3                   	ret    

c0001c59 <ld_dword>:
c0001c59:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c5d:	89 d1                	mov    ecx,edx
c0001c5f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c63:	c1 e1 08             	shl    ecx,0x8
c0001c66:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c69:	09 ca                	or     edx,ecx
c0001c6b:	c1 e2 08             	shl    edx,0x8
c0001c6e:	09 d0                	or     eax,edx
c0001c70:	c3                   	ret    

c0001c71 <ld_qword>:
c0001c71:	57                   	push   edi
c0001c72:	56                   	push   esi
c0001c73:	53                   	push   ebx
c0001c74:	31 db                	xor    ebx,ebx
c0001c76:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c79:	89 df                	mov    edi,ebx
c0001c7b:	89 ce                	mov    esi,ecx
c0001c7d:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c81:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c85:	c1 e6 08             	shl    esi,0x8
c0001c88:	09 f2                	or     edx,esi
c0001c8a:	89 d6                	mov    esi,edx
c0001c8c:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c94:	c1 e6 08             	shl    esi,0x8
c0001c97:	09 f2                	or     edx,esi
c0001c99:	89 d6                	mov    esi,edx
c0001c9b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ca6:	c1 e6 08             	shl    esi,0x8
c0001ca9:	89 fb                	mov    ebx,edi
c0001cab:	09 f2                	or     edx,esi
c0001cad:	89 d1                	mov    ecx,edx
c0001caf:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cb3:	c1 e1 08             	shl    ecx,0x8
c0001cb6:	89 da                	mov    edx,ebx
c0001cb8:	09 c8                	or     eax,ecx
c0001cba:	5b                   	pop    ebx
c0001cbb:	5e                   	pop    esi
c0001cbc:	5f                   	pop    edi
c0001cbd:	c3                   	ret    

c0001cbe <st_word>:
c0001cbe:	66 89 10             	mov    WORD PTR [eax],dx
c0001cc1:	c3                   	ret    

c0001cc2 <st_dword>:
c0001cc2:	89 10                	mov    DWORD PTR [eax],edx
c0001cc4:	c3                   	ret    

c0001cc5 <st_qword>:
c0001cc5:	89 10                	mov    DWORD PTR [eax],edx
c0001cc7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cca:	c3                   	ret    

c0001ccb <mem_cpy>:
c0001ccb:	85 c9                	test   ecx,ecx
c0001ccd:	74 10                	je     c0001cdf <mem_cpy+0x14>
c0001ccf:	57                   	push   edi
c0001cd0:	01 c1                	add    ecx,eax
c0001cd2:	56                   	push   esi
c0001cd3:	89 c7                	mov    edi,eax
c0001cd5:	89 d6                	mov    esi,edx
c0001cd7:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cd8:	39 f9                	cmp    ecx,edi
c0001cda:	75 fb                	jne    c0001cd7 <mem_cpy+0xc>
c0001cdc:	5e                   	pop    esi
c0001cdd:	5f                   	pop    edi
c0001cde:	c3                   	ret    
c0001cdf:	c3                   	ret    

c0001ce0 <mem_set>:
c0001ce0:	01 c1                	add    ecx,eax
c0001ce2:	40                   	inc    eax
c0001ce3:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ce6:	39 c8                	cmp    eax,ecx
c0001ce8:	75 f8                	jne    c0001ce2 <mem_set+0x2>
c0001cea:	c3                   	ret    

c0001ceb <mem_cmp>:
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	89 c6                	mov    esi,eax
c0001cef:	53                   	push   ebx
c0001cf0:	46                   	inc    esi
c0001cf1:	42                   	inc    edx
c0001cf2:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cf6:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cfa:	29 fb                	sub    ebx,edi
c0001cfc:	89 cf                	mov    edi,ecx
c0001cfe:	29 f7                	sub    edi,esi
c0001d00:	01 c7                	add    edi,eax
c0001d02:	74 04                	je     c0001d08 <mem_cmp+0x1d>
c0001d04:	85 db                	test   ebx,ebx
c0001d06:	74 e8                	je     c0001cf0 <mem_cmp+0x5>
c0001d08:	89 d8                	mov    eax,ebx
c0001d0a:	5b                   	pop    ebx
c0001d0b:	5e                   	pop    esi
c0001d0c:	5f                   	pop    edi
c0001d0d:	c3                   	ret    

c0001d0e <chk_chr>:
c0001d0e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d11:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d14:	74 07                	je     c0001d1d <chk_chr+0xf>
c0001d16:	39 d1                	cmp    ecx,edx
c0001d18:	74 03                	je     c0001d1d <chk_chr+0xf>
c0001d1a:	40                   	inc    eax
c0001d1b:	eb f1                	jmp    c0001d0e <chk_chr>
c0001d1d:	89 c8                	mov    eax,ecx
c0001d1f:	c3                   	ret    

c0001d20 <dbc_1st>:
c0001d20:	31 c0                	xor    eax,eax
c0001d22:	c3                   	ret    

c0001d23 <dbc_2nd>:
c0001d23:	31 c0                	xor    eax,eax
c0001d25:	c3                   	ret    

c0001d26 <tchar2uni>:
c0001d26:	57                   	push   edi
c0001d27:	89 c7                	mov    edi,eax
c0001d29:	56                   	push   esi
c0001d2a:	53                   	push   ebx
c0001d2b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d2d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d2f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d32:	84 c9                	test   cl,cl
c0001d34:	78 0a                	js     c0001d40 <tchar2uni+0x1a>
c0001d36:	0f b6 d1             	movzx  edx,cl
c0001d39:	89 f3                	mov    ebx,esi
c0001d3b:	e9 9f 00 00 00       	jmp    c0001ddf <tchar2uni+0xb9>
c0001d40:	88 ca                	mov    dl,cl
c0001d42:	83 e2 e0             	and    edx,0xffffffe0
c0001d45:	80 fa c0             	cmp    dl,0xc0
c0001d48:	75 0c                	jne    c0001d56 <tchar2uni+0x30>
c0001d4a:	89 ca                	mov    edx,ecx
c0001d4c:	b9 01 00 00 00       	mov    ecx,0x1
c0001d51:	83 e2 1f             	and    edx,0x1f
c0001d54:	eb 2e                	jmp    c0001d84 <tchar2uni+0x5e>
c0001d56:	88 ca                	mov    dl,cl
c0001d58:	83 e2 f0             	and    edx,0xfffffff0
c0001d5b:	80 fa e0             	cmp    dl,0xe0
c0001d5e:	75 0c                	jne    c0001d6c <tchar2uni+0x46>
c0001d60:	89 ca                	mov    edx,ecx
c0001d62:	b9 02 00 00 00       	mov    ecx,0x2
c0001d67:	83 e2 0f             	and    edx,0xf
c0001d6a:	eb 18                	jmp    c0001d84 <tchar2uni+0x5e>
c0001d6c:	88 ca                	mov    dl,cl
c0001d6e:	83 e2 f8             	and    edx,0xfffffff8
c0001d71:	88 d0                	mov    al,dl
c0001d73:	83 ca ff             	or     edx,0xffffffff
c0001d76:	3c f0                	cmp    al,0xf0
c0001d78:	75 6c                	jne    c0001de6 <tchar2uni+0xc0>
c0001d7a:	89 ca                	mov    edx,ecx
c0001d7c:	b9 03 00 00 00       	mov    ecx,0x3
c0001d81:	83 e2 07             	and    edx,0x7
c0001d84:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d88:	46                   	inc    esi
c0001d89:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d8c:	88 c8                	mov    al,cl
c0001d8e:	83 e0 c0             	and    eax,0xffffffc0
c0001d91:	3c 80                	cmp    al,0x80
c0001d93:	75 4e                	jne    c0001de3 <tchar2uni+0xbd>
c0001d95:	c1 e2 06             	shl    edx,0x6
c0001d98:	83 e1 3f             	and    ecx,0x3f
c0001d9b:	09 ca                	or     edx,ecx
c0001d9d:	39 de                	cmp    esi,ebx
c0001d9f:	75 e7                	jne    c0001d88 <tchar2uni+0x62>
c0001da1:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001da4:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001daa:	77 37                	ja     c0001de3 <tchar2uni+0xbd>
c0001dac:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001db2:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001db8:	76 29                	jbe    c0001de3 <tchar2uni+0xbd>
c0001dba:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dc0:	76 1d                	jbe    c0001ddf <tchar2uni+0xb9>
c0001dc2:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001dc8:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001dce:	c1 e1 06             	shl    ecx,0x6
c0001dd1:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dd7:	09 ca                	or     edx,ecx
c0001dd9:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ddf:	89 1f                	mov    DWORD PTR [edi],ebx
c0001de1:	eb 03                	jmp    c0001de6 <tchar2uni+0xc0>
c0001de3:	83 ca ff             	or     edx,0xffffffff
c0001de6:	5b                   	pop    ebx
c0001de7:	89 d0                	mov    eax,edx
c0001de9:	5e                   	pop    esi
c0001dea:	5f                   	pop    edi
c0001deb:	c3                   	ret    

c0001dec <put_utf>:
c0001dec:	53                   	push   ebx
c0001ded:	83 f8 7f             	cmp    eax,0x7f
c0001df0:	89 c3                	mov    ebx,eax
c0001df2:	b0 00                	mov    al,0x0
c0001df4:	77 11                	ja     c0001e07 <put_utf+0x1b>
c0001df6:	85 c9                	test   ecx,ecx
c0001df8:	0f 84 e5 00 00 00    	je     c0001ee3 <put_utf+0xf7>
c0001dfe:	88 1a                	mov    BYTE PTR [edx],bl
c0001e00:	b0 01                	mov    al,0x1
c0001e02:	e9 dc 00 00 00       	jmp    c0001ee3 <put_utf+0xf7>
c0001e07:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e0d:	77 23                	ja     c0001e32 <put_utf+0x46>
c0001e0f:	83 f9 01             	cmp    ecx,0x1
c0001e12:	0f 86 cb 00 00 00    	jbe    c0001ee3 <put_utf+0xf7>
c0001e18:	89 d8                	mov    eax,ebx
c0001e1a:	83 e3 3f             	and    ebx,0x3f
c0001e1d:	c1 e8 06             	shr    eax,0x6
c0001e20:	83 cb 80             	or     ebx,0xffffff80
c0001e23:	83 c8 c0             	or     eax,0xffffffc0
c0001e26:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e29:	88 02                	mov    BYTE PTR [edx],al
c0001e2b:	b0 02                	mov    al,0x2
c0001e2d:	e9 b1 00 00 00       	jmp    c0001ee3 <put_utf+0xf7>
c0001e32:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e38:	77 40                	ja     c0001e7a <put_utf+0x8e>
c0001e3a:	83 f9 02             	cmp    ecx,0x2
c0001e3d:	0f 86 a0 00 00 00    	jbe    c0001ee3 <put_utf+0xf7>
c0001e43:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e49:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e4f:	0f 86 8e 00 00 00    	jbe    c0001ee3 <put_utf+0xf7>
c0001e55:	89 d8                	mov    eax,ebx
c0001e57:	c1 e8 0c             	shr    eax,0xc
c0001e5a:	83 c8 e0             	or     eax,0xffffffe0
c0001e5d:	88 02                	mov    BYTE PTR [edx],al
c0001e5f:	89 d8                	mov    eax,ebx
c0001e61:	83 e3 3f             	and    ebx,0x3f
c0001e64:	c1 e8 06             	shr    eax,0x6
c0001e67:	83 cb 80             	or     ebx,0xffffff80
c0001e6a:	83 e0 3f             	and    eax,0x3f
c0001e6d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e70:	83 c8 80             	or     eax,0xffffff80
c0001e73:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e76:	b0 03                	mov    al,0x3
c0001e78:	eb 69                	jmp    c0001ee3 <put_utf+0xf7>
c0001e7a:	83 f9 03             	cmp    ecx,0x3
c0001e7d:	76 64                	jbe    c0001ee3 <put_utf+0xf7>
c0001e7f:	89 d9                	mov    ecx,ebx
c0001e81:	0f b7 c3             	movzx  eax,bx
c0001e84:	66 31 c9             	xor    cx,cx
c0001e87:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e8d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e93:	c1 e9 06             	shr    ecx,0x6
c0001e96:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e9c:	77 43                	ja     c0001ee1 <put_utf+0xf5>
c0001e9e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ea4:	77 3b                	ja     c0001ee1 <put_utf+0xf5>
c0001ea6:	09 cb                	or     ebx,ecx
c0001ea8:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001eae:	89 d8                	mov    eax,ebx
c0001eb0:	c1 e8 12             	shr    eax,0x12
c0001eb3:	83 c8 f0             	or     eax,0xfffffff0
c0001eb6:	88 02                	mov    BYTE PTR [edx],al
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	c1 e8 0c             	shr    eax,0xc
c0001ebd:	83 e0 3f             	and    eax,0x3f
c0001ec0:	83 c8 80             	or     eax,0xffffff80
c0001ec3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ec6:	89 d8                	mov    eax,ebx
c0001ec8:	83 e3 3f             	and    ebx,0x3f
c0001ecb:	c1 e8 06             	shr    eax,0x6
c0001ece:	83 cb 80             	or     ebx,0xffffff80
c0001ed1:	83 e0 3f             	and    eax,0x3f
c0001ed4:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ed7:	83 c8 80             	or     eax,0xffffff80
c0001eda:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001edd:	b0 04                	mov    al,0x4
c0001edf:	eb 02                	jmp    c0001ee3 <put_utf+0xf7>
c0001ee1:	31 c0                	xor    eax,eax
c0001ee3:	5b                   	pop    ebx
c0001ee4:	c3                   	ret    

c0001ee5 <clst2sect>:
c0001ee5:	89 c1                	mov    ecx,eax
c0001ee7:	83 ea 02             	sub    edx,0x2
c0001eea:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001eed:	83 e8 02             	sub    eax,0x2
c0001ef0:	39 d0                	cmp    eax,edx
c0001ef2:	76 0d                	jbe    c0001f01 <clst2sect+0x1c>
c0001ef4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ef8:	f7 e2                	mul    edx
c0001efa:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001efd:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f00:	c3                   	ret    
c0001f01:	31 c0                	xor    eax,eax
c0001f03:	31 d2                	xor    edx,edx
c0001f05:	c3                   	ret    

c0001f06 <clmt_clust>:
c0001f06:	57                   	push   edi
c0001f07:	89 cf                	mov    edi,ecx
c0001f09:	56                   	push   esi
c0001f0a:	89 d6                	mov    esi,edx
c0001f0c:	53                   	push   ebx
c0001f0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f11:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f14:	89 f2                	mov    edx,esi
c0001f16:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f18:	c1 ef 09             	shr    edi,0x9
c0001f1b:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f1f:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f22:	89 f9                	mov    ecx,edi
c0001f24:	31 ff                	xor    edi,edi
c0001f26:	57                   	push   edi
c0001f27:	56                   	push   esi
c0001f28:	51                   	push   ecx
c0001f29:	52                   	push   edx
c0001f2a:	e8 55 55 02 00       	call   c0027484 <__udivdi3>
c0001f2f:	83 c4 10             	add    esp,0x10
c0001f32:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f34:	85 d2                	test   edx,edx
c0001f36:	74 10                	je     c0001f48 <clmt_clust+0x42>
c0001f38:	39 d0                	cmp    eax,edx
c0001f3a:	72 07                	jb     c0001f43 <clmt_clust+0x3d>
c0001f3c:	29 d0                	sub    eax,edx
c0001f3e:	83 c3 08             	add    ebx,0x8
c0001f41:	eb ef                	jmp    c0001f32 <clmt_clust+0x2c>
c0001f43:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f46:	89 c2                	mov    edx,eax
c0001f48:	5b                   	pop    ebx
c0001f49:	89 d0                	mov    eax,edx
c0001f4b:	5e                   	pop    esi
c0001f4c:	5f                   	pop    edi
c0001f4d:	c3                   	ret    

c0001f4e <pick_lfn>:
c0001f4e:	55                   	push   ebp
c0001f4f:	57                   	push   edi
c0001f50:	56                   	push   esi
c0001f51:	89 d6                	mov    esi,edx
c0001f53:	53                   	push   ebx
c0001f54:	89 c3                	mov    ebx,eax
c0001f56:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f59:	e8 ee fc ff ff       	call   c0001c4c <ld_word>
c0001f5e:	66 85 c0             	test   ax,ax
c0001f61:	74 04                	je     c0001f67 <pick_lfn+0x19>
c0001f63:	31 c0                	xor    eax,eax
c0001f65:	eb 5c                	jmp    c0001fc3 <pick_lfn+0x75>
c0001f67:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f6a:	bd 01 00 00 00       	mov    ebp,0x1
c0001f6f:	83 e1 bf             	and    ecx,0xffffffbf
c0001f72:	31 ff                	xor    edi,edi
c0001f74:	49                   	dec    ecx
c0001f75:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f78:	0f b6 87 00 a0 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6000]
c0001f7f:	01 f0                	add    eax,esi
c0001f81:	e8 c6 fc ff ff       	call   c0001c4c <ld_word>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 11                	je     c0001f9c <pick_lfn+0x4e>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 d0                	ja     c0001f63 <pick_lfn+0x15>
c0001f93:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f97:	89 c5                	mov    ebp,eax
c0001f99:	41                   	inc    ecx
c0001f9a:	eb 04                	jmp    c0001fa0 <pick_lfn+0x52>
c0001f9c:	66 40                	inc    ax
c0001f9e:	75 c3                	jne    c0001f63 <pick_lfn+0x15>
c0001fa0:	47                   	inc    edi
c0001fa1:	83 ff 0d             	cmp    edi,0xd
c0001fa4:	75 d2                	jne    c0001f78 <pick_lfn+0x2a>
c0001fa6:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fa9:	74 13                	je     c0001fbe <pick_lfn+0x70>
c0001fab:	66 85 ed             	test   bp,bp
c0001fae:	74 0e                	je     c0001fbe <pick_lfn+0x70>
c0001fb0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fb6:	77 ab                	ja     c0001f63 <pick_lfn+0x15>
c0001fb8:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fbe:	b8 01 00 00 00       	mov    eax,0x1
c0001fc3:	5b                   	pop    ebx
c0001fc4:	5e                   	pop    esi
c0001fc5:	5f                   	pop    edi
c0001fc6:	5d                   	pop    ebp
c0001fc7:	c3                   	ret    

c0001fc8 <put_lfn>:
c0001fc8:	55                   	push   ebp
c0001fc9:	31 ed                	xor    ebp,ebp
c0001fcb:	57                   	push   edi
c0001fcc:	89 d7                	mov    edi,edx
c0001fce:	56                   	push   esi
c0001fcf:	31 f6                	xor    esi,esi
c0001fd1:	53                   	push   ebx
c0001fd2:	83 ec 08             	sub    esp,0x8
c0001fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fd8:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fe0:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fe6:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fe9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fec:	31 d2                	xor    edx,edx
c0001fee:	e8 cb fc ff ff       	call   c0001cbe <st_word>
c0001ff3:	0f b6 d9             	movzx  ebx,cl
c0001ff6:	4b                   	dec    ebx
c0001ff7:	6b db 0d             	imul   ebx,ebx,0xd
c0001ffa:	66 83 fe ff          	cmp    si,0xffff
c0001ffe:	74 08                	je     c0002008 <put_lfn+0x40>
c0002000:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002003:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002007:	43                   	inc    ebx
c0002008:	0f b6 85 00 a0 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6000]
c000200f:	0f b7 d6             	movzx  edx,si
c0002012:	01 f8                	add    eax,edi
c0002014:	e8 a5 fc ff ff       	call   c0001cbe <st_word>
c0002019:	66 85 f6             	test   si,si
c000201c:	75 03                	jne    c0002021 <put_lfn+0x59>
c000201e:	83 ce ff             	or     esi,0xffffffff
c0002021:	45                   	inc    ebp
c0002022:	83 fd 0d             	cmp    ebp,0xd
c0002025:	75 d3                	jne    c0001ffa <put_lfn+0x32>
c0002027:	66 46                	inc    si
c0002029:	74 0a                	je     c0002035 <put_lfn+0x6d>
c000202b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000202e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002033:	75 09                	jne    c000203e <put_lfn+0x76>
c0002035:	88 c8                	mov    al,cl
c0002037:	83 c8 40             	or     eax,0x40
c000203a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000203e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002042:	88 07                	mov    BYTE PTR [edi],al
c0002044:	83 c4 08             	add    esp,0x8
c0002047:	5b                   	pop    ebx
c0002048:	5e                   	pop    esi
c0002049:	5f                   	pop    edi
c000204a:	5d                   	pop    ebp
c000204b:	c3                   	ret    

c000204c <gen_numname>:
c000204c:	57                   	push   edi
c000204d:	89 cf                	mov    edi,ecx
c000204f:	56                   	push   esi
c0002050:	b9 0b 00 00 00       	mov    ecx,0xb
c0002055:	53                   	push   ebx
c0002056:	89 c6                	mov    esi,eax
c0002058:	83 ec 10             	sub    esp,0x10
c000205b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000205f:	e8 67 fc ff ff       	call   c0001ccb <mem_cpy>
c0002064:	83 fb 05             	cmp    ebx,0x5
c0002067:	76 2d                	jbe    c0002096 <gen_numname+0x4a>
c0002069:	66 8b 07             	mov    ax,WORD PTR [edi]
c000206c:	66 85 c0             	test   ax,ax
c000206f:	74 25                	je     c0002096 <gen_numname+0x4a>
c0002071:	83 c7 02             	add    edi,0x2
c0002074:	ba 10 00 00 00       	mov    edx,0x10
c0002079:	01 db                	add    ebx,ebx
c000207b:	89 c1                	mov    ecx,eax
c000207d:	66 d1 e8             	shr    ax,1
c0002080:	83 e1 01             	and    ecx,0x1
c0002083:	01 cb                	add    ebx,ecx
c0002085:	0f ba e3 10          	bt     ebx,0x10
c0002089:	73 06                	jae    c0002091 <gen_numname+0x45>
c000208b:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002091:	4a                   	dec    edx
c0002092:	75 e5                	jne    c0002079 <gen_numname+0x2d>
c0002094:	eb d3                	jmp    c0002069 <gen_numname+0x1d>
c0002096:	b8 07 00 00 00       	mov    eax,0x7
c000209b:	88 d9                	mov    cl,bl
c000209d:	83 e1 0f             	and    ecx,0xf
c00020a0:	8d 51 30             	lea    edx,[ecx+0x30]
c00020a3:	80 fa 39             	cmp    dl,0x39
c00020a6:	76 03                	jbe    c00020ab <gen_numname+0x5f>
c00020a8:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ab:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020ae:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020b2:	89 da                	mov    edx,ebx
c00020b4:	c1 ea 04             	shr    edx,0x4
c00020b7:	83 fb 0f             	cmp    ebx,0xf
c00020ba:	76 06                	jbe    c00020c2 <gen_numname+0x76>
c00020bc:	89 c8                	mov    eax,ecx
c00020be:	89 d3                	mov    ebx,edx
c00020c0:	eb d9                	jmp    c000209b <gen_numname+0x4f>
c00020c2:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020c7:	31 d2                	xor    edx,edx
c00020c9:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020cc:	8d 04 16             	lea    eax,[esi+edx*1]
c00020cf:	39 ca                	cmp    edx,ecx
c00020d1:	73 18                	jae    c00020eb <gen_numname+0x9f>
c00020d3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020d6:	3c 20                	cmp    al,0x20
c00020d8:	74 11                	je     c00020eb <gen_numname+0x9f>
c00020da:	e8 41 fc ff ff       	call   c0001d20 <dbc_1st>
c00020df:	85 c0                	test   eax,eax
c00020e1:	74 05                	je     c00020e8 <gen_numname+0x9c>
c00020e3:	39 d3                	cmp    ebx,edx
c00020e5:	74 04                	je     c00020eb <gen_numname+0x9f>
c00020e7:	42                   	inc    edx
c00020e8:	42                   	inc    edx
c00020e9:	eb e1                	jmp    c00020cc <gen_numname+0x80>
c00020eb:	b0 20                	mov    al,0x20
c00020ed:	83 f9 07             	cmp    ecx,0x7
c00020f0:	77 05                	ja     c00020f7 <gen_numname+0xab>
c00020f2:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020f6:	41                   	inc    ecx
c00020f7:	42                   	inc    edx
c00020f8:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020fc:	83 fa 07             	cmp    edx,0x7
c00020ff:	76 ea                	jbe    c00020eb <gen_numname+0x9f>
c0002101:	83 c4 10             	add    esp,0x10
c0002104:	5b                   	pop    ebx
c0002105:	5e                   	pop    esi
c0002106:	5f                   	pop    edi
c0002107:	c3                   	ret    

c0002108 <sum_sfn>:
c0002108:	31 c9                	xor    ecx,ecx
c000210a:	31 d2                	xor    edx,edx
c000210c:	d0 ca                	ror    dl,1
c000210e:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002111:	41                   	inc    ecx
c0002112:	83 f9 0b             	cmp    ecx,0xb
c0002115:	75 f5                	jne    c000210c <sum_sfn+0x4>
c0002117:	88 d0                	mov    al,dl
c0002119:	c3                   	ret    

c000211a <xdir_sum>:
c000211a:	56                   	push   esi
c000211b:	31 c9                	xor    ecx,ecx
c000211d:	53                   	push   ebx
c000211e:	31 d2                	xor    edx,edx
c0002120:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002124:	43                   	inc    ebx
c0002125:	c1 e3 05             	shl    ebx,0x5
c0002128:	83 fa 02             	cmp    edx,0x2
c000212b:	74 0b                	je     c0002138 <xdir_sum+0x1e>
c000212d:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002131:	66 d1 c9             	ror    cx,1
c0002134:	01 f1                	add    ecx,esi
c0002136:	eb 05                	jmp    c000213d <xdir_sum+0x23>
c0002138:	ba 03 00 00 00       	mov    edx,0x3
c000213d:	42                   	inc    edx
c000213e:	39 d3                	cmp    ebx,edx
c0002140:	77 e6                	ja     c0002128 <xdir_sum+0xe>
c0002142:	89 c8                	mov    eax,ecx
c0002144:	5b                   	pop    ebx
c0002145:	5e                   	pop    esi
c0002146:	c3                   	ret    

c0002147 <xsum32>:
c0002147:	d1 ca                	ror    edx,1
c0002149:	0f b6 c0             	movzx  eax,al
c000214c:	01 d0                	add    eax,edx
c000214e:	c3                   	ret    

c000214f <get_xfileinfo>:
c000214f:	55                   	push   ebp
c0002150:	31 c9                	xor    ecx,ecx
c0002152:	57                   	push   edi
c0002153:	bd 40 00 00 00       	mov    ebp,0x40
c0002158:	56                   	push   esi
c0002159:	31 ff                	xor    edi,edi
c000215b:	53                   	push   ebx
c000215c:	89 c6                	mov    esi,eax
c000215e:	83 ec 0c             	sub    esp,0xc
c0002161:	89 d3                	mov    ebx,edx
c0002163:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000216a:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000216e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002171:	76 6d                	jbe    c00021e0 <get_xfileinfo+0x91>
c0002173:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002179:	76 0b                	jbe    c0002186 <get_xfileinfo+0x37>
c000217b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000217f:	bf 01 00 00 00       	mov    edi,0x1
c0002184:	eb 63                	jmp    c00021e9 <get_xfileinfo+0x9a>
c0002186:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000218c:	75 03                	jne    c0002191 <get_xfileinfo+0x42>
c000218e:	83 c5 02             	add    ebp,0x2
c0002191:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0002194:	83 c5 02             	add    ebp,0x2
c0002197:	e8 b0 fa ff ff       	call   c0001c4c <ld_word>
c000219c:	ff 04 24             	inc    DWORD PTR [esp]
c000219f:	66 85 c9             	test   cx,cx
c00021a2:	75 0d                	jne    c00021b1 <get_xfileinfo+0x62>
c00021a4:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021aa:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021af:	76 2b                	jbe    c00021dc <get_xfileinfo+0x8d>
c00021b1:	c1 e1 10             	shl    ecx,0x10
c00021b4:	ba ff 00 00 00       	mov    edx,0xff
c00021b9:	0f b7 c0             	movzx  eax,ax
c00021bc:	29 fa                	sub    edx,edi
c00021be:	09 c8                	or     eax,ecx
c00021c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021c4:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021c8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021cc:	e8 1b fc ff ff       	call   c0001dec <put_utf>
c00021d1:	84 c0                	test   al,al
c00021d3:	74 a6                	je     c000217b <get_xfileinfo+0x2c>
c00021d5:	0f b6 c0             	movzx  eax,al
c00021d8:	01 c7                	add    edi,eax
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 c1                	mov    ecx,eax
c00021de:	eb 8a                	jmp    c000216a <get_xfileinfo+0x1b>
c00021e0:	85 ff                	test   edi,edi
c00021e2:	74 97                	je     c000217b <get_xfileinfo+0x2c>
c00021e4:	66 85 c9             	test   cx,cx
c00021e7:	75 92                	jne    c000217b <get_xfileinfo+0x2c>
c00021e9:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021ee:	31 c0                	xor    eax,eax
c00021f0:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021f4:	31 d2                	xor    edx,edx
c00021f6:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021f9:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021fc:	80 e1 10             	and    cl,0x10
c00021ff:	75 08                	jne    c0002209 <get_xfileinfo+0xba>
c0002201:	8d 46 38             	lea    eax,[esi+0x38]
c0002204:	e8 68 fa ff ff       	call   c0001c71 <ld_qword>
c0002209:	89 03                	mov    DWORD PTR [ebx],eax
c000220b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000220e:	8d 46 0c             	lea    eax,[esi+0xc]
c0002211:	e8 36 fa ff ff       	call   c0001c4c <ld_word>
c0002216:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000221a:	8d 46 0e             	lea    eax,[esi+0xe]
c000221d:	e8 2a fa ff ff       	call   c0001c4c <ld_word>
c0002222:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002226:	83 c4 0c             	add    esp,0xc
c0002229:	5b                   	pop    ebx
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <get_ldnumber>:
c000222e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002230:	85 d2                	test   edx,edx
c0002232:	74 14                	je     c0002248 <get_ldnumber+0x1a>
c0002234:	56                   	push   esi
c0002235:	53                   	push   ebx
c0002236:	89 d3                	mov    ebx,edx
c0002238:	43                   	inc    ebx
c0002239:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000223c:	80 f9 1f             	cmp    cl,0x1f
c000223f:	76 0d                	jbe    c000224e <get_ldnumber+0x20>
c0002241:	80 f9 3a             	cmp    cl,0x3a
c0002244:	75 f2                	jne    c0002238 <get_ldnumber+0xa>
c0002246:	eb 0a                	jmp    c0002252 <get_ldnumber+0x24>
c0002248:	83 c9 ff             	or     ecx,0xffffffff
c000224b:	89 c8                	mov    eax,ecx
c000224d:	c3                   	ret    
c000224e:	31 c9                	xor    ecx,ecx
c0002250:	eb 24                	jmp    c0002276 <get_ldnumber+0x48>
c0002252:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002255:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002258:	80 f9 09             	cmp    cl,0x9
c000225b:	77 16                	ja     c0002273 <get_ldnumber+0x45>
c000225d:	83 c2 02             	add    edx,0x2
c0002260:	83 c9 ff             	or     ecx,0xffffffff
c0002263:	39 d3                	cmp    ebx,edx
c0002265:	75 0f                	jne    c0002276 <get_ldnumber+0x48>
c0002267:	89 f2                	mov    edx,esi
c0002269:	89 18                	mov    DWORD PTR [eax],ebx
c000226b:	0f be ca             	movsx  ecx,dl
c000226e:	83 e9 30             	sub    ecx,0x30
c0002271:	eb 03                	jmp    c0002276 <get_ldnumber+0x48>
c0002273:	83 c9 ff             	or     ecx,0xffffffff
c0002276:	89 c8                	mov    eax,ecx
c0002278:	5b                   	pop    ebx
c0002279:	5e                   	pop    esi
c000227a:	c3                   	ret    

c000227b <crc32>:
c000227b:	56                   	push   esi
c000227c:	89 d6                	mov    esi,edx
c000227e:	53                   	push   ebx
c000227f:	b2 01                	mov    dl,0x1
c0002281:	bb 08 00 00 00       	mov    ebx,0x8
c0002286:	89 f1                	mov    ecx,esi
c0002288:	84 d1                	test   cl,dl
c000228a:	0f 95 c1             	setne  cl
c000228d:	0f b6 c9             	movzx  ecx,cl
c0002290:	31 c1                	xor    ecx,eax
c0002292:	89 c8                	mov    eax,ecx
c0002294:	d1 e8                	shr    eax,1
c0002296:	80 e1 01             	and    cl,0x1
c0002299:	74 05                	je     c00022a0 <crc32+0x25>
c000229b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022a0:	d1 e2                	shl    edx,1
c00022a2:	4b                   	dec    ebx
c00022a3:	75 e1                	jne    c0002286 <crc32+0xb>
c00022a5:	5b                   	pop    ebx
c00022a6:	5e                   	pop    esi
c00022a7:	c3                   	ret    

c00022a8 <test_gpt_header>:
c00022a8:	55                   	push   ebp
c00022a9:	b9 10 00 00 00       	mov    ecx,0x10
c00022ae:	57                   	push   edi
c00022af:	ba 00 9f 02 c0       	mov    edx,0xc0029f00
c00022b4:	56                   	push   esi
c00022b5:	31 ff                	xor    edi,edi
c00022b7:	53                   	push   ebx
c00022b8:	89 c3                	mov    ebx,eax
c00022ba:	e8 2c fa ff ff       	call   c0001ceb <mem_cmp>
c00022bf:	85 c0                	test   eax,eax
c00022c1:	75 55                	jne    c0002318 <test_gpt_header+0x70>
c00022c3:	89 c7                	mov    edi,eax
c00022c5:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022ca:	83 ce ff             	or     esi,0xffffffff
c00022cd:	31 d2                	xor    edx,edx
c00022cf:	83 fd 03             	cmp    ebp,0x3
c00022d2:	76 05                	jbe    c00022d9 <test_gpt_header+0x31>
c00022d4:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022d9:	89 f0                	mov    eax,esi
c00022db:	45                   	inc    ebp
c00022dc:	e8 9a ff ff ff       	call   c000227b <crc32>
c00022e1:	83 fd 4c             	cmp    ebp,0x4c
c00022e4:	89 c6                	mov    esi,eax
c00022e6:	75 e5                	jne    c00022cd <test_gpt_header+0x25>
c00022e8:	8d 43 10             	lea    eax,[ebx+0x10]
c00022eb:	f7 d6                	not    esi
c00022ed:	e8 67 f9 ff ff       	call   c0001c59 <ld_dword>
c00022f2:	39 c6                	cmp    esi,eax
c00022f4:	75 22                	jne    c0002318 <test_gpt_header+0x70>
c00022f6:	8d 43 54             	lea    eax,[ebx+0x54]
c00022f9:	e8 5b f9 ff ff       	call   c0001c59 <ld_dword>
c00022fe:	83 c0 80             	add    eax,0xffffff80
c0002301:	75 15                	jne    c0002318 <test_gpt_header+0x70>
c0002303:	8d 43 50             	lea    eax,[ebx+0x50]
c0002306:	e8 4e f9 ff ff       	call   c0001c59 <ld_dword>
c000230b:	3d 80 00 00 00       	cmp    eax,0x80
c0002310:	0f 96 c0             	setbe  al
c0002313:	0f b6 c0             	movzx  eax,al
c0002316:	89 c7                	mov    edi,eax
c0002318:	5b                   	pop    ebx
c0002319:	89 f8                	mov    eax,edi
c000231b:	5e                   	pop    esi
c000231c:	5f                   	pop    edi
c000231d:	5d                   	pop    ebp
c000231e:	c3                   	ret    

c000231f <make_rand>:
c000231f:	56                   	push   esi
c0002320:	85 c0                	test   eax,eax
c0002322:	53                   	push   ebx
c0002323:	75 05                	jne    c000232a <make_rand+0xb>
c0002325:	b8 01 00 00 00       	mov    eax,0x1
c000232a:	01 d1                	add    ecx,edx
c000232c:	bb 08 00 00 00       	mov    ebx,0x8
c0002331:	89 c6                	mov    esi,eax
c0002333:	d1 e8                	shr    eax,1
c0002335:	83 e6 01             	and    esi,0x1
c0002338:	85 f6                	test   esi,esi
c000233a:	74 05                	je     c0002341 <make_rand+0x22>
c000233c:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002341:	4b                   	dec    ebx
c0002342:	75 ed                	jne    c0002331 <make_rand+0x12>
c0002344:	42                   	inc    edx
c0002345:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002348:	39 ca                	cmp    edx,ecx
c000234a:	75 e0                	jne    c000232c <make_rand+0xd>
c000234c:	5b                   	pop    ebx
c000234d:	5e                   	pop    esi
c000234e:	c3                   	ret    

c000234f <validate>:
c000234f:	56                   	push   esi
c0002350:	53                   	push   ebx
c0002351:	89 d6                	mov    esi,edx
c0002353:	51                   	push   ecx
c0002354:	85 c0                	test   eax,eax
c0002356:	75 09                	jne    c0002361 <validate+0x12>
c0002358:	b8 09 00 00 00       	mov    eax,0x9
c000235d:	31 c9                	xor    ecx,ecx
c000235f:	eb 2f                	jmp    c0002390 <validate+0x41>
c0002361:	89 c3                	mov    ebx,eax
c0002363:	8b 00                	mov    eax,DWORD PTR [eax]
c0002365:	85 c0                	test   eax,eax
c0002367:	74 ef                	je     c0002358 <validate+0x9>
c0002369:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000236c:	74 ea                	je     c0002358 <validate+0x9>
c000236e:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002372:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002376:	75 e0                	jne    c0002358 <validate+0x9>
c0002378:	83 ec 0c             	sub    esp,0xc
c000237b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000237f:	50                   	push   eax
c0002380:	e8 76 f8 ff ff       	call   c0001bfb <disk_status>
c0002385:	83 c4 10             	add    esp,0x10
c0002388:	a8 01                	test   al,0x1
c000238a:	75 cc                	jne    c0002358 <validate+0x9>
c000238c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000238e:	31 c0                	xor    eax,eax
c0002390:	89 0e                	mov    DWORD PTR [esi],ecx
c0002392:	5a                   	pop    edx
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	c3                   	ret    

c0002396 <sync_window>:
c0002396:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000239a:	0f 84 85 00 00 00    	je     c0002425 <sync_window+0x8f>
c00023a0:	55                   	push   ebp
c00023a1:	8d 68 54             	lea    ebp,[eax+0x54]
c00023a4:	57                   	push   edi
c00023a5:	56                   	push   esi
c00023a6:	53                   	push   ebx
c00023a7:	89 c3                	mov    ebx,eax
c00023a9:	83 ec 28             	sub    esp,0x28
c00023ac:	6a 01                	push   0x1
c00023ae:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023b1:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023b4:	55                   	push   ebp
c00023b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023b9:	50                   	push   eax
c00023ba:	e8 58 f8 ff ff       	call   c0001c17 <disk_write>
c00023bf:	83 c4 20             	add    esp,0x20
c00023c2:	ba 01 00 00 00       	mov    edx,0x1
c00023c7:	85 c0                	test   eax,eax
c00023c9:	75 50                	jne    c000241b <sync_window+0x85>
c00023cb:	31 ff                	xor    edi,edi
c00023cd:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023d0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023d4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023d8:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023db:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023de:	89 c6                	mov    esi,eax
c00023e0:	89 d7                	mov    edi,edx
c00023e2:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023e5:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023e9:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023ec:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023f0:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023f4:	73 23                	jae    c0002419 <sync_window+0x83>
c00023f6:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023fa:	75 1d                	jne    c0002419 <sync_window+0x83>
c00023fc:	83 ec 0c             	sub    esp,0xc
c00023ff:	6a 01                	push   0x1
c0002401:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002405:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002409:	52                   	push   edx
c000240a:	50                   	push   eax
c000240b:	55                   	push   ebp
c000240c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002410:	50                   	push   eax
c0002411:	e8 01 f8 ff ff       	call   c0001c17 <disk_write>
c0002416:	83 c4 20             	add    esp,0x20
c0002419:	31 d2                	xor    edx,edx
c000241b:	83 c4 1c             	add    esp,0x1c
c000241e:	89 d0                	mov    eax,edx
c0002420:	5b                   	pop    ebx
c0002421:	5e                   	pop    esi
c0002422:	5f                   	pop    edi
c0002423:	5d                   	pop    ebp
c0002424:	c3                   	ret    
c0002425:	31 d2                	xor    edx,edx
c0002427:	89 d0                	mov    eax,edx
c0002429:	c3                   	ret    

c000242a <move_window>:
c000242a:	56                   	push   esi
c000242b:	53                   	push   ebx
c000242c:	89 c3                	mov    ebx,eax
c000242e:	83 ec 14             	sub    esp,0x14
c0002431:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002434:	75 07                	jne    c000243d <move_window+0x13>
c0002436:	31 f6                	xor    esi,esi
c0002438:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000243b:	74 59                	je     c0002496 <move_window+0x6c>
c000243d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 d8                	mov    eax,ebx
c0002447:	e8 4a ff ff ff       	call   c0002396 <sync_window>
c000244c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002450:	89 c6                	mov    esi,eax
c0002452:	85 c0                	test   eax,eax
c0002454:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002458:	75 3c                	jne    c0002496 <move_window+0x6c>
c000245a:	83 ec 0c             	sub    esp,0xc
c000245d:	8d 43 54             	lea    eax,[ebx+0x54]
c0002460:	6a 01                	push   0x1
c0002462:	51                   	push   ecx
c0002463:	52                   	push   edx
c0002464:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002468:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000246c:	50                   	push   eax
c000246d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002471:	50                   	push   eax
c0002472:	e8 8a f7 ff ff       	call   c0001c01 <disk_read>
c0002477:	83 c4 20             	add    esp,0x20
c000247a:	85 c0                	test   eax,eax
c000247c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002480:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002484:	74 0a                	je     c0002490 <move_window+0x66>
c0002486:	83 ca ff             	or     edx,0xffffffff
c0002489:	be 01 00 00 00       	mov    esi,0x1
c000248e:	89 d1                	mov    ecx,edx
c0002490:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002493:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002496:	89 f0                	mov    eax,esi
c0002498:	83 c4 14             	add    esp,0x14
c000249b:	5b                   	pop    ebx
c000249c:	5e                   	pop    esi
c000249d:	c3                   	ret    

c000249e <check_fs>:
c000249e:	53                   	push   ebx
c000249f:	89 c3                	mov    ebx,eax
c00024a1:	83 ec 08             	sub    esp,0x8
c00024a4:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024a8:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024af:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024b6:	e8 6f ff ff ff       	call   c000242a <move_window>
c00024bb:	ba 04 00 00 00       	mov    edx,0x4
c00024c0:	85 c0                	test   eax,eax
c00024c2:	0f 85 89 00 00 00    	jne    c0002551 <check_fs+0xb3>
c00024c8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024ce:	e8 79 f7 ff ff       	call   c0001c4c <ld_word>
c00024d3:	ba 03 00 00 00       	mov    edx,0x3
c00024d8:	66 3d 55 aa          	cmp    ax,0xaa55
c00024dc:	75 73                	jne    c0002551 <check_fs+0xb3>
c00024de:	ba 20 a0 02 c0       	mov    edx,0xc002a020
c00024e3:	8d 43 54             	lea    eax,[ebx+0x54]
c00024e6:	b9 0b 00 00 00       	mov    ecx,0xb
c00024eb:	e8 fb f7 ff ff       	call   c0001ceb <mem_cmp>
c00024f0:	ba 01 00 00 00       	mov    edx,0x1
c00024f5:	85 c0                	test   eax,eax
c00024f7:	74 58                	je     c0002551 <check_fs+0xb3>
c00024f9:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024fc:	8d 50 18             	lea    edx,[eax+0x18]
c00024ff:	80 fa 01             	cmp    dl,0x1
c0002502:	76 09                	jbe    c000250d <check_fs+0x6f>
c0002504:	ba 02 00 00 00       	mov    edx,0x2
c0002509:	3c eb                	cmp    al,0xeb
c000250b:	75 44                	jne    c0002551 <check_fs+0xb3>
c000250d:	ba f0 d4 02 c0       	mov    edx,0xc002d4f0
c0002512:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002518:	b9 03 00 00 00       	mov    ecx,0x3
c000251d:	e8 c9 f7 ff ff       	call   c0001ceb <mem_cmp>
c0002522:	31 d2                	xor    edx,edx
c0002524:	85 c0                	test   eax,eax
c0002526:	74 29                	je     c0002551 <check_fs+0xb3>
c0002528:	ba 2c a0 02 c0       	mov    edx,0xc002a02c
c000252d:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002533:	b9 05 00 00 00       	mov    ecx,0x5
c0002538:	e8 ae f7 ff ff       	call   c0001ceb <mem_cmp>
c000253d:	31 d2                	xor    edx,edx
c000253f:	85 c0                	test   eax,eax
c0002541:	74 0e                	je     c0002551 <check_fs+0xb3>
c0002543:	31 d2                	xor    edx,edx
c0002545:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000254c:	0f 95 c2             	setne  dl
c000254f:	01 d2                	add    edx,edx
c0002551:	89 d0                	mov    eax,edx
c0002553:	83 c4 08             	add    esp,0x8
c0002556:	5b                   	pop    ebx
c0002557:	c3                   	ret    

c0002558 <find_volume>:
c0002558:	55                   	push   ebp
c0002559:	31 c9                	xor    ecx,ecx
c000255b:	57                   	push   edi
c000255c:	56                   	push   esi
c000255d:	89 d6                	mov    esi,edx
c000255f:	53                   	push   ebx
c0002560:	31 d2                	xor    edx,edx
c0002562:	83 ec 3c             	sub    esp,0x3c
c0002565:	89 c3                	mov    ebx,eax
c0002567:	e8 32 ff ff ff       	call   c000249e <check_fs>
c000256c:	83 f8 02             	cmp    eax,0x2
c000256f:	74 0e                	je     c000257f <find_volume+0x27>
c0002571:	0f 87 5d 01 00 00    	ja     c00026d4 <find_volume+0x17c>
c0002577:	85 f6                	test   esi,esi
c0002579:	0f 84 55 01 00 00    	je     c00026d4 <find_volume+0x17c>
c000257f:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002586:	0f 85 dd 00 00 00    	jne    c0002669 <find_volume+0x111>
c000258c:	31 c9                	xor    ecx,ecx
c000258e:	ba 01 00 00 00       	mov    edx,0x1
c0002593:	89 d8                	mov    eax,ebx
c0002595:	e8 90 fe ff ff       	call   c000242a <move_window>
c000259a:	85 c0                	test   eax,eax
c000259c:	74 0a                	je     c00025a8 <find_volume+0x50>
c000259e:	b8 04 00 00 00       	mov    eax,0x4
c00025a3:	e9 2c 01 00 00       	jmp    c00026d4 <find_volume+0x17c>
c00025a8:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025ab:	89 e8                	mov    eax,ebp
c00025ad:	e8 f6 fc ff ff       	call   c00022a8 <test_gpt_header>
c00025b2:	85 c0                	test   eax,eax
c00025b4:	75 0a                	jne    c00025c0 <find_volume+0x68>
c00025b6:	b8 03 00 00 00       	mov    eax,0x3
c00025bb:	e9 14 01 00 00       	jmp    c00026d4 <find_volume+0x17c>
c00025c0:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025c6:	e8 8e f6 ff ff       	call   c0001c59 <ld_dword>
c00025cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025cf:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025d5:	e8 97 f6 ff ff       	call   c0001c71 <ld_qword>
c00025da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025f6:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025fa:	74 ba                	je     c00025b6 <find_volume+0x5e>
c00025fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002600:	31 c9                	xor    ecx,ecx
c0002602:	c1 e7 07             	shl    edi,0x7
c0002605:	89 d8                	mov    eax,ebx
c0002607:	89 fa                	mov    edx,edi
c0002609:	c1 ea 09             	shr    edx,0x9
c000260c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002610:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002614:	e8 11 fe ff ff       	call   c000242a <move_window>
c0002619:	85 c0                	test   eax,eax
c000261b:	75 81                	jne    c000259e <find_volume+0x46>
c000261d:	81 e7 80 01 00 00    	and    edi,0x180
c0002623:	b9 10 00 00 00       	mov    ecx,0x10
c0002628:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000262c:	ba 10 a0 02 c0       	mov    edx,0xc002a010
c0002631:	e8 b5 f6 ff ff       	call   c0001ceb <mem_cmp>
c0002636:	85 c0                	test   eax,eax
c0002638:	75 29                	jne    c0002663 <find_volume+0x10b>
c000263a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000263e:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002642:	e8 2a f6 ff ff       	call   c0001c71 <ld_qword>
c0002647:	89 d1                	mov    ecx,edx
c0002649:	89 c2                	mov    edx,eax
c000264b:	89 d8                	mov    eax,ebx
c000264d:	e8 4c fe ff ff       	call   c000249e <check_fs>
c0002652:	85 f6                	test   esi,esi
c0002654:	75 07                	jne    c000265d <find_volume+0x105>
c0002656:	83 f8 01             	cmp    eax,0x1
c0002659:	77 08                	ja     c0002663 <find_volume+0x10b>
c000265b:	eb 77                	jmp    c00026d4 <find_volume+0x17c>
c000265d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002661:	74 71                	je     c00026d4 <find_volume+0x17c>
c0002663:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002667:	eb 89                	jmp    c00025f2 <find_volume+0x9a>
c0002669:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000266d:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002673:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002679:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000267d:	89 cd                	mov    ebp,ecx
c000267f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002683:	89 f8                	mov    eax,edi
c0002685:	83 c7 10             	add    edi,0x10
c0002688:	e8 cc f5 ff ff       	call   c0001c59 <ld_dword>
c000268d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002691:	89 01                	mov    DWORD PTR [ecx],eax
c0002693:	83 c1 04             	add    ecx,0x4
c0002696:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000269a:	75 e3                	jne    c000267f <find_volume+0x127>
c000269c:	31 ff                	xor    edi,edi
c000269e:	85 f6                	test   esi,esi
c00026a0:	74 03                	je     c00026a5 <find_volume+0x14d>
c00026a2:	8d 7e ff             	lea    edi,[esi-0x1]
c00026a5:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026a9:	85 d2                	test   edx,edx
c00026ab:	74 14                	je     c00026c1 <find_volume+0x169>
c00026ad:	31 c9                	xor    ecx,ecx
c00026af:	89 d8                	mov    eax,ebx
c00026b1:	e8 e8 fd ff ff       	call   c000249e <check_fs>
c00026b6:	83 f8 01             	cmp    eax,0x1
c00026b9:	76 19                	jbe    c00026d4 <find_volume+0x17c>
c00026bb:	85 f6                	test   esi,esi
c00026bd:	74 0f                	je     c00026ce <find_volume+0x176>
c00026bf:	eb 13                	jmp    c00026d4 <find_volume+0x17c>
c00026c1:	85 f6                	test   esi,esi
c00026c3:	0f 85 ed fe ff ff    	jne    c00025b6 <find_volume+0x5e>
c00026c9:	b8 03 00 00 00       	mov    eax,0x3
c00026ce:	47                   	inc    edi
c00026cf:	83 ff 03             	cmp    edi,0x3
c00026d2:	76 d1                	jbe    c00026a5 <find_volume+0x14d>
c00026d4:	83 c4 3c             	add    esp,0x3c
c00026d7:	5b                   	pop    ebx
c00026d8:	5e                   	pop    esi
c00026d9:	5f                   	pop    edi
c00026da:	5d                   	pop    ebp
c00026db:	c3                   	ret    

c00026dc <mount_volume>:
c00026dc:	55                   	push   ebp
c00026dd:	57                   	push   edi
c00026de:	89 cf                	mov    edi,ecx
c00026e0:	56                   	push   esi
c00026e1:	53                   	push   ebx
c00026e2:	bb 0b 00 00 00       	mov    ebx,0xb
c00026e7:	83 ec 3c             	sub    esp,0x3c
c00026ea:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026f0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026f4:	e8 35 fb ff ff       	call   c000222e <get_ldnumber>
c00026f9:	85 c0                	test   eax,eax
c00026fb:	0f 88 3a 05 00 00    	js     c0002c3b <mount_volume+0x55f>
c0002701:	8b 2c 85 a0 f0 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0f60]
c0002708:	89 c6                	mov    esi,eax
c000270a:	bb 0c 00 00 00       	mov    ebx,0xc
c000270f:	85 ed                	test   ebp,ebp
c0002711:	0f 84 24 05 00 00    	je     c0002c3b <mount_volume+0x55f>
c0002717:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000271b:	83 e7 fe             	and    edi,0xfffffffe
c000271e:	89 2a                	mov    DWORD PTR [edx],ebp
c0002720:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002724:	74 32                	je     c0002758 <mount_volume+0x7c>
c0002726:	83 ec 0c             	sub    esp,0xc
c0002729:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000272d:	50                   	push   eax
c000272e:	e8 c8 f4 ff ff       	call   c0001bfb <disk_status>
c0002733:	83 c4 10             	add    esp,0x10
c0002736:	a8 01                	test   al,0x1
c0002738:	75 1e                	jne    c0002758 <mount_volume+0x7c>
c000273a:	31 db                	xor    ebx,ebx
c000273c:	89 f9                	mov    ecx,edi
c000273e:	84 c9                	test   cl,cl
c0002740:	0f 84 f5 04 00 00    	je     c0002c3b <mount_volume+0x55f>
c0002746:	a8 04                	test   al,0x4
c0002748:	0f 84 ed 04 00 00    	je     c0002c3b <mount_volume+0x55f>
c000274e:	bb 0a 00 00 00       	mov    ebx,0xa
c0002753:	e9 e3 04 00 00       	jmp    c0002c3b <mount_volume+0x55f>
c0002758:	83 ec 0c             	sub    esp,0xc
c000275b:	89 f0                	mov    eax,esi
c000275d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002761:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002764:	0f b6 f0             	movzx  esi,al
c0002767:	bb 03 00 00 00       	mov    ebx,0x3
c000276c:	56                   	push   esi
c000276d:	e8 8c f4 ff ff       	call   c0001bfe <disk_initialize>
c0002772:	83 c4 10             	add    esp,0x10
c0002775:	a8 01                	test   al,0x1
c0002777:	0f 85 be 04 00 00    	jne    c0002c3b <mount_volume+0x55f>
c000277d:	89 f9                	mov    ecx,edi
c000277f:	84 c9                	test   cl,cl
c0002781:	74 04                	je     c0002787 <mount_volume+0xab>
c0002783:	a8 04                	test   al,0x4
c0002785:	75 c7                	jne    c000274e <mount_volume+0x72>
c0002787:	31 d2                	xor    edx,edx
c0002789:	89 e8                	mov    eax,ebp
c000278b:	e8 c8 fd ff ff       	call   c0002558 <find_volume>
c0002790:	83 f8 04             	cmp    eax,0x4
c0002793:	75 0a                	jne    c000279f <mount_volume+0xc3>
c0002795:	bb 01 00 00 00       	mov    ebx,0x1
c000279a:	e9 9c 04 00 00       	jmp    c0002c3b <mount_volume+0x55f>
c000279f:	83 f8 01             	cmp    eax,0x1
c00027a2:	76 0a                	jbe    c00027ae <mount_volume+0xd2>
c00027a4:	bb 0d 00 00 00       	mov    ebx,0xd
c00027a9:	e9 8d 04 00 00       	jmp    c0002c3b <mount_volume+0x55f>
c00027ae:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027b1:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027bc:	75 17                	jne    c00027d5 <mount_volume+0xf9>
c00027be:	b8 0b 00 00 00       	mov    eax,0xb
c00027c3:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027c8:	75 da                	jne    c00027a4 <mount_volume+0xc8>
c00027ca:	40                   	inc    eax
c00027cb:	83 f8 40             	cmp    eax,0x40
c00027ce:	75 f3                	jne    c00027c3 <mount_volume+0xe7>
c00027d0:	e9 5a 02 00 00       	jmp    c0002a2f <mount_volume+0x353>
c00027d5:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027d8:	e8 6f f4 ff ff       	call   c0001c4c <ld_word>
c00027dd:	66 3d 00 02          	cmp    ax,0x200
c00027e1:	75 c1                	jne    c00027a4 <mount_volume+0xc8>
c00027e3:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027e6:	e8 61 f4 ff ff       	call   c0001c4c <ld_word>
c00027eb:	0f b7 c0             	movzx  eax,ax
c00027ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027f2:	85 c0                	test   eax,eax
c00027f4:	75 0c                	jne    c0002802 <mount_volume+0x126>
c00027f6:	8d 45 78             	lea    eax,[ebp+0x78]
c00027f9:	e8 5b f4 ff ff       	call   c0001c59 <ld_dword>
c00027fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002806:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002809:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000280c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002810:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002813:	48                   	dec    eax
c0002814:	3c 01                	cmp    al,0x1
c0002816:	77 8c                	ja     c00027a4 <mount_volume+0xc8>
c0002818:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000281c:	89 c3                	mov    ebx,eax
c000281e:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002822:	66 85 c0             	test   ax,ax
c0002825:	0f 84 79 ff ff ff    	je     c00027a4 <mount_volume+0xc8>
c000282b:	8d 40 ff             	lea    eax,[eax-0x1]
c000282e:	85 d8                	test   eax,ebx
c0002830:	0f 85 6e ff ff ff    	jne    c00027a4 <mount_volume+0xc8>
c0002836:	8d 45 65             	lea    eax,[ebp+0x65]
c0002839:	e8 0e f4 ff ff       	call   c0001c4c <ld_word>
c000283e:	89 c7                	mov    edi,eax
c0002840:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002844:	a8 0f                	test   al,0xf
c0002846:	0f 85 58 ff ff ff    	jne    c00027a4 <mount_volume+0xc8>
c000284c:	8d 45 67             	lea    eax,[ebp+0x67]
c000284f:	e8 f8 f3 ff ff       	call   c0001c4c <ld_word>
c0002854:	0f b7 f0             	movzx  esi,ax
c0002857:	85 f6                	test   esi,esi
c0002859:	75 0a                	jne    c0002865 <mount_volume+0x189>
c000285b:	8d 45 74             	lea    eax,[ebp+0x74]
c000285e:	e8 f6 f3 ff ff       	call   c0001c59 <ld_dword>
c0002863:	89 c6                	mov    esi,eax
c0002865:	8d 45 62             	lea    eax,[ebp+0x62]
c0002868:	e8 df f3 ff ff       	call   c0001c4c <ld_word>
c000286d:	66 85 c0             	test   ax,ax
c0002870:	0f 84 2e ff ff ff    	je     c00027a4 <mount_volume+0xc8>
c0002876:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000287b:	0f b7 c8             	movzx  ecx,ax
c000287e:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002883:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002887:	89 fa                	mov    edx,edi
c0002889:	66 c1 ea 04          	shr    dx,0x4
c000288d:	0f b7 d2             	movzx  edx,dx
c0002890:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002894:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002897:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000289b:	39 c6                	cmp    esi,eax
c000289d:	0f 82 01 ff ff ff    	jb     c00027a4 <mount_volume+0xc8>
c00028a3:	29 c6                	sub    esi,eax
c00028a5:	31 d2                	xor    edx,edx
c00028a7:	89 f0                	mov    eax,esi
c00028a9:	f7 f3                	div    ebx
c00028ab:	39 de                	cmp    esi,ebx
c00028ad:	0f 82 f1 fe ff ff    	jb     c00027a4 <mount_volume+0xc8>
c00028b3:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028b8:	0f 87 e6 fe ff ff    	ja     c00027a4 <mount_volume+0xc8>
c00028be:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028c3:	0f 86 63 03 00 00    	jbe    c0002c2c <mount_volume+0x550>
c00028c9:	bb 03 00 00 00       	mov    ebx,0x3
c00028ce:	8d 70 02             	lea    esi,[eax+0x2]
c00028d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028d9:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028dc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028df:	31 d2                	xor    edx,edx
c00028e1:	89 c8                	mov    eax,ecx
c00028e3:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028f6:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028f9:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002900:	31 d2                	xor    edx,edx
c0002902:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002906:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290a:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000290d:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002910:	83 fb 03             	cmp    ebx,0x3
c0002913:	75 2b                	jne    c0002940 <mount_volume+0x264>
c0002915:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002918:	e8 2f f3 ff ff       	call   c0001c4c <ld_word>
c000291d:	66 09 c7             	or     di,ax
c0002920:	0f 85 7e fe ff ff    	jne    c00027a4 <mount_volume+0xc8>
c0002926:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000292c:	c1 e6 02             	shl    esi,0x2
c000292f:	e8 25 f3 ff ff       	call   c0001c59 <ld_dword>
c0002934:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000293b:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000293e:	eb 30                	jmp    c0002970 <mount_volume+0x294>
c0002940:	66 85 ff             	test   di,di
c0002943:	0f 84 5b fe ff ff    	je     c00027a4 <mount_volume+0xc8>
c0002949:	31 d2                	xor    edx,edx
c000294b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000294f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002953:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002957:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295a:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000295d:	83 fb 02             	cmp    ebx,0x2
c0002960:	75 04                	jne    c0002966 <mount_volume+0x28a>
c0002962:	01 f6                	add    esi,esi
c0002964:	eb 0a                	jmp    c0002970 <mount_volume+0x294>
c0002966:	8d 04 76             	lea    eax,[esi+esi*2]
c0002969:	83 e6 01             	and    esi,0x1
c000296c:	d1 e8                	shr    eax,1
c000296e:	01 c6                	add    esi,eax
c0002970:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002976:	c1 ee 09             	shr    esi,0x9
c0002979:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000297d:	0f 87 21 fe ff ff    	ja     c00027a4 <mount_volume+0xc8>
c0002983:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000298a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002991:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002995:	83 fb 03             	cmp    ebx,0x3
c0002998:	75 7a                	jne    c0002a14 <mount_volume+0x338>
c000299a:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029a0:	e8 a7 f2 ff ff       	call   c0001c4c <ld_word>
c00029a5:	66 48                	dec    ax
c00029a7:	75 6b                	jne    c0002a14 <mount_volume+0x338>
c00029a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029b1:	83 c2 01             	add    edx,0x1
c00029b4:	89 e8                	mov    eax,ebp
c00029b6:	83 d1 00             	adc    ecx,0x0
c00029b9:	e8 6c fa ff ff       	call   c000242a <move_window>
c00029be:	85 c0                	test   eax,eax
c00029c0:	75 52                	jne    c0002a14 <mount_volume+0x338>
c00029c2:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029c6:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029cc:	e8 7b f2 ff ff       	call   c0001c4c <ld_word>
c00029d1:	66 3d 55 aa          	cmp    ax,0xaa55
c00029d5:	75 3d                	jne    c0002a14 <mount_volume+0x338>
c00029d7:	8d 45 54             	lea    eax,[ebp+0x54]
c00029da:	e8 7a f2 ff ff       	call   c0001c59 <ld_dword>
c00029df:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029e4:	75 2e                	jne    c0002a14 <mount_volume+0x338>
c00029e6:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029ec:	e8 68 f2 ff ff       	call   c0001c59 <ld_dword>
c00029f1:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029f6:	75 1c                	jne    c0002a14 <mount_volume+0x338>
c00029f8:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029fe:	e8 56 f2 ff ff       	call   c0001c59 <ld_dword>
c0002a03:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a06:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a0c:	e8 48 f2 ff ff       	call   c0001c59 <ld_dword>
c0002a11:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a14:	66 a1 80 f0 02 c0    	mov    ax,ds:0xc002f080
c0002a1a:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a1d:	40                   	inc    eax
c0002a1e:	31 db                	xor    ebx,ebx
c0002a20:	66 a3 80 f0 02 c0    	mov    ds:0xc002f080,ax
c0002a26:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a2a:	e9 0c 02 00 00       	jmp    c0002c3b <mount_volume+0x55f>
c0002a2f:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a35:	e8 12 f2 ff ff       	call   c0001c4c <ld_word>
c0002a3a:	66 3d 00 01          	cmp    ax,0x100
c0002a3e:	0f 85 60 fd ff ff    	jne    c00027a4 <mount_volume+0xc8>
c0002a44:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a4b:	0f 85 53 fd ff ff    	jne    c00027a4 <mount_volume+0xc8>
c0002a51:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a57:	e8 15 f2 ff ff       	call   c0001c71 <ld_qword>
c0002a5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a60:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a64:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a6a:	e8 ea f1 ff ff       	call   c0001c59 <ld_dword>
c0002a6f:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a72:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a78:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a7b:	fe c8                	dec    al
c0002a7d:	0f 85 21 fd ff ff    	jne    c00027a4 <mount_volume+0xc8>
c0002a83:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a8a:	bb 01 00 00 00       	mov    ebx,0x1
c0002a8f:	d3 e3                	shl    ebx,cl
c0002a91:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a95:	66 85 db             	test   bx,bx
c0002a98:	0f 84 06 fd ff ff    	je     c00027a4 <mount_volume+0xc8>
c0002a9e:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002aa4:	e8 b0 f1 ff ff       	call   c0001c59 <ld_dword>
c0002aa9:	89 c6                	mov    esi,eax
c0002aab:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ab0:	0f 87 ee fc ff ff    	ja     c00027a4 <mount_volume+0xc8>
c0002ab6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002aba:	8d 40 02             	lea    eax,[eax+0x2]
c0002abd:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ac0:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ac3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aca:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ad0:	e8 84 f1 ff ff       	call   c0001c59 <ld_dword>
c0002ad5:	31 d2                	xor    edx,edx
c0002ad7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002adb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002adf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ae3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ae7:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aea:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002aed:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002af3:	e8 61 f1 ff ff       	call   c0001c59 <ld_dword>
c0002af8:	31 d2                	xor    edx,edx
c0002afa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002afe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b02:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b06:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b09:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b0c:	0f b7 c3             	movzx  eax,bx
c0002b0f:	31 d2                	xor    edx,edx
c0002b11:	0f af f0             	imul   esi,eax
c0002b14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b18:	89 f0                	mov    eax,esi
c0002b1a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b1e:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b22:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b26:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b2a:	39 c1                	cmp    ecx,eax
c0002b2c:	89 df                	mov    edi,ebx
c0002b2e:	19 d7                	sbb    edi,edx
c0002b30:	0f 82 6e fc ff ff    	jb     c00027a4 <mount_volume+0xc8>
c0002b36:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b3c:	31 db                	xor    ebx,ebx
c0002b3e:	e8 16 f1 ff ff       	call   c0001c59 <ld_dword>
c0002b43:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b4a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b4d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b55:	85 db                	test   ebx,ebx
c0002b57:	75 39                	jne    c0002b92 <mount_volume+0x4b6>
c0002b59:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b5d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b61:	0f 86 3d fc ff ff    	jbe    c00027a4 <mount_volume+0xc8>
c0002b67:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b6a:	31 ff                	xor    edi,edi
c0002b6c:	89 e8                	mov    eax,ebp
c0002b6e:	e8 72 f3 ff ff       	call   c0001ee5 <clst2sect>
c0002b73:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b77:	01 c6                	add    esi,eax
c0002b79:	89 e8                	mov    eax,ebp
c0002b7b:	11 d7                	adc    edi,edx
c0002b7d:	89 f2                	mov    edx,esi
c0002b7f:	89 f9                	mov    ecx,edi
c0002b81:	e8 a4 f8 ff ff       	call   c000242a <move_window>
c0002b86:	85 c0                	test   eax,eax
c0002b88:	0f 85 07 fc ff ff    	jne    c0002795 <mount_volume+0xb9>
c0002b8e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b92:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b97:	74 0b                	je     c0002ba4 <mount_volume+0x4c8>
c0002b99:	83 c3 20             	add    ebx,0x20
c0002b9c:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ba2:	eb b1                	jmp    c0002b55 <mount_volume+0x479>
c0002ba4:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ba7:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bab:	e8 a9 f0 ff ff       	call   c0001c59 <ld_dword>
c0002bb0:	89 c3                	mov    ebx,eax
c0002bb2:	83 f8 01             	cmp    eax,0x1
c0002bb5:	0f 86 e9 fb ff ff    	jbe    c00027a4 <mount_volume+0xc8>
c0002bbb:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bbe:	0f 86 e0 fb ff ff    	jbe    c00027a4 <mount_volume+0xc8>
c0002bc4:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bc7:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bcb:	0f af c2             	imul   eax,edx
c0002bce:	31 d2                	xor    edx,edx
c0002bd0:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bd3:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bd6:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bd9:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bdc:	31 c9                	xor    ecx,ecx
c0002bde:	89 da                	mov    edx,ebx
c0002be0:	89 e8                	mov    eax,ebp
c0002be2:	c1 ea 07             	shr    edx,0x7
c0002be5:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002be8:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002beb:	e8 3a f8 ff ff       	call   c000242a <move_window>
c0002bf0:	85 c0                	test   eax,eax
c0002bf2:	0f 85 9d fb ff ff    	jne    c0002795 <mount_volume+0xb9>
c0002bf8:	89 d8                	mov    eax,ebx
c0002bfa:	83 e0 7f             	and    eax,0x7f
c0002bfd:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c00:	e8 54 f0 ff ff       	call   c0001c59 <ld_dword>
c0002c05:	83 f8 ff             	cmp    eax,0xffffffff
c0002c08:	74 0a                	je     c0002c14 <mount_volume+0x538>
c0002c0a:	43                   	inc    ebx
c0002c0b:	39 d8                	cmp    eax,ebx
c0002c0d:	74 cd                	je     c0002bdc <mount_volume+0x500>
c0002c0f:	e9 90 fb ff ff       	jmp    c00027a4 <mount_volume+0xc8>
c0002c14:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c1b:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c22:	bb 04 00 00 00       	mov    ebx,0x4
c0002c27:	e9 e8 fd ff ff       	jmp    c0002a14 <mount_volume+0x338>
c0002c2c:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c31:	19 db                	sbb    ebx,ebx
c0002c33:	83 c3 02             	add    ebx,0x2
c0002c36:	e9 93 fc ff ff       	jmp    c00028ce <mount_volume+0x1f2>
c0002c3b:	83 c4 3c             	add    esp,0x3c
c0002c3e:	89 d8                	mov    eax,ebx
c0002c40:	5b                   	pop    ebx
c0002c41:	5e                   	pop    esi
c0002c42:	5f                   	pop    edi
c0002c43:	5d                   	pop    ebp
c0002c44:	c3                   	ret    

c0002c45 <find_bitmap>:
c0002c45:	55                   	push   ebp
c0002c46:	57                   	push   edi
c0002c47:	89 c7                	mov    edi,eax
c0002c49:	56                   	push   esi
c0002c4a:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c4d:	53                   	push   ebx
c0002c4e:	83 ec 1c             	sub    esp,0x1c
c0002c51:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c54:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c58:	83 e8 02             	sub    eax,0x2
c0002c5b:	39 f0                	cmp    eax,esi
c0002c5d:	77 02                	ja     c0002c61 <find_bitmap+0x1c>
c0002c5f:	31 f6                	xor    esi,esi
c0002c61:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c65:	89 f3                	mov    ebx,esi
c0002c67:	31 ed                	xor    ebp,ebp
c0002c69:	31 c9                	xor    ecx,ecx
c0002c6b:	89 da                	mov    edx,ebx
c0002c6d:	89 f8                	mov    eax,edi
c0002c6f:	c1 ea 0c             	shr    edx,0xc
c0002c72:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c75:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c78:	e8 ad f7 ff ff       	call   c000242a <move_window>
c0002c7d:	85 c0                	test   eax,eax
c0002c7f:	75 68                	jne    c0002ce9 <find_bitmap+0xa4>
c0002c81:	89 da                	mov    edx,ebx
c0002c83:	89 d9                	mov    ecx,ebx
c0002c85:	c1 ea 03             	shr    edx,0x3
c0002c88:	83 e1 07             	and    ecx,0x7
c0002c8b:	b8 01 00 00 00       	mov    eax,0x1
c0002c90:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c96:	d3 e0                	shl    eax,cl
c0002c98:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c9b:	83 e9 02             	sub    ecx,0x2
c0002c9e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ca2:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002ca6:	43                   	inc    ebx
c0002ca7:	21 c1                	and    ecx,eax
c0002ca9:	d1 e0                	shl    eax,1
c0002cab:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002caf:	77 09                	ja     c0002cba <find_bitmap+0x75>
c0002cb1:	31 db                	xor    ebx,ebx
c0002cb3:	ba 00 02 00 00       	mov    edx,0x200
c0002cb8:	31 c0                	xor    eax,eax
c0002cba:	84 c9                	test   cl,cl
c0002cbc:	75 10                	jne    c0002cce <find_bitmap+0x89>
c0002cbe:	45                   	inc    ebp
c0002cbf:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cc3:	75 0f                	jne    c0002cd4 <find_bitmap+0x8f>
c0002cc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cc9:	83 c0 02             	add    eax,0x2
c0002ccc:	eb 22                	jmp    c0002cf0 <find_bitmap+0xab>
c0002cce:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cd2:	31 ed                	xor    ebp,ebp
c0002cd4:	39 de                	cmp    esi,ebx
c0002cd6:	74 16                	je     c0002cee <find_bitmap+0xa9>
c0002cd8:	84 c0                	test   al,al
c0002cda:	75 c6                	jne    c0002ca2 <find_bitmap+0x5d>
c0002cdc:	42                   	inc    edx
c0002cdd:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ce3:	77 84                	ja     c0002c69 <find_bitmap+0x24>
c0002ce5:	b0 01                	mov    al,0x1
c0002ce7:	eb b9                	jmp    c0002ca2 <find_bitmap+0x5d>
c0002ce9:	83 c8 ff             	or     eax,0xffffffff
c0002cec:	eb 02                	jmp    c0002cf0 <find_bitmap+0xab>
c0002cee:	31 c0                	xor    eax,eax
c0002cf0:	83 c4 1c             	add    esp,0x1c
c0002cf3:	5b                   	pop    ebx
c0002cf4:	5e                   	pop    esi
c0002cf5:	5f                   	pop    edi
c0002cf6:	5d                   	pop    ebp
c0002cf7:	c3                   	ret    

c0002cf8 <change_bitmap>:
c0002cf8:	55                   	push   ebp
c0002cf9:	89 cd                	mov    ebp,ecx
c0002cfb:	57                   	push   edi
c0002cfc:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cff:	56                   	push   esi
c0002d00:	89 c7                	mov    edi,eax
c0002d02:	53                   	push   ebx
c0002d03:	89 c8                	mov    eax,ecx
c0002d05:	83 ec 1c             	sub    esp,0x1c
c0002d08:	31 d2                	xor    edx,edx
c0002d0a:	89 ce                	mov    esi,ecx
c0002d0c:	c1 e8 0c             	shr    eax,0xc
c0002d0f:	bb 01 00 00 00       	mov    ebx,0x1
c0002d14:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d17:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d1a:	c1 ee 03             	shr    esi,0x3
c0002d1d:	83 e1 07             	and    ecx,0x7
c0002d20:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d26:	d3 e3                	shl    ebx,cl
c0002d28:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d2c:	89 c1                	mov    ecx,eax
c0002d2e:	89 d3                	mov    ebx,edx
c0002d30:	83 c1 01             	add    ecx,0x1
c0002d33:	83 d3 00             	adc    ebx,0x0
c0002d36:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d3a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d3e:	89 d1                	mov    ecx,edx
c0002d40:	89 c2                	mov    edx,eax
c0002d42:	89 f8                	mov    eax,edi
c0002d44:	e8 e1 f6 ff ff       	call   c000242a <move_window>
c0002d49:	89 c1                	mov    ecx,eax
c0002d4b:	85 c0                	test   eax,eax
c0002d4d:	75 48                	jne    c0002d97 <change_bitmap+0x9f>
c0002d4f:	31 d2                	xor    edx,edx
c0002d51:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d55:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d59:	0f 95 c2             	setne  dl
c0002d5c:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d60:	74 3c                	je     c0002d9e <change_bitmap+0xa6>
c0002d62:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d66:	4d                   	dec    ebp
c0002d67:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d6b:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d6f:	74 32                	je     c0002da3 <change_bitmap+0xab>
c0002d71:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d75:	75 d8                	jne    c0002d4f <change_bitmap+0x57>
c0002d77:	8d 46 01             	lea    eax,[esi+0x1]
c0002d7a:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d7f:	89 c3                	mov    ebx,eax
c0002d81:	31 f6                	xor    esi,esi
c0002d83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d8b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d91:	74 99                	je     c0002d2c <change_bitmap+0x34>
c0002d93:	89 de                	mov    esi,ebx
c0002d95:	eb b8                	jmp    c0002d4f <change_bitmap+0x57>
c0002d97:	b9 01 00 00 00       	mov    ecx,0x1
c0002d9c:	eb 05                	jmp    c0002da3 <change_bitmap+0xab>
c0002d9e:	b9 02 00 00 00       	mov    ecx,0x2
c0002da3:	83 c4 1c             	add    esp,0x1c
c0002da6:	89 c8                	mov    eax,ecx
c0002da8:	5b                   	pop    ebx
c0002da9:	5e                   	pop    esi
c0002daa:	5f                   	pop    edi
c0002dab:	5d                   	pop    ebp
c0002dac:	c3                   	ret    

c0002dad <put_fat>:
c0002dad:	83 fa 01             	cmp    edx,0x1
c0002db0:	0f 86 7b 01 00 00    	jbe    c0002f31 <put_fat+0x184>
c0002db6:	55                   	push   ebp
c0002db7:	57                   	push   edi
c0002db8:	89 cf                	mov    edi,ecx
c0002dba:	56                   	push   esi
c0002dbb:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc0:	53                   	push   ebx
c0002dc1:	89 c6                	mov    esi,eax
c0002dc3:	83 ec 1c             	sub    esp,0x1c
c0002dc6:	89 d3                	mov    ebx,edx
c0002dc8:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002dcb:	0f 86 68 01 00 00    	jbe    c0002f39 <put_fat+0x18c>
c0002dd1:	8a 00                	mov    al,BYTE PTR [eax]
c0002dd3:	3c 02                	cmp    al,0x2
c0002dd5:	0f 84 c7 00 00 00    	je     c0002ea2 <put_fat+0xf5>
c0002ddb:	77 09                	ja     c0002de6 <put_fat+0x39>
c0002ddd:	fe c8                	dec    al
c0002ddf:	74 17                	je     c0002df8 <put_fat+0x4b>
c0002de1:	e9 53 01 00 00       	jmp    c0002f39 <put_fat+0x18c>
c0002de6:	b9 02 00 00 00       	mov    ecx,0x2
c0002deb:	3c 04                	cmp    al,0x4
c0002ded:	0f 86 e1 00 00 00    	jbe    c0002ed4 <put_fat+0x127>
c0002df3:	e9 41 01 00 00       	jmp    c0002f39 <put_fat+0x18c>
c0002df8:	89 d5                	mov    ebp,edx
c0002dfa:	31 c9                	xor    ecx,ecx
c0002dfc:	d1 ed                	shr    ebp,1
c0002dfe:	89 f0                	mov    eax,esi
c0002e00:	01 d5                	add    ebp,edx
c0002e02:	89 ea                	mov    edx,ebp
c0002e04:	c1 ea 09             	shr    edx,0x9
c0002e07:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e0a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e0d:	e8 18 f6 ff ff       	call   c000242a <move_window>
c0002e12:	89 c1                	mov    ecx,eax
c0002e14:	85 c0                	test   eax,eax
c0002e16:	0f 85 1d 01 00 00    	jne    c0002f39 <put_fat+0x18c>
c0002e1c:	8d 46 54             	lea    eax,[esi+0x54]
c0002e1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e23:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e26:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e30:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e34:	89 f8                	mov    eax,edi
c0002e36:	83 e3 01             	and    ebx,0x1
c0002e39:	74 0d                	je     c0002e48 <put_fat+0x9b>
c0002e3b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e3e:	89 fa                	mov    edx,edi
c0002e40:	83 e0 0f             	and    eax,0xf
c0002e43:	c1 e2 04             	shl    edx,0x4
c0002e46:	09 d0                	or     eax,edx
c0002e48:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e4f:	31 c9                	xor    ecx,ecx
c0002e51:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e55:	c1 ea 09             	shr    edx,0x9
c0002e58:	89 f0                	mov    eax,esi
c0002e5a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e5d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e60:	e8 c5 f5 ff ff       	call   c000242a <move_window>
c0002e65:	89 c1                	mov    ecx,eax
c0002e67:	85 c0                	test   eax,eax
c0002e69:	0f 85 ca 00 00 00    	jne    c0002f39 <put_fat+0x18c>
c0002e6f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e73:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e79:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e7d:	85 db                	test   ebx,ebx
c0002e7f:	74 07                	je     c0002e88 <put_fat+0xdb>
c0002e81:	c1 ef 04             	shr    edi,0x4
c0002e84:	89 fa                	mov    edx,edi
c0002e86:	eb 0e                	jmp    c0002e96 <put_fat+0xe9>
c0002e88:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e8b:	c1 ef 08             	shr    edi,0x8
c0002e8e:	83 e2 f0             	and    edx,0xfffffff0
c0002e91:	83 e7 0f             	and    edi,0xf
c0002e94:	09 fa                	or     edx,edi
c0002e96:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e99:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e9d:	e9 97 00 00 00       	jmp    c0002f39 <put_fat+0x18c>
c0002ea2:	31 c9                	xor    ecx,ecx
c0002ea4:	c1 ea 08             	shr    edx,0x8
c0002ea7:	89 f0                	mov    eax,esi
c0002ea9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eac:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002eaf:	e8 76 f5 ff ff       	call   c000242a <move_window>
c0002eb4:	89 c1                	mov    ecx,eax
c0002eb6:	85 c0                	test   eax,eax
c0002eb8:	75 7f                	jne    c0002f39 <put_fat+0x18c>
c0002eba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ebe:	01 db                	add    ebx,ebx
c0002ec0:	0f b7 d7             	movzx  edx,di
c0002ec3:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ec9:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ecd:	e8 ec ed ff ff       	call   c0001cbe <st_word>
c0002ed2:	eb 53                	jmp    c0002f27 <put_fat+0x17a>
c0002ed4:	31 c9                	xor    ecx,ecx
c0002ed6:	c1 ea 07             	shr    edx,0x7
c0002ed9:	89 f0                	mov    eax,esi
c0002edb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ede:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ee1:	e8 44 f5 ff ff       	call   c000242a <move_window>
c0002ee6:	89 c1                	mov    ecx,eax
c0002ee8:	85 c0                	test   eax,eax
c0002eea:	75 4d                	jne    c0002f39 <put_fat+0x18c>
c0002eec:	c1 e3 02             	shl    ebx,0x2
c0002eef:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ef5:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ef8:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002efc:	74 1c                	je     c0002f1a <put_fat+0x16d>
c0002efe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f02:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f08:	89 d8                	mov    eax,ebx
c0002f0a:	e8 4a ed ff ff       	call   c0001c59 <ld_dword>
c0002f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f13:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f18:	09 c7                	or     edi,eax
c0002f1a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f1e:	89 fa                	mov    edx,edi
c0002f20:	89 d8                	mov    eax,ebx
c0002f22:	e8 9b ed ff ff       	call   c0001cc2 <st_dword>
c0002f27:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f2b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f2f:	eb 08                	jmp    c0002f39 <put_fat+0x18c>
c0002f31:	b9 02 00 00 00       	mov    ecx,0x2
c0002f36:	89 c8                	mov    eax,ecx
c0002f38:	c3                   	ret    
c0002f39:	83 c4 1c             	add    esp,0x1c
c0002f3c:	89 c8                	mov    eax,ecx
c0002f3e:	5b                   	pop    ebx
c0002f3f:	5e                   	pop    esi
c0002f40:	5f                   	pop    edi
c0002f41:	5d                   	pop    ebp
c0002f42:	c3                   	ret    

c0002f43 <fill_last_frag>:
c0002f43:	57                   	push   edi
c0002f44:	89 cf                	mov    edi,ecx
c0002f46:	56                   	push   esi
c0002f47:	89 d6                	mov    esi,edx
c0002f49:	53                   	push   ebx
c0002f4a:	89 c3                	mov    ebx,eax
c0002f4c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f4f:	85 c0                	test   eax,eax
c0002f51:	74 21                	je     c0002f74 <fill_last_frag+0x31>
c0002f53:	89 f9                	mov    ecx,edi
c0002f55:	83 f8 01             	cmp    eax,0x1
c0002f58:	76 05                	jbe    c0002f5f <fill_last_frag+0x1c>
c0002f5a:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f5d:	29 c1                	sub    ecx,eax
c0002f5f:	8d 56 01             	lea    edx,[esi+0x1]
c0002f62:	29 c2                	sub    edx,eax
c0002f64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f66:	e8 42 fe ff ff       	call   c0002dad <put_fat>
c0002f6b:	85 c0                	test   eax,eax
c0002f6d:	75 05                	jne    c0002f74 <fill_last_frag+0x31>
c0002f6f:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f72:	eb d8                	jmp    c0002f4c <fill_last_frag+0x9>
c0002f74:	5b                   	pop    ebx
c0002f75:	5e                   	pop    esi
c0002f76:	5f                   	pop    edi
c0002f77:	c3                   	ret    

c0002f78 <fill_first_frag>:
c0002f78:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f7c:	75 2d                	jne    c0002fab <fill_first_frag+0x33>
c0002f7e:	57                   	push   edi
c0002f7f:	56                   	push   esi
c0002f80:	53                   	push   ebx
c0002f81:	89 c3                	mov    ebx,eax
c0002f83:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f86:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f89:	01 d7                	add    edi,edx
c0002f8b:	39 fa                	cmp    edx,edi
c0002f8d:	74 14                	je     c0002fa3 <fill_first_frag+0x2b>
c0002f8f:	8d 72 01             	lea    esi,[edx+0x1]
c0002f92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f94:	89 f1                	mov    ecx,esi
c0002f96:	e8 12 fe ff ff       	call   c0002dad <put_fat>
c0002f9b:	89 f2                	mov    edx,esi
c0002f9d:	85 c0                	test   eax,eax
c0002f9f:	74 ea                	je     c0002f8b <fill_first_frag+0x13>
c0002fa1:	eb 0b                	jmp    c0002fae <fill_first_frag+0x36>
c0002fa3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fa7:	31 c0                	xor    eax,eax
c0002fa9:	eb 03                	jmp    c0002fae <fill_first_frag+0x36>
c0002fab:	31 c0                	xor    eax,eax
c0002fad:	c3                   	ret    
c0002fae:	5b                   	pop    ebx
c0002faf:	5e                   	pop    esi
c0002fb0:	5f                   	pop    edi
c0002fb1:	c3                   	ret    

c0002fb2 <get_fat>:
c0002fb2:	83 fa 01             	cmp    edx,0x1
c0002fb5:	0f 86 db 01 00 00    	jbe    c0003196 <get_fat+0x1e4>
c0002fbb:	55                   	push   ebp
c0002fbc:	b9 01 00 00 00       	mov    ecx,0x1
c0002fc1:	57                   	push   edi
c0002fc2:	56                   	push   esi
c0002fc3:	53                   	push   ebx
c0002fc4:	83 ec 1c             	sub    esp,0x1c
c0002fc7:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fc9:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fcc:	0f 86 cc 01 00 00    	jbe    c000319e <get_fat+0x1ec>
c0002fd2:	89 c3                	mov    ebx,eax
c0002fd4:	89 d6                	mov    esi,edx
c0002fd6:	8a 07                	mov    al,BYTE PTR [edi]
c0002fd8:	3c 02                	cmp    al,0x2
c0002fda:	0f 84 99 00 00 00    	je     c0003079 <get_fat+0xc7>
c0002fe0:	77 09                	ja     c0002feb <get_fat+0x39>
c0002fe2:	fe c8                	dec    al
c0002fe4:	74 1a                	je     c0003000 <get_fat+0x4e>
c0002fe6:	e9 b3 01 00 00       	jmp    c000319e <get_fat+0x1ec>
c0002feb:	3c 03                	cmp    al,0x3
c0002fed:	0f 84 b5 00 00 00    	je     c00030a8 <get_fat+0xf6>
c0002ff3:	3c 04                	cmp    al,0x4
c0002ff5:	0f 84 e3 00 00 00    	je     c00030de <get_fat+0x12c>
c0002ffb:	e9 9e 01 00 00       	jmp    c000319e <get_fat+0x1ec>
c0003000:	89 d3                	mov    ebx,edx
c0003002:	31 c9                	xor    ecx,ecx
c0003004:	d1 eb                	shr    ebx,1
c0003006:	89 f8                	mov    eax,edi
c0003008:	01 d3                	add    ebx,edx
c000300a:	89 da                	mov    edx,ebx
c000300c:	c1 ea 09             	shr    edx,0x9
c000300f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003012:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003015:	e8 10 f4 ff ff       	call   c000242a <move_window>
c000301a:	85 c0                	test   eax,eax
c000301c:	74 08                	je     c0003026 <get_fat+0x74>
c000301e:	83 c9 ff             	or     ecx,0xffffffff
c0003021:	e9 78 01 00 00       	jmp    c000319e <get_fat+0x1ec>
c0003026:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003029:	31 c9                	xor    ecx,ecx
c000302b:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003031:	89 ea                	mov    edx,ebp
c0003033:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003037:	c1 ea 09             	shr    edx,0x9
c000303a:	89 f8                	mov    eax,edi
c000303c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000303f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003042:	e8 e3 f3 ff ff       	call   c000242a <move_window>
c0003047:	85 c0                	test   eax,eax
c0003049:	75 d3                	jne    c000301e <get_fat+0x6c>
c000304b:	0f b6 c3             	movzx  eax,bl
c000304e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003054:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003059:	c1 e3 08             	shl    ebx,0x8
c000305c:	09 c3                	or     ebx,eax
c000305e:	89 d9                	mov    ecx,ebx
c0003060:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003066:	83 e6 01             	and    esi,0x1
c0003069:	0f 84 2f 01 00 00    	je     c000319e <get_fat+0x1ec>
c000306f:	89 d9                	mov    ecx,ebx
c0003071:	c1 e9 04             	shr    ecx,0x4
c0003074:	e9 25 01 00 00       	jmp    c000319e <get_fat+0x1ec>
c0003079:	31 c9                	xor    ecx,ecx
c000307b:	c1 ea 08             	shr    edx,0x8
c000307e:	89 f8                	mov    eax,edi
c0003080:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003083:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003086:	e8 9f f3 ff ff       	call   c000242a <move_window>
c000308b:	85 c0                	test   eax,eax
c000308d:	75 8f                	jne    c000301e <get_fat+0x6c>
c000308f:	01 f6                	add    esi,esi
c0003091:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003097:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000309b:	e8 ac eb ff ff       	call   c0001c4c <ld_word>
c00030a0:	0f b7 c8             	movzx  ecx,ax
c00030a3:	e9 f6 00 00 00       	jmp    c000319e <get_fat+0x1ec>
c00030a8:	31 c9                	xor    ecx,ecx
c00030aa:	c1 ea 07             	shr    edx,0x7
c00030ad:	89 f8                	mov    eax,edi
c00030af:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030b2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030b5:	e8 70 f3 ff ff       	call   c000242a <move_window>
c00030ba:	85 c0                	test   eax,eax
c00030bc:	0f 85 5c ff ff ff    	jne    c000301e <get_fat+0x6c>
c00030c2:	c1 e6 02             	shl    esi,0x2
c00030c5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030cb:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030cf:	e8 85 eb ff ff       	call   c0001c59 <ld_dword>
c00030d4:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030d9:	e9 b4 00 00 00       	jmp    c0003192 <get_fat+0x1e0>
c00030de:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030e1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030e4:	89 d1                	mov    ecx,edx
c00030e6:	09 c1                	or     ecx,eax
c00030e8:	74 06                	je     c00030f0 <get_fat+0x13e>
c00030ea:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030ee:	75 0f                	jne    c00030ff <get_fat+0x14d>
c00030f0:	b9 01 00 00 00       	mov    ecx,0x1
c00030f5:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030f9:	0f 85 9f 00 00 00    	jne    c000319e <get_fat+0x1ec>
c00030ff:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003103:	89 f5                	mov    ebp,esi
c0003105:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000310a:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000310d:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003110:	80 f9 02             	cmp    cl,0x2
c0003113:	75 35                	jne    c000314a <get_fat+0x198>
c0003115:	83 c0 ff             	add    eax,0xffffffff
c0003118:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000311d:	83 d2 ff             	adc    edx,0xffffffff
c0003120:	31 db                	xor    ebx,ebx
c0003122:	0f ac d0 09          	shrd   eax,edx,0x9
c0003126:	53                   	push   ebx
c0003127:	c1 ea 09             	shr    edx,0x9
c000312a:	51                   	push   ecx
c000312b:	52                   	push   edx
c000312c:	50                   	push   eax
c000312d:	e8 52 43 02 00       	call   c0027484 <__udivdi3>
c0003132:	83 c4 10             	add    esp,0x10
c0003135:	b9 01 00 00 00       	mov    ecx,0x1
c000313a:	39 c5                	cmp    ebp,eax
c000313c:	77 60                	ja     c000319e <get_fat+0x1ec>
c000313e:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003143:	74 59                	je     c000319e <get_fat+0x1ec>
c0003145:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003148:	eb 54                	jmp    c000319e <get_fat+0x1ec>
c000314a:	80 f9 03             	cmp    cl,0x3
c000314d:	75 05                	jne    c0003154 <get_fat+0x1a2>
c000314f:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003152:	77 f1                	ja     c0003145 <get_fat+0x193>
c0003154:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003159:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000315d:	75 3f                	jne    c000319e <get_fat+0x1ec>
c000315f:	31 c9                	xor    ecx,ecx
c0003161:	89 f2                	mov    edx,esi
c0003163:	89 f8                	mov    eax,edi
c0003165:	c1 ea 07             	shr    edx,0x7
c0003168:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000316b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000316e:	e8 b7 f2 ff ff       	call   c000242a <move_window>
c0003173:	85 c0                	test   eax,eax
c0003175:	0f 85 a3 fe ff ff    	jne    c000301e <get_fat+0x6c>
c000317b:	c1 e6 02             	shl    esi,0x2
c000317e:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003184:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003188:	e8 cc ea ff ff       	call   c0001c59 <ld_dword>
c000318d:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003192:	89 c1                	mov    ecx,eax
c0003194:	eb 08                	jmp    c000319e <get_fat+0x1ec>
c0003196:	b9 01 00 00 00       	mov    ecx,0x1
c000319b:	89 c8                	mov    eax,ecx
c000319d:	c3                   	ret    
c000319e:	83 c4 1c             	add    esp,0x1c
c00031a1:	89 c8                	mov    eax,ecx
c00031a3:	5b                   	pop    ebx
c00031a4:	5e                   	pop    esi
c00031a5:	5f                   	pop    edi
c00031a6:	5d                   	pop    ebp
c00031a7:	c3                   	ret    

c00031a8 <dir_sdi>:
c00031a8:	55                   	push   ebp
c00031a9:	57                   	push   edi
c00031aa:	56                   	push   esi
c00031ab:	53                   	push   ebx
c00031ac:	89 c3                	mov    ebx,eax
c00031ae:	83 ec 1c             	sub    esp,0x1c
c00031b1:	8b 38                	mov    edi,DWORD PTR [eax]
c00031b3:	31 c0                	xor    eax,eax
c00031b5:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031b8:	0f 94 c0             	sete   al
c00031bb:	48                   	dec    eax
c00031bc:	25 00 00 20 f0       	and    eax,0xf0200000
c00031c1:	05 00 00 00 10       	add    eax,0x10000000
c00031c6:	39 d0                	cmp    eax,edx
c00031c8:	77 0a                	ja     c00031d4 <dir_sdi+0x2c>
c00031ca:	b8 02 00 00 00       	mov    eax,0x2
c00031cf:	e9 c4 00 00 00       	jmp    c0003298 <dir_sdi+0xf0>
c00031d4:	89 d6                	mov    esi,edx
c00031d6:	f6 c2 1f             	test   dl,0x1f
c00031d9:	75 ef                	jne    c00031ca <dir_sdi+0x22>
c00031db:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031de:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031e1:	85 c9                	test   ecx,ecx
c00031e3:	75 2d                	jne    c0003212 <dir_sdi+0x6a>
c00031e5:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031e8:	77 1b                	ja     c0003205 <dir_sdi+0x5d>
c00031ea:	89 f2                	mov    edx,esi
c00031ec:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031f0:	c1 ea 05             	shr    edx,0x5
c00031f3:	39 c2                	cmp    edx,eax
c00031f5:	73 d3                	jae    c00031ca <dir_sdi+0x22>
c00031f7:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031fa:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031fd:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003200:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003203:	eb 4b                	jmp    c0003250 <dir_sdi+0xa8>
c0003205:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003208:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000320c:	85 c0                	test   eax,eax
c000320e:	74 da                	je     c00031ea <dir_sdi+0x42>
c0003210:	89 c1                	mov    ecx,eax
c0003212:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003216:	c1 e5 09             	shl    ebp,0x9
c0003219:	89 ca                	mov    edx,ecx
c000321b:	39 ee                	cmp    esi,ebp
c000321d:	72 1c                	jb     c000323b <dir_sdi+0x93>
c000321f:	89 d8                	mov    eax,ebx
c0003221:	e8 8c fd ff ff       	call   c0002fb2 <get_fat>
c0003226:	89 c1                	mov    ecx,eax
c0003228:	83 f8 ff             	cmp    eax,0xffffffff
c000322b:	74 66                	je     c0003293 <dir_sdi+0xeb>
c000322d:	83 f8 01             	cmp    eax,0x1
c0003230:	76 98                	jbe    c00031ca <dir_sdi+0x22>
c0003232:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003235:	76 93                	jbe    c00031ca <dir_sdi+0x22>
c0003237:	29 ee                	sub    esi,ebp
c0003239:	eb de                	jmp    c0003219 <dir_sdi+0x71>
c000323b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000323f:	89 f8                	mov    eax,edi
c0003241:	e8 9f ec ff ff       	call   c0001ee5 <clst2sect>
c0003246:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000324a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000324d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003250:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003253:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003256:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003259:	89 d1                	mov    ecx,edx
c000325b:	09 c1                	or     ecx,eax
c000325d:	0f 84 67 ff ff ff    	je     c00031ca <dir_sdi+0x22>
c0003263:	89 f1                	mov    ecx,esi
c0003265:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000326d:	c1 e9 09             	shr    ecx,0x9
c0003270:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003278:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000327c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000327f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003285:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003288:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000328c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000328f:	31 c0                	xor    eax,eax
c0003291:	eb 05                	jmp    c0003298 <dir_sdi+0xf0>
c0003293:	b8 01 00 00 00       	mov    eax,0x1
c0003298:	83 c4 1c             	add    esp,0x1c
c000329b:	5b                   	pop    ebx
c000329c:	5e                   	pop    esi
c000329d:	5f                   	pop    edi
c000329e:	5d                   	pop    ebp
c000329f:	c3                   	ret    

c00032a0 <create_chain>:
c00032a0:	55                   	push   ebp
c00032a1:	89 c5                	mov    ebp,eax
c00032a3:	57                   	push   edi
c00032a4:	56                   	push   esi
c00032a5:	53                   	push   ebx
c00032a6:	83 ec 1c             	sub    esp,0x1c
c00032a9:	85 d2                	test   edx,edx
c00032ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032af:	8b 30                	mov    esi,DWORD PTR [eax]
c00032b1:	75 0e                	jne    c00032c1 <create_chain+0x21>
c00032b3:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032b6:	85 ff                	test   edi,edi
c00032b8:	74 39                	je     c00032f3 <create_chain+0x53>
c00032ba:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032bd:	77 39                	ja     c00032f8 <create_chain+0x58>
c00032bf:	eb 32                	jmp    c00032f3 <create_chain+0x53>
c00032c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032c5:	e8 e8 fc ff ff       	call   c0002fb2 <get_fat>
c00032ca:	89 c3                	mov    ebx,eax
c00032cc:	83 f8 01             	cmp    eax,0x1
c00032cf:	77 0a                	ja     c00032db <create_chain+0x3b>
c00032d1:	bb 01 00 00 00       	mov    ebx,0x1
c00032d6:	e9 ba 01 00 00       	jmp    c0003495 <create_chain+0x1f5>
c00032db:	83 f8 ff             	cmp    eax,0xffffffff
c00032de:	0f 84 62 01 00 00    	je     c0003446 <create_chain+0x1a6>
c00032e4:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032e7:	0f 87 a8 01 00 00    	ja     c0003495 <create_chain+0x1f5>
c00032ed:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032f1:	eb 05                	jmp    c00032f8 <create_chain+0x58>
c00032f3:	bf 01 00 00 00       	mov    edi,0x1
c00032f8:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032fc:	75 07                	jne    c0003305 <create_chain+0x65>
c00032fe:	31 db                	xor    ebx,ebx
c0003300:	e9 90 01 00 00       	jmp    c0003495 <create_chain+0x1f5>
c0003305:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003308:	75 74                	jne    c000337e <create_chain+0xde>
c000330a:	b9 01 00 00 00       	mov    ecx,0x1
c000330f:	89 fa                	mov    edx,edi
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 2d f9 ff ff       	call   c0002c45 <find_bitmap>
c0003318:	89 c3                	mov    ebx,eax
c000331a:	8d 40 ff             	lea    eax,[eax-0x1]
c000331d:	83 f8 fd             	cmp    eax,0xfffffffd
c0003320:	0f 87 6f 01 00 00    	ja     c0003495 <create_chain+0x1f5>
c0003326:	83 ec 0c             	sub    esp,0xc
c0003329:	b9 01 00 00 00       	mov    ecx,0x1
c000332e:	6a 01                	push   0x1
c0003330:	89 da                	mov    edx,ebx
c0003332:	89 f0                	mov    eax,esi
c0003334:	e8 bf f9 ff ff       	call   c0002cf8 <change_bitmap>
c0003339:	83 c4 10             	add    esp,0x10
c000333c:	83 f8 02             	cmp    eax,0x2
c000333f:	74 90                	je     c00032d1 <create_chain+0x31>
c0003341:	83 f8 01             	cmp    eax,0x1
c0003344:	0f 84 fc 00 00 00    	je     c0003446 <create_chain+0x1a6>
c000334a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000334f:	75 09                	jne    c000335a <create_chain+0xba>
c0003351:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003355:	e9 0c 01 00 00       	jmp    c0003466 <create_chain+0x1c6>
c000335a:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000335e:	0f 85 e7 00 00 00    	jne    c000344b <create_chain+0x1ab>
c0003364:	8d 57 01             	lea    edx,[edi+0x1]
c0003367:	39 da                	cmp    edx,ebx
c0003369:	0f 84 f7 00 00 00    	je     c0003466 <create_chain+0x1c6>
c000336f:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003372:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003376:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003379:	e9 cd 00 00 00       	jmp    c000344b <create_chain+0x1ab>
c000337e:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003382:	75 41                	jne    c00033c5 <create_chain+0x125>
c0003384:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003387:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000338a:	77 05                	ja     c0003391 <create_chain+0xf1>
c000338c:	bb 02 00 00 00       	mov    ebx,0x2
c0003391:	89 da                	mov    edx,ebx
c0003393:	89 e8                	mov    eax,ebp
c0003395:	e8 18 fc ff ff       	call   c0002fb2 <get_fat>
c000339a:	83 f8 01             	cmp    eax,0x1
c000339d:	0f 84 2e ff ff ff    	je     c00032d1 <create_chain+0x31>
c00033a3:	83 f8 ff             	cmp    eax,0xffffffff
c00033a6:	0f 84 9a 00 00 00    	je     c0003446 <create_chain+0x1a6>
c00033ac:	85 c0                	test   eax,eax
c00033ae:	74 11                	je     c00033c1 <create_chain+0x121>
c00033b0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033b3:	83 f8 01             	cmp    eax,0x1
c00033b6:	76 0d                	jbe    c00033c5 <create_chain+0x125>
c00033b8:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033bb:	76 08                	jbe    c00033c5 <create_chain+0x125>
c00033bd:	89 c7                	mov    edi,eax
c00033bf:	eb 04                	jmp    c00033c5 <create_chain+0x125>
c00033c1:	85 db                	test   ebx,ebx
c00033c3:	75 38                	jne    c00033fd <create_chain+0x15d>
c00033c5:	89 fb                	mov    ebx,edi
c00033c7:	43                   	inc    ebx
c00033c8:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033cb:	77 0e                	ja     c00033db <create_chain+0x13b>
c00033cd:	83 ff 01             	cmp    edi,0x1
c00033d0:	0f 86 28 ff ff ff    	jbe    c00032fe <create_chain+0x5e>
c00033d6:	bb 02 00 00 00       	mov    ebx,0x2
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 e8                	mov    eax,ebp
c00033df:	e8 ce fb ff ff       	call   c0002fb2 <get_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	74 15                	je     c00033fd <create_chain+0x15d>
c00033e8:	83 f8 01             	cmp    eax,0x1
c00033eb:	0f 84 e0 fe ff ff    	je     c00032d1 <create_chain+0x31>
c00033f1:	40                   	inc    eax
c00033f2:	74 52                	je     c0003446 <create_chain+0x1a6>
c00033f4:	39 fb                	cmp    ebx,edi
c00033f6:	75 cf                	jne    c00033c7 <create_chain+0x127>
c00033f8:	e9 01 ff ff ff       	jmp    c00032fe <create_chain+0x5e>
c00033fd:	83 c9 ff             	or     ecx,0xffffffff
c0003400:	89 da                	mov    edx,ebx
c0003402:	89 f0                	mov    eax,esi
c0003404:	e8 a4 f9 ff ff       	call   c0002dad <put_fat>
c0003409:	85 c0                	test   eax,eax
c000340b:	75 32                	jne    c000343f <create_chain+0x19f>
c000340d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003412:	74 11                	je     c0003425 <create_chain+0x185>
c0003414:	89 d9                	mov    ecx,ebx
c0003416:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000341a:	89 f0                	mov    eax,esi
c000341c:	e8 8c f9 ff ff       	call   c0002dad <put_fat>
c0003421:	85 c0                	test   eax,eax
c0003423:	75 1a                	jne    c000343f <create_chain+0x19f>
c0003425:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003428:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000342b:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000342e:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003431:	39 d0                	cmp    eax,edx
c0003433:	77 04                	ja     c0003439 <create_chain+0x199>
c0003435:	48                   	dec    eax
c0003436:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003439:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000343d:	eb 56                	jmp    c0003495 <create_chain+0x1f5>
c000343f:	48                   	dec    eax
c0003440:	0f 85 8b fe ff ff    	jne    c00032d1 <create_chain+0x31>
c0003446:	83 cb ff             	or     ebx,0xffffffff
c0003449:	eb 4a                	jmp    c0003495 <create_chain+0x1f5>
c000344b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000344f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003452:	41                   	inc    ecx
c0003453:	39 d9                	cmp    ecx,ebx
c0003455:	75 19                	jne    c0003470 <create_chain+0x1d0>
c0003457:	b9 02 00 00 00       	mov    ecx,0x2
c000345c:	85 d2                	test   edx,edx
c000345e:	74 03                	je     c0003463 <create_chain+0x1c3>
c0003460:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003463:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003466:	85 c0                	test   eax,eax
c0003468:	0f 85 63 fe ff ff    	jne    c00032d1 <create_chain+0x31>
c000346e:	eb b5                	jmp    c0003425 <create_chain+0x185>
c0003470:	85 d2                	test   edx,edx
c0003472:	75 07                	jne    c000347b <create_chain+0x1db>
c0003474:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000347b:	89 d9                	mov    ecx,ebx
c000347d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003481:	89 e8                	mov    eax,ebp
c0003483:	e8 bb fa ff ff       	call   c0002f43 <fill_last_frag>
c0003488:	85 c0                	test   eax,eax
c000348a:	75 b3                	jne    c000343f <create_chain+0x19f>
c000348c:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003493:	eb 90                	jmp    c0003425 <create_chain+0x185>
c0003495:	83 c4 1c             	add    esp,0x1c
c0003498:	89 d8                	mov    eax,ebx
c000349a:	5b                   	pop    ebx
c000349b:	5e                   	pop    esi
c000349c:	5f                   	pop    edi
c000349d:	5d                   	pop    ebp
c000349e:	c3                   	ret    

c000349f <remove_chain>:
c000349f:	55                   	push   ebp
c00034a0:	57                   	push   edi
c00034a1:	56                   	push   esi
c00034a2:	53                   	push   ebx
c00034a3:	83 ec 1c             	sub    esp,0x1c
c00034a6:	83 fa 01             	cmp    edx,0x1
c00034a9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034ad:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034af:	77 0a                	ja     c00034bb <remove_chain+0x1c>
c00034b1:	b8 02 00 00 00       	mov    eax,0x2
c00034b6:	e9 24 01 00 00       	jmp    c00035df <remove_chain+0x140>
c00034bb:	89 d6                	mov    esi,edx
c00034bd:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034c0:	76 ef                	jbe    c00034b1 <remove_chain+0x12>
c00034c2:	89 c7                	mov    edi,eax
c00034c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034c9:	75 06                	jne    c00034d1 <remove_chain+0x32>
c00034cb:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034cf:	eb 54                	jmp    c0003525 <remove_chain+0x86>
c00034d1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034d4:	75 06                	jne    c00034dc <remove_chain+0x3d>
c00034d6:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034da:	74 ef                	je     c00034cb <remove_chain+0x2c>
c00034dc:	83 c9 ff             	or     ecx,0xffffffff
c00034df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034e3:	89 d8                	mov    eax,ebx
c00034e5:	e8 c3 f8 ff ff       	call   c0002dad <put_fat>
c00034ea:	85 c0                	test   eax,eax
c00034ec:	74 dd                	je     c00034cb <remove_chain+0x2c>
c00034ee:	e9 ec 00 00 00       	jmp    c00035df <remove_chain+0x140>
c00034f3:	83 f8 01             	cmp    eax,0x1
c00034f6:	74 b9                	je     c00034b1 <remove_chain+0x12>
c00034f8:	83 f8 ff             	cmp    eax,0xffffffff
c00034fb:	74 6d                	je     c000356a <remove_chain+0xcb>
c00034fd:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003500:	75 6f                	jne    c0003571 <remove_chain+0xd2>
c0003502:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003505:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003508:	8d 51 fe             	lea    edx,[ecx-0x2]
c000350b:	39 d0                	cmp    eax,edx
c000350d:	73 08                	jae    c0003517 <remove_chain+0x78>
c000350f:	40                   	inc    eax
c0003510:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003514:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003517:	8d 4e 01             	lea    ecx,[esi+0x1]
c000351a:	39 e9                	cmp    ecx,ebp
c000351c:	75 64                	jne    c0003582 <remove_chain+0xe3>
c000351e:	89 ee                	mov    esi,ebp
c0003520:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003523:	76 0f                	jbe    c0003534 <remove_chain+0x95>
c0003525:	89 f2                	mov    edx,esi
c0003527:	89 f8                	mov    eax,edi
c0003529:	e8 84 fa ff ff       	call   c0002fb2 <get_fat>
c000352e:	89 c5                	mov    ebp,eax
c0003530:	85 c0                	test   eax,eax
c0003532:	75 bf                	jne    c00034f3 <remove_chain+0x54>
c0003534:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003537:	0f 85 a0 00 00 00    	jne    c00035dd <remove_chain+0x13e>
c000353d:	eb 6c                	jmp    c00035ab <remove_chain+0x10c>
c000353f:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003542:	84 c0                	test   al,al
c0003544:	75 7d                	jne    c00035c3 <remove_chain+0x124>
c0003546:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003549:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000354d:	0f 84 86 00 00 00    	je     c00035d9 <remove_chain+0x13a>
c0003553:	89 da                	mov    edx,ebx
c0003555:	89 f8                	mov    eax,edi
c0003557:	e8 56 fa ff ff       	call   c0002fb2 <get_fat>
c000355c:	83 f8 01             	cmp    eax,0x1
c000355f:	0f 86 4c ff ff ff    	jbe    c00034b1 <remove_chain+0x12>
c0003565:	83 f8 ff             	cmp    eax,0xffffffff
c0003568:	75 4e                	jne    c00035b8 <remove_chain+0x119>
c000356a:	b8 01 00 00 00       	mov    eax,0x1
c000356f:	eb 6e                	jmp    c00035df <remove_chain+0x140>
c0003571:	31 c9                	xor    ecx,ecx
c0003573:	89 f2                	mov    edx,esi
c0003575:	89 d8                	mov    eax,ebx
c0003577:	e8 31 f8 ff ff       	call   c0002dad <put_fat>
c000357c:	85 c0                	test   eax,eax
c000357e:	74 82                	je     c0003502 <remove_chain+0x63>
c0003580:	eb 5d                	jmp    c00035df <remove_chain+0x140>
c0003582:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003585:	75 1b                	jne    c00035a2 <remove_chain+0x103>
c0003587:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000358b:	89 d8                	mov    eax,ebx
c000358d:	83 ec 0c             	sub    esp,0xc
c0003590:	6a 00                	push   0x0
c0003592:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003596:	e8 5d f7 ff ff       	call   c0002cf8 <change_bitmap>
c000359b:	83 c4 10             	add    esp,0x10
c000359e:	85 c0                	test   eax,eax
c00035a0:	75 3d                	jne    c00035df <remove_chain+0x140>
c00035a2:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035a6:	e9 73 ff ff ff       	jmp    c000351e <remove_chain+0x7f>
c00035ab:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035b0:	75 8d                	jne    c000353f <remove_chain+0xa0>
c00035b2:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035b6:	eb 25                	jmp    c00035dd <remove_chain+0x13e>
c00035b8:	8d 53 01             	lea    edx,[ebx+0x1]
c00035bb:	89 c3                	mov    ebx,eax
c00035bd:	39 c2                	cmp    edx,eax
c00035bf:	74 88                	je     c0003549 <remove_chain+0xaa>
c00035c1:	eb 1a                	jmp    c00035dd <remove_chain+0x13e>
c00035c3:	3c 03                	cmp    al,0x3
c00035c5:	75 16                	jne    c00035dd <remove_chain+0x13e>
c00035c7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035ca:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ce:	77 0d                	ja     c00035dd <remove_chain+0x13e>
c00035d0:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035d3:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035d7:	72 04                	jb     c00035dd <remove_chain+0x13e>
c00035d9:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035dd:	31 c0                	xor    eax,eax
c00035df:	83 c4 1c             	add    esp,0x1c
c00035e2:	5b                   	pop    ebx
c00035e3:	5e                   	pop    esi
c00035e4:	5f                   	pop    edi
c00035e5:	5d                   	pop    ebp
c00035e6:	c3                   	ret    

c00035e7 <dir_clear>:
c00035e7:	55                   	push   ebp
c00035e8:	57                   	push   edi
c00035e9:	56                   	push   esi
c00035ea:	89 c6                	mov    esi,eax
c00035ec:	53                   	push   ebx
c00035ed:	83 ec 1c             	sub    esp,0x1c
c00035f0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035f4:	e8 9d ed ff ff       	call   c0002396 <sync_window>
c00035f9:	85 c0                	test   eax,eax
c00035fb:	0f 85 de 00 00 00    	jne    c00036df <dir_clear+0xf8>
c0003601:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003605:	89 f0                	mov    eax,esi
c0003607:	8d 6e 54             	lea    ebp,[esi+0x54]
c000360a:	e8 d6 e8 ff ff       	call   c0001ee5 <clst2sect>
c000360f:	b9 00 02 00 00       	mov    ecx,0x200
c0003614:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003618:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361c:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000361f:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003622:	89 e8                	mov    eax,ebp
c0003624:	31 d2                	xor    edx,edx
c0003626:	e8 b5 e6 ff ff       	call   c0001ce0 <mem_set>
c000362b:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000362f:	c1 e3 09             	shl    ebx,0x9
c0003632:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003638:	76 1f                	jbe    c0003659 <dir_clear+0x72>
c000363a:	bb 00 80 00 00       	mov    ebx,0x8000
c000363f:	eb 18                	jmp    c0003659 <dir_clear+0x72>
c0003641:	83 ec 0c             	sub    esp,0xc
c0003644:	53                   	push   ebx
c0003645:	e8 35 4e 00 00       	call   c000847f <ff_memalloc>
c000364a:	83 c4 10             	add    esp,0x10
c000364d:	89 c7                	mov    edi,eax
c000364f:	85 c0                	test   eax,eax
c0003651:	0f 85 8f 00 00 00    	jne    c00036e6 <dir_clear+0xff>
c0003657:	d1 eb                	shr    ebx,1
c0003659:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000365f:	77 e0                	ja     c0003641 <dir_clear+0x5a>
c0003661:	31 db                	xor    ebx,ebx
c0003663:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003667:	39 d8                	cmp    eax,ebx
c0003669:	76 66                	jbe    c00036d1 <dir_clear+0xea>
c000366b:	83 ec 0c             	sub    esp,0xc
c000366e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003672:	6a 01                	push   0x1
c0003674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000367c:	55                   	push   ebp
c000367d:	50                   	push   eax
c000367e:	e8 94 e5 ff ff       	call   c0001c17 <disk_write>
c0003683:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003688:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000368d:	83 c4 20             	add    esp,0x20
c0003690:	85 c0                	test   eax,eax
c0003692:	75 3d                	jne    c00036d1 <dir_clear+0xea>
c0003694:	43                   	inc    ebx
c0003695:	eb cc                	jmp    c0003663 <dir_clear+0x7c>
c0003697:	83 ec 0c             	sub    esp,0xc
c000369a:	31 d2                	xor    edx,edx
c000369c:	55                   	push   ebp
c000369d:	89 d8                	mov    eax,ebx
c000369f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036a3:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036a7:	52                   	push   edx
c00036a8:	50                   	push   eax
c00036a9:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036ad:	57                   	push   edi
c00036ae:	50                   	push   eax
c00036af:	e8 63 e5 ff ff       	call   c0001c17 <disk_write>
c00036b4:	83 c4 20             	add    esp,0x20
c00036b7:	85 c0                	test   eax,eax
c00036b9:	75 0a                	jne    c00036c5 <dir_clear+0xde>
c00036bb:	01 eb                	add    ebx,ebp
c00036bd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036c1:	39 d8                	cmp    eax,ebx
c00036c3:	77 d2                	ja     c0003697 <dir_clear+0xb0>
c00036c5:	83 ec 0c             	sub    esp,0xc
c00036c8:	57                   	push   edi
c00036c9:	e8 c7 4d 00 00       	call   c0008495 <ff_memfree>
c00036ce:	83 c4 10             	add    esp,0x10
c00036d1:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d5:	39 d8                	cmp    eax,ebx
c00036d7:	0f 95 c0             	setne  al
c00036da:	0f b6 c0             	movzx  eax,al
c00036dd:	eb 19                	jmp    c00036f8 <dir_clear+0x111>
c00036df:	b8 01 00 00 00       	mov    eax,0x1
c00036e4:	eb 12                	jmp    c00036f8 <dir_clear+0x111>
c00036e6:	89 d9                	mov    ecx,ebx
c00036e8:	31 d2                	xor    edx,edx
c00036ea:	c1 eb 09             	shr    ebx,0x9
c00036ed:	e8 ee e5 ff ff       	call   c0001ce0 <mem_set>
c00036f2:	89 dd                	mov    ebp,ebx
c00036f4:	31 db                	xor    ebx,ebx
c00036f6:	eb c5                	jmp    c00036bd <dir_clear+0xd6>
c00036f8:	83 c4 1c             	add    esp,0x1c
c00036fb:	5b                   	pop    ebx
c00036fc:	5e                   	pop    esi
c00036fd:	5f                   	pop    edi
c00036fe:	5d                   	pop    ebp
c00036ff:	c3                   	ret    

c0003700 <dir_next>:
c0003700:	55                   	push   ebp
c0003701:	57                   	push   edi
c0003702:	56                   	push   esi
c0003703:	53                   	push   ebx
c0003704:	89 c3                	mov    ebx,eax
c0003706:	83 ec 1c             	sub    esp,0x1c
c0003709:	8b 28                	mov    ebp,DWORD PTR [eax]
c000370b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000370f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003712:	8d 78 20             	lea    edi,[eax+0x20]
c0003715:	31 c0                	xor    eax,eax
c0003717:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000371b:	0f 94 c0             	sete   al
c000371e:	48                   	dec    eax
c000371f:	25 00 00 20 f0       	and    eax,0xf0200000
c0003724:	05 00 00 00 10       	add    eax,0x10000000
c0003729:	39 f8                	cmp    eax,edi
c000372b:	77 0e                	ja     c000373b <dir_next+0x3b>
c000372d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003734:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000373b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000373e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003741:	b8 04 00 00 00       	mov    eax,0x4
c0003746:	89 ce                	mov    esi,ecx
c0003748:	09 d6                	or     esi,edx
c000374a:	0f 84 da 00 00 00    	je     c000382a <dir_next+0x12a>
c0003750:	89 f8                	mov    eax,edi
c0003752:	25 ff 01 00 00       	and    eax,0x1ff
c0003757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000375b:	0f 85 b9 00 00 00    	jne    c000381a <dir_next+0x11a>
c0003761:	83 c2 01             	add    edx,0x1
c0003764:	83 d1 00             	adc    ecx,0x0
c0003767:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000376a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000376d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003770:	85 d2                	test   edx,edx
c0003772:	75 29                	jne    c000379d <dir_next+0x9d>
c0003774:	89 fa                	mov    edx,edi
c0003776:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000377a:	c1 ea 05             	shr    edx,0x5
c000377d:	39 c2                	cmp    edx,eax
c000377f:	0f 82 95 00 00 00    	jb     c000381a <dir_next+0x11a>
c0003785:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000378c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003793:	b8 04 00 00 00       	mov    eax,0x4
c0003798:	e9 8d 00 00 00       	jmp    c000382a <dir_next+0x12a>
c000379d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037a1:	89 f9                	mov    ecx,edi
c00037a3:	48                   	dec    eax
c00037a4:	c1 e9 09             	shr    ecx,0x9
c00037a7:	85 c8                	test   eax,ecx
c00037a9:	75 6f                	jne    c000381a <dir_next+0x11a>
c00037ab:	89 d8                	mov    eax,ebx
c00037ad:	e8 00 f8 ff ff       	call   c0002fb2 <get_fat>
c00037b2:	89 c6                	mov    esi,eax
c00037b4:	83 f8 01             	cmp    eax,0x1
c00037b7:	77 07                	ja     c00037c0 <dir_next+0xc0>
c00037b9:	b8 02 00 00 00       	mov    eax,0x2
c00037be:	eb 6a                	jmp    c000382a <dir_next+0x12a>
c00037c0:	83 f8 ff             	cmp    eax,0xffffffff
c00037c3:	75 07                	jne    c00037cc <dir_next+0xcc>
c00037c5:	b8 01 00 00 00       	mov    eax,0x1
c00037ca:	eb 5e                	jmp    c000382a <dir_next+0x12a>
c00037cc:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037cf:	77 37                	ja     c0003808 <dir_next+0x108>
c00037d1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d6:	74 ad                	je     c0003785 <dir_next+0x85>
c00037d8:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037db:	89 d8                	mov    eax,ebx
c00037dd:	e8 be fa ff ff       	call   c00032a0 <create_chain>
c00037e2:	89 c6                	mov    esi,eax
c00037e4:	b8 07 00 00 00       	mov    eax,0x7
c00037e9:	85 f6                	test   esi,esi
c00037eb:	74 3d                	je     c000382a <dir_next+0x12a>
c00037ed:	83 fe 01             	cmp    esi,0x1
c00037f0:	74 c7                	je     c00037b9 <dir_next+0xb9>
c00037f2:	83 fe ff             	cmp    esi,0xffffffff
c00037f5:	74 ce                	je     c00037c5 <dir_next+0xc5>
c00037f7:	89 f2                	mov    edx,esi
c00037f9:	89 e8                	mov    eax,ebp
c00037fb:	e8 e7 fd ff ff       	call   c00035e7 <dir_clear>
c0003800:	85 c0                	test   eax,eax
c0003802:	75 c1                	jne    c00037c5 <dir_next+0xc5>
c0003804:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003808:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000380b:	89 f2                	mov    edx,esi
c000380d:	89 e8                	mov    eax,ebp
c000380f:	e8 d1 e6 ff ff       	call   c0001ee5 <clst2sect>
c0003814:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003817:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000381a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000381e:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003821:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003825:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003828:	31 c0                	xor    eax,eax
c000382a:	83 c4 1c             	add    esp,0x1c
c000382d:	5b                   	pop    ebx
c000382e:	5e                   	pop    esi
c000382f:	5f                   	pop    edi
c0003830:	5d                   	pop    ebp
c0003831:	c3                   	ret    

c0003832 <load_xdir>:
c0003832:	55                   	push   ebp
c0003833:	57                   	push   edi
c0003834:	56                   	push   esi
c0003835:	89 c6                	mov    esi,eax
c0003837:	53                   	push   ebx
c0003838:	83 ec 1c             	sub    esp,0x1c
c000383b:	8b 00                	mov    eax,DWORD PTR [eax]
c000383d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003840:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003843:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003846:	e8 df eb ff ff       	call   c000242a <move_window>
c000384b:	89 c3                	mov    ebx,eax
c000384d:	85 c0                	test   eax,eax
c000384f:	0f 85 0c 01 00 00    	jne    c0003961 <load_xdir+0x12f>
c0003855:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003858:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000385b:	0f 85 fb 00 00 00    	jne    c000395c <load_xdir+0x12a>
c0003861:	89 f8                	mov    eax,edi
c0003863:	b9 20 00 00 00       	mov    ecx,0x20
c0003868:	e8 5e e4 ff ff       	call   c0001ccb <mem_cpy>
c000386d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003871:	40                   	inc    eax
c0003872:	c1 e0 05             	shl    eax,0x5
c0003875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003879:	83 e8 60             	sub    eax,0x60
c000387c:	3d 00 02 00 00       	cmp    eax,0x200
c0003881:	0f 87 d5 00 00 00    	ja     c000395c <load_xdir+0x12a>
c0003887:	31 d2                	xor    edx,edx
c0003889:	89 f0                	mov    eax,esi
c000388b:	e8 70 fe ff ff       	call   c0003700 <dir_next>
c0003890:	89 c3                	mov    ebx,eax
c0003892:	83 f8 04             	cmp    eax,0x4
c0003895:	0f 84 c1 00 00 00    	je     c000395c <load_xdir+0x12a>
c000389b:	85 c0                	test   eax,eax
c000389d:	0f 85 be 00 00 00    	jne    c0003961 <load_xdir+0x12f>
c00038a3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038a6:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00038ab:	e8 7a eb ff ff       	call   c000242a <move_window>
c00038b0:	89 c3                	mov    ebx,eax
c00038b2:	85 c0                	test   eax,eax
c00038b4:	0f 85 a7 00 00 00    	jne    c0003961 <load_xdir+0x12f>
c00038ba:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038bd:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038c0:	0f 85 96 00 00 00    	jne    c000395c <load_xdir+0x12a>
c00038c6:	8d 47 20             	lea    eax,[edi+0x20]
c00038c9:	b9 20 00 00 00       	mov    ecx,0x20
c00038ce:	e8 f8 e3 ff ff       	call   c0001ccb <mem_cpy>
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00038de:	83 c0 2c             	add    eax,0x2c
c00038e1:	f7 f1                	div    ecx
c00038e3:	c1 e0 05             	shl    eax,0x5
c00038e6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ea:	77 70                	ja     c000395c <load_xdir+0x12a>
c00038ec:	bd 40 00 00 00       	mov    ebp,0x40
c00038f1:	31 d2                	xor    edx,edx
c00038f3:	89 f0                	mov    eax,esi
c00038f5:	e8 06 fe ff ff       	call   c0003700 <dir_next>
c00038fa:	89 c3                	mov    ebx,eax
c00038fc:	83 f8 04             	cmp    eax,0x4
c00038ff:	74 5b                	je     c000395c <load_xdir+0x12a>
c0003901:	85 c0                	test   eax,eax
c0003903:	75 5c                	jne    c0003961 <load_xdir+0x12f>
c0003905:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003908:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000390b:	8b 06                	mov    eax,DWORD PTR [esi]
c000390d:	e8 18 eb ff ff       	call   c000242a <move_window>
c0003912:	89 c3                	mov    ebx,eax
c0003914:	85 c0                	test   eax,eax
c0003916:	75 49                	jne    c0003961 <load_xdir+0x12f>
c0003918:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000391b:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000391e:	75 3c                	jne    c000395c <load_xdir+0x12a>
c0003920:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003926:	77 0d                	ja     c0003935 <load_xdir+0x103>
c0003928:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000392b:	b9 20 00 00 00       	mov    ecx,0x20
c0003930:	e8 96 e3 ff ff       	call   c0001ccb <mem_cpy>
c0003935:	83 c5 20             	add    ebp,0x20
c0003938:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000393c:	77 b3                	ja     c00038f1 <load_xdir+0xbf>
c000393e:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003944:	77 1b                	ja     c0003961 <load_xdir+0x12f>
c0003946:	89 f8                	mov    eax,edi
c0003948:	e8 cd e7 ff ff       	call   c000211a <xdir_sum>
c000394d:	89 c1                	mov    ecx,eax
c000394f:	8d 47 02             	lea    eax,[edi+0x2]
c0003952:	e8 f5 e2 ff ff       	call   c0001c4c <ld_word>
c0003957:	66 39 c1             	cmp    cx,ax
c000395a:	74 05                	je     c0003961 <load_xdir+0x12f>
c000395c:	bb 02 00 00 00       	mov    ebx,0x2
c0003961:	83 c4 1c             	add    esp,0x1c
c0003964:	89 d8                	mov    eax,ebx
c0003966:	5b                   	pop    ebx
c0003967:	5e                   	pop    esi
c0003968:	5f                   	pop    edi
c0003969:	5d                   	pop    ebp
c000396a:	c3                   	ret    

c000396b <load_obj_xdir>:
c000396b:	53                   	push   ebx
c000396c:	89 c3                	mov    ebx,eax
c000396e:	83 ec 08             	sub    esp,0x8
c0003971:	8b 02                	mov    eax,DWORD PTR [edx]
c0003973:	89 03                	mov    DWORD PTR [ebx],eax
c0003975:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003978:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000397b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000397e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003981:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003984:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000398b:	30 c0                	xor    al,al
c000398d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003994:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003997:	89 d8                	mov    eax,ebx
c0003999:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000399c:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000399f:	e8 04 f8 ff ff       	call   c00031a8 <dir_sdi>
c00039a4:	85 c0                	test   eax,eax
c00039a6:	75 0b                	jne    c00039b3 <load_obj_xdir+0x48>
c00039a8:	89 d8                	mov    eax,ebx
c00039aa:	83 c4 08             	add    esp,0x8
c00039ad:	5b                   	pop    ebx
c00039ae:	e9 7f fe ff ff       	jmp    c0003832 <load_xdir>
c00039b3:	83 c4 08             	add    esp,0x8
c00039b6:	5b                   	pop    ebx
c00039b7:	c3                   	ret    

c00039b8 <dir_read>:
c00039b8:	55                   	push   ebp
c00039b9:	bd 04 00 00 00       	mov    ebp,0x4
c00039be:	57                   	push   edi
c00039bf:	56                   	push   esi
c00039c0:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c5:	53                   	push   ebx
c00039c6:	89 c3                	mov    ebx,eax
c00039c8:	83 ec 1c             	sub    esp,0x1c
c00039cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039cf:	8b 38                	mov    edi,DWORD PTR [eax]
c00039d1:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039dc:	89 c8                	mov    eax,ecx
c00039de:	09 d0                	or     eax,edx
c00039e0:	0f 84 25 01 00 00    	je     c0003b0b <dir_read+0x153>
c00039e6:	89 f8                	mov    eax,edi
c00039e8:	e8 3d ea ff ff       	call   c000242a <move_window>
c00039ed:	89 c5                	mov    ebp,eax
c00039ef:	85 c0                	test   eax,eax
c00039f1:	0f 85 23 01 00 00    	jne    c0003b1a <dir_read+0x162>
c00039f7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039fa:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039fc:	84 c9                	test   cl,cl
c00039fe:	0f 84 11 01 00 00    	je     c0003b15 <dir_read+0x15d>
c0003a04:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a07:	75 48                	jne    c0003a51 <dir_read+0x99>
c0003a09:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a0e:	74 10                	je     c0003a20 <dir_read+0x68>
c0003a10:	80 f9 83             	cmp    cl,0x83
c0003a13:	0f 85 dd 00 00 00    	jne    c0003af6 <dir_read+0x13e>
c0003a19:	31 ed                	xor    ebp,ebp
c0003a1b:	e9 08 01 00 00       	jmp    c0003b28 <dir_read+0x170>
c0003a20:	80 f9 85             	cmp    cl,0x85
c0003a23:	0f 85 cd 00 00 00    	jne    c0003af6 <dir_read+0x13e>
c0003a29:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a2c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a2f:	89 d8                	mov    eax,ebx
c0003a31:	e8 fc fd ff ff       	call   c0003832 <load_xdir>
c0003a36:	89 c5                	mov    ebp,eax
c0003a38:	85 c0                	test   eax,eax
c0003a3a:	0f 85 da 00 00 00    	jne    c0003b1a <dir_read+0x162>
c0003a40:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a43:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a46:	83 e0 3f             	and    eax,0x3f
c0003a49:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a4c:	e9 d7 00 00 00       	jmp    c0003b28 <dir_read+0x170>
c0003a51:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a54:	83 e0 3f             	and    eax,0x3f
c0003a57:	80 f9 2e             	cmp    cl,0x2e
c0003a5a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	0f 84 8a 00 00 00    	je     c0003af1 <dir_read+0x139>
c0003a67:	80 f9 e5             	cmp    cl,0xe5
c0003a6a:	0f 84 81 00 00 00    	je     c0003af1 <dir_read+0x139>
c0003a70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a74:	83 e0 1f             	and    eax,0x1f
c0003a77:	83 f8 08             	cmp    eax,0x8
c0003a7a:	0f 94 c0             	sete   al
c0003a7d:	0f b6 c0             	movzx  eax,al
c0003a80:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a84:	75 6b                	jne    c0003af1 <dir_read+0x139>
c0003a86:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a8b:	75 44                	jne    c0003ad1 <dir_read+0x119>
c0003a8d:	f6 c1 40             	test   cl,0x40
c0003a90:	74 12                	je     c0003aa4 <dir_read+0xec>
c0003a92:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a95:	83 e1 bf             	and    ecx,0xffffffbf
c0003a98:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a9c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a9f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003aa2:	eb 06                	jmp    c0003aaa <dir_read+0xf2>
c0003aa4:	89 f0                	mov    eax,esi
c0003aa6:	38 c8                	cmp    al,cl
c0003aa8:	75 47                	jne    c0003af1 <dir_read+0x139>
c0003aaa:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003aae:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ab3:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003ab6:	75 3e                	jne    c0003af6 <dir_read+0x13e>
c0003ab8:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003abc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003abf:	e8 8a e4 ff ff       	call   c0001f4e <pick_lfn>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	74 2e                	je     c0003af6 <dir_read+0x13e>
c0003ac8:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003acc:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003acf:	eb 25                	jmp    c0003af6 <dir_read+0x13e>
c0003ad1:	89 f0                	mov    eax,esi
c0003ad3:	84 c0                	test   al,al
c0003ad5:	75 11                	jne    c0003ae8 <dir_read+0x130>
c0003ad7:	89 d0                	mov    eax,edx
c0003ad9:	e8 2a e6 ff ff       	call   c0002108 <sum_sfn>
c0003ade:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003ae2:	0f 84 31 ff ff ff    	je     c0003a19 <dir_read+0x61>
c0003ae8:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aef:	eb 37                	jmp    c0003b28 <dir_read+0x170>
c0003af1:	be ff ff ff ff       	mov    esi,0xffffffff
c0003af6:	31 d2                	xor    edx,edx
c0003af8:	89 d8                	mov    eax,ebx
c0003afa:	e8 01 fc ff ff       	call   c0003700 <dir_next>
c0003aff:	89 c5                	mov    ebp,eax
c0003b01:	85 c0                	test   eax,eax
c0003b03:	0f 84 cd fe ff ff    	je     c00039d6 <dir_read+0x1e>
c0003b09:	eb 0f                	jmp    c0003b1a <dir_read+0x162>
c0003b0b:	85 ed                	test   ebp,ebp
c0003b0d:	0f 84 06 ff ff ff    	je     c0003a19 <dir_read+0x61>
c0003b13:	eb 05                	jmp    c0003b1a <dir_read+0x162>
c0003b15:	bd 04 00 00 00       	mov    ebp,0x4
c0003b1a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b21:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b28:	83 c4 1c             	add    esp,0x1c
c0003b2b:	89 e8                	mov    eax,ebp
c0003b2d:	5b                   	pop    ebx
c0003b2e:	5e                   	pop    esi
c0003b2f:	5f                   	pop    edi
c0003b30:	5d                   	pop    ebp
c0003b31:	c3                   	ret    

c0003b32 <dir_alloc>:
c0003b32:	55                   	push   ebp
c0003b33:	89 d5                	mov    ebp,edx
c0003b35:	57                   	push   edi
c0003b36:	31 d2                	xor    edx,edx
c0003b38:	56                   	push   esi
c0003b39:	53                   	push   ebx
c0003b3a:	89 c3                	mov    ebx,eax
c0003b3c:	83 ec 0c             	sub    esp,0xc
c0003b3f:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b41:	e8 62 f6 ff ff       	call   c00031a8 <dir_sdi>
c0003b46:	85 c0                	test   eax,eax
c0003b48:	75 4e                	jne    c0003b98 <dir_alloc+0x66>
c0003b4a:	31 f6                	xor    esi,esi
c0003b4c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b4f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b52:	89 f8                	mov    eax,edi
c0003b54:	e8 d1 e8 ff ff       	call   c000242a <move_window>
c0003b59:	85 c0                	test   eax,eax
c0003b5b:	75 3b                	jne    c0003b98 <dir_alloc+0x66>
c0003b5d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b60:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b63:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b65:	75 07                	jne    c0003b6e <dir_alloc+0x3c>
c0003b67:	f7 d2                	not    edx
c0003b69:	c0 ea 07             	shr    dl,0x7
c0003b6c:	eb 0d                	jmp    c0003b7b <dir_alloc+0x49>
c0003b6e:	84 d2                	test   dl,dl
c0003b70:	0f 94 c1             	sete   cl
c0003b73:	80 fa e5             	cmp    dl,0xe5
c0003b76:	0f 94 c2             	sete   dl
c0003b79:	09 ca                	or     edx,ecx
c0003b7b:	84 d2                	test   dl,dl
c0003b7d:	74 07                	je     c0003b86 <dir_alloc+0x54>
c0003b7f:	46                   	inc    esi
c0003b80:	39 ee                	cmp    esi,ebp
c0003b82:	75 04                	jne    c0003b88 <dir_alloc+0x56>
c0003b84:	eb 1c                	jmp    c0003ba2 <dir_alloc+0x70>
c0003b86:	31 f6                	xor    esi,esi
c0003b88:	ba 01 00 00 00       	mov    edx,0x1
c0003b8d:	89 d8                	mov    eax,ebx
c0003b8f:	e8 6c fb ff ff       	call   c0003700 <dir_next>
c0003b94:	85 c0                	test   eax,eax
c0003b96:	74 b4                	je     c0003b4c <dir_alloc+0x1a>
c0003b98:	83 f8 04             	cmp    eax,0x4
c0003b9b:	75 05                	jne    c0003ba2 <dir_alloc+0x70>
c0003b9d:	b8 07 00 00 00       	mov    eax,0x7
c0003ba2:	83 c4 0c             	add    esp,0xc
c0003ba5:	5b                   	pop    ebx
c0003ba6:	5e                   	pop    esi
c0003ba7:	5f                   	pop    edi
c0003ba8:	5d                   	pop    ebp
c0003ba9:	c3                   	ret    

c0003baa <store_xdir>:
c0003baa:	55                   	push   ebp
c0003bab:	57                   	push   edi
c0003bac:	89 c7                	mov    edi,eax
c0003bae:	56                   	push   esi
c0003baf:	53                   	push   ebx
c0003bb0:	83 ec 0c             	sub    esp,0xc
c0003bb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bb5:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bb8:	89 e8                	mov    eax,ebp
c0003bba:	e8 5b e5 ff ff       	call   c000211a <xdir_sum>
c0003bbf:	0f b7 d0             	movzx  edx,ax
c0003bc2:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bc5:	e8 f4 e0 ff ff       	call   c0001cbe <st_word>
c0003bca:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003bce:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bd1:	89 f8                	mov    eax,edi
c0003bd3:	e8 d0 f5 ff ff       	call   c00031a8 <dir_sdi>
c0003bd8:	89 c6                	mov    esi,eax
c0003bda:	85 f6                	test   esi,esi
c0003bdc:	75 3d                	jne    c0003c1b <store_xdir+0x71>
c0003bde:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003be1:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003be4:	8b 07                	mov    eax,DWORD PTR [edi]
c0003be6:	e8 3f e8 ff ff       	call   c000242a <move_window>
c0003beb:	89 c6                	mov    esi,eax
c0003bed:	85 c0                	test   eax,eax
c0003bef:	75 2a                	jne    c0003c1b <store_xdir+0x71>
c0003bf1:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bf4:	b9 20 00 00 00       	mov    ecx,0x20
c0003bf9:	89 ea                	mov    edx,ebp
c0003bfb:	e8 cb e0 ff ff       	call   c0001ccb <mem_cpy>
c0003c00:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c02:	85 db                	test   ebx,ebx
c0003c04:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c08:	74 11                	je     c0003c1b <store_xdir+0x71>
c0003c0a:	31 d2                	xor    edx,edx
c0003c0c:	89 f8                	mov    eax,edi
c0003c0e:	83 c5 20             	add    ebp,0x20
c0003c11:	e8 ea fa ff ff       	call   c0003700 <dir_next>
c0003c16:	4b                   	dec    ebx
c0003c17:	89 c6                	mov    esi,eax
c0003c19:	eb bf                	jmp    c0003bda <store_xdir+0x30>
c0003c1b:	89 f0                	mov    eax,esi
c0003c1d:	83 fe 02             	cmp    esi,0x2
c0003c20:	76 05                	jbe    c0003c27 <store_xdir+0x7d>
c0003c22:	b8 02 00 00 00       	mov    eax,0x2
c0003c27:	83 c4 0c             	add    esp,0xc
c0003c2a:	5b                   	pop    ebx
c0003c2b:	5e                   	pop    esi
c0003c2c:	5f                   	pop    edi
c0003c2d:	5d                   	pop    ebp
c0003c2e:	c3                   	ret    

c0003c2f <dir_remove>:
c0003c2f:	57                   	push   edi
c0003c30:	56                   	push   esi
c0003c31:	53                   	push   ebx
c0003c32:	89 c3                	mov    ebx,eax
c0003c34:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c37:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c39:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c3c:	83 fa ff             	cmp    edx,0xffffffff
c0003c3f:	74 09                	je     c0003c4a <dir_remove+0x1b>
c0003c41:	e8 62 f5 ff ff       	call   c00031a8 <dir_sdi>
c0003c46:	85 c0                	test   eax,eax
c0003c48:	75 41                	jne    c0003c8b <dir_remove+0x5c>
c0003c4a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c4d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c50:	89 f0                	mov    eax,esi
c0003c52:	e8 d3 e7 ff ff       	call   c000242a <move_window>
c0003c57:	85 c0                	test   eax,eax
c0003c59:	75 26                	jne    c0003c81 <dir_remove+0x52>
c0003c5b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c5e:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c61:	75 05                	jne    c0003c68 <dir_remove+0x39>
c0003c63:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c66:	eb 03                	jmp    c0003c6b <dir_remove+0x3c>
c0003c68:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c6b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c6f:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c72:	73 17                	jae    c0003c8b <dir_remove+0x5c>
c0003c74:	31 d2                	xor    edx,edx
c0003c76:	89 d8                	mov    eax,ebx
c0003c78:	e8 83 fa ff ff       	call   c0003700 <dir_next>
c0003c7d:	85 c0                	test   eax,eax
c0003c7f:	74 c9                	je     c0003c4a <dir_remove+0x1b>
c0003c81:	83 f8 04             	cmp    eax,0x4
c0003c84:	75 05                	jne    c0003c8b <dir_remove+0x5c>
c0003c86:	b8 02 00 00 00       	mov    eax,0x2
c0003c8b:	5b                   	pop    ebx
c0003c8c:	5e                   	pop    esi
c0003c8d:	5f                   	pop    edi
c0003c8e:	c3                   	ret    

c0003c8f <create_name>:
c0003c8f:	55                   	push   ebp
c0003c90:	89 d5                	mov    ebp,edx
c0003c92:	57                   	push   edi
c0003c93:	89 c7                	mov    edi,eax
c0003c95:	56                   	push   esi
c0003c96:	31 f6                	xor    esi,esi
c0003c98:	53                   	push   ebx
c0003c99:	83 ec 3c             	sub    esp,0x3c
c0003c9c:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	8b 07                	mov    eax,DWORD PTR [edi]
c0003ca4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003ca7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cab:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003caf:	e8 72 e0 ff ff       	call   c0001d26 <tchar2uni>
c0003cb4:	89 c3                	mov    ebx,eax
c0003cb6:	83 f8 ff             	cmp    eax,0xffffffff
c0003cb9:	75 0a                	jne    c0003cc5 <create_name+0x36>
c0003cbb:	b8 06 00 00 00       	mov    eax,0x6
c0003cc0:	e9 9e 02 00 00       	jmp    c0003f63 <create_name+0x2d4>
c0003cc5:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cca:	76 0c                	jbe    c0003cd8 <create_name+0x49>
c0003ccc:	c1 e8 10             	shr    eax,0x10
c0003ccf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cd3:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cd7:	46                   	inc    esi
c0003cd8:	66 83 fb 1f          	cmp    bx,0x1f
c0003cdc:	76 4f                	jbe    c0003d2d <create_name+0x9e>
c0003cde:	66 83 fb 5c          	cmp    bx,0x5c
c0003ce2:	74 35                	je     c0003d19 <create_name+0x8a>
c0003ce4:	66 83 fb 2f          	cmp    bx,0x2f
c0003ce8:	74 2f                	je     c0003d19 <create_name+0x8a>
c0003cea:	66 83 fb 7f          	cmp    bx,0x7f
c0003cee:	77 11                	ja     c0003d01 <create_name+0x72>
c0003cf0:	0f b7 d3             	movzx  edx,bx
c0003cf3:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0003cf8:	e8 11 e0 ff ff       	call   c0001d0e <chk_chr>
c0003cfd:	85 c0                	test   eax,eax
c0003cff:	75 ba                	jne    c0003cbb <create_name+0x2c>
c0003d01:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d07:	77 b2                	ja     c0003cbb <create_name+0x2c>
c0003d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d0d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d11:	46                   	inc    esi
c0003d12:	eb 97                	jmp    c0003cab <create_name+0x1c>
c0003d14:	40                   	inc    eax
c0003d15:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d1d:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d1f:	80 fa 2f             	cmp    dl,0x2f
c0003d22:	74 f0                	je     c0003d14 <create_name+0x85>
c0003d24:	80 fa 5c             	cmp    dl,0x5c
c0003d27:	74 eb                	je     c0003d14 <create_name+0x85>
c0003d29:	31 db                	xor    ebx,ebx
c0003d2b:	eb 02                	jmp    c0003d2f <create_name+0xa0>
c0003d2d:	b3 04                	mov    bl,0x4
c0003d2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d33:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d36:	85 f6                	test   esi,esi
c0003d38:	74 18                	je     c0003d52 <create_name+0xc3>
c0003d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d3e:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d43:	66 83 f8 20          	cmp    ax,0x20
c0003d47:	74 06                	je     c0003d4f <create_name+0xc0>
c0003d49:	66 83 f8 2e          	cmp    ax,0x2e
c0003d4d:	75 03                	jne    c0003d52 <create_name+0xc3>
c0003d4f:	4e                   	dec    esi
c0003d50:	eb e4                	jmp    c0003d36 <create_name+0xa7>
c0003d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d56:	31 ed                	xor    ebp,ebp
c0003d58:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d5e:	85 f6                	test   esi,esi
c0003d60:	0f 84 55 ff ff ff    	je     c0003cbb <create_name+0x2c>
c0003d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6a:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d6d:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d71:	66 83 f8 20          	cmp    ax,0x20
c0003d75:	75 04                	jne    c0003d7b <create_name+0xec>
c0003d77:	89 d5                	mov    ebp,edx
c0003d79:	eb eb                	jmp    c0003d66 <create_name+0xd7>
c0003d7b:	85 ed                	test   ebp,ebp
c0003d7d:	75 06                	jne    c0003d85 <create_name+0xf6>
c0003d7f:	66 83 f8 2e          	cmp    ax,0x2e
c0003d83:	75 08                	jne    c0003d8d <create_name+0xfe>
c0003d85:	83 cb 03             	or     ebx,0x3
c0003d88:	eb 03                	jmp    c0003d8d <create_name+0xfe>
c0003d8a:	4e                   	dec    esi
c0003d8b:	74 0c                	je     c0003d99 <create_name+0x10a>
c0003d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d91:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d97:	75 f1                	jne    c0003d8a <create_name+0xfb>
c0003d99:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d9e:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003da1:	ba 20 00 00 00       	mov    edx,0x20
c0003da6:	e8 35 df ff ff       	call   c0001ce0 <mem_set>
c0003dab:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dba:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dbd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dc5:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dc9:	66 85 ed             	test   bp,bp
c0003dcc:	0f 84 30 01 00 00    	je     c0003f02 <create_name+0x273>
c0003dd2:	66 83 fd 20          	cmp    bp,0x20
c0003dd6:	74 10                	je     c0003de8 <create_name+0x159>
c0003dd8:	66 83 fd 2e          	cmp    bp,0x2e
c0003ddc:	75 13                	jne    c0003df1 <create_name+0x162>
c0003dde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003de2:	0f 84 6b 01 00 00    	je     c0003f53 <create_name+0x2c4>
c0003de8:	83 cb 03             	or     ebx,0x3
c0003deb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003def:	eb c9                	jmp    c0003dba <create_name+0x12b>
c0003df1:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003df5:	73 0b                	jae    c0003e02 <create_name+0x173>
c0003df7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dfb:	75 47                	jne    c0003e44 <create_name+0x1b5>
c0003dfd:	e9 51 01 00 00       	jmp    c0003f53 <create_name+0x2c4>
c0003e02:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e07:	75 10                	jne    c0003e19 <create_name+0x18a>
c0003e09:	83 cb 03             	or     ebx,0x3
c0003e0c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e14:	e9 e9 00 00 00       	jmp    c0003f02 <create_name+0x273>
c0003e19:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e1d:	74 0d                	je     c0003e2c <create_name+0x19d>
c0003e1f:	83 cb 03             	or     ebx,0x3
c0003e22:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e26:	0f 87 d6 00 00 00    	ja     c0003f02 <create_name+0x273>
c0003e2c:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e31:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e35:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e3d:	b9 08 00 00 00       	mov    ecx,0x8
c0003e42:	eb a7                	jmp    c0003deb <create_name+0x15c>
c0003e44:	66 83 fd 7f          	cmp    bp,0x7f
c0003e48:	76 68                	jbe    c0003eb2 <create_name+0x223>
c0003e4a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e4e:	88 da                	mov    dl,bl
c0003e50:	83 ca 02             	or     edx,0x2
c0003e53:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e57:	50                   	push   eax
c0003e58:	50                   	push   eax
c0003e59:	68 b5 01 00 00       	push   0x1b5
c0003e5e:	55                   	push   ebp
c0003e5f:	e8 48 46 00 00       	call   c00084ac <ff_uni2oem>
c0003e64:	83 c4 10             	add    esp,0x10
c0003e67:	89 c5                	mov    ebp,eax
c0003e69:	a8 80                	test   al,0x80
c0003e6b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e6f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e73:	74 0c                	je     c0003e81 <create_name+0x1f2>
c0003e75:	83 e5 7f             	and    ebp,0x7f
c0003e78:	0f b6 ad 80 9f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6080]
c0003e7f:	eb 2a                	jmp    c0003eab <create_name+0x21c>
c0003e81:	66 3d ff 00          	cmp    ax,0xff
c0003e85:	76 24                	jbe    c0003eab <create_name+0x21c>
c0003e87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e8b:	48                   	dec    eax
c0003e8c:	39 c8                	cmp    eax,ecx
c0003e8e:	77 0c                	ja     c0003e9c <create_name+0x20d>
c0003e90:	83 cb 03             	or     ebx,0x3
c0003e93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e97:	e9 4f ff ff ff       	jmp    c0003deb <create_name+0x15c>
c0003e9c:	89 e8                	mov    eax,ebp
c0003e9e:	88 d3                	mov    bl,dl
c0003ea0:	66 c1 e8 08          	shr    ax,0x8
c0003ea4:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ea8:	41                   	inc    ecx
c0003ea9:	eb 4b                	jmp    c0003ef6 <create_name+0x267>
c0003eab:	88 d3                	mov    bl,dl
c0003ead:	66 85 ed             	test   bp,bp
c0003eb0:	74 19                	je     c0003ecb <create_name+0x23c>
c0003eb2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003eb6:	0f b7 d5             	movzx  edx,bp
c0003eb9:	b8 3b a0 02 c0       	mov    eax,0xc002a03b
c0003ebe:	e8 4b de ff ff       	call   c0001d0e <chk_chr>
c0003ec3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ec7:	85 c0                	test   eax,eax
c0003ec9:	74 0a                	je     c0003ed5 <create_name+0x246>
c0003ecb:	83 cb 03             	or     ebx,0x3
c0003ece:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ed3:	eb 21                	jmp    c0003ef6 <create_name+0x267>
c0003ed5:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ed8:	66 83 f8 19          	cmp    ax,0x19
c0003edc:	77 07                	ja     c0003ee5 <create_name+0x256>
c0003ede:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ee3:	eb 11                	jmp    c0003ef6 <create_name+0x267>
c0003ee5:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ee8:	66 83 f8 19          	cmp    ax,0x19
c0003eec:	77 08                	ja     c0003ef6 <create_name+0x267>
c0003eee:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ef3:	83 ed 20             	sub    ebp,0x20
c0003ef6:	89 e8                	mov    eax,ebp
c0003ef8:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003efc:	41                   	inc    ecx
c0003efd:	e9 e9 fe ff ff       	jmp    c0003deb <create_name+0x15c>
c0003f02:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f06:	75 04                	jne    c0003f0c <create_name+0x27d>
c0003f08:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f0c:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f11:	75 05                	jne    c0003f18 <create_name+0x289>
c0003f13:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f18:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f1c:	83 e0 0c             	and    eax,0xc
c0003f1f:	3c 0c                	cmp    al,0xc
c0003f21:	74 0b                	je     c0003f2e <create_name+0x29f>
c0003f23:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f27:	83 e0 03             	and    eax,0x3
c0003f2a:	3c 03                	cmp    al,0x3
c0003f2c:	75 05                	jne    c0003f33 <create_name+0x2a4>
c0003f2e:	83 cb 02             	or     ebx,0x2
c0003f31:	eb 19                	jmp    c0003f4c <create_name+0x2bd>
c0003f33:	f6 c3 02             	test   bl,0x2
c0003f36:	75 14                	jne    c0003f4c <create_name+0x2bd>
c0003f38:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f3d:	74 03                	je     c0003f42 <create_name+0x2b3>
c0003f3f:	83 cb 10             	or     ebx,0x10
c0003f42:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f47:	74 03                	je     c0003f4c <create_name+0x2bd>
c0003f49:	83 cb 08             	or     ebx,0x8
c0003f4c:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f4f:	31 c0                	xor    eax,eax
c0003f51:	eb 10                	jmp    c0003f63 <create_name+0x2d4>
c0003f53:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f58:	0f 85 ce fe ff ff    	jne    c0003e2c <create_name+0x19d>
c0003f5e:	e9 a6 fe ff ff       	jmp    c0003e09 <create_name+0x17a>
c0003f63:	83 c4 3c             	add    esp,0x3c
c0003f66:	5b                   	pop    ebx
c0003f67:	5e                   	pop    esi
c0003f68:	5f                   	pop    edi
c0003f69:	5d                   	pop    ebp
c0003f6a:	c3                   	ret    

c0003f6b <xname_sum>:
c0003f6b:	56                   	push   esi
c0003f6c:	53                   	push   ebx
c0003f6d:	89 c6                	mov    esi,eax
c0003f6f:	51                   	push   ecx
c0003f70:	31 db                	xor    ebx,ebx
c0003f72:	83 c6 02             	add    esi,0x2
c0003f75:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f79:	66 85 c0             	test   ax,ax
c0003f7c:	74 1f                	je     c0003f9d <xname_sum+0x32>
c0003f7e:	83 ec 0c             	sub    esp,0xc
c0003f81:	66 d1 cb             	ror    bx,1
c0003f84:	50                   	push   eax
c0003f85:	e8 1e 46 00 00       	call   c00085a8 <ff_wtoupper>
c0003f8a:	83 c4 10             	add    esp,0x10
c0003f8d:	0f b6 d0             	movzx  edx,al
c0003f90:	66 c1 e8 08          	shr    ax,0x8
c0003f94:	01 d3                	add    ebx,edx
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	01 c3                	add    ebx,eax
c0003f9b:	eb d5                	jmp    c0003f72 <xname_sum+0x7>
c0003f9d:	89 d8                	mov    eax,ebx
c0003f9f:	5a                   	pop    edx
c0003fa0:	5b                   	pop    ebx
c0003fa1:	5e                   	pop    esi
c0003fa2:	c3                   	ret    

c0003fa3 <create_xdir>:
c0003fa3:	55                   	push   ebp
c0003fa4:	b9 40 00 00 00       	mov    ecx,0x40
c0003fa9:	57                   	push   edi
c0003faa:	bd 01 00 00 00       	mov    ebp,0x1
c0003faf:	56                   	push   esi
c0003fb0:	31 ff                	xor    edi,edi
c0003fb2:	53                   	push   ebx
c0003fb3:	be 40 00 00 00       	mov    esi,0x40
c0003fb8:	89 c3                	mov    ebx,eax
c0003fba:	83 ec 1c             	sub    esp,0x1c
c0003fbd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fc1:	31 d2                	xor    edx,edx
c0003fc3:	e8 18 dd ff ff       	call   c0001ce0 <mem_set>
c0003fc8:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fcb:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fcf:	31 c9                	xor    ecx,ecx
c0003fd1:	8d 46 01             	lea    eax,[esi+0x1]
c0003fd4:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fd8:	83 c6 02             	add    esi,0x2
c0003fdb:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fdf:	66 85 ed             	test   bp,bp
c0003fe2:	74 12                	je     c0003ff6 <create_xdir+0x53>
c0003fe4:	0f b6 c1             	movzx  eax,cl
c0003fe7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003feb:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fef:	66 83 fd 01          	cmp    bp,0x1
c0003ff3:	80 d9 ff             	sbb    cl,0xff
c0003ff6:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003ff9:	0f b7 d5             	movzx  edx,bp
c0003ffc:	83 c6 02             	add    esi,0x2
c0003fff:	e8 ba dc ff ff       	call   c0001cbe <st_word>
c0004004:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000400a:	75 d3                	jne    c0003fdf <create_xdir+0x3c>
c000400c:	8d 47 01             	lea    eax,[edi+0x1]
c000400f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004013:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004017:	0f b6 c1             	movzx  eax,cl
c000401a:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000401f:	74 07                	je     c0004028 <create_xdir+0x85>
c0004021:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004026:	eb a9                	jmp    c0003fd1 <create_xdir+0x2e>
c0004028:	8d 47 02             	lea    eax,[edi+0x2]
c000402b:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000402e:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004031:	89 d0                	mov    eax,edx
c0004033:	e8 33 ff ff ff       	call   c0003f6b <xname_sum>
c0004038:	83 c4 1c             	add    esp,0x1c
c000403b:	0f b7 d0             	movzx  edx,ax
c000403e:	8d 43 24             	lea    eax,[ebx+0x24]
c0004041:	5b                   	pop    ebx
c0004042:	5e                   	pop    esi
c0004043:	5f                   	pop    edi
c0004044:	5d                   	pop    ebp
c0004045:	e9 74 dc ff ff       	jmp    c0001cbe <st_word>

c000404a <cmp_lfn>:
c000404a:	55                   	push   ebp
c000404b:	57                   	push   edi
c000404c:	89 d7                	mov    edi,edx
c000404e:	56                   	push   esi
c000404f:	53                   	push   ebx
c0004050:	83 ec 1c             	sub    esp,0x1c
c0004053:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004057:	8d 42 1a             	lea    eax,[edx+0x1a]
c000405a:	e8 ed db ff ff       	call   c0001c4c <ld_word>
c000405f:	66 85 c0             	test   ax,ax
c0004062:	74 07                	je     c000406b <cmp_lfn+0x21>
c0004064:	31 c0                	xor    eax,eax
c0004066:	e9 9a 00 00 00       	jmp    c0004105 <cmp_lfn+0xbb>
c000406b:	8a 1f                	mov    bl,BYTE PTR [edi]
c000406d:	bd 01 00 00 00       	mov    ebp,0x1
c0004072:	83 e3 3f             	and    ebx,0x3f
c0004075:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000407d:	4b                   	dec    ebx
c000407e:	6b db 0d             	imul   ebx,ebx,0xd
c0004081:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004085:	0f b6 80 00 a0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6000]
c000408c:	01 f8                	add    eax,edi
c000408e:	e8 b9 db ff ff       	call   c0001c4c <ld_word>
c0004093:	66 85 ed             	test   bp,bp
c0004096:	89 c6                	mov    esi,eax
c0004098:	74 3c                	je     c00040d6 <cmp_lfn+0x8c>
c000409a:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040a0:	77 c2                	ja     c0004064 <cmp_lfn+0x1a>
c00040a2:	83 ec 0c             	sub    esp,0xc
c00040a5:	0f b7 c0             	movzx  eax,ax
c00040a8:	50                   	push   eax
c00040a9:	e8 fa 44 00 00       	call   c00085a8 <ff_wtoupper>
c00040ae:	89 c5                	mov    ebp,eax
c00040b0:	8d 43 01             	lea    eax,[ebx+0x1]
c00040b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040bb:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00040c2:	e8 e1 44 00 00       	call   c00085a8 <ff_wtoupper>
c00040c7:	83 c4 10             	add    esp,0x10
c00040ca:	39 c5                	cmp    ebp,eax
c00040cc:	75 96                	jne    c0004064 <cmp_lfn+0x1a>
c00040ce:	89 f5                	mov    ebp,esi
c00040d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040d4:	eb 04                	jmp    c00040da <cmp_lfn+0x90>
c00040d6:	66 46                	inc    si
c00040d8:	75 8a                	jne    c0004064 <cmp_lfn+0x1a>
c00040da:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040de:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040e3:	75 9c                	jne    c0004081 <cmp_lfn+0x37>
c00040e5:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040e8:	74 16                	je     c0004100 <cmp_lfn+0xb6>
c00040ea:	66 85 ed             	test   bp,bp
c00040ed:	74 11                	je     c0004100 <cmp_lfn+0xb6>
c00040ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040f3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040f8:	0f 94 c0             	sete   al
c00040fb:	0f b6 c0             	movzx  eax,al
c00040fe:	eb 05                	jmp    c0004105 <cmp_lfn+0xbb>
c0004100:	b8 01 00 00 00       	mov    eax,0x1
c0004105:	83 c4 1c             	add    esp,0x1c
c0004108:	5b                   	pop    ebx
c0004109:	5e                   	pop    esi
c000410a:	5f                   	pop    edi
c000410b:	5d                   	pop    ebp
c000410c:	c3                   	ret    

c000410d <dir_find>:
c000410d:	55                   	push   ebp
c000410e:	31 d2                	xor    edx,edx
c0004110:	57                   	push   edi
c0004111:	56                   	push   esi
c0004112:	53                   	push   ebx
c0004113:	89 c3                	mov    ebx,eax
c0004115:	83 ec 1c             	sub    esp,0x1c
c0004118:	8b 30                	mov    esi,DWORD PTR [eax]
c000411a:	e8 89 f0 ff ff       	call   c00031a8 <dir_sdi>
c000411f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004122:	85 c0                	test   eax,eax
c0004124:	0f 85 9e 01 00 00    	jne    c00042c8 <dir_find+0x1bb>
c000412a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000412d:	0f 85 8d 00 00 00    	jne    c00041c0 <dir_find+0xb3>
c0004133:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004136:	e8 30 fe ff ff       	call   c0003f6b <xname_sum>
c000413b:	89 c7                	mov    edi,eax
c000413d:	31 d2                	xor    edx,edx
c000413f:	89 d8                	mov    eax,ebx
c0004141:	e8 72 f8 ff ff       	call   c00039b8 <dir_read>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 5e 01 00 00    	jne    c00042ac <dir_find+0x19f>
c000414e:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004151:	8d 41 24             	lea    eax,[ecx+0x24]
c0004154:	e8 f3 da ff ff       	call   c0001c4c <ld_word>
c0004159:	66 39 f8             	cmp    ax,di
c000415c:	75 df                	jne    c000413d <dir_find+0x30>
c000415e:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004161:	31 ed                	xor    ebp,ebp
c0004163:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004167:	ba 40 00 00 00       	mov    edx,0x40
c000416c:	89 e9                	mov    ecx,ebp
c000416e:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004172:	0f 84 42 01 00 00    	je     c00042ba <dir_find+0x1ad>
c0004178:	f6 c2 1f             	test   dl,0x1f
c000417b:	75 03                	jne    c0004180 <dir_find+0x73>
c000417d:	83 c2 02             	add    edx,0x2
c0004180:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004184:	89 d0                	mov    eax,edx
c0004186:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004189:	e8 be da ff ff       	call   c0001c4c <ld_word>
c000418e:	83 ec 0c             	sub    esp,0xc
c0004191:	0f b7 c0             	movzx  eax,ax
c0004194:	50                   	push   eax
c0004195:	e8 0e 44 00 00       	call   c00085a8 <ff_wtoupper>
c000419a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000419e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041a1:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00041a8:	e8 fb 43 00 00       	call   c00085a8 <ff_wtoupper>
c00041ad:	83 c4 10             	add    esp,0x10
c00041b0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041b4:	75 87                	jne    c000413d <dir_find+0x30>
c00041b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041ba:	45                   	inc    ebp
c00041bb:	83 c2 02             	add    edx,0x2
c00041be:	eb ac                	jmp    c000416c <dir_find+0x5f>
c00041c0:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041c7:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041cc:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041d1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041d4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041d7:	89 f0                	mov    eax,esi
c00041d9:	e8 4c e2 ff ff       	call   c000242a <move_window>
c00041de:	85 c0                	test   eax,eax
c00041e0:	0f 85 c6 00 00 00    	jne    c00042ac <dir_find+0x19f>
c00041e6:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041e9:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041ec:	84 c9                	test   cl,cl
c00041ee:	0f 84 bd 00 00 00    	je     c00042b1 <dir_find+0x1a4>
c00041f4:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041f7:	88 d0                	mov    al,dl
c00041f9:	83 e0 3f             	and    eax,0x3f
c00041fc:	80 f9 e5             	cmp    cl,0xe5
c00041ff:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004202:	0f 84 87 00 00 00    	je     c000428f <dir_find+0x182>
c0004208:	80 e2 08             	and    dl,0x8
c000420b:	74 06                	je     c0004213 <dir_find+0x106>
c000420d:	3c 0f                	cmp    al,0xf
c000420f:	75 7e                	jne    c000428f <dir_find+0x182>
c0004211:	eb 04                	jmp    c0004217 <dir_find+0x10a>
c0004213:	3c 0f                	cmp    al,0xf
c0004215:	75 4c                	jne    c0004263 <dir_find+0x156>
c0004217:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000421b:	75 7e                	jne    c000429b <dir_find+0x18e>
c000421d:	f6 c1 40             	test   cl,0x40
c0004220:	74 12                	je     c0004234 <dir_find+0x127>
c0004222:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004225:	83 e1 bf             	and    ecx,0xffffffbf
c0004228:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000422c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000422f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004232:	eb 06                	jmp    c000423a <dir_find+0x12d>
c0004234:	89 f8                	mov    eax,edi
c0004236:	38 c8                	cmp    al,cl
c0004238:	75 5c                	jne    c0004296 <dir_find+0x189>
c000423a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000423e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004243:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004246:	75 53                	jne    c000429b <dir_find+0x18e>
c0004248:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000424c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000424f:	89 ea                	mov    edx,ebp
c0004251:	e8 f4 fd ff ff       	call   c000404a <cmp_lfn>
c0004256:	85 c0                	test   eax,eax
c0004258:	74 41                	je     c000429b <dir_find+0x18e>
c000425a:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000425e:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004261:	eb 38                	jmp    c000429b <dir_find+0x18e>
c0004263:	89 f8                	mov    eax,edi
c0004265:	84 c0                	test   al,al
c0004267:	75 0d                	jne    c0004276 <dir_find+0x169>
c0004269:	89 e8                	mov    eax,ebp
c000426b:	e8 98 de ff ff       	call   c0002108 <sum_sfn>
c0004270:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004274:	74 52                	je     c00042c8 <dir_find+0x1bb>
c0004276:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000427a:	75 13                	jne    c000428f <dir_find+0x182>
c000427c:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000427f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004284:	89 e8                	mov    eax,ebp
c0004286:	e8 60 da ff ff       	call   c0001ceb <mem_cmp>
c000428b:	85 c0                	test   eax,eax
c000428d:	74 39                	je     c00042c8 <dir_find+0x1bb>
c000428f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004296:	bf ff ff ff ff       	mov    edi,0xffffffff
c000429b:	31 d2                	xor    edx,edx
c000429d:	89 d8                	mov    eax,ebx
c000429f:	e8 5c f4 ff ff       	call   c0003700 <dir_next>
c00042a4:	85 c0                	test   eax,eax
c00042a6:	0f 84 25 ff ff ff    	je     c00041d1 <dir_find+0xc4>
c00042ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00042af:	eb 17                	jmp    c00042c8 <dir_find+0x1bb>
c00042b1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042b8:	eb 0e                	jmp    c00042c8 <dir_find+0x1bb>
c00042ba:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042bd:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042c2:	0f 85 75 fe ff ff    	jne    c000413d <dir_find+0x30>
c00042c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042cb:	83 c4 1c             	add    esp,0x1c
c00042ce:	5b                   	pop    ebx
c00042cf:	5e                   	pop    esi
c00042d0:	5f                   	pop    edi
c00042d1:	5d                   	pop    ebp
c00042d2:	c3                   	ret    

c00042d3 <dir_register>:
c00042d3:	55                   	push   ebp
c00042d4:	57                   	push   edi
c00042d5:	56                   	push   esi
c00042d6:	be 06 00 00 00       	mov    esi,0x6
c00042db:	53                   	push   ebx
c00042dc:	83 ec 6c             	sub    esp,0x6c
c00042df:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042e3:	0f 85 62 02 00 00    	jne    c000454b <dir_register+0x278>
c00042e9:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042eb:	31 ff                	xor    edi,edi
c00042ed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042f0:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042f5:	74 03                	je     c00042fa <dir_register+0x27>
c00042f7:	47                   	inc    edi
c00042f8:	eb f6                	jmp    c00042f0 <dir_register+0x1d>
c00042fa:	89 c3                	mov    ebx,eax
c00042fc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004300:	0f 85 e1 00 00 00    	jne    c00043e7 <dir_register+0x114>
c0004306:	83 c7 0e             	add    edi,0xe
c0004309:	b9 0f 00 00 00       	mov    ecx,0xf
c000430e:	89 f8                	mov    eax,edi
c0004310:	31 d2                	xor    edx,edx
c0004312:	f7 f1                	div    ecx
c0004314:	8d 50 02             	lea    edx,[eax+0x2]
c0004317:	89 c7                	mov    edi,eax
c0004319:	89 d8                	mov    eax,ebx
c000431b:	e8 12 f8 ff ff       	call   c0003b32 <dir_alloc>
c0004320:	89 c6                	mov    esi,eax
c0004322:	85 c0                	test   eax,eax
c0004324:	0f 85 21 02 00 00    	jne    c000454b <dir_register+0x278>
c000432a:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004330:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004333:	c1 e7 05             	shl    edi,0x5
c0004336:	29 f8                	sub    eax,edi
c0004338:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000433b:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000433e:	a8 04                	test   al,0x4
c0004340:	0f 84 91 00 00 00    	je     c00043d7 <dir_register+0x104>
c0004346:	83 e0 fb             	and    eax,0xfffffffb
c0004349:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000434c:	89 d8                	mov    eax,ebx
c000434e:	e8 25 ec ff ff       	call   c0002f78 <fill_first_frag>
c0004353:	85 c0                	test   eax,eax
c0004355:	0f 85 ee 01 00 00    	jne    c0004549 <dir_register+0x276>
c000435b:	83 c9 ff             	or     ecx,0xffffffff
c000435e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 db eb ff ff       	call   c0002f43 <fill_last_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 d9 01 00 00    	jne    c0004549 <dir_register+0x276>
c0004370:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004374:	74 61                	je     c00043d7 <dir_register+0x104>
c0004376:	89 da                	mov    edx,ebx
c0004378:	8d 44 24 14          	lea    eax,[esp+0x14]
c000437c:	e8 ea f5 ff ff       	call   c000396b <load_obj_xdir>
c0004381:	85 c0                	test   eax,eax
c0004383:	0f 85 c0 01 00 00    	jne    c0004549 <dir_register+0x276>
c0004389:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000438d:	31 c9                	xor    ecx,ecx
c000438f:	c1 e2 09             	shl    edx,0x9
c0004392:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004395:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004398:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000439b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000439e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043a1:	83 c0 38             	add    eax,0x38
c00043a4:	e8 1c d9 ff ff       	call   c0001cc5 <st_qword>
c00043a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043ac:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043af:	83 c0 28             	add    eax,0x28
c00043b2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043b5:	e8 0b d9 ff ff       	call   c0001cc5 <st_qword>
c00043ba:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043bd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043c0:	83 c8 01             	or     eax,0x1
c00043c3:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043ca:	e8 db f7 ff ff       	call   c0003baa <store_xdir>
c00043cf:	85 c0                	test   eax,eax
c00043d1:	0f 85 72 01 00 00    	jne    c0004549 <dir_register+0x276>
c00043d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043da:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043dd:	e8 c1 fb ff ff       	call   c0003fa3 <create_xdir>
c00043e2:	e9 64 01 00 00       	jmp    c000454b <dir_register+0x278>
c00043e7:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ea:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043f3:	89 c2                	mov    edx,eax
c00043f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043f9:	e8 cd d8 ff ff       	call   c0001ccb <mem_cpy>
c00043fe:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004403:	74 58                	je     c000445d <dir_register+0x18a>
c0004405:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004409:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004411:	83 ec 0c             	sub    esp,0xc
c0004414:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004417:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000441b:	8d 54 24 24          	lea    edx,[esp+0x24]
c000441f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004423:	e8 24 dc ff ff       	call   c000204c <gen_numname>
c0004428:	89 d8                	mov    eax,ebx
c000442a:	e8 de fc ff ff       	call   c000410d <dir_find>
c000442f:	83 c4 10             	add    esp,0x10
c0004432:	89 c6                	mov    esi,eax
c0004434:	85 c0                	test   eax,eax
c0004436:	75 15                	jne    c000444d <dir_register+0x17a>
c0004438:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000443c:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004441:	75 ce                	jne    c0004411 <dir_register+0x13e>
c0004443:	be 07 00 00 00       	mov    esi,0x7
c0004448:	e9 fe 00 00 00       	jmp    c000454b <dir_register+0x278>
c000444d:	83 f8 04             	cmp    eax,0x4
c0004450:	0f 85 f5 00 00 00    	jne    c000454b <dir_register+0x278>
c0004456:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000445a:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000445d:	b9 01 00 00 00       	mov    ecx,0x1
c0004462:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004467:	74 0f                	je     c0004478 <dir_register+0x1a5>
c0004469:	b9 0d 00 00 00       	mov    ecx,0xd
c000446e:	8d 47 0c             	lea    eax,[edi+0xc]
c0004471:	31 d2                	xor    edx,edx
c0004473:	f7 f1                	div    ecx
c0004475:	8d 48 01             	lea    ecx,[eax+0x1]
c0004478:	89 ca                	mov    edx,ecx
c000447a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000447e:	89 d8                	mov    eax,ebx
c0004480:	e8 ad f6 ff ff       	call   c0003b32 <dir_alloc>
c0004485:	89 c6                	mov    esi,eax
c0004487:	85 c0                	test   eax,eax
c0004489:	0f 85 bc 00 00 00    	jne    c000454b <dir_register+0x278>
c000448f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004493:	49                   	dec    ecx
c0004494:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004498:	74 6a                	je     c0004504 <dir_register+0x231>
c000449a:	89 c8                	mov    eax,ecx
c000449c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000449f:	c1 e0 05             	shl    eax,0x5
c00044a2:	29 c2                	sub    edx,eax
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fd ec ff ff       	call   c00031a8 <dir_sdi>
c00044ab:	89 c6                	mov    esi,eax
c00044ad:	85 c0                	test   eax,eax
c00044af:	0f 85 96 00 00 00    	jne    c000454b <dir_register+0x278>
c00044b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044b9:	e8 4a dc ff ff       	call   c0002108 <sum_sfn>
c00044be:	0f b6 f8             	movzx  edi,al
c00044c1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044c4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044c7:	89 e8                	mov    eax,ebp
c00044c9:	e8 5c df ff ff       	call   c000242a <move_window>
c00044ce:	89 c6                	mov    esi,eax
c00044d0:	85 c0                	test   eax,eax
c00044d2:	75 77                	jne    c000454b <dir_register+0x278>
c00044d4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044d9:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044dc:	83 ec 0c             	sub    esp,0xc
c00044df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044e2:	57                   	push   edi
c00044e3:	e8 e0 da ff ff       	call   c0001fc8 <put_lfn>
c00044e8:	31 d2                	xor    edx,edx
c00044ea:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044ee:	89 d8                	mov    eax,ebx
c00044f0:	e8 0b f2 ff ff       	call   c0003700 <dir_next>
c00044f5:	83 c4 10             	add    esp,0x10
c00044f8:	89 c6                	mov    esi,eax
c00044fa:	85 c0                	test   eax,eax
c00044fc:	75 4d                	jne    c000454b <dir_register+0x278>
c00044fe:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004502:	75 bd                	jne    c00044c1 <dir_register+0x1ee>
c0004504:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004507:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000450a:	89 e8                	mov    eax,ebp
c000450c:	e8 19 df ff ff       	call   c000242a <move_window>
c0004511:	89 c6                	mov    esi,eax
c0004513:	85 c0                	test   eax,eax
c0004515:	75 34                	jne    c000454b <dir_register+0x278>
c0004517:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000451a:	b9 20 00 00 00       	mov    ecx,0x20
c000451f:	31 d2                	xor    edx,edx
c0004521:	e8 ba d7 ff ff       	call   c0001ce0 <mem_set>
c0004526:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004529:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000452d:	b9 0b 00 00 00       	mov    ecx,0xb
c0004532:	e8 94 d7 ff ff       	call   c0001ccb <mem_cpy>
c0004537:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000453a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000453d:	83 e0 18             	and    eax,0x18
c0004540:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004543:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004547:	eb 02                	jmp    c000454b <dir_register+0x278>
c0004549:	89 c6                	mov    esi,eax
c000454b:	83 c4 6c             	add    esp,0x6c
c000454e:	89 f0                	mov    eax,esi
c0004550:	5b                   	pop    ebx
c0004551:	5e                   	pop    esi
c0004552:	5f                   	pop    edi
c0004553:	5d                   	pop    ebp
c0004554:	c3                   	ret    

c0004555 <sync_fs>:
c0004555:	56                   	push   esi
c0004556:	53                   	push   ebx
c0004557:	53                   	push   ebx
c0004558:	89 c3                	mov    ebx,eax
c000455a:	e8 37 de ff ff       	call   c0002396 <sync_window>
c000455f:	85 c0                	test   eax,eax
c0004561:	0f 85 b1 00 00 00    	jne    c0004618 <sync_fs+0xc3>
c0004567:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000456a:	0f 85 8e 00 00 00    	jne    c00045fe <sync_fs+0xa9>
c0004570:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004574:	0f 85 84 00 00 00    	jne    c00045fe <sync_fs+0xa9>
c000457a:	b9 00 02 00 00       	mov    ecx,0x200
c000457f:	8d 73 54             	lea    esi,[ebx+0x54]
c0004582:	31 d2                	xor    edx,edx
c0004584:	89 f0                	mov    eax,esi
c0004586:	e8 55 d7 ff ff       	call   c0001ce0 <mem_set>
c000458b:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004591:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004596:	e8 23 d7 ff ff       	call   c0001cbe <st_word>
c000459b:	ba 52 52 61 41       	mov    edx,0x41615252
c00045a0:	89 f0                	mov    eax,esi
c00045a2:	e8 1b d7 ff ff       	call   c0001cc2 <st_dword>
c00045a7:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045ad:	ba 72 72 41 61       	mov    edx,0x61417272
c00045b2:	e8 0b d7 ff ff       	call   c0001cc2 <st_dword>
c00045b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045ba:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045c0:	e8 fd d6 ff ff       	call   c0001cc2 <st_dword>
c00045c5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045c8:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045ce:	e8 ef d6 ff ff       	call   c0001cc2 <st_dword>
c00045d3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045d6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045d9:	83 c0 01             	add    eax,0x1
c00045dc:	83 d2 00             	adc    edx,0x0
c00045df:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045e2:	83 ec 0c             	sub    esp,0xc
c00045e5:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045e8:	6a 01                	push   0x1
c00045ea:	52                   	push   edx
c00045eb:	50                   	push   eax
c00045ec:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045f0:	56                   	push   esi
c00045f1:	50                   	push   eax
c00045f2:	e8 20 d6 ff ff       	call   c0001c17 <disk_write>
c00045f7:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045fb:	83 c4 20             	add    esp,0x20
c00045fe:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004602:	51                   	push   ecx
c0004603:	6a 00                	push   0x0
c0004605:	6a 00                	push   0x0
c0004607:	50                   	push   eax
c0004608:	e8 20 d6 ff ff       	call   c0001c2d <disk_ioctl>
c000460d:	83 c4 10             	add    esp,0x10
c0004610:	85 c0                	test   eax,eax
c0004612:	0f 95 c0             	setne  al
c0004615:	0f b6 c0             	movzx  eax,al
c0004618:	5a                   	pop    edx
c0004619:	5b                   	pop    ebx
c000461a:	5e                   	pop    esi
c000461b:	c3                   	ret    

c000461c <create_partition>:
c000461c:	55                   	push   ebp
c000461d:	0f b6 c0             	movzx  eax,al
c0004620:	57                   	push   edi
c0004621:	56                   	push   esi
c0004622:	53                   	push   ebx
c0004623:	83 ec 60             	sub    esp,0x60
c0004626:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000462a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000462e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004632:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004636:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000463a:	50                   	push   eax
c000463b:	6a 01                	push   0x1
c000463d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004641:	e8 e7 d5 ff ff       	call   c0001c2d <disk_ioctl>
c0004646:	83 c4 10             	add    esp,0x10
c0004649:	85 c0                	test   eax,eax
c000464b:	74 0a                	je     c0004657 <create_partition+0x3b>
c000464d:	b8 01 00 00 00       	mov    eax,0x1
c0004652:	e9 67 05 00 00       	jmp    c0004bbe <create_partition+0x5a2>
c0004657:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000465b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000465f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004663:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004667:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000466c:	0f 86 ed 03 00 00    	jbe    c0004a5f <create_partition+0x443>
c0004672:	83 c0 df             	add    eax,0xffffffdf
c0004675:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000467d:	83 d2 ff             	adc    edx,0xffffffff
c0004680:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004684:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004688:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000468c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004690:	83 c0 bd             	add    eax,0xffffffbd
c0004693:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000469a:	83 d2 ff             	adc    edx,0xffffffff
c000469d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046a1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046a5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046ad:	be 22 00 00 00       	mov    esi,0x22
c00046b2:	31 ff                	xor    edi,edi
c00046b4:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046bc:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046c4:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046cc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046d0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046d6:	75 0e                	jne    c00046e6 <create_partition+0xca>
c00046d8:	b9 00 02 00 00       	mov    ecx,0x200
c00046dd:	31 d2                	xor    edx,edx
c00046df:	89 d8                	mov    eax,ebx
c00046e1:	e8 fa d5 ff ff       	call   c0001ce0 <mem_set>
c00046e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046f2:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046f5:	0f 84 23 01 00 00    	je     c000481e <create_partition+0x202>
c00046fb:	89 f0                	mov    eax,esi
c00046fd:	89 fa                	mov    edx,edi
c00046ff:	05 ff 07 00 00       	add    eax,0x7ff
c0004704:	83 d2 00             	adc    edx,0x0
c0004707:	89 c1                	mov    ecx,eax
c0004709:	89 d7                	mov    edi,edx
c000470b:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004711:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004715:	89 ce                	mov    esi,ecx
c0004717:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000471b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000471f:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004723:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004726:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000472a:	89 04 24             	mov    DWORD PTR [esp],eax
c000472d:	b8 64 00 00 00       	mov    eax,0x64
c0004732:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004735:	b8 00 00 00 00       	mov    eax,0x0
c000473a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000473e:	72 41                	jb     c0004781 <create_partition+0x165>
c0004740:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004748:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000474c:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004751:	01 c1                	add    ecx,eax
c0004753:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004757:	f7 24 24             	mul    DWORD PTR [esp]
c000475a:	6a 00                	push   0x0
c000475c:	01 ca                	add    edx,ecx
c000475e:	6a 64                	push   0x64
c0004760:	52                   	push   edx
c0004761:	50                   	push   eax
c0004762:	e8 1d 2d 02 00       	call   c0027484 <__udivdi3>
c0004767:	83 c4 10             	add    esp,0x10
c000476a:	05 ff 07 00 00       	add    eax,0x7ff
c000476f:	83 d2 00             	adc    edx,0x0
c0004772:	89 c1                	mov    ecx,eax
c0004774:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004778:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000477e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004788:	01 f0                	add    eax,esi
c000478a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000478e:	11 fa                	adc    edx,edi
c0004790:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004794:	19 d1                	sbb    ecx,edx
c0004796:	73 2e                	jae    c00047c6 <create_partition+0x1aa>
c0004798:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000479c:	89 f8                	mov    eax,edi
c000479e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047a5:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047a9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047b1:	73 6b                	jae    c000481e <create_partition+0x202>
c00047b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047bb:	29 f0                	sub    eax,esi
c00047bd:	19 fa                	sbb    edx,edi
c00047bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00047c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047ca:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047cd:	74 4f                	je     c000481e <create_partition+0x202>
c00047cf:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047d2:	b9 10 00 00 00       	mov    ecx,0x10
c00047d7:	ba 10 a0 02 c0       	mov    edx,0xc002a010
c00047dc:	e8 ea d4 ff ff       	call   c0001ccb <mem_cpy>
c00047e1:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047e5:	b9 10 00 00 00       	mov    ecx,0x10
c00047ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047ee:	e8 2c db ff ff       	call   c000231f <make_rand>
c00047f3:	89 f2                	mov    edx,esi
c00047f5:	89 f9                	mov    ecx,edi
c00047f7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047fb:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047ff:	e8 c1 d4 ff ff       	call   c0001cc5 <st_qword>
c0004804:	03 34 24             	add    esi,DWORD PTR [esp]
c0004807:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000480b:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000480f:	89 f2                	mov    edx,esi
c0004811:	89 f9                	mov    ecx,edi
c0004813:	83 c2 ff             	add    edx,0xffffffff
c0004816:	83 d1 ff             	adc    ecx,0xffffffff
c0004819:	e8 a7 d4 ff ff       	call   c0001cc5 <st_qword>
c000481e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004822:	83 e8 80             	sub    eax,0xffffff80
c0004825:	89 c5                	mov    ebp,eax
c0004827:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000482b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004831:	75 6b                	jne    c000489e <create_partition+0x282>
c0004833:	45                   	inc    ebp
c0004834:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004838:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000483d:	e8 39 da ff ff       	call   c000227b <crc32>
c0004842:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004848:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000484c:	75 e5                	jne    c0004833 <create_partition+0x217>
c000484e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004852:	31 d2                	xor    edx,edx
c0004854:	83 ec 0c             	sub    esp,0xc
c0004857:	c1 ed 09             	shr    ebp,0x9
c000485a:	6a 01                	push   0x1
c000485c:	8d 45 02             	lea    eax,[ebp+0x2]
c000485f:	52                   	push   edx
c0004860:	50                   	push   eax
c0004861:	53                   	push   ebx
c0004862:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004866:	e8 ac d3 ff ff       	call   c0001c17 <disk_write>
c000486b:	83 c4 20             	add    esp,0x20
c000486e:	85 c0                	test   eax,eax
c0004870:	0f 85 d7 fd ff ff    	jne    c000464d <create_partition+0x31>
c0004876:	83 ec 0c             	sub    esp,0xc
c0004879:	31 d2                	xor    edx,edx
c000487b:	6a 01                	push   0x1
c000487d:	89 e8                	mov    eax,ebp
c000487f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004883:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004887:	52                   	push   edx
c0004888:	50                   	push   eax
c0004889:	53                   	push   ebx
c000488a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000488e:	e8 84 d3 ff ff       	call   c0001c17 <disk_write>
c0004893:	83 c4 20             	add    esp,0x20
c0004896:	85 c0                	test   eax,eax
c0004898:	0f 85 af fd ff ff    	jne    c000464d <create_partition+0x31>
c000489e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048a6:	3d 00 40 00 00       	cmp    eax,0x4000
c00048ab:	74 0d                	je     c00048ba <create_partition+0x29e>
c00048ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048b1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048b5:	e9 12 fe ff ff       	jmp    c00046cc <create_partition+0xb0>
c00048ba:	31 d2                	xor    edx,edx
c00048bc:	b9 00 02 00 00       	mov    ecx,0x200
c00048c1:	89 d8                	mov    eax,ebx
c00048c3:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048c6:	e8 15 d4 ff ff       	call   c0001ce0 <mem_set>
c00048cb:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048ce:	b9 10 00 00 00       	mov    ecx,0x10
c00048d3:	ba 00 9f 02 c0       	mov    edx,0xc0029f00
c00048d8:	89 d8                	mov    eax,ebx
c00048da:	e8 ec d3 ff ff       	call   c0001ccb <mem_cpy>
c00048df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048e3:	8d 43 58             	lea    eax,[ebx+0x58]
c00048e6:	f7 d2                	not    edx
c00048e8:	e8 d5 d3 ff ff       	call   c0001cc2 <st_dword>
c00048ed:	8d 43 18             	lea    eax,[ebx+0x18]
c00048f0:	31 c9                	xor    ecx,ecx
c00048f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00048f5:	ba 01 00 00 00       	mov    edx,0x1
c00048fa:	e8 c6 d3 ff ff       	call   c0001cc5 <st_qword>
c00048ff:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004903:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004907:	83 c2 ff             	add    edx,0xffffffff
c000490a:	89 e8                	mov    eax,ebp
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	e8 b1 d3 ff ff       	call   c0001cc5 <st_qword>
c0004914:	31 c9                	xor    ecx,ecx
c0004916:	8d 43 28             	lea    eax,[ebx+0x28]
c0004919:	ba 22 00 00 00       	mov    edx,0x22
c000491e:	e8 a2 d3 ff ff       	call   c0001cc5 <st_qword>
c0004923:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004927:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000492b:	83 c2 de             	add    edx,0xffffffde
c000492e:	8d 43 30             	lea    eax,[ebx+0x30]
c0004931:	83 d1 ff             	adc    ecx,0xffffffff
c0004934:	31 f6                	xor    esi,esi
c0004936:	e8 8a d3 ff ff       	call   c0001cc5 <st_qword>
c000493b:	8d 43 54             	lea    eax,[ebx+0x54]
c000493e:	ba 80 00 00 00       	mov    edx,0x80
c0004943:	e8 7a d3 ff ff       	call   c0001cc2 <st_dword>
c0004948:	8d 43 50             	lea    eax,[ebx+0x50]
c000494b:	ba 80 00 00 00       	mov    edx,0x80
c0004950:	e8 6d d3 ff ff       	call   c0001cc2 <st_dword>
c0004955:	ba 02 00 00 00       	mov    edx,0x2
c000495a:	89 f8                	mov    eax,edi
c000495c:	e8 61 d3 ff ff       	call   c0001cc2 <st_dword>
c0004961:	8d 53 38             	lea    edx,[ebx+0x38]
c0004964:	b9 10 00 00 00       	mov    ecx,0x10
c0004969:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000496d:	e8 ad d9 ff ff       	call   c000231f <make_rand>
c0004972:	83 c8 ff             	or     eax,0xffffffff
c0004975:	46                   	inc    esi
c0004976:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000497b:	e8 fb d8 ff ff       	call   c000227b <crc32>
c0004980:	83 fe 5c             	cmp    esi,0x5c
c0004983:	75 f0                	jne    c0004975 <create_partition+0x359>
c0004985:	f7 d0                	not    eax
c0004987:	8d 73 10             	lea    esi,[ebx+0x10]
c000498a:	89 c2                	mov    edx,eax
c000498c:	89 f0                	mov    eax,esi
c000498e:	e8 2f d3 ff ff       	call   c0001cc2 <st_dword>
c0004993:	83 ec 0c             	sub    esp,0xc
c0004996:	6a 01                	push   0x1
c0004998:	6a 00                	push   0x0
c000499a:	6a 01                	push   0x1
c000499c:	53                   	push   ebx
c000499d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049a1:	e8 71 d2 ff ff       	call   c0001c17 <disk_write>
c00049a6:	83 c4 20             	add    esp,0x20
c00049a9:	85 c0                	test   eax,eax
c00049ab:	0f 85 9c fc ff ff    	jne    c000464d <create_partition+0x31>
c00049b1:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049b5:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049b9:	83 c2 ff             	add    edx,0xffffffff
c00049bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049bf:	83 d1 ff             	adc    ecx,0xffffffff
c00049c2:	e8 fe d2 ff ff       	call   c0001cc5 <st_qword>
c00049c7:	ba 01 00 00 00       	mov    edx,0x1
c00049cc:	31 c9                	xor    ecx,ecx
c00049ce:	89 e8                	mov    eax,ebp
c00049d0:	e8 f0 d2 ff ff       	call   c0001cc5 <st_qword>
c00049d5:	89 f8                	mov    eax,edi
c00049d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049df:	31 ff                	xor    edi,edi
c00049e1:	e8 df d2 ff ff       	call   c0001cc5 <st_qword>
c00049e6:	89 f0                	mov    eax,esi
c00049e8:	31 d2                	xor    edx,edx
c00049ea:	e8 d3 d2 ff ff       	call   c0001cc2 <st_dword>
c00049ef:	83 c8 ff             	or     eax,0xffffffff
c00049f2:	47                   	inc    edi
c00049f3:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049f8:	e8 7e d8 ff ff       	call   c000227b <crc32>
c00049fd:	83 ff 5c             	cmp    edi,0x5c
c0004a00:	75 f0                	jne    c00049f2 <create_partition+0x3d6>
c0004a02:	f7 d0                	not    eax
c0004a04:	89 c2                	mov    edx,eax
c0004a06:	89 f0                	mov    eax,esi
c0004a08:	e8 b5 d2 ff ff       	call   c0001cc2 <st_dword>
c0004a0d:	83 ec 0c             	sub    esp,0xc
c0004a10:	6a 01                	push   0x1
c0004a12:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a16:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a1a:	83 c0 ff             	add    eax,0xffffffff
c0004a1d:	83 d2 ff             	adc    edx,0xffffffff
c0004a20:	52                   	push   edx
c0004a21:	50                   	push   eax
c0004a22:	53                   	push   ebx
c0004a23:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a27:	e8 eb d1 ff ff       	call   c0001c17 <disk_write>
c0004a2c:	83 c4 20             	add    esp,0x20
c0004a2f:	85 c0                	test   eax,eax
c0004a31:	0f 85 16 fc ff ff    	jne    c000464d <create_partition+0x31>
c0004a37:	31 d2                	xor    edx,edx
c0004a39:	89 d8                	mov    eax,ebx
c0004a3b:	b9 00 02 00 00       	mov    ecx,0x200
c0004a40:	e8 9b d2 ff ff       	call   c0001ce0 <mem_set>
c0004a45:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a4b:	b9 10 00 00 00       	mov    ecx,0x10
c0004a50:	ba 10 9f 02 c0       	mov    edx,0xc0029f10
c0004a55:	e8 71 d2 ff ff       	call   c0001ccb <mem_cpy>
c0004a5a:	e9 21 01 00 00       	jmp    c0004b80 <create_partition+0x564>
c0004a5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a63:	b9 05 00 00 00       	mov    ecx,0x5
c0004a68:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a6b:	bf 08 00 00 00       	mov    edi,0x8
c0004a70:	89 f8                	mov    eax,edi
c0004a72:	31 d2                	xor    edx,edx
c0004a74:	0f b6 f0             	movzx  esi,al
c0004a77:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a7a:	f7 f6                	div    esi
c0004a7c:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a81:	76 0a                	jbe    c0004a8d <create_partition+0x471>
c0004a83:	d1 e7                	shl    edi,1
c0004a85:	49                   	dec    ecx
c0004a86:	75 e8                	jne    c0004a70 <create_partition+0x454>
c0004a88:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a8d:	b9 00 02 00 00       	mov    ecx,0x200
c0004a92:	31 d2                	xor    edx,edx
c0004a94:	89 d8                	mov    eax,ebx
c0004a96:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a9c:	e8 3f d2 ff ff       	call   c0001ce0 <mem_set>
c0004aa1:	b9 64 00 00 00       	mov    ecx,0x64
c0004aa6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004aa9:	31 d2                	xor    edx,edx
c0004aab:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ab3:	f7 f1                	div    ecx
c0004ab5:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004aba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004abe:	89 f8                	mov    eax,edi
c0004ac0:	0f b6 c0             	movzx  eax,al
c0004ac3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004ac7:	e9 80 00 00 00       	jmp    c0004b4c <create_partition+0x530>
c0004acc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acf:	29 cf                	sub    edi,ecx
c0004ad1:	89 ca                	mov    edx,ecx
c0004ad3:	89 f0                	mov    eax,esi
c0004ad5:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ada:	e8 e3 d1 ff ff       	call   c0001cc2 <st_dword>
c0004adf:	8d 46 04             	lea    eax,[esi+0x4]
c0004ae2:	89 fa                	mov    edx,edi
c0004ae4:	83 c6 10             	add    esi,0x10
c0004ae7:	e8 d6 d1 ff ff       	call   c0001cc2 <st_dword>
c0004aec:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004af0:	31 d2                	xor    edx,edx
c0004af2:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004af5:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004af9:	89 c8                	mov    eax,ecx
c0004afb:	01 f9                	add    ecx,edi
c0004afd:	f7 f5                	div    ebp
c0004aff:	89 d5                	mov    ebp,edx
c0004b01:	31 d2                	xor    edx,edx
c0004b03:	45                   	inc    ebp
c0004b04:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b08:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b0b:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b0e:	89 c2                	mov    edx,eax
c0004b10:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b13:	c1 ea 02             	shr    edx,0x2
c0004b16:	83 e2 c0             	and    edx,0xffffffc0
c0004b19:	09 ea                	or     edx,ebp
c0004b1b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b20:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b23:	31 d2                	xor    edx,edx
c0004b25:	f7 f5                	div    ebp
c0004b27:	89 d7                	mov    edi,edx
c0004b29:	31 d2                	xor    edx,edx
c0004b2b:	47                   	inc    edi
c0004b2c:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b30:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b33:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b36:	89 c5                	mov    ebp,eax
c0004b38:	c1 ed 02             	shr    ebp,0x2
c0004b3b:	83 e5 c0             	and    ebp,0xffffffc0
c0004b3e:	09 ef                	or     edi,ebp
c0004b40:	89 fa                	mov    edx,edi
c0004b42:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b45:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b4a:	74 34                	je     c0004b80 <create_partition+0x564>
c0004b4c:	85 c9                	test   ecx,ecx
c0004b4e:	74 30                	je     c0004b80 <create_partition+0x564>
c0004b50:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b53:	76 2b                	jbe    c0004b80 <create_partition+0x564>
c0004b55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b59:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b5d:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b60:	83 ff 64             	cmp    edi,0x64
c0004b63:	76 4b                	jbe    c0004bb0 <create_partition+0x594>
c0004b65:	89 f8                	mov    eax,edi
c0004b67:	01 c8                	add    eax,ecx
c0004b69:	0f 82 5d ff ff ff    	jb     c0004acc <create_partition+0x4b0>
c0004b6f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b72:	0f 87 54 ff ff ff    	ja     c0004acc <create_partition+0x4b0>
c0004b78:	85 ff                	test   edi,edi
c0004b7a:	0f 85 51 ff ff ff    	jne    c0004ad1 <create_partition+0x4b5>
c0004b80:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b86:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b8b:	e8 2e d1 ff ff       	call   c0001cbe <st_word>
c0004b90:	83 ec 0c             	sub    esp,0xc
c0004b93:	6a 01                	push   0x1
c0004b95:	6a 00                	push   0x0
c0004b97:	6a 00                	push   0x0
c0004b99:	53                   	push   ebx
c0004b9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b9e:	e8 74 d0 ff ff       	call   c0001c17 <disk_write>
c0004ba3:	83 c4 20             	add    esp,0x20
c0004ba6:	85 c0                	test   eax,eax
c0004ba8:	0f 95 c0             	setne  al
c0004bab:	0f b6 c0             	movzx  eax,al
c0004bae:	eb 0e                	jmp    c0004bbe <create_partition+0x5a2>
c0004bb0:	74 07                	je     c0004bb9 <create_partition+0x59d>
c0004bb2:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bb7:	eb ac                	jmp    c0004b65 <create_partition+0x549>
c0004bb9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bbc:	eb a7                	jmp    c0004b65 <create_partition+0x549>
c0004bbe:	83 c4 5c             	add    esp,0x5c
c0004bc1:	5b                   	pop    ebx
c0004bc2:	5e                   	pop    esi
c0004bc3:	5f                   	pop    edi
c0004bc4:	5d                   	pop    ebp
c0004bc5:	c3                   	ret    

c0004bc6 <get_fileinfo>:
c0004bc6:	55                   	push   ebp
c0004bc7:	57                   	push   edi
c0004bc8:	56                   	push   esi
c0004bc9:	53                   	push   ebx
c0004bca:	83 ec 1c             	sub    esp,0x1c
c0004bcd:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bcf:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bd3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bd7:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bda:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bdd:	0f 84 dc 01 00 00    	je     c0004dbf <get_fileinfo+0x1f9>
c0004be3:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004be6:	75 0f                	jne    c0004bf7 <get_fileinfo+0x31>
c0004be8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004beb:	83 c4 1c             	add    esp,0x1c
c0004bee:	5b                   	pop    ebx
c0004bef:	5e                   	pop    esi
c0004bf0:	5f                   	pop    edi
c0004bf1:	5d                   	pop    ebp
c0004bf2:	e9 58 d5 ff ff       	jmp    c000214f <get_xfileinfo>
c0004bf7:	89 d3                	mov    ebx,edx
c0004bf9:	89 c6                	mov    esi,eax
c0004bfb:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bff:	74 6a                	je     c0004c6b <get_fileinfo+0xa5>
c0004c01:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c09:	31 ed                	xor    ebp,ebp
c0004c0b:	31 ff                	xor    edi,edi
c0004c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c1c:	66 85 d2             	test   dx,dx
c0004c1f:	74 3e                	je     c0004c5f <get_fileinfo+0x99>
c0004c21:	66 85 ed             	test   bp,bp
c0004c24:	75 0c                	jne    c0004c32 <get_fileinfo+0x6c>
c0004c26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c2c:	66 3d ff 07          	cmp    ax,0x7ff
c0004c30:	76 22                	jbe    c0004c54 <get_fileinfo+0x8e>
c0004c32:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c37:	89 e8                	mov    eax,ebp
c0004c39:	29 f9                	sub    ecx,edi
c0004c3b:	c1 e0 10             	shl    eax,0x10
c0004c3e:	09 d0                	or     eax,edx
c0004c40:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c44:	e8 a3 d1 ff ff       	call   c0001dec <put_utf>
c0004c49:	84 c0                	test   al,al
c0004c4b:	74 10                	je     c0004c5d <get_fileinfo+0x97>
c0004c4d:	0f b6 c0             	movzx  eax,al
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	01 c7                	add    edi,eax
c0004c54:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c59:	89 d5                	mov    ebp,edx
c0004c5b:	eb b0                	jmp    c0004c0d <get_fileinfo+0x47>
c0004c5d:	31 ff                	xor    edi,edi
c0004c5f:	66 85 ed             	test   bp,bp
c0004c62:	74 02                	je     c0004c66 <get_fileinfo+0xa0>
c0004c64:	31 ff                	xor    edi,edi
c0004c66:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c6b:	31 ff                	xor    edi,edi
c0004c6d:	31 c9                	xor    ecx,ecx
c0004c6f:	83 f9 0a             	cmp    ecx,0xa
c0004c72:	0f 87 ad 00 00 00    	ja     c0004d25 <get_fileinfo+0x15f>
c0004c78:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c82:	66 83 fa 20          	cmp    dx,0x20
c0004c86:	0f 84 92 00 00 00    	je     c0004d1e <get_fileinfo+0x158>
c0004c8c:	66 83 fa 05          	cmp    dx,0x5
c0004c90:	75 05                	jne    c0004c97 <get_fileinfo+0xd1>
c0004c92:	ba e5 00 00 00       	mov    edx,0xe5
c0004c97:	83 ff 0b             	cmp    edi,0xb
c0004c9a:	77 0b                	ja     c0004ca7 <get_fileinfo+0xe1>
c0004c9c:	83 fd 09             	cmp    ebp,0x9
c0004c9f:	75 06                	jne    c0004ca7 <get_fileinfo+0xe1>
c0004ca1:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004ca6:	47                   	inc    edi
c0004ca7:	0f b7 c2             	movzx  eax,dx
c0004caa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cae:	e8 6d d0 ff ff       	call   c0001d20 <dbc_1st>
c0004cb3:	85 c0                	test   eax,eax
c0004cb5:	74 2f                	je     c0004ce6 <get_fileinfo+0x120>
c0004cb7:	83 fd 08             	cmp    ebp,0x8
c0004cba:	74 2a                	je     c0004ce6 <get_fileinfo+0x120>
c0004cbc:	83 fd 0b             	cmp    ebp,0xb
c0004cbf:	74 25                	je     c0004ce6 <get_fileinfo+0x120>
c0004cc1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ccc:	e8 52 d0 ff ff       	call   c0001d23 <dbc_2nd>
c0004cd1:	85 c0                	test   eax,eax
c0004cd3:	74 11                	je     c0004ce6 <get_fileinfo+0x120>
c0004cd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cde:	c1 e2 08             	shl    edx,0x8
c0004ce1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ce4:	09 c2                	or     edx,eax
c0004ce6:	0f b7 d2             	movzx  edx,dx
c0004ce9:	50                   	push   eax
c0004cea:	50                   	push   eax
c0004ceb:	68 b5 01 00 00       	push   0x1b5
c0004cf0:	52                   	push   edx
c0004cf1:	e8 46 38 00 00       	call   c000853c <ff_oem2uni>
c0004cf6:	83 c4 10             	add    esp,0x10
c0004cf9:	66 85 c0             	test   ax,ax
c0004cfc:	75 04                	jne    c0004d02 <get_fileinfo+0x13c>
c0004cfe:	31 ff                	xor    edi,edi
c0004d00:	eb 23                	jmp    c0004d25 <get_fileinfo+0x15f>
c0004d02:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d07:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d0b:	29 f9                	sub    ecx,edi
c0004d0d:	0f b7 c0             	movzx  eax,ax
c0004d10:	e8 d7 d0 ff ff       	call   c0001dec <put_utf>
c0004d15:	84 c0                	test   al,al
c0004d17:	74 e5                	je     c0004cfe <get_fileinfo+0x138>
c0004d19:	0f b6 c0             	movzx  eax,al
c0004d1c:	01 c7                	add    edi,eax
c0004d1e:	89 e9                	mov    ecx,ebp
c0004d20:	e9 4a ff ff ff       	jmp    c0004c6f <get_fileinfo+0xa9>
c0004d25:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d2a:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d2e:	75 54                	jne    c0004d84 <get_fileinfo+0x1be>
c0004d30:	85 ff                	test   edi,edi
c0004d32:	75 0b                	jne    c0004d3f <get_fileinfo+0x179>
c0004d34:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d38:	ba 01 00 00 00       	mov    edx,0x1
c0004d3d:	eb 33                	jmp    c0004d72 <get_fileinfo+0x1ac>
c0004d3f:	b1 08                	mov    cl,0x8
c0004d41:	31 d2                	xor    edx,edx
c0004d43:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d49:	84 c0                	test   al,al
c0004d4b:	74 25                	je     c0004d72 <get_fileinfo+0x1ac>
c0004d4d:	66 83 f8 2e          	cmp    ax,0x2e
c0004d51:	74 16                	je     c0004d69 <get_fileinfo+0x1a3>
c0004d53:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d56:	66 83 ff 19          	cmp    di,0x19
c0004d5a:	77 0f                	ja     c0004d6b <get_fileinfo+0x1a5>
c0004d5c:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d5f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d62:	74 07                	je     c0004d6b <get_fileinfo+0x1a5>
c0004d64:	83 c0 20             	add    eax,0x20
c0004d67:	eb 02                	jmp    c0004d6b <get_fileinfo+0x1a5>
c0004d69:	b1 10                	mov    cl,0x10
c0004d6b:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d6f:	42                   	inc    edx
c0004d70:	eb d1                	jmp    c0004d43 <get_fileinfo+0x17d>
c0004d72:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d77:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d7e:	75 04                	jne    c0004d84 <get_fileinfo+0x1be>
c0004d80:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d84:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d87:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d8a:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d90:	83 c0 1c             	add    eax,0x1c
c0004d93:	e8 c1 ce ff ff       	call   c0001c59 <ld_dword>
c0004d98:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d9f:	89 03                	mov    DWORD PTR [ebx],eax
c0004da1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da4:	83 c0 16             	add    eax,0x16
c0004da7:	e8 a0 ce ff ff       	call   c0001c4c <ld_word>
c0004dac:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004db0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db3:	83 c0 18             	add    eax,0x18
c0004db6:	e8 91 ce ff ff       	call   c0001c4c <ld_word>
c0004dbb:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dbf:	83 c4 1c             	add    esp,0x1c
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	5d                   	pop    ebp
c0004dc6:	c3                   	ret    

c0004dc7 <ld_clust.isra.0>:
c0004dc7:	56                   	push   esi
c0004dc8:	89 c6                	mov    esi,eax
c0004dca:	53                   	push   ebx
c0004dcb:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004dce:	89 d3                	mov    ebx,edx
c0004dd0:	e8 77 ce ff ff       	call   c0001c4c <ld_word>
c0004dd5:	0f b7 c8             	movzx  ecx,ax
c0004dd8:	89 f0                	mov    eax,esi
c0004dda:	3c 03                	cmp    al,0x3
c0004ddc:	75 0d                	jne    c0004deb <ld_clust.isra.0+0x24>
c0004dde:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de1:	e8 66 ce ff ff       	call   c0001c4c <ld_word>
c0004de6:	c1 e0 10             	shl    eax,0x10
c0004de9:	09 c1                	or     ecx,eax
c0004deb:	89 c8                	mov    eax,ecx
c0004ded:	5b                   	pop    ebx
c0004dee:	5e                   	pop    esi
c0004def:	c3                   	ret    

c0004df0 <st_clust.isra.1>:
c0004df0:	56                   	push   esi
c0004df1:	89 c6                	mov    esi,eax
c0004df3:	53                   	push   ebx
c0004df4:	89 d3                	mov    ebx,edx
c0004df6:	0f b7 d1             	movzx  edx,cx
c0004df9:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dfc:	e8 bd ce ff ff       	call   c0001cbe <st_word>
c0004e01:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e04:	75 0f                	jne    c0004e15 <st_clust.isra.1+0x25>
c0004e06:	c1 e9 10             	shr    ecx,0x10
c0004e09:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e0c:	89 ca                	mov    edx,ecx
c0004e0e:	5b                   	pop    ebx
c0004e0f:	5e                   	pop    esi
c0004e10:	e9 a9 ce ff ff       	jmp    c0001cbe <st_word>
c0004e15:	5b                   	pop    ebx
c0004e16:	5e                   	pop    esi
c0004e17:	c3                   	ret    

c0004e18 <init_alloc_info.isra.2>:
c0004e18:	56                   	push   esi
c0004e19:	53                   	push   ebx
c0004e1a:	89 c6                	mov    esi,eax
c0004e1c:	89 d3                	mov    ebx,edx
c0004e1e:	51                   	push   ecx
c0004e1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e21:	83 c0 34             	add    eax,0x34
c0004e24:	e8 30 ce ff ff       	call   c0001c59 <ld_dword>
c0004e29:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e2c:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e2e:	83 c0 38             	add    eax,0x38
c0004e31:	e8 3b ce ff ff       	call   c0001c71 <ld_qword>
c0004e36:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e39:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e3c:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e3e:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e41:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e48:	83 e0 02             	and    eax,0x2
c0004e4b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e4e:	5b                   	pop    ebx
c0004e4f:	5b                   	pop    ebx
c0004e50:	5e                   	pop    esi
c0004e51:	c3                   	ret    

c0004e52 <follow_path>:
c0004e52:	56                   	push   esi
c0004e53:	53                   	push   ebx
c0004e54:	89 c3                	mov    ebx,eax
c0004e56:	83 ec 14             	sub    esp,0x14
c0004e59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e5d:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e63:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e65:	80 fa 5c             	cmp    dl,0x5c
c0004e68:	75 07                	jne    c0004e71 <follow_path+0x1f>
c0004e6a:	40                   	inc    eax
c0004e6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e6f:	eb ee                	jmp    c0004e5f <follow_path+0xd>
c0004e71:	80 fa 2f             	cmp    dl,0x2f
c0004e74:	74 f4                	je     c0004e6a <follow_path+0x18>
c0004e76:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e7d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e84:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e87:	77 52                	ja     c0004edb <follow_path+0x89>
c0004e89:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e8d:	31 d2                	xor    edx,edx
c0004e8f:	89 d8                	mov    eax,ebx
c0004e91:	e8 12 e3 ff ff       	call   c00031a8 <dir_sdi>
c0004e96:	eb 7c                	jmp    c0004f14 <follow_path+0xc2>
c0004e98:	89 d8                	mov    eax,ebx
c0004e9a:	e8 6e f2 ff ff       	call   c000410d <dir_find>
c0004e9f:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ea2:	85 c0                	test   eax,eax
c0004ea4:	75 46                	jne    c0004eec <follow_path+0x9a>
c0004ea6:	80 e2 04             	and    dl,0x4
c0004ea9:	75 69                	jne    c0004f14 <follow_path+0xc2>
c0004eab:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004eaf:	74 5e                	je     c0004f0f <follow_path+0xbd>
c0004eb1:	8a 06                	mov    al,BYTE PTR [esi]
c0004eb3:	3c 04                	cmp    al,0x4
c0004eb5:	75 41                	jne    c0004ef8 <follow_path+0xa6>
c0004eb7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004eba:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ebe:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ec1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ec4:	30 c0                	xor    al,al
c0004ec6:	09 d0                	or     eax,edx
c0004ec8:	89 da                	mov    edx,ebx
c0004eca:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ecd:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ed0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ed3:	8d 46 10             	lea    eax,[esi+0x10]
c0004ed6:	e8 3d ff ff ff       	call   c0004e18 <init_alloc_info.isra.2>
c0004edb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004edf:	89 d8                	mov    eax,ebx
c0004ee1:	e8 a9 ed ff ff       	call   c0003c8f <create_name>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	74 ae                	je     c0004e98 <follow_path+0x46>
c0004eea:	eb 28                	jmp    c0004f14 <follow_path+0xc2>
c0004eec:	83 f8 04             	cmp    eax,0x4
c0004eef:	75 23                	jne    c0004f14 <follow_path+0xc2>
c0004ef1:	80 e2 04             	and    dl,0x4
c0004ef4:	74 19                	je     c0004f0f <follow_path+0xbd>
c0004ef6:	eb 1c                	jmp    c0004f14 <follow_path+0xc2>
c0004ef8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004efb:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f01:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f05:	e8 bd fe ff ff       	call   c0004dc7 <ld_clust.isra.0>
c0004f0a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f0d:	eb cc                	jmp    c0004edb <follow_path+0x89>
c0004f0f:	b8 05 00 00 00       	mov    eax,0x5
c0004f14:	83 c4 14             	add    esp,0x14
c0004f17:	5b                   	pop    ebx
c0004f18:	5e                   	pop    esi
c0004f19:	c3                   	ret    

c0004f1a <f_mount>:
c0004f1a:	53                   	push   ebx
c0004f1b:	83 ec 18             	sub    esp,0x18
c0004f1e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f22:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f2e:	e8 fb d2 ff ff       	call   c000222e <get_ldnumber>
c0004f33:	89 c2                	mov    edx,eax
c0004f35:	b8 0b 00 00 00       	mov    eax,0xb
c0004f3a:	85 d2                	test   edx,edx
c0004f3c:	78 39                	js     c0004f77 <f_mount+0x5d>
c0004f3e:	8b 04 95 a0 f0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0f60]
c0004f45:	85 c0                	test   eax,eax
c0004f47:	74 03                	je     c0004f4c <f_mount+0x32>
c0004f49:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f50:	85 c0                	test   eax,eax
c0004f52:	74 03                	je     c0004f57 <f_mount+0x3d>
c0004f54:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5b:	89 04 95 a0 f0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0f60],eax
c0004f62:	31 c0                	xor    eax,eax
c0004f64:	84 db                	test   bl,bl
c0004f66:	74 0f                	je     c0004f77 <f_mount+0x5d>
c0004f68:	31 c9                	xor    ecx,ecx
c0004f6a:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f6e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f72:	e8 65 d7 ff ff       	call   c00026dc <mount_volume>
c0004f77:	83 c4 18             	add    esp,0x18
c0004f7a:	5b                   	pop    ebx
c0004f7b:	c3                   	ret    

c0004f7c <f_open>:
c0004f7c:	55                   	push   ebp
c0004f7d:	bd 09 00 00 00       	mov    ebp,0x9
c0004f82:	57                   	push   edi
c0004f83:	56                   	push   esi
c0004f84:	53                   	push   ebx
c0004f85:	83 ec 7c             	sub    esp,0x7c
c0004f88:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f8f:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f96:	85 db                	test   ebx,ebx
c0004f98:	0f 84 10 04 00 00    	je     c00053ae <f_open+0x432>
c0004f9e:	89 fe                	mov    esi,edi
c0004fa0:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fa4:	83 e6 3f             	and    esi,0x3f
c0004fa7:	89 f0                	mov    eax,esi
c0004fa9:	0f b6 c8             	movzx  ecx,al
c0004fac:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fb3:	e8 24 d7 ff ff       	call   c00026dc <mount_volume>
c0004fb8:	89 c5                	mov    ebp,eax
c0004fba:	85 c0                	test   eax,eax
c0004fbc:	0f 85 e6 03 00 00    	jne    c00053a8 <f_open+0x42c>
c0004fc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc6:	bd 11 00 00 00       	mov    ebp,0x11
c0004fcb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fcf:	83 ec 0c             	sub    esp,0xc
c0004fd2:	68 60 04 00 00       	push   0x460
c0004fd7:	e8 a3 34 00 00       	call   c000847f <ff_memalloc>
c0004fdc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe0:	83 c4 10             	add    esp,0x10
c0004fe3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fe8:	0f 84 c0 03 00 00    	je     c00053ae <f_open+0x432>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004ff6:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ffc:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fff:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005002:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005009:	8d 44 24 24          	lea    eax,[esp+0x24]
c000500d:	e8 40 fe ff ff       	call   c0004e52 <follow_path>
c0005012:	89 c5                	mov    ebp,eax
c0005014:	85 c0                	test   eax,eax
c0005016:	75 0c                	jne    c0005024 <f_open+0xa8>
c0005018:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000501d:	79 05                	jns    c0005024 <f_open+0xa8>
c000501f:	bd 06 00 00 00       	mov    ebp,0x6
c0005024:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000502a:	0f 84 84 01 00 00    	je     c00051b4 <f_open+0x238>
c0005030:	85 ed                	test   ebp,ebp
c0005032:	74 20                	je     c0005054 <f_open+0xd8>
c0005034:	83 fd 04             	cmp    ebp,0x4
c0005037:	0f 85 58 03 00 00    	jne    c0005395 <f_open+0x419>
c000503d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005041:	83 ce 08             	or     esi,0x8
c0005044:	e8 8a f2 ff ff       	call   c00042d3 <dir_register>
c0005049:	89 c5                	mov    ebp,eax
c000504b:	85 c0                	test   eax,eax
c000504d:	74 2f                	je     c000507e <f_open+0x102>
c000504f:	e9 41 03 00 00       	jmp    c0005395 <f_open+0x419>
c0005054:	bd 07 00 00 00       	mov    ebp,0x7
c0005059:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c000505e:	0f 85 31 03 00 00    	jne    c0005395 <f_open+0x419>
c0005064:	bd 08 00 00 00       	mov    ebp,0x8
c0005069:	f7 c7 04 00 00 00    	test   edi,0x4
c000506f:	0f 85 20 03 00 00    	jne    c0005395 <f_open+0x419>
c0005075:	83 e7 08             	and    edi,0x8
c0005078:	0f 84 65 01 00 00    	je     c00051e3 <f_open+0x267>
c000507e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005082:	8a 02                	mov    al,BYTE PTR [edx]
c0005084:	3c 04                	cmp    al,0x4
c0005086:	0f 85 97 00 00 00    	jne    c0005123 <f_open+0x1a7>
c000508c:	8d 42 10             	lea    eax,[edx+0x10]
c000508f:	89 13                	mov    DWORD PTR [ebx],edx
c0005091:	89 da                	mov    edx,ebx
c0005093:	e8 80 fd ff ff       	call   c0004e18 <init_alloc_info.isra.2>
c0005098:	31 d2                	xor    edx,edx
c000509a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000509e:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050a6:	83 c0 02             	add    eax,0x2
c00050a9:	e8 32 cc ff ff       	call   c0001ce0 <mem_set>
c00050ae:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050b3:	31 d2                	xor    edx,edx
c00050b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bc:	83 c0 26             	add    eax,0x26
c00050bf:	e8 1c cc ff ff       	call   c0001ce0 <mem_set>
c00050c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050c8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050cb:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00050d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d7:	83 c0 08             	add    eax,0x8
c00050da:	e8 e3 cb ff ff       	call   c0001cc2 <st_dword>
c00050df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050e6:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ea:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050ee:	e8 b7 ea ff ff       	call   c0003baa <store_xdir>
c00050f3:	89 c5                	mov    ebp,eax
c00050f5:	85 c0                	test   eax,eax
c00050f7:	0f 85 98 02 00 00    	jne    c0005395 <f_open+0x419>
c00050fd:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005100:	85 d2                	test   edx,edx
c0005102:	0f 84 db 00 00 00    	je     c00051e3 <f_open+0x267>
c0005108:	31 c9                	xor    ecx,ecx
c000510a:	89 d8                	mov    eax,ebx
c000510c:	e8 8e e3 ff ff       	call   c000349f <remove_chain>
c0005111:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005115:	89 c5                	mov    ebp,eax
c0005117:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000511a:	48                   	dec    eax
c000511b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000511e:	e9 b8 00 00 00       	jmp    c00051db <f_open+0x25f>
c0005123:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005127:	89 ea                	mov    edx,ebp
c0005129:	e8 99 fc ff ff       	call   c0004dc7 <ld_clust.isra.0>
c000512e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005133:	89 c7                	mov    edi,eax
c0005135:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005138:	e8 85 cb ff ff       	call   c0001cc2 <st_dword>
c000513d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005141:	31 c9                	xor    ecx,ecx
c0005143:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000514f:	e8 9c fc ff ff       	call   c0004df0 <st_clust.isra.1>
c0005154:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005158:	31 d2                	xor    edx,edx
c000515a:	83 c0 1c             	add    eax,0x1c
c000515d:	e8 60 cb ff ff       	call   c0001cc2 <st_dword>
c0005162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005166:	85 ff                	test   edi,edi
c0005168:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000516c:	74 75                	je     c00051e3 <f_open+0x267>
c000516e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005172:	31 c9                	xor    ecx,ecx
c0005174:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005177:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000517a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000517e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005182:	89 fa                	mov    edx,edi
c0005184:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005188:	e8 12 e3 ff ff       	call   c000349f <remove_chain>
c000518d:	89 c5                	mov    ebp,eax
c000518f:	85 c0                	test   eax,eax
c0005191:	0f 85 fe 01 00 00    	jne    c0005395 <f_open+0x419>
c0005197:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000519b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000519f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051a3:	4f                   	dec    edi
c00051a4:	e8 81 d2 ff ff       	call   c000242a <move_window>
c00051a9:	89 c5                	mov    ebp,eax
c00051ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051af:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051b2:	eb 27                	jmp    c00051db <f_open+0x25f>
c00051b4:	85 ed                	test   ebp,ebp
c00051b6:	0f 85 d9 01 00 00    	jne    c0005395 <f_open+0x419>
c00051bc:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051c0:	bd 04 00 00 00       	mov    ebp,0x4
c00051c5:	a8 10                	test   al,0x10
c00051c7:	0f 85 c8 01 00 00    	jne    c0005395 <f_open+0x419>
c00051cd:	83 e7 02             	and    edi,0x2
c00051d0:	74 11                	je     c00051e3 <f_open+0x267>
c00051d2:	bd 07 00 00 00       	mov    ebp,0x7
c00051d7:	a8 01                	test   al,0x1
c00051d9:	eb 02                	jmp    c00051dd <f_open+0x261>
c00051db:	85 ed                	test   ebp,ebp
c00051dd:	0f 85 b2 01 00 00    	jne    c0005395 <f_open+0x419>
c00051e3:	f7 c6 08 00 00 00    	test   esi,0x8
c00051e9:	74 03                	je     c00051ee <f_open+0x272>
c00051eb:	83 ce 40             	or     esi,0x40
c00051ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051f2:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051f5:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051f8:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051fb:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051fe:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005202:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005205:	8a 02                	mov    al,BYTE PTR [edx]
c0005207:	3c 04                	cmp    al,0x4
c0005209:	75 2a                	jne    c0005235 <f_open+0x2b9>
c000520b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000520f:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005214:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005217:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000521b:	30 c0                	xor    al,al
c000521d:	09 c8                	or     eax,ecx
c000521f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005222:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005226:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005229:	8d 42 10             	lea    eax,[edx+0x10]
c000522c:	89 da                	mov    edx,ebx
c000522e:	e8 e5 fb ff ff       	call   c0004e18 <init_alloc_info.isra.2>
c0005233:	eb 1c                	jmp    c0005251 <f_open+0x2d5>
c0005235:	89 fa                	mov    edx,edi
c0005237:	e8 8b fb ff ff       	call   c0004dc7 <ld_clust.isra.0>
c000523c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000523f:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005242:	e8 12 ca ff ff       	call   c0001c59 <ld_dword>
c0005247:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000524e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005255:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000525c:	89 03                	mov    DWORD PTR [ebx],eax
c000525e:	31 d2                	xor    edx,edx
c0005260:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005264:	b9 00 02 00 00       	mov    ecx,0x200
c0005269:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000526d:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005271:	89 f0                	mov    eax,esi
c0005273:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000527a:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000527d:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005284:	8d 43 50             	lea    eax,[ebx+0x50]
c0005287:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000528e:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005295:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005299:	e8 42 ca ff ff       	call   c0001ce0 <mem_set>
c000529e:	83 e6 20             	and    esi,0x20
c00052a1:	75 07                	jne    c00052aa <f_open+0x32e>
c00052a3:	31 ed                	xor    ebp,ebp
c00052a5:	e9 eb 00 00 00       	jmp    c0005395 <f_open+0x419>
c00052aa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052ad:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052bc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052c0:	74 e1                	je     c00052a3 <f_open+0x327>
c00052c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052ca:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052cd:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052d4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052d7:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052db:	31 ff                	xor    edi,edi
c00052dd:	c1 e5 09             	shl    ebp,0x9
c00052e0:	89 ee                	mov    esi,ebp
c00052e2:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052e6:	89 f8                	mov    eax,edi
c00052e8:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052ec:	73 22                	jae    c0005310 <f_open+0x394>
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 bd dc ff ff       	call   c0002fb2 <get_fat>
c00052f5:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052f9:	89 c2                	mov    edx,eax
c00052fb:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052ff:	83 f8 01             	cmp    eax,0x1
c0005302:	76 10                	jbe    c0005314 <f_open+0x398>
c0005304:	83 f8 ff             	cmp    eax,0xffffffff
c0005307:	75 d9                	jne    c00052e2 <f_open+0x366>
c0005309:	bd 01 00 00 00       	mov    ebp,0x1
c000530e:	eb 09                	jmp    c0005319 <f_open+0x39d>
c0005310:	31 ed                	xor    ebp,ebp
c0005312:	eb 05                	jmp    c0005319 <f_open+0x39d>
c0005314:	bd 02 00 00 00       	mov    ebp,0x2
c0005319:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000531c:	85 ed                	test   ebp,ebp
c000531e:	75 75                	jne    c0005395 <f_open+0x419>
c0005320:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005324:	25 ff 01 00 00       	and    eax,0x1ff
c0005329:	0f 84 74 ff ff ff    	je     c00052a3 <f_open+0x327>
c000532f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005333:	bd 02 00 00 00       	mov    ebp,0x2
c0005338:	89 c8                	mov    eax,ecx
c000533a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000533e:	e8 a2 cb ff ff       	call   c0001ee5 <clst2sect>
c0005343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005347:	89 d7                	mov    edi,edx
c0005349:	09 c7                	or     edi,eax
c000534b:	74 48                	je     c0005395 <f_open+0x419>
c000534d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005351:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005355:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000535d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005361:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005365:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005369:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000536c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005376:	6a 01                	push   0x1
c0005378:	52                   	push   edx
c0005379:	50                   	push   eax
c000537a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 79 c8 ff ff       	call   c0001c01 <disk_read>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 95 c0             	setne  al
c0005390:	0f b6 c0             	movzx  eax,al
c0005393:	89 c5                	mov    ebp,eax
c0005395:	83 ec 0c             	sub    esp,0xc
c0005398:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000539c:	e8 f4 30 00 00       	call   c0008495 <ff_memfree>
c00053a1:	83 c4 10             	add    esp,0x10
c00053a4:	85 ed                	test   ebp,ebp
c00053a6:	74 06                	je     c00053ae <f_open+0x432>
c00053a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053ae:	83 c4 7c             	add    esp,0x7c
c00053b1:	89 e8                	mov    eax,ebp
c00053b3:	5b                   	pop    ebx
c00053b4:	5e                   	pop    esi
c00053b5:	5f                   	pop    edi
c00053b6:	5d                   	pop    ebp
c00053b7:	c3                   	ret    

c00053b8 <f_read>:
c00053b8:	55                   	push   ebp
c00053b9:	57                   	push   edi
c00053ba:	56                   	push   esi
c00053bb:	53                   	push   ebx
c00053bc:	83 ec 2c             	sub    esp,0x2c
c00053bf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053c3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053d1:	89 d8                	mov    eax,ebx
c00053d3:	e8 77 cf ff ff       	call   c000234f <validate>
c00053d8:	89 c5                	mov    ebp,eax
c00053da:	85 c0                	test   eax,eax
c00053dc:	0f 85 4c 02 00 00    	jne    c000562e <f_read+0x276>
c00053e2:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053e6:	85 ed                	test   ebp,ebp
c00053e8:	0f 85 40 02 00 00    	jne    c000562e <f_read+0x276>
c00053ee:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053f2:	0f 84 31 02 00 00    	je     c0005629 <f_read+0x271>
c00053f8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053fb:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053fe:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005401:	bf 00 00 00 00       	mov    edi,0x0
c0005406:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005409:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000540d:	89 d1                	mov    ecx,edx
c000540f:	19 f9                	sbb    ecx,edi
c0005411:	0f 83 cf 00 00 00    	jae    c00054e6 <f_read+0x12e>
c0005417:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000541b:	e9 c6 00 00 00       	jmp    c00054e6 <f_read+0x12e>
c0005420:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005423:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005426:	89 d0                	mov    eax,edx
c0005428:	25 ff 01 00 00       	and    eax,0x1ff
c000542d:	0f 85 c9 01 00 00    	jne    c00055fc <f_read+0x244>
c0005433:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005437:	89 d6                	mov    esi,edx
c0005439:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000543d:	89 cf                	mov    edi,ecx
c000543f:	48                   	dec    eax
c0005440:	0f ac fe 09          	shrd   esi,edi,0x9
c0005444:	21 f0                	and    eax,esi
c0005446:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000544a:	0f 84 a6 00 00 00    	je     c00054f6 <f_read+0x13e>
c0005450:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005454:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005457:	89 c8                	mov    eax,ecx
c0005459:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000545c:	e8 84 ca ff ff       	call   c0001ee5 <clst2sect>
c0005461:	89 d7                	mov    edi,edx
c0005463:	09 c7                	or     edi,eax
c0005465:	0f 84 b4 00 00 00    	je     c000551f <f_read+0x167>
c000546b:	31 ff                	xor    edi,edi
c000546d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005471:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005474:	01 c6                	add    esi,eax
c0005476:	11 d7                	adc    edi,edx
c0005478:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005480:	0f 86 fd 00 00 00    	jbe    c0005583 <f_read+0x1cb>
c0005486:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000548a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000548e:	c1 e8 09             	shr    eax,0x9
c0005491:	89 04 24             	mov    DWORD PTR [esp],eax
c0005494:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005498:	03 14 24             	add    edx,DWORD PTR [esp]
c000549b:	39 c2                	cmp    edx,eax
c000549d:	76 07                	jbe    c00054a6 <f_read+0xee>
c000549f:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a6:	83 ec 0c             	sub    esp,0xc
c00054a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054ad:	57                   	push   edi
c00054ae:	56                   	push   esi
c00054af:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054b3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054b7:	50                   	push   eax
c00054b8:	e8 44 c7 ff ff       	call   c0001c01 <disk_read>
c00054bd:	83 c4 20             	add    esp,0x20
c00054c0:	85 c0                	test   eax,eax
c00054c2:	75 6e                	jne    c0005532 <f_read+0x17a>
c00054c4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054c8:	78 7e                	js     c0005548 <f_read+0x190>
c00054ca:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054cd:	c1 e6 09             	shl    esi,0x9
c00054d0:	31 ff                	xor    edi,edi
c00054d2:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054de:	01 30                	add    DWORD PTR [eax],esi
c00054e0:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054e3:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054e6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054eb:	0f 85 2f ff ff ff    	jne    c0005420 <f_read+0x68>
c00054f1:	e9 38 01 00 00       	jmp    c000562e <f_read+0x276>
c00054f6:	89 c8                	mov    eax,ecx
c00054f8:	09 d0                	or     eax,edx
c00054fa:	75 05                	jne    c0005501 <f_read+0x149>
c00054fc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054ff:	eb 19                	jmp    c000551a <f_read+0x162>
c0005501:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005505:	74 09                	je     c0005510 <f_read+0x158>
c0005507:	89 d8                	mov    eax,ebx
c0005509:	e8 f8 c9 ff ff       	call   c0001f06 <clmt_clust>
c000550e:	eb 0a                	jmp    c000551a <f_read+0x162>
c0005510:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005513:	89 d8                	mov    eax,ebx
c0005515:	e8 98 da ff ff       	call   c0002fb2 <get_fat>
c000551a:	83 f8 01             	cmp    eax,0x1
c000551d:	77 0e                	ja     c000552d <f_read+0x175>
c000551f:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005523:	bd 02 00 00 00       	mov    ebp,0x2
c0005528:	e9 01 01 00 00       	jmp    c000562e <f_read+0x276>
c000552d:	83 f8 ff             	cmp    eax,0xffffffff
c0005530:	75 0e                	jne    c0005540 <f_read+0x188>
c0005532:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005536:	bd 01 00 00 00       	mov    ebp,0x1
c000553b:	e9 ee 00 00 00       	jmp    c000562e <f_read+0x276>
c0005540:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005543:	e9 08 ff ff ff       	jmp    c0005450 <f_read+0x98>
c0005548:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000554b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000554e:	29 f0                	sub    eax,esi
c0005550:	19 fa                	sbb    edx,edi
c0005552:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005555:	89 d7                	mov    edi,edx
c0005557:	ba 00 00 00 00       	mov    edx,0x0
c000555c:	89 f9                	mov    ecx,edi
c000555e:	19 d1                	sbb    ecx,edx
c0005560:	0f 83 64 ff ff ff    	jae    c00054ca <f_read+0x112>
c0005566:	89 c7                	mov    edi,eax
c0005568:	8d 53 50             	lea    edx,[ebx+0x50]
c000556b:	c1 e7 09             	shl    edi,0x9
c000556e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005572:	b9 00 02 00 00       	mov    ecx,0x200
c0005577:	01 f8                	add    eax,edi
c0005579:	e8 4d c7 ff ff       	call   c0001ccb <mem_cpy>
c000557e:	e9 47 ff ff ff       	jmp    c00054ca <f_read+0x112>
c0005583:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005586:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005589:	89 04 24             	mov    DWORD PTR [esp],eax
c000558c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005590:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005594:	75 05                	jne    c000559b <f_read+0x1e3>
c0005596:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005599:	74 5b                	je     c00055f6 <f_read+0x23e>
c000559b:	8d 43 50             	lea    eax,[ebx+0x50]
c000559e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055a6:	79 2a                	jns    c00055d2 <f_read+0x21a>
c00055a8:	83 ec 0c             	sub    esp,0xc
c00055ab:	6a 01                	push   0x1
c00055ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055bd:	50                   	push   eax
c00055be:	e8 54 c6 ff ff       	call   c0001c17 <disk_write>
c00055c3:	83 c4 20             	add    esp,0x20
c00055c6:	85 c0                	test   eax,eax
c00055c8:	0f 85 64 ff ff ff    	jne    c0005532 <f_read+0x17a>
c00055ce:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055d2:	83 ec 0c             	sub    esp,0xc
c00055d5:	6a 01                	push   0x1
c00055d7:	57                   	push   edi
c00055d8:	56                   	push   esi
c00055d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055e5:	50                   	push   eax
c00055e6:	e8 16 c6 ff ff       	call   c0001c01 <disk_read>
c00055eb:	83 c4 20             	add    esp,0x20
c00055ee:	85 c0                	test   eax,eax
c00055f0:	0f 85 3c ff ff ff    	jne    c0005532 <f_read+0x17a>
c00055f6:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f9:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055fc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055ff:	ba 00 02 00 00       	mov    edx,0x200
c0005604:	25 ff 01 00 00       	and    eax,0x1ff
c0005609:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000560d:	29 c2                	sub    edx,eax
c000560f:	39 d6                	cmp    esi,edx
c0005611:	76 02                	jbe    c0005615 <f_read+0x25d>
c0005613:	89 d6                	mov    esi,edx
c0005615:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005619:	89 f1                	mov    ecx,esi
c000561b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000561f:	e8 a7 c6 ff ff       	call   c0001ccb <mem_cpy>
c0005624:	e9 a7 fe ff ff       	jmp    c00054d0 <f_read+0x118>
c0005629:	bd 07 00 00 00       	mov    ebp,0x7
c000562e:	83 c4 2c             	add    esp,0x2c
c0005631:	89 e8                	mov    eax,ebp
c0005633:	5b                   	pop    ebx
c0005634:	5e                   	pop    esi
c0005635:	5f                   	pop    edi
c0005636:	5d                   	pop    ebp
c0005637:	c3                   	ret    

c0005638 <f_write>:
c0005638:	55                   	push   ebp
c0005639:	57                   	push   edi
c000563a:	56                   	push   esi
c000563b:	53                   	push   ebx
c000563c:	83 ec 2c             	sub    esp,0x2c
c000563f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005643:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005647:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000564d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005651:	89 d8                	mov    eax,ebx
c0005653:	e8 f7 cc ff ff       	call   c000234f <validate>
c0005658:	89 c5                	mov    ebp,eax
c000565a:	85 c0                	test   eax,eax
c000565c:	0f 85 86 02 00 00    	jne    c00058e8 <f_write+0x2b0>
c0005662:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005666:	85 ed                	test   ebp,ebp
c0005668:	0f 85 7a 02 00 00    	jne    c00058e8 <f_write+0x2b0>
c000566e:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005672:	0f 84 6b 02 00 00    	je     c00058e3 <f_write+0x2ab>
c0005678:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000567c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000567f:	0f 84 43 01 00 00    	je     c00057c8 <f_write+0x190>
c0005685:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005688:	89 c1                	mov    ecx,eax
c000568a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000568e:	0f 83 34 01 00 00    	jae    c00057c8 <f_write+0x190>
c0005694:	f7 d0                	not    eax
c0005696:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000569a:	e9 29 01 00 00       	jmp    c00057c8 <f_write+0x190>
c000569f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056a2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056a5:	89 d0                	mov    eax,edx
c00056a7:	25 ff 01 00 00       	and    eax,0x1ff
c00056ac:	0f 85 00 02 00 00    	jne    c00058b2 <f_write+0x27a>
c00056b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056b6:	89 d6                	mov    esi,edx
c00056b8:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056bc:	89 cf                	mov    edi,ecx
c00056be:	48                   	dec    eax
c00056bf:	0f ac fe 09          	shrd   esi,edi,0x9
c00056c3:	21 f0                	and    eax,esi
c00056c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056c9:	0f 84 06 01 00 00    	je     c00057d5 <f_write+0x19d>
c00056cf:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056d3:	0f 88 6e 01 00 00    	js     c0005847 <f_write+0x20f>
c00056d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056dd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056e0:	89 c8                	mov    eax,ecx
c00056e2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056e6:	e8 fa c7 ff ff       	call   c0001ee5 <clst2sect>
c00056eb:	89 d1                	mov    ecx,edx
c00056ed:	09 c1                	or     ecx,eax
c00056ef:	0f 84 1c 01 00 00    	je     c0005811 <f_write+0x1d9>
c00056f5:	31 ff                	xor    edi,edi
c00056f7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056ff:	01 c6                	add    esi,eax
c0005701:	11 d7                	adc    edi,edx
c0005703:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000570b:	0f 86 63 01 00 00    	jbe    c0005874 <f_write+0x23c>
c0005711:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005715:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005719:	c1 e8 09             	shr    eax,0x9
c000571c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005720:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005724:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005728:	39 c2                	cmp    edx,eax
c000572a:	76 08                	jbe    c0005734 <f_write+0xfc>
c000572c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005734:	83 ec 0c             	sub    esp,0xc
c0005737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000573b:	57                   	push   edi
c000573c:	56                   	push   esi
c000573d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005741:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005745:	50                   	push   eax
c0005746:	e8 cc c4 ff ff       	call   c0001c17 <disk_write>
c000574b:	83 c4 20             	add    esp,0x20
c000574e:	85 c0                	test   eax,eax
c0005750:	0f 85 ce 00 00 00    	jne    c0005824 <f_write+0x1ec>
c0005756:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005759:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000575c:	29 f0                	sub    eax,esi
c000575e:	19 fa                	sbb    edx,edi
c0005760:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005764:	89 d7                	mov    edi,edx
c0005766:	ba 00 00 00 00       	mov    edx,0x0
c000576b:	89 f9                	mov    ecx,edi
c000576d:	19 d1                	sbb    ecx,edx
c000576f:	73 1c                	jae    c000578d <f_write+0x155>
c0005771:	89 c7                	mov    edi,eax
c0005773:	b9 00 02 00 00       	mov    ecx,0x200
c0005778:	c1 e7 09             	shl    edi,0x9
c000577b:	8d 43 50             	lea    eax,[ebx+0x50]
c000577e:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005782:	89 fa                	mov    edx,edi
c0005784:	e8 42 c5 ff ff       	call   c0001ccb <mem_cpy>
c0005789:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000578d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005791:	c1 e6 09             	shl    esi,0x9
c0005794:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005798:	31 ff                	xor    edi,edi
c000579a:	01 30                	add    DWORD PTR [eax],esi
c000579c:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057a0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057a4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a7:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057aa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057ad:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057b0:	89 c1                	mov    ecx,eax
c00057b2:	39 f2                	cmp    edx,esi
c00057b4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057b7:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057ba:	19 f9                	sbb    ecx,edi
c00057bc:	73 04                	jae    c00057c2 <f_write+0x18a>
c00057be:	89 f2                	mov    edx,esi
c00057c0:	89 f8                	mov    eax,edi
c00057c2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057c5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057c8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057cd:	0f 85 cc fe ff ff    	jne    c000569f <f_write+0x67>
c00057d3:	eb 2e                	jmp    c0005803 <f_write+0x1cb>
c00057d5:	89 c8                	mov    eax,ecx
c00057d7:	09 d0                	or     eax,edx
c00057d9:	75 0b                	jne    c00057e6 <f_write+0x1ae>
c00057db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057de:	31 d2                	xor    edx,edx
c00057e0:	85 c0                	test   eax,eax
c00057e2:	75 28                	jne    c000580c <f_write+0x1d4>
c00057e4:	eb 12                	jmp    c00057f8 <f_write+0x1c0>
c00057e6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ea:	74 09                	je     c00057f5 <f_write+0x1bd>
c00057ec:	89 d8                	mov    eax,ebx
c00057ee:	e8 13 c7 ff ff       	call   c0001f06 <clmt_clust>
c00057f3:	eb 0a                	jmp    c00057ff <f_write+0x1c7>
c00057f5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057f8:	89 d8                	mov    eax,ebx
c00057fa:	e8 a1 da ff ff       	call   c00032a0 <create_chain>
c00057ff:	85 c0                	test   eax,eax
c0005801:	75 09                	jne    c000580c <f_write+0x1d4>
c0005803:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005807:	e9 dc 00 00 00       	jmp    c00058e8 <f_write+0x2b0>
c000580c:	83 f8 01             	cmp    eax,0x1
c000580f:	75 0e                	jne    c000581f <f_write+0x1e7>
c0005811:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005815:	bd 02 00 00 00       	mov    ebp,0x2
c000581a:	e9 c9 00 00 00       	jmp    c00058e8 <f_write+0x2b0>
c000581f:	83 f8 ff             	cmp    eax,0xffffffff
c0005822:	75 0e                	jne    c0005832 <f_write+0x1fa>
c0005824:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005828:	bd 01 00 00 00       	mov    ebp,0x1
c000582d:	e9 b6 00 00 00       	jmp    c00058e8 <f_write+0x2b0>
c0005832:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005839:	0f 85 90 fe ff ff    	jne    c00056cf <f_write+0x97>
c000583f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005842:	e9 88 fe ff ff       	jmp    c00056cf <f_write+0x97>
c0005847:	83 ec 0c             	sub    esp,0xc
c000584a:	8d 43 50             	lea    eax,[ebx+0x50]
c000584d:	6a 01                	push   0x1
c000584f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005852:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005855:	50                   	push   eax
c0005856:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000585a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000585e:	50                   	push   eax
c000585f:	e8 b3 c3 ff ff       	call   c0001c17 <disk_write>
c0005864:	83 c4 20             	add    esp,0x20
c0005867:	85 c0                	test   eax,eax
c0005869:	75 b9                	jne    c0005824 <f_write+0x1ec>
c000586b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000586f:	e9 65 fe ff ff       	jmp    c00056d9 <f_write+0xa1>
c0005874:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005877:	75 05                	jne    c000587e <f_write+0x246>
c0005879:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000587c:	74 2e                	je     c00058ac <f_write+0x274>
c000587e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005881:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005884:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005887:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000588a:	73 20                	jae    c00058ac <f_write+0x274>
c000588c:	83 ec 0c             	sub    esp,0xc
c000588f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005892:	6a 01                	push   0x1
c0005894:	57                   	push   edi
c0005895:	56                   	push   esi
c0005896:	50                   	push   eax
c0005897:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000589b:	50                   	push   eax
c000589c:	e8 60 c3 ff ff       	call   c0001c01 <disk_read>
c00058a1:	83 c4 20             	add    esp,0x20
c00058a4:	85 c0                	test   eax,eax
c00058a6:	0f 85 78 ff ff ff    	jne    c0005824 <f_write+0x1ec>
c00058ac:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058af:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058b2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058b5:	ba 00 02 00 00       	mov    edx,0x200
c00058ba:	25 ff 01 00 00       	and    eax,0x1ff
c00058bf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058c3:	29 c2                	sub    edx,eax
c00058c5:	39 d6                	cmp    esi,edx
c00058c7:	76 02                	jbe    c00058cb <f_write+0x293>
c00058c9:	89 d6                	mov    esi,edx
c00058cb:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058cf:	89 f1                	mov    ecx,esi
c00058d1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058d5:	e8 f1 c3 ff ff       	call   c0001ccb <mem_cpy>
c00058da:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058de:	e9 b1 fe ff ff       	jmp    c0005794 <f_write+0x15c>
c00058e3:	bd 07 00 00 00       	mov    ebp,0x7
c00058e8:	83 c4 2c             	add    esp,0x2c
c00058eb:	89 e8                	mov    eax,ebp
c00058ed:	5b                   	pop    ebx
c00058ee:	5e                   	pop    esi
c00058ef:	5f                   	pop    edi
c00058f0:	5d                   	pop    ebp
c00058f1:	c3                   	ret    

c00058f2 <f_sync>:
c00058f2:	56                   	push   esi
c00058f3:	53                   	push   ebx
c00058f4:	83 ec 64             	sub    esp,0x64
c00058f7:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058fb:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058ff:	89 d8                	mov    eax,ebx
c0005901:	e8 49 ca ff ff       	call   c000234f <validate>
c0005906:	85 c0                	test   eax,eax
c0005908:	0f 85 ba 01 00 00    	jne    c0005ac8 <f_sync+0x1d6>
c000590e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005911:	f6 c2 40             	test   dl,0x40
c0005914:	0f 84 ae 01 00 00    	je     c0005ac8 <f_sync+0x1d6>
c000591a:	84 d2                	test   dl,dl
c000591c:	79 33                	jns    c0005951 <f_sync+0x5f>
c000591e:	83 ec 0c             	sub    esp,0xc
c0005921:	8d 43 50             	lea    eax,[ebx+0x50]
c0005924:	6a 01                	push   0x1
c0005926:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005929:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000592c:	50                   	push   eax
c000592d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005931:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005935:	50                   	push   eax
c0005936:	e8 dc c2 ff ff       	call   c0001c17 <disk_write>
c000593b:	83 c4 20             	add    esp,0x20
c000593e:	89 c2                	mov    edx,eax
c0005940:	b8 01 00 00 00       	mov    eax,0x1
c0005945:	85 d2                	test   edx,edx
c0005947:	0f 85 7b 01 00 00    	jne    c0005ac8 <f_sync+0x1d6>
c000594d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005955:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005958:	0f 85 11 01 00 00    	jne    c0005a6f <f_sync+0x17d>
c000595e:	89 d8                	mov    eax,ebx
c0005960:	e8 13 d6 ff ff       	call   c0002f78 <fill_first_frag>
c0005965:	85 c0                	test   eax,eax
c0005967:	0f 85 5b 01 00 00    	jne    c0005ac8 <f_sync+0x1d6>
c000596d:	83 c9 ff             	or     ecx,0xffffffff
c0005970:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 c9 d5 ff ff       	call   c0002f43 <fill_last_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 46 01 00 00    	jne    c0005ac8 <f_sync+0x1d6>
c0005982:	83 ec 0c             	sub    esp,0xc
c0005985:	68 60 04 00 00       	push   0x460
c000598a:	e8 f0 2a 00 00       	call   c000847f <ff_memalloc>
c000598f:	83 c4 10             	add    esp,0x10
c0005992:	89 c6                	mov    esi,eax
c0005994:	b8 11 00 00 00       	mov    eax,0x11
c0005999:	85 f6                	test   esi,esi
c000599b:	0f 84 27 01 00 00    	je     c0005ac8 <f_sync+0x1d6>
c00059a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059ae:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059b1:	89 da                	mov    edx,ebx
c00059b3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059b7:	e8 af df ff ff       	call   c000396b <load_obj_xdir>
c00059bc:	85 c0                	test   eax,eax
c00059be:	0f 85 95 00 00 00    	jne    c0005a59 <f_sync+0x167>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059cb:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059cf:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059d2:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059d5:	83 ca 01             	or     edx,0x1
c00059d8:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059db:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e1:	83 c0 34             	add    eax,0x34
c00059e4:	e8 d9 c2 ff ff       	call   c0001cc2 <st_dword>
c00059e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ed:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059f6:	83 c0 38             	add    eax,0x38
c00059f9:	e8 c7 c2 ff ff       	call   c0001cc5 <st_qword>
c00059fe:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a05:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a08:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a0b:	83 c0 28             	add    eax,0x28
c0005a0e:	e8 b2 c2 ff ff       	call   c0001cc5 <st_qword>
c0005a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a17:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a1c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a1f:	83 c0 0c             	add    eax,0xc
c0005a22:	e8 9b c2 ff ff       	call   c0001cc2 <st_dword>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a2e:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a32:	31 d2                	xor    edx,edx
c0005a34:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a37:	83 c0 10             	add    eax,0x10
c0005a3a:	e8 83 c2 ff ff       	call   c0001cc2 <st_dword>
c0005a3f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a43:	e8 62 e1 ff ff       	call   c0003baa <store_xdir>
c0005a48:	85 c0                	test   eax,eax
c0005a4a:	75 0d                	jne    c0005a59 <f_sync+0x167>
c0005a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a50:	e8 00 eb ff ff       	call   c0004555 <sync_fs>
c0005a55:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a5d:	83 ec 0c             	sub    esp,0xc
c0005a60:	56                   	push   esi
c0005a61:	e8 2f 2a 00 00       	call   c0008495 <ff_memfree>
c0005a66:	83 c4 10             	add    esp,0x10
c0005a69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a6d:	eb 59                	jmp    c0005ac8 <f_sync+0x1d6>
c0005a6f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a72:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a75:	e8 b0 c9 ff ff       	call   c000242a <move_window>
c0005a7a:	85 c0                	test   eax,eax
c0005a7c:	75 4a                	jne    c0005ac8 <f_sync+0x1d6>
c0005a7e:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a81:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a85:	89 f2                	mov    edx,esi
c0005a87:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a8c:	e8 5f f3 ff ff       	call   c0004df0 <st_clust.isra.1>
c0005a91:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a94:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a97:	e8 26 c2 ff ff       	call   c0001cc2 <st_dword>
c0005a9c:	8d 46 16             	lea    eax,[esi+0x16]
c0005a9f:	ba 00 00 21 50       	mov    edx,0x50210000
c0005aa4:	e8 19 c2 ff ff       	call   c0001cc2 <st_dword>
c0005aa9:	8d 46 12             	lea    eax,[esi+0x12]
c0005aac:	31 d2                	xor    edx,edx
c0005aae:	e8 0b c2 ff ff       	call   c0001cbe <st_word>
c0005ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ab7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005abf:	e8 91 ea ff ff       	call   c0004555 <sync_fs>
c0005ac4:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ac8:	83 c4 64             	add    esp,0x64
c0005acb:	5b                   	pop    ebx
c0005acc:	5e                   	pop    esi
c0005acd:	c3                   	ret    

c0005ace <f_close>:
c0005ace:	53                   	push   ebx
c0005acf:	83 ec 24             	sub    esp,0x24
c0005ad2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ad6:	53                   	push   ebx
c0005ad7:	e8 16 fe ff ff       	call   c00058f2 <f_sync>
c0005adc:	83 c4 10             	add    esp,0x10
c0005adf:	85 c0                	test   eax,eax
c0005ae1:	75 15                	jne    c0005af8 <f_close+0x2a>
c0005ae3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 61 c8 ff ff       	call   c000234f <validate>
c0005aee:	85 c0                	test   eax,eax
c0005af0:	75 06                	jne    c0005af8 <f_close+0x2a>
c0005af2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005af8:	83 c4 18             	add    esp,0x18
c0005afb:	5b                   	pop    ebx
c0005afc:	c3                   	ret    

c0005afd <f_lseek>:
c0005afd:	55                   	push   ebp
c0005afe:	57                   	push   edi
c0005aff:	56                   	push   esi
c0005b00:	53                   	push   ebx
c0005b01:	83 ec 3c             	sub    esp,0x3c
c0005b04:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b08:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b0c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b10:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b13:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b17:	89 d8                	mov    eax,ebx
c0005b19:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b1d:	e8 2d c8 ff ff       	call   c000234f <validate>
c0005b22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b26:	85 c0                	test   eax,eax
c0005b28:	0f 85 7a 04 00 00    	jne    c0005fa8 <f_lseek+0x4ab>
c0005b2e:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b36:	85 c0                	test   eax,eax
c0005b38:	0f 85 6a 04 00 00    	jne    c0005fa8 <f_lseek+0x4ab>
c0005b3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b42:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b45:	74 0c                	je     c0005b53 <f_lseek+0x56>
c0005b47:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b4a:	85 c0                	test   eax,eax
c0005b4c:	75 1f                	jne    c0005b6d <f_lseek+0x70>
c0005b4e:	e9 b5 01 00 00       	jmp    c0005d08 <f_lseek+0x20b>
c0005b53:	83 c9 ff             	or     ecx,0xffffffff
c0005b56:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b59:	89 d8                	mov    eax,ebx
c0005b5b:	e8 e3 d3 ff ff       	call   c0002f43 <fill_last_frag>
c0005b60:	85 c0                	test   eax,eax
c0005b62:	74 e3                	je     c0005b47 <f_lseek+0x4a>
c0005b64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b68:	e9 3b 04 00 00       	jmp    c0005fa8 <f_lseek+0x4ab>
c0005b6d:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b72:	0f 85 ac 00 00 00    	jne    c0005c24 <f_lseek+0x127>
c0005b78:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b7c:	0f 85 a2 00 00 00    	jne    c0005c24 <f_lseek+0x127>
c0005b82:	8d 78 04             	lea    edi,[eax+0x4]
c0005b85:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b88:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b8a:	be 02 00 00 00       	mov    esi,0x2
c0005b8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b93:	85 ed                	test   ebp,ebp
c0005b95:	74 73                	je     c0005c0a <f_lseek+0x10d>
c0005b97:	89 e9                	mov    ecx,ebp
c0005b99:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ba0:	ff 04 24             	inc    DWORD PTR [esp]
c0005ba3:	89 ca                	mov    edx,ecx
c0005ba5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba9:	89 d8                	mov    eax,ebx
c0005bab:	e8 02 d4 ff ff       	call   c0002fb2 <get_fat>
c0005bb0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bb4:	83 f8 01             	cmp    eax,0x1
c0005bb7:	77 11                	ja     c0005bca <f_lseek+0xcd>
c0005bb9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bbd:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bc5:	e9 de 03 00 00       	jmp    c0005fa8 <f_lseek+0x4ab>
c0005bca:	83 f8 ff             	cmp    eax,0xffffffff
c0005bcd:	75 11                	jne    c0005be0 <f_lseek+0xe3>
c0005bcf:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bd3:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bdb:	e9 c8 03 00 00       	jmp    c0005fa8 <f_lseek+0x4ab>
c0005be0:	8d 51 01             	lea    edx,[ecx+0x1]
c0005be3:	89 c1                	mov    ecx,eax
c0005be5:	39 c2                	cmp    edx,eax
c0005be7:	74 b7                	je     c0005ba0 <f_lseek+0xa3>
c0005be9:	83 c6 02             	add    esi,0x2
c0005bec:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bf0:	72 0b                	jb     c0005bfd <f_lseek+0x100>
c0005bf2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bf5:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bf8:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bfa:	83 c7 08             	add    edi,0x8
c0005bfd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c01:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c04:	76 04                	jbe    c0005c0a <f_lseek+0x10d>
c0005c06:	89 c5                	mov    ebp,eax
c0005c08:	eb 8d                	jmp    c0005b97 <f_lseek+0x9a>
c0005c0a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c0d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c11:	89 30                	mov    DWORD PTR [eax],esi
c0005c13:	0f 87 87 03 00 00    	ja     c0005fa0 <f_lseek+0x4a3>
c0005c19:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c1f:	e9 84 03 00 00       	jmp    c0005fa8 <f_lseek+0x4ab>
c0005c24:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c36:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c3d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c41:	73 0f                	jae    c0005c52 <f_lseek+0x155>
c0005c43:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c5a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c5d:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c64:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c68:	0f 84 3a 03 00 00    	je     c0005fa8 <f_lseek+0x4ab>
c0005c6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c72:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c76:	83 c6 ff             	add    esi,0xffffffff
c0005c79:	89 d8                	mov    eax,ebx
c0005c7b:	83 d7 ff             	adc    edi,0xffffffff
c0005c7e:	89 f2                	mov    edx,esi
c0005c80:	89 f9                	mov    ecx,edi
c0005c82:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c86:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c89:	e8 78 c2 ff ff       	call   c0001f06 <clmt_clust>
c0005c8e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c92:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c95:	89 c2                	mov    edx,eax
c0005c97:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c9b:	89 c8                	mov    eax,ecx
c0005c9d:	e8 43 c2 ff ff       	call   c0001ee5 <clst2sect>
c0005ca2:	89 d7                	mov    edi,edx
c0005ca4:	09 c7                	or     edi,eax
c0005ca6:	0f 84 0d ff ff ff    	je     c0005bb9 <f_lseek+0xbc>
c0005cac:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cb0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cb6:	0f 84 ec 02 00 00    	je     c0005fa8 <f_lseek+0x4ab>
c0005cbc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cc4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cc7:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ccb:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ccf:	4d                   	dec    ebp
c0005cd0:	31 ff                	xor    edi,edi
c0005cd2:	21 ee                	and    esi,ebp
c0005cd4:	01 c6                	add    esi,eax
c0005cd6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd9:	11 d7                	adc    edi,edx
c0005cdb:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cde:	39 fa                	cmp    edx,edi
c0005ce0:	75 08                	jne    c0005cea <f_lseek+0x1ed>
c0005ce2:	39 f0                	cmp    eax,esi
c0005ce4:	0f 84 be 02 00 00    	je     c0005fa8 <f_lseek+0x4ab>
c0005cea:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ced:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005cf1:	0f 89 80 02 00 00    	jns    c0005f77 <f_lseek+0x47a>
c0005cf7:	83 ec 0c             	sub    esp,0xc
c0005cfa:	6a 01                	push   0x1
c0005cfc:	52                   	push   edx
c0005cfd:	50                   	push   eax
c0005cfe:	55                   	push   ebp
c0005cff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d03:	e9 5a 02 00 00       	jmp    c0005f62 <f_lseek+0x465>
c0005d08:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d0c:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d0f:	74 16                	je     c0005d27 <f_lseek+0x22a>
c0005d11:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d16:	76 0f                	jbe    c0005d27 <f_lseek+0x22a>
c0005d18:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d1f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d27:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d2a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d2d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d30:	89 c7                	mov    edi,eax
c0005d32:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d36:	73 0d                	jae    c0005d45 <f_lseek+0x248>
c0005d38:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d3c:	75 07                	jne    c0005d45 <f_lseek+0x248>
c0005d3e:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d45:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d48:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d4b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d4f:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d56:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d5d:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d60:	75 09                	jne    c0005d6b <f_lseek+0x26e>
c0005d62:	31 f6                	xor    esi,esi
c0005d64:	31 ff                	xor    edi,edi
c0005d66:	e9 af 01 00 00       	jmp    c0005f1a <f_lseek+0x41d>
c0005d6b:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d6f:	89 d7                	mov    edi,edx
c0005d71:	c1 e1 09             	shl    ecx,0x9
c0005d74:	09 c7                	or     edi,eax
c0005d76:	89 cd                	mov    ebp,ecx
c0005d78:	74 6d                	je     c0005de7 <f_lseek+0x2ea>
c0005d7a:	83 c0 ff             	add    eax,0xffffffff
c0005d7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d81:	83 d2 ff             	adc    edx,0xffffffff
c0005d84:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d8b:	83 c0 ff             	add    eax,0xffffffff
c0005d8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d92:	83 d2 ff             	adc    edx,0xffffffff
c0005d95:	31 ff                	xor    edi,edi
c0005d97:	57                   	push   edi
c0005d98:	51                   	push   ecx
c0005d99:	52                   	push   edx
c0005d9a:	50                   	push   eax
c0005d9b:	e8 e4 16 02 00       	call   c0027484 <__udivdi3>
c0005da0:	83 c4 10             	add    esp,0x10
c0005da3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005da7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dab:	57                   	push   edi
c0005dac:	55                   	push   ebp
c0005dad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005db1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005db5:	e8 ca 16 02 00       	call   c0027484 <__udivdi3>
c0005dba:	83 c4 10             	add    esp,0x10
c0005dbd:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dc1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dc5:	19 d1                	sbb    ecx,edx
c0005dc7:	72 1e                	jb     c0005de7 <f_lseek+0x2ea>
c0005dc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dcd:	89 e9                	mov    ecx,ebp
c0005dcf:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dd2:	f7 d9                	neg    ecx
c0005dd4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dd7:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ddb:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dde:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005de1:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005de5:	eb 28                	jmp    c0005e0f <f_lseek+0x312>
c0005de7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dea:	85 c0                	test   eax,eax
c0005dec:	75 1e                	jne    c0005e0c <f_lseek+0x30f>
c0005dee:	31 d2                	xor    edx,edx
c0005df0:	89 d8                	mov    eax,ebx
c0005df2:	e8 a9 d4 ff ff       	call   c00032a0 <create_chain>
c0005df7:	83 f8 01             	cmp    eax,0x1
c0005dfa:	0f 84 b9 fd ff ff    	je     c0005bb9 <f_lseek+0xbc>
c0005e00:	83 f8 ff             	cmp    eax,0xffffffff
c0005e03:	0f 84 c6 fd ff ff    	je     c0005bcf <f_lseek+0xd2>
c0005e09:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e0c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e0f:	85 c0                	test   eax,eax
c0005e11:	0f 84 4b ff ff ff    	je     c0005d62 <f_lseek+0x265>
c0005e17:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e23:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e26:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e2a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e2d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e30:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e34:	0f 83 9d 00 00 00    	jae    c0005ed7 <f_lseek+0x3da>
c0005e3a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e3e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e42:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e45:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e49:	01 f2                	add    edx,esi
c0005e4b:	11 f9                	adc    ecx,edi
c0005e4d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e51:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e55:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e58:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e5b:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e5e:	f6 c1 02             	test   cl,0x2
c0005e61:	74 35                	je     c0005e98 <f_lseek+0x39b>
c0005e63:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e67:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e6a:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e6d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e71:	73 16                	jae    c0005e89 <f_lseek+0x38c>
c0005e73:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e77:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e7b:	88 ca                	mov    dl,cl
c0005e7d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e80:	83 ca 40             	or     edx,0x40
c0005e83:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e86:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e89:	89 c2                	mov    edx,eax
c0005e8b:	89 d8                	mov    eax,ebx
c0005e8d:	e8 0e d4 ff ff       	call   c00032a0 <create_chain>
c0005e92:	85 c0                	test   eax,eax
c0005e94:	75 0b                	jne    c0005ea1 <f_lseek+0x3a4>
c0005e96:	eb 30                	jmp    c0005ec8 <f_lseek+0x3cb>
c0005e98:	89 c2                	mov    edx,eax
c0005e9a:	89 d8                	mov    eax,ebx
c0005e9c:	e8 11 d1 ff ff       	call   c0002fb2 <get_fat>
c0005ea1:	83 f8 ff             	cmp    eax,0xffffffff
c0005ea4:	0f 84 25 fd ff ff    	je     c0005bcf <f_lseek+0xd2>
c0005eaa:	83 f8 01             	cmp    eax,0x1
c0005ead:	0f 86 06 fd ff ff    	jbe    c0005bb9 <f_lseek+0xbc>
c0005eb3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005eb7:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005eba:	0f 86 f9 fc ff ff    	jbe    c0005bb9 <f_lseek+0xbc>
c0005ec0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ec3:	e9 5b ff ff ff       	jmp    c0005e23 <f_lseek+0x326>
c0005ec8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ecf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ed7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eda:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ede:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ee1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ee4:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ee7:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005eed:	0f 84 6f fe ff ff    	je     c0005d62 <f_lseek+0x265>
c0005ef3:	89 c2                	mov    edx,eax
c0005ef5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ef9:	e8 e7 bf ff ff       	call   c0001ee5 <clst2sect>
c0005efe:	89 d7                	mov    edi,edx
c0005f00:	09 c7                	or     edi,eax
c0005f02:	0f 84 b1 fc ff ff    	je     c0005bb9 <f_lseek+0xbc>
c0005f08:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f0c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f0f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f13:	c1 ef 09             	shr    edi,0x9
c0005f16:	01 c6                	add    esi,eax
c0005f18:	11 d7                	adc    edi,edx
c0005f1a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f1d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f20:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f23:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f26:	19 d1                	sbb    ecx,edx
c0005f28:	73 0a                	jae    c0005f34 <f_lseek+0x437>
c0005f2a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f2d:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f30:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f34:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f39:	74 6d                	je     c0005fa8 <f_lseek+0x4ab>
c0005f3b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f3e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f41:	39 fa                	cmp    edx,edi
c0005f43:	75 04                	jne    c0005f49 <f_lseek+0x44c>
c0005f45:	39 f0                	cmp    eax,esi
c0005f47:	74 5f                	je     c0005fa8 <f_lseek+0x4ab>
c0005f49:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f4c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f50:	79 25                	jns    c0005f77 <f_lseek+0x47a>
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	52                   	push   edx
c0005f58:	50                   	push   eax
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 af bc ff ff       	call   c0001c17 <disk_write>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 5c fc ff ff    	jne    c0005bcf <f_lseek+0xd2>
c0005f73:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f77:	83 ec 0c             	sub    esp,0xc
c0005f7a:	6a 01                	push   0x1
c0005f7c:	57                   	push   edi
c0005f7d:	56                   	push   esi
c0005f7e:	55                   	push   ebp
c0005f7f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f83:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f87:	50                   	push   eax
c0005f88:	e8 74 bc ff ff       	call   c0001c01 <disk_read>
c0005f8d:	83 c4 20             	add    esp,0x20
c0005f90:	85 c0                	test   eax,eax
c0005f92:	0f 85 37 fc ff ff    	jne    c0005bcf <f_lseek+0xd2>
c0005f98:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f9b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f9e:	eb 08                	jmp    c0005fa8 <f_lseek+0x4ab>
c0005fa0:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fa8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fac:	83 c4 3c             	add    esp,0x3c
c0005faf:	5b                   	pop    ebx
c0005fb0:	5e                   	pop    esi
c0005fb1:	5f                   	pop    edi
c0005fb2:	5d                   	pop    ebp
c0005fb3:	c3                   	ret    

c0005fb4 <f_opendir>:
c0005fb4:	56                   	push   esi
c0005fb5:	b8 09 00 00 00       	mov    eax,0x9
c0005fba:	53                   	push   ebx
c0005fbb:	83 ec 24             	sub    esp,0x24
c0005fbe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fc2:	85 db                	test   ebx,ebx
c0005fc4:	0f 84 e6 00 00 00    	je     c00060b0 <f_opendir+0xfc>
c0005fca:	31 c9                	xor    ecx,ecx
c0005fcc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fd0:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fd4:	e8 03 c7 ff ff       	call   c00026dc <mount_volume>
c0005fd9:	85 c0                	test   eax,eax
c0005fdb:	0f 85 c9 00 00 00    	jne    c00060aa <f_opendir+0xf6>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	83 ec 0c             	sub    esp,0xc
c0005fe8:	89 03                	mov    DWORD PTR [ebx],eax
c0005fea:	68 60 04 00 00       	push   0x460
c0005fef:	e8 8b 24 00 00       	call   c000847f <ff_memalloc>
c0005ff4:	83 c4 10             	add    esp,0x10
c0005ff7:	89 c6                	mov    esi,eax
c0005ff9:	b8 11 00 00 00       	mov    eax,0x11
c0005ffe:	85 f6                	test   esi,esi
c0006000:	0f 84 aa 00 00 00    	je     c00060b0 <f_opendir+0xfc>
c0006006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000600a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006010:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006013:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006016:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000601a:	89 d8                	mov    eax,ebx
c000601c:	e8 31 ee ff ff       	call   c0004e52 <follow_path>
c0006021:	85 c0                	test   eax,eax
c0006023:	75 61                	jne    c0006086 <f_opendir+0xd2>
c0006025:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006029:	78 46                	js     c0006071 <f_opendir+0xbd>
c000602b:	b8 05 00 00 00       	mov    eax,0x5
c0006030:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006034:	74 50                	je     c0006086 <f_opendir+0xd2>
c0006036:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000603a:	8a 01                	mov    al,BYTE PTR [ecx]
c000603c:	3c 04                	cmp    al,0x4
c000603e:	75 26                	jne    c0006066 <f_opendir+0xb2>
c0006040:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006043:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006046:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006049:	30 d2                	xor    dl,dl
c000604b:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000604f:	09 c2                	or     edx,eax
c0006051:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006054:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006057:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000605a:	89 da                	mov    edx,ebx
c000605c:	8d 41 10             	lea    eax,[ecx+0x10]
c000605f:	e8 b4 ed ff ff       	call   c0004e18 <init_alloc_info.isra.2>
c0006064:	eb 0b                	jmp    c0006071 <f_opendir+0xbd>
c0006066:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006069:	e8 59 ed ff ff       	call   c0004dc7 <ld_clust.isra.0>
c000606e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006071:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006075:	31 d2                	xor    edx,edx
c0006077:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000607b:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000607f:	89 d8                	mov    eax,ebx
c0006081:	e8 22 d1 ff ff       	call   c00031a8 <dir_sdi>
c0006086:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000608a:	83 ec 0c             	sub    esp,0xc
c000608d:	56                   	push   esi
c000608e:	e8 02 24 00 00       	call   c0008495 <ff_memfree>
c0006093:	83 c4 10             	add    esp,0x10
c0006096:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000609a:	83 f8 04             	cmp    eax,0x4
c000609d:	74 06                	je     c00060a5 <f_opendir+0xf1>
c000609f:	85 c0                	test   eax,eax
c00060a1:	74 0d                	je     c00060b0 <f_opendir+0xfc>
c00060a3:	eb 05                	jmp    c00060aa <f_opendir+0xf6>
c00060a5:	b8 05 00 00 00       	mov    eax,0x5
c00060aa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060b0:	83 c4 24             	add    esp,0x24
c00060b3:	5b                   	pop    ebx
c00060b4:	5e                   	pop    esi
c00060b5:	c3                   	ret    

c00060b6 <f_closedir>:
c00060b6:	53                   	push   ebx
c00060b7:	83 ec 18             	sub    esp,0x18
c00060ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060be:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060c2:	89 d8                	mov    eax,ebx
c00060c4:	e8 86 c2 ff ff       	call   c000234f <validate>
c00060c9:	85 c0                	test   eax,eax
c00060cb:	75 06                	jne    c00060d3 <f_closedir+0x1d>
c00060cd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060d3:	83 c4 18             	add    esp,0x18
c00060d6:	5b                   	pop    ebx
c00060d7:	c3                   	ret    

c00060d8 <f_readdir>:
c00060d8:	57                   	push   edi
c00060d9:	56                   	push   esi
c00060da:	53                   	push   ebx
c00060db:	83 ec 20             	sub    esp,0x20
c00060de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060e2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060e6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ea:	89 d8                	mov    eax,ebx
c00060ec:	e8 5e c2 ff ff       	call   c000234f <validate>
c00060f1:	85 c0                	test   eax,eax
c00060f3:	75 77                	jne    c000616c <f_readdir+0x94>
c00060f5:	85 ff                	test   edi,edi
c00060f7:	75 0b                	jne    c0006104 <f_readdir+0x2c>
c00060f9:	31 d2                	xor    edx,edx
c00060fb:	89 d8                	mov    eax,ebx
c00060fd:	e8 a6 d0 ff ff       	call   c00031a8 <dir_sdi>
c0006102:	eb 68                	jmp    c000616c <f_readdir+0x94>
c0006104:	83 ec 0c             	sub    esp,0xc
c0006107:	68 60 04 00 00       	push   0x460
c000610c:	e8 6e 23 00 00       	call   c000847f <ff_memalloc>
c0006111:	83 c4 10             	add    esp,0x10
c0006114:	89 c6                	mov    esi,eax
c0006116:	b8 11 00 00 00       	mov    eax,0x11
c000611b:	85 f6                	test   esi,esi
c000611d:	74 4d                	je     c000616c <f_readdir+0x94>
c000611f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006123:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006129:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000612c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000612f:	31 d2                	xor    edx,edx
c0006131:	89 d8                	mov    eax,ebx
c0006133:	e8 80 d8 ff ff       	call   c00039b8 <dir_read>
c0006138:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000613d:	75 19                	jne    c0006158 <f_readdir+0x80>
c000613f:	89 fa                	mov    edx,edi
c0006141:	89 d8                	mov    eax,ebx
c0006143:	e8 7e ea ff ff       	call   c0004bc6 <get_fileinfo>
c0006148:	31 d2                	xor    edx,edx
c000614a:	89 d8                	mov    eax,ebx
c000614c:	e8 af d5 ff ff       	call   c0003700 <dir_next>
c0006151:	83 f8 04             	cmp    eax,0x4
c0006154:	75 02                	jne    c0006158 <f_readdir+0x80>
c0006156:	31 c0                	xor    eax,eax
c0006158:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000615c:	83 ec 0c             	sub    esp,0xc
c000615f:	56                   	push   esi
c0006160:	e8 30 23 00 00       	call   c0008495 <ff_memfree>
c0006165:	83 c4 10             	add    esp,0x10
c0006168:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000616c:	83 c4 20             	add    esp,0x20
c000616f:	5b                   	pop    ebx
c0006170:	5e                   	pop    esi
c0006171:	5f                   	pop    edi
c0006172:	c3                   	ret    

c0006173 <f_stat>:
c0006173:	57                   	push   edi
c0006174:	31 c9                	xor    ecx,ecx
c0006176:	56                   	push   esi
c0006177:	53                   	push   ebx
c0006178:	83 ec 50             	sub    esp,0x50
c000617b:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000617f:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006183:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006187:	e8 50 c5 ff ff       	call   c00026dc <mount_volume>
c000618c:	89 c3                	mov    ebx,eax
c000618e:	85 c0                	test   eax,eax
c0006190:	75 67                	jne    c00061f9 <f_stat+0x86>
c0006192:	83 ec 0c             	sub    esp,0xc
c0006195:	bb 11 00 00 00       	mov    ebx,0x11
c000619a:	68 60 04 00 00       	push   0x460
c000619f:	e8 db 22 00 00       	call   c000847f <ff_memalloc>
c00061a4:	83 c4 10             	add    esp,0x10
c00061a7:	89 c6                	mov    esi,eax
c00061a9:	85 c0                	test   eax,eax
c00061ab:	74 4c                	je     c00061f9 <f_stat+0x86>
c00061ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061b1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061b7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061ba:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061bd:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061c1:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061c5:	e8 88 ec ff ff       	call   c0004e52 <follow_path>
c00061ca:	89 c3                	mov    ebx,eax
c00061cc:	85 c0                	test   eax,eax
c00061ce:	75 1d                	jne    c00061ed <f_stat+0x7a>
c00061d0:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061d5:	78 11                	js     c00061e8 <f_stat+0x75>
c00061d7:	85 ff                	test   edi,edi
c00061d9:	74 12                	je     c00061ed <f_stat+0x7a>
c00061db:	89 fa                	mov    edx,edi
c00061dd:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061e1:	e8 e0 e9 ff ff       	call   c0004bc6 <get_fileinfo>
c00061e6:	eb 05                	jmp    c00061ed <f_stat+0x7a>
c00061e8:	bb 06 00 00 00       	mov    ebx,0x6
c00061ed:	83 ec 0c             	sub    esp,0xc
c00061f0:	56                   	push   esi
c00061f1:	e8 9f 22 00 00       	call   c0008495 <ff_memfree>
c00061f6:	83 c4 10             	add    esp,0x10
c00061f9:	83 c4 50             	add    esp,0x50
c00061fc:	89 d8                	mov    eax,ebx
c00061fe:	5b                   	pop    ebx
c00061ff:	5e                   	pop    esi
c0006200:	5f                   	pop    edi
c0006201:	c3                   	ret    

c0006202 <f_getfree>:
c0006202:	55                   	push   ebp
c0006203:	31 c9                	xor    ecx,ecx
c0006205:	57                   	push   edi
c0006206:	56                   	push   esi
c0006207:	53                   	push   ebx
c0006208:	83 ec 5c             	sub    esp,0x5c
c000620b:	8d 54 24 24          	lea    edx,[esp+0x24]
c000620f:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006213:	e8 c4 c4 ff ff       	call   c00026dc <mount_volume>
c0006218:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000621c:	85 c0                	test   eax,eax
c000621e:	0f 85 9d 01 00 00    	jne    c00063c1 <f_getfree+0x1bf>
c0006224:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006228:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000622c:	89 02                	mov    DWORD PTR [edx],eax
c000622e:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006231:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006234:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006237:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000623b:	39 f2                	cmp    edx,esi
c000623d:	77 0b                	ja     c000624a <f_getfree+0x48>
c000623f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006243:	89 10                	mov    DWORD PTR [eax],edx
c0006245:	e9 77 01 00 00       	jmp    c00063c1 <f_getfree+0x1bf>
c000624a:	8a 10                	mov    dl,BYTE PTR [eax]
c000624c:	80 fa 01             	cmp    dl,0x1
c000624f:	75 3a                	jne    c000628b <f_getfree+0x89>
c0006251:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006255:	be 02 00 00 00       	mov    esi,0x2
c000625a:	31 db                	xor    ebx,ebx
c000625c:	89 f2                	mov    edx,esi
c000625e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006262:	e8 4b cd ff ff       	call   c0002fb2 <get_fat>
c0006267:	83 f8 ff             	cmp    eax,0xffffffff
c000626a:	0f 84 28 01 00 00    	je     c0006398 <f_getfree+0x196>
c0006270:	83 f8 01             	cmp    eax,0x1
c0006273:	0f 84 29 01 00 00    	je     c00063a2 <f_getfree+0x1a0>
c0006279:	83 d3 00             	adc    ebx,0x0
c000627c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006280:	46                   	inc    esi
c0006281:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006284:	77 d6                	ja     c000625c <f_getfree+0x5a>
c0006286:	e9 25 01 00 00       	jmp    c00063b0 <f_getfree+0x1ae>
c000628b:	80 fa 04             	cmp    dl,0x4
c000628e:	0f 85 88 00 00 00    	jne    c000631c <f_getfree+0x11a>
c0006294:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006297:	31 ed                	xor    ebp,ebp
c0006299:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000629c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062a4:	31 db                	xor    ebx,ebx
c00062a6:	85 ed                	test   ebp,ebp
c00062a8:	75 3f                	jne    c00062e9 <f_getfree+0xe7>
c00062aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062b2:	83 c0 01             	add    eax,0x1
c00062b5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062b9:	83 d2 00             	adc    edx,0x0
c00062bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062cc:	e8 59 c1 ff ff       	call   c000242a <move_window>
c00062d1:	85 c0                	test   eax,eax
c00062d3:	0f 85 d3 00 00 00    	jne    c00063ac <f_getfree+0x1aa>
c00062d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062ed:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062f0:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062f4:	89 cf                	mov    edi,ecx
c00062f6:	85 f6                	test   esi,esi
c00062f8:	74 12                	je     c000630c <f_getfree+0x10a>
c00062fa:	88 c1                	mov    cl,al
c00062fc:	83 e1 01             	and    ecx,0x1
c00062ff:	80 f9 01             	cmp    cl,0x1
c0006302:	83 d3 00             	adc    ebx,0x0
c0006305:	d0 e8                	shr    al,1
c0006307:	4e                   	dec    esi
c0006308:	39 fe                	cmp    esi,edi
c000630a:	75 ea                	jne    c00062f6 <f_getfree+0xf4>
c000630c:	45                   	inc    ebp
c000630d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006313:	85 f6                	test   esi,esi
c0006315:	75 8f                	jne    c00062a6 <f_getfree+0xa4>
c0006317:	e9 94 00 00 00       	jmp    c00063b0 <f_getfree+0x1ae>
c000631c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000631f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006322:	31 f6                	xor    esi,esi
c0006324:	31 db                	xor    ebx,ebx
c0006326:	85 f6                	test   esi,esi
c0006328:	75 1b                	jne    c0006345 <f_getfree+0x143>
c000632a:	89 d7                	mov    edi,edx
c000632c:	89 cd                	mov    ebp,ecx
c000632e:	83 c7 01             	add    edi,0x1
c0006331:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006335:	83 d5 00             	adc    ebp,0x0
c0006338:	e8 ed c0 ff ff       	call   c000242a <move_window>
c000633d:	85 c0                	test   eax,eax
c000633f:	75 6b                	jne    c00063ac <f_getfree+0x1aa>
c0006341:	89 fa                	mov    edx,edi
c0006343:	89 e9                	mov    ecx,ebp
c0006345:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006349:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000634d:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006351:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006354:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006358:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000635c:	75 11                	jne    c000636f <f_getfree+0x16d>
c000635e:	e8 e9 b8 ff ff       	call   c0001c4c <ld_word>
c0006363:	66 83 f8 01          	cmp    ax,0x1
c0006367:	83 d3 00             	adc    ebx,0x0
c000636a:	83 c6 02             	add    esi,0x2
c000636d:	eb 13                	jmp    c0006382 <f_getfree+0x180>
c000636f:	e8 e5 b8 ff ff       	call   c0001c59 <ld_dword>
c0006374:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006379:	83 f8 01             	cmp    eax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 04             	add    esi,0x4
c0006382:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006388:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000638c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006390:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006394:	75 90                	jne    c0006326 <f_getfree+0x124>
c0006396:	eb 18                	jmp    c00063b0 <f_getfree+0x1ae>
c0006398:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063a0:	eb 0e                	jmp    c00063b0 <f_getfree+0x1ae>
c00063a2:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063aa:	eb 04                	jmp    c00063b0 <f_getfree+0x1ae>
c00063ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063b0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063b4:	89 18                	mov    DWORD PTR [eax],ebx
c00063b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063ba:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063bd:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063c5:	83 c4 5c             	add    esp,0x5c
c00063c8:	5b                   	pop    ebx
c00063c9:	5e                   	pop    esi
c00063ca:	5f                   	pop    edi
c00063cb:	5d                   	pop    ebp
c00063cc:	c3                   	ret    

c00063cd <f_truncate>:
c00063cd:	56                   	push   esi
c00063ce:	53                   	push   ebx
c00063cf:	83 ec 14             	sub    esp,0x14
c00063d2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063d6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063da:	89 d8                	mov    eax,ebx
c00063dc:	e8 6e bf ff ff       	call   c000234f <validate>
c00063e1:	89 c6                	mov    esi,eax
c00063e3:	85 c0                	test   eax,eax
c00063e5:	0f 85 d2 00 00 00    	jne    c00064bd <f_truncate+0xf0>
c00063eb:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ef:	85 f6                	test   esi,esi
c00063f1:	0f 85 c6 00 00 00    	jne    c00064bd <f_truncate+0xf0>
c00063f7:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063fb:	0f 84 b7 00 00 00    	je     c00064b8 <f_truncate+0xeb>
c0006401:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006404:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006407:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000640a:	89 d1                	mov    ecx,edx
c000640c:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000640f:	0f 83 a8 00 00 00    	jae    c00064bd <f_truncate+0xf0>
c0006415:	09 c2                	or     edx,eax
c0006417:	75 15                	jne    c000642e <f_truncate+0x61>
c0006419:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000641c:	31 c9                	xor    ecx,ecx
c000641e:	89 d8                	mov    eax,ebx
c0006420:	e8 7a d0 ff ff       	call   c000349f <remove_chain>
c0006425:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000642c:	eb 35                	jmp    c0006463 <f_truncate+0x96>
c000642e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006431:	89 d8                	mov    eax,ebx
c0006433:	e8 7a cb ff ff       	call   c0002fb2 <get_fat>
c0006438:	89 c2                	mov    edx,eax
c000643a:	b8 01 00 00 00       	mov    eax,0x1
c000643f:	83 fa ff             	cmp    edx,0xffffffff
c0006442:	74 1f                	je     c0006463 <f_truncate+0x96>
c0006444:	b8 02 00 00 00       	mov    eax,0x2
c0006449:	83 fa 01             	cmp    edx,0x1
c000644c:	74 15                	je     c0006463 <f_truncate+0x96>
c000644e:	31 c0                	xor    eax,eax
c0006450:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006454:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006457:	76 0a                	jbe    c0006463 <f_truncate+0x96>
c0006459:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000645c:	89 d8                	mov    eax,ebx
c000645e:	e8 3c d0 ff ff       	call   c000349f <remove_chain>
c0006463:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006466:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006469:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000646c:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000646f:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006472:	83 ca 40             	or     edx,0x40
c0006475:	85 c0                	test   eax,eax
c0006477:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000647a:	75 35                	jne    c00064b1 <f_truncate+0xe4>
c000647c:	84 d2                	test   dl,dl
c000647e:	79 3d                	jns    c00064bd <f_truncate+0xf0>
c0006480:	83 ec 0c             	sub    esp,0xc
c0006483:	8d 43 50             	lea    eax,[ebx+0x50]
c0006486:	6a 01                	push   0x1
c0006488:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000648b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000648e:	50                   	push   eax
c000648f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006493:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006497:	50                   	push   eax
c0006498:	e8 7a b7 ff ff       	call   c0001c17 <disk_write>
c000649d:	83 c4 20             	add    esp,0x20
c00064a0:	85 c0                	test   eax,eax
c00064a2:	75 08                	jne    c00064ac <f_truncate+0xdf>
c00064a4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064a8:	31 f6                	xor    esi,esi
c00064aa:	eb 11                	jmp    c00064bd <f_truncate+0xf0>
c00064ac:	b8 01 00 00 00       	mov    eax,0x1
c00064b1:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064b4:	89 c6                	mov    esi,eax
c00064b6:	eb 05                	jmp    c00064bd <f_truncate+0xf0>
c00064b8:	be 07 00 00 00       	mov    esi,0x7
c00064bd:	89 f0                	mov    eax,esi
c00064bf:	83 c4 14             	add    esp,0x14
c00064c2:	5b                   	pop    ebx
c00064c3:	5e                   	pop    esi
c00064c4:	c3                   	ret    

c00064c5 <f_unlink>:
c00064c5:	56                   	push   esi
c00064c6:	b9 02 00 00 00       	mov    ecx,0x2
c00064cb:	53                   	push   ebx
c00064cc:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064d2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064d6:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064dd:	e8 fa c1 ff ff       	call   c00026dc <mount_volume>
c00064e2:	85 c0                	test   eax,eax
c00064e4:	0f 85 55 01 00 00    	jne    c000663f <f_unlink+0x17a>
c00064ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064ee:	83 ec 0c             	sub    esp,0xc
c00064f1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064f5:	68 60 04 00 00       	push   0x460
c00064fa:	e8 80 1f 00 00       	call   c000847f <ff_memalloc>
c00064ff:	83 c4 10             	add    esp,0x10
c0006502:	89 c3                	mov    ebx,eax
c0006504:	b8 11 00 00 00       	mov    eax,0x11
c0006509:	85 db                	test   ebx,ebx
c000650b:	0f 84 2e 01 00 00    	je     c000663f <f_unlink+0x17a>
c0006511:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006515:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000651b:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000651e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006521:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006528:	8d 44 24 48          	lea    eax,[esp+0x48]
c000652c:	e8 21 e9 ff ff       	call   c0004e52 <follow_path>
c0006531:	85 c0                	test   eax,eax
c0006533:	0f 85 f2 00 00 00    	jne    c000662b <f_unlink+0x166>
c0006539:	b8 06 00 00 00       	mov    eax,0x6
c000653e:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006546:	0f 88 df 00 00 00    	js     c000662b <f_unlink+0x166>
c000654c:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006551:	74 0a                	je     c000655d <f_unlink+0x98>
c0006553:	b8 07 00 00 00       	mov    eax,0x7
c0006558:	e9 ce 00 00 00       	jmp    c000662b <f_unlink+0x166>
c000655d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006561:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006565:	8a 02                	mov    al,BYTE PTR [edx]
c0006567:	3c 04                	cmp    al,0x4
c0006569:	75 12                	jne    c000657d <f_unlink+0xb8>
c000656b:	8d 42 10             	lea    eax,[edx+0x10]
c000656e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006572:	e8 a1 e8 ff ff       	call   c0004e18 <init_alloc_info.isra.2>
c0006577:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000657b:	eb 0e                	jmp    c000658b <f_unlink+0xc6>
c000657d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006584:	e8 3e e8 ff ff       	call   c0004dc7 <ld_clust.isra.0>
c0006589:	89 c6                	mov    esi,eax
c000658b:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006590:	75 12                	jne    c00065a4 <f_unlink+0xdf>
c0006592:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006596:	e8 94 d6 ff ff       	call   c0003c2f <dir_remove>
c000659b:	85 c0                	test   eax,eax
c000659d:	74 6c                	je     c000660b <f_unlink+0x146>
c000659f:	e9 87 00 00 00       	jmp    c000662b <f_unlink+0x166>
c00065a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065a8:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065af:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065b6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b9:	75 21                	jne    c00065dc <f_unlink+0x117>
c00065bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065bf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065c3:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065ca:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065d1:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065d5:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065dc:	31 d2                	xor    edx,edx
c00065de:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065e5:	e8 be cb ff ff       	call   c00031a8 <dir_sdi>
c00065ea:	85 c0                	test   eax,eax
c00065ec:	75 3d                	jne    c000662b <f_unlink+0x166>
c00065ee:	31 d2                	xor    edx,edx
c00065f0:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065f7:	e8 bc d3 ff ff       	call   c00039b8 <dir_read>
c00065fc:	85 c0                	test   eax,eax
c00065fe:	0f 84 4f ff ff ff    	je     c0006553 <f_unlink+0x8e>
c0006604:	83 f8 04             	cmp    eax,0x4
c0006607:	75 22                	jne    c000662b <f_unlink+0x166>
c0006609:	eb 87                	jmp    c0006592 <f_unlink+0xcd>
c000660b:	85 f6                	test   esi,esi
c000660d:	75 0b                	jne    c000661a <f_unlink+0x155>
c000660f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006613:	e8 3d df ff ff       	call   c0004555 <sync_fs>
c0006618:	eb 11                	jmp    c000662b <f_unlink+0x166>
c000661a:	31 c9                	xor    ecx,ecx
c000661c:	89 f2                	mov    edx,esi
c000661e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006622:	e8 78 ce ff ff       	call   c000349f <remove_chain>
c0006627:	85 c0                	test   eax,eax
c0006629:	74 e4                	je     c000660f <f_unlink+0x14a>
c000662b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000662f:	83 ec 0c             	sub    esp,0xc
c0006632:	53                   	push   ebx
c0006633:	e8 5d 1e 00 00       	call   c0008495 <ff_memfree>
c0006638:	83 c4 10             	add    esp,0x10
c000663b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000663f:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006645:	5b                   	pop    ebx
c0006646:	5e                   	pop    esi
c0006647:	c3                   	ret    

c0006648 <f_mkdir>:
c0006648:	57                   	push   edi
c0006649:	b9 02 00 00 00       	mov    ecx,0x2
c000664e:	56                   	push   esi
c000664f:	53                   	push   ebx
c0006650:	83 c4 80             	add    esp,0xffffff80
c0006653:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006657:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000665e:	e8 79 c0 ff ff       	call   c00026dc <mount_volume>
c0006663:	89 c3                	mov    ebx,eax
c0006665:	85 c0                	test   eax,eax
c0006667:	0f 85 fe 01 00 00    	jne    c000686b <f_mkdir+0x223>
c000666d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006671:	bb 11 00 00 00       	mov    ebx,0x11
c0006676:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000667a:	83 ec 0c             	sub    esp,0xc
c000667d:	68 60 04 00 00       	push   0x460
c0006682:	e8 f8 1d 00 00       	call   c000847f <ff_memalloc>
c0006687:	83 c4 10             	add    esp,0x10
c000668a:	89 c7                	mov    edi,eax
c000668c:	85 c0                	test   eax,eax
c000668e:	0f 84 d7 01 00 00    	je     c000686b <f_mkdir+0x223>
c0006694:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006698:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000669e:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066a1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a4:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066ab:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066af:	e8 9e e7 ff ff       	call   c0004e52 <follow_path>
c00066b4:	89 c3                	mov    ebx,eax
c00066b6:	85 c0                	test   eax,eax
c00066b8:	74 3e                	je     c00066f8 <f_mkdir+0xb0>
c00066ba:	83 f8 04             	cmp    eax,0x4
c00066bd:	75 3e                	jne    c00066fd <f_mkdir+0xb5>
c00066bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c3:	31 d2                	xor    edx,edx
c00066c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cd:	e8 ce cb ff ff       	call   c00032a0 <create_chain>
c00066d2:	89 c6                	mov    esi,eax
c00066d4:	85 c0                	test   eax,eax
c00066d6:	74 0c                	je     c00066e4 <f_mkdir+0x9c>
c00066d8:	bb 02 00 00 00       	mov    ebx,0x2
c00066dd:	83 f8 01             	cmp    eax,0x1
c00066e0:	74 07                	je     c00066e9 <f_mkdir+0xa1>
c00066e2:	eb 2a                	jmp    c000670e <f_mkdir+0xc6>
c00066e4:	bb 07 00 00 00       	mov    ebx,0x7
c00066e9:	31 c9                	xor    ecx,ecx
c00066eb:	89 f2                	mov    edx,esi
c00066ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066f1:	e8 a9 cd ff ff       	call   c000349f <remove_chain>
c00066f6:	eb 05                	jmp    c00066fd <f_mkdir+0xb5>
c00066f8:	bb 08 00 00 00       	mov    ebx,0x8
c00066fd:	83 ec 0c             	sub    esp,0xc
c0006700:	57                   	push   edi
c0006701:	e8 8f 1d 00 00       	call   c0008495 <ff_memfree>
c0006706:	83 c4 10             	add    esp,0x10
c0006709:	e9 5d 01 00 00       	jmp    c000686b <f_mkdir+0x223>
c000670e:	bb 01 00 00 00       	mov    ebx,0x1
c0006713:	83 f8 ff             	cmp    eax,0xffffffff
c0006716:	74 d1                	je     c00066e9 <f_mkdir+0xa1>
c0006718:	89 f2                	mov    edx,esi
c000671a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000671e:	e8 c4 ce ff ff       	call   c00035e7 <dir_clear>
c0006723:	89 c3                	mov    ebx,eax
c0006725:	85 c0                	test   eax,eax
c0006727:	75 c0                	jne    c00066e9 <f_mkdir+0xa1>
c0006729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000672d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006730:	74 69                	je     c000679b <f_mkdir+0x153>
c0006732:	b9 0b 00 00 00       	mov    ecx,0xb
c0006737:	83 c0 54             	add    eax,0x54
c000673a:	ba 20 00 00 00       	mov    edx,0x20
c000673f:	e8 9c b5 ff ff       	call   c0001ce0 <mem_set>
c0006744:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006748:	ba 00 00 21 50       	mov    edx,0x50210000
c000674d:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006751:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006755:	83 c0 6a             	add    eax,0x6a
c0006758:	e8 65 b5 ff ff       	call   c0001cc2 <st_dword>
c000675d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006761:	89 f1                	mov    ecx,esi
c0006763:	8d 50 54             	lea    edx,[eax+0x54]
c0006766:	e8 85 e6 ff ff       	call   c0004df0 <st_clust.isra.1>
c000676b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676f:	b9 20 00 00 00       	mov    ecx,0x20
c0006774:	8d 50 54             	lea    edx,[eax+0x54]
c0006777:	83 c0 74             	add    eax,0x74
c000677a:	e8 4c b5 ff ff       	call   c0001ccb <mem_cpy>
c000677f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006783:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006787:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000678b:	8d 50 74             	lea    edx,[eax+0x74]
c000678e:	e8 5d e6 ff ff       	call   c0004df0 <st_clust.isra.1>
c0006793:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006797:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000679b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000679f:	e8 2f db ff ff       	call   c00042d3 <dir_register>
c00067a4:	89 c3                	mov    ebx,eax
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 85 3b ff ff ff    	jne    c00066e9 <f_mkdir+0xa1>
c00067ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067b5:	75 74                	jne    c000682b <f_mkdir+0x1e3>
c00067b7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ba:	ba 00 00 21 50       	mov    edx,0x50210000
c00067bf:	83 c0 0c             	add    eax,0xc
c00067c2:	e8 fb b4 ff ff       	call   c0001cc2 <st_dword>
c00067c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cb:	89 f2                	mov    edx,esi
c00067cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d0:	83 c0 34             	add    eax,0x34
c00067d3:	e8 ea b4 ff ff       	call   c0001cc2 <st_dword>
c00067d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067dc:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067e0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e3:	c1 e2 09             	shl    edx,0x9
c00067e6:	83 c0 38             	add    eax,0x38
c00067e9:	e8 d4 b4 ff ff       	call   c0001cc2 <st_dword>
c00067ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f2:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f9:	c1 e2 09             	shl    edx,0x9
c00067fc:	83 c0 28             	add    eax,0x28
c00067ff:	e8 be b4 ff ff       	call   c0001cc2 <st_dword>
c0006804:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006808:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000680b:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000680f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006812:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006816:	8d 44 24 34          	lea    eax,[esp+0x34]
c000681a:	e8 8b d3 ff ff       	call   c0003baa <store_xdir>
c000681f:	89 c3                	mov    ebx,eax
c0006821:	85 c0                	test   eax,eax
c0006823:	0f 85 d4 fe ff ff    	jne    c00066fd <f_mkdir+0xb5>
c0006829:	eb 30                	jmp    c000685b <f_mkdir+0x213>
c000682b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006834:	83 c0 16             	add    eax,0x16
c0006837:	e8 86 b4 ff ff       	call   c0001cc2 <st_dword>
c000683c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006840:	89 f1                	mov    ecx,esi
c0006842:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006846:	e8 a5 e5 ff ff       	call   c0004df0 <st_clust.isra.1>
c000684b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000684f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006857:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000685b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000685f:	e8 f1 dc ff ff       	call   c0004555 <sync_fs>
c0006864:	89 c3                	mov    ebx,eax
c0006866:	e9 92 fe ff ff       	jmp    c00066fd <f_mkdir+0xb5>
c000686b:	83 ec 80             	sub    esp,0xffffff80
c000686e:	89 d8                	mov    eax,ebx
c0006870:	5b                   	pop    ebx
c0006871:	5e                   	pop    esi
c0006872:	5f                   	pop    edi
c0006873:	c3                   	ret    

c0006874 <f_rename>:
c0006874:	55                   	push   ebp
c0006875:	57                   	push   edi
c0006876:	56                   	push   esi
c0006877:	53                   	push   ebx
c0006878:	81 ec fc 00 00 00    	sub    esp,0xfc
c000687e:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006885:	e8 a4 b9 ff ff       	call   c000222e <get_ldnumber>
c000688a:	b9 02 00 00 00       	mov    ecx,0x2
c000688f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006893:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000689a:	e8 3d be ff ff       	call   c00026dc <mount_volume>
c000689f:	85 c0                	test   eax,eax
c00068a1:	0f 85 b5 02 00 00    	jne    c0006b5c <f_rename+0x2e8>
c00068a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ab:	83 ec 0c             	sub    esp,0xc
c00068ae:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068b2:	68 60 04 00 00       	push   0x460
c00068b7:	e8 c3 1b 00 00       	call   c000847f <ff_memalloc>
c00068bc:	83 c4 10             	add    esp,0x10
c00068bf:	89 c3                	mov    ebx,eax
c00068c1:	b8 11 00 00 00       	mov    eax,0x11
c00068c6:	85 db                	test   ebx,ebx
c00068c8:	0f 84 8e 02 00 00    	je     c0006b5c <f_rename+0x2e8>
c00068ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068d8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068db:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068de:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068e5:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e9:	e8 64 e5 ff ff       	call   c0004e52 <follow_path>
c00068ee:	85 c0                	test   eax,eax
c00068f0:	0f 85 52 02 00 00    	jne    c0006b48 <f_rename+0x2d4>
c00068f6:	b8 06 00 00 00       	mov    eax,0x6
c00068fb:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006903:	0f 85 3f 02 00 00    	jne    c0006b48 <f_rename+0x2d4>
c0006909:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000690d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006910:	0f 85 05 01 00 00    	jne    c0006a1b <f_rename+0x1a7>
c0006916:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006919:	b9 40 00 00 00       	mov    ecx,0x40
c000691e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006922:	e8 a4 b3 ff ff       	call   c0001ccb <mem_cpy>
c0006927:	b9 4c 00 00 00       	mov    ecx,0x4c
c000692c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006930:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006937:	e8 8f b3 ff ff       	call   c0001ccb <mem_cpy>
c000693c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006943:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694a:	e8 03 e5 ff ff       	call   c0004e52 <follow_path>
c000694f:	85 c0                	test   eax,eax
c0006951:	75 29                	jne    c000697c <f_rename+0x108>
c0006953:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006957:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000695e:	74 0a                	je     c000696a <f_rename+0xf6>
c0006960:	b8 08 00 00 00       	mov    eax,0x8
c0006965:	e9 de 01 00 00       	jmp    c0006b48 <f_rename+0x2d4>
c000696a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006971:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006978:	75 e6                	jne    c0006960 <f_rename+0xec>
c000697a:	eb 09                	jmp    c0006985 <f_rename+0x111>
c000697c:	83 f8 04             	cmp    eax,0x4
c000697f:	0f 85 c3 01 00 00    	jne    c0006b48 <f_rename+0x2d4>
c0006985:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000698c:	e8 42 d9 ff ff       	call   c00042d3 <dir_register>
c0006991:	85 c0                	test   eax,eax
c0006993:	0f 85 af 01 00 00    	jne    c0006b48 <f_rename+0x2d4>
c0006999:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000699d:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069a0:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069a3:	89 c5                	mov    ebp,eax
c00069a5:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069ac:	8d 46 24             	lea    eax,[esi+0x24]
c00069af:	e8 98 b2 ff ff       	call   c0001c4c <ld_word>
c00069b4:	b9 40 00 00 00       	mov    ecx,0x40
c00069b9:	89 c7                	mov    edi,eax
c00069bb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069bf:	89 f0                	mov    eax,esi
c00069c1:	e8 05 b3 ff ff       	call   c0001ccb <mem_cpy>
c00069c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ca:	89 e9                	mov    ecx,ebp
c00069cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069cf:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069d2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069da:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069dd:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069e0:	0f b7 d7             	movzx  edx,di
c00069e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e6:	83 c0 24             	add    eax,0x24
c00069e9:	e8 d0 b2 ff ff       	call   c0001cbe <st_word>
c00069ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069f2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f5:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069f8:	a8 10                	test   al,0x10
c00069fa:	75 06                	jne    c0006a02 <f_rename+0x18e>
c00069fc:	83 c8 20             	or     eax,0x20
c00069ff:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a02:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a09:	e8 9c d1 ff ff       	call   c0003baa <store_xdir>
c0006a0e:	85 c0                	test   eax,eax
c0006a10:	0f 84 1c 01 00 00    	je     c0006b32 <f_rename+0x2be>
c0006a16:	e9 2d 01 00 00       	jmp    c0006b48 <f_rename+0x2d4>
c0006a1b:	b9 20 00 00 00       	mov    ecx,0x20
c0006a20:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a2b:	e8 9b b2 ff ff       	call   c0001ccb <mem_cpy>
c0006a30:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a35:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a39:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a40:	e8 86 b2 ff ff       	call   c0001ccb <mem_cpy>
c0006a45:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a4c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a53:	e8 fa e3 ff ff       	call   c0004e52 <follow_path>
c0006a58:	85 c0                	test   eax,eax
c0006a5a:	75 27                	jne    c0006a83 <f_rename+0x20f>
c0006a5c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a60:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a67:	0f 85 f3 fe ff ff    	jne    c0006960 <f_rename+0xec>
c0006a6d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a74:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a7b:	0f 85 df fe ff ff    	jne    c0006960 <f_rename+0xec>
c0006a81:	eb 09                	jmp    c0006a8c <f_rename+0x218>
c0006a83:	83 f8 04             	cmp    eax,0x4
c0006a86:	0f 85 bc 00 00 00    	jne    c0006b48 <f_rename+0x2d4>
c0006a8c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a93:	e8 3b d8 ff ff       	call   c00042d3 <dir_register>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	0f 85 a8 00 00 00    	jne    c0006b48 <f_rename+0x2d4>
c0006aa0:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006aa7:	b9 13 00 00 00       	mov    ecx,0x13
c0006aac:	8d 46 0d             	lea    eax,[esi+0xd]
c0006aaf:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ab3:	e8 13 b2 ff ff       	call   c0001ccb <mem_cpy>
c0006ab8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006abc:	a8 10                	test   al,0x10
c0006abe:	75 03                	jne    c0006ac3 <f_rename+0x24f>
c0006ac0:	83 c8 20             	or     eax,0x20
c0006ac3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006ac6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aca:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ace:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ad2:	74 5e                	je     c0006b32 <f_rename+0x2be>
c0006ad4:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006adb:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006adf:	74 51                	je     c0006b32 <f_rename+0x2be>
c0006ae1:	89 f2                	mov    edx,esi
c0006ae3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ae7:	8a 07                	mov    al,BYTE PTR [edi]
c0006ae9:	e8 d9 e2 ff ff       	call   c0004dc7 <ld_clust.isra.0>
c0006aee:	89 c2                	mov    edx,eax
c0006af0:	89 f8                	mov    eax,edi
c0006af2:	e8 ee b3 ff ff       	call   c0001ee5 <clst2sect>
c0006af7:	89 c6                	mov    esi,eax
c0006af9:	89 d1                	mov    ecx,edx
c0006afb:	b8 02 00 00 00       	mov    eax,0x2
c0006b00:	09 f2                	or     edx,esi
c0006b02:	74 44                	je     c0006b48 <f_rename+0x2d4>
c0006b04:	89 f2                	mov    edx,esi
c0006b06:	89 f8                	mov    eax,edi
c0006b08:	e8 1d b9 ff ff       	call   c000242a <move_window>
c0006b0d:	85 c0                	test   eax,eax
c0006b0f:	75 37                	jne    c0006b48 <f_rename+0x2d4>
c0006b11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b15:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b19:	75 17                	jne    c0006b32 <f_rename+0x2be>
c0006b1b:	8d 50 74             	lea    edx,[eax+0x74]
c0006b1e:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b25:	e8 c6 e2 ff ff       	call   c0004df0 <st_clust.isra.1>
c0006b2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b32:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b36:	e8 f4 d0 ff ff       	call   c0003c2f <dir_remove>
c0006b3b:	85 c0                	test   eax,eax
c0006b3d:	75 09                	jne    c0006b48 <f_rename+0x2d4>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	e8 0d da ff ff       	call   c0004555 <sync_fs>
c0006b48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b4c:	83 ec 0c             	sub    esp,0xc
c0006b4f:	53                   	push   ebx
c0006b50:	e8 40 19 00 00       	call   c0008495 <ff_memfree>
c0006b55:	83 c4 10             	add    esp,0x10
c0006b58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b5c:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b62:	5b                   	pop    ebx
c0006b63:	5e                   	pop    esi
c0006b64:	5f                   	pop    edi
c0006b65:	5d                   	pop    ebp
c0006b66:	c3                   	ret    

c0006b67 <f_chmod>:
c0006b67:	57                   	push   edi
c0006b68:	b9 02 00 00 00       	mov    ecx,0x2
c0006b6d:	56                   	push   esi
c0006b6e:	53                   	push   ebx
c0006b6f:	83 ec 60             	sub    esp,0x60
c0006b72:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b76:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b7a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b7e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b82:	e8 55 bb ff ff       	call   c00026dc <mount_volume>
c0006b87:	85 c0                	test   eax,eax
c0006b89:	0f 85 af 00 00 00    	jne    c0006c3e <f_chmod+0xd7>
c0006b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b93:	83 ec 0c             	sub    esp,0xc
c0006b96:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b9a:	68 60 04 00 00       	push   0x460
c0006b9f:	e8 db 18 00 00       	call   c000847f <ff_memalloc>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	89 c6                	mov    esi,eax
c0006ba9:	b8 11 00 00 00       	mov    eax,0x11
c0006bae:	85 f6                	test   esi,esi
c0006bb0:	0f 84 88 00 00 00    	je     c0006c3e <f_chmod+0xd7>
c0006bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bc0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bc3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bc6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bca:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bce:	e8 7f e2 ff ff       	call   c0004e52 <follow_path>
c0006bd3:	85 c0                	test   eax,eax
c0006bd5:	75 53                	jne    c0006c2a <f_chmod+0xc3>
c0006bd7:	b8 06 00 00 00       	mov    eax,0x6
c0006bdc:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006be1:	75 47                	jne    c0006c2a <f_chmod+0xc3>
c0006be3:	89 f9                	mov    ecx,edi
c0006be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006be9:	83 e1 27             	and    ecx,0x27
c0006bec:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bef:	75 1d                	jne    c0006c0e <f_chmod+0xa7>
c0006bf1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bf4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bf7:	21 cb                	and    ebx,ecx
c0006bf9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bfc:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c03:	e8 a2 cf ff ff       	call   c0003baa <store_xdir>
c0006c08:	85 c0                	test   eax,eax
c0006c0a:	75 1e                	jne    c0006c2a <f_chmod+0xc3>
c0006c0c:	eb 13                	jmp    c0006c21 <f_chmod+0xba>
c0006c0e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c12:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c15:	21 cb                	and    ebx,ecx
c0006c17:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c1a:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c1d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c25:	e8 2b d9 ff ff       	call   c0004555 <sync_fs>
c0006c2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2e:	83 ec 0c             	sub    esp,0xc
c0006c31:	56                   	push   esi
c0006c32:	e8 5e 18 00 00       	call   c0008495 <ff_memfree>
c0006c37:	83 c4 10             	add    esp,0x10
c0006c3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c3e:	83 c4 60             	add    esp,0x60
c0006c41:	5b                   	pop    ebx
c0006c42:	5e                   	pop    esi
c0006c43:	5f                   	pop    edi
c0006c44:	c3                   	ret    

c0006c45 <f_utime>:
c0006c45:	56                   	push   esi
c0006c46:	b9 02 00 00 00       	mov    ecx,0x2
c0006c4b:	53                   	push   ebx
c0006c4c:	83 ec 64             	sub    esp,0x64
c0006c4f:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c53:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c57:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c5b:	e8 7c ba ff ff       	call   c00026dc <mount_volume>
c0006c60:	85 c0                	test   eax,eax
c0006c62:	0f 85 b5 00 00 00    	jne    c0006d1d <f_utime+0xd8>
c0006c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6c:	83 ec 0c             	sub    esp,0xc
c0006c6f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c73:	68 60 04 00 00       	push   0x460
c0006c78:	e8 02 18 00 00       	call   c000847f <ff_memalloc>
c0006c7d:	83 c4 10             	add    esp,0x10
c0006c80:	89 c3                	mov    ebx,eax
c0006c82:	b8 11 00 00 00       	mov    eax,0x11
c0006c87:	85 db                	test   ebx,ebx
c0006c89:	0f 84 8e 00 00 00    	je     c0006d1d <f_utime+0xd8>
c0006c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c93:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c99:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c9c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c9f:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ca3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ca7:	e8 a6 e1 ff ff       	call   c0004e52 <follow_path>
c0006cac:	85 c0                	test   eax,eax
c0006cae:	75 59                	jne    c0006d09 <f_utime+0xc4>
c0006cb0:	b8 06 00 00 00       	mov    eax,0x6
c0006cb5:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cba:	75 4d                	jne    c0006d09 <f_utime+0xc4>
c0006cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cc0:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cc4:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cc8:	c1 e2 10             	shl    edx,0x10
c0006ccb:	09 ca                	or     edx,ecx
c0006ccd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cd0:	75 1a                	jne    c0006cec <f_utime+0xa7>
c0006cd2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cd5:	83 c0 0c             	add    eax,0xc
c0006cd8:	e8 e5 af ff ff       	call   c0001cc2 <st_dword>
c0006cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ce1:	e8 c4 ce ff ff       	call   c0003baa <store_xdir>
c0006ce6:	85 c0                	test   eax,eax
c0006ce8:	75 1f                	jne    c0006d09 <f_utime+0xc4>
c0006cea:	eb 14                	jmp    c0006d00 <f_utime+0xbb>
c0006cec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cf0:	83 c0 16             	add    eax,0x16
c0006cf3:	e8 ca af ff ff       	call   c0001cc2 <st_dword>
c0006cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cfc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d04:	e8 4c d8 ff ff       	call   c0004555 <sync_fs>
c0006d09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d0d:	83 ec 0c             	sub    esp,0xc
c0006d10:	53                   	push   ebx
c0006d11:	e8 7f 17 00 00       	call   c0008495 <ff_memfree>
c0006d16:	83 c4 10             	add    esp,0x10
c0006d19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d1d:	83 c4 64             	add    esp,0x64
c0006d20:	5b                   	pop    ebx
c0006d21:	5e                   	pop    esi
c0006d22:	c3                   	ret    

c0006d23 <f_getlabel>:
c0006d23:	55                   	push   ebp
c0006d24:	31 c9                	xor    ecx,ecx
c0006d26:	57                   	push   edi
c0006d27:	56                   	push   esi
c0006d28:	53                   	push   ebx
c0006d29:	83 ec 6c             	sub    esp,0x6c
c0006d2c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d30:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d37:	e8 a0 b9 ff ff       	call   c00026dc <mount_volume>
c0006d3c:	89 c6                	mov    esi,eax
c0006d3e:	85 c0                	test   eax,eax
c0006d40:	0f 85 c1 01 00 00    	jne    c0006f07 <f_getlabel+0x1e4>
c0006d46:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d4e:	0f 84 5f 01 00 00    	je     c0006eb3 <f_getlabel+0x190>
c0006d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d58:	31 d2                	xor    edx,edx
c0006d5a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d5e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d6a:	e8 39 c4 ff ff       	call   c00031a8 <dir_sdi>
c0006d6f:	85 c0                	test   eax,eax
c0006d71:	0f 85 2d 01 00 00    	jne    c0006ea4 <f_getlabel+0x181>
c0006d77:	ba 01 00 00 00       	mov    edx,0x1
c0006d7c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d80:	e8 33 cc ff ff       	call   c00039b8 <dir_read>
c0006d85:	85 c0                	test   eax,eax
c0006d87:	0f 85 17 01 00 00    	jne    c0006ea4 <f_getlabel+0x181>
c0006d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d91:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d94:	74 09                	je     c0006d9f <f_getlabel+0x7c>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	31 c9                	xor    ecx,ecx
c0006d9a:	e9 c8 00 00 00       	jmp    c0006e67 <f_getlabel+0x144>
c0006d9f:	31 ed                	xor    ebp,ebp
c0006da1:	31 db                	xor    ebx,ebx
c0006da3:	31 ff                	xor    edi,edi
c0006da5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006da9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dad:	39 fa                	cmp    edx,edi
c0006daf:	76 4b                	jbe    c0006dfc <f_getlabel+0xd9>
c0006db1:	47                   	inc    edi
c0006db2:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006db5:	01 d0                	add    eax,edx
c0006db7:	e8 90 ae ff ff       	call   c0001c4c <ld_word>
c0006dbc:	66 85 ed             	test   bp,bp
c0006dbf:	75 0d                	jne    c0006dce <f_getlabel+0xab>
c0006dc1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006dc7:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006dcc:	76 28                	jbe    c0006df6 <f_getlabel+0xd3>
c0006dce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dd5:	89 e9                	mov    ecx,ebp
c0006dd7:	01 da                	add    edx,ebx
c0006dd9:	c1 e1 10             	shl    ecx,0x10
c0006ddc:	0f b7 c0             	movzx  eax,ax
c0006ddf:	09 c8                	or     eax,ecx
c0006de1:	b9 04 00 00 00       	mov    ecx,0x4
c0006de6:	e8 01 b0 ff ff       	call   c0001dec <put_utf>
c0006deb:	84 c0                	test   al,al
c0006ded:	74 0b                	je     c0006dfa <f_getlabel+0xd7>
c0006def:	0f b6 c0             	movzx  eax,al
c0006df2:	01 c3                	add    ebx,eax
c0006df4:	31 c0                	xor    eax,eax
c0006df6:	89 c5                	mov    ebp,eax
c0006df8:	eb ab                	jmp    c0006da5 <f_getlabel+0x82>
c0006dfa:	31 db                	xor    ebx,ebx
c0006dfc:	66 85 ed             	test   bp,bp
c0006dff:	74 02                	je     c0006e03 <f_getlabel+0xe0>
c0006e01:	31 db                	xor    ebx,ebx
c0006e03:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e0a:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e0e:	e9 a0 00 00 00       	jmp    c0006eb3 <f_getlabel+0x190>
c0006e13:	83 ff 0b             	cmp    edi,0xb
c0006e16:	74 11                	je     c0006e29 <f_getlabel+0x106>
c0006e18:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e21:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e24:	c1 e0 08             	shl    eax,0x8
c0006e27:	09 c2                	or     edx,eax
c0006e29:	0f b7 d2             	movzx  edx,dx
c0006e2c:	50                   	push   eax
c0006e2d:	50                   	push   eax
c0006e2e:	68 b5 01 00 00       	push   0x1b5
c0006e33:	52                   	push   edx
c0006e34:	e8 03 17 00 00       	call   c000853c <ff_oem2uni>
c0006e39:	83 c4 10             	add    esp,0x10
c0006e3c:	66 85 c0             	test   ax,ax
c0006e3f:	74 46                	je     c0006e87 <f_getlabel+0x164>
c0006e41:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e48:	0f b7 c0             	movzx  eax,ax
c0006e4b:	01 da                	add    edx,ebx
c0006e4d:	b9 04 00 00 00       	mov    ecx,0x4
c0006e52:	e8 95 af ff ff       	call   c0001dec <put_utf>
c0006e57:	84 c0                	test   al,al
c0006e59:	74 2c                	je     c0006e87 <f_getlabel+0x164>
c0006e5b:	0f b6 c0             	movzx  eax,al
c0006e5e:	01 c3                	add    ebx,eax
c0006e60:	83 ff 0b             	cmp    edi,0xb
c0006e63:	74 24                	je     c0006e89 <f_getlabel+0x166>
c0006e65:	89 f9                	mov    ecx,edi
c0006e67:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e6b:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e6e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e73:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e7c:	e8 9f ae ff ff       	call   c0001d20 <dbc_1st>
c0006e81:	85 c0                	test   eax,eax
c0006e83:	74 a4                	je     c0006e29 <f_getlabel+0x106>
c0006e85:	eb 8c                	jmp    c0006e13 <f_getlabel+0xf0>
c0006e87:	31 db                	xor    ebx,ebx
c0006e89:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e90:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e93:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e9a:	74 17                	je     c0006eb3 <f_getlabel+0x190>
c0006e9c:	4b                   	dec    ebx
c0006e9d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ea0:	74 ee                	je     c0006e90 <f_getlabel+0x16d>
c0006ea2:	eb 0f                	jmp    c0006eb3 <f_getlabel+0x190>
c0006ea4:	83 f8 04             	cmp    eax,0x4
c0006ea7:	75 5c                	jne    c0006f05 <f_getlabel+0x1e2>
c0006ea9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006eb0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006eb3:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ebb:	74 4a                	je     c0006f07 <f_getlabel+0x1e4>
c0006ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ec1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ec4:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ec7:	e8 5e b5 ff ff       	call   c000242a <move_window>
c0006ecc:	89 c6                	mov    esi,eax
c0006ece:	85 c0                	test   eax,eax
c0006ed0:	75 35                	jne    c0006f07 <f_getlabel+0x1e4>
c0006ed2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ed6:	b8 43 00 00 00       	mov    eax,0x43
c0006edb:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006edd:	80 f9 03             	cmp    cl,0x3
c0006ee0:	74 0f                	je     c0006ef1 <f_getlabel+0x1ce>
c0006ee2:	31 c0                	xor    eax,eax
c0006ee4:	80 f9 04             	cmp    cl,0x4
c0006ee7:	0f 94 c0             	sete   al
c0006eea:	48                   	dec    eax
c0006eeb:	83 e0 c3             	and    eax,0xffffffc3
c0006eee:	83 c0 64             	add    eax,0x64
c0006ef1:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ef5:	e8 5f ad ff ff       	call   c0001c59 <ld_dword>
c0006efa:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f01:	89 07                	mov    DWORD PTR [edi],eax
c0006f03:	eb 02                	jmp    c0006f07 <f_getlabel+0x1e4>
c0006f05:	89 c6                	mov    esi,eax
c0006f07:	83 c4 6c             	add    esp,0x6c
c0006f0a:	89 f0                	mov    eax,esi
c0006f0c:	5b                   	pop    ebx
c0006f0d:	5e                   	pop    esi
c0006f0e:	5f                   	pop    edi
c0006f0f:	5d                   	pop    ebp
c0006f10:	c3                   	ret    

c0006f11 <f_setlabel>:
c0006f11:	56                   	push   esi
c0006f12:	b9 02 00 00 00       	mov    ecx,0x2
c0006f17:	53                   	push   ebx
c0006f18:	83 ec 74             	sub    esp,0x74
c0006f1b:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f1f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f26:	e8 b1 b7 ff ff       	call   c00026dc <mount_volume>
c0006f2b:	89 c6                	mov    esi,eax
c0006f2d:	85 c0                	test   eax,eax
c0006f2f:	0f 85 41 02 00 00    	jne    c0007176 <f_setlabel+0x265>
c0006f35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f39:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f3c:	0f 85 8e 00 00 00    	jne    c0006fd0 <f_setlabel+0xbf>
c0006f42:	b9 16 00 00 00       	mov    ecx,0x16
c0006f47:	31 d2                	xor    edx,edx
c0006f49:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f4d:	31 db                	xor    ebx,ebx
c0006f4f:	e8 8c ad ff ff       	call   c0001ce0 <mem_set>
c0006f54:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f5b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f5e:	0f 86 0a 01 00 00    	jbe    c000706e <f_setlabel+0x15d>
c0006f64:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f6b:	e8 b6 ad ff ff       	call   c0001d26 <tchar2uni>
c0006f70:	89 c6                	mov    esi,eax
c0006f72:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f77:	76 2a                	jbe    c0006fa3 <f_setlabel+0x92>
c0006f79:	83 f8 ff             	cmp    eax,0xffffffff
c0006f7c:	74 05                	je     c0006f83 <f_setlabel+0x72>
c0006f7e:	83 fb 09             	cmp    ebx,0x9
c0006f81:	76 0a                	jbe    c0006f8d <f_setlabel+0x7c>
c0006f83:	be 06 00 00 00       	mov    esi,0x6
c0006f88:	e9 e9 01 00 00       	jmp    c0007176 <f_setlabel+0x265>
c0006f8d:	89 c2                	mov    edx,eax
c0006f8f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f93:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f96:	c1 ea 10             	shr    edx,0x10
c0006f99:	01 c8                	add    eax,ecx
c0006f9b:	43                   	inc    ebx
c0006f9c:	e8 1d ad ff ff       	call   c0001cbe <st_word>
c0006fa1:	eb 04                	jmp    c0006fa7 <f_setlabel+0x96>
c0006fa3:	85 c0                	test   eax,eax
c0006fa5:	74 dc                	je     c0006f83 <f_setlabel+0x72>
c0006fa7:	89 f2                	mov    edx,esi
c0006fa9:	b8 57 9f 02 c0       	mov    eax,0xc0029f57
c0006fae:	e8 5b ad ff ff       	call   c0001d0e <chk_chr>
c0006fb3:	85 c0                	test   eax,eax
c0006fb5:	75 cc                	jne    c0006f83 <f_setlabel+0x72>
c0006fb7:	83 fb 0a             	cmp    ebx,0xa
c0006fba:	77 c7                	ja     c0006f83 <f_setlabel+0x72>
c0006fbc:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fbf:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fc3:	0f b7 d6             	movzx  edx,si
c0006fc6:	01 c8                	add    eax,ecx
c0006fc8:	43                   	inc    ebx
c0006fc9:	e8 f0 ac ff ff       	call   c0001cbe <st_word>
c0006fce:	eb 84                	jmp    c0006f54 <f_setlabel+0x43>
c0006fd0:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fd5:	ba 20 00 00 00       	mov    edx,0x20
c0006fda:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fde:	31 db                	xor    ebx,ebx
c0006fe0:	e8 fb ac ff ff       	call   c0001ce0 <mem_set>
c0006fe5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fec:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fef:	76 60                	jbe    c0007051 <f_setlabel+0x140>
c0006ff1:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ff8:	e8 29 ad ff ff       	call   c0001d26 <tchar2uni>
c0006ffd:	3d ff ff 00 00       	cmp    eax,0xffff
c0007002:	0f 87 7b ff ff ff    	ja     c0006f83 <f_setlabel+0x72>
c0007008:	83 ec 0c             	sub    esp,0xc
c000700b:	50                   	push   eax
c000700c:	e8 97 15 00 00       	call   c00085a8 <ff_wtoupper>
c0007011:	5a                   	pop    edx
c0007012:	59                   	pop    ecx
c0007013:	68 b5 01 00 00       	push   0x1b5
c0007018:	50                   	push   eax
c0007019:	e8 8e 14 00 00       	call   c00084ac <ff_uni2oem>
c000701e:	83 c4 10             	add    esp,0x10
c0007021:	89 c6                	mov    esi,eax
c0007023:	66 85 c0             	test   ax,ax
c0007026:	0f 84 57 ff ff ff    	je     c0006f83 <f_setlabel+0x72>
c000702c:	0f b7 d0             	movzx  edx,ax
c000702f:	b8 50 9f 02 c0       	mov    eax,0xc0029f50
c0007034:	e8 d5 ac ff ff       	call   c0001d0e <chk_chr>
c0007039:	85 c0                	test   eax,eax
c000703b:	0f 85 42 ff ff ff    	jne    c0006f83 <f_setlabel+0x72>
c0007041:	66 81 fe ff 00       	cmp    si,0xff
c0007046:	0f 87 14 01 00 00    	ja     c0007160 <f_setlabel+0x24f>
c000704c:	e9 fa 00 00 00       	jmp    c000714b <f_setlabel+0x23a>
c0007051:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007056:	0f 84 27 ff ff ff    	je     c0006f83 <f_setlabel+0x72>
c000705c:	85 db                	test   ebx,ebx
c000705e:	74 0e                	je     c000706e <f_setlabel+0x15d>
c0007060:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007063:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007068:	75 04                	jne    c000706e <f_setlabel+0x15d>
c000706a:	89 c3                	mov    ebx,eax
c000706c:	eb ee                	jmp    c000705c <f_setlabel+0x14b>
c000706e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007072:	31 d2                	xor    edx,edx
c0007074:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007078:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007080:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007084:	e8 1f c1 ff ff       	call   c00031a8 <dir_sdi>
c0007089:	89 c6                	mov    esi,eax
c000708b:	85 c0                	test   eax,eax
c000708d:	0f 85 e3 00 00 00    	jne    c0007176 <f_setlabel+0x265>
c0007093:	ba 01 00 00 00       	mov    edx,0x1
c0007098:	8d 44 24 24          	lea    eax,[esp+0x24]
c000709c:	e8 17 c9 ff ff       	call   c00039b8 <dir_read>
c00070a1:	85 c0                	test   eax,eax
c00070a3:	75 21                	jne    c00070c6 <f_setlabel+0x1b5>
c00070a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070a9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ad:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070b0:	74 5d                	je     c000710f <f_setlabel+0x1fe>
c00070b2:	85 db                	test   ebx,ebx
c00070b4:	74 0b                	je     c00070c1 <f_setlabel+0x1b0>
c00070b6:	b9 0b 00 00 00       	mov    ecx,0xb
c00070bb:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070bf:	eb 70                	jmp    c0007131 <f_setlabel+0x220>
c00070c1:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070c4:	eb 70                	jmp    c0007136 <f_setlabel+0x225>
c00070c6:	83 f8 04             	cmp    eax,0x4
c00070c9:	75 7c                	jne    c0007147 <f_setlabel+0x236>
c00070cb:	85 db                	test   ebx,ebx
c00070cd:	0f 84 a3 00 00 00    	je     c0007176 <f_setlabel+0x265>
c00070d3:	ba 01 00 00 00       	mov    edx,0x1
c00070d8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070dc:	e8 51 ca ff ff       	call   c0003b32 <dir_alloc>
c00070e1:	89 c6                	mov    esi,eax
c00070e3:	85 c0                	test   eax,eax
c00070e5:	0f 85 8b 00 00 00    	jne    c0007176 <f_setlabel+0x265>
c00070eb:	31 d2                	xor    edx,edx
c00070ed:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f1:	b9 20 00 00 00       	mov    ecx,0x20
c00070f6:	e8 e5 ab ff ff       	call   c0001ce0 <mem_set>
c00070fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070ff:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	75 18                	jne    c0007120 <f_setlabel+0x20f>
c0007108:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000710b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007112:	b9 16 00 00 00       	mov    ecx,0x16
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	83 c0 02             	add    eax,0x2
c000711e:	eb 9b                	jmp    c00070bb <f_setlabel+0x1aa>
c0007120:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007124:	b9 0b 00 00 00       	mov    ecx,0xb
c0007129:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000712d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007131:	e8 95 ab ff ff       	call   c0001ccb <mem_cpy>
c0007136:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000713a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000713e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007142:	e8 0e d4 ff ff       	call   c0004555 <sync_fs>
c0007147:	89 c6                	mov    esi,eax
c0007149:	eb 2b                	jmp    c0007176 <f_setlabel+0x265>
c000714b:	83 fb 0a             	cmp    ebx,0xa
c000714e:	0f 87 2f fe ff ff    	ja     c0006f83 <f_setlabel+0x72>
c0007154:	89 f0                	mov    eax,esi
c0007156:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000715a:	43                   	inc    ebx
c000715b:	e9 85 fe ff ff       	jmp    c0006fe5 <f_setlabel+0xd4>
c0007160:	83 fb 09             	cmp    ebx,0x9
c0007163:	0f 87 1a fe ff ff    	ja     c0006f83 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	66 c1 e8 08          	shr    ax,0x8
c000716f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007173:	43                   	inc    ebx
c0007174:	eb de                	jmp    c0007154 <f_setlabel+0x243>
c0007176:	89 f0                	mov    eax,esi
c0007178:	83 c4 74             	add    esp,0x74
c000717b:	5b                   	pop    ebx
c000717c:	5e                   	pop    esi
c000717d:	c3                   	ret    

c000717e <f_forward>:
c000717e:	55                   	push   ebp
c000717f:	57                   	push   edi
c0007180:	56                   	push   esi
c0007181:	53                   	push   ebx
c0007182:	83 ec 2c             	sub    esp,0x2c
c0007185:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007189:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000718d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007193:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007197:	89 d8                	mov    eax,ebx
c0007199:	e8 b1 b1 ff ff       	call   c000234f <validate>
c000719e:	89 c5                	mov    ebp,eax
c00071a0:	85 c0                	test   eax,eax
c00071a2:	0f 85 aa 01 00 00    	jne    c0007352 <f_forward+0x1d4>
c00071a8:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071ac:	85 ed                	test   ebp,ebp
c00071ae:	0f 85 9e 01 00 00    	jne    c0007352 <f_forward+0x1d4>
c00071b4:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071b8:	0f 84 8f 01 00 00    	je     c000734d <f_forward+0x1cf>
c00071be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071c1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071c4:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071c7:	bf 00 00 00 00       	mov    edi,0x0
c00071cc:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071cf:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071d3:	89 d1                	mov    ecx,edx
c00071d5:	19 f9                	sbb    ecx,edi
c00071d7:	0f 83 cf 00 00 00    	jae    c00072ac <f_forward+0x12e>
c00071dd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071e1:	e9 c6 00 00 00       	jmp    c00072ac <f_forward+0x12e>
c00071e6:	50                   	push   eax
c00071e7:	50                   	push   eax
c00071e8:	6a 00                	push   0x0
c00071ea:	6a 00                	push   0x0
c00071ec:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	85 c0                	test   eax,eax
c00071f5:	0f 84 57 01 00 00    	je     c0007352 <f_forward+0x1d4>
c00071fb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071fe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007202:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007205:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007209:	89 d7                	mov    edi,edx
c000720b:	8d 4e ff             	lea    ecx,[esi-0x1]
c000720e:	89 c6                	mov    esi,eax
c0007210:	0f ac fe 09          	shrd   esi,edi,0x9
c0007214:	21 ce                	and    esi,ecx
c0007216:	89 c1                	mov    ecx,eax
c0007218:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000721e:	0f 84 98 00 00 00    	je     c00072bc <f_forward+0x13e>
c0007224:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007228:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000722b:	89 c8                	mov    eax,ecx
c000722d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007231:	e8 af ac ff ff       	call   c0001ee5 <clst2sect>
c0007236:	89 d7                	mov    edi,edx
c0007238:	09 c7                	or     edi,eax
c000723a:	0f 84 9e 00 00 00    	je     c00072de <f_forward+0x160>
c0007240:	31 ff                	xor    edi,edi
c0007242:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007245:	01 c6                	add    esi,eax
c0007247:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000724b:	11 d7                	adc    edi,edx
c000724d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007250:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007253:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007257:	39 fa                	cmp    edx,edi
c0007259:	0f 85 a2 00 00 00    	jne    c0007301 <f_forward+0x183>
c000725f:	39 f0                	cmp    eax,esi
c0007261:	0f 85 9a 00 00 00    	jne    c0007301 <f_forward+0x183>
c0007267:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000726a:	ba 00 02 00 00       	mov    edx,0x200
c000726f:	25 ff 01 00 00       	and    eax,0x1ff
c0007274:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007278:	29 c2                	sub    edx,eax
c000727a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000727d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007280:	39 d1                	cmp    ecx,edx
c0007282:	76 02                	jbe    c0007286 <f_forward+0x108>
c0007284:	89 d1                	mov    ecx,edx
c0007286:	8d 73 50             	lea    esi,[ebx+0x50]
c0007289:	52                   	push   edx
c000728a:	01 c6                	add    esi,eax
c000728c:	52                   	push   edx
c000728d:	51                   	push   ecx
c000728e:	56                   	push   esi
c000728f:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007293:	83 c4 10             	add    esp,0x10
c0007296:	85 c0                	test   eax,eax
c0007298:	74 44                	je     c00072de <f_forward+0x160>
c000729a:	31 ff                	xor    edi,edi
c000729c:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000729f:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072a2:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072a6:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072aa:	01 07                	add    DWORD PTR [edi],eax
c00072ac:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072b1:	0f 85 2f ff ff ff    	jne    c00071e6 <f_forward+0x68>
c00072b7:	e9 96 00 00 00       	jmp    c0007352 <f_forward+0x1d4>
c00072bc:	85 f6                	test   esi,esi
c00072be:	0f 85 60 ff ff ff    	jne    c0007224 <f_forward+0xa6>
c00072c4:	89 d7                	mov    edi,edx
c00072c6:	09 c7                	or     edi,eax
c00072c8:	75 05                	jne    c00072cf <f_forward+0x151>
c00072ca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072cd:	eb 0a                	jmp    c00072d9 <f_forward+0x15b>
c00072cf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072d2:	89 d8                	mov    eax,ebx
c00072d4:	e8 d9 bc ff ff       	call   c0002fb2 <get_fat>
c00072d9:	83 f8 01             	cmp    eax,0x1
c00072dc:	77 0b                	ja     c00072e9 <f_forward+0x16b>
c00072de:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072e2:	bd 02 00 00 00       	mov    ebp,0x2
c00072e7:	eb 69                	jmp    c0007352 <f_forward+0x1d4>
c00072e9:	83 f8 ff             	cmp    eax,0xffffffff
c00072ec:	75 0b                	jne    c00072f9 <f_forward+0x17b>
c00072ee:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072f2:	bd 01 00 00 00       	mov    ebp,0x1
c00072f7:	eb 59                	jmp    c0007352 <f_forward+0x1d4>
c00072f9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072fc:	e9 23 ff ff ff       	jmp    c0007224 <f_forward+0xa6>
c0007301:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007305:	79 20                	jns    c0007327 <f_forward+0x1a9>
c0007307:	83 ec 0c             	sub    esp,0xc
c000730a:	6a 01                	push   0x1
c000730c:	52                   	push   edx
c000730d:	50                   	push   eax
c000730e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007312:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007316:	50                   	push   eax
c0007317:	e8 fb a8 ff ff       	call   c0001c17 <disk_write>
c000731c:	83 c4 20             	add    esp,0x20
c000731f:	85 c0                	test   eax,eax
c0007321:	75 cb                	jne    c00072ee <f_forward+0x170>
c0007323:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007327:	83 ec 0c             	sub    esp,0xc
c000732a:	6a 01                	push   0x1
c000732c:	57                   	push   edi
c000732d:	56                   	push   esi
c000732e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007332:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007336:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000733a:	50                   	push   eax
c000733b:	e8 c1 a8 ff ff       	call   c0001c01 <disk_read>
c0007340:	83 c4 20             	add    esp,0x20
c0007343:	85 c0                	test   eax,eax
c0007345:	0f 84 1c ff ff ff    	je     c0007267 <f_forward+0xe9>
c000734b:	eb a1                	jmp    c00072ee <f_forward+0x170>
c000734d:	bd 07 00 00 00       	mov    ebp,0x7
c0007352:	83 c4 2c             	add    esp,0x2c
c0007355:	89 e8                	mov    eax,ebp
c0007357:	5b                   	pop    ebx
c0007358:	5e                   	pop    esi
c0007359:	5f                   	pop    edi
c000735a:	5d                   	pop    ebp
c000735b:	c3                   	ret    

c000735c <f_mkfs>:
c000735c:	55                   	push   ebp
c000735d:	57                   	push   edi
c000735e:	56                   	push   esi
c000735f:	53                   	push   ebx
c0007360:	bb 0b 00 00 00       	mov    ebx,0xb
c0007365:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000736b:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007372:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007379:	e8 b0 ae ff ff       	call   c000222e <get_ldnumber>
c000737e:	85 c0                	test   eax,eax
c0007380:	0f 88 ec 10 00 00    	js     c0008472 <f_mkfs+0x1116>
c0007386:	8b 14 85 a0 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0f60]
c000738d:	85 d2                	test   edx,edx
c000738f:	74 03                	je     c0007394 <f_mkfs+0x38>
c0007391:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007394:	85 f6                	test   esi,esi
c0007396:	75 05                	jne    c000739d <f_mkfs+0x41>
c0007398:	be 40 9f 02 c0       	mov    esi,0xc0029f40
c000739d:	83 ec 0c             	sub    esp,0xc
c00073a0:	0f b6 c0             	movzx  eax,al
c00073a3:	bb 03 00 00 00       	mov    ebx,0x3
c00073a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073b0:	e8 49 a8 ff ff       	call   c0001bfe <disk_initialize>
c00073b5:	83 c4 10             	add    esp,0x10
c00073b8:	a8 01                	test   al,0x1
c00073ba:	0f 85 b2 10 00 00    	jne    c0008472 <f_mkfs+0x1116>
c00073c0:	bb 0a 00 00 00       	mov    ebx,0xa
c00073c5:	a8 04                	test   al,0x4
c00073c7:	0f 85 a5 10 00 00    	jne    c0008472 <f_mkfs+0x1116>
c00073cd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073d0:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073d4:	85 c0                	test   eax,eax
c00073d6:	75 20                	jne    c00073f8 <f_mkfs+0x9c>
c00073d8:	51                   	push   ecx
c00073d9:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073dd:	50                   	push   eax
c00073de:	6a 03                	push   0x3
c00073e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073e4:	e8 44 a8 ff ff       	call   c0001c2d <disk_ioctl>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 08                	je     c00073f8 <f_mkfs+0x9c>
c00073f0:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073f8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073fc:	8d 42 ff             	lea    eax,[edx-0x1]
c00073ff:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007404:	77 04                	ja     c000740a <f_mkfs+0xae>
c0007406:	85 c2                	test   edx,eax
c0007408:	74 08                	je     c0007412 <f_mkfs+0xb6>
c000740a:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007412:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007415:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007419:	48                   	dec    eax
c000741a:	3c 01                	cmp    al,0x1
c000741c:	76 05                	jbe    c0007423 <f_mkfs+0xc7>
c000741e:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007423:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007426:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000742a:	48                   	dec    eax
c000742b:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007430:	77 07                	ja     c0007439 <f_mkfs+0xdd>
c0007432:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007437:	74 08                	je     c0007441 <f_mkfs+0xe5>
c0007439:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007441:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007444:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000744a:	77 07                	ja     c0007453 <f_mkfs+0xf7>
c000744c:	8d 43 ff             	lea    eax,[ebx-0x1]
c000744f:	85 d8                	test   eax,ebx
c0007451:	74 02                	je     c0007455 <f_mkfs+0xf9>
c0007453:	31 db                	xor    ebx,ebx
c0007455:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007460:	77 0a                	ja     c000746c <f_mkfs+0x110>
c0007462:	bb 11 00 00 00       	mov    ebx,0x11
c0007467:	e9 06 10 00 00       	jmp    c0008472 <f_mkfs+0x1116>
c000746c:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007473:	8b 36                	mov    esi,DWORD PTR [esi]
c0007475:	85 ed                	test   ebp,ebp
c0007477:	75 1e                	jne    c0007497 <f_mkfs+0x13b>
c0007479:	83 ec 0c             	sub    esp,0xc
c000747c:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007483:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007488:	50                   	push   eax
c0007489:	e8 f1 0f 00 00       	call   c000847f <ff_memalloc>
c000748e:	83 c4 10             	add    esp,0x10
c0007491:	89 c5                	mov    ebp,eax
c0007493:	85 c0                	test   eax,eax
c0007495:	74 cb                	je     c0007462 <f_mkfs+0x106>
c0007497:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000749f:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074a7:	52                   	push   edx
c00074a8:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074ac:	50                   	push   eax
c00074ad:	6a 01                	push   0x1
c00074af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074b3:	e8 75 a7 ff ff       	call   c0001c2d <disk_ioctl>
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	85 c0                	test   eax,eax
c00074bd:	0f 85 4a 0f 00 00    	jne    c000840d <f_mkfs+0x10b1>
c00074c3:	89 f1                	mov    ecx,esi
c00074c5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074cd:	83 e1 0f             	and    ecx,0xf
c00074d0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074d8:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074dc:	83 e6 08             	and    esi,0x8
c00074df:	75 56                	jne    c0007537 <f_mkfs+0x1db>
c00074e1:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074e5:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074e9:	83 ff 00             	cmp    edi,0x0
c00074ec:	76 20                	jbe    c000750e <f_mkfs+0x1b2>
c00074ee:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074f3:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074fb:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007501:	83 d7 ff             	adc    edi,0xffffffff
c0007504:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007508:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750c:	eb 21                	jmp    c000752f <f_mkfs+0x1d3>
c000750e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007513:	39 f2                	cmp    edx,esi
c0007515:	19 f8                	sbb    eax,edi
c0007517:	73 1e                	jae    c0007537 <f_mkfs+0x1db>
c0007519:	83 c6 c1             	add    esi,0xffffffc1
c000751c:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007524:	83 d7 ff             	adc    edi,0xffffffff
c0007527:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000752b:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000752f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007537:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000753b:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000753f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007542:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007546:	31 c0                	xor    eax,eax
c0007548:	ba 7f 00 00 00       	mov    edx,0x7f
c000754d:	89 c7                	mov    edi,eax
c000754f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007552:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007556:	0f 83 c5 0a 00 00    	jae    c0008021 <f_mkfs+0xcc5>
c000755c:	89 df                	mov    edi,ebx
c000755e:	c1 ef 09             	shr    edi,0x9
c0007561:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007565:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000756c:	c1 ef 09             	shr    edi,0x9
c000756f:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007574:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007578:	74 29                	je     c00075a3 <f_mkfs+0x247>
c000757a:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007580:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007585:	0f 97 c2             	seta   dl
c0007588:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000758b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000758f:	0f 92 c0             	setb   al
c0007592:	08 c2                	or     dl,al
c0007594:	75 5b                	jne    c00075f1 <f_mkfs+0x295>
c0007596:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759a:	83 e0 07             	and    eax,0x7
c000759d:	3c 04                	cmp    al,0x4
c000759f:	74 50                	je     c00075f1 <f_mkfs+0x295>
c00075a1:	eb 1b                	jmp    c00075be <f_mkfs+0x262>
c00075a3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075a8:	0f 87 73 0a 00 00    	ja     c0008021 <f_mkfs+0xcc5>
c00075ae:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075b4:	76 08                	jbe    c00075be <f_mkfs+0x262>
c00075b6:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075be:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075c2:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075c6:	83 e0 01             	and    eax,0x1
c00075c9:	80 e1 02             	and    cl,0x2
c00075cc:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075d0:	74 0d                	je     c00075df <f_mkfs+0x283>
c00075d2:	84 c0                	test   al,al
c00075d4:	0f 84 53 09 00 00    	je     c0007f2d <f_mkfs+0xbd1>
c00075da:	e9 12 08 00 00       	jmp    c0007df1 <f_mkfs+0xa95>
c00075df:	bb 13 00 00 00       	mov    ebx,0x13
c00075e4:	84 c0                	test   al,al
c00075e6:	0f 85 05 08 00 00    	jne    c0007df1 <f_mkfs+0xa95>
c00075ec:	e9 39 0e 00 00       	jmp    c000842a <f_mkfs+0x10ce>
c00075f1:	31 c0                	xor    eax,eax
c00075f3:	ba ff 0f 00 00       	mov    edx,0xfff
c00075f8:	89 c7                	mov    edi,eax
c00075fa:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fd:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007601:	0f 83 1a 0a 00 00    	jae    c0008021 <f_mkfs+0xcc5>
c0007607:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000760d:	77 39                	ja     c0007648 <f_mkfs+0x2ec>
c000760f:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007614:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000761c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000761f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007623:	73 08                	jae    c000762d <f_mkfs+0x2d1>
c0007625:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000762d:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007632:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007635:	b8 00 00 00 00       	mov    eax,0x0
c000763a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000763e:	73 08                	jae    c0007648 <f_mkfs+0x2ec>
c0007640:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000764c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007650:	83 c0 20             	add    eax,0x20
c0007653:	83 d2 00             	adc    edx,0x0
c0007656:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000765a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000765e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007662:	31 d2                	xor    edx,edx
c0007664:	31 ff                	xor    edi,edi
c0007666:	52                   	push   edx
c0007667:	89 fb                	mov    ebx,edi
c0007669:	50                   	push   eax
c000766a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000766e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007672:	e8 0d fe 01 00       	call   c0027484 <__udivdi3>
c0007677:	83 c4 10             	add    esp,0x10
c000767a:	c1 e0 02             	shl    eax,0x2
c000767d:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007681:	05 07 02 00 00       	add    eax,0x207
c0007686:	89 f1                	mov    ecx,esi
c0007688:	c1 e8 09             	shr    eax,0x9
c000768b:	83 c1 ff             	add    ecx,0xffffffff
c000768e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007692:	83 d3 ff             	adc    ebx,0xffffffff
c0007695:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007699:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c000769d:	31 d2                	xor    edx,edx
c000769f:	01 c8                	add    eax,ecx
c00076a1:	11 da                	adc    edx,ebx
c00076a3:	89 c1                	mov    ecx,eax
c00076a5:	f7 de                	neg    esi
c00076a7:	89 d0                	mov    eax,edx
c00076a9:	83 d7 00             	adc    edi,0x0
c00076ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076b0:	f7 df                	neg    edi
c00076b2:	21 f1                	and    ecx,esi
c00076b4:	21 f8                	and    eax,edi
c00076b6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076be:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076c6:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076cd:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076d1:	0f ac d0 01          	shrd   eax,edx,0x1
c00076d5:	89 df                	mov    edi,ebx
c00076d7:	d1 ea                	shr    edx,1
c00076d9:	39 c1                	cmp    ecx,eax
c00076db:	19 d7                	sbb    edi,edx
c00076dd:	0f 83 3e 09 00 00    	jae    c0008021 <f_mkfs+0xcc5>
c00076e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076e7:	31 d2                	xor    edx,edx
c00076e9:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076f1:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076f8:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076fc:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007700:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007704:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007708:	83 f8 0f             	cmp    eax,0xf
c000770b:	0f 86 10 09 00 00    	jbe    c0008021 <f_mkfs+0xcc5>
c0007711:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007719:	0f 87 02 09 00 00    	ja     c0008021 <f_mkfs+0xcc5>
c000771f:	31 d2                	xor    edx,edx
c0007721:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007725:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000772d:	83 c0 07             	add    eax,0x7
c0007730:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007738:	c1 e8 03             	shr    eax,0x3
c000773b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007742:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774a:	c1 e0 09             	shl    eax,0x9
c000774d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007751:	48                   	dec    eax
c0007752:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007756:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000775a:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000775e:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007762:	31 d2                	xor    edx,edx
c0007764:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007768:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000776f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007773:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007778:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000777c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007780:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007784:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007788:	31 ff                	xor    edi,edi
c000778a:	31 f6                	xor    esi,esi
c000778c:	31 db                	xor    ebx,ebx
c000778e:	85 ff                	test   edi,edi
c0007790:	74 05                	je     c0007797 <f_mkfs+0x43b>
c0007792:	4f                   	dec    edi
c0007793:	74 44                	je     c00077d9 <f_mkfs+0x47d>
c0007795:	eb 4f                	jmp    c00077e6 <f_mkfs+0x48a>
c0007797:	83 ec 0c             	sub    esp,0xc
c000779a:	0f b7 c3             	movzx  eax,bx
c000779d:	50                   	push   eax
c000779e:	e8 05 0e 00 00       	call   c00085a8 <ff_wtoupper>
c00077a3:	83 c4 10             	add    esp,0x10
c00077a6:	89 c1                	mov    ecx,eax
c00077a8:	8d 53 01             	lea    edx,[ebx+0x1]
c00077ab:	66 39 c3             	cmp    bx,ax
c00077ae:	75 3e                	jne    c00077ee <f_mkfs+0x492>
c00077b0:	be 01 00 00 00       	mov    esi,0x1
c00077b5:	89 df                	mov    edi,ebx
c00077b7:	66 01 f7             	add    di,si
c00077ba:	75 07                	jne    c00077c3 <f_mkfs+0x467>
c00077bc:	83 fe 7f             	cmp    esi,0x7f
c00077bf:	77 31                	ja     c00077f2 <f_mkfs+0x496>
c00077c1:	eb 16                	jmp    c00077d9 <f_mkfs+0x47d>
c00077c3:	83 ec 0c             	sub    esp,0xc
c00077c6:	0f b7 ff             	movzx  edi,di
c00077c9:	57                   	push   edi
c00077ca:	e8 d9 0d 00 00       	call   c00085a8 <ff_wtoupper>
c00077cf:	83 c4 10             	add    esp,0x10
c00077d2:	39 c7                	cmp    edi,eax
c00077d4:	75 e6                	jne    c00077bc <f_mkfs+0x460>
c00077d6:	46                   	inc    esi
c00077d7:	eb dc                	jmp    c00077b5 <f_mkfs+0x459>
c00077d9:	31 c0                	xor    eax,eax
c00077db:	89 d9                	mov    ecx,ebx
c00077dd:	4e                   	dec    esi
c00077de:	0f 95 c0             	setne  al
c00077e1:	43                   	inc    ebx
c00077e2:	89 c7                	mov    edi,eax
c00077e4:	eb 14                	jmp    c00077fa <f_mkfs+0x49e>
c00077e6:	89 f1                	mov    ecx,esi
c00077e8:	01 f3                	add    ebx,esi
c00077ea:	31 ff                	xor    edi,edi
c00077ec:	eb 0c                	jmp    c00077fa <f_mkfs+0x49e>
c00077ee:	89 d3                	mov    ebx,edx
c00077f0:	eb 08                	jmp    c00077fa <f_mkfs+0x49e>
c00077f2:	bf 02 00 00 00       	mov    edi,0x2
c00077f7:	83 c9 ff             	or     ecx,0xffffffff
c00077fa:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007801:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007805:	0f b6 c1             	movzx  eax,cl
c0007808:	e8 3a a9 ff ff       	call   c0002147 <xsum32>
c000780d:	66 c1 e9 08          	shr    cx,0x8
c0007811:	89 c2                	mov    edx,eax
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000781a:	0f b7 c1             	movzx  eax,cx
c000781d:	e8 25 a9 ff ff       	call   c0002147 <xsum32>
c0007822:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007827:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000782b:	66 85 db             	test   bx,bx
c000782e:	74 1f                	je     c000784f <f_mkfs+0x4f3>
c0007830:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007833:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000783a:	83 c0 02             	add    eax,0x2
c000783d:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007843:	39 c2                	cmp    edx,eax
c0007845:	74 08                	je     c000784f <f_mkfs+0x4f3>
c0007847:	89 04 24             	mov    DWORD PTR [esp],eax
c000784a:	e9 3f ff ff ff       	jmp    c000778e <f_mkfs+0x432>
c000784f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007852:	83 ec 0c             	sub    esp,0xc
c0007855:	05 01 02 00 00       	add    eax,0x201
c000785a:	c1 e8 09             	shr    eax,0x9
c000785d:	50                   	push   eax
c000785e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007862:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007866:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000786a:	55                   	push   ebp
c000786b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000786f:	e8 a3 a3 ff ff       	call   c0001c17 <disk_write>
c0007874:	83 c4 20             	add    esp,0x20
c0007877:	85 c0                	test   eax,eax
c0007879:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000787c:	0f 85 8b 0b 00 00    	jne    c000840d <f_mkfs+0x10b1>
c0007882:	89 d0                	mov    eax,edx
c0007884:	31 d2                	xor    edx,edx
c0007886:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000788a:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000788e:	66 85 db             	test   bx,bx
c0007891:	74 04                	je     c0007897 <f_mkfs+0x53b>
c0007893:	31 c0                	xor    eax,eax
c0007895:	eb b0                	jmp    c0007847 <f_mkfs+0x4eb>
c0007897:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000789b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000789f:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078a3:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078a9:	31 d2                	xor    edx,edx
c00078ab:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078b6:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078ba:	c1 eb 09             	shr    ebx,0x9
c00078bd:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078c8:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078d0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078d4:	8d 70 01             	lea    esi,[eax+0x1]
c00078d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078df:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078e6:	31 d2                	xor    edx,edx
c00078e8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00078f0:	89 c1                	mov    ecx,eax
c00078f2:	89 e8                	mov    eax,ebp
c00078f4:	e8 e7 a3 ff ff       	call   c0001ce0 <mem_set>
c00078f9:	31 c0                	xor    eax,eax
c00078fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078fe:	76 10                	jbe    c0007910 <f_mkfs+0x5b4>
c0007900:	83 fe 07             	cmp    esi,0x7
c0007903:	76 0b                	jbe    c0007910 <f_mkfs+0x5b4>
c0007905:	40                   	inc    eax
c0007906:	83 ee 08             	sub    esi,0x8
c0007909:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000790e:	eb eb                	jmp    c00078fb <f_mkfs+0x59f>
c0007910:	b2 01                	mov    dl,0x1
c0007912:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007916:	85 f6                	test   esi,esi
c0007918:	74 0c                	je     c0007926 <f_mkfs+0x5ca>
c000791a:	39 04 24             	cmp    DWORD PTR [esp],eax
c000791d:	76 07                	jbe    c0007926 <f_mkfs+0x5ca>
c000791f:	08 11                	or     BYTE PTR [ecx],dl
c0007921:	4e                   	dec    esi
c0007922:	d1 e2                	shl    edx,1
c0007924:	eb f0                	jmp    c0007916 <f_mkfs+0x5ba>
c0007926:	89 df                	mov    edi,ebx
c0007928:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000792c:	76 04                	jbe    c0007932 <f_mkfs+0x5d6>
c000792e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007932:	83 ec 0c             	sub    esp,0xc
c0007935:	57                   	push   edi
c0007936:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000793a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000793e:	55                   	push   ebp
c000793f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007943:	e8 cf a2 ff ff       	call   c0001c17 <disk_write>
c0007948:	83 c4 20             	add    esp,0x20
c000794b:	85 c0                	test   eax,eax
c000794d:	0f 85 ba 0a 00 00    	jne    c000840d <f_mkfs+0x10b1>
c0007953:	31 d2                	xor    edx,edx
c0007955:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007959:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000795d:	29 fb                	sub    ebx,edi
c000795f:	0f 85 7a ff ff ff    	jne    c00078df <f_mkfs+0x583>
c0007965:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007969:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007971:	31 f6                	xor    esi,esi
c0007973:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007977:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000797a:	31 d2                	xor    edx,edx
c000797c:	89 e8                	mov    eax,ebp
c000797e:	e8 5d a3 ff ff       	call   c0001ce0 <mem_set>
c0007983:	31 c9                	xor    ecx,ecx
c0007985:	85 db                	test   ebx,ebx
c0007987:	75 40                	jne    c00079c9 <f_mkfs+0x66d>
c0007989:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000798e:	89 e8                	mov    eax,ebp
c0007990:	bb 02 00 00 00       	mov    ebx,0x2
c0007995:	e8 28 a3 ff ff       	call   c0001cc2 <st_dword>
c000799a:	8d 45 04             	lea    eax,[ebp+0x4]
c000799d:	83 ca ff             	or     edx,0xffffffff
c00079a0:	e8 1d a3 ff ff       	call   c0001cc2 <st_dword>
c00079a5:	b9 08 00 00 00       	mov    ecx,0x8
c00079aa:	eb 1d                	jmp    c00079c9 <f_mkfs+0x66d>
c00079ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079af:	76 3b                	jbe    c00079ec <f_mkfs+0x690>
c00079b1:	43                   	inc    ebx
c00079b2:	83 fe 01             	cmp    esi,0x1
c00079b5:	89 da                	mov    edx,ebx
c00079b7:	77 03                	ja     c00079bc <f_mkfs+0x660>
c00079b9:	83 ca ff             	or     edx,0xffffffff
c00079bc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079c0:	4e                   	dec    esi
c00079c1:	e8 fc a2 ff ff       	call   c0001cc2 <st_dword>
c00079c6:	83 c1 04             	add    ecx,0x4
c00079c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079cd:	85 f6                	test   esi,esi
c00079cf:	75 db                	jne    c00079ac <f_mkfs+0x650>
c00079d1:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079d6:	77 14                	ja     c00079ec <f_mkfs+0x690>
c00079d8:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079dc:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079e3:	85 f6                	test   esi,esi
c00079e5:	74 05                	je     c00079ec <f_mkfs+0x690>
c00079e7:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ea:	77 dd                	ja     c00079c9 <f_mkfs+0x66d>
c00079ec:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079f4:	39 cf                	cmp    edi,ecx
c00079f6:	76 02                	jbe    c00079fa <f_mkfs+0x69e>
c00079f8:	89 cf                	mov    edi,ecx
c00079fa:	83 ec 0c             	sub    esp,0xc
c00079fd:	57                   	push   edi
c00079fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a02:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a06:	55                   	push   ebp
c0007a07:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a0b:	e8 07 a2 ff ff       	call   c0001c17 <disk_write>
c0007a10:	83 c4 20             	add    esp,0x20
c0007a13:	85 c0                	test   eax,eax
c0007a15:	0f 85 f2 09 00 00    	jne    c000840d <f_mkfs+0x10b1>
c0007a1b:	31 d2                	xor    edx,edx
c0007a1d:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a21:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a25:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a29:	0f 85 48 ff ff ff    	jne    c0007977 <f_mkfs+0x61b>
c0007a2f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a32:	31 d2                	xor    edx,edx
c0007a34:	89 e8                	mov    eax,ebp
c0007a36:	31 ff                	xor    edi,edi
c0007a38:	e8 a3 a2 ff ff       	call   c0001ce0 <mem_set>
c0007a3d:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a40:	ba 02 00 00 00       	mov    edx,0x2
c0007a45:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a49:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a4d:	e8 70 a2 ff ff       	call   c0001cc2 <st_dword>
c0007a52:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a55:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a59:	e8 64 a2 ff ff       	call   c0001cc2 <st_dword>
c0007a5e:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a61:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a65:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a69:	e8 54 a2 ff ff       	call   c0001cc2 <st_dword>
c0007a6e:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a71:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a75:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a79:	83 c2 02             	add    edx,0x2
c0007a7c:	e8 41 a2 ff ff       	call   c0001cc2 <st_dword>
c0007a81:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a84:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a88:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a8c:	e8 31 a2 ff ff       	call   c0001cc2 <st_dword>
c0007a91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a95:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a9a:	89 c6                	mov    esi,eax
c0007a9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aa0:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007aa4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007aa7:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007aab:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007aae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ab2:	39 cb                	cmp    ebx,ecx
c0007ab4:	76 02                	jbe    c0007ab8 <f_mkfs+0x75c>
c0007ab6:	89 cb                	mov    ebx,ecx
c0007ab8:	83 ec 0c             	sub    esp,0xc
c0007abb:	53                   	push   ebx
c0007abc:	57                   	push   edi
c0007abd:	56                   	push   esi
c0007abe:	55                   	push   ebp
c0007abf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ac3:	e8 4f a1 ff ff       	call   c0001c17 <disk_write>
c0007ac8:	83 c4 20             	add    esp,0x20
c0007acb:	85 c0                	test   eax,eax
c0007acd:	0f 85 3a 09 00 00    	jne    c000840d <f_mkfs+0x10b1>
c0007ad3:	31 d2                	xor    edx,edx
c0007ad5:	b9 00 02 00 00       	mov    ecx,0x200
c0007ada:	89 e8                	mov    eax,ebp
c0007adc:	e8 ff a1 ff ff       	call   c0001ce0 <mem_set>
c0007ae1:	31 d2                	xor    edx,edx
c0007ae3:	01 de                	add    esi,ebx
c0007ae5:	11 d7                	adc    edi,edx
c0007ae7:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aea:	75 bf                	jne    c0007aab <f_mkfs+0x74f>
c0007aec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007af0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007af4:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007afc:	b9 00 02 00 00       	mov    ecx,0x200
c0007b01:	31 d2                	xor    edx,edx
c0007b03:	89 e8                	mov    eax,ebp
c0007b05:	e8 d6 a1 ff ff       	call   c0001ce0 <mem_set>
c0007b0a:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b0f:	ba 20 a0 02 c0       	mov    edx,0xc002a020
c0007b14:	89 e8                	mov    eax,ebp
c0007b16:	e8 b0 a1 ff ff       	call   c0001ccb <mem_cpy>
c0007b1b:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b22:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b26:	e8 9a a1 ff ff       	call   c0001cc5 <st_qword>
c0007b2b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b2f:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b32:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b36:	e8 8a a1 ff ff       	call   c0001cc5 <st_qword>
c0007b3b:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b3e:	ba 20 00 00 00       	mov    edx,0x20
c0007b43:	e8 7a a1 ff ff       	call   c0001cc2 <st_dword>
c0007b48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b4c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b50:	e8 6d a1 ff ff       	call   c0001cc2 <st_dword>
c0007b55:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b59:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b5d:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b61:	e8 5c a1 ff ff       	call   c0001cc2 <st_dword>
c0007b66:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b69:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b6d:	e8 50 a1 ff ff       	call   c0001cc2 <st_dword>
c0007b72:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b76:	8d 50 02             	lea    edx,[eax+0x2]
c0007b79:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b7c:	e8 41 a1 ff ff       	call   c0001cc2 <st_dword>
c0007b81:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b84:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b89:	e8 34 a1 ff ff       	call   c0001cc2 <st_dword>
c0007b8e:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b91:	ba 00 01 00 00       	mov    edx,0x100
c0007b96:	e8 23 a1 ff ff       	call   c0001cbe <st_word>
c0007b9b:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b9f:	b8 0a 00 00 00       	mov    eax,0xa
c0007ba4:	48                   	dec    eax
c0007ba5:	74 05                	je     c0007bac <f_mkfs+0x850>
c0007ba7:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007baa:	eb f8                	jmp    c0007ba4 <f_mkfs+0x848>
c0007bac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bb0:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bb8:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bbc:	74 05                	je     c0007bc3 <f_mkfs+0x867>
c0007bbe:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bc1:	eb f5                	jmp    c0007bb8 <f_mkfs+0x85c>
c0007bc3:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bc6:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007bcb:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bd1:	31 db                	xor    ebx,ebx
c0007bd3:	e8 e6 a0 ff ff       	call   c0001cbe <st_word>
c0007bd8:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bde:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007be3:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be6:	e8 d3 a0 ff ff       	call   c0001cbe <st_word>
c0007beb:	31 c9                	xor    ecx,ecx
c0007bed:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bf0:	83 f8 01             	cmp    eax,0x1
c0007bf3:	76 13                	jbe    c0007c08 <f_mkfs+0x8ac>
c0007bf5:	83 f9 70             	cmp    ecx,0x70
c0007bf8:	74 0e                	je     c0007c08 <f_mkfs+0x8ac>
c0007bfa:	89 da                	mov    edx,ebx
c0007bfc:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c01:	e8 41 a5 ff ff       	call   c0002147 <xsum32>
c0007c06:	89 c3                	mov    ebx,eax
c0007c08:	41                   	inc    ecx
c0007c09:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c0f:	75 dc                	jne    c0007bed <f_mkfs+0x891>
c0007c11:	89 f0                	mov    eax,esi
c0007c13:	89 fa                	mov    edx,edi
c0007c15:	83 c0 01             	add    eax,0x1
c0007c18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c1c:	83 d2 00             	adc    edx,0x0
c0007c1f:	83 ec 0c             	sub    esp,0xc
c0007c22:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c26:	6a 01                	push   0x1
c0007c28:	57                   	push   edi
c0007c29:	56                   	push   esi
c0007c2a:	55                   	push   ebp
c0007c2b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c2f:	e8 e3 9f ff ff       	call   c0001c17 <disk_write>
c0007c34:	83 c4 20             	add    esp,0x20
c0007c37:	85 c0                	test   eax,eax
c0007c39:	0f 85 ce 07 00 00    	jne    c000840d <f_mkfs+0x10b1>
c0007c3f:	31 d2                	xor    edx,edx
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	89 e8                	mov    eax,ebp
c0007c48:	e8 93 a0 ff ff       	call   c0001ce0 <mem_set>
c0007c4d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c55:	e8 64 a0 ff ff       	call   c0001cbe <st_word>
c0007c5a:	89 f0                	mov    eax,esi
c0007c5c:	89 fa                	mov    edx,edi
c0007c5e:	83 c0 09             	add    eax,0x9
c0007c61:	83 d2 00             	adc    edx,0x0
c0007c64:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c67:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c6b:	31 c9                	xor    ecx,ecx
c0007c6d:	41                   	inc    ecx
c0007c6e:	89 da                	mov    edx,ebx
c0007c70:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c75:	e8 cd a4 ff ff       	call   c0002147 <xsum32>
c0007c7a:	89 c3                	mov    ebx,eax
c0007c7c:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c82:	75 e9                	jne    c0007c6d <f_mkfs+0x911>
c0007c84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c88:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c8c:	83 c0 01             	add    eax,0x1
c0007c8f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c93:	83 d2 00             	adc    edx,0x0
c0007c96:	83 ec 0c             	sub    esp,0xc
c0007c99:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c9d:	6a 01                	push   0x1
c0007c9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ca3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ca7:	55                   	push   ebp
c0007ca8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cac:	e8 66 9f ff ff       	call   c0001c17 <disk_write>
c0007cb1:	83 c4 20             	add    esp,0x20
c0007cb4:	85 c0                	test   eax,eax
c0007cb6:	0f 85 51 07 00 00    	jne    c000840d <f_mkfs+0x10b1>
c0007cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cc0:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cc4:	75 09                	jne    c0007ccf <f_mkfs+0x973>
c0007cc6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cc9:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ccd:	74 12                	je     c0007ce1 <f_mkfs+0x985>
c0007ccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cd3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cdb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cdf:	eb 8a                	jmp    c0007c6b <f_mkfs+0x90f>
c0007ce1:	31 d2                	xor    edx,edx
c0007ce3:	b9 00 02 00 00       	mov    ecx,0x200
c0007ce8:	89 e8                	mov    eax,ebp
c0007cea:	e8 f1 9f ff ff       	call   c0001ce0 <mem_set>
c0007cef:	83 c6 0b             	add    esi,0xb
c0007cf2:	83 d7 00             	adc    edi,0x0
c0007cf5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cf9:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cfd:	31 c9                	xor    ecx,ecx
c0007cff:	41                   	inc    ecx
c0007d00:	89 da                	mov    edx,ebx
c0007d02:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d07:	e8 3b a4 ff ff       	call   c0002147 <xsum32>
c0007d0c:	89 c3                	mov    ebx,eax
c0007d0e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d14:	75 e9                	jne    c0007cff <f_mkfs+0x9a3>
c0007d16:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d19:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d1d:	83 c6 01             	add    esi,0x1
c0007d20:	83 d7 00             	adc    edi,0x0
c0007d23:	83 ec 0c             	sub    esp,0xc
c0007d26:	6a 01                	push   0x1
c0007d28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d30:	55                   	push   ebp
c0007d31:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d35:	e8 dd 9e ff ff       	call   c0001c17 <disk_write>
c0007d3a:	83 c4 20             	add    esp,0x20
c0007d3d:	85 c0                	test   eax,eax
c0007d3f:	0f 85 c8 06 00 00    	jne    c000840d <f_mkfs+0x10b1>
c0007d45:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d49:	75 06                	jne    c0007d51 <f_mkfs+0x9f5>
c0007d4b:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d4f:	74 09                	je     c0007d5a <f_mkfs+0x9fe>
c0007d51:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d54:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d58:	eb a3                	jmp    c0007cfd <f_mkfs+0x9a1>
c0007d5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d5e:	89 da                	mov    edx,ebx
c0007d60:	01 e8                	add    eax,ebp
c0007d62:	e8 5b 9f ff ff       	call   c0001cc2 <st_dword>
c0007d67:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d6c:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d74:	75 e4                	jne    c0007d5a <f_mkfs+0x9fe>
c0007d76:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d79:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d7d:	83 c6 02             	add    esi,0x2
c0007d80:	83 d7 00             	adc    edi,0x0
c0007d83:	83 ec 0c             	sub    esp,0xc
c0007d86:	6a 01                	push   0x1
c0007d88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d90:	55                   	push   ebp
c0007d91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d95:	e8 7d 9e ff ff       	call   c0001c17 <disk_write>
c0007d9a:	83 c4 20             	add    esp,0x20
c0007d9d:	85 c0                	test   eax,eax
c0007d9f:	0f 85 68 06 00 00    	jne    c000840d <f_mkfs+0x10b1>
c0007da5:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007daa:	74 0d                	je     c0007db9 <f_mkfs+0xa5d>
c0007dac:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007db4:	e9 43 fd ff ff       	jmp    c0007afc <f_mkfs+0x7a0>
c0007db9:	b1 07                	mov    cl,0x7
c0007dbb:	e9 e3 05 00 00       	jmp    c00083a3 <f_mkfs+0x1047>
c0007dc0:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dc5:	0f 85 4f 02 00 00    	jne    c000801a <f_mkfs+0xcbe>
c0007dcb:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dd0:	0f 86 22 02 00 00    	jbe    c0007ff8 <f_mkfs+0xc9c>
c0007dd6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ddb:	0f 85 81 06 00 00    	jne    c0008462 <f_mkfs+0x1106>
c0007de1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007de4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007de8:	83 f8 40             	cmp    eax,0x40
c0007deb:	0f 87 51 06 00 00    	ja     c0008442 <f_mkfs+0x10e6>
c0007df1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007df5:	85 ff                	test   edi,edi
c0007df7:	75 1c                	jne    c0007e15 <f_mkfs+0xab9>
c0007df9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dfc:	ba 20 9f 02 c0       	mov    edx,0xc0029f20
c0007e01:	c1 e9 0c             	shr    ecx,0xc
c0007e04:	bf 01 00 00 00       	mov    edi,0x1
c0007e09:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e0c:	66 85 c0             	test   ax,ax
c0007e0f:	0f 85 95 01 00 00    	jne    c0007faa <f_mkfs+0xc4e>
c0007e15:	31 d2                	xor    edx,edx
c0007e17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e1a:	f7 f7                	div    edi
c0007e1c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e21:	0f 86 95 01 00 00    	jbe    c0007fbc <f_mkfs+0xc60>
c0007e27:	83 c0 02             	add    eax,0x2
c0007e2a:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e2f:	01 c0                	add    eax,eax
c0007e31:	05 ff 01 00 00       	add    eax,0x1ff
c0007e36:	be 01 00 00 00       	mov    esi,0x1
c0007e3b:	c1 e8 09             	shr    eax,0x9
c0007e3e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e46:	c1 e0 05             	shl    eax,0x5
c0007e49:	c1 e8 09             	shr    eax,0x9
c0007e4c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e50:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e55:	31 d2                	xor    edx,edx
c0007e57:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e5b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e5f:	89 f0                	mov    eax,esi
c0007e61:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e65:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e6d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e71:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e75:	31 d2                	xor    edx,edx
c0007e77:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e7c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e80:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e84:	31 db                	xor    ebx,ebx
c0007e86:	01 c8                	add    eax,ecx
c0007e88:	11 da                	adc    edx,ebx
c0007e8a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e8e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e92:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e96:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e9a:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e9e:	f7 da                	neg    edx
c0007ea0:	21 d1                	and    ecx,edx
c0007ea2:	29 d9                	sub    ecx,ebx
c0007ea4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ea9:	0f 85 20 01 00 00    	jne    c0007fcf <f_mkfs+0xc73>
c0007eaf:	31 db                	xor    ebx,ebx
c0007eb1:	01 ce                	add    esi,ecx
c0007eb3:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007eb7:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ebb:	31 d2                	xor    edx,edx
c0007ebd:	89 f8                	mov    eax,edi
c0007ebf:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ec3:	c1 e0 04             	shl    eax,0x4
c0007ec6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007eca:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ece:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ed2:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ed6:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ed9:	19 d3                	sbb    ebx,edx
c0007edb:	0f 82 40 01 00 00    	jb     c0008021 <f_mkfs+0xcc5>
c0007ee1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ee4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ee8:	89 c8                	mov    eax,ecx
c0007eea:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eef:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ef3:	29 f0                	sub    eax,esi
c0007ef5:	29 d0                	sub    eax,edx
c0007ef7:	31 d2                	xor    edx,edx
c0007ef9:	f7 f7                	div    edi
c0007efb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f00:	89 c3                	mov    ebx,eax
c0007f02:	0f 85 b8 fe ff ff    	jne    c0007dc0 <f_mkfs+0xa64>
c0007f08:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f0d:	0f 87 1d 01 00 00    	ja     c0008030 <f_mkfs+0xcd4>
c0007f13:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f18:	0f 85 03 01 00 00    	jne    c0008021 <f_mkfs+0xcc5>
c0007f1e:	83 ff 01             	cmp    edi,0x1
c0007f21:	0f 86 fa 00 00 00    	jbe    c0008021 <f_mkfs+0xcc5>
c0007f27:	d1 ef                	shr    edi,1
c0007f29:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f2d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f31:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f34:	85 db                	test   ebx,ebx
c0007f36:	75 2d                	jne    c0007f65 <f_mkfs+0xc09>
c0007f38:	89 cb                	mov    ebx,ecx
c0007f3a:	ba 30 9f 02 c0       	mov    edx,0xc0029f30
c0007f3f:	c1 eb 11             	shr    ebx,0x11
c0007f42:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f4a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f4d:	66 85 c0             	test   ax,ax
c0007f50:	74 11                	je     c0007f63 <f_mkfs+0xc07>
c0007f52:	83 c2 02             	add    edx,0x2
c0007f55:	39 d8                	cmp    eax,ebx
c0007f57:	77 0a                	ja     c0007f63 <f_mkfs+0xc07>
c0007f59:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f5d:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f61:	eb e7                	jmp    c0007f4a <f_mkfs+0xbee>
c0007f63:	31 db                	xor    ebx,ebx
c0007f65:	31 d2                	xor    edx,edx
c0007f67:	89 c8                	mov    eax,ecx
c0007f69:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f6d:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f74:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f79:	c1 ea 09             	shr    edx,0x9
c0007f7c:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f81:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f85:	0f 87 96 00 00 00    	ja     c0008021 <f_mkfs+0xcc5>
c0007f8b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f8f:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f97:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f9b:	be 20 00 00 00       	mov    esi,0x20
c0007fa0:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fa5:	e9 a6 fe ff ff       	jmp    c0007e50 <f_mkfs+0xaf4>
c0007faa:	83 c2 02             	add    edx,0x2
c0007fad:	39 c8                	cmp    eax,ecx
c0007faf:	0f 87 60 fe ff ff    	ja     c0007e15 <f_mkfs+0xab9>
c0007fb5:	01 ff                	add    edi,edi
c0007fb7:	e9 4d fe ff ff       	jmp    c0007e09 <f_mkfs+0xaad>
c0007fbc:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fbf:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fc4:	40                   	inc    eax
c0007fc5:	d1 e8                	shr    eax,1
c0007fc7:	83 c0 03             	add    eax,0x3
c0007fca:	e9 62 fe ff ff       	jmp    c0007e31 <f_mkfs+0xad5>
c0007fcf:	31 d2                	xor    edx,edx
c0007fd1:	89 c8                	mov    eax,ecx
c0007fd3:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fd7:	85 d2                	test   edx,edx
c0007fd9:	74 0c                	je     c0007fe7 <f_mkfs+0xc8b>
c0007fdb:	49                   	dec    ecx
c0007fdc:	46                   	inc    esi
c0007fdd:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fe2:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fe7:	89 c8                	mov    eax,ecx
c0007fe9:	31 d2                	xor    edx,edx
c0007feb:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fef:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007ff3:	e9 c3 fe ff ff       	jmp    c0007ebb <f_mkfs+0xb5f>
c0007ff8:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffd:	77 31                	ja     c0008030 <f_mkfs+0xcd4>
c0007fff:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008004:	75 1b                	jne    c0008021 <f_mkfs+0xcc5>
c0008006:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008009:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000800d:	3d 80 00 00 00       	cmp    eax,0x80
c0008012:	0f 86 d9 fd ff ff    	jbe    c0007df1 <f_mkfs+0xa95>
c0008018:	eb 07                	jmp    c0008021 <f_mkfs+0xcc5>
c000801a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000801f:	76 0a                	jbe    c000802b <f_mkfs+0xccf>
c0008021:	bb 0e 00 00 00       	mov    ebx,0xe
c0008026:	e9 ff 03 00 00       	jmp    c000842a <f_mkfs+0x10ce>
c000802b:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008030:	31 d2                	xor    edx,edx
c0008032:	b9 00 02 00 00       	mov    ecx,0x200
c0008037:	89 e8                	mov    eax,ebp
c0008039:	e8 a2 9c ff ff       	call   c0001ce0 <mem_set>
c000803e:	b9 0b 00 00 00       	mov    ecx,0xb
c0008043:	ba 42 a0 02 c0       	mov    edx,0xc002a042
c0008048:	89 e8                	mov    eax,ebp
c000804a:	e8 7c 9c ff ff       	call   c0001ccb <mem_cpy>
c000804f:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008052:	ba 00 02 00 00       	mov    edx,0x200
c0008057:	e8 62 9c ff ff       	call   c0001cbe <st_word>
c000805c:	89 f8                	mov    eax,edi
c000805e:	0f b7 d6             	movzx  edx,si
c0008061:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008064:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008067:	e8 52 9c ff ff       	call   c0001cbe <st_word>
c000806c:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008070:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008075:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008078:	75 08                	jne    c0008082 <f_mkfs+0xd26>
c000807a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008082:	8d 45 11             	lea    eax,[ebp+0x11]
c0008085:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008089:	e8 30 9c ff ff       	call   c0001cbe <st_word>
c000808e:	b8 ff ff 00 00       	mov    eax,0xffff
c0008093:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008097:	39 d0                	cmp    eax,edx
c0008099:	b8 00 00 00 00       	mov    eax,0x0
c000809e:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080a2:	72 0a                	jb     c00080ae <f_mkfs+0xd52>
c00080a4:	8d 45 13             	lea    eax,[ebp+0x13]
c00080a7:	e8 12 9c ff ff       	call   c0001cbe <st_word>
c00080ac:	eb 08                	jmp    c00080b6 <f_mkfs+0xd5a>
c00080ae:	8d 45 20             	lea    eax,[ebp+0x20]
c00080b1:	e8 0c 9c ff ff       	call   c0001cc2 <st_dword>
c00080b6:	8d 45 18             	lea    eax,[ebp+0x18]
c00080b9:	ba 3f 00 00 00       	mov    edx,0x3f
c00080be:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080c2:	e8 f7 9b ff ff       	call   c0001cbe <st_word>
c00080c7:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080ca:	ba ff 00 00 00       	mov    edx,0xff
c00080cf:	e8 ea 9b ff ff       	call   c0001cbe <st_word>
c00080d4:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080db:	e8 e2 9b ff ff       	call   c0001cc2 <st_dword>
c00080e0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080e5:	75 57                	jne    c000813e <f_mkfs+0xde2>
c00080e7:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ea:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ef:	e8 ce 9b ff ff       	call   c0001cc2 <st_dword>
c00080f4:	8d 45 24             	lea    eax,[ebp+0x24]
c00080f7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080fb:	e8 c2 9b ff ff       	call   c0001cc2 <st_dword>
c0008100:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008103:	ba 02 00 00 00       	mov    edx,0x2
c0008108:	e8 b5 9b ff ff       	call   c0001cc2 <st_dword>
c000810d:	8d 45 30             	lea    eax,[ebp+0x30]
c0008110:	ba 01 00 00 00       	mov    edx,0x1
c0008115:	e8 a4 9b ff ff       	call   c0001cbe <st_word>
c000811a:	8d 45 32             	lea    eax,[ebp+0x32]
c000811d:	ba 06 00 00 00       	mov    edx,0x6
c0008122:	e8 97 9b ff ff       	call   c0001cbe <st_word>
c0008127:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000812b:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000812f:	8d 45 47             	lea    eax,[ebp+0x47]
c0008132:	b9 13 00 00 00       	mov    ecx,0x13
c0008137:	ba 4e a0 02 c0       	mov    edx,0xc002a04e
c000813c:	eb 2f                	jmp    c000816d <f_mkfs+0xe11>
c000813e:	8d 45 27             	lea    eax,[ebp+0x27]
c0008141:	ba 00 00 21 50       	mov    edx,0x50210000
c0008146:	e8 77 9b ff ff       	call   c0001cc2 <st_dword>
c000814b:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008150:	8d 45 16             	lea    eax,[ebp+0x16]
c0008153:	e8 66 9b ff ff       	call   c0001cbe <st_word>
c0008158:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000815c:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008160:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008163:	b9 13 00 00 00       	mov    ecx,0x13
c0008168:	ba 62 a0 02 c0       	mov    edx,0xc002a062
c000816d:	e8 59 9b ff ff       	call   c0001ccb <mem_cpy>
c0008172:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008178:	ba 55 aa 00 00       	mov    edx,0xaa55
c000817d:	89 f0                	mov    eax,esi
c000817f:	e8 3a 9b ff ff       	call   c0001cbe <st_word>
c0008184:	83 ec 0c             	sub    esp,0xc
c0008187:	6a 01                	push   0x1
c0008189:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000818d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008191:	55                   	push   ebp
c0008192:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008196:	e8 7c 9a ff ff       	call   c0001c17 <disk_write>
c000819b:	83 c4 20             	add    esp,0x20
c000819e:	85 c0                	test   eax,eax
c00081a0:	0f 85 67 02 00 00    	jne    c000840d <f_mkfs+0x10b1>
c00081a6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ab:	0f 85 b7 00 00 00    	jne    c0008268 <f_mkfs+0xf0c>
c00081b1:	83 ec 0c             	sub    esp,0xc
c00081b4:	6a 01                	push   0x1
c00081b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081ba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081be:	83 c0 06             	add    eax,0x6
c00081c1:	83 d2 00             	adc    edx,0x0
c00081c4:	52                   	push   edx
c00081c5:	50                   	push   eax
c00081c6:	55                   	push   ebp
c00081c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081cb:	e8 47 9a ff ff       	call   c0001c17 <disk_write>
c00081d0:	83 c4 20             	add    esp,0x20
c00081d3:	b9 00 02 00 00       	mov    ecx,0x200
c00081d8:	31 d2                	xor    edx,edx
c00081da:	89 e8                	mov    eax,ebp
c00081dc:	e8 ff 9a ff ff       	call   c0001ce0 <mem_set>
c00081e1:	ba 52 52 61 41       	mov    edx,0x41615252
c00081e6:	89 e8                	mov    eax,ebp
c00081e8:	e8 d5 9a ff ff       	call   c0001cc2 <st_dword>
c00081ed:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081f3:	ba 72 72 41 61       	mov    edx,0x61417272
c00081f8:	e8 c5 9a ff ff       	call   c0001cc2 <st_dword>
c00081fd:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008200:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008206:	e8 b7 9a ff ff       	call   c0001cc2 <st_dword>
c000820b:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008211:	ba 02 00 00 00       	mov    edx,0x2
c0008216:	e8 a7 9a ff ff       	call   c0001cc2 <st_dword>
c000821b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008220:	89 f0                	mov    eax,esi
c0008222:	e8 97 9a ff ff       	call   c0001cbe <st_word>
c0008227:	83 ec 0c             	sub    esp,0xc
c000822a:	6a 01                	push   0x1
c000822c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008230:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008234:	83 c0 07             	add    eax,0x7
c0008237:	83 d2 00             	adc    edx,0x0
c000823a:	52                   	push   edx
c000823b:	50                   	push   eax
c000823c:	55                   	push   ebp
c000823d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008241:	e8 d1 99 ff ff       	call   c0001c17 <disk_write>
c0008246:	83 c4 14             	add    esp,0x14
c0008249:	6a 01                	push   0x1
c000824b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000824f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008253:	83 c0 01             	add    eax,0x1
c0008256:	83 d2 00             	adc    edx,0x0
c0008259:	52                   	push   edx
c000825a:	50                   	push   eax
c000825b:	55                   	push   ebp
c000825c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008260:	e8 b2 99 ff ff       	call   c0001c17 <disk_write>
c0008265:	83 c4 20             	add    esp,0x20
c0008268:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000826f:	31 d2                	xor    edx,edx
c0008271:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008277:	31 db                	xor    ebx,ebx
c0008279:	89 e8                	mov    eax,ebp
c000827b:	e8 60 9a ff ff       	call   c0001ce0 <mem_set>
c0008280:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008285:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000828c:	0f 94 c3             	sete   bl
c000828f:	4b                   	dec    ebx
c0008290:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008296:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000829c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082a1:	75 21                	jne    c00082c4 <f_mkfs+0xf68>
c00082a3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082a8:	89 e8                	mov    eax,ebp
c00082aa:	e8 13 9a ff ff       	call   c0001cc2 <st_dword>
c00082af:	8d 45 04             	lea    eax,[ebp+0x4]
c00082b2:	83 ca ff             	or     edx,0xffffffff
c00082b5:	e8 08 9a ff ff       	call   c0001cc2 <st_dword>
c00082ba:	8d 45 08             	lea    eax,[ebp+0x8]
c00082bd:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082c2:	eb 04                	jmp    c00082c8 <f_mkfs+0xf6c>
c00082c4:	89 da                	mov    edx,ebx
c00082c6:	89 e8                	mov    eax,ebp
c00082c8:	e8 f5 99 ff ff       	call   c0001cc2 <st_dword>
c00082cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082d5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082d9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082dd:	39 ce                	cmp    esi,ecx
c00082df:	76 02                	jbe    c00082e3 <f_mkfs+0xf87>
c00082e1:	89 ce                	mov    esi,ecx
c00082e3:	83 ec 0c             	sub    esp,0xc
c00082e6:	56                   	push   esi
c00082e7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082eb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ef:	55                   	push   ebp
c00082f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082f4:	e8 1e 99 ff ff       	call   c0001c17 <disk_write>
c00082f9:	83 c4 20             	add    esp,0x20
c00082fc:	85 c0                	test   eax,eax
c00082fe:	0f 85 09 01 00 00    	jne    c000840d <f_mkfs+0x10b1>
c0008304:	31 d2                	xor    edx,edx
c0008306:	b9 00 02 00 00       	mov    ecx,0x200
c000830b:	89 e8                	mov    eax,ebp
c000830d:	e8 ce 99 ff ff       	call   c0001ce0 <mem_set>
c0008312:	31 d2                	xor    edx,edx
c0008314:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008318:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000831c:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008320:	75 b3                	jne    c00082d5 <f_mkfs+0xf79>
c0008322:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008325:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000832c:	40                   	inc    eax
c000832d:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008331:	0f 87 65 ff ff ff    	ja     c000829c <f_mkfs+0xf40>
c0008337:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000833c:	74 04                	je     c0008342 <f_mkfs+0xfe6>
c000833e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008342:	89 fb                	mov    ebx,edi
c0008344:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008348:	76 04                	jbe    c000834e <f_mkfs+0xff2>
c000834a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000834e:	83 ec 0c             	sub    esp,0xc
c0008351:	53                   	push   ebx
c0008352:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008356:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000835a:	55                   	push   ebp
c000835b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000835f:	e8 b3 98 ff ff       	call   c0001c17 <disk_write>
c0008364:	83 c4 20             	add    esp,0x20
c0008367:	85 c0                	test   eax,eax
c0008369:	0f 85 9e 00 00 00    	jne    c000840d <f_mkfs+0x10b1>
c000836f:	31 d2                	xor    edx,edx
c0008371:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008375:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008379:	29 df                	sub    edi,ebx
c000837b:	75 c5                	jne    c0008342 <f_mkfs+0xfe6>
c000837d:	b1 0c                	mov    cl,0xc
c000837f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008384:	74 1d                	je     c00083a3 <f_mkfs+0x1047>
c0008386:	b8 ff ff 00 00       	mov    eax,0xffff
c000838b:	b1 06                	mov    cl,0x6
c000838d:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008391:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008395:	72 0c                	jb     c00083a3 <f_mkfs+0x1047>
c0008397:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000839c:	0f 94 c1             	sete   cl
c000839f:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083a3:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083a8:	75 4c                	jne    c00083f6 <f_mkfs+0x109a>
c00083aa:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083ae:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083b2:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083b9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083c0:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083cb:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083d6:	0f b6 c9             	movzx  ecx,cl
c00083d9:	83 ec 0c             	sub    esp,0xc
c00083dc:	55                   	push   ebp
c00083dd:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083e8:	e8 2f c2 ff ff       	call   c000461c <create_partition>
c00083ed:	83 c4 10             	add    esp,0x10
c00083f0:	89 c3                	mov    ebx,eax
c00083f2:	85 c0                	test   eax,eax
c00083f4:	75 34                	jne    c000842a <f_mkfs+0x10ce>
c00083f6:	31 db                	xor    ebx,ebx
c00083f8:	50                   	push   eax
c00083f9:	6a 00                	push   0x0
c00083fb:	6a 00                	push   0x0
c00083fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008401:	e8 27 98 ff ff       	call   c0001c2d <disk_ioctl>
c0008406:	83 c4 10             	add    esp,0x10
c0008409:	85 c0                	test   eax,eax
c000840b:	74 1d                	je     c000842a <f_mkfs+0x10ce>
c000840d:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008415:	75 0c                	jne    c0008423 <f_mkfs+0x10c7>
c0008417:	83 ec 0c             	sub    esp,0xc
c000841a:	55                   	push   ebp
c000841b:	e8 75 00 00 00       	call   c0008495 <ff_memfree>
c0008420:	83 c4 10             	add    esp,0x10
c0008423:	bb 01 00 00 00       	mov    ebx,0x1
c0008428:	eb 48                	jmp    c0008472 <f_mkfs+0x1116>
c000842a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008432:	75 3e                	jne    c0008472 <f_mkfs+0x1116>
c0008434:	83 ec 0c             	sub    esp,0xc
c0008437:	55                   	push   ebp
c0008438:	e8 58 00 00 00       	call   c0008495 <ff_memfree>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	eb 30                	jmp    c0008472 <f_mkfs+0x1116>
c0008442:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008447:	0f 85 eb fa ff ff    	jne    c0007f38 <f_mkfs+0xbdc>
c000844d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008451:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008457:	0f 86 b8 f9 ff ff    	jbe    c0007e15 <f_mkfs+0xab9>
c000845d:	e9 bf fb ff ff       	jmp    c0008021 <f_mkfs+0xcc5>
c0008462:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008467:	0f 85 c0 fa ff ff    	jne    c0007f2d <f_mkfs+0xbd1>
c000846d:	e9 af fb ff ff       	jmp    c0008021 <f_mkfs+0xcc5>
c0008472:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008478:	89 d8                	mov    eax,ebx
c000847a:	5b                   	pop    ebx
c000847b:	5e                   	pop    esi
c000847c:	5f                   	pop    edi
c000847d:	5d                   	pop    ebp
c000847e:	c3                   	ret    

c000847f <ff_memalloc>:
c000847f:	83 ec 0c             	sub    esp,0xc
c0008482:	83 ec 0c             	sub    esp,0xc
c0008485:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008489:	e8 32 74 00 00       	call   c000f8c0 <malloc>
c000848e:	83 c4 10             	add    esp,0x10
c0008491:	83 c4 0c             	add    esp,0xc
c0008494:	c3                   	ret    

c0008495 <ff_memfree>:
c0008495:	83 ec 0c             	sub    esp,0xc
c0008498:	83 ec 0c             	sub    esp,0xc
c000849b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849f:	e8 2c 74 00 00       	call   c000f8d0 <free>
c00084a4:	83 c4 10             	add    esp,0x10
c00084a7:	90                   	nop
c00084a8:	83 c4 0c             	add    esp,0xc
c00084ab:	c3                   	ret    

c00084ac <ff_uni2oem>:
c00084ac:	83 ec 14             	sub    esp,0x14
c00084af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084b3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084b7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084be:	c7 44 24 0c 80 a3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a380
c00084c6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084cb:	77 0b                	ja     c00084d8 <ff_uni2oem+0x2c>
c00084cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084d1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d6:	eb 5b                	jmp    c0008533 <ff_uni2oem+0x87>
c00084d8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084e0:	77 51                	ja     c0008533 <ff_uni2oem+0x87>
c00084e2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084e8:	75 49                	jne    c0008533 <ff_uni2oem+0x87>
c00084ea:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084f1:	eb 0b                	jmp    c00084fe <ff_uni2oem+0x52>
c00084f3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084f8:	40                   	inc    eax
c00084f9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084fe:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008504:	77 1b                	ja     c0008521 <ff_uni2oem+0x75>
c0008506:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000850b:	01 c0                	add    eax,eax
c000850d:	89 c2                	mov    edx,eax
c000850f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008513:	01 d0                	add    eax,edx
c0008515:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008518:	0f b7 c0             	movzx  eax,ax
c000851b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000851f:	75 d2                	jne    c00084f3 <ff_uni2oem+0x47>
c0008521:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008526:	83 e8 80             	sub    eax,0xffffff80
c0008529:	25 ff 00 00 00       	and    eax,0xff
c000852e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008533:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008538:	83 c4 14             	add    esp,0x14
c000853b:	c3                   	ret    

c000853c <ff_oem2uni>:
c000853c:	83 ec 18             	sub    esp,0x18
c000853f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008543:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008547:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000854c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008550:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008557:	c7 44 24 10 80 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a380
c000855f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008565:	77 0b                	ja     c0008572 <ff_oem2uni+0x36>
c0008567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000856b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008570:	eb 2d                	jmp    c000859f <ff_oem2uni+0x63>
c0008572:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008578:	75 25                	jne    c000859f <ff_oem2uni+0x63>
c000857a:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008581:	77 1c                	ja     c000859f <ff_oem2uni+0x63>
c0008583:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008588:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000858d:	01 c0                	add    eax,eax
c000858f:	89 c2                	mov    edx,eax
c0008591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008595:	01 d0                	add    eax,edx
c0008597:	66 8b 00             	mov    ax,WORD PTR [eax]
c000859a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000859f:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085a4:	83 c4 18             	add    esp,0x18
c00085a7:	c3                   	ret    

c00085a8 <ff_wtoupper>:
c00085a8:	83 ec 10             	sub    esp,0x10
c00085ab:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085b3:	0f 87 3e 01 00 00    	ja     c00086f7 <ff_wtoupper+0x14f>
c00085b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085bd:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085c2:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085c9:	77 07                	ja     c00085d2 <ff_wtoupper+0x2a>
c00085cb:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c00085d0:	eb 05                	jmp    c00085d7 <ff_wtoupper+0x2f>
c00085d2:	b8 c0 a0 02 c0       	mov    eax,0xc002a0c0
c00085d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085df:	8d 50 02             	lea    edx,[eax+0x2]
c00085e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085e6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085e9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085ee:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085f4:	0f 84 f4 00 00 00    	je     c00086ee <ff_wtoupper+0x146>
c00085fa:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085ff:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008604:	0f 82 e4 00 00 00    	jb     c00086ee <ff_wtoupper+0x146>
c000860a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000860e:	8d 50 02             	lea    edx,[eax+0x2]
c0008611:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008615:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008618:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000861d:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008622:	66 c1 e8 08          	shr    ax,0x8
c0008626:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000862b:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008632:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008637:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000863c:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008641:	01 ca                	add    edx,ecx
c0008643:	39 d0                	cmp    eax,edx
c0008645:	0f 8d 86 00 00 00    	jge    c00086d1 <ff_wtoupper+0x129>
c000864b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008650:	83 f8 08             	cmp    eax,0x8
c0008653:	0f 87 94 00 00 00    	ja     c00086ed <ff_wtoupper+0x145>
c0008659:	8b 04 85 80 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f80]
c0008660:	ff e0                	jmp    eax
c0008662:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008667:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000866c:	29 c2                	sub    edx,eax
c000866e:	89 d0                	mov    eax,edx
c0008670:	01 c0                	add    eax,eax
c0008672:	89 c2                	mov    edx,eax
c0008674:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008678:	01 d0                	add    eax,edx
c000867a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000867d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008682:	eb 4b                	jmp    c00086cf <ff_wtoupper+0x127>
c0008684:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008689:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000868d:	83 e0 01             	and    eax,0x1
c0008690:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008695:	eb 38                	jmp    c00086cf <ff_wtoupper+0x127>
c0008697:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000869d:	eb 30                	jmp    c00086cf <ff_wtoupper+0x127>
c000869f:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086a5:	eb 28                	jmp    c00086cf <ff_wtoupper+0x127>
c00086a7:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086ad:	eb 20                	jmp    c00086cf <ff_wtoupper+0x127>
c00086af:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086b5:	eb 18                	jmp    c00086cf <ff_wtoupper+0x127>
c00086b7:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086bd:	eb 10                	jmp    c00086cf <ff_wtoupper+0x127>
c00086bf:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086c5:	eb 08                	jmp    c00086cf <ff_wtoupper+0x127>
c00086c7:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086ce:	90                   	nop
c00086cf:	eb 1c                	jmp    c00086ed <ff_wtoupper+0x145>
c00086d1:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086d7:	0f 85 fe fe ff ff    	jne    c00085db <ff_wtoupper+0x33>
c00086dd:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086e2:	01 c0                	add    eax,eax
c00086e4:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086e8:	e9 ee fe ff ff       	jmp    c00085db <ff_wtoupper+0x33>
c00086ed:	90                   	nop
c00086ee:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086fb:	83 c4 10             	add    esp,0x10
c00086fe:	c3                   	ret    

c00086ff <psrc_set_converter>:
c00086ff:	56                   	push   esi
c0008700:	89 d6                	mov    esi,edx
c0008702:	53                   	push   ebx
c0008703:	89 c3                	mov    ebx,eax
c0008705:	83 ec 0c             	sub    esp,0xc
c0008708:	52                   	push   edx
c0008709:	50                   	push   eax
c000870a:	e8 6f 55 00 00       	call   c000dc7e <sinc_set_converter>
c000870f:	83 c4 10             	add    esp,0x10
c0008712:	85 c0                	test   eax,eax
c0008714:	74 25                	je     c000873b <psrc_set_converter+0x3c>
c0008716:	50                   	push   eax
c0008717:	50                   	push   eax
c0008718:	56                   	push   esi
c0008719:	53                   	push   ebx
c000871a:	e8 17 5d 00 00       	call   c000e436 <zoh_set_converter>
c000871f:	83 c4 10             	add    esp,0x10
c0008722:	85 c0                	test   eax,eax
c0008724:	74 15                	je     c000873b <psrc_set_converter+0x3c>
c0008726:	51                   	push   ecx
c0008727:	51                   	push   ecx
c0008728:	56                   	push   esi
c0008729:	53                   	push   ebx
c000872a:	e8 0f 11 00 00       	call   c000983e <linear_set_converter>
c000872f:	83 c4 10             	add    esp,0x10
c0008732:	ba 0a 00 00 00       	mov    edx,0xa
c0008737:	85 c0                	test   eax,eax
c0008739:	75 02                	jne    c000873d <psrc_set_converter+0x3e>
c000873b:	31 d2                	xor    edx,edx
c000873d:	89 d0                	mov    eax,edx
c000873f:	5a                   	pop    edx
c0008740:	5b                   	pop    ebx
c0008741:	5e                   	pop    esi
c0008742:	c3                   	ret    

c0008743 <src_delete>:
c0008743:	53                   	push   ebx
c0008744:	83 ec 08             	sub    esp,0x8
c0008747:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000874b:	85 db                	test   ebx,ebx
c000874d:	74 29                	je     c0008778 <src_delete+0x35>
c000874f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008752:	85 c0                	test   eax,eax
c0008754:	74 0c                	je     c0008762 <src_delete+0x1f>
c0008756:	83 ec 0c             	sub    esp,0xc
c0008759:	50                   	push   eax
c000875a:	e8 71 71 00 00       	call   c000f8d0 <free>
c000875f:	83 c4 10             	add    esp,0x10
c0008762:	50                   	push   eax
c0008763:	6a 3c                	push   0x3c
c0008765:	6a 00                	push   0x0
c0008767:	53                   	push   ebx
c0008768:	e8 ff 7f ff ff       	call   c000076c <memset>
c000876d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008770:	e8 5b 71 00 00       	call   c000f8d0 <free>
c0008775:	83 c4 10             	add    esp,0x10
c0008778:	31 c0                	xor    eax,eax
c000877a:	83 c4 08             	add    esp,0x8
c000877d:	5b                   	pop    ebx
c000877e:	c3                   	ret    

c000877f <src_process>:
c000877f:	55                   	push   ebp
c0008780:	57                   	push   edi
c0008781:	56                   	push   esi
c0008782:	53                   	push   ebx
c0008783:	83 ec 1c             	sub    esp,0x1c
c0008786:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000878a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000878e:	85 ed                	test   ebp,ebp
c0008790:	0f 84 6f 01 00 00    	je     c0008905 <src_process+0x186>
c0008796:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000879a:	0f 84 6c 01 00 00    	je     c000890c <src_process+0x18d>
c00087a0:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087a4:	0f 84 62 01 00 00    	je     c000890c <src_process+0x18d>
c00087aa:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087b1:	0f 85 5c 01 00 00    	jne    c0008913 <src_process+0x194>
c00087b7:	85 db                	test   ebx,ebx
c00087b9:	0f 84 5b 01 00 00    	je     c000891a <src_process+0x19b>
c00087bf:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087c1:	85 f6                	test   esi,esi
c00087c3:	0f 84 58 01 00 00    	je     c0008921 <src_process+0x1a2>
c00087c9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087cc:	85 ff                	test   edi,edi
c00087ce:	0f 84 4d 01 00 00    	je     c0008921 <src_process+0x1a2>
c00087d4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087d7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087e2:	68 00 00 70 3f       	push   0x3f700000
c00087e7:	6a 00                	push   0x0
c00087e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087f1:	e8 61 07 02 00       	call   c0028f57 <__ltdf2>
c00087f6:	83 c4 10             	add    esp,0x10
c00087f9:	85 c0                	test   eax,eax
c00087fb:	0f 88 27 01 00 00    	js     c0008928 <src_process+0x1a9>
c0008801:	68 00 00 70 40       	push   0x40700000
c0008806:	6a 00                	push   0x0
c0008808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008810:	e8 24 07 02 00       	call   c0028f39 <__gtdf2>
c0008815:	83 c4 10             	add    esp,0x10
c0008818:	85 c0                	test   eax,eax
c000881a:	0f 8f 08 01 00 00    	jg     c0008928 <src_process+0x1a9>
c0008820:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008824:	79 07                	jns    c000882d <src_process+0xae>
c0008826:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000882d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008830:	85 c0                	test   eax,eax
c0008832:	79 50                	jns    c0008884 <src_process+0x105>
c0008834:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000883b:	39 fe                	cmp    esi,edi
c000883d:	72 37                	jb     c0008876 <src_process+0xf7>
c000883f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008846:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000884d:	68 00 00 70 3f       	push   0x3f700000
c0008852:	6a 00                	push   0x0
c0008854:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008857:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000885a:	e8 f8 06 02 00       	call   c0028f57 <__ltdf2>
c000885f:	83 c4 10             	add    esp,0x10
c0008862:	85 c0                	test   eax,eax
c0008864:	79 37                	jns    c000889d <src_process+0x11e>
c0008866:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000886a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000886e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008871:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008874:	eb 27                	jmp    c000889d <src_process+0x11e>
c0008876:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008879:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000887d:	8d 04 86             	lea    eax,[esi+eax*4]
c0008880:	39 c7                	cmp    edi,eax
c0008882:	eb 0d                	jmp    c0008891 <src_process+0x112>
c0008884:	39 fe                	cmp    esi,edi
c0008886:	72 ee                	jb     c0008876 <src_process+0xf7>
c0008888:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000888c:	8d 04 87             	lea    eax,[edi+eax*4]
c000888f:	39 c6                	cmp    esi,eax
c0008891:	73 ac                	jae    c000883f <src_process+0xc0>
c0008893:	b8 10 00 00 00       	mov    eax,0x10
c0008898:	e9 90 00 00 00       	jmp    c000892d <src_process+0x1ae>
c000889d:	83 ec 10             	sub    esp,0x10
c00088a0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088a3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088a6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088a9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088ac:	e8 ab fd 01 00       	call   c002865c <__subdf3>
c00088b1:	83 c4 18             	add    esp,0x18
c00088b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088bc:	52                   	push   edx
c00088bd:	50                   	push   eax
c00088be:	e8 2d 08 02 00       	call   c00290f0 <fabs>
c00088c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088cb:	83 c4 10             	add    esp,0x10
c00088ce:	68 af 03 d2 3c       	push   0x3cd203af
c00088d3:	68 16 56 e7 9e       	push   0x9ee75616
c00088d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088e0:	e8 72 06 02 00       	call   c0028f57 <__ltdf2>
c00088e5:	83 c4 10             	add    esp,0x10
c00088e8:	85 c0                	test   eax,eax
c00088ea:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088ee:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088f2:	79 05                	jns    c00088f9 <src_process+0x17a>
c00088f4:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088f7:	eb 03                	jmp    c00088fc <src_process+0x17d>
c00088f9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088fc:	83 c4 1c             	add    esp,0x1c
c00088ff:	5b                   	pop    ebx
c0008900:	5e                   	pop    esi
c0008901:	5f                   	pop    edi
c0008902:	5d                   	pop    ebp
c0008903:	ff e0                	jmp    eax
c0008905:	b8 02 00 00 00       	mov    eax,0x2
c000890a:	eb 21                	jmp    c000892d <src_process+0x1ae>
c000890c:	b8 07 00 00 00       	mov    eax,0x7
c0008911:	eb 1a                	jmp    c000892d <src_process+0x1ae>
c0008913:	b8 12 00 00 00       	mov    eax,0x12
c0008918:	eb 13                	jmp    c000892d <src_process+0x1ae>
c000891a:	b8 03 00 00 00       	mov    eax,0x3
c000891f:	eb 0c                	jmp    c000892d <src_process+0x1ae>
c0008921:	b8 04 00 00 00       	mov    eax,0x4
c0008926:	eb 05                	jmp    c000892d <src_process+0x1ae>
c0008928:	b8 06 00 00 00       	mov    eax,0x6
c000892d:	83 c4 1c             	add    esp,0x1c
c0008930:	5b                   	pop    ebx
c0008931:	5e                   	pop    esi
c0008932:	5f                   	pop    edi
c0008933:	5d                   	pop    ebp
c0008934:	c3                   	ret    

c0008935 <src_callback_read>:
c0008935:	55                   	push   ebp
c0008936:	57                   	push   edi
c0008937:	56                   	push   esi
c0008938:	53                   	push   ebx
c0008939:	83 ec 3c             	sub    esp,0x3c
c000893c:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008940:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008944:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008948:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000894c:	85 ed                	test   ebp,ebp
c000894e:	0f 8e 52 01 00 00    	jle    c0008aa6 <src_callback_read+0x171>
c0008954:	85 db                	test   ebx,ebx
c0008956:	0f 84 4a 01 00 00    	je     c0008aa6 <src_callback_read+0x171>
c000895c:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008963:	74 0c                	je     c0008971 <src_callback_read+0x3c>
c0008965:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000896c:	e9 35 01 00 00       	jmp    c0008aa6 <src_callback_read+0x171>
c0008971:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008975:	75 0c                	jne    c0008983 <src_callback_read+0x4e>
c0008977:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000897e:	e9 23 01 00 00       	jmp    c0008aa6 <src_callback_read+0x171>
c0008983:	51                   	push   ecx
c0008984:	6a 24                	push   0x24
c0008986:	6a 00                	push   0x0
c0008988:	8d 44 24 18          	lea    eax,[esp+0x18]
c000898c:	50                   	push   eax
c000898d:	e8 da 7d ff ff       	call   c000076c <memset>
c0008992:	83 c4 10             	add    esp,0x10
c0008995:	68 00 00 70 3f       	push   0x3f700000
c000899a:	6a 00                	push   0x0
c000899c:	57                   	push   edi
c000899d:	56                   	push   esi
c000899e:	e8 b4 05 02 00       	call   c0028f57 <__ltdf2>
c00089a3:	83 c4 10             	add    esp,0x10
c00089a6:	85 c0                	test   eax,eax
c00089a8:	78 3e                	js     c00089e8 <src_callback_read+0xb3>
c00089aa:	68 00 00 70 40       	push   0x40700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 81 05 02 00       	call   c0028f39 <__gtdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	7f 29                	jg     c00089e8 <src_callback_read+0xb3>
c00089bf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089c3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089cb:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089cf:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089d2:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089da:	31 f6                	xor    esi,esi
c00089dc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089e3:	e9 97 00 00 00       	jmp    c0008a7f <src_callback_read+0x14a>
c00089e8:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ef:	e9 b2 00 00 00       	jmp    c0008aa6 <src_callback_read+0x171>
c00089f4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089fc:	52                   	push   edx
c00089fd:	52                   	push   edx
c00089fe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a02:	50                   	push   eax
c0008a03:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a06:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a11:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a15:	83 c4 10             	add    esp,0x10
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	75 08                	jne    c0008a24 <src_callback_read+0xef>
c0008a1c:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a24:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a2b:	50                   	push   eax
c0008a2c:	50                   	push   eax
c0008a2d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a31:	50                   	push   eax
c0008a32:	53                   	push   ebx
c0008a33:	e8 47 fd ff ff       	call   c000877f <src_process>
c0008a38:	83 c4 10             	add    esp,0x10
c0008a3b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a42:	85 c0                	test   eax,eax
c0008a44:	75 49                	jne    c0008a8f <src_callback_read+0x15a>
c0008a46:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a4a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a4d:	89 f9                	mov    ecx,edi
c0008a4f:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a53:	0f af ca             	imul   ecx,edx
c0008a56:	c1 e1 02             	shl    ecx,0x2
c0008a59:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a5d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a61:	0f af d1             	imul   edx,ecx
c0008a64:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a68:	c1 e2 02             	shl    edx,0x2
c0008a6b:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a6f:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a72:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a77:	74 12                	je     c0008a8b <src_callback_read+0x156>
c0008a79:	39 d5                	cmp    ebp,edx
c0008a7b:	7e 14                	jle    c0008a91 <src_callback_read+0x15c>
c0008a7d:	89 d6                	mov    esi,edx
c0008a7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a84:	75 9e                	jne    c0008a24 <src_callback_read+0xef>
c0008a86:	e9 69 ff ff ff       	jmp    c00089f4 <src_callback_read+0xbf>
c0008a8b:	85 c9                	test   ecx,ecx
c0008a8d:	75 ea                	jne    c0008a79 <src_callback_read+0x144>
c0008a8f:	89 f2                	mov    edx,esi
c0008a91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a95:	85 c0                	test   eax,eax
c0008a97:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a9a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a9e:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008aa1:	74 05                	je     c0008aa8 <src_callback_read+0x173>
c0008aa3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008aa6:	31 d2                	xor    edx,edx
c0008aa8:	83 c4 3c             	add    esp,0x3c
c0008aab:	89 d0                	mov    eax,edx
c0008aad:	5b                   	pop    ebx
c0008aae:	5e                   	pop    esi
c0008aaf:	5f                   	pop    edi
c0008ab0:	5d                   	pop    ebp
c0008ab1:	c3                   	ret    

c0008ab2 <src_set_ratio>:
c0008ab2:	57                   	push   edi
c0008ab3:	ba 02 00 00 00       	mov    edx,0x2
c0008ab8:	56                   	push   esi
c0008ab9:	53                   	push   ebx
c0008aba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008abe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ac2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008ac6:	85 db                	test   ebx,ebx
c0008ac8:	74 4c                	je     c0008b16 <src_set_ratio+0x64>
c0008aca:	ba 07 00 00 00       	mov    edx,0x7
c0008acf:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ad3:	74 41                	je     c0008b16 <src_set_ratio+0x64>
c0008ad5:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ad9:	74 3b                	je     c0008b16 <src_set_ratio+0x64>
c0008adb:	68 00 00 70 3f       	push   0x3f700000
c0008ae0:	6a 00                	push   0x0
c0008ae2:	57                   	push   edi
c0008ae3:	56                   	push   esi
c0008ae4:	e8 6e 04 02 00       	call   c0028f57 <__ltdf2>
c0008ae9:	83 c4 10             	add    esp,0x10
c0008aec:	ba 06 00 00 00       	mov    edx,0x6
c0008af1:	85 c0                	test   eax,eax
c0008af3:	78 21                	js     c0008b16 <src_set_ratio+0x64>
c0008af5:	68 00 00 70 40       	push   0x40700000
c0008afa:	6a 00                	push   0x0
c0008afc:	57                   	push   edi
c0008afd:	56                   	push   esi
c0008afe:	e8 36 04 02 00       	call   c0028f39 <__gtdf2>
c0008b03:	83 c4 10             	add    esp,0x10
c0008b06:	ba 06 00 00 00       	mov    edx,0x6
c0008b0b:	85 c0                	test   eax,eax
c0008b0d:	7f 07                	jg     c0008b16 <src_set_ratio+0x64>
c0008b0f:	89 33                	mov    DWORD PTR [ebx],esi
c0008b11:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b14:	31 d2                	xor    edx,edx
c0008b16:	5b                   	pop    ebx
c0008b17:	89 d0                	mov    eax,edx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	c3                   	ret    

c0008b1c <src_get_channels>:
c0008b1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b20:	b8 02 00 00 00       	mov    eax,0x2
c0008b25:	85 d2                	test   edx,edx
c0008b27:	74 14                	je     c0008b3d <src_get_channels+0x21>
c0008b29:	b8 07 00 00 00       	mov    eax,0x7
c0008b2e:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b32:	74 09                	je     c0008b3d <src_get_channels+0x21>
c0008b34:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b38:	74 03                	je     c0008b3d <src_get_channels+0x21>
c0008b3a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b3d:	c3                   	ret    

c0008b3e <src_reset>:
c0008b3e:	53                   	push   ebx
c0008b3f:	b8 02 00 00 00       	mov    eax,0x2
c0008b44:	83 ec 08             	sub    esp,0x8
c0008b47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b4b:	85 db                	test   ebx,ebx
c0008b4d:	74 36                	je     c0008b85 <src_reset+0x47>
c0008b4f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b52:	85 c0                	test   eax,eax
c0008b54:	74 09                	je     c0008b5f <src_reset+0x21>
c0008b56:	83 ec 0c             	sub    esp,0xc
c0008b59:	53                   	push   ebx
c0008b5a:	ff d0                	call   eax
c0008b5c:	83 c4 10             	add    esp,0x10
c0008b5f:	31 c0                	xor    eax,eax
c0008b61:	31 d2                	xor    edx,edx
c0008b63:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b66:	89 03                	mov    DWORD PTR [ebx],eax
c0008b68:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b6b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b6e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b75:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b7c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b83:	31 c0                	xor    eax,eax
c0008b85:	83 c4 08             	add    esp,0x8
c0008b88:	5b                   	pop    ebx
c0008b89:	c3                   	ret    

c0008b8a <src_new>:
c0008b8a:	57                   	push   edi
c0008b8b:	56                   	push   esi
c0008b8c:	53                   	push   ebx
c0008b8d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b91:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b95:	85 f6                	test   esi,esi
c0008b97:	74 73                	je     c0008c0c <src_new+0x82>
c0008b99:	85 ff                	test   edi,edi
c0008b9b:	7f 08                	jg     c0008ba5 <src_new+0x1b>
c0008b9d:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008ba3:	eb 1e                	jmp    c0008bc3 <src_new+0x39>
c0008ba5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bab:	50                   	push   eax
c0008bac:	50                   	push   eax
c0008bad:	6a 3c                	push   0x3c
c0008baf:	6a 01                	push   0x1
c0008bb1:	e8 3a 6d 00 00       	call   c000f8f0 <calloc>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 c3                	mov    ebx,eax
c0008bbb:	85 c0                	test   eax,eax
c0008bbd:	75 10                	jne    c0008bcf <src_new+0x45>
c0008bbf:	85 f6                	test   esi,esi
c0008bc1:	75 04                	jne    c0008bc7 <src_new+0x3d>
c0008bc3:	31 db                	xor    ebx,ebx
c0008bc5:	eb 4b                	jmp    c0008c12 <src_new+0x88>
c0008bc7:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bcd:	eb 43                	jmp    c0008c12 <src_new+0x88>
c0008bcf:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bd2:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bdd:	e8 1d fb ff ff       	call   c00086ff <psrc_set_converter>
c0008be2:	85 c0                	test   eax,eax
c0008be4:	74 18                	je     c0008bfe <src_new+0x74>
c0008be6:	85 f6                	test   esi,esi
c0008be8:	74 06                	je     c0008bf0 <src_new+0x66>
c0008bea:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bf0:	83 ec 0c             	sub    esp,0xc
c0008bf3:	53                   	push   ebx
c0008bf4:	31 db                	xor    ebx,ebx
c0008bf6:	e8 d5 6c 00 00       	call   c000f8d0 <free>
c0008bfb:	83 c4 10             	add    esp,0x10
c0008bfe:	83 ec 0c             	sub    esp,0xc
c0008c01:	53                   	push   ebx
c0008c02:	e8 37 ff ff ff       	call   c0008b3e <src_reset>
c0008c07:	83 c4 10             	add    esp,0x10
c0008c0a:	eb 06                	jmp    c0008c12 <src_new+0x88>
c0008c0c:	85 ff                	test   edi,edi
c0008c0e:	7f 9b                	jg     c0008bab <src_new+0x21>
c0008c10:	eb b1                	jmp    c0008bc3 <src_new+0x39>
c0008c12:	89 d8                	mov    eax,ebx
c0008c14:	5b                   	pop    ebx
c0008c15:	5e                   	pop    esi
c0008c16:	5f                   	pop    edi
c0008c17:	c3                   	ret    

c0008c18 <src_callback_new>:
c0008c18:	56                   	push   esi
c0008c19:	53                   	push   ebx
c0008c1a:	53                   	push   ebx
c0008c1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c23:	85 f6                	test   esi,esi
c0008c25:	75 0e                	jne    c0008c35 <src_callback_new+0x1d>
c0008c27:	31 db                	xor    ebx,ebx
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	74 47                	je     c0008c74 <src_callback_new+0x5c>
c0008c2d:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c33:	eb 3f                	jmp    c0008c74 <src_callback_new+0x5c>
c0008c35:	85 c0                	test   eax,eax
c0008c37:	74 06                	je     c0008c3f <src_callback_new+0x27>
c0008c39:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c3f:	51                   	push   ecx
c0008c40:	50                   	push   eax
c0008c41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c45:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c49:	e8 3c ff ff ff       	call   c0008b8a <src_new>
c0008c4e:	83 c4 10             	add    esp,0x10
c0008c51:	89 c3                	mov    ebx,eax
c0008c53:	85 c0                	test   eax,eax
c0008c55:	74 1d                	je     c0008c74 <src_callback_new+0x5c>
c0008c57:	83 ec 0c             	sub    esp,0xc
c0008c5a:	50                   	push   eax
c0008c5b:	e8 de fe ff ff       	call   c0008b3e <src_reset>
c0008c60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c64:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c6b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c6e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c71:	83 c4 10             	add    esp,0x10
c0008c74:	89 d8                	mov    eax,ebx
c0008c76:	5a                   	pop    edx
c0008c77:	5b                   	pop    ebx
c0008c78:	5e                   	pop    esi
c0008c79:	c3                   	ret    

c0008c7a <src_get_name>:
c0008c7a:	53                   	push   ebx
c0008c7b:	83 ec 14             	sub    esp,0x14
c0008c7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c82:	53                   	push   ebx
c0008c83:	e8 d0 4f 00 00       	call   c000dc58 <sinc_get_name>
c0008c88:	83 c4 10             	add    esp,0x10
c0008c8b:	85 c0                	test   eax,eax
c0008c8d:	75 1d                	jne    c0008cac <src_get_name+0x32>
c0008c8f:	83 ec 0c             	sub    esp,0xc
c0008c92:	53                   	push   ebx
c0008c93:	e8 80 57 00 00       	call   c000e418 <zoh_get_name>
c0008c98:	83 c4 10             	add    esp,0x10
c0008c9b:	85 c0                	test   eax,eax
c0008c9d:	75 0d                	jne    c0008cac <src_get_name+0x32>
c0008c9f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ca3:	83 c4 08             	add    esp,0x8
c0008ca6:	5b                   	pop    ebx
c0008ca7:	e9 74 0b 00 00       	jmp    c0009820 <linear_get_name>
c0008cac:	83 c4 08             	add    esp,0x8
c0008caf:	5b                   	pop    ebx
c0008cb0:	c3                   	ret    

c0008cb1 <src_get_description>:
c0008cb1:	53                   	push   ebx
c0008cb2:	83 ec 14             	sub    esp,0x14
c0008cb5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cb9:	53                   	push   ebx
c0008cba:	e8 ac 4f 00 00       	call   c000dc6b <sinc_get_description>
c0008cbf:	83 c4 10             	add    esp,0x10
c0008cc2:	85 c0                	test   eax,eax
c0008cc4:	75 1d                	jne    c0008ce3 <src_get_description+0x32>
c0008cc6:	83 ec 0c             	sub    esp,0xc
c0008cc9:	53                   	push   ebx
c0008cca:	e8 58 57 00 00       	call   c000e427 <zoh_get_description>
c0008ccf:	83 c4 10             	add    esp,0x10
c0008cd2:	85 c0                	test   eax,eax
c0008cd4:	75 0d                	jne    c0008ce3 <src_get_description+0x32>
c0008cd6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cda:	83 c4 08             	add    esp,0x8
c0008cdd:	5b                   	pop    ebx
c0008cde:	e9 4c 0b 00 00       	jmp    c000982f <linear_get_description>
c0008ce3:	83 c4 08             	add    esp,0x8
c0008ce6:	5b                   	pop    ebx
c0008ce7:	c3                   	ret    

c0008ce8 <src_get_version>:
c0008ce8:	b8 80 a4 02 c0       	mov    eax,0xc002a480
c0008ced:	c3                   	ret    

c0008cee <src_is_valid_ratio>:
c0008cee:	83 ec 1c             	sub    esp,0x1c
c0008cf1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cf9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d01:	68 00 00 70 3f       	push   0x3f700000
c0008d06:	6a 00                	push   0x0
c0008d08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d10:	e8 42 02 02 00       	call   c0028f57 <__ltdf2>
c0008d15:	83 c4 10             	add    esp,0x10
c0008d18:	31 d2                	xor    edx,edx
c0008d1a:	85 c0                	test   eax,eax
c0008d1c:	78 1e                	js     c0008d3c <src_is_valid_ratio+0x4e>
c0008d1e:	68 00 00 70 40       	push   0x40700000
c0008d23:	6a 00                	push   0x0
c0008d25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2d:	e8 07 02 02 00       	call   c0028f39 <__gtdf2>
c0008d32:	31 d2                	xor    edx,edx
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	85 c0                	test   eax,eax
c0008d39:	0f 9e c2             	setle  dl
c0008d3c:	89 d0                	mov    eax,edx
c0008d3e:	83 c4 1c             	add    esp,0x1c
c0008d41:	c3                   	ret    

c0008d42 <src_error>:
c0008d42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d46:	31 c0                	xor    eax,eax
c0008d48:	85 d2                	test   edx,edx
c0008d4a:	74 03                	je     c0008d4f <src_error+0xd>
c0008d4c:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d4f:	c3                   	ret    

c0008d50 <src_strerror>:
c0008d50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d54:	31 c0                	xor    eax,eax
c0008d56:	83 fa 17             	cmp    edx,0x17
c0008d59:	77 07                	ja     c0008d62 <src_strerror+0x12>
c0008d5b:	8b 04 95 e0 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5720]
c0008d62:	c3                   	ret    

c0008d63 <src_simple>:
c0008d63:	56                   	push   esi
c0008d64:	53                   	push   ebx
c0008d65:	83 ec 18             	sub    esp,0x18
c0008d68:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d6c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d70:	50                   	push   eax
c0008d71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d79:	e8 0c fe ff ff       	call   c0008b8a <src_new>
c0008d7e:	83 c4 10             	add    esp,0x10
c0008d81:	85 c0                	test   eax,eax
c0008d83:	75 06                	jne    c0008d8b <src_simple+0x28>
c0008d85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d89:	eb 25                	jmp    c0008db0 <src_simple+0x4d>
c0008d8b:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d92:	89 c3                	mov    ebx,eax
c0008d94:	50                   	push   eax
c0008d95:	50                   	push   eax
c0008d96:	56                   	push   esi
c0008d97:	53                   	push   ebx
c0008d98:	e8 e2 f9 ff ff       	call   c000877f <src_process>
c0008d9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008da0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008da4:	e8 9a f9 ff ff       	call   c0008743 <src_delete>
c0008da9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dad:	83 c4 10             	add    esp,0x10
c0008db0:	83 c4 14             	add    esp,0x14
c0008db3:	5b                   	pop    ebx
c0008db4:	5e                   	pop    esi
c0008db5:	c3                   	ret    

c0008db6 <src_short_to_float_array>:
c0008db6:	53                   	push   ebx
c0008db7:	83 ec 18             	sub    esp,0x18
c0008dba:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dbe:	85 db                	test   ebx,ebx
c0008dc0:	74 54                	je     c0008e16 <src_short_to_float_array+0x60>
c0008dc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dc6:	4b                   	dec    ebx
c0008dc7:	83 ec 0c             	sub    esp,0xc
c0008dca:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008dce:	50                   	push   eax
c0008dcf:	e8 17 ff 01 00       	call   c0028ceb <__floatsidf>
c0008dd4:	83 c4 10             	add    esp,0x10
c0008dd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ddf:	68 00 00 00 3f       	push   0x3f000000
c0008de4:	6a 00                	push   0x0
c0008de6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dee:	e8 95 f8 01 00       	call   c0028688 <__muldf3>
c0008df3:	59                   	pop    ecx
c0008df4:	59                   	pop    ecx
c0008df5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008df9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e05:	e8 51 01 02 00       	call   c0028f5b <__truncdfsf2>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e11:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e14:	eb a8                	jmp    c0008dbe <src_short_to_float_array+0x8>
c0008e16:	83 c4 18             	add    esp,0x18
c0008e19:	5b                   	pop    ebx
c0008e1a:	c3                   	ret    

c0008e1b <src_float_to_short_array>:
c0008e1b:	56                   	push   esi
c0008e1c:	53                   	push   ebx
c0008e1d:	83 ec 14             	sub    esp,0x14
c0008e20:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e24:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e28:	85 db                	test   ebx,ebx
c0008e2a:	0f 84 a4 00 00 00    	je     c0008ed4 <src_float_to_short_array+0xb9>
c0008e30:	83 ec 0c             	sub    esp,0xc
c0008e33:	4b                   	dec    ebx
c0008e34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e38:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e3b:	e8 3f 02 02 00       	call   c002907f <__extendsfdf2>
c0008e40:	83 c4 10             	add    esp,0x10
c0008e43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e4b:	68 00 00 e0 41       	push   0x41e00000
c0008e50:	6a 00                	push   0x0
c0008e52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e5a:	e8 29 f8 01 00       	call   c0028688 <__muldf3>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e6a:	68 ff ff df 41       	push   0x41dfffff
c0008e6f:	68 00 00 c0 ff       	push   0xffc00000
c0008e74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7c:	e8 d4 00 02 00       	call   c0028f55 <__gedf2>
c0008e81:	83 c4 10             	add    esp,0x10
c0008e84:	85 c0                	test   eax,eax
c0008e86:	78 08                	js     c0008e90 <src_float_to_short_array+0x75>
c0008e88:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e8e:	eb 98                	jmp    c0008e28 <src_float_to_short_array+0xd>
c0008e90:	68 00 00 e0 c1       	push   0xc1e00000
c0008e95:	6a 00                	push   0x0
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9f:	e8 b5 00 02 00       	call   c0028f59 <__ledf2>
c0008ea4:	83 c4 10             	add    esp,0x10
c0008ea7:	85 c0                	test   eax,eax
c0008ea9:	7f 0b                	jg     c0008eb6 <src_float_to_short_array+0x9b>
c0008eab:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008eb1:	e9 72 ff ff ff       	jmp    c0008e28 <src_float_to_short_array+0xd>
c0008eb6:	50                   	push   eax
c0008eb7:	50                   	push   eax
c0008eb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ebc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ec0:	e8 4b 02 02 00       	call   c0029110 <lrint>
c0008ec5:	83 c4 10             	add    esp,0x10
c0008ec8:	c1 f8 10             	sar    eax,0x10
c0008ecb:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ecf:	e9 54 ff ff ff       	jmp    c0008e28 <src_float_to_short_array+0xd>
c0008ed4:	83 c4 14             	add    esp,0x14
c0008ed7:	5b                   	pop    ebx
c0008ed8:	5e                   	pop    esi
c0008ed9:	c3                   	ret    

c0008eda <src_int_to_float_array>:
c0008eda:	53                   	push   ebx
c0008edb:	83 ec 18             	sub    esp,0x18
c0008ede:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ee2:	85 db                	test   ebx,ebx
c0008ee4:	74 52                	je     c0008f38 <src_int_to_float_array+0x5e>
c0008ee6:	83 ec 0c             	sub    esp,0xc
c0008ee9:	4b                   	dec    ebx
c0008eea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008eee:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ef1:	e8 f5 fd 01 00       	call   c0028ceb <__floatsidf>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008efd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f01:	68 00 00 00 3e       	push   0x3e000000
c0008f06:	6a 00                	push   0x0
c0008f08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f10:	e8 73 f7 01 00       	call   c0028688 <__muldf3>
c0008f15:	59                   	pop    ecx
c0008f16:	59                   	pop    ecx
c0008f17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f1b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f27:	e8 2f 00 02 00       	call   c0028f5b <__truncdfsf2>
c0008f2c:	83 c4 10             	add    esp,0x10
c0008f2f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f33:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f36:	eb aa                	jmp    c0008ee2 <src_int_to_float_array+0x8>
c0008f38:	83 c4 18             	add    esp,0x18
c0008f3b:	5b                   	pop    ebx
c0008f3c:	c3                   	ret    

c0008f3d <src_float_to_int_array>:
c0008f3d:	56                   	push   esi
c0008f3e:	53                   	push   ebx
c0008f3f:	83 ec 14             	sub    esp,0x14
c0008f42:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f4a:	85 db                	test   ebx,ebx
c0008f4c:	0f 84 a2 00 00 00    	je     c0008ff4 <src_float_to_int_array+0xb7>
c0008f52:	83 ec 0c             	sub    esp,0xc
c0008f55:	4b                   	dec    ebx
c0008f56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f5a:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f5d:	e8 1d 01 02 00       	call   c002907f <__extendsfdf2>
c0008f62:	83 c4 10             	add    esp,0x10
c0008f65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f6d:	68 00 00 e0 41       	push   0x41e00000
c0008f72:	6a 00                	push   0x0
c0008f74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f7c:	e8 07 f7 01 00       	call   c0028688 <__muldf3>
c0008f81:	83 c4 10             	add    esp,0x10
c0008f84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8c:	68 ff ff df 41       	push   0x41dfffff
c0008f91:	68 00 00 c0 ff       	push   0xffc00000
c0008f96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9e:	e8 b2 ff 01 00       	call   c0028f55 <__gedf2>
c0008fa3:	83 c4 10             	add    esp,0x10
c0008fa6:	85 c0                	test   eax,eax
c0008fa8:	78 09                	js     c0008fb3 <src_float_to_int_array+0x76>
c0008faa:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fb1:	eb 97                	jmp    c0008f4a <src_float_to_int_array+0xd>
c0008fb3:	68 00 00 e0 c1       	push   0xc1e00000
c0008fb8:	6a 00                	push   0x0
c0008fba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc2:	e8 92 ff 01 00       	call   c0028f59 <__ledf2>
c0008fc7:	83 c4 10             	add    esp,0x10
c0008fca:	85 c0                	test   eax,eax
c0008fcc:	7f 0c                	jg     c0008fda <src_float_to_int_array+0x9d>
c0008fce:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fd5:	e9 70 ff ff ff       	jmp    c0008f4a <src_float_to_int_array+0xd>
c0008fda:	50                   	push   eax
c0008fdb:	50                   	push   eax
c0008fdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fe0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fe4:	e8 27 01 02 00       	call   c0029110 <lrint>
c0008fe9:	83 c4 10             	add    esp,0x10
c0008fec:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fef:	e9 56 ff ff ff       	jmp    c0008f4a <src_float_to_int_array+0xd>
c0008ff4:	83 c4 14             	add    esp,0x14
c0008ff7:	5b                   	pop    ebx
c0008ff8:	5e                   	pop    esi
c0008ff9:	c3                   	ret    

c0008ffa <linear_vari_process>:
c0008ffa:	55                   	push   ebp
c0008ffb:	31 d2                	xor    edx,edx
c0008ffd:	57                   	push   edi
c0008ffe:	56                   	push   esi
c0008fff:	53                   	push   ebx
c0009000:	83 ec 3c             	sub    esp,0x3c
c0009003:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009007:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000900b:	0f 8e d3 07 00 00    	jle    c00097e4 <linear_vari_process+0x7ea>
c0009011:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009015:	ba 05 00 00 00       	mov    edx,0x5
c000901a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000901d:	85 db                	test   ebx,ebx
c000901f:	0f 84 bf 07 00 00    	je     c00097e4 <linear_vari_process+0x7ea>
c0009025:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009028:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000902c:	74 19                	je     c0009047 <linear_vari_process+0x4d>
c000902e:	31 d2                	xor    edx,edx
c0009030:	39 c2                	cmp    edx,eax
c0009032:	7d 0c                	jge    c0009040 <linear_vari_process+0x46>
c0009034:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009036:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009039:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000903d:	42                   	inc    edx
c000903e:	eb f0                	jmp    c0009030 <linear_vari_process+0x36>
c0009040:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009047:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000904a:	0f af d0             	imul   edx,eax
c000904d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009050:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009054:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000905b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000905e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009065:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009069:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000906c:	8b 00                	mov    eax,DWORD PTR [eax]
c000906e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009072:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009076:	68 00 00 70 3f       	push   0x3f700000
c000907b:	6a 00                	push   0x0
c000907d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009085:	e8 cd fe 01 00       	call   c0028f57 <__ltdf2>
c000908a:	83 c4 10             	add    esp,0x10
c000908d:	ba 16 00 00 00       	mov    edx,0x16
c0009092:	85 c0                	test   eax,eax
c0009094:	0f 88 4a 07 00 00    	js     c00097e4 <linear_vari_process+0x7ea>
c000909a:	68 00 00 70 40       	push   0x40700000
c000909f:	6a 00                	push   0x0
c00090a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a9:	e8 8b fe 01 00       	call   c0028f39 <__gtdf2>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	ba 16 00 00 00       	mov    edx,0x16
c00090b6:	85 c0                	test   eax,eax
c00090b8:	0f 8f 26 07 00 00    	jg     c00097e4 <linear_vari_process+0x7ea>
c00090be:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090c2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090d0:	68 00 00 f0 3f       	push   0x3ff00000
c00090d5:	6a 00                	push   0x0
c00090d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090df:	e8 73 fe 01 00       	call   c0028f57 <__ltdf2>
c00090e4:	83 c4 10             	add    esp,0x10
c00090e7:	85 c0                	test   eax,eax
c00090e9:	0f 89 89 02 00 00    	jns    c0009378 <linear_vari_process+0x37e>
c00090ef:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090f2:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090f5:	0f 8d 7d 02 00 00    	jge    c0009378 <linear_vari_process+0x37e>
c00090fb:	83 ec 0c             	sub    esp,0xc
c00090fe:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009101:	e8 e5 fb 01 00       	call   c0028ceb <__floatsidf>
c0009106:	83 c4 10             	add    esp,0x10
c0009109:	89 04 24             	mov    DWORD PTR [esp],eax
c000910c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911f:	e8 e7 ee 01 00       	call   c002800b <__adddf3>
c0009124:	83 c4 10             	add    esp,0x10
c0009127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000912b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000912f:	52                   	push   edx
c0009130:	50                   	push   eax
c0009131:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009135:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009139:	e8 4a f5 01 00       	call   c0028688 <__muldf3>
c000913e:	5d                   	pop    ebp
c000913f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009143:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009147:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000914a:	e8 9c fb 01 00       	call   c0028ceb <__floatsidf>
c000914f:	83 c4 10             	add    esp,0x10
c0009152:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009156:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000915a:	52                   	push   edx
c000915b:	50                   	push   eax
c000915c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009160:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009164:	e8 a2 ee 01 00       	call   c002800b <__adddf3>
c0009169:	59                   	pop    ecx
c000916a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000916e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009172:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009175:	e8 71 fb 01 00       	call   c0028ceb <__floatsidf>
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009181:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009185:	52                   	push   edx
c0009186:	50                   	push   eax
c0009187:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000918b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000918f:	e8 c1 fd 01 00       	call   c0028f55 <__gedf2>
c0009194:	83 c4 10             	add    esp,0x10
c0009197:	85 c0                	test   eax,eax
c0009199:	0f 89 d9 01 00 00    	jns    c0009378 <linear_vari_process+0x37e>
c000919f:	85 ff                	test   edi,edi
c00091a1:	0f 8e f4 00 00 00    	jle    c000929b <linear_vari_process+0x2a1>
c00091a7:	83 ec 10             	sub    esp,0x10
c00091aa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ad:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091b0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091b4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091b7:	ff 30                	push   DWORD PTR [eax]
c00091b9:	e8 9e f4 01 00       	call   c002865c <__subdf3>
c00091be:	83 c4 18             	add    esp,0x18
c00091c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091c9:	52                   	push   edx
c00091ca:	50                   	push   eax
c00091cb:	e8 20 ff 01 00       	call   c00290f0 <fabs>
c00091d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d8:	83 c4 10             	add    esp,0x10
c00091db:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091e0:	68 23 42 92 0c       	push   0xc924223
c00091e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ed:	e8 47 fd 01 00       	call   c0028f39 <__gtdf2>
c00091f2:	83 c4 10             	add    esp,0x10
c00091f5:	85 c0                	test   eax,eax
c00091f7:	0f 8e 9e 00 00 00    	jle    c000929b <linear_vari_process+0x2a1>
c00091fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009201:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009204:	8b 00                	mov    eax,DWORD PTR [eax]
c0009206:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000920a:	89 04 24             	mov    DWORD PTR [esp],eax
c000920d:	52                   	push   edx
c000920e:	50                   	push   eax
c000920f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009212:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009215:	e8 42 f4 01 00       	call   c002865c <__subdf3>
c000921a:	59                   	pop    ecx
c000921b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000921f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009223:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009226:	e8 c0 fa 01 00       	call   c0028ceb <__floatsidf>
c000922b:	83 c4 10             	add    esp,0x10
c000922e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009232:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009236:	52                   	push   edx
c0009237:	50                   	push   eax
c0009238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000923c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009240:	e8 43 f4 01 00       	call   c0028688 <__muldf3>
c0009245:	5f                   	pop    edi
c0009246:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000924a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000924e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009251:	e8 95 fa 01 00       	call   c0028ceb <__floatsidf>
c0009256:	83 c4 10             	add    esp,0x10
c0009259:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000925d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009261:	52                   	push   edx
c0009262:	50                   	push   eax
c0009263:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000926b:	e8 fc f6 01 00       	call   c002896c <__divdf3>
c0009270:	83 c4 10             	add    esp,0x10
c0009273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000927b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000927f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000928b:	e8 7b ed 01 00       	call   c002800b <__adddf3>
c0009290:	83 c4 10             	add    esp,0x10
c0009293:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009297:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000929b:	31 ff                	xor    edi,edi
c000929d:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092a0:	0f 8e 9d 00 00 00    	jle    c0009343 <linear_vari_process+0x349>
c00092a6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092a9:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092b0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00092b7:	8b 06                	mov    eax,DWORD PTR [esi]
c00092b9:	52                   	push   edx
c00092ba:	52                   	push   edx
c00092bb:	55                   	push   ebp
c00092bc:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092bf:	47                   	inc    edi
c00092c0:	e8 db e6 01 00       	call   c00279a0 <__subsf3>
c00092c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00092c8:	e8 b2 fd 01 00       	call   c002907f <__extendsfdf2>
c00092cd:	83 c4 10             	add    esp,0x10
c00092d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e8:	e8 9b f3 01 00       	call   c0028688 <__muldf3>
c00092ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092f8:	e8 82 fd 01 00       	call   c002907f <__extendsfdf2>
c00092fd:	83 c4 10             	add    esp,0x10
c0009300:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009304:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009308:	52                   	push   edx
c0009309:	50                   	push   eax
c000930a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000930e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009312:	e8 f4 ec 01 00       	call   c002800b <__adddf3>
c0009317:	59                   	pop    ecx
c0009318:	5d                   	pop    ebp
c0009319:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000931d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009321:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009329:	e8 2d fc 01 00       	call   c0028f5b <__truncdfsf2>
c000932e:	83 c4 10             	add    esp,0x10
c0009331:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009334:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009338:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000933b:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000933e:	e9 5a ff ff ff       	jmp    c000929d <linear_vari_process+0x2a3>
c0009343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009347:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000934b:	68 00 00 f0 3f       	push   0x3ff00000
c0009350:	6a 00                	push   0x0
c0009352:	e8 15 f6 01 00       	call   c002896c <__divdf3>
c0009357:	83 c4 10             	add    esp,0x10
c000935a:	89 04 24             	mov    DWORD PTR [esp],eax
c000935d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009361:	52                   	push   edx
c0009362:	50                   	push   eax
c0009363:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009367:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000936b:	e8 9b ec 01 00       	call   c002800b <__adddf3>
c0009370:	83 c4 10             	add    esp,0x10
c0009373:	e9 50 fd ff ff       	jmp    c00090c8 <linear_vari_process+0xce>
c0009378:	50                   	push   eax
c0009379:	50                   	push   eax
c000937a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009382:	e8 89 fd 01 00       	call   c0029110 <lrint>
c0009387:	83 ec 0c             	sub    esp,0xc
c000938a:	50                   	push   eax
c000938b:	e8 5b f9 01 00       	call   c0028ceb <__floatsidf>
c0009390:	83 c4 10             	add    esp,0x10
c0009393:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009397:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000939b:	52                   	push   edx
c000939c:	50                   	push   eax
c000939d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093a5:	e8 b2 f2 01 00       	call   c002865c <__subdf3>
c00093aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093ae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093b2:	83 c4 20             	add    esp,0x20
c00093b5:	6a 00                	push   0x0
c00093b7:	6a 00                	push   0x0
c00093b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093c1:	e8 91 fb 01 00       	call   c0028f57 <__ltdf2>
c00093c6:	83 c4 10             	add    esp,0x10
c00093c9:	85 c0                	test   eax,eax
c00093cb:	79 1e                	jns    c00093eb <linear_vari_process+0x3f1>
c00093cd:	68 00 00 f0 3f       	push   0x3ff00000
c00093d2:	6a 00                	push   0x0
c00093d4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093dc:	e8 2a ec 01 00       	call   c002800b <__adddf3>
c00093e1:	83 c4 10             	add    esp,0x10
c00093e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00093e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093ee:	83 ec 10             	sub    esp,0x10
c00093f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009401:	e8 56 f2 01 00       	call   c002865c <__subdf3>
c0009406:	83 c4 18             	add    esp,0x18
c0009409:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000940d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009411:	52                   	push   edx
c0009412:	50                   	push   eax
c0009413:	e8 f8 fc 01 00       	call   c0029110 <lrint>
c0009418:	83 c4 10             	add    esp,0x10
c000941b:	0f af f8             	imul   edi,eax
c000941e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009421:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009424:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009427:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000942a:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000942d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009431:	0f 8d 13 03 00 00    	jge    c000974a <linear_vari_process+0x750>
c0009437:	83 ec 0c             	sub    esp,0xc
c000943a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000943d:	e8 a9 f8 01 00       	call   c0028ceb <__floatsidf>
c0009442:	83 c4 10             	add    esp,0x10
c0009445:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009449:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000944d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009451:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945d:	e8 26 f2 01 00       	call   c0028688 <__muldf3>
c0009462:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009465:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009469:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000946d:	e8 79 f8 01 00       	call   c0028ceb <__floatsidf>
c0009472:	83 c4 10             	add    esp,0x10
c0009475:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009479:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000947d:	52                   	push   edx
c000947e:	50                   	push   eax
c000947f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009483:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009487:	e8 7f eb 01 00       	call   c002800b <__adddf3>
c000948c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000948f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009493:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009497:	e8 4f f8 01 00       	call   c0028ceb <__floatsidf>
c000949c:	83 c4 10             	add    esp,0x10
c000949f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094a7:	52                   	push   edx
c00094a8:	50                   	push   eax
c00094a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094b1:	e8 a1 fa 01 00       	call   c0028f57 <__ltdf2>
c00094b6:	83 c4 10             	add    esp,0x10
c00094b9:	85 c0                	test   eax,eax
c00094bb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094bf:	0f 89 85 02 00 00    	jns    c000974a <linear_vari_process+0x750>
c00094c5:	85 c9                	test   ecx,ecx
c00094c7:	0f 8e f5 00 00 00    	jle    c00095c2 <linear_vari_process+0x5c8>
c00094cd:	83 ec 10             	sub    esp,0x10
c00094d0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094d3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094d6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094da:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094dd:	ff 30                	push   DWORD PTR [eax]
c00094df:	e8 78 f1 01 00       	call   c002865c <__subdf3>
c00094e4:	83 c4 18             	add    esp,0x18
c00094e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ef:	52                   	push   edx
c00094f0:	50                   	push   eax
c00094f1:	e8 fa fb 01 00       	call   c00290f0 <fabs>
c00094f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094fe:	83 c4 10             	add    esp,0x10
c0009501:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009506:	68 23 42 92 0c       	push   0xc924223
c000950b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000950f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009513:	e8 21 fa 01 00       	call   c0028f39 <__gtdf2>
c0009518:	83 c4 10             	add    esp,0x10
c000951b:	85 c0                	test   eax,eax
c000951d:	0f 8e 9f 00 00 00    	jle    c00095c2 <linear_vari_process+0x5c8>
c0009523:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009527:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000952a:	8b 00                	mov    eax,DWORD PTR [eax]
c000952c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009530:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009534:	52                   	push   edx
c0009535:	50                   	push   eax
c0009536:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009539:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000953c:	e8 1b f1 01 00       	call   c002865c <__subdf3>
c0009541:	5f                   	pop    edi
c0009542:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009546:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000954a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000954d:	e8 99 f7 01 00       	call   c0028ceb <__floatsidf>
c0009552:	83 c4 10             	add    esp,0x10
c0009555:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009559:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000955d:	52                   	push   edx
c000955e:	50                   	push   eax
c000955f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009563:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009567:	e8 1c f1 01 00       	call   c0028688 <__muldf3>
c000956c:	5d                   	pop    ebp
c000956d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009571:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009575:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009578:	e8 6e f7 01 00       	call   c0028ceb <__floatsidf>
c000957d:	83 c4 10             	add    esp,0x10
c0009580:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009584:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009588:	52                   	push   edx
c0009589:	50                   	push   eax
c000958a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009592:	e8 d5 f3 01 00       	call   c002896c <__divdf3>
c0009597:	83 c4 10             	add    esp,0x10
c000959a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000959e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095b2:	e8 54 ea 01 00       	call   c002800b <__adddf3>
c00095b7:	83 c4 10             	add    esp,0x10
c00095ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095c2:	31 ff                	xor    edi,edi
c00095c4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095c7:	39 f8                	cmp    eax,edi
c00095c9:	0f 8e ac 00 00 00    	jle    c000967b <linear_vari_process+0x681>
c00095cf:	8b 16                	mov    edx,DWORD PTR [esi]
c00095d1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095d4:	29 c1                	sub    ecx,eax
c00095d6:	89 c8                	mov    eax,ecx
c00095d8:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095db:	01 f8                	add    eax,edi
c00095dd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095e1:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095e4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095eb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095ee:	51                   	push   ecx
c00095ef:	01 f8                	add    eax,edi
c00095f1:	51                   	push   ecx
c00095f2:	47                   	inc    edi
c00095f3:	55                   	push   ebp
c00095f4:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095f7:	e8 a4 e3 01 00       	call   c00279a0 <__subsf3>
c00095fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00095ff:	e8 7b fa 01 00       	call   c002907f <__extendsfdf2>
c0009604:	83 c4 10             	add    esp,0x10
c0009607:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000960b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000960f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009613:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009617:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000961b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000961f:	e8 64 f0 01 00       	call   c0028688 <__muldf3>
c0009624:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000962b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000962f:	e8 4b fa 01 00       	call   c002907f <__extendsfdf2>
c0009634:	83 c4 10             	add    esp,0x10
c0009637:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000963b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000963f:	52                   	push   edx
c0009640:	50                   	push   eax
c0009641:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009645:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009649:	e8 bd e9 01 00       	call   c002800b <__adddf3>
c000964e:	5d                   	pop    ebp
c000964f:	59                   	pop    ecx
c0009650:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009654:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009658:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009660:	e8 f6 f8 01 00       	call   c0028f5b <__truncdfsf2>
c0009665:	83 c4 10             	add    esp,0x10
c0009668:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000966c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009670:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009673:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009676:	e9 49 ff ff ff       	jmp    c00095c4 <linear_vari_process+0x5ca>
c000967b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000967f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009683:	68 00 00 f0 3f       	push   0x3ff00000
c0009688:	6a 00                	push   0x0
c000968a:	e8 dd f2 01 00       	call   c002896c <__divdf3>
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009696:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000969a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000969e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096aa:	e8 5c e9 01 00       	call   c002800b <__adddf3>
c00096af:	59                   	pop    ecx
c00096b0:	5f                   	pop    edi
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c1:	e8 4a fa 01 00       	call   c0029110 <lrint>
c00096c6:	83 ec 0c             	sub    esp,0xc
c00096c9:	50                   	push   eax
c00096ca:	e8 1c f6 01 00       	call   c0028ceb <__floatsidf>
c00096cf:	83 c4 10             	add    esp,0x10
c00096d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096da:	52                   	push   edx
c00096db:	50                   	push   eax
c00096dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096e4:	e8 73 ef 01 00       	call   c002865c <__subdf3>
c00096e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096ed:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096f1:	83 c4 20             	add    esp,0x20
c00096f4:	6a 00                	push   0x0
c00096f6:	6a 00                	push   0x0
c00096f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009700:	e8 52 f8 01 00       	call   c0028f57 <__ltdf2>
c0009705:	83 c4 10             	add    esp,0x10
c0009708:	85 c0                	test   eax,eax
c000970a:	79 1e                	jns    c000972a <linear_vari_process+0x730>
c000970c:	68 00 00 f0 3f       	push   0x3ff00000
c0009711:	6a 00                	push   0x0
c0009713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971b:	e8 eb e8 01 00       	call   c002800b <__adddf3>
c0009720:	83 c4 10             	add    esp,0x10
c0009723:	89 04 24             	mov    DWORD PTR [esp],eax
c0009726:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000972a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000972d:	83 ec 10             	sub    esp,0x10
c0009730:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009738:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000973c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009740:	e8 17 ef 01 00       	call   c002865c <__subdf3>
c0009745:	e9 bc fc ff ff       	jmp    c0009406 <linear_vari_process+0x40c>
c000974a:	39 fd                	cmp    ebp,edi
c000974c:	7d 38                	jge    c0009786 <linear_vari_process+0x78c>
c000974e:	83 ec 0c             	sub    esp,0xc
c0009751:	89 f8                	mov    eax,edi
c0009753:	29 e8                	sub    eax,ebp
c0009755:	99                   	cdq    
c0009756:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009759:	50                   	push   eax
c000975a:	e8 8c f5 01 00       	call   c0028ceb <__floatsidf>
c000975f:	83 c4 10             	add    esp,0x10
c0009762:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009766:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000976a:	52                   	push   edx
c000976b:	50                   	push   eax
c000976c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009770:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009774:	e8 92 e8 01 00       	call   c002800b <__adddf3>
c0009779:	83 c4 10             	add    esp,0x10
c000977c:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000977f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009782:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009786:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000978a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000978d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009791:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009794:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009797:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000979a:	85 c0                	test   eax,eax
c000979c:	7f 29                	jg     c00097c7 <linear_vari_process+0x7cd>
c000979e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097aa:	89 01                	mov    DWORD PTR [ecx],eax
c00097ac:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097b2:	99                   	cdq    
c00097b3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097b6:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097bc:	99                   	cdq    
c00097bd:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097c0:	31 d2                	xor    edx,edx
c00097c2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097c5:	eb 1d                	jmp    c00097e4 <linear_vari_process+0x7ea>
c00097c7:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097ca:	31 d2                	xor    edx,edx
c00097cc:	29 c8                	sub    eax,ecx
c00097ce:	c1 e0 02             	shl    eax,0x2
c00097d1:	39 d1                	cmp    ecx,edx
c00097d3:	7e c9                	jle    c000979e <linear_vari_process+0x7a4>
c00097d5:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097d7:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097da:	83 c0 04             	add    eax,0x4
c00097dd:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097e1:	42                   	inc    edx
c00097e2:	eb ed                	jmp    c00097d1 <linear_vari_process+0x7d7>
c00097e4:	83 c4 3c             	add    esp,0x3c
c00097e7:	89 d0                	mov    eax,edx
c00097e9:	5b                   	pop    ebx
c00097ea:	5e                   	pop    esi
c00097eb:	5f                   	pop    edi
c00097ec:	5d                   	pop    ebp
c00097ed:	c3                   	ret    

c00097ee <linear_reset>:
c00097ee:	83 ec 0c             	sub    esp,0xc
c00097f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f5:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097f8:	85 c0                	test   eax,eax
c00097fa:	74 20                	je     c000981c <linear_reset+0x2e>
c00097fc:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097ff:	83 c0 1c             	add    eax,0x1c
c0009802:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009805:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000980c:	c1 e2 02             	shl    edx,0x2
c000980f:	51                   	push   ecx
c0009810:	52                   	push   edx
c0009811:	6a 00                	push   0x0
c0009813:	50                   	push   eax
c0009814:	e8 53 6f ff ff       	call   c000076c <memset>
c0009819:	83 c4 10             	add    esp,0x10
c000981c:	83 c4 0c             	add    esp,0xc
c000981f:	c3                   	ret    

c0009820 <linear_get_name>:
c0009820:	31 c0                	xor    eax,eax
c0009822:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009827:	75 05                	jne    c000982e <linear_get_name+0xe>
c0009829:	b8 40 a9 02 c0       	mov    eax,0xc002a940
c000982e:	c3                   	ret    

c000982f <linear_get_description>:
c000982f:	31 c0                	xor    eax,eax
c0009831:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009836:	75 05                	jne    c000983d <linear_get_description+0xe>
c0009838:	b8 54 a9 02 c0       	mov    eax,0xc002a954
c000983d:	c3                   	ret    

c000983e <linear_set_converter>:
c000983e:	53                   	push   ebx
c000983f:	b8 0a 00 00 00       	mov    eax,0xa
c0009844:	83 ec 08             	sub    esp,0x8
c0009847:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000984b:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009850:	75 6e                	jne    c00098c0 <linear_set_converter+0x82>
c0009852:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009855:	85 c0                	test   eax,eax
c0009857:	74 13                	je     c000986c <linear_set_converter+0x2e>
c0009859:	83 ec 0c             	sub    esp,0xc
c000985c:	50                   	push   eax
c000985d:	e8 6e 60 00 00       	call   c000f8d0 <free>
c0009862:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009869:	83 c4 10             	add    esp,0x10
c000986c:	50                   	push   eax
c000986d:	50                   	push   eax
c000986e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009871:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009878:	50                   	push   eax
c0009879:	6a 01                	push   0x1
c000987b:	e8 70 60 00 00       	call   c000f8f0 <calloc>
c0009880:	83 c4 10             	add    esp,0x10
c0009883:	89 c2                	mov    edx,eax
c0009885:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009888:	85 d2                	test   edx,edx
c000988a:	b8 01 00 00 00       	mov    eax,0x1
c000988f:	74 2f                	je     c00098c0 <linear_set_converter+0x82>
c0009891:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009894:	83 ec 0c             	sub    esp,0xc
c0009897:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000989a:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098a0:	c7 43 24 fa 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008ffa
c00098a7:	c7 43 20 fa 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008ffa
c00098ae:	c7 43 28 ee 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097ee
c00098b5:	53                   	push   ebx
c00098b6:	e8 33 ff ff ff       	call   c00097ee <linear_reset>
c00098bb:	83 c4 10             	add    esp,0x10
c00098be:	31 c0                	xor    eax,eax
c00098c0:	83 c4 08             	add    esp,0x8
c00098c3:	5b                   	pop    ebx
c00098c4:	c3                   	ret    

c00098c5 <int_to_fp>:
c00098c5:	c1 e0 0c             	shl    eax,0xc
c00098c8:	c3                   	ret    

c00098c9 <fp_to_int>:
c00098c9:	c1 f8 0c             	sar    eax,0xc
c00098cc:	c3                   	ret    

c00098cd <fp_fraction_part>:
c00098cd:	25 ff 0f 00 00       	and    eax,0xfff
c00098d2:	c3                   	ret    

c00098d3 <fp_to_double>:
c00098d3:	83 ec 1c             	sub    esp,0x1c
c00098d6:	e8 f2 ff ff ff       	call   c00098cd <fp_fraction_part>
c00098db:	83 ec 0c             	sub    esp,0xc
c00098de:	50                   	push   eax
c00098df:	e8 07 f4 01 00       	call   c0028ceb <__floatsidf>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ef:	68 00 00 30 3f       	push   0x3f300000
c00098f4:	6a 00                	push   0x0
c00098f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098fe:	e8 85 ed 01 00       	call   c0028688 <__muldf3>
c0009903:	83 c4 2c             	add    esp,0x2c
c0009906:	c3                   	ret    

c0009907 <calc_output_single>:
c0009907:	55                   	push   ebp
c0009908:	57                   	push   edi
c0009909:	56                   	push   esi
c000990a:	89 c6                	mov    esi,eax
c000990c:	53                   	push   ebx
c000990d:	89 d3                	mov    ebx,edx
c000990f:	83 ec 4c             	sub    esp,0x4c
c0009912:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009916:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009919:	e8 a7 ff ff ff       	call   c00098c5 <int_to_fp>
c000991e:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009921:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009925:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009929:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000992d:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009930:	99                   	cdq    
c0009931:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009939:	f7 fb                	idiv   ebx
c000993b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009943:	89 da                	mov    edx,ebx
c0009945:	0f af d0             	imul   edx,eax
c0009948:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000994c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009950:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009954:	29 c2                	sub    edx,eax
c0009956:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000995d:	83 c5 04             	add    ebp,0x4
c0009960:	e8 6e ff ff ff       	call   c00098d3 <fp_to_double>
c0009965:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009969:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000996d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009971:	e8 53 ff ff ff       	call   c00098c9 <fp_to_int>
c0009976:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009979:	52                   	push   edx
c000997a:	52                   	push   edx
c000997b:	51                   	push   ecx
c000997c:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009980:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009984:	e8 17 e0 01 00       	call   c00279a0 <__subsf3>
c0009989:	89 04 24             	mov    DWORD PTR [esp],eax
c000998c:	e8 ee f6 01 00       	call   c002907f <__extendsfdf2>
c0009991:	83 c4 10             	add    esp,0x10
c0009994:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009998:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000999c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099ac:	e8 d7 ec 01 00       	call   c0028688 <__muldf3>
c00099b1:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099bc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099c0:	e8 ba f6 01 00       	call   c002907f <__extendsfdf2>
c00099c5:	83 c4 10             	add    esp,0x10
c00099c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099cc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d0:	52                   	push   edx
c00099d1:	50                   	push   eax
c00099d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099da:	e8 2c e6 01 00       	call   c002800b <__adddf3>
c00099df:	59                   	pop    ecx
c00099e0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099e4:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099e8:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099ee:	e8 8c f6 01 00       	call   c002907f <__extendsfdf2>
c00099f3:	83 c4 10             	add    esp,0x10
c00099f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099fa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099fe:	52                   	push   edx
c00099ff:	50                   	push   eax
c0009a00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a04:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a08:	e8 7b ec 01 00       	call   c0028688 <__muldf3>
c0009a0d:	83 c4 10             	add    esp,0x10
c0009a10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a18:	52                   	push   edx
c0009a19:	50                   	push   eax
c0009a1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a22:	e8 e4 e5 01 00       	call   c002800b <__adddf3>
c0009a27:	83 c4 10             	add    esp,0x10
c0009a2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a32:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a36:	0f 89 1d ff ff ff    	jns    c0009959 <calc_output_single+0x52>
c0009a3c:	89 d9                	mov    ecx,ebx
c0009a3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a42:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a46:	89 dd                	mov    ebp,ebx
c0009a48:	29 c8                	sub    eax,ecx
c0009a4a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a52:	99                   	cdq    
c0009a53:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a5b:	f7 fb                	idiv   ebx
c0009a5d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a61:	0f af e8             	imul   ebp,eax
c0009a64:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a68:	01 cd                	add    ebp,ecx
c0009a6a:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a6d:	89 e8                	mov    eax,ebp
c0009a6f:	83 ee 04             	sub    esi,0x4
c0009a72:	e8 5c fe ff ff       	call   c00098d3 <fp_to_double>
c0009a77:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a7f:	89 e8                	mov    eax,ebp
c0009a81:	29 dd                	sub    ebp,ebx
c0009a83:	e8 41 fe ff ff       	call   c00098c9 <fp_to_int>
c0009a88:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a8b:	52                   	push   edx
c0009a8c:	52                   	push   edx
c0009a8d:	51                   	push   ecx
c0009a8e:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a92:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a96:	e8 05 df 01 00       	call   c00279a0 <__subsf3>
c0009a9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a9e:	e8 dc f5 01 00       	call   c002907f <__extendsfdf2>
c0009aa3:	83 c4 10             	add    esp,0x10
c0009aa6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009aaa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ab6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009aba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009abe:	e8 c5 eb 01 00       	call   c0028688 <__muldf3>
c0009ac3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009ac7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009acb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ace:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ad2:	e8 a8 f5 01 00       	call   c002907f <__extendsfdf2>
c0009ad7:	83 c4 10             	add    esp,0x10
c0009ada:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ade:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ae2:	52                   	push   edx
c0009ae3:	50                   	push   eax
c0009ae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ae8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009aec:	e8 1a e5 01 00       	call   c002800b <__adddf3>
c0009af1:	59                   	pop    ecx
c0009af2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009af6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009afa:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b00:	e8 7a f5 01 00       	call   c002907f <__extendsfdf2>
c0009b05:	83 c4 10             	add    esp,0x10
c0009b08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b0c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b10:	52                   	push   edx
c0009b11:	50                   	push   eax
c0009b12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b1a:	e8 69 eb 01 00       	call   c0028688 <__muldf3>
c0009b1f:	83 c4 10             	add    esp,0x10
c0009b22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b2a:	52                   	push   edx
c0009b2b:	50                   	push   eax
c0009b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b34:	e8 d2 e4 01 00       	call   c002800b <__adddf3>
c0009b39:	83 c4 10             	add    esp,0x10
c0009b3c:	85 ed                	test   ebp,ebp
c0009b3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b46:	0f 8f 21 ff ff ff    	jg     c0009a6d <calc_output_single+0x166>
c0009b4c:	52                   	push   edx
c0009b4d:	50                   	push   eax
c0009b4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b56:	e8 b0 e4 01 00       	call   c002800b <__adddf3>
c0009b5b:	83 c4 5c             	add    esp,0x5c
c0009b5e:	5b                   	pop    ebx
c0009b5f:	5e                   	pop    esi
c0009b60:	5f                   	pop    edi
c0009b61:	5d                   	pop    ebp
c0009b62:	c3                   	ret    

c0009b63 <calc_output_stereo>:
c0009b63:	55                   	push   ebp
c0009b64:	89 cd                	mov    ebp,ecx
c0009b66:	57                   	push   edi
c0009b67:	56                   	push   esi
c0009b68:	53                   	push   ebx
c0009b69:	89 c3                	mov    ebx,eax
c0009b6b:	83 ec 6c             	sub    esp,0x6c
c0009b6e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b72:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b79:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b80:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b84:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b88:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b8b:	e8 35 fd ff ff       	call   c00098c5 <int_to_fp>
c0009b90:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b9c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009ba4:	29 c8                	sub    eax,ecx
c0009ba6:	99                   	cdq    
c0009ba7:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009baf:	0f af d0             	imul   edx,eax
c0009bb2:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bb5:	31 d2                	xor    edx,edx
c0009bb7:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bbf:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bc2:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bc6:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bc9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bcd:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bd1:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bd4:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bd9:	29 c1                	sub    ecx,eax
c0009bdb:	31 c0                	xor    eax,eax
c0009bdd:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009be0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009be4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009be8:	83 c7 08             	add    edi,0x8
c0009beb:	e8 e3 fc ff ff       	call   c00098d3 <fp_to_double>
c0009bf0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bf4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfc:	e8 c8 fc ff ff       	call   c00098c9 <fp_to_int>
c0009c01:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c04:	52                   	push   edx
c0009c05:	52                   	push   edx
c0009c06:	51                   	push   ecx
c0009c07:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c0b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c0f:	e8 8c dd 01 00       	call   c00279a0 <__subsf3>
c0009c14:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c17:	e8 63 f4 01 00       	call   c002907f <__extendsfdf2>
c0009c1c:	83 c4 10             	add    esp,0x10
c0009c1f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c23:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c2f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c33:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c37:	e8 4c ea 01 00       	call   c0028688 <__muldf3>
c0009c3c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c40:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c44:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c47:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c4b:	e8 2f f4 01 00       	call   c002907f <__extendsfdf2>
c0009c50:	83 c4 10             	add    esp,0x10
c0009c53:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c57:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c5b:	52                   	push   edx
c0009c5c:	50                   	push   eax
c0009c5d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c61:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c65:	e8 a1 e3 01 00       	call   c002800b <__adddf3>
c0009c6a:	59                   	pop    ecx
c0009c6b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c6f:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c73:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c79:	e8 01 f4 01 00       	call   c002907f <__extendsfdf2>
c0009c7e:	83 c4 10             	add    esp,0x10
c0009c81:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c85:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c89:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c8d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c99:	e8 ea e9 01 00       	call   c0028688 <__muldf3>
c0009c9e:	83 c4 10             	add    esp,0x10
c0009ca1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ca5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca9:	52                   	push   edx
c0009caa:	50                   	push   eax
c0009cab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009caf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cb3:	e8 53 e3 01 00       	call   c002800b <__adddf3>
c0009cb8:	59                   	pop    ecx
c0009cb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cbd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cc1:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cc7:	e8 b3 f3 01 00       	call   c002907f <__extendsfdf2>
c0009ccc:	83 c4 10             	add    esp,0x10
c0009ccf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cd3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cd7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cdb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ce3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ce7:	e8 9c e9 01 00       	call   c0028688 <__muldf3>
c0009cec:	83 c4 10             	add    esp,0x10
c0009cef:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cf3:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cf7:	52                   	push   edx
c0009cf8:	50                   	push   eax
c0009cf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d01:	e8 05 e3 01 00       	call   c002800b <__adddf3>
c0009d06:	83 c4 10             	add    esp,0x10
c0009d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d11:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d15:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d19:	0f 89 c5 fe ff ff    	jns    c0009be4 <calc_output_stereo+0x81>
c0009d1f:	29 e9                	sub    ecx,ebp
c0009d21:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d25:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d29:	29 c8                	sub    eax,ecx
c0009d2b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d33:	99                   	cdq    
c0009d34:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d38:	31 d2                	xor    edx,edx
c0009d3a:	0f af f8             	imul   edi,eax
c0009d3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d41:	40                   	inc    eax
c0009d42:	01 cf                	add    edi,ecx
c0009d44:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d49:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d4d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d55:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d58:	31 c0                	xor    eax,eax
c0009d5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d5e:	89 f8                	mov    eax,edi
c0009d60:	83 eb 08             	sub    ebx,0x8
c0009d63:	e8 6b fb ff ff       	call   c00098d3 <fp_to_double>
c0009d68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d70:	89 f8                	mov    eax,edi
c0009d72:	e8 52 fb ff ff       	call   c00098c9 <fp_to_int>
c0009d77:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d7a:	52                   	push   edx
c0009d7b:	52                   	push   edx
c0009d7c:	55                   	push   ebp
c0009d7d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d81:	e8 1a dc 01 00       	call   c00279a0 <__subsf3>
c0009d86:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d89:	e8 f1 f2 01 00       	call   c002907f <__extendsfdf2>
c0009d8e:	83 c4 10             	add    esp,0x10
c0009d91:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d95:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009da1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009da5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009da9:	e8 da e8 01 00       	call   c0028688 <__muldf3>
c0009dae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009db1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009db5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009db9:	e8 c1 f2 01 00       	call   c002907f <__extendsfdf2>
c0009dbe:	83 c4 10             	add    esp,0x10
c0009dc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dc9:	52                   	push   edx
c0009dca:	50                   	push   eax
c0009dcb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dcf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dd3:	e8 33 e2 01 00       	call   c002800b <__adddf3>
c0009dd8:	59                   	pop    ecx
c0009dd9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ddd:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009de1:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009de7:	e8 93 f2 01 00       	call   c002907f <__extendsfdf2>
c0009dec:	83 c4 10             	add    esp,0x10
c0009def:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009df3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dfb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dff:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e03:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e07:	e8 7c e8 01 00       	call   c0028688 <__muldf3>
c0009e0c:	83 c4 10             	add    esp,0x10
c0009e0f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e13:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e17:	52                   	push   edx
c0009e18:	50                   	push   eax
c0009e19:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e21:	e8 e5 e1 01 00       	call   c002800b <__adddf3>
c0009e26:	5d                   	pop    ebp
c0009e27:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e2b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e2f:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e35:	e8 45 f2 01 00       	call   c002907f <__extendsfdf2>
c0009e3a:	83 c4 10             	add    esp,0x10
c0009e3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e55:	e8 2e e8 01 00       	call   c0028688 <__muldf3>
c0009e5a:	83 c4 10             	add    esp,0x10
c0009e5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e61:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e65:	52                   	push   edx
c0009e66:	50                   	push   eax
c0009e67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6f:	e8 97 e1 01 00       	call   c002800b <__adddf3>
c0009e74:	83 c4 10             	add    esp,0x10
c0009e77:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e83:	85 ff                	test   edi,edi
c0009e85:	0f 8f d3 fe ff ff    	jg     c0009d5e <calc_output_stereo+0x1fb>
c0009e8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e9b:	e8 6b e1 01 00       	call   c002800b <__adddf3>
c0009ea0:	83 c4 10             	add    esp,0x10
c0009ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ea7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009eab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eaf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ebb:	e8 c8 e7 01 00       	call   c0028688 <__muldf3>
c0009ec0:	59                   	pop    ecx
c0009ec1:	5b                   	pop    ebx
c0009ec2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ec6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009eca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ece:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed2:	e8 84 f0 01 00       	call   c0028f5b <__truncdfsf2>
c0009ed7:	83 c4 10             	add    esp,0x10
c0009eda:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ee1:	89 03                	mov    DWORD PTR [ebx],eax
c0009ee3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ef3:	e8 13 e1 01 00       	call   c002800b <__adddf3>
c0009ef8:	83 c4 10             	add    esp,0x10
c0009efb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f03:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f13:	e8 70 e7 01 00       	call   c0028688 <__muldf3>
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f2a:	e8 2c f0 01 00       	call   c0028f5b <__truncdfsf2>
c0009f2f:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f36:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f39:	83 c4 7c             	add    esp,0x7c
c0009f3c:	5b                   	pop    ebx
c0009f3d:	5e                   	pop    esi
c0009f3e:	5f                   	pop    edi
c0009f3f:	5d                   	pop    ebp
c0009f40:	c3                   	ret    

c0009f41 <calc_output_quad>:
c0009f41:	55                   	push   ebp
c0009f42:	57                   	push   edi
c0009f43:	56                   	push   esi
c0009f44:	89 c6                	mov    esi,eax
c0009f46:	53                   	push   ebx
c0009f47:	83 ec 7c             	sub    esp,0x7c
c0009f4a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f4e:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f52:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f59:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f68:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f6b:	e8 55 f9 ff ff       	call   c00098c5 <int_to_fp>
c0009f70:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f73:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f76:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f7a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f7e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f82:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f86:	99                   	cdq    
c0009f87:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f8b:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f8f:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f92:	31 d2                	xor    edx,edx
c0009f94:	0f af d8             	imul   ebx,eax
c0009f97:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f9f:	0f af c7             	imul   eax,edi
c0009fa2:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fa6:	29 c1                	sub    ecx,eax
c0009fa8:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fb0:	31 c0                	xor    eax,eax
c0009fb2:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fb9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fbd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fc1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fc5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fc9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fcd:	89 d8                	mov    eax,ebx
c0009fcf:	83 c7 10             	add    edi,0x10
c0009fd2:	e8 fc f8 ff ff       	call   c00098d3 <fp_to_double>
c0009fd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fdb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fdf:	89 d8                	mov    eax,ebx
c0009fe1:	e8 e3 f8 ff ff       	call   c00098c9 <fp_to_int>
c0009fe6:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fea:	52                   	push   edx
c0009feb:	52                   	push   edx
c0009fec:	51                   	push   ecx
c0009fed:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009ff1:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009ff5:	e8 a6 d9 01 00       	call   c00279a0 <__subsf3>
c0009ffa:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ffd:	e8 7d f0 01 00       	call   c002907f <__extendsfdf2>
c000a002:	83 c4 10             	add    esp,0x10
c000a005:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a009:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a015:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a019:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a01d:	e8 66 e6 01 00       	call   c0028688 <__muldf3>
c000a022:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a026:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a02a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a02d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a031:	e8 49 f0 01 00       	call   c002907f <__extendsfdf2>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a03d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a041:	52                   	push   edx
c000a042:	50                   	push   eax
c000a043:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a047:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a04b:	e8 bb df 01 00       	call   c002800b <__adddf3>
c000a050:	59                   	pop    ecx
c000a051:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a055:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a059:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a05f:	e8 1b f0 01 00       	call   c002907f <__extendsfdf2>
c000a064:	83 c4 10             	add    esp,0x10
c000a067:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a077:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a07b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a07f:	e8 04 e6 01 00       	call   c0028688 <__muldf3>
c000a084:	83 c4 10             	add    esp,0x10
c000a087:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a08b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08f:	52                   	push   edx
c000a090:	50                   	push   eax
c000a091:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a095:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a099:	e8 6d df 01 00       	call   c002800b <__adddf3>
c000a09e:	59                   	pop    ecx
c000a09f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0a7:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0ad:	e8 cd ef 01 00       	call   c002907f <__extendsfdf2>
c000a0b2:	83 c4 10             	add    esp,0x10
c000a0b5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0cd:	e8 b6 e5 01 00       	call   c0028688 <__muldf3>
c000a0d2:	83 c4 10             	add    esp,0x10
c000a0d5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0dd:	52                   	push   edx
c000a0de:	50                   	push   eax
c000a0df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0e7:	e8 1f df 01 00       	call   c002800b <__adddf3>
c000a0ec:	59                   	pop    ecx
c000a0ed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0f1:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0f5:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0fb:	e8 7f ef 01 00       	call   c002907f <__extendsfdf2>
c000a100:	83 c4 10             	add    esp,0x10
c000a103:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a107:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a10f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a113:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a117:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a11b:	e8 68 e5 01 00       	call   c0028688 <__muldf3>
c000a120:	83 c4 10             	add    esp,0x10
c000a123:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a127:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12b:	52                   	push   edx
c000a12c:	50                   	push   eax
c000a12d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a131:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a135:	e8 d1 de 01 00       	call   c002800b <__adddf3>
c000a13a:	59                   	pop    ecx
c000a13b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a13f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a143:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a149:	e8 31 ef 01 00       	call   c002907f <__extendsfdf2>
c000a14e:	83 c4 10             	add    esp,0x10
c000a151:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a155:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a15d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a161:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a165:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a169:	e8 1a e5 01 00       	call   c0028688 <__muldf3>
c000a16e:	83 c4 10             	add    esp,0x10
c000a171:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a175:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a179:	52                   	push   edx
c000a17a:	50                   	push   eax
c000a17b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a17f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a183:	e8 83 de 01 00       	call   c002800b <__adddf3>
c000a188:	83 c4 10             	add    esp,0x10
c000a18b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a18f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a193:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a197:	0f 89 30 fe ff ff    	jns    c0009fcd <calc_output_quad+0x8c>
c000a19d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1a5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1a9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1ad:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1b5:	29 c8                	sub    eax,ecx
c000a1b7:	99                   	cdq    
c000a1b8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1bc:	31 d2                	xor    edx,edx
c000a1be:	0f af d8             	imul   ebx,eax
c000a1c1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1c5:	40                   	inc    eax
c000a1c6:	01 cb                	add    ebx,ecx
c000a1c8:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1cd:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1d1:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1d9:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1dc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1e4:	31 c0                	xor    eax,eax
c000a1e6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ea:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f2:	89 d8                	mov    eax,ebx
c000a1f4:	83 ee 10             	sub    esi,0x10
c000a1f7:	e8 d7 f6 ff ff       	call   c00098d3 <fp_to_double>
c000a1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a200:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a204:	89 d8                	mov    eax,ebx
c000a206:	e8 be f6 ff ff       	call   c00098c9 <fp_to_int>
c000a20b:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a20f:	52                   	push   edx
c000a210:	52                   	push   edx
c000a211:	57                   	push   edi
c000a212:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a216:	e8 85 d7 01 00       	call   c00279a0 <__subsf3>
c000a21b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a21e:	e8 5c ee 01 00       	call   c002907f <__extendsfdf2>
c000a223:	83 c4 10             	add    esp,0x10
c000a226:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a22a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a22e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a236:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a23a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a23e:	e8 45 e4 01 00       	call   c0028688 <__muldf3>
c000a243:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a246:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a24a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a24e:	e8 2c ee 01 00       	call   c002907f <__extendsfdf2>
c000a253:	83 c4 10             	add    esp,0x10
c000a256:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a25a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a25e:	52                   	push   edx
c000a25f:	50                   	push   eax
c000a260:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a264:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a268:	e8 9e dd 01 00       	call   c002800b <__adddf3>
c000a26d:	59                   	pop    ecx
c000a26e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a272:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a276:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a27c:	e8 fe ed 01 00       	call   c002907f <__extendsfdf2>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a288:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a28c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a294:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a298:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a29c:	e8 e7 e3 01 00       	call   c0028688 <__muldf3>
c000a2a1:	83 c4 10             	add    esp,0x10
c000a2a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ac:	52                   	push   edx
c000a2ad:	50                   	push   eax
c000a2ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2b6:	e8 50 dd 01 00       	call   c002800b <__adddf3>
c000a2bb:	5f                   	pop    edi
c000a2bc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2c0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2c4:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2ca:	e8 b0 ed 01 00       	call   c002907f <__extendsfdf2>
c000a2cf:	83 c4 10             	add    esp,0x10
c000a2d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ea:	e8 99 e3 01 00       	call   c0028688 <__muldf3>
c000a2ef:	83 c4 10             	add    esp,0x10
c000a2f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2fa:	52                   	push   edx
c000a2fb:	50                   	push   eax
c000a2fc:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a300:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a304:	e8 02 dd 01 00       	call   c002800b <__adddf3>
c000a309:	59                   	pop    ecx
c000a30a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a30e:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a312:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a318:	e8 62 ed 01 00       	call   c002907f <__extendsfdf2>
c000a31d:	83 c4 10             	add    esp,0x10
c000a320:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a324:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a32c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a330:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a334:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a338:	e8 4b e3 01 00       	call   c0028688 <__muldf3>
c000a33d:	83 c4 10             	add    esp,0x10
c000a340:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a344:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a348:	52                   	push   edx
c000a349:	50                   	push   eax
c000a34a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a34e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a352:	e8 b4 dc 01 00       	call   c002800b <__adddf3>
c000a357:	5f                   	pop    edi
c000a358:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a35c:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a360:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a366:	e8 14 ed 01 00       	call   c002907f <__extendsfdf2>
c000a36b:	83 c4 10             	add    esp,0x10
c000a36e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a372:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a37e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a382:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a386:	e8 fd e2 01 00       	call   c0028688 <__muldf3>
c000a38b:	83 c4 10             	add    esp,0x10
c000a38e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a392:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a396:	52                   	push   edx
c000a397:	50                   	push   eax
c000a398:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a39c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3a0:	e8 66 dc 01 00       	call   c002800b <__adddf3>
c000a3a5:	83 c4 10             	add    esp,0x10
c000a3a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3ac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3b0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3b4:	85 db                	test   ebx,ebx
c000a3b6:	0f 8f 36 fe ff ff    	jg     c000a1f2 <calc_output_quad+0x2b1>
c000a3bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3cc:	e8 3a dc 01 00       	call   c002800b <__adddf3>
c000a3d1:	83 c4 10             	add    esp,0x10
c000a3d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3ec:	e8 97 e2 01 00       	call   c0028688 <__muldf3>
c000a3f1:	59                   	pop    ecx
c000a3f2:	5b                   	pop    ebx
c000a3f3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a403:	e8 53 eb 01 00       	call   c0028f5b <__truncdfsf2>
c000a408:	83 c4 10             	add    esp,0x10
c000a40b:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a412:	89 06                	mov    DWORD PTR [esi],eax
c000a414:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a418:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a41c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a420:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a424:	e8 e2 db 01 00       	call   c002800b <__adddf3>
c000a429:	83 c4 10             	add    esp,0x10
c000a42c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a430:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a438:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a444:	e8 3f e2 01 00       	call   c0028688 <__muldf3>
c000a449:	5e                   	pop    esi
c000a44a:	5f                   	pop    edi
c000a44b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a44f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45b:	e8 fb ea 01 00       	call   c0028f5b <__truncdfsf2>
c000a460:	83 c4 10             	add    esp,0x10
c000a463:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a46a:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a46d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a471:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a47d:	e8 89 db 01 00       	call   c002800b <__adddf3>
c000a482:	83 c4 10             	add    esp,0x10
c000a485:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a489:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a48d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a491:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a495:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a499:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a49d:	e8 e6 e1 01 00       	call   c0028688 <__muldf3>
c000a4a2:	5d                   	pop    ebp
c000a4a3:	59                   	pop    ecx
c000a4a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b4:	e8 a2 ea 01 00       	call   c0028f5b <__truncdfsf2>
c000a4b9:	83 c4 10             	add    esp,0x10
c000a4bc:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4c3:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4c6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4d2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4d6:	e8 30 db 01 00       	call   c002800b <__adddf3>
c000a4db:	83 c4 10             	add    esp,0x10
c000a4de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f6:	e8 8d e1 01 00       	call   c0028688 <__muldf3>
c000a4fb:	5b                   	pop    ebx
c000a4fc:	5e                   	pop    esi
c000a4fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a501:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a509:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50d:	e8 49 ea 01 00       	call   c0028f5b <__truncdfsf2>
c000a512:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a519:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a51c:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a522:	5b                   	pop    ebx
c000a523:	5e                   	pop    esi
c000a524:	5f                   	pop    edi
c000a525:	5d                   	pop    ebp
c000a526:	c3                   	ret    

c000a527 <calc_output_hex>:
c000a527:	55                   	push   ebp
c000a528:	89 cd                	mov    ebp,ecx
c000a52a:	57                   	push   edi
c000a52b:	56                   	push   esi
c000a52c:	53                   	push   ebx
c000a52d:	89 c3                	mov    ebx,eax
c000a52f:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a535:	89 14 24             	mov    DWORD PTR [esp],edx
c000a538:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a53f:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a546:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a54a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a54e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a551:	e8 6f f3 ff ff       	call   c00098c5 <int_to_fp>
c000a556:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a559:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a55d:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a560:	29 c8                	sub    eax,ecx
c000a562:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a566:	99                   	cdq    
c000a567:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a56f:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a572:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a57a:	0f af f8             	imul   edi,eax
c000a57d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a580:	01 cf                	add    edi,ecx
c000a582:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a586:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a589:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a58d:	0f af c2             	imul   eax,edx
c000a590:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a594:	29 c1                	sub    ecx,eax
c000a596:	31 d2                	xor    edx,edx
c000a598:	31 c0                	xor    eax,eax
c000a59a:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a59d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5a9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5ad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5b1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5b9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5c5:	89 f8                	mov    eax,edi
c000a5c7:	e8 07 f3 ff ff       	call   c00098d3 <fp_to_double>
c000a5cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d4:	89 f8                	mov    eax,edi
c000a5d6:	e8 ee f2 ff ff       	call   c00098c9 <fp_to_int>
c000a5db:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5df:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5e2:	52                   	push   edx
c000a5e3:	52                   	push   edx
c000a5e4:	51                   	push   ecx
c000a5e5:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5e9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5f0:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5f4:	e8 a7 d3 01 00       	call   c00279a0 <__subsf3>
c000a5f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5fc:	e8 7e ea 01 00       	call   c002907f <__extendsfdf2>
c000a601:	83 c4 10             	add    esp,0x10
c000a604:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a608:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a60c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a614:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a618:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a61c:	e8 67 e0 01 00       	call   c0028688 <__muldf3>
c000a621:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a625:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a629:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a62c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a630:	e8 4a ea 01 00       	call   c002907f <__extendsfdf2>
c000a635:	83 c4 10             	add    esp,0x10
c000a638:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a63c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a640:	52                   	push   edx
c000a641:	50                   	push   eax
c000a642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a64a:	e8 bc d9 01 00       	call   c002800b <__adddf3>
c000a64f:	59                   	pop    ecx
c000a650:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a654:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a658:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a65e:	e8 1c ea 01 00       	call   c002907f <__extendsfdf2>
c000a663:	83 c4 10             	add    esp,0x10
c000a666:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a66a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a676:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a67a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a67e:	e8 05 e0 01 00       	call   c0028688 <__muldf3>
c000a683:	83 c4 10             	add    esp,0x10
c000a686:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a68a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a68e:	52                   	push   edx
c000a68f:	50                   	push   eax
c000a690:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a694:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a698:	e8 6e d9 01 00       	call   c002800b <__adddf3>
c000a69d:	59                   	pop    ecx
c000a69e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6a2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6a6:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6ac:	e8 ce e9 01 00       	call   c002907f <__extendsfdf2>
c000a6b1:	83 c4 10             	add    esp,0x10
c000a6b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6cc:	e8 b7 df 01 00       	call   c0028688 <__muldf3>
c000a6d1:	83 c4 10             	add    esp,0x10
c000a6d4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6d8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6dc:	52                   	push   edx
c000a6dd:	50                   	push   eax
c000a6de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e6:	e8 20 d9 01 00       	call   c002800b <__adddf3>
c000a6eb:	59                   	pop    ecx
c000a6ec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6f0:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6f4:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6fa:	e8 80 e9 01 00       	call   c002907f <__extendsfdf2>
c000a6ff:	83 c4 10             	add    esp,0x10
c000a702:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a706:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a70a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a70e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a712:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a716:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a71a:	e8 69 df 01 00       	call   c0028688 <__muldf3>
c000a71f:	83 c4 10             	add    esp,0x10
c000a722:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a726:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a72a:	52                   	push   edx
c000a72b:	50                   	push   eax
c000a72c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a730:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a734:	e8 d2 d8 01 00       	call   c002800b <__adddf3>
c000a739:	59                   	pop    ecx
c000a73a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a73e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a742:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a748:	e8 32 e9 01 00       	call   c002907f <__extendsfdf2>
c000a74d:	83 c4 10             	add    esp,0x10
c000a750:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a754:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a758:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a760:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a764:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a768:	e8 1b df 01 00       	call   c0028688 <__muldf3>
c000a76d:	83 c4 10             	add    esp,0x10
c000a770:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a774:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a778:	52                   	push   edx
c000a779:	50                   	push   eax
c000a77a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a782:	e8 84 d8 01 00       	call   c002800b <__adddf3>
c000a787:	59                   	pop    ecx
c000a788:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a78c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a790:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a796:	e8 e4 e8 01 00       	call   c002907f <__extendsfdf2>
c000a79b:	83 c4 10             	add    esp,0x10
c000a79e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b6:	e8 cd de 01 00       	call   c0028688 <__muldf3>
c000a7bb:	83 c4 10             	add    esp,0x10
c000a7be:	83 c6 18             	add    esi,0x18
c000a7c1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7c5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c9:	52                   	push   edx
c000a7ca:	50                   	push   eax
c000a7cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7d3:	e8 33 d8 01 00       	call   c002800b <__adddf3>
c000a7d8:	59                   	pop    ecx
c000a7d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7dd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7e1:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7e7:	e8 93 e8 01 00       	call   c002907f <__extendsfdf2>
c000a7ec:	83 c4 10             	add    esp,0x10
c000a7ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7f3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a803:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a807:	e8 7c de 01 00       	call   c0028688 <__muldf3>
c000a80c:	83 c4 10             	add    esp,0x10
c000a80f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a813:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a817:	52                   	push   edx
c000a818:	50                   	push   eax
c000a819:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a81d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a821:	e8 e5 d7 01 00       	call   c002800b <__adddf3>
c000a826:	83 c4 10             	add    esp,0x10
c000a829:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a82d:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a831:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a834:	0f 89 8b fd ff ff    	jns    c000a5c5 <calc_output_hex+0x9e>
c000a83a:	31 f6                	xor    esi,esi
c000a83c:	31 ff                	xor    edi,edi
c000a83e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a842:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a845:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a849:	29 e9                	sub    ecx,ebp
c000a84b:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a84f:	29 c8                	sub    eax,ecx
c000a851:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a854:	99                   	cdq    
c000a855:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a859:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a85c:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a860:	0f af e8             	imul   ebp,eax
c000a863:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a867:	40                   	inc    eax
c000a868:	01 cd                	add    ebp,ecx
c000a86a:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a86f:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a873:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a877:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a87b:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a87e:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a882:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a886:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a88a:	89 e8                	mov    eax,ebp
c000a88c:	e8 42 f0 ff ff       	call   c00098d3 <fp_to_double>
c000a891:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a895:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a899:	89 e8                	mov    eax,ebp
c000a89b:	e8 29 f0 ff ff       	call   c00098c9 <fp_to_int>
c000a8a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8a7:	52                   	push   edx
c000a8a8:	52                   	push   edx
c000a8a9:	51                   	push   ecx
c000a8aa:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8b1:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8b8:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8bc:	e8 df d0 01 00       	call   c00279a0 <__subsf3>
c000a8c1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8c4:	e8 b6 e7 01 00       	call   c002907f <__extendsfdf2>
c000a8c9:	83 c4 10             	add    esp,0x10
c000a8cc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8d0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8dc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8e0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8e4:	e8 9f dd 01 00       	call   c0028688 <__muldf3>
c000a8e9:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8f4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8f7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8fb:	e8 7f e7 01 00       	call   c002907f <__extendsfdf2>
c000a900:	83 c4 10             	add    esp,0x10
c000a903:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a907:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a90b:	52                   	push   edx
c000a90c:	50                   	push   eax
c000a90d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a915:	e8 f1 d6 01 00       	call   c002800b <__adddf3>
c000a91a:	59                   	pop    ecx
c000a91b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a91f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a923:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a929:	e8 51 e7 01 00       	call   c002907f <__extendsfdf2>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a935:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a939:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a93d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a941:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a945:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a949:	e8 3a dd 01 00       	call   c0028688 <__muldf3>
c000a94e:	83 c4 10             	add    esp,0x10
c000a951:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a955:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a959:	52                   	push   edx
c000a95a:	50                   	push   eax
c000a95b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a95f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a963:	e8 a3 d6 01 00       	call   c002800b <__adddf3>
c000a968:	59                   	pop    ecx
c000a969:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a96d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a971:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a977:	e8 03 e7 01 00       	call   c002907f <__extendsfdf2>
c000a97c:	83 c4 10             	add    esp,0x10
c000a97f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a983:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a987:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a98b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a98f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a993:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a997:	e8 ec dc 01 00       	call   c0028688 <__muldf3>
c000a99c:	83 c4 10             	add    esp,0x10
c000a99f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9a3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9a7:	52                   	push   edx
c000a9a8:	50                   	push   eax
c000a9a9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ad:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9b1:	e8 55 d6 01 00       	call   c002800b <__adddf3>
c000a9b6:	59                   	pop    ecx
c000a9b7:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9bb:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9bf:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9c5:	e8 b5 e6 01 00       	call   c002907f <__extendsfdf2>
c000a9ca:	83 c4 10             	add    esp,0x10
c000a9cd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9d1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9dd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9e1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9e5:	e8 9e dc 01 00       	call   c0028688 <__muldf3>
c000a9ea:	83 c4 10             	add    esp,0x10
c000a9ed:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9f1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9f5:	52                   	push   edx
c000a9f6:	50                   	push   eax
c000a9f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9ff:	e8 07 d6 01 00       	call   c002800b <__adddf3>
c000aa04:	59                   	pop    ecx
c000aa05:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa09:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa0d:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa13:	e8 67 e6 01 00       	call   c002907f <__extendsfdf2>
c000aa18:	83 c4 10             	add    esp,0x10
c000aa1b:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1f:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa2b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa2f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa33:	e8 50 dc 01 00       	call   c0028688 <__muldf3>
c000aa38:	83 c4 10             	add    esp,0x10
c000aa3b:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa3f:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa43:	52                   	push   edx
c000aa44:	50                   	push   eax
c000aa45:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa49:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa4d:	e8 b9 d5 01 00       	call   c002800b <__adddf3>
c000aa52:	59                   	pop    ecx
c000aa53:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa57:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa5b:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa61:	e8 19 e6 01 00       	call   c002907f <__extendsfdf2>
c000aa66:	83 c4 10             	add    esp,0x10
c000aa69:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa79:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa7d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa81:	e8 02 dc 01 00       	call   c0028688 <__muldf3>
c000aa86:	83 c4 10             	add    esp,0x10
c000aa89:	83 eb 18             	sub    ebx,0x18
c000aa8c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa90:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa94:	52                   	push   edx
c000aa95:	50                   	push   eax
c000aa96:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa9a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa9e:	e8 68 d5 01 00       	call   c002800b <__adddf3>
c000aaa3:	59                   	pop    ecx
c000aaa4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aaa8:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aaac:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aab2:	e8 c8 e5 01 00       	call   c002907f <__extendsfdf2>
c000aab7:	83 c4 10             	add    esp,0x10
c000aaba:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aabe:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aac2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aac6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaca:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aace:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aad2:	e8 b1 db 01 00       	call   c0028688 <__muldf3>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aade:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aae2:	52                   	push   edx
c000aae3:	50                   	push   eax
c000aae4:	57                   	push   edi
c000aae5:	56                   	push   esi
c000aae6:	e8 20 d5 01 00       	call   c002800b <__adddf3>
c000aaeb:	83 c4 10             	add    esp,0x10
c000aaee:	89 c6                	mov    esi,eax
c000aaf0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aaf3:	89 d7                	mov    edi,edx
c000aaf5:	85 ed                	test   ebp,ebp
c000aaf7:	0f 8f 8d fd ff ff    	jg     c000a88a <calc_output_hex+0x363>
c000aafd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab0d:	e8 f9 d4 01 00       	call   c002800b <__adddf3>
c000ab12:	83 c4 10             	add    esp,0x10
c000ab15:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab2c:	e8 57 db 01 00       	call   c0028688 <__muldf3>
c000ab31:	59                   	pop    ecx
c000ab32:	5b                   	pop    ebx
c000ab33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab3b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab43:	e8 13 e4 01 00       	call   c0028f5b <__truncdfsf2>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab52:	89 03                	mov    DWORD PTR [ebx],eax
c000ab54:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab58:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab64:	e8 a2 d4 01 00       	call   c002800b <__adddf3>
c000ab69:	83 c4 10             	add    esp,0x10
c000ab6c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab6f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab73:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab77:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab83:	e8 00 db 01 00       	call   c0028688 <__muldf3>
c000ab88:	5d                   	pop    ebp
c000ab89:	59                   	pop    ecx
c000ab8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9a:	e8 bc e3 01 00       	call   c0028f5b <__truncdfsf2>
c000ab9f:	83 c4 10             	add    esp,0x10
c000aba2:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aba9:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abac:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abb0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abb4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abb8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abbc:	e8 4a d4 01 00       	call   c002800b <__adddf3>
c000abc1:	83 c4 10             	add    esp,0x10
c000abc4:	89 04 24             	mov    DWORD PTR [esp],eax
c000abc7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abdb:	e8 a8 da 01 00       	call   c0028688 <__muldf3>
c000abe0:	5b                   	pop    ebx
c000abe1:	5d                   	pop    ebp
c000abe2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abe6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf2:	e8 64 e3 01 00       	call   c0028f5b <__truncdfsf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac01:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac04:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac08:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac10:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac14:	e8 f2 d3 01 00       	call   c002800b <__adddf3>
c000ac19:	83 c4 10             	add    esp,0x10
c000ac1c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac1f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac2b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac33:	e8 50 da 01 00       	call   c0028688 <__muldf3>
c000ac38:	59                   	pop    ecx
c000ac39:	5b                   	pop    ebx
c000ac3a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac46:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4a:	e8 0c e3 01 00       	call   c0028f5b <__truncdfsf2>
c000ac4f:	83 c4 10             	add    esp,0x10
c000ac52:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac59:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac64:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac68:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac6c:	e8 9a d3 01 00       	call   c002800b <__adddf3>
c000ac71:	83 c4 10             	add    esp,0x10
c000ac74:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac83:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac87:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac8b:	e8 f8 d9 01 00       	call   c0028688 <__muldf3>
c000ac90:	5d                   	pop    ebp
c000ac91:	59                   	pop    ecx
c000ac92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca2:	e8 b4 e2 01 00       	call   c0028f5b <__truncdfsf2>
c000aca7:	83 c4 10             	add    esp,0x10
c000acaa:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acb1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acb4:	57                   	push   edi
c000acb5:	56                   	push   esi
c000acb6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acbe:	e8 48 d3 01 00       	call   c002800b <__adddf3>
c000acc3:	83 c4 10             	add    esp,0x10
c000acc6:	89 04 24             	mov    DWORD PTR [esp],eax
c000acc9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000accd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acdd:	e8 a6 d9 01 00       	call   c0028688 <__muldf3>
c000ace2:	5b                   	pop    ebx
c000ace3:	5e                   	pop    esi
c000ace4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ace8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf4:	e8 62 e2 01 00       	call   c0028f5b <__truncdfsf2>
c000acf9:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad00:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad03:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad09:	5b                   	pop    ebx
c000ad0a:	5e                   	pop    esi
c000ad0b:	5f                   	pop    edi
c000ad0c:	5d                   	pop    ebp
c000ad0d:	c3                   	ret    

c000ad0e <sinc_reset>:
c000ad0e:	56                   	push   esi
c000ad0f:	53                   	push   ebx
c000ad10:	51                   	push   ecx
c000ad11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad15:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad18:	85 db                	test   ebx,ebx
c000ad1a:	74 59                	je     c000ad75 <sinc_reset+0x67>
c000ad1c:	31 d2                	xor    edx,edx
c000ad1e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad25:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad28:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad2b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad32:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad39:	31 c0                	xor    eax,eax
c000ad3b:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad41:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad44:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad47:	52                   	push   edx
c000ad48:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad4b:	c1 e0 02             	shl    eax,0x2
c000ad4e:	50                   	push   eax
c000ad4f:	6a 00                	push   0x0
c000ad51:	56                   	push   esi
c000ad52:	e8 15 5a ff ff       	call   c000076c <memset>
c000ad57:	83 c4 0c             	add    esp,0xc
c000ad5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad5d:	c1 e0 02             	shl    eax,0x2
c000ad60:	50                   	push   eax
c000ad61:	68 aa 00 00 00       	push   0xaa
c000ad66:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad69:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad6c:	50                   	push   eax
c000ad6d:	e8 fa 59 ff ff       	call   c000076c <memset>
c000ad72:	83 c4 10             	add    esp,0x10
c000ad75:	58                   	pop    eax
c000ad76:	5b                   	pop    ebx
c000ad77:	5e                   	pop    esi
c000ad78:	c3                   	ret    

c000ad79 <calc_output_multi>:
c000ad79:	55                   	push   ebp
c000ad7a:	57                   	push   edi
c000ad7b:	56                   	push   esi
c000ad7c:	89 c6                	mov    esi,eax
c000ad7e:	53                   	push   ebx
c000ad7f:	83 ec 4c             	sub    esp,0x4c
c000ad82:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad86:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad8e:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad92:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad9a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad9e:	8d 46 44             	lea    eax,[esi+0x44]
c000ada1:	89 04 24             	mov    DWORD PTR [esp],eax
c000ada4:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adae:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adb1:	e8 0f eb ff ff       	call   c00098c5 <int_to_fp>
c000adb6:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adb9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adbd:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adc1:	99                   	cdq    
c000adc2:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000adc6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000adca:	0f af d0             	imul   edx,eax
c000adcd:	0f af c3             	imul   eax,ebx
c000add0:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000add4:	29 c1                	sub    ecx,eax
c000add6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adda:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adde:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ade5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ade9:	57                   	push   edi
c000adea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adee:	6a 00                	push   0x0
c000adf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adf4:	e8 73 59 ff ff       	call   c000076c <memset>
c000adf9:	83 c4 10             	add    esp,0x10
c000adfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae00:	89 df                	mov    edi,ebx
c000ae02:	e8 cc ea ff ff       	call   c00098d3 <fp_to_double>
c000ae07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae0f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae13:	e8 b1 ea ff ff       	call   c00098c9 <fp_to_int>
c000ae18:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae1b:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae1e:	51                   	push   ecx
c000ae1f:	51                   	push   ecx
c000ae20:	55                   	push   ebp
c000ae21:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae25:	e8 76 cb 01 00       	call   c00279a0 <__subsf3>
c000ae2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae2d:	e8 4d e2 01 00       	call   c002907f <__extendsfdf2>
c000ae32:	83 c4 10             	add    esp,0x10
c000ae35:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae39:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae45:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae49:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae4d:	e8 36 d8 01 00       	call   c0028688 <__muldf3>
c000ae52:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae55:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae59:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae5d:	e8 1d e2 01 00       	call   c002907f <__extendsfdf2>
c000ae62:	83 c4 10             	add    esp,0x10
c000ae65:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae69:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae6d:	52                   	push   edx
c000ae6e:	50                   	push   eax
c000ae6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae77:	e8 8f d1 01 00       	call   c002800b <__adddf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae83:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae87:	89 f8                	mov    eax,edi
c000ae89:	b9 08 00 00 00       	mov    ecx,0x8
c000ae8e:	99                   	cdq    
c000ae8f:	f7 f9                	idiv   ecx
c000ae91:	4a                   	dec    edx
c000ae92:	83 fa 06             	cmp    edx,0x6
c000ae95:	77 07                	ja     c000ae9e <calc_output_multi+0x125>
c000ae97:	ff 24 95 84 a9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd567c]
c000ae9e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea1:	4f                   	dec    edi
c000aea2:	83 ec 0c             	sub    esp,0xc
c000aea5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeac:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb7:	e8 c3 e1 01 00       	call   c002907f <__extendsfdf2>
c000aebc:	83 c4 10             	add    esp,0x10
c000aebf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aecb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aecf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed7:	e8 ac d7 01 00       	call   c0028688 <__muldf3>
c000aedc:	83 c4 10             	add    esp,0x10
c000aedf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee7:	52                   	push   edx
c000aee8:	50                   	push   eax
c000aee9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeec:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeef:	e8 17 d1 01 00       	call   c002800b <__adddf3>
c000aef4:	83 c4 10             	add    esp,0x10
c000aef7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aefa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af00:	4f                   	dec    edi
c000af01:	83 ec 0c             	sub    esp,0xc
c000af04:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af12:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af16:	e8 64 e1 01 00       	call   c002907f <__extendsfdf2>
c000af1b:	83 c4 10             	add    esp,0x10
c000af1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af22:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af32:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af36:	e8 4d d7 01 00       	call   c0028688 <__muldf3>
c000af3b:	83 c4 10             	add    esp,0x10
c000af3e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af42:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af46:	52                   	push   edx
c000af47:	50                   	push   eax
c000af48:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4e:	e8 b8 d0 01 00       	call   c002800b <__adddf3>
c000af53:	83 c4 10             	add    esp,0x10
c000af56:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af59:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af5f:	4f                   	dec    edi
c000af60:	83 ec 0c             	sub    esp,0xc
c000af63:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af6a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af71:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af75:	e8 05 e1 01 00       	call   c002907f <__extendsfdf2>
c000af7a:	83 c4 10             	add    esp,0x10
c000af7d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af81:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af8d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af91:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af95:	e8 ee d6 01 00       	call   c0028688 <__muldf3>
c000af9a:	83 c4 10             	add    esp,0x10
c000af9d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afa1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afa5:	52                   	push   edx
c000afa6:	50                   	push   eax
c000afa7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afaa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afad:	e8 59 d0 01 00       	call   c002800b <__adddf3>
c000afb2:	83 c4 10             	add    esp,0x10
c000afb5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afb8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afbb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afbe:	4f                   	dec    edi
c000afbf:	83 ec 0c             	sub    esp,0xc
c000afc2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afc9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afd0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afd4:	e8 a6 e0 01 00       	call   c002907f <__extendsfdf2>
c000afd9:	83 c4 10             	add    esp,0x10
c000afdc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afe0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aff0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aff4:	e8 8f d6 01 00       	call   c0028688 <__muldf3>
c000aff9:	83 c4 10             	add    esp,0x10
c000affc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b000:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b004:	52                   	push   edx
c000b005:	50                   	push   eax
c000b006:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b009:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b00c:	e8 fa cf 01 00       	call   c002800b <__adddf3>
c000b011:	83 c4 10             	add    esp,0x10
c000b014:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b017:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b01a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b01d:	4f                   	dec    edi
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b024:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b028:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b02f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b033:	e8 47 e0 01 00       	call   c002907f <__extendsfdf2>
c000b038:	83 c4 10             	add    esp,0x10
c000b03b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b043:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b047:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b04b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b04f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b053:	e8 30 d6 01 00       	call   c0028688 <__muldf3>
c000b058:	83 c4 10             	add    esp,0x10
c000b05b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b05f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b063:	52                   	push   edx
c000b064:	50                   	push   eax
c000b065:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b068:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b06b:	e8 9b cf 01 00       	call   c002800b <__adddf3>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b076:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b079:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b07c:	4f                   	dec    edi
c000b07d:	83 ec 0c             	sub    esp,0xc
c000b080:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b083:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b087:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b08e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b092:	e8 e8 df 01 00       	call   c002907f <__extendsfdf2>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b09e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0aa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0b2:	e8 d1 d5 01 00       	call   c0028688 <__muldf3>
c000b0b7:	83 c4 10             	add    esp,0x10
c000b0ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0be:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0c2:	52                   	push   edx
c000b0c3:	50                   	push   eax
c000b0c4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0c7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0ca:	e8 3c cf 01 00       	call   c002800b <__adddf3>
c000b0cf:	83 c4 10             	add    esp,0x10
c000b0d2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0d5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0db:	4f                   	dec    edi
c000b0dc:	83 ec 0c             	sub    esp,0xc
c000b0df:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0e6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0ed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0f1:	e8 89 df 01 00       	call   c002907f <__extendsfdf2>
c000b0f6:	83 c4 10             	add    esp,0x10
c000b0f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0fd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b101:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b105:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b109:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b10d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b111:	e8 72 d5 01 00       	call   c0028688 <__muldf3>
c000b116:	83 c4 10             	add    esp,0x10
c000b119:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b11d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b121:	52                   	push   edx
c000b122:	50                   	push   eax
c000b123:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b126:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b129:	e8 dd ce 01 00       	call   c002800b <__adddf3>
c000b12e:	83 c4 10             	add    esp,0x10
c000b131:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b134:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b137:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b13a:	4f                   	dec    edi
c000b13b:	83 ec 0c             	sub    esp,0xc
c000b13e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b141:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b145:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b14c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b150:	e8 2a df 01 00       	call   c002907f <__extendsfdf2>
c000b155:	83 c4 10             	add    esp,0x10
c000b158:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b15c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b160:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b164:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b168:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b16c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b170:	e8 13 d5 01 00       	call   c0028688 <__muldf3>
c000b175:	83 c4 10             	add    esp,0x10
c000b178:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b17c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b180:	52                   	push   edx
c000b181:	50                   	push   eax
c000b182:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b185:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b188:	e8 7e ce 01 00       	call   c002800b <__adddf3>
c000b18d:	83 c4 10             	add    esp,0x10
c000b190:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b193:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b196:	85 ff                	test   edi,edi
c000b198:	0f 8f e9 fc ff ff    	jg     c000ae87 <calc_output_multi+0x10e>
c000b19e:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1a2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1a6:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1aa:	0f 89 4c fc ff ff    	jns    c000adfc <calc_output_multi+0x83>
c000b1b0:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1b8:	29 c8                	sub    eax,ecx
c000b1ba:	99                   	cdq    
c000b1bb:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1c3:	0f af d0             	imul   edx,eax
c000b1c6:	40                   	inc    eax
c000b1c7:	01 d1                	add    ecx,edx
c000b1c9:	0f af c3             	imul   eax,ebx
c000b1cc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1d0:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1d7:	55                   	push   ebp
c000b1d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1dc:	6a 00                	push   0x0
c000b1de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1e2:	e8 85 55 ff ff       	call   c000076c <memset>
c000b1e7:	83 c4 10             	add    esp,0x10
c000b1ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1ee:	e8 e0 e6 ff ff       	call   c00098d3 <fp_to_double>
c000b1f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1ff:	e8 c5 e6 ff ff       	call   c00098c9 <fp_to_int>
c000b204:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b207:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b20a:	57                   	push   edi
c000b20b:	57                   	push   edi
c000b20c:	89 df                	mov    edi,ebx
c000b20e:	55                   	push   ebp
c000b20f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b213:	e8 88 c7 01 00       	call   c00279a0 <__subsf3>
c000b218:	89 04 24             	mov    DWORD PTR [esp],eax
c000b21b:	e8 5f de 01 00       	call   c002907f <__extendsfdf2>
c000b220:	83 c4 10             	add    esp,0x10
c000b223:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b227:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b22b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b22f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b233:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b237:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b23b:	e8 48 d4 01 00       	call   c0028688 <__muldf3>
c000b240:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b243:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b247:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b24b:	e8 2f de 01 00       	call   c002907f <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	52                   	push   edx
c000b25c:	50                   	push   eax
c000b25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b265:	e8 a1 cd 01 00       	call   c002800b <__adddf3>
c000b26a:	83 c4 10             	add    esp,0x10
c000b26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b271:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b275:	89 f8                	mov    eax,edi
c000b277:	b9 08 00 00 00       	mov    ecx,0x8
c000b27c:	99                   	cdq    
c000b27d:	f7 f9                	idiv   ecx
c000b27f:	4a                   	dec    edx
c000b280:	83 fa 06             	cmp    edx,0x6
c000b283:	77 07                	ja     c000b28c <calc_output_multi+0x513>
c000b285:	ff 24 95 a0 a9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5660]
c000b28c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b290:	4f                   	dec    edi
c000b291:	83 ec 0c             	sub    esp,0xc
c000b294:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b297:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b29b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2a6:	e8 d4 dd 01 00       	call   c002907f <__extendsfdf2>
c000b2ab:	83 c4 10             	add    esp,0x10
c000b2ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c6:	e8 bd d3 01 00       	call   c0028688 <__muldf3>
c000b2cb:	83 c4 10             	add    esp,0x10
c000b2ce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d6:	52                   	push   edx
c000b2d7:	50                   	push   eax
c000b2d8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2db:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2de:	e8 28 cd 01 00       	call   c002800b <__adddf3>
c000b2e3:	83 c4 10             	add    esp,0x10
c000b2e6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f0:	4f                   	dec    edi
c000b2f1:	83 ec 0c             	sub    esp,0xc
c000b2f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b302:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b306:	e8 74 dd 01 00       	call   c002907f <__extendsfdf2>
c000b30b:	83 c4 10             	add    esp,0x10
c000b30e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b312:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b322:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b326:	e8 5d d3 01 00       	call   c0028688 <__muldf3>
c000b32b:	83 c4 10             	add    esp,0x10
c000b32e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b332:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b336:	52                   	push   edx
c000b337:	50                   	push   eax
c000b338:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b33b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b33e:	e8 c8 cc 01 00       	call   c002800b <__adddf3>
c000b343:	83 c4 10             	add    esp,0x10
c000b346:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b349:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b34c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b350:	4f                   	dec    edi
c000b351:	83 ec 0c             	sub    esp,0xc
c000b354:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b357:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b35b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b362:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b366:	e8 14 dd 01 00       	call   c002907f <__extendsfdf2>
c000b36b:	83 c4 10             	add    esp,0x10
c000b36e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b372:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b37a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b37e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b382:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b386:	e8 fd d2 01 00       	call   c0028688 <__muldf3>
c000b38b:	83 c4 10             	add    esp,0x10
c000b38e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b392:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b396:	52                   	push   edx
c000b397:	50                   	push   eax
c000b398:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b39b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b39e:	e8 68 cc 01 00       	call   c002800b <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3b0:	4f                   	dec    edi
c000b3b1:	83 ec 0c             	sub    esp,0xc
c000b3b4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3bb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3c2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3c6:	e8 b4 dc 01 00       	call   c002907f <__extendsfdf2>
c000b3cb:	83 c4 10             	add    esp,0x10
c000b3ce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3e6:	e8 9d d2 01 00       	call   c0028688 <__muldf3>
c000b3eb:	83 c4 10             	add    esp,0x10
c000b3ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3f6:	52                   	push   edx
c000b3f7:	50                   	push   eax
c000b3f8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3fb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3fe:	e8 08 cc 01 00       	call   c002800b <__adddf3>
c000b403:	83 c4 10             	add    esp,0x10
c000b406:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b409:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b40c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b410:	4f                   	dec    edi
c000b411:	83 ec 0c             	sub    esp,0xc
c000b414:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b417:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b41b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b422:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b426:	e8 54 dc 01 00       	call   c002907f <__extendsfdf2>
c000b42b:	83 c4 10             	add    esp,0x10
c000b42e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b432:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b43e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b442:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b446:	e8 3d d2 01 00       	call   c0028688 <__muldf3>
c000b44b:	83 c4 10             	add    esp,0x10
c000b44e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b452:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b456:	52                   	push   edx
c000b457:	50                   	push   eax
c000b458:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b45b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b45e:	e8 a8 cb 01 00       	call   c002800b <__adddf3>
c000b463:	83 c4 10             	add    esp,0x10
c000b466:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b469:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b46c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b470:	4f                   	dec    edi
c000b471:	83 ec 0c             	sub    esp,0xc
c000b474:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b477:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b47b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b482:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b486:	e8 f4 db 01 00       	call   c002907f <__extendsfdf2>
c000b48b:	83 c4 10             	add    esp,0x10
c000b48e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b492:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b496:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b49a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b49e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4a6:	e8 dd d1 01 00       	call   c0028688 <__muldf3>
c000b4ab:	83 c4 10             	add    esp,0x10
c000b4ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4b6:	52                   	push   edx
c000b4b7:	50                   	push   eax
c000b4b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4be:	e8 48 cb 01 00       	call   c002800b <__adddf3>
c000b4c3:	83 c4 10             	add    esp,0x10
c000b4c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4d0:	4f                   	dec    edi
c000b4d1:	83 ec 0c             	sub    esp,0xc
c000b4d4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4db:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4e2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4e6:	e8 94 db 01 00       	call   c002907f <__extendsfdf2>
c000b4eb:	83 c4 10             	add    esp,0x10
c000b4ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b502:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b506:	e8 7d d1 01 00       	call   c0028688 <__muldf3>
c000b50b:	83 c4 10             	add    esp,0x10
c000b50e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b512:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b516:	52                   	push   edx
c000b517:	50                   	push   eax
c000b518:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b51b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b51e:	e8 e8 ca 01 00       	call   c002800b <__adddf3>
c000b523:	83 c4 10             	add    esp,0x10
c000b526:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b529:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b52c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b530:	4f                   	dec    edi
c000b531:	83 ec 0c             	sub    esp,0xc
c000b534:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b537:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b53b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b542:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b546:	e8 34 db 01 00       	call   c002907f <__extendsfdf2>
c000b54b:	83 c4 10             	add    esp,0x10
c000b54e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b556:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b55e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b562:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b566:	e8 1d d1 01 00       	call   c0028688 <__muldf3>
c000b56b:	83 c4 10             	add    esp,0x10
c000b56e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b572:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b576:	52                   	push   edx
c000b577:	50                   	push   eax
c000b578:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b57b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b57e:	e8 88 ca 01 00       	call   c002800b <__adddf3>
c000b583:	83 c4 10             	add    esp,0x10
c000b586:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b589:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b58c:	85 ff                	test   edi,edi
c000b58e:	0f 8f e1 fc ff ff    	jg     c000b275 <calc_output_multi+0x4fc>
c000b594:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b598:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b59c:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5a0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5a5:	0f 8f 3f fc ff ff    	jg     c000b1ea <calc_output_multi+0x471>
c000b5ab:	be 08 00 00 00       	mov    esi,0x8
c000b5b0:	89 d8                	mov    eax,ebx
c000b5b2:	99                   	cdq    
c000b5b3:	f7 fe                	idiv   esi
c000b5b5:	4a                   	dec    edx
c000b5b6:	83 fa 06             	cmp    edx,0x6
c000b5b9:	77 07                	ja     c000b5c2 <calc_output_multi+0x849>
c000b5bb:	ff 24 95 bc a9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5644]
c000b5c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c6:	4b                   	dec    ebx
c000b5c7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5cb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5d2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5d6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5d9:	e8 2d ca 01 00       	call   c002800b <__adddf3>
c000b5de:	83 c4 10             	add    esp,0x10
c000b5e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f9:	e8 8a d0 01 00       	call   c0028688 <__muldf3>
c000b5fe:	5d                   	pop    ebp
c000b5ff:	59                   	pop    ecx
c000b600:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b604:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b608:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b610:	e8 46 d9 01 00       	call   c0028f5b <__truncdfsf2>
c000b615:	83 c4 10             	add    esp,0x10
c000b618:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b61c:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b61f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b623:	4b                   	dec    ebx
c000b624:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b628:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b62b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b62f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b633:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b636:	e8 d0 c9 01 00       	call   c002800b <__adddf3>
c000b63b:	83 c4 10             	add    esp,0x10
c000b63e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b642:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b64a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b64e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b656:	e8 2d d0 01 00       	call   c0028688 <__muldf3>
c000b65b:	59                   	pop    ecx
c000b65c:	5f                   	pop    edi
c000b65d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b661:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b665:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b669:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66d:	e8 e9 d8 01 00       	call   c0028f5b <__truncdfsf2>
c000b672:	83 c4 10             	add    esp,0x10
c000b675:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b679:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b67c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b680:	4b                   	dec    ebx
c000b681:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b685:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b688:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b68c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b690:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b693:	e8 73 c9 01 00       	call   c002800b <__adddf3>
c000b698:	83 c4 10             	add    esp,0x10
c000b69b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b69f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6b3:	e8 d0 cf 01 00       	call   c0028688 <__muldf3>
c000b6b8:	5f                   	pop    edi
c000b6b9:	5d                   	pop    ebp
c000b6ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ca:	e8 8c d8 01 00       	call   c0028f5b <__truncdfsf2>
c000b6cf:	83 c4 10             	add    esp,0x10
c000b6d2:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6d6:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6dd:	4b                   	dec    ebx
c000b6de:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6e2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6f0:	e8 16 c9 01 00       	call   c002800b <__adddf3>
c000b6f5:	83 c4 10             	add    esp,0x10
c000b6f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b708:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b710:	e8 73 cf 01 00       	call   c0028688 <__muldf3>
c000b715:	5d                   	pop    ebp
c000b716:	59                   	pop    ecx
c000b717:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b71b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b727:	e8 2f d8 01 00       	call   c0028f5b <__truncdfsf2>
c000b72c:	83 c4 10             	add    esp,0x10
c000b72f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b733:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b73a:	4b                   	dec    ebx
c000b73b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b73f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b742:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b746:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b74a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b74d:	e8 b9 c8 01 00       	call   c002800b <__adddf3>
c000b752:	83 c4 10             	add    esp,0x10
c000b755:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b759:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b75d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b761:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b765:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76d:	e8 16 cf 01 00       	call   c0028688 <__muldf3>
c000b772:	59                   	pop    ecx
c000b773:	5f                   	pop    edi
c000b774:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b778:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b77c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b780:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b784:	e8 d2 d7 01 00       	call   c0028f5b <__truncdfsf2>
c000b789:	83 c4 10             	add    esp,0x10
c000b78c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b790:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b793:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b797:	4b                   	dec    ebx
c000b798:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b79c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b79f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7aa:	e8 5c c8 01 00       	call   c002800b <__adddf3>
c000b7af:	83 c4 10             	add    esp,0x10
c000b7b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7ca:	e8 b9 ce 01 00       	call   c0028688 <__muldf3>
c000b7cf:	5f                   	pop    edi
c000b7d0:	5d                   	pop    ebp
c000b7d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e1:	e8 75 d7 01 00       	call   c0028f5b <__truncdfsf2>
c000b7e6:	83 c4 10             	add    esp,0x10
c000b7e9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7ed:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f4:	4b                   	dec    ebx
c000b7f5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7f9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b800:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b804:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b807:	e8 ff c7 01 00       	call   c002800b <__adddf3>
c000b80c:	83 c4 10             	add    esp,0x10
c000b80f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b813:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b817:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b81b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b81f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b823:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b827:	e8 5c ce 01 00       	call   c0028688 <__muldf3>
c000b82c:	5d                   	pop    ebp
c000b82d:	59                   	pop    ecx
c000b82e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b832:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83e:	e8 18 d7 01 00       	call   c0028f5b <__truncdfsf2>
c000b843:	83 c4 10             	add    esp,0x10
c000b846:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b84a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b84d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b851:	4b                   	dec    ebx
c000b852:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b856:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b85d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b861:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b864:	e8 a2 c7 01 00       	call   c002800b <__adddf3>
c000b869:	83 c4 10             	add    esp,0x10
c000b86c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b880:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b884:	e8 ff cd 01 00       	call   c0028688 <__muldf3>
c000b889:	59                   	pop    ecx
c000b88a:	5f                   	pop    edi
c000b88b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b88f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b893:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b897:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b89b:	e8 bb d6 01 00       	call   c0028f5b <__truncdfsf2>
c000b8a0:	83 c4 10             	add    esp,0x10
c000b8a3:	85 db                	test   ebx,ebx
c000b8a5:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8a9:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8ac:	0f 8f fe fc ff ff    	jg     c000b5b0 <calc_output_multi+0x837>
c000b8b2:	83 c4 4c             	add    esp,0x4c
c000b8b5:	5b                   	pop    ebx
c000b8b6:	5e                   	pop    esi
c000b8b7:	5f                   	pop    edi
c000b8b8:	5d                   	pop    ebp
c000b8b9:	c3                   	ret    

c000b8ba <double_to_fp>:
c000b8ba:	83 ec 0c             	sub    esp,0xc
c000b8bd:	68 00 00 b0 40       	push   0x40b00000
c000b8c2:	6a 00                	push   0x0
c000b8c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8cc:	e8 b7 cd 01 00       	call   c0028688 <__muldf3>
c000b8d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8d5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8d9:	83 c4 1c             	add    esp,0x1c
c000b8dc:	e9 2f d8 01 00       	jmp    c0029110 <lrint>

c000b8e1 <prepare_data>:
c000b8e1:	55                   	push   ebp
c000b8e2:	57                   	push   edi
c000b8e3:	56                   	push   esi
c000b8e4:	53                   	push   ebx
c000b8e5:	83 ec 1c             	sub    esp,0x1c
c000b8e8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8ec:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8f0:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8f4:	0f 89 57 01 00 00    	jns    c000ba51 <prepare_data+0x170>
c000b8fa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8fd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b900:	85 d2                	test   edx,edx
c000b902:	75 0d                	jne    c000b911 <prepare_data+0x30>
c000b904:	8d 14 36             	lea    edx,[esi+esi*1]
c000b907:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b90a:	29 d0                	sub    eax,edx
c000b90c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b90f:	eb 44                	jmp    c000b955 <prepare_data+0x74>
c000b911:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b914:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b917:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b91a:	39 c1                	cmp    ecx,eax
c000b91c:	7d 04                	jge    c000b922 <prepare_data+0x41>
c000b91e:	29 d0                	sub    eax,edx
c000b920:	eb 2d                	jmp    c000b94f <prepare_data+0x6e>
c000b922:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b928:	29 d7                	sub    edi,edx
c000b92a:	01 f7                	add    edi,esi
c000b92c:	51                   	push   ecx
c000b92d:	29 f2                	sub    edx,esi
c000b92f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b936:	8d 14 90             	lea    edx,[eax+edx*4]
c000b939:	51                   	push   ecx
c000b93a:	52                   	push   edx
c000b93b:	50                   	push   eax
c000b93c:	e8 63 4d ff ff       	call   c00006a4 <memmove>
c000b941:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b944:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b947:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b94a:	29 f0                	sub    eax,esi
c000b94c:	83 c4 10             	add    esp,0x10
c000b94f:	29 f0                	sub    eax,esi
c000b951:	79 02                	jns    c000b955 <prepare_data+0x74>
c000b953:	31 c0                	xor    eax,eax
c000b955:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b958:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b95b:	29 ef                	sub    edi,ebp
c000b95d:	39 c7                	cmp    edi,eax
c000b95f:	7e 02                	jle    c000b963 <prepare_data+0x82>
c000b961:	89 c7                	mov    edi,eax
c000b963:	89 f8                	mov    eax,edi
c000b965:	99                   	cdq    
c000b966:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b969:	b8 15 00 00 00       	mov    eax,0x15
c000b96e:	29 d7                	sub    edi,edx
c000b970:	0f 88 dd 00 00 00    	js     c000ba53 <prepare_data+0x172>
c000b976:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b979:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b97c:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b97f:	0f 8f ce 00 00 00    	jg     c000ba53 <prepare_data+0x172>
c000b985:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b98b:	50                   	push   eax
c000b98c:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b993:	50                   	push   eax
c000b994:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b998:	8b 00                	mov    eax,DWORD PTR [eax]
c000b99a:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b99d:	50                   	push   eax
c000b99e:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9a1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9a5:	50                   	push   eax
c000b9a6:	e8 b7 4c ff ff       	call   c0000662 <memcpy>
c000b9ab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9ae:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9b1:	01 fd                	add    ebp,edi
c000b9b3:	01 f9                	add    ecx,edi
c000b9b5:	83 c4 10             	add    esp,0x10
c000b9b8:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9bb:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9be:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9c5:	0f 85 86 00 00 00    	jne    c000ba51 <prepare_data+0x170>
c000b9cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9ce:	89 e8                	mov    eax,ebp
c000b9d0:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9d3:	29 c8                	sub    eax,ecx
c000b9d5:	39 f8                	cmp    eax,edi
c000b9d7:	7d 78                	jge    c000ba51 <prepare_data+0x170>
c000b9d9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9dd:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9e1:	74 6e                	je     c000ba51 <prepare_data+0x170>
c000b9e3:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9e6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ea:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9ed:	29 ef                	sub    edi,ebp
c000b9ef:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9f3:	7c 29                	jl     c000ba1e <prepare_data+0x13d>
c000b9f5:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9f8:	29 f1                	sub    ecx,esi
c000b9fa:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba01:	55                   	push   ebp
c000ba02:	50                   	push   eax
c000ba03:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba06:	50                   	push   eax
c000ba07:	52                   	push   edx
c000ba08:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba0c:	e8 93 4c ff ff       	call   c00006a4 <memmove>
c000ba11:	83 c4 10             	add    esp,0x10
c000ba14:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba17:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba21:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba24:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba27:	83 c6 05             	add    esi,0x5
c000ba2a:	78 07                	js     c000ba33 <prepare_data+0x152>
c000ba2c:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba2f:	39 cf                	cmp    edi,ecx
c000ba31:	7e 04                	jle    c000ba37 <prepare_data+0x156>
c000ba33:	89 ce                	mov    esi,ecx
c000ba35:	29 c6                	sub    esi,eax
c000ba37:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba3a:	51                   	push   ecx
c000ba3b:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba42:	51                   	push   ecx
c000ba43:	6a 00                	push   0x0
c000ba45:	50                   	push   eax
c000ba46:	e8 21 4d ff ff       	call   c000076c <memset>
c000ba4b:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba4e:	83 c4 10             	add    esp,0x10
c000ba51:	31 c0                	xor    eax,eax
c000ba53:	83 c4 1c             	add    esp,0x1c
c000ba56:	5b                   	pop    ebx
c000ba57:	5e                   	pop    esi
c000ba58:	5f                   	pop    edi
c000ba59:	5d                   	pop    ebp
c000ba5a:	c3                   	ret    

c000ba5b <sinc_multichan_vari_process>:
c000ba5b:	55                   	push   ebp
c000ba5c:	ba 05 00 00 00       	mov    edx,0x5
c000ba61:	57                   	push   edi
c000ba62:	56                   	push   esi
c000ba63:	53                   	push   ebx
c000ba64:	83 ec 4c             	sub    esp,0x4c
c000ba67:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba6b:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba6f:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba72:	85 db                	test   ebx,ebx
c000ba74:	0f 84 9b 06 00 00    	je     c000c115 <sinc_multichan_vari_process+0x6ba>
c000ba7a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba7d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba80:	0f af c5             	imul   eax,ebp
c000ba83:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba89:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba90:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba97:	0f af c5             	imul   eax,ebp
c000ba9a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba9d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000baa0:	8b 06                	mov    eax,DWORD PTR [esi]
c000baa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baaa:	68 00 00 70 3f       	push   0x3f700000
c000baaf:	6a 00                	push   0x0
c000bab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab9:	e8 99 d4 01 00       	call   c0028f57 <__ltdf2>
c000babe:	83 c4 10             	add    esp,0x10
c000bac1:	ba 16 00 00 00       	mov    edx,0x16
c000bac6:	85 c0                	test   eax,eax
c000bac8:	0f 88 47 06 00 00    	js     c000c115 <sinc_multichan_vari_process+0x6ba>
c000bace:	68 00 00 70 40       	push   0x40700000
c000bad3:	6a 00                	push   0x0
c000bad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badd:	e8 57 d4 01 00       	call   c0028f39 <__gtdf2>
c000bae2:	83 c4 10             	add    esp,0x10
c000bae5:	ba 16 00 00 00       	mov    edx,0x16
c000baea:	85 c0                	test   eax,eax
c000baec:	0f 8f 23 06 00 00    	jg     c000c115 <sinc_multichan_vari_process+0x6ba>
c000baf2:	83 ec 0c             	sub    esp,0xc
c000baf5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000baf8:	e8 ee d1 01 00       	call   c0028ceb <__floatsidf>
c000bafd:	83 c4 10             	add    esp,0x10
c000bb00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb08:	68 00 00 00 40       	push   0x40000000
c000bb0d:	6a 00                	push   0x0
c000bb0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb17:	e8 ef c4 01 00       	call   c002800b <__adddf3>
c000bb1c:	59                   	pop    ecx
c000bb1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb21:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb25:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb28:	e8 be d1 01 00       	call   c0028ceb <__floatsidf>
c000bb2d:	83 c4 10             	add    esp,0x10
c000bb30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb38:	52                   	push   edx
c000bb39:	50                   	push   eax
c000bb3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb42:	e8 25 ce 01 00       	call   c002896c <__divdf3>
c000bb47:	83 c4 10             	add    esp,0x10
c000bb4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb52:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb55:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb70:	e8 c4 d3 01 00       	call   c0028f39 <__gtdf2>
c000bb75:	83 c4 10             	add    esp,0x10
c000bb78:	85 c0                	test   eax,eax
c000bb7a:	7e 2d                	jle    c000bba9 <sinc_multichan_vari_process+0x14e>
c000bb7c:	68 00 00 f0 3f       	push   0x3ff00000
c000bb81:	6a 00                	push   0x0
c000bb83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8b:	e8 c7 d3 01 00       	call   c0028f57 <__ltdf2>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	85 c0                	test   eax,eax
c000bb95:	79 4d                	jns    c000bbe4 <sinc_multichan_vari_process+0x189>
c000bb97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bba3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bba7:	eb 1b                	jmp    c000bbc4 <sinc_multichan_vari_process+0x169>
c000bba9:	68 00 00 f0 3f       	push   0x3ff00000
c000bbae:	6a 00                	push   0x0
c000bbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbb8:	e8 9a d3 01 00       	call   c0028f57 <__ltdf2>
c000bbbd:	83 c4 10             	add    esp,0x10
c000bbc0:	85 c0                	test   eax,eax
c000bbc2:	79 20                	jns    c000bbe4 <sinc_multichan_vari_process+0x189>
c000bbc4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbc8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbcc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbd0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbd4:	e8 93 cd 01 00       	call   c002896c <__divdf3>
c000bbd9:	83 c4 10             	add    esp,0x10
c000bbdc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbe0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbe4:	50                   	push   eax
c000bbe5:	50                   	push   eax
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 1d d5 01 00       	call   c0029110 <lrint>
c000bbf3:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbf6:	40                   	inc    eax
c000bbf7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbfb:	0f af c5             	imul   eax,ebp
c000bbfe:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc02:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	58                   	pop    eax
c000bc0a:	5a                   	pop    edx
c000bc0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc13:	e8 f8 d4 01 00       	call   c0029110 <lrint>
c000bc18:	83 ec 0c             	sub    esp,0xc
c000bc1b:	50                   	push   eax
c000bc1c:	e8 ca d0 01 00       	call   c0028ceb <__floatsidf>
c000bc21:	83 c4 10             	add    esp,0x10
c000bc24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc28:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc2c:	52                   	push   edx
c000bc2d:	50                   	push   eax
c000bc2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc36:	e8 21 ca 01 00       	call   c002865c <__subdf3>
c000bc3b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc3f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc43:	83 c4 20             	add    esp,0x20
c000bc46:	6a 00                	push   0x0
c000bc48:	6a 00                	push   0x0
c000bc4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc52:	e8 00 d3 01 00       	call   c0028f57 <__ltdf2>
c000bc57:	83 c4 10             	add    esp,0x10
c000bc5a:	85 c0                	test   eax,eax
c000bc5c:	79 1f                	jns    c000bc7d <sinc_multichan_vari_process+0x222>
c000bc5e:	68 00 00 f0 3f       	push   0x3ff00000
c000bc63:	6a 00                	push   0x0
c000bc65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6d:	e8 99 c3 01 00       	call   c002800b <__adddf3>
c000bc72:	83 c4 10             	add    esp,0x10
c000bc75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc7d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc80:	83 ec 10             	sub    esp,0x10
c000bc83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc87:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc96:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc9a:	e8 bd c9 01 00       	call   c002865c <__subdf3>
c000bc9f:	83 c4 18             	add    esp,0x18
c000bca2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bca6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcaa:	52                   	push   edx
c000bcab:	50                   	push   eax
c000bcac:	e8 5f d4 01 00       	call   c0029110 <lrint>
c000bcb1:	0f af e8             	imul   ebp,eax
c000bcb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcb8:	01 e8                	add    eax,ebp
c000bcba:	99                   	cdq    
c000bcbb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcbe:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcc9:	68 00 00 f0 3f       	push   0x3ff00000
c000bcce:	6a 00                	push   0x0
c000bcd0:	e8 97 cc 01 00       	call   c002896c <__divdf3>
c000bcd5:	83 c4 10             	add    esp,0x10
c000bcd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcdc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bce0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bce5:	68 23 42 92 0c       	push   0xc924223
c000bcea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcf2:	e8 14 c3 01 00       	call   c002800b <__adddf3>
c000bcf7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcfb:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcff:	83 c4 20             	add    esp,0x20
c000bd02:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd0a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd12:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd15:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd18:	7d 50                	jge    c000bd6a <sinc_multichan_vari_process+0x30f>
c000bd1a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd1d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd20:	01 c8                	add    eax,ecx
c000bd22:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd25:	99                   	cdq    
c000bd26:	f7 f9                	idiv   ecx
c000bd28:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd2c:	7d 0c                	jge    c000bd3a <sinc_multichan_vari_process+0x2df>
c000bd2e:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd31:	85 ed                	test   ebp,ebp
c000bd33:	79 6b                	jns    c000bda0 <sinc_multichan_vari_process+0x345>
c000bd35:	e9 e6 00 00 00       	jmp    c000be20 <sinc_multichan_vari_process+0x3c5>
c000bd3a:	50                   	push   eax
c000bd3b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd3f:	57                   	push   edi
c000bd40:	53                   	push   ebx
c000bd41:	e8 9b fb ff ff       	call   c000b8e1 <prepare_data>
c000bd46:	83 c4 10             	add    esp,0x10
c000bd49:	89 c2                	mov    edx,eax
c000bd4b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd4e:	85 c0                	test   eax,eax
c000bd50:	0f 85 bf 03 00 00    	jne    c000c115 <sinc_multichan_vari_process+0x6ba>
c000bd56:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd59:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd5c:	01 c8                	add    eax,ecx
c000bd5e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd61:	99                   	cdq    
c000bd62:	f7 f9                	idiv   ecx
c000bd64:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd68:	7c c4                	jl     c000bd2e <sinc_multichan_vari_process+0x2d3>
c000bd6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd72:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd75:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd7c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd80:	89 06                	mov    DWORD PTR [esi],eax
c000bd82:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd85:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd88:	99                   	cdq    
c000bd89:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd8c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd8f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd92:	99                   	cdq    
c000bd93:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd96:	31 d2                	xor    edx,edx
c000bd98:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd9b:	e9 75 03 00 00       	jmp    c000c115 <sinc_multichan_vari_process+0x6ba>
c000bda0:	83 ec 0c             	sub    esp,0xc
c000bda3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bda6:	e8 40 cf 01 00       	call   c0028ceb <__floatsidf>
c000bdab:	83 c4 10             	add    esp,0x10
c000bdae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdb2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc6:	e8 40 c2 01 00       	call   c002800b <__adddf3>
c000bdcb:	83 c4 10             	add    esp,0x10
c000bdce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdd2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdda:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde6:	e8 20 c2 01 00       	call   c002800b <__adddf3>
c000bdeb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdf2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdf6:	e8 f0 ce 01 00       	call   c0028ceb <__floatsidf>
c000bdfb:	83 c4 10             	add    esp,0x10
c000bdfe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be02:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be06:	52                   	push   edx
c000be07:	50                   	push   eax
c000be08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be10:	e8 40 d1 01 00       	call   c0028f55 <__gedf2>
c000be15:	83 c4 10             	add    esp,0x10
c000be18:	85 c0                	test   eax,eax
c000be1a:	0f 89 4a ff ff ff    	jns    c000bd6a <sinc_multichan_vari_process+0x30f>
c000be20:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be24:	0f 8e ed 00 00 00    	jle    c000bf17 <sinc_multichan_vari_process+0x4bc>
c000be2a:	83 ec 10             	sub    esp,0x10
c000be2d:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be30:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be33:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be36:	ff 36                	push   DWORD PTR [esi]
c000be38:	e8 1f c8 01 00       	call   c002865c <__subdf3>
c000be3d:	83 c4 18             	add    esp,0x18
c000be40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be48:	52                   	push   edx
c000be49:	50                   	push   eax
c000be4a:	e8 a1 d2 01 00       	call   c00290f0 <fabs>
c000be4f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be53:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be57:	83 c4 10             	add    esp,0x10
c000be5a:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be5f:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be6c:	e8 c8 d0 01 00       	call   c0028f39 <__gtdf2>
c000be71:	83 c4 10             	add    esp,0x10
c000be74:	85 c0                	test   eax,eax
c000be76:	0f 8e 9b 00 00 00    	jle    c000bf17 <sinc_multichan_vari_process+0x4bc>
c000be7c:	8b 06                	mov    eax,DWORD PTR [esi]
c000be7e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be85:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be89:	52                   	push   edx
c000be8a:	50                   	push   eax
c000be8b:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be8e:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be91:	e8 c6 c7 01 00       	call   c002865c <__subdf3>
c000be96:	59                   	pop    ecx
c000be97:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be9b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be9f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bea2:	e8 44 ce 01 00       	call   c0028ceb <__floatsidf>
c000bea7:	83 c4 10             	add    esp,0x10
c000beaa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb2:	52                   	push   edx
c000beb3:	50                   	push   eax
c000beb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebc:	e8 c7 c7 01 00       	call   c0028688 <__muldf3>
c000bec1:	5d                   	pop    ebp
c000bec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bec6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beca:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000becd:	e8 19 ce 01 00       	call   c0028ceb <__floatsidf>
c000bed2:	83 c4 10             	add    esp,0x10
c000bed5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bed9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bedd:	52                   	push   edx
c000bede:	50                   	push   eax
c000bedf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee7:	e8 80 ca 01 00       	call   c002896c <__divdf3>
c000beec:	83 c4 10             	add    esp,0x10
c000beef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bef3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bef7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000befb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf07:	e8 ff c0 01 00       	call   c002800b <__adddf3>
c000bf0c:	83 c4 10             	add    esp,0x10
c000bf0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf13:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf17:	83 ec 0c             	sub    esp,0xc
c000bf1a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf1d:	e8 c9 cd 01 00       	call   c0028ceb <__floatsidf>
c000bf22:	83 c4 10             	add    esp,0x10
c000bf25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3d:	e8 15 d0 01 00       	call   c0028f57 <__ltdf2>
c000bf42:	83 c4 10             	add    esp,0x10
c000bf45:	85 c0                	test   eax,eax
c000bf47:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf4b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf53:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf57:	78 10                	js     c000bf69 <sinc_multichan_vari_process+0x50e>
c000bf59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf5d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf61:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf65:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf6d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf79:	e8 0a c7 01 00       	call   c0028688 <__muldf3>
c000bf7e:	59                   	pop    ecx
c000bf7f:	5d                   	pop    ebp
c000bf80:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf90:	e8 25 f9 ff ff       	call   c000b8ba <double_to_fp>
c000bf95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf99:	89 c5                	mov    ebp,eax
c000bf9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfa3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfa7:	e8 dc c6 01 00       	call   c0028688 <__muldf3>
c000bfac:	83 c4 18             	add    esp,0x18
c000bfaf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfb7:	52                   	push   edx
c000bfb8:	50                   	push   eax
c000bfb9:	e8 fc f8 ff ff       	call   c000b8ba <double_to_fp>
c000bfbe:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfc1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfc5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfc8:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfcb:	50                   	push   eax
c000bfcc:	50                   	push   eax
c000bfcd:	50                   	push   eax
c000bfce:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfd1:	e8 15 cd 01 00       	call   c0028ceb <__floatsidf>
c000bfd6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfda:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfde:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfee:	e8 79 c9 01 00       	call   c002896c <__divdf3>
c000bff3:	83 c4 1c             	add    esp,0x1c
c000bff6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bffa:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bffe:	52                   	push   edx
c000bfff:	89 ea                	mov    edx,ebp
c000c001:	50                   	push   eax
c000c002:	89 d8                	mov    eax,ebx
c000c004:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c007:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c00b:	e8 69 ed ff ff       	call   c000ad79 <calc_output_multi>
c000c010:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c013:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c016:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c01a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c01e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c022:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c026:	e8 41 c9 01 00       	call   c002896c <__divdf3>
c000c02b:	83 c4 10             	add    esp,0x10
c000c02e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c032:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c036:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c03a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c03e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c042:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c046:	e8 c0 bf 01 00       	call   c002800b <__adddf3>
c000c04b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c04f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c053:	83 c4 28             	add    esp,0x28
c000c056:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05e:	e8 ad d0 01 00       	call   c0029110 <lrint>
c000c063:	83 ec 0c             	sub    esp,0xc
c000c066:	50                   	push   eax
c000c067:	e8 7f cc 01 00       	call   c0028ceb <__floatsidf>
c000c06c:	83 c4 10             	add    esp,0x10
c000c06f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c073:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c077:	52                   	push   edx
c000c078:	50                   	push   eax
c000c079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c07d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c081:	e8 d6 c5 01 00       	call   c002865c <__subdf3>
c000c086:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c08a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c08e:	83 c4 20             	add    esp,0x20
c000c091:	6a 00                	push   0x0
c000c093:	6a 00                	push   0x0
c000c095:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c099:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c09d:	e8 b5 ce 01 00       	call   c0028f57 <__ltdf2>
c000c0a2:	83 c4 10             	add    esp,0x10
c000c0a5:	85 c0                	test   eax,eax
c000c0a7:	79 20                	jns    c000c0c9 <sinc_multichan_vari_process+0x66e>
c000c0a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b9:	e8 4d bf 01 00       	call   c002800b <__adddf3>
c000c0be:	83 c4 10             	add    esp,0x10
c000c0c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0cc:	83 ec 10             	sub    esp,0x10
c000c0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0d3:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0e6:	e8 71 c5 01 00       	call   c002865c <__subdf3>
c000c0eb:	83 c4 18             	add    esp,0x18
c000c0ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0f6:	52                   	push   edx
c000c0f7:	50                   	push   eax
c000c0f8:	e8 13 d0 01 00       	call   c0029110 <lrint>
c000c0fd:	0f af e8             	imul   ebp,eax
c000c100:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c104:	83 c4 10             	add    esp,0x10
c000c107:	01 e8                	add    eax,ebp
c000c109:	99                   	cdq    
c000c10a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c10d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c110:	e9 fd fb ff ff       	jmp    c000bd12 <sinc_multichan_vari_process+0x2b7>
c000c115:	83 c4 4c             	add    esp,0x4c
c000c118:	89 d0                	mov    eax,edx
c000c11a:	5b                   	pop    ebx
c000c11b:	5e                   	pop    esi
c000c11c:	5f                   	pop    edi
c000c11d:	5d                   	pop    ebp
c000c11e:	c3                   	ret    

c000c11f <sinc_hex_vari_process>:
c000c11f:	55                   	push   ebp
c000c120:	ba 05 00 00 00       	mov    edx,0x5
c000c125:	57                   	push   edi
c000c126:	56                   	push   esi
c000c127:	53                   	push   ebx
c000c128:	83 ec 4c             	sub    esp,0x4c
c000c12b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c12f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c133:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c136:	85 db                	test   ebx,ebx
c000c138:	0f 84 9c 06 00 00    	je     c000c7da <sinc_hex_vari_process+0x6bb>
c000c13e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c141:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c144:	0f af c7             	imul   eax,edi
c000c147:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c14a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c14d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c154:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c15b:	0f af c7             	imul   eax,edi
c000c15e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c161:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c164:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c167:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c16b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c16f:	68 00 00 70 3f       	push   0x3f700000
c000c174:	6a 00                	push   0x0
c000c176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17e:	e8 d4 cd 01 00       	call   c0028f57 <__ltdf2>
c000c183:	83 c4 10             	add    esp,0x10
c000c186:	ba 16 00 00 00       	mov    edx,0x16
c000c18b:	85 c0                	test   eax,eax
c000c18d:	0f 88 47 06 00 00    	js     c000c7da <sinc_hex_vari_process+0x6bb>
c000c193:	68 00 00 70 40       	push   0x40700000
c000c198:	6a 00                	push   0x0
c000c19a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1a2:	e8 92 cd 01 00       	call   c0028f39 <__gtdf2>
c000c1a7:	83 c4 10             	add    esp,0x10
c000c1aa:	ba 16 00 00 00       	mov    edx,0x16
c000c1af:	85 c0                	test   eax,eax
c000c1b1:	0f 8f 23 06 00 00    	jg     c000c7da <sinc_hex_vari_process+0x6bb>
c000c1b7:	83 ec 0c             	sub    esp,0xc
c000c1ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1bd:	e8 29 cb 01 00       	call   c0028ceb <__floatsidf>
c000c1c2:	83 c4 10             	add    esp,0x10
c000c1c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1cd:	68 00 00 00 40       	push   0x40000000
c000c1d2:	6a 00                	push   0x0
c000c1d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1dc:	e8 2a be 01 00       	call   c002800b <__adddf3>
c000c1e1:	59                   	pop    ecx
c000c1e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1ed:	e8 f9 ca 01 00       	call   c0028ceb <__floatsidf>
c000c1f2:	83 c4 10             	add    esp,0x10
c000c1f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1fd:	52                   	push   edx
c000c1fe:	50                   	push   eax
c000c1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c203:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c207:	e8 60 c7 01 00       	call   c002896c <__divdf3>
c000c20c:	83 c4 10             	add    esp,0x10
c000c20f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c213:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c217:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c21a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c21d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c221:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c225:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c229:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c22d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c231:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c235:	e8 ff cc 01 00       	call   c0028f39 <__gtdf2>
c000c23a:	83 c4 10             	add    esp,0x10
c000c23d:	85 c0                	test   eax,eax
c000c23f:	7e 2d                	jle    c000c26e <sinc_hex_vari_process+0x14f>
c000c241:	68 00 00 f0 3f       	push   0x3ff00000
c000c246:	6a 00                	push   0x0
c000c248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c24c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c250:	e8 02 cd 01 00       	call   c0028f57 <__ltdf2>
c000c255:	83 c4 10             	add    esp,0x10
c000c258:	85 c0                	test   eax,eax
c000c25a:	79 4d                	jns    c000c2a9 <sinc_hex_vari_process+0x18a>
c000c25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c260:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c264:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c268:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c26c:	eb 1b                	jmp    c000c289 <sinc_hex_vari_process+0x16a>
c000c26e:	68 00 00 f0 3f       	push   0x3ff00000
c000c273:	6a 00                	push   0x0
c000c275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c279:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c27d:	e8 d5 cc 01 00       	call   c0028f57 <__ltdf2>
c000c282:	83 c4 10             	add    esp,0x10
c000c285:	85 c0                	test   eax,eax
c000c287:	79 20                	jns    c000c2a9 <sinc_hex_vari_process+0x18a>
c000c289:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c28d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c291:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c295:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c299:	e8 ce c6 01 00       	call   c002896c <__divdf3>
c000c29e:	83 c4 10             	add    esp,0x10
c000c2a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2a9:	50                   	push   eax
c000c2aa:	50                   	push   eax
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 58 ce 01 00       	call   c0029110 <lrint>
c000c2b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2bb:	40                   	inc    eax
c000c2bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2c0:	0f af c7             	imul   eax,edi
c000c2c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2ce:	58                   	pop    eax
c000c2cf:	5a                   	pop    edx
c000c2d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d8:	e8 33 ce 01 00       	call   c0029110 <lrint>
c000c2dd:	83 ec 0c             	sub    esp,0xc
c000c2e0:	50                   	push   eax
c000c2e1:	e8 05 ca 01 00       	call   c0028ceb <__floatsidf>
c000c2e6:	83 c4 10             	add    esp,0x10
c000c2e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2f1:	52                   	push   edx
c000c2f2:	50                   	push   eax
c000c2f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2fb:	e8 5c c3 01 00       	call   c002865c <__subdf3>
c000c300:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c304:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c308:	83 c4 20             	add    esp,0x20
c000c30b:	6a 00                	push   0x0
c000c30d:	6a 00                	push   0x0
c000c30f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c313:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c317:	e8 3b cc 01 00       	call   c0028f57 <__ltdf2>
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	85 c0                	test   eax,eax
c000c321:	79 1f                	jns    c000c342 <sinc_hex_vari_process+0x223>
c000c323:	68 00 00 f0 3f       	push   0x3ff00000
c000c328:	6a 00                	push   0x0
c000c32a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c332:	e8 d4 bc 01 00       	call   c002800b <__adddf3>
c000c337:	83 c4 10             	add    esp,0x10
c000c33a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c33e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c342:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c345:	83 ec 10             	sub    esp,0x10
c000c348:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c34c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c34f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c357:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c35b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c35f:	e8 f8 c2 01 00       	call   c002865c <__subdf3>
c000c364:	83 c4 18             	add    esp,0x18
c000c367:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c36b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c36f:	52                   	push   edx
c000c370:	50                   	push   eax
c000c371:	e8 9a cd 01 00       	call   c0029110 <lrint>
c000c376:	0f af f8             	imul   edi,eax
c000c379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c37d:	01 f8                	add    eax,edi
c000c37f:	99                   	cdq    
c000c380:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c383:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c386:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c38a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c38e:	68 00 00 f0 3f       	push   0x3ff00000
c000c393:	6a 00                	push   0x0
c000c395:	e8 d2 c5 01 00       	call   c002896c <__divdf3>
c000c39a:	83 c4 10             	add    esp,0x10
c000c39d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3a5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3aa:	68 23 42 92 0c       	push   0xc924223
c000c3af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3b7:	e8 4f bc 01 00       	call   c002800b <__adddf3>
c000c3bc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3c0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3c4:	83 c4 20             	add    esp,0x20
c000c3c7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3cf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3da:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3dd:	7d 50                	jge    c000c42f <sinc_hex_vari_process+0x310>
c000c3df:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3e2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3e5:	01 c8                	add    eax,ecx
c000c3e7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ea:	99                   	cdq    
c000c3eb:	f7 f9                	idiv   ecx
c000c3ed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3f1:	7d 0c                	jge    c000c3ff <sinc_hex_vari_process+0x2e0>
c000c3f3:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3f6:	85 ff                	test   edi,edi
c000c3f8:	79 6c                	jns    c000c466 <sinc_hex_vari_process+0x347>
c000c3fa:	e9 e7 00 00 00       	jmp    c000c4e6 <sinc_hex_vari_process+0x3c7>
c000c3ff:	50                   	push   eax
c000c400:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c404:	56                   	push   esi
c000c405:	53                   	push   ebx
c000c406:	e8 d6 f4 ff ff       	call   c000b8e1 <prepare_data>
c000c40b:	83 c4 10             	add    esp,0x10
c000c40e:	89 c2                	mov    edx,eax
c000c410:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c413:	85 c0                	test   eax,eax
c000c415:	0f 85 bf 03 00 00    	jne    c000c7da <sinc_hex_vari_process+0x6bb>
c000c41b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c41e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c421:	01 c8                	add    eax,ecx
c000c423:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c426:	99                   	cdq    
c000c427:	f7 f9                	idiv   ecx
c000c429:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c42d:	7c c4                	jl     c000c3f3 <sinc_hex_vari_process+0x2d4>
c000c42f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c437:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c43a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c43d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c441:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c445:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c448:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c44b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c44e:	99                   	cdq    
c000c44f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c452:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c458:	99                   	cdq    
c000c459:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c45c:	31 d2                	xor    edx,edx
c000c45e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c461:	e9 74 03 00 00       	jmp    c000c7da <sinc_hex_vari_process+0x6bb>
c000c466:	83 ec 0c             	sub    esp,0xc
c000c469:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c46c:	e8 7a c8 01 00       	call   c0028ceb <__floatsidf>
c000c471:	83 c4 10             	add    esp,0x10
c000c474:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c478:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c47c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c480:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c488:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c48c:	e8 7a bb 01 00       	call   c002800b <__adddf3>
c000c491:	83 c4 10             	add    esp,0x10
c000c494:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c498:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c49c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ac:	e8 5a bb 01 00       	call   c002800b <__adddf3>
c000c4b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4b8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4bc:	e8 2a c8 01 00       	call   c0028ceb <__floatsidf>
c000c4c1:	83 c4 10             	add    esp,0x10
c000c4c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4cc:	52                   	push   edx
c000c4cd:	50                   	push   eax
c000c4ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d6:	e8 7a ca 01 00       	call   c0028f55 <__gedf2>
c000c4db:	83 c4 10             	add    esp,0x10
c000c4de:	85 c0                	test   eax,eax
c000c4e0:	0f 89 49 ff ff ff    	jns    c000c42f <sinc_hex_vari_process+0x310>
c000c4e6:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ea:	0f 8e ef 00 00 00    	jle    c000c5df <sinc_hex_vari_process+0x4c0>
c000c4f0:	83 ec 10             	sub    esp,0x10
c000c4f3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4f6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4f9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4fc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4ff:	e8 58 c1 01 00       	call   c002865c <__subdf3>
c000c504:	83 c4 18             	add    esp,0x18
c000c507:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c50b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c50f:	52                   	push   edx
c000c510:	50                   	push   eax
c000c511:	e8 da cb 01 00       	call   c00290f0 <fabs>
c000c516:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c51a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c51e:	83 c4 10             	add    esp,0x10
c000c521:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c526:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c52b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c52f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c533:	e8 01 ca 01 00       	call   c0028f39 <__gtdf2>
c000c538:	83 c4 10             	add    esp,0x10
c000c53b:	85 c0                	test   eax,eax
c000c53d:	0f 8e 9c 00 00 00    	jle    c000c5df <sinc_hex_vari_process+0x4c0>
c000c543:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c546:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c549:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c54d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c551:	52                   	push   edx
c000c552:	50                   	push   eax
c000c553:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c556:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c559:	e8 fe c0 01 00       	call   c002865c <__subdf3>
c000c55e:	59                   	pop    ecx
c000c55f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c563:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c567:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c56a:	e8 7c c7 01 00       	call   c0028ceb <__floatsidf>
c000c56f:	83 c4 10             	add    esp,0x10
c000c572:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c576:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57a:	52                   	push   edx
c000c57b:	50                   	push   eax
c000c57c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c580:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c584:	e8 ff c0 01 00       	call   c0028688 <__muldf3>
c000c589:	5f                   	pop    edi
c000c58a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c58e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c592:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c595:	e8 51 c7 01 00       	call   c0028ceb <__floatsidf>
c000c59a:	83 c4 10             	add    esp,0x10
c000c59d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5a5:	52                   	push   edx
c000c5a6:	50                   	push   eax
c000c5a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5af:	e8 b8 c3 01 00       	call   c002896c <__divdf3>
c000c5b4:	83 c4 10             	add    esp,0x10
c000c5b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5bb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5cf:	e8 37 ba 01 00       	call   c002800b <__adddf3>
c000c5d4:	83 c4 10             	add    esp,0x10
c000c5d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5df:	83 ec 0c             	sub    esp,0xc
c000c5e2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5e5:	e8 01 c7 01 00       	call   c0028ceb <__floatsidf>
c000c5ea:	83 c4 10             	add    esp,0x10
c000c5ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c605:	e8 4d c9 01 00       	call   c0028f57 <__ltdf2>
c000c60a:	83 c4 10             	add    esp,0x10
c000c60d:	85 c0                	test   eax,eax
c000c60f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c613:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c617:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c61b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c61f:	78 10                	js     c000c631 <sinc_hex_vari_process+0x512>
c000c621:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c625:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c629:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c62d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c631:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c635:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c639:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c641:	e8 42 c0 01 00       	call   c0028688 <__muldf3>
c000c646:	59                   	pop    ecx
c000c647:	5f                   	pop    edi
c000c648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c64c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c650:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c654:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c658:	e8 5d f2 ff ff       	call   c000b8ba <double_to_fp>
c000c65d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c661:	89 c7                	mov    edi,eax
c000c663:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c667:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c66f:	e8 14 c0 01 00       	call   c0028688 <__muldf3>
c000c674:	83 c4 18             	add    esp,0x18
c000c677:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c67b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c67f:	52                   	push   edx
c000c680:	50                   	push   eax
c000c681:	e8 34 f2 ff ff       	call   c000b8ba <double_to_fp>
c000c686:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c689:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c68d:	83 c4 0c             	add    esp,0xc
c000c690:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c693:	8d 04 90             	lea    eax,[eax+edx*4]
c000c696:	50                   	push   eax
c000c697:	50                   	push   eax
c000c698:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c69b:	e8 4b c6 01 00       	call   c0028ceb <__floatsidf>
c000c6a0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6a4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6b8:	e8 af c2 01 00       	call   c002896c <__divdf3>
c000c6bd:	83 c4 18             	add    esp,0x18
c000c6c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6c8:	52                   	push   edx
c000c6c9:	89 fa                	mov    edx,edi
c000c6cb:	50                   	push   eax
c000c6cc:	89 d8                	mov    eax,ebx
c000c6ce:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6d2:	e8 50 de ff ff       	call   c000a527 <calc_output_hex>
c000c6d7:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6eb:	e8 7c c2 01 00       	call   c002896c <__divdf3>
c000c6f0:	83 c4 10             	add    esp,0x10
c000c6f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c703:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c707:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c70b:	e8 fb b8 01 00       	call   c002800b <__adddf3>
c000c710:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c714:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c718:	83 c4 18             	add    esp,0x18
c000c71b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c71f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c723:	e8 e8 c9 01 00       	call   c0029110 <lrint>
c000c728:	83 ec 0c             	sub    esp,0xc
c000c72b:	50                   	push   eax
c000c72c:	e8 ba c5 01 00       	call   c0028ceb <__floatsidf>
c000c731:	83 c4 10             	add    esp,0x10
c000c734:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c738:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c73c:	52                   	push   edx
c000c73d:	50                   	push   eax
c000c73e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c746:	e8 11 bf 01 00       	call   c002865c <__subdf3>
c000c74b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c74f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c753:	83 c4 20             	add    esp,0x20
c000c756:	6a 00                	push   0x0
c000c758:	6a 00                	push   0x0
c000c75a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c75e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c762:	e8 f0 c7 01 00       	call   c0028f57 <__ltdf2>
c000c767:	83 c4 10             	add    esp,0x10
c000c76a:	85 c0                	test   eax,eax
c000c76c:	79 20                	jns    c000c78e <sinc_hex_vari_process+0x66f>
c000c76e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c776:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77e:	e8 88 b8 01 00       	call   c002800b <__adddf3>
c000c783:	83 c4 10             	add    esp,0x10
c000c786:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c78a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c78e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c791:	83 ec 10             	sub    esp,0x10
c000c794:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c798:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c79b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c79f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7ab:	e8 ac be 01 00       	call   c002865c <__subdf3>
c000c7b0:	83 c4 18             	add    esp,0x18
c000c7b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7bb:	52                   	push   edx
c000c7bc:	50                   	push   eax
c000c7bd:	e8 4e c9 01 00       	call   c0029110 <lrint>
c000c7c2:	0f af f8             	imul   edi,eax
c000c7c5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7c9:	83 c4 10             	add    esp,0x10
c000c7cc:	01 f8                	add    eax,edi
c000c7ce:	99                   	cdq    
c000c7cf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7d2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7d5:	e9 fd fb ff ff       	jmp    c000c3d7 <sinc_hex_vari_process+0x2b8>
c000c7da:	83 c4 4c             	add    esp,0x4c
c000c7dd:	89 d0                	mov    eax,edx
c000c7df:	5b                   	pop    ebx
c000c7e0:	5e                   	pop    esi
c000c7e1:	5f                   	pop    edi
c000c7e2:	5d                   	pop    ebp
c000c7e3:	c3                   	ret    

c000c7e4 <sinc_quad_vari_process>:
c000c7e4:	55                   	push   ebp
c000c7e5:	ba 05 00 00 00       	mov    edx,0x5
c000c7ea:	57                   	push   edi
c000c7eb:	56                   	push   esi
c000c7ec:	53                   	push   ebx
c000c7ed:	83 ec 4c             	sub    esp,0x4c
c000c7f0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7f4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7f8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7fb:	85 db                	test   ebx,ebx
c000c7fd:	0f 84 9c 06 00 00    	je     c000ce9f <sinc_quad_vari_process+0x6bb>
c000c803:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c806:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c809:	0f af c7             	imul   eax,edi
c000c80c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c80f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c812:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c819:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c820:	0f af c7             	imul   eax,edi
c000c823:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c826:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c829:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c82c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c830:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c834:	68 00 00 70 3f       	push   0x3f700000
c000c839:	6a 00                	push   0x0
c000c83b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c843:	e8 0f c7 01 00       	call   c0028f57 <__ltdf2>
c000c848:	83 c4 10             	add    esp,0x10
c000c84b:	ba 16 00 00 00       	mov    edx,0x16
c000c850:	85 c0                	test   eax,eax
c000c852:	0f 88 47 06 00 00    	js     c000ce9f <sinc_quad_vari_process+0x6bb>
c000c858:	68 00 00 70 40       	push   0x40700000
c000c85d:	6a 00                	push   0x0
c000c85f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c867:	e8 cd c6 01 00       	call   c0028f39 <__gtdf2>
c000c86c:	83 c4 10             	add    esp,0x10
c000c86f:	ba 16 00 00 00       	mov    edx,0x16
c000c874:	85 c0                	test   eax,eax
c000c876:	0f 8f 23 06 00 00    	jg     c000ce9f <sinc_quad_vari_process+0x6bb>
c000c87c:	83 ec 0c             	sub    esp,0xc
c000c87f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c882:	e8 64 c4 01 00       	call   c0028ceb <__floatsidf>
c000c887:	83 c4 10             	add    esp,0x10
c000c88a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c88e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c892:	68 00 00 00 40       	push   0x40000000
c000c897:	6a 00                	push   0x0
c000c899:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c89d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a1:	e8 65 b7 01 00       	call   c002800b <__adddf3>
c000c8a6:	59                   	pop    ecx
c000c8a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8af:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8b2:	e8 34 c4 01 00       	call   c0028ceb <__floatsidf>
c000c8b7:	83 c4 10             	add    esp,0x10
c000c8ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8c2:	52                   	push   edx
c000c8c3:	50                   	push   eax
c000c8c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cc:	e8 9b c0 01 00       	call   c002896c <__divdf3>
c000c8d1:	83 c4 10             	add    esp,0x10
c000c8d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8dc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8df:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8fa:	e8 3a c6 01 00       	call   c0028f39 <__gtdf2>
c000c8ff:	83 c4 10             	add    esp,0x10
c000c902:	85 c0                	test   eax,eax
c000c904:	7e 2d                	jle    c000c933 <sinc_quad_vari_process+0x14f>
c000c906:	68 00 00 f0 3f       	push   0x3ff00000
c000c90b:	6a 00                	push   0x0
c000c90d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c915:	e8 3d c6 01 00       	call   c0028f57 <__ltdf2>
c000c91a:	83 c4 10             	add    esp,0x10
c000c91d:	85 c0                	test   eax,eax
c000c91f:	79 4d                	jns    c000c96e <sinc_quad_vari_process+0x18a>
c000c921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c925:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c929:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c92d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c931:	eb 1b                	jmp    c000c94e <sinc_quad_vari_process+0x16a>
c000c933:	68 00 00 f0 3f       	push   0x3ff00000
c000c938:	6a 00                	push   0x0
c000c93a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c93e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c942:	e8 10 c6 01 00       	call   c0028f57 <__ltdf2>
c000c947:	83 c4 10             	add    esp,0x10
c000c94a:	85 c0                	test   eax,eax
c000c94c:	79 20                	jns    c000c96e <sinc_quad_vari_process+0x18a>
c000c94e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c952:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c956:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c95a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c95e:	e8 09 c0 01 00       	call   c002896c <__divdf3>
c000c963:	83 c4 10             	add    esp,0x10
c000c966:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c96a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c96e:	50                   	push   eax
c000c96f:	50                   	push   eax
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 93 c7 01 00       	call   c0029110 <lrint>
c000c97d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c980:	40                   	inc    eax
c000c981:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c985:	0f af c7             	imul   eax,edi
c000c988:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c98c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c98f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c993:	58                   	pop    eax
c000c994:	5a                   	pop    edx
c000c995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c999:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c99d:	e8 6e c7 01 00       	call   c0029110 <lrint>
c000c9a2:	83 ec 0c             	sub    esp,0xc
c000c9a5:	50                   	push   eax
c000c9a6:	e8 40 c3 01 00       	call   c0028ceb <__floatsidf>
c000c9ab:	83 c4 10             	add    esp,0x10
c000c9ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9b6:	52                   	push   edx
c000c9b7:	50                   	push   eax
c000c9b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9c0:	e8 97 bc 01 00       	call   c002865c <__subdf3>
c000c9c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9cd:	83 c4 20             	add    esp,0x20
c000c9d0:	6a 00                	push   0x0
c000c9d2:	6a 00                	push   0x0
c000c9d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9dc:	e8 76 c5 01 00       	call   c0028f57 <__ltdf2>
c000c9e1:	83 c4 10             	add    esp,0x10
c000c9e4:	85 c0                	test   eax,eax
c000c9e6:	79 1f                	jns    c000ca07 <sinc_quad_vari_process+0x223>
c000c9e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c9ed:	6a 00                	push   0x0
c000c9ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f7:	e8 0f b6 01 00       	call   c002800b <__adddf3>
c000c9fc:	83 c4 10             	add    esp,0x10
c000c9ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca07:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca0a:	83 ec 10             	sub    esp,0x10
c000ca0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca11:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca1c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca24:	e8 33 bc 01 00       	call   c002865c <__subdf3>
c000ca29:	83 c4 18             	add    esp,0x18
c000ca2c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca34:	52                   	push   edx
c000ca35:	50                   	push   eax
c000ca36:	e8 d5 c6 01 00       	call   c0029110 <lrint>
c000ca3b:	0f af f8             	imul   edi,eax
c000ca3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca42:	01 f8                	add    eax,edi
c000ca44:	99                   	cdq    
c000ca45:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca48:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca53:	68 00 00 f0 3f       	push   0x3ff00000
c000ca58:	6a 00                	push   0x0
c000ca5a:	e8 0d bf 01 00       	call   c002896c <__divdf3>
c000ca5f:	83 c4 10             	add    esp,0x10
c000ca62:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca66:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca6a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca6f:	68 23 42 92 0c       	push   0xc924223
c000ca74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca7c:	e8 8a b5 01 00       	call   c002800b <__adddf3>
c000ca81:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca85:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca89:	83 c4 20             	add    esp,0x20
c000ca8c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca94:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca9c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca9f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000caa2:	7d 50                	jge    c000caf4 <sinc_quad_vari_process+0x310>
c000caa4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caa7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000caaa:	01 c8                	add    eax,ecx
c000caac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000caaf:	99                   	cdq    
c000cab0:	f7 f9                	idiv   ecx
c000cab2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cab6:	7d 0c                	jge    c000cac4 <sinc_quad_vari_process+0x2e0>
c000cab8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cabb:	85 ff                	test   edi,edi
c000cabd:	79 6c                	jns    c000cb2b <sinc_quad_vari_process+0x347>
c000cabf:	e9 e7 00 00 00       	jmp    c000cbab <sinc_quad_vari_process+0x3c7>
c000cac4:	50                   	push   eax
c000cac5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cac9:	56                   	push   esi
c000caca:	53                   	push   ebx
c000cacb:	e8 11 ee ff ff       	call   c000b8e1 <prepare_data>
c000cad0:	83 c4 10             	add    esp,0x10
c000cad3:	89 c2                	mov    edx,eax
c000cad5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cad8:	85 c0                	test   eax,eax
c000cada:	0f 85 bf 03 00 00    	jne    c000ce9f <sinc_quad_vari_process+0x6bb>
c000cae0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cae3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cae6:	01 c8                	add    eax,ecx
c000cae8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000caeb:	99                   	cdq    
c000caec:	f7 f9                	idiv   ecx
c000caee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000caf2:	7c c4                	jl     c000cab8 <sinc_quad_vari_process+0x2d4>
c000caf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caf8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cafc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000caff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb0a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb0d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb10:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb13:	99                   	cdq    
c000cb14:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb17:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb1a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb1d:	99                   	cdq    
c000cb1e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb21:	31 d2                	xor    edx,edx
c000cb23:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb26:	e9 74 03 00 00       	jmp    c000ce9f <sinc_quad_vari_process+0x6bb>
c000cb2b:	83 ec 0c             	sub    esp,0xc
c000cb2e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb31:	e8 b5 c1 01 00       	call   c0028ceb <__floatsidf>
c000cb36:	83 c4 10             	add    esp,0x10
c000cb39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb3d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb51:	e8 b5 b4 01 00       	call   c002800b <__adddf3>
c000cb56:	83 c4 10             	add    esp,0x10
c000cb59:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb5d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb71:	e8 95 b4 01 00       	call   c002800b <__adddf3>
c000cb76:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb81:	e8 65 c1 01 00       	call   c0028ceb <__floatsidf>
c000cb86:	83 c4 10             	add    esp,0x10
c000cb89:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb91:	52                   	push   edx
c000cb92:	50                   	push   eax
c000cb93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9b:	e8 b5 c3 01 00       	call   c0028f55 <__gedf2>
c000cba0:	83 c4 10             	add    esp,0x10
c000cba3:	85 c0                	test   eax,eax
c000cba5:	0f 89 49 ff ff ff    	jns    c000caf4 <sinc_quad_vari_process+0x310>
c000cbab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbaf:	0f 8e ef 00 00 00    	jle    c000cca4 <sinc_quad_vari_process+0x4c0>
c000cbb5:	83 ec 10             	sub    esp,0x10
c000cbb8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbbb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbbe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbc1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbc4:	e8 93 ba 01 00       	call   c002865c <__subdf3>
c000cbc9:	83 c4 18             	add    esp,0x18
c000cbcc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbd4:	52                   	push   edx
c000cbd5:	50                   	push   eax
c000cbd6:	e8 15 c5 01 00       	call   c00290f0 <fabs>
c000cbdb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbdf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbe3:	83 c4 10             	add    esp,0x10
c000cbe6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbeb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbf8:	e8 3c c3 01 00       	call   c0028f39 <__gtdf2>
c000cbfd:	83 c4 10             	add    esp,0x10
c000cc00:	85 c0                	test   eax,eax
c000cc02:	0f 8e 9c 00 00 00    	jle    c000cca4 <sinc_quad_vari_process+0x4c0>
c000cc08:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc12:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc16:	52                   	push   edx
c000cc17:	50                   	push   eax
c000cc18:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc1b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc1e:	e8 39 ba 01 00       	call   c002865c <__subdf3>
c000cc23:	59                   	pop    ecx
c000cc24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc28:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc2c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc2f:	e8 b7 c0 01 00       	call   c0028ceb <__floatsidf>
c000cc34:	83 c4 10             	add    esp,0x10
c000cc37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc3f:	52                   	push   edx
c000cc40:	50                   	push   eax
c000cc41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc49:	e8 3a ba 01 00       	call   c0028688 <__muldf3>
c000cc4e:	5f                   	pop    edi
c000cc4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc53:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc57:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc5a:	e8 8c c0 01 00       	call   c0028ceb <__floatsidf>
c000cc5f:	83 c4 10             	add    esp,0x10
c000cc62:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc66:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc6a:	52                   	push   edx
c000cc6b:	50                   	push   eax
c000cc6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc74:	e8 f3 bc 01 00       	call   c002896c <__divdf3>
c000cc79:	83 c4 10             	add    esp,0x10
c000cc7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc80:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc94:	e8 72 b3 01 00       	call   c002800b <__adddf3>
c000cc99:	83 c4 10             	add    esp,0x10
c000cc9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cca0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cca4:	83 ec 0c             	sub    esp,0xc
c000cca7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccaa:	e8 3c c0 01 00       	call   c0028ceb <__floatsidf>
c000ccaf:	83 c4 10             	add    esp,0x10
c000ccb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccca:	e8 88 c2 01 00       	call   c0028f57 <__ltdf2>
c000cccf:	83 c4 10             	add    esp,0x10
c000ccd2:	85 c0                	test   eax,eax
c000ccd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccdc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cce0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cce4:	78 10                	js     c000ccf6 <sinc_quad_vari_process+0x512>
c000cce6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ccf2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccfe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd06:	e8 7d b9 01 00       	call   c0028688 <__muldf3>
c000cd0b:	59                   	pop    ecx
c000cd0c:	5f                   	pop    edi
c000cd0d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd1d:	e8 98 eb ff ff       	call   c000b8ba <double_to_fp>
c000cd22:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd26:	89 c7                	mov    edi,eax
c000cd28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd34:	e8 4f b9 01 00       	call   c0028688 <__muldf3>
c000cd39:	83 c4 18             	add    esp,0x18
c000cd3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd40:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd44:	52                   	push   edx
c000cd45:	50                   	push   eax
c000cd46:	e8 6f eb ff ff       	call   c000b8ba <double_to_fp>
c000cd4b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd4e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd52:	83 c4 0c             	add    esp,0xc
c000cd55:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd58:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd5b:	50                   	push   eax
c000cd5c:	50                   	push   eax
c000cd5d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd60:	e8 86 bf 01 00       	call   c0028ceb <__floatsidf>
c000cd65:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd69:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd79:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd7d:	e8 ea bb 01 00       	call   c002896c <__divdf3>
c000cd82:	83 c4 18             	add    esp,0x18
c000cd85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd8d:	52                   	push   edx
c000cd8e:	89 fa                	mov    edx,edi
c000cd90:	50                   	push   eax
c000cd91:	89 d8                	mov    eax,ebx
c000cd93:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd97:	e8 a5 d1 ff ff       	call   c0009f41 <calc_output_quad>
c000cd9c:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cda0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cda4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cda8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdb0:	e8 b7 bb 01 00       	call   c002896c <__divdf3>
c000cdb5:	83 c4 10             	add    esp,0x10
c000cdb8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdbc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdd0:	e8 36 b2 01 00       	call   c002800b <__adddf3>
c000cdd5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdd9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cddd:	83 c4 18             	add    esp,0x18
c000cde0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cde4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cde8:	e8 23 c3 01 00       	call   c0029110 <lrint>
c000cded:	83 ec 0c             	sub    esp,0xc
c000cdf0:	50                   	push   eax
c000cdf1:	e8 f5 be 01 00       	call   c0028ceb <__floatsidf>
c000cdf6:	83 c4 10             	add    esp,0x10
c000cdf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdfd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce01:	52                   	push   edx
c000ce02:	50                   	push   eax
c000ce03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce0b:	e8 4c b8 01 00       	call   c002865c <__subdf3>
c000ce10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce18:	83 c4 20             	add    esp,0x20
c000ce1b:	6a 00                	push   0x0
c000ce1d:	6a 00                	push   0x0
c000ce1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce27:	e8 2b c1 01 00       	call   c0028f57 <__ltdf2>
c000ce2c:	83 c4 10             	add    esp,0x10
c000ce2f:	85 c0                	test   eax,eax
c000ce31:	79 20                	jns    c000ce53 <sinc_quad_vari_process+0x66f>
c000ce33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce43:	e8 c3 b1 01 00       	call   c002800b <__adddf3>
c000ce48:	83 c4 10             	add    esp,0x10
c000ce4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce53:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce56:	83 ec 10             	sub    esp,0x10
c000ce59:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce5d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce70:	e8 e7 b7 01 00       	call   c002865c <__subdf3>
c000ce75:	83 c4 18             	add    esp,0x18
c000ce78:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce7c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce80:	52                   	push   edx
c000ce81:	50                   	push   eax
c000ce82:	e8 89 c2 01 00       	call   c0029110 <lrint>
c000ce87:	0f af f8             	imul   edi,eax
c000ce8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce8e:	83 c4 10             	add    esp,0x10
c000ce91:	01 f8                	add    eax,edi
c000ce93:	99                   	cdq    
c000ce94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce9a:	e9 fd fb ff ff       	jmp    c000ca9c <sinc_quad_vari_process+0x2b8>
c000ce9f:	83 c4 4c             	add    esp,0x4c
c000cea2:	89 d0                	mov    eax,edx
c000cea4:	5b                   	pop    ebx
c000cea5:	5e                   	pop    esi
c000cea6:	5f                   	pop    edi
c000cea7:	5d                   	pop    ebp
c000cea8:	c3                   	ret    

c000cea9 <sinc_stereo_vari_process>:
c000cea9:	55                   	push   ebp
c000ceaa:	ba 05 00 00 00       	mov    edx,0x5
c000ceaf:	57                   	push   edi
c000ceb0:	56                   	push   esi
c000ceb1:	53                   	push   ebx
c000ceb2:	83 ec 4c             	sub    esp,0x4c
c000ceb5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ceb9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cebd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cec0:	85 db                	test   ebx,ebx
c000cec2:	0f 84 9c 06 00 00    	je     c000d564 <sinc_stereo_vari_process+0x6bb>
c000cec8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cecb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cece:	0f af c7             	imul   eax,edi
c000ced1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ced4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ced7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cede:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cee5:	0f af c7             	imul   eax,edi
c000cee8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ceeb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ceee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cef1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cef9:	68 00 00 70 3f       	push   0x3f700000
c000cefe:	6a 00                	push   0x0
c000cf00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf08:	e8 4a c0 01 00       	call   c0028f57 <__ltdf2>
c000cf0d:	83 c4 10             	add    esp,0x10
c000cf10:	ba 16 00 00 00       	mov    edx,0x16
c000cf15:	85 c0                	test   eax,eax
c000cf17:	0f 88 47 06 00 00    	js     c000d564 <sinc_stereo_vari_process+0x6bb>
c000cf1d:	68 00 00 70 40       	push   0x40700000
c000cf22:	6a 00                	push   0x0
c000cf24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf2c:	e8 08 c0 01 00       	call   c0028f39 <__gtdf2>
c000cf31:	83 c4 10             	add    esp,0x10
c000cf34:	ba 16 00 00 00       	mov    edx,0x16
c000cf39:	85 c0                	test   eax,eax
c000cf3b:	0f 8f 23 06 00 00    	jg     c000d564 <sinc_stereo_vari_process+0x6bb>
c000cf41:	83 ec 0c             	sub    esp,0xc
c000cf44:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf47:	e8 9f bd 01 00       	call   c0028ceb <__floatsidf>
c000cf4c:	83 c4 10             	add    esp,0x10
c000cf4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf57:	68 00 00 00 40       	push   0x40000000
c000cf5c:	6a 00                	push   0x0
c000cf5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf66:	e8 a0 b0 01 00       	call   c002800b <__adddf3>
c000cf6b:	59                   	pop    ecx
c000cf6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf70:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf74:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf77:	e8 6f bd 01 00       	call   c0028ceb <__floatsidf>
c000cf7c:	83 c4 10             	add    esp,0x10
c000cf7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf87:	52                   	push   edx
c000cf88:	50                   	push   eax
c000cf89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf91:	e8 d6 b9 01 00       	call   c002896c <__divdf3>
c000cf96:	83 c4 10             	add    esp,0x10
c000cf99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfa1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfa4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfa7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfbf:	e8 75 bf 01 00       	call   c0028f39 <__gtdf2>
c000cfc4:	83 c4 10             	add    esp,0x10
c000cfc7:	85 c0                	test   eax,eax
c000cfc9:	7e 2d                	jle    c000cff8 <sinc_stereo_vari_process+0x14f>
c000cfcb:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd0:	6a 00                	push   0x0
c000cfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfda:	e8 78 bf 01 00       	call   c0028f57 <__ltdf2>
c000cfdf:	83 c4 10             	add    esp,0x10
c000cfe2:	85 c0                	test   eax,eax
c000cfe4:	79 4d                	jns    c000d033 <sinc_stereo_vari_process+0x18a>
c000cfe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cff2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cff6:	eb 1b                	jmp    c000d013 <sinc_stereo_vari_process+0x16a>
c000cff8:	68 00 00 f0 3f       	push   0x3ff00000
c000cffd:	6a 00                	push   0x0
c000cfff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d003:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d007:	e8 4b bf 01 00       	call   c0028f57 <__ltdf2>
c000d00c:	83 c4 10             	add    esp,0x10
c000d00f:	85 c0                	test   eax,eax
c000d011:	79 20                	jns    c000d033 <sinc_stereo_vari_process+0x18a>
c000d013:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d017:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d01b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d01f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d023:	e8 44 b9 01 00       	call   c002896c <__divdf3>
c000d028:	83 c4 10             	add    esp,0x10
c000d02b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d02f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d033:	50                   	push   eax
c000d034:	50                   	push   eax
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 ce c0 01 00       	call   c0029110 <lrint>
c000d042:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d045:	40                   	inc    eax
c000d046:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d04a:	0f af c7             	imul   eax,edi
c000d04d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d054:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d058:	58                   	pop    eax
c000d059:	5a                   	pop    edx
c000d05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d062:	e8 a9 c0 01 00       	call   c0029110 <lrint>
c000d067:	83 ec 0c             	sub    esp,0xc
c000d06a:	50                   	push   eax
c000d06b:	e8 7b bc 01 00       	call   c0028ceb <__floatsidf>
c000d070:	83 c4 10             	add    esp,0x10
c000d073:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d077:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d07b:	52                   	push   edx
c000d07c:	50                   	push   eax
c000d07d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d081:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d085:	e8 d2 b5 01 00       	call   c002865c <__subdf3>
c000d08a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d08e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d092:	83 c4 20             	add    esp,0x20
c000d095:	6a 00                	push   0x0
c000d097:	6a 00                	push   0x0
c000d099:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d09d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0a1:	e8 b1 be 01 00       	call   c0028f57 <__ltdf2>
c000d0a6:	83 c4 10             	add    esp,0x10
c000d0a9:	85 c0                	test   eax,eax
c000d0ab:	79 1f                	jns    c000d0cc <sinc_stereo_vari_process+0x223>
c000d0ad:	68 00 00 f0 3f       	push   0x3ff00000
c000d0b2:	6a 00                	push   0x0
c000d0b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0bc:	e8 4a af 01 00       	call   c002800b <__adddf3>
c000d0c1:	83 c4 10             	add    esp,0x10
c000d0c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0cf:	83 ec 10             	sub    esp,0x10
c000d0d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0e9:	e8 6e b5 01 00       	call   c002865c <__subdf3>
c000d0ee:	83 c4 18             	add    esp,0x18
c000d0f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0f9:	52                   	push   edx
c000d0fa:	50                   	push   eax
c000d0fb:	e8 10 c0 01 00       	call   c0029110 <lrint>
c000d100:	0f af f8             	imul   edi,eax
c000d103:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d107:	01 f8                	add    eax,edi
c000d109:	99                   	cdq    
c000d10a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d10d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d110:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d114:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d118:	68 00 00 f0 3f       	push   0x3ff00000
c000d11d:	6a 00                	push   0x0
c000d11f:	e8 48 b8 01 00       	call   c002896c <__divdf3>
c000d124:	83 c4 10             	add    esp,0x10
c000d127:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d12b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d12f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d134:	68 23 42 92 0c       	push   0xc924223
c000d139:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d13d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d141:	e8 c5 ae 01 00       	call   c002800b <__adddf3>
c000d146:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d14a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d14e:	83 c4 20             	add    esp,0x20
c000d151:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d159:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d161:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d164:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d167:	7d 50                	jge    c000d1b9 <sinc_stereo_vari_process+0x310>
c000d169:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d16c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d16f:	01 c8                	add    eax,ecx
c000d171:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d174:	99                   	cdq    
c000d175:	f7 f9                	idiv   ecx
c000d177:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d17b:	7d 0c                	jge    c000d189 <sinc_stereo_vari_process+0x2e0>
c000d17d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d180:	85 ff                	test   edi,edi
c000d182:	79 6c                	jns    c000d1f0 <sinc_stereo_vari_process+0x347>
c000d184:	e9 e7 00 00 00       	jmp    c000d270 <sinc_stereo_vari_process+0x3c7>
c000d189:	50                   	push   eax
c000d18a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d18e:	56                   	push   esi
c000d18f:	53                   	push   ebx
c000d190:	e8 4c e7 ff ff       	call   c000b8e1 <prepare_data>
c000d195:	83 c4 10             	add    esp,0x10
c000d198:	89 c2                	mov    edx,eax
c000d19a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d19d:	85 c0                	test   eax,eax
c000d19f:	0f 85 bf 03 00 00    	jne    c000d564 <sinc_stereo_vari_process+0x6bb>
c000d1a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1ab:	01 c8                	add    eax,ecx
c000d1ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1b0:	99                   	cdq    
c000d1b1:	f7 f9                	idiv   ecx
c000d1b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1b7:	7c c4                	jl     c000d17d <sinc_stereo_vari_process+0x2d4>
c000d1b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1d8:	99                   	cdq    
c000d1d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1e2:	99                   	cdq    
c000d1e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1e6:	31 d2                	xor    edx,edx
c000d1e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1eb:	e9 74 03 00 00       	jmp    c000d564 <sinc_stereo_vari_process+0x6bb>
c000d1f0:	83 ec 0c             	sub    esp,0xc
c000d1f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1f6:	e8 f0 ba 01 00       	call   c0028ceb <__floatsidf>
c000d1fb:	83 c4 10             	add    esp,0x10
c000d1fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d202:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d206:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d20a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d20e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d212:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d216:	e8 f0 ad 01 00       	call   c002800b <__adddf3>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d226:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d22a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d22e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d232:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d236:	e8 d0 ad 01 00       	call   c002800b <__adddf3>
c000d23b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d23e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d242:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d246:	e8 a0 ba 01 00       	call   c0028ceb <__floatsidf>
c000d24b:	83 c4 10             	add    esp,0x10
c000d24e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d252:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d256:	52                   	push   edx
c000d257:	50                   	push   eax
c000d258:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d25c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d260:	e8 f0 bc 01 00       	call   c0028f55 <__gedf2>
c000d265:	83 c4 10             	add    esp,0x10
c000d268:	85 c0                	test   eax,eax
c000d26a:	0f 89 49 ff ff ff    	jns    c000d1b9 <sinc_stereo_vari_process+0x310>
c000d270:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d274:	0f 8e ef 00 00 00    	jle    c000d369 <sinc_stereo_vari_process+0x4c0>
c000d27a:	83 ec 10             	sub    esp,0x10
c000d27d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d280:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d283:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d286:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d289:	e8 ce b3 01 00       	call   c002865c <__subdf3>
c000d28e:	83 c4 18             	add    esp,0x18
c000d291:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d295:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d299:	52                   	push   edx
c000d29a:	50                   	push   eax
c000d29b:	e8 50 be 01 00       	call   c00290f0 <fabs>
c000d2a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2a8:	83 c4 10             	add    esp,0x10
c000d2ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2bd:	e8 77 bc 01 00       	call   c0028f39 <__gtdf2>
c000d2c2:	83 c4 10             	add    esp,0x10
c000d2c5:	85 c0                	test   eax,eax
c000d2c7:	0f 8e 9c 00 00 00    	jle    c000d369 <sinc_stereo_vari_process+0x4c0>
c000d2cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2db:	52                   	push   edx
c000d2dc:	50                   	push   eax
c000d2dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2e3:	e8 74 b3 01 00       	call   c002865c <__subdf3>
c000d2e8:	59                   	pop    ecx
c000d2e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2f4:	e8 f2 b9 01 00       	call   c0028ceb <__floatsidf>
c000d2f9:	83 c4 10             	add    esp,0x10
c000d2fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d300:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d304:	52                   	push   edx
c000d305:	50                   	push   eax
c000d306:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d30a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d30e:	e8 75 b3 01 00       	call   c0028688 <__muldf3>
c000d313:	5f                   	pop    edi
c000d314:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d318:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d31c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d31f:	e8 c7 b9 01 00       	call   c0028ceb <__floatsidf>
c000d324:	83 c4 10             	add    esp,0x10
c000d327:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d32b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d32f:	52                   	push   edx
c000d330:	50                   	push   eax
c000d331:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d335:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d339:	e8 2e b6 01 00       	call   c002896c <__divdf3>
c000d33e:	83 c4 10             	add    esp,0x10
c000d341:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d345:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d349:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d34d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d351:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d355:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d359:	e8 ad ac 01 00       	call   c002800b <__adddf3>
c000d35e:	83 c4 10             	add    esp,0x10
c000d361:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d365:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d369:	83 ec 0c             	sub    esp,0xc
c000d36c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d36f:	e8 77 b9 01 00       	call   c0028ceb <__floatsidf>
c000d374:	83 c4 10             	add    esp,0x10
c000d377:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d37b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d37f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d383:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d38f:	e8 c3 bb 01 00       	call   c0028f57 <__ltdf2>
c000d394:	83 c4 10             	add    esp,0x10
c000d397:	85 c0                	test   eax,eax
c000d399:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d39d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3a1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3a5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3a9:	78 10                	js     c000d3bb <sinc_stereo_vari_process+0x512>
c000d3ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cb:	e8 b8 b2 01 00       	call   c0028688 <__muldf3>
c000d3d0:	59                   	pop    ecx
c000d3d1:	5f                   	pop    edi
c000d3d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3e2:	e8 d3 e4 ff ff       	call   c000b8ba <double_to_fp>
c000d3e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3eb:	89 c7                	mov    edi,eax
c000d3ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3f9:	e8 8a b2 01 00       	call   c0028688 <__muldf3>
c000d3fe:	83 c4 18             	add    esp,0x18
c000d401:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d405:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d409:	52                   	push   edx
c000d40a:	50                   	push   eax
c000d40b:	e8 aa e4 ff ff       	call   c000b8ba <double_to_fp>
c000d410:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d413:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d417:	83 c4 0c             	add    esp,0xc
c000d41a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d41d:	8d 04 90             	lea    eax,[eax+edx*4]
c000d420:	50                   	push   eax
c000d421:	50                   	push   eax
c000d422:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d425:	e8 c1 b8 01 00       	call   c0028ceb <__floatsidf>
c000d42a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d42e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d432:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d436:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d43a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d43e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d442:	e8 25 b5 01 00       	call   c002896c <__divdf3>
c000d447:	83 c4 18             	add    esp,0x18
c000d44a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d44e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d452:	52                   	push   edx
c000d453:	89 fa                	mov    edx,edi
c000d455:	50                   	push   eax
c000d456:	89 d8                	mov    eax,ebx
c000d458:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d45c:	e8 02 c7 ff ff       	call   c0009b63 <calc_output_stereo>
c000d461:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d465:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d469:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d46d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d471:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d475:	e8 f2 b4 01 00       	call   c002896c <__divdf3>
c000d47a:	83 c4 10             	add    esp,0x10
c000d47d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d481:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d485:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d489:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d48d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d491:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d495:	e8 71 ab 01 00       	call   c002800b <__adddf3>
c000d49a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d49e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4a2:	83 c4 18             	add    esp,0x18
c000d4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ad:	e8 5e bc 01 00       	call   c0029110 <lrint>
c000d4b2:	83 ec 0c             	sub    esp,0xc
c000d4b5:	50                   	push   eax
c000d4b6:	e8 30 b8 01 00       	call   c0028ceb <__floatsidf>
c000d4bb:	83 c4 10             	add    esp,0x10
c000d4be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c6:	52                   	push   edx
c000d4c7:	50                   	push   eax
c000d4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4d0:	e8 87 b1 01 00       	call   c002865c <__subdf3>
c000d4d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4dd:	83 c4 20             	add    esp,0x20
c000d4e0:	6a 00                	push   0x0
c000d4e2:	6a 00                	push   0x0
c000d4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4ec:	e8 66 ba 01 00       	call   c0028f57 <__ltdf2>
c000d4f1:	83 c4 10             	add    esp,0x10
c000d4f4:	85 c0                	test   eax,eax
c000d4f6:	79 20                	jns    c000d518 <sinc_stereo_vari_process+0x66f>
c000d4f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d500:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d504:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d508:	e8 fe aa 01 00       	call   c002800b <__adddf3>
c000d50d:	83 c4 10             	add    esp,0x10
c000d510:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d514:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d518:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d51b:	83 ec 10             	sub    esp,0x10
c000d51e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d522:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d525:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d529:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d52d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d531:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d535:	e8 22 b1 01 00       	call   c002865c <__subdf3>
c000d53a:	83 c4 18             	add    esp,0x18
c000d53d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d541:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d545:	52                   	push   edx
c000d546:	50                   	push   eax
c000d547:	e8 c4 bb 01 00       	call   c0029110 <lrint>
c000d54c:	0f af f8             	imul   edi,eax
c000d54f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d553:	83 c4 10             	add    esp,0x10
c000d556:	01 f8                	add    eax,edi
c000d558:	99                   	cdq    
c000d559:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d55c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d55f:	e9 fd fb ff ff       	jmp    c000d161 <sinc_stereo_vari_process+0x2b8>
c000d564:	83 c4 4c             	add    esp,0x4c
c000d567:	89 d0                	mov    eax,edx
c000d569:	5b                   	pop    ebx
c000d56a:	5e                   	pop    esi
c000d56b:	5f                   	pop    edi
c000d56c:	5d                   	pop    ebp
c000d56d:	c3                   	ret    

c000d56e <sinc_mono_vari_process>:
c000d56e:	55                   	push   ebp
c000d56f:	ba 05 00 00 00       	mov    edx,0x5
c000d574:	57                   	push   edi
c000d575:	56                   	push   esi
c000d576:	53                   	push   ebx
c000d577:	83 ec 4c             	sub    esp,0x4c
c000d57a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d57e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d582:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d585:	85 db                	test   ebx,ebx
c000d587:	0f 84 c1 06 00 00    	je     c000dc4e <sinc_mono_vari_process+0x6e0>
c000d58d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d590:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d593:	0f af c7             	imul   eax,edi
c000d596:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d599:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d59c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5a3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5aa:	0f af c7             	imul   eax,edi
c000d5ad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5b0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5b4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5b7:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5c1:	68 00 00 70 3f       	push   0x3f700000
c000d5c6:	6a 00                	push   0x0
c000d5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5d0:	e8 82 b9 01 00       	call   c0028f57 <__ltdf2>
c000d5d5:	83 c4 10             	add    esp,0x10
c000d5d8:	ba 16 00 00 00       	mov    edx,0x16
c000d5dd:	85 c0                	test   eax,eax
c000d5df:	0f 88 69 06 00 00    	js     c000dc4e <sinc_mono_vari_process+0x6e0>
c000d5e5:	68 00 00 70 40       	push   0x40700000
c000d5ea:	6a 00                	push   0x0
c000d5ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5f4:	e8 40 b9 01 00       	call   c0028f39 <__gtdf2>
c000d5f9:	83 c4 10             	add    esp,0x10
c000d5fc:	ba 16 00 00 00       	mov    edx,0x16
c000d601:	85 c0                	test   eax,eax
c000d603:	0f 8f 45 06 00 00    	jg     c000dc4e <sinc_mono_vari_process+0x6e0>
c000d609:	83 ec 0c             	sub    esp,0xc
c000d60c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d60f:	e8 d7 b6 01 00       	call   c0028ceb <__floatsidf>
c000d614:	83 c4 10             	add    esp,0x10
c000d617:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d61b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d61f:	68 00 00 00 40       	push   0x40000000
c000d624:	6a 00                	push   0x0
c000d626:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d62a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d62e:	e8 d8 a9 01 00       	call   c002800b <__adddf3>
c000d633:	59                   	pop    ecx
c000d634:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d638:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d63c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d63f:	e8 a7 b6 01 00       	call   c0028ceb <__floatsidf>
c000d644:	83 c4 10             	add    esp,0x10
c000d647:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d64b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d64f:	52                   	push   edx
c000d650:	50                   	push   eax
c000d651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d655:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d659:	e8 0e b3 01 00       	call   c002896c <__divdf3>
c000d65e:	83 c4 10             	add    esp,0x10
c000d661:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d665:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d669:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d66c:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d66f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d673:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d677:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d687:	e8 ad b8 01 00       	call   c0028f39 <__gtdf2>
c000d68c:	83 c4 10             	add    esp,0x10
c000d68f:	85 c0                	test   eax,eax
c000d691:	7e 2d                	jle    c000d6c0 <sinc_mono_vari_process+0x152>
c000d693:	68 00 00 f0 3f       	push   0x3ff00000
c000d698:	6a 00                	push   0x0
c000d69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6a2:	e8 b0 b8 01 00       	call   c0028f57 <__ltdf2>
c000d6a7:	83 c4 10             	add    esp,0x10
c000d6aa:	85 c0                	test   eax,eax
c000d6ac:	79 4d                	jns    c000d6fb <sinc_mono_vari_process+0x18d>
c000d6ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6be:	eb 1b                	jmp    c000d6db <sinc_mono_vari_process+0x16d>
c000d6c0:	68 00 00 f0 3f       	push   0x3ff00000
c000d6c5:	6a 00                	push   0x0
c000d6c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6cf:	e8 83 b8 01 00       	call   c0028f57 <__ltdf2>
c000d6d4:	83 c4 10             	add    esp,0x10
c000d6d7:	85 c0                	test   eax,eax
c000d6d9:	79 20                	jns    c000d6fb <sinc_mono_vari_process+0x18d>
c000d6db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6eb:	e8 7c b2 01 00       	call   c002896c <__divdf3>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6fb:	50                   	push   eax
c000d6fc:	50                   	push   eax
c000d6fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	e8 06 ba 01 00       	call   c0029110 <lrint>
c000d70a:	40                   	inc    eax
c000d70b:	0f af c7             	imul   eax,edi
c000d70e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d712:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d716:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d719:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d71c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d720:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d724:	58                   	pop    eax
c000d725:	5a                   	pop    edx
c000d726:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d72a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d72e:	e8 dd b9 01 00       	call   c0029110 <lrint>
c000d733:	83 ec 0c             	sub    esp,0xc
c000d736:	50                   	push   eax
c000d737:	e8 af b5 01 00       	call   c0028ceb <__floatsidf>
c000d73c:	83 c4 10             	add    esp,0x10
c000d73f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d743:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d747:	52                   	push   edx
c000d748:	50                   	push   eax
c000d749:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d751:	e8 06 af 01 00       	call   c002865c <__subdf3>
c000d756:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d75a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d75e:	83 c4 20             	add    esp,0x20
c000d761:	6a 00                	push   0x0
c000d763:	6a 00                	push   0x0
c000d765:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d76d:	e8 e5 b7 01 00       	call   c0028f57 <__ltdf2>
c000d772:	83 c4 10             	add    esp,0x10
c000d775:	85 c0                	test   eax,eax
c000d777:	79 1f                	jns    c000d798 <sinc_mono_vari_process+0x22a>
c000d779:	68 00 00 f0 3f       	push   0x3ff00000
c000d77e:	6a 00                	push   0x0
c000d780:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d784:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d788:	e8 7e a8 01 00       	call   c002800b <__adddf3>
c000d78d:	83 c4 10             	add    esp,0x10
c000d790:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d794:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d798:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d79b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d79e:	83 ec 10             	sub    esp,0x10
c000d7a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7b1:	e8 a6 ae 01 00       	call   c002865c <__subdf3>
c000d7b6:	83 c4 18             	add    esp,0x18
c000d7b9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7c1:	52                   	push   edx
c000d7c2:	50                   	push   eax
c000d7c3:	e8 48 b9 01 00       	call   c0029110 <lrint>
c000d7c8:	0f af f8             	imul   edi,eax
c000d7cb:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7ce:	31 ff                	xor    edi,edi
c000d7d0:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7d5:	99                   	cdq    
c000d7d6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7d9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7e4:	55                   	push   ebp
c000d7e5:	57                   	push   edi
c000d7e6:	e8 81 b1 01 00       	call   c002896c <__divdf3>
c000d7eb:	83 c4 10             	add    esp,0x10
c000d7ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7f6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7fb:	68 23 42 92 0c       	push   0xc924223
c000d800:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d804:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d808:	e8 fe a7 01 00       	call   c002800b <__adddf3>
c000d80d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d811:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d815:	83 c4 20             	add    esp,0x20
c000d818:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d81c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d820:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d823:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d826:	7d 54                	jge    c000d87c <sinc_mono_vari_process+0x30e>
c000d828:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d82b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d82e:	01 c8                	add    eax,ecx
c000d830:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d833:	99                   	cdq    
c000d834:	f7 f9                	idiv   ecx
c000d836:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d83a:	7d 0c                	jge    c000d848 <sinc_mono_vari_process+0x2da>
c000d83c:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d83f:	85 ff                	test   edi,edi
c000d841:	79 73                	jns    c000d8b6 <sinc_mono_vari_process+0x348>
c000d843:	e9 ee 00 00 00       	jmp    c000d936 <sinc_mono_vari_process+0x3c8>
c000d848:	50                   	push   eax
c000d849:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d84d:	56                   	push   esi
c000d84e:	53                   	push   ebx
c000d84f:	e8 8d e0 ff ff       	call   c000b8e1 <prepare_data>
c000d854:	89 c2                	mov    edx,eax
c000d856:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d85a:	83 c4 10             	add    esp,0x10
c000d85d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d860:	85 d2                	test   edx,edx
c000d862:	0f 85 e6 03 00 00    	jne    c000dc4e <sinc_mono_vari_process+0x6e0>
c000d868:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d86b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d86e:	01 c8                	add    eax,ecx
c000d870:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d873:	99                   	cdq    
c000d874:	f7 f9                	idiv   ecx
c000d876:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d87a:	7c c0                	jl     c000d83c <sinc_mono_vari_process+0x2ce>
c000d87c:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d888:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d88b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d892:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d896:	89 01                	mov    DWORD PTR [ecx],eax
c000d898:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d89b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d89e:	99                   	cdq    
c000d89f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8a2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8a5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8a8:	99                   	cdq    
c000d8a9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8ac:	31 d2                	xor    edx,edx
c000d8ae:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8b1:	e9 98 03 00 00       	jmp    c000dc4e <sinc_mono_vari_process+0x6e0>
c000d8b6:	83 ec 0c             	sub    esp,0xc
c000d8b9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8bc:	e8 2a b4 01 00       	call   c0028ceb <__floatsidf>
c000d8c1:	83 c4 10             	add    esp,0x10
c000d8c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8dc:	e8 2a a7 01 00       	call   c002800b <__adddf3>
c000d8e1:	83 c4 10             	add    esp,0x10
c000d8e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fc:	e8 0a a7 01 00       	call   c002800b <__adddf3>
c000d901:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d904:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d908:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d90c:	e8 da b3 01 00       	call   c0028ceb <__floatsidf>
c000d911:	83 c4 10             	add    esp,0x10
c000d914:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d918:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d91c:	52                   	push   edx
c000d91d:	50                   	push   eax
c000d91e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d922:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d926:	e8 0e b6 01 00       	call   c0028f39 <__gtdf2>
c000d92b:	83 c4 10             	add    esp,0x10
c000d92e:	85 c0                	test   eax,eax
c000d930:	0f 8f 46 ff ff ff    	jg     c000d87c <sinc_mono_vari_process+0x30e>
c000d936:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d93a:	0f 8e f5 00 00 00    	jle    c000da35 <sinc_mono_vari_process+0x4c7>
c000d940:	83 ec 10             	sub    esp,0x10
c000d943:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d946:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d949:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d94d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d950:	ff 30                	push   DWORD PTR [eax]
c000d952:	e8 05 ad 01 00       	call   c002865c <__subdf3>
c000d957:	83 c4 18             	add    esp,0x18
c000d95a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d95e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d962:	52                   	push   edx
c000d963:	50                   	push   eax
c000d964:	e8 87 b7 01 00       	call   c00290f0 <fabs>
c000d969:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d96d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d979:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d97e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d982:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d986:	e8 ae b5 01 00       	call   c0028f39 <__gtdf2>
c000d98b:	83 c4 10             	add    esp,0x10
c000d98e:	85 c0                	test   eax,eax
c000d990:	0f 8e 9f 00 00 00    	jle    c000da35 <sinc_mono_vari_process+0x4c7>
c000d996:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d99a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d99d:	8b 00                	mov    eax,DWORD PTR [eax]
c000d99f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9a7:	52                   	push   edx
c000d9a8:	50                   	push   eax
c000d9a9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9ac:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9af:	e8 a8 ac 01 00       	call   c002865c <__subdf3>
c000d9b4:	5f                   	pop    edi
c000d9b5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9b9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9bd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9c0:	e8 26 b3 01 00       	call   c0028ceb <__floatsidf>
c000d9c5:	83 c4 10             	add    esp,0x10
c000d9c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9cc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d0:	52                   	push   edx
c000d9d1:	50                   	push   eax
c000d9d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9da:	e8 a9 ac 01 00       	call   c0028688 <__muldf3>
c000d9df:	5d                   	pop    ebp
c000d9e0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9e4:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9e8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9eb:	e8 fb b2 01 00       	call   c0028ceb <__floatsidf>
c000d9f0:	83 c4 10             	add    esp,0x10
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9fb:	52                   	push   edx
c000d9fc:	50                   	push   eax
c000d9fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da01:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da05:	e8 62 af 01 00       	call   c002896c <__divdf3>
c000da0a:	83 c4 10             	add    esp,0x10
c000da0d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da25:	e8 e1 a5 01 00       	call   c002800b <__adddf3>
c000da2a:	83 c4 10             	add    esp,0x10
c000da2d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da31:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da35:	83 ec 0c             	sub    esp,0xc
c000da38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da3b:	e8 ab b2 01 00       	call   c0028ceb <__floatsidf>
c000da40:	83 c4 10             	add    esp,0x10
c000da43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da5b:	e8 f7 b4 01 00       	call   c0028f57 <__ltdf2>
c000da60:	83 c4 10             	add    esp,0x10
c000da63:	85 c0                	test   eax,eax
c000da65:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da69:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da6d:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da71:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da75:	78 10                	js     c000da87 <sinc_mono_vari_process+0x519>
c000da77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da7b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da93:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da97:	e8 ec ab 01 00       	call   c0028688 <__muldf3>
c000da9c:	59                   	pop    ecx
c000da9d:	5f                   	pop    edi
c000da9e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000daa2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000daa6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daae:	e8 07 de ff ff       	call   c000b8ba <double_to_fp>
c000dab3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab7:	89 c7                	mov    edi,eax
c000dab9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dabd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dac1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dac5:	e8 be ab 01 00       	call   c0028688 <__muldf3>
c000daca:	83 c4 18             	add    esp,0x18
c000dacd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dad1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dad5:	52                   	push   edx
c000dad6:	50                   	push   eax
c000dad7:	e8 de dd ff ff       	call   c000b8ba <double_to_fp>
c000dadc:	83 ec 0c             	sub    esp,0xc
c000dadf:	89 c5                	mov    ebp,eax
c000dae1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dae4:	e8 02 b2 01 00       	call   c0028ceb <__floatsidf>
c000dae9:	83 c4 10             	add    esp,0x10
c000daec:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000daf0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daf4:	52                   	push   edx
c000daf5:	50                   	push   eax
c000daf6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dafa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dafe:	e8 69 ae 01 00       	call   c002896c <__divdf3>
c000db03:	83 c4 10             	add    esp,0x10
c000db06:	89 e9                	mov    ecx,ebp
c000db08:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db0c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db10:	89 d8                	mov    eax,ebx
c000db12:	89 fa                	mov    edx,edi
c000db14:	e8 ee bd ff ff       	call   c0009907 <calc_output_single>
c000db19:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db1c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db1f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db23:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db27:	52                   	push   edx
c000db28:	50                   	push   eax
c000db29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db2d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db31:	e8 52 ab 01 00       	call   c0028688 <__muldf3>
c000db36:	59                   	pop    ecx
c000db37:	59                   	pop    ecx
c000db38:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db3c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db40:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db44:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db48:	e8 0e b4 01 00       	call   c0028f5b <__truncdfsf2>
c000db4d:	83 c4 10             	add    esp,0x10
c000db50:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db53:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db66:	e8 01 ae 01 00       	call   c002896c <__divdf3>
c000db6b:	83 c4 10             	add    esp,0x10
c000db6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db72:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db7e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db82:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db86:	e8 80 a4 01 00       	call   c002800b <__adddf3>
c000db8b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db8f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db93:	83 c4 18             	add    esp,0x18
c000db96:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db9e:	e8 6d b5 01 00       	call   c0029110 <lrint>
c000dba3:	83 ec 0c             	sub    esp,0xc
c000dba6:	50                   	push   eax
c000dba7:	e8 3f b1 01 00       	call   c0028ceb <__floatsidf>
c000dbac:	83 c4 10             	add    esp,0x10
c000dbaf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbb7:	52                   	push   edx
c000dbb8:	50                   	push   eax
c000dbb9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbbd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbc1:	e8 96 aa 01 00       	call   c002865c <__subdf3>
c000dbc6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbce:	83 c4 20             	add    esp,0x20
c000dbd1:	6a 00                	push   0x0
c000dbd3:	6a 00                	push   0x0
c000dbd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbdd:	e8 75 b3 01 00       	call   c0028f57 <__ltdf2>
c000dbe2:	83 c4 10             	add    esp,0x10
c000dbe5:	85 c0                	test   eax,eax
c000dbe7:	79 20                	jns    c000dc09 <sinc_mono_vari_process+0x69b>
c000dbe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf9:	e8 0d a4 01 00       	call   c002800b <__adddf3>
c000dbfe:	83 c4 10             	add    esp,0x10
c000dc01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc09:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc0c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc0f:	83 ec 10             	sub    esp,0x10
c000dc12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc1e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc22:	e8 35 aa 01 00       	call   c002865c <__subdf3>
c000dc27:	83 c4 18             	add    esp,0x18
c000dc2a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc32:	52                   	push   edx
c000dc33:	50                   	push   eax
c000dc34:	e8 d7 b4 01 00       	call   c0029110 <lrint>
c000dc39:	83 c4 10             	add    esp,0x10
c000dc3c:	0f af f8             	imul   edi,eax
c000dc3f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc42:	99                   	cdq    
c000dc43:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc46:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc49:	e9 d2 fb ff ff       	jmp    c000d820 <sinc_mono_vari_process+0x2b2>
c000dc4e:	83 c4 4c             	add    esp,0x4c
c000dc51:	89 d0                	mov    eax,edx
c000dc53:	5b                   	pop    ebx
c000dc54:	5e                   	pop    esi
c000dc55:	5f                   	pop    edi
c000dc56:	5d                   	pop    ebp
c000dc57:	c3                   	ret    

c000dc58 <sinc_get_name>:
c000dc58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc5c:	31 c0                	xor    eax,eax
c000dc5e:	83 fa 02             	cmp    edx,0x2
c000dc61:	77 07                	ja     c000dc6a <sinc_get_name+0x12>
c000dc63:	8b 04 95 e4 a9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd561c]
c000dc6a:	c3                   	ret    

c000dc6b <sinc_get_description>:
c000dc6b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc6f:	31 c0                	xor    eax,eax
c000dc71:	83 fa 02             	cmp    edx,0x2
c000dc74:	77 07                	ja     c000dc7d <sinc_get_description+0x12>
c000dc76:	8b 04 95 d8 a9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5628]
c000dc7d:	c3                   	ret    

c000dc7e <sinc_set_converter>:
c000dc7e:	53                   	push   ebx
c000dc7f:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc85:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc8c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc8f:	85 c0                	test   eax,eax
c000dc91:	74 13                	je     c000dca6 <sinc_set_converter+0x28>
c000dc93:	83 ec 0c             	sub    esp,0xc
c000dc96:	50                   	push   eax
c000dc97:	e8 34 1c 00 00       	call   c000f8d0 <free>
c000dc9c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dca3:	83 c4 10             	add    esp,0x10
c000dca6:	50                   	push   eax
c000dca7:	68 44 08 00 00       	push   0x844
c000dcac:	6a 00                	push   0x0
c000dcae:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcb2:	50                   	push   eax
c000dcb3:	e8 b4 2a ff ff       	call   c000076c <memset>
c000dcb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcbb:	83 c4 10             	add    esp,0x10
c000dcbe:	b8 0b 00 00 00       	mov    eax,0xb
c000dcc3:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcc9:	7f 6e                	jg     c000dd39 <sinc_set_converter+0xbb>
c000dccb:	83 fa 01             	cmp    edx,0x1
c000dcce:	75 10                	jne    c000dce0 <sinc_set_converter+0x62>
c000dcd0:	c7 43 24 6e d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d56e
c000dcd7:	c7 43 20 6e d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d56e
c000dcde:	eb 4d                	jmp    c000dd2d <sinc_set_converter+0xaf>
c000dce0:	83 fa 02             	cmp    edx,0x2
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x77>
c000dce5:	c7 43 24 a9 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cea9
c000dcec:	c7 43 20 a9 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cea9
c000dcf3:	eb 38                	jmp    c000dd2d <sinc_set_converter+0xaf>
c000dcf5:	83 fa 04             	cmp    edx,0x4
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x8c>
c000dcfa:	c7 43 24 e4 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7e4
c000dd01:	c7 43 20 e4 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7e4
c000dd08:	eb 23                	jmp    c000dd2d <sinc_set_converter+0xaf>
c000dd0a:	83 fa 06             	cmp    edx,0x6
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0xa1>
c000dd0f:	c7 43 24 1f c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c11f
c000dd16:	c7 43 20 1f c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c11f
c000dd1d:	eb 0e                	jmp    c000dd2d <sinc_set_converter+0xaf>
c000dd1f:	c7 43 24 5b ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba5b
c000dd26:	c7 43 20 5b ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba5b
c000dd2d:	c7 43 28 0e ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad0e
c000dd34:	b8 0a 00 00 00       	mov    eax,0xa
c000dd39:	81 c4 58 08 00 00    	add    esp,0x858
c000dd3f:	5b                   	pop    ebx
c000dd40:	c3                   	ret    

c000dd41 <zoh_vari_process>:
c000dd41:	55                   	push   ebp
c000dd42:	31 d2                	xor    edx,edx
c000dd44:	57                   	push   edi
c000dd45:	56                   	push   esi
c000dd46:	53                   	push   ebx
c000dd47:	83 ec 3c             	sub    esp,0x3c
c000dd4a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd4e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd52:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd56:	0f 8e 80 06 00 00    	jle    c000e3dc <zoh_vari_process+0x69b>
c000dd5c:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd5f:	ba 05 00 00 00       	mov    edx,0x5
c000dd64:	85 db                	test   ebx,ebx
c000dd66:	0f 84 70 06 00 00    	je     c000e3dc <zoh_vari_process+0x69b>
c000dd6c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd6f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd73:	74 19                	je     c000dd8e <zoh_vari_process+0x4d>
c000dd75:	31 d2                	xor    edx,edx
c000dd77:	39 c2                	cmp    edx,eax
c000dd79:	7d 0c                	jge    c000dd87 <zoh_vari_process+0x46>
c000dd7b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd7d:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd80:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd84:	42                   	inc    edx
c000dd85:	eb f0                	jmp    c000dd77 <zoh_vari_process+0x36>
c000dd87:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd8e:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd91:	0f af d0             	imul   edx,eax
c000dd94:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd97:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd9b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dda2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dda5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddac:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddaf:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb9:	68 00 00 70 3f       	push   0x3f700000
c000ddbe:	6a 00                	push   0x0
c000ddc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc8:	e8 8a b1 01 00       	call   c0028f57 <__ltdf2>
c000ddcd:	83 c4 10             	add    esp,0x10
c000ddd0:	ba 16 00 00 00       	mov    edx,0x16
c000ddd5:	85 c0                	test   eax,eax
c000ddd7:	0f 88 ff 05 00 00    	js     c000e3dc <zoh_vari_process+0x69b>
c000dddd:	68 00 00 70 40       	push   0x40700000
c000dde2:	6a 00                	push   0x0
c000dde4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddec:	e8 48 b1 01 00       	call   c0028f39 <__gtdf2>
c000ddf1:	83 c4 10             	add    esp,0x10
c000ddf4:	ba 16 00 00 00       	mov    edx,0x16
c000ddf9:	85 c0                	test   eax,eax
c000ddfb:	0f 8f db 05 00 00    	jg     c000e3dc <zoh_vari_process+0x69b>
c000de01:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de04:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de0f:	68 00 00 f0 3f       	push   0x3ff00000
c000de14:	6a 00                	push   0x0
c000de16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de1e:	e8 34 b1 01 00       	call   c0028f57 <__ltdf2>
c000de23:	83 c4 10             	add    esp,0x10
c000de26:	85 c0                	test   eax,eax
c000de28:	0f 89 da 01 00 00    	jns    c000e008 <zoh_vari_process+0x2c7>
c000de2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de31:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de34:	0f 8d ce 01 00 00    	jge    c000e008 <zoh_vari_process+0x2c7>
c000de3a:	83 ec 0c             	sub    esp,0xc
c000de3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de40:	e8 a6 ae 01 00       	call   c0028ceb <__floatsidf>
c000de45:	83 c4 10             	add    esp,0x10
c000de48:	89 04 24             	mov    DWORD PTR [esp],eax
c000de4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de5f:	e8 24 a8 01 00       	call   c0028688 <__muldf3>
c000de64:	59                   	pop    ecx
c000de65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de69:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de6d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de70:	e8 76 ae 01 00       	call   c0028ceb <__floatsidf>
c000de75:	83 c4 10             	add    esp,0x10
c000de78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de7c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de80:	52                   	push   edx
c000de81:	50                   	push   eax
c000de82:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de86:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8a:	e8 7c a1 01 00       	call   c002800b <__adddf3>
c000de8f:	59                   	pop    ecx
c000de90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de94:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de98:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de9b:	e8 4b ae 01 00       	call   c0028ceb <__floatsidf>
c000dea0:	83 c4 10             	add    esp,0x10
c000dea3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000deab:	52                   	push   edx
c000deac:	50                   	push   eax
c000dead:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deb1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deb5:	e8 9b b0 01 00       	call   c0028f55 <__gedf2>
c000deba:	83 c4 10             	add    esp,0x10
c000debd:	85 c0                	test   eax,eax
c000debf:	0f 89 43 01 00 00    	jns    c000e008 <zoh_vari_process+0x2c7>
c000dec5:	85 ed                	test   ebp,ebp
c000dec7:	0f 8e ec 00 00 00    	jle    c000dfb9 <zoh_vari_process+0x278>
c000decd:	83 ec 10             	sub    esp,0x10
c000ded0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ded3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ded6:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000ded9:	ff 37                	push   DWORD PTR [edi]
c000dedb:	e8 7c a7 01 00       	call   c002865c <__subdf3>
c000dee0:	83 c4 18             	add    esp,0x18
c000dee3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dee7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000deeb:	52                   	push   edx
c000deec:	50                   	push   eax
c000deed:	e8 fe b1 01 00       	call   c00290f0 <fabs>
c000def2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000def6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000defa:	83 c4 10             	add    esp,0x10
c000defd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df02:	68 23 42 92 0c       	push   0xc924223
c000df07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df0f:	e8 25 b0 01 00       	call   c0028f39 <__gtdf2>
c000df14:	83 c4 10             	add    esp,0x10
c000df17:	85 c0                	test   eax,eax
c000df19:	0f 8e 9a 00 00 00    	jle    c000dfb9 <zoh_vari_process+0x278>
c000df1f:	8b 07                	mov    eax,DWORD PTR [edi]
c000df21:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df24:	89 04 24             	mov    DWORD PTR [esp],eax
c000df27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df2b:	52                   	push   edx
c000df2c:	50                   	push   eax
c000df2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df33:	e8 24 a7 01 00       	call   c002865c <__subdf3>
c000df38:	59                   	pop    ecx
c000df39:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df3d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df41:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df44:	e8 a2 ad 01 00       	call   c0028ceb <__floatsidf>
c000df49:	83 c4 10             	add    esp,0x10
c000df4c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df50:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df54:	52                   	push   edx
c000df55:	50                   	push   eax
c000df56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df5e:	e8 25 a7 01 00       	call   c0028688 <__muldf3>
c000df63:	5d                   	pop    ebp
c000df64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df68:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df6c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df6f:	e8 77 ad 01 00       	call   c0028ceb <__floatsidf>
c000df74:	83 c4 10             	add    esp,0x10
c000df77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df7f:	52                   	push   edx
c000df80:	50                   	push   eax
c000df81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df89:	e8 de a9 01 00       	call   c002896c <__divdf3>
c000df8e:	83 c4 10             	add    esp,0x10
c000df91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df99:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df9d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa9:	e8 5d a0 01 00       	call   c002800b <__adddf3>
c000dfae:	83 c4 10             	add    esp,0x10
c000dfb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb9:	31 c0                	xor    eax,eax
c000dfbb:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfbe:	7e 13                	jle    c000dfd3 <zoh_vari_process+0x292>
c000dfc0:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfc4:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfc7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfca:	40                   	inc    eax
c000dfcb:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfce:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfd1:	eb e8                	jmp    c000dfbb <zoh_vari_process+0x27a>
c000dfd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfdb:	68 00 00 f0 3f       	push   0x3ff00000
c000dfe0:	6a 00                	push   0x0
c000dfe2:	e8 85 a9 01 00       	call   c002896c <__divdf3>
c000dfe7:	83 c4 10             	add    esp,0x10
c000dfea:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dff1:	52                   	push   edx
c000dff2:	50                   	push   eax
c000dff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dffb:	e8 0b a0 01 00       	call   c002800b <__adddf3>
c000e000:	83 c4 10             	add    esp,0x10
c000e003:	e9 ff fd ff ff       	jmp    c000de07 <zoh_vari_process+0xc6>
c000e008:	55                   	push   ebp
c000e009:	55                   	push   ebp
c000e00a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e012:	e8 f9 b0 01 00       	call   c0029110 <lrint>
c000e017:	83 ec 0c             	sub    esp,0xc
c000e01a:	50                   	push   eax
c000e01b:	e8 cb ac 01 00       	call   c0028ceb <__floatsidf>
c000e020:	83 c4 10             	add    esp,0x10
c000e023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e02b:	52                   	push   edx
c000e02c:	50                   	push   eax
c000e02d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e035:	e8 22 a6 01 00       	call   c002865c <__subdf3>
c000e03a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e03e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e042:	83 c4 20             	add    esp,0x20
c000e045:	6a 00                	push   0x0
c000e047:	6a 00                	push   0x0
c000e049:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e04d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e051:	e8 01 af 01 00       	call   c0028f57 <__ltdf2>
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	85 c0                	test   eax,eax
c000e05b:	79 1e                	jns    c000e07b <zoh_vari_process+0x33a>
c000e05d:	68 00 00 f0 3f       	push   0x3ff00000
c000e062:	6a 00                	push   0x0
c000e064:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e068:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06c:	e8 9a 9f 01 00       	call   c002800b <__adddf3>
c000e071:	83 c4 10             	add    esp,0x10
c000e074:	89 04 24             	mov    DWORD PTR [esp],eax
c000e077:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e07b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e07e:	83 ec 10             	sub    esp,0x10
c000e081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e089:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e08d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e091:	e8 c6 a5 01 00       	call   c002865c <__subdf3>
c000e096:	83 c4 18             	add    esp,0x18
c000e099:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e09d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0a1:	52                   	push   edx
c000e0a2:	50                   	push   eax
c000e0a3:	e8 68 b0 01 00       	call   c0029110 <lrint>
c000e0a8:	83 c4 10             	add    esp,0x10
c000e0ab:	0f af e8             	imul   ebp,eax
c000e0ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0b1:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0b4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0b8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0bb:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0c2:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0c5:	0f 8d 7a 02 00 00    	jge    c000e345 <zoh_vari_process+0x604>
c000e0cb:	83 ec 0c             	sub    esp,0xc
c000e0ce:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0d1:	e8 15 ac 01 00       	call   c0028ceb <__floatsidf>
c000e0d6:	83 c4 10             	add    esp,0x10
c000e0d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0e1:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0e5:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f1:	e8 92 a5 01 00       	call   c0028688 <__muldf3>
c000e0f6:	59                   	pop    ecx
c000e0f7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0fb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e103:	e8 e3 ab 01 00       	call   c0028ceb <__floatsidf>
c000e108:	83 c4 10             	add    esp,0x10
c000e10b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e10f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e113:	52                   	push   edx
c000e114:	50                   	push   eax
c000e115:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e119:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11d:	e8 e9 9e 01 00       	call   c002800b <__adddf3>
c000e122:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e129:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e12d:	e8 b9 ab 01 00       	call   c0028ceb <__floatsidf>
c000e132:	83 c4 10             	add    esp,0x10
c000e135:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e139:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e13d:	52                   	push   edx
c000e13e:	50                   	push   eax
c000e13f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e143:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e147:	e8 0d ae 01 00       	call   c0028f59 <__ledf2>
c000e14c:	83 c4 10             	add    esp,0x10
c000e14f:	85 c0                	test   eax,eax
c000e151:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e155:	0f 8f ea 01 00 00    	jg     c000e345 <zoh_vari_process+0x604>
c000e15b:	85 c9                	test   ecx,ecx
c000e15d:	0f 8e ed 00 00 00    	jle    c000e250 <zoh_vari_process+0x50f>
c000e163:	83 ec 10             	sub    esp,0x10
c000e166:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e169:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e16c:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e16f:	ff 37                	push   DWORD PTR [edi]
c000e171:	e8 e6 a4 01 00       	call   c002865c <__subdf3>
c000e176:	83 c4 18             	add    esp,0x18
c000e179:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e17d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e181:	52                   	push   edx
c000e182:	50                   	push   eax
c000e183:	e8 68 af 01 00       	call   c00290f0 <fabs>
c000e188:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e18c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e190:	83 c4 10             	add    esp,0x10
c000e193:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e198:	68 23 42 92 0c       	push   0xc924223
c000e19d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1a5:	e8 8f ad 01 00       	call   c0028f39 <__gtdf2>
c000e1aa:	83 c4 10             	add    esp,0x10
c000e1ad:	85 c0                	test   eax,eax
c000e1af:	0f 8e 9b 00 00 00    	jle    c000e250 <zoh_vari_process+0x50f>
c000e1b5:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1b7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1c2:	52                   	push   edx
c000e1c3:	50                   	push   eax
c000e1c4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1c7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1ca:	e8 8d a4 01 00       	call   c002865c <__subdf3>
c000e1cf:	5d                   	pop    ebp
c000e1d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1d4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1d8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1db:	e8 0b ab 01 00       	call   c0028ceb <__floatsidf>
c000e1e0:	83 c4 10             	add    esp,0x10
c000e1e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1e7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1eb:	52                   	push   edx
c000e1ec:	50                   	push   eax
c000e1ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f5:	e8 8e a4 01 00       	call   c0028688 <__muldf3>
c000e1fa:	59                   	pop    ecx
c000e1fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1ff:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e203:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e206:	e8 e0 aa 01 00       	call   c0028ceb <__floatsidf>
c000e20b:	83 c4 10             	add    esp,0x10
c000e20e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e212:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e216:	52                   	push   edx
c000e217:	50                   	push   eax
c000e218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e220:	e8 47 a7 01 00       	call   c002896c <__divdf3>
c000e225:	83 c4 10             	add    esp,0x10
c000e228:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e22c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e230:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e234:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e240:	e8 c6 9d 01 00       	call   c002800b <__adddf3>
c000e245:	83 c4 10             	add    esp,0x10
c000e248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e24c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e250:	31 d2                	xor    edx,edx
c000e252:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e255:	39 d0                	cmp    eax,edx
c000e257:	7e 1d                	jle    c000e276 <zoh_vari_process+0x535>
c000e259:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e25c:	29 c1                	sub    ecx,eax
c000e25e:	89 c8                	mov    eax,ecx
c000e260:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e262:	01 d0                	add    eax,edx
c000e264:	42                   	inc    edx
c000e265:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e268:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e26b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e26e:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e271:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e274:	eb dc                	jmp    c000e252 <zoh_vari_process+0x511>
c000e276:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e27a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e27e:	68 00 00 f0 3f       	push   0x3ff00000
c000e283:	6a 00                	push   0x0
c000e285:	e8 e2 a6 01 00       	call   c002896c <__divdf3>
c000e28a:	83 c4 10             	add    esp,0x10
c000e28d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e291:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e295:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e299:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e29d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2a5:	e8 61 9d 01 00       	call   c002800b <__adddf3>
c000e2aa:	5d                   	pop    ebp
c000e2ab:	59                   	pop    ecx
c000e2ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2bc:	e8 4f ae 01 00       	call   c0029110 <lrint>
c000e2c1:	83 ec 0c             	sub    esp,0xc
c000e2c4:	50                   	push   eax
c000e2c5:	e8 21 aa 01 00       	call   c0028ceb <__floatsidf>
c000e2ca:	83 c4 10             	add    esp,0x10
c000e2cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2d5:	52                   	push   edx
c000e2d6:	50                   	push   eax
c000e2d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2df:	e8 78 a3 01 00       	call   c002865c <__subdf3>
c000e2e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2e8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2ec:	83 c4 20             	add    esp,0x20
c000e2ef:	6a 00                	push   0x0
c000e2f1:	6a 00                	push   0x0
c000e2f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2fb:	e8 57 ac 01 00       	call   c0028f57 <__ltdf2>
c000e300:	83 c4 10             	add    esp,0x10
c000e303:	85 c0                	test   eax,eax
c000e305:	79 1e                	jns    c000e325 <zoh_vari_process+0x5e4>
c000e307:	68 00 00 f0 3f       	push   0x3ff00000
c000e30c:	6a 00                	push   0x0
c000e30e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e312:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e316:	e8 f0 9c 01 00       	call   c002800b <__adddf3>
c000e31b:	83 c4 10             	add    esp,0x10
c000e31e:	89 04 24             	mov    DWORD PTR [esp],eax
c000e321:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e325:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e328:	83 ec 10             	sub    esp,0x10
c000e32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e333:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e337:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e33b:	e8 1c a3 01 00       	call   c002865c <__subdf3>
c000e340:	e9 51 fd ff ff       	jmp    c000e096 <zoh_vari_process+0x355>
c000e345:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e349:	7d 3a                	jge    c000e385 <zoh_vari_process+0x644>
c000e34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34f:	83 ec 0c             	sub    esp,0xc
c000e352:	29 e8                	sub    eax,ebp
c000e354:	99                   	cdq    
c000e355:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e358:	50                   	push   eax
c000e359:	e8 8d a9 01 00       	call   c0028ceb <__floatsidf>
c000e35e:	83 c4 10             	add    esp,0x10
c000e361:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e365:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e369:	52                   	push   edx
c000e36a:	50                   	push   eax
c000e36b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e36f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e373:	e8 93 9c 01 00       	call   c002800b <__adddf3>
c000e378:	83 c4 10             	add    esp,0x10
c000e37b:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e37e:	89 04 24             	mov    DWORD PTR [esp],eax
c000e381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e385:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e388:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e38c:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e38f:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e392:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e395:	85 c0                	test   eax,eax
c000e397:	7f 25                	jg     c000e3be <zoh_vari_process+0x67d>
c000e399:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e39d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3a1:	89 07                	mov    DWORD PTR [edi],eax
c000e3a3:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3a6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3a9:	99                   	cdq    
c000e3aa:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ad:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3b3:	99                   	cdq    
c000e3b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3b7:	31 d2                	xor    edx,edx
c000e3b9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3bc:	eb 1e                	jmp    c000e3dc <zoh_vari_process+0x69b>
c000e3be:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3c1:	31 d2                	xor    edx,edx
c000e3c3:	29 c8                	sub    eax,ecx
c000e3c5:	c1 e0 02             	shl    eax,0x2
c000e3c8:	39 d1                	cmp    ecx,edx
c000e3ca:	7e cd                	jle    c000e399 <zoh_vari_process+0x658>
c000e3cc:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3ce:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3d2:	83 c0 04             	add    eax,0x4
c000e3d5:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3d9:	42                   	inc    edx
c000e3da:	eb ec                	jmp    c000e3c8 <zoh_vari_process+0x687>
c000e3dc:	83 c4 3c             	add    esp,0x3c
c000e3df:	89 d0                	mov    eax,edx
c000e3e1:	5b                   	pop    ebx
c000e3e2:	5e                   	pop    esi
c000e3e3:	5f                   	pop    edi
c000e3e4:	5d                   	pop    ebp
c000e3e5:	c3                   	ret    

c000e3e6 <zoh_reset>:
c000e3e6:	83 ec 0c             	sub    esp,0xc
c000e3e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3ed:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3f0:	85 c0                	test   eax,eax
c000e3f2:	74 20                	je     c000e414 <zoh_reset+0x2e>
c000e3f4:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3f7:	83 c0 1c             	add    eax,0x1c
c000e3fa:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3fd:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e404:	c1 e2 02             	shl    edx,0x2
c000e407:	51                   	push   ecx
c000e408:	52                   	push   edx
c000e409:	6a 00                	push   0x0
c000e40b:	50                   	push   eax
c000e40c:	e8 5b 23 ff ff       	call   c000076c <memset>
c000e411:	83 c4 10             	add    esp,0x10
c000e414:	83 c4 0c             	add    esp,0xc
c000e417:	c3                   	ret    

c000e418 <zoh_get_name>:
c000e418:	31 c0                	xor    eax,eax
c000e41a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e41f:	75 05                	jne    c000e426 <zoh_get_name+0xe>
c000e421:	b8 fe aa 02 c0       	mov    eax,0xc002aafe
c000e426:	c3                   	ret    

c000e427 <zoh_get_description>:
c000e427:	31 c0                	xor    eax,eax
c000e429:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e42e:	75 05                	jne    c000e435 <zoh_get_description+0xe>
c000e430:	b8 0f ab 02 c0       	mov    eax,0xc002ab0f
c000e435:	c3                   	ret    

c000e436 <zoh_set_converter>:
c000e436:	53                   	push   ebx
c000e437:	b8 0a 00 00 00       	mov    eax,0xa
c000e43c:	83 ec 08             	sub    esp,0x8
c000e43f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e443:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e448:	75 6e                	jne    c000e4b8 <zoh_set_converter+0x82>
c000e44a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e44d:	85 c0                	test   eax,eax
c000e44f:	74 13                	je     c000e464 <zoh_set_converter+0x2e>
c000e451:	83 ec 0c             	sub    esp,0xc
c000e454:	50                   	push   eax
c000e455:	e8 76 14 00 00       	call   c000f8d0 <free>
c000e45a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e461:	83 c4 10             	add    esp,0x10
c000e464:	50                   	push   eax
c000e465:	50                   	push   eax
c000e466:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e469:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e470:	50                   	push   eax
c000e471:	6a 01                	push   0x1
c000e473:	e8 78 14 00 00       	call   c000f8f0 <calloc>
c000e478:	83 c4 10             	add    esp,0x10
c000e47b:	89 c2                	mov    edx,eax
c000e47d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e480:	85 d2                	test   edx,edx
c000e482:	b8 01 00 00 00       	mov    eax,0x1
c000e487:	74 2f                	je     c000e4b8 <zoh_set_converter+0x82>
c000e489:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e48c:	83 ec 0c             	sub    esp,0xc
c000e48f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e492:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e498:	c7 43 24 41 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd41
c000e49f:	c7 43 20 41 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd41
c000e4a6:	c7 43 28 e6 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3e6
c000e4ad:	53                   	push   ebx
c000e4ae:	e8 33 ff ff ff       	call   c000e3e6 <zoh_reset>
c000e4b3:	83 c4 10             	add    esp,0x10
c000e4b6:	31 c0                	xor    eax,eax
c000e4b8:	83 c4 08             	add    esp,0x8
c000e4bb:	5b                   	pop    ebx
c000e4bc:	c3                   	ret    

c000e4bd <CPU::current()>:
c000e4bd:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c000e4c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4c8:	c3                   	ret    

c000e4c9 <operator new(unsigned long)>:
c000e4c9:	e9 f2 13 00 00       	jmp    c000f8c0 <malloc>

c000e4ce <operator delete(void*)>:
c000e4ce:	e9 0d 14 00 00       	jmp    c000f8e0 <rfree>

c000e4d3 <disableIRQs()>:
c000e4d3:	fa                   	cli    
c000e4d4:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c000e4da:	c3                   	ret    

c000e4db <enableIRQs()>:
c000e4db:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c000e4e0:	48                   	dec    eax
c000e4e1:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c000e4e6:	75 01                	jne    c000e4e9 <enableIRQs()+0xe>
c000e4e8:	fb                   	sti    
c000e4e9:	c3                   	ret    

c000e4ea <lockScheduler()>:
c000e4ea:	fa                   	cli    
c000e4eb:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c000e4f1:	c3                   	ret    

c000e4f2 <unlockScheduler()>:
c000e4f2:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c000e4f7:	48                   	dec    eax
c000e4f8:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c000e4fd:	75 01                	jne    c000e500 <unlockScheduler()+0xe>
c000e4ff:	fb                   	sti    
c000e500:	c3                   	ret    

c000e501 <lockStuff()>:
c000e501:	fa                   	cli    
c000e502:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c000e508:	ff 05 44 26 03 c0    	inc    DWORD PTR ds:0xc0032644
c000e50e:	c3                   	ret    

c000e50f <unlockStuff()>:
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c000e517:	48                   	dec    eax
c000e518:	a3 44 26 03 c0       	mov    ds:0xc0032644,eax
c000e51d:	75 18                	jne    c000e537 <unlockStuff()+0x28>
c000e51f:	83 3d 40 26 03 c0 00 	cmp    DWORD PTR ds:0xc0032640,0x0
c000e526:	74 0f                	je     c000e537 <unlockStuff()+0x28>
c000e528:	c7 05 40 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x0
c000e532:	e8 ad 01 01 00       	call   c001e6e4 <schedule()>
c000e537:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c000e53c:	48                   	dec    eax
c000e53d:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c000e542:	75 01                	jne    c000e545 <unlockStuff()+0x36>
c000e544:	fb                   	sti    
c000e545:	83 c4 0c             	add    esp,0xc
c000e548:	c3                   	ret    

c000e549 <Virt::getAKernelVAS()>:
c000e549:	a1 90 f2 02 c0       	mov    eax,ds:0xc002f290
c000e54e:	c3                   	ret    

c000e54f <__not_memcpy>:
c000e54f:	56                   	push   esi
c000e550:	53                   	push   ebx
c000e551:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e555:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e559:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e55d:	89 f1                	mov    ecx,esi
c000e55f:	01 d3                	add    ebx,edx
c000e561:	39 da                	cmp    edx,ebx
c000e563:	74 09                	je     c000e56e <__not_memcpy+0x1f>
c000e565:	8a 02                	mov    al,BYTE PTR [edx]
c000e567:	41                   	inc    ecx
c000e568:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000e56b:	42                   	inc    edx
c000e56c:	eb f3                	jmp    c000e561 <__not_memcpy+0x12>
c000e56e:	89 f0                	mov    eax,esi
c000e570:	5b                   	pop    ebx
c000e571:	5e                   	pop    esi
c000e572:	c3                   	ret    

c000e573 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e573:	83 ec 0c             	sub    esp,0xc
c000e576:	83 ec 08             	sub    esp,0x8
c000e579:	68 46 ab 02 c0       	push   0xc002ab46
c000e57e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e582:	e8 2d 23 ff ff       	call   c00008b4 <strcmp>
c000e587:	83 c4 10             	add    esp,0x10
c000e58a:	85 c0                	test   eax,eax
c000e58c:	0f 94 c0             	sete   al
c000e58f:	84 c0                	test   al,al
c000e591:	74 0a                	je     c000e59d <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e593:	b8 08 f1 02 c0       	mov    eax,0xc002f108
c000e598:	e9 e3 00 00 00       	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e59d:	83 ec 08             	sub    esp,0x8
c000e5a0:	68 4f ab 02 c0       	push   0xc002ab4f
c000e5a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5a9:	e8 06 23 ff ff       	call   c00008b4 <strcmp>
c000e5ae:	83 c4 10             	add    esp,0x10
c000e5b1:	85 c0                	test   eax,eax
c000e5b3:	0f 94 c0             	sete   al
c000e5b6:	84 c0                	test   al,al
c000e5b8:	74 0a                	je     c000e5c4 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e5ba:	b8 84 74 02 c0       	mov    eax,0xc0027484
c000e5bf:	e9 bc 00 00 00       	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5c4:	83 ec 08             	sub    esp,0x8
c000e5c7:	68 59 ab 02 c0       	push   0xc002ab59
c000e5cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5d0:	e8 df 22 ff ff       	call   c00008b4 <strcmp>
c000e5d5:	83 c4 10             	add    esp,0x10
c000e5d8:	85 c0                	test   eax,eax
c000e5da:	0f 94 c0             	sete   al
c000e5dd:	84 c0                	test   al,al
c000e5df:	74 0a                	je     c000e5eb <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5e1:	b8 b8 71 02 c0       	mov    eax,0xc00271b8
c000e5e6:	e9 95 00 00 00       	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5eb:	83 ec 08             	sub    esp,0x8
c000e5ee:	68 62 ab 02 c0       	push   0xc002ab62
c000e5f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5f7:	e8 b8 22 ff ff       	call   c00008b4 <strcmp>
c000e5fc:	83 c4 10             	add    esp,0x10
c000e5ff:	85 c0                	test   eax,eax
c000e601:	0f 94 c0             	sete   al
c000e604:	84 c0                	test   al,al
c000e606:	74 07                	je     c000e60f <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e608:	b8 84 75 02 c0       	mov    eax,0xc0027584
c000e60d:	eb 71                	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e60f:	83 ec 08             	sub    esp,0x8
c000e612:	68 6c ab 02 c0       	push   0xc002ab6c
c000e617:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e61b:	e8 94 22 ff ff       	call   c00008b4 <strcmp>
c000e620:	83 c4 10             	add    esp,0x10
c000e623:	85 c0                	test   eax,eax
c000e625:	0f 94 c0             	sete   al
c000e628:	84 c0                	test   al,al
c000e62a:	74 07                	je     c000e633 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e62c:	b8 04 73 02 c0       	mov    eax,0xc0027304
c000e631:	eb 4d                	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e633:	83 ec 08             	sub    esp,0x8
c000e636:	68 75 ab 02 c0       	push   0xc002ab75
c000e63b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e63f:	e8 70 22 ff ff       	call   c00008b4 <strcmp>
c000e644:	83 c4 10             	add    esp,0x10
c000e647:	85 c0                	test   eax,eax
c000e649:	0f 94 c0             	sete   al
c000e64c:	84 c0                	test   al,al
c000e64e:	74 07                	je     c000e657 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e650:	b8 0c f1 02 c0       	mov    eax,0xc002f10c
c000e655:	eb 29                	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e657:	83 ec 08             	sub    esp,0x8
c000e65a:	68 82 ab 02 c0       	push   0xc002ab82
c000e65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e663:	e8 4c 22 ff ff       	call   c00008b4 <strcmp>
c000e668:	83 c4 10             	add    esp,0x10
c000e66b:	85 c0                	test   eax,eax
c000e66d:	0f 94 c0             	sete   al
c000e670:	84 c0                	test   al,al
c000e672:	74 07                	je     c000e67b <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e674:	b8 0d f1 02 c0       	mov    eax,0xc002f10d
c000e679:	eb 05                	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e67b:	b8 00 00 00 00       	mov    eax,0x0
c000e680:	83 c4 0c             	add    esp,0xc
c000e683:	c3                   	ret    

c000e684 <Computer::close(int, int, void*)>:
c000e684:	57                   	push   edi
c000e685:	56                   	push   esi
c000e686:	53                   	push   ebx
c000e687:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e68b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e68f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e693:	83 ec 0c             	sub    esp,0xc
c000e696:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e69c:	e8 8f 5d 00 00       	call   c0014430 <Device::closeAll()>
c000e6a1:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e6a7:	83 c4 10             	add    esp,0x10
c000e6aa:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6ac:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e6b0:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e6b8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e6bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6c0:	5b                   	pop    ebx
c000e6c1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e6c4:	5e                   	pop    esi
c000e6c5:	5f                   	pop    edi
c000e6c6:	ff e0                	jmp    eax

c000e6c8 <Krnl::firstTask()>:
c000e6c8:	53                   	push   ebx
c000e6c9:	83 ec 14             	sub    esp,0x14
c000e6cc:	fb                   	sti    
c000e6cd:	68 3f 07 00 00       	push   0x73f
c000e6d2:	e8 e9 11 00 00       	call   c000f8c0 <malloc>
c000e6d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6de:	89 c3                	mov    ebx,eax
c000e6e0:	ff 35 70 26 03 c0    	push   DWORD PTR ds:0xc0032670
c000e6e6:	68 8f ab 02 c0       	push   0xc002ab8f
c000e6eb:	6a 01                	push   0x1
c000e6ed:	50                   	push   eax
c000e6ee:	e8 b5 fb 00 00       	call   c001e2a8 <Process::Process(bool, char const*, Process*, char**)>
c000e6f3:	83 c4 20             	add    esp,0x20
c000e6f6:	68 ff 00 00 00       	push   0xff
c000e6fb:	6a 00                	push   0x0
c000e6fd:	68 53 f2 00 c0       	push   0xc000f253
c000e702:	53                   	push   ebx
c000e703:	e8 98 fd 00 00       	call   c001e4a0 <Process::createThread(void (*)(void*), void*, int)>
c000e708:	6a 7a                	push   0x7a
c000e70a:	6a 00                	push   0x0
c000e70c:	68 1e ef 01 c0       	push   0xc001ef1e
c000e711:	ff 35 70 26 03 c0    	push   DWORD PTR ds:0xc0032670
c000e717:	e8 84 fd 00 00       	call   c001e4a0 <Process::createThread(void (*)(void*), void*, int)>
c000e71c:	83 c4 20             	add    esp,0x20
c000e71f:	a3 28 26 03 c0       	mov    ds:0xc0032628,eax
c000e724:	c6 05 0d f1 02 c0 01 	mov    BYTE PTR ds:0xc002f10d,0x1
c000e72b:	e8 42 0c 01 00       	call   c001f372 <Vm::initialise8086()>
c000e730:	e8 e5 4a 00 00       	call   c001321a <Fs::initVFS()>
c000e735:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c000e73a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e740:	8b 10                	mov    edx,DWORD PTR [eax]
c000e742:	6a 00                	push   0x0
c000e744:	6a 00                	push   0x0
c000e746:	6a 00                	push   0x0
c000e748:	50                   	push   eax
c000e749:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e74c:	e8 e9 e3 00 00       	call   c001cb3a <Sys::loadSyscalls()>
c000e751:	e8 68 c0 00 00       	call   c001a7be <Krnl::loadSystemEnv()>
c000e756:	83 c4 0c             	add    esp,0xc
c000e759:	6a 3a                	push   0x3a
c000e75b:	68 9c ab 02 c0       	push   0xc002ab9c
c000e760:	68 a5 ab 02 c0       	push   0xc002aba5
c000e765:	e8 63 cf 00 00       	call   c001b6cd <Reg::readIntWithDefault(char*, char*, int)>
c000e76a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e76d:	e8 98 55 00 00       	call   c0013d0a <User::loadClockSettings(int)>
c000e772:	58                   	pop    eax
c000e773:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c000e778:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e77e:	e8 81 5c 00 00       	call   c0014404 <Device::loadDriversForAll()>
c000e783:	e8 4a bb 00 00       	call   c001a2d2 <Krnl::startCPUs()>
c000e788:	5a                   	pop    edx
c000e789:	8b 1d 08 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f108
c000e78f:	59                   	pop    ecx
c000e790:	6a 01                	push   0x1
c000e792:	68 ad ab 02 c0       	push   0xc002abad
c000e797:	e8 6a f5 00 00       	call   c001dd06 <Thr::loadDLL(char const*, bool)>
c000e79c:	5a                   	pop    edx
c000e79d:	59                   	pop    ecx
c000e79e:	53                   	push   ebx
c000e79f:	50                   	push   eax
c000e7a0:	e8 8c f7 00 00       	call   c001df31 <Thr::executeDLL(unsigned long, void*)>
c000e7a5:	83 c4 10             	add    esp,0x10
c000e7a8:	83 ec 0c             	sub    esp,0xc
c000e7ab:	6a 02                	push   0x2
c000e7ad:	e8 31 01 01 00       	call   c001e8e3 <blockTask(TaskState)>
c000e7b2:	83 c4 10             	add    esp,0x10
c000e7b5:	eb f1                	jmp    c000e7a8 <Krnl::firstTask()+0xe0>
c000e7b7:	90                   	nop

c000e7b8 <Computer::Computer()>:
c000e7b8:	83 ec 0c             	sub    esp,0xc
c000e7bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bf:	83 ec 08             	sub    esp,0x8
c000e7c2:	68 c9 ab 02 c0       	push   0xc002abc9
c000e7c7:	50                   	push   eax
c000e7c8:	e8 dd 5c 00 00       	call   c00144aa <Device::Device(char const*)>
c000e7cd:	83 c4 10             	add    esp,0x10
c000e7d0:	ba 68 ad 02 c0       	mov    edx,0xc002ad68
c000e7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d9:	89 10                	mov    DWORD PTR [eax],edx
c000e7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7df:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ed:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e801:	83 ca 04             	or     edx,0x4
c000e804:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e814:	0f b6 d0             	movzx  edx,al
c000e817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e826:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e82c:	0f b6 d0             	movzx  edx,al
c000e82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e833:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e842:	8d 50 01             	lea    edx,[eax+0x1]
c000e845:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e849:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e85a:	83 e1 3f             	and    ecx,0x3f
c000e85d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e865:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e86b:	0f b6 d0             	movzx  edx,al
c000e86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e872:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e883:	0f b6 d0             	movzx  edx,al
c000e886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88a:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e893:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e899:	8d 50 01             	lea    edx,[eax+0x1]
c000e89c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8a0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8b1:	83 e1 3f             	and    ecx,0x3f
c000e8b4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8c2:	0f b6 d0             	movzx  edx,al
c000e8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8da:	0f b6 d0             	movzx  edx,al
c000e8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f0:	8d 50 01             	lea    edx,[eax+0x1]
c000e8f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8f7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8fd:	0f b6 d0             	movzx  edx,al
c000e900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e904:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e908:	83 e1 3f             	and    ecx,0x3f
c000e90b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e90f:	90                   	nop
c000e910:	83 c4 0c             	add    esp,0xc
c000e913:	c3                   	ret    

c000e914 <Computer::setBootMessage(char const*)>:
c000e914:	c3                   	ret    
c000e915:	90                   	nop

c000e916 <Computer::detectFeatures()>:
c000e916:	55                   	push   ebp
c000e917:	57                   	push   edi
c000e918:	56                   	push   esi
c000e919:	53                   	push   ebx
c000e91a:	83 ec 1c             	sub    esp,0x1c
c000e91d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e921:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e92b:	e8 b4 19 ff ff       	call   c00002e4 <detectCPUID>
c000e930:	85 c0                	test   eax,eax
c000e932:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e938:	0f 95 c2             	setne  dl
c000e93b:	83 e0 fd             	and    eax,0xfffffffd
c000e93e:	d1 e2                	shl    edx,1
c000e940:	09 d0                	or     eax,edx
c000e942:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e948:	a8 02                	test   al,0x2
c000e94a:	75 46                	jne    c000e992 <Computer::detectFeatures()+0x7c>
c000e94c:	f6 05 21 f1 02 c0 04 	test   BYTE PTR ds:0xc002f121,0x4
c000e953:	74 07                	je     c000e95c <Computer::detectFeatures()+0x46>
c000e955:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e95c:	e8 e5 87 01 00       	call   c0027146 <x87Detect>
c000e961:	83 e0 01             	and    eax,0x1
c000e964:	c1 e0 04             	shl    eax,0x4
c000e967:	88 c2                	mov    dl,al
c000e969:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e96f:	83 e0 ef             	and    eax,0xffffffef
c000e972:	09 d0                	or     eax,edx
c000e974:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e97a:	a8 10                	test   al,0x10
c000e97c:	0f 85 2a 01 00 00    	jne    c000eaac <Computer::detectFeatures()+0x196>
c000e982:	84 c0                	test   al,al
c000e984:	0f 88 45 01 00 00    	js     c000eacf <Computer::detectFeatures()+0x1b9>
c000e98a:	83 c4 1c             	add    esp,0x1c
c000e98d:	5b                   	pop    ebx
c000e98e:	5e                   	pop    esi
c000e98f:	5f                   	pop    edi
c000e990:	5d                   	pop    ebp
c000e991:	c3                   	ret    
c000e992:	83 ec 0c             	sub    esp,0xc
c000e995:	6a 20                	push   0x20
c000e997:	e8 5c a6 00 00       	call   c0018ff8 <CPU::cpuidCheckEDX(unsigned int)>
c000e99c:	83 e0 01             	and    eax,0x1
c000e99f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9a6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ac:	83 e0 f7             	and    eax,0xfffffff7
c000e9af:	09 d0                	or     eax,edx
c000e9b1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9be:	e8 35 a6 00 00       	call   c0018ff8 <CPU::cpuidCheckEDX(unsigned int)>
c000e9c3:	83 e0 01             	and    eax,0x1
c000e9c6:	88 c2                	mov    dl,al
c000e9c8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ce:	83 e0 fe             	and    eax,0xfffffffe
c000e9d1:	09 d0                	or     eax,edx
c000e9d3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9d9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9e0:	e8 13 a6 00 00       	call   c0018ff8 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e5:	c1 e0 07             	shl    eax,0x7
c000e9e8:	88 c2                	mov    dl,al
c000e9ea:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9f0:	83 e0 7f             	and    eax,0x7f
c000e9f3:	09 d0                	or     eax,edx
c000e9f5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9fb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea02:	e8 f1 a5 00 00       	call   c0018ff8 <CPU::cpuidCheckEDX(unsigned int)>
c000ea07:	83 c4 10             	add    esp,0x10
c000ea0a:	83 e0 01             	and    eax,0x1
c000ea0d:	c1 e0 05             	shl    eax,0x5
c000ea10:	88 c2                	mov    dl,al
c000ea12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea18:	83 e0 df             	and    eax,0xffffffdf
c000ea1b:	09 d0                	or     eax,edx
c000ea1d:	f7 05 20 f1 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f120,0x401
c000ea27:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea2d:	0f 84 c2 00 00 00    	je     c000eaf5 <Computer::detectFeatures()+0x1df>
c000ea33:	83 e0 fe             	and    eax,0xfffffffe
c000ea36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea3c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea42:	88 c2                	mov    dl,al
c000ea44:	83 e2 09             	and    edx,0x9
c000ea47:	fe ca                	dec    dl
c000ea49:	75 09                	jne    c000ea54 <Computer::detectFeatures()+0x13e>
c000ea4b:	83 e0 fe             	and    eax,0xfffffffe
c000ea4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea54:	83 ec 0c             	sub    esp,0xc
c000ea57:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea5b:	50                   	push   eax
c000ea5c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea60:	55                   	push   ebp
c000ea61:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea65:	57                   	push   edi
c000ea66:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea6a:	56                   	push   esi
c000ea6b:	68 00 00 00 80       	push   0x80000000
c000ea70:	e8 ff a4 00 00       	call   c0018f74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea75:	83 c4 20             	add    esp,0x20
c000ea78:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea83:	0f 86 c3 fe ff ff    	jbe    c000e94c <Computer::detectFeatures()+0x36>
c000ea89:	83 ec 0c             	sub    esp,0xc
c000ea8c:	50                   	push   eax
c000ea8d:	55                   	push   ebp
c000ea8e:	57                   	push   edi
c000ea8f:	56                   	push   esi
c000ea90:	68 01 00 00 80       	push   0x80000001
c000ea95:	e8 da a4 00 00       	call   c0018f74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea9a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eaa4:	83 c4 20             	add    esp,0x20
c000eaa7:	e9 a0 fe ff ff       	jmp    c000e94c <Computer::detectFeatures()+0x36>
c000eaac:	e8 4f 86 01 00       	call   c0027100 <absolutelyNoChanceInHell>
c000eab1:	88 c2                	mov    dl,al
c000eab3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eab9:	c1 e2 07             	shl    edx,0x7
c000eabc:	83 e0 7f             	and    eax,0x7f
c000eabf:	09 d0                	or     eax,edx
c000eac1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eac7:	84 c0                	test   al,al
c000eac9:	0f 89 bb fe ff ff    	jns    c000e98a <Computer::detectFeatures()+0x74>
c000eacf:	e8 0c 86 01 00       	call   c00270e0 <avxDetect>
c000ead4:	83 e0 01             	and    eax,0x1
c000ead7:	c1 e0 05             	shl    eax,0x5
c000eada:	88 c2                	mov    dl,al
c000eadc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eae2:	83 e0 df             	and    eax,0xffffffdf
c000eae5:	09 d0                	or     eax,edx
c000eae7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eaed:	83 c4 1c             	add    esp,0x1c
c000eaf0:	5b                   	pop    ebx
c000eaf1:	5e                   	pop    esi
c000eaf2:	5f                   	pop    edi
c000eaf3:	5d                   	pop    ebp
c000eaf4:	c3                   	ret    
c000eaf5:	83 ec 0c             	sub    esp,0xc
c000eaf8:	68 00 02 00 00       	push   0x200
c000eafd:	e8 f6 a4 00 00       	call   c0018ff8 <CPU::cpuidCheckEDX(unsigned int)>
c000eb02:	83 c4 10             	add    esp,0x10
c000eb05:	83 e0 01             	and    eax,0x1
c000eb08:	88 c2                	mov    dl,al
c000eb0a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb10:	83 e0 fe             	and    eax,0xfffffffe
c000eb13:	09 d0                	or     eax,edx
c000eb15:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb1b:	e9 1c ff ff ff       	jmp    c000ea3c <Computer::detectFeatures()+0x126>

c000eb20 <Computer::displayFeatures()>:
c000eb20:	53                   	push   ebx
c000eb21:	83 ec 14             	sub    esp,0x14
c000eb24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb28:	68 d9 ab 02 c0       	push   0xc002abd9
c000eb2d:	e8 5d 43 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000eb32:	83 c4 10             	add    esp,0x10
c000eb35:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb3c:	0f 85 73 02 00 00    	jne    c000edb5 <Computer::displayFeatures()+0x295>
c000eb42:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eb47:	83 ec 08             	sub    esp,0x8
c000eb4a:	50                   	push   eax
c000eb4b:	68 ec ab 02 c0       	push   0xc002abec
c000eb50:	e8 3a 43 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000eb55:	83 c4 10             	add    esp,0x10
c000eb58:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb5f:	0f 85 8c 02 00 00    	jne    c000edf1 <Computer::displayFeatures()+0x2d1>
c000eb65:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eb6a:	83 ec 08             	sub    esp,0x8
c000eb6d:	50                   	push   eax
c000eb6e:	68 fd ab 02 c0       	push   0xc002abfd
c000eb73:	e8 17 43 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000eb78:	83 c4 10             	add    esp,0x10
c000eb7b:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb82:	0f 85 5f 02 00 00    	jne    c000ede7 <Computer::displayFeatures()+0x2c7>
c000eb88:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eb8d:	83 ec 08             	sub    esp,0x8
c000eb90:	50                   	push   eax
c000eb91:	68 0e ac 02 c0       	push   0xc002ac0e
c000eb96:	e8 f4 42 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000eb9b:	83 c4 10             	add    esp,0x10
c000eb9e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eba5:	0f 85 32 02 00 00    	jne    c000eddd <Computer::displayFeatures()+0x2bd>
c000ebab:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ebb0:	83 ec 08             	sub    esp,0x8
c000ebb3:	50                   	push   eax
c000ebb4:	68 1f ac 02 c0       	push   0xc002ac1f
c000ebb9:	e8 d1 42 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ebbe:	83 c4 10             	add    esp,0x10
c000ebc1:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ebc8:	0f 85 05 02 00 00    	jne    c000edd3 <Computer::displayFeatures()+0x2b3>
c000ebce:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ebd3:	83 ec 08             	sub    esp,0x8
c000ebd6:	50                   	push   eax
c000ebd7:	68 30 ac 02 c0       	push   0xc002ac30
c000ebdc:	e8 ae 42 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ebe1:	83 c4 10             	add    esp,0x10
c000ebe4:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebeb:	0f 85 d8 01 00 00    	jne    c000edc9 <Computer::displayFeatures()+0x2a9>
c000ebf1:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ebf6:	83 ec 08             	sub    esp,0x8
c000ebf9:	50                   	push   eax
c000ebfa:	68 41 ac 02 c0       	push   0xc002ac41
c000ebff:	e8 8b 42 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ec04:	83 c4 10             	add    esp,0x10
c000ec07:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec0e:	0f 85 ab 01 00 00    	jne    c000edbf <Computer::displayFeatures()+0x29f>
c000ec14:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec19:	83 ec 08             	sub    esp,0x8
c000ec1c:	50                   	push   eax
c000ec1d:	68 52 ac 02 c0       	push   0xc002ac52
c000ec22:	e8 68 42 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ec27:	83 c4 10             	add    esp,0x10
c000ec2a:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec31:	0f 88 1b 02 00 00    	js     c000ee52 <Computer::displayFeatures()+0x332>
c000ec37:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec3c:	83 ec 08             	sub    esp,0x8
c000ec3f:	50                   	push   eax
c000ec40:	68 63 ac 02 c0       	push   0xc002ac63
c000ec45:	e8 45 42 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ec4a:	83 c4 10             	add    esp,0x10
c000ec4d:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec54:	0f 85 a1 01 00 00    	jne    c000edfb <Computer::displayFeatures()+0x2db>
c000ec5a:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec5f:	83 ec 08             	sub    esp,0x8
c000ec62:	50                   	push   eax
c000ec63:	68 74 ac 02 c0       	push   0xc002ac74
c000ec68:	e8 22 42 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ec6d:	83 c4 10             	add    esp,0x10
c000ec70:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec77:	0f 85 cb 01 00 00    	jne    c000ee48 <Computer::displayFeatures()+0x328>
c000ec7d:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec82:	83 ec 08             	sub    esp,0x8
c000ec85:	50                   	push   eax
c000ec86:	68 85 ac 02 c0       	push   0xc002ac85
c000ec8b:	e8 ff 41 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ec90:	83 c4 10             	add    esp,0x10
c000ec93:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec9a:	0f 85 9e 01 00 00    	jne    c000ee3e <Computer::displayFeatures()+0x31e>
c000eca0:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eca5:	83 ec 08             	sub    esp,0x8
c000eca8:	50                   	push   eax
c000eca9:	68 96 ac 02 c0       	push   0xc002ac96
c000ecae:	e8 dc 41 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ecb3:	83 c4 10             	add    esp,0x10
c000ecb6:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ecbd:	0f 85 71 01 00 00    	jne    c000ee34 <Computer::displayFeatures()+0x314>
c000ecc3:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ecc8:	83 ec 08             	sub    esp,0x8
c000eccb:	50                   	push   eax
c000eccc:	68 a7 ac 02 c0       	push   0xc002aca7
c000ecd1:	e8 b9 41 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ecd6:	83 c4 10             	add    esp,0x10
c000ecd9:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ece0:	0f 85 44 01 00 00    	jne    c000ee2a <Computer::displayFeatures()+0x30a>
c000ece6:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eceb:	83 ec 08             	sub    esp,0x8
c000ecee:	50                   	push   eax
c000ecef:	68 b8 ac 02 c0       	push   0xc002acb8
c000ecf4:	e8 96 41 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ecf9:	83 c4 10             	add    esp,0x10
c000ecfc:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed03:	0f 85 17 01 00 00    	jne    c000ee20 <Computer::displayFeatures()+0x300>
c000ed09:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ed0e:	83 ec 08             	sub    esp,0x8
c000ed11:	50                   	push   eax
c000ed12:	68 c9 ac 02 c0       	push   0xc002acc9
c000ed17:	e8 73 41 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ed1c:	83 c4 10             	add    esp,0x10
c000ed1f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed26:	0f 85 ea 00 00 00    	jne    c000ee16 <Computer::displayFeatures()+0x2f6>
c000ed2c:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ed31:	83 ec 08             	sub    esp,0x8
c000ed34:	50                   	push   eax
c000ed35:	68 da ac 02 c0       	push   0xc002acda
c000ed3a:	e8 50 41 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ed3f:	83 c4 10             	add    esp,0x10
c000ed42:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed49:	0f 88 0d 01 00 00    	js     c000ee5c <Computer::displayFeatures()+0x33c>
c000ed4f:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ed54:	83 ec 08             	sub    esp,0x8
c000ed57:	50                   	push   eax
c000ed58:	68 eb ac 02 c0       	push   0xc002aceb
c000ed5d:	e8 2d 41 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed6c:	0f 85 9a 00 00 00    	jne    c000ee0c <Computer::displayFeatures()+0x2ec>
c000ed72:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ed77:	83 ec 08             	sub    esp,0x8
c000ed7a:	50                   	push   eax
c000ed7b:	68 fc ac 02 c0       	push   0xc002acfc
c000ed80:	e8 0a 41 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ed85:	83 c4 10             	add    esp,0x10
c000ed88:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed8f:	75 74                	jne    c000ee05 <Computer::displayFeatures()+0x2e5>
c000ed91:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ed96:	83 ec 08             	sub    esp,0x8
c000ed99:	50                   	push   eax
c000ed9a:	68 0d ad 02 c0       	push   0xc002ad0d
c000ed9f:	e8 eb 40 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000eda4:	c7 44 24 20 74 c7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c774
c000edac:	83 c4 18             	add    esp,0x18
c000edaf:	5b                   	pop    ebx
c000edb0:	e9 da 40 00 00       	jmp    c0012e8f <Dbg::kprintf(char const*, ...)>
c000edb5:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edba:	e9 88 fd ff ff       	jmp    c000eb47 <Computer::displayFeatures()+0x27>
c000edbf:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edc4:	e9 50 fe ff ff       	jmp    c000ec19 <Computer::displayFeatures()+0xf9>
c000edc9:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edce:	e9 23 fe ff ff       	jmp    c000ebf6 <Computer::displayFeatures()+0xd6>
c000edd3:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edd8:	e9 f6 fd ff ff       	jmp    c000ebd3 <Computer::displayFeatures()+0xb3>
c000eddd:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ede2:	e9 c9 fd ff ff       	jmp    c000ebb0 <Computer::displayFeatures()+0x90>
c000ede7:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edec:	e9 9c fd ff ff       	jmp    c000eb8d <Computer::displayFeatures()+0x6d>
c000edf1:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edf6:	e9 6f fd ff ff       	jmp    c000eb6a <Computer::displayFeatures()+0x4a>
c000edfb:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee00:	e9 5a fe ff ff       	jmp    c000ec5f <Computer::displayFeatures()+0x13f>
c000ee05:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee0a:	eb 8a                	jmp    c000ed96 <Computer::displayFeatures()+0x276>
c000ee0c:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee11:	e9 61 ff ff ff       	jmp    c000ed77 <Computer::displayFeatures()+0x257>
c000ee16:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee1b:	e9 11 ff ff ff       	jmp    c000ed31 <Computer::displayFeatures()+0x211>
c000ee20:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee25:	e9 e4 fe ff ff       	jmp    c000ed0e <Computer::displayFeatures()+0x1ee>
c000ee2a:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee2f:	e9 b7 fe ff ff       	jmp    c000eceb <Computer::displayFeatures()+0x1cb>
c000ee34:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee39:	e9 8a fe ff ff       	jmp    c000ecc8 <Computer::displayFeatures()+0x1a8>
c000ee3e:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee43:	e9 5d fe ff ff       	jmp    c000eca5 <Computer::displayFeatures()+0x185>
c000ee48:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee4d:	e9 30 fe ff ff       	jmp    c000ec82 <Computer::displayFeatures()+0x162>
c000ee52:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee57:	e9 e0 fd ff ff       	jmp    c000ec3c <Computer::displayFeatures()+0x11c>
c000ee5c:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee61:	e9 ee fe ff ff       	jmp    c000ed54 <Computer::displayFeatures()+0x234>

c000ee66 <Computer::rdmsr(unsigned int)>:
c000ee66:	83 ec 0c             	sub    esp,0xc
c000ee69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0a                	je     c000ee80 <Computer::rdmsr(unsigned int)+0x1a>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	0f 32                	rdmsr  
c000ee7c:	83 c4 0c             	add    esp,0xc
c000ee7f:	c3                   	ret    
c000ee80:	83 ec 0c             	sub    esp,0xc
c000ee83:	68 1e ad 02 c0       	push   0xc002ad1e
c000ee88:	e8 6a ba 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c000ee8d:	83 c4 10             	add    esp,0x10
c000ee90:	eb e4                	jmp    c000ee76 <Computer::rdmsr(unsigned int)+0x10>

c000ee92 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee92:	57                   	push   edi
c000ee93:	56                   	push   esi
c000ee94:	52                   	push   edx
c000ee95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee99:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee9d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eea1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eea8:	74 0e                	je     c000eeb8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eeaa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eeae:	89 f0                	mov    eax,esi
c000eeb0:	89 fa                	mov    edx,edi
c000eeb2:	0f 30                	wrmsr  
c000eeb4:	58                   	pop    eax
c000eeb5:	5e                   	pop    esi
c000eeb6:	5f                   	pop    edi
c000eeb7:	c3                   	ret    
c000eeb8:	83 ec 0c             	sub    esp,0xc
c000eebb:	68 24 ad 02 c0       	push   0xc002ad24
c000eec0:	e8 32 ba 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c000eec5:	83 c4 10             	add    esp,0x10
c000eec8:	eb e0                	jmp    c000eeaa <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eeca <Computer::nmiEnabled()>:
c000eeca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eece:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eed4:	c3                   	ret    
c000eed5:	90                   	nop

c000eed6 <Computer::readCMOS(unsigned char)>:
c000eed6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eeda:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eee1:	19 c0                	sbb    eax,eax
c000eee3:	83 e0 80             	and    eax,0xffffff80
c000eee6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeea:	e6 70                	out    0x70,al
c000eeec:	e4 71                	in     al,0x71
c000eeee:	c3                   	ret    
c000eeef:	90                   	nop

c000eef0 <Computer::enableNMI(bool)>:
c000eef0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eef8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eefe:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef06:	eb ce                	jmp    c000eed6 <Computer::readCMOS(unsigned char)>

c000ef08 <Computer::open(int, int, void*)>:
c000ef08:	56                   	push   esi
c000ef09:	53                   	push   ebx
c000ef0a:	83 ec 10             	sub    esp,0x10
c000ef0d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef11:	f6 05 20 f1 02 c0 04 	test   BYTE PTR ds:0xc002f120,0x4
c000ef18:	68 68 12 00 00       	push   0x1268
c000ef1d:	0f 94 05 44 e0 02 c0 	sete   BYTE PTR ds:0xc002e044
c000ef24:	e8 97 09 00 00       	call   c000f8c0 <malloc>
c000ef29:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef2c:	89 c6                	mov    esi,eax
c000ef2e:	e8 49 94 00 00       	call   c001837c <ACPI::ACPI()>
c000ef33:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef39:	58                   	pop    eax
c000ef3a:	5a                   	pop    edx
c000ef3b:	56                   	push   esi
c000ef3c:	53                   	push   ebx
c000ef3d:	e8 78 53 00 00       	call   c00142ba <Device::addChild(Device*)>
c000ef42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef45:	e8 cc f9 ff ff       	call   c000e916 <Computer::detectFeatures()>
c000ef4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef4d:	e8 ce fb ff ff       	call   c000eb20 <Computer::displayFeatures()>
c000ef52:	59                   	pop    ecx
c000ef53:	5e                   	pop    esi
c000ef54:	6a 01                	push   0x1
c000ef56:	53                   	push   ebx
c000ef57:	e8 94 ff ff ff       	call   c000eef0 <Computer::enableNMI(bool)>
c000ef5c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef63:	e8 58 09 00 00       	call   c000f8c0 <malloc>
c000ef68:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef6b:	89 c6                	mov    esi,eax
c000ef6d:	e8 3e a1 00 00       	call   c00190b0 <CPU::CPU()>
c000ef72:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef78:	58                   	pop    eax
c000ef79:	5a                   	pop    edx
c000ef7a:	56                   	push   esi
c000ef7b:	53                   	push   ebx
c000ef7c:	e8 39 53 00 00       	call   c00142ba <Device::addChild(Device*)>
c000ef81:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef87:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef8d:	6a 00                	push   0x0
c000ef8f:	6a 00                	push   0x0
c000ef91:	50                   	push   eax
c000ef92:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef95:	83 c4 20             	add    esp,0x20
c000ef98:	e8 b1 58 00 00       	call   c001484e <setupFPU()>
c000ef9d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000efa3:	85 c0                	test   eax,eax
c000efa5:	74 1f                	je     c000efc6 <Computer::open(int, int, void*)+0xbe>
c000efa7:	83 ec 08             	sub    esp,0x8
c000efaa:	50                   	push   eax
c000efab:	53                   	push   ebx
c000efac:	e8 09 53 00 00       	call   c00142ba <Device::addChild(Device*)>
c000efb1:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000efb7:	8b 10                	mov    edx,DWORD PTR [eax]
c000efb9:	6a 00                	push   0x0
c000efbb:	6a 00                	push   0x0
c000efbd:	6a 00                	push   0x0
c000efbf:	50                   	push   eax
c000efc0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efc3:	83 c4 20             	add    esp,0x20
c000efc6:	83 ec 0c             	sub    esp,0xc
c000efc9:	68 c8 e6 00 c0       	push   0xc000e6c8
c000efce:	e8 ef f5 00 00       	call   c001e5c2 <setupMultitasking(void (*)())>
c000efd3:	83 c4 14             	add    esp,0x14
c000efd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efdb:	5b                   	pop    ebx
c000efdc:	5e                   	pop    esi
c000efdd:	c3                   	ret    

c000efde <Computer::disableNMI()>:
c000efde:	6a 00                	push   0x0
c000efe0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efe4:	e8 07 ff ff ff       	call   c000eef0 <Computer::enableNMI(bool)>
c000efe9:	58                   	pop    eax
c000efea:	5a                   	pop    edx
c000efeb:	c3                   	ret    

c000efec <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eff0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eff7:	19 c0                	sbb    eax,eax
c000eff9:	83 e0 80             	and    eax,0xffffff80
c000effc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f000:	e6 70                	out    0x70,al
c000f002:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f006:	e6 71                	out    0x71,al
c000f008:	c3                   	ret    
c000f009:	90                   	nop

c000f00a <Computer::handleNMI()>:
c000f00a:	56                   	push   esi
c000f00b:	53                   	push   ebx
c000f00c:	83 ec 10             	sub    esp,0x10
c000f00f:	e4 92                	in     al,0x92
c000f011:	89 c6                	mov    esi,eax
c000f013:	e4 61                	in     al,0x61
c000f015:	68 2a ad 02 c0       	push   0xc002ad2a
c000f01a:	88 c3                	mov    bl,al
c000f01c:	e8 6e 3e 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000f021:	83 c4 10             	add    esp,0x10
c000f024:	83 e6 10             	and    esi,0x10
c000f027:	75 0d                	jne    c000f036 <Computer::handleNMI()+0x2c>
c000f029:	f6 c3 40             	test   bl,0x40
c000f02c:	75 1d                	jne    c000f04b <Computer::handleNMI()+0x41>
c000f02e:	84 db                	test   bl,bl
c000f030:	78 2d                	js     c000f05f <Computer::handleNMI()+0x55>
c000f032:	58                   	pop    eax
c000f033:	5b                   	pop    ebx
c000f034:	5e                   	pop    esi
c000f035:	c3                   	ret    
c000f036:	83 ec 0c             	sub    esp,0xc
c000f039:	68 3b ad 02 c0       	push   0xc002ad3b
c000f03e:	e8 b4 b8 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c000f043:	83 c4 10             	add    esp,0x10
c000f046:	f6 c3 40             	test   bl,0x40
c000f049:	74 e3                	je     c000f02e <Computer::handleNMI()+0x24>
c000f04b:	83 ec 0c             	sub    esp,0xc
c000f04e:	68 48 ad 02 c0       	push   0xc002ad48
c000f053:	e8 9f b8 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c000f058:	83 c4 10             	add    esp,0x10
c000f05b:	84 db                	test   bl,bl
c000f05d:	79 d3                	jns    c000f032 <Computer::handleNMI()+0x28>
c000f05f:	c7 44 24 10 52 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad52
c000f067:	5a                   	pop    edx
c000f068:	5b                   	pop    ebx
c000f069:	5e                   	pop    esi
c000f06a:	e9 88 b8 00 00       	jmp    c001a8f7 <Krnl::panic(char const*)>
c000f06f:	90                   	nop

c000f070 <Computer::setDiskActivityLight(int, bool)>:
c000f070:	56                   	push   esi
c000f071:	53                   	push   ebx
c000f072:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f076:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f07b:	77 1b                	ja     c000f098 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f07d:	e4 92                	in     al,0x92
c000f07f:	bb 40 00 00 00       	mov    ebx,0x40
c000f084:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f088:	89 da                	mov    edx,ebx
c000f08a:	d3 e2                	shl    edx,cl
c000f08c:	89 f1                	mov    ecx,esi
c000f08e:	f7 d2                	not    edx
c000f090:	d3 e3                	shl    ebx,cl
c000f092:	21 d0                	and    eax,edx
c000f094:	09 d8                	or     eax,ebx
c000f096:	e6 92                	out    0x92,al
c000f098:	5b                   	pop    ebx
c000f099:	5e                   	pop    esi
c000f09a:	c3                   	ret    
c000f09b:	90                   	nop

c000f09c <GDTEntry::setBase(unsigned int)>:
c000f09c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0a4:	89 c1                	mov    ecx,eax
c000f0a6:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f0aa:	c1 e9 10             	shr    ecx,0x10
c000f0ad:	c1 e8 18             	shr    eax,0x18
c000f0b0:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f0b3:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f0b6:	c3                   	ret    
c000f0b7:	90                   	nop

c000f0b8 <GDTEntry::setLimit(unsigned int)>:
c000f0b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0c0:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f0c3:	66 89 01             	mov    WORD PTR [ecx],ax
c000f0c6:	83 e2 f0             	and    edx,0xfffffff0
c000f0c9:	c1 e8 10             	shr    eax,0x10
c000f0cc:	83 e0 0f             	and    eax,0xf
c000f0cf:	09 d0                	or     eax,edx
c000f0d1:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0d4:	c3                   	ret    
c000f0d5:	90                   	nop

c000f0d6 <GDT::GDT()>:
c000f0d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ea:	90                   	nop
c000f0eb:	c3                   	ret    

c000f0ec <GDT::addEntry(GDTEntry)>:
c000f0ec:	53                   	push   ebx
c000f0ed:	83 ec 0c             	sub    esp,0xc
c000f0f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0f6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0fd:	52                   	push   edx
c000f0fe:	50                   	push   eax
c000f0ff:	68 8c ad 02 c0       	push   0xc002ad8c
c000f104:	e8 86 3d 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000f109:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f10b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f10f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f113:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f117:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f11b:	8d 50 01             	lea    edx,[eax+0x1]
c000f11e:	c1 e0 03             	shl    eax,0x3
c000f121:	89 13                	mov    DWORD PTR [ebx],edx
c000f123:	83 c4 18             	add    esp,0x18
c000f126:	5b                   	pop    ebx
c000f127:	c3                   	ret    

c000f128 <GDT::getNumberOfEntries()>:
c000f128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f12c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f12e:	c3                   	ret    
c000f12f:	90                   	nop

c000f130 <GDT::flush()>:
c000f130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f134:	8b 10                	mov    edx,DWORD PTR [eax]
c000f136:	83 c0 04             	add    eax,0x4
c000f139:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f140:	a3 12 f1 02 c0       	mov    ds:0xc002f112,eax
c000f145:	66 89 15 10 f1 02 c0 	mov    WORD PTR ds:0xc002f110,dx
c000f14c:	e9 ff 12 ff ff       	jmp    c0000450 <loadGDT>
c000f151:	90                   	nop

c000f152 <GDT::setup()>:
c000f152:	55                   	push   ebp
c000f153:	57                   	push   edi
c000f154:	56                   	push   esi
c000f155:	53                   	push   ebx
c000f156:	83 ec 3c             	sub    esp,0x3c
c000f159:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f15d:	6a 00                	push   0x0
c000f15f:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f163:	53                   	push   ebx
c000f164:	e8 33 ff ff ff       	call   c000f09c <GDTEntry::setBase(unsigned int)>
c000f169:	6a 00                	push   0x0
c000f16b:	53                   	push   ebx
c000f16c:	e8 47 ff ff ff       	call   c000f0b8 <GDTEntry::setLimit(unsigned int)>
c000f171:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f179:	6a 00                	push   0x0
c000f17b:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f17f:	53                   	push   ebx
c000f180:	e8 17 ff ff ff       	call   c000f09c <GDTEntry::setBase(unsigned int)>
c000f185:	68 ff ff ff 00       	push   0xffffff
c000f18a:	53                   	push   ebx
c000f18b:	e8 28 ff ff ff       	call   c000f0b8 <GDTEntry::setLimit(unsigned int)>
c000f190:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f194:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f199:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f19e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1a2:	83 c4 20             	add    esp,0x20
c000f1a5:	6a 00                	push   0x0
c000f1a7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f1ab:	53                   	push   ebx
c000f1ac:	e8 eb fe ff ff       	call   c000f09c <GDTEntry::setBase(unsigned int)>
c000f1b1:	68 ff ff ff 00       	push   0xffffff
c000f1b6:	53                   	push   ebx
c000f1b7:	e8 fc fe ff ff       	call   c000f0b8 <GDTEntry::setLimit(unsigned int)>
c000f1bc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f1c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1c4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f1c8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f1cc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f1d0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1d5:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1da:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1de:	89 d8                	mov    eax,ebx
c000f1e0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1e4:	80 cc 60             	or     ah,0x60
c000f1e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1eb:	83 c4 0c             	add    esp,0xc
c000f1ee:	89 f8                	mov    eax,edi
c000f1f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1f4:	80 cc 60             	or     ah,0x60
c000f1f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1fb:	89 c7                	mov    edi,eax
c000f1fd:	55                   	push   ebp
c000f1fe:	e8 e9 fe ff ff       	call   c000f0ec <GDT::addEntry(GDTEntry)>
c000f203:	83 c4 0c             	add    esp,0xc
c000f206:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f20a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f20e:	55                   	push   ebp
c000f20f:	e8 d8 fe ff ff       	call   c000f0ec <GDT::addEntry(GDTEntry)>
c000f214:	83 c4 0c             	add    esp,0xc
c000f217:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f21b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f21f:	55                   	push   ebp
c000f220:	e8 c7 fe ff ff       	call   c000f0ec <GDT::addEntry(GDTEntry)>
c000f225:	83 c4 0c             	add    esp,0xc
c000f228:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f22c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f230:	53                   	push   ebx
c000f231:	51                   	push   ecx
c000f232:	55                   	push   ebp
c000f233:	e8 b4 fe ff ff       	call   c000f0ec <GDT::addEntry(GDTEntry)>
c000f238:	83 c4 0c             	add    esp,0xc
c000f23b:	57                   	push   edi
c000f23c:	56                   	push   esi
c000f23d:	55                   	push   ebp
c000f23e:	e8 a9 fe ff ff       	call   c000f0ec <GDT::addEntry(GDTEntry)>
c000f243:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f246:	e8 e5 fe ff ff       	call   c000f130 <GDT::flush()>
c000f24b:	83 c4 4c             	add    esp,0x4c
c000f24e:	5b                   	pop    ebx
c000f24f:	5e                   	pop    esi
c000f250:	5f                   	pop    edi
c000f251:	5d                   	pop    ebp
c000f252:	c3                   	ret    

c000f253 <idleFunction(void*)>:
c000f253:	53                   	push   ebx
c000f254:	83 ec 08             	sub    esp,0x8
c000f257:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c000f25c:	48                   	dec    eax
c000f25d:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c000f262:	75 01                	jne    c000f265 <idleFunction(void*)+0x12>
c000f264:	fb                   	sti    
c000f265:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c000f26a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f270:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f277:	74 3c                	je     c000f2b5 <idleFunction(void*)+0x62>
c000f279:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f280:	74 33                	je     c000f2b5 <idleFunction(void*)+0x62>
c000f282:	31 db                	xor    ebx,ebx
c000f284:	52                   	push   edx
c000f285:	52                   	push   edx
c000f286:	68 e1 00 00 00       	push   0xe1
c000f28b:	50                   	push   eax
c000f28c:	e8 d5 fb ff ff       	call   c000ee66 <Computer::rdmsr(unsigned int)>
c000f291:	53                   	push   ebx
c000f292:	83 e0 02             	and    eax,0x2
c000f295:	50                   	push   eax
c000f296:	68 e1 00 00 00       	push   0xe1
c000f29b:	ff 35 08 f1 02 c0    	push   DWORD PTR ds:0xc002f108
c000f2a1:	e8 ec fb ff ff       	call   c000ee92 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f2a6:	83 c4 20             	add    esp,0x20
c000f2a9:	e8 d1 0f ff ff       	call   c000027f <doTPAUSE>
c000f2ae:	e8 dd 9e 01 00       	call   c0029190 <idleCommon()>
c000f2b3:	eb f4                	jmp    c000f2a9 <idleFunction(void*)+0x56>
c000f2b5:	fb                   	sti    
c000f2b6:	f4                   	hlt    
c000f2b7:	e8 d4 9e 01 00       	call   c0029190 <idleCommon()>
c000f2bc:	eb f7                	jmp    c000f2b5 <idleFunction(void*)+0x62>

c000f2be <IDTEntry::IDTEntry(bool)>:
c000f2be:	83 ec 04             	sub    esp,0x4
c000f2c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2c5:	88 04 24             	mov    BYTE PTR [esp],al
c000f2c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2cc:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f2d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d6:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2de:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2e1:	83 e2 f0             	and    edx,0xfffffff0
c000f2e4:	83 ca 0e             	or     edx,0xe
c000f2e7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ee:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2f1:	83 e2 ef             	and    edx,0xffffffef
c000f2f4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f7:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2fb:	74 04                	je     c000f301 <IDTEntry::IDTEntry(bool)+0x43>
c000f2fd:	b2 03                	mov    dl,0x3
c000f2ff:	eb 02                	jmp    c000f303 <IDTEntry::IDTEntry(bool)+0x45>
c000f301:	b2 00                	mov    dl,0x0
c000f303:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f307:	83 e2 03             	and    edx,0x3
c000f30a:	88 d1                	mov    cl,dl
c000f30c:	c1 e1 05             	shl    ecx,0x5
c000f30f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f312:	83 e2 9f             	and    edx,0xffffff9f
c000f315:	09 ca                	or     edx,ecx
c000f317:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f31a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f321:	83 ca 80             	or     edx,0xffffff80
c000f324:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f327:	90                   	nop
c000f328:	83 c4 04             	add    esp,0x4
c000f32b:	c3                   	ret    

c000f32c <IDTEntry::setOffset(unsigned int)>:
c000f32c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f330:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f334:	66 89 02             	mov    WORD PTR [edx],ax
c000f337:	c1 e8 10             	shr    eax,0x10
c000f33a:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f33e:	c3                   	ret    
c000f33f:	90                   	nop

c000f340 <IDT::IDT()>:
c000f340:	90                   	nop
c000f341:	c3                   	ret    

c000f342 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f346:	83 c0 30             	add    eax,0x30
c000f349:	c3                   	ret    

c000f34a <IDT::addEntry(IDTEntry, int)>:
c000f34a:	53                   	push   ebx
c000f34b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f34f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f353:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f35b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f35e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f362:	5b                   	pop    ebx
c000f363:	c3                   	ret    

c000f364 <IDT::addEntry(int, void (*)(), bool)>:
c000f364:	53                   	push   ebx
c000f365:	83 ec 10             	sub    esp,0x10
c000f368:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f36d:	50                   	push   eax
c000f36e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f372:	53                   	push   ebx
c000f373:	e8 46 ff ff ff       	call   c000f2be <IDTEntry::IDTEntry(bool)>
c000f378:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f37c:	53                   	push   ebx
c000f37d:	e8 aa ff ff ff       	call   c000f32c <IDTEntry::setOffset(unsigned int)>
c000f382:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f386:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f38a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f392:	e8 b3 ff ff ff       	call   c000f34a <IDT::addEntry(IDTEntry, int)>
c000f397:	83 c4 30             	add    esp,0x30
c000f39a:	5b                   	pop    ebx
c000f39b:	c3                   	ret    

c000f39c <IDT::flush()>:
c000f39c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3a0:	66 c7 05 18 f1 02 c0 ff 07 	mov    WORD PTR ds:0xc002f118,0x7ff
c000f3a9:	a3 1a f1 02 c0       	mov    ds:0xc002f11a,eax
c000f3ae:	0f 01 1d 18 f1 02 c0 	lidtd  ds:0xc002f118
c000f3b5:	c3                   	ret    

c000f3b6 <IDT::setup()>:
c000f3b6:	57                   	push   edi
c000f3b7:	56                   	push   esi
c000f3b8:	53                   	push   ebx
c000f3b9:	83 ec 10             	sub    esp,0x10
c000f3bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3c0:	6a 00                	push   0x0
c000f3c2:	68 70 04 00 c0       	push   0xc0000470
c000f3c7:	6a 00                	push   0x0
c000f3c9:	53                   	push   ebx
c000f3ca:	e8 95 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f3cf:	6a 00                	push   0x0
c000f3d1:	68 80 04 00 c0       	push   0xc0000480
c000f3d6:	6a 01                	push   0x1
c000f3d8:	53                   	push   ebx
c000f3d9:	e8 86 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f3de:	83 c4 20             	add    esp,0x20
c000f3e1:	6a 00                	push   0x0
c000f3e3:	68 8a 04 00 c0       	push   0xc000048a
c000f3e8:	6a 02                	push   0x2
c000f3ea:	53                   	push   ebx
c000f3eb:	e8 74 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f3f0:	6a 00                	push   0x0
c000f3f2:	68 94 04 00 c0       	push   0xc0000494
c000f3f7:	6a 03                	push   0x3
c000f3f9:	53                   	push   ebx
c000f3fa:	e8 65 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f3ff:	83 c4 20             	add    esp,0x20
c000f402:	6a 00                	push   0x0
c000f404:	68 9e 04 00 c0       	push   0xc000049e
c000f409:	6a 04                	push   0x4
c000f40b:	53                   	push   ebx
c000f40c:	e8 53 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f411:	6a 00                	push   0x0
c000f413:	68 a8 04 00 c0       	push   0xc00004a8
c000f418:	6a 05                	push   0x5
c000f41a:	53                   	push   ebx
c000f41b:	e8 44 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f420:	83 c4 20             	add    esp,0x20
c000f423:	6a 00                	push   0x0
c000f425:	68 b2 04 00 c0       	push   0xc00004b2
c000f42a:	6a 06                	push   0x6
c000f42c:	53                   	push   ebx
c000f42d:	e8 32 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f432:	6a 00                	push   0x0
c000f434:	68 bc 04 00 c0       	push   0xc00004bc
c000f439:	6a 07                	push   0x7
c000f43b:	53                   	push   ebx
c000f43c:	e8 23 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f441:	83 c4 20             	add    esp,0x20
c000f444:	6a 00                	push   0x0
c000f446:	68 c6 04 00 c0       	push   0xc00004c6
c000f44b:	6a 08                	push   0x8
c000f44d:	53                   	push   ebx
c000f44e:	e8 11 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f453:	6a 00                	push   0x0
c000f455:	68 ce 04 00 c0       	push   0xc00004ce
c000f45a:	6a 09                	push   0x9
c000f45c:	53                   	push   ebx
c000f45d:	e8 02 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f462:	83 c4 20             	add    esp,0x20
c000f465:	6a 00                	push   0x0
c000f467:	68 d8 04 00 c0       	push   0xc00004d8
c000f46c:	6a 0a                	push   0xa
c000f46e:	53                   	push   ebx
c000f46f:	e8 f0 fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f474:	6a 00                	push   0x0
c000f476:	68 e0 04 00 c0       	push   0xc00004e0
c000f47b:	6a 0b                	push   0xb
c000f47d:	53                   	push   ebx
c000f47e:	e8 e1 fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f483:	83 c4 20             	add    esp,0x20
c000f486:	6a 00                	push   0x0
c000f488:	68 e8 04 00 c0       	push   0xc00004e8
c000f48d:	6a 0c                	push   0xc
c000f48f:	53                   	push   ebx
c000f490:	e8 cf fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f495:	6a 00                	push   0x0
c000f497:	68 f0 04 00 c0       	push   0xc00004f0
c000f49c:	6a 0d                	push   0xd
c000f49e:	53                   	push   ebx
c000f49f:	e8 c0 fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f4a4:	83 c4 20             	add    esp,0x20
c000f4a7:	6a 00                	push   0x0
c000f4a9:	68 f8 04 00 c0       	push   0xc00004f8
c000f4ae:	6a 0e                	push   0xe
c000f4b0:	53                   	push   ebx
c000f4b1:	e8 ae fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f4b6:	6a 00                	push   0x0
c000f4b8:	68 00 05 00 c0       	push   0xc0000500
c000f4bd:	6a 0f                	push   0xf
c000f4bf:	53                   	push   ebx
c000f4c0:	e8 9f fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f4c5:	83 c4 20             	add    esp,0x20
c000f4c8:	6a 00                	push   0x0
c000f4ca:	68 0a 05 00 c0       	push   0xc000050a
c000f4cf:	6a 10                	push   0x10
c000f4d1:	53                   	push   ebx
c000f4d2:	e8 8d fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f4d7:	6a 00                	push   0x0
c000f4d9:	68 14 05 00 c0       	push   0xc0000514
c000f4de:	6a 11                	push   0x11
c000f4e0:	53                   	push   ebx
c000f4e1:	e8 7e fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f4e6:	83 c4 20             	add    esp,0x20
c000f4e9:	6a 00                	push   0x0
c000f4eb:	68 1e 05 00 c0       	push   0xc000051e
c000f4f0:	6a 12                	push   0x12
c000f4f2:	53                   	push   ebx
c000f4f3:	e8 6c fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f4f8:	6a 01                	push   0x1
c000f4fa:	68 b8 05 00 c0       	push   0xc00005b8
c000f4ff:	6a 60                	push   0x60
c000f501:	53                   	push   ebx
c000f502:	e8 5d fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f507:	83 c4 20             	add    esp,0x20
c000f50a:	6a 00                	push   0x0
c000f50c:	68 bf 05 00 c0       	push   0xc00005bf
c000f511:	6a 20                	push   0x20
c000f513:	53                   	push   ebx
c000f514:	e8 4b fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f519:	6a 00                	push   0x0
c000f51b:	68 aa 05 00 c0       	push   0xc00005aa
c000f520:	6a 21                	push   0x21
c000f522:	53                   	push   ebx
c000f523:	e8 3c fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f528:	83 c4 20             	add    esp,0x20
c000f52b:	6a 00                	push   0x0
c000f52d:	68 b1 05 00 c0       	push   0xc00005b1
c000f532:	6a 22                	push   0x22
c000f534:	53                   	push   ebx
c000f535:	e8 2a fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f53a:	6a 00                	push   0x0
c000f53c:	68 28 05 00 c0       	push   0xc0000528
c000f541:	6a 23                	push   0x23
c000f543:	53                   	push   ebx
c000f544:	e8 1b fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f549:	83 c4 20             	add    esp,0x20
c000f54c:	6a 00                	push   0x0
c000f54e:	68 32 05 00 c0       	push   0xc0000532
c000f553:	6a 24                	push   0x24
c000f555:	53                   	push   ebx
c000f556:	e8 09 fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f55b:	6a 00                	push   0x0
c000f55d:	68 3c 05 00 c0       	push   0xc000053c
c000f562:	6a 25                	push   0x25
c000f564:	53                   	push   ebx
c000f565:	e8 fa fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f56a:	83 c4 20             	add    esp,0x20
c000f56d:	6a 00                	push   0x0
c000f56f:	68 46 05 00 c0       	push   0xc0000546
c000f574:	6a 26                	push   0x26
c000f576:	53                   	push   ebx
c000f577:	e8 e8 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f57c:	6a 00                	push   0x0
c000f57e:	68 50 05 00 c0       	push   0xc0000550
c000f583:	6a 27                	push   0x27
c000f585:	53                   	push   ebx
c000f586:	e8 d9 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f58b:	83 c4 20             	add    esp,0x20
c000f58e:	6a 00                	push   0x0
c000f590:	68 5a 05 00 c0       	push   0xc000055a
c000f595:	6a 28                	push   0x28
c000f597:	53                   	push   ebx
c000f598:	e8 c7 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f59d:	6a 00                	push   0x0
c000f59f:	68 64 05 00 c0       	push   0xc0000564
c000f5a4:	6a 29                	push   0x29
c000f5a6:	53                   	push   ebx
c000f5a7:	e8 b8 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f5ac:	83 c4 20             	add    esp,0x20
c000f5af:	6a 00                	push   0x0
c000f5b1:	68 6e 05 00 c0       	push   0xc000056e
c000f5b6:	6a 2a                	push   0x2a
c000f5b8:	53                   	push   ebx
c000f5b9:	e8 a6 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f5be:	6a 00                	push   0x0
c000f5c0:	68 78 05 00 c0       	push   0xc0000578
c000f5c5:	6a 2b                	push   0x2b
c000f5c7:	53                   	push   ebx
c000f5c8:	e8 97 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f5cd:	83 c4 20             	add    esp,0x20
c000f5d0:	6a 00                	push   0x0
c000f5d2:	68 82 05 00 c0       	push   0xc0000582
c000f5d7:	6a 2c                	push   0x2c
c000f5d9:	53                   	push   ebx
c000f5da:	e8 85 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f5df:	6a 00                	push   0x0
c000f5e1:	68 8c 05 00 c0       	push   0xc000058c
c000f5e6:	6a 2d                	push   0x2d
c000f5e8:	53                   	push   ebx
c000f5e9:	e8 76 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f5ee:	83 c4 20             	add    esp,0x20
c000f5f1:	6a 00                	push   0x0
c000f5f3:	68 96 05 00 c0       	push   0xc0000596
c000f5f8:	6a 2e                	push   0x2e
c000f5fa:	53                   	push   ebx
c000f5fb:	e8 64 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f600:	6a 00                	push   0x0
c000f602:	68 a0 05 00 c0       	push   0xc00005a0
c000f607:	6a 2f                	push   0x2f
c000f609:	53                   	push   ebx
c000f60a:	e8 55 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f60f:	83 c4 20             	add    esp,0x20
c000f612:	6a 00                	push   0x0
c000f614:	68 f5 05 00 c0       	push   0xc00005f5
c000f619:	6a 30                	push   0x30
c000f61b:	53                   	push   ebx
c000f61c:	e8 43 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f621:	6a 00                	push   0x0
c000f623:	68 ff 05 00 c0       	push   0xc00005ff
c000f628:	6a 31                	push   0x31
c000f62a:	53                   	push   ebx
c000f62b:	e8 34 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f630:	83 c4 20             	add    esp,0x20
c000f633:	6a 00                	push   0x0
c000f635:	68 09 06 00 c0       	push   0xc0000609
c000f63a:	6a 32                	push   0x32
c000f63c:	53                   	push   ebx
c000f63d:	e8 22 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f642:	6a 00                	push   0x0
c000f644:	68 13 06 00 c0       	push   0xc0000613
c000f649:	6a 33                	push   0x33
c000f64b:	53                   	push   ebx
c000f64c:	e8 13 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f651:	83 c4 20             	add    esp,0x20
c000f654:	6a 00                	push   0x0
c000f656:	68 1d 06 00 c0       	push   0xc000061d
c000f65b:	6a 34                	push   0x34
c000f65d:	53                   	push   ebx
c000f65e:	e8 01 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f663:	6a 00                	push   0x0
c000f665:	68 27 06 00 c0       	push   0xc0000627
c000f66a:	6a 35                	push   0x35
c000f66c:	53                   	push   ebx
c000f66d:	e8 f2 fc ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f672:	83 c4 20             	add    esp,0x20
c000f675:	6a 00                	push   0x0
c000f677:	68 31 06 00 c0       	push   0xc0000631
c000f67c:	6a 36                	push   0x36
c000f67e:	53                   	push   ebx
c000f67f:	e8 e0 fc ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f684:	6a 00                	push   0x0
c000f686:	68 3b 06 00 c0       	push   0xc000063b
c000f68b:	6a 37                	push   0x37
c000f68d:	53                   	push   ebx
c000f68e:	e8 d1 fc ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f693:	83 c4 1c             	add    esp,0x1c
c000f696:	6a 03                	push   0x3
c000f698:	6a 02                	push   0x2
c000f69a:	ff 35 90 f2 02 c0    	push   DWORD PTR ds:0xc002f290
c000f6a0:	e8 1d 2d 00 00       	call   c00123c2 <VAS::allocatePages(int, int)>
c000f6a5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f6ac:	89 c6                	mov    esi,eax
c000f6ae:	e8 0d 02 00 00       	call   c000f8c0 <malloc>
c000f6b3:	81 c6 00 20 00 00    	add    esi,0x2000
c000f6b9:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6bc:	89 c7                	mov    edi,eax
c000f6be:	e8 f7 1c 00 00       	call   c00113ba <TSS::TSS()>
c000f6c3:	83 c4 0c             	add    esp,0xc
c000f6c6:	68 c6 04 00 c0       	push   0xc00004c6
c000f6cb:	56                   	push   esi
c000f6cc:	57                   	push   edi
c000f6cd:	e8 28 1d 00 00       	call   c00113fa <TSS::setup(unsigned long, unsigned long)>
c000f6d2:	89 c6                	mov    esi,eax
c000f6d4:	58                   	pop    eax
c000f6d5:	5a                   	pop    edx
c000f6d6:	6a 00                	push   0x0
c000f6d8:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6dc:	50                   	push   eax
c000f6dd:	e8 dc fb ff ff       	call   c000f2be <IDTEntry::IDTEntry(bool)>
c000f6e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6e6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6eb:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6f2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6fc:	80 ce 05             	or     dh,0x5
c000f6ff:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f702:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f706:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f70a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f70d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f710:	e8 87 fc ff ff       	call   c000f39c <IDT::flush()>
c000f715:	83 c4 20             	add    esp,0x20
c000f718:	5b                   	pop    ebx
c000f719:	5e                   	pop    esi
c000f71a:	5f                   	pop    edi
c000f71b:	c3                   	ret    

c000f71c <sbrk>:
c000f71c:	55                   	push   ebp
c000f71d:	57                   	push   edi
c000f71e:	56                   	push   esi
c000f71f:	53                   	push   ebx
c000f720:	83 ec 1c             	sub    esp,0x1c
c000f723:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f727:	85 c0                	test   eax,eax
c000f729:	74 3e                	je     c000f769 <sbrk+0x4d>
c000f72b:	78 43                	js     c000f770 <sbrk+0x54>
c000f72d:	8b 15 08 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f108
c000f733:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f739:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f73f:	83 e2 01             	and    edx,0x1
c000f742:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f746:	8b 0d 34 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e034
c000f74c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f750:	05 ff 0f 00 00       	add    eax,0xfff
c000f755:	89 c2                	mov    edx,eax
c000f757:	78 2f                	js     c000f788 <sbrk+0x6c>
c000f759:	c1 fa 0c             	sar    edx,0xc
c000f75c:	89 d7                	mov    edi,edx
c000f75e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f762:	be 00 00 00 00       	mov    esi,0x0
c000f767:	eb 36                	jmp    c000f79f <sbrk+0x83>
c000f769:	a1 34 e0 02 c0       	mov    eax,ds:0xc002e034
c000f76e:	eb 73                	jmp    c000f7e3 <sbrk+0xc7>
c000f770:	83 ec 08             	sub    esp,0x8
c000f773:	50                   	push   eax
c000f774:	68 a8 ad 02 c0       	push   0xc002ada8
c000f779:	e8 11 37 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000f77e:	83 c4 10             	add    esp,0x10
c000f781:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f786:	eb 5b                	jmp    c000f7e3 <sbrk+0xc7>
c000f788:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f78e:	eb c9                	jmp    c000f759 <sbrk+0x3d>
c000f790:	81 05 34 e0 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002e034,0x1000
c000f79a:	46                   	inc    esi
c000f79b:	39 f7                	cmp    edi,esi
c000f79d:	74 33                	je     c000f7d2 <sbrk+0xb6>
c000f79f:	8b 1d 90 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f290
c000f7a5:	8b 2d 34 e0 02 c0    	mov    ebp,DWORD PTR ds:0xc002e034
c000f7ab:	e8 7c 07 00 00       	call   c000ff2c <Phys::allocatePage()>
c000f7b0:	68 01 0c 00 00       	push   0xc01
c000f7b5:	55                   	push   ebp
c000f7b6:	50                   	push   eax
c000f7b7:	53                   	push   ebx
c000f7b8:	e8 03 2b 00 00       	call   c00122c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7bd:	83 c4 10             	add    esp,0x10
c000f7c0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7c5:	74 c9                	je     c000f790 <sbrk+0x74>
c000f7c7:	8b 1d 34 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e034
c000f7cd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7d0:	eb be                	jmp    c000f790 <sbrk+0x74>
c000f7d2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7d7:	75 12                	jne    c000f7eb <sbrk+0xcf>
c000f7d9:	0f 20 d8             	mov    eax,cr3
c000f7dc:	0f 22 d8             	mov    cr3,eax
c000f7df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7e3:	83 c4 1c             	add    esp,0x1c
c000f7e6:	5b                   	pop    ebx
c000f7e7:	5e                   	pop    esi
c000f7e8:	5f                   	pop    edi
c000f7e9:	5d                   	pop    ebp
c000f7ea:	c3                   	ret    
c000f7eb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7ef:	89 cb                	mov    ebx,ecx
c000f7f1:	c1 eb 0a             	shr    ebx,0xa
c000f7f4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7fa:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f800:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f804:	c1 e0 0c             	shl    eax,0xc
c000f807:	01 c8                	add    eax,ecx
c000f809:	c1 e8 0a             	shr    eax,0xa
c000f80c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f811:	2d 00 00 40 00       	sub    eax,0x400000
c000f816:	39 c3                	cmp    ebx,eax
c000f818:	77 c5                	ja     c000f7df <sbrk+0xc3>
c000f81a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f81d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f823:	39 d8                	cmp    eax,ebx
c000f825:	73 f3                	jae    c000f81a <sbrk+0xfe>
c000f827:	eb b6                	jmp    c000f7df <sbrk+0xc3>

c000f829 <mmap>:
c000f829:	83 ec 18             	sub    esp,0x18
c000f82c:	68 d8 ad 02 c0       	push   0xc002add8
c000f831:	e8 c1 b0 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c000f836:	b8 00 00 00 00       	mov    eax,0x0
c000f83b:	83 c4 1c             	add    esp,0x1c
c000f83e:	c3                   	ret    

c000f83f <munmap>:
c000f83f:	83 ec 18             	sub    esp,0x18
c000f842:	68 dd ad 02 c0       	push   0xc002addd
c000f847:	e8 ab b0 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c000f84c:	b8 00 00 00 00       	mov    eax,0x0
c000f851:	83 c4 1c             	add    esp,0x1c
c000f854:	c3                   	ret    

c000f855 <liballoc_lock()>:
c000f855:	fa                   	cli    
c000f856:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c000f85c:	b8 00 00 00 00       	mov    eax,0x0
c000f861:	c3                   	ret    

c000f862 <liballoc_unlock()>:
c000f862:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c000f867:	48                   	dec    eax
c000f868:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c000f86d:	75 01                	jne    c000f870 <liballoc_unlock()+0xe>
c000f86f:	fb                   	sti    
c000f870:	b8 00 00 00 00       	mov    eax,0x0
c000f875:	c3                   	ret    

c000f876 <liballoc_alloc(int)>:
c000f876:	83 ec 10             	sub    esp,0x10
c000f879:	68 01 08 00 00       	push   0x801
c000f87e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f882:	ff 35 90 f2 02 c0    	push   DWORD PTR ds:0xc002f290
c000f888:	e8 35 2b 00 00       	call   c00123c2 <VAS::allocatePages(int, int)>
c000f88d:	83 c4 1c             	add    esp,0x1c
c000f890:	c3                   	ret    

c000f891 <liballoc_free(void*, int)>:
c000f891:	83 ec 14             	sub    esp,0x14
c000f894:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f898:	ff 35 90 f2 02 c0    	push   DWORD PTR ds:0xc002f290
c000f89e:	e8 c9 27 00 00       	call   c001206c <VAS::freeAllocatedPages(unsigned long)>
c000f8a3:	b8 00 00 00 00       	mov    eax,0x0
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <realloc>:
c000f8ac:	83 ec 14             	sub    esp,0x14
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b7:	e8 8c 1d ff ff       	call   c0001648 <dlrealloc>
c000f8bc:	83 c4 1c             	add    esp,0x1c
c000f8bf:	c3                   	ret    

c000f8c0 <malloc>:
c000f8c0:	83 ec 18             	sub    esp,0x18
c000f8c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8c7:	e8 3f 18 ff ff       	call   c000110b <dlmalloc>
c000f8cc:	83 c4 1c             	add    esp,0x1c
c000f8cf:	c3                   	ret    

c000f8d0 <free>:
c000f8d0:	83 ec 18             	sub    esp,0x18
c000f8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8d7:	e8 d4 14 ff ff       	call   c0000db0 <dlfree>
c000f8dc:	83 c4 1c             	add    esp,0x1c
c000f8df:	c3                   	ret    

c000f8e0 <rfree>:
c000f8e0:	83 ec 18             	sub    esp,0x18
c000f8e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8e7:	e8 c4 14 ff ff       	call   c0000db0 <dlfree>
c000f8ec:	83 c4 1c             	add    esp,0x1c
c000f8ef:	c3                   	ret    

c000f8f0 <calloc>:
c000f8f0:	56                   	push   esi
c000f8f1:	53                   	push   ebx
c000f8f2:	83 ec 10             	sub    esp,0x10
c000f8f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8f9:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8fe:	53                   	push   ebx
c000f8ff:	e8 bc ff ff ff       	call   c000f8c0 <malloc>
c000f904:	89 c6                	mov    esi,eax
c000f906:	83 c4 0c             	add    esp,0xc
c000f909:	53                   	push   ebx
c000f90a:	6a 00                	push   0x0
c000f90c:	50                   	push   eax
c000f90d:	e8 5a 0e ff ff       	call   c000076c <memset>
c000f912:	89 f0                	mov    eax,esi
c000f914:	83 c4 14             	add    esp,0x14
c000f917:	5b                   	pop    ebx
c000f918:	5e                   	pop    esi
c000f919:	c3                   	ret    

c000f91a <hwTextMode_loadInData(VgaText*)>:
c000f91a:	55                   	push   ebp
c000f91b:	a1 40 e0 02 c0       	mov    eax,ds:0xc002e040
c000f920:	57                   	push   edi
c000f921:	56                   	push   esi
c000f922:	53                   	push   ebx
c000f923:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f927:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f92a:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f92d:	85 d2                	test   edx,edx
c000f92f:	7e 29                	jle    c000f95a <hwTextMode_loadInData(VgaText*)+0x40>
c000f931:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f937:	31 f6                	xor    esi,esi
c000f939:	29 cd                	sub    ebp,ecx
c000f93b:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f93e:	31 c0                	xor    eax,eax
c000f940:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f944:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f948:	40                   	inc    eax
c000f949:	83 f8 50             	cmp    eax,0x50
c000f94c:	75 f2                	jne    c000f940 <hwTextMode_loadInData(VgaText*)+0x26>
c000f94e:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f954:	46                   	inc    esi
c000f955:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f958:	7f e1                	jg     c000f93b <hwTextMode_loadInData(VgaText*)+0x21>
c000f95a:	5b                   	pop    ebx
c000f95b:	5e                   	pop    esi
c000f95c:	5f                   	pop    edi
c000f95d:	5d                   	pop    ebp
c000f95e:	c3                   	ret    

c000f95f <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f95f:	55                   	push   ebp
c000f960:	80 3d a0 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f1a0,0x0
c000f967:	57                   	push   edi
c000f968:	56                   	push   esi
c000f969:	53                   	push   ebx
c000f96a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f96e:	75 44                	jne    c000f9b4 <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f970:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f973:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f976:	8b 15 40 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e040
c000f97c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f980:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f986:	eb 08                	jmp    c000f990 <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f988:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f98b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f98e:	89 da                	mov    edx,ebx
c000f990:	83 e5 0f             	and    ebp,0xf
c000f993:	c1 e0 04             	shl    eax,0x4
c000f996:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f999:	0f b6 c0             	movzx  eax,al
c000f99c:	41                   	inc    ecx
c000f99d:	09 e8                	or     eax,ebp
c000f99f:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f9a3:	c1 e0 08             	shl    eax,0x8
c000f9a6:	09 e8                	or     eax,ebp
c000f9a8:	39 fb                	cmp    ebx,edi
c000f9aa:	66 89 02             	mov    WORD PTR [edx],ax
c000f9ad:	75 d9                	jne    c000f988 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f9af:	5b                   	pop    ebx
c000f9b0:	5e                   	pop    esi
c000f9b1:	5f                   	pop    edi
c000f9b2:	5d                   	pop    ebp
c000f9b3:	c3                   	ret    
c000f9b4:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f9bb:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f9c2:	31 c0                	xor    eax,eax
c000f9c4:	bd 02 00 00 00       	mov    ebp,0x2
c000f9c9:	eb ab                	jmp    c000f976 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f9cb <hwTextMode_showCursor(VgaText*, bool)>:
c000f9cb:	56                   	push   esi
c000f9cc:	80 3d a0 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f1a0,0x0
c000f9d3:	53                   	push   ebx
c000f9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9d8:	75 36                	jne    c000fa10 <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f9da:	84 c0                	test   al,al
c000f9dc:	74 35                	je     c000fa13 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f9de:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f9e3:	b0 0a                	mov    al,0xa
c000f9e5:	89 da                	mov    edx,ebx
c000f9e7:	ee                   	out    dx,al
c000f9e8:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f9ed:	89 ca                	mov    edx,ecx
c000f9ef:	ec                   	in     al,dx
c000f9f0:	b2 0f                	mov    dl,0xf
c000f9f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f9f6:	83 e0 c0             	and    eax,0xffffffc0
c000f9f9:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f9fc:	09 d0                	or     eax,edx
c000f9fe:	89 ca                	mov    edx,ecx
c000fa00:	ee                   	out    dx,al
c000fa01:	b0 0b                	mov    al,0xb
c000fa03:	89 da                	mov    edx,ebx
c000fa05:	ee                   	out    dx,al
c000fa06:	89 ca                	mov    edx,ecx
c000fa08:	ec                   	in     al,dx
c000fa09:	83 e0 e0             	and    eax,0xffffffe0
c000fa0c:	83 c8 0f             	or     eax,0xf
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    
c000fa13:	b0 0a                	mov    al,0xa
c000fa15:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa1a:	ee                   	out    dx,al
c000fa1b:	b0 20                	mov    al,0x20
c000fa1d:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa22:	ee                   	out    dx,al
c000fa23:	5b                   	pop    ebx
c000fa24:	5e                   	pop    esi
c000fa25:	c3                   	ret    

c000fa26 <hwTextMode_update(VgaText*)>:
c000fa26:	c3                   	ret    

c000fa27 <hwTextMode_updateCursor(VgaText*)>:
c000fa27:	56                   	push   esi
c000fa28:	80 3d a0 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f1a0,0x0
c000fa2f:	53                   	push   ebx
c000fa30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa34:	75 36                	jne    c000fa6c <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa36:	be d4 03 00 00       	mov    esi,0x3d4
c000fa3b:	b9 19 00 00 00       	mov    ecx,0x19
c000fa40:	89 f2                	mov    edx,esi
c000fa42:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa45:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa48:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa4b:	c1 e1 04             	shl    ecx,0x4
c000fa4e:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fa51:	b0 0f                	mov    al,0xf
c000fa53:	ee                   	out    dx,al
c000fa54:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa59:	88 c8                	mov    al,cl
c000fa5b:	89 da                	mov    edx,ebx
c000fa5d:	ee                   	out    dx,al
c000fa5e:	b0 0e                	mov    al,0xe
c000fa60:	89 f2                	mov    edx,esi
c000fa62:	ee                   	out    dx,al
c000fa63:	89 c8                	mov    eax,ecx
c000fa65:	89 da                	mov    edx,ebx
c000fa67:	66 c1 e8 08          	shr    ax,0x8
c000fa6b:	ee                   	out    dx,al
c000fa6c:	5b                   	pop    ebx
c000fa6d:	5e                   	pop    esi
c000fa6e:	c3                   	ret    

c000fa6f <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa73:	80 3d a0 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f1a0,0x0
c000fa7a:	75 38                	jne    c000fab4 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa7c:	ba da 03 00 00       	mov    edx,0x3da
c000fa81:	84 c0                	test   al,al
c000fa83:	75 18                	jne    c000fa9d <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa85:	ec                   	in     al,dx
c000fa86:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa8b:	b0 30                	mov    al,0x30
c000fa8d:	89 ca                	mov    edx,ecx
c000fa8f:	ee                   	out    dx,al
c000fa90:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa95:	ec                   	in     al,dx
c000fa96:	83 c8 08             	or     eax,0x8
c000fa99:	89 ca                	mov    edx,ecx
c000fa9b:	ee                   	out    dx,al
c000fa9c:	c3                   	ret    
c000fa9d:	ec                   	in     al,dx
c000fa9e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000faa3:	b0 30                	mov    al,0x30
c000faa5:	89 ca                	mov    edx,ecx
c000faa7:	ee                   	out    dx,al
c000faa8:	ba c1 03 00 00       	mov    edx,0x3c1
c000faad:	ec                   	in     al,dx
c000faae:	83 e0 f7             	and    eax,0xfffffff7
c000fab1:	89 ca                	mov    edx,ecx
c000fab3:	ee                   	out    dx,al
c000fab4:	c3                   	ret    

c000fab5 <hwTextMode_scrollScreen(VgaText*)>:
c000fab5:	55                   	push   ebp
c000fab6:	57                   	push   edi
c000fab7:	56                   	push   esi
c000fab8:	53                   	push   ebx
c000fab9:	83 ec 1c             	sub    esp,0x1c
c000fabc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fac0:	80 3d a0 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f1a0,0x0
c000fac7:	74 0e                	je     c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fac9:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fad0:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fad7:	a1 40 e0 02 c0       	mov    eax,ds:0xc002e040
c000fadc:	bd 02 00 00 00       	mov    ebp,0x2
c000fae1:	05 a0 00 00 00       	add    eax,0xa0
c000fae6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000faea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000faee:	31 c0                	xor    eax,eax
c000faf0:	eb 0b                	jmp    c000fafd <hwTextMode_scrollScreen(VgaText*)+0x48>
c000faf2:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faf8:	74 51                	je     c000fb4b <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fafa:	43                   	inc    ebx
c000fafb:	89 f0                	mov    eax,esi
c000fafd:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fb03:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fb09:	88 13                	mov    BYTE PTR [ebx],dl
c000fb0b:	8d 70 01             	lea    esi,[eax+0x1]
c000fb0e:	83 fd 18             	cmp    ebp,0x18
c000fb11:	75 df                	jne    c000faf2 <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fb13:	a8 01                	test   al,0x1
c000fb15:	75 13                	jne    c000fb2a <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fb17:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb1a:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb20:	75 d8                	jne    c000fafa <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb22:	83 c4 1c             	add    esp,0x1c
c000fb25:	5b                   	pop    ebx
c000fb26:	5e                   	pop    esi
c000fb27:	5f                   	pop    edi
c000fb28:	5d                   	pop    ebp
c000fb29:	c3                   	ret    
c000fb2a:	83 ec 08             	sub    esp,0x8
c000fb2d:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fb31:	50                   	push   eax
c000fb32:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb36:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb3a:	50                   	push   eax
c000fb3b:	e8 30 0c 00 00       	call   c0010770 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	88 07                	mov    BYTE PTR [edi],al
c000fb45:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb49:	eb cf                	jmp    c000fb1a <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb4b:	45                   	inc    ebp
c000fb4c:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb54:	eb 94                	jmp    c000faea <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb56:	57                   	push   edi
c000fb57:	80 3d a0 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f1a0,0x0
c000fb5e:	56                   	push   esi
c000fb5f:	53                   	push   ebx
c000fb60:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb64:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb68:	75 62                	jne    c000fbcc <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fb6a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb6f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb74:	83 ec 08             	sub    esp,0x8
c000fb77:	52                   	push   edx
c000fb78:	50                   	push   eax
c000fb79:	e8 f2 0b 00 00       	call   c0010770 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb7e:	5a                   	pop    edx
c000fb7f:	0f b6 c0             	movzx  eax,al
c000fb82:	59                   	pop    ecx
c000fb83:	50                   	push   eax
c000fb84:	0f be c3             	movsx  eax,bl
c000fb87:	50                   	push   eax
c000fb88:	e8 89 0c 00 00       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb8d:	83 c4 10             	add    esp,0x10
c000fb90:	8b 35 40 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e040
c000fb96:	80 3d a0 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f1a0,0x0
c000fb9d:	74 07                	je     c000fba6 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb9f:	66 0f be c3          	movsx  ax,bl
c000fba3:	80 cc 02             	or     ah,0x2
c000fba6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbaa:	ba 19 00 00 00       	mov    edx,0x19
c000fbaf:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fbb2:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fbb5:	8d 14 92             	lea    edx,[edx+edx*4]
c000fbb8:	c1 e1 04             	shl    ecx,0x4
c000fbbb:	c1 e2 04             	shl    edx,0x4
c000fbbe:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fbc2:	01 ca                	add    edx,ecx
c000fbc4:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fbc8:	5b                   	pop    ebx
c000fbc9:	5e                   	pop    esi
c000fbca:	5f                   	pop    edi
c000fbcb:	c3                   	ret    
c000fbcc:	b8 02 00 00 00       	mov    eax,0x2
c000fbd1:	31 d2                	xor    edx,edx
c000fbd3:	eb 9f                	jmp    c000fb74 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fbd5 <setupTextMode()>:
c000fbd5:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fbda:	83 e0 30             	and    eax,0x30
c000fbdd:	66 83 f8 30          	cmp    ax,0x30
c000fbe1:	75 11                	jne    c000fbf4 <setupTextMode()+0x1f>
c000fbe3:	81 2d 40 e0 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002e040,0x8000
c000fbed:	c6 05 a0 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f1a0,0x1
c000fbf4:	c7 05 d8 f1 02 c0 6f fa 00 c0 	mov    DWORD PTR ds:0xc002f1d8,0xc000fa6f
c000fbfe:	c7 05 c4 f1 02 c0 1a f9 00 c0 	mov    DWORD PTR ds:0xc002f1c4,0xc000f91a
c000fc08:	c7 05 c0 f1 02 c0 5f f9 00 c0 	mov    DWORD PTR ds:0xc002f1c0,0xc000f95f
c000fc12:	c7 05 cc f1 02 c0 b5 fa 00 c0 	mov    DWORD PTR ds:0xc002f1cc,0xc000fab5
c000fc1c:	c7 05 d4 f1 02 c0 cb f9 00 c0 	mov    DWORD PTR ds:0xc002f1d4,0xc000f9cb
c000fc26:	c7 05 c8 f1 02 c0 26 fa 00 c0 	mov    DWORD PTR ds:0xc002f1c8,0xc000fa26
c000fc30:	c7 05 d0 f1 02 c0 27 fa 00 c0 	mov    DWORD PTR ds:0xc002f1d0,0xc000fa27
c000fc3a:	c7 05 dc f1 02 c0 56 fb 00 c0 	mov    DWORD PTR ds:0xc002f1dc,0xc000fb56
c000fc44:	c3                   	ret    

c000fc45 <kernel_main>:
c000fc45:	57                   	push   edi
c000fc46:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc4b:	56                   	push   esi
c000fc4c:	89 fa                	mov    edx,edi
c000fc4e:	53                   	push   ebx
c000fc4f:	31 f6                	xor    esi,esi
c000fc51:	83 ec 2c             	sub    esp,0x2c
c000fc54:	89 f0                	mov    eax,esi
c000fc56:	ee                   	out    dx,al
c000fc57:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc5c:	b0 80                	mov    al,0x80
c000fc5e:	89 da                	mov    edx,ebx
c000fc60:	ee                   	out    dx,al
c000fc61:	b1 03                	mov    cl,0x3
c000fc63:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc68:	88 c8                	mov    al,cl
c000fc6a:	ee                   	out    dx,al
c000fc6b:	89 f0                	mov    eax,esi
c000fc6d:	89 fa                	mov    edx,edi
c000fc6f:	ee                   	out    dx,al
c000fc70:	88 c8                	mov    al,cl
c000fc72:	89 da                	mov    edx,ebx
c000fc74:	ee                   	out    dx,al
c000fc75:	b0 c7                	mov    al,0xc7
c000fc77:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc7c:	ee                   	out    dx,al
c000fc7d:	b0 0b                	mov    al,0xb
c000fc7f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc84:	ee                   	out    dx,al
c000fc85:	68 e4 ad 02 c0       	push   0xc002ade4
c000fc8a:	e8 00 32 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000fc8f:	e8 6e 09 00 00       	call   c0010602 <installVgaTextImplementation()>
c000fc94:	e8 3c ff ff ff       	call   c000fbd5 <setupTextMode()>
c000fc99:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc9e:	05 ff 0f 00 00       	add    eax,0xfff
c000fca3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fca8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcab:	e8 f5 03 00 00       	call   c00100a5 <Phys::physicalMemorySetup(unsigned int)>
c000fcb0:	e8 93 1f 00 00       	call   c0011c48 <Virt::virtualMemorySetup()>
c000fcb5:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fcbb:	83 c4 10             	add    esp,0x10
c000fcbe:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fcc4:	75 0e                	jne    c000fcd4 <kernel_main+0x8f>
c000fcc6:	89 d8                	mov    eax,ebx
c000fcc8:	25 48 03 00 00       	and    eax,0x348
c000fccd:	3d 00 03 00 00       	cmp    eax,0x300
c000fcd2:	74 10                	je     c000fce4 <kernel_main+0x9f>
c000fcd4:	83 ec 0c             	sub    esp,0xc
c000fcd7:	68 75 c7 02 c0       	push   0xc002c775
c000fcdc:	e8 16 ac 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c000fce1:	83 c4 10             	add    esp,0x10
c000fce4:	83 ec 0c             	sub    esp,0xc
c000fce7:	89 1d 20 f1 02 c0    	mov    DWORD PTR ds:0xc002f120,ebx
c000fced:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcf1:	53                   	push   ebx
c000fcf2:	e8 9d 21 00 00       	call   c0011e94 <VAS::VAS()>
c000fcf7:	89 1d 90 f2 02 c0    	mov    DWORD PTR ds:0xc002f290,ebx
c000fcfd:	e8 1e 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fd02:	c7 04 24 fb ad 02 c0 	mov    DWORD PTR [esp],0xc002adfb
c000fd09:	e8 81 31 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000fd0e:	e8 b4 1f 00 00       	call   c0011cc7 <Virt::swappingSetup()>
c000fd13:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd1a:	e8 a1 fb ff ff       	call   c000f8c0 <malloc>
c000fd1f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd22:	89 c6                	mov    esi,eax
c000fd24:	e8 8f ea ff ff       	call   c000e7b8 <Computer::Computer()>
c000fd29:	58                   	pop    eax
c000fd2a:	89 35 08 f1 02 c0    	mov    DWORD PTR ds:0xc002f108,esi
c000fd30:	5a                   	pop    edx
c000fd31:	56                   	push   esi
c000fd32:	68 18 ae 02 c0       	push   0xc002ae18
c000fd37:	e8 53 31 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000fd3c:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c000fd41:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd43:	6a 00                	push   0x0
c000fd45:	6a 00                	push   0x0
c000fd47:	6a 00                	push   0x0
c000fd49:	50                   	push   eax
c000fd4a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd4d:	83 c4 14             	add    esp,0x14
c000fd50:	53                   	push   ebx
c000fd51:	e8 ee 23 00 00       	call   c0012144 <VAS::~VAS()>
c000fd56:	c7 04 24 2b ae 02 c0 	mov    DWORD PTR [esp],0xc002ae2b
c000fd5d:	e8 95 ab 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c000fd62:	83 c4 30             	add    esp,0x30
c000fd65:	5b                   	pop    ebx
c000fd66:	5e                   	pop    esi
c000fd67:	5f                   	pop    edi
c000fd68:	c3                   	ret    

c000fd69 <Phys::allocateDMA(unsigned long)>:
c000fd69:	55                   	push   ebp
c000fd6a:	31 d2                	xor    edx,edx
c000fd6c:	57                   	push   edi
c000fd6d:	31 ed                	xor    ebp,ebp
c000fd6f:	56                   	push   esi
c000fd70:	31 c9                	xor    ecx,ecx
c000fd72:	53                   	push   ebx
c000fd73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd77:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd7d:	31 c0                	xor    eax,eax
c000fd7f:	c1 ee 0c             	shr    esi,0xc
c000fd82:	eb 17                	jmp    c000fd9b <Phys::allocateDMA(unsigned long)+0x32>
c000fd84:	85 c9                	test   ecx,ecx
c000fd86:	75 04                	jne    c000fd8c <Phys::allocateDMA(unsigned long)+0x23>
c000fd88:	89 d5                	mov    ebp,edx
c000fd8a:	89 d0                	mov    eax,edx
c000fd8c:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd8f:	39 de                	cmp    esi,ebx
c000fd91:	74 20                	je     c000fdb3 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd93:	42                   	inc    edx
c000fd94:	89 d9                	mov    ecx,ebx
c000fd96:	83 fa 2f             	cmp    edx,0x2f
c000fd99:	7f 11                	jg     c000fdac <Phys::allocateDMA(unsigned long)+0x43>
c000fd9b:	80 ba 60 f1 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0ea0],0x0
c000fda2:	74 e0                	je     c000fd84 <Phys::allocateDMA(unsigned long)+0x1b>
c000fda4:	31 c9                	xor    ecx,ecx
c000fda6:	42                   	inc    edx
c000fda7:	83 fa 2f             	cmp    edx,0x2f
c000fdaa:	7e ef                	jle    c000fd9b <Phys::allocateDMA(unsigned long)+0x32>
c000fdac:	5b                   	pop    ebx
c000fdad:	31 c0                	xor    eax,eax
c000fdaf:	5e                   	pop    esi
c000fdb0:	5f                   	pop    edi
c000fdb1:	5d                   	pop    ebp
c000fdb2:	c3                   	ret    
c000fdb3:	8d 14 30             	lea    edx,[eax+esi*1]
c000fdb6:	89 d7                	mov    edi,edx
c000fdb8:	4f                   	dec    edi
c000fdb9:	79 03                	jns    c000fdbe <Phys::allocateDMA(unsigned long)+0x55>
c000fdbb:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fdbe:	c1 ff 04             	sar    edi,0x4
c000fdc1:	89 c2                	mov    edx,eax
c000fdc3:	c1 fa 04             	sar    edx,0x4
c000fdc6:	39 fa                	cmp    edx,edi
c000fdc8:	75 2f                	jne    c000fdf9 <Phys::allocateDMA(unsigned long)+0x90>
c000fdca:	85 db                	test   ebx,ebx
c000fdcc:	74 1a                	je     c000fde8 <Phys::allocateDMA(unsigned long)+0x7f>
c000fdce:	be 60 f1 02 c0       	mov    esi,0xc002f160
c000fdd3:	8d 90 60 f1 02 c0    	lea    edx,[eax-0x3ffd0ea0]
c000fdd9:	f7 d6                	not    esi
c000fddb:	29 c6                	sub    esi,eax
c000fddd:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fde0:	42                   	inc    edx
c000fde1:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fde4:	39 d9                	cmp    ecx,ebx
c000fde6:	7f f5                	jg     c000fddd <Phys::allocateDMA(unsigned long)+0x74>
c000fde8:	85 ff                	test   edi,edi
c000fdea:	74 13                	je     c000fdff <Phys::allocateDMA(unsigned long)+0x96>
c000fdec:	5b                   	pop    ebx
c000fded:	05 50 20 0c 00       	add    eax,0xc2050
c000fdf2:	5e                   	pop    esi
c000fdf3:	c1 e0 0c             	shl    eax,0xc
c000fdf6:	5f                   	pop    edi
c000fdf7:	5d                   	pop    ebp
c000fdf8:	c3                   	ret    
c000fdf9:	89 ea                	mov    edx,ebp
c000fdfb:	31 c9                	xor    ecx,ecx
c000fdfd:	eb a7                	jmp    c000fda6 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdff:	5b                   	pop    ebx
c000fe00:	c1 e0 0c             	shl    eax,0xc
c000fe03:	5e                   	pop    esi
c000fe04:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fe09:	5f                   	pop    edi
c000fe0a:	5d                   	pop    ebp
c000fe0b:	c3                   	ret    

c000fe0c <Phys::freeDMA(unsigned long, unsigned long)>:
c000fe0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe10:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe14:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe1a:	c1 e9 0c             	shr    ecx,0xc
c000fe1d:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe22:	76 25                	jbe    c000fe49 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe24:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe29:	c1 e8 0c             	shr    eax,0xc
c000fe2c:	8d 50 10             	lea    edx,[eax+0x10]
c000fe2f:	85 c9                	test   ecx,ecx
c000fe31:	74 15                	je     c000fe48 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe33:	8d 82 60 f1 02 c0    	lea    eax,[edx-0x3ffd0ea0]
c000fe39:	8d 94 11 60 f1 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0ea0]
c000fe40:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe43:	40                   	inc    eax
c000fe44:	39 d0                	cmp    eax,edx
c000fe46:	75 f8                	jne    c000fe40 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe48:	c3                   	ret    
c000fe49:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe4f:	c1 ea 0c             	shr    edx,0xc
c000fe52:	eb db                	jmp    c000fe2f <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe54 <Phys::setPageState(unsigned long, bool)>:
c000fe54:	56                   	push   esi
c000fe55:	ba 01 00 00 00       	mov    edx,0x1
c000fe5a:	53                   	push   ebx
c000fe5b:	8b 35 38 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e038
c000fe61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe69:	89 c8                	mov    eax,ecx
c000fe6b:	83 e1 07             	and    ecx,0x7
c000fe6e:	c1 e8 03             	shr    eax,0x3
c000fe71:	d3 e3                	shl    ebx,cl
c000fe73:	01 c6                	add    esi,eax
c000fe75:	d3 e2                	shl    edx,cl
c000fe77:	f7 d2                	not    edx
c000fe79:	20 16                	and    BYTE PTR [esi],dl
c000fe7b:	03 05 38 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e038
c000fe81:	08 18                	or     BYTE PTR [eax],bl
c000fe83:	5b                   	pop    ebx
c000fe84:	5e                   	pop    esi
c000fe85:	c3                   	ret    

c000fe86 <Phys::getPageState(unsigned long)>:
c000fe86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe8a:	8b 15 38 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e038
c000fe90:	89 c8                	mov    eax,ecx
c000fe92:	83 e1 07             	and    ecx,0x7
c000fe95:	c1 e8 03             	shr    eax,0x3
c000fe98:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe9c:	d3 f8                	sar    eax,cl
c000fe9e:	83 e0 01             	and    eax,0x1
c000fea1:	c3                   	ret    

c000fea2 <Phys::freePage(unsigned long)>:
c000fea2:	53                   	push   ebx
c000fea3:	83 ec 08             	sub    esp,0x8
c000fea6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000feaa:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000feb0:	76 57                	jbe    c000ff09 <Phys::freePage(unsigned long)+0x67>
c000feb2:	c1 eb 0c             	shr    ebx,0xc
c000feb5:	53                   	push   ebx
c000feb6:	e8 cb ff ff ff       	call   c000fe86 <Phys::getPageState(unsigned long)>
c000febb:	5a                   	pop    edx
c000febc:	84 c0                	test   al,al
c000febe:	74 5b                	je     c000ff1b <Phys::freePage(unsigned long)+0x79>
c000fec0:	a1 50 f1 02 c0       	mov    eax,ds:0xc002f150
c000fec5:	48                   	dec    eax
c000fec6:	a3 50 f1 02 c0       	mov    ds:0xc002f150,eax
c000fecb:	8d 04 80             	lea    eax,[eax+eax*4]
c000fece:	8d 04 80             	lea    eax,[eax+eax*4]
c000fed1:	c1 e0 02             	shl    eax,0x2
c000fed4:	99                   	cdq    
c000fed5:	f7 3d 54 f1 02 c0    	idiv   DWORD PTR ds:0xc002f154
c000fedb:	39 05 4c f1 02 c0    	cmp    DWORD PTR ds:0xc002f14c,eax
c000fee1:	75 13                	jne    c000fef6 <Phys::freePage(unsigned long)+0x54>
c000fee3:	83 ec 08             	sub    esp,0x8
c000fee6:	6a 00                	push   0x0
c000fee8:	53                   	push   ebx
c000fee9:	e8 66 ff ff ff       	call   c000fe54 <Phys::setPageState(unsigned long, bool)>
c000feee:	83 c4 10             	add    esp,0x10
c000fef1:	83 c4 08             	add    esp,0x8
c000fef4:	5b                   	pop    ebx
c000fef5:	c3                   	ret    
c000fef6:	83 ec 0c             	sub    esp,0xc
c000fef9:	a3 4c f1 02 c0       	mov    ds:0xc002f14c,eax
c000fefe:	50                   	push   eax
c000feff:	e8 2c 0a 00 00       	call   c0010930 <VgaText::updateRAMUsageDisplay(int)>
c000ff04:	83 c4 10             	add    esp,0x10
c000ff07:	eb da                	jmp    c000fee3 <Phys::freePage(unsigned long)+0x41>
c000ff09:	68 00 10 00 00       	push   0x1000
c000ff0e:	53                   	push   ebx
c000ff0f:	e8 f8 fe ff ff       	call   c000fe0c <Phys::freeDMA(unsigned long, unsigned long)>
c000ff14:	59                   	pop    ecx
c000ff15:	5b                   	pop    ebx
c000ff16:	83 c4 08             	add    esp,0x8
c000ff19:	5b                   	pop    ebx
c000ff1a:	c3                   	ret    
c000ff1b:	c7 44 24 10 46 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae46
c000ff23:	83 c4 08             	add    esp,0x8
c000ff26:	5b                   	pop    ebx
c000ff27:	e9 cb a9 00 00       	jmp    c001a8f7 <Krnl::panic(char const*)>

c000ff2c <Phys::allocatePage()>:
c000ff2c:	56                   	push   esi
c000ff2d:	53                   	push   ebx
c000ff2e:	51                   	push   ecx
c000ff2f:	8b 35 44 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f144
c000ff35:	89 f3                	mov    ebx,esi
c000ff37:	eb 0a                	jmp    c000ff43 <Phys::allocatePage()+0x17>
c000ff39:	89 1d 44 f1 02 c0    	mov    DWORD PTR ds:0xc002f144,ebx
c000ff3f:	39 de                	cmp    esi,ebx
c000ff41:	74 24                	je     c000ff67 <Phys::allocatePage()+0x3b>
c000ff43:	53                   	push   ebx
c000ff44:	e8 3d ff ff ff       	call   c000fe86 <Phys::getPageState(unsigned long)>
c000ff49:	5a                   	pop    edx
c000ff4a:	84 c0                	test   al,al
c000ff4c:	74 77                	je     c000ffc5 <Phys::allocatePage()+0x99>
c000ff4e:	43                   	inc    ebx
c000ff4f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff55:	75 e2                	jne    c000ff39 <Phys::allocatePage()+0xd>
c000ff57:	31 db                	xor    ebx,ebx
c000ff59:	c7 05 44 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f144,0x0
c000ff63:	39 de                	cmp    esi,ebx
c000ff65:	75 dc                	jne    c000ff43 <Phys::allocatePage()+0x17>
c000ff67:	83 ec 0c             	sub    esp,0xc
c000ff6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff6f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff72:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff78:	e8 3f 2c 00 00       	call   c0012bbc <VAS::scanForEviction()>
c000ff7d:	83 c4 10             	add    esp,0x10
c000ff80:	85 c0                	test   eax,eax
c000ff82:	75 76                	jne    c000fffa <Phys::allocatePage()+0xce>
c000ff84:	83 ec 0c             	sub    esp,0xc
c000ff87:	68 5c ae 02 c0       	push   0xc002ae5c
c000ff8c:	e8 fe 2e 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c000ff91:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff98:	e8 cc fd ff ff       	call   c000fd69 <Phys::allocateDMA(unsigned long)>
c000ff9d:	83 c4 10             	add    esp,0x10
c000ffa0:	85 c0                	test   eax,eax
c000ffa2:	75 56                	jne    c000fffa <Phys::allocatePage()+0xce>
c000ffa4:	83 ec 0c             	sub    esp,0xc
c000ffa7:	68 6d ae 02 c0       	push   0xc002ae6d
c000ffac:	e8 46 a9 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c000ffb1:	83 c4 10             	add    esp,0x10
c000ffb4:	8b 1d 44 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f144
c000ffba:	53                   	push   ebx
c000ffbb:	e8 c6 fe ff ff       	call   c000fe86 <Phys::getPageState(unsigned long)>
c000ffc0:	5a                   	pop    edx
c000ffc1:	84 c0                	test   al,al
c000ffc3:	75 89                	jne    c000ff4e <Phys::allocatePage()+0x22>
c000ffc5:	6a 01                	push   0x1
c000ffc7:	53                   	push   ebx
c000ffc8:	e8 87 fe ff ff       	call   c000fe54 <Phys::setPageState(unsigned long, bool)>
c000ffcd:	a1 50 f1 02 c0       	mov    eax,ds:0xc002f150
c000ffd2:	59                   	pop    ecx
c000ffd3:	40                   	inc    eax
c000ffd4:	5b                   	pop    ebx
c000ffd5:	a3 50 f1 02 c0       	mov    ds:0xc002f150,eax
c000ffda:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffdd:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffe0:	c1 e0 02             	shl    eax,0x2
c000ffe3:	99                   	cdq    
c000ffe4:	f7 3d 54 f1 02 c0    	idiv   DWORD PTR ds:0xc002f154
c000ffea:	39 05 4c f1 02 c0    	cmp    DWORD PTR ds:0xc002f14c,eax
c000fff0:	75 0c                	jne    c000fffe <Phys::allocatePage()+0xd2>
c000fff2:	a1 44 f1 02 c0       	mov    eax,ds:0xc002f144
c000fff7:	c1 e0 0c             	shl    eax,0xc
c000fffa:	5a                   	pop    edx
c000fffb:	5b                   	pop    ebx
c000fffc:	5e                   	pop    esi
c000fffd:	c3                   	ret    
c000fffe:	83 ec 0c             	sub    esp,0xc
c0010001:	a3 4c f1 02 c0       	mov    ds:0xc002f14c,eax
c0010006:	50                   	push   eax
c0010007:	e8 24 09 00 00       	call   c0010930 <VgaText::updateRAMUsageDisplay(int)>
c001000c:	83 c4 10             	add    esp,0x10
c001000f:	eb e1                	jmp    c000fff2 <Phys::allocatePage()+0xc6>

c0010011 <Phys::allocateContiguousPages(int)>:
c0010011:	57                   	push   edi
c0010012:	56                   	push   esi
c0010013:	53                   	push   ebx
c0010014:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010018:	fa                   	cli    
c0010019:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001001f:	31 db                	xor    ebx,ebx
c0010021:	85 db                	test   ebx,ebx
c0010023:	75 11                	jne    c0010036 <Phys::allocateContiguousPages(int)+0x25>
c0010025:	e8 02 ff ff ff       	call   c000ff2c <Phys::allocatePage()>
c001002a:	83 fe 01             	cmp    esi,0x1
c001002d:	89 c7                	mov    edi,eax
c001002f:	74 21                	je     c0010052 <Phys::allocateContiguousPages(int)+0x41>
c0010031:	bb 01 00 00 00       	mov    ebx,0x1
c0010036:	e8 f1 fe ff ff       	call   c000ff2c <Phys::allocatePage()>
c001003b:	89 da                	mov    edx,ebx
c001003d:	c1 e2 0c             	shl    edx,0xc
c0010040:	01 fa                	add    edx,edi
c0010042:	39 c2                	cmp    edx,eax
c0010044:	74 20                	je     c0010066 <Phys::allocateContiguousPages(int)+0x55>
c0010046:	bb 01 00 00 00       	mov    ebx,0x1
c001004b:	89 c7                	mov    edi,eax
c001004d:	83 fe 01             	cmp    esi,0x1
c0010050:	75 e4                	jne    c0010036 <Phys::allocateContiguousPages(int)+0x25>
c0010052:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0010057:	48                   	dec    eax
c0010058:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001005d:	75 01                	jne    c0010060 <Phys::allocateContiguousPages(int)+0x4f>
c001005f:	fb                   	sti    
c0010060:	89 f8                	mov    eax,edi
c0010062:	5b                   	pop    ebx
c0010063:	5e                   	pop    esi
c0010064:	5f                   	pop    edi
c0010065:	c3                   	ret    
c0010066:	43                   	inc    ebx
c0010067:	39 f3                	cmp    ebx,esi
c0010069:	75 b6                	jne    c0010021 <Phys::allocateContiguousPages(int)+0x10>
c001006b:	eb e5                	jmp    c0010052 <Phys::allocateContiguousPages(int)+0x41>

c001006d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001006d:	56                   	push   esi
c001006e:	53                   	push   ebx
c001006f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010073:	39 1d 48 f1 02 c0    	cmp    DWORD PTR ds:0xc002f148,ebx
c0010079:	73 06                	jae    c0010081 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001007b:	89 1d 48 f1 02 c0    	mov    DWORD PTR ds:0xc002f148,ebx
c0010081:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010085:	c1 eb 0c             	shr    ebx,0xc
c0010088:	c1 e8 0c             	shr    eax,0xc
c001008b:	39 d8                	cmp    eax,ebx
c001008d:	73 13                	jae    c00100a2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001008f:	6a 00                	push   0x0
c0010091:	8d 70 01             	lea    esi,[eax+0x1]
c0010094:	50                   	push   eax
c0010095:	e8 ba fd ff ff       	call   c000fe54 <Phys::setPageState(unsigned long, bool)>
c001009a:	5a                   	pop    edx
c001009b:	89 f0                	mov    eax,esi
c001009d:	59                   	pop    ecx
c001009e:	39 f3                	cmp    ebx,esi
c00100a0:	75 ed                	jne    c001008f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100a2:	5b                   	pop    ebx
c00100a3:	5e                   	pop    esi
c00100a4:	c3                   	ret    

c00100a5 <Phys::physicalMemorySetup(unsigned int)>:
c00100a5:	55                   	push   ebp
c00100a6:	57                   	push   edi
c00100a7:	56                   	push   esi
c00100a8:	53                   	push   ebx
c00100a9:	31 db                	xor    ebx,ebx
c00100ab:	83 ec 40             	sub    esp,0x40
c00100ae:	6a 30                	push   0x30
c00100b0:	6a 00                	push   0x0
c00100b2:	68 60 f1 02 c0       	push   0xc002f160
c00100b7:	e8 b0 06 ff ff       	call   c000076c <memset>
c00100bc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100c0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100c5:	05 00 10 00 00       	add    eax,0x1000
c00100ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100ce:	83 c4 10             	add    esp,0x10
c00100d1:	83 ec 08             	sub    esp,0x8
c00100d4:	6a 01                	push   0x1
c00100d6:	53                   	push   ebx
c00100d7:	43                   	inc    ebx
c00100d8:	e8 77 fd ff ff       	call   c000fe54 <Phys::setPageState(unsigned long, bool)>
c00100dd:	83 c4 10             	add    esp,0x10
c00100e0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100e6:	75 e9                	jne    c00100d1 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100e8:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100ef:	66 85 c0             	test   ax,ax
c00100f2:	0f 84 8e 01 00 00    	je     c0010286 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100fc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010104:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010108:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001010d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010111:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010119:	eb 15                	jmp    c0010130 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001011b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001011f:	83 c3 18             	add    ebx,0x18
c0010122:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010126:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001012a:	0f 84 66 01 00 00    	je     c0010296 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010130:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010133:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010136:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010139:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001013d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010141:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010143:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010146:	01 f0                	add    eax,esi
c0010148:	55                   	push   ebp
c0010149:	11 fa                	adc    edx,edi
c001014b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001014f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010153:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010157:	56                   	push   esi
c0010158:	68 a8 ae 02 c0       	push   0xc002aea8
c001015d:	e8 2d 2d 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0010162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010166:	83 c4 10             	add    esp,0x10
c0010169:	09 f8                	or     eax,edi
c001016b:	0f 85 25 01 00 00    	jne    c0010296 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010171:	4d                   	dec    ebp
c0010172:	75 a7                	jne    c001011b <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010174:	ba 00 00 08 00       	mov    edx,0x80000
c0010179:	89 c1                	mov    ecx,eax
c001017b:	39 f2                	cmp    edx,esi
c001017d:	19 f9                	sbb    ecx,edi
c001017f:	0f 82 a7 00 00 00    	jb     c001022c <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010185:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010189:	89 c1                	mov    ecx,eax
c001018b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001018f:	0f 83 97 00 00 00    	jae    c001022c <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010195:	ba 00 00 0a 00       	mov    edx,0xa0000
c001019a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001019e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a2:	39 fa                	cmp    edx,edi
c00101a4:	19 e8                	sbb    eax,ebp
c00101a6:	0f 82 14 01 00 00    	jb     c00102c0 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101b0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b4:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101ba:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101bf:	83 d5 ff             	adc    ebp,0xffffffff
c00101c2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101c6:	31 c0                	xor    eax,eax
c00101c8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101cc:	39 fa                	cmp    edx,edi
c00101ce:	89 c1                	mov    ecx,eax
c00101d0:	19 e9                	sbb    ecx,ebp
c00101d2:	0f 83 43 ff ff ff    	jae    c001011b <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d8:	be 00 00 08 00       	mov    esi,0x80000
c00101dd:	50                   	push   eax
c00101de:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101e2:	57                   	push   edi
c00101e3:	56                   	push   esi
c00101e4:	68 cc ae 02 c0       	push   0xc002aecc
c00101e9:	e8 a1 2c 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00101ee:	5a                   	pop    edx
c00101ef:	59                   	pop    ecx
c00101f0:	57                   	push   edi
c00101f1:	56                   	push   esi
c00101f2:	e8 76 fe ff ff       	call   c001006d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101f7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101ff:	83 c4 0c             	add    esp,0xc
c0010202:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010206:	03 05 54 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f154
c001020c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010213:	a3 54 f1 02 c0       	mov    ds:0xc002f154,eax
c0010218:	52                   	push   edx
c0010219:	50                   	push   eax
c001021a:	68 89 ae 02 c0       	push   0xc002ae89
c001021f:	e8 6b 2c 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0010224:	83 c4 10             	add    esp,0x10
c0010227:	e9 ef fe ff ff       	jmp    c001011b <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010234:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010238:	39 ea                	cmp    edx,ebp
c001023a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001023e:	0f 82 d7 fe ff ff    	jb     c001011b <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010244:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010249:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001024d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010251:	0f 83 c4 fe ff ff    	jae    c001011b <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010257:	39 ee                	cmp    esi,ebp
c0010259:	89 f8                	mov    eax,edi
c001025b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001025f:	0f 83 78 ff ff ff    	jae    c00101dd <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010269:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001026d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010271:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010275:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010279:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001027d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010281:	e9 57 ff ff ff       	jmp    c00101dd <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010286:	83 ec 0c             	sub    esp,0xc
c0010289:	68 7b ae 02 c0       	push   0xc002ae7b
c001028e:	e8 64 a6 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0010293:	83 c4 10             	add    esp,0x10
c0010296:	bb 40 01 00 00       	mov    ebx,0x140
c001029b:	83 ec 08             	sub    esp,0x8
c001029e:	6a 00                	push   0x0
c00102a0:	53                   	push   ebx
c00102a1:	43                   	inc    ebx
c00102a2:	e8 ad fb ff ff       	call   c000fe54 <Phys::setPageState(unsigned long, bool)>
c00102a7:	ff 05 54 f1 02 c0    	inc    DWORD PTR ds:0xc002f154
c00102ad:	83 c4 10             	add    esp,0x10
c00102b0:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102b6:	75 e3                	jne    c001029b <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102b8:	83 c4 3c             	add    esp,0x3c
c00102bb:	5b                   	pop    ebx
c00102bc:	5e                   	pop    esi
c00102bd:	5f                   	pop    edi
c00102be:	5d                   	pop    ebp
c00102bf:	c3                   	ret    
c00102c0:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102d0:	e9 d7 fe ff ff       	jmp    c00101ac <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102d5:	90                   	nop

c00102d6 <Pipe::isAtty()>:
c00102d6:	31 c0                	xor    eax,eax
c00102d8:	c3                   	ret    
c00102d9:	90                   	nop

c00102da <Pipe::~Pipe()>:
c00102da:	83 ec 0c             	sub    esp,0xc
c00102dd:	ba 38 af 02 c0       	mov    edx,0xc002af38
c00102e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e6:	89 10                	mov    DWORD PTR [eax],edx
c00102e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ec:	83 ec 0c             	sub    esp,0xc
c00102ef:	50                   	push   eax
c00102f0:	e8 33 15 00 00       	call   c0011828 <UnixFile::~UnixFile()>
c00102f5:	83 c4 10             	add    esp,0x10
c00102f8:	90                   	nop
c00102f9:	83 c4 0c             	add    esp,0xc
c00102fc:	c3                   	ret    
c00102fd:	90                   	nop

c00102fe <Pipe::~Pipe()>:
c00102fe:	83 ec 0c             	sub    esp,0xc
c0010301:	83 ec 0c             	sub    esp,0xc
c0010304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010308:	e8 cd ff ff ff       	call   c00102da <Pipe::~Pipe()>
c001030d:	83 c4 10             	add    esp,0x10
c0010310:	83 ec 08             	sub    esp,0x8
c0010313:	6a 20                	push   0x20
c0010315:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010319:	e8 91 2a 00 00       	call   c0012daf <operator delete(void*, unsigned long)>
c001031e:	83 c4 10             	add    esp,0x10
c0010321:	83 c4 0c             	add    esp,0xc
c0010324:	c3                   	ret    
c0010325:	90                   	nop

c0010326 <Pipe::read(unsigned long long, void*, int*)>:
c0010326:	55                   	push   ebp
c0010327:	57                   	push   edi
c0010328:	56                   	push   esi
c0010329:	53                   	push   ebx
c001032a:	83 ec 1c             	sub    esp,0x1c
c001032d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010331:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010335:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010339:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001033c:	89 c8                	mov    eax,ecx
c001033e:	99                   	cdq    
c001033f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010343:	74 24                	je     c0010369 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010345:	39 f9                	cmp    ecx,edi
c0010347:	89 d1                	mov    ecx,edx
c0010349:	19 f1                	sbb    ecx,esi
c001034b:	73 1c                	jae    c0010369 <Pipe::read(unsigned long long, void*, int*)+0x43>
c001034d:	fa                   	cli    
c001034e:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c0010354:	e8 8b e3 00 00       	call   c001e6e4 <schedule()>
c0010359:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001035e:	48                   	dec    eax
c001035f:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c0010364:	75 d3                	jne    c0010339 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010366:	fb                   	sti    
c0010367:	eb d0                	jmp    c0010339 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010369:	39 f8                	cmp    eax,edi
c001036b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001036e:	89 d7                	mov    edi,edx
c0010370:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010374:	19 f7                	sbb    edi,esi
c0010376:	73 07                	jae    c001037f <Pipe::read(unsigned long long, void*, int*)+0x59>
c0010378:	89 04 24             	mov    DWORD PTR [esp],eax
c001037b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001037f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0010382:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010385:	29 d0                	sub    eax,edx
c0010387:	89 c7                	mov    edi,eax
c0010389:	c1 ff 1f             	sar    edi,0x1f
c001038c:	39 04 24             	cmp    DWORD PTR [esp],eax
c001038f:	89 f9                	mov    ecx,edi
c0010391:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010395:	19 cf                	sbb    edi,ecx
c0010397:	73 03                	jae    c001039c <Pipe::read(unsigned long long, void*, int*)+0x76>
c0010399:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001039c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001039f:	89 f9                	mov    ecx,edi
c00103a1:	29 c1                	sub    ecx,eax
c00103a3:	85 c0                	test   eax,eax
c00103a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00103a9:	74 18                	je     c00103c3 <Pipe::read(unsigned long long, void*, int*)+0x9d>
c00103ab:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00103af:	89 c5                	mov    ebp,eax
c00103b1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00103b4:	01 f5                	add    ebp,esi
c00103b6:	39 f5                	cmp    ebp,esi
c00103b8:	74 09                	je     c00103c3 <Pipe::read(unsigned long long, void*, int*)+0x9d>
c00103ba:	8a 0a                	mov    cl,BYTE PTR [edx]
c00103bc:	46                   	inc    esi
c00103bd:	88 4e ff             	mov    BYTE PTR [esi-0x1],cl
c00103c0:	42                   	inc    edx
c00103c1:	eb f3                	jmp    c00103b6 <Pipe::read(unsigned long long, void*, int*)+0x90>
c00103c3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00103c8:	74 1a                	je     c00103e4 <Pipe::read(unsigned long long, void*, int*)+0xbe>
c00103ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00103cd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00103d1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00103d5:	01 d6                	add    esi,edx
c00103d7:	39 d6                	cmp    esi,edx
c00103d9:	74 09                	je     c00103e4 <Pipe::read(unsigned long long, void*, int*)+0xbe>
c00103db:	8a 0a                	mov    cl,BYTE PTR [edx]
c00103dd:	40                   	inc    eax
c00103de:	88 48 ff             	mov    BYTE PTR [eax-0x1],cl
c00103e1:	42                   	inc    edx
c00103e2:	eb f3                	jmp    c00103d7 <Pipe::read(unsigned long long, void*, int*)+0xb1>
c00103e4:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103e7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103ea:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103ed:	99                   	cdq    
c00103ee:	89 f7                	mov    edi,esi
c00103f0:	03 04 24             	add    eax,DWORD PTR [esp]
c00103f3:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00103f7:	c1 ff 1f             	sar    edi,0x1f
c00103fa:	57                   	push   edi
c00103fb:	56                   	push   esi
c00103fc:	52                   	push   edx
c00103fd:	50                   	push   eax
c00103fe:	e8 81 71 01 00       	call   c0027584 <__umoddi3>
c0010403:	83 c4 10             	add    esp,0x10
c0010406:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010409:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001040e:	75 10                	jne    c0010420 <Pipe::read(unsigned long long, void*, int*)+0xfa>
c0010410:	83 ec 0c             	sub    esp,0xc
c0010413:	68 f5 ae 02 c0       	push   0xc002aef5
c0010418:	e8 da a4 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c001041d:	83 c4 10             	add    esp,0x10
c0010420:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010424:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010427:	89 10                	mov    DWORD PTR [eax],edx
c0010429:	83 c4 1c             	add    esp,0x1c
c001042c:	31 c0                	xor    eax,eax
c001042e:	5b                   	pop    ebx
c001042f:	5e                   	pop    esi
c0010430:	5f                   	pop    edi
c0010431:	5d                   	pop    ebp
c0010432:	c3                   	ret    
c0010433:	90                   	nop

c0010434 <Pipe::write(unsigned long long, void*, int*)>:
c0010434:	55                   	push   ebp
c0010435:	57                   	push   edi
c0010436:	56                   	push   esi
c0010437:	53                   	push   ebx
c0010438:	83 ec 1c             	sub    esp,0x1c
c001043b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001043f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010443:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010447:	89 04 24             	mov    DWORD PTR [esp],eax
c001044a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001044d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010450:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010454:	89 de                	mov    esi,ebx
c0010456:	89 df                	mov    edi,ebx
c0010458:	c1 ff 1f             	sar    edi,0x1f
c001045b:	01 c6                	add    esi,eax
c001045d:	89 c8                	mov    eax,ecx
c001045f:	11 d7                	adc    edi,edx
c0010461:	99                   	cdq    
c0010462:	39 f1                	cmp    ecx,esi
c0010464:	89 d0                	mov    eax,edx
c0010466:	19 f8                	sbb    eax,edi
c0010468:	b8 01 00 00 00       	mov    eax,0x1
c001046d:	0f 82 8a 00 00 00    	jb     c00104fd <Pipe::write(unsigned long long, void*, int*)+0xc9>
c0010473:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010476:	be 00 00 00 00       	mov    esi,0x0
c001047b:	01 d8                	add    eax,ebx
c001047d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0010480:	99                   	cdq    
c0010481:	f7 f9                	idiv   ecx
c0010483:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010487:	29 d1                	sub    ecx,edx
c0010489:	89 cf                	mov    edi,ecx
c001048b:	c1 ff 1f             	sar    edi,0x1f
c001048e:	39 cb                	cmp    ebx,ecx
c0010490:	19 f8                	sbb    eax,edi
c0010492:	72 04                	jb     c0010498 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010494:	89 de                	mov    esi,ebx
c0010496:	29 ce                	sub    esi,ecx
c0010498:	89 d9                	mov    ecx,ebx
c001049a:	29 f1                	sub    ecx,esi
c001049c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00104a0:	74 18                	je     c00104ba <Pipe::write(unsigned long long, void*, int*)+0x86>
c00104a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00104a6:	89 cf                	mov    edi,ecx
c00104a8:	03 55 0c             	add    edx,DWORD PTR [ebp+0xc]
c00104ab:	01 c7                	add    edi,eax
c00104ad:	39 f8                	cmp    eax,edi
c00104af:	74 09                	je     c00104ba <Pipe::write(unsigned long long, void*, int*)+0x86>
c00104b1:	8a 08                	mov    cl,BYTE PTR [eax]
c00104b3:	42                   	inc    edx
c00104b4:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
c00104b7:	40                   	inc    eax
c00104b8:	eb f3                	jmp    c00104ad <Pipe::write(unsigned long long, void*, int*)+0x79>
c00104ba:	85 f6                	test   esi,esi
c00104bc:	74 1a                	je     c00104d8 <Pipe::write(unsigned long long, void*, int*)+0xa4>
c00104be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00104c5:	03 4c 24 3c          	add    ecx,DWORD PTR [esp+0x3c]
c00104c9:	01 c6                	add    esi,eax
c00104cb:	39 c6                	cmp    esi,eax
c00104cd:	74 09                	je     c00104d8 <Pipe::write(unsigned long long, void*, int*)+0xa4>
c00104cf:	8a 11                	mov    dl,BYTE PTR [ecx]
c00104d1:	40                   	inc    eax
c00104d2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c00104d5:	41                   	inc    ecx
c00104d6:	eb f3                	jmp    c00104cb <Pipe::write(unsigned long long, void*, int*)+0x97>
c00104d8:	01 5d 14             	add    DWORD PTR [ebp+0x14],ebx
c00104db:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104e0:	75 10                	jne    c00104f2 <Pipe::write(unsigned long long, void*, int*)+0xbe>
c00104e2:	83 ec 0c             	sub    esp,0xc
c00104e5:	68 11 af 02 c0       	push   0xc002af11
c00104ea:	e8 08 a4 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c00104ef:	83 c4 10             	add    esp,0x10
c00104f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104f6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104f9:	89 38                	mov    DWORD PTR [eax],edi
c00104fb:	31 c0                	xor    eax,eax
c00104fd:	83 c4 1c             	add    esp,0x1c
c0010500:	5b                   	pop    ebx
c0010501:	5e                   	pop    esi
c0010502:	5f                   	pop    edi
c0010503:	5d                   	pop    ebp
c0010504:	c3                   	ret    
c0010505:	90                   	nop

c0010506 <Pipe::Pipe(int)>:
c0010506:	83 ec 0c             	sub    esp,0xc
c0010509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050d:	83 ec 08             	sub    esp,0x8
c0010510:	6a 00                	push   0x0
c0010512:	50                   	push   eax
c0010513:	e8 2e 11 00 00       	call   c0011646 <UnixFile::UnixFile(int)>
c0010518:	83 c4 10             	add    esp,0x10
c001051b:	ba 38 af 02 c0       	mov    edx,0xc002af38
c0010520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010524:	89 10                	mov    DWORD PTR [eax],edx
c0010526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001052e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010535:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001053c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010540:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010547:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001054b:	83 ec 0c             	sub    esp,0xc
c001054e:	50                   	push   eax
c001054f:	e8 6c f3 ff ff       	call   c000f8c0 <malloc>
c0010554:	83 c4 10             	add    esp,0x10
c0010557:	89 c2                	mov    edx,eax
c0010559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010564:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010568:	90                   	nop
c0010569:	83 c4 0c             	add    esp,0xc
c001056c:	c3                   	ret    
c001056d:	90                   	nop

c001056e <VgaText::isAtty()>:
c001056e:	b0 01                	mov    al,0x1
c0010570:	c3                   	ret    
c0010571:	90                   	nop

c0010572 <VgaText::~VgaText()>:
c0010572:	83 ec 0c             	sub    esp,0xc
c0010575:	ba f4 af 02 c0       	mov    edx,0xc002aff4
c001057a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057e:	89 10                	mov    DWORD PTR [eax],edx
c0010580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010584:	83 ec 0c             	sub    esp,0xc
c0010587:	50                   	push   eax
c0010588:	e8 9b 12 00 00       	call   c0011828 <UnixFile::~UnixFile()>
c001058d:	83 c4 10             	add    esp,0x10
c0010590:	90                   	nop
c0010591:	83 c4 0c             	add    esp,0xc
c0010594:	c3                   	ret    
c0010595:	90                   	nop

c0010596 <VgaText::~VgaText()>:
c0010596:	83 ec 0c             	sub    esp,0xc
c0010599:	83 ec 0c             	sub    esp,0xc
c001059c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a0:	e8 cd ff ff ff       	call   c0010572 <VgaText::~VgaText()>
c00105a5:	83 c4 10             	add    esp,0x10
c00105a8:	83 ec 08             	sub    esp,0x8
c00105ab:	68 c4 02 00 00       	push   0x2c4
c00105b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b4:	e8 f6 27 00 00       	call   c0012daf <operator delete(void*, unsigned long)>
c00105b9:	83 c4 10             	add    esp,0x10
c00105bc:	83 c4 0c             	add    esp,0xc
c00105bf:	c3                   	ret    

c00105c0 <VgaText::read(unsigned long long, void*, int*)>:
c00105c0:	83 ec 10             	sub    esp,0x10
c00105c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105cf:	e8 74 5d 00 00       	call   c0016348 <readKeyboard(VgaText*, char*, unsigned long)>
c00105d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105d8:	89 02                	mov    DWORD PTR [edx],eax
c00105da:	31 c0                	xor    eax,eax
c00105dc:	83 c4 1c             	add    esp,0x1c
c00105df:	c3                   	ret    

c00105e0 <setTerminalScrollLock(bool)>:
c00105e0:	c3                   	ret    

c00105e1 <addToTerminalCycle(VgaText*)>:
c00105e1:	8b 15 e0 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f1e0
c00105e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105eb:	85 d2                	test   edx,edx
c00105ed:	75 09                	jne    c00105f8 <addToTerminalCycle(VgaText*)+0x17>
c00105ef:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00105f2:	a3 e0 f1 02 c0       	mov    ds:0xc002f1e0,eax
c00105f7:	c3                   	ret    
c00105f8:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00105fb:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00105fe:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010601:	c3                   	ret    

c0010602 <installVgaTextImplementation()>:
c0010602:	83 ec 10             	sub    esp,0x10
c0010605:	6a 20                	push   0x20
c0010607:	6a 00                	push   0x0
c0010609:	68 c0 f1 02 c0       	push   0xc002f1c0
c001060e:	e8 59 01 ff ff       	call   c000076c <memset>
c0010613:	83 c4 1c             	add    esp,0x1c
c0010616:	c3                   	ret    

c0010617 <scrollTerminalScrollLock(int)>:
c0010617:	c3                   	ret    

c0010618 <VgaText::load()>:
c0010618:	53                   	push   ebx
c0010619:	31 c0                	xor    eax,eax
c001061b:	83 ec 58             	sub    esp,0x58
c001061e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010622:	89 e2                	mov    edx,esp
c0010624:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010628:	40                   	inc    eax
c0010629:	83 f8 50             	cmp    eax,0x50
c001062c:	75 f6                	jne    c0010624 <VgaText::load()+0xc>
c001062e:	31 c0                	xor    eax,eax
c0010630:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010637:	84 c9                	test   cl,cl
c0010639:	74 06                	je     c0010641 <VgaText::load()+0x29>
c001063b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001063e:	40                   	inc    eax
c001063f:	eb ef                	jmp    c0010630 <VgaText::load()+0x18>
c0010641:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010644:	85 c0                	test   eax,eax
c0010646:	74 09                	je     c0010651 <VgaText::load()+0x39>
c0010648:	51                   	push   ecx
c0010649:	51                   	push   ecx
c001064a:	52                   	push   edx
c001064b:	53                   	push   ebx
c001064c:	ff d0                	call   eax
c001064e:	83 c4 10             	add    esp,0x10
c0010651:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010654:	85 c0                	test   eax,eax
c0010656:	74 09                	je     c0010661 <VgaText::load()+0x49>
c0010658:	83 ec 0c             	sub    esp,0xc
c001065b:	53                   	push   ebx
c001065c:	ff d0                	call   eax
c001065e:	83 c4 10             	add    esp,0x10
c0010661:	83 c4 58             	add    esp,0x58
c0010664:	5b                   	pop    ebx
c0010665:	c3                   	ret    

c0010666 <VgaText::updateCursor()>:
c0010666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066a:	39 05 e4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1e4,eax
c0010670:	75 09                	jne    c001067b <VgaText::updateCursor()+0x15>
c0010672:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010675:	85 c0                	test   eax,eax
c0010677:	74 02                	je     c001067b <VgaText::updateCursor()+0x15>
c0010679:	ff e0                	jmp    eax
c001067b:	c3                   	ret    

c001067c <VgaText::showCursor(bool)>:
c001067c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010680:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010684:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c0010687:	c3                   	ret    

c0010688 <VgaText::disableBlink(bool)>:
c0010688:	56                   	push   esi
c0010689:	53                   	push   ebx
c001068a:	51                   	push   ecx
c001068b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001068f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010693:	39 1d e4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1e4,ebx
c0010699:	75 15                	jne    c00106b0 <VgaText::disableBlink(bool)+0x28>
c001069b:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c001069e:	85 c0                	test   eax,eax
c00106a0:	74 0e                	je     c00106b0 <VgaText::disableBlink(bool)+0x28>
c00106a2:	89 f1                	mov    ecx,esi
c00106a4:	52                   	push   edx
c00106a5:	52                   	push   edx
c00106a6:	0f b6 d1             	movzx  edx,cl
c00106a9:	52                   	push   edx
c00106aa:	53                   	push   ebx
c00106ab:	ff d0                	call   eax
c00106ad:	83 c4 10             	add    esp,0x10
c00106b0:	89 f0                	mov    eax,esi
c00106b2:	83 f0 01             	xor    eax,0x1
c00106b5:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c00106b8:	58                   	pop    eax
c00106b9:	5b                   	pop    ebx
c00106ba:	5e                   	pop    esi
c00106bb:	c3                   	ret    

c00106bc <VgaText::doANSI_SGR(int)>:
c00106bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106c4:	85 d2                	test   edx,edx
c00106c6:	75 0b                	jne    c00106d3 <VgaText::doANSI_SGR(int)+0x17>
c00106c8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00106cb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106ce:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00106d1:	eb 59                	jmp    c001072c <VgaText::doANSI_SGR(int)+0x70>
c00106d3:	83 fa 07             	cmp    edx,0x7
c00106d6:	75 0b                	jne    c00106e3 <VgaText::doANSI_SGR(int)+0x27>
c00106d8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00106db:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00106de:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00106e1:	eb 49                	jmp    c001072c <VgaText::doANSI_SGR(int)+0x70>
c00106e3:	83 fa 1b             	cmp    edx,0x1b
c00106e6:	74 e0                	je     c00106c8 <VgaText::doANSI_SGR(int)+0xc>
c00106e8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106eb:	83 f9 07             	cmp    ecx,0x7
c00106ee:	77 09                	ja     c00106f9 <VgaText::doANSI_SGR(int)+0x3d>
c00106f0:	8b 14 8d 60 e0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1fa0]
c00106f7:	eb 20                	jmp    c0010719 <VgaText::doANSI_SGR(int)+0x5d>
c00106f9:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106fc:	83 f9 07             	cmp    ecx,0x7
c00106ff:	77 09                	ja     c001070a <VgaText::doANSI_SGR(int)+0x4e>
c0010701:	8b 14 8d 60 e0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1fa0]
c0010708:	eb 22                	jmp    c001072c <VgaText::doANSI_SGR(int)+0x70>
c001070a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001070d:	83 f9 07             	cmp    ecx,0x7
c0010710:	77 0b                	ja     c001071d <VgaText::doANSI_SGR(int)+0x61>
c0010712:	8b 14 95 18 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20e8]
c0010719:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001071c:	c3                   	ret    
c001071d:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010720:	83 f9 07             	cmp    ecx,0x7
c0010723:	77 0a                	ja     c001072f <VgaText::doANSI_SGR(int)+0x73>
c0010725:	8b 14 95 f0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2110]
c001072c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001072f:	c3                   	ret    

c0010730 <VgaText::setDefaultBgColour(VgaColour)>:
c0010730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010734:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010738:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001073b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001073e:	c3                   	ret    
c001073f:	90                   	nop

c0010740 <VgaText::setDefaultFgColour(VgaColour)>:
c0010740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010744:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010748:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001074b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001074e:	c3                   	ret    
c001074f:	90                   	nop

c0010750 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010750:	53                   	push   ebx
c0010751:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010755:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010759:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001075d:	51                   	push   ecx
c001075e:	e8 cd ff ff ff       	call   c0010730 <VgaText::setDefaultBgColour(VgaColour)>
c0010763:	58                   	pop    eax
c0010764:	5a                   	pop    edx
c0010765:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010769:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001076d:	5b                   	pop    ebx
c001076e:	eb d0                	jmp    c0010740 <VgaText::setDefaultFgColour(VgaColour)>

c0010770 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010770:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010774:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010779:	83 e0 0f             	and    eax,0xf
c001077c:	c1 e2 04             	shl    edx,0x4
c001077f:	09 d0                	or     eax,edx
c0010781:	c3                   	ret    

c0010782 <VgaText::scrollScreen()>:
c0010782:	55                   	push   ebp
c0010783:	b9 01 00 00 00       	mov    ecx,0x1
c0010788:	57                   	push   edi
c0010789:	56                   	push   esi
c001078a:	53                   	push   ebx
c001078b:	83 ec 0c             	sub    esp,0xc
c001078e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010792:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010798:	31 ff                	xor    edi,edi
c001079a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001079d:	83 f9 17             	cmp    ecx,0x17
c00107a0:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00107a3:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00107aa:	75 27                	jne    c00107d3 <VgaText::scrollScreen()+0x51>
c00107ac:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00107af:	01 f5                	add    ebp,esi
c00107b1:	f7 c7 01 00 00 00    	test   edi,0x1
c00107b7:	74 16                	je     c00107cf <VgaText::scrollScreen()+0x4d>
c00107b9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00107bd:	50                   	push   eax
c00107be:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00107c2:	50                   	push   eax
c00107c3:	e8 a8 ff ff ff       	call   c0010770 <VgaText::combineColours(unsigned char, unsigned char)>
c00107c8:	5a                   	pop    edx
c00107c9:	5a                   	pop    edx
c00107ca:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00107cd:	eb 04                	jmp    c00107d3 <VgaText::scrollScreen()+0x51>
c00107cf:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00107d3:	47                   	inc    edi
c00107d4:	46                   	inc    esi
c00107d5:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107db:	75 bd                	jne    c001079a <VgaText::scrollScreen()+0x18>
c00107dd:	41                   	inc    ecx
c00107de:	83 f9 18             	cmp    ecx,0x18
c00107e1:	75 af                	jne    c0010792 <VgaText::scrollScreen()+0x10>
c00107e3:	39 1d e4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1e4,ebx
c00107e9:	75 1b                	jne    c0010806 <VgaText::scrollScreen()+0x84>
c00107eb:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00107ef:	74 05                	je     c00107f6 <VgaText::scrollScreen()+0x74>
c00107f1:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00107f4:	eb 10                	jmp    c0010806 <VgaText::scrollScreen()+0x84>
c00107f6:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00107f9:	85 c0                	test   eax,eax
c00107fb:	74 09                	je     c0010806 <VgaText::scrollScreen()+0x84>
c00107fd:	83 ec 0c             	sub    esp,0xc
c0010800:	53                   	push   ebx
c0010801:	ff d0                	call   eax
c0010803:	83 c4 10             	add    esp,0x10
c0010806:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001080a:	83 c4 0c             	add    esp,0xc
c001080d:	5b                   	pop    ebx
c001080e:	5e                   	pop    esi
c001080f:	5f                   	pop    edi
c0010810:	5d                   	pop    ebp
c0010811:	e9 50 fe ff ff       	jmp    c0010666 <VgaText::updateCursor()>

c0010816 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010816:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001081b:	c1 e0 08             	shl    eax,0x8
c001081e:	89 c2                	mov    edx,eax
c0010820:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010825:	09 d0                	or     eax,edx
c0010827:	c3                   	ret    

c0010828 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010828:	56                   	push   esi
c0010829:	53                   	push   ebx
c001082a:	51                   	push   ecx
c001082b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001082f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010834:	50                   	push   eax
c0010835:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001083a:	50                   	push   eax
c001083b:	e8 30 ff ff ff       	call   c0010770 <VgaText::combineColours(unsigned char, unsigned char)>
c0010840:	5b                   	pop    ebx
c0010841:	0f b6 c0             	movzx  eax,al
c0010844:	5e                   	pop    esi
c0010845:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001084a:	50                   	push   eax
c001084b:	53                   	push   ebx
c001084c:	e8 c5 ff ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c0010851:	5a                   	pop    edx
c0010852:	5e                   	pop    esi
c0010853:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010856:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001085c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010860:	0f b7 d2             	movzx  edx,dx
c0010863:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010867:	39 0d e4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1e4,ecx
c001086d:	75 10                	jne    c001087f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001086f:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010872:	85 c0                	test   eax,eax
c0010874:	74 09                	je     c001087f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010876:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001087a:	5a                   	pop    edx
c001087b:	5b                   	pop    ebx
c001087c:	5e                   	pop    esi
c001087d:	ff e0                	jmp    eax
c001087f:	58                   	pop    eax
c0010880:	5b                   	pop    ebx
c0010881:	5e                   	pop    esi
c0010882:	c3                   	ret    
c0010883:	90                   	nop

c0010884 <VgaText::getCursorX()>:
c0010884:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010888:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001088b:	c3                   	ret    

c001088c <VgaText::getCursorY()>:
c001088c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010890:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010893:	c3                   	ret    

c0010894 <VgaText::setCursor(int, int)>:
c0010894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010898:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001089c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001089f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00108a6:	e9 bb fd ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c00108ab:	90                   	nop

c00108ac <VgaText::setCursorX(int)>:
c00108ac:	83 ec 10             	sub    esp,0x10
c00108af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108b3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00108b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ba:	50                   	push   eax
c00108bb:	e8 d4 ff ff ff       	call   c0010894 <VgaText::setCursor(int, int)>
c00108c0:	83 c4 1c             	add    esp,0x1c
c00108c3:	c3                   	ret    

c00108c4 <VgaText::setCursorY(int)>:
c00108c4:	83 ec 10             	sub    esp,0x10
c00108c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108cf:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00108d2:	50                   	push   eax
c00108d3:	e8 bc ff ff ff       	call   c0010894 <VgaText::setCursor(int, int)>
c00108d8:	83 c4 1c             	add    esp,0x1c
c00108db:	c3                   	ret    

c00108dc <VgaText::incrementCursor(bool)>:
c00108dc:	56                   	push   esi
c00108dd:	53                   	push   ebx
c00108de:	51                   	push   ecx
c00108df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108e7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00108ea:	40                   	inc    eax
c00108eb:	83 f8 50             	cmp    eax,0x50
c00108ee:	74 05                	je     c00108f5 <VgaText::incrementCursor(bool)+0x19>
c00108f0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00108f3:	eb 24                	jmp    c0010919 <VgaText::incrementCursor(bool)+0x3d>
c00108f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108f8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108ff:	8d 50 01             	lea    edx,[eax+0x1]
c0010902:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010905:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010908:	75 0f                	jne    c0010919 <VgaText::incrementCursor(bool)+0x3d>
c001090a:	83 ec 0c             	sub    esp,0xc
c001090d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010910:	53                   	push   ebx
c0010911:	e8 6c fe ff ff       	call   c0010782 <VgaText::scrollScreen()>
c0010916:	83 c4 10             	add    esp,0x10
c0010919:	89 f0                	mov    eax,esi
c001091b:	84 c0                	test   al,al
c001091d:	74 0c                	je     c001092b <VgaText::incrementCursor(bool)+0x4f>
c001091f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010923:	5a                   	pop    edx
c0010924:	5b                   	pop    ebx
c0010925:	5e                   	pop    esi
c0010926:	e9 3b fd ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c001092b:	58                   	pop    eax
c001092c:	5b                   	pop    ebx
c001092d:	5e                   	pop    esi
c001092e:	c3                   	ret    
c001092f:	90                   	nop

c0010930 <VgaText::updateRAMUsageDisplay(int)>:
c0010930:	56                   	push   esi
c0010931:	8b 35 40 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e040
c0010937:	53                   	push   ebx
c0010938:	bb 0a 00 00 00       	mov    ebx,0xa
c001093d:	6a 0f                	push   0xf
c001093f:	6a 00                	push   0x0
c0010941:	e8 2a fe ff ff       	call   c0010770 <VgaText::combineColours(unsigned char, unsigned char)>
c0010946:	5a                   	pop    edx
c0010947:	59                   	pop    ecx
c0010948:	0f b6 c8             	movzx  ecx,al
c001094b:	51                   	push   ecx
c001094c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010950:	99                   	cdq    
c0010951:	f7 fb                	idiv   ebx
c0010953:	89 d3                	mov    ebx,edx
c0010955:	83 c0 30             	add    eax,0x30
c0010958:	83 c3 30             	add    ebx,0x30
c001095b:	0f be c0             	movsx  eax,al
c001095e:	0f b6 db             	movzx  ebx,bl
c0010961:	50                   	push   eax
c0010962:	e8 af fe ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c0010967:	5a                   	pop    edx
c0010968:	5a                   	pop    edx
c0010969:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010970:	51                   	push   ecx
c0010971:	53                   	push   ebx
c0010972:	e8 9f fe ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c0010977:	5b                   	pop    ebx
c0010978:	5a                   	pop    edx
c0010979:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010980:	51                   	push   ecx
c0010981:	6a 25                	push   0x25
c0010983:	e8 8e fe ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c0010988:	59                   	pop    ecx
c0010989:	5b                   	pop    ebx
c001098a:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010991:	5b                   	pop    ebx
c0010992:	5e                   	pop    esi
c0010993:	c3                   	ret    

c0010994 <VgaText::updateDiskUsage()>:
c0010994:	55                   	push   ebp
c0010995:	bd 10 27 00 00       	mov    ebp,0x2710
c001099a:	57                   	push   edi
c001099b:	8b 3d 40 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e040
c00109a1:	56                   	push   esi
c00109a2:	53                   	push   ebx
c00109a3:	6a 0f                	push   0xf
c00109a5:	6a 00                	push   0x0
c00109a7:	e8 c4 fd ff ff       	call   c0010770 <VgaText::combineColours(unsigned char, unsigned char)>
c00109ac:	5a                   	pop    edx
c00109ad:	0f b6 d8             	movzx  ebx,al
c00109b0:	59                   	pop    ecx
c00109b1:	8b 35 68 34 03 c0    	mov    esi,DWORD PTR ds:0xc0033468
c00109b7:	53                   	push   ebx
c00109b8:	b9 0a 00 00 00       	mov    ecx,0xa
c00109bd:	89 f0                	mov    eax,esi
c00109bf:	99                   	cdq    
c00109c0:	f7 fd                	idiv   ebp
c00109c2:	99                   	cdq    
c00109c3:	f7 f9                	idiv   ecx
c00109c5:	8d 42 30             	lea    eax,[edx+0x30]
c00109c8:	0f b6 c0             	movzx  eax,al
c00109cb:	50                   	push   eax
c00109cc:	e8 45 fe ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d1:	5d                   	pop    ebp
c00109d2:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109d7:	5a                   	pop    edx
c00109d8:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109dc:	53                   	push   ebx
c00109dd:	89 f0                	mov    eax,esi
c00109df:	99                   	cdq    
c00109e0:	f7 fd                	idiv   ebp
c00109e2:	99                   	cdq    
c00109e3:	f7 f9                	idiv   ecx
c00109e5:	8d 42 30             	lea    eax,[edx+0x30]
c00109e8:	0f b6 c0             	movzx  eax,al
c00109eb:	50                   	push   eax
c00109ec:	e8 25 fe ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c00109f1:	5d                   	pop    ebp
c00109f2:	bd 64 00 00 00       	mov    ebp,0x64
c00109f7:	5a                   	pop    edx
c00109f8:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109ff:	53                   	push   ebx
c0010a00:	89 f0                	mov    eax,esi
c0010a02:	99                   	cdq    
c0010a03:	f7 fd                	idiv   ebp
c0010a05:	99                   	cdq    
c0010a06:	f7 f9                	idiv   ecx
c0010a08:	8d 42 30             	lea    eax,[edx+0x30]
c0010a0b:	0f b6 c0             	movzx  eax,al
c0010a0e:	50                   	push   eax
c0010a0f:	e8 02 fe ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a14:	5d                   	pop    ebp
c0010a15:	5a                   	pop    edx
c0010a16:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a1d:	53                   	push   ebx
c0010a1e:	89 f0                	mov    eax,esi
c0010a20:	99                   	cdq    
c0010a21:	f7 f9                	idiv   ecx
c0010a23:	89 d6                	mov    esi,edx
c0010a25:	99                   	cdq    
c0010a26:	f7 f9                	idiv   ecx
c0010a28:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2b:	0f b6 c0             	movzx  eax,al
c0010a2e:	50                   	push   eax
c0010a2f:	e8 e2 fd ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a34:	5d                   	pop    ebp
c0010a35:	5a                   	pop    edx
c0010a36:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a3d:	53                   	push   ebx
c0010a3e:	8d 46 30             	lea    eax,[esi+0x30]
c0010a41:	0f b6 f0             	movzx  esi,al
c0010a44:	56                   	push   esi
c0010a45:	e8 cc fd ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4a:	5e                   	pop    esi
c0010a4b:	8b 35 64 34 03 c0    	mov    esi,DWORD PTR ds:0xc0033464
c0010a51:	5d                   	pop    ebp
c0010a52:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a59:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a5e:	53                   	push   ebx
c0010a5f:	89 f0                	mov    eax,esi
c0010a61:	99                   	cdq    
c0010a62:	f7 fd                	idiv   ebp
c0010a64:	99                   	cdq    
c0010a65:	f7 f9                	idiv   ecx
c0010a67:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6a:	0f b6 c0             	movzx  eax,al
c0010a6d:	50                   	push   eax
c0010a6e:	e8 a3 fd ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a73:	5a                   	pop    edx
c0010a74:	5d                   	pop    ebp
c0010a75:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a7c:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a81:	53                   	push   ebx
c0010a82:	89 f0                	mov    eax,esi
c0010a84:	99                   	cdq    
c0010a85:	f7 fd                	idiv   ebp
c0010a87:	99                   	cdq    
c0010a88:	f7 f9                	idiv   ecx
c0010a8a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a8d:	0f b6 c0             	movzx  eax,al
c0010a90:	50                   	push   eax
c0010a91:	e8 80 fd ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a96:	5a                   	pop    edx
c0010a97:	5d                   	pop    ebp
c0010a98:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a9f:	bd 64 00 00 00       	mov    ebp,0x64
c0010aa4:	53                   	push   ebx
c0010aa5:	89 f0                	mov    eax,esi
c0010aa7:	99                   	cdq    
c0010aa8:	f7 fd                	idiv   ebp
c0010aaa:	99                   	cdq    
c0010aab:	f7 f9                	idiv   ecx
c0010aad:	83 c2 30             	add    edx,0x30
c0010ab0:	0f b6 d2             	movzx  edx,dl
c0010ab3:	52                   	push   edx
c0010ab4:	e8 5d fd ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab9:	5a                   	pop    edx
c0010aba:	5d                   	pop    ebp
c0010abb:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010ac2:	53                   	push   ebx
c0010ac3:	89 f0                	mov    eax,esi
c0010ac5:	99                   	cdq    
c0010ac6:	f7 f9                	idiv   ecx
c0010ac8:	89 d6                	mov    esi,edx
c0010aca:	99                   	cdq    
c0010acb:	f7 f9                	idiv   ecx
c0010acd:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad0:	0f b6 c0             	movzx  eax,al
c0010ad3:	50                   	push   eax
c0010ad4:	e8 3d fd ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad9:	5a                   	pop    edx
c0010ada:	59                   	pop    ecx
c0010adb:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ae2:	53                   	push   ebx
c0010ae3:	8d 46 30             	lea    eax,[esi+0x30]
c0010ae6:	0f b6 f0             	movzx  esi,al
c0010ae9:	56                   	push   esi
c0010aea:	e8 27 fd ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aef:	5b                   	pop    ebx
c0010af0:	5e                   	pop    esi
c0010af1:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010af8:	5b                   	pop    ebx
c0010af9:	5e                   	pop    esi
c0010afa:	5f                   	pop    edi
c0010afb:	5d                   	pop    ebp
c0010afc:	c3                   	ret    
c0010afd:	90                   	nop

c0010afe <VgaText::updateTitle()>:
c0010afe:	53                   	push   ebx
c0010aff:	31 c0                	xor    eax,eax
c0010b01:	83 ec 58             	sub    esp,0x58
c0010b04:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b08:	89 e1                	mov    ecx,esp
c0010b0a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b0e:	40                   	inc    eax
c0010b0f:	83 f8 50             	cmp    eax,0x50
c0010b12:	75 f6                	jne    c0010b0a <VgaText::updateTitle()+0xc>
c0010b14:	31 c0                	xor    eax,eax
c0010b16:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010b1d:	84 db                	test   bl,bl
c0010b1f:	74 06                	je     c0010b27 <VgaText::updateTitle()+0x29>
c0010b21:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b24:	40                   	inc    eax
c0010b25:	eb ef                	jmp    c0010b16 <VgaText::updateTitle()+0x18>
c0010b27:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010b2a:	85 c0                	test   eax,eax
c0010b2c:	74 09                	je     c0010b37 <VgaText::updateTitle()+0x39>
c0010b2e:	53                   	push   ebx
c0010b2f:	53                   	push   ebx
c0010b30:	51                   	push   ecx
c0010b31:	52                   	push   edx
c0010b32:	ff d0                	call   eax
c0010b34:	83 c4 10             	add    esp,0x10
c0010b37:	e8 58 fe ff ff       	call   c0010994 <VgaText::updateDiskUsage()>
c0010b3c:	83 c4 58             	add    esp,0x58
c0010b3f:	5b                   	pop    ebx
c0010b40:	c3                   	ret    
c0010b41:	90                   	nop

c0010b42 <VgaText::setTitleTextColour(VgaColour)>:
c0010b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b4a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010b4d:	eb af                	jmp    c0010afe <VgaText::updateTitle()>
c0010b4f:	90                   	nop

c0010b50 <VgaText::setTitleColour(VgaColour)>:
c0010b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b5b:	eb a1                	jmp    c0010afe <VgaText::updateTitle()>
c0010b5d:	90                   	nop

c0010b5e <VgaText::setTitle(char*)>:
c0010b5e:	53                   	push   ebx
c0010b5f:	83 ec 10             	sub    esp,0x10
c0010b62:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b6a:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010b70:	50                   	push   eax
c0010b71:	e8 b2 fc fe ff       	call   c0000828 <strcpy>
c0010b76:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b7a:	83 c4 18             	add    esp,0x18
c0010b7d:	5b                   	pop    ebx
c0010b7e:	e9 7b ff ff ff       	jmp    c0010afe <VgaText::updateTitle()>
c0010b83:	90                   	nop

c0010b84 <VgaText::decrementCursor(bool)>:
c0010b84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b8c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010b8f:	85 c0                	test   eax,eax
c0010b91:	74 04                	je     c0010b97 <VgaText::decrementCursor(bool)+0x13>
c0010b93:	48                   	dec    eax
c0010b94:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010b97:	84 c9                	test   cl,cl
c0010b99:	74 09                	je     c0010ba4 <VgaText::decrementCursor(bool)+0x20>
c0010b9b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b9f:	e9 c2 fa ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c0010ba4:	c3                   	ret    
c0010ba5:	90                   	nop

c0010ba6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010ba6:	53                   	push   ebx
c0010ba7:	83 ec 08             	sub    esp,0x8
c0010baa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bb2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bb6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bba:	3c 07                	cmp    al,0x7
c0010bbc:	75 2a                	jne    c0010be8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bbe:	a1 98 f2 02 c0       	mov    eax,ds:0xc002f298
c0010bc3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bcb:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bd3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bdf:	83 c4 08             	add    esp,0x8
c0010be2:	5b                   	pop    ebx
c0010be3:	e9 b4 30 00 00       	jmp    c0013c9c <Buzzer::beep(int, int, bool)>
c0010be8:	3c 0d                	cmp    al,0xd
c0010bea:	75 09                	jne    c0010bf5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010bec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bf3:	eb 2c                	jmp    c0010c21 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010bf5:	3c 0a                	cmp    al,0xa
c0010bf7:	75 31                	jne    c0010c2a <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010bf9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010bfc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010c03:	8d 50 01             	lea    edx,[eax+0x1]
c0010c06:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010c09:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010c0c:	75 0f                	jne    c0010c1d <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010c0e:	83 ec 0c             	sub    esp,0xc
c0010c11:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010c14:	53                   	push   ebx
c0010c15:	e8 68 fb ff ff       	call   c0010782 <VgaText::scrollScreen()>
c0010c1a:	83 c4 10             	add    esp,0x10
c0010c1d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c21:	83 c4 08             	add    esp,0x8
c0010c24:	5b                   	pop    ebx
c0010c25:	e9 3c fa ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c0010c2a:	3c 08                	cmp    al,0x8
c0010c2c:	75 25                	jne    c0010c53 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010c2e:	50                   	push   eax
c0010c2f:	50                   	push   eax
c0010c30:	6a 01                	push   0x1
c0010c32:	53                   	push   ebx
c0010c33:	e8 4c ff ff ff       	call   c0010b84 <VgaText::decrementCursor(bool)>
c0010c38:	5a                   	pop    edx
c0010c39:	59                   	pop    ecx
c0010c3a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c3d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c40:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c46:	6a 20                	push   0x20
c0010c48:	53                   	push   ebx
c0010c49:	e8 da fb ff ff       	call   c0010828 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c4e:	83 c4 28             	add    esp,0x28
c0010c51:	5b                   	pop    ebx
c0010c52:	c3                   	ret    
c0010c53:	83 ec 08             	sub    esp,0x8
c0010c56:	0f be c0             	movsx  eax,al
c0010c59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c5c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c5f:	51                   	push   ecx
c0010c60:	52                   	push   edx
c0010c61:	50                   	push   eax
c0010c62:	53                   	push   ebx
c0010c63:	e8 c0 fb ff ff       	call   c0010828 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c68:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c6c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c74:	83 c4 28             	add    esp,0x28
c0010c77:	5b                   	pop    ebx
c0010c78:	e9 5f fc ff ff       	jmp    c00108dc <VgaText::incrementCursor(bool)>
c0010c7d:	90                   	nop

c0010c7e <VgaText::isShowingCursor()>:
c0010c7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c82:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010c85:	c3                   	ret    

c0010c86 <VgaText::isBlinkDisabled()>:
c0010c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c8a:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010c8d:	83 f0 01             	xor    eax,0x1
c0010c90:	c3                   	ret    
c0010c91:	90                   	nop

c0010c92 <VgaText::setCursorHeight(int)>:
c0010c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c9a:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c9d:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010ca1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ca5:	e9 d2 f9 ff ff       	jmp    c001067c <VgaText::showCursor(bool)>

c0010caa <VgaText::getCursorHeight()>:
c0010caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cae:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010cb1:	c3                   	ret    

c0010cb2 <setActiveTerminal(VgaText*)>:
c0010cb2:	53                   	push   ebx
c0010cb3:	83 ec 08             	sub    esp,0x8
c0010cb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cba:	85 db                	test   ebx,ebx
c0010cbc:	75 11                	jne    c0010ccf <setActiveTerminal(VgaText*)+0x1d>
c0010cbe:	c7 44 24 10 4c af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002af4c
c0010cc6:	83 c4 08             	add    esp,0x8
c0010cc9:	5b                   	pop    ebx
c0010cca:	e9 28 9c 00 00       	jmp    c001a8f7 <Krnl::panic(char const*)>
c0010ccf:	50                   	push   eax
c0010cd0:	50                   	push   eax
c0010cd1:	53                   	push   ebx
c0010cd2:	68 5a af 02 c0       	push   0xc002af5a
c0010cd7:	e8 b3 21 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0010cdc:	a1 e4 f1 02 c0       	mov    eax,ds:0xc002f1e4
c0010ce1:	83 c4 10             	add    esp,0x10
c0010ce4:	85 c0                	test   eax,eax
c0010ce6:	74 0c                	je     c0010cf4 <setActiveTerminal(VgaText*)+0x42>
c0010ce8:	83 ec 0c             	sub    esp,0xc
c0010ceb:	50                   	push   eax
c0010cec:	e8 75 f9 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010cf1:	83 c4 10             	add    esp,0x10
c0010cf4:	89 1d e4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1e4,ebx
c0010cfa:	51                   	push   ecx
c0010cfb:	51                   	push   ecx
c0010cfc:	53                   	push   ebx
c0010cfd:	68 72 af 02 c0       	push   0xc002af72
c0010d02:	e8 88 21 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0010d07:	83 c4 0c             	add    esp,0xc
c0010d0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d0d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010d10:	53                   	push   ebx
c0010d11:	e8 7e fb ff ff       	call   c0010894 <VgaText::setCursor(int, int)>
c0010d16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d19:	e8 68 ff ff ff       	call   c0010c86 <VgaText::isBlinkDisabled()>
c0010d1e:	5a                   	pop    edx
c0010d1f:	0f b6 c0             	movzx  eax,al
c0010d22:	59                   	pop    ecx
c0010d23:	50                   	push   eax
c0010d24:	53                   	push   ebx
c0010d25:	e8 5e f9 ff ff       	call   c0010688 <VgaText::disableBlink(bool)>
c0010d2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d2d:	e8 78 ff ff ff       	call   c0010caa <VgaText::getCursorHeight()>
c0010d32:	5a                   	pop    edx
c0010d33:	59                   	pop    ecx
c0010d34:	50                   	push   eax
c0010d35:	53                   	push   ebx
c0010d36:	e8 57 ff ff ff       	call   c0010c92 <VgaText::setCursorHeight(int)>
c0010d3b:	83 c4 10             	add    esp,0x10
c0010d3e:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010d42:	75 07                	jne    c0010d4b <setActiveTerminal(VgaText*)+0x99>
c0010d44:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010d4b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d4f:	83 c4 08             	add    esp,0x8
c0010d52:	5b                   	pop    ebx
c0010d53:	e9 c0 f8 ff ff       	jmp    c0010618 <VgaText::load()>

c0010d58 <doTerminalCycle()>:
c0010d58:	83 ec 18             	sub    esp,0x18
c0010d5b:	a1 e0 f1 02 c0       	mov    eax,ds:0xc002f1e0
c0010d60:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d63:	50                   	push   eax
c0010d64:	a3 e0 f1 02 c0       	mov    ds:0xc002f1e0,eax
c0010d69:	e8 44 ff ff ff       	call   c0010cb2 <setActiveTerminal(VgaText*)>
c0010d6e:	83 c4 1c             	add    esp,0x1c
c0010d71:	c3                   	ret    

c0010d72 <VgaText::doUpdate()>:
c0010d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d76:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010d79:	85 c0                	test   eax,eax
c0010d7b:	74 02                	je     c0010d7f <VgaText::doUpdate()+0xd>
c0010d7d:	ff e0                	jmp    eax
c0010d7f:	c3                   	ret    

c0010d80 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010d80:	55                   	push   ebp
c0010d81:	31 ed                	xor    ebp,ebp
c0010d83:	57                   	push   edi
c0010d84:	56                   	push   esi
c0010d85:	53                   	push   ebx
c0010d86:	83 ec 1c             	sub    esp,0x1c
c0010d89:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d8d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d92:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010d99:	50                   	push   eax
c0010d9a:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d9f:	50                   	push   eax
c0010da0:	e8 cb f9 ff ff       	call   c0010770 <VgaText::combineColours(unsigned char, unsigned char)>
c0010da5:	59                   	pop    ecx
c0010da6:	0f b6 c0             	movzx  eax,al
c0010da9:	5e                   	pop    esi
c0010daa:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010daf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010db3:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010db6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010dba:	0f b7 f6             	movzx  esi,si
c0010dbd:	01 f6                	add    esi,esi
c0010dbf:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010dc2:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010dc5:	84 c0                	test   al,al
c0010dc7:	0f 84 fd 00 00 00    	je     c0010eca <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010dcd:	3c 0d                	cmp    al,0xd
c0010dcf:	75 0c                	jne    c0010ddd <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010dd1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010dd8:	e9 e7 00 00 00       	jmp    c0010ec4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010ddd:	3c 0a                	cmp    al,0xa
c0010ddf:	75 47                	jne    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010de1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010de4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010deb:	8d 48 01             	lea    ecx,[eax+0x1]
c0010dee:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010df1:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010df4:	75 0f                	jne    c0010e05 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010df6:	83 ec 0c             	sub    esp,0xc
c0010df9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010dfc:	53                   	push   ebx
c0010dfd:	e8 80 f9 ff ff       	call   c0010782 <VgaText::scrollScreen()>
c0010e02:	83 c4 10             	add    esp,0x10
c0010e05:	83 ec 0c             	sub    esp,0xc
c0010e08:	31 ed                	xor    ebp,ebp
c0010e0a:	53                   	push   ebx
c0010e0b:	e8 56 f8 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010e10:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e15:	83 c4 10             	add    esp,0x10
c0010e18:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e1b:	0f b7 f6             	movzx  esi,si
c0010e1e:	01 f6                	add    esi,esi
c0010e20:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e23:	e9 9c 00 00 00       	jmp    c0010ec4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e28:	3c 08                	cmp    al,0x8
c0010e2a:	75 35                	jne    c0010e61 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010e2c:	56                   	push   esi
c0010e2d:	56                   	push   esi
c0010e2e:	6a 01                	push   0x1
c0010e30:	53                   	push   ebx
c0010e31:	e8 4e fd ff ff       	call   c0010b84 <VgaText::decrementCursor(bool)>
c0010e36:	58                   	pop    eax
c0010e37:	5a                   	pop    edx
c0010e38:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e3b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e3e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e41:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e44:	6a 20                	push   0x20
c0010e46:	53                   	push   ebx
c0010e47:	e8 dc f9 ff ff       	call   c0010828 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e4c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e51:	83 c4 20             	add    esp,0x20
c0010e54:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e57:	0f b7 f6             	movzx  esi,si
c0010e5a:	01 f6                	add    esi,esi
c0010e5c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e5f:	eb 63                	jmp    c0010ec4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e61:	51                   	push   ecx
c0010e62:	51                   	push   ecx
c0010e63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010e67:	50                   	push   eax
c0010e68:	e8 a9 f9 ff ff       	call   c0010816 <VgaText::combineCharAndColour(char, unsigned char)>
c0010e6d:	83 c4 10             	add    esp,0x10
c0010e70:	66 89 06             	mov    WORD PTR [esi],ax
c0010e73:	39 1d e4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1e4,ebx
c0010e79:	75 21                	jne    c0010e9c <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e7b:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010e7e:	85 c0                	test   eax,eax
c0010e80:	74 1a                	je     c0010e9c <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e82:	52                   	push   edx
c0010e83:	52                   	push   edx
c0010e84:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e87:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e92:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010e95:	51                   	push   ecx
c0010e96:	53                   	push   ebx
c0010e97:	ff d0                	call   eax
c0010e99:	83 c4 20             	add    esp,0x20
c0010e9c:	83 c6 02             	add    esi,0x2
c0010e9f:	50                   	push   eax
c0010ea0:	50                   	push   eax
c0010ea1:	6a 00                	push   0x0
c0010ea3:	53                   	push   ebx
c0010ea4:	e8 33 fa ff ff       	call   c00108dc <VgaText::incrementCursor(bool)>
c0010ea9:	83 c4 10             	add    esp,0x10
c0010eac:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010eb0:	75 0d                	jne    c0010ebf <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010eb2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010eb7:	0f b7 f6             	movzx  esi,si
c0010eba:	01 f6                	add    esi,esi
c0010ebc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010ebf:	bd 01 00 00 00       	mov    ebp,0x1
c0010ec4:	47                   	inc    edi
c0010ec5:	e9 f8 fe ff ff       	jmp    c0010dc2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010eca:	83 ec 0c             	sub    esp,0xc
c0010ecd:	53                   	push   ebx
c0010ece:	e8 93 f7 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010ed3:	83 c4 10             	add    esp,0x10
c0010ed6:	89 e8                	mov    eax,ebp
c0010ed8:	84 c0                	test   al,al
c0010eda:	74 0c                	je     c0010ee8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010edc:	83 ec 0c             	sub    esp,0xc
c0010edf:	53                   	push   ebx
c0010ee0:	e8 8d fe ff ff       	call   c0010d72 <VgaText::doUpdate()>
c0010ee5:	83 c4 10             	add    esp,0x10
c0010ee8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010eef:	83 c4 1c             	add    esp,0x1c
c0010ef2:	5b                   	pop    ebx
c0010ef3:	5e                   	pop    esi
c0010ef4:	5f                   	pop    edi
c0010ef5:	5d                   	pop    ebp
c0010ef6:	c3                   	ret    
c0010ef7:	90                   	nop

c0010ef8 <VgaText::clearScreen()>:
c0010ef8:	57                   	push   edi
c0010ef9:	56                   	push   esi
c0010efa:	31 f6                	xor    esi,esi
c0010efc:	53                   	push   ebx
c0010efd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f01:	52                   	push   edx
c0010f02:	6a 00                	push   0x0
c0010f04:	6a 00                	push   0x0
c0010f06:	53                   	push   ebx
c0010f07:	e8 88 f9 ff ff       	call   c0010894 <VgaText::setCursor(int, int)>
c0010f0c:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010f13:	83 c4 10             	add    esp,0x10
c0010f16:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010f19:	7e 20                	jle    c0010f3b <VgaText::clearScreen()+0x43>
c0010f1b:	31 ff                	xor    edi,edi
c0010f1d:	50                   	push   eax
c0010f1e:	50                   	push   eax
c0010f1f:	56                   	push   esi
c0010f20:	57                   	push   edi
c0010f21:	47                   	inc    edi
c0010f22:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f25:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f28:	6a 20                	push   0x20
c0010f2a:	53                   	push   ebx
c0010f2b:	e8 f8 f8 ff ff       	call   c0010828 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f30:	83 c4 20             	add    esp,0x20
c0010f33:	83 ff 50             	cmp    edi,0x50
c0010f36:	75 e5                	jne    c0010f1d <VgaText::clearScreen()+0x25>
c0010f38:	46                   	inc    esi
c0010f39:	eb db                	jmp    c0010f16 <VgaText::clearScreen()+0x1e>
c0010f3b:	83 ec 0c             	sub    esp,0xc
c0010f3e:	53                   	push   ebx
c0010f3f:	e8 2e fe ff ff       	call   c0010d72 <VgaText::doUpdate()>
c0010f44:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f4b:	83 c4 10             	add    esp,0x10
c0010f4e:	5b                   	pop    ebx
c0010f4f:	5e                   	pop    esi
c0010f50:	5f                   	pop    edi
c0010f51:	c3                   	ret    

c0010f52 <VgaText::putchar(char)>:
c0010f52:	56                   	push   esi
c0010f53:	53                   	push   ebx
c0010f54:	83 ec 14             	sub    esp,0x14
c0010f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f5b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f5f:	3c 5b                	cmp    al,0x5b
c0010f61:	75 18                	jne    c0010f7b <VgaText::putchar(char)+0x29>
c0010f63:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010f67:	74 1f                	je     c0010f88 <VgaText::putchar(char)+0x36>
c0010f69:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010f6f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010f76:	e9 bd 00 00 00       	jmp    c0011038 <VgaText::putchar(char)+0xe6>
c0010f7b:	3c 1b                	cmp    al,0x1b
c0010f7d:	75 09                	jne    c0010f88 <VgaText::putchar(char)+0x36>
c0010f7f:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010f83:	e9 b0 00 00 00       	jmp    c0011038 <VgaText::putchar(char)+0xe6>
c0010f88:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010f8b:	84 c9                	test   cl,cl
c0010f8d:	0f 84 92 00 00 00    	je     c0011025 <VgaText::putchar(char)+0xd3>
c0010f93:	8d 50 c0             	lea    edx,[eax-0x40]
c0010f96:	80 fa 3e             	cmp    dl,0x3e
c0010f99:	77 76                	ja     c0011011 <VgaText::putchar(char)+0xbf>
c0010f9b:	3c 6d                	cmp    al,0x6d
c0010f9d:	75 47                	jne    c0010fe6 <VgaText::putchar(char)+0x94>
c0010f9f:	31 f6                	xor    esi,esi
c0010fa1:	31 d2                	xor    edx,edx
c0010fa3:	31 c0                	xor    eax,eax
c0010fa5:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010fa8:	7e 2d                	jle    c0010fd7 <VgaText::putchar(char)+0x85>
c0010faa:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010faf:	80 fa 3b             	cmp    dl,0x3b
c0010fb2:	75 17                	jne    c0010fcb <VgaText::putchar(char)+0x79>
c0010fb4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010fb8:	50                   	push   eax
c0010fb9:	53                   	push   ebx
c0010fba:	e8 fd f6 ff ff       	call   c00106bc <VgaText::doANSI_SGR(int)>
c0010fbf:	59                   	pop    ecx
c0010fc0:	31 d2                	xor    edx,edx
c0010fc2:	58                   	pop    eax
c0010fc3:	31 c0                	xor    eax,eax
c0010fc5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010fc9:	eb 09                	jmp    c0010fd4 <VgaText::putchar(char)+0x82>
c0010fcb:	6b c0 0a             	imul   eax,eax,0xa
c0010fce:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010fd2:	88 ca                	mov    dl,cl
c0010fd4:	46                   	inc    esi
c0010fd5:	eb ce                	jmp    c0010fa5 <VgaText::putchar(char)+0x53>
c0010fd7:	84 d2                	test   dl,dl
c0010fd9:	74 2e                	je     c0011009 <VgaText::putchar(char)+0xb7>
c0010fdb:	50                   	push   eax
c0010fdc:	53                   	push   ebx
c0010fdd:	e8 da f6 ff ff       	call   c00106bc <VgaText::doANSI_SGR(int)>
c0010fe2:	58                   	pop    eax
c0010fe3:	5a                   	pop    edx
c0010fe4:	eb 23                	jmp    c0011009 <VgaText::putchar(char)+0xb7>
c0010fe6:	3c 4a                	cmp    al,0x4a
c0010fe8:	75 1f                	jne    c0011009 <VgaText::putchar(char)+0xb7>
c0010fea:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010fee:	75 19                	jne    c0011009 <VgaText::putchar(char)+0xb7>
c0010ff0:	83 ec 0c             	sub    esp,0xc
c0010ff3:	53                   	push   ebx
c0010ff4:	e8 ff fe ff ff       	call   c0010ef8 <VgaText::clearScreen()>
c0010ff9:	83 c4 0c             	add    esp,0xc
c0010ffc:	6a 00                	push   0x0
c0010ffe:	6a 00                	push   0x0
c0011000:	53                   	push   ebx
c0011001:	e8 8e f8 ff ff       	call   c0010894 <VgaText::setCursor(int, int)>
c0011006:	83 c4 10             	add    esp,0x10
c0011009:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001100f:	eb 27                	jmp    c0011038 <VgaText::putchar(char)+0xe6>
c0011011:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0011014:	83 fa 0e             	cmp    edx,0xe
c0011017:	7f 1f                	jg     c0011038 <VgaText::putchar(char)+0xe6>
c0011019:	8d 4a 01             	lea    ecx,[edx+0x1]
c001101c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001101f:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0011023:	eb 13                	jmp    c0011038 <VgaText::putchar(char)+0xe6>
c0011025:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011028:	0f be c0             	movsx  eax,al
c001102b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001102e:	50                   	push   eax
c001102f:	53                   	push   ebx
c0011030:	e8 71 fb ff ff       	call   c0010ba6 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011035:	83 c4 10             	add    esp,0x10
c0011038:	83 c4 14             	add    esp,0x14
c001103b:	5b                   	pop    ebx
c001103c:	5e                   	pop    esi
c001103d:	c3                   	ret    

c001103e <VgaText::puts(char const*)>:
c001103e:	53                   	push   ebx
c001103f:	83 ec 08             	sub    esp,0x8
c0011042:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011046:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011049:	84 c0                	test   al,al
c001104b:	74 12                	je     c001105f <VgaText::puts(char const*)+0x21>
c001104d:	43                   	inc    ebx
c001104e:	51                   	push   ecx
c001104f:	51                   	push   ecx
c0011050:	50                   	push   eax
c0011051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011055:	e8 f8 fe ff ff       	call   c0010f52 <VgaText::putchar(char)>
c001105a:	83 c4 10             	add    esp,0x10
c001105d:	eb e7                	jmp    c0011046 <VgaText::puts(char const*)+0x8>
c001105f:	83 c4 08             	add    esp,0x8
c0011062:	5b                   	pop    ebx
c0011063:	c3                   	ret    

c0011064 <VgaText::putx(unsigned int)>:
c0011064:	57                   	push   edi
c0011065:	b9 11 00 00 00       	mov    ecx,0x11
c001106a:	56                   	push   esi
c001106b:	be 8e af 02 c0       	mov    esi,0xc002af8e
c0011070:	53                   	push   ebx
c0011071:	83 ec 20             	sub    esp,0x20
c0011074:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011078:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001107c:	fc                   	cld    
c001107d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001107f:	be 08 00 00 00       	mov    esi,0x8
c0011084:	50                   	push   eax
c0011085:	50                   	push   eax
c0011086:	89 d8                	mov    eax,ebx
c0011088:	c1 e3 04             	shl    ebx,0x4
c001108b:	c1 e8 1c             	shr    eax,0x1c
c001108e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011093:	50                   	push   eax
c0011094:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011098:	e8 b5 fe ff ff       	call   c0010f52 <VgaText::putchar(char)>
c001109d:	83 c4 10             	add    esp,0x10
c00110a0:	4e                   	dec    esi
c00110a1:	75 e1                	jne    c0011084 <VgaText::putx(unsigned int)+0x20>
c00110a3:	83 c4 20             	add    esp,0x20
c00110a6:	5b                   	pop    ebx
c00110a7:	5e                   	pop    esi
c00110a8:	5f                   	pop    edi
c00110a9:	c3                   	ret    

c00110aa <VgaText::VgaText(char const*)>:
c00110aa:	57                   	push   edi
c00110ab:	56                   	push   esi
c00110ac:	53                   	push   ebx
c00110ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b1:	83 ec 08             	sub    esp,0x8
c00110b4:	6a 00                	push   0x0
c00110b6:	50                   	push   eax
c00110b7:	e8 8a 05 00 00       	call   c0011646 <UnixFile::UnixFile(int)>
c00110bc:	83 c4 10             	add    esp,0x10
c00110bf:	ba f4 af 02 c0       	mov    edx,0xc002aff4
c00110c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c8:	89 10                	mov    DWORD PTR [eax],edx
c00110ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ce:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00110d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d9:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00110e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e4:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00110e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ec:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00110f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f4:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00110fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ff:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001110a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0011111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011115:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001111c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011120:	8d 50 60             	lea    edx,[eax+0x60]
c0011123:	bb c0 f1 02 c0       	mov    ebx,0xc002f1c0
c0011128:	b8 08 00 00 00       	mov    eax,0x8
c001112d:	fc                   	cld    
c001112e:	89 d7                	mov    edi,edx
c0011130:	89 de                	mov    esi,ebx
c0011132:	89 c1                	mov    ecx,eax
c0011134:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113a:	05 82 00 00 00       	add    eax,0x82
c001113f:	83 ec 08             	sub    esp,0x8
c0011142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011146:	50                   	push   eax
c0011147:	e8 dc f6 fe ff       	call   c0000828 <strcpy>
c001114c:	83 c4 10             	add    esp,0x10
c001114f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011153:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c001115a:	83 ec 0c             	sub    esp,0xc
c001115d:	6a 01                	push   0x1
c001115f:	e8 25 09 00 00       	call   c0011a89 <Virt::allocateKernelVirtualPages(int)>
c0011164:	83 c4 10             	add    esp,0x10
c0011167:	89 c2                	mov    edx,eax
c0011169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001116d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011170:	8b 1d 90 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f290
c0011176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001117d:	89 c6                	mov    esi,eax
c001117f:	e8 a8 ed ff ff       	call   c000ff2c <Phys::allocatePage()>
c0011184:	6a 05                	push   0x5
c0011186:	56                   	push   esi
c0011187:	50                   	push   eax
c0011188:	53                   	push   ebx
c0011189:	e8 32 11 00 00       	call   c00122c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001118e:	83 c4 10             	add    esp,0x10
c0011191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011195:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011198:	83 ec 04             	sub    esp,0x4
c001119b:	68 00 0f 00 00       	push   0xf00
c00111a0:	6a 00                	push   0x0
c00111a2:	50                   	push   eax
c00111a3:	e8 c4 f5 fe ff       	call   c000076c <memset>
c00111a8:	83 c4 10             	add    esp,0x10
c00111ab:	83 ec 04             	sub    esp,0x4
c00111ae:	6a 00                	push   0x0
c00111b0:	6a 07                	push   0x7
c00111b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111b6:	e8 95 f5 ff ff       	call   c0010750 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00111bb:	83 c4 10             	add    esp,0x10
c00111be:	83 ec 08             	sub    esp,0x8
c00111c1:	6a 02                	push   0x2
c00111c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111c7:	e8 c6 fa ff ff       	call   c0010c92 <VgaText::setCursorHeight(int)>
c00111cc:	83 c4 10             	add    esp,0x10
c00111cf:	83 ec 04             	sub    esp,0x4
c00111d2:	6a 00                	push   0x0
c00111d4:	6a 00                	push   0x0
c00111d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111da:	e8 b5 f6 ff ff       	call   c0010894 <VgaText::setCursor(int, int)>
c00111df:	83 c4 10             	add    esp,0x10
c00111e2:	83 ec 08             	sub    esp,0x8
c00111e5:	6a 01                	push   0x1
c00111e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111eb:	e8 8c f4 ff ff       	call   c001067c <VgaText::showCursor(bool)>
c00111f0:	83 c4 10             	add    esp,0x10
c00111f3:	83 ec 08             	sub    esp,0x8
c00111f6:	6a 01                	push   0x1
c00111f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111fc:	e8 87 f4 ff ff       	call   c0010688 <VgaText::disableBlink(bool)>
c0011201:	83 c4 10             	add    esp,0x10
c0011204:	83 ec 0c             	sub    esp,0xc
c0011207:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001120b:	e8 e8 fc ff ff       	call   c0010ef8 <VgaText::clearScreen()>
c0011210:	83 c4 10             	add    esp,0x10
c0011213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011217:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001121b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121f:	05 02 01 00 00       	add    eax,0x102
c0011224:	83 ec 04             	sub    esp,0x4
c0011227:	68 96 00 00 00       	push   0x96
c001122c:	6a 00                	push   0x0
c001122e:	50                   	push   eax
c001122f:	e8 38 f5 fe ff       	call   c000076c <memset>
c0011234:	83 c4 10             	add    esp,0x10
c0011237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123b:	05 98 01 00 00       	add    eax,0x198
c0011240:	83 ec 04             	sub    esp,0x4
c0011243:	68 2c 01 00 00       	push   0x12c
c0011248:	6a 00                	push   0x0
c001124a:	50                   	push   eax
c001124b:	e8 1c f5 fe ff       	call   c000076c <memset>
c0011250:	83 c4 10             	add    esp,0x10
c0011253:	90                   	nop
c0011254:	5b                   	pop    ebx
c0011255:	5e                   	pop    esi
c0011256:	5f                   	pop    edi
c0011257:	c3                   	ret    

c0011258 <VgaText::receiveKey(unsigned char)>:
c0011258:	55                   	push   ebp
c0011259:	57                   	push   edi
c001125a:	56                   	push   esi
c001125b:	53                   	push   ebx
c001125c:	83 ec 1c             	sub    esp,0x1c
c001125f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011263:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011267:	84 db                	test   bl,bl
c0011269:	0f 84 c9 00 00 00    	je     c0011338 <VgaText::receiveKey(unsigned char)+0xe0>
c001126f:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0011275:	80 fb 08             	cmp    bl,0x8
c0011278:	75 2c                	jne    c00112a6 <VgaText::receiveKey(unsigned char)+0x4e>
c001127a:	83 ec 0c             	sub    esp,0xc
c001127d:	57                   	push   edi
c001127e:	e8 05 f5 fe ff       	call   c0000788 <strlen>
c0011283:	83 c4 10             	add    esp,0x10
c0011286:	85 c0                	test   eax,eax
c0011288:	74 41                	je     c00112cb <VgaText::receiveKey(unsigned char)+0x73>
c001128a:	50                   	push   eax
c001128b:	50                   	push   eax
c001128c:	6a 08                	push   0x8
c001128e:	56                   	push   esi
c001128f:	e8 be fc ff ff       	call   c0010f52 <VgaText::putchar(char)>
c0011294:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011297:	e8 ec f4 fe ff       	call   c0000788 <strlen>
c001129c:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00112a4:	eb 22                	jmp    c00112c8 <VgaText::receiveKey(unsigned char)+0x70>
c00112a6:	0f be c3             	movsx  eax,bl
c00112a9:	52                   	push   edx
c00112aa:	52                   	push   edx
c00112ab:	50                   	push   eax
c00112ac:	56                   	push   esi
c00112ad:	e8 a0 fc ff ff       	call   c0010f52 <VgaText::putchar(char)>
c00112b2:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00112b6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00112bb:	59                   	pop    ecx
c00112bc:	5d                   	pop    ebp
c00112bd:	8d 44 24 16          	lea    eax,[esp+0x16]
c00112c1:	50                   	push   eax
c00112c2:	57                   	push   edi
c00112c3:	e8 a0 f6 fe ff       	call   c0000968 <strcat>
c00112c8:	83 c4 10             	add    esp,0x10
c00112cb:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c00112d2:	75 05                	jne    c00112d9 <VgaText::receiveKey(unsigned char)+0x81>
c00112d4:	80 fb 0a             	cmp    bl,0xa
c00112d7:	75 53                	jne    c001132c <VgaText::receiveKey(unsigned char)+0xd4>
c00112d9:	83 ec 0c             	sub    esp,0xc
c00112dc:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c00112e2:	53                   	push   ebx
c00112e3:	e8 a0 f4 fe ff       	call   c0000788 <strlen>
c00112e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112eb:	89 c5                	mov    ebp,eax
c00112ed:	e8 96 f4 fe ff       	call   c0000788 <strlen>
c00112f2:	83 c4 10             	add    esp,0x10
c00112f5:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00112f9:	3d 2c 01 00 00       	cmp    eax,0x12c
c00112fe:	76 10                	jbe    c0011310 <VgaText::receiveKey(unsigned char)+0xb8>
c0011300:	83 ec 0c             	sub    esp,0xc
c0011303:	68 9f af 02 c0       	push   0xc002af9f
c0011308:	e8 ea 95 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c001130d:	83 c4 10             	add    esp,0x10
c0011310:	50                   	push   eax
c0011311:	50                   	push   eax
c0011312:	57                   	push   edi
c0011313:	53                   	push   ebx
c0011314:	e8 4f f6 fe ff       	call   c0000968 <strcat>
c0011319:	83 c4 0c             	add    esp,0xc
c001131c:	68 96 00 00 00       	push   0x96
c0011321:	6a 00                	push   0x0
c0011323:	57                   	push   edi
c0011324:	e8 43 f4 fe ff       	call   c000076c <memset>
c0011329:	83 c4 10             	add    esp,0x10
c001132c:	83 ec 0c             	sub    esp,0xc
c001132f:	56                   	push   esi
c0011330:	e8 3d fa ff ff       	call   c0010d72 <VgaText::doUpdate()>
c0011335:	83 c4 10             	add    esp,0x10
c0011338:	83 c4 1c             	add    esp,0x1c
c001133b:	5b                   	pop    ebx
c001133c:	5e                   	pop    esi
c001133d:	5f                   	pop    edi
c001133e:	5d                   	pop    ebp
c001133f:	c3                   	ret    

c0011340 <VgaText::write(unsigned long long, void*, int*)>:
c0011340:	55                   	push   ebp
c0011341:	57                   	push   edi
c0011342:	56                   	push   esi
c0011343:	53                   	push   ebx
c0011344:	83 ec 0c             	sub    esp,0xc
c0011347:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001134b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001134f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011353:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001135a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001135d:	39 eb                	cmp    ebx,ebp
c001135f:	74 13                	je     c0011374 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011361:	43                   	inc    ebx
c0011362:	50                   	push   eax
c0011363:	50                   	push   eax
c0011364:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011368:	50                   	push   eax
c0011369:	56                   	push   esi
c001136a:	e8 e3 fb ff ff       	call   c0010f52 <VgaText::putchar(char)>
c001136f:	83 c4 10             	add    esp,0x10
c0011372:	eb e9                	jmp    c001135d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011374:	83 ec 0c             	sub    esp,0xc
c0011377:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001137e:	56                   	push   esi
c001137f:	e8 ee f9 ff ff       	call   c0010d72 <VgaText::doUpdate()>
c0011384:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011388:	89 38                	mov    DWORD PTR [eax],edi
c001138a:	83 c4 1c             	add    esp,0x1c
c001138d:	31 c0                	xor    eax,eax
c001138f:	5b                   	pop    ebx
c0011390:	5e                   	pop    esi
c0011391:	5f                   	pop    edi
c0011392:	5d                   	pop    ebp
c0011393:	c3                   	ret    

c0011394 <newTerminal(char*)>:
c0011394:	83 ec 28             	sub    esp,0x28
c0011397:	68 c4 02 00 00       	push   0x2c4
c001139c:	e8 1f e5 ff ff       	call   c000f8c0 <malloc>
c00113a1:	5a                   	pop    edx
c00113a2:	59                   	pop    ecx
c00113a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00113a7:	50                   	push   eax
c00113a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113ac:	e8 f9 fc ff ff       	call   c00110aa <VgaText::VgaText(char const*)>
c00113b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113b5:	83 c4 2c             	add    esp,0x2c
c00113b8:	c3                   	ret    
c00113b9:	90                   	nop

c00113ba <TSS::TSS()>:
c00113ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113c5:	90                   	nop
c00113c6:	c3                   	ret    
c00113c7:	90                   	nop

c00113c8 <TSS::setESP(unsigned long)>:
c00113c8:	55                   	push   ebp
c00113c9:	89 e5                	mov    ebp,esp
c00113cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113d1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113d7:	90                   	nop
c00113d8:	5d                   	pop    ebp
c00113d9:	c3                   	ret    

c00113da <TSS::flush()>:
c00113da:	55                   	push   ebp
c00113db:	89 e5                	mov    ebp,esp
c00113dd:	83 ec 10             	sub    esp,0x10
c00113e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00113e5:	83 c8 03             	or     eax,0x3
c00113e8:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00113ec:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00113f0:	66 89 d0             	mov    ax,dx
c00113f3:	0f 00 d8             	ltr    ax
c00113f6:	90                   	nop
c00113f7:	c9                   	leave  
c00113f8:	c3                   	ret    
c00113f9:	90                   	nop

c00113fa <TSS::setup(unsigned long, unsigned long)>:
c00113fa:	55                   	push   ebp
c00113fb:	89 e5                	mov    ebp,esp
c00113fd:	83 ec 18             	sub    esp,0x18
c0011400:	83 ec 0c             	sub    esp,0xc
c0011403:	6a 68                	push   0x68
c0011405:	e8 b6 e4 ff ff       	call   c000f8c0 <malloc>
c001140a:	83 c4 10             	add    esp,0x10
c001140d:	89 c2                	mov    edx,eax
c001140f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011412:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001141b:	83 ec 04             	sub    esp,0x4
c001141e:	6a 68                	push   0x68
c0011420:	6a 00                	push   0x0
c0011422:	50                   	push   eax
c0011423:	e8 44 f3 fe ff       	call   c000076c <memset>
c0011428:	83 c4 10             	add    esp,0x10
c001142b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001142e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011431:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001143a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001143d:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011446:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011449:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001144c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001144f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011455:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001145b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001145e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011461:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146d:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011476:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011479:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001147f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011482:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011485:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001148b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001148e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011491:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001149a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001149d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00114a0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00114a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114a9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114ac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b5:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00114bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c2:	0f 20 da             	mov    edx,cr3
c00114c5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00114c8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00114cb:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00114ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d4:	83 ec 08             	sub    esp,0x8
c00114d7:	50                   	push   eax
c00114d8:	8d 45 ec             	lea    eax,[ebp-0x14]
c00114db:	50                   	push   eax
c00114dc:	e8 bb db ff ff       	call   c000f09c <GDTEntry::setBase(unsigned int)>
c00114e1:	83 c4 10             	add    esp,0x10
c00114e4:	83 ec 08             	sub    esp,0x8
c00114e7:	6a 68                	push   0x68
c00114e9:	8d 45 ec             	lea    eax,[ebp-0x14]
c00114ec:	50                   	push   eax
c00114ed:	e8 c6 db ff ff       	call   c000f0b8 <GDTEntry::setLimit(unsigned int)>
c00114f2:	83 c4 10             	add    esp,0x10
c00114f5:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00114f9:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114fc:	83 e0 0f             	and    eax,0xf
c00114ff:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011502:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011505:	83 c8 40             	or     eax,0x40
c0011508:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001150b:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0011510:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011516:	05 78 01 00 00       	add    eax,0x178
c001151b:	83 ec 04             	sub    esp,0x4
c001151e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011521:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011524:	50                   	push   eax
c0011525:	e8 c2 db ff ff       	call   c000f0ec <GDT::addEntry(GDTEntry)>
c001152a:	83 c4 10             	add    esp,0x10
c001152d:	89 c2                	mov    edx,eax
c001152f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011532:	89 10                	mov    DWORD PTR [eax],edx
c0011534:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0011539:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001153f:	05 78 01 00 00       	add    eax,0x178
c0011544:	83 ec 0c             	sub    esp,0xc
c0011547:	50                   	push   eax
c0011548:	e8 e3 db ff ff       	call   c000f130 <GDT::flush()>
c001154d:	83 c4 10             	add    esp,0x10
c0011550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011553:	8b 00                	mov    eax,DWORD PTR [eax]
c0011555:	83 ec 08             	sub    esp,0x8
c0011558:	50                   	push   eax
c0011559:	68 08 b0 02 c0       	push   0xc002b008
c001155e:	e8 2c 19 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0011563:	83 c4 10             	add    esp,0x10
c0011566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011569:	8b 00                	mov    eax,DWORD PTR [eax]
c001156b:	c9                   	leave  
c001156c:	c3                   	ret    
c001156d:	90                   	nop

c001156e <ReservedFilename::read(unsigned long long, void*, int*)>:
c001156e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011572:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011576:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011579:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001157e:	75 08                	jne    c0011588 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011580:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011586:	eb 38                	jmp    c00115c0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011588:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001158d:	75 17                	jne    c00115a6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001158f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011594:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011597:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001159d:	8b 10                	mov    edx,DWORD PTR [eax]
c001159f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115a3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00115a6:	89 c1                	mov    ecx,eax
c00115a8:	83 e1 fd             	and    ecx,0xfffffffd
c00115ab:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00115b1:	74 cd                	je     c0011580 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00115b3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115b8:	83 e0 ef             	and    eax,0xffffffef
c00115bb:	83 f8 08             	cmp    eax,0x8
c00115be:	76 c0                	jbe    c0011580 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00115c0:	31 c0                	xor    eax,eax
c00115c2:	c3                   	ret    
c00115c3:	90                   	nop

c00115c4 <ReservedFilename::isAtty()>:
c00115c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00115cb:	31 c0                	xor    eax,eax
c00115cd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00115d3:	74 09                	je     c00115de <ReservedFilename::isAtty()+0x1a>
c00115d5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00115db:	0f 94 c0             	sete   al
c00115de:	c3                   	ret    
c00115df:	90                   	nop

c00115e0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00115e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115ef:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115f4:	75 08                	jne    c00115fe <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00115f6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115fc:	eb 3d                	jmp    c001163b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115fe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011603:	75 17                	jne    c001161c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011605:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001160a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001160d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011613:	8b 10                	mov    edx,DWORD PTR [eax]
c0011615:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011619:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001161c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011621:	75 04                	jne    c0011627 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011623:	89 0a                	mov    DWORD PTR [edx],ecx
c0011625:	eb 14                	jmp    c001163b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011627:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001162c:	74 c8                	je     c00115f6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001162e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011633:	83 e0 ef             	and    eax,0xffffffef
c0011636:	83 f8 08             	cmp    eax,0x8
c0011639:	76 bb                	jbe    c00115f6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001163b:	31 c0                	xor    eax,eax
c001163d:	c3                   	ret    

c001163e <UnixFile::getFileDescriptor()>:
c001163e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011642:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011645:	c3                   	ret    

c0011646 <UnixFile::UnixFile(int)>:
c0011646:	53                   	push   ebx
c0011647:	83 ec 28             	sub    esp,0x28
c001164a:	ba f4 b0 02 c0       	mov    edx,0xc002b0f4
c001164f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011653:	89 10                	mov    DWORD PTR [eax],edx
c0011655:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001165d:	0f 8f 8c 01 00 00    	jg     c00117ef <UnixFile::UnixFile(int)+0x1a9>
c0011663:	a1 a0 e0 02 c0       	mov    eax,ds:0xc002e0a0
c0011668:	8d 50 01             	lea    edx,[eax+0x1]
c001166b:	89 15 a0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a0,edx
c0011671:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011675:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011678:	83 ec 08             	sub    esp,0x8
c001167b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001167f:	68 78 f2 02 c0       	push   0xc002f278
c0011684:	e8 83 7b 01 00       	call   c002920c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011689:	83 c4 10             	add    esp,0x10
c001168c:	a0 74 f2 02 c0       	mov    al,ds:0xc002f274
c0011691:	83 f0 01             	xor    eax,0x1
c0011694:	84 c0                	test   al,al
c0011696:	0f 84 54 01 00 00    	je     c00117f0 <UnixFile::UnixFile(int)+0x1aa>
c001169c:	c6 05 74 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f274,0x1
c00116a3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00116ab:	83 ec 0c             	sub    esp,0xc
c00116ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00116b2:	e8 09 e2 ff ff       	call   c000f8c0 <malloc>
c00116b7:	83 c4 10             	add    esp,0x10
c00116ba:	89 c3                	mov    ebx,eax
c00116bc:	83 ec 08             	sub    esp,0x8
c00116bf:	68 03 ff ff 0f       	push   0xfffff03
c00116c4:	53                   	push   ebx
c00116c5:	e8 2c 01 00 00       	call   c00117f6 <ReservedFilename::ReservedFilename(int)>
c00116ca:	83 c4 10             	add    esp,0x10
c00116cd:	89 1d 6c f2 02 c0    	mov    DWORD PTR ds:0xc002f26c,ebx
c00116d3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00116db:	83 ec 0c             	sub    esp,0xc
c00116de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116e2:	e8 d9 e1 ff ff       	call   c000f8c0 <malloc>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	89 c3                	mov    ebx,eax
c00116ec:	83 ec 08             	sub    esp,0x8
c00116ef:	68 01 ff ff 0f       	push   0xfffff01
c00116f4:	53                   	push   ebx
c00116f5:	e8 fc 00 00 00       	call   c00117f6 <ReservedFilename::ReservedFilename(int)>
c00116fa:	83 c4 10             	add    esp,0x10
c00116fd:	89 1d 70 f2 02 c0    	mov    DWORD PTR ds:0xc002f270,ebx
c0011703:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001170b:	83 ec 0c             	sub    esp,0xc
c001170e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011712:	e8 a9 e1 ff ff       	call   c000f8c0 <malloc>
c0011717:	83 c4 10             	add    esp,0x10
c001171a:	89 c3                	mov    ebx,eax
c001171c:	83 ec 08             	sub    esp,0x8
c001171f:	68 00 ff ff 0f       	push   0xfffff00
c0011724:	53                   	push   ebx
c0011725:	e8 cc 00 00 00       	call   c00117f6 <ReservedFilename::ReservedFilename(int)>
c001172a:	83 c4 10             	add    esp,0x10
c001172d:	89 1d 64 f2 02 c0    	mov    DWORD PTR ds:0xc002f264,ebx
c0011733:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001173b:	83 ec 0c             	sub    esp,0xc
c001173e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011742:	e8 79 e1 ff ff       	call   c000f8c0 <malloc>
c0011747:	83 c4 10             	add    esp,0x10
c001174a:	89 c3                	mov    ebx,eax
c001174c:	83 ec 08             	sub    esp,0x8
c001174f:	68 02 ff ff 0f       	push   0xfffff02
c0011754:	53                   	push   ebx
c0011755:	e8 9c 00 00 00       	call   c00117f6 <ReservedFilename::ReservedFilename(int)>
c001175a:	83 c4 10             	add    esp,0x10
c001175d:	89 1d 68 f2 02 c0    	mov    DWORD PTR ds:0xc002f268,ebx
c0011763:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001176b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011770:	7f 7e                	jg     c00117f0 <UnixFile::UnixFile(int)+0x1aa>
c0011772:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001177a:	83 ec 0c             	sub    esp,0xc
c001177d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011781:	e8 3a e1 ff ff       	call   c000f8c0 <malloc>
c0011786:	83 c4 10             	add    esp,0x10
c0011789:	89 c3                	mov    ebx,eax
c001178b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001178f:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011794:	83 ec 08             	sub    esp,0x8
c0011797:	50                   	push   eax
c0011798:	53                   	push   ebx
c0011799:	e8 58 00 00 00       	call   c00117f6 <ReservedFilename::ReservedFilename(int)>
c001179e:	83 c4 10             	add    esp,0x10
c00117a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117a5:	89 1c 85 40 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0dc0],ebx
c00117ac:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00117b4:	83 ec 0c             	sub    esp,0xc
c00117b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117bb:	e8 00 e1 ff ff       	call   c000f8c0 <malloc>
c00117c0:	83 c4 10             	add    esp,0x10
c00117c3:	89 c3                	mov    ebx,eax
c00117c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117c9:	05 20 ff ff 0f       	add    eax,0xfffff20
c00117ce:	83 ec 08             	sub    esp,0x8
c00117d1:	50                   	push   eax
c00117d2:	53                   	push   ebx
c00117d3:	e8 1e 00 00 00       	call   c00117f6 <ReservedFilename::ReservedFilename(int)>
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117df:	89 1c 85 00 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e00],ebx
c00117e6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00117ea:	e9 7c ff ff ff       	jmp    c001176b <UnixFile::UnixFile(int)+0x125>
c00117ef:	90                   	nop
c00117f0:	83 c4 28             	add    esp,0x28
c00117f3:	5b                   	pop    ebx
c00117f4:	c3                   	ret    
c00117f5:	90                   	nop

c00117f6 <ReservedFilename::ReservedFilename(int)>:
c00117f6:	83 ec 0c             	sub    esp,0xc
c00117f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117fd:	83 ec 08             	sub    esp,0x8
c0011800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011804:	50                   	push   eax
c0011805:	e8 3c fe ff ff       	call   c0011646 <UnixFile::UnixFile(int)>
c001180a:	83 c4 10             	add    esp,0x10
c001180d:	ba 10 b1 02 c0       	mov    edx,0xc002b110
c0011812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011816:	89 10                	mov    DWORD PTR [eax],edx
c0011818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001181c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011820:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011823:	90                   	nop
c0011824:	83 c4 0c             	add    esp,0xc
c0011827:	c3                   	ret    

c0011828 <UnixFile::~UnixFile()>:
c0011828:	83 ec 1c             	sub    esp,0x1c
c001182b:	ba f4 b0 02 c0       	mov    edx,0xc002b0f4
c0011830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011834:	89 10                	mov    DWORD PTR [eax],edx
c0011836:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001183a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001183d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011842:	7f 73                	jg     c00118b7 <UnixFile::~UnixFile()+0x8f>
c0011844:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001184c:	83 ec 0c             	sub    esp,0xc
c001184f:	68 78 f2 02 c0       	push   0xc002f278
c0011854:	e8 87 7a 01 00       	call   c00292e0 <LinkedList<UnixFile>::getFirstElement()>
c0011859:	83 c4 10             	add    esp,0x10
c001185c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011860:	83 ec 0c             	sub    esp,0xc
c0011863:	68 78 f2 02 c0       	push   0xc002f278
c0011868:	e8 7b 7a 01 00       	call   c00292e8 <LinkedList<UnixFile>::removeFirst()>
c001186d:	83 c4 10             	add    esp,0x10
c0011870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011874:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011878:	74 40                	je     c00118ba <UnixFile::~UnixFile()+0x92>
c001187a:	83 ec 08             	sub    esp,0x8
c001187d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011881:	68 78 f2 02 c0       	push   0xc002f278
c0011886:	e8 81 79 01 00       	call   c002920c <LinkedList<UnixFile>::addElement(UnixFile*)>
c001188b:	83 c4 10             	add    esp,0x10
c001188e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011892:	8d 50 01             	lea    edx,[eax+0x1]
c0011895:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011899:	3d 88 13 00 00       	cmp    eax,0x1388
c001189e:	0f 94 c0             	sete   al
c00118a1:	84 c0                	test   al,al
c00118a3:	74 a7                	je     c001184c <UnixFile::~UnixFile()+0x24>
c00118a5:	83 ec 0c             	sub    esp,0xc
c00118a8:	68 cc b0 02 c0       	push   0xc002b0cc
c00118ad:	e8 45 90 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c00118b2:	83 c4 10             	add    esp,0x10
c00118b5:	eb 95                	jmp    c001184c <UnixFile::~UnixFile()+0x24>
c00118b7:	90                   	nop
c00118b8:	eb 01                	jmp    c00118bb <UnixFile::~UnixFile()+0x93>
c00118ba:	90                   	nop
c00118bb:	90                   	nop
c00118bc:	83 c4 1c             	add    esp,0x1c
c00118bf:	c3                   	ret    

c00118c0 <UnixFile::~UnixFile()>:
c00118c0:	83 ec 0c             	sub    esp,0xc
c00118c3:	83 ec 0c             	sub    esp,0xc
c00118c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ca:	e8 59 ff ff ff       	call   c0011828 <UnixFile::~UnixFile()>
c00118cf:	83 c4 10             	add    esp,0x10
c00118d2:	83 ec 08             	sub    esp,0x8
c00118d5:	6a 0c                	push   0xc
c00118d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118db:	e8 cf 14 00 00       	call   c0012daf <operator delete(void*, unsigned long)>
c00118e0:	83 c4 10             	add    esp,0x10
c00118e3:	83 c4 0c             	add    esp,0xc
c00118e6:	c3                   	ret    
c00118e7:	90                   	nop

c00118e8 <ReservedFilename::~ReservedFilename()>:
c00118e8:	83 ec 0c             	sub    esp,0xc
c00118eb:	ba 10 b1 02 c0       	mov    edx,0xc002b110
c00118f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118f4:	89 10                	mov    DWORD PTR [eax],edx
c00118f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118fa:	83 ec 0c             	sub    esp,0xc
c00118fd:	50                   	push   eax
c00118fe:	e8 25 ff ff ff       	call   c0011828 <UnixFile::~UnixFile()>
c0011903:	83 c4 10             	add    esp,0x10
c0011906:	90                   	nop
c0011907:	83 c4 0c             	add    esp,0xc
c001190a:	c3                   	ret    
c001190b:	90                   	nop

c001190c <ReservedFilename::~ReservedFilename()>:
c001190c:	83 ec 0c             	sub    esp,0xc
c001190f:	83 ec 0c             	sub    esp,0xc
c0011912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011916:	e8 cd ff ff ff       	call   c00118e8 <ReservedFilename::~ReservedFilename()>
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	83 ec 08             	sub    esp,0x8
c0011921:	6a 0c                	push   0xc
c0011923:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011927:	e8 83 14 00 00       	call   c0012daf <operator delete(void*, unsigned long)>
c001192c:	83 c4 10             	add    esp,0x10
c001192f:	83 c4 0c             	add    esp,0xc
c0011932:	c3                   	ret    

c0011933 <getFromFileDescriptor(int)>:
c0011933:	53                   	push   ebx
c0011934:	83 ec 08             	sub    esp,0x8
c0011937:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001193b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011941:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011947:	7f 2c                	jg     c0011975 <getFromFileDescriptor(int)+0x42>
c0011949:	83 ec 0c             	sub    esp,0xc
c001194c:	68 78 f2 02 c0       	push   0xc002f278
c0011951:	e8 8a 79 01 00       	call   c00292e0 <LinkedList<UnixFile>::getFirstElement()>
c0011956:	83 c4 10             	add    esp,0x10
c0011959:	85 c0                	test   eax,eax
c001195b:	75 04                	jne    c0011961 <getFromFileDescriptor(int)+0x2e>
c001195d:	31 c0                	xor    eax,eax
c001195f:	eb 6e                	jmp    c00119cf <getFromFileDescriptor(int)+0x9c>
c0011961:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011964:	74 69                	je     c00119cf <getFromFileDescriptor(int)+0x9c>
c0011966:	52                   	push   edx
c0011967:	52                   	push   edx
c0011968:	50                   	push   eax
c0011969:	68 78 f2 02 c0       	push   0xc002f278
c001196e:	e8 17 7a 01 00       	call   c002938a <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011973:	eb e1                	jmp    c0011956 <getFromFileDescriptor(int)+0x23>
c0011975:	a1 6c f2 02 c0       	mov    eax,ds:0xc002f26c
c001197a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011980:	74 4d                	je     c00119cf <getFromFileDescriptor(int)+0x9c>
c0011982:	a1 70 f2 02 c0       	mov    eax,ds:0xc002f270
c0011987:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001198d:	74 40                	je     c00119cf <getFromFileDescriptor(int)+0x9c>
c001198f:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0011994:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001199a:	74 33                	je     c00119cf <getFromFileDescriptor(int)+0x9c>
c001199c:	a1 64 f2 02 c0       	mov    eax,ds:0xc002f264
c00119a1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00119a7:	74 26                	je     c00119cf <getFromFileDescriptor(int)+0x9c>
c00119a9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00119af:	83 f8 08             	cmp    eax,0x8
c00119b2:	77 09                	ja     c00119bd <getFromFileDescriptor(int)+0x8a>
c00119b4:	8b 04 85 40 f2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0dc0]
c00119bb:	eb 12                	jmp    c00119cf <getFromFileDescriptor(int)+0x9c>
c00119bd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00119c3:	83 fb 08             	cmp    ebx,0x8
c00119c6:	77 95                	ja     c001195d <getFromFileDescriptor(int)+0x2a>
c00119c8:	8b 04 9d 00 f2 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0e00]
c00119cf:	83 c4 08             	add    esp,0x8
c00119d2:	5b                   	pop    ebx
c00119d3:	c3                   	ret    

c00119d4 <__static_initialization_and_destruction_0(int, int)>:
c00119d4:	83 ec 0c             	sub    esp,0xc
c00119d7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00119dc:	75 34                	jne    c0011a12 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00119de:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00119e6:	75 2a                	jne    c0011a12 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00119e8:	83 ec 0c             	sub    esp,0xc
c00119eb:	68 78 f2 02 c0       	push   0xc002f278
c00119f0:	e8 bf 77 01 00       	call   c00291b4 <LinkedList<UnixFile>::LinkedList()>
c00119f5:	83 c4 10             	add    esp,0x10
c00119f8:	83 ec 04             	sub    esp,0x4
c00119fb:	68 30 e0 02 c0       	push   0xc002e030
c0011a00:	68 78 f2 02 c0       	push   0xc002f278
c0011a05:	68 b2 91 02 c0       	push   0xc00291b2
c0011a0a:	e8 1a 13 00 00       	call   c0012d29 <__cxa_atexit>
c0011a0f:	83 c4 10             	add    esp,0x10
c0011a12:	90                   	nop
c0011a13:	83 c4 0c             	add    esp,0xc
c0011a16:	c3                   	ret    

c0011a17 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011a17:	83 ec 0c             	sub    esp,0xc
c0011a1a:	83 ec 08             	sub    esp,0x8
c0011a1d:	68 ff ff 00 00       	push   0xffff
c0011a22:	6a 01                	push   0x1
c0011a24:	e8 ab ff ff ff       	call   c00119d4 <__static_initialization_and_destruction_0(int, int)>
c0011a29:	83 c4 10             	add    esp,0x10
c0011a2c:	83 c4 0c             	add    esp,0xc
c0011a2f:	c3                   	ret    

c0011a30 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011a30:	53                   	push   ebx
c0011a31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a35:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a39:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011a3f:	89 c8                	mov    eax,ecx
c0011a41:	d1 e8                	shr    eax,1
c0011a43:	03 05 a8 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e0a8
c0011a49:	83 e1 01             	and    ecx,0x1
c0011a4c:	8a 10                	mov    dl,BYTE PTR [eax]
c0011a4e:	75 09                	jne    c0011a59 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011a50:	83 e2 f0             	and    edx,0xfffffff0
c0011a53:	09 da                	or     edx,ebx
c0011a55:	88 10                	mov    BYTE PTR [eax],dl
c0011a57:	5b                   	pop    ebx
c0011a58:	c3                   	ret    
c0011a59:	c1 e3 04             	shl    ebx,0x4
c0011a5c:	83 e2 0f             	and    edx,0xf
c0011a5f:	09 da                	or     edx,ebx
c0011a61:	88 10                	mov    BYTE PTR [eax],dl
c0011a63:	5b                   	pop    ebx
c0011a64:	c3                   	ret    

c0011a65 <Virt::getPageState(unsigned long)>:
c0011a65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a69:	8b 0d a8 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0a8
c0011a6f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011a75:	89 d0                	mov    eax,edx
c0011a77:	d1 e8                	shr    eax,1
c0011a79:	83 e2 01             	and    edx,0x1
c0011a7c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011a7f:	75 04                	jne    c0011a85 <Virt::getPageState(unsigned long)+0x20>
c0011a81:	83 e0 0f             	and    eax,0xf
c0011a84:	c3                   	ret    
c0011a85:	c0 e8 04             	shr    al,0x4
c0011a88:	c3                   	ret    

c0011a89 <Virt::allocateKernelVirtualPages(int)>:
c0011a89:	55                   	push   ebp
c0011a8a:	31 ed                	xor    ebp,ebp
c0011a8c:	57                   	push   edi
c0011a8d:	56                   	push   esi
c0011a8e:	53                   	push   ebx
c0011a8f:	31 db                	xor    ebx,ebx
c0011a91:	83 ec 1c             	sub    esp,0x1c
c0011a94:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a98:	8b 3d a4 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0a4
c0011a9e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011aa3:	57                   	push   edi
c0011aa4:	e8 bc ff ff ff       	call   c0011a65 <Virt::getPageState(unsigned long)>
c0011aa9:	5a                   	pop    edx
c0011aaa:	84 c0                	test   al,al
c0011aac:	75 3a                	jne    c0011ae8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011aae:	85 db                	test   ebx,ebx
c0011ab0:	75 02                	jne    c0011ab4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011ab2:	89 fd                	mov    ebp,edi
c0011ab4:	43                   	inc    ebx
c0011ab5:	39 f3                	cmp    ebx,esi
c0011ab7:	74 5a                	je     c0011b13 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011ab9:	47                   	inc    edi
c0011aba:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011ac0:	76 31                	jbe    c0011af3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011ac2:	c7 05 a4 e0 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e0a4,0xc8000
c0011acc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011ad1:	75 28                	jne    c0011afb <Virt::allocateKernelVirtualPages(int)+0x72>
c0011ad3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011ad8:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011add:	57                   	push   edi
c0011ade:	e8 82 ff ff ff       	call   c0011a65 <Virt::getPageState(unsigned long)>
c0011ae3:	5a                   	pop    edx
c0011ae4:	84 c0                	test   al,al
c0011ae6:	74 c6                	je     c0011aae <Virt::allocateKernelVirtualPages(int)+0x25>
c0011ae8:	31 db                	xor    ebx,ebx
c0011aea:	47                   	inc    edi
c0011aeb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011af1:	77 cf                	ja     c0011ac2 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011af3:	89 3d a4 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a4,edi
c0011af9:	eb a8                	jmp    c0011aa3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011afb:	83 ec 0c             	sub    esp,0xc
c0011afe:	68 24 b1 02 c0       	push   0xc002b124
c0011b03:	e8 ef 8d 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0011b08:	8b 3d a4 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0a4
c0011b0e:	83 c4 10             	add    esp,0x10
c0011b11:	eb 90                	jmp    c0011aa3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b13:	89 2d a4 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a4,ebp
c0011b19:	4b                   	dec    ebx
c0011b1a:	74 5f                	je     c0011b7b <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011b1c:	85 f6                	test   esi,esi
c0011b1e:	74 3d                	je     c0011b5d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b20:	89 e8                	mov    eax,ebp
c0011b22:	31 db                	xor    ebx,ebx
c0011b24:	8d 7e ff             	lea    edi,[esi-0x1]
c0011b27:	eb 14                	jmp    c0011b3d <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011b29:	6a 01                	push   0x1
c0011b2b:	43                   	inc    ebx
c0011b2c:	50                   	push   eax
c0011b2d:	e8 fe fe ff ff       	call   c0011a30 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b32:	58                   	pop    eax
c0011b33:	39 f3                	cmp    ebx,esi
c0011b35:	5a                   	pop    edx
c0011b36:	74 25                	je     c0011b5d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b38:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0011b3d:	8d 50 01             	lea    edx,[eax+0x1]
c0011b40:	85 db                	test   ebx,ebx
c0011b42:	89 15 a4 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a4,edx
c0011b48:	74 20                	je     c0011b6a <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011b4a:	39 df                	cmp    edi,ebx
c0011b4c:	75 db                	jne    c0011b29 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011b4e:	6a 03                	push   0x3
c0011b50:	43                   	inc    ebx
c0011b51:	50                   	push   eax
c0011b52:	e8 d9 fe ff ff       	call   c0011a30 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b57:	59                   	pop    ecx
c0011b58:	39 f3                	cmp    ebx,esi
c0011b5a:	58                   	pop    eax
c0011b5b:	75 db                	jne    c0011b38 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b5d:	83 c4 1c             	add    esp,0x1c
c0011b60:	89 e8                	mov    eax,ebp
c0011b62:	5b                   	pop    ebx
c0011b63:	c1 e0 0c             	shl    eax,0xc
c0011b66:	5e                   	pop    esi
c0011b67:	5f                   	pop    edi
c0011b68:	5d                   	pop    ebp
c0011b69:	c3                   	ret    
c0011b6a:	6a 02                	push   0x2
c0011b6c:	bb 01 00 00 00       	mov    ebx,0x1
c0011b71:	50                   	push   eax
c0011b72:	e8 b9 fe ff ff       	call   c0011a30 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b77:	58                   	pop    eax
c0011b78:	5a                   	pop    edx
c0011b79:	eb bd                	jmp    c0011b38 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b7b:	6a 04                	push   0x4
c0011b7d:	8d 45 01             	lea    eax,[ebp+0x1]
c0011b80:	55                   	push   ebp
c0011b81:	a3 a4 e0 02 c0       	mov    ds:0xc002e0a4,eax
c0011b86:	e8 a5 fe ff ff       	call   c0011a30 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b8b:	59                   	pop    ecx
c0011b8c:	89 e8                	mov    eax,ebp
c0011b8e:	5b                   	pop    ebx
c0011b8f:	c1 e0 0c             	shl    eax,0xc
c0011b92:	83 c4 1c             	add    esp,0x1c
c0011b95:	5b                   	pop    ebx
c0011b96:	5e                   	pop    esi
c0011b97:	5f                   	pop    edi
c0011b98:	5d                   	pop    ebp
c0011b99:	c3                   	ret    

c0011b9a <Virt::freeSwapfilePage(unsigned long)>:
c0011b9a:	53                   	push   ebx
c0011b9b:	8b 15 8c f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f28c
c0011ba1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ba5:	b8 01 00 00 00       	mov    eax,0x1
c0011baa:	89 cb                	mov    ebx,ecx
c0011bac:	d3 e0                	shl    eax,cl
c0011bae:	c1 eb 05             	shr    ebx,0x5
c0011bb1:	f7 d0                	not    eax
c0011bb3:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011bb6:	5b                   	pop    ebx
c0011bb7:	c3                   	ret    

c0011bb8 <Virt::swapIDToSector(unsigned long)>:
c0011bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bbc:	0f af 05 ac e0 02 c0 	imul   eax,DWORD PTR ds:0xc002e0ac
c0011bc3:	03 05 b4 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e0b4
c0011bc9:	c3                   	ret    

c0011bca <Virt::allocateSwapfilePage()>:
c0011bca:	55                   	push   ebp
c0011bcb:	31 d2                	xor    edx,edx
c0011bcd:	57                   	push   edi
c0011bce:	56                   	push   esi
c0011bcf:	53                   	push   ebx
c0011bd0:	83 ec 0c             	sub    esp,0xc
c0011bd3:	8b 0d ac e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0ac
c0011bd9:	a1 b0 e0 02 c0       	mov    eax,ds:0xc002e0b0
c0011bde:	f7 f1                	div    ecx
c0011be0:	39 0d b0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0b0,ecx
c0011be6:	72 2d                	jb     c0011c15 <Virt::allocateSwapfilePage()+0x4b>
c0011be8:	8b 35 8c f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f28c
c0011bee:	8b 16                	mov    edx,DWORD PTR [esi]
c0011bf0:	f6 c2 01             	test   dl,0x1
c0011bf3:	74 3c                	je     c0011c31 <Virt::allocateSwapfilePage()+0x67>
c0011bf5:	31 c9                	xor    ecx,ecx
c0011bf7:	bf 01 00 00 00       	mov    edi,0x1
c0011bfc:	eb 12                	jmp    c0011c10 <Virt::allocateSwapfilePage()+0x46>
c0011bfe:	89 fd                	mov    ebp,edi
c0011c00:	89 ca                	mov    edx,ecx
c0011c02:	d3 e5                	shl    ebp,cl
c0011c04:	c1 ea 05             	shr    edx,0x5
c0011c07:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011c0a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c0c:	85 ea                	test   edx,ebp
c0011c0e:	74 2a                	je     c0011c3a <Virt::allocateSwapfilePage()+0x70>
c0011c10:	41                   	inc    ecx
c0011c11:	39 c8                	cmp    eax,ecx
c0011c13:	77 e9                	ja     c0011bfe <Virt::allocateSwapfilePage()+0x34>
c0011c15:	83 ec 0c             	sub    esp,0xc
c0011c18:	68 ab b2 02 c0       	push   0xc002b2ab
c0011c1d:	e8 d5 8c 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0011c22:	83 c4 10             	add    esp,0x10
c0011c25:	31 c9                	xor    ecx,ecx
c0011c27:	83 c4 0c             	add    esp,0xc
c0011c2a:	89 c8                	mov    eax,ecx
c0011c2c:	5b                   	pop    ebx
c0011c2d:	5e                   	pop    esi
c0011c2e:	5f                   	pop    edi
c0011c2f:	5d                   	pop    ebp
c0011c30:	c3                   	ret    
c0011c31:	89 f3                	mov    ebx,esi
c0011c33:	bd 01 00 00 00       	mov    ebp,0x1
c0011c38:	31 c9                	xor    ecx,ecx
c0011c3a:	09 ea                	or     edx,ebp
c0011c3c:	89 c8                	mov    eax,ecx
c0011c3e:	89 13                	mov    DWORD PTR [ebx],edx
c0011c40:	83 c4 0c             	add    esp,0xc
c0011c43:	5b                   	pop    ebx
c0011c44:	5e                   	pop    esi
c0011c45:	5f                   	pop    edi
c0011c46:	5d                   	pop    ebp
c0011c47:	c3                   	ret    

c0011c48 <Virt::virtualMemorySetup()>:
c0011c48:	53                   	push   ebx
c0011c49:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c4e:	83 ec 08             	sub    esp,0x8
c0011c51:	6a 0f                	push   0xf
c0011c53:	53                   	push   ebx
c0011c54:	43                   	inc    ebx
c0011c55:	e8 d6 fd ff ff       	call   c0011a30 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c5a:	59                   	pop    ecx
c0011c5b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c61:	58                   	pop    eax
c0011c62:	75 ed                	jne    c0011c51 <Virt::virtualMemorySetup()+0x9>
c0011c64:	83 ec 08             	sub    esp,0x8
c0011c67:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c6c:	68 00 00 00 c8       	push   0xc8000000
c0011c71:	68 c2 b2 02 c0       	push   0xc002b2c2
c0011c76:	e8 14 12 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0011c7b:	58                   	pop    eax
c0011c7c:	5a                   	pop    edx
c0011c7d:	68 00 f0 ff ef       	push   0xeffff000
c0011c82:	68 d6 b2 02 c0       	push   0xc002b2d6
c0011c87:	e8 03 12 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0011c8c:	83 c4 10             	add    esp,0x10
c0011c8f:	83 ec 08             	sub    esp,0x8
c0011c92:	6a 00                	push   0x0
c0011c94:	53                   	push   ebx
c0011c95:	43                   	inc    ebx
c0011c96:	e8 95 fd ff ff       	call   c0011a30 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c9b:	83 c4 10             	add    esp,0x10
c0011c9e:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011ca4:	75 e9                	jne    c0011c8f <Virt::virtualMemorySetup()+0x47>
c0011ca6:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011cab:	83 ec 08             	sub    esp,0x8
c0011cae:	6a 0f                	push   0xf
c0011cb0:	53                   	push   ebx
c0011cb1:	43                   	inc    ebx
c0011cb2:	e8 79 fd ff ff       	call   c0011a30 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cb7:	83 c4 10             	add    esp,0x10
c0011cba:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011cc0:	75 e9                	jne    c0011cab <Virt::virtualMemorySetup()+0x63>
c0011cc2:	83 c4 08             	add    esp,0x8
c0011cc5:	5b                   	pop    ebx
c0011cc6:	c3                   	ret    

c0011cc7 <Virt::swappingSetup()>:
c0011cc7:	c3                   	ret    

c0011cc8 <Virt::setupPageSwapping(int)>:
c0011cc8:	57                   	push   edi
c0011cc9:	56                   	push   esi
c0011cca:	53                   	push   ebx
c0011ccb:	83 ec 1c             	sub    esp,0x1c
c0011cce:	68 ea b2 02 c0       	push   0xc002b2ea
c0011cd3:	e8 b7 11 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0011cd8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011cdf:	e8 dc db ff ff       	call   c000f8c0 <malloc>
c0011ce4:	83 c4 0c             	add    esp,0xc
c0011ce7:	89 c6                	mov    esi,eax
c0011ce9:	ff 35 70 26 03 c0    	push   DWORD PTR ds:0xc0032670
c0011cef:	68 fe b2 02 c0       	push   0xc002b2fe
c0011cf4:	50                   	push   eax
c0011cf5:	e8 f4 16 00 00       	call   c00133ee <File::File(char const*, Process*)>
c0011cfa:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cfd:	e8 c8 18 00 00       	call   c00135ca <File::unlink()>
c0011d02:	59                   	pop    ecx
c0011d03:	5b                   	pop    ebx
c0011d04:	6a 12                	push   0x12
c0011d06:	56                   	push   esi
c0011d07:	e8 46 17 00 00       	call   c0013452 <File::open(FileOpenMode)>
c0011d0c:	83 c4 10             	add    esp,0x10
c0011d0f:	85 c0                	test   eax,eax
c0011d11:	0f 85 5b 01 00 00    	jne    c0011e72 <Virt::setupPageSwapping(int)+0x1aa>
c0011d17:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d1b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d23:	c1 e3 08             	shl    ebx,0x8
c0011d26:	83 ec 0c             	sub    esp,0xc
c0011d29:	68 00 00 01 00       	push   0x10000
c0011d2e:	e8 8d db ff ff       	call   c000f8c0 <malloc>
c0011d33:	83 c4 0c             	add    esp,0xc
c0011d36:	89 c7                	mov    edi,eax
c0011d38:	68 00 00 01 00       	push   0x10000
c0011d3d:	68 ee 00 00 00       	push   0xee
c0011d42:	50                   	push   eax
c0011d43:	e8 24 ea fe ff       	call   c000076c <memset>
c0011d48:	83 c4 10             	add    esp,0x10
c0011d4b:	85 db                	test   ebx,ebx
c0011d4d:	79 03                	jns    c0011d52 <Virt::setupPageSwapping(int)+0x8a>
c0011d4f:	83 c3 0f             	add    ebx,0xf
c0011d52:	c1 fb 04             	sar    ebx,0x4
c0011d55:	4b                   	dec    ebx
c0011d56:	83 fb ff             	cmp    ebx,0xffffffff
c0011d59:	74 4f                	je     c0011daa <Virt::setupPageSwapping(int)+0xe2>
c0011d5b:	83 ec 0c             	sub    esp,0xc
c0011d5e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d60:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d64:	52                   	push   edx
c0011d65:	57                   	push   edi
c0011d66:	6a 00                	push   0x0
c0011d68:	68 00 00 01 00       	push   0x10000
c0011d6d:	56                   	push   esi
c0011d6e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d71:	83 c4 20             	add    esp,0x20
c0011d74:	85 c0                	test   eax,eax
c0011d76:	0f 85 e0 00 00 00    	jne    c0011e5c <Virt::setupPageSwapping(int)+0x194>
c0011d7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d80:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d85:	74 ce                	je     c0011d55 <Virt::setupPageSwapping(int)+0x8d>
c0011d87:	83 ec 08             	sub    esp,0x8
c0011d8a:	4b                   	dec    ebx
c0011d8b:	50                   	push   eax
c0011d8c:	68 51 b3 02 c0       	push   0xc002b351
c0011d91:	e8 f9 10 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0011d96:	c7 04 24 5a b3 02 c0 	mov    DWORD PTR [esp],0xc002b35a
c0011d9d:	e8 55 8b 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0011da2:	83 c4 10             	add    esp,0x10
c0011da5:	83 fb ff             	cmp    ebx,0xffffffff
c0011da8:	75 b1                	jne    c0011d5b <Virt::setupPageSwapping(int)+0x93>
c0011daa:	83 ec 0c             	sub    esp,0xc
c0011dad:	56                   	push   esi
c0011dae:	e8 fd 16 00 00       	call   c00134b0 <File::close()>
c0011db3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011db6:	e8 25 db ff ff       	call   c000f8e0 <rfree>
c0011dbb:	83 c4 10             	add    esp,0x10
c0011dbe:	85 f6                	test   esi,esi
c0011dc0:	74 0c                	je     c0011dce <Virt::setupPageSwapping(int)+0x106>
c0011dc2:	83 ec 0c             	sub    esp,0xc
c0011dc5:	8b 06                	mov    eax,DWORD PTR [esi]
c0011dc7:	56                   	push   esi
c0011dc8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011dcb:	83 c4 10             	add    esp,0x10
c0011dce:	83 ec 08             	sub    esp,0x8
c0011dd1:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0011dd6:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011ddc:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dde:	68 fe b2 02 c0       	push   0xc002b2fe
c0011de3:	50                   	push   eax
c0011de4:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011de7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011deb:	c6 05 b8 e0 02 c0 43 	mov    BYTE PTR ds:0xc002e0b8,0x43
c0011df2:	c1 e2 0b             	shl    edx,0xb
c0011df5:	a3 b4 e0 02 c0       	mov    ds:0xc002e0b4,eax
c0011dfa:	89 15 b0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0b0,edx
c0011e00:	c7 05 ac e0 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e0ac,0x8
c0011e0a:	c1 ea 08             	shr    edx,0x8
c0011e0d:	89 14 24             	mov    DWORD PTR [esp],edx
c0011e10:	e8 ab da ff ff       	call   c000f8c0 <malloc>
c0011e15:	83 c4 0c             	add    esp,0xc
c0011e18:	89 c1                	mov    ecx,eax
c0011e1a:	a3 8c f2 02 c0       	mov    ds:0xc002f28c,eax
c0011e1f:	31 d2                	xor    edx,edx
c0011e21:	a1 b0 e0 02 c0       	mov    eax,ds:0xc002e0b0
c0011e26:	f7 35 ac e0 02 c0    	div    DWORD PTR ds:0xc002e0ac
c0011e2c:	c1 e8 05             	shr    eax,0x5
c0011e2f:	50                   	push   eax
c0011e30:	6a 00                	push   0x0
c0011e32:	51                   	push   ecx
c0011e33:	e8 34 e9 fe ff       	call   c000076c <memset>
c0011e38:	58                   	pop    eax
c0011e39:	a1 b0 e0 02 c0       	mov    eax,ds:0xc002e0b0
c0011e3e:	5a                   	pop    edx
c0011e3f:	31 d2                	xor    edx,edx
c0011e41:	f7 35 ac e0 02 c0    	div    DWORD PTR ds:0xc002e0ac
c0011e47:	c1 e8 05             	shr    eax,0x5
c0011e4a:	50                   	push   eax
c0011e4b:	68 60 b3 02 c0       	push   0xc002b360
c0011e50:	e8 3a 10 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0011e55:	83 c4 20             	add    esp,0x20
c0011e58:	5b                   	pop    ebx
c0011e59:	5e                   	pop    esi
c0011e5a:	5f                   	pop    edi
c0011e5b:	c3                   	ret    
c0011e5c:	83 ec 08             	sub    esp,0x8
c0011e5f:	50                   	push   eax
c0011e60:	68 39 b3 02 c0       	push   0xc002b339
c0011e65:	e8 25 10 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0011e6a:	83 c4 10             	add    esp,0x10
c0011e6d:	e9 0a ff ff ff       	jmp    c0011d7c <Virt::setupPageSwapping(int)+0xb4>
c0011e72:	83 ec 08             	sub    esp,0x8
c0011e75:	50                   	push   eax
c0011e76:	68 15 b3 02 c0       	push   0xc002b315
c0011e7b:	e8 0f 10 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0011e80:	c7 04 24 1e b3 02 c0 	mov    DWORD PTR [esp],0xc002b31e
c0011e87:	e8 6b 8a 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0011e8c:	83 c4 10             	add    esp,0x10
c0011e8f:	e9 83 fe ff ff       	jmp    c0011d17 <Virt::setupPageSwapping(int)+0x4f>

c0011e94 <VAS::VAS()>:
c0011e94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ea3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011eaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eae:	a3 90 f2 02 c0       	mov    ds:0xc002f290,eax
c0011eb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eb7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011ebb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ebf:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011ec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ec6:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011ecd:	90                   	nop
c0011ece:	c3                   	ret    
c0011ecf:	90                   	nop

c0011ed0 <VAS::VAS(VAS*)>:
c0011ed0:	83 ec 0c             	sub    esp,0xc
c0011ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ed7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ee2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ee9:	83 ec 0c             	sub    esp,0xc
c0011eec:	68 44 b1 02 c0       	push   0xc002b144
c0011ef1:	e8 01 8a 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0011ef6:	83 c4 10             	add    esp,0x10
c0011ef9:	90                   	nop
c0011efa:	83 c4 0c             	add    esp,0xc
c0011efd:	c3                   	ret    

c0011efe <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011efe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f02:	89 c2                	mov    edx,eax
c0011f04:	c1 e8 0a             	shr    eax,0xa
c0011f07:	c1 ea 16             	shr    edx,0x16
c0011f0a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f0f:	19 c9                	sbb    ecx,ecx
c0011f11:	c1 e2 0c             	shl    edx,0xc
c0011f14:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f1a:	25 fc 0f 00 00       	and    eax,0xffc
c0011f1f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011f26:	01 d0                	add    eax,edx
c0011f28:	c3                   	ret    
c0011f29:	90                   	nop

c0011f2a <VAS::getPageTableEntry(unsigned long)>:
c0011f2a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f2e:	89 ca                	mov    edx,ecx
c0011f30:	c1 e9 0a             	shr    ecx,0xa
c0011f33:	c1 ea 16             	shr    edx,0x16
c0011f36:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011f3c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011f42:	c1 e0 0c             	shl    eax,0xc
c0011f45:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011f48:	c3                   	ret    

c0011f49 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011f49:	57                   	push   edi
c0011f4a:	56                   	push   esi
c0011f4b:	be 01 00 00 00       	mov    esi,0x1
c0011f50:	53                   	push   ebx
c0011f51:	83 ec 10             	sub    esp,0x10
c0011f54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f58:	c1 eb 0c             	shr    ebx,0xc
c0011f5b:	eb 3f                	jmp    c0011f9c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f5d:	83 ec 08             	sub    esp,0x8
c0011f60:	57                   	push   edi
c0011f61:	ff 35 90 f2 02 c0    	push   DWORD PTR ds:0xc002f290
c0011f67:	e8 be ff ff ff       	call   c0011f2a <VAS::getPageTableEntry(unsigned long)>
c0011f6c:	83 c4 10             	add    esp,0x10
c0011f6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f71:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f75:	f6 c4 04             	test   ah,0x4
c0011f78:	75 5f                	jne    c0011fd9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f7a:	80 fa 04             	cmp    dl,0x4
c0011f7d:	74 78                	je     c0011ff7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f7f:	80 fa 02             	cmp    dl,0x2
c0011f82:	0f 84 88 00 00 00    	je     c0012010 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f88:	80 fa 03             	cmp    dl,0x3
c0011f8b:	0f 84 ad 00 00 00    	je     c001203e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f91:	fe ca                	dec    dl
c0011f93:	0f 84 92 00 00 00    	je     c001202b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f99:	43                   	inc    ebx
c0011f9a:	31 f6                	xor    esi,esi
c0011f9c:	53                   	push   ebx
c0011f9d:	89 df                	mov    edi,ebx
c0011f9f:	e8 c1 fa ff ff       	call   c0011a65 <Virt::getPageState(unsigned long)>
c0011fa4:	c1 e7 0c             	shl    edi,0xc
c0011fa7:	59                   	pop    ecx
c0011fa8:	84 c0                	test   al,al
c0011faa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011fae:	75 ad                	jne    c0011f5d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011fb0:	83 ec 0c             	sub    esp,0xc
c0011fb3:	68 7b b3 02 c0       	push   0xc002b37b
c0011fb8:	e8 3a 89 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0011fbd:	58                   	pop    eax
c0011fbe:	5a                   	pop    edx
c0011fbf:	57                   	push   edi
c0011fc0:	ff 35 90 f2 02 c0    	push   DWORD PTR ds:0xc002f290
c0011fc6:	e8 5f ff ff ff       	call   c0011f2a <VAS::getPageTableEntry(unsigned long)>
c0011fcb:	83 c4 10             	add    esp,0x10
c0011fce:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fd0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fd4:	f6 c4 04             	test   ah,0x4
c0011fd7:	74 c0                	je     c0011f99 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fd9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011fdd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fe2:	83 ec 0c             	sub    esp,0xc
c0011fe5:	50                   	push   eax
c0011fe6:	e8 b7 de ff ff       	call   c000fea2 <Phys::freePage(unsigned long)>
c0011feb:	83 c4 10             	add    esp,0x10
c0011fee:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ff2:	80 fa 04             	cmp    dl,0x4
c0011ff5:	75 88                	jne    c0011f7f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011ff7:	89 f0                	mov    eax,esi
c0011ff9:	84 c0                	test   al,al
c0011ffb:	75 47                	jne    c0012044 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011ffd:	c7 44 24 20 68 b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b168
c0012005:	83 c4 10             	add    esp,0x10
c0012008:	5b                   	pop    ebx
c0012009:	5e                   	pop    esi
c001200a:	5f                   	pop    edi
c001200b:	e9 e7 88 00 00       	jmp    c001a8f7 <Krnl::panic(char const*)>
c0012010:	89 f0                	mov    eax,esi
c0012012:	84 c0                	test   al,al
c0012014:	75 15                	jne    c001202b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012016:	83 ec 0c             	sub    esp,0xc
c0012019:	68 97 b3 02 c0       	push   0xc002b397
c001201e:	e8 d4 88 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0012023:	83 c4 10             	add    esp,0x10
c0012026:	e9 6e ff ff ff       	jmp    c0011f99 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001202b:	83 ec 08             	sub    esp,0x8
c001202e:	6a 00                	push   0x0
c0012030:	53                   	push   ebx
c0012031:	e8 fa f9 ff ff       	call   c0011a30 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012036:	83 c4 10             	add    esp,0x10
c0012039:	e9 5b ff ff ff       	jmp    c0011f99 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001203e:	89 f0                	mov    eax,esi
c0012040:	84 c0                	test   al,al
c0012042:	75 15                	jne    c0012059 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012044:	83 ec 08             	sub    esp,0x8
c0012047:	6a 00                	push   0x0
c0012049:	53                   	push   ebx
c001204a:	e8 e1 f9 ff ff       	call   c0011a30 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001204f:	83 c4 10             	add    esp,0x10
c0012052:	83 c4 10             	add    esp,0x10
c0012055:	5b                   	pop    ebx
c0012056:	5e                   	pop    esi
c0012057:	5f                   	pop    edi
c0012058:	c3                   	ret    
c0012059:	c7 44 24 20 b3 b3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b3b3
c0012061:	83 c4 10             	add    esp,0x10
c0012064:	5b                   	pop    ebx
c0012065:	5e                   	pop    esi
c0012066:	5f                   	pop    edi
c0012067:	e9 8b 88 00 00       	jmp    c001a8f7 <Krnl::panic(char const*)>

c001206c <VAS::freeAllocatedPages(unsigned long)>:
c001206c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012074:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012078:	74 09                	je     c0012083 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001207a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001207e:	e9 c6 fe ff ff       	jmp    c0011f49 <Virt::freeKernelVirtualPages(unsigned long)>
c0012083:	c7 44 24 04 8c b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b18c
c001208b:	e9 ff 0d 00 00       	jmp    c0012e8f <Dbg::kprintf(char const*, ...)>

c0012090 <VAS::virtualToPhysical(unsigned long)>:
c0012090:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012094:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012098:	e8 8d fe ff ff       	call   c0011f2a <VAS::getPageTableEntry(unsigned long)>
c001209d:	5a                   	pop    edx
c001209e:	8b 00                	mov    eax,DWORD PTR [eax]
c00120a0:	59                   	pop    ecx
c00120a1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a6:	c3                   	ret    
c00120a7:	90                   	nop

c00120a8 <VAS::reflagRange(unsigned long, int, int, int)>:
c00120a8:	55                   	push   ebp
c00120a9:	57                   	push   edi
c00120aa:	56                   	push   esi
c00120ab:	53                   	push   ebx
c00120ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00120b0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00120b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00120b8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00120bc:	85 db                	test   ebx,ebx
c00120be:	7e 22                	jle    c00120e2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00120c0:	c1 e3 0c             	shl    ebx,0xc
c00120c3:	01 f3                	add    ebx,esi
c00120c5:	56                   	push   esi
c00120c6:	81 c6 00 10 00 00    	add    esi,0x1000
c00120cc:	55                   	push   ebp
c00120cd:	e8 58 fe ff ff       	call   c0011f2a <VAS::getPageTableEntry(unsigned long)>
c00120d2:	5a                   	pop    edx
c00120d3:	59                   	pop    ecx
c00120d4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00120d6:	21 f9                	and    ecx,edi
c00120d8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00120dc:	39 f3                	cmp    ebx,esi
c00120de:	89 08                	mov    DWORD PTR [eax],ecx
c00120e0:	75 e3                	jne    c00120c5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00120e2:	5b                   	pop    ebx
c00120e3:	5e                   	pop    esi
c00120e4:	5f                   	pop    edi
c00120e5:	5d                   	pop    ebp
c00120e6:	c3                   	ret    
c00120e7:	90                   	nop

c00120e8 <VAS::setToWriteCombining(unsigned long, int)>:
c00120e8:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c00120ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120f3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00120fa:	75 01                	jne    c00120fd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00120fc:	c3                   	ret    
c00120fd:	68 80 00 00 00       	push   0x80
c0012102:	6a ff                	push   0xffffffff
c0012104:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001210c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012110:	e8 93 ff ff ff       	call   c00120a8 <VAS::reflagRange(unsigned long, int, int, int)>
c0012115:	83 c4 14             	add    esp,0x14
c0012118:	c3                   	ret    
c0012119:	90                   	nop

c001211a <VAS::mapOtherVASIn(bool, VAS*)>:
c001211a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001211f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012123:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001212a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001212d:	19 c0                	sbb    eax,eax
c001212f:	83 ca 03             	or     edx,0x3
c0012132:	83 e0 fc             	and    eax,0xfffffffc
c0012135:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001213c:	0f 20 d8             	mov    eax,cr3
c001213f:	0f 22 d8             	mov    cr3,eax
c0012142:	c3                   	ret    
c0012143:	90                   	nop

c0012144 <VAS::~VAS()>:
c0012144:	83 ec 2c             	sub    esp,0x2c
c0012147:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001214f:	fa                   	cli    
c0012150:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0012155:	40                   	inc    eax
c0012156:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001215b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012160:	8b 00                	mov    eax,DWORD PTR [eax]
c0012162:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012165:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001216b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001216f:	6a 01                	push   0x1
c0012171:	50                   	push   eax
c0012172:	e8 a3 ff ff ff       	call   c001211a <VAS::mapOtherVASIn(bool, VAS*)>
c0012177:	83 c4 0c             	add    esp,0xc
c001217a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012182:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001218a:	0f 8f d4 00 00 00    	jg     c0012264 <VAS::~VAS()+0x120>
c0012190:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012194:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012197:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001219b:	c1 e2 02             	shl    edx,0x2
c001219e:	01 d0                	add    eax,edx
c00121a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00121a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00121a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121aa:	83 e0 01             	and    eax,0x1
c00121ad:	0f 84 a8 00 00 00    	je     c001225b <VAS::~VAS()+0x117>
c00121b3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00121bb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00121c3:	7f 72                	jg     c0012237 <VAS::~VAS()+0xf3>
c00121c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121c9:	c1 e0 0a             	shl    eax,0xa
c00121cc:	89 c2                	mov    edx,eax
c00121ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121d2:	01 d0                	add    eax,edx
c00121d4:	c1 e0 0c             	shl    eax,0xc
c00121d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121db:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00121e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121e5:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121ef:	6a 01                	push   0x1
c00121f1:	50                   	push   eax
c00121f2:	e8 07 fd ff ff       	call   c0011efe <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00121f7:	83 c4 0c             	add    esp,0xc
c00121fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012202:	8b 00                	mov    eax,DWORD PTR [eax]
c0012204:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001220c:	25 01 04 00 00       	and    eax,0x401
c0012211:	3d 01 04 00 00       	cmp    eax,0x401
c0012216:	75 19                	jne    c0012231 <VAS::~VAS()+0xed>
c0012218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001221c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012221:	83 ec 0c             	sub    esp,0xc
c0012224:	50                   	push   eax
c0012225:	e8 78 dc ff ff       	call   c000fea2 <Phys::freePage(unsigned long)>
c001222a:	83 c4 10             	add    esp,0x10
c001222d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012231:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012235:	eb 84                	jmp    c00121bb <VAS::~VAS()+0x77>
c0012237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001223b:	25 00 04 00 00       	and    eax,0x400
c0012240:	74 19                	je     c001225b <VAS::~VAS()+0x117>
c0012242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012246:	25 00 f0 ff ff       	and    eax,0xfffff000
c001224b:	83 ec 0c             	sub    esp,0xc
c001224e:	50                   	push   eax
c001224f:	e8 4e dc ff ff       	call   c000fea2 <Phys::freePage(unsigned long)>
c0012254:	83 c4 10             	add    esp,0x10
c0012257:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001225b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001225f:	e9 1e ff ff ff       	jmp    c0012182 <VAS::~VAS()+0x3e>
c0012264:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012268:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001226b:	83 ec 0c             	sub    esp,0xc
c001226e:	50                   	push   eax
c001226f:	e8 d5 fc ff ff       	call   c0011f49 <Virt::freeKernelVirtualPages(unsigned long)>
c0012274:	83 c4 10             	add    esp,0x10
c0012277:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001227b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001227e:	83 ec 0c             	sub    esp,0xc
c0012281:	50                   	push   eax
c0012282:	e8 1b dc ff ff       	call   c000fea2 <Phys::freePage(unsigned long)>
c0012287:	83 c4 10             	add    esp,0x10
c001228a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001228e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012292:	c1 e0 02             	shl    eax,0x2
c0012295:	83 ec 08             	sub    esp,0x8
c0012298:	50                   	push   eax
c0012299:	68 b0 b1 02 c0       	push   0xc002b1b0
c001229e:	e8 ec 0b 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00122a3:	83 c4 10             	add    esp,0x10
c00122a6:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c00122ab:	48                   	dec    eax
c00122ac:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c00122b1:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c00122b6:	85 c0                	test   eax,eax
c00122b8:	75 01                	jne    c00122bb <VAS::~VAS()+0x177>
c00122ba:	fb                   	sti    
c00122bb:	90                   	nop
c00122bc:	83 c4 2c             	add    esp,0x2c
c00122bf:	c3                   	ret    

c00122c0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00122c0:	55                   	push   ebp
c00122c1:	57                   	push   edi
c00122c2:	56                   	push   esi
c00122c3:	53                   	push   ebx
c00122c4:	83 ec 1c             	sub    esp,0x1c
c00122c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00122cb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122cf:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00122d5:	77 08                	ja     c00122df <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00122d7:	0f 20 d8             	mov    eax,cr3
c00122da:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00122dd:	75 47                	jne    c0012326 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00122df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122e3:	09 d8                	or     eax,ebx
c00122e5:	a9 ff 0f 00 00       	test   eax,0xfff
c00122ea:	75 57                	jne    c0012343 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00122ec:	89 de                	mov    esi,ebx
c00122ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00122f1:	c1 ee 16             	shr    esi,0x16
c00122f4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00122fb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00122ff:	74 54                	je     c0012355 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012301:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012305:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001230b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001230f:	c1 e6 0c             	shl    esi,0xc
c0012312:	c1 eb 0a             	shr    ebx,0xa
c0012315:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001231b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001231e:	83 c4 1c             	add    esp,0x1c
c0012321:	5b                   	pop    ebx
c0012322:	5e                   	pop    esi
c0012323:	5f                   	pop    edi
c0012324:	5d                   	pop    ebp
c0012325:	c3                   	ret    
c0012326:	83 ec 0c             	sub    esp,0xc
c0012329:	68 d0 b1 02 c0       	push   0xc002b1d0
c001232e:	e8 5c 0b 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0012333:	83 c4 10             	add    esp,0x10
c0012336:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001233a:	09 d8                	or     eax,ebx
c001233c:	a9 ff 0f 00 00       	test   eax,0xfff
c0012341:	74 a9                	je     c00122ec <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012343:	83 ec 0c             	sub    esp,0xc
c0012346:	68 38 b2 02 c0       	push   0xc002b238
c001234b:	e8 a7 85 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0012350:	83 c4 10             	add    esp,0x10
c0012353:	eb 97                	jmp    c00122ec <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012355:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012359:	e8 ce db ff ff       	call   c000ff2c <Phys::allocatePage()>
c001235e:	83 ec 0c             	sub    esp,0xc
c0012361:	89 c5                	mov    ebp,eax
c0012363:	8b 0d 90 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f290
c0012369:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001236d:	6a 01                	push   0x1
c001236f:	e8 15 f7 ff ff       	call   c0011a89 <Virt::allocateKernelVirtualPages(int)>
c0012374:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001237b:	6a 01                	push   0x1
c001237d:	50                   	push   eax
c001237e:	55                   	push   ebp
c001237f:	81 cd 07 04 00 00    	or     ebp,0x407
c0012385:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012389:	51                   	push   ecx
c001238a:	e8 27 02 00 00       	call   c00125b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001238f:	83 c4 1c             	add    esp,0x1c
c0012392:	68 00 10 00 00       	push   0x1000
c0012397:	6a 00                	push   0x0
c0012399:	50                   	push   eax
c001239a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001239e:	e8 c9 e3 fe ff       	call   c000076c <memset>
c00123a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00123a7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00123aa:	e8 9a fb ff ff       	call   c0011f49 <Virt::freeKernelVirtualPages(unsigned long)>
c00123af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00123b3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00123b6:	83 c4 10             	add    esp,0x10
c00123b9:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00123bc:	e9 40 ff ff ff       	jmp    c0012301 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c00123c1:	90                   	nop

c00123c2 <VAS::allocatePages(int, int)>:
c00123c2:	55                   	push   ebp
c00123c3:	57                   	push   edi
c00123c4:	56                   	push   esi
c00123c5:	53                   	push   ebx
c00123c6:	83 ec 1c             	sub    esp,0x1c
c00123c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00123cd:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c00123d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123d8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00123de:	83 e0 01             	and    eax,0x1
c00123e1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00123e5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00123e9:	0f 85 cc 00 00 00    	jne    c00124bb <VAS::allocatePages(int, int)+0xf9>
c00123ef:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123f6:	85 c0                	test   eax,eax
c00123f8:	0f 84 a1 00 00 00    	je     c001249f <VAS::allocatePages(int, int)+0xdd>
c00123fe:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012402:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012406:	c1 e6 0c             	shl    esi,0xc
c0012409:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001240d:	85 c0                	test   eax,eax
c001240f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012412:	7e 33                	jle    c0012447 <VAS::allocatePages(int, int)+0x85>
c0012414:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012418:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001241c:	81 cd 00 04 00 00    	or     ebp,0x400
c0012422:	e8 05 db ff ff       	call   c000ff2c <Phys::allocatePage()>
c0012427:	55                   	push   ebp
c0012428:	53                   	push   ebx
c0012429:	50                   	push   eax
c001242a:	57                   	push   edi
c001242b:	e8 90 fe ff ff       	call   c00122c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012430:	83 c4 10             	add    esp,0x10
c0012433:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012438:	74 03                	je     c001243d <VAS::allocatePages(int, int)+0x7b>
c001243a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001243d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012443:	39 de                	cmp    esi,ebx
c0012445:	75 db                	jne    c0012422 <VAS::allocatePages(int, int)+0x60>
c0012447:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001244c:	75 12                	jne    c0012460 <VAS::allocatePages(int, int)+0x9e>
c001244e:	0f 20 d8             	mov    eax,cr3
c0012451:	0f 22 d8             	mov    cr3,eax
c0012454:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012458:	83 c4 1c             	add    esp,0x1c
c001245b:	5b                   	pop    ebx
c001245c:	5e                   	pop    esi
c001245d:	5f                   	pop    edi
c001245e:	5d                   	pop    ebp
c001245f:	c3                   	ret    
c0012460:	c1 ee 0a             	shr    esi,0xa
c0012463:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012467:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001246d:	c1 eb 0a             	shr    ebx,0xa
c0012470:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012476:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001247c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012482:	39 c3                	cmp    ebx,eax
c0012484:	77 ce                	ja     c0012454 <VAS::allocatePages(int, int)+0x92>
c0012486:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012489:	81 c3 00 10 00 00    	add    ebx,0x1000
c001248f:	39 d8                	cmp    eax,ebx
c0012491:	73 f3                	jae    c0012486 <VAS::allocatePages(int, int)+0xc4>
c0012493:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012497:	83 c4 1c             	add    esp,0x1c
c001249a:	5b                   	pop    ebx
c001249b:	5e                   	pop    esi
c001249c:	5f                   	pop    edi
c001249d:	5d                   	pop    ebp
c001249e:	c3                   	ret    
c001249f:	83 ec 0c             	sub    esp,0xc
c00124a2:	68 5c b2 02 c0       	push   0xc002b25c
c00124a7:	e8 4b 84 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c00124ac:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124b3:	83 c4 10             	add    esp,0x10
c00124b6:	e9 43 ff ff ff       	jmp    c00123fe <VAS::allocatePages(int, int)+0x3c>
c00124bb:	83 ec 0c             	sub    esp,0xc
c00124be:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124c2:	e8 c2 f5 ff ff       	call   c0011a89 <Virt::allocateKernelVirtualPages(int)>
c00124c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124cb:	83 c4 10             	add    esp,0x10
c00124ce:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00124d3:	0f 87 9b 00 00 00    	ja     c0012574 <VAS::allocatePages(int, int)+0x1b2>
c00124d9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00124dd:	85 d2                	test   edx,edx
c00124df:	7e 3c                	jle    c001251d <VAS::allocatePages(int, int)+0x15b>
c00124e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124e5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00124e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124ed:	c1 e5 0c             	shl    ebp,0xc
c00124f0:	81 ce 00 04 00 00    	or     esi,0x400
c00124f6:	01 dd                	add    ebp,ebx
c00124f8:	e8 2f da ff ff       	call   c000ff2c <Phys::allocatePage()>
c00124fd:	56                   	push   esi
c00124fe:	53                   	push   ebx
c00124ff:	50                   	push   eax
c0012500:	57                   	push   edi
c0012501:	e8 ba fd ff ff       	call   c00122c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012506:	83 c4 10             	add    esp,0x10
c0012509:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001250e:	74 03                	je     c0012513 <VAS::allocatePages(int, int)+0x151>
c0012510:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012513:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012519:	39 dd                	cmp    ebp,ebx
c001251b:	75 db                	jne    c00124f8 <VAS::allocatePages(int, int)+0x136>
c001251d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012522:	0f 84 26 ff ff ff    	je     c001244e <VAS::allocatePages(int, int)+0x8c>
c0012528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001252c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012530:	89 d3                	mov    ebx,edx
c0012532:	c1 e0 0c             	shl    eax,0xc
c0012535:	c1 eb 0a             	shr    ebx,0xa
c0012538:	01 d0                	add    eax,edx
c001253a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012540:	c1 e8 0a             	shr    eax,0xa
c0012543:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012549:	25 00 f0 ff ff       	and    eax,0xfffff000
c001254e:	2d 00 00 40 00       	sub    eax,0x400000
c0012553:	39 c3                	cmp    ebx,eax
c0012555:	0f 87 f9 fe ff ff    	ja     c0012454 <VAS::allocatePages(int, int)+0x92>
c001255b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001255e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012564:	39 d8                	cmp    eax,ebx
c0012566:	73 f3                	jae    c001255b <VAS::allocatePages(int, int)+0x199>
c0012568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001256c:	83 c4 1c             	add    esp,0x1c
c001256f:	5b                   	pop    ebx
c0012570:	5e                   	pop    esi
c0012571:	5f                   	pop    edi
c0012572:	5d                   	pop    ebp
c0012573:	c3                   	ret    
c0012574:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0012579:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001257f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012586:	0f 84 4d ff ff ff    	je     c00124d9 <VAS::allocatePages(int, int)+0x117>
c001258c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012594:	e9 40 ff ff ff       	jmp    c00124d9 <VAS::allocatePages(int, int)+0x117>
c0012599:	90                   	nop

c001259a <VAS::setCPUSpecific(unsigned long)>:
c001259a:	83 ec 0c             	sub    esp,0xc
c001259d:	6a 05                	push   0x5
c001259f:	68 00 00 40 c2       	push   0xc2400000
c00125a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125ac:	e8 0f fd ff ff       	call   c00122c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125b1:	83 c4 1c             	add    esp,0x1c
c00125b4:	c3                   	ret    
c00125b5:	90                   	nop

c00125b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00125b6:	55                   	push   ebp
c00125b7:	57                   	push   edi
c00125b8:	56                   	push   esi
c00125b9:	53                   	push   ebx
c00125ba:	83 ec 1c             	sub    esp,0x1c
c00125bd:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c00125c2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00125c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125cc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125d0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00125d6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00125da:	83 e0 01             	and    eax,0x1
c00125dd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00125e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125e5:	85 c0                	test   eax,eax
c00125e7:	7e 39                	jle    c0012622 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00125e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125ed:	89 f3                	mov    ebx,esi
c00125ef:	c1 e0 0c             	shl    eax,0xc
c00125f2:	01 f0                	add    eax,esi
c00125f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125f8:	55                   	push   ebp
c00125f9:	53                   	push   ebx
c00125fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125fe:	29 f0                	sub    eax,esi
c0012600:	01 d8                	add    eax,ebx
c0012602:	50                   	push   eax
c0012603:	57                   	push   edi
c0012604:	e8 b7 fc ff ff       	call   c00122c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012609:	83 c4 10             	add    esp,0x10
c001260c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012611:	74 03                	je     c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012613:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012616:	81 c3 00 10 00 00    	add    ebx,0x1000
c001261c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012620:	75 d6                	jne    c00125f8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012622:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012627:	75 10                	jne    c0012639 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012629:	0f 20 d8             	mov    eax,cr3
c001262c:	0f 22 d8             	mov    cr3,eax
c001262f:	83 c4 1c             	add    esp,0x1c
c0012632:	89 f0                	mov    eax,esi
c0012634:	5b                   	pop    ebx
c0012635:	5e                   	pop    esi
c0012636:	5f                   	pop    edi
c0012637:	5d                   	pop    ebp
c0012638:	c3                   	ret    
c0012639:	89 f3                	mov    ebx,esi
c001263b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001263f:	c1 eb 0a             	shr    ebx,0xa
c0012642:	c1 e0 0c             	shl    eax,0xc
c0012645:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001264b:	01 f0                	add    eax,esi
c001264d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012653:	c1 e8 0a             	shr    eax,0xa
c0012656:	25 00 f0 ff ff       	and    eax,0xfffff000
c001265b:	2d 00 00 40 00       	sub    eax,0x400000
c0012660:	39 c3                	cmp    ebx,eax
c0012662:	77 cb                	ja     c001262f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012664:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012667:	81 c3 00 10 00 00    	add    ebx,0x1000
c001266d:	39 d8                	cmp    eax,ebx
c001266f:	73 f3                	jae    c0012664 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012671:	83 c4 1c             	add    esp,0x1c
c0012674:	89 f0                	mov    eax,esi
c0012676:	5b                   	pop    ebx
c0012677:	5e                   	pop    esi
c0012678:	5f                   	pop    edi
c0012679:	5d                   	pop    ebp
c001267a:	c3                   	ret    
c001267b:	90                   	nop

c001267c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001267c:	55                   	push   ebp
c001267d:	57                   	push   edi
c001267e:	56                   	push   esi
c001267f:	53                   	push   ebx
c0012680:	83 ec 1c             	sub    esp,0x1c
c0012683:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012687:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001268b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001268f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012693:	a9 ff 0f 00 00       	test   eax,0xfff
c0012698:	75 4a                	jne    c00126e4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001269a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001269e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00126a1:	c1 eb 16             	shr    ebx,0x16
c00126a4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00126ab:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00126af:	74 4d                	je     c00126fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00126b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126b5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00126b9:	c1 e8 0a             	shr    eax,0xa
c00126bc:	80 fa 01             	cmp    dl,0x1
c00126bf:	19 d2                	sbb    edx,edx
c00126c1:	c1 e3 0c             	shl    ebx,0xc
c00126c4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00126c8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00126ce:	25 fc 0f 00 00       	and    eax,0xffc
c00126d3:	01 d8                	add    eax,ebx
c00126d5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00126dc:	83 c4 1c             	add    esp,0x1c
c00126df:	5b                   	pop    ebx
c00126e0:	5e                   	pop    esi
c00126e1:	5f                   	pop    edi
c00126e2:	5d                   	pop    ebp
c00126e3:	c3                   	ret    
c00126e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00126e8:	83 ec 0c             	sub    esp,0xc
c00126eb:	68 88 b2 02 c0       	push   0xc002b288
c00126f0:	e8 02 82 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c00126f5:	83 c4 10             	add    esp,0x10
c00126f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126fc:	eb 9c                	jmp    c001269a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00126fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012702:	e8 25 d8 ff ff       	call   c000ff2c <Phys::allocatePage()>
c0012707:	83 ec 0c             	sub    esp,0xc
c001270a:	89 c5                	mov    ebp,eax
c001270c:	8b 0d 90 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f290
c0012712:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012716:	6a 01                	push   0x1
c0012718:	e8 6c f3 ff ff       	call   c0011a89 <Virt::allocateKernelVirtualPages(int)>
c001271d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012724:	6a 01                	push   0x1
c0012726:	50                   	push   eax
c0012727:	55                   	push   ebp
c0012728:	81 cd 07 04 00 00    	or     ebp,0x407
c001272e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012732:	51                   	push   ecx
c0012733:	e8 7e fe ff ff       	call   c00125b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012738:	83 c4 1c             	add    esp,0x1c
c001273b:	68 00 10 00 00       	push   0x1000
c0012740:	6a 00                	push   0x0
c0012742:	50                   	push   eax
c0012743:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012747:	e8 20 e0 fe ff       	call   c000076c <memset>
c001274c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012750:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012753:	e8 f1 f7 ff ff       	call   c0011f49 <Virt::freeKernelVirtualPages(unsigned long)>
c0012758:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001275b:	83 c4 10             	add    esp,0x10
c001275e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012761:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012765:	e9 47 ff ff ff       	jmp    c00126b1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c001276a <VAS::VAS(bool)>:
c001276a:	53                   	push   ebx
c001276b:	83 ec 28             	sub    esp,0x28
c001276e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012772:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012776:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001277a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012781:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012785:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001278c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012790:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012794:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012797:	e8 90 d7 ff ff       	call   c000ff2c <Phys::allocatePage()>
c001279c:	89 c2                	mov    edx,eax
c001279e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127a2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00127a5:	8b 1d 90 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f290
c00127ab:	83 ec 0c             	sub    esp,0xc
c00127ae:	6a 01                	push   0x1
c00127b0:	e8 d4 f2 ff ff       	call   c0011a89 <Virt::allocateKernelVirtualPages(int)>
c00127b5:	83 c4 10             	add    esp,0x10
c00127b8:	89 c2                	mov    edx,eax
c00127ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00127c1:	83 ec 0c             	sub    esp,0xc
c00127c4:	6a 03                	push   0x3
c00127c6:	6a 01                	push   0x1
c00127c8:	52                   	push   edx
c00127c9:	50                   	push   eax
c00127ca:	53                   	push   ebx
c00127cb:	e8 e6 fd ff ff       	call   c00125b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127d0:	83 c4 20             	add    esp,0x20
c00127d3:	89 c2                	mov    edx,eax
c00127d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127d9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00127dc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00127e4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00127ec:	7f 1c                	jg     c001280a <VAS::VAS(bool)+0xa0>
c00127ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127f9:	c1 e2 02             	shl    edx,0x2
c00127fc:	01 d0                	add    eax,edx
c00127fe:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012804:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012808:	eb da                	jmp    c00127e4 <VAS::VAS(bool)+0x7a>
c001280a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012812:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001281a:	7f 7a                	jg     c0012896 <VAS::VAS(bool)+0x12c>
c001281c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012820:	2d 00 02 00 00       	sub    eax,0x200
c0012825:	c1 e0 0c             	shl    eax,0xc
c0012828:	83 c8 03             	or     eax,0x3
c001282b:	89 c2                	mov    edx,eax
c001282d:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0012832:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012838:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001283e:	83 e0 10             	and    eax,0x10
c0012841:	84 c0                	test   al,al
c0012843:	74 07                	je     c001284c <VAS::VAS(bool)+0xe2>
c0012845:	b8 00 01 00 00       	mov    eax,0x100
c001284a:	eb 05                	jmp    c0012851 <VAS::VAS(bool)+0xe7>
c001284c:	b8 00 00 00 00       	mov    eax,0x0
c0012851:	09 d0                	or     eax,edx
c0012853:	89 c1                	mov    ecx,eax
c0012855:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012859:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001285c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012860:	c1 e2 02             	shl    edx,0x2
c0012863:	01 d0                	add    eax,edx
c0012865:	89 ca                	mov    edx,ecx
c0012867:	89 10                	mov    DWORD PTR [eax],edx
c0012869:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001286d:	2d 40 03 00 00       	sub    eax,0x340
c0012872:	83 f8 7f             	cmp    eax,0x7f
c0012875:	77 16                	ja     c001288d <VAS::VAS(bool)+0x123>
c0012877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001287b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001287e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012882:	c1 e2 02             	shl    edx,0x2
c0012885:	01 d0                	add    eax,edx
c0012887:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001288d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012891:	e9 7c ff ff ff       	jmp    c0012812 <VAS::VAS(bool)+0xa8>
c0012896:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c001289b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128a1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128a7:	83 e0 10             	and    eax,0x10
c00128aa:	84 c0                	test   al,al
c00128ac:	74 07                	je     c00128b5 <VAS::VAS(bool)+0x14b>
c00128ae:	b8 03 41 00 00       	mov    eax,0x4103
c00128b3:	eb 05                	jmp    c00128ba <VAS::VAS(bool)+0x150>
c00128b5:	b8 03 40 00 00       	mov    eax,0x4003
c00128ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00128be:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00128c1:	81 c2 20 0c 00 00    	add    edx,0xc20
c00128c7:	89 02                	mov    DWORD PTR [edx],eax
c00128c9:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c00128ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128d4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00128da:	83 ec 08             	sub    esp,0x8
c00128dd:	50                   	push   eax
c00128de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128e2:	e8 b3 fc ff ff       	call   c001259a <VAS::setCPUSpecific(unsigned long)>
c00128e7:	83 c4 10             	add    esp,0x10
c00128ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ee:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00128f1:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c00128f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128fc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012902:	83 e0 10             	and    eax,0x10
c0012905:	84 c0                	test   al,al
c0012907:	74 07                	je     c0012910 <VAS::VAS(bool)+0x1a6>
c0012909:	b8 00 01 00 00       	mov    eax,0x100
c001290e:	eb 05                	jmp    c0012915 <VAS::VAS(bool)+0x1ab>
c0012910:	b8 00 00 00 00       	mov    eax,0x0
c0012915:	09 c2                	or     edx,eax
c0012917:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001291e:	05 fc 0f 00 00       	add    eax,0xffc
c0012923:	83 ca 03             	or     edx,0x3
c0012926:	89 10                	mov    DWORD PTR [eax],edx
c0012928:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c001292d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012933:	83 ec 0c             	sub    esp,0xc
c0012936:	50                   	push   eax
c0012937:	e8 6a 1c 00 00       	call   c00145a6 <Device::getName()>
c001293c:	83 c4 10             	add    esp,0x10
c001293f:	83 ec 08             	sub    esp,0x8
c0012942:	68 cd b3 02 c0       	push   0xc002b3cd
c0012947:	50                   	push   eax
c0012948:	e8 67 df fe ff       	call   c00008b4 <strcmp>
c001294d:	83 c4 10             	add    esp,0x10
c0012950:	85 c0                	test   eax,eax
c0012952:	0f 94 c0             	sete   al
c0012955:	84 c0                	test   al,al
c0012957:	0f 84 87 00 00 00    	je     c00129e4 <VAS::VAS(bool)+0x27a>
c001295d:	fa                   	cli    
c001295e:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0012963:	40                   	inc    eax
c0012964:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c0012969:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c001296e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012974:	05 7c 09 00 00       	add    eax,0x97c
c0012979:	83 ec 0c             	sub    esp,0xc
c001297c:	50                   	push   eax
c001297d:	e8 c0 c9 ff ff       	call   c000f342 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012982:	83 c4 10             	add    esp,0x10
c0012985:	25 00 f0 ff ff       	and    eax,0xfffff000
c001298a:	89 c3                	mov    ebx,eax
c001298c:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0012991:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012997:	05 7c 09 00 00       	add    eax,0x97c
c001299c:	83 ec 0c             	sub    esp,0xc
c001299f:	50                   	push   eax
c00129a0:	e8 9d c9 ff ff       	call   c000f342 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129a5:	83 c4 10             	add    esp,0x10
c00129a8:	83 ec 08             	sub    esp,0x8
c00129ab:	50                   	push   eax
c00129ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129b0:	e8 75 f5 ff ff       	call   c0011f2a <VAS::getPageTableEntry(unsigned long)>
c00129b5:	83 c4 10             	add    esp,0x10
c00129b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00129ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129bf:	6a 11                	push   0x11
c00129c1:	53                   	push   ebx
c00129c2:	50                   	push   eax
c00129c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129c7:	e8 f4 f8 ff ff       	call   c00122c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00129cc:	83 c4 10             	add    esp,0x10
c00129cf:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c00129d4:	48                   	dec    eax
c00129d5:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c00129da:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c00129df:	85 c0                	test   eax,eax
c00129e1:	75 01                	jne    c00129e4 <VAS::VAS(bool)+0x27a>
c00129e3:	fb                   	sti    
c00129e4:	90                   	nop
c00129e5:	83 c4 28             	add    esp,0x28
c00129e8:	5b                   	pop    ebx
c00129e9:	c3                   	ret    

c00129ea <VAS::evict(unsigned long)>:
c00129ea:	55                   	push   ebp
c00129eb:	57                   	push   edi
c00129ec:	56                   	push   esi
c00129ed:	53                   	push   ebx
c00129ee:	83 ec 1c             	sub    esp,0x1c
c00129f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129f5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129fd:	e8 c8 f1 ff ff       	call   c0011bca <Virt::allocateSwapfilePage()>
c0012a02:	89 c7                	mov    edi,eax
c0012a04:	a1 ac e0 02 c0       	mov    eax,ds:0xc002e0ac
c0012a09:	85 c0                	test   eax,eax
c0012a0b:	7e 3d                	jle    c0012a4a <VAS::evict(unsigned long)+0x60>
c0012a0d:	89 ee                	mov    esi,ebp
c0012a0f:	31 db                	xor    ebx,ebx
c0012a11:	83 ec 0c             	sub    esp,0xc
c0012a14:	57                   	push   edi
c0012a15:	e8 9e f1 ff ff       	call   c0011bb8 <Virt::swapIDToSector(unsigned long)>
c0012a1a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a1d:	01 d8                	add    eax,ebx
c0012a1f:	6a 01                	push   0x1
c0012a21:	31 d2                	xor    edx,edx
c0012a23:	43                   	inc    ebx
c0012a24:	52                   	push   edx
c0012a25:	81 c6 00 02 00 00    	add    esi,0x200
c0012a2b:	50                   	push   eax
c0012a2c:	0f be 05 b8 e0 02 c0 	movsx  eax,BYTE PTR ds:0xc002e0b8
c0012a33:	ff 34 85 1c f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd09e4]
c0012a3a:	e8 3d 3e 00 00       	call   c001687c <LogicalDisk::write(unsigned long long, int, void*)>
c0012a3f:	83 c4 20             	add    esp,0x20
c0012a42:	39 1d ac e0 02 c0    	cmp    DWORD PTR ds:0xc002e0ac,ebx
c0012a48:	7f c7                	jg     c0012a11 <VAS::evict(unsigned long)+0x27>
c0012a4a:	83 ec 08             	sub    esp,0x8
c0012a4d:	c1 e7 0b             	shl    edi,0xb
c0012a50:	55                   	push   ebp
c0012a51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a55:	e8 d0 f4 ff ff       	call   c0011f2a <VAS::getPageTableEntry(unsigned long)>
c0012a5a:	83 c4 0c             	add    esp,0xc
c0012a5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a5f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a65:	09 d7                	or     edi,edx
c0012a67:	89 38                	mov    DWORD PTR [eax],edi
c0012a69:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0012a6e:	40                   	inc    eax
c0012a6f:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c0012a74:	0f 20 da             	mov    edx,cr3
c0012a77:	0f 22 da             	mov    cr3,edx
c0012a7a:	50                   	push   eax
c0012a7b:	55                   	push   ebp
c0012a7c:	68 db b3 02 c0       	push   0xc002b3db
c0012a81:	e8 09 04 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0012a86:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c0012a8b:	c7 44 24 40 f0 b3 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b3f0
c0012a93:	8d 50 01             	lea    edx,[eax+0x1]
c0012a96:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a9a:	89 15 84 f2 02 c0    	mov    DWORD PTR ds:0xc002f284,edx
c0012aa0:	83 c4 2c             	add    esp,0x2c
c0012aa3:	5b                   	pop    ebx
c0012aa4:	5e                   	pop    esi
c0012aa5:	5f                   	pop    edi
c0012aa6:	5d                   	pop    ebp
c0012aa7:	e9 e3 03 00 00       	jmp    c0012e8f <Dbg::kprintf(char const*, ...)>

c0012aac <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012aac:	55                   	push   ebp
c0012aad:	57                   	push   edi
c0012aae:	56                   	push   esi
c0012aaf:	53                   	push   ebx
c0012ab0:	83 ec 0c             	sub    esp,0xc
c0012ab3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012ab7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012abd:	0f 84 dc 00 00 00    	je     c0012b9f <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012ac3:	56                   	push   esi
c0012ac4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012ac8:	e8 5d f4 ff ff       	call   c0011f2a <VAS::getPageTableEntry(unsigned long)>
c0012acd:	5b                   	pop    ebx
c0012ace:	85 c0                	test   eax,eax
c0012ad0:	5f                   	pop    edi
c0012ad1:	89 c3                	mov    ebx,eax
c0012ad3:	0f 84 c6 00 00 00    	je     c0012b9f <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012ad9:	8b 38                	mov    edi,DWORD PTR [eax]
c0012adb:	31 c0                	xor    eax,eax
c0012add:	89 fa                	mov    edx,edi
c0012adf:	81 e2 01 04 00 00    	and    edx,0x401
c0012ae5:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012aeb:	0f 85 b0 00 00 00    	jne    c0012ba1 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012af1:	e8 36 d4 ff ff       	call   c000ff2c <Phys::allocatePage()>
c0012af6:	c1 ef 0b             	shr    edi,0xb
c0012af9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012afb:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b01:	09 c2                	or     edx,eax
c0012b03:	81 ca 01 08 00 00    	or     edx,0x801
c0012b09:	89 13                	mov    DWORD PTR [ebx],edx
c0012b0b:	8b 0d ac e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0ac
c0012b11:	85 c9                	test   ecx,ecx
c0012b13:	7e 3d                	jle    c0012b52 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012b15:	89 f5                	mov    ebp,esi
c0012b17:	31 db                	xor    ebx,ebx
c0012b19:	83 ec 0c             	sub    esp,0xc
c0012b1c:	57                   	push   edi
c0012b1d:	e8 96 f0 ff ff       	call   c0011bb8 <Virt::swapIDToSector(unsigned long)>
c0012b22:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b25:	01 d8                	add    eax,ebx
c0012b27:	6a 01                	push   0x1
c0012b29:	31 d2                	xor    edx,edx
c0012b2b:	43                   	inc    ebx
c0012b2c:	52                   	push   edx
c0012b2d:	81 c5 00 02 00 00    	add    ebp,0x200
c0012b33:	50                   	push   eax
c0012b34:	0f be 05 b8 e0 02 c0 	movsx  eax,BYTE PTR ds:0xc002e0b8
c0012b3b:	ff 34 85 1c f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd09e4]
c0012b42:	e8 c9 3c 00 00       	call   c0016810 <LogicalDisk::read(unsigned long long, int, void*)>
c0012b47:	83 c4 20             	add    esp,0x20
c0012b4a:	39 1d ac e0 02 c0    	cmp    DWORD PTR ds:0xc002e0ac,ebx
c0012b50:	7f c7                	jg     c0012b19 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b52:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0012b57:	48                   	dec    eax
c0012b58:	52                   	push   edx
c0012b59:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c0012b5e:	50                   	push   eax
c0012b5f:	56                   	push   esi
c0012b60:	68 01 b4 02 c0       	push   0xc002b401
c0012b65:	e8 25 03 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0012b6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b6d:	e8 28 f0 ff ff       	call   c0011b9a <Virt::freeSwapfilePage(unsigned long)>
c0012b72:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	48                   	dec    eax
c0012b7b:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c0012b80:	85 c0                	test   eax,eax
c0012b82:	75 01                	jne    c0012b85 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012b84:	fb                   	sti    
c0012b85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b89:	25 ff 0f 00 00       	and    eax,0xfff
c0012b8e:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012b93:	77 14                	ja     c0012ba9 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012b95:	0f 20 d8             	mov    eax,cr3
c0012b98:	0f 22 d8             	mov    cr3,eax
c0012b9b:	b0 01                	mov    al,0x1
c0012b9d:	eb 02                	jmp    c0012ba1 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b9f:	31 c0                	xor    eax,eax
c0012ba1:	83 c4 0c             	add    esp,0xc
c0012ba4:	5b                   	pop    ebx
c0012ba5:	5e                   	pop    esi
c0012ba6:	5f                   	pop    edi
c0012ba7:	5d                   	pop    ebp
c0012ba8:	c3                   	ret    
c0012ba9:	83 ec 0c             	sub    esp,0xc
c0012bac:	68 16 b4 02 c0       	push   0xc002b416
c0012bb1:	e8 d9 02 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0012bb6:	83 c4 10             	add    esp,0x10
c0012bb9:	eb da                	jmp    c0012b95 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012bbb:	90                   	nop

c0012bbc <VAS::scanForEviction()>:
c0012bbc:	57                   	push   edi
c0012bbd:	56                   	push   esi
c0012bbe:	53                   	push   ebx
c0012bbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012bc3:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012bc6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bcc:	75 0e                	jne    c0012bdc <VAS::scanForEviction()+0x20>
c0012bce:	89 da                	mov    edx,ebx
c0012bd0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bd3:	c1 ea 16             	shr    edx,0x16
c0012bd6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012bda:	74 48                	je     c0012c24 <VAS::scanForEviction()+0x68>
c0012bdc:	53                   	push   ebx
c0012bdd:	56                   	push   esi
c0012bde:	e8 47 f3 ff ff       	call   c0011f2a <VAS::getPageTableEntry(unsigned long)>
c0012be3:	5a                   	pop    edx
c0012be4:	8b 38                	mov    edi,DWORD PTR [eax]
c0012be6:	59                   	pop    ecx
c0012be7:	89 fa                	mov    edx,edi
c0012be9:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012bef:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012bf5:	74 3d                	je     c0012c34 <VAS::scanForEviction()+0x78>
c0012bf7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012bfd:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c03:	76 2a                	jbe    c0012c2f <VAS::scanForEviction()+0x73>
c0012c05:	31 db                	xor    ebx,ebx
c0012c07:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012c0e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c14:	75 c6                	jne    c0012bdc <VAS::scanForEviction()+0x20>
c0012c16:	89 da                	mov    edx,ebx
c0012c18:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c1b:	c1 ea 16             	shr    edx,0x16
c0012c1e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c22:	75 b8                	jne    c0012bdc <VAS::scanForEviction()+0x20>
c0012c24:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c2a:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c2d:	eb 97                	jmp    c0012bc6 <VAS::scanForEviction()+0xa>
c0012c2f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c32:	eb 92                	jmp    c0012bc6 <VAS::scanForEviction()+0xa>
c0012c34:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c3a:	74 bb                	je     c0012bf7 <VAS::scanForEviction()+0x3b>
c0012c3c:	f7 c7 20 00 00 00    	test   edi,0x20
c0012c42:	74 0a                	je     c0012c4e <VAS::scanForEviction()+0x92>
c0012c44:	83 e7 df             	and    edi,0xffffffdf
c0012c47:	89 38                	mov    DWORD PTR [eax],edi
c0012c49:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c4c:	eb a9                	jmp    c0012bf7 <VAS::scanForEviction()+0x3b>
c0012c4e:	83 ec 08             	sub    esp,0x8
c0012c51:	53                   	push   ebx
c0012c52:	56                   	push   esi
c0012c53:	e8 92 fd ff ff       	call   c00129ea <VAS::evict(unsigned long)>
c0012c58:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c5f:	83 c4 10             	add    esp,0x10
c0012c62:	89 f8                	mov    eax,edi
c0012c64:	5b                   	pop    ebx
c0012c65:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c6a:	5e                   	pop    esi
c0012c6b:	5f                   	pop    edi
c0012c6c:	c3                   	ret    

c0012c6d <mapVASFirstTime>:
c0012c6d:	55                   	push   ebp
c0012c6e:	57                   	push   edi
c0012c6f:	56                   	push   esi
c0012c70:	53                   	push   ebx
c0012c71:	83 ec 0c             	sub    esp,0xc
c0012c74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c79:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c7c:	4a                   	dec    edx
c0012c7d:	0f 84 8e 00 00 00    	je     c0012d11 <mapVASFirstTime+0xa4>
c0012c83:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c86:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c89:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c8e:	c1 e5 15             	shl    ebp,0x15
c0012c91:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c96:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012c9c:	29 eb                	sub    ebx,ebp
c0012c9e:	29 ee                	sub    esi,ebp
c0012ca0:	e8 87 d2 ff ff       	call   c000ff2c <Phys::allocatePage()>
c0012ca5:	83 ec 0c             	sub    esp,0xc
c0012ca8:	68 03 04 00 00       	push   0x403
c0012cad:	6a 01                	push   0x1
c0012caf:	53                   	push   ebx
c0012cb0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012cb6:	50                   	push   eax
c0012cb7:	57                   	push   edi
c0012cb8:	e8 f9 f8 ff ff       	call   c00125b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cbd:	83 c4 20             	add    esp,0x20
c0012cc0:	39 f3                	cmp    ebx,esi
c0012cc2:	75 dc                	jne    c0012ca0 <mapVASFirstTime+0x33>
c0012cc4:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012cc9:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012cce:	29 ee                	sub    esi,ebp
c0012cd0:	29 e8                	sub    eax,ebp
c0012cd2:	89 c5                	mov    ebp,eax
c0012cd4:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012cd8:	19 db                	sbb    ebx,ebx
c0012cda:	e8 4d d2 ff ff       	call   c000ff2c <Phys::allocatePage()>
c0012cdf:	83 e3 04             	and    ebx,0x4
c0012ce2:	83 ec 0c             	sub    esp,0xc
c0012ce5:	81 c3 03 04 00 00    	add    ebx,0x403
c0012ceb:	53                   	push   ebx
c0012cec:	6a 01                	push   0x1
c0012cee:	56                   	push   esi
c0012cef:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012cf5:	50                   	push   eax
c0012cf6:	57                   	push   edi
c0012cf7:	e8 ba f8 ff ff       	call   c00125b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cfc:	83 c4 20             	add    esp,0x20
c0012cff:	39 f5                	cmp    ebp,esi
c0012d01:	75 d1                	jne    c0012cd4 <mapVASFirstTime+0x67>
c0012d03:	0f 20 d8             	mov    eax,cr3
c0012d06:	0f 22 d8             	mov    cr3,eax
c0012d09:	83 c4 0c             	add    esp,0xc
c0012d0c:	5b                   	pop    ebx
c0012d0d:	5e                   	pop    esi
c0012d0e:	5f                   	pop    edi
c0012d0f:	5d                   	pop    ebp
c0012d10:	c3                   	ret    
c0012d11:	83 ec 0c             	sub    esp,0xc
c0012d14:	68 26 b4 02 c0       	push   0xc002b426
c0012d19:	e8 71 01 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0012d1e:	83 c4 10             	add    esp,0x10
c0012d21:	83 c4 0c             	add    esp,0xc
c0012d24:	5b                   	pop    ebx
c0012d25:	5e                   	pop    esi
c0012d26:	5f                   	pop    edi
c0012d27:	5d                   	pop    ebp
c0012d28:	c3                   	ret    

c0012d29 <__cxa_atexit>:
c0012d29:	31 c0                	xor    eax,eax
c0012d2b:	c3                   	ret    

c0012d2c <__cxa_finalize>:
c0012d2c:	c3                   	ret    

c0012d2d <__stack_chk_fail>:
c0012d2d:	55                   	push   ebp
c0012d2e:	89 e5                	mov    ebp,esp
c0012d30:	83 ec 14             	sub    esp,0x14
c0012d33:	68 3f b4 02 c0       	push   0xc002b43f
c0012d38:	e8 52 01 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0012d3d:	58                   	pop    eax
c0012d3e:	5a                   	pop    edx
c0012d3f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d42:	68 8f b4 02 c0       	push   0xc002b48f
c0012d47:	e8 43 01 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0012d4c:	59                   	pop    ecx
c0012d4d:	58                   	pop    eax
c0012d4e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d51:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d54:	68 8f b4 02 c0       	push   0xc002b48f
c0012d59:	e8 31 01 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0012d5e:	5a                   	pop    edx
c0012d5f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d62:	59                   	pop    ecx
c0012d63:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d65:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d68:	68 8f b4 02 c0       	push   0xc002b48f
c0012d6d:	e8 1d 01 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0012d72:	5a                   	pop    edx
c0012d73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d76:	59                   	pop    ecx
c0012d77:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d79:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d7b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d7e:	68 8f b4 02 c0       	push   0xc002b48f
c0012d83:	e8 07 01 00 00       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0012d88:	c7 04 24 97 b4 02 c0 	mov    DWORD PTR [esp],0xc002b497
c0012d8f:	e8 63 7b 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0012d94:	83 c4 10             	add    esp,0x10
c0012d97:	c9                   	leave  
c0012d98:	c3                   	ret    

c0012d99 <__cxa_pure_virtual>:
c0012d99:	83 ec 18             	sub    esp,0x18
c0012d9c:	68 af b4 02 c0       	push   0xc002b4af
c0012da1:	e8 51 7b 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0012da6:	83 c4 1c             	add    esp,0x1c
c0012da9:	c3                   	ret    

c0012daa <operator new[](unsigned long)>:
c0012daa:	e9 11 cb ff ff       	jmp    c000f8c0 <malloc>

c0012daf <operator delete(void*, unsigned long)>:
c0012daf:	e9 2c cb ff ff       	jmp    c000f8e0 <rfree>

c0012db4 <operator delete[](void*)>:
c0012db4:	e9 27 cb ff ff       	jmp    c000f8e0 <rfree>

c0012db9 <operator delete[](void*, unsigned long)>:
c0012db9:	e9 22 cb ff ff       	jmp    c000f8e0 <rfree>

c0012dbe <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012dbe:	57                   	push   edi
c0012dbf:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012dc4:	56                   	push   esi
c0012dc5:	be c4 b4 02 c0       	mov    esi,0xc002b4c4
c0012dca:	53                   	push   ebx
c0012dcb:	83 ec 40             	sub    esp,0x40
c0012dce:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012dd2:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012dd6:	fc                   	cld    
c0012dd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012dd9:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012ddd:	83 f9 3e             	cmp    ecx,0x3e
c0012de0:	7e 05                	jle    c0012de7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012de2:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012de7:	89 df                	mov    edi,ebx
c0012de9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012ded:	eb 02                	jmp    c0012df1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012def:	89 c7                	mov    edi,eax
c0012df1:	31 d2                	xor    edx,edx
c0012df3:	46                   	inc    esi
c0012df4:	89 f8                	mov    eax,edi
c0012df6:	f7 f1                	div    ecx
c0012df8:	39 cf                	cmp    edi,ecx
c0012dfa:	73 f3                	jae    c0012def <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012dfc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012dff:	eb 02                	jmp    c0012e03 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e01:	89 c3                	mov    ebx,eax
c0012e03:	31 d2                	xor    edx,edx
c0012e05:	4e                   	dec    esi
c0012e06:	89 d8                	mov    eax,ebx
c0012e08:	f7 f1                	div    ecx
c0012e0a:	39 cb                	cmp    ebx,ecx
c0012e0c:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e10:	88 16                	mov    BYTE PTR [esi],dl
c0012e12:	73 ed                	jae    c0012e01 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e14:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e18:	83 c4 40             	add    esp,0x40
c0012e1b:	5b                   	pop    ebx
c0012e1c:	5e                   	pop    esi
c0012e1d:	5f                   	pop    edi
c0012e1e:	c3                   	ret    

c0012e1f <Dbg::logc(char)>:
c0012e1f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e23:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e28:	ec                   	in     al,dx
c0012e29:	a8 20                	test   al,0x20
c0012e2b:	74 fb                	je     c0012e28 <Dbg::logc(char)+0x9>
c0012e2d:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e32:	88 c8                	mov    al,cl
c0012e34:	ee                   	out    dx,al
c0012e35:	c3                   	ret    

c0012e36 <Dbg::logs(char*)>:
c0012e36:	53                   	push   ebx
c0012e37:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e3b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e3e:	84 c0                	test   al,al
c0012e40:	74 0f                	je     c0012e51 <Dbg::logs(char*)+0x1b>
c0012e42:	50                   	push   eax
c0012e43:	43                   	inc    ebx
c0012e44:	e8 d6 ff ff ff       	call   c0012e1f <Dbg::logc(char)>
c0012e49:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e4c:	5a                   	pop    edx
c0012e4d:	84 c0                	test   al,al
c0012e4f:	75 f1                	jne    c0012e42 <Dbg::logs(char*)+0xc>
c0012e51:	5b                   	pop    ebx
c0012e52:	c3                   	ret    

c0012e53 <Dbg::logWriteInt(unsigned int)>:
c0012e53:	83 ec 10             	sub    esp,0x10
c0012e56:	6a 0a                	push   0xa
c0012e58:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e5c:	50                   	push   eax
c0012e5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e61:	e8 58 ff ff ff       	call   c0012dbe <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e66:	50                   	push   eax
c0012e67:	e8 ca ff ff ff       	call   c0012e36 <Dbg::logs(char*)>
c0012e6c:	83 c4 20             	add    esp,0x20
c0012e6f:	c3                   	ret    

c0012e70 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e70:	83 ec 10             	sub    esp,0x10
c0012e73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e77:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e7b:	50                   	push   eax
c0012e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e80:	e8 39 ff ff ff       	call   c0012dbe <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e85:	50                   	push   eax
c0012e86:	e8 ab ff ff ff       	call   c0012e36 <Dbg::logs(char*)>
c0012e8b:	83 c4 20             	add    esp,0x20
c0012e8e:	c3                   	ret    

c0012e8f <Dbg::kprintf(char const*, ...)>:
c0012e8f:	55                   	push   ebp
c0012e90:	57                   	push   edi
c0012e91:	56                   	push   esi
c0012e92:	53                   	push   ebx
c0012e93:	83 ec 0c             	sub    esp,0xc
c0012e96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e9a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ea2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012ea5:	84 c0                	test   al,al
c0012ea7:	74 4a                	je     c0012ef3 <Dbg::kprintf(char const*, ...)+0x64>
c0012ea9:	31 db                	xor    ebx,ebx
c0012eab:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012eae:	3c 25                	cmp    al,0x25
c0012eb0:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012eb3:	0f 85 e4 00 00 00    	jne    c0012f9d <Dbg::kprintf(char const*, ...)+0x10e>
c0012eb9:	83 c3 02             	add    ebx,0x2
c0012ebc:	8a 07                	mov    al,BYTE PTR [edi]
c0012ebe:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012ec1:	83 e8 25             	sub    eax,0x25
c0012ec4:	3c 53                	cmp    al,0x53
c0012ec6:	0f 87 ba 00 00 00    	ja     c0012f86 <Dbg::kprintf(char const*, ...)+0xf7>
c0012ecc:	0f b6 c0             	movzx  eax,al
c0012ecf:	ff 24 85 04 b5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4afc]
c0012ed6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012eda:	89 c8                	mov    eax,ecx
c0012edc:	83 c1 04             	add    ecx,0x4
c0012edf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ee3:	ff 30                	push   DWORD PTR [eax]
c0012ee5:	e8 4c ff ff ff       	call   c0012e36 <Dbg::logs(char*)>
c0012eea:	58                   	pop    eax
c0012eeb:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012eef:	84 c0                	test   al,al
c0012ef1:	75 b8                	jne    c0012eab <Dbg::kprintf(char const*, ...)+0x1c>
c0012ef3:	83 c4 0c             	add    esp,0xc
c0012ef6:	5b                   	pop    ebx
c0012ef7:	5e                   	pop    esi
c0012ef8:	5f                   	pop    edi
c0012ef9:	5d                   	pop    ebp
c0012efa:	c3                   	ret    
c0012efb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012eff:	89 d0                	mov    eax,edx
c0012f01:	83 c2 04             	add    edx,0x4
c0012f04:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f08:	ff 30                	push   DWORD PTR [eax]
c0012f0a:	e8 44 ff ff ff       	call   c0012e53 <Dbg::logWriteInt(unsigned int)>
c0012f0f:	58                   	pop    eax
c0012f10:	eb d9                	jmp    c0012eeb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f12:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f16:	89 d0                	mov    eax,edx
c0012f18:	83 c2 04             	add    edx,0x4
c0012f1b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f22:	50                   	push   eax
c0012f23:	e8 f7 fe ff ff       	call   c0012e1f <Dbg::logc(char)>
c0012f28:	58                   	pop    eax
c0012f29:	eb c0                	jmp    c0012eeb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f2b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f2f:	89 c8                	mov    eax,ecx
c0012f31:	83 c1 04             	add    ecx,0x4
c0012f34:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f38:	ff 30                	push   DWORD PTR [eax]
c0012f3a:	e8 14 ff ff ff       	call   c0012e53 <Dbg::logWriteInt(unsigned int)>
c0012f3f:	5f                   	pop    edi
c0012f40:	eb a9                	jmp    c0012eeb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f42:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f46:	89 c8                	mov    eax,ecx
c0012f48:	83 c1 04             	add    ecx,0x4
c0012f4b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f4f:	6a 10                	push   0x10
c0012f51:	ff 30                	push   DWORD PTR [eax]
c0012f53:	e8 18 ff ff ff       	call   c0012e70 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f58:	59                   	pop    ecx
c0012f59:	5f                   	pop    edi
c0012f5a:	eb 8f                	jmp    c0012eeb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f60:	89 d0                	mov    eax,edx
c0012f62:	83 c2 08             	add    edx,0x8
c0012f65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f69:	6a 10                	push   0x10
c0012f6b:	ff 30                	push   DWORD PTR [eax]
c0012f6d:	e8 fe fe ff ff       	call   c0012e70 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f72:	58                   	pop    eax
c0012f73:	5a                   	pop    edx
c0012f74:	e9 72 ff ff ff       	jmp    c0012eeb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f79:	6a 25                	push   0x25
c0012f7b:	e8 9f fe ff ff       	call   c0012e1f <Dbg::logc(char)>
c0012f80:	58                   	pop    eax
c0012f81:	e9 65 ff ff ff       	jmp    c0012eeb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f86:	6a 25                	push   0x25
c0012f88:	e8 92 fe ff ff       	call   c0012e1f <Dbg::logc(char)>
c0012f8d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f90:	50                   	push   eax
c0012f91:	e8 89 fe ff ff       	call   c0012e1f <Dbg::logc(char)>
c0012f96:	5a                   	pop    edx
c0012f97:	59                   	pop    ecx
c0012f98:	e9 4e ff ff ff       	jmp    c0012eeb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f9d:	50                   	push   eax
c0012f9e:	89 eb                	mov    ebx,ebp
c0012fa0:	e8 7a fe ff ff       	call   c0012e1f <Dbg::logc(char)>
c0012fa5:	89 fd                	mov    ebp,edi
c0012fa7:	58                   	pop    eax
c0012fa8:	e9 3e ff ff ff       	jmp    c0012eeb <Dbg::kprintf(char const*, ...)+0x5c>
c0012fad:	90                   	nop

c0012fae <File::read(unsigned long long, void*, int*)>:
c0012fae:	53                   	push   ebx
c0012faf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fb3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fb7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fbe:	3c 19                	cmp    al,0x19
c0012fc0:	77 35                	ja     c0012ff7 <File::read(unsigned long long, void*, int*)+0x49>
c0012fc2:	8b 04 85 20 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd08e0]
c0012fc9:	85 c0                	test   eax,eax
c0012fcb:	74 2a                	je     c0012ff7 <File::read(unsigned long long, void*, int*)+0x49>
c0012fcd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fd3:	85 c0                	test   eax,eax
c0012fd5:	74 20                	je     c0012ff7 <File::read(unsigned long long, void*, int*)+0x49>
c0012fd7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fdb:	74 21                	je     c0012ffe <File::read(unsigned long long, void*, int*)+0x50>
c0012fdd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fdf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fe3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fe9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ff1:	5b                   	pop    ebx
c0012ff2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012ff5:	ff e0                	jmp    eax
c0012ff7:	b8 0b 00 00 00       	mov    eax,0xb
c0012ffc:	eb 05                	jmp    c0013003 <File::read(unsigned long long, void*, int*)+0x55>
c0012ffe:	b8 05 00 00 00       	mov    eax,0x5
c0013003:	5b                   	pop    ebx
c0013004:	c3                   	ret    
c0013005:	90                   	nop

c0013006 <File::write(unsigned long long, void*, int*)>:
c0013006:	53                   	push   ebx
c0013007:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001300b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001300f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013016:	3c 19                	cmp    al,0x19
c0013018:	77 35                	ja     c001304f <File::write(unsigned long long, void*, int*)+0x49>
c001301a:	8b 04 85 20 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd08e0]
c0013021:	85 c0                	test   eax,eax
c0013023:	74 2a                	je     c001304f <File::write(unsigned long long, void*, int*)+0x49>
c0013025:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001302b:	85 c0                	test   eax,eax
c001302d:	74 20                	je     c001304f <File::write(unsigned long long, void*, int*)+0x49>
c001302f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013033:	74 21                	je     c0013056 <File::write(unsigned long long, void*, int*)+0x50>
c0013035:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013037:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001303b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013041:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013045:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013049:	5b                   	pop    ebx
c001304a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001304d:	ff e0                	jmp    eax
c001304f:	b8 0b 00 00 00       	mov    eax,0xb
c0013054:	eb 05                	jmp    c001305b <File::write(unsigned long long, void*, int*)+0x55>
c0013056:	b8 05 00 00 00       	mov    eax,0x5
c001305b:	5b                   	pop    ebx
c001305c:	c3                   	ret    
c001305d:	90                   	nop

c001305e <Directory::read(unsigned long long, void*, int*)>:
c001305e:	53                   	push   ebx
c001305f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013063:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013067:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001306e:	3c 19                	cmp    al,0x19
c0013070:	77 35                	ja     c00130a7 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013072:	8b 04 85 20 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd08e0]
c0013079:	85 c0                	test   eax,eax
c001307b:	74 2a                	je     c00130a7 <Directory::read(unsigned long long, void*, int*)+0x49>
c001307d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013083:	85 c0                	test   eax,eax
c0013085:	74 20                	je     c00130a7 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013087:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001308b:	74 21                	je     c00130ae <Directory::read(unsigned long long, void*, int*)+0x50>
c001308d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001308f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013093:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013099:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001309d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130a1:	5b                   	pop    ebx
c00130a2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00130a5:	ff e0                	jmp    eax
c00130a7:	b8 0b 00 00 00       	mov    eax,0xb
c00130ac:	eb 05                	jmp    c00130b3 <Directory::read(unsigned long long, void*, int*)+0x55>
c00130ae:	b8 05 00 00 00       	mov    eax,0x5
c00130b3:	5b                   	pop    ebx
c00130b4:	c3                   	ret    
c00130b5:	90                   	nop

c00130b6 <Directory::write(unsigned long long, void*, int*)>:
c00130b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130ba:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00130c1:	b8 0b 00 00 00       	mov    eax,0xb
c00130c6:	80 fa 19             	cmp    dl,0x19
c00130c9:	77 18                	ja     c00130e3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130cb:	8b 14 95 20 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd08e0]
c00130d2:	85 d2                	test   edx,edx
c00130d4:	74 0d                	je     c00130e3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130d6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00130dd:	19 c0                	sbb    eax,eax
c00130df:	83 e0 0a             	and    eax,0xa
c00130e2:	40                   	inc    eax
c00130e3:	c3                   	ret    

c00130e4 <File::isAtty()>:
c00130e4:	31 c0                	xor    eax,eax
c00130e6:	c3                   	ret    
c00130e7:	90                   	nop

c00130e8 <Directory::isAtty()>:
c00130e8:	31 c0                	xor    eax,eax
c00130ea:	c3                   	ret    
c00130eb:	90                   	nop

c00130ec <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00130ec:	b8 0a 00 00 00       	mov    eax,0xa
c00130f1:	c3                   	ret    

c00130f2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00130f2:	b8 0a 00 00 00       	mov    eax,0xa
c00130f7:	c3                   	ret    

c00130f8 <Filesystem::getFileFirstSector(char const*)>:
c00130f8:	31 c0                	xor    eax,eax
c00130fa:	31 d2                	xor    edx,edx
c00130fc:	c3                   	ret    
c00130fd:	90                   	nop

c00130fe <File::~File()>:
c00130fe:	83 ec 0c             	sub    esp,0xc
c0013101:	ba c4 b6 02 c0       	mov    edx,0xc002b6c4
c0013106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310a:	89 10                	mov    DWORD PTR [eax],edx
c001310c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013110:	83 ec 0c             	sub    esp,0xc
c0013113:	50                   	push   eax
c0013114:	e8 0f e7 ff ff       	call   c0011828 <UnixFile::~UnixFile()>
c0013119:	83 c4 10             	add    esp,0x10
c001311c:	90                   	nop
c001311d:	83 c4 0c             	add    esp,0xc
c0013120:	c3                   	ret    
c0013121:	90                   	nop

c0013122 <File::~File()>:
c0013122:	83 ec 0c             	sub    esp,0xc
c0013125:	83 ec 0c             	sub    esp,0xc
c0013128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001312c:	e8 cd ff ff ff       	call   c00130fe <File::~File()>
c0013131:	83 c4 10             	add    esp,0x10
c0013134:	83 ec 08             	sub    esp,0x8
c0013137:	68 14 01 00 00       	push   0x114
c001313c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013140:	e8 6a fc ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0013145:	83 c4 10             	add    esp,0x10
c0013148:	83 c4 0c             	add    esp,0xc
c001314b:	c3                   	ret    

c001314c <Directory::~Directory()>:
c001314c:	83 ec 0c             	sub    esp,0xc
c001314f:	ba e0 b6 02 c0       	mov    edx,0xc002b6e0
c0013154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013158:	89 10                	mov    DWORD PTR [eax],edx
c001315a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001315e:	83 ec 0c             	sub    esp,0xc
c0013161:	50                   	push   eax
c0013162:	e8 c1 e6 ff ff       	call   c0011828 <UnixFile::~UnixFile()>
c0013167:	83 c4 10             	add    esp,0x10
c001316a:	90                   	nop
c001316b:	83 c4 0c             	add    esp,0xc
c001316e:	c3                   	ret    
c001316f:	90                   	nop

c0013170 <Directory::~Directory()>:
c0013170:	83 ec 0c             	sub    esp,0xc
c0013173:	83 ec 0c             	sub    esp,0xc
c0013176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001317a:	e8 cd ff ff ff       	call   c001314c <Directory::~Directory()>
c001317f:	83 c4 10             	add    esp,0x10
c0013182:	83 ec 08             	sub    esp,0x8
c0013185:	68 14 01 00 00       	push   0x114
c001318a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001318e:	e8 1c fc ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0013193:	83 c4 10             	add    esp,0x10
c0013196:	83 c4 0c             	add    esp,0xc
c0013199:	c3                   	ret    

c001319a <Filesystem::Filesystem()>:
c001319a:	ba 5c b6 02 c0       	mov    edx,0xc002b65c
c001319f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131a3:	89 10                	mov    DWORD PTR [eax],edx
c00131a5:	8b 15 94 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f294
c00131ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131b6:	a3 94 f2 02 c0       	mov    ds:0xc002f294,eax
c00131bb:	90                   	nop
c00131bc:	c3                   	ret    
c00131bd:	90                   	nop

c00131be <Filesystem::~Filesystem()>:
c00131be:	ba 5c b6 02 c0       	mov    edx,0xc002b65c
c00131c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131c7:	89 10                	mov    DWORD PTR [eax],edx
c00131c9:	90                   	nop
c00131ca:	c3                   	ret    
c00131cb:	90                   	nop

c00131cc <Filesystem::~Filesystem()>:
c00131cc:	83 ec 0c             	sub    esp,0xc
c00131cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131d3:	e8 e6 ff ff ff       	call   c00131be <Filesystem::~Filesystem()>
c00131d8:	83 c4 04             	add    esp,0x4
c00131db:	83 ec 08             	sub    esp,0x8
c00131de:	6a 08                	push   0x8
c00131e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e4:	e8 c6 fb ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c00131e9:	83 c4 10             	add    esp,0x10
c00131ec:	83 c4 0c             	add    esp,0xc
c00131ef:	c3                   	ret    

c00131f0 <Fs::getcwd(Process*, char*, int)>:
c00131f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131f4:	31 c0                	xor    eax,eax
c00131f6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131fd:	7d 15                	jge    c0013214 <Fs::getcwd(Process*, char*, int)+0x24>
c00131ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013203:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001320a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001320d:	84 c9                	test   cl,cl
c001320f:	74 06                	je     c0013217 <Fs::getcwd(Process*, char*, int)+0x27>
c0013211:	40                   	inc    eax
c0013212:	eb e2                	jmp    c00131f6 <Fs::getcwd(Process*, char*, int)+0x6>
c0013214:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013217:	31 c0                	xor    eax,eax
c0013219:	c3                   	ret    

c001321a <Fs::initVFS()>:
c001321a:	83 ec 18             	sub    esp,0x18
c001321d:	6a 08                	push   0x8
c001321f:	e8 9c c6 ff ff       	call   c000f8c0 <malloc>
c0013224:	89 04 24             	mov    DWORD PTR [esp],eax
c0013227:	e8 10 e7 00 00       	call   c002193c <FAT::FAT()>
c001322c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013233:	e8 88 c6 ff ff       	call   c000f8c0 <malloc>
c0013238:	89 04 24             	mov    DWORD PTR [esp],eax
c001323b:	e8 4c f9 00 00       	call   c0022b8c <ISO9660::ISO9660()>
c0013240:	83 c4 1c             	add    esp,0x1c
c0013243:	c3                   	ret    

c0013244 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013244:	55                   	push   ebp
c0013245:	57                   	push   edi
c0013246:	56                   	push   esi
c0013247:	53                   	push   ebx
c0013248:	81 ec 10 04 00 00    	sub    esp,0x410
c001324e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013255:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001325c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013263:	68 00 04 00 00       	push   0x400
c0013268:	6a 00                	push   0x0
c001326a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001326e:	56                   	push   esi
c001326f:	e8 f8 d4 fe ff       	call   c000076c <memset>
c0013274:	83 c4 10             	add    esp,0x10
c0013277:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001327b:	75 0b                	jne    c0013288 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001327d:	50                   	push   eax
c001327e:	50                   	push   eax
c001327f:	57                   	push   edi
c0013280:	56                   	push   esi
c0013281:	e8 a2 d5 fe ff       	call   c0000828 <strcpy>
c0013286:	eb 41                	jmp    c00132c9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013288:	8a 07                	mov    al,BYTE PTR [edi]
c001328a:	3c 5c                	cmp    al,0x5c
c001328c:	74 04                	je     c0013292 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001328e:	3c 2f                	cmp    al,0x2f
c0013290:	75 18                	jne    c00132aa <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013292:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013295:	3c 60                	cmp    al,0x60
c0013297:	7e 03                	jle    c001329c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013299:	83 e8 20             	sub    eax,0x20
c001329c:	88 04 24             	mov    BYTE PTR [esp],al
c001329f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132a6:	50                   	push   eax
c00132a7:	50                   	push   eax
c00132a8:	eb 18                	jmp    c00132c2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132aa:	50                   	push   eax
c00132ab:	50                   	push   eax
c00132ac:	55                   	push   ebp
c00132ad:	56                   	push   esi
c00132ae:	e8 75 d5 fe ff       	call   c0000828 <strcpy>
c00132b3:	5a                   	pop    edx
c00132b4:	59                   	pop    ecx
c00132b5:	68 71 ce 02 c0       	push   0xc002ce71
c00132ba:	56                   	push   esi
c00132bb:	e8 a8 d6 fe ff       	call   c0000968 <strcat>
c00132c0:	5d                   	pop    ebp
c00132c1:	58                   	pop    eax
c00132c2:	57                   	push   edi
c00132c3:	56                   	push   esi
c00132c4:	e8 9f d6 fe ff       	call   c0000968 <strcat>
c00132c9:	83 c4 10             	add    esp,0x10
c00132cc:	8a 04 24             	mov    al,BYTE PTR [esp]
c00132cf:	3c 60                	cmp    al,0x60
c00132d1:	7e 03                	jle    c00132d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00132d3:	83 e8 20             	sub    eax,0x20
c00132d6:	88 04 24             	mov    BYTE PTR [esp],al
c00132d9:	88 03                	mov    BYTE PTR [ebx],al
c00132db:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132e2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00132e8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132ec:	bf 03 00 00 00       	mov    edi,0x3
c00132f1:	b8 03 00 00 00       	mov    eax,0x3
c00132f6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132f9:	84 d2                	test   dl,dl
c00132fb:	0f 84 91 00 00 00    	je     c0013392 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013301:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013304:	80 fa 5c             	cmp    dl,0x5c
c0013307:	74 05                	je     c001330e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013309:	80 fa 2f             	cmp    dl,0x2f
c001330c:	75 12                	jne    c0013320 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001330e:	89 c5                	mov    ebp,eax
c0013310:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013315:	74 09                	je     c0013320 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013317:	40                   	inc    eax
c0013318:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001331c:	89 cf                	mov    edi,ecx
c001331e:	eb d6                	jmp    c00132f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013320:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013325:	75 5b                	jne    c0013382 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013327:	80 fa 2e             	cmp    dl,0x2e
c001332a:	75 56                	jne    c0013382 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001332c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013330:	74 19                	je     c001334b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013332:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013337:	74 53                	je     c001338c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013339:	89 f9                	mov    ecx,edi
c001333b:	41                   	inc    ecx
c001333c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001333f:	80 fa 2f             	cmp    dl,0x2f
c0013342:	74 f7                	je     c001333b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013344:	80 fa 5c             	cmp    dl,0x5c
c0013347:	74 f2                	je     c001333b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013349:	eb d1                	jmp    c001331c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001334b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013350:	74 3a                	je     c001338c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013352:	83 f8 03             	cmp    eax,0x3
c0013355:	74 c5                	je     c001331c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013357:	41                   	inc    ecx
c0013358:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001335b:	80 fa 2f             	cmp    dl,0x2f
c001335e:	74 f7                	je     c0013357 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013360:	80 fa 5c             	cmp    dl,0x5c
c0013363:	74 f2                	je     c0013357 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013365:	48                   	dec    eax
c0013366:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001336a:	75 06                	jne    c0013372 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001336c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013370:	eb f3                	jmp    c0013365 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013372:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013376:	74 07                	je     c001337f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013378:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001337c:	48                   	dec    eax
c001337d:	eb f3                	jmp    c0013372 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001337f:	40                   	inc    eax
c0013380:	eb 9a                	jmp    c001331c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013382:	80 fa 2f             	cmp    dl,0x2f
c0013385:	74 95                	je     c001331c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013387:	80 fa 5c             	cmp    dl,0x5c
c001338a:	74 90                	je     c001331c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001338c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001338f:	40                   	inc    eax
c0013390:	eb 8a                	jmp    c001331c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013392:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013396:	83 ec 0c             	sub    esp,0xc
c0013399:	53                   	push   ebx
c001339a:	e8 e9 d3 fe ff       	call   c0000788 <strlen>
c001339f:	83 c4 10             	add    esp,0x10
c00133a2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00133a7:	75 26                	jne    c00133cf <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00133a9:	83 ec 0c             	sub    esp,0xc
c00133ac:	53                   	push   ebx
c00133ad:	e8 d6 d3 fe ff       	call   c0000788 <strlen>
c00133b2:	83 c4 10             	add    esp,0x10
c00133b5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133ba:	74 26                	je     c00133e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00133bc:	83 ec 0c             	sub    esp,0xc
c00133bf:	53                   	push   ebx
c00133c0:	e8 c3 d3 fe ff       	call   c0000788 <strlen>
c00133c5:	83 c4 10             	add    esp,0x10
c00133c8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00133cd:	eb c7                	jmp    c0013396 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00133cf:	83 ec 0c             	sub    esp,0xc
c00133d2:	53                   	push   ebx
c00133d3:	e8 b0 d3 fe ff       	call   c0000788 <strlen>
c00133d8:	83 c4 10             	add    esp,0x10
c00133db:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133e0:	74 c7                	je     c00133a9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00133e2:	81 c4 0c 04 00 00    	add    esp,0x40c
c00133e8:	5b                   	pop    ebx
c00133e9:	5e                   	pop    esi
c00133ea:	5f                   	pop    edi
c00133eb:	5d                   	pop    ebp
c00133ec:	c3                   	ret    
c00133ed:	90                   	nop

c00133ee <File::File(char const*, Process*)>:
c00133ee:	83 ec 0c             	sub    esp,0xc
c00133f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f5:	83 ec 08             	sub    esp,0x8
c00133f8:	6a 00                	push   0x0
c00133fa:	50                   	push   eax
c00133fb:	e8 46 e2 ff ff       	call   c0011646 <UnixFile::UnixFile(int)>
c0013400:	83 c4 10             	add    esp,0x10
c0013403:	ba c4 b6 02 c0       	mov    edx,0xc002b6c4
c0013408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340c:	89 10                	mov    DWORD PTR [eax],edx
c001340e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013412:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341c:	83 c0 0d             	add    eax,0xd
c001341f:	83 ec 04             	sub    esp,0x4
c0013422:	52                   	push   edx
c0013423:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013427:	50                   	push   eax
c0013428:	e8 17 fe ff ff       	call   c0013244 <Fs::standardiseFiles(char*, char const*, char const*)>
c001342d:	83 c4 10             	add    esp,0x10
c0013430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013434:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013437:	8d 50 bf             	lea    edx,[eax-0x41]
c001343a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013448:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001344c:	90                   	nop
c001344d:	83 c4 0c             	add    esp,0xc
c0013450:	c3                   	ret    
c0013451:	90                   	nop

c0013452 <File::open(FileOpenMode)>:
c0013452:	53                   	push   ebx
c0013453:	b8 0b 00 00 00       	mov    eax,0xb
c0013458:	83 ec 08             	sub    esp,0x8
c001345b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001345f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013466:	80 fa 19             	cmp    dl,0x19
c0013469:	77 40                	ja     c00134ab <File::open(FileOpenMode)+0x59>
c001346b:	8b 14 95 20 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd08e0]
c0013472:	85 d2                	test   edx,edx
c0013474:	74 35                	je     c00134ab <File::open(FileOpenMode)+0x59>
c0013476:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001347c:	85 d2                	test   edx,edx
c001347e:	74 2b                	je     c00134ab <File::open(FileOpenMode)+0x59>
c0013480:	b8 06 00 00 00       	mov    eax,0x6
c0013485:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013489:	75 20                	jne    c00134ab <File::open(FileOpenMode)+0x59>
c001348b:	8b 02                	mov    eax,DWORD PTR [edx]
c001348d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013493:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013497:	51                   	push   ecx
c0013498:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001349b:	51                   	push   ecx
c001349c:	52                   	push   edx
c001349d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00134a0:	83 c4 10             	add    esp,0x10
c00134a3:	85 c0                	test   eax,eax
c00134a5:	75 04                	jne    c00134ab <File::open(FileOpenMode)+0x59>
c00134a7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134ab:	83 c4 08             	add    esp,0x8
c00134ae:	5b                   	pop    ebx
c00134af:	c3                   	ret    

c00134b0 <File::close()>:
c00134b0:	53                   	push   ebx
c00134b1:	b8 0b 00 00 00       	mov    eax,0xb
c00134b6:	83 ec 08             	sub    esp,0x8
c00134b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134bd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134c4:	80 fa 19             	cmp    dl,0x19
c00134c7:	77 41                	ja     c001350a <File::close()+0x5a>
c00134c9:	8b 1c 95 20 f7 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd08e0]
c00134d0:	85 db                	test   ebx,ebx
c00134d2:	74 36                	je     c001350a <File::close()+0x5a>
c00134d4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00134db:	74 2d                	je     c001350a <File::close()+0x5a>
c00134dd:	b8 05 00 00 00       	mov    eax,0x5
c00134e2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134e6:	74 22                	je     c001350a <File::close()+0x5a>
c00134e8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134ec:	8b 04 95 20 f7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd08e0]
c00134f3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134f9:	53                   	push   ebx
c00134fa:	53                   	push   ebx
c00134fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00134fd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013503:	50                   	push   eax
c0013504:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013507:	83 c4 10             	add    esp,0x10
c001350a:	83 c4 08             	add    esp,0x8
c001350d:	5b                   	pop    ebx
c001350e:	c3                   	ret    
c001350f:	90                   	nop

c0013510 <File::seek(unsigned long long)>:
c0013510:	56                   	push   esi
c0013511:	53                   	push   ebx
c0013512:	b8 0b 00 00 00       	mov    eax,0xb
c0013517:	51                   	push   ecx
c0013518:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001351c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013520:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013527:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001352b:	80 fa 19             	cmp    dl,0x19
c001352e:	77 31                	ja     c0013561 <File::seek(unsigned long long)+0x51>
c0013530:	8b 14 95 20 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd08e0]
c0013537:	85 d2                	test   edx,edx
c0013539:	74 26                	je     c0013561 <File::seek(unsigned long long)+0x51>
c001353b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013541:	85 d2                	test   edx,edx
c0013543:	74 1c                	je     c0013561 <File::seek(unsigned long long)+0x51>
c0013545:	b8 05 00 00 00       	mov    eax,0x5
c001354a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001354e:	74 11                	je     c0013561 <File::seek(unsigned long long)+0x51>
c0013550:	8b 02                	mov    eax,DWORD PTR [edx]
c0013552:	53                   	push   ebx
c0013553:	51                   	push   ecx
c0013554:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001355a:	52                   	push   edx
c001355b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001355e:	83 c4 10             	add    esp,0x10
c0013561:	5a                   	pop    edx
c0013562:	5b                   	pop    ebx
c0013563:	5e                   	pop    esi
c0013564:	c3                   	ret    
c0013565:	90                   	nop

c0013566 <File::tell(unsigned long long*)>:
c0013566:	83 ec 0c             	sub    esp,0xc
c0013569:	b8 0b 00 00 00       	mov    eax,0xb
c001356e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013572:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013579:	80 fa 19             	cmp    dl,0x19
c001357c:	77 34                	ja     c00135b2 <File::tell(unsigned long long*)+0x4c>
c001357e:	8b 14 95 20 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd08e0]
c0013585:	85 d2                	test   edx,edx
c0013587:	74 29                	je     c00135b2 <File::tell(unsigned long long*)+0x4c>
c0013589:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001358f:	85 d2                	test   edx,edx
c0013591:	74 1f                	je     c00135b2 <File::tell(unsigned long long*)+0x4c>
c0013593:	b8 05 00 00 00       	mov    eax,0x5
c0013598:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001359c:	74 14                	je     c00135b2 <File::tell(unsigned long long*)+0x4c>
c001359e:	50                   	push   eax
c001359f:	8b 02                	mov    eax,DWORD PTR [edx]
c00135a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135a5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135ab:	52                   	push   edx
c00135ac:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00135af:	83 c4 10             	add    esp,0x10
c00135b2:	83 c4 0c             	add    esp,0xc
c00135b5:	c3                   	ret    

c00135b6 <File::rewind()>:
c00135b6:	83 ec 10             	sub    esp,0x10
c00135b9:	6a 00                	push   0x0
c00135bb:	6a 00                	push   0x0
c00135bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135c1:	e8 4a ff ff ff       	call   c0013510 <File::seek(unsigned long long)>
c00135c6:	83 c4 1c             	add    esp,0x1c
c00135c9:	c3                   	ret    

c00135ca <File::unlink()>:
c00135ca:	83 ec 0c             	sub    esp,0xc
c00135cd:	b8 0b 00 00 00       	mov    eax,0xb
c00135d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135dd:	80 f9 19             	cmp    cl,0x19
c00135e0:	77 2f                	ja     c0013611 <File::unlink()+0x47>
c00135e2:	8b 0c 8d 20 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd08e0]
c00135e9:	85 c9                	test   ecx,ecx
c00135eb:	74 24                	je     c0013611 <File::unlink()+0x47>
c00135ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135f3:	85 c9                	test   ecx,ecx
c00135f5:	74 1a                	je     c0013611 <File::unlink()+0x47>
c00135f7:	b8 06 00 00 00       	mov    eax,0x6
c00135fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013600:	75 0f                	jne    c0013611 <File::unlink()+0x47>
c0013602:	83 c2 0d             	add    edx,0xd
c0013605:	50                   	push   eax
c0013606:	50                   	push   eax
c0013607:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013609:	52                   	push   edx
c001360a:	51                   	push   ecx
c001360b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001360e:	83 c4 10             	add    esp,0x10
c0013611:	83 c4 0c             	add    esp,0xc
c0013614:	c3                   	ret    
c0013615:	90                   	nop

c0013616 <File::rename(char const*)>:
c0013616:	83 ec 0c             	sub    esp,0xc
c0013619:	b8 0b 00 00 00       	mov    eax,0xb
c001361e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013622:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013629:	80 f9 19             	cmp    cl,0x19
c001362c:	77 32                	ja     c0013660 <File::rename(char const*)+0x4a>
c001362e:	8b 0c 8d 20 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd08e0]
c0013635:	85 c9                	test   ecx,ecx
c0013637:	74 27                	je     c0013660 <File::rename(char const*)+0x4a>
c0013639:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001363f:	85 c9                	test   ecx,ecx
c0013641:	74 1d                	je     c0013660 <File::rename(char const*)+0x4a>
c0013643:	b8 06 00 00 00       	mov    eax,0x6
c0013648:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001364c:	75 12                	jne    c0013660 <File::rename(char const*)+0x4a>
c001364e:	83 c2 0d             	add    edx,0xd
c0013651:	50                   	push   eax
c0013652:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013654:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013658:	52                   	push   edx
c0013659:	51                   	push   ecx
c001365a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001365d:	83 c4 10             	add    esp,0x10
c0013660:	83 c4 0c             	add    esp,0xc
c0013663:	c3                   	ret    

c0013664 <File::chfatattr(unsigned char, unsigned char)>:
c0013664:	57                   	push   edi
c0013665:	b8 0b 00 00 00       	mov    eax,0xb
c001366a:	56                   	push   esi
c001366b:	53                   	push   ebx
c001366c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013670:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013674:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001367b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001367f:	80 f9 19             	cmp    cl,0x19
c0013682:	77 37                	ja     c00136bb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013684:	8b 0c 8d 20 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd08e0]
c001368b:	85 c9                	test   ecx,ecx
c001368d:	74 2c                	je     c00136bb <File::chfatattr(unsigned char, unsigned char)+0x57>
c001368f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013695:	85 c9                	test   ecx,ecx
c0013697:	74 22                	je     c00136bb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013699:	b8 06 00 00 00       	mov    eax,0x6
c001369e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136a2:	75 17                	jne    c00136bb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136a4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00136a6:	89 f0                	mov    eax,esi
c00136a8:	83 c2 0d             	add    edx,0xd
c00136ab:	0f b6 f0             	movzx  esi,al
c00136ae:	0f b6 db             	movzx  ebx,bl
c00136b1:	56                   	push   esi
c00136b2:	53                   	push   ebx
c00136b3:	52                   	push   edx
c00136b4:	51                   	push   ecx
c00136b5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136b8:	83 c4 10             	add    esp,0x10
c00136bb:	5b                   	pop    ebx
c00136bc:	5e                   	pop    esi
c00136bd:	5f                   	pop    edi
c00136be:	c3                   	ret    
c00136bf:	90                   	nop

c00136c0 <File::exists()>:
c00136c0:	83 ec 0c             	sub    esp,0xc
c00136c3:	31 c0                	xor    eax,eax
c00136c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136c9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136d0:	80 f9 19             	cmp    cl,0x19
c00136d3:	77 24                	ja     c00136f9 <File::exists()+0x39>
c00136d5:	8b 0c 8d 20 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd08e0]
c00136dc:	85 c9                	test   ecx,ecx
c00136de:	74 19                	je     c00136f9 <File::exists()+0x39>
c00136e0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136e6:	85 c9                	test   ecx,ecx
c00136e8:	74 0f                	je     c00136f9 <File::exists()+0x39>
c00136ea:	83 c2 0d             	add    edx,0xd
c00136ed:	50                   	push   eax
c00136ee:	50                   	push   eax
c00136ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136f1:	52                   	push   edx
c00136f2:	51                   	push   ecx
c00136f3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136f6:	83 c4 10             	add    esp,0x10
c00136f9:	83 c4 0c             	add    esp,0xc
c00136fc:	c3                   	ret    
c00136fd:	90                   	nop

c00136fe <File::stat(unsigned long long*, bool*)>:
c00136fe:	56                   	push   esi
c00136ff:	53                   	push   ebx
c0013700:	50                   	push   eax
c0013701:	b8 0b 00 00 00       	mov    eax,0xb
c0013706:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001370a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001370e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013715:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013719:	80 f9 19             	cmp    cl,0x19
c001371c:	77 3d                	ja     c001375b <File::stat(unsigned long long*, bool*)+0x5d>
c001371e:	8b 0c 8d 20 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd08e0]
c0013725:	85 c9                	test   ecx,ecx
c0013727:	74 32                	je     c001375b <File::stat(unsigned long long*, bool*)+0x5d>
c0013729:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001372f:	85 c9                	test   ecx,ecx
c0013731:	74 28                	je     c001375b <File::stat(unsigned long long*, bool*)+0x5d>
c0013733:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013735:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013739:	74 13                	je     c001374e <File::stat(unsigned long long*, bool*)+0x50>
c001373b:	83 ec 04             	sub    esp,0x4
c001373e:	56                   	push   esi
c001373f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013745:	51                   	push   ecx
c0013746:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013749:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001374c:	eb 0a                	jmp    c0013758 <File::stat(unsigned long long*, bool*)+0x5a>
c001374e:	53                   	push   ebx
c001374f:	83 c2 0d             	add    edx,0xd
c0013752:	56                   	push   esi
c0013753:	52                   	push   edx
c0013754:	51                   	push   ecx
c0013755:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	5a                   	pop    edx
c001375c:	5b                   	pop    ebx
c001375d:	5e                   	pop    esi
c001375e:	c3                   	ret    

c001375f <Fs::setcwd(Process*, char*)>:
c001375f:	55                   	push   ebp
c0013760:	57                   	push   edi
c0013761:	56                   	push   esi
c0013762:	53                   	push   ebx
c0013763:	81 ec 20 02 00 00    	sub    esp,0x220
c0013769:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013770:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013776:	57                   	push   edi
c0013777:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001377e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013782:	56                   	push   esi
c0013783:	e8 bc fa ff ff       	call   c0013244 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013788:	89 34 24             	mov    DWORD PTR [esp],esi
c001378b:	e8 f8 cf fe ff       	call   c0000788 <strlen>
c0013790:	83 c4 10             	add    esp,0x10
c0013793:	83 f8 02             	cmp    eax,0x2
c0013796:	77 17                	ja     c00137af <Fs::setcwd(Process*, char*)+0x50>
c0013798:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001379d:	83 e8 41             	sub    eax,0x41
c00137a0:	83 f8 19             	cmp    eax,0x19
c00137a3:	76 24                	jbe    c00137c9 <Fs::setcwd(Process*, char*)+0x6a>
c00137a5:	b8 03 00 00 00       	mov    eax,0x3
c00137aa:	e9 e0 00 00 00       	jmp    c001388f <Fs::setcwd(Process*, char*)+0x130>
c00137af:	83 ec 0c             	sub    esp,0xc
c00137b2:	56                   	push   esi
c00137b3:	e8 d0 cf fe ff       	call   c0000788 <strlen>
c00137b8:	83 c4 10             	add    esp,0x10
c00137bb:	83 f8 03             	cmp    eax,0x3
c00137be:	75 34                	jne    c00137f4 <Fs::setcwd(Process*, char*)+0x95>
c00137c0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00137c5:	75 2d                	jne    c00137f4 <Fs::setcwd(Process*, char*)+0x95>
c00137c7:	eb cf                	jmp    c0013798 <Fs::setcwd(Process*, char*)+0x39>
c00137c9:	8b 14 85 20 f7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd08e0]
c00137d0:	b8 05 00 00 00       	mov    eax,0x5
c00137d5:	85 d2                	test   edx,edx
c00137d7:	0f 84 b2 00 00 00    	je     c001388f <Fs::setcwd(Process*, char*)+0x130>
c00137dd:	b8 06 00 00 00       	mov    eax,0x6
c00137e2:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137e9:	0f 85 92 00 00 00    	jne    c0013881 <Fs::setcwd(Process*, char*)+0x122>
c00137ef:	e9 9b 00 00 00       	jmp    c001388f <Fs::setcwd(Process*, char*)+0x130>
c00137f4:	83 ec 0c             	sub    esp,0xc
c00137f7:	68 14 01 00 00       	push   0x114
c00137fc:	e8 bf c0 ff ff       	call   c000f8c0 <malloc>
c0013801:	83 c4 0c             	add    esp,0xc
c0013804:	89 c3                	mov    ebx,eax
c0013806:	55                   	push   ebp
c0013807:	56                   	push   esi
c0013808:	50                   	push   eax
c0013809:	e8 e0 fb ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001380e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013813:	83 c4 0c             	add    esp,0xc
c0013816:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001381a:	50                   	push   eax
c001381b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001381f:	50                   	push   eax
c0013820:	53                   	push   ebx
c0013821:	e8 d8 fe ff ff       	call   c00136fe <File::stat(unsigned long long*, bool*)>
c0013826:	83 c4 10             	add    esp,0x10
c0013829:	83 f8 02             	cmp    eax,0x2
c001382c:	74 04                	je     c0013832 <Fs::setcwd(Process*, char*)+0xd3>
c001382e:	85 c0                	test   eax,eax
c0013830:	74 1c                	je     c001384e <Fs::setcwd(Process*, char*)+0xef>
c0013832:	b8 01 00 00 00       	mov    eax,0x1
c0013837:	85 db                	test   ebx,ebx
c0013839:	74 54                	je     c001388f <Fs::setcwd(Process*, char*)+0x130>
c001383b:	83 ec 0c             	sub    esp,0xc
c001383e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013840:	53                   	push   ebx
c0013841:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013844:	83 c4 10             	add    esp,0x10
c0013847:	b8 01 00 00 00       	mov    eax,0x1
c001384c:	eb 41                	jmp    c001388f <Fs::setcwd(Process*, char*)+0x130>
c001384e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013853:	75 1c                	jne    c0013871 <Fs::setcwd(Process*, char*)+0x112>
c0013855:	b8 02 00 00 00       	mov    eax,0x2
c001385a:	85 db                	test   ebx,ebx
c001385c:	74 31                	je     c001388f <Fs::setcwd(Process*, char*)+0x130>
c001385e:	83 ec 0c             	sub    esp,0xc
c0013861:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013863:	53                   	push   ebx
c0013864:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013867:	83 c4 10             	add    esp,0x10
c001386a:	b8 02 00 00 00       	mov    eax,0x2
c001386f:	eb 1e                	jmp    c001388f <Fs::setcwd(Process*, char*)+0x130>
c0013871:	85 db                	test   ebx,ebx
c0013873:	74 0c                	je     c0013881 <Fs::setcwd(Process*, char*)+0x122>
c0013875:	83 ec 0c             	sub    esp,0xc
c0013878:	8b 03                	mov    eax,DWORD PTR [ebx]
c001387a:	53                   	push   ebx
c001387b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001387e:	83 c4 10             	add    esp,0x10
c0013881:	50                   	push   eax
c0013882:	50                   	push   eax
c0013883:	56                   	push   esi
c0013884:	57                   	push   edi
c0013885:	e8 9e cf fe ff       	call   c0000828 <strcpy>
c001388a:	83 c4 10             	add    esp,0x10
c001388d:	31 c0                	xor    eax,eax
c001388f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013895:	5b                   	pop    ebx
c0013896:	5e                   	pop    esi
c0013897:	5f                   	pop    edi
c0013898:	5d                   	pop    ebp
c0013899:	c3                   	ret    

c001389a <Directory::Directory(char const*, Process*)>:
c001389a:	83 ec 0c             	sub    esp,0xc
c001389d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a1:	83 ec 08             	sub    esp,0x8
c00138a4:	6a 00                	push   0x0
c00138a6:	50                   	push   eax
c00138a7:	e8 9a dd ff ff       	call   c0011646 <UnixFile::UnixFile(int)>
c00138ac:	83 c4 10             	add    esp,0x10
c00138af:	ba e0 b6 02 c0       	mov    edx,0xc002b6e0
c00138b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b8:	89 10                	mov    DWORD PTR [eax],edx
c00138ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138be:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00138c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c8:	83 c0 0d             	add    eax,0xd
c00138cb:	83 ec 04             	sub    esp,0x4
c00138ce:	52                   	push   edx
c00138cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138d3:	50                   	push   eax
c00138d4:	e8 6b f9 ff ff       	call   c0013244 <Fs::standardiseFiles(char*, char const*, char const*)>
c00138d9:	83 c4 10             	add    esp,0x10
c00138dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00138e3:	8d 50 bf             	lea    edx,[eax-0x41]
c00138e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ea:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00138f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138f8:	90                   	nop
c00138f9:	83 c4 0c             	add    esp,0xc
c00138fc:	c3                   	ret    
c00138fd:	90                   	nop

c00138fe <Directory::open()>:
c00138fe:	53                   	push   ebx
c00138ff:	b8 0b 00 00 00       	mov    eax,0xb
c0013904:	83 ec 08             	sub    esp,0x8
c0013907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001390b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013912:	80 fa 19             	cmp    dl,0x19
c0013915:	77 3d                	ja     c0013954 <Directory::open()+0x56>
c0013917:	8b 14 95 20 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd08e0]
c001391e:	85 d2                	test   edx,edx
c0013920:	74 32                	je     c0013954 <Directory::open()+0x56>
c0013922:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013928:	85 d2                	test   edx,edx
c001392a:	74 28                	je     c0013954 <Directory::open()+0x56>
c001392c:	b8 06 00 00 00       	mov    eax,0x6
c0013931:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013935:	75 1d                	jne    c0013954 <Directory::open()+0x56>
c0013937:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001393d:	50                   	push   eax
c001393e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013940:	51                   	push   ecx
c0013941:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013944:	51                   	push   ecx
c0013945:	52                   	push   edx
c0013946:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013949:	83 c4 10             	add    esp,0x10
c001394c:	85 c0                	test   eax,eax
c001394e:	75 04                	jne    c0013954 <Directory::open()+0x56>
c0013950:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013954:	83 c4 08             	add    esp,0x8
c0013957:	5b                   	pop    ebx
c0013958:	c3                   	ret    
c0013959:	90                   	nop

c001395a <Directory::close()>:
c001395a:	53                   	push   ebx
c001395b:	b8 0b 00 00 00       	mov    eax,0xb
c0013960:	83 ec 08             	sub    esp,0x8
c0013963:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013967:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001396e:	80 fa 19             	cmp    dl,0x19
c0013971:	77 41                	ja     c00139b4 <Directory::close()+0x5a>
c0013973:	8b 1c 95 20 f7 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd08e0]
c001397a:	85 db                	test   ebx,ebx
c001397c:	74 36                	je     c00139b4 <Directory::close()+0x5a>
c001397e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013985:	74 2d                	je     c00139b4 <Directory::close()+0x5a>
c0013987:	b8 05 00 00 00       	mov    eax,0x5
c001398c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013990:	74 22                	je     c00139b4 <Directory::close()+0x5a>
c0013992:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013996:	8b 04 95 20 f7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd08e0]
c001399d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00139a3:	53                   	push   ebx
c00139a4:	53                   	push   ebx
c00139a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00139a7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139ad:	50                   	push   eax
c00139ae:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	83 c4 08             	add    esp,0x8
c00139b7:	5b                   	pop    ebx
c00139b8:	c3                   	ret    
c00139b9:	90                   	nop

c00139ba <Directory::unlink()>:
c00139ba:	83 ec 0c             	sub    esp,0xc
c00139bd:	b8 0b 00 00 00       	mov    eax,0xb
c00139c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139cd:	80 f9 19             	cmp    cl,0x19
c00139d0:	77 2f                	ja     c0013a01 <Directory::unlink()+0x47>
c00139d2:	8b 0c 8d 20 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd08e0]
c00139d9:	85 c9                	test   ecx,ecx
c00139db:	74 24                	je     c0013a01 <Directory::unlink()+0x47>
c00139dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139e3:	85 c9                	test   ecx,ecx
c00139e5:	74 1a                	je     c0013a01 <Directory::unlink()+0x47>
c00139e7:	b8 06 00 00 00       	mov    eax,0x6
c00139ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139f0:	75 0f                	jne    c0013a01 <Directory::unlink()+0x47>
c00139f2:	83 c2 0d             	add    edx,0xd
c00139f5:	50                   	push   eax
c00139f6:	50                   	push   eax
c00139f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139f9:	52                   	push   edx
c00139fa:	51                   	push   ecx
c00139fb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139fe:	83 c4 10             	add    esp,0x10
c0013a01:	83 c4 0c             	add    esp,0xc
c0013a04:	c3                   	ret    
c0013a05:	90                   	nop

c0013a06 <Directory::rename(char const*)>:
c0013a06:	83 ec 0c             	sub    esp,0xc
c0013a09:	b8 0b 00 00 00       	mov    eax,0xb
c0013a0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a12:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a19:	80 f9 19             	cmp    cl,0x19
c0013a1c:	77 32                	ja     c0013a50 <Directory::rename(char const*)+0x4a>
c0013a1e:	8b 0c 8d 20 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd08e0]
c0013a25:	85 c9                	test   ecx,ecx
c0013a27:	74 27                	je     c0013a50 <Directory::rename(char const*)+0x4a>
c0013a29:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a2f:	85 c9                	test   ecx,ecx
c0013a31:	74 1d                	je     c0013a50 <Directory::rename(char const*)+0x4a>
c0013a33:	b8 06 00 00 00       	mov    eax,0x6
c0013a38:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a3c:	75 12                	jne    c0013a50 <Directory::rename(char const*)+0x4a>
c0013a3e:	83 c2 0d             	add    edx,0xd
c0013a41:	50                   	push   eax
c0013a42:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a48:	52                   	push   edx
c0013a49:	51                   	push   ecx
c0013a4a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a4d:	83 c4 10             	add    esp,0x10
c0013a50:	83 c4 0c             	add    esp,0xc
c0013a53:	c3                   	ret    

c0013a54 <Directory::exists()>:
c0013a54:	83 ec 0c             	sub    esp,0xc
c0013a57:	31 c0                	xor    eax,eax
c0013a59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a5d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a64:	80 f9 19             	cmp    cl,0x19
c0013a67:	77 24                	ja     c0013a8d <Directory::exists()+0x39>
c0013a69:	8b 0c 8d 20 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd08e0]
c0013a70:	85 c9                	test   ecx,ecx
c0013a72:	74 19                	je     c0013a8d <Directory::exists()+0x39>
c0013a74:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a7a:	85 c9                	test   ecx,ecx
c0013a7c:	74 0f                	je     c0013a8d <Directory::exists()+0x39>
c0013a7e:	83 c2 0d             	add    edx,0xd
c0013a81:	50                   	push   eax
c0013a82:	50                   	push   eax
c0013a83:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a85:	52                   	push   edx
c0013a86:	51                   	push   ecx
c0013a87:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	83 c4 0c             	add    esp,0xc
c0013a90:	c3                   	ret    
c0013a91:	90                   	nop

c0013a92 <Directory::read(dirent*)>:
c0013a92:	83 ec 1c             	sub    esp,0x1c
c0013a95:	b8 0b 00 00 00       	mov    eax,0xb
c0013a9a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a9e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013aa5:	80 fa 19             	cmp    dl,0x19
c0013aa8:	77 30                	ja     c0013ada <Directory::read(dirent*)+0x48>
c0013aaa:	8b 14 95 20 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd08e0]
c0013ab1:	85 d2                	test   edx,edx
c0013ab3:	74 25                	je     c0013ada <Directory::read(dirent*)+0x48>
c0013ab5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013abc:	74 1c                	je     c0013ada <Directory::read(dirent*)+0x48>
c0013abe:	83 ec 0c             	sub    esp,0xc
c0013ac1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ac3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013ac7:	52                   	push   edx
c0013ac8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013acc:	6a 00                	push   0x0
c0013ace:	68 10 01 00 00       	push   0x110
c0013ad3:	51                   	push   ecx
c0013ad4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ad7:	83 c4 20             	add    esp,0x20
c0013ada:	83 c4 1c             	add    esp,0x1c
c0013add:	c3                   	ret    

c0013ade <Directory::create()>:
c0013ade:	83 ec 0c             	sub    esp,0xc
c0013ae1:	b8 0b 00 00 00       	mov    eax,0xb
c0013ae6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013af1:	80 f9 19             	cmp    cl,0x19
c0013af4:	77 2f                	ja     c0013b25 <Directory::create()+0x47>
c0013af6:	8b 0c 8d 20 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd08e0]
c0013afd:	85 c9                	test   ecx,ecx
c0013aff:	74 24                	je     c0013b25 <Directory::create()+0x47>
c0013b01:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b07:	85 c9                	test   ecx,ecx
c0013b09:	74 1a                	je     c0013b25 <Directory::create()+0x47>
c0013b0b:	b8 06 00 00 00       	mov    eax,0x6
c0013b10:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b14:	75 0f                	jne    c0013b25 <Directory::create()+0x47>
c0013b16:	83 c2 0d             	add    edx,0xd
c0013b19:	50                   	push   eax
c0013b1a:	50                   	push   eax
c0013b1b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b1d:	52                   	push   edx
c0013b1e:	51                   	push   ecx
c0013b1f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b22:	83 c4 10             	add    esp,0x10
c0013b25:	83 c4 0c             	add    esp,0xc
c0013b28:	c3                   	ret    
c0013b29:	90                   	nop

c0013b2a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b2a:	b8 0a 00 00 00       	mov    eax,0xa
c0013b2f:	c3                   	ret    

c0013b30 <Bus::Bus(char const*)>:
c0013b30:	83 ec 0c             	sub    esp,0xc
c0013b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b37:	83 ec 08             	sub    esp,0x8
c0013b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b3e:	50                   	push   eax
c0013b3f:	e8 66 09 00 00       	call   c00144aa <Device::Device(char const*)>
c0013b44:	83 c4 10             	add    esp,0x10
c0013b47:	ba fc b6 02 c0       	mov    edx,0xc002b6fc
c0013b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b50:	89 10                	mov    DWORD PTR [eax],edx
c0013b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b56:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b60:	90                   	nop
c0013b61:	83 c4 0c             	add    esp,0xc
c0013b64:	c3                   	ret    
c0013b65:	90                   	nop

c0013b66 <Bus::~Bus()>:
c0013b66:	83 ec 0c             	sub    esp,0xc
c0013b69:	ba fc b6 02 c0       	mov    edx,0xc002b6fc
c0013b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b72:	89 10                	mov    DWORD PTR [eax],edx
c0013b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b78:	83 ec 0c             	sub    esp,0xc
c0013b7b:	50                   	push   eax
c0013b7c:	e8 15 06 00 00       	call   c0014196 <Device::~Device()>
c0013b81:	83 c4 10             	add    esp,0x10
c0013b84:	90                   	nop
c0013b85:	83 c4 0c             	add    esp,0xc
c0013b88:	c3                   	ret    
c0013b89:	90                   	nop

c0013b8a <Bus::~Bus()>:
c0013b8a:	83 ec 0c             	sub    esp,0xc
c0013b8d:	83 ec 0c             	sub    esp,0xc
c0013b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b94:	e8 cd ff ff ff       	call   c0013b66 <Bus::~Bus()>
c0013b99:	83 c4 10             	add    esp,0x10
c0013b9c:	83 ec 08             	sub    esp,0x8
c0013b9f:	68 58 01 00 00       	push   0x158
c0013ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba8:	e8 02 f2 ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0013bad:	83 c4 10             	add    esp,0x10
c0013bb0:	83 c4 0c             	add    esp,0xc
c0013bb3:	c3                   	ret    

c0013bb4 <Buzzer::Buzzer(char const*)>:
c0013bb4:	83 ec 0c             	sub    esp,0xc
c0013bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bbb:	83 ec 08             	sub    esp,0x8
c0013bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bc2:	50                   	push   eax
c0013bc3:	e8 e2 08 00 00       	call   c00144aa <Device::Device(char const*)>
c0013bc8:	83 c4 10             	add    esp,0x10
c0013bcb:	ba 28 b7 02 c0       	mov    edx,0xc002b728
c0013bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd4:	89 10                	mov    DWORD PTR [eax],edx
c0013bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bda:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013be8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013bf2:	90                   	nop
c0013bf3:	83 c4 0c             	add    esp,0xc
c0013bf6:	c3                   	ret    
c0013bf7:	90                   	nop

c0013bf8 <Buzzer::~Buzzer()>:
c0013bf8:	83 ec 0c             	sub    esp,0xc
c0013bfb:	ba 28 b7 02 c0       	mov    edx,0xc002b728
c0013c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c04:	89 10                	mov    DWORD PTR [eax],edx
c0013c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c0a:	83 ec 0c             	sub    esp,0xc
c0013c0d:	50                   	push   eax
c0013c0e:	e8 83 05 00 00       	call   c0014196 <Device::~Device()>
c0013c13:	83 c4 10             	add    esp,0x10
c0013c16:	90                   	nop
c0013c17:	83 c4 0c             	add    esp,0xc
c0013c1a:	c3                   	ret    
c0013c1b:	90                   	nop

c0013c1c <Buzzer::~Buzzer()>:
c0013c1c:	83 ec 0c             	sub    esp,0xc
c0013c1f:	83 ec 0c             	sub    esp,0xc
c0013c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c26:	e8 cd ff ff ff       	call   c0013bf8 <Buzzer::~Buzzer()>
c0013c2b:	83 c4 10             	add    esp,0x10
c0013c2e:	83 ec 08             	sub    esp,0x8
c0013c31:	68 5c 01 00 00       	push   0x15c
c0013c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c3a:	e8 70 f1 ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0013c3f:	83 c4 10             	add    esp,0x10
c0013c42:	83 c4 0c             	add    esp,0xc
c0013c45:	c3                   	ret    

c0013c46 <Buzzer::stop()>:
c0013c46:	83 ec 14             	sub    esp,0x14
c0013c49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c4d:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c4f:	6a 00                	push   0x0
c0013c51:	50                   	push   eax
c0013c52:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c55:	83 c4 1c             	add    esp,0x1c
c0013c58:	c3                   	ret    

c0013c59 <beepThread(void*)>:
c0013c59:	53                   	push   ebx
c0013c5a:	83 ec 08             	sub    esp,0x8
c0013c5d:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0013c62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c66:	48                   	dec    eax
c0013c67:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c0013c6c:	75 01                	jne    c0013c6f <beepThread(void*)+0x16>
c0013c6e:	fb                   	sti    
c0013c6f:	50                   	push   eax
c0013c70:	50                   	push   eax
c0013c71:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c76:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c7c:	52                   	push   edx
c0013c7d:	50                   	push   eax
c0013c7e:	e8 64 ad 00 00       	call   c001e9e7 <nanoSleep(unsigned long long)>
c0013c83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c86:	e8 bb ff ff ff       	call   c0013c46 <Buzzer::stop()>
c0013c8b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c93:	83 c4 18             	add    esp,0x18
c0013c96:	5b                   	pop    ebx
c0013c97:	e9 47 ac 00 00       	jmp    c001e8e3 <blockTask(TaskState)>

c0013c9c <Buzzer::beep(int, int, bool)>:
c0013c9c:	57                   	push   edi
c0013c9d:	56                   	push   esi
c0013c9e:	53                   	push   ebx
c0013c9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ca3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ca7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cab:	52                   	push   edx
c0013cac:	52                   	push   edx
c0013cad:	8b 06                	mov    eax,DWORD PTR [esi]
c0013caf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cb3:	56                   	push   esi
c0013cb4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013cb7:	83 c4 10             	add    esp,0x10
c0013cba:	89 f8                	mov    eax,edi
c0013cbc:	84 c0                	test   al,al
c0013cbe:	74 1f                	je     c0013cdf <Buzzer::beep(int, int, bool)+0x43>
c0013cc0:	50                   	push   eax
c0013cc1:	50                   	push   eax
c0013cc2:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013cc8:	99                   	cdq    
c0013cc9:	52                   	push   edx
c0013cca:	50                   	push   eax
c0013ccb:	e8 17 ad 00 00       	call   c001e9e7 <nanoSleep(unsigned long long)>
c0013cd0:	83 c4 10             	add    esp,0x10
c0013cd3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013cd7:	5b                   	pop    ebx
c0013cd8:	5e                   	pop    esi
c0013cd9:	5f                   	pop    edi
c0013cda:	e9 67 ff ff ff       	jmp    c0013c46 <Buzzer::stop()>
c0013cdf:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013ce5:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0013cea:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013cf2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013cf6:	c7 44 24 14 59 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c59
c0013cfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d02:	5b                   	pop    ebx
c0013d03:	5e                   	pop    esi
c0013d04:	5f                   	pop    edi
c0013d05:	e9 96 a7 00 00       	jmp    c001e4a0 <Process::createThread(void (*)(void*), void*, int)>

c0013d0a <User::loadClockSettings(int)>:
c0013d0a:	53                   	push   ebx
c0013d0b:	83 ec 14             	sub    esp,0x14
c0013d0e:	68 14 01 00 00       	push   0x114
c0013d13:	e8 a8 bb ff ff       	call   c000f8c0 <malloc>
c0013d18:	83 c4 0c             	add    esp,0xc
c0013d1b:	89 c3                	mov    ebx,eax
c0013d1d:	ff 35 70 26 03 c0    	push   DWORD PTR ds:0xc0032670
c0013d23:	68 50 b7 02 c0       	push   0xc002b750
c0013d28:	50                   	push   eax
c0013d29:	e8 c0 f6 ff ff       	call   c00133ee <File::File(char const*, Process*)>
c0013d2e:	58                   	pop    eax
c0013d2f:	5a                   	pop    edx
c0013d30:	6a 01                	push   0x1
c0013d32:	53                   	push   ebx
c0013d33:	e8 1a f7 ff ff       	call   c0013452 <File::open(FileOpenMode)>
c0013d38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d3b:	e8 70 f7 ff ff       	call   c00134b0 <File::close()>
c0013d40:	83 c4 10             	add    esp,0x10
c0013d43:	85 db                	test   ebx,ebx
c0013d45:	74 0f                	je     c0013d56 <User::loadClockSettings(int)+0x4c>
c0013d47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d49:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d50:	83 c4 08             	add    esp,0x8
c0013d53:	5b                   	pop    ebx
c0013d54:	ff e0                	jmp    eax
c0013d56:	83 c4 08             	add    esp,0x8
c0013d59:	5b                   	pop    ebx
c0013d5a:	c3                   	ret    
c0013d5b:	90                   	nop

c0013d5c <Clock::Clock(char const*)>:
c0013d5c:	83 ec 0c             	sub    esp,0xc
c0013d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d63:	83 ec 08             	sub    esp,0x8
c0013d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d6a:	50                   	push   eax
c0013d6b:	e8 3a 07 00 00       	call   c00144aa <Device::Device(char const*)>
c0013d70:	83 c4 10             	add    esp,0x10
c0013d73:	ba 78 b7 02 c0       	mov    edx,0xc002b778
c0013d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d7c:	89 10                	mov    DWORD PTR [eax],edx
c0013d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d82:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d8c:	90                   	nop
c0013d8d:	83 c4 0c             	add    esp,0xc
c0013d90:	c3                   	ret    
c0013d91:	90                   	nop

c0013d92 <Clock::~Clock()>:
c0013d92:	83 ec 0c             	sub    esp,0xc
c0013d95:	ba 78 b7 02 c0       	mov    edx,0xc002b778
c0013d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d9e:	89 10                	mov    DWORD PTR [eax],edx
c0013da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da4:	83 ec 0c             	sub    esp,0xc
c0013da7:	50                   	push   eax
c0013da8:	e8 e9 03 00 00       	call   c0014196 <Device::~Device()>
c0013dad:	83 c4 10             	add    esp,0x10
c0013db0:	90                   	nop
c0013db1:	83 c4 0c             	add    esp,0xc
c0013db4:	c3                   	ret    
c0013db5:	90                   	nop

c0013db6 <Clock::~Clock()>:
c0013db6:	83 ec 0c             	sub    esp,0xc
c0013db9:	83 ec 0c             	sub    esp,0xc
c0013dbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dc0:	e8 cd ff ff ff       	call   c0013d92 <Clock::~Clock()>
c0013dc5:	83 c4 10             	add    esp,0x10
c0013dc8:	83 ec 08             	sub    esp,0x8
c0013dcb:	68 58 01 00 00       	push   0x158
c0013dd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dd4:	e8 d6 ef ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0013dd9:	83 c4 10             	add    esp,0x10
c0013ddc:	83 c4 0c             	add    esp,0xc
c0013ddf:	c3                   	ret    

c0013de0 <Clock::timeInSecondsLocal()>:
c0013de0:	53                   	push   ebx
c0013de1:	83 ec 14             	sub    esp,0x14
c0013de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013de8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013dea:	50                   	push   eax
c0013deb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013dee:	0f b6 0d 9c f2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f29c
c0013df5:	03 0d a0 f2 02 c0    	add    ecx,DWORD PTR ds:0xc002f2a0
c0013dfb:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e01:	89 cb                	mov    ebx,ecx
c0013e03:	c1 fb 1f             	sar    ebx,0x1f
c0013e06:	01 c8                	add    eax,ecx
c0013e08:	11 da                	adc    edx,ebx
c0013e0a:	83 c4 10             	add    esp,0x10
c0013e0d:	31 c9                	xor    ecx,ecx
c0013e0f:	80 3d 9d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f29d,0x0
c0013e16:	74 05                	je     c0013e1d <Clock::timeInSecondsLocal()+0x3d>
c0013e18:	b9 08 07 00 00       	mov    ecx,0x708
c0013e1d:	31 db                	xor    ebx,ebx
c0013e1f:	01 c8                	add    eax,ecx
c0013e21:	11 da                	adc    edx,ebx
c0013e23:	83 c4 08             	add    esp,0x8
c0013e26:	5b                   	pop    ebx
c0013e27:	c3                   	ret    

c0013e28 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e28:	57                   	push   edi
c0013e29:	56                   	push   esi
c0013e2a:	53                   	push   ebx
c0013e2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e33:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e35:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e39:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e3c:	0f b6 05 9c f2 02 c0 	movzx  eax,BYTE PTR ds:0xc002f29c
c0013e43:	03 05 a0 f2 02 c0    	add    eax,DWORD PTR ds:0xc002f2a0
c0013e49:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e4f:	99                   	cdq    
c0013e50:	29 c6                	sub    esi,eax
c0013e52:	19 d7                	sbb    edi,edx
c0013e54:	89 f0                	mov    eax,esi
c0013e56:	89 fa                	mov    edx,edi
c0013e58:	31 f6                	xor    esi,esi
c0013e5a:	80 3d 9d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f29d,0x0
c0013e61:	74 05                	je     c0013e68 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e63:	be 08 07 00 00       	mov    esi,0x708
c0013e68:	31 ff                	xor    edi,edi
c0013e6a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e6e:	29 f0                	sub    eax,esi
c0013e70:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e74:	19 fa                	sbb    edx,edi
c0013e76:	89 d8                	mov    eax,ebx
c0013e78:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e7c:	5b                   	pop    ebx
c0013e7d:	5e                   	pop    esi
c0013e7e:	5f                   	pop    edi
c0013e7f:	ff e0                	jmp    eax

c0013e81 <datetimeToSeconds(datetime_t)>:
c0013e81:	55                   	push   ebp
c0013e82:	57                   	push   edi
c0013e83:	56                   	push   esi
c0013e84:	53                   	push   ebx
c0013e85:	83 ec 14             	sub    esp,0x14
c0013e88:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e8c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e90:	89 d3                	mov    ebx,edx
c0013e92:	0f b6 c6             	movzx  eax,dh
c0013e95:	c1 eb 10             	shr    ebx,0x10
c0013e98:	48                   	dec    eax
c0013e99:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e9e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013ea2:	0f b6 f5             	movzx  esi,ch
c0013ea5:	89 cf                	mov    edi,ecx
c0013ea7:	6b f6 3c             	imul   esi,esi,0x3c
c0013eaa:	c1 ef 10             	shr    edi,0x10
c0013ead:	0f b6 c9             	movzx  ecx,cl
c0013eb0:	89 f8                	mov    eax,edi
c0013eb2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013eb8:	0f b6 f8             	movzx  edi,al
c0013ebb:	0f b6 d2             	movzx  edx,dl
c0013ebe:	01 fe                	add    esi,edi
c0013ec0:	01 f1                	add    ecx,esi
c0013ec2:	0f b7 f3             	movzx  esi,bx
c0013ec5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013ec9:	c1 f9 1f             	sar    ecx,0x1f
c0013ecc:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013ed1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ed5:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013eda:	8b 0c 8d c0 b7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4840]
c0013ee1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013ee5:	76 29                	jbe    c0013f10 <datetimeToSeconds(datetime_t)+0x8f>
c0013ee7:	f6 c3 03             	test   bl,0x3
c0013eea:	75 24                	jne    c0013f10 <datetimeToSeconds(datetime_t)+0x8f>
c0013eec:	31 d2                	xor    edx,edx
c0013eee:	bf 64 00 00 00       	mov    edi,0x64
c0013ef3:	89 d8                	mov    eax,ebx
c0013ef5:	66 f7 f7             	div    di
c0013ef8:	66 85 d2             	test   dx,dx
c0013efb:	75 12                	jne    c0013f0f <datetimeToSeconds(datetime_t)+0x8e>
c0013efd:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f03:	bf 90 01 00 00       	mov    edi,0x190
c0013f08:	99                   	cdq    
c0013f09:	f7 ff                	idiv   edi
c0013f0b:	85 d2                	test   edx,edx
c0013f0d:	75 01                	jne    c0013f10 <datetimeToSeconds(datetime_t)+0x8f>
c0013f0f:	41                   	inc    ecx
c0013f10:	66 83 fb 46          	cmp    bx,0x46
c0013f14:	76 45                	jbe    c0013f5b <datetimeToSeconds(datetime_t)+0xda>
c0013f16:	bb 46 00 00 00       	mov    ebx,0x46
c0013f1b:	bf 64 00 00 00       	mov    edi,0x64
c0013f20:	bd 90 01 00 00       	mov    ebp,0x190
c0013f25:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f2a:	f6 c3 03             	test   bl,0x3
c0013f2d:	75 23                	jne    c0013f52 <datetimeToSeconds(datetime_t)+0xd1>
c0013f2f:	89 d8                	mov    eax,ebx
c0013f31:	99                   	cdq    
c0013f32:	f7 ff                	idiv   edi
c0013f34:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f39:	85 d2                	test   edx,edx
c0013f3b:	75 15                	jne    c0013f52 <datetimeToSeconds(datetime_t)+0xd1>
c0013f3d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f43:	99                   	cdq    
c0013f44:	f7 fd                	idiv   ebp
c0013f46:	83 fa 01             	cmp    edx,0x1
c0013f49:	19 c0                	sbb    eax,eax
c0013f4b:	f7 d0                	not    eax
c0013f4d:	05 6e 01 00 00       	add    eax,0x16e
c0013f52:	01 c1                	add    ecx,eax
c0013f54:	43                   	inc    ebx
c0013f55:	39 f3                	cmp    ebx,esi
c0013f57:	7c cc                	jl     c0013f25 <datetimeToSeconds(datetime_t)+0xa4>
c0013f59:	eb 35                	jmp    c0013f90 <datetimeToSeconds(datetime_t)+0x10f>
c0013f5b:	74 33                	je     c0013f90 <datetimeToSeconds(datetime_t)+0x10f>
c0013f5d:	b8 45 00 00 00       	mov    eax,0x45
c0013f62:	89 c2                	mov    edx,eax
c0013f64:	83 e2 03             	and    edx,0x3
c0013f67:	39 f0                	cmp    eax,esi
c0013f69:	7e 0f                	jle    c0013f7a <datetimeToSeconds(datetime_t)+0xf9>
c0013f6b:	83 fa 01             	cmp    edx,0x1
c0013f6e:	19 d2                	sbb    edx,edx
c0013f70:	48                   	dec    eax
c0013f71:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f78:	eb e8                	jmp    c0013f62 <datetimeToSeconds(datetime_t)+0xe1>
c0013f7a:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f7f:	85 d2                	test   edx,edx
c0013f81:	75 0b                	jne    c0013f8e <datetimeToSeconds(datetime_t)+0x10d>
c0013f83:	66 83 fb 01          	cmp    bx,0x1
c0013f87:	19 c0                	sbb    eax,eax
c0013f89:	05 6e 01 00 00       	add    eax,0x16e
c0013f8e:	29 c1                	sub    ecx,eax
c0013f90:	b8 80 51 01 00       	mov    eax,0x15180
c0013f95:	f7 e9                	imul   ecx
c0013f97:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f9b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f9f:	83 c4 14             	add    esp,0x14
c0013fa2:	5b                   	pop    ebx
c0013fa3:	5e                   	pop    esi
c0013fa4:	5f                   	pop    edi
c0013fa5:	5d                   	pop    ebp
c0013fa6:	c3                   	ret    
c0013fa7:	90                   	nop

c0013fa8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013fa8:	57                   	push   edi
c0013fa9:	56                   	push   esi
c0013faa:	53                   	push   ebx
c0013fab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013faf:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fb1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013fb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fbc:	e8 c0 fe ff ff       	call   c0013e81 <datetimeToSeconds(datetime_t)>
c0013fc1:	59                   	pop    ecx
c0013fc2:	0f b6 0d 9c f2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f29c
c0013fc9:	5b                   	pop    ebx
c0013fca:	03 0d a0 f2 02 c0    	add    ecx,DWORD PTR ds:0xc002f2a0
c0013fd0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013fd6:	89 cb                	mov    ebx,ecx
c0013fd8:	c1 fb 1f             	sar    ebx,0x1f
c0013fdb:	29 c8                	sub    eax,ecx
c0013fdd:	19 da                	sbb    edx,ebx
c0013fdf:	31 c9                	xor    ecx,ecx
c0013fe1:	80 3d 9d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f29d,0x0
c0013fe8:	74 05                	je     c0013fef <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013fea:	b9 08 07 00 00       	mov    ecx,0x708
c0013fef:	31 db                	xor    ebx,ebx
c0013ff1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013ff5:	29 c8                	sub    eax,ecx
c0013ff7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ffb:	19 da                	sbb    edx,ebx
c0013ffd:	89 f8                	mov    eax,edi
c0013fff:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014003:	5b                   	pop    ebx
c0014004:	5e                   	pop    esi
c0014005:	5f                   	pop    edi
c0014006:	ff e0                	jmp    eax

c0014008 <secondsToDatetime(unsigned long long)>:
c0014008:	55                   	push   ebp
c0014009:	57                   	push   edi
c001400a:	56                   	push   esi
c001400b:	53                   	push   ebx
c001400c:	83 ec 1c             	sub    esp,0x1c
c001400f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014013:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014017:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001401b:	6a 00                	push   0x0
c001401d:	68 80 51 01 00       	push   0x15180
c0014022:	55                   	push   ebp
c0014023:	57                   	push   edi
c0014024:	e8 5b 34 01 00       	call   c0027484 <__udivdi3>
c0014029:	83 c4 10             	add    esp,0x10
c001402c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014032:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014036:	6a 00                	push   0x0
c0014038:	68 80 51 01 00       	push   0x15180
c001403d:	55                   	push   ebp
c001403e:	57                   	push   edi
c001403f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014044:	e8 3b 35 01 00       	call   c0027584 <__umoddi3>
c0014049:	83 c4 10             	add    esp,0x10
c001404c:	99                   	cdq    
c001404d:	f7 ff                	idiv   edi
c001404f:	bf 3c 00 00 00       	mov    edi,0x3c
c0014054:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014057:	89 d0                	mov    eax,edx
c0014059:	99                   	cdq    
c001405a:	f7 ff                	idiv   edi
c001405c:	85 db                	test   ebx,ebx
c001405e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014061:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014064:	79 11                	jns    c0014077 <secondsToDatetime(unsigned long long)+0x6f>
c0014066:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001406a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014070:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014075:	eb 07                	jmp    c001407e <secondsToDatetime(unsigned long long)+0x76>
c0014077:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001407c:	89 d8                	mov    eax,ebx
c001407e:	bf b4 05 00 00       	mov    edi,0x5b4
c0014083:	99                   	cdq    
c0014084:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014089:	f7 f9                	idiv   ecx
c001408b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014090:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014094:	31 d2                	xor    edx,edx
c0014096:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001409e:	01 c3                	add    ebx,eax
c00140a0:	89 d8                	mov    eax,ebx
c00140a2:	f7 f1                	div    ecx
c00140a4:	31 d2                	xor    edx,edx
c00140a6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00140a9:	89 d8                	mov    eax,ebx
c00140ab:	f7 f7                	div    edi
c00140ad:	31 d2                	xor    edx,edx
c00140af:	29 c1                	sub    ecx,eax
c00140b1:	89 d8                	mov    eax,ebx
c00140b3:	f7 f5                	div    ebp
c00140b5:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140ba:	29 c1                	sub    ecx,eax
c00140bc:	31 d2                	xor    edx,edx
c00140be:	89 c8                	mov    eax,ecx
c00140c0:	f7 f5                	div    ebp
c00140c2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00140c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140cb:	31 d2                	xor    edx,edx
c00140cd:	89 c8                	mov    eax,ecx
c00140cf:	f7 f5                	div    ebp
c00140d1:	31 d2                	xor    edx,edx
c00140d3:	01 c3                	add    ebx,eax
c00140d5:	89 c8                	mov    eax,ecx
c00140d7:	f7 f7                	div    edi
c00140d9:	bf 99 00 00 00       	mov    edi,0x99
c00140de:	29 c3                	sub    ebx,eax
c00140e0:	31 d2                	xor    edx,edx
c00140e2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00140ea:	29 c3                	sub    ebx,eax
c00140ec:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140ef:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140f2:	bb 05 00 00 00       	mov    ebx,0x5
c00140f7:	83 c1 02             	add    ecx,0x2
c00140fa:	89 c8                	mov    eax,ecx
c00140fc:	f7 f7                	div    edi
c00140fe:	31 d2                	xor    edx,edx
c0014100:	89 c7                	mov    edi,eax
c0014102:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014108:	83 c0 02             	add    eax,0x2
c001410b:	f7 f3                	div    ebx
c001410d:	89 eb                	mov    ebx,ebp
c001410f:	29 c3                	sub    ebx,eax
c0014111:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014117:	88 1e                	mov    BYTE PTR [esi],bl
c0014119:	19 c0                	sbb    eax,eax
c001411b:	31 d2                	xor    edx,edx
c001411d:	83 e0 0c             	and    eax,0xc
c0014120:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014124:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001412c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014130:	83 f9 01             	cmp    ecx,0x1
c0014133:	0f 96 c2             	setbe  dl
c0014136:	41                   	inc    ecx
c0014137:	01 d0                	add    eax,edx
c0014139:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001413c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014140:	83 c4 1c             	add    esp,0x1c
c0014143:	89 f0                	mov    eax,esi
c0014145:	5b                   	pop    ebx
c0014146:	5e                   	pop    esi
c0014147:	5f                   	pop    edi
c0014148:	5d                   	pop    ebp
c0014149:	c2 04 00             	ret    0x4

c001414c <Clock::timeInDatetimeLocal()>:
c001414c:	53                   	push   ebx
c001414d:	83 ec 14             	sub    esp,0x14
c0014150:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014154:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014158:	e8 83 fc ff ff       	call   c0013de0 <Clock::timeInSecondsLocal()>
c001415d:	83 c4 0c             	add    esp,0xc
c0014160:	52                   	push   edx
c0014161:	50                   	push   eax
c0014162:	53                   	push   ebx
c0014163:	e8 a0 fe ff ff       	call   c0014008 <secondsToDatetime(unsigned long long)>
c0014168:	89 d8                	mov    eax,ebx
c001416a:	83 c4 14             	add    esp,0x14
c001416d:	5b                   	pop    ebx
c001416e:	c2 04 00             	ret    0x4
c0014171:	90                   	nop

c0014172 <Device::hibernate()>:
c0014172:	c3                   	ret    
c0014173:	90                   	nop

c0014174 <Device::wake()>:
c0014174:	c3                   	ret    
c0014175:	90                   	nop

c0014176 <Device::detect()>:
c0014176:	c3                   	ret    
c0014177:	90                   	nop

c0014178 <Device::disableLegacy()>:
c0014178:	c3                   	ret    
c0014179:	90                   	nop

c001417a <Device::powerSaving(PowerSavingLevel)>:
c001417a:	c3                   	ret    
c001417b:	90                   	nop

c001417c <DriverlessDevice::close(int, int, void*)>:
c001417c:	31 c0                	xor    eax,eax
c001417e:	c3                   	ret    
c001417f:	90                   	nop

c0014180 <DriverlessDevice::detect()>:
c0014180:	c3                   	ret    
c0014181:	90                   	nop

c0014182 <DriverlessDevice::open(int, int, void*)>:
c0014182:	83 ec 18             	sub    esp,0x18
c0014185:	68 f0 b7 02 c0       	push   0xc002b7f0
c001418a:	e8 68 67 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c001418f:	83 c8 ff             	or     eax,0xffffffff
c0014192:	83 c4 1c             	add    esp,0x1c
c0014195:	c3                   	ret    

c0014196 <Device::~Device()>:
c0014196:	ba 18 b8 02 c0       	mov    edx,0xc002b818
c001419b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001419f:	89 10                	mov    DWORD PTR [eax],edx
c00141a1:	90                   	nop
c00141a2:	c3                   	ret    
c00141a3:	90                   	nop

c00141a4 <Device::~Device()>:
c00141a4:	83 ec 0c             	sub    esp,0xc
c00141a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141ab:	e8 e6 ff ff ff       	call   c0014196 <Device::~Device()>
c00141b0:	83 c4 04             	add    esp,0x4
c00141b3:	83 ec 08             	sub    esp,0x8
c00141b6:	68 58 01 00 00       	push   0x158
c00141bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141bf:	e8 eb eb ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c00141c4:	83 c4 10             	add    esp,0x10
c00141c7:	83 c4 0c             	add    esp,0xc
c00141ca:	c3                   	ret    
c00141cb:	90                   	nop

c00141cc <Device::findAndLoadDriver()>:
c00141cc:	c3                   	ret    
c00141cd:	90                   	nop

c00141ce <Device::preOpenPCI(PCIDeviceInfo)>:
c00141ce:	57                   	push   edi
c00141cf:	b9 09 00 00 00       	mov    ecx,0x9
c00141d4:	56                   	push   esi
c00141d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141d9:	8d 74 24 10          	lea    esi,[esp+0x10]
c00141dd:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00141e7:	81 c7 18 01 00 00    	add    edi,0x118
c00141ed:	fc                   	cld    
c00141ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141f0:	5e                   	pop    esi
c00141f1:	5f                   	pop    edi
c00141f2:	c3                   	ret    
c00141f3:	90                   	nop

c00141f4 <Device::preOpenACPI(void*, char*, char*)>:
c00141f4:	56                   	push   esi
c00141f5:	53                   	push   ebx
c00141f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00141fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141fe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014202:	89 82 18 01 00 00    	mov    DWORD PTR [edx+0x118],eax
c0014208:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001420c:	c7 82 14 01 00 00 03 00 00 00 	mov    DWORD PTR [edx+0x114],0x3
c0014216:	31 c0                	xor    eax,eax
c0014218:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c001421b:	88 8c 02 1c 01 00 00 	mov    BYTE PTR [edx+eax*1+0x11c],cl
c0014222:	40                   	inc    eax
c0014223:	83 f8 1e             	cmp    eax,0x1e
c0014226:	75 f0                	jne    c0014218 <Device::preOpenACPI(void*, char*, char*)+0x24>
c0014228:	31 c0                	xor    eax,eax
c001422a:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c001422d:	88 8c 02 3a 01 00 00 	mov    BYTE PTR [edx+eax*1+0x13a],cl
c0014234:	40                   	inc    eax
c0014235:	83 f8 0e             	cmp    eax,0xe
c0014238:	75 f0                	jne    c001422a <Device::preOpenACPI(void*, char*, char*)+0x36>
c001423a:	5b                   	pop    ebx
c001423b:	5e                   	pop    esi
c001423c:	c3                   	ret    
c001423d:	90                   	nop

c001423e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001423e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014242:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014247:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001424e:	75 0b                	jne    c001425b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014250:	8b 00                	mov    eax,DWORD PTR [eax]
c0014252:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014256:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014259:	eb 1e                	jmp    c0014279 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001425b:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0014260:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014266:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001426c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001426e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014272:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014276:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014279:	ff e0                	jmp    eax
c001427b:	90                   	nop

c001427c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001427c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014280:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014285:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001428c:	75 0b                	jne    c0014299 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001428e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014290:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014294:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014297:	eb 1e                	jmp    c00142b7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014299:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c001429e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142a4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142b4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00142b7:	ff e0                	jmp    eax
c00142b9:	90                   	nop

c00142ba <Device::addChild(Device*)>:
c00142ba:	53                   	push   ebx
c00142bb:	83 ec 08             	sub    esp,0x8
c00142be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142c6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00142cc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00142d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00142d4:	85 d2                	test   edx,edx
c00142d6:	74 04                	je     c00142dc <Device::addChild(Device*)+0x22>
c00142d8:	89 d3                	mov    ebx,edx
c00142da:	eb f6                	jmp    c00142d2 <Device::addChild(Device*)+0x18>
c00142dc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00142df:	83 ec 0c             	sub    esp,0xc
c00142e2:	6a 08                	push   0x8
c00142e4:	e8 d7 b5 ff ff       	call   c000f8c0 <malloc>
c00142e9:	89 03                	mov    DWORD PTR [ebx],eax
c00142eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142f8:	83 c4 18             	add    esp,0x18
c00142fb:	5b                   	pop    ebx
c00142fc:	c3                   	ret    
c00142fd:	90                   	nop

c00142fe <Device::removeAllChildren()>:
c00142fe:	56                   	push   esi
c00142ff:	53                   	push   ebx
c0014300:	52                   	push   edx
c0014301:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014305:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001430b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001430e:	74 17                	je     c0014327 <Device::removeAllChildren()+0x29>
c0014310:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014313:	85 c0                	test   eax,eax
c0014315:	74 0c                	je     c0014323 <Device::removeAllChildren()+0x25>
c0014317:	83 ec 0c             	sub    esp,0xc
c001431a:	8b 10                	mov    edx,DWORD PTR [eax]
c001431c:	50                   	push   eax
c001431d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014320:	83 c4 10             	add    esp,0x10
c0014323:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014325:	eb e4                	jmp    c001430b <Device::removeAllChildren()+0xd>
c0014327:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001432d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014333:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014339:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014340:	58                   	pop    eax
c0014341:	5b                   	pop    ebx
c0014342:	5e                   	pop    esi
c0014343:	c3                   	ret    

c0014344 <Device::hibernateAll()>:
c0014344:	53                   	push   ebx
c0014345:	83 ec 14             	sub    esp,0x14
c0014348:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001434c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001434e:	53                   	push   ebx
c001434f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014352:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014358:	83 c4 10             	add    esp,0x10
c001435b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001435e:	74 0f                	je     c001436f <Device::hibernateAll()+0x2b>
c0014360:	83 ec 0c             	sub    esp,0xc
c0014363:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014366:	e8 d9 ff ff ff       	call   c0014344 <Device::hibernateAll()>
c001436b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001436d:	eb e9                	jmp    c0014358 <Device::hibernateAll()+0x14>
c001436f:	83 c4 08             	add    esp,0x8
c0014372:	5b                   	pop    ebx
c0014373:	c3                   	ret    

c0014374 <Device::wakeAll()>:
c0014374:	53                   	push   ebx
c0014375:	83 ec 14             	sub    esp,0x14
c0014378:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001437c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001437e:	53                   	push   ebx
c001437f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014382:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014388:	83 c4 10             	add    esp,0x10
c001438b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001438e:	74 0f                	je     c001439f <Device::wakeAll()+0x2b>
c0014390:	83 ec 0c             	sub    esp,0xc
c0014393:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014396:	e8 d9 ff ff ff       	call   c0014374 <Device::wakeAll()>
c001439b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001439d:	eb e9                	jmp    c0014388 <Device::wakeAll()+0x14>
c001439f:	83 c4 08             	add    esp,0x8
c00143a2:	5b                   	pop    ebx
c00143a3:	c3                   	ret    

c00143a4 <Device::detectAll()>:
c00143a4:	53                   	push   ebx
c00143a5:	83 ec 14             	sub    esp,0x14
c00143a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ae:	53                   	push   ebx
c00143af:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00143b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143b8:	83 c4 10             	add    esp,0x10
c00143bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143be:	74 0f                	je     c00143cf <Device::detectAll()+0x2b>
c00143c0:	83 ec 0c             	sub    esp,0xc
c00143c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143c6:	e8 d9 ff ff ff       	call   c00143a4 <Device::detectAll()>
c00143cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143cd:	eb e9                	jmp    c00143b8 <Device::detectAll()+0x14>
c00143cf:	83 c4 08             	add    esp,0x8
c00143d2:	5b                   	pop    ebx
c00143d3:	c3                   	ret    

c00143d4 <Device::disableLegacyAll()>:
c00143d4:	53                   	push   ebx
c00143d5:	83 ec 14             	sub    esp,0x14
c00143d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143de:	53                   	push   ebx
c00143df:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00143e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143e8:	83 c4 10             	add    esp,0x10
c00143eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ee:	74 0f                	je     c00143ff <Device::disableLegacyAll()+0x2b>
c00143f0:	83 ec 0c             	sub    esp,0xc
c00143f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143f6:	e8 d9 ff ff ff       	call   c00143d4 <Device::disableLegacyAll()>
c00143fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143fd:	eb e9                	jmp    c00143e8 <Device::disableLegacyAll()+0x14>
c00143ff:	83 c4 08             	add    esp,0x8
c0014402:	5b                   	pop    ebx
c0014403:	c3                   	ret    

c0014404 <Device::loadDriversForAll()>:
c0014404:	53                   	push   ebx
c0014405:	83 ec 08             	sub    esp,0x8
c0014408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001440c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014412:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014414:	85 db                	test   ebx,ebx
c0014416:	74 12                	je     c001442a <Device::loadDriversForAll()+0x26>
c0014418:	83 ec 0c             	sub    esp,0xc
c001441b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001441e:	e8 e1 ff ff ff       	call   c0014404 <Device::loadDriversForAll()>
c0014423:	83 c4 10             	add    esp,0x10
c0014426:	89 d8                	mov    eax,ebx
c0014428:	eb e8                	jmp    c0014412 <Device::loadDriversForAll()+0xe>
c001442a:	83 c4 08             	add    esp,0x8
c001442d:	5b                   	pop    ebx
c001442e:	c3                   	ret    
c001442f:	90                   	nop

c0014430 <Device::closeAll()>:
c0014430:	53                   	push   ebx
c0014431:	83 ec 08             	sub    esp,0x8
c0014434:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014438:	8b 03                	mov    eax,DWORD PTR [ebx]
c001443a:	6a 00                	push   0x0
c001443c:	6a 00                	push   0x0
c001443e:	6a 00                	push   0x0
c0014440:	53                   	push   ebx
c0014441:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014444:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001444a:	83 c4 10             	add    esp,0x10
c001444d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014450:	74 0f                	je     c0014461 <Device::closeAll()+0x31>
c0014452:	83 ec 0c             	sub    esp,0xc
c0014455:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014458:	e8 d3 ff ff ff       	call   c0014430 <Device::closeAll()>
c001445d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001445f:	eb e9                	jmp    c001444a <Device::closeAll()+0x1a>
c0014461:	83 c4 08             	add    esp,0x8
c0014464:	5b                   	pop    ebx
c0014465:	c3                   	ret    

c0014466 <Device::powerSavingAll(PowerSavingLevel)>:
c0014466:	56                   	push   esi
c0014467:	53                   	push   ebx
c0014468:	83 ec 0c             	sub    esp,0xc
c001446b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001446f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014473:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014475:	56                   	push   esi
c0014476:	53                   	push   ebx
c0014477:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001447a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014480:	83 c4 10             	add    esp,0x10
c0014483:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014486:	74 0f                	je     c0014497 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014488:	52                   	push   edx
c0014489:	52                   	push   edx
c001448a:	56                   	push   esi
c001448b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001448e:	e8 d3 ff ff ff       	call   c0014466 <Device::powerSavingAll(PowerSavingLevel)>
c0014493:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014495:	eb e9                	jmp    c0014480 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014497:	58                   	pop    eax
c0014498:	5b                   	pop    ebx
c0014499:	5e                   	pop    esi
c001449a:	c3                   	ret    
c001449b:	90                   	nop

c001449c <Device::setName(char const*)>:
c001449c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00144a4:	e9 7f c3 fe ff       	jmp    c0000828 <strcpy>
c00144a9:	90                   	nop

c00144aa <Device::Device(char const*)>:
c00144aa:	83 ec 1c             	sub    esp,0x1c
c00144ad:	ba 18 b8 02 c0       	mov    edx,0xc002b818
c00144b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144b6:	89 10                	mov    DWORD PTR [eax],edx
c00144b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144bc:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00144c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ca:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144f0:	83 ec 08             	sub    esp,0x8
c00144f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144fb:	e8 9c ff ff ff       	call   c001449c <Device::setName(char const*)>
c0014500:	83 c4 10             	add    esp,0x10
c0014503:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001450b:	83 ec 0c             	sub    esp,0xc
c001450e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014512:	e8 a9 b3 ff ff       	call   c000f8c0 <malloc>
c0014517:	83 c4 10             	add    esp,0x10
c001451a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014520:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014527:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001452b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014531:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014535:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001453b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014545:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001454b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014556:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001455d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014561:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014588:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014596:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c00145a0:	90                   	nop
c00145a1:	83 c4 1c             	add    esp,0x1c
c00145a4:	c3                   	ret    
c00145a5:	90                   	nop

c00145a6 <Device::getName()>:
c00145a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145aa:	05 d0 00 00 00       	add    eax,0xd0
c00145af:	c3                   	ret    

c00145b0 <DriverlessDevice::DriverlessDevice(char const*)>:
c00145b0:	83 ec 0c             	sub    esp,0xc
c00145b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145b7:	83 ec 08             	sub    esp,0x8
c00145ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145be:	50                   	push   eax
c00145bf:	e8 e6 fe ff ff       	call   c00144aa <Device::Device(char const*)>
c00145c4:	83 c4 10             	add    esp,0x10
c00145c7:	ba 44 b8 02 c0       	mov    edx,0xc002b844
c00145cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145d0:	89 10                	mov    DWORD PTR [eax],edx
c00145d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145d6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145e0:	90                   	nop
c00145e1:	83 c4 0c             	add    esp,0xc
c00145e4:	c3                   	ret    
c00145e5:	90                   	nop

c00145e6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00145e6:	57                   	push   edi
c00145e7:	56                   	push   esi
c00145e8:	53                   	push   ebx
c00145e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145ed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145f5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145fb:	75 0c                	jne    c0014609 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145fd:	52                   	push   edx
c00145fe:	52                   	push   edx
c00145ff:	53                   	push   ebx
c0014600:	56                   	push   esi
c0014601:	e8 d0 4d 01 00       	call   c00293d6 <LinkedList<Device>::addElement(Device*)>
c0014606:	83 c4 10             	add    esp,0x10
c0014609:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001460f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014612:	74 12                	je     c0014626 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014614:	50                   	push   eax
c0014615:	57                   	push   edi
c0014616:	56                   	push   esi
c0014617:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001461a:	e8 c7 ff ff ff       	call   c00145e6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001461f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014621:	83 c4 10             	add    esp,0x10
c0014624:	eb e9                	jmp    c001460f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014626:	5b                   	pop    ebx
c0014627:	5e                   	pop    esi
c0014628:	5f                   	pop    edi
c0014629:	c3                   	ret    

c001462a <getDevicesOfType(DeviceType)>:
c001462a:	53                   	push   ebx
c001462b:	83 ec 14             	sub    esp,0x14
c001462e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014632:	53                   	push   ebx
c0014633:	e8 7a 4e 01 00       	call   c00294b2 <LinkedList<Device>::LinkedList()>
c0014638:	83 c4 0c             	add    esp,0xc
c001463b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001463f:	53                   	push   ebx
c0014640:	ff 35 08 f1 02 c0    	push   DWORD PTR ds:0xc002f108
c0014646:	e8 9b ff ff ff       	call   c00145e6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001464b:	89 d8                	mov    eax,ebx
c001464d:	83 c4 18             	add    esp,0x18
c0014650:	5b                   	pop    ebx
c0014651:	c2 04 00             	ret    0x4

c0014654 <HardDiskController::HardDiskController(char const*)>:
c0014654:	83 ec 0c             	sub    esp,0xc
c0014657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465b:	83 ec 08             	sub    esp,0x8
c001465e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014662:	50                   	push   eax
c0014663:	e8 42 fe ff ff       	call   c00144aa <Device::Device(char const*)>
c0014668:	83 c4 10             	add    esp,0x10
c001466b:	ba 70 b8 02 c0       	mov    edx,0xc002b870
c0014670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014674:	89 10                	mov    DWORD PTR [eax],edx
c0014676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001467a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014684:	90                   	nop
c0014685:	83 c4 0c             	add    esp,0xc
c0014688:	c3                   	ret    
c0014689:	90                   	nop

c001468a <HardDiskController::~HardDiskController()>:
c001468a:	83 ec 0c             	sub    esp,0xc
c001468d:	ba 70 b8 02 c0       	mov    edx,0xc002b870
c0014692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014696:	89 10                	mov    DWORD PTR [eax],edx
c0014698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001469c:	83 ec 0c             	sub    esp,0xc
c001469f:	50                   	push   eax
c00146a0:	e8 f1 fa ff ff       	call   c0014196 <Device::~Device()>
c00146a5:	83 c4 10             	add    esp,0x10
c00146a8:	90                   	nop
c00146a9:	83 c4 0c             	add    esp,0xc
c00146ac:	c3                   	ret    
c00146ad:	90                   	nop

c00146ae <HardDiskController::~HardDiskController()>:
c00146ae:	83 ec 0c             	sub    esp,0xc
c00146b1:	83 ec 0c             	sub    esp,0xc
c00146b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b8:	e8 cd ff ff ff       	call   c001468a <HardDiskController::~HardDiskController()>
c00146bd:	83 c4 10             	add    esp,0x10
c00146c0:	83 ec 08             	sub    esp,0x8
c00146c3:	68 58 01 00 00       	push   0x158
c00146c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146cc:	e8 de e6 ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c00146d1:	83 c4 10             	add    esp,0x10
c00146d4:	83 c4 0c             	add    esp,0xc
c00146d7:	c3                   	ret    

c00146d8 <PhysicalDisk::eject()>:
c00146d8:	83 ec 18             	sub    esp,0x18
c00146db:	68 94 b8 02 c0       	push   0xc002b894
c00146e0:	e8 aa e7 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00146e5:	83 c8 ff             	or     eax,0xffffffff
c00146e8:	83 c4 1c             	add    esp,0x1c
c00146eb:	c3                   	ret    

c00146ec <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00146ec:	83 ec 0c             	sub    esp,0xc
c00146ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f3:	83 ec 08             	sub    esp,0x8
c00146f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146fa:	50                   	push   eax
c00146fb:	e8 aa fd ff ff       	call   c00144aa <Device::Device(char const*)>
c0014700:	83 c4 10             	add    esp,0x10
c0014703:	ba c4 b8 02 c0       	mov    edx,0xc002b8c4
c0014708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470c:	89 10                	mov    DWORD PTR [eax],edx
c001470e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014712:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001471d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014728:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014736:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001473a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014744:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001474e:	90                   	nop
c001474f:	83 c4 0c             	add    esp,0xc
c0014752:	c3                   	ret    
c0014753:	90                   	nop

c0014754 <PhysicalDisk::startCache()>:
c0014754:	56                   	push   esi
c0014755:	53                   	push   ebx
c0014756:	83 ec 10             	sub    esp,0x10
c0014759:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001475d:	6a 44                	push   0x44
c001475f:	e8 5c b1 ff ff       	call   c000f8c0 <malloc>
c0014764:	89 c6                	mov    esi,eax
c0014766:	58                   	pop    eax
c0014767:	5a                   	pop    edx
c0014768:	53                   	push   ebx
c0014769:	56                   	push   esi
c001476a:	e8 cf 28 00 00       	call   c001703e <VCache::VCache(PhysicalDisk*)>
c001476f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014775:	83 c4 14             	add    esp,0x14
c0014778:	5b                   	pop    ebx
c0014779:	5e                   	pop    esi
c001477a:	c3                   	ret    
c001477b:	90                   	nop

c001477c <PhysicalDisk::~PhysicalDisk()>:
c001477c:	83 ec 0c             	sub    esp,0xc
c001477f:	ba c4 b8 02 c0       	mov    edx,0xc002b8c4
c0014784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014788:	89 10                	mov    DWORD PTR [eax],edx
c001478a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478e:	83 ec 0c             	sub    esp,0xc
c0014791:	50                   	push   eax
c0014792:	e8 ff f9 ff ff       	call   c0014196 <Device::~Device()>
c0014797:	83 c4 10             	add    esp,0x10
c001479a:	90                   	nop
c001479b:	83 c4 0c             	add    esp,0xc
c001479e:	c3                   	ret    
c001479f:	90                   	nop

c00147a0 <PhysicalDisk::~PhysicalDisk()>:
c00147a0:	83 ec 0c             	sub    esp,0xc
c00147a3:	83 ec 0c             	sub    esp,0xc
c00147a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147aa:	e8 cd ff ff ff       	call   c001477c <PhysicalDisk::~PhysicalDisk()>
c00147af:	83 c4 10             	add    esp,0x10
c00147b2:	83 ec 08             	sub    esp,0x8
c00147b5:	68 6c 01 00 00       	push   0x16c
c00147ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147be:	e8 ec e5 ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c00147c3:	83 c4 10             	add    esp,0x10
c00147c6:	83 c4 0c             	add    esp,0xc
c00147c9:	c3                   	ret    

c00147ca <FPU::FPU(char const*)>:
c00147ca:	83 ec 0c             	sub    esp,0xc
c00147cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d1:	83 ec 08             	sub    esp,0x8
c00147d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147d8:	50                   	push   eax
c00147d9:	e8 cc fc ff ff       	call   c00144aa <Device::Device(char const*)>
c00147de:	83 c4 10             	add    esp,0x10
c00147e1:	ba 08 b9 02 c0       	mov    edx,0xc002b908
c00147e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ea:	89 10                	mov    DWORD PTR [eax],edx
c00147ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f0:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147fa:	90                   	nop
c00147fb:	83 c4 0c             	add    esp,0xc
c00147fe:	c3                   	ret    
c00147ff:	90                   	nop

c0014800 <FPU::~FPU()>:
c0014800:	83 ec 0c             	sub    esp,0xc
c0014803:	ba 08 b9 02 c0       	mov    edx,0xc002b908
c0014808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001480c:	89 10                	mov    DWORD PTR [eax],edx
c001480e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014812:	83 ec 0c             	sub    esp,0xc
c0014815:	50                   	push   eax
c0014816:	e8 7b f9 ff ff       	call   c0014196 <Device::~Device()>
c001481b:	83 c4 10             	add    esp,0x10
c001481e:	90                   	nop
c001481f:	83 c4 0c             	add    esp,0xc
c0014822:	c3                   	ret    
c0014823:	90                   	nop

c0014824 <FPU::~FPU()>:
c0014824:	83 ec 0c             	sub    esp,0xc
c0014827:	83 ec 0c             	sub    esp,0xc
c001482a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001482e:	e8 cd ff ff ff       	call   c0014800 <FPU::~FPU()>
c0014833:	83 c4 10             	add    esp,0x10
c0014836:	83 ec 08             	sub    esp,0x8
c0014839:	68 58 01 00 00       	push   0x158
c001483e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014842:	e8 68 e5 ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0014847:	83 c4 10             	add    esp,0x10
c001484a:	83 c4 0c             	add    esp,0xc
c001484d:	c3                   	ret    

c001484e <setupFPU()>:
c001484e:	53                   	push   ebx
c001484f:	83 ec 08             	sub    esp,0x8
c0014852:	8b 15 08 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f108
c0014858:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001485f:	74 19                	je     c001487a <setupFPU()+0x2c>
c0014861:	83 ec 0c             	sub    esp,0xc
c0014864:	68 58 01 00 00       	push   0x158
c0014869:	e8 52 b0 ff ff       	call   c000f8c0 <malloc>
c001486e:	89 c3                	mov    ebx,eax
c0014870:	89 04 24             	mov    DWORD PTR [esp],eax
c0014873:	e8 8c 17 01 00       	call   c0026004 <AVX::AVX()>
c0014878:	eb 5b                	jmp    c00148d5 <setupFPU()+0x87>
c001487a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014880:	84 c0                	test   al,al
c0014882:	79 19                	jns    c001489d <setupFPU()+0x4f>
c0014884:	83 ec 0c             	sub    esp,0xc
c0014887:	68 58 01 00 00       	push   0x158
c001488c:	e8 2f b0 ff ff       	call   c000f8c0 <malloc>
c0014891:	89 c3                	mov    ebx,eax
c0014893:	89 04 24             	mov    DWORD PTR [esp],eax
c0014896:	e8 8f 18 01 00       	call   c002612a <SSE::SSE()>
c001489b:	eb 38                	jmp    c00148d5 <setupFPU()+0x87>
c001489d:	a8 20                	test   al,0x20
c001489f:	74 19                	je     c00148ba <setupFPU()+0x6c>
c00148a1:	83 ec 0c             	sub    esp,0xc
c00148a4:	68 58 01 00 00       	push   0x158
c00148a9:	e8 12 b0 ff ff       	call   c000f8c0 <malloc>
c00148ae:	89 c3                	mov    ebx,eax
c00148b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00148b3:	e8 dc 17 01 00       	call   c0026094 <MMX::MMX()>
c00148b8:	eb 1b                	jmp    c00148d5 <setupFPU()+0x87>
c00148ba:	a8 10                	test   al,0x10
c00148bc:	74 1c                	je     c00148da <setupFPU()+0x8c>
c00148be:	83 ec 0c             	sub    esp,0xc
c00148c1:	68 58 01 00 00       	push   0x158
c00148c6:	e8 f5 af ff ff       	call   c000f8c0 <malloc>
c00148cb:	89 c3                	mov    ebx,eax
c00148cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00148d0:	e8 e3 18 01 00       	call   c00261b8 <x87::x87()>
c00148d5:	83 c4 10             	add    esp,0x10
c00148d8:	eb 24                	jmp    c00148fe <setupFPU()+0xb0>
c00148da:	83 e0 ef             	and    eax,0xffffffef
c00148dd:	83 ec 0c             	sub    esp,0xc
c00148e0:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00148e6:	68 f4 b8 02 c0       	push   0xc002b8f4
c00148eb:	e8 9f e5 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00148f0:	0f 20 c0             	mov    eax,cr0
c00148f3:	83 c8 04             	or     eax,0x4
c00148f6:	0f 22 c0             	mov    cr0,eax
c00148f9:	31 db                	xor    ebx,ebx
c00148fb:	83 c4 10             	add    esp,0x10
c00148fe:	89 d8                	mov    eax,ebx
c0014900:	83 c4 08             	add    esp,0x8
c0014903:	5b                   	pop    ebx
c0014904:	c3                   	ret    
c0014905:	90                   	nop

c0014906 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014906:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001490a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001490e:	c1 e0 04             	shl    eax,0x4
c0014911:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014915:	8d 50 10             	lea    edx,[eax+0x10]
c0014918:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001491e:	74 08                	je     c0014928 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014920:	83 c0 04             	add    eax,0x4
c0014923:	39 d0                	cmp    eax,edx
c0014925:	75 f1                	jne    c0014918 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014927:	c3                   	ret    
c0014928:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014932:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001493c:	eb e2                	jmp    c0014920 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001493e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001493e:	57                   	push   edi
c001493f:	31 c0                	xor    eax,eax
c0014941:	56                   	push   esi
c0014942:	53                   	push   ebx
c0014943:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014947:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001494b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001494f:	89 da                	mov    edx,ebx
c0014951:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014955:	c1 e2 04             	shl    edx,0x4
c0014958:	01 ca                	add    edx,ecx
c001495a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014962:	74 16                	je     c001497a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014964:	40                   	inc    eax
c0014965:	83 f8 04             	cmp    eax,0x4
c0014968:	75 f0                	jne    c001495a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001496a:	c7 44 24 10 38 b9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b938
c0014972:	5b                   	pop    ebx
c0014973:	5e                   	pop    esi
c0014974:	5f                   	pop    edi
c0014975:	e9 7d 5f 00 00       	jmp    c001a8f7 <Krnl::panic(char const*)>
c001497a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001497d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014980:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014986:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001498c:	5b                   	pop    ebx
c001498d:	5e                   	pop    esi
c001498e:	5f                   	pop    edi
c001498f:	c3                   	ret    

c0014990 <doubleFault(regs*, void*)>:
c0014990:	55                   	push   ebp
c0014991:	89 e5                	mov    ebp,esp
c0014993:	83 ec 08             	sub    esp,0x8
c0014996:	83 ec 0c             	sub    esp,0xc
c0014999:	68 73 b9 02 c0       	push   0xc002b973
c001499e:	e8 54 5f 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c00149a3:	83 c4 10             	add    esp,0x10
c00149a6:	90                   	nop
c00149a7:	c9                   	leave  
c00149a8:	c3                   	ret    
c00149a9:	90                   	nop

c00149aa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00149aa:	56                   	push   esi
c00149ab:	53                   	push   ebx
c00149ac:	50                   	push   eax
c00149ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149b1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149b5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149ba:	75 35                	jne    c00149f1 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149bc:	8d 43 20             	lea    eax,[ebx+0x20]
c00149bf:	31 d2                	xor    edx,edx
c00149c1:	89 c1                	mov    ecx,eax
c00149c3:	c1 e1 04             	shl    ecx,0x4
c00149c6:	01 f1                	add    ecx,esi
c00149c8:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00149d0:	74 3e                	je     c0014a10 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00149d2:	42                   	inc    edx
c00149d3:	83 fa 04             	cmp    edx,0x4
c00149d6:	75 f0                	jne    c00149c8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00149d8:	83 ec 0c             	sub    esp,0xc
c00149db:	68 b8 b9 02 c0       	push   0xc002b9b8
c00149e0:	e8 12 5f 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c00149e5:	83 c4 10             	add    esp,0x10
c00149e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00149ed:	5a                   	pop    edx
c00149ee:	5b                   	pop    ebx
c00149ef:	5e                   	pop    esi
c00149f0:	c3                   	ret    
c00149f1:	83 ec 0c             	sub    esp,0xc
c00149f4:	56                   	push   esi
c00149f5:	e8 ac fb ff ff       	call   c00145a6 <Device::getName()>
c00149fa:	83 c4 10             	add    esp,0x10
c00149fd:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a00:	75 ba                	jne    c00149bc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a02:	83 fb 0f             	cmp    ebx,0xf
c0014a05:	7f 29                	jg     c0014a30 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a07:	0f b6 9b 60 e3 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1ca0]
c0014a0e:	eb ac                	jmp    c00149bc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a10:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a17:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a1a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a24:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a2a:	89 d8                	mov    eax,ebx
c0014a2c:	5a                   	pop    edx
c0014a2d:	5b                   	pop    ebx
c0014a2e:	5e                   	pop    esi
c0014a2f:	c3                   	ret    
c0014a30:	83 ec 0c             	sub    esp,0xc
c0014a33:	68 80 b9 02 c0       	push   0xc002b980
c0014a38:	e8 ba 5e 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0014a3d:	83 c4 10             	add    esp,0x10
c0014a40:	e9 77 ff ff ff       	jmp    c00149bc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a45:	90                   	nop

c0014a46 <InterruptController::clearAllHandlers(int, bool)>:
c0014a46:	56                   	push   esi
c0014a47:	53                   	push   ebx
c0014a48:	52                   	push   edx
c0014a49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a4d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a51:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a56:	75 61                	jne    c0014ab9 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a58:	8d 46 20             	lea    eax,[esi+0x20]
c0014a5b:	c1 e6 04             	shl    esi,0x4
c0014a5e:	c1 e0 04             	shl    eax,0x4
c0014a61:	01 de                	add    esi,ebx
c0014a63:	01 d8                	add    eax,ebx
c0014a65:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a6f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a79:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a83:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a8d:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a97:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014aa1:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014aab:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014ab5:	58                   	pop    eax
c0014ab6:	5b                   	pop    ebx
c0014ab7:	5e                   	pop    esi
c0014ab8:	c3                   	ret    
c0014ab9:	83 ec 0c             	sub    esp,0xc
c0014abc:	53                   	push   ebx
c0014abd:	e8 e4 fa ff ff       	call   c00145a6 <Device::getName()>
c0014ac2:	83 c4 10             	add    esp,0x10
c0014ac5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ac8:	75 8e                	jne    c0014a58 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014aca:	83 fe 0f             	cmp    esi,0xf
c0014acd:	7f 09                	jg     c0014ad8 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014acf:	0f b6 b6 60 e3 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1ca0]
c0014ad6:	eb 80                	jmp    c0014a58 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ad8:	83 ec 0c             	sub    esp,0xc
c0014adb:	68 f4 b9 02 c0       	push   0xc002b9f4
c0014ae0:	e8 12 5e 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0014ae5:	83 c4 10             	add    esp,0x10
c0014ae8:	e9 6b ff ff ff       	jmp    c0014a58 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014aed:	90                   	nop

c0014aee <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014aee:	56                   	push   esi
c0014aef:	53                   	push   ebx
c0014af0:	52                   	push   edx
c0014af1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014af5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014af9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014afe:	75 3a                	jne    c0014b3a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b04:	8d 50 20             	lea    edx,[eax+0x20]
c0014b07:	c1 e2 04             	shl    edx,0x4
c0014b0a:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b0d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b11:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b17:	74 0b                	je     c0014b24 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b19:	83 c0 04             	add    eax,0x4
c0014b1c:	39 d0                	cmp    eax,edx
c0014b1e:	75 f1                	jne    c0014b11 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b20:	58                   	pop    eax
c0014b21:	5b                   	pop    ebx
c0014b22:	5e                   	pop    esi
c0014b23:	c3                   	ret    
c0014b24:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b2e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b38:	eb df                	jmp    c0014b19 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b3a:	83 ec 0c             	sub    esp,0xc
c0014b3d:	56                   	push   esi
c0014b3e:	e8 63 fa ff ff       	call   c00145a6 <Device::getName()>
c0014b43:	83 c4 10             	add    esp,0x10
c0014b46:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b49:	75 b5                	jne    c0014b00 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b4b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b50:	7f 11                	jg     c0014b63 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b56:	0f b6 80 60 e3 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1ca0]
c0014b5d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b61:	eb 9d                	jmp    c0014b00 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b63:	83 ec 0c             	sub    esp,0xc
c0014b66:	68 f4 b9 02 c0       	push   0xc002b9f4
c0014b6b:	e8 87 5d 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0014b70:	83 c4 10             	add    esp,0x10
c0014b73:	eb 8b                	jmp    c0014b00 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b75 <nmiHandler(regs*, void*)>:
c0014b75:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0014b7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b7e:	e9 87 a4 ff ff       	jmp    c000f00a <Computer::handleNMI()>

c0014b83 <int_handler>:
c0014b83:	55                   	push   ebp
c0014b84:	57                   	push   edi
c0014b85:	56                   	push   esi
c0014b86:	53                   	push   ebx
c0014b87:	83 ec 0c             	sub    esp,0xc
c0014b8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b8e:	80 3d 64 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c64,0x0
c0014b95:	74 0b                	je     c0014ba2 <int_handler+0x1f>
c0014b97:	fa                   	cli    
c0014b98:	f4                   	hlt    
c0014b99:	80 3d 64 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c64,0x0
c0014ba0:	75 f5                	jne    c0014b97 <int_handler+0x14>
c0014ba2:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0014ba7:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014baa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bb0:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014bb6:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bb9:	83 f8 17             	cmp    eax,0x17
c0014bbc:	77 13                	ja     c0014bd1 <int_handler+0x4e>
c0014bbe:	83 ec 08             	sub    esp,0x8
c0014bc1:	8b 17                	mov    edx,DWORD PTR [edi]
c0014bc3:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bc6:	0f b6 c0             	movzx  eax,al
c0014bc9:	50                   	push   eax
c0014bca:	57                   	push   edi
c0014bcb:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014bce:	83 c4 10             	add    esp,0x10
c0014bd1:	83 c3 15             	add    ebx,0x15
c0014bd4:	c1 e3 04             	shl    ebx,0x4
c0014bd7:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014bdb:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014be2:	31 db                	xor    ebx,ebx
c0014be4:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014be8:	85 c0                	test   eax,eax
c0014bea:	74 13                	je     c0014bff <int_handler+0x7c>
c0014bec:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014bef:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014bf3:	74 1c                	je     c0014c11 <int_handler+0x8e>
c0014bf5:	83 ec 08             	sub    esp,0x8
c0014bf8:	52                   	push   edx
c0014bf9:	56                   	push   esi
c0014bfa:	ff d0                	call   eax
c0014bfc:	83 c4 10             	add    esp,0x10
c0014bff:	43                   	inc    ebx
c0014c00:	83 fb 04             	cmp    ebx,0x4
c0014c03:	75 df                	jne    c0014be4 <int_handler+0x61>
c0014c05:	83 c4 0c             	add    esp,0xc
c0014c08:	31 c0                	xor    eax,eax
c0014c0a:	5b                   	pop    ebx
c0014c0b:	31 d2                	xor    edx,edx
c0014c0d:	5e                   	pop    esi
c0014c0e:	5f                   	pop    edi
c0014c0f:	5d                   	pop    ebp
c0014c10:	c3                   	ret    
c0014c11:	83 ec 08             	sub    esp,0x8
c0014c14:	52                   	push   edx
c0014c15:	56                   	push   esi
c0014c16:	ff d0                	call   eax
c0014c18:	83 c4 10             	add    esp,0x10
c0014c1b:	83 c4 0c             	add    esp,0xc
c0014c1e:	5b                   	pop    ebx
c0014c1f:	5e                   	pop    esi
c0014c20:	5f                   	pop    edi
c0014c21:	5d                   	pop    ebp
c0014c22:	c3                   	ret    
c0014c23:	90                   	nop

c0014c24 <InterruptController::InterruptController(char const*)>:
c0014c24:	83 ec 1c             	sub    esp,0x1c
c0014c27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c2b:	83 ec 08             	sub    esp,0x8
c0014c2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c32:	50                   	push   eax
c0014c33:	e8 72 f8 ff ff       	call   c00144aa <Device::Device(char const*)>
c0014c38:	83 c4 10             	add    esp,0x10
c0014c3b:	ba b4 bc 02 c0       	mov    edx,0xc002bcb4
c0014c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c44:	89 10                	mov    DWORD PTR [eax],edx
c0014c46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c4a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c54:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c5c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c64:	7f 5e                	jg     c0014cc4 <InterruptController::InterruptController(char const*)+0xa0>
c0014c66:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c6e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c73:	7f 49                	jg     c0014cbe <InterruptController::InterruptController(char const*)+0x9a>
c0014c75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c7d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c88:	01 ca                	add    edx,ecx
c0014c8a:	83 c2 54             	add    edx,0x54
c0014c8d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c9d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014ca4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ca8:	01 ca                	add    edx,ecx
c0014caa:	81 c2 54 04 00 00    	add    edx,0x454
c0014cb0:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cb8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014cbc:	eb b0                	jmp    c0014c6e <InterruptController::InterruptController(char const*)+0x4a>
c0014cbe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014cc2:	eb 98                	jmp    c0014c5c <InterruptController::InterruptController(char const*)+0x38>
c0014cc4:	90                   	nop
c0014cc5:	83 c4 1c             	add    esp,0x1c
c0014cc8:	c3                   	ret    
c0014cc9:	90                   	nop

c0014cca <InterruptController::~InterruptController()>:
c0014cca:	83 ec 0c             	sub    esp,0xc
c0014ccd:	ba b4 bc 02 c0       	mov    edx,0xc002bcb4
c0014cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cd6:	89 10                	mov    DWORD PTR [eax],edx
c0014cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cdc:	83 ec 0c             	sub    esp,0xc
c0014cdf:	50                   	push   eax
c0014ce0:	e8 b1 f4 ff ff       	call   c0014196 <Device::~Device()>
c0014ce5:	83 c4 10             	add    esp,0x10
c0014ce8:	90                   	nop
c0014ce9:	83 c4 0c             	add    esp,0xc
c0014cec:	c3                   	ret    
c0014ced:	90                   	nop

c0014cee <InterruptController::~InterruptController()>:
c0014cee:	83 ec 0c             	sub    esp,0xc
c0014cf1:	83 ec 0c             	sub    esp,0xc
c0014cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cf8:	e8 cd ff ff ff       	call   c0014cca <InterruptController::~InterruptController()>
c0014cfd:	83 c4 10             	add    esp,0x10
c0014d00:	83 ec 08             	sub    esp,0x8
c0014d03:	68 58 21 00 00       	push   0x2158
c0014d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d0c:	e8 9e e0 ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0014d11:	83 c4 10             	add    esp,0x10
c0014d14:	83 c4 0c             	add    esp,0xc
c0014d17:	c3                   	ret    

c0014d18 <displayDebugInfo(regs*)>:
c0014d18:	55                   	push   ebp
c0014d19:	57                   	push   edi
c0014d1a:	56                   	push   esi
c0014d1b:	53                   	push   ebx
c0014d1c:	83 ec 24             	sub    esp,0x24
c0014d1f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d23:	0f 20 c2             	mov    edx,cr0
c0014d26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d2a:	0f 20 d7             	mov    edi,cr2
c0014d2d:	0f 20 de             	mov    esi,cr3
c0014d30:	0f 20 e5             	mov    ebp,cr4
c0014d33:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d36:	68 2e ba 02 c0       	push   0xc002ba2e
c0014d3b:	e8 4f e1 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0014d40:	59                   	pop    ecx
c0014d41:	58                   	pop    eax
c0014d42:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d45:	68 39 ba 02 c0       	push   0xc002ba39
c0014d4a:	e8 40 e1 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0014d4f:	58                   	pop    eax
c0014d50:	5a                   	pop    edx
c0014d51:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d54:	68 44 ba 02 c0       	push   0xc002ba44
c0014d59:	e8 31 e1 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0014d5e:	59                   	pop    ecx
c0014d5f:	58                   	pop    eax
c0014d60:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d63:	68 4f ba 02 c0       	push   0xc002ba4f
c0014d68:	e8 22 e1 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0014d6d:	58                   	pop    eax
c0014d6e:	5a                   	pop    edx
c0014d6f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d72:	68 5a ba 02 c0       	push   0xc002ba5a
c0014d77:	e8 13 e1 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0014d7c:	59                   	pop    ecx
c0014d7d:	58                   	pop    eax
c0014d7e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d81:	68 65 ba 02 c0       	push   0xc002ba65
c0014d86:	e8 04 e1 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0014d8b:	58                   	pop    eax
c0014d8c:	5a                   	pop    edx
c0014d8d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d90:	68 70 ba 02 c0       	push   0xc002ba70
c0014d95:	e8 f5 e0 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0014d9a:	59                   	pop    ecx
c0014d9b:	58                   	pop    eax
c0014d9c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d9f:	68 7b ba 02 c0       	push   0xc002ba7b
c0014da4:	e8 e6 e0 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0014da9:	58                   	pop    eax
c0014daa:	5a                   	pop    edx
c0014dab:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014dae:	68 86 ba 02 c0       	push   0xc002ba86
c0014db3:	e8 d7 e0 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0014db8:	59                   	pop    ecx
c0014db9:	58                   	pop    eax
c0014dba:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014dbd:	68 95 ba 02 c0       	push   0xc002ba95
c0014dc2:	e8 c8 e0 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0014dc7:	58                   	pop    eax
c0014dc8:	5a                   	pop    edx
c0014dc9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014dcc:	68 a0 ba 02 c0       	push   0xc002baa0
c0014dd1:	e8 b9 e0 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0014dd6:	59                   	pop    ecx
c0014dd7:	58                   	pop    eax
c0014dd8:	57                   	push   edi
c0014dd9:	68 ab ba 02 c0       	push   0xc002baab
c0014dde:	e8 ac e0 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0014de3:	58                   	pop    eax
c0014de4:	5a                   	pop    edx
c0014de5:	56                   	push   esi
c0014de6:	68 b6 ba 02 c0       	push   0xc002bab6
c0014deb:	e8 9f e0 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0014df0:	59                   	pop    ecx
c0014df1:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014df6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dfc:	e8 b1 be ff ff       	call   c0010cb2 <setActiveTerminal(VgaText*)>
c0014e01:	58                   	pop    eax
c0014e02:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e05:	5a                   	pop    edx
c0014e06:	c1 e0 05             	shl    eax,0x5
c0014e09:	05 c0 e0 02 c0       	add    eax,0xc002e0c0
c0014e0e:	50                   	push   eax
c0014e0f:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014e14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e1a:	e8 1f c2 ff ff       	call   c001103e <VgaText::puts(char const*)>
c0014e1f:	59                   	pop    ecx
c0014e20:	58                   	pop    eax
c0014e21:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014e26:	68 c1 ba 02 c0       	push   0xc002bac1
c0014e2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e31:	e8 08 c2 ff ff       	call   c001103e <VgaText::puts(char const*)>
c0014e36:	58                   	pop    eax
c0014e37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e3c:	5a                   	pop    edx
c0014e3d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e40:	83 c0 0c             	add    eax,0xc
c0014e43:	50                   	push   eax
c0014e44:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014e49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e4f:	e8 ea c1 ff ff       	call   c001103e <VgaText::puts(char const*)>
c0014e54:	59                   	pop    ecx
c0014e55:	58                   	pop    eax
c0014e56:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014e5b:	68 ca ba 02 c0       	push   0xc002baca
c0014e60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e66:	e8 d3 c1 ff ff       	call   c001103e <VgaText::puts(char const*)>
c0014e6b:	58                   	pop    eax
c0014e6c:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014e71:	5a                   	pop    edx
c0014e72:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e7b:	e8 e4 c1 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0014e80:	59                   	pop    ecx
c0014e81:	58                   	pop    eax
c0014e82:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014e87:	68 d2 ba 02 c0       	push   0xc002bad2
c0014e8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e92:	e8 a7 c1 ff ff       	call   c001103e <VgaText::puts(char const*)>
c0014e97:	58                   	pop    eax
c0014e98:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014e9d:	5a                   	pop    edx
c0014e9e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ea1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea7:	e8 b8 c1 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0014eac:	59                   	pop    ecx
c0014ead:	58                   	pop    eax
c0014eae:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014eb3:	68 da ba 02 c0       	push   0xc002bada
c0014eb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ebe:	e8 7b c1 ff ff       	call   c001103e <VgaText::puts(char const*)>
c0014ec3:	58                   	pop    eax
c0014ec4:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014ec9:	5a                   	pop    edx
c0014eca:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ecd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed3:	e8 8c c1 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0014ed8:	59                   	pop    ecx
c0014ed9:	58                   	pop    eax
c0014eda:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014edf:	68 e2 ba 02 c0       	push   0xc002bae2
c0014ee4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eea:	e8 4f c1 ff ff       	call   c001103e <VgaText::puts(char const*)>
c0014eef:	58                   	pop    eax
c0014ef0:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014ef5:	5a                   	pop    edx
c0014ef6:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014ef9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eff:	e8 60 c1 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0014f04:	59                   	pop    ecx
c0014f05:	58                   	pop    eax
c0014f06:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014f0b:	68 ea ba 02 c0       	push   0xc002baea
c0014f10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f16:	e8 23 c1 ff ff       	call   c001103e <VgaText::puts(char const*)>
c0014f1b:	58                   	pop    eax
c0014f1c:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014f21:	5a                   	pop    edx
c0014f22:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2b:	e8 34 c1 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0014f30:	59                   	pop    ecx
c0014f31:	58                   	pop    eax
c0014f32:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014f37:	68 f2 ba 02 c0       	push   0xc002baf2
c0014f3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f42:	e8 f7 c0 ff ff       	call   c001103e <VgaText::puts(char const*)>
c0014f47:	58                   	pop    eax
c0014f48:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014f4d:	5a                   	pop    edx
c0014f4e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f57:	e8 08 c1 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0014f5c:	59                   	pop    ecx
c0014f5d:	58                   	pop    eax
c0014f5e:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014f63:	68 fa ba 02 c0       	push   0xc002bafa
c0014f68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6e:	e8 cb c0 ff ff       	call   c001103e <VgaText::puts(char const*)>
c0014f73:	58                   	pop    eax
c0014f74:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014f79:	5a                   	pop    edx
c0014f7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f7e:	52                   	push   edx
c0014f7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f85:	e8 da c0 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0014f8a:	59                   	pop    ecx
c0014f8b:	58                   	pop    eax
c0014f8c:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014f91:	68 03 bb 02 c0       	push   0xc002bb03
c0014f96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9c:	e8 9d c0 ff ff       	call   c001103e <VgaText::puts(char const*)>
c0014fa1:	58                   	pop    eax
c0014fa2:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014fa7:	5a                   	pop    edx
c0014fa8:	57                   	push   edi
c0014fa9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014faf:	e8 b0 c0 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0014fb4:	59                   	pop    ecx
c0014fb5:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014fba:	5f                   	pop    edi
c0014fbb:	68 0b bb 02 c0       	push   0xc002bb0b
c0014fc0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc6:	e8 73 c0 ff ff       	call   c001103e <VgaText::puts(char const*)>
c0014fcb:	58                   	pop    eax
c0014fcc:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014fd1:	5a                   	pop    edx
c0014fd2:	56                   	push   esi
c0014fd3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd9:	e8 86 c0 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0014fde:	59                   	pop    ecx
c0014fdf:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014fe4:	5e                   	pop    esi
c0014fe5:	68 13 bb 02 c0       	push   0xc002bb13
c0014fea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff0:	e8 49 c0 ff ff       	call   c001103e <VgaText::puts(char const*)>
c0014ff5:	5f                   	pop    edi
c0014ff6:	58                   	pop    eax
c0014ff7:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0014ffc:	55                   	push   ebp
c0014ffd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015003:	e8 5c c0 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0015008:	58                   	pop    eax
c0015009:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001500e:	5a                   	pop    edx
c001500f:	68 1b bb 02 c0       	push   0xc002bb1b
c0015014:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501a:	e8 1f c0 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001501f:	0f 21 c0             	mov    eax,db0
c0015022:	59                   	pop    ecx
c0015023:	5e                   	pop    esi
c0015024:	50                   	push   eax
c0015025:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001502a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015030:	e8 2f c0 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0015035:	5f                   	pop    edi
c0015036:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001503b:	5d                   	pop    ebp
c001503c:	68 24 bb 02 c0       	push   0xc002bb24
c0015041:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015047:	e8 f2 bf ff ff       	call   c001103e <VgaText::puts(char const*)>
c001504c:	0f 21 c8             	mov    eax,db1
c001504f:	5a                   	pop    edx
c0015050:	59                   	pop    ecx
c0015051:	50                   	push   eax
c0015052:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0015057:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001505d:	e8 02 c0 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0015062:	5e                   	pop    esi
c0015063:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0015068:	5f                   	pop    edi
c0015069:	68 2c bb 02 c0       	push   0xc002bb2c
c001506e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015074:	e8 c5 bf ff ff       	call   c001103e <VgaText::puts(char const*)>
c0015079:	0f 21 d0             	mov    eax,db2
c001507c:	5d                   	pop    ebp
c001507d:	5a                   	pop    edx
c001507e:	50                   	push   eax
c001507f:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0015084:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508a:	e8 d5 bf ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c001508f:	59                   	pop    ecx
c0015090:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0015095:	5e                   	pop    esi
c0015096:	68 34 bb 02 c0       	push   0xc002bb34
c001509b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a1:	e8 98 bf ff ff       	call   c001103e <VgaText::puts(char const*)>
c00150a6:	0f 21 d8             	mov    eax,db3
c00150a9:	5f                   	pop    edi
c00150aa:	5d                   	pop    ebp
c00150ab:	50                   	push   eax
c00150ac:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c00150b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b7:	e8 a8 bf ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c00150bc:	58                   	pop    eax
c00150bd:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c00150c2:	5a                   	pop    edx
c00150c3:	68 3c bb 02 c0       	push   0xc002bb3c
c00150c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ce:	e8 6b bf ff ff       	call   c001103e <VgaText::puts(char const*)>
c00150d3:	0f 21 f0             	mov    eax,db6
c00150d6:	59                   	pop    ecx
c00150d7:	5e                   	pop    esi
c00150d8:	50                   	push   eax
c00150d9:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c00150de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e4:	e8 7b bf ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c00150e9:	5f                   	pop    edi
c00150ea:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c00150ef:	5d                   	pop    ebp
c00150f0:	68 44 bb 02 c0       	push   0xc002bb44
c00150f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150fb:	e8 3e bf ff ff       	call   c001103e <VgaText::puts(char const*)>
c0015100:	0f 21 f8             	mov    eax,db7
c0015103:	5a                   	pop    edx
c0015104:	59                   	pop    ecx
c0015105:	50                   	push   eax
c0015106:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001510b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015111:	e8 4e bf ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0015116:	5e                   	pop    esi
c0015117:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001511a:	e8 96 8b 00 00       	call   c001dcb5 <Thr::getDriverNameFromAddress(unsigned long)>
c001511f:	83 c4 10             	add    esp,0x10
c0015122:	85 c0                	test   eax,eax
c0015124:	74 7d                	je     c00151a3 <displayDebugInfo(regs*)+0x48b>
c0015126:	89 c6                	mov    esi,eax
c0015128:	50                   	push   eax
c0015129:	50                   	push   eax
c001512a:	56                   	push   esi
c001512b:	68 4c bb 02 c0       	push   0xc002bb4c
c0015130:	e8 5a dd ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0015135:	5a                   	pop    edx
c0015136:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001513b:	59                   	pop    ecx
c001513c:	68 5a bb 02 c0       	push   0xc002bb5a
c0015141:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015147:	e8 f2 be ff ff       	call   c001103e <VgaText::puts(char const*)>
c001514c:	5f                   	pop    edi
c001514d:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0015152:	5d                   	pop    ebp
c0015153:	56                   	push   esi
c0015154:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515a:	e8 df be ff ff       	call   c001103e <VgaText::puts(char const*)>
c001515f:	58                   	pop    eax
c0015160:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c0015165:	5a                   	pop    edx
c0015166:	68 66 bb 02 c0       	push   0xc002bb66
c001516b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015171:	e8 c8 be ff ff       	call   c001103e <VgaText::puts(char const*)>
c0015176:	59                   	pop    ecx
c0015177:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001517c:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015182:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015185:	e8 62 8b 00 00       	call   c001dcec <Thr::getDriverOffsetFromAddress(unsigned long)>
c001518a:	5b                   	pop    ebx
c001518b:	5d                   	pop    ebp
c001518c:	50                   	push   eax
c001518d:	57                   	push   edi
c001518e:	e8 d1 be ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c0015193:	58                   	pop    eax
c0015194:	5a                   	pop    edx
c0015195:	56                   	push   esi
c0015196:	68 72 bb 02 c0       	push   0xc002bb72
c001519b:	e8 ef dc ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00151a0:	83 c4 10             	add    esp,0x10
c00151a3:	fa                   	cli    
c00151a4:	f4                   	hlt    
c00151a5:	eb fe                	jmp    c00151a5 <displayDebugInfo(regs*)+0x48d>

c00151a7 <x87EmulHandler(regs*, void*)>:
c00151a7:	83 ec 0c             	sub    esp,0xc
c00151aa:	0f 20 c2             	mov    edx,cr0
c00151ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b2:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00151b6:	75 4b                	jne    c0015203 <x87EmulHandler(regs*, void*)+0x5c>
c00151b8:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c00151bd:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00151c3:	85 c0                	test   eax,eax
c00151c5:	74 05                	je     c00151cc <x87EmulHandler(regs*, void*)+0x25>
c00151c7:	83 e2 08             	and    edx,0x8
c00151ca:	75 17                	jne    c00151e3 <x87EmulHandler(regs*, void*)+0x3c>
c00151cc:	83 ec 0c             	sub    esp,0xc
c00151cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151d3:	e8 55 b1 00 00       	call   c002032d <Vm::x87Handler(regs*)>
c00151d8:	83 c4 10             	add    esp,0x10
c00151db:	84 c0                	test   al,al
c00151dd:	74 24                	je     c0015203 <x87EmulHandler(regs*, void*)+0x5c>
c00151df:	83 c4 0c             	add    esp,0xc
c00151e2:	c3                   	ret    
c00151e3:	83 ec 0c             	sub    esp,0xc
c00151e6:	68 98 bb 02 c0       	push   0xc002bb98
c00151eb:	e8 9f dc ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00151f0:	0f 06                	clts   
c00151f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151f7:	83 c4 10             	add    esp,0x10
c00151fa:	a3 a8 f2 02 c0       	mov    ds:0xc002f2a8,eax
c00151ff:	83 c4 0c             	add    esp,0xc
c0015202:	c3                   	ret    
c0015203:	83 ec 0c             	sub    esp,0xc
c0015206:	68 82 bb 02 c0       	push   0xc002bb82
c001520b:	e8 7f dc ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0015210:	5a                   	pop    edx
c0015211:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015215:	e8 fe fa ff ff       	call   c0014d18 <displayDebugInfo(regs*)>

c001521a <gpFault(regs*, void*)>:
c001521a:	53                   	push   ebx
c001521b:	83 ec 14             	sub    esp,0x14
c001521e:	c7 05 a4 f2 02 c0 aa f6 01 c0 	mov    DWORD PTR ds:0xc002f2a4,0xc001f6aa
c0015228:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001522c:	53                   	push   ebx
c001522d:	e8 78 a4 00 00       	call   c001f6aa <Vm::faultHandler(regs*)>
c0015232:	83 c4 10             	add    esp,0x10
c0015235:	84 c0                	test   al,al
c0015237:	74 05                	je     c001523e <gpFault(regs*, void*)+0x24>
c0015239:	83 c4 08             	add    esp,0x8
c001523c:	5b                   	pop    ebx
c001523d:	c3                   	ret    
c001523e:	83 ec 0c             	sub    esp,0xc
c0015241:	68 a5 bb 02 c0       	push   0xc002bba5
c0015246:	e8 44 dc ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001524b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001524e:	e8 c5 fa ff ff       	call   c0014d18 <displayDebugInfo(regs*)>

c0015253 <pgFault(regs*, void*)>:
c0015253:	83 ec 14             	sub    esp,0x14
c0015256:	0f 20 d0             	mov    eax,cr2
c0015259:	50                   	push   eax
c001525a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001525f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015262:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015268:	e8 3f d8 ff ff       	call   c0012aac <VAS::tryLoadBackOffDisk(unsigned long)>
c001526d:	83 c4 10             	add    esp,0x10
c0015270:	84 c0                	test   al,al
c0015272:	74 04                	je     c0015278 <pgFault(regs*, void*)+0x25>
c0015274:	83 c4 0c             	add    esp,0xc
c0015277:	c3                   	ret    
c0015278:	83 ec 0c             	sub    esp,0xc
c001527b:	68 c0 bb 02 c0       	push   0xc002bbc0
c0015280:	e8 0a dc ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0015285:	58                   	pop    eax
c0015286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001528a:	e8 89 fa ff ff       	call   c0014d18 <displayDebugInfo(regs*)>

c001528f <otherISRHandler(regs*, void*)>:
c001528f:	53                   	push   ebx
c0015290:	83 ec 0c             	sub    esp,0xc
c0015293:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015297:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001529a:	50                   	push   eax
c001529b:	50                   	push   eax
c001529c:	68 cd bb 02 c0       	push   0xc002bbcd
c00152a1:	e8 e9 db ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00152a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152a9:	e8 6a fa ff ff       	call   c0014d18 <displayDebugInfo(regs*)>

c00152ae <opcodeFault(regs*, void*)>:
c00152ae:	55                   	push   ebp
c00152af:	89 e5                	mov    ebp,esp
c00152b1:	56                   	push   esi
c00152b2:	53                   	push   ebx
c00152b3:	83 ec 40             	sub    esp,0x40
c00152b6:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c00152bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152c1:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00152c7:	84 c0                	test   al,al
c00152c9:	74 24                	je     c00152ef <opcodeFault(regs*, void*)+0x41>
c00152cb:	83 ec 0c             	sub    esp,0xc
c00152ce:	68 ec bb 02 c0       	push   0xc002bbec
c00152d3:	e8 b7 db ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00152d8:	83 c4 10             	add    esp,0x10
c00152db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e1:	8d 50 19             	lea    edx,[eax+0x19]
c00152e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152ea:	e9 d5 05 00 00       	jmp    c00158c4 <opcodeFault(regs*, void*)+0x616>
c00152ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152f8:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152fc:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015303:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015306:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015309:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530c:	8a 00                	mov    al,BYTE PTR [eax]
c001530e:	3c f0                	cmp    al,0xf0
c0015310:	75 17                	jne    c0015329 <opcodeFault(regs*, void*)+0x7b>
c0015312:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015318:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001531b:	8d 50 01             	lea    edx,[eax+0x1]
c001531e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015321:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015324:	e9 da 00 00 00       	jmp    c0015403 <opcodeFault(regs*, void*)+0x155>
c0015329:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001532c:	8a 00                	mov    al,BYTE PTR [eax]
c001532e:	3c f2                	cmp    al,0xf2
c0015330:	74 09                	je     c001533b <opcodeFault(regs*, void*)+0x8d>
c0015332:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015335:	8a 00                	mov    al,BYTE PTR [eax]
c0015337:	3c f3                	cmp    al,0xf3
c0015339:	75 1b                	jne    c0015356 <opcodeFault(regs*, void*)+0xa8>
c001533b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001533f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015345:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015348:	8d 50 01             	lea    edx,[eax+0x1]
c001534b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015351:	e9 ad 00 00 00       	jmp    c0015403 <opcodeFault(regs*, void*)+0x155>
c0015356:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015359:	8a 00                	mov    al,BYTE PTR [eax]
c001535b:	3c 66                	cmp    al,0x66
c001535d:	75 1f                	jne    c001537e <opcodeFault(regs*, void*)+0xd0>
c001535f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015363:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015367:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001536a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015370:	8d 50 01             	lea    edx,[eax+0x1]
c0015373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015376:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015379:	e9 85 00 00 00       	jmp    c0015403 <opcodeFault(regs*, void*)+0x155>
c001537e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015381:	8a 00                	mov    al,BYTE PTR [eax]
c0015383:	3c 67                	cmp    al,0x67
c0015385:	75 18                	jne    c001539f <opcodeFault(regs*, void*)+0xf1>
c0015387:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001538b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001538e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015391:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015394:	8d 50 01             	lea    edx,[eax+0x1]
c0015397:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001539d:	eb 64                	jmp    c0015403 <opcodeFault(regs*, void*)+0x155>
c001539f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a2:	8a 00                	mov    al,BYTE PTR [eax]
c00153a4:	3c 2e                	cmp    al,0x2e
c00153a6:	74 09                	je     c00153b1 <opcodeFault(regs*, void*)+0x103>
c00153a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ab:	8a 00                	mov    al,BYTE PTR [eax]
c00153ad:	3c 3e                	cmp    al,0x3e
c00153af:	75 18                	jne    c00153c9 <opcodeFault(regs*, void*)+0x11b>
c00153b1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153b5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153be:	8d 50 01             	lea    edx,[eax+0x1]
c00153c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c7:	eb 3a                	jmp    c0015403 <opcodeFault(regs*, void*)+0x155>
c00153c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cc:	8a 00                	mov    al,BYTE PTR [eax]
c00153ce:	3c 36                	cmp    al,0x36
c00153d0:	74 1b                	je     c00153ed <opcodeFault(regs*, void*)+0x13f>
c00153d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d5:	8a 00                	mov    al,BYTE PTR [eax]
c00153d7:	3c 26                	cmp    al,0x26
c00153d9:	74 12                	je     c00153ed <opcodeFault(regs*, void*)+0x13f>
c00153db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153de:	8a 00                	mov    al,BYTE PTR [eax]
c00153e0:	3c 64                	cmp    al,0x64
c00153e2:	74 09                	je     c00153ed <opcodeFault(regs*, void*)+0x13f>
c00153e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e7:	8a 00                	mov    al,BYTE PTR [eax]
c00153e9:	3c 65                	cmp    al,0x65
c00153eb:	75 16                	jne    c0015403 <opcodeFault(regs*, void*)+0x155>
c00153ed:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153f1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153fa:	8d 50 01             	lea    edx,[eax+0x1]
c00153fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015400:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015403:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015406:	8a 00                	mov    al,BYTE PTR [eax]
c0015408:	3c 0f                	cmp    al,0xf
c001540a:	0f 85 ad 00 00 00    	jne    c00154bd <opcodeFault(regs*, void*)+0x20f>
c0015410:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015413:	40                   	inc    eax
c0015414:	8a 00                	mov    al,BYTE PTR [eax]
c0015416:	3c c2                	cmp    al,0xc2
c0015418:	74 0e                	je     c0015428 <opcodeFault(regs*, void*)+0x17a>
c001541a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541d:	40                   	inc    eax
c001541e:	8a 00                	mov    al,BYTE PTR [eax]
c0015420:	3c c3                	cmp    al,0xc3
c0015422:	0f 85 95 00 00 00    	jne    c00154bd <opcodeFault(regs*, void*)+0x20f>
c0015428:	83 ec 0c             	sub    esp,0xc
c001542b:	68 0f bc 02 c0       	push   0xc002bc0f
c0015430:	e8 5a da ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0015435:	83 c4 10             	add    esp,0x10
c0015438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001543e:	8d 50 01             	lea    edx,[eax+0x1]
c0015441:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015444:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015447:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001544a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544d:	8a 00                	mov    al,BYTE PTR [eax]
c001544f:	8d 50 fe             	lea    edx,[eax-0x2]
c0015452:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015455:	88 10                	mov    BYTE PTR [eax],dl
c0015457:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001545a:	50                   	push   eax
c001545b:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001545e:	50                   	push   eax
c001545f:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015462:	50                   	push   eax
c0015463:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015466:	e8 21 4b 00 00       	call   c0019f8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001546b:	83 c4 10             	add    esp,0x10
c001546e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015471:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015474:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015477:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001547a:	01 d0                	add    eax,edx
c001547c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001547f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015482:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015485:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015488:	48                   	dec    eax
c0015489:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001548c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548f:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015492:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015498:	83 ec 04             	sub    esp,0x4
c001549b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001549e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154a1:	50                   	push   eax
c00154a2:	e8 0d ad fe ff       	call   c00001b4 <voodooXADD>
c00154a7:	83 c4 10             	add    esp,0x10
c00154aa:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00154ad:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00154b0:	01 c2                	add    edx,eax
c00154b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154b8:	e9 07 04 00 00       	jmp    c00158c4 <opcodeFault(regs*, void*)+0x616>
c00154bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c0:	8a 00                	mov    al,BYTE PTR [eax]
c00154c2:	3c 0f                	cmp    al,0xf
c00154c4:	0f 85 8b 01 00 00    	jne    c0015655 <opcodeFault(regs*, void*)+0x3a7>
c00154ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cd:	40                   	inc    eax
c00154ce:	8a 00                	mov    al,BYTE PTR [eax]
c00154d0:	3c c7                	cmp    al,0xc7
c00154d2:	0f 86 7d 01 00 00    	jbe    c0015655 <opcodeFault(regs*, void*)+0x3a7>
c00154d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154db:	40                   	inc    eax
c00154dc:	8a 00                	mov    al,BYTE PTR [eax]
c00154de:	3c cf                	cmp    al,0xcf
c00154e0:	0f 87 6f 01 00 00    	ja     c0015655 <opcodeFault(regs*, void*)+0x3a7>
c00154e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e9:	40                   	inc    eax
c00154ea:	8a 00                	mov    al,BYTE PTR [eax]
c00154ec:	83 c0 38             	add    eax,0x38
c00154ef:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154f2:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154f6:	75 0b                	jne    c0015503 <opcodeFault(regs*, void*)+0x255>
c00154f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154fe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015501:	eb 75                	jmp    c0015578 <opcodeFault(regs*, void*)+0x2ca>
c0015503:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015507:	75 0b                	jne    c0015514 <opcodeFault(regs*, void*)+0x266>
c0015509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001550f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015512:	eb 64                	jmp    c0015578 <opcodeFault(regs*, void*)+0x2ca>
c0015514:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015518:	75 0b                	jne    c0015525 <opcodeFault(regs*, void*)+0x277>
c001551a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015520:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015523:	eb 53                	jmp    c0015578 <opcodeFault(regs*, void*)+0x2ca>
c0015525:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015529:	75 0b                	jne    c0015536 <opcodeFault(regs*, void*)+0x288>
c001552b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015531:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015534:	eb 42                	jmp    c0015578 <opcodeFault(regs*, void*)+0x2ca>
c0015536:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001553a:	75 0b                	jne    c0015547 <opcodeFault(regs*, void*)+0x299>
c001553c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015542:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015545:	eb 31                	jmp    c0015578 <opcodeFault(regs*, void*)+0x2ca>
c0015547:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001554b:	75 0b                	jne    c0015558 <opcodeFault(regs*, void*)+0x2aa>
c001554d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015550:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015553:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015556:	eb 20                	jmp    c0015578 <opcodeFault(regs*, void*)+0x2ca>
c0015558:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001555c:	75 0b                	jne    c0015569 <opcodeFault(regs*, void*)+0x2bb>
c001555e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015561:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015564:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015567:	eb 0f                	jmp    c0015578 <opcodeFault(regs*, void*)+0x2ca>
c0015569:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001556d:	75 09                	jne    c0015578 <opcodeFault(regs*, void*)+0x2ca>
c001556f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015572:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015575:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015578:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001557c:	74 10                	je     c001558e <opcodeFault(regs*, void*)+0x2e0>
c001557e:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015585:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001558c:	eb 2d                	jmp    c00155bb <opcodeFault(regs*, void*)+0x30d>
c001558e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015591:	c1 e0 18             	shl    eax,0x18
c0015594:	89 c2                	mov    edx,eax
c0015596:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015599:	c1 e0 08             	shl    eax,0x8
c001559c:	25 00 00 ff 00       	and    eax,0xff0000
c00155a1:	09 c2                	or     edx,eax
c00155a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155a6:	c1 e8 08             	shr    eax,0x8
c00155a9:	25 00 ff 00 00       	and    eax,0xff00
c00155ae:	09 c2                	or     edx,eax
c00155b0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155b3:	c1 e8 18             	shr    eax,0x18
c00155b6:	09 d0                	or     eax,edx
c00155b8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155bb:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155bf:	75 0b                	jne    c00155cc <opcodeFault(regs*, void*)+0x31e>
c00155c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155c7:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00155ca:	eb 75                	jmp    c0015641 <opcodeFault(regs*, void*)+0x393>
c00155cc:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155d0:	75 0b                	jne    c00155dd <opcodeFault(regs*, void*)+0x32f>
c00155d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155d8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00155db:	eb 64                	jmp    c0015641 <opcodeFault(regs*, void*)+0x393>
c00155dd:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155e1:	75 0b                	jne    c00155ee <opcodeFault(regs*, void*)+0x340>
c00155e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155e9:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00155ec:	eb 53                	jmp    c0015641 <opcodeFault(regs*, void*)+0x393>
c00155ee:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155f2:	75 0b                	jne    c00155ff <opcodeFault(regs*, void*)+0x351>
c00155f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155fa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155fd:	eb 42                	jmp    c0015641 <opcodeFault(regs*, void*)+0x393>
c00155ff:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015603:	75 0b                	jne    c0015610 <opcodeFault(regs*, void*)+0x362>
c0015605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015608:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001560b:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001560e:	eb 31                	jmp    c0015641 <opcodeFault(regs*, void*)+0x393>
c0015610:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015614:	75 0b                	jne    c0015621 <opcodeFault(regs*, void*)+0x373>
c0015616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015619:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001561c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001561f:	eb 20                	jmp    c0015641 <opcodeFault(regs*, void*)+0x393>
c0015621:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015625:	75 0b                	jne    c0015632 <opcodeFault(regs*, void*)+0x384>
c0015627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001562d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015630:	eb 0f                	jmp    c0015641 <opcodeFault(regs*, void*)+0x393>
c0015632:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015636:	75 09                	jne    c0015641 <opcodeFault(regs*, void*)+0x393>
c0015638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001563e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015644:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015647:	8d 50 02             	lea    edx,[eax+0x2]
c001564a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015650:	e9 6f 02 00 00       	jmp    c00158c4 <opcodeFault(regs*, void*)+0x616>
c0015655:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015658:	8a 00                	mov    al,BYTE PTR [eax]
c001565a:	3c 0f                	cmp    al,0xf
c001565c:	0f 85 8d 01 00 00    	jne    c00157ef <opcodeFault(regs*, void*)+0x541>
c0015662:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015665:	40                   	inc    eax
c0015666:	8a 00                	mov    al,BYTE PTR [eax]
c0015668:	3c c7                	cmp    al,0xc7
c001566a:	0f 85 7f 01 00 00    	jne    c00157ef <opcodeFault(regs*, void*)+0x541>
c0015670:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015676:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015679:	8d 50 01             	lea    edx,[eax+0x1]
c001567c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015682:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015685:	50                   	push   eax
c0015686:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015689:	50                   	push   eax
c001568a:	8d 45 bc             	lea    eax,[ebp-0x44]
c001568d:	50                   	push   eax
c001568e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015691:	e8 f6 48 00 00       	call   c0019f8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015696:	83 c4 10             	add    esp,0x10
c0015699:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001569c:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001569f:	83 f0 01             	xor    eax,0x1
c00156a2:	84 c0                	test   al,al
c00156a4:	0f 84 45 01 00 00    	je     c00157ef <opcodeFault(regs*, void*)+0x541>
c00156aa:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00156ad:	3c 01                	cmp    al,0x1
c00156af:	0f 85 3a 01 00 00    	jne    c00157ef <opcodeFault(regs*, void*)+0x541>
c00156b5:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00156b8:	83 f0 01             	xor    eax,0x1
c00156bb:	84 c0                	test   al,al
c00156bd:	0f 84 2c 01 00 00    	je     c00157ef <opcodeFault(regs*, void*)+0x541>
c00156c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00156c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156cc:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00156d3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00156d6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00156d9:	89 c2                	mov    edx,eax
c00156db:	b8 00 00 00 00       	mov    eax,0x0
c00156e0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156e3:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00156ec:	ba 00 00 00 00       	mov    edx,0x0
c00156f1:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156f4:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156fd:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015700:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015707:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001570a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001570d:	89 c2                	mov    edx,eax
c001570f:	b8 00 00 00 00       	mov    eax,0x0
c0015714:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015717:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001571a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015720:	ba 00 00 00 00       	mov    edx,0x0
c0015725:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015728:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001572b:	fa                   	cli    
c001572c:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0015731:	40                   	inc    eax
c0015732:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c0015737:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001573a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001573d:	8b 00                	mov    eax,DWORD PTR [eax]
c001573f:	89 c1                	mov    ecx,eax
c0015741:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015744:	89 cb                	mov    ebx,ecx
c0015746:	89 d0                	mov    eax,edx
c0015748:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001574b:	89 c6                	mov    esi,eax
c001574d:	89 f0                	mov    eax,esi
c001574f:	09 d8                	or     eax,ebx
c0015751:	85 c0                	test   eax,eax
c0015753:	75 21                	jne    c0015776 <opcodeFault(regs*, void*)+0x4c8>
c0015755:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015758:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001575b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001575e:	89 01                	mov    DWORD PTR [ecx],eax
c0015760:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015766:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015769:	83 c8 40             	or     eax,0x40
c001576c:	89 c2                	mov    edx,eax
c001576e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015771:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015774:	eb 3e                	jmp    c00157b4 <opcodeFault(regs*, void*)+0x506>
c0015776:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015779:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001577c:	8b 00                	mov    eax,DWORD PTR [eax]
c001577e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015781:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015784:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001578d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015790:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015793:	89 d0                	mov    eax,edx
c0015795:	31 d2                	xor    edx,edx
c0015797:	89 c3                	mov    ebx,eax
c0015799:	89 d6                	mov    esi,edx
c001579b:	89 da                	mov    edx,ebx
c001579d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a0:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157a9:	83 e0 bf             	and    eax,0xffffffbf
c00157ac:	89 c2                	mov    edx,eax
c00157ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157b4:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c00157b9:	48                   	dec    eax
c00157ba:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c00157bf:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c00157c4:	85 c0                	test   eax,eax
c00157c6:	75 01                	jne    c00157c9 <opcodeFault(regs*, void*)+0x51b>
c00157c8:	fb                   	sti    
c00157c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157cf:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00157d2:	01 c2                	add    edx,eax
c00157d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157da:	83 ec 0c             	sub    esp,0xc
c00157dd:	68 1e bc 02 c0       	push   0xc002bc1e
c00157e2:	e8 a8 d6 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00157e7:	83 c4 10             	add    esp,0x10
c00157ea:	e9 d5 00 00 00       	jmp    c00158c4 <opcodeFault(regs*, void*)+0x616>
c00157ef:	83 ec 0c             	sub    esp,0xc
c00157f2:	68 31 bc 02 c0       	push   0xc002bc31
c00157f7:	e8 93 d6 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00157fc:	83 c4 10             	add    esp,0x10
c00157ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015802:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015808:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001580b:	c1 e0 04             	shl    eax,0x4
c001580e:	01 d0                	add    eax,edx
c0015810:	83 c0 03             	add    eax,0x3
c0015813:	8a 00                	mov    al,BYTE PTR [eax]
c0015815:	0f b6 d8             	movzx  ebx,al
c0015818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001581e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015821:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015824:	c1 e0 04             	shl    eax,0x4
c0015827:	01 d0                	add    eax,edx
c0015829:	83 c0 02             	add    eax,0x2
c001582c:	8a 00                	mov    al,BYTE PTR [eax]
c001582e:	0f b6 c8             	movzx  ecx,al
c0015831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015834:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001583d:	c1 e0 04             	shl    eax,0x4
c0015840:	01 d0                	add    eax,edx
c0015842:	40                   	inc    eax
c0015843:	8a 00                	mov    al,BYTE PTR [eax]
c0015845:	0f b6 d0             	movzx  edx,al
c0015848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001584e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015851:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015854:	c1 e0 04             	shl    eax,0x4
c0015857:	01 f0                	add    eax,esi
c0015859:	8a 00                	mov    al,BYTE PTR [eax]
c001585b:	0f b6 c0             	movzx  eax,al
c001585e:	83 ec 0c             	sub    esp,0xc
c0015861:	53                   	push   ebx
c0015862:	51                   	push   ecx
c0015863:	52                   	push   edx
c0015864:	50                   	push   eax
c0015865:	68 44 bc 02 c0       	push   0xc002bc44
c001586a:	e8 20 d6 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001586f:	83 c4 20             	add    esp,0x20
c0015872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015875:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015878:	83 c0 03             	add    eax,0x3
c001587b:	8a 00                	mov    al,BYTE PTR [eax]
c001587d:	0f b6 d8             	movzx  ebx,al
c0015880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015883:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015886:	83 c0 02             	add    eax,0x2
c0015889:	8a 00                	mov    al,BYTE PTR [eax]
c001588b:	0f b6 c8             	movzx  ecx,al
c001588e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015891:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015894:	40                   	inc    eax
c0015895:	8a 00                	mov    al,BYTE PTR [eax]
c0015897:	0f b6 d0             	movzx  edx,al
c001589a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158a0:	8a 00                	mov    al,BYTE PTR [eax]
c00158a2:	0f b6 c0             	movzx  eax,al
c00158a5:	83 ec 0c             	sub    esp,0xc
c00158a8:	53                   	push   ebx
c00158a9:	51                   	push   ecx
c00158aa:	52                   	push   edx
c00158ab:	50                   	push   eax
c00158ac:	68 6c bc 02 c0       	push   0xc002bc6c
c00158b1:	e8 d9 d5 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00158b6:	83 c4 20             	add    esp,0x20
c00158b9:	83 ec 0c             	sub    esp,0xc
c00158bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00158bf:	e8 54 f4 ff ff       	call   c0014d18 <displayDebugInfo(regs*)>
c00158c4:	8d 65 f8             	lea    esp,[ebp-0x8]
c00158c7:	5b                   	pop    ebx
c00158c8:	5e                   	pop    esi
c00158c9:	5d                   	pop    ebp
c00158ca:	c3                   	ret    

c00158cb <displayProgramFault(char const*)>:
c00158cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158d3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00158d9:	85 c0                	test   eax,eax
c00158db:	74 15                	je     c00158f2 <displayProgramFault(char const*)+0x27>
c00158dd:	83 ec 0c             	sub    esp,0xc
c00158e0:	6a 04                	push   0x4
c00158e2:	6a 0f                	push   0xf
c00158e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158e8:	50                   	push   eax
c00158e9:	e8 92 b4 ff ff       	call   c0010d80 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00158ee:	83 c4 1c             	add    esp,0x1c
c00158f1:	c3                   	ret    
c00158f2:	c3                   	ret    

c00158f3 <setupInterruptController()>:
c00158f3:	55                   	push   ebp
c00158f4:	89 e5                	mov    ebp,esp
c00158f6:	53                   	push   ebx
c00158f7:	83 ec 24             	sub    esp,0x24
c00158fa:	b8 00 00 00 00       	mov    eax,0x0
c00158ff:	85 c0                	test   eax,eax
c0015901:	0f 95 c0             	setne  al
c0015904:	84 c0                	test   al,al
c0015906:	74 5b                	je     c0015963 <setupInterruptController()+0x70>
c0015908:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001590f:	83 ec 0c             	sub    esp,0xc
c0015912:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015915:	e8 a6 9f ff ff       	call   c000f8c0 <malloc>
c001591a:	83 c4 10             	add    esp,0x10
c001591d:	89 c3                	mov    ebx,eax
c001591f:	83 ec 0c             	sub    esp,0xc
c0015922:	53                   	push   ebx
c0015923:	e8 ce 0a 01 00       	call   c00263f6 <APIC::APIC()>
c0015928:	83 c4 10             	add    esp,0x10
c001592b:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001592e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015931:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015934:	8b 00                	mov    eax,DWORD PTR [eax]
c0015936:	83 c0 08             	add    eax,0x8
c0015939:	8b 00                	mov    eax,DWORD PTR [eax]
c001593b:	6a 00                	push   0x0
c001593d:	6a 00                	push   0x0
c001593f:	6a 00                	push   0x0
c0015941:	52                   	push   edx
c0015942:	ff d0                	call   eax
c0015944:	83 c4 10             	add    esp,0x10
c0015947:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c001594c:	83 ec 08             	sub    esp,0x8
c001594f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015952:	50                   	push   eax
c0015953:	e8 62 e9 ff ff       	call   c00142ba <Device::addChild(Device*)>
c0015958:	83 c4 10             	add    esp,0x10
c001595b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001595e:	e9 89 03 00 00       	jmp    c0015cec <setupInterruptController()+0x3f9>
c0015963:	a0 a0 1a 03 c0       	mov    al,ds:0xc0031aa0
c0015968:	84 c0                	test   al,al
c001596a:	75 24                	jne    c0015990 <setupInterruptController()+0x9d>
c001596c:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0015971:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015977:	83 e2 fe             	and    edx,0xfffffffe
c001597a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015980:	83 ec 0c             	sub    esp,0xc
c0015983:	68 91 bc 02 c0       	push   0xc002bc91
c0015988:	e8 02 d5 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001598d:	83 c4 10             	add    esp,0x10
c0015990:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0015995:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001599b:	83 e0 01             	and    eax,0x1
c001599e:	84 c0                	test   al,al
c00159a0:	0f 95 c0             	setne  al
c00159a3:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159a6:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159ad:	83 ec 0c             	sub    esp,0xc
c00159b0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159b3:	e8 08 9f ff ff       	call   c000f8c0 <malloc>
c00159b8:	83 c4 10             	add    esp,0x10
c00159bb:	89 c3                	mov    ebx,eax
c00159bd:	83 ec 0c             	sub    esp,0xc
c00159c0:	53                   	push   ebx
c00159c1:	e8 88 0f 01 00       	call   c002694e <PIC::PIC()>
c00159c6:	83 c4 10             	add    esp,0x10
c00159c9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159cc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d4:	83 c0 08             	add    eax,0x8
c00159d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d9:	6a 00                	push   0x0
c00159db:	6a 00                	push   0x0
c00159dd:	6a 00                	push   0x0
c00159df:	52                   	push   edx
c00159e0:	ff d0                	call   eax
c00159e2:	83 c4 10             	add    esp,0x10
c00159e5:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159e9:	74 73                	je     c0015a5e <setupInterruptController()+0x16b>
c00159eb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f3:	83 c0 0c             	add    eax,0xc
c00159f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f8:	6a 00                	push   0x0
c00159fa:	6a 00                	push   0x0
c00159fc:	6a 00                	push   0x0
c00159fe:	52                   	push   edx
c00159ff:	ff d0                	call   eax
c0015a01:	83 c4 10             	add    esp,0x10
c0015a04:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a08:	74 15                	je     c0015a1f <setupInterruptController()+0x12c>
c0015a0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0f:	83 c0 04             	add    eax,0x4
c0015a12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a14:	83 ec 0c             	sub    esp,0xc
c0015a17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a1a:	ff d0                	call   eax
c0015a1c:	83 c4 10             	add    esp,0x10
c0015a1f:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a26:	83 ec 0c             	sub    esp,0xc
c0015a29:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a2c:	e8 8f 9e ff ff       	call   c000f8c0 <malloc>
c0015a31:	83 c4 10             	add    esp,0x10
c0015a34:	89 c3                	mov    ebx,eax
c0015a36:	83 ec 0c             	sub    esp,0xc
c0015a39:	53                   	push   ebx
c0015a3a:	e8 b7 09 01 00       	call   c00263f6 <APIC::APIC()>
c0015a3f:	83 c4 10             	add    esp,0x10
c0015a42:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a45:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4d:	83 c0 08             	add    eax,0x8
c0015a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a52:	6a 00                	push   0x0
c0015a54:	6a 00                	push   0x0
c0015a56:	6a 00                	push   0x0
c0015a58:	52                   	push   edx
c0015a59:	ff d0                	call   eax
c0015a5b:	83 c4 10             	add    esp,0x10
c0015a5e:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0015a63:	83 ec 08             	sub    esp,0x8
c0015a66:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a69:	50                   	push   eax
c0015a6a:	e8 4b e8 ff ff       	call   c00142ba <Device::addChild(Device*)>
c0015a6f:	83 c4 10             	add    esp,0x10
c0015a72:	c7 05 a8 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2a8,0x0
c0015a7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a81:	83 c0 24             	add    eax,0x24
c0015a84:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a86:	6a 00                	push   0x0
c0015a88:	68 8f 52 01 c0       	push   0xc001528f
c0015a8d:	6a 00                	push   0x0
c0015a8f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a92:	ff d0                	call   eax
c0015a94:	83 c4 10             	add    esp,0x10
c0015a97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9c:	83 c0 24             	add    eax,0x24
c0015a9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa1:	6a 00                	push   0x0
c0015aa3:	68 8f 52 01 c0       	push   0xc001528f
c0015aa8:	6a 01                	push   0x1
c0015aaa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aad:	ff d0                	call   eax
c0015aaf:	83 c4 10             	add    esp,0x10
c0015ab2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab7:	83 c0 24             	add    eax,0x24
c0015aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abc:	6a 00                	push   0x0
c0015abe:	68 75 4b 01 c0       	push   0xc0014b75
c0015ac3:	6a 02                	push   0x2
c0015ac5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac8:	ff d0                	call   eax
c0015aca:	83 c4 10             	add    esp,0x10
c0015acd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad2:	83 c0 24             	add    eax,0x24
c0015ad5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad7:	6a 00                	push   0x0
c0015ad9:	68 8f 52 01 c0       	push   0xc001528f
c0015ade:	6a 03                	push   0x3
c0015ae0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae3:	ff d0                	call   eax
c0015ae5:	83 c4 10             	add    esp,0x10
c0015ae8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aed:	83 c0 24             	add    eax,0x24
c0015af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af2:	6a 00                	push   0x0
c0015af4:	68 8f 52 01 c0       	push   0xc001528f
c0015af9:	6a 04                	push   0x4
c0015afb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015afe:	ff d0                	call   eax
c0015b00:	83 c4 10             	add    esp,0x10
c0015b03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b06:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b08:	83 c0 24             	add    eax,0x24
c0015b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0d:	6a 00                	push   0x0
c0015b0f:	68 8f 52 01 c0       	push   0xc001528f
c0015b14:	6a 05                	push   0x5
c0015b16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b19:	ff d0                	call   eax
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b21:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b23:	83 c0 24             	add    eax,0x24
c0015b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b28:	6a 00                	push   0x0
c0015b2a:	68 ae 52 01 c0       	push   0xc00152ae
c0015b2f:	6a 06                	push   0x6
c0015b31:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b34:	ff d0                	call   eax
c0015b36:	83 c4 10             	add    esp,0x10
c0015b39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3e:	83 c0 24             	add    eax,0x24
c0015b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b43:	6a 00                	push   0x0
c0015b45:	68 a7 51 01 c0       	push   0xc00151a7
c0015b4a:	6a 07                	push   0x7
c0015b4c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4f:	ff d0                	call   eax
c0015b51:	83 c4 10             	add    esp,0x10
c0015b54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b57:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b59:	83 c0 24             	add    eax,0x24
c0015b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5e:	6a 00                	push   0x0
c0015b60:	68 90 49 01 c0       	push   0xc0014990
c0015b65:	6a 08                	push   0x8
c0015b67:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6a:	ff d0                	call   eax
c0015b6c:	83 c4 10             	add    esp,0x10
c0015b6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b74:	83 c0 24             	add    eax,0x24
c0015b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b79:	6a 00                	push   0x0
c0015b7b:	68 8f 52 01 c0       	push   0xc001528f
c0015b80:	6a 09                	push   0x9
c0015b82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b85:	ff d0                	call   eax
c0015b87:	83 c4 10             	add    esp,0x10
c0015b8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8f:	83 c0 24             	add    eax,0x24
c0015b92:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b94:	6a 00                	push   0x0
c0015b96:	68 8f 52 01 c0       	push   0xc001528f
c0015b9b:	6a 0a                	push   0xa
c0015b9d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba0:	ff d0                	call   eax
c0015ba2:	83 c4 10             	add    esp,0x10
c0015ba5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baa:	83 c0 24             	add    eax,0x24
c0015bad:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baf:	6a 00                	push   0x0
c0015bb1:	68 8f 52 01 c0       	push   0xc001528f
c0015bb6:	6a 0b                	push   0xb
c0015bb8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbb:	ff d0                	call   eax
c0015bbd:	83 c4 10             	add    esp,0x10
c0015bc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc5:	83 c0 24             	add    eax,0x24
c0015bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bca:	6a 00                	push   0x0
c0015bcc:	68 8f 52 01 c0       	push   0xc001528f
c0015bd1:	6a 0c                	push   0xc
c0015bd3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd6:	ff d0                	call   eax
c0015bd8:	83 c4 10             	add    esp,0x10
c0015bdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be0:	83 c0 24             	add    eax,0x24
c0015be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be5:	6a 00                	push   0x0
c0015be7:	68 1a 52 01 c0       	push   0xc001521a
c0015bec:	6a 0d                	push   0xd
c0015bee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf1:	ff d0                	call   eax
c0015bf3:	83 c4 10             	add    esp,0x10
c0015bf6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfb:	83 c0 24             	add    eax,0x24
c0015bfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c00:	6a 00                	push   0x0
c0015c02:	68 53 52 01 c0       	push   0xc0015253
c0015c07:	6a 0e                	push   0xe
c0015c09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c0c:	ff d0                	call   eax
c0015c0e:	83 c4 10             	add    esp,0x10
c0015c11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c16:	83 c0 24             	add    eax,0x24
c0015c19:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1b:	6a 00                	push   0x0
c0015c1d:	68 8f 52 01 c0       	push   0xc001528f
c0015c22:	6a 0f                	push   0xf
c0015c24:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c27:	ff d0                	call   eax
c0015c29:	83 c4 10             	add    esp,0x10
c0015c2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c31:	83 c0 24             	add    eax,0x24
c0015c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c36:	6a 00                	push   0x0
c0015c38:	68 8f 52 01 c0       	push   0xc001528f
c0015c3d:	6a 10                	push   0x10
c0015c3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c42:	ff d0                	call   eax
c0015c44:	83 c4 10             	add    esp,0x10
c0015c47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4c:	83 c0 24             	add    eax,0x24
c0015c4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c51:	6a 00                	push   0x0
c0015c53:	68 8f 52 01 c0       	push   0xc001528f
c0015c58:	6a 11                	push   0x11
c0015c5a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c5d:	ff d0                	call   eax
c0015c5f:	83 c4 10             	add    esp,0x10
c0015c62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c67:	83 c0 24             	add    eax,0x24
c0015c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6c:	6a 00                	push   0x0
c0015c6e:	68 8f 52 01 c0       	push   0xc001528f
c0015c73:	6a 12                	push   0x12
c0015c75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c78:	ff d0                	call   eax
c0015c7a:	83 c4 10             	add    esp,0x10
c0015c7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c82:	83 c0 24             	add    eax,0x24
c0015c85:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c87:	6a 00                	push   0x0
c0015c89:	68 8f 52 01 c0       	push   0xc001528f
c0015c8e:	6a 13                	push   0x13
c0015c90:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c93:	ff d0                	call   eax
c0015c95:	83 c4 10             	add    esp,0x10
c0015c98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9d:	83 c0 24             	add    eax,0x24
c0015ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca2:	6a 00                	push   0x0
c0015ca4:	68 8f 52 01 c0       	push   0xc001528f
c0015ca9:	6a 14                	push   0x14
c0015cab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cae:	ff d0                	call   eax
c0015cb0:	83 c4 10             	add    esp,0x10
c0015cb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb8:	83 c0 24             	add    eax,0x24
c0015cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbd:	6a 00                	push   0x0
c0015cbf:	68 8f 52 01 c0       	push   0xc001528f
c0015cc4:	6a 1e                	push   0x1e
c0015cc6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc9:	ff d0                	call   eax
c0015ccb:	83 c4 10             	add    esp,0x10
c0015cce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd3:	83 c0 24             	add    eax,0x24
c0015cd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd8:	6a 00                	push   0x0
c0015cda:	68 2f cd 01 c0       	push   0xc001cd2f
c0015cdf:	6a 60                	push   0x60
c0015ce1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce4:	ff d0                	call   eax
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cec:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cef:	c9                   	leave  
c0015cf0:	c3                   	ret    
c0015cf1:	90                   	nop

c0015cf2 <InterruptController::convertLegacyIRQNumber(int)>:
c0015cf2:	55                   	push   ebp
c0015cf3:	89 e5                	mov    ebp,esp
c0015cf5:	83 ec 08             	sub    esp,0x8
c0015cf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cfb:	83 ec 0c             	sub    esp,0xc
c0015cfe:	50                   	push   eax
c0015cff:	e8 a2 e8 ff ff       	call   c00145a6 <Device::getName()>
c0015d04:	83 c4 10             	add    esp,0x10
c0015d07:	8a 00                	mov    al,BYTE PTR [eax]
c0015d09:	3c 41                	cmp    al,0x41
c0015d0b:	0f 94 c0             	sete   al
c0015d0e:	84 c0                	test   al,al
c0015d10:	74 28                	je     c0015d3a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d12:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d16:	7f 12                	jg     c0015d2a <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d1b:	05 60 e3 02 c0       	add    eax,0xc002e360
c0015d20:	8a 00                	mov    al,BYTE PTR [eax]
c0015d22:	0f b6 c0             	movzx  eax,al
c0015d25:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d28:	eb 10                	jmp    c0015d3a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d2a:	83 ec 0c             	sub    esp,0xc
c0015d2d:	68 80 b9 02 c0       	push   0xc002b980
c0015d32:	e8 c0 4b 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0015d37:	83 c4 10             	add    esp,0x10
c0015d3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d3d:	c9                   	leave  
c0015d3e:	c3                   	ret    
c0015d3f:	90                   	nop

c0015d40 <startGUI(void*)>:
c0015d40:	55                   	push   ebp
c0015d41:	89 e5                	mov    ebp,esp
c0015d43:	53                   	push   ebx
c0015d44:	83 ec 04             	sub    esp,0x4
c0015d47:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0015d4c:	48                   	dec    eax
c0015d4d:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c0015d52:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0015d57:	85 c0                	test   eax,eax
c0015d59:	75 01                	jne    c0015d5c <startGUI(void*)+0x1c>
c0015d5b:	fb                   	sti    
c0015d5c:	8b 1d 08 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f108
c0015d62:	83 ec 08             	sub    esp,0x8
c0015d65:	6a 01                	push   0x1
c0015d67:	68 f4 bc 02 c0       	push   0xc002bcf4
c0015d6c:	e8 95 7f 00 00       	call   c001dd06 <Thr::loadDLL(char const*, bool)>
c0015d71:	83 c4 10             	add    esp,0x10
c0015d74:	83 ec 08             	sub    esp,0x8
c0015d77:	53                   	push   ebx
c0015d78:	50                   	push   eax
c0015d79:	e8 b3 81 00 00       	call   c001df31 <Thr::executeDLL(unsigned long, void*)>
c0015d7e:	83 c4 10             	add    esp,0x10
c0015d81:	8b 1d 08 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f108
c0015d87:	83 ec 08             	sub    esp,0x8
c0015d8a:	6a 01                	push   0x1
c0015d8c:	68 0e bd 02 c0       	push   0xc002bd0e
c0015d91:	e8 70 7f 00 00       	call   c001dd06 <Thr::loadDLL(char const*, bool)>
c0015d96:	83 c4 10             	add    esp,0x10
c0015d99:	83 ec 08             	sub    esp,0x8
c0015d9c:	53                   	push   ebx
c0015d9d:	50                   	push   eax
c0015d9e:	e8 8e 81 00 00       	call   c001df31 <Thr::executeDLL(unsigned long, void*)>
c0015da3:	83 c4 10             	add    esp,0x10
c0015da6:	90                   	nop
c0015da7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015daa:	c9                   	leave  
c0015dab:	c3                   	ret    

c0015dac <startGUIVESA(void*)>:
c0015dac:	55                   	push   ebp
c0015dad:	89 e5                	mov    ebp,esp
c0015daf:	53                   	push   ebx
c0015db0:	83 ec 04             	sub    esp,0x4
c0015db3:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0015db8:	48                   	dec    eax
c0015db9:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c0015dbe:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0015dc3:	85 c0                	test   eax,eax
c0015dc5:	75 01                	jne    c0015dc8 <startGUIVESA(void*)+0x1c>
c0015dc7:	fb                   	sti    
c0015dc8:	8b 1d 08 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f108
c0015dce:	83 ec 08             	sub    esp,0x8
c0015dd1:	6a 01                	push   0x1
c0015dd3:	68 28 bd 02 c0       	push   0xc002bd28
c0015dd8:	e8 29 7f 00 00       	call   c001dd06 <Thr::loadDLL(char const*, bool)>
c0015ddd:	83 c4 10             	add    esp,0x10
c0015de0:	83 ec 08             	sub    esp,0x8
c0015de3:	53                   	push   ebx
c0015de4:	50                   	push   eax
c0015de5:	e8 47 81 00 00       	call   c001df31 <Thr::executeDLL(unsigned long, void*)>
c0015dea:	83 c4 10             	add    esp,0x10
c0015ded:	8b 1d 08 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f108
c0015df3:	83 ec 08             	sub    esp,0x8
c0015df6:	6a 01                	push   0x1
c0015df8:	68 0e bd 02 c0       	push   0xc002bd0e
c0015dfd:	e8 04 7f 00 00       	call   c001dd06 <Thr::loadDLL(char const*, bool)>
c0015e02:	83 c4 10             	add    esp,0x10
c0015e05:	83 ec 08             	sub    esp,0x8
c0015e08:	53                   	push   ebx
c0015e09:	50                   	push   eax
c0015e0a:	e8 22 81 00 00       	call   c001df31 <Thr::executeDLL(unsigned long, void*)>
c0015e0f:	83 c4 10             	add    esp,0x10
c0015e12:	90                   	nop
c0015e13:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e16:	c9                   	leave  
c0015e17:	c3                   	ret    

c0015e18 <sendKeyToTerminal(unsigned char)>:
c0015e18:	55                   	push   ebp
c0015e19:	89 e5                	mov    ebp,esp
c0015e1b:	83 ec 28             	sub    esp,0x28
c0015e1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e21:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e24:	a1 e4 f1 02 c0       	mov    eax,ds:0xc002f1e4
c0015e29:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e2d:	83 ec 08             	sub    esp,0x8
c0015e30:	52                   	push   edx
c0015e31:	50                   	push   eax
c0015e32:	e8 21 b4 ff ff       	call   c0011258 <VgaText::receiveKey(unsigned char)>
c0015e37:	83 c4 10             	add    esp,0x10
c0015e3a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e3e:	0f 85 8f 00 00 00    	jne    c0015ed3 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e44:	fa                   	cli    
c0015e45:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0015e4a:	40                   	inc    eax
c0015e4b:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c0015e50:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c0015e55:	40                   	inc    eax
c0015e56:	a3 44 26 03 c0       	mov    ds:0xc0032644,eax
c0015e5b:	a1 c0 f2 02 c0       	mov    eax,ds:0xc002f2c0
c0015e60:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e63:	c7 05 c0 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x0
c0015e6d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e71:	74 1f                	je     c0015e92 <sendKeyToTerminal(unsigned char)+0x7a>
c0015e73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e76:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e79:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e7c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e7f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e82:	83 ec 0c             	sub    esp,0xc
c0015e85:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e88:	e8 1b 8d 00 00       	call   c001eba8 <unblockTask(ThreadControlBlock*)>
c0015e8d:	83 c4 10             	add    esp,0x10
c0015e90:	eb db                	jmp    c0015e6d <sendKeyToTerminal(unsigned char)+0x55>
c0015e92:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c0015e97:	48                   	dec    eax
c0015e98:	a3 44 26 03 c0       	mov    ds:0xc0032644,eax
c0015e9d:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c0015ea2:	85 c0                	test   eax,eax
c0015ea4:	75 18                	jne    c0015ebe <sendKeyToTerminal(unsigned char)+0xa6>
c0015ea6:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0015eab:	85 c0                	test   eax,eax
c0015ead:	74 0f                	je     c0015ebe <sendKeyToTerminal(unsigned char)+0xa6>
c0015eaf:	c7 05 40 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x0
c0015eb9:	e8 26 88 00 00       	call   c001e6e4 <schedule()>
c0015ebe:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0015ec3:	48                   	dec    eax
c0015ec4:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c0015ec9:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0015ece:	85 c0                	test   eax,eax
c0015ed0:	75 01                	jne    c0015ed3 <sendKeyToTerminal(unsigned char)+0xbb>
c0015ed2:	fb                   	sti    
c0015ed3:	90                   	nop
c0015ed4:	c9                   	leave  
c0015ed5:	c3                   	ret    

c0015ed6 <sendKeyboardToken(KeyboardToken)>:
c0015ed6:	55                   	push   ebp
c0015ed7:	89 e5                	mov    ebp,esp
c0015ed9:	83 ec 18             	sub    esp,0x18
c0015edc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee2:	0f b7 c0             	movzx  eax,ax
c0015ee5:	83 f2 01             	xor    edx,0x1
c0015ee8:	88 90 e0 f2 02 c0    	mov    BYTE PTR [eax-0x3ffd0d20],dl
c0015eee:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015ef3:	85 c0                	test   eax,eax
c0015ef5:	74 24                	je     c0015f1b <sendKeyboardToken(KeyboardToken)+0x45>
c0015ef7:	8b 0d c8 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f2c8
c0015efd:	83 ec 04             	sub    esp,0x4
c0015f00:	68 e0 f2 02 c0       	push   0xc002f2e0
c0015f05:	83 ec 08             	sub    esp,0x8
c0015f08:	89 e2                	mov    edx,esp
c0015f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0d:	89 02                	mov    DWORD PTR [edx],eax
c0015f0f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f12:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f16:	ff d1                	call   ecx
c0015f18:	83 c4 10             	add    esp,0x10
c0015f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1e:	66 3d 03 02          	cmp    ax,0x203
c0015f22:	75 07                	jne    c0015f2b <sendKeyboardToken(KeyboardToken)+0x55>
c0015f24:	a0 e0 f3 02 c0       	mov    al,ds:0xc002f3e0
c0015f29:	84 c0                	test   al,al
c0015f2b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f2f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f32:	a0 e8 f6 02 c0       	mov    al,ds:0xc002f6e8
c0015f37:	38 c2                	cmp    dl,al
c0015f39:	74 1c                	je     c0015f57 <sendKeyboardToken(KeyboardToken)+0x81>
c0015f3b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f3e:	a2 e8 f6 02 c0       	mov    ds:0xc002f6e8,al
c0015f43:	a0 e8 f6 02 c0       	mov    al,ds:0xc002f6e8
c0015f48:	0f b6 c0             	movzx  eax,al
c0015f4b:	83 ec 0c             	sub    esp,0xc
c0015f4e:	50                   	push   eax
c0015f4f:	e8 8c a6 ff ff       	call   c00105e0 <setTerminalScrollLock(bool)>
c0015f54:	83 c4 10             	add    esp,0x10
c0015f57:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f5a:	84 c0                	test   al,al
c0015f5c:	0f 84 ae 00 00 00    	je     c0016010 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f65:	66 3d 10 03          	cmp    ax,0x310
c0015f69:	75 06                	jne    c0015f71 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f6b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f74:	66 3d 11 03          	cmp    ax,0x311
c0015f78:	75 06                	jne    c0015f80 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f7a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f83:	66 3d 12 03          	cmp    ax,0x312
c0015f87:	75 06                	jne    c0015f8f <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f89:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f92:	66 3d 13 03          	cmp    ax,0x313
c0015f96:	75 06                	jne    c0015f9e <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f98:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa1:	66 3d 14 03          	cmp    ax,0x314
c0015fa5:	75 06                	jne    c0015fad <sendKeyboardToken(KeyboardToken)+0xd7>
c0015fa7:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb0:	66 3d 15 03          	cmp    ax,0x315
c0015fb4:	75 06                	jne    c0015fbc <sendKeyboardToken(KeyboardToken)+0xe6>
c0015fb6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbf:	66 3d 16 03          	cmp    ax,0x316
c0015fc3:	75 06                	jne    c0015fcb <sendKeyboardToken(KeyboardToken)+0xf5>
c0015fc5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fce:	66 3d 17 03          	cmp    ax,0x317
c0015fd2:	75 06                	jne    c0015fda <sendKeyboardToken(KeyboardToken)+0x104>
c0015fd4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fdd:	66 3d 18 03          	cmp    ax,0x318
c0015fe1:	75 06                	jne    c0015fe9 <sendKeyboardToken(KeyboardToken)+0x113>
c0015fe3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fec:	66 3d 19 03          	cmp    ax,0x319
c0015ff0:	75 06                	jne    c0015ff8 <sendKeyboardToken(KeyboardToken)+0x122>
c0015ff2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffb:	66 3d 1a 03          	cmp    ax,0x31a
c0015fff:	0f 85 c9 00 00 00    	jne    c00160ce <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016005:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001600b:	e9 be 00 00 00       	jmp    c00160ce <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016013:	66 3d 10 03          	cmp    ax,0x310
c0016017:	75 0a                	jne    c0016023 <sendKeyboardToken(KeyboardToken)+0x14d>
c0016019:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001601f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016026:	66 3d 11 03          	cmp    ax,0x311
c001602a:	75 0a                	jne    c0016036 <sendKeyboardToken(KeyboardToken)+0x160>
c001602c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016032:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016039:	66 3d 12 03          	cmp    ax,0x312
c001603d:	75 0a                	jne    c0016049 <sendKeyboardToken(KeyboardToken)+0x173>
c001603f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016045:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604c:	66 3d 13 03          	cmp    ax,0x313
c0016050:	75 0a                	jne    c001605c <sendKeyboardToken(KeyboardToken)+0x186>
c0016052:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016058:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605f:	66 3d 14 03          	cmp    ax,0x314
c0016063:	75 0a                	jne    c001606f <sendKeyboardToken(KeyboardToken)+0x199>
c0016065:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001606b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001606f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016072:	66 3d 15 03          	cmp    ax,0x315
c0016076:	75 0a                	jne    c0016082 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016078:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001607e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016085:	66 3d 16 03          	cmp    ax,0x316
c0016089:	75 0a                	jne    c0016095 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001608b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016091:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016098:	66 3d 17 03          	cmp    ax,0x317
c001609c:	75 0a                	jne    c00160a8 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001609e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ab:	66 3d 18 03          	cmp    ax,0x318
c00160af:	75 0a                	jne    c00160bb <sendKeyboardToken(KeyboardToken)+0x1e5>
c00160b1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00160b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160be:	66 3d 19 03          	cmp    ax,0x319
c00160c2:	75 0a                	jne    c00160ce <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160c4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160ca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d1:	66 3d 00 02          	cmp    ax,0x200
c00160d5:	75 2c                	jne    c0016103 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160d7:	a0 e0 f6 02 c0       	mov    al,ds:0xc002f6e0
c00160dc:	83 f0 01             	xor    eax,0x1
c00160df:	84 c0                	test   al,al
c00160e1:	74 20                	je     c0016103 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160e3:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c00160e8:	6a 01                	push   0x1
c00160ea:	6a 00                	push   0x0
c00160ec:	68 40 5d 01 c0       	push   0xc0015d40
c00160f1:	50                   	push   eax
c00160f2:	e8 a9 83 00 00       	call   c001e4a0 <Process::createThread(void (*)(void*), void*, int)>
c00160f7:	83 c4 10             	add    esp,0x10
c00160fa:	c6 05 e0 f6 02 c0 01 	mov    BYTE PTR ds:0xc002f6e0,0x1
c0016101:	eb 33                	jmp    c0016136 <sendKeyboardToken(KeyboardToken)+0x260>
c0016103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016106:	66 3d 01 02          	cmp    ax,0x201
c001610a:	75 2a                	jne    c0016136 <sendKeyboardToken(KeyboardToken)+0x260>
c001610c:	a0 e0 f6 02 c0       	mov    al,ds:0xc002f6e0
c0016111:	83 f0 01             	xor    eax,0x1
c0016114:	84 c0                	test   al,al
c0016116:	74 1e                	je     c0016136 <sendKeyboardToken(KeyboardToken)+0x260>
c0016118:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001611d:	6a 01                	push   0x1
c001611f:	6a 00                	push   0x0
c0016121:	68 ac 5d 01 c0       	push   0xc0015dac
c0016126:	50                   	push   eax
c0016127:	e8 74 83 00 00       	call   c001e4a0 <Process::createThread(void (*)(void*), void*, int)>
c001612c:	83 c4 10             	add    esp,0x10
c001612f:	c6 05 e0 f6 02 c0 01 	mov    BYTE PTR ds:0xc002f6e0,0x1
c0016136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016139:	66 3d 1d 03          	cmp    ax,0x31d
c001613d:	75 06                	jne    c0016145 <sendKeyboardToken(KeyboardToken)+0x26f>
c001613f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016148:	66 3d 1c 03          	cmp    ax,0x31c
c001614c:	75 06                	jne    c0016154 <sendKeyboardToken(KeyboardToken)+0x27e>
c001614e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016157:	66 3d 1b 03          	cmp    ax,0x31b
c001615b:	75 06                	jne    c0016163 <sendKeyboardToken(KeyboardToken)+0x28d>
c001615d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016166:	66 3d 1e 03          	cmp    ax,0x31e
c001616a:	75 06                	jne    c0016172 <sendKeyboardToken(KeyboardToken)+0x29c>
c001616c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016175:	66 3d 1f 03          	cmp    ax,0x31f
c0016179:	75 06                	jne    c0016181 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001617b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016184:	66 3d 1a 03          	cmp    ax,0x31a
c0016188:	75 06                	jne    c0016190 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001618a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016190:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016194:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016197:	83 f0 01             	xor    eax,0x1
c001619a:	84 c0                	test   al,al
c001619c:	74 77                	je     c0016215 <sendKeyboardToken(KeyboardToken)+0x33f>
c001619e:	a0 e1 f3 02 c0       	mov    al,ds:0xc002f3e1
c00161a3:	84 c0                	test   al,al
c00161a5:	74 41                	je     c00161e8 <sendKeyboardToken(KeyboardToken)+0x312>
c00161a7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161ab:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00161af:	74 2b                	je     c00161dc <sendKeyboardToken(KeyboardToken)+0x306>
c00161b1:	8b 15 e4 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f6e4
c00161b7:	89 d0                	mov    eax,edx
c00161b9:	c1 e0 02             	shl    eax,0x2
c00161bc:	01 d0                	add    eax,edx
c00161be:	01 c0                	add    eax,eax
c00161c0:	a3 e4 f6 02 c0       	mov    ds:0xc002f6e4,eax
c00161c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c8:	0f b7 c0             	movzx  eax,ax
c00161cb:	8d 50 d0             	lea    edx,[eax-0x30]
c00161ce:	a1 e4 f6 02 c0       	mov    eax,ds:0xc002f6e4
c00161d3:	01 d0                	add    eax,edx
c00161d5:	a3 e4 f6 02 c0       	mov    ds:0xc002f6e4,eax
c00161da:	eb 6d                	jmp    c0016249 <sendKeyboardToken(KeyboardToken)+0x373>
c00161dc:	c7 05 e4 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f6e4,0x0
c00161e6:	eb 61                	jmp    c0016249 <sendKeyboardToken(KeyboardToken)+0x373>
c00161e8:	a1 e4 f6 02 c0       	mov    eax,ds:0xc002f6e4
c00161ed:	85 c0                	test   eax,eax
c00161ef:	74 18                	je     c0016209 <sendKeyboardToken(KeyboardToken)+0x333>
c00161f1:	a1 e4 f6 02 c0       	mov    eax,ds:0xc002f6e4
c00161f6:	0f b6 c0             	movzx  eax,al
c00161f9:	83 ec 0c             	sub    esp,0xc
c00161fc:	50                   	push   eax
c00161fd:	e8 16 fc ff ff       	call   c0015e18 <sendKeyToTerminal(unsigned char)>
c0016202:	83 c4 10             	add    esp,0x10
c0016205:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016209:	c7 05 e4 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f6e4,0x0
c0016213:	eb 34                	jmp    c0016249 <sendKeyboardToken(KeyboardToken)+0x373>
c0016215:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016218:	66 3d 01 01          	cmp    ax,0x101
c001621c:	75 2b                	jne    c0016249 <sendKeyboardToken(KeyboardToken)+0x373>
c001621e:	a1 e4 f6 02 c0       	mov    eax,ds:0xc002f6e4
c0016223:	85 c0                	test   eax,eax
c0016225:	74 18                	je     c001623f <sendKeyboardToken(KeyboardToken)+0x369>
c0016227:	a1 e4 f6 02 c0       	mov    eax,ds:0xc002f6e4
c001622c:	0f b6 c0             	movzx  eax,al
c001622f:	83 ec 0c             	sub    esp,0xc
c0016232:	50                   	push   eax
c0016233:	e8 e0 fb ff ff       	call   c0015e18 <sendKeyToTerminal(unsigned char)>
c0016238:	83 c4 10             	add    esp,0x10
c001623b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001623f:	c7 05 e4 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f6e4,0x0
c0016249:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001624c:	83 f0 01             	xor    eax,0x1
c001624f:	84 c0                	test   al,al
c0016251:	74 4c                	je     c001629f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016253:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016256:	83 f0 01             	xor    eax,0x1
c0016259:	84 c0                	test   al,al
c001625b:	74 42                	je     c001629f <sendKeyboardToken(KeyboardToken)+0x3c9>
c001625d:	a0 e0 f3 02 c0       	mov    al,ds:0xc002f3e0
c0016262:	83 f0 01             	xor    eax,0x1
c0016265:	84 c0                	test   al,al
c0016267:	74 36                	je     c001629f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001626c:	66 83 f8 1f          	cmp    ax,0x1f
c0016270:	76 09                	jbe    c001627b <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016275:	66 83 f8 7e          	cmp    ax,0x7e
c0016279:	76 12                	jbe    c001628d <sendKeyboardToken(KeyboardToken)+0x3b7>
c001627b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001627e:	66 83 f8 0a          	cmp    ax,0xa
c0016282:	74 09                	je     c001628d <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016287:	66 83 f8 08          	cmp    ax,0x8
c001628b:	75 12                	jne    c001629f <sendKeyboardToken(KeyboardToken)+0x3c9>
c001628d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016290:	0f b6 c0             	movzx  eax,al
c0016293:	83 ec 0c             	sub    esp,0xc
c0016296:	50                   	push   eax
c0016297:	e8 7c fb ff ff       	call   c0015e18 <sendKeyToTerminal(unsigned char)>
c001629c:	83 c4 10             	add    esp,0x10
c001629f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162a2:	83 f0 01             	xor    eax,0x1
c00162a5:	84 c0                	test   al,al
c00162a7:	74 4f                	je     c00162f8 <sendKeyboardToken(KeyboardToken)+0x422>
c00162a9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162ac:	83 f0 01             	xor    eax,0x1
c00162af:	84 c0                	test   al,al
c00162b1:	74 45                	je     c00162f8 <sendKeyboardToken(KeyboardToken)+0x422>
c00162b3:	a0 e0 f3 02 c0       	mov    al,ds:0xc002f3e0
c00162b8:	84 c0                	test   al,al
c00162ba:	74 3c                	je     c00162f8 <sendKeyboardToken(KeyboardToken)+0x422>
c00162bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162bf:	66 83 f8 3f          	cmp    ax,0x3f
c00162c3:	76 33                	jbe    c00162f8 <sendKeyboardToken(KeyboardToken)+0x422>
c00162c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c8:	66 83 f8 7f          	cmp    ax,0x7f
c00162cc:	77 2a                	ja     c00162f8 <sendKeyboardToken(KeyboardToken)+0x422>
c00162ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d1:	88 c2                	mov    dl,al
c00162d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d6:	66 83 f8 5f          	cmp    ax,0x5f
c00162da:	76 04                	jbe    c00162e0 <sendKeyboardToken(KeyboardToken)+0x40a>
c00162dc:	b0 20                	mov    al,0x20
c00162de:	eb 02                	jmp    c00162e2 <sendKeyboardToken(KeyboardToken)+0x40c>
c00162e0:	b0 00                	mov    al,0x0
c00162e2:	29 c2                	sub    edx,eax
c00162e4:	88 d0                	mov    al,dl
c00162e6:	83 e8 40             	sub    eax,0x40
c00162e9:	0f b6 c0             	movzx  eax,al
c00162ec:	83 ec 0c             	sub    esp,0xc
c00162ef:	50                   	push   eax
c00162f0:	e8 23 fb ff ff       	call   c0015e18 <sendKeyToTerminal(unsigned char)>
c00162f5:	83 c4 10             	add    esp,0x10
c00162f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162fb:	66 3d 00 03          	cmp    ax,0x300
c00162ff:	75 0f                	jne    c0016310 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016301:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016304:	83 f0 01             	xor    eax,0x1
c0016307:	84 c0                	test   al,al
c0016309:	74 05                	je     c0016310 <sendKeyboardToken(KeyboardToken)+0x43a>
c001630b:	e8 48 aa ff ff       	call   c0010d58 <doTerminalCycle()>
c0016310:	90                   	nop
c0016311:	c9                   	leave  
c0016312:	c3                   	ret    

c0016313 <clearInternalKeybuffer(VgaText*)>:
c0016313:	55                   	push   ebp
c0016314:	89 e5                	mov    ebp,esp
c0016316:	83 ec 08             	sub    esp,0x8
c0016319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001631c:	05 98 01 00 00       	add    eax,0x198
c0016321:	83 ec 0c             	sub    esp,0xc
c0016324:	50                   	push   eax
c0016325:	e8 5e a4 fe ff       	call   c0000788 <strlen>
c001632a:	83 c4 10             	add    esp,0x10
c001632d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016330:	81 c2 98 01 00 00    	add    edx,0x198
c0016336:	83 ec 04             	sub    esp,0x4
c0016339:	50                   	push   eax
c001633a:	6a 00                	push   0x0
c001633c:	52                   	push   edx
c001633d:	e8 2a a4 fe ff       	call   c000076c <memset>
c0016342:	83 c4 10             	add    esp,0x10
c0016345:	90                   	nop
c0016346:	c9                   	leave  
c0016347:	c3                   	ret    

c0016348 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016348:	55                   	push   ebp
c0016349:	89 e5                	mov    ebp,esp
c001634b:	83 ec 18             	sub    esp,0x18
c001634e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0016353:	85 c0                	test   eax,eax
c0016355:	74 2a                	je     c0016381 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0016357:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001635d:	8b 0d c8 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f2c8
c0016363:	83 ec 04             	sub    esp,0x4
c0016366:	68 e0 f2 02 c0       	push   0xc002f2e0
c001636b:	83 ec 08             	sub    esp,0x8
c001636e:	89 e2                	mov    edx,esp
c0016370:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0016373:	89 02                	mov    DWORD PTR [edx],eax
c0016375:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0016378:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001637c:	ff d1                	call   ecx
c001637e:	83 c4 10             	add    esp,0x10
c0016381:	83 ec 0c             	sub    esp,0xc
c0016384:	68 43 bd 02 c0       	push   0xc002bd43
c0016389:	e8 01 cb ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001638e:	83 c4 10             	add    esp,0x10
c0016391:	fb                   	sti    
c0016392:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016399:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001639d:	0f 84 a1 00 00 00    	je     c0016444 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c00163a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163a6:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163ac:	84 c0                	test   al,al
c00163ae:	75 28                	jne    c00163d8 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c00163b0:	fa                   	cli    
c00163b1:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c00163b6:	40                   	inc    eax
c00163b7:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c00163bc:	e8 23 83 00 00       	call   c001e6e4 <schedule()>
c00163c1:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c00163c6:	48                   	dec    eax
c00163c7:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c00163cc:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c00163d1:	85 c0                	test   eax,eax
c00163d3:	75 ce                	jne    c00163a3 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c00163d5:	fb                   	sti    
c00163d6:	eb cb                	jmp    c00163a3 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c00163d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163db:	8d 50 01             	lea    edx,[eax+0x1]
c00163de:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163e4:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c00163ea:	88 10                	mov    BYTE PTR [eax],dl
c00163ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163ef:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163f5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163fb:	05 98 01 00 00       	add    eax,0x198
c0016400:	83 ec 0c             	sub    esp,0xc
c0016403:	50                   	push   eax
c0016404:	e8 7f a3 fe ff       	call   c0000788 <strlen>
c0016409:	83 c4 10             	add    esp,0x10
c001640c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001640f:	81 c2 98 01 00 00    	add    edx,0x198
c0016415:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016418:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001641b:	81 c2 98 01 00 00    	add    edx,0x198
c0016421:	83 ec 04             	sub    esp,0x4
c0016424:	50                   	push   eax
c0016425:	51                   	push   ecx
c0016426:	52                   	push   edx
c0016427:	e8 78 a2 fe ff       	call   c00006a4 <memmove>
c001642c:	83 c4 10             	add    esp,0x10
c001642f:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016432:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016435:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016439:	0f 85 5a ff ff ff    	jne    c0016399 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c001643f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016442:	eb 03                	jmp    c0016447 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0016444:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016447:	c9                   	leave  
c0016448:	c3                   	ret    
c0016449:	90                   	nop

c001644a <Keyboard::Keyboard(char const*)>:
c001644a:	83 ec 0c             	sub    esp,0xc
c001644d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016451:	83 ec 08             	sub    esp,0x8
c0016454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016458:	50                   	push   eax
c0016459:	e8 4c e0 ff ff       	call   c00144aa <Device::Device(char const*)>
c001645e:	83 c4 10             	add    esp,0x10
c0016461:	ba 64 bd 02 c0       	mov    edx,0xc002bd64
c0016466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001646a:	89 10                	mov    DWORD PTR [eax],edx
c001646c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016470:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001647a:	c6 05 c4 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f2c4,0x1
c0016481:	90                   	nop
c0016482:	83 c4 0c             	add    esp,0xc
c0016485:	c3                   	ret    

c0016486 <Keyboard::~Keyboard()>:
c0016486:	83 ec 0c             	sub    esp,0xc
c0016489:	ba 64 bd 02 c0       	mov    edx,0xc002bd64
c001648e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016492:	89 10                	mov    DWORD PTR [eax],edx
c0016494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016498:	83 ec 0c             	sub    esp,0xc
c001649b:	50                   	push   eax
c001649c:	e8 f5 dc ff ff       	call   c0014196 <Device::~Device()>
c00164a1:	83 c4 10             	add    esp,0x10
c00164a4:	90                   	nop
c00164a5:	83 c4 0c             	add    esp,0xc
c00164a8:	c3                   	ret    
c00164a9:	90                   	nop

c00164aa <Keyboard::~Keyboard()>:
c00164aa:	83 ec 0c             	sub    esp,0xc
c00164ad:	83 ec 0c             	sub    esp,0xc
c00164b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164b4:	e8 cd ff ff ff       	call   c0016486 <Keyboard::~Keyboard()>
c00164b9:	83 c4 10             	add    esp,0x10
c00164bc:	83 ec 08             	sub    esp,0x8
c00164bf:	68 5c 01 00 00       	push   0x15c
c00164c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c8:	e8 e2 c8 ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c00164cd:	83 c4 10             	add    esp,0x10
c00164d0:	83 c4 0c             	add    esp,0xc
c00164d3:	c3                   	ret    

c00164d4 <LogicalDisk::close(int, int, void*)>:
c00164d4:	83 c8 ff             	or     eax,0xffffffff
c00164d7:	c3                   	ret    

c00164d8 <LogicalDisk::~LogicalDisk()>:
c00164d8:	83 ec 0c             	sub    esp,0xc
c00164db:	ba 14 be 02 c0       	mov    edx,0xc002be14
c00164e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e4:	89 10                	mov    DWORD PTR [eax],edx
c00164e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ea:	83 ec 0c             	sub    esp,0xc
c00164ed:	50                   	push   eax
c00164ee:	e8 a3 dc ff ff       	call   c0014196 <Device::~Device()>
c00164f3:	83 c4 10             	add    esp,0x10
c00164f6:	90                   	nop
c00164f7:	83 c4 0c             	add    esp,0xc
c00164fa:	c3                   	ret    
c00164fb:	90                   	nop

c00164fc <LogicalDisk::~LogicalDisk()>:
c00164fc:	83 ec 0c             	sub    esp,0xc
c00164ff:	83 ec 0c             	sub    esp,0xc
c0016502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016506:	e8 cd ff ff ff       	call   c00164d8 <LogicalDisk::~LogicalDisk()>
c001650b:	83 c4 10             	add    esp,0x10
c001650e:	83 ec 08             	sub    esp,0x8
c0016511:	68 74 01 00 00       	push   0x174
c0016516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001651a:	e8 90 c8 ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c001651f:	83 c4 10             	add    esp,0x10
c0016522:	83 c4 0c             	add    esp,0xc
c0016525:	c3                   	ret    

c0016526 <LogicalDisk::open(int, int, void*)>:
c0016526:	83 ec 18             	sub    esp,0x18
c0016529:	68 90 bd 02 c0       	push   0xc002bd90
c001652e:	e8 c4 43 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0016533:	83 c8 ff             	or     eax,0xffffffff
c0016536:	83 c4 1c             	add    esp,0x1c
c0016539:	c3                   	ret    

c001653a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001653a:	53                   	push   ebx
c001653b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001653f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016543:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016547:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001654d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016553:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016559:	77 10                	ja     c001656b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001655b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016561:	89 d3                	mov    ebx,edx
c0016563:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016569:	72 05                	jb     c0016570 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001656b:	83 c8 ff             	or     eax,0xffffffff
c001656e:	89 c2                	mov    edx,eax
c0016570:	5b                   	pop    ebx
c0016571:	c3                   	ret    

c0016572 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016572:	56                   	push   esi
c0016573:	83 c8 ff             	or     eax,0xffffffff
c0016576:	53                   	push   ebx
c0016577:	89 c2                	mov    edx,eax
c0016579:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001657d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016581:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016585:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001658b:	77 27                	ja     c00165b4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001658d:	89 d8                	mov    eax,ebx
c001658f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016595:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001659b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165a0:	89 c2                	mov    edx,eax
c00165a2:	73 10                	jae    c00165b4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165a4:	89 c8                	mov    eax,ecx
c00165a6:	89 da                	mov    edx,ebx
c00165a8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00165ae:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00165b4:	5b                   	pop    ebx
c00165b5:	5e                   	pop    esi
c00165b6:	c3                   	ret    
c00165b7:	90                   	nop

c00165b8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165b8:	83 ec 1c             	sub    esp,0x1c
c00165bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00165d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165de:	83 ec 08             	sub    esp,0x8
c00165e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165e5:	50                   	push   eax
c00165e6:	e8 bf de ff ff       	call   c00144aa <Device::Device(char const*)>
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	ba 14 be 02 c0       	mov    edx,0xc002be14
c00165f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f7:	89 10                	mov    DWORD PTR [eax],edx
c00165f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165fd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016608:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001660f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016613:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001661d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016625:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016629:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001662f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016635:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016639:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001663c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016640:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016646:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001664c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016650:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016654:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001665a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001665e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016668:	90                   	nop
c0016669:	83 c4 1c             	add    esp,0x1c
c001666c:	c3                   	ret    
c001666d:	90                   	nop

c001666e <LogicalDisk::assignDriveLetter()>:
c001666e:	55                   	push   ebp
c001666f:	57                   	push   edi
c0016670:	56                   	push   esi
c0016671:	53                   	push   ebx
c0016672:	83 ec 14             	sub    esp,0x14
c0016675:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016679:	8b 3d 00 f7 02 c0    	mov    edi,DWORD PTR ds:0xc002f700
c001667f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016685:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016689:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001668f:	8b 3d 04 f7 02 c0    	mov    edi,DWORD PTR ds:0xc002f704
c0016695:	3c 01                	cmp    al,0x1
c0016697:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001669b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001669f:	19 c0                	sbb    eax,eax
c00166a1:	83 e0 02             	and    eax,0x2
c00166a4:	83 c0 41             	add    eax,0x41
c00166a7:	0f be e8             	movsx  ebp,al
c00166aa:	3c 43                	cmp    al,0x43
c00166ac:	75 10                	jne    c00166be <LogicalDisk::assignDriveLetter()+0x50>
c00166ae:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00166b5:	75 5d                	jne    c0016714 <LogicalDisk::assignDriveLetter()+0xa6>
c00166b7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00166bc:	75 56                	jne    c0016714 <LogicalDisk::assignDriveLetter()+0xa6>
c00166be:	8d 75 bf             	lea    esi,[ebp-0x41]
c00166c1:	ba 01 00 00 00       	mov    edx,0x1
c00166c6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00166ca:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00166ce:	d3 e2                	shl    edx,cl
c00166d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166d4:	89 d7                	mov    edi,edx
c00166d6:	89 d6                	mov    esi,edx
c00166d8:	c1 ff 1f             	sar    edi,0x1f
c00166db:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166df:	21 f9                	and    ecx,edi
c00166e1:	09 d1                	or     ecx,edx
c00166e3:	75 2f                	jne    c0016714 <LogicalDisk::assignDriveLetter()+0xa6>
c00166e5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166ed:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166f3:	09 f2                	or     edx,esi
c00166f5:	89 15 00 f7 02 c0    	mov    DWORD PTR ds:0xc002f700,edx
c00166fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166ff:	09 fa                	or     edx,edi
c0016701:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016705:	89 15 04 f7 02 c0    	mov    DWORD PTR ds:0xc002f704,edx
c001670b:	89 1c bd 20 f7 02 c0 	mov    DWORD PTR [edi*4-0x3ffd08e0],ebx
c0016712:	eb 08                	jmp    c001671c <LogicalDisk::assignDriveLetter()+0xae>
c0016714:	45                   	inc    ebp
c0016715:	40                   	inc    eax
c0016716:	3c 5b                	cmp    al,0x5b
c0016718:	75 90                	jne    c00166aa <LogicalDisk::assignDriveLetter()+0x3c>
c001671a:	31 c0                	xor    eax,eax
c001671c:	83 c4 14             	add    esp,0x14
c001671f:	5b                   	pop    ebx
c0016720:	5e                   	pop    esi
c0016721:	5f                   	pop    edi
c0016722:	5d                   	pop    ebp
c0016723:	c3                   	ret    

c0016724 <LogicalDisk::mount()>:
c0016724:	56                   	push   esi
c0016725:	53                   	push   ebx
c0016726:	50                   	push   eax
c0016727:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001672b:	8b 1d 94 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f294
c0016731:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001673b:	85 db                	test   ebx,ebx
c001673d:	74 50                	je     c001678f <LogicalDisk::mount()+0x6b>
c001673f:	50                   	push   eax
c0016740:	50                   	push   eax
c0016741:	ff 35 48 26 03 c0    	push   DWORD PTR ds:0xc0032648
c0016747:	68 b4 bd 02 c0       	push   0xc002bdb4
c001674c:	e8 3e c7 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0016751:	83 c4 0c             	add    esp,0xc
c0016754:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001675b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001675d:	83 e8 41             	sub    eax,0x41
c0016760:	50                   	push   eax
c0016761:	56                   	push   esi
c0016762:	53                   	push   ebx
c0016763:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016766:	83 c4 10             	add    esp,0x10
c0016769:	84 c0                	test   al,al
c001676b:	74 08                	je     c0016775 <LogicalDisk::mount()+0x51>
c001676d:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016773:	eb 1c                	jmp    c0016791 <LogicalDisk::mount()+0x6d>
c0016775:	51                   	push   ecx
c0016776:	51                   	push   ecx
c0016777:	ff 35 48 26 03 c0    	push   DWORD PTR ds:0xc0032648
c001677d:	68 cf bd 02 c0       	push   0xc002bdcf
c0016782:	e8 08 c7 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0016787:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001678a:	83 c4 10             	add    esp,0x10
c001678d:	eb ac                	jmp    c001673b <LogicalDisk::mount()+0x17>
c001678f:	31 c0                	xor    eax,eax
c0016791:	5a                   	pop    edx
c0016792:	5b                   	pop    ebx
c0016793:	5e                   	pop    esi
c0016794:	c3                   	ret    
c0016795:	90                   	nop

c0016796 <LogicalDisk::unmount()>:
c0016796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001679a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00167a4:	c3                   	ret    
c00167a5:	90                   	nop

c00167a6 <LogicalDisk::eject()>:
c00167a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00167b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00167b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167b6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167b9:	90                   	nop

c00167ba <LogicalDisk::unassignDriveLetter()>:
c00167ba:	57                   	push   edi
c00167bb:	56                   	push   esi
c00167bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167c0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00167c7:	84 c9                	test   cl,cl
c00167c9:	75 0f                	jne    c00167da <LogicalDisk::unassignDriveLetter()+0x20>
c00167cb:	c7 44 24 0c ea bd 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bdea
c00167d3:	5e                   	pop    esi
c00167d4:	5f                   	pop    edi
c00167d5:	e9 1d 41 00 00       	jmp    c001a8f7 <Krnl::panic(char const*)>
c00167da:	83 e9 41             	sub    ecx,0x41
c00167dd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167e4:	b8 01 00 00 00       	mov    eax,0x1
c00167e9:	c7 04 8d 20 f7 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd08e0],0x0
c00167f4:	d3 e0                	shl    eax,cl
c00167f6:	89 c7                	mov    edi,eax
c00167f8:	f7 d0                	not    eax
c00167fa:	c1 ff 1f             	sar    edi,0x1f
c00167fd:	21 05 00 f7 02 c0    	and    DWORD PTR ds:0xc002f700,eax
c0016803:	89 fe                	mov    esi,edi
c0016805:	f7 d6                	not    esi
c0016807:	21 35 04 f7 02 c0    	and    DWORD PTR ds:0xc002f704,esi
c001680d:	5e                   	pop    esi
c001680e:	5f                   	pop    edi
c001680f:	c3                   	ret    

c0016810 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016810:	57                   	push   edi
c0016811:	56                   	push   esi
c0016812:	53                   	push   ebx
c0016813:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016817:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001681b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001681f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016823:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016829:	77 41                	ja     c001686c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001682b:	99                   	cdq    
c001682c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016832:	01 c8                	add    eax,ecx
c0016834:	11 da                	adc    edx,ebx
c0016836:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001683c:	19 d7                	sbb    edi,edx
c001683e:	72 33                	jb     c0016873 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016840:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016846:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001684c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016850:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016854:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001685a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016860:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016864:	5b                   	pop    ebx
c0016865:	5e                   	pop    esi
c0016866:	5f                   	pop    edi
c0016867:	e9 0a 0b 00 00       	jmp    c0017376 <VCache::read(unsigned long long, int, void*)>
c001686c:	b8 05 00 00 00       	mov    eax,0x5
c0016871:	eb 05                	jmp    c0016878 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016873:	b8 07 00 00 00       	mov    eax,0x7
c0016878:	5b                   	pop    ebx
c0016879:	5e                   	pop    esi
c001687a:	5f                   	pop    edi
c001687b:	c3                   	ret    

c001687c <LogicalDisk::write(unsigned long long, int, void*)>:
c001687c:	57                   	push   edi
c001687d:	56                   	push   esi
c001687e:	53                   	push   ebx
c001687f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016883:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016887:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001688b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001688f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016895:	77 41                	ja     c00168d8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016897:	99                   	cdq    
c0016898:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001689e:	01 c8                	add    eax,ecx
c00168a0:	11 da                	adc    edx,ebx
c00168a2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00168a8:	19 d7                	sbb    edi,edx
c00168aa:	72 33                	jb     c00168df <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00168ac:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168b2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168bc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168c0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168d0:	5b                   	pop    ebx
c00168d1:	5e                   	pop    esi
c00168d2:	5f                   	pop    edi
c00168d3:	e9 96 09 00 00       	jmp    c001726e <VCache::write(unsigned long long, int, void*)>
c00168d8:	b8 05 00 00 00       	mov    eax,0x5
c00168dd:	eb 05                	jmp    c00168e4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168df:	b8 07 00 00 00       	mov    eax,0x7
c00168e4:	5b                   	pop    ebx
c00168e5:	5e                   	pop    esi
c00168e6:	5f                   	pop    edi
c00168e7:	c3                   	ret    

c00168e8 <Mouse::Mouse(char const*)>:
c00168e8:	83 ec 0c             	sub    esp,0xc
c00168eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ef:	83 ec 08             	sub    esp,0x8
c00168f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168f6:	50                   	push   eax
c00168f7:	e8 ae db ff ff       	call   c00144aa <Device::Device(char const*)>
c00168fc:	83 c4 10             	add    esp,0x10
c00168ff:	ba 40 be 02 c0       	mov    edx,0xc002be40
c0016904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016908:	89 10                	mov    DWORD PTR [eax],edx
c001690a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001690e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016918:	90                   	nop
c0016919:	83 c4 0c             	add    esp,0xc
c001691c:	c3                   	ret    
c001691d:	90                   	nop

c001691e <Mouse::~Mouse()>:
c001691e:	83 ec 0c             	sub    esp,0xc
c0016921:	ba 40 be 02 c0       	mov    edx,0xc002be40
c0016926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001692a:	89 10                	mov    DWORD PTR [eax],edx
c001692c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016930:	83 ec 0c             	sub    esp,0xc
c0016933:	50                   	push   eax
c0016934:	e8 5d d8 ff ff       	call   c0014196 <Device::~Device()>
c0016939:	83 c4 10             	add    esp,0x10
c001693c:	90                   	nop
c001693d:	83 c4 0c             	add    esp,0xc
c0016940:	c3                   	ret    
c0016941:	90                   	nop

c0016942 <Mouse::~Mouse()>:
c0016942:	83 ec 0c             	sub    esp,0xc
c0016945:	83 ec 0c             	sub    esp,0xc
c0016948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001694c:	e8 cd ff ff ff       	call   c001691e <Mouse::~Mouse()>
c0016951:	83 c4 10             	add    esp,0x10
c0016954:	83 ec 08             	sub    esp,0x8
c0016957:	68 58 01 00 00       	push   0x158
c001695c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016960:	e8 4a c4 ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0016965:	83 c4 10             	add    esp,0x10
c0016968:	83 c4 0c             	add    esp,0xc
c001696b:	c3                   	ret    

c001696c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001696c:	55                   	push   ebp
c001696d:	57                   	push   edi
c001696e:	56                   	push   esi
c001696f:	53                   	push   ebx
c0016970:	81 ec 20 01 00 00    	sub    esp,0x120
c0016976:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c001697d:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0016984:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001698b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016992:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016996:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001699a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001699e:	56                   	push   esi
c001699f:	68 64 be 02 c0       	push   0xc002be64
c00169a4:	e8 e6 c4 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00169a9:	58                   	pop    eax
c00169aa:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169b1:	e8 f0 db ff ff       	call   c00145a6 <Device::getName()>
c00169b6:	5a                   	pop    edx
c00169b7:	59                   	pop    ecx
c00169b8:	50                   	push   eax
c00169b9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00169bd:	53                   	push   ebx
c00169be:	e8 65 9e fe ff       	call   c0000828 <strcpy>
c00169c3:	5d                   	pop    ebp
c00169c4:	58                   	pop    eax
c00169c5:	68 95 be 02 c0       	push   0xc002be95
c00169ca:	53                   	push   ebx
c00169cb:	e8 98 9f fe ff       	call   c0000968 <strcat>
c00169d0:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00169d7:	e8 e4 8e ff ff       	call   c000f8c0 <malloc>
c00169dc:	83 c4 0c             	add    esp,0xc
c00169df:	89 c5                	mov    ebp,eax
c00169e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169e9:	57                   	push   edi
c00169ea:	56                   	push   esi
c00169eb:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169f2:	53                   	push   ebx
c00169f3:	50                   	push   eax
c00169f4:	e8 bf fb ff ff       	call   c00165b8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169f9:	83 c4 14             	add    esp,0x14
c00169fc:	55                   	push   ebp
c00169fd:	e8 6c fc ff ff       	call   c001666e <LogicalDisk::assignDriveLetter()>
c0016a02:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016a05:	0f be d8             	movsx  ebx,al
c0016a08:	e8 17 fd ff ff       	call   c0016724 <LogicalDisk::mount()>
c0016a0d:	58                   	pop    eax
c0016a0e:	5a                   	pop    edx
c0016a0f:	55                   	push   ebp
c0016a10:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a17:	e8 9e d8 ff ff       	call   c00142ba <Device::addChild(Device*)>
c0016a1c:	59                   	pop    ecx
c0016a1d:	5e                   	pop    esi
c0016a1e:	53                   	push   ebx
c0016a1f:	68 a0 be 02 c0       	push   0xc002bea0
c0016a24:	e8 66 c4 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0016a29:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a2f:	5b                   	pop    ebx
c0016a30:	5e                   	pop    esi
c0016a31:	5f                   	pop    edi
c0016a32:	5d                   	pop    ebp
c0016a33:	c3                   	ret    

c0016a34 <createPartitionsForDisk(PhysicalDisk*)>:
c0016a34:	55                   	push   ebp
c0016a35:	57                   	push   edi
c0016a36:	56                   	push   esi
c0016a37:	53                   	push   ebx
c0016a38:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a3e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a45:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a4b:	3d 00 02 00 00       	cmp    eax,0x200
c0016a50:	74 27                	je     c0016a79 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a52:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a58:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a5e:	83 ec 10             	sub    esp,0x10
c0016a61:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a65:	99                   	cdq    
c0016a66:	c1 e6 0a             	shl    esi,0xa
c0016a69:	52                   	push   edx
c0016a6a:	89 fd                	mov    ebp,edi
c0016a6c:	50                   	push   eax
c0016a6d:	55                   	push   ebp
c0016a6e:	56                   	push   esi
c0016a6f:	e8 10 0a 01 00       	call   c0027484 <__udivdi3>
c0016a74:	e9 b1 00 00 00       	jmp    c0016b2a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a79:	83 ec 0c             	sub    esp,0xc
c0016a7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a7e:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a82:	56                   	push   esi
c0016a83:	6a 01                	push   0x1
c0016a85:	6a 00                	push   0x0
c0016a87:	6a 00                	push   0x0
c0016a89:	53                   	push   ebx
c0016a8a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a8d:	83 c4 20             	add    esp,0x20
c0016a90:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a98:	75 0a                	jne    c0016aa4 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a9a:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016aa2:	74 2c                	je     c0016ad0 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016aa4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016aaa:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ab0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ab6:	83 ec 10             	sub    esp,0x10
c0016ab9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016abd:	89 f7                	mov    edi,esi
c0016abf:	c1 e0 0a             	shl    eax,0xa
c0016ac2:	c1 ff 1f             	sar    edi,0x1f
c0016ac5:	57                   	push   edi
c0016ac6:	56                   	push   esi
c0016ac7:	52                   	push   edx
c0016ac8:	50                   	push   eax
c0016ac9:	e8 b6 09 01 00       	call   c0027484 <__udivdi3>
c0016ace:	eb 5a                	jmp    c0016b2a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016ad0:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016ad7:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016ade:	83 e1 7f             	and    ecx,0x7f
c0016ae1:	83 e0 7f             	and    eax,0x7f
c0016ae4:	01 c1                	add    ecx,eax
c0016ae6:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016aed:	83 e0 7f             	and    eax,0x7f
c0016af0:	01 c1                	add    ecx,eax
c0016af2:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016af9:	83 e0 7f             	and    eax,0x7f
c0016afc:	00 c1                	add    cl,al
c0016afe:	74 41                	je     c0016b41 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016b00:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b06:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b0c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b12:	83 ec 10             	sub    esp,0x10
c0016b15:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b19:	89 f7                	mov    edi,esi
c0016b1b:	c1 e0 0a             	shl    eax,0xa
c0016b1e:	c1 ff 1f             	sar    edi,0x1f
c0016b21:	57                   	push   edi
c0016b22:	56                   	push   esi
c0016b23:	52                   	push   edx
c0016b24:	50                   	push   eax
c0016b25:	e8 5a 09 01 00       	call   c0027484 <__udivdi3>
c0016b2a:	83 c4 14             	add    esp,0x14
c0016b2d:	52                   	push   edx
c0016b2e:	50                   	push   eax
c0016b2f:	6a 00                	push   0x0
c0016b31:	6a 00                	push   0x0
c0016b33:	53                   	push   ebx
c0016b34:	e8 33 fe ff ff       	call   c001696c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b39:	83 c4 20             	add    esp,0x20
c0016b3c:	e9 79 01 00 00       	jmp    c0016cba <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b41:	89 f0                	mov    eax,esi
c0016b43:	31 f6                	xor    esi,esi
c0016b45:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b4c:	75 02                	jne    c0016b50 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b4e:	89 f1                	mov    ecx,esi
c0016b50:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b57:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b5e:	c1 e2 08             	shl    edx,0x8
c0016b61:	c1 e7 10             	shl    edi,0x10
c0016b64:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b6c:	09 fa                	or     edx,edi
c0016b6e:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b76:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b7d:	83 c0 10             	add    eax,0x10
c0016b80:	09 fa                	or     edx,edi
c0016b82:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b89:	c1 e7 18             	shl    edi,0x18
c0016b8c:	09 fa                	or     edx,edi
c0016b8e:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b95:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b99:	c1 e7 10             	shl    edi,0x10
c0016b9c:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016ba3:	c1 e2 08             	shl    edx,0x8
c0016ba6:	09 fa                	or     edx,edi
c0016ba8:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016baf:	09 fa                	or     edx,edi
c0016bb1:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016bb8:	c1 e7 18             	shl    edi,0x18
c0016bbb:	09 fa                	or     edx,edi
c0016bbd:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016bc1:	46                   	inc    esi
c0016bc2:	83 fe 04             	cmp    esi,0x4
c0016bc5:	0f 85 7a ff ff ff    	jne    c0016b45 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bcf:	83 f0 01             	xor    eax,0x1
c0016bd2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016bd6:	75 57                	jne    c0016c2f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bdc:	83 f0 01             	xor    eax,0x1
c0016bdf:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016be3:	75 4a                	jne    c0016c2f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016be5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016be9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bf1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bf9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bff:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016c05:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016c0b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c0f:	89 f7                	mov    edi,esi
c0016c11:	c1 e0 0a             	shl    eax,0xa
c0016c14:	c1 ff 1f             	sar    edi,0x1f
c0016c17:	57                   	push   edi
c0016c18:	56                   	push   esi
c0016c19:	52                   	push   edx
c0016c1a:	50                   	push   eax
c0016c1b:	e8 64 08 01 00       	call   c0027484 <__udivdi3>
c0016c20:	83 c4 10             	add    esp,0x10
c0016c23:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c27:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c2b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c2f:	84 c9                	test   cl,cl
c0016c31:	74 53                	je     c0016c86 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c33:	0f b6 c9             	movzx  ecx,cl
c0016c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c3e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c42:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c4e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c52:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c5a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c66:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c6a:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c6e:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c72:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c76:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c7a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c7e:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c82:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c86:	31 ed                	xor    ebp,ebp
c0016c88:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c8c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c90:	89 f8                	mov    eax,edi
c0016c92:	09 f0                	or     eax,esi
c0016c94:	74 1e                	je     c0016cb4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c96:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c9a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c9e:	89 d1                	mov    ecx,edx
c0016ca0:	09 c1                	or     ecx,eax
c0016ca2:	74 10                	je     c0016cb4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016ca4:	83 ec 0c             	sub    esp,0xc
c0016ca7:	57                   	push   edi
c0016ca8:	56                   	push   esi
c0016ca9:	52                   	push   edx
c0016caa:	50                   	push   eax
c0016cab:	53                   	push   ebx
c0016cac:	e8 bb fc ff ff       	call   c001696c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016cb1:	83 c4 20             	add    esp,0x20
c0016cb4:	45                   	inc    ebp
c0016cb5:	83 fd 04             	cmp    ebp,0x4
c0016cb8:	75 ce                	jne    c0016c88 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016cba:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016cc0:	5b                   	pop    ebx
c0016cc1:	5e                   	pop    esi
c0016cc2:	5f                   	pop    edi
c0016cc3:	5d                   	pop    ebp
c0016cc4:	c3                   	ret    
c0016cc5:	90                   	nop

c0016cc6 <Serial::Serial(char const*)>:
c0016cc6:	83 ec 0c             	sub    esp,0xc
c0016cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ccd:	83 ec 08             	sub    esp,0x8
c0016cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cd4:	50                   	push   eax
c0016cd5:	e8 d0 d7 ff ff       	call   c00144aa <Device::Device(char const*)>
c0016cda:	83 c4 10             	add    esp,0x10
c0016cdd:	ba cc be 02 c0       	mov    edx,0xc002becc
c0016ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce6:	89 10                	mov    DWORD PTR [eax],edx
c0016ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cec:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016cf6:	90                   	nop
c0016cf7:	83 c4 0c             	add    esp,0xc
c0016cfa:	c3                   	ret    
c0016cfb:	90                   	nop

c0016cfc <Serial::~Serial()>:
c0016cfc:	83 ec 0c             	sub    esp,0xc
c0016cff:	ba cc be 02 c0       	mov    edx,0xc002becc
c0016d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d08:	89 10                	mov    DWORD PTR [eax],edx
c0016d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0e:	83 ec 0c             	sub    esp,0xc
c0016d11:	50                   	push   eax
c0016d12:	e8 7f d4 ff ff       	call   c0014196 <Device::~Device()>
c0016d17:	83 c4 10             	add    esp,0x10
c0016d1a:	90                   	nop
c0016d1b:	83 c4 0c             	add    esp,0xc
c0016d1e:	c3                   	ret    
c0016d1f:	90                   	nop

c0016d20 <Serial::~Serial()>:
c0016d20:	83 ec 0c             	sub    esp,0xc
c0016d23:	83 ec 0c             	sub    esp,0xc
c0016d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d2a:	e8 cd ff ff ff       	call   c0016cfc <Serial::~Serial()>
c0016d2f:	83 c4 10             	add    esp,0x10
c0016d32:	83 ec 08             	sub    esp,0x8
c0016d35:	68 58 01 00 00       	push   0x158
c0016d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d3e:	e8 6c c0 ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0016d43:	83 c4 10             	add    esp,0x10
c0016d46:	83 c4 0c             	add    esp,0xc
c0016d49:	c3                   	ret    

c0016d4a <Timer::Timer(char const*)>:
c0016d4a:	83 ec 0c             	sub    esp,0xc
c0016d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d51:	83 ec 08             	sub    esp,0x8
c0016d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d58:	50                   	push   eax
c0016d59:	e8 4c d7 ff ff       	call   c00144aa <Device::Device(char const*)>
c0016d5e:	83 c4 10             	add    esp,0x10
c0016d61:	ba 10 bf 02 c0       	mov    edx,0xc002bf10
c0016d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d6a:	89 10                	mov    DWORD PTR [eax],edx
c0016d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d70:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d7a:	90                   	nop
c0016d7b:	83 c4 0c             	add    esp,0xc
c0016d7e:	c3                   	ret    
c0016d7f:	90                   	nop

c0016d80 <Timer::~Timer()>:
c0016d80:	83 ec 0c             	sub    esp,0xc
c0016d83:	ba 10 bf 02 c0       	mov    edx,0xc002bf10
c0016d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d8c:	89 10                	mov    DWORD PTR [eax],edx
c0016d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d92:	83 ec 0c             	sub    esp,0xc
c0016d95:	50                   	push   eax
c0016d96:	e8 fb d3 ff ff       	call   c0014196 <Device::~Device()>
c0016d9b:	83 c4 10             	add    esp,0x10
c0016d9e:	90                   	nop
c0016d9f:	83 c4 0c             	add    esp,0xc
c0016da2:	c3                   	ret    
c0016da3:	90                   	nop

c0016da4 <Timer::~Timer()>:
c0016da4:	83 ec 0c             	sub    esp,0xc
c0016da7:	83 ec 0c             	sub    esp,0xc
c0016daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dae:	e8 cd ff ff ff       	call   c0016d80 <Timer::~Timer()>
c0016db3:	83 c4 10             	add    esp,0x10
c0016db6:	83 ec 08             	sub    esp,0x8
c0016db9:	68 5c 01 00 00       	push   0x15c
c0016dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dc2:	e8 e8 bf ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0016dc7:	83 c4 10             	add    esp,0x10
c0016dca:	83 c4 0c             	add    esp,0xc
c0016dcd:	c3                   	ret    

c0016dce <Timer::read()>:
c0016dce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dd2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016dd8:	c3                   	ret    

c0016dd9 <timerHandler(unsigned long long)>:
c0016dd9:	55                   	push   ebp
c0016dda:	57                   	push   edi
c0016ddb:	56                   	push   esi
c0016ddc:	53                   	push   ebx
c0016ddd:	83 ec 0c             	sub    esp,0xc
c0016de0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016de4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016de8:	01 35 90 f7 02 c0    	add    DWORD PTR ds:0xc002f790,esi
c0016dee:	11 3d 94 f7 02 c0    	adc    DWORD PTR ds:0xc002f794,edi
c0016df4:	80 3d 0d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f10d,0x0
c0016dfb:	0f 84 42 01 00 00    	je     c0016f43 <timerHandler(unsigned long long)+0x16a>
c0016e01:	fa                   	cli    
c0016e02:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c0016e08:	83 ec 0c             	sub    esp,0xc
c0016e0b:	ff 05 44 26 03 c0    	inc    DWORD PTR ds:0xc0032644
c0016e11:	68 58 26 03 c0       	push   0xc0032658
c0016e16:	e8 ef 26 01 00       	call   c002950a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e1b:	83 c4 10             	add    esp,0x10
c0016e1e:	84 c0                	test   al,al
c0016e20:	0f 85 a2 00 00 00    	jne    c0016ec8 <timerHandler(unsigned long long)+0xef>
c0016e26:	83 ec 0c             	sub    esp,0xc
c0016e29:	68 58 26 03 c0       	push   0xc0032658
c0016e2e:	e8 f3 26 01 00       	call   c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e33:	83 c4 10             	add    esp,0x10
c0016e36:	89 c3                	mov    ebx,eax
c0016e38:	83 ec 0c             	sub    esp,0xc
c0016e3b:	68 58 26 03 c0       	push   0xc0032658
c0016e40:	e8 e1 26 01 00       	call   c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e45:	c7 04 24 58 26 03 c0 	mov    DWORD PTR [esp],0xc0032658
c0016e4c:	89 c5                	mov    ebp,eax
c0016e4e:	e8 db 26 01 00       	call   c002952e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e53:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e56:	83 c4 10             	add    esp,0x10
c0016e59:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e5c:	39 15 90 f7 02 c0    	cmp    DWORD PTR ds:0xc002f790,edx
c0016e62:	a1 94 f7 02 c0       	mov    eax,ds:0xc002f794
c0016e67:	19 c8                	sbb    eax,ecx
c0016e69:	72 21                	jb     c0016e8c <timerHandler(unsigned long long)+0xb3>
c0016e6b:	83 ec 0c             	sub    esp,0xc
c0016e6e:	55                   	push   ebp
c0016e6f:	e8 34 7d 00 00       	call   c001eba8 <unblockTask(ThreadControlBlock*)>
c0016e74:	83 c4 10             	add    esp,0x10
c0016e77:	39 eb                	cmp    ebx,ebp
c0016e79:	75 21                	jne    c0016e9c <timerHandler(unsigned long long)+0xc3>
c0016e7b:	83 ec 0c             	sub    esp,0xc
c0016e7e:	68 58 26 03 c0       	push   0xc0032658
c0016e83:	e8 9e 26 01 00       	call   c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e88:	89 c3                	mov    ebx,eax
c0016e8a:	eb 0d                	jmp    c0016e99 <timerHandler(unsigned long long)+0xc0>
c0016e8c:	50                   	push   eax
c0016e8d:	50                   	push   eax
c0016e8e:	55                   	push   ebp
c0016e8f:	68 58 26 03 c0       	push   0xc0032658
c0016e94:	e8 43 27 01 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e99:	83 c4 10             	add    esp,0x10
c0016e9c:	83 ec 0c             	sub    esp,0xc
c0016e9f:	68 58 26 03 c0       	push   0xc0032658
c0016ea4:	e8 61 26 01 00       	call   c002950a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ea9:	83 c4 10             	add    esp,0x10
c0016eac:	84 c0                	test   al,al
c0016eae:	75 18                	jne    c0016ec8 <timerHandler(unsigned long long)+0xef>
c0016eb0:	83 ec 0c             	sub    esp,0xc
c0016eb3:	68 58 26 03 c0       	push   0xc0032658
c0016eb8:	e8 69 26 01 00       	call   c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ebd:	83 c4 10             	add    esp,0x10
c0016ec0:	39 d8                	cmp    eax,ebx
c0016ec2:	0f 85 70 ff ff ff    	jne    c0016e38 <timerHandler(unsigned long long)+0x5f>
c0016ec8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ecd:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016ed1:	74 3d                	je     c0016f10 <timerHandler(unsigned long long)+0x137>
c0016ed3:	80 3d 0c f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f10c,0x0
c0016eda:	74 34                	je     c0016f10 <timerHandler(unsigned long long)+0x137>
c0016edc:	fa                   	cli    
c0016edd:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c0016ee3:	31 d2                	xor    edx,edx
c0016ee5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eea:	89 f9                	mov    ecx,edi
c0016eec:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016eef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ef4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ef7:	39 c6                	cmp    esi,eax
c0016ef9:	19 d1                	sbb    ecx,edx
c0016efb:	72 05                	jb     c0016f02 <timerHandler(unsigned long long)+0x129>
c0016efd:	e8 e2 77 00 00       	call   c001e6e4 <schedule()>
c0016f02:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0016f07:	48                   	dec    eax
c0016f08:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c0016f0d:	75 01                	jne    c0016f10 <timerHandler(unsigned long long)+0x137>
c0016f0f:	fb                   	sti    
c0016f10:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c0016f15:	48                   	dec    eax
c0016f16:	a3 44 26 03 c0       	mov    ds:0xc0032644,eax
c0016f1b:	75 18                	jne    c0016f35 <timerHandler(unsigned long long)+0x15c>
c0016f1d:	83 3d 40 26 03 c0 00 	cmp    DWORD PTR ds:0xc0032640,0x0
c0016f24:	74 0f                	je     c0016f35 <timerHandler(unsigned long long)+0x15c>
c0016f26:	c7 05 40 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x0
c0016f30:	e8 af 77 00 00       	call   c001e6e4 <schedule()>
c0016f35:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c0016f3a:	48                   	dec    eax
c0016f3b:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c0016f40:	75 01                	jne    c0016f43 <timerHandler(unsigned long long)+0x16a>
c0016f42:	fb                   	sti    
c0016f43:	83 c4 0c             	add    esp,0xc
c0016f46:	5b                   	pop    ebx
c0016f47:	5e                   	pop    esi
c0016f48:	5f                   	pop    edi
c0016f49:	5d                   	pop    ebp
c0016f4a:	c3                   	ret    

c0016f4b <setupTimer(int)>:
c0016f4b:	57                   	push   edi
c0016f4c:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0016f51:	56                   	push   esi
c0016f52:	53                   	push   ebx
c0016f53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f5d:	83 ec 0c             	sub    esp,0xc
c0016f60:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f66:	e8 3b d6 ff ff       	call   c00145a6 <Device::getName()>
c0016f6b:	83 c4 10             	add    esp,0x10
c0016f6e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f71:	0f 85 8d 00 00 00    	jne    c0017004 <setupTimer(int)+0xb9>
c0016f77:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0016f7c:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f83:	74 7f                	je     c0017004 <setupTimer(int)+0xb9>
c0016f85:	83 ec 0c             	sub    esp,0xc
c0016f88:	68 5c 01 00 00       	push   0x15c
c0016f8d:	e8 2e 89 ff ff       	call   c000f8c0 <malloc>
c0016f92:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f95:	89 c3                	mov    ebx,eax
c0016f97:	e8 bc 00 01 00       	call   c0027058 <PIT::PIT()>
c0016f9c:	59                   	pop    ecx
c0016f9d:	5f                   	pop    edi
c0016f9e:	53                   	push   ebx
c0016f9f:	ff 35 08 f1 02 c0    	push   DWORD PTR ds:0xc002f108
c0016fa5:	e8 10 d3 ff ff       	call   c00142ba <Device::addChild(Device*)>
c0016faa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fac:	6a 00                	push   0x0
c0016fae:	6a 00                	push   0x0
c0016fb0:	56                   	push   esi
c0016fb1:	53                   	push   ebx
c0016fb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fb5:	83 c4 14             	add    esp,0x14
c0016fb8:	68 60 01 00 00       	push   0x160
c0016fbd:	e8 fe 88 ff ff       	call   c000f8c0 <malloc>
c0016fc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fc5:	89 c7                	mov    edi,eax
c0016fc7:	e8 3c ff 00 00       	call   c0026f08 <APICTimer::APICTimer()>
c0016fcc:	6a 00                	push   0x0
c0016fce:	6a 00                	push   0x0
c0016fd0:	56                   	push   esi
c0016fd1:	57                   	push   edi
c0016fd2:	e8 33 fe 00 00       	call   c0026e0a <APICTimer::open(int, int, void*)>
c0016fd7:	83 c4 20             	add    esp,0x20
c0016fda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fdc:	6a 00                	push   0x0
c0016fde:	6a 00                	push   0x0
c0016fe0:	6a 00                	push   0x0
c0016fe2:	53                   	push   ebx
c0016fe3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fe6:	58                   	pop    eax
c0016fe7:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0016fec:	5a                   	pop    edx
c0016fed:	57                   	push   edi
c0016fee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ff4:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ffa:	e8 bb d2 ff ff       	call   c00142ba <Device::addChild(Device*)>
c0016fff:	83 c4 10             	add    esp,0x10
c0017002:	eb 33                	jmp    c0017037 <setupTimer(int)+0xec>
c0017004:	83 ec 0c             	sub    esp,0xc
c0017007:	68 5c 01 00 00       	push   0x15c
c001700c:	e8 af 88 ff ff       	call   c000f8c0 <malloc>
c0017011:	89 04 24             	mov    DWORD PTR [esp],eax
c0017014:	89 c3                	mov    ebx,eax
c0017016:	e8 3d 00 01 00       	call   c0027058 <PIT::PIT()>
c001701b:	58                   	pop    eax
c001701c:	5a                   	pop    edx
c001701d:	53                   	push   ebx
c001701e:	ff 35 08 f1 02 c0    	push   DWORD PTR ds:0xc002f108
c0017024:	e8 91 d2 ff ff       	call   c00142ba <Device::addChild(Device*)>
c0017029:	8b 03                	mov    eax,DWORD PTR [ebx]
c001702b:	6a 00                	push   0x0
c001702d:	6a 00                	push   0x0
c001702f:	56                   	push   esi
c0017030:	53                   	push   ebx
c0017031:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017034:	83 c4 20             	add    esp,0x20
c0017037:	89 d8                	mov    eax,ebx
c0017039:	5b                   	pop    ebx
c001703a:	5e                   	pop    esi
c001703b:	5f                   	pop    edi
c001703c:	c3                   	ret    
c001703d:	90                   	nop

c001703e <VCache::VCache(PhysicalDisk*)>:
c001703e:	53                   	push   ebx
c001703f:	83 ec 18             	sub    esp,0x18
c0017042:	ba 40 bf 02 c0       	mov    edx,0xc002bf40
c0017047:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704b:	89 10                	mov    DWORD PTR [eax],edx
c001704d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017051:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017063:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017067:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001706e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017079:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017080:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017087:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017092:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017096:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001709a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709e:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00170a5:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00170ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b0:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b8:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00170bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c0:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c8:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170cf:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00170d7:	83 ec 0c             	sub    esp,0xc
c00170da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170de:	e8 dd 87 ff ff       	call   c000f8c0 <malloc>
c00170e3:	83 c4 10             	add    esp,0x10
c00170e6:	89 c3                	mov    ebx,eax
c00170e8:	83 ec 0c             	sub    esp,0xc
c00170eb:	53                   	push   ebx
c00170ec:	e8 9d 73 00 00       	call   c001e48e <Mutex::Mutex()>
c00170f1:	83 c4 10             	add    esp,0x10
c00170f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f8:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017103:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001710a:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017111:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017115:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001711b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001711f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017122:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017126:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001712c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017132:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017136:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017139:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001713c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017140:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017144:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017148:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001714e:	05 00 01 00 00       	add    eax,0x100
c0017153:	c1 e0 04             	shl    eax,0x4
c0017156:	83 ec 0c             	sub    esp,0xc
c0017159:	50                   	push   eax
c001715a:	e8 61 87 ff ff       	call   c000f8c0 <malloc>
c001715f:	83 c4 10             	add    esp,0x10
c0017162:	89 c2                	mov    edx,eax
c0017164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017168:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001716b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001716f:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017176:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001717a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001717e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017182:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017188:	c1 e0 07             	shl    eax,0x7
c001718b:	83 ec 0c             	sub    esp,0xc
c001718e:	50                   	push   eax
c001718f:	e8 2c 87 ff ff       	call   c000f8c0 <malloc>
c0017194:	83 c4 10             	add    esp,0x10
c0017197:	89 c2                	mov    edx,eax
c0017199:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001719d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00171a0:	90                   	nop
c00171a1:	83 c4 18             	add    esp,0x18
c00171a4:	5b                   	pop    ebx
c00171a5:	c3                   	ret    

c00171a6 <VCache::invalidateReadBuffer()>:
c00171a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171aa:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00171b0:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00171b4:	c3                   	ret    
c00171b5:	90                   	nop

c00171b6 <VCache::writeWriteBuffer()>:
c00171b6:	53                   	push   ebx
c00171b7:	83 ec 14             	sub    esp,0x14
c00171ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00171be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00171c3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00171c9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00171cc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00171cf:	50                   	push   eax
c00171d0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171d3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00171da:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00171e1:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00171e5:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171ec:	83 c4 28             	add    esp,0x28
c00171ef:	5b                   	pop    ebx
c00171f0:	c3                   	ret    
c00171f1:	90                   	nop

c00171f2 <VCache::~VCache()>:
c00171f2:	83 ec 0c             	sub    esp,0xc
c00171f5:	ba 40 bf 02 c0       	mov    edx,0xc002bf40
c00171fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171fe:	89 10                	mov    DWORD PTR [eax],edx
c0017200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017204:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017207:	84 c0                	test   al,al
c0017209:	74 0f                	je     c001721a <VCache::~VCache()+0x28>
c001720b:	83 ec 0c             	sub    esp,0xc
c001720e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017212:	e8 9f ff ff ff       	call   c00171b6 <VCache::writeWriteBuffer()>
c0017217:	83 c4 10             	add    esp,0x10
c001721a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001721e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017221:	83 ec 0c             	sub    esp,0xc
c0017224:	50                   	push   eax
c0017225:	e8 a6 86 ff ff       	call   c000f8d0 <free>
c001722a:	83 c4 10             	add    esp,0x10
c001722d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017231:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017234:	83 ec 0c             	sub    esp,0xc
c0017237:	50                   	push   eax
c0017238:	e8 93 86 ff ff       	call   c000f8d0 <free>
c001723d:	83 c4 10             	add    esp,0x10
c0017240:	90                   	nop
c0017241:	83 c4 0c             	add    esp,0xc
c0017244:	c3                   	ret    
c0017245:	90                   	nop

c0017246 <VCache::~VCache()>:
c0017246:	83 ec 0c             	sub    esp,0xc
c0017249:	83 ec 0c             	sub    esp,0xc
c001724c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017250:	e8 9d ff ff ff       	call   c00171f2 <VCache::~VCache()>
c0017255:	83 c4 10             	add    esp,0x10
c0017258:	83 ec 08             	sub    esp,0x8
c001725b:	6a 44                	push   0x44
c001725d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017261:	e8 49 bb ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0017266:	83 c4 10             	add    esp,0x10
c0017269:	83 c4 0c             	add    esp,0xc
c001726c:	c3                   	ret    
c001726d:	90                   	nop

c001726e <VCache::write(unsigned long long, int, void*)>:
c001726e:	55                   	push   ebp
c001726f:	57                   	push   edi
c0017270:	56                   	push   esi
c0017271:	53                   	push   ebx
c0017272:	83 ec 28             	sub    esp,0x28
c0017275:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017279:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001727d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017281:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017285:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017288:	e8 8f 77 00 00       	call   c001ea1c <Semaphore::acquire()>
c001728d:	83 c4 10             	add    esp,0x10
c0017290:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017294:	74 0c                	je     c00172a2 <VCache::write(unsigned long long, int, void*)+0x34>
c0017296:	83 ec 0c             	sub    esp,0xc
c0017299:	53                   	push   ebx
c001729a:	e8 07 ff ff ff       	call   c00171a6 <VCache::invalidateReadBuffer()>
c001729f:	83 c4 10             	add    esp,0x10
c00172a2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172a6:	74 72                	je     c001731a <VCache::write(unsigned long long, int, void*)+0xac>
c00172a8:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00172ab:	89 c8                	mov    eax,ecx
c00172ad:	99                   	cdq    
c00172ae:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00172b1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00172b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00172bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172c4:	31 f0                	xor    eax,esi
c00172c6:	31 fa                	xor    edx,edi
c00172c8:	09 d0                	or     eax,edx
c00172ca:	75 42                	jne    c001730e <VCache::write(unsigned long long, int, void*)+0xa0>
c00172cc:	83 fd 01             	cmp    ebp,0x1
c00172cf:	75 3d                	jne    c001730e <VCache::write(unsigned long long, int, void*)+0xa0>
c00172d1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172d4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00172da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172de:	0f af ca             	imul   ecx,edx
c00172e1:	8d 3c 02             	lea    edi,[edx+eax*1]
c00172e4:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00172e7:	39 f8                	cmp    eax,edi
c00172e9:	74 09                	je     c00172f4 <VCache::write(unsigned long long, int, void*)+0x86>
c00172eb:	8a 10                	mov    dl,BYTE PTR [eax]
c00172ed:	41                   	inc    ecx
c00172ee:	88 51 ff             	mov    BYTE PTR [ecx-0x1],dl
c00172f1:	40                   	inc    eax
c00172f2:	eb f3                	jmp    c00172e7 <VCache::write(unsigned long long, int, void*)+0x79>
c00172f4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172f7:	40                   	inc    eax
c00172f8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00172fb:	83 c0 80             	add    eax,0xffffff80
c00172fe:	75 60                	jne    c0017360 <VCache::write(unsigned long long, int, void*)+0xf2>
c0017300:	83 ec 0c             	sub    esp,0xc
c0017303:	53                   	push   ebx
c0017304:	e8 ad fe ff ff       	call   c00171b6 <VCache::writeWriteBuffer()>
c0017309:	83 c4 10             	add    esp,0x10
c001730c:	eb 52                	jmp    c0017360 <VCache::write(unsigned long long, int, void*)+0xf2>
c001730e:	83 ec 0c             	sub    esp,0xc
c0017311:	53                   	push   ebx
c0017312:	e8 9f fe ff ff       	call   c00171b6 <VCache::writeWriteBuffer()>
c0017317:	83 c4 10             	add    esp,0x10
c001731a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c001731d:	83 fd 7f             	cmp    ebp,0x7f
c0017320:	7f 2b                	jg     c001734d <VCache::write(unsigned long long, int, void*)+0xdf>
c0017322:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017325:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017328:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001732b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001732f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017333:	8b ba 5c 01 00 00    	mov    edi,DWORD PTR [edx+0x15c]
c0017339:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001733c:	01 c7                	add    edi,eax
c001733e:	89 fe                	mov    esi,edi
c0017340:	39 f0                	cmp    eax,esi
c0017342:	74 1c                	je     c0017360 <VCache::write(unsigned long long, int, void*)+0xf2>
c0017344:	8a 10                	mov    dl,BYTE PTR [eax]
c0017346:	41                   	inc    ecx
c0017347:	88 51 ff             	mov    BYTE PTR [ecx-0x1],dl
c001734a:	40                   	inc    eax
c001734b:	eb f3                	jmp    c0017340 <VCache::write(unsigned long long, int, void*)+0xd2>
c001734d:	83 ec 0c             	sub    esp,0xc
c0017350:	8b 02                	mov    eax,DWORD PTR [edx]
c0017352:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017356:	55                   	push   ebp
c0017357:	57                   	push   edi
c0017358:	56                   	push   esi
c0017359:	52                   	push   edx
c001735a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001735d:	83 c4 20             	add    esp,0x20
c0017360:	83 ec 0c             	sub    esp,0xc
c0017363:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017366:	e8 eb 7d 00 00       	call   c001f156 <Semaphore::release()>
c001736b:	83 c4 2c             	add    esp,0x2c
c001736e:	31 c0                	xor    eax,eax
c0017370:	5b                   	pop    ebx
c0017371:	5e                   	pop    esi
c0017372:	5f                   	pop    edi
c0017373:	5d                   	pop    ebp
c0017374:	c3                   	ret    
c0017375:	90                   	nop

c0017376 <VCache::read(unsigned long long, int, void*)>:
c0017376:	55                   	push   ebp
c0017377:	57                   	push   edi
c0017378:	56                   	push   esi
c0017379:	53                   	push   ebx
c001737a:	83 ec 28             	sub    esp,0x28
c001737d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017381:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017385:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017389:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001738d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017391:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017395:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017399:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001739c:	e8 7b 76 00 00       	call   c001ea1c <Semaphore::acquire()>
c00173a1:	83 c4 10             	add    esp,0x10
c00173a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00173a8:	74 0c                	je     c00173b6 <VCache::read(unsigned long long, int, void*)+0x40>
c00173aa:	83 ec 0c             	sub    esp,0xc
c00173ad:	53                   	push   ebx
c00173ae:	e8 03 fe ff ff       	call   c00171b6 <VCache::writeWriteBuffer()>
c00173b3:	83 c4 10             	add    esp,0x10
c00173b6:	83 fe 01             	cmp    esi,0x1
c00173b9:	0f 85 80 00 00 00    	jne    c001743f <VCache::read(unsigned long long, int, void*)+0xc9>
c00173bf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173c2:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00173c9:	75 74                	jne    c001743f <VCache::read(unsigned long long, int, void*)+0xc9>
c00173cb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00173ce:	89 d1                	mov    ecx,edx
c00173d0:	f7 d9                	neg    ecx
c00173d2:	89 cf                	mov    edi,ecx
c00173d4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00173d8:	c1 ff 1f             	sar    edi,0x1f
c00173db:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00173de:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00173e2:	89 ce                	mov    esi,ecx
c00173e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173e8:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00173ec:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00173f0:	89 cf                	mov    edi,ecx
c00173f2:	74 0a                	je     c00173fe <VCache::read(unsigned long long, int, void*)+0x88>
c00173f4:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00173f7:	75 05                	jne    c00173fe <VCache::read(unsigned long long, int, void*)+0x88>
c00173f9:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00173fc:	74 1c                	je     c001741a <VCache::read(unsigned long long, int, void*)+0xa4>
c00173fe:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017402:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017405:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017408:	83 ec 0c             	sub    esp,0xc
c001740b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001740d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017410:	52                   	push   edx
c0017411:	57                   	push   edi
c0017412:	56                   	push   esi
c0017413:	50                   	push   eax
c0017414:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017417:	83 c4 20             	add    esp,0x20
c001741a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001741d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017423:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017426:	48                   	dec    eax
c0017427:	23 04 24             	and    eax,DWORD PTR [esp]
c001742a:	0f af c2             	imul   eax,edx
c001742d:	01 ea                	add    edx,ebp
c001742f:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017432:	39 ea                	cmp    edx,ebp
c0017434:	74 2a                	je     c0017460 <VCache::read(unsigned long long, int, void*)+0xea>
c0017436:	8a 08                	mov    cl,BYTE PTR [eax]
c0017438:	45                   	inc    ebp
c0017439:	88 4d ff             	mov    BYTE PTR [ebp-0x1],cl
c001743c:	40                   	inc    eax
c001743d:	eb f3                	jmp    c0017432 <VCache::read(unsigned long long, int, void*)+0xbc>
c001743f:	83 ec 0c             	sub    esp,0xc
c0017442:	53                   	push   ebx
c0017443:	e8 5e fd ff ff       	call   c00171a6 <VCache::invalidateReadBuffer()>
c0017448:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001744b:	8b 10                	mov    edx,DWORD PTR [eax]
c001744d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017450:	56                   	push   esi
c0017451:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017455:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017459:	50                   	push   eax
c001745a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001745d:	83 c4 20             	add    esp,0x20
c0017460:	83 ec 0c             	sub    esp,0xc
c0017463:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017466:	e8 eb 7c 00 00       	call   c001f156 <Semaphore::release()>
c001746b:	83 c4 2c             	add    esp,0x2c
c001746e:	31 c0                	xor    eax,eax
c0017470:	5b                   	pop    ebx
c0017471:	5e                   	pop    esi
c0017472:	5f                   	pop    edi
c0017473:	5d                   	pop    ebp
c0017474:	c3                   	ret    
c0017475:	90                   	nop

c0017476 <Video::putrect(int, int, int, int, unsigned int)>:
c0017476:	55                   	push   ebp
c0017477:	57                   	push   edi
c0017478:	56                   	push   esi
c0017479:	53                   	push   ebx
c001747a:	83 ec 1c             	sub    esp,0x1c
c001747d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017481:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017485:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017489:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001748d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017495:	01 df                	add    edi,ebx
c0017497:	39 fb                	cmp    ebx,edi
c0017499:	7d 1f                	jge    c00174ba <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001749b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001749f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00174a3:	7d 12                	jge    c00174b7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00174a5:	8b 16                	mov    edx,DWORD PTR [esi]
c00174a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00174ab:	53                   	push   ebx
c00174ac:	55                   	push   ebp
c00174ad:	45                   	inc    ebp
c00174ae:	56                   	push   esi
c00174af:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00174b2:	83 c4 10             	add    esp,0x10
c00174b5:	eb e8                	jmp    c001749f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00174b7:	43                   	inc    ebx
c00174b8:	eb dd                	jmp    c0017497 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00174ba:	83 c4 1c             	add    esp,0x1c
c00174bd:	5b                   	pop    ebx
c00174be:	5e                   	pop    esi
c00174bf:	5f                   	pop    edi
c00174c0:	5d                   	pop    ebp
c00174c1:	c3                   	ret    

c00174c2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00174c2:	55                   	push   ebp
c00174c3:	57                   	push   edi
c00174c4:	31 ff                	xor    edi,edi
c00174c6:	56                   	push   esi
c00174c7:	53                   	push   ebx
c00174c8:	83 ec 1c             	sub    esp,0x1c
c00174cb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00174cf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00174d3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00174da:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00174df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174e3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00174e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174eb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00174ee:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174f2:	01 f9                	add    ecx,edi
c00174f4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00174f8:	7d 2f                	jge    c0017529 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00174fa:	31 f6                	xor    esi,esi
c00174fc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017500:	01 f2                	add    edx,esi
c0017502:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017506:	7d 1a                	jge    c0017522 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017508:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001750b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001750e:	46                   	inc    esi
c001750f:	51                   	push   ecx
c0017510:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017514:	52                   	push   edx
c0017515:	55                   	push   ebp
c0017516:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017519:	83 c4 10             	add    esp,0x10
c001751c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017520:	eb da                	jmp    c00174fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017522:	47                   	inc    edi
c0017523:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017527:	eb c5                	jmp    c00174ee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017529:	83 c4 1c             	add    esp,0x1c
c001752c:	5b                   	pop    ebx
c001752d:	5e                   	pop    esi
c001752e:	5f                   	pop    edi
c001752f:	5d                   	pop    ebp
c0017530:	c3                   	ret    
c0017531:	90                   	nop

c0017532 <Video::blit(unsigned int*, int, int, int, int)>:
c0017532:	55                   	push   ebp
c0017533:	57                   	push   edi
c0017534:	56                   	push   esi
c0017535:	53                   	push   ebx
c0017536:	83 ec 1c             	sub    esp,0x1c
c0017539:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001753d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017541:	85 c0                	test   eax,eax
c0017543:	79 02                	jns    c0017547 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017545:	31 c0                	xor    eax,eax
c0017547:	c1 e0 02             	shl    eax,0x2
c001754a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001754e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017552:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017556:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001755a:	39 d8                	cmp    eax,ebx
c001755c:	7e 49                	jle    c00175a7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001755e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017564:	7c 41                	jl     c00175a7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017566:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001756a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001756e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017572:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017576:	39 f9                	cmp    ecx,edi
c0017578:	7e 22                	jle    c001759c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001757a:	83 c5 04             	add    ebp,0x4
c001757d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017583:	7c 14                	jl     c0017599 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017585:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017587:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001758a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001758e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017592:	56                   	push   esi
c0017593:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017596:	83 c4 10             	add    esp,0x10
c0017599:	47                   	inc    edi
c001759a:	eb d2                	jmp    c001756e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001759c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175a0:	43                   	inc    ebx
c00175a1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00175a5:	eb ab                	jmp    c0017552 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00175a7:	83 c4 1c             	add    esp,0x1c
c00175aa:	5b                   	pop    ebx
c00175ab:	5e                   	pop    esi
c00175ac:	5f                   	pop    edi
c00175ad:	5d                   	pop    ebp
c00175ae:	c3                   	ret    
c00175af:	90                   	nop

c00175b0 <Video::clearScreen(unsigned int)>:
c00175b0:	57                   	push   edi
c00175b1:	56                   	push   esi
c00175b2:	53                   	push   ebx
c00175b3:	31 db                	xor    ebx,ebx
c00175b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00175b9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00175bf:	7e 1f                	jle    c00175e0 <Video::clearScreen(unsigned int)+0x30>
c00175c1:	31 ff                	xor    edi,edi
c00175c3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00175c9:	7e 12                	jle    c00175dd <Video::clearScreen(unsigned int)+0x2d>
c00175cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00175cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175d1:	53                   	push   ebx
c00175d2:	57                   	push   edi
c00175d3:	47                   	inc    edi
c00175d4:	56                   	push   esi
c00175d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175d8:	83 c4 10             	add    esp,0x10
c00175db:	eb e6                	jmp    c00175c3 <Video::clearScreen(unsigned int)+0x13>
c00175dd:	43                   	inc    ebx
c00175de:	eb d9                	jmp    c00175b9 <Video::clearScreen(unsigned int)+0x9>
c00175e0:	5b                   	pop    ebx
c00175e1:	5e                   	pop    esi
c00175e2:	5f                   	pop    edi
c00175e3:	c3                   	ret    

c00175e4 <Video::putpixel(int, int, unsigned int)>:
c00175e4:	c7 44 24 04 48 bf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bf48
c00175ec:	e9 06 33 00 00       	jmp    c001a8f7 <Krnl::panic(char const*)>
c00175f1:	90                   	nop

c00175f2 <Video::Video(char const*)>:
c00175f2:	83 ec 0c             	sub    esp,0xc
c00175f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f9:	83 ec 08             	sub    esp,0x8
c00175fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017600:	50                   	push   eax
c0017601:	e8 a4 ce ff ff       	call   c00144aa <Device::Device(char const*)>
c0017606:	83 c4 10             	add    esp,0x10
c0017609:	ba cc bf 02 c0       	mov    edx,0xc002bfcc
c001760e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017612:	89 10                	mov    DWORD PTR [eax],edx
c0017614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017618:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017622:	90                   	nop
c0017623:	83 c4 0c             	add    esp,0xc
c0017626:	c3                   	ret    
c0017627:	90                   	nop

c0017628 <Video::~Video()>:
c0017628:	83 ec 0c             	sub    esp,0xc
c001762b:	ba cc bf 02 c0       	mov    edx,0xc002bfcc
c0017630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017634:	89 10                	mov    DWORD PTR [eax],edx
c0017636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001763a:	83 ec 0c             	sub    esp,0xc
c001763d:	50                   	push   eax
c001763e:	e8 53 cb ff ff       	call   c0014196 <Device::~Device()>
c0017643:	83 c4 10             	add    esp,0x10
c0017646:	90                   	nop
c0017647:	83 c4 0c             	add    esp,0xc
c001764a:	c3                   	ret    
c001764b:	90                   	nop

c001764c <Video::~Video()>:
c001764c:	83 ec 0c             	sub    esp,0xc
c001764f:	83 ec 0c             	sub    esp,0xc
c0017652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017656:	e8 cd ff ff ff       	call   c0017628 <Video::~Video()>
c001765b:	83 c4 10             	add    esp,0x10
c001765e:	83 ec 08             	sub    esp,0x8
c0017661:	68 64 01 00 00       	push   0x164
c0017666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001766a:	e8 40 b7 ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c001766f:	83 c4 10             	add    esp,0x10
c0017672:	83 c4 0c             	add    esp,0xc
c0017675:	c3                   	ret    

c0017676 <Video::isMonochrome()>:
c0017676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001767a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017680:	c3                   	ret    
c0017681:	90                   	nop

c0017682 <Video::getWidth()>:
c0017682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017686:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001768c:	c3                   	ret    
c001768d:	90                   	nop

c001768e <Video::getHeight()>:
c001768e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017692:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017698:	c3                   	ret    
c0017699:	90                   	nop

c001769a <Video::drawCursor(int, int, unsigned char*, int)>:
c001769a:	55                   	push   ebp
c001769b:	57                   	push   edi
c001769c:	56                   	push   esi
c001769d:	53                   	push   ebx
c001769e:	83 ec 2c             	sub    esp,0x2c
c00176a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00176a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00176a9:	83 f8 01             	cmp    eax,0x1
c00176ac:	19 c9                	sbb    ecx,ecx
c00176ae:	31 db                	xor    ebx,ebx
c00176b0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00176b4:	89 cd                	mov    ebp,ecx
c00176b6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00176be:	f7 d5                	not    ebp
c00176c0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00176c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00176ca:	01 d8                	add    eax,ebx
c00176cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176d0:	56                   	push   esi
c00176d1:	e8 b8 ff ff ff       	call   c001768e <Video::getHeight()>
c00176d6:	59                   	pop    ecx
c00176d7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00176db:	7e 70                	jle    c001774d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00176dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176e1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00176e5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00176e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176ec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176f0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00176f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176fb:	89 f8                	mov    eax,edi
c00176fd:	83 c0 20             	add    eax,0x20
c0017700:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017704:	56                   	push   esi
c0017705:	e8 78 ff ff ff       	call   c0017682 <Video::getWidth()>
c001770a:	5a                   	pop    edx
c001770b:	39 c7                	cmp    edi,eax
c001770d:	7d 34                	jge    c0017743 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001770f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017714:	74 05                	je     c001771b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017716:	8b 06                	mov    eax,DWORD PTR [esi]
c0017718:	55                   	push   ebp
c0017719:	eb 0d                	jmp    c0017728 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001771b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017720:	74 12                	je     c0017734 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017722:	8b 06                	mov    eax,DWORD PTR [esi]
c0017724:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017728:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001772c:	57                   	push   edi
c001772d:	56                   	push   esi
c001772e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017731:	83 c4 10             	add    esp,0x10
c0017734:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017738:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001773c:	47                   	inc    edi
c001773d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017741:	75 c1                	jne    c0017704 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017743:	43                   	inc    ebx
c0017744:	83 fb 20             	cmp    ebx,0x20
c0017747:	0f 85 79 ff ff ff    	jne    c00176c6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001774d:	83 c4 2c             	add    esp,0x2c
c0017750:	5b                   	pop    ebx
c0017751:	5e                   	pop    esi
c0017752:	5f                   	pop    edi
c0017753:	5d                   	pop    ebp
c0017754:	c3                   	ret    
c0017755:	90                   	nop

c0017756 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017756:	55                   	push   ebp
c0017757:	57                   	push   edi
c0017758:	56                   	push   esi
c0017759:	53                   	push   ebx
c001775a:	83 ec 28             	sub    esp,0x28
c001775d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017761:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017765:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017769:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001776d:	c1 e7 08             	shl    edi,0x8
c0017770:	01 c7                	add    edi,eax
c0017772:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017776:	c1 e0 08             	shl    eax,0x8
c0017779:	01 d0                	add    eax,edx
c001777b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001777f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017783:	0f af c7             	imul   eax,edi
c0017786:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001778d:	50                   	push   eax
c001778e:	e8 2d 81 ff ff       	call   c000f8c0 <malloc>
c0017793:	83 c4 10             	add    esp,0x10
c0017796:	89 c5                	mov    ebp,eax
c0017798:	85 c0                	test   eax,eax
c001779a:	75 15                	jne    c00177b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001779c:	83 ec 0c             	sub    esp,0xc
c001779f:	68 69 bf 02 c0       	push   0xc002bf69
c00177a4:	e8 e6 b6 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00177a9:	83 c4 10             	add    esp,0x10
c00177ac:	e9 1c 01 00 00       	jmp    c00178cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177b1:	be 12 00 00 00       	mov    esi,0x12
c00177b6:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177ba:	74 11                	je     c00177cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00177bc:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00177c0:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00177c4:	c1 fe 03             	sar    esi,0x3
c00177c7:	0f af f0             	imul   esi,eax
c00177ca:	83 c6 12             	add    esi,0x12
c00177cd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00177d1:	74 04                	je     c00177d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00177d3:	85 ff                	test   edi,edi
c00177d5:	75 12                	jne    c00177e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00177d7:	83 ec 0c             	sub    esp,0xc
c00177da:	68 80 bf 02 c0       	push   0xc002bf80
c00177df:	e8 ab b6 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00177e4:	e9 ce 00 00 00       	jmp    c00178b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00177e9:	52                   	push   edx
c00177ea:	52                   	push   edx
c00177eb:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00177ef:	50                   	push   eax
c00177f0:	68 95 bf 02 c0       	push   0xc002bf95
c00177f5:	e8 95 b6 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00177fa:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00177fe:	83 c4 10             	add    esp,0x10
c0017801:	80 fa 02             	cmp    dl,0x2
c0017804:	0f 85 98 00 00 00    	jne    c00178a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001780a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001780f:	75 10                	jne    c0017821 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017811:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017815:	75 0a                	jne    c0017821 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017817:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001781a:	83 e8 18             	sub    eax,0x18
c001781d:	a8 f7                	test   al,0xf7
c001781f:	74 0a                	je     c001782b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017821:	83 ec 0c             	sub    esp,0xc
c0017824:	68 a2 bf 02 c0       	push   0xc002bfa2
c0017829:	eb 7f                	jmp    c00178aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001782b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017833:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001783b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001783f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017847:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001784b:	75 0c                	jne    c0017859 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001784d:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017852:	c1 e0 18             	shl    eax,0x18
c0017855:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017859:	41                   	inc    ecx
c001785a:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001785f:	c1 e2 10             	shl    edx,0x10
c0017862:	89 d0                	mov    eax,edx
c0017864:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017869:	c1 e2 08             	shl    edx,0x8
c001786c:	09 c2                	or     edx,eax
c001786e:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017872:	09 c2                	or     edx,eax
c0017874:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017878:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001787c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017880:	c1 f8 03             	sar    eax,0x3
c0017883:	01 c6                	add    esi,eax
c0017885:	89 c8                	mov    eax,ecx
c0017887:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001788b:	39 c7                	cmp    edi,eax
c001788d:	7f b0                	jg     c001783f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001788f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017893:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017897:	39 14 24             	cmp    DWORD PTR [esp],edx
c001789a:	7e 22                	jle    c00178be <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001789c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00178a0:	eb 99                	jmp    c001783b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00178a2:	50                   	push   eax
c00178a3:	50                   	push   eax
c00178a4:	52                   	push   edx
c00178a5:	68 b0 bf 02 c0       	push   0xc002bfb0
c00178aa:	e8 e0 b5 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00178af:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00178b2:	e8 19 80 ff ff       	call   c000f8d0 <free>
c00178b7:	83 c4 10             	add    esp,0x10
c00178ba:	31 ed                	xor    ebp,ebp
c00178bc:	eb 0f                	jmp    c00178cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00178be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178c2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00178c5:	89 38                	mov    DWORD PTR [eax],edi
c00178c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00178cb:	89 08                	mov    DWORD PTR [eax],ecx
c00178cd:	83 c4 1c             	add    esp,0x1c
c00178d0:	89 e8                	mov    eax,ebp
c00178d2:	5b                   	pop    ebx
c00178d3:	5e                   	pop    esi
c00178d4:	5f                   	pop    edi
c00178d5:	5d                   	pop    ebp
c00178d6:	c3                   	ret    
c00178d7:	90                   	nop

c00178d8 <Video::putTGA(int, int, unsigned char*, int)>:
c00178d8:	55                   	push   ebp
c00178d9:	57                   	push   edi
c00178da:	56                   	push   esi
c00178db:	53                   	push   ebx
c00178dc:	83 ec 28             	sub    esp,0x28
c00178df:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00178e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178e7:	50                   	push   eax
c00178e8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178ec:	50                   	push   eax
c00178ed:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178f1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178f5:	56                   	push   esi
c00178f6:	e8 5b fe ff ff       	call   c0017756 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00178fb:	83 c4 20             	add    esp,0x20
c00178fe:	85 c0                	test   eax,eax
c0017900:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017904:	74 35                	je     c001793b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017906:	89 c7                	mov    edi,eax
c0017908:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001790c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017910:	39 d8                	cmp    eax,ebx
c0017912:	7e 27                	jle    c001793b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017914:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017918:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001791c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017920:	39 e8                	cmp    eax,ebp
c0017922:	7e 14                	jle    c0017938 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017924:	8b 06                	mov    eax,DWORD PTR [esi]
c0017926:	83 c7 04             	add    edi,0x4
c0017929:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001792c:	53                   	push   ebx
c001792d:	55                   	push   ebp
c001792e:	45                   	inc    ebp
c001792f:	56                   	push   esi
c0017930:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017933:	83 c4 10             	add    esp,0x10
c0017936:	eb e0                	jmp    c0017918 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017938:	43                   	inc    ebx
c0017939:	eb cd                	jmp    c0017908 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001793b:	83 c4 1c             	add    esp,0x1c
c001793e:	5b                   	pop    ebx
c001793f:	5e                   	pop    esi
c0017940:	5f                   	pop    edi
c0017941:	5d                   	pop    ebp
c0017942:	c3                   	ret    
c0017943:	90                   	nop

c0017944 <ACPI::close(int, int, void*)>:
c0017944:	83 ec 1c             	sub    esp,0x1c
c0017947:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001794f:	74 0a                	je     c001795b <ACPI::close(int, int, void*)+0x17>
c0017951:	b8 00 00 00 00       	mov    eax,0x0
c0017956:	e9 9a 00 00 00       	jmp    c00179f5 <ACPI::close(int, int, void*)+0xb1>
c001795b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017960:	75 37                	jne    c0017999 <ACPI::close(int, int, void*)+0x55>
c0017962:	83 ec 0c             	sub    esp,0xc
c0017965:	68 0c c0 02 c0       	push   0xc002c00c
c001796a:	e8 20 b5 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001796f:	83 c4 10             	add    esp,0x10
c0017972:	a1 c8 17 03 c0       	mov    eax,ds:0xc00317c8
c0017977:	85 c0                	test   eax,eax
c0017979:	74 07                	je     c0017982 <ACPI::close(int, int, void*)+0x3e>
c001797b:	a1 c8 17 03 c0       	mov    eax,ds:0xc00317c8
c0017980:	ff d0                	call   eax
c0017982:	83 ec 0c             	sub    esp,0xc
c0017985:	68 80 c1 02 c0       	push   0xc002c180
c001798a:	e8 68 2f 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c001798f:	83 c4 10             	add    esp,0x10
c0017992:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017997:	eb 5c                	jmp    c00179f5 <ACPI::close(int, int, void*)+0xb1>
c0017999:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001799e:	75 50                	jne    c00179f0 <ACPI::close(int, int, void*)+0xac>
c00179a0:	a1 c4 17 03 c0       	mov    eax,ds:0xc00317c4
c00179a5:	85 c0                	test   eax,eax
c00179a7:	74 07                	je     c00179b0 <ACPI::close(int, int, void*)+0x6c>
c00179a9:	a1 c4 17 03 c0       	mov    eax,ds:0xc00317c4
c00179ae:	ff d0                	call   eax
c00179b0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00179b5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00179ba:	83 e0 02             	and    eax,0x2
c00179bd:	74 1c                	je     c00179db <ACPI::close(int, int, void*)+0x97>
c00179bf:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00179c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179ca:	89 c2                	mov    edx,eax
c00179cc:	ec                   	in     al,dx
c00179cd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00179d1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00179d5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179d9:	eb da                	jmp    c00179b5 <ACPI::close(int, int, void*)+0x71>
c00179db:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00179e2:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00179e7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00179eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179ef:	ee                   	out    dx,al
c00179f0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179f5:	83 c4 1c             	add    esp,0x1c
c00179f8:	c3                   	ret    

c00179f9 <findRSDP()>:
c00179f9:	83 ec 1c             	sub    esp,0x1c
c00179fc:	83 ec 0c             	sub    esp,0xc
c00179ff:	68 19 c0 02 c0       	push   0xc002c019
c0017a04:	e8 86 b4 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0017a09:	83 c4 10             	add    esp,0x10
c0017a0c:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0017a11:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a17:	83 e0 04             	and    eax,0x4
c0017a1a:	84 c0                	test   al,al
c0017a1c:	75 07                	jne    c0017a25 <findRSDP()+0x2c>
c0017a1e:	b8 00 00 00 00       	mov    eax,0x0
c0017a23:	eb 6a                	jmp    c0017a8f <findRSDP()+0x96>
c0017a25:	a1 54 f1 02 c0       	mov    eax,ds:0xc002f154
c0017a2a:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017a2f:	7f 1b                	jg     c0017a4c <findRSDP()+0x53>
c0017a31:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0017a36:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a3c:	83 e2 fb             	and    edx,0xfffffffb
c0017a3f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a45:	b8 00 00 00 00       	mov    eax,0x0
c0017a4a:	eb 43                	jmp    c0017a8f <findRSDP()+0x96>
c0017a4c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017a54:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017a5c:	77 2c                	ja     c0017a8a <findRSDP()+0x91>
c0017a5e:	83 ec 04             	sub    esp,0x4
c0017a61:	6a 08                	push   0x8
c0017a63:	68 27 c0 02 c0       	push   0xc002c027
c0017a68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a6c:	e8 f7 8b fe ff       	call   c0000668 <memcmp>
c0017a71:	83 c4 10             	add    esp,0x10
c0017a74:	85 c0                	test   eax,eax
c0017a76:	0f 94 c0             	sete   al
c0017a79:	84 c0                	test   al,al
c0017a7b:	74 06                	je     c0017a83 <findRSDP()+0x8a>
c0017a7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a81:	eb 0c                	jmp    c0017a8f <findRSDP()+0x96>
c0017a83:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a88:	eb ca                	jmp    c0017a54 <findRSDP()+0x5b>
c0017a8a:	b8 00 00 00 00       	mov    eax,0x0
c0017a8f:	83 c4 1c             	add    esp,0x1c
c0017a92:	c3                   	ret    

c0017a93 <loadACPITables(unsigned char*)>:
c0017a93:	56                   	push   esi
c0017a94:	53                   	push   ebx
c0017a95:	83 ec 64             	sub    esp,0x64
c0017a98:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0017a9d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017aa3:	83 e0 04             	and    eax,0x4
c0017aa6:	84 c0                	test   al,al
c0017aa8:	0f 84 47 02 00 00    	je     c0017cf5 <loadACPITables(unsigned char*)+0x262>
c0017aae:	a0 e0 19 03 c0       	mov    al,ds:0xc00319e0
c0017ab3:	84 c0                	test   al,al
c0017ab5:	74 75                	je     c0017b2c <loadACPITables(unsigned char*)+0x99>
c0017ab7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017abb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017abf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017ac3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ac6:	83 e8 24             	sub    eax,0x24
c0017ac9:	c1 e8 03             	shr    eax,0x3
c0017acc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017ad0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017ad8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017adc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017ae0:	0f 8d b2 00 00 00    	jge    c0017b98 <loadACPITables(unsigned char*)+0x105>
c0017ae6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017aea:	83 c0 24             	add    eax,0x24
c0017aed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017af1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017af5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017af9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017afd:	c1 e0 03             	shl    eax,0x3
c0017b00:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017b04:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017b08:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b0d:	89 c1                	mov    ecx,eax
c0017b0f:	a1 cc 17 03 c0       	mov    eax,ds:0xc00317cc
c0017b14:	8d 50 01             	lea    edx,[eax+0x1]
c0017b17:	89 15 cc 17 03 c0    	mov    DWORD PTR ds:0xc00317cc,edx
c0017b1d:	89 ca                	mov    edx,ecx
c0017b1f:	89 14 c5 e4 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce81c],edx
c0017b26:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017b2a:	eb ac                	jmp    c0017ad8 <loadACPITables(unsigned char*)+0x45>
c0017b2c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017b30:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017b34:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b3b:	83 e8 24             	sub    eax,0x24
c0017b3e:	c1 e8 02             	shr    eax,0x2
c0017b41:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b45:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017b4d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017b51:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017b55:	7d 41                	jge    c0017b98 <loadACPITables(unsigned char*)+0x105>
c0017b57:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017b5b:	83 c0 24             	add    eax,0x24
c0017b5e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017b62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b66:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b6a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017b6e:	c1 e0 02             	shl    eax,0x2
c0017b71:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017b75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b79:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b7b:	a1 cc 17 03 c0       	mov    eax,ds:0xc00317cc
c0017b80:	8d 50 01             	lea    edx,[eax+0x1]
c0017b83:	89 15 cc 17 03 c0    	mov    DWORD PTR ds:0xc00317cc,edx
c0017b89:	89 ca                	mov    edx,ecx
c0017b8b:	89 14 c5 e4 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce81c],edx
c0017b92:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017b96:	eb b5                	jmp    c0017b4d <loadACPITables(unsigned char*)+0xba>
c0017b98:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017ba0:	a1 cc 17 03 c0       	mov    eax,ds:0xc00317cc
c0017ba5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017ba9:	0f 8d 47 01 00 00    	jge    c0017cf6 <loadACPITables(unsigned char*)+0x263>
c0017baf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017bb3:	8b 04 c5 e4 17 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce81c]
c0017bba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017bc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bca:	25 ff 0f 00 00       	and    eax,0xfff
c0017bcf:	89 c6                	mov    esi,eax
c0017bd1:	8b 1d 90 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f290
c0017bd7:	83 ec 0c             	sub    esp,0xc
c0017bda:	6a 01                	push   0x1
c0017bdc:	e8 a8 9e ff ff       	call   c0011a89 <Virt::allocateKernelVirtualPages(int)>
c0017be1:	83 c4 10             	add    esp,0x10
c0017be4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017be8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bee:	83 ec 0c             	sub    esp,0xc
c0017bf1:	6a 01                	push   0x1
c0017bf3:	6a 01                	push   0x1
c0017bf5:	50                   	push   eax
c0017bf6:	52                   	push   edx
c0017bf7:	53                   	push   ebx
c0017bf8:	e8 b9 a9 ff ff       	call   c00125b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bfd:	83 c4 20             	add    esp,0x20
c0017c00:	09 f0                	or     eax,esi
c0017c02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c06:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017c0a:	c1 e0 03             	shl    eax,0x3
c0017c0d:	05 e0 17 03 c0       	add    eax,0xc00317e0
c0017c12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c1e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017c26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c36:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017c3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c42:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0017c46:	76 1e                	jbe    c0017c66 <loadACPITables(unsigned char*)+0x1d3>
c0017c48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c50:	01 d0                	add    eax,edx
c0017c52:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017c56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c5a:	01 ca                	add    edx,ecx
c0017c5c:	8a 00                	mov    al,BYTE PTR [eax]
c0017c5e:	88 02                	mov    BYTE PTR [edx],al
c0017c60:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0017c64:	eb d8                	jmp    c0017c3e <loadACPITables(unsigned char*)+0x1ab>
c0017c66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017c71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c75:	05 00 10 00 00       	add    eax,0x1000
c0017c7a:	c1 e8 0c             	shr    eax,0xc
c0017c7d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017c81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c8d:	25 ff 0f 00 00       	and    eax,0xfff
c0017c92:	89 c6                	mov    esi,eax
c0017c94:	8b 1d 90 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f290
c0017c9a:	83 ec 0c             	sub    esp,0xc
c0017c9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017ca1:	e8 e3 9d ff ff       	call   c0011a89 <Virt::allocateKernelVirtualPages(int)>
c0017ca6:	83 c4 10             	add    esp,0x10
c0017ca9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017cad:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cb3:	83 ec 0c             	sub    esp,0xc
c0017cb6:	6a 01                	push   0x1
c0017cb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017cbc:	50                   	push   eax
c0017cbd:	52                   	push   edx
c0017cbe:	53                   	push   ebx
c0017cbf:	e8 f2 a8 ff ff       	call   c00125b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cc4:	83 c4 20             	add    esp,0x20
c0017cc7:	09 f0                	or     eax,esi
c0017cc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cd1:	83 ec 0c             	sub    esp,0xc
c0017cd4:	50                   	push   eax
c0017cd5:	e8 6f a2 ff ff       	call   c0011f49 <Virt::freeKernelVirtualPages(unsigned long)>
c0017cda:	83 c4 10             	add    esp,0x10
c0017cdd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017ce1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ce5:	89 14 c5 e4 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce81c],edx
c0017cec:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017cf0:	e9 ab fe ff ff       	jmp    c0017ba0 <loadACPITables(unsigned char*)+0x10d>
c0017cf5:	90                   	nop
c0017cf6:	83 c4 64             	add    esp,0x64
c0017cf9:	5b                   	pop    ebx
c0017cfa:	5e                   	pop    esi
c0017cfb:	c3                   	ret    

c0017cfc <findRSDT(unsigned char*)>:
c0017cfc:	56                   	push   esi
c0017cfd:	53                   	push   ebx
c0017cfe:	83 ec 54             	sub    esp,0x54
c0017d01:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0017d06:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d0c:	83 e0 04             	and    eax,0x4
c0017d0f:	84 c0                	test   al,al
c0017d11:	75 0a                	jne    c0017d1d <findRSDT(unsigned char*)+0x21>
c0017d13:	b8 00 00 00 00       	mov    eax,0x0
c0017d18:	e9 37 01 00 00       	jmp    c0017e54 <findRSDT(unsigned char*)+0x158>
c0017d1d:	8d 44 24 04          	lea    eax,[esp+0x4]
c0017d21:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d25:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017d29:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017d2d:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017d35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017d39:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d45:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017d4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d51:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017d55:	76 1e                	jbe    c0017d75 <findRSDT(unsigned char*)+0x79>
c0017d57:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d5f:	01 d0                	add    eax,edx
c0017d61:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d65:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017d69:	01 ca                	add    edx,ecx
c0017d6b:	8a 00                	mov    al,BYTE PTR [eax]
c0017d6d:	88 02                	mov    BYTE PTR [edx],al
c0017d6f:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0017d73:	eb d8                	jmp    c0017d4d <findRSDT(unsigned char*)+0x51>
c0017d75:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017d79:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017d7d:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017d85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d8d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d99:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017d9d:	25 ff 0f 00 00       	and    eax,0xfff
c0017da2:	89 c6                	mov    esi,eax
c0017da4:	8b 1d 90 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f290
c0017daa:	83 ec 0c             	sub    esp,0xc
c0017dad:	6a 02                	push   0x2
c0017daf:	e8 d5 9c ff ff       	call   c0011a89 <Virt::allocateKernelVirtualPages(int)>
c0017db4:	83 c4 10             	add    esp,0x10
c0017db7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017dbb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017dc1:	83 ec 0c             	sub    esp,0xc
c0017dc4:	6a 01                	push   0x1
c0017dc6:	6a 02                	push   0x2
c0017dc8:	50                   	push   eax
c0017dc9:	52                   	push   edx
c0017dca:	53                   	push   ebx
c0017dcb:	e8 e6 a7 ff ff       	call   c00125b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017dd0:	83 c4 20             	add    esp,0x20
c0017dd3:	09 f0                	or     eax,esi
c0017dd5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017dd9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ddd:	25 ff 0f 00 00       	and    eax,0xfff
c0017de2:	89 c6                	mov    esi,eax
c0017de4:	8b 1d 90 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f290
c0017dea:	83 ec 0c             	sub    esp,0xc
c0017ded:	6a 02                	push   0x2
c0017def:	e8 95 9c ff ff       	call   c0011a89 <Virt::allocateKernelVirtualPages(int)>
c0017df4:	83 c4 10             	add    esp,0x10
c0017df7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017dfb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017e01:	83 ec 0c             	sub    esp,0xc
c0017e04:	6a 01                	push   0x1
c0017e06:	6a 02                	push   0x2
c0017e08:	50                   	push   eax
c0017e09:	52                   	push   edx
c0017e0a:	53                   	push   ebx
c0017e0b:	e8 a6 a7 ff ff       	call   c00125b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017e10:	83 c4 20             	add    esp,0x20
c0017e13:	09 f0                	or     eax,esi
c0017e15:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017e19:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017e1e:	75 11                	jne    c0017e31 <findRSDT(unsigned char*)+0x135>
c0017e20:	c6 05 e0 19 03 c0 00 	mov    BYTE PTR ds:0xc00319e0,0x0
c0017e27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017e2b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017e2f:	eb 1f                	jmp    c0017e50 <findRSDT(unsigned char*)+0x154>
c0017e31:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017e36:	75 11                	jne    c0017e49 <findRSDT(unsigned char*)+0x14d>
c0017e38:	c6 05 e0 19 03 c0 01 	mov    BYTE PTR ds:0xc00319e0,0x1
c0017e3f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017e43:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017e47:	eb 07                	jmp    c0017e50 <findRSDT(unsigned char*)+0x154>
c0017e49:	b8 00 00 00 00       	mov    eax,0x0
c0017e4e:	eb 04                	jmp    c0017e54 <findRSDT(unsigned char*)+0x158>
c0017e50:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017e54:	83 c4 54             	add    esp,0x54
c0017e57:	5b                   	pop    ebx
c0017e58:	5e                   	pop    esi
c0017e59:	c3                   	ret    

c0017e5a <findDataTable(unsigned char*, char*)>:
c0017e5a:	83 ec 1c             	sub    esp,0x1c
c0017e5d:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0017e62:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e68:	83 e0 04             	and    eax,0x4
c0017e6b:	84 c0                	test   al,al
c0017e6d:	75 07                	jne    c0017e76 <findDataTable(unsigned char*, char*)+0x1c>
c0017e6f:	b8 00 00 00 00       	mov    eax,0x0
c0017e74:	eb 7c                	jmp    c0017ef2 <findDataTable(unsigned char*, char*)+0x98>
c0017e76:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017e7e:	a1 cc 17 03 c0       	mov    eax,ds:0xc00317cc
c0017e83:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017e87:	7d 3a                	jge    c0017ec3 <findDataTable(unsigned char*, char*)+0x69>
c0017e89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e8d:	c1 e0 03             	shl    eax,0x3
c0017e90:	05 e0 17 03 c0       	add    eax,0xc00317e0
c0017e95:	83 ec 04             	sub    esp,0x4
c0017e98:	6a 04                	push   0x4
c0017e9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e9e:	50                   	push   eax
c0017e9f:	e8 c4 87 fe ff       	call   c0000668 <memcmp>
c0017ea4:	83 c4 10             	add    esp,0x10
c0017ea7:	85 c0                	test   eax,eax
c0017ea9:	0f 94 c0             	sete   al
c0017eac:	84 c0                	test   al,al
c0017eae:	74 0d                	je     c0017ebd <findDataTable(unsigned char*, char*)+0x63>
c0017eb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017eb4:	8b 04 c5 e4 17 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce81c]
c0017ebb:	eb 35                	jmp    c0017ef2 <findDataTable(unsigned char*, char*)+0x98>
c0017ebd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017ec1:	eb bb                	jmp    c0017e7e <findDataTable(unsigned char*, char*)+0x24>
c0017ec3:	a0 e0 19 03 c0       	mov    al,ds:0xc00319e0
c0017ec8:	84 c0                	test   al,al
c0017eca:	74 07                	je     c0017ed3 <findDataTable(unsigned char*, char*)+0x79>
c0017ecc:	b8 58 00 00 00       	mov    eax,0x58
c0017ed1:	eb 05                	jmp    c0017ed8 <findDataTable(unsigned char*, char*)+0x7e>
c0017ed3:	b8 52 00 00 00       	mov    eax,0x52
c0017ed8:	83 ec 04             	sub    esp,0x4
c0017edb:	50                   	push   eax
c0017edc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ee0:	68 a4 c1 02 c0       	push   0xc002c1a4
c0017ee5:	e8 a5 af ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0017eea:	83 c4 10             	add    esp,0x10
c0017eed:	b8 00 00 00 00       	mov    eax,0x0
c0017ef2:	83 c4 1c             	add    esp,0x1c
c0017ef5:	c3                   	ret    

c0017ef6 <scanMADT()>:
c0017ef6:	53                   	push   ebx
c0017ef7:	83 ec 38             	sub    esp,0x38
c0017efa:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0017eff:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017f05:	83 e0 04             	and    eax,0x4
c0017f08:	84 c0                	test   al,al
c0017f0a:	0f 84 63 04 00 00    	je     c0018373 <scanMADT()+0x47d>
c0017f10:	e8 e4 fa ff ff       	call   c00179f9 <findRSDP()>
c0017f15:	a3 ec 19 03 c0       	mov    ds:0xc00319ec,eax
c0017f1a:	a1 ec 19 03 c0       	mov    eax,ds:0xc00319ec
c0017f1f:	85 c0                	test   eax,eax
c0017f21:	75 19                	jne    c0017f3c <scanMADT()+0x46>
c0017f23:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0017f28:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f2e:	83 e2 fb             	and    edx,0xfffffffb
c0017f31:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f37:	e9 3b 04 00 00       	jmp    c0018377 <scanMADT()+0x481>
c0017f3c:	a1 ec 19 03 c0       	mov    eax,ds:0xc00319ec
c0017f41:	83 ec 0c             	sub    esp,0xc
c0017f44:	50                   	push   eax
c0017f45:	e8 b2 fd ff ff       	call   c0017cfc <findRSDT(unsigned char*)>
c0017f4a:	83 c4 10             	add    esp,0x10
c0017f4d:	a3 e8 19 03 c0       	mov    ds:0xc00319e8,eax
c0017f52:	a1 e8 19 03 c0       	mov    eax,ds:0xc00319e8
c0017f57:	85 c0                	test   eax,eax
c0017f59:	75 19                	jne    c0017f74 <scanMADT()+0x7e>
c0017f5b:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0017f60:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f66:	83 e2 fb             	and    edx,0xfffffffb
c0017f69:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f6f:	e9 03 04 00 00       	jmp    c0018377 <scanMADT()+0x481>
c0017f74:	a1 e8 19 03 c0       	mov    eax,ds:0xc00319e8
c0017f79:	83 ec 0c             	sub    esp,0xc
c0017f7c:	50                   	push   eax
c0017f7d:	e8 11 fb ff ff       	call   c0017a93 <loadACPITables(unsigned char*)>
c0017f82:	83 c4 10             	add    esp,0x10
c0017f85:	a1 e8 19 03 c0       	mov    eax,ds:0xc00319e8
c0017f8a:	83 ec 08             	sub    esp,0x8
c0017f8d:	68 30 c0 02 c0       	push   0xc002c030
c0017f92:	50                   	push   eax
c0017f93:	e8 c2 fe ff ff       	call   c0017e5a <findDataTable(unsigned char*, char*)>
c0017f98:	83 c4 10             	add    esp,0x10
c0017f9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f9f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017fa4:	75 19                	jne    c0017fbf <scanMADT()+0xc9>
c0017fa6:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0017fab:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017fb1:	83 e2 fe             	and    edx,0xfffffffe
c0017fb4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017fba:	e9 b8 03 00 00       	jmp    c0018377 <scanMADT()+0x481>
c0017fbf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017fc7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017fce:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017fd2:	0f 87 9f 03 00 00    	ja     c0018377 <scanMADT()+0x481>
c0017fd8:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017fe0:	0f 87 91 03 00 00    	ja     c0018377 <scanMADT()+0x481>
c0017fe6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017fee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff2:	8d 50 01             	lea    edx,[eax+0x1]
c0017ff5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ff9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ffd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018001:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018005:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018009:	8d 50 01             	lea    edx,[eax+0x1]
c001800c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018010:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018014:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018018:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001801c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0018021:	0f 86 4f 03 00 00    	jbe    c0018376 <scanMADT()+0x480>
c0018027:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001802c:	75 57                	jne    c0018085 <scanMADT()+0x18f>
c001802e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018032:	8d 50 01             	lea    edx,[eax+0x1]
c0018035:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018039:	8a 15 e0 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031be0
c001803f:	0f b6 d2             	movzx  edx,dl
c0018042:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018046:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001804a:	88 82 20 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce3e0],al
c0018050:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018054:	8d 50 01             	lea    edx,[eax+0x1]
c0018057:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001805b:	8a 15 e0 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031be0
c0018061:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018064:	88 0d e0 1b 03 c0    	mov    BYTE PTR ds:0xc0031be0,cl
c001806a:	0f b6 d2             	movzx  edx,dl
c001806d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018071:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018075:	88 82 00 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce400],al
c001807b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018080:	e9 da 02 00 00       	jmp    c001835f <scanMADT()+0x469>
c0018085:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001808a:	0f 85 14 01 00 00    	jne    c00181a4 <scanMADT()+0x2ae>
c0018090:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018094:	8d 50 01             	lea    edx,[eax+0x1]
c0018097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001809b:	8a 15 a0 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031aa0
c00180a1:	0f b6 d2             	movzx  edx,dl
c00180a4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00180a8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00180ac:	88 82 c0 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce540],al
c00180b2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00180b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180be:	01 d0                	add    eax,edx
c00180c0:	83 c0 2c             	add    eax,0x2c
c00180c3:	8a 00                	mov    al,BYTE PTR [eax]
c00180c5:	0f b6 d0             	movzx  edx,al
c00180c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180cc:	8d 48 01             	lea    ecx,[eax+0x1]
c00180cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180d3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180d7:	0f b6 c0             	movzx  eax,al
c00180da:	c1 e0 08             	shl    eax,0x8
c00180dd:	89 d1                	mov    ecx,edx
c00180df:	09 c1                	or     ecx,eax
c00180e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e5:	8d 50 02             	lea    edx,[eax+0x2]
c00180e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180ec:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180f0:	0f b6 c0             	movzx  eax,al
c00180f3:	c1 e0 10             	shl    eax,0x10
c00180f6:	09 c1                	or     ecx,eax
c00180f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180fc:	8d 50 03             	lea    edx,[eax+0x3]
c00180ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018103:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018107:	0f b6 c0             	movzx  eax,al
c001810a:	c1 e0 18             	shl    eax,0x18
c001810d:	09 c1                	or     ecx,eax
c001810f:	89 ca                	mov    edx,ecx
c0018111:	a0 a0 1a 03 c0       	mov    al,ds:0xc0031aa0
c0018116:	0f b6 c0             	movzx  eax,al
c0018119:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c0018120:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018125:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018129:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001812d:	01 d0                	add    eax,edx
c001812f:	83 c0 2c             	add    eax,0x2c
c0018132:	8a 00                	mov    al,BYTE PTR [eax]
c0018134:	0f b6 d0             	movzx  edx,al
c0018137:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001813b:	8d 48 01             	lea    ecx,[eax+0x1]
c001813e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018142:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018146:	0f b6 c0             	movzx  eax,al
c0018149:	c1 e0 08             	shl    eax,0x8
c001814c:	89 d1                	mov    ecx,edx
c001814e:	09 c1                	or     ecx,eax
c0018150:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018154:	8d 50 02             	lea    edx,[eax+0x2]
c0018157:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001815b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001815f:	0f b6 c0             	movzx  eax,al
c0018162:	c1 e0 10             	shl    eax,0x10
c0018165:	09 c1                	or     ecx,eax
c0018167:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001816b:	8d 50 03             	lea    edx,[eax+0x3]
c001816e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018172:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018176:	0f b6 c0             	movzx  eax,al
c0018179:	c1 e0 18             	shl    eax,0x18
c001817c:	09 c1                	or     ecx,eax
c001817e:	89 ca                	mov    edx,ecx
c0018180:	a0 a0 1a 03 c0       	mov    al,ds:0xc0031aa0
c0018185:	0f b6 c0             	movzx  eax,al
c0018188:	89 14 85 60 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4a0],edx
c001818f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018194:	a0 a0 1a 03 c0       	mov    al,ds:0xc0031aa0
c0018199:	40                   	inc    eax
c001819a:	a2 a0 1a 03 c0       	mov    ds:0xc0031aa0,al
c001819f:	e9 bb 01 00 00       	jmp    c001835f <scanMADT()+0x469>
c00181a4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00181a9:	0f 85 e9 00 00 00    	jne    c0018298 <scanMADT()+0x3a2>
c00181af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181b3:	8d 50 01             	lea    edx,[eax+0x1]
c00181b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181be:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181c2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00181c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181ca:	8d 50 01             	lea    edx,[eax+0x1]
c00181cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181d9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00181dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181e5:	01 d0                	add    eax,edx
c00181e7:	83 c0 2c             	add    eax,0x2c
c00181ea:	8a 00                	mov    al,BYTE PTR [eax]
c00181ec:	0f b6 d0             	movzx  edx,al
c00181ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00181f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181fa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181fe:	0f b6 c0             	movzx  eax,al
c0018201:	c1 e0 08             	shl    eax,0x8
c0018204:	89 d1                	mov    ecx,edx
c0018206:	09 c1                	or     ecx,eax
c0018208:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001820c:	8d 50 02             	lea    edx,[eax+0x2]
c001820f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018213:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018217:	0f b6 c0             	movzx  eax,al
c001821a:	c1 e0 10             	shl    eax,0x10
c001821d:	09 c1                	or     ecx,eax
c001821f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018223:	8d 50 03             	lea    edx,[eax+0x3]
c0018226:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001822a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001822e:	0f b6 c0             	movzx  eax,al
c0018231:	c1 e0 18             	shl    eax,0x18
c0018234:	09 c8                	or     eax,ecx
c0018236:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001823a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001823f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018243:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018247:	01 d0                	add    eax,edx
c0018249:	83 c0 2c             	add    eax,0x2c
c001824c:	8a 00                	mov    al,BYTE PTR [eax]
c001824e:	0f b6 c0             	movzx  eax,al
c0018251:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018255:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018258:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001825c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018260:	0f b6 d2             	movzx  edx,dl
c0018263:	c1 e2 08             	shl    edx,0x8
c0018266:	09 d0                	or     eax,edx
c0018268:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001826d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018272:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018277:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001827b:	88 90 60 e3 02 c0    	mov    BYTE PTR [eax-0x3ffd1ca0],dl
c0018281:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018286:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001828b:	66 89 84 12 80 1a 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce580],ax
c0018293:	e9 c7 00 00 00       	jmp    c001835f <scanMADT()+0x469>
c0018298:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001829d:	0f 85 b0 00 00 00    	jne    c0018353 <scanMADT()+0x45d>
c00182a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182a7:	8d 50 01             	lea    edx,[eax+0x1]
c00182aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00182ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182b2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00182b6:	0f b6 c0             	movzx  eax,al
c00182b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00182bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182c5:	01 d0                	add    eax,edx
c00182c7:	83 c0 2c             	add    eax,0x2c
c00182ca:	8a 00                	mov    al,BYTE PTR [eax]
c00182cc:	0f b6 d0             	movzx  edx,al
c00182cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182d3:	8d 48 01             	lea    ecx,[eax+0x1]
c00182d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182da:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00182de:	0f b6 c0             	movzx  eax,al
c00182e1:	c1 e0 08             	shl    eax,0x8
c00182e4:	09 d0                	or     eax,edx
c00182e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00182ea:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00182ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182f3:	8d 50 01             	lea    edx,[eax+0x1]
c00182f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00182fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018302:	0f b6 c0             	movzx  eax,al
c0018305:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001830d:	c1 e0 08             	shl    eax,0x8
c0018310:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018314:	89 c1                	mov    ecx,eax
c0018316:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001831a:	c1 e0 18             	shl    eax,0x18
c001831d:	89 c3                	mov    ebx,eax
c001831f:	a1 f0 19 03 c0       	mov    eax,ds:0xc00319f0
c0018324:	8d 50 01             	lea    edx,[eax+0x1]
c0018327:	89 15 f0 19 03 c0    	mov    DWORD PTR ds:0xc00319f0,edx
c001832d:	09 d9                	or     ecx,ebx
c001832f:	89 ca                	mov    edx,ecx
c0018331:	89 14 85 00 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce600],edx
c0018338:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001833c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018344:	68 d4 c1 02 c0       	push   0xc002c1d4
c0018349:	e8 41 ab ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001834e:	83 c4 10             	add    esp,0x10
c0018351:	eb 0c                	jmp    c001835f <scanMADT()+0x469>
c0018353:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018358:	75 05                	jne    c001835f <scanMADT()+0x469>
c001835a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001835f:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018364:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018368:	01 d0                	add    eax,edx
c001836a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001836e:	e9 54 fc ff ff       	jmp    c0017fc7 <scanMADT()+0xd1>
c0018373:	90                   	nop
c0018374:	eb 01                	jmp    c0018377 <scanMADT()+0x481>
c0018376:	90                   	nop
c0018377:	83 c4 38             	add    esp,0x38
c001837a:	5b                   	pop    ebx
c001837b:	c3                   	ret    

c001837c <ACPI::ACPI()>:
c001837c:	83 ec 0c             	sub    esp,0xc
c001837f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018383:	83 ec 08             	sub    esp,0x8
c0018386:	68 35 c0 02 c0       	push   0xc002c035
c001838b:	50                   	push   eax
c001838c:	e8 19 c1 ff ff       	call   c00144aa <Device::Device(char const*)>
c0018391:	83 c4 10             	add    esp,0x10
c0018394:	ba 70 c2 02 c0       	mov    edx,0xc002c270
c0018399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001839d:	89 10                	mov    DWORD PTR [eax],edx
c001839f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183a3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00183aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183ae:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00183b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183bc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00183c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183ca:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00183d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183d5:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00183dc:	e8 15 fb ff ff       	call   c0017ef6 <scanMADT()>
c00183e1:	90                   	nop
c00183e2:	83 c4 0c             	add    esp,0xc
c00183e5:	c3                   	ret    

c00183e6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00183e6:	83 ec 2c             	sub    esp,0x2c
c00183e9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00183ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00183f1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00183f5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00183f9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00183fe:	88 d0                	mov    al,dl
c0018400:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018404:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018409:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018411:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018415:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001841b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001841f:	0f 8d 97 00 00 00    	jge    c00184bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018425:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018429:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001842d:	83 c2 2a             	add    edx,0x2a
c0018430:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018434:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018439:	75 78                	jne    c00184b3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001843b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001843f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018443:	83 c2 2a             	add    edx,0x2a
c0018446:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001844a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001844e:	75 63                	jne    c00184b3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018450:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018455:	74 3a                	je     c0018491 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018457:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001845b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001845f:	83 c2 2a             	add    edx,0x2a
c0018462:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018466:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001846a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001846d:	39 c2                	cmp    edx,eax
c001846f:	74 10                	je     c0018481 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018471:	83 ec 0c             	sub    esp,0xc
c0018474:	68 10 c2 02 c0       	push   0xc002c210
c0018479:	e8 79 24 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c001847e:	83 c4 10             	add    esp,0x10
c0018481:	83 ec 0c             	sub    esp,0xc
c0018484:	68 3a c0 02 c0       	push   0xc002c03a
c0018489:	e8 69 24 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c001848e:	83 c4 10             	add    esp,0x10
c0018491:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018495:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018499:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001849d:	83 c2 2a             	add    edx,0x2a
c00184a0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00184a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00184a6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00184a9:	89 01                	mov    DWORD PTR [ecx],eax
c00184ab:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00184ae:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00184b3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00184b7:	e9 55 ff ff ff       	jmp    c0018411 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00184bc:	90                   	nop
c00184bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184c1:	83 c4 2c             	add    esp,0x2c
c00184c4:	c2 04 00             	ret    0x4
c00184c7:	90                   	nop

c00184c8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00184c8:	83 ec 1c             	sub    esp,0x1c
c00184cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00184cf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00184d3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00184d7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00184dc:	88 c8                	mov    al,cl
c00184de:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00184e2:	88 d0                	mov    al,dl
c00184e4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00184e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ec:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184f6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184f9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00184fd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018501:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018505:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001850b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001850f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018516:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001851b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001851f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018525:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018529:	8d 48 01             	lea    ecx,[eax+0x1]
c001852c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018530:	83 c2 2a             	add    edx,0x2a
c0018533:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001853b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018545:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018548:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001854c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018554:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001855a:	8d 50 01             	lea    edx,[eax+0x1]
c001855d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018561:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001856b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018571:	3d 00 02 00 00       	cmp    eax,0x200
c0018576:	75 10                	jne    c0018588 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018578:	83 ec 0c             	sub    esp,0xc
c001857b:	68 49 c0 02 c0       	push   0xc002c049
c0018580:	e8 72 23 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c0018585:	83 c4 10             	add    esp,0x10
c0018588:	90                   	nop
c0018589:	83 c4 1c             	add    esp,0x1c
c001858c:	c3                   	ret    
c001858d:	90                   	nop

c001858e <ACPI::setScreenBrightnessLevel(void*, int)>:
c001858e:	b8 00 00 00 00       	mov    eax,0x0
c0018593:	c3                   	ret    

c0018594 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018594:	83 ec 1c             	sub    esp,0x1c
c0018597:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001859b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001859e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00185a2:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c00185a7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00185ac:	83 ec 08             	sub    esp,0x8
c00185af:	52                   	push   edx
c00185b0:	50                   	push   eax
c00185b1:	e8 20 69 ff ff       	call   c000eed6 <Computer::readCMOS(unsigned char)>
c00185b6:	83 c4 10             	add    esp,0x10
c00185b9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00185bd:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c00185c2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00185c7:	83 ec 04             	sub    esp,0x4
c00185ca:	6a 01                	push   0x1
c00185cc:	52                   	push   edx
c00185cd:	50                   	push   eax
c00185ce:	e8 19 6a ff ff       	call   c000efec <Computer::writeCMOS(unsigned char, unsigned char)>
c00185d3:	83 c4 10             	add    esp,0x10
c00185d6:	90                   	nop
c00185d7:	83 c4 1c             	add    esp,0x1c
c00185da:	c3                   	ret    
c00185db:	90                   	nop

c00185dc <ACPI::sleep()>:
c00185dc:	83 ec 0c             	sub    esp,0xc
c00185df:	a1 c0 17 03 c0       	mov    eax,ds:0xc00317c0
c00185e4:	85 c0                	test   eax,eax
c00185e6:	74 07                	je     c00185ef <ACPI::sleep()+0x13>
c00185e8:	a1 c0 17 03 c0       	mov    eax,ds:0xc00317c0
c00185ed:	ff d0                	call   eax
c00185ef:	90                   	nop
c00185f0:	83 c4 0c             	add    esp,0xc
c00185f3:	c3                   	ret    

c00185f4 <ACPI::open(int, int, void*)>:
c00185f4:	57                   	push   edi
c00185f5:	56                   	push   esi
c00185f6:	53                   	push   ebx
c00185f7:	83 ec 60             	sub    esp,0x60
c00185fa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185fe:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018605:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018609:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018610:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0018615:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001861b:	83 e0 04             	and    eax,0x4
c001861e:	84 c0                	test   al,al
c0018620:	74 47                	je     c0018669 <ACPI::open(int, int, void*)+0x75>
c0018622:	a1 e8 19 03 c0       	mov    eax,ds:0xc00319e8
c0018627:	83 ec 08             	sub    esp,0x8
c001862a:	68 66 c0 02 c0       	push   0xc002c066
c001862f:	50                   	push   eax
c0018630:	e8 25 f8 ff ff       	call   c0017e5a <findDataTable(unsigned char*, char*)>
c0018635:	83 c4 10             	add    esp,0x10
c0018638:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001863c:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c0018641:	74 26                	je     c0018669 <ACPI::open(int, int, void*)+0x75>
c0018643:	83 ec 0c             	sub    esp,0xc
c0018646:	68 6b c0 02 c0       	push   0xc002c06b
c001864b:	e8 3f a8 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0018650:	83 c4 10             	add    esp,0x10
c0018653:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018657:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001865e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018662:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018669:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c0018671:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0018675:	8a 00                	mov    al,BYTE PTR [eax]
c0018677:	3c 01                	cmp    al,0x1
c0018679:	75 28                	jne    c00186a3 <ACPI::open(int, int, void*)+0xaf>
c001867b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001867f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018686:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001868a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018691:	83 ec 0c             	sub    esp,0xc
c0018694:	68 7c c0 02 c0       	push   0xc002c07c
c0018699:	e8 f1 a7 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001869e:	83 c4 10             	add    esp,0x10
c00186a1:	eb 25                	jmp    c00186c8 <ACPI::open(int, int, void*)+0xd4>
c00186a3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00186a7:	8a 00                	mov    al,BYTE PTR [eax]
c00186a9:	3c 02                	cmp    al,0x2
c00186ab:	75 1b                	jne    c00186c8 <ACPI::open(int, int, void*)+0xd4>
c00186ad:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186b1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186b8:	83 ec 0c             	sub    esp,0xc
c00186bb:	68 84 c0 02 c0       	push   0xc002c084
c00186c0:	e8 ca a7 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00186c5:	83 c4 10             	add    esp,0x10
c00186c8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186cc:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186d2:	83 f0 01             	xor    eax,0x1
c00186d5:	84 c0                	test   al,al
c00186d7:	74 6a                	je     c0018743 <ACPI::open(int, int, void*)+0x14f>
c00186d9:	83 ec 0c             	sub    esp,0xc
c00186dc:	68 8c c0 02 c0       	push   0xc002c08c
c00186e1:	e8 a9 a7 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00186e6:	83 c4 10             	add    esp,0x10
c00186e9:	e8 62 7a fe ff       	call   c0000150 <manualPCIProbe>
c00186ee:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00186f2:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c00186f7:	75 28                	jne    c0018721 <ACPI::open(int, int, void*)+0x12d>
c00186f9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186fd:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018704:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018708:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001870f:	83 ec 0c             	sub    esp,0xc
c0018712:	68 9a c0 02 c0       	push   0xc002c09a
c0018717:	e8 73 a7 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001871c:	83 c4 10             	add    esp,0x10
c001871f:	eb 22                	jmp    c0018743 <ACPI::open(int, int, void*)+0x14f>
c0018721:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c0018726:	75 1b                	jne    c0018743 <ACPI::open(int, int, void*)+0x14f>
c0018728:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001872c:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018733:	83 ec 0c             	sub    esp,0xc
c0018736:	68 a4 c0 02 c0       	push   0xc002c0a4
c001873b:	e8 4f a7 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0018740:	83 c4 10             	add    esp,0x10
c0018743:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018747:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001874d:	84 c0                	test   al,al
c001874f:	74 13                	je     c0018764 <ACPI::open(int, int, void*)+0x170>
c0018751:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018755:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001875b:	83 f0 01             	xor    eax,0x1
c001875e:	0f b6 c0             	movzx  eax,al
c0018761:	40                   	inc    eax
c0018762:	eb 05                	jmp    c0018769 <ACPI::open(int, int, void*)+0x175>
c0018764:	b8 00 00 00 00       	mov    eax,0x0
c0018769:	83 ec 08             	sub    esp,0x8
c001876c:	50                   	push   eax
c001876d:	68 ae c0 02 c0       	push   0xc002c0ae
c0018772:	e8 18 a7 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0018777:	83 c4 10             	add    esp,0x10
c001877a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001877e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018784:	84 c0                	test   al,al
c0018786:	74 67                	je     c00187ef <ACPI::open(int, int, void*)+0x1fb>
c0018788:	c7 44 24 38 58 01 00 00 	mov    DWORD PTR [esp+0x38],0x158
c0018790:	83 ec 0c             	sub    esp,0xc
c0018793:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018797:	e8 24 71 ff ff       	call   c000f8c0 <malloc>
c001879c:	83 c4 10             	add    esp,0x10
c001879f:	89 c3                	mov    ebx,eax
c00187a1:	83 ec 0c             	sub    esp,0xc
c00187a4:	53                   	push   ebx
c00187a5:	e8 1a ab 00 00       	call   c00232c4 <PCI::PCI()>
c00187aa:	83 c4 10             	add    esp,0x10
c00187ad:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c00187b1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00187b5:	83 ec 08             	sub    esp,0x8
c00187b8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00187bc:	50                   	push   eax
c00187bd:	e8 f8 ba ff ff       	call   c00142ba <Device::addChild(Device*)>
c00187c2:	83 c4 10             	add    esp,0x10
c00187c5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00187c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00187cb:	83 c0 08             	add    eax,0x8
c00187ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00187d0:	6a 00                	push   0x0
c00187d2:	6a 00                	push   0x0
c00187d4:	6a 00                	push   0x0
c00187d6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187da:	ff d0                	call   eax
c00187dc:	83 c4 10             	add    esp,0x10
c00187df:	83 ec 0c             	sub    esp,0xc
c00187e2:	68 b7 c0 02 c0       	push   0xc002c0b7
c00187e7:	e8 a3 a6 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00187ec:	83 c4 10             	add    esp,0x10
c00187ef:	83 ec 0c             	sub    esp,0xc
c00187f2:	68 c2 c0 02 c0       	push   0xc002c0c2
c00187f7:	e8 93 4a 00 00       	call   c001d28f <Thr::loadKernelSymbolTable(char const*)>
c00187fc:	83 c4 10             	add    esp,0x10
c00187ff:	83 ec 0c             	sub    esp,0xc
c0018802:	6a 0c                	push   0xc
c0018804:	e8 bf 94 ff ff       	call   c0011cc8 <Virt::setupPageSwapping(int)>
c0018809:	83 c4 10             	add    esp,0x10
c001880c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018810:	83 ec 08             	sub    esp,0x8
c0018813:	6a 12                	push   0x12
c0018815:	50                   	push   eax
c0018816:	e8 0f be ff ff       	call   c001462a <getDevicesOfType(DeviceType)>
c001881b:	83 c4 0c             	add    esp,0xc
c001881e:	83 ec 0c             	sub    esp,0xc
c0018821:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018825:	50                   	push   eax
c0018826:	e8 d5 0e 01 00       	call   c0029700 <LinkedList<Device>::isEmpty()>
c001882b:	83 c4 10             	add    esp,0x10
c001882e:	83 f0 01             	xor    eax,0x1
c0018831:	84 c0                	test   al,al
c0018833:	0f 84 fd 00 00 00    	je     c0018936 <ACPI::open(int, int, void*)+0x342>
c0018839:	83 ec 0c             	sub    esp,0xc
c001883c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018840:	50                   	push   eax
c0018841:	e8 d6 0e 01 00       	call   c002971c <LinkedList<Device>::getFirstElement()>
c0018846:	83 c4 10             	add    esp,0x10
c0018849:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001884d:	83 ec 0c             	sub    esp,0xc
c0018850:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018854:	50                   	push   eax
c0018855:	e8 ca 0e 01 00       	call   c0029724 <LinkedList<Device>::removeFirst()>
c001885a:	83 c4 10             	add    esp,0x10
c001885d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018861:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0018865:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018869:	83 ec 0c             	sub    esp,0xc
c001886c:	50                   	push   eax
c001886d:	e8 34 bd ff ff       	call   c00145a6 <Device::getName()>
c0018872:	83 c4 10             	add    esp,0x10
c0018875:	83 ec 08             	sub    esp,0x8
c0018878:	50                   	push   eax
c0018879:	68 40 c2 02 c0       	push   0xc002c240
c001887e:	e8 0c a6 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0018883:	83 c4 10             	add    esp,0x10
c0018886:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001888a:	8d 44 24 04          	lea    eax,[esp+0x4]
c001888e:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018894:	ba 09 00 00 00       	mov    edx,0x9
c0018899:	fc                   	cld    
c001889a:	89 c7                	mov    edi,eax
c001889c:	89 de                	mov    esi,ebx
c001889e:	89 d1                	mov    ecx,edx
c00188a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188a2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00188a6:	0f b6 c0             	movzx  eax,al
c00188a9:	83 ec 08             	sub    esp,0x8
c00188ac:	50                   	push   eax
c00188ad:	68 e0 c0 02 c0       	push   0xc002c0e0
c00188b2:	e8 d8 a5 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00188b7:	83 c4 10             	add    esp,0x10
c00188ba:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00188be:	0f b6 c0             	movzx  eax,al
c00188c1:	83 ec 08             	sub    esp,0x8
c00188c4:	50                   	push   eax
c00188c5:	68 f2 c0 02 c0       	push   0xc002c0f2
c00188ca:	e8 c0 a5 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00188cf:	83 c4 10             	add    esp,0x10
c00188d2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00188d7:	0f b7 c0             	movzx  eax,ax
c00188da:	83 ec 08             	sub    esp,0x8
c00188dd:	50                   	push   eax
c00188de:	68 04 c1 02 c0       	push   0xc002c104
c00188e3:	e8 a7 a5 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00188e8:	83 c4 10             	add    esp,0x10
c00188eb:	83 ec 0c             	sub    esp,0xc
c00188ee:	83 ec 24             	sub    esp,0x24
c00188f1:	89 e0                	mov    eax,esp
c00188f3:	89 c3                	mov    ebx,eax
c00188f5:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188f9:	ba 09 00 00 00       	mov    edx,0x9
c00188fe:	89 df                	mov    edi,ebx
c0018900:	89 c6                	mov    esi,eax
c0018902:	89 d1                	mov    ecx,edx
c0018904:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018906:	e8 1b ad 00 00       	call   c0023626 <PCI::pciDetailsToFilepath(PCIDeviceInfo)>
c001890b:	83 c4 30             	add    esp,0x30
c001890e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018912:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0018917:	0f 84 01 ff ff ff    	je     c001881e <ACPI::open(int, int, void*)+0x22a>
c001891d:	83 ec 08             	sub    esp,0x8
c0018920:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018924:	68 16 c1 02 c0       	push   0xc002c116
c0018929:	e8 61 a5 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001892e:	83 c4 10             	add    esp,0x10
c0018931:	e9 e8 fe ff ff       	jmp    c001881e <ACPI::open(int, int, void*)+0x22a>
c0018936:	83 ec 0c             	sub    esp,0xc
c0018939:	8d 44 24 34          	lea    eax,[esp+0x34]
c001893d:	50                   	push   eax
c001893e:	e8 bb 0d 01 00       	call   c00296fe <LinkedList<Device>::~LinkedList()>
c0018943:	83 c4 10             	add    esp,0x10
c0018946:	8b 1d 08 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f108
c001894c:	83 ec 08             	sub    esp,0x8
c001894f:	6a 01                	push   0x1
c0018951:	68 22 c1 02 c0       	push   0xc002c122
c0018956:	e8 ab 53 00 00       	call   c001dd06 <Thr::loadDLL(char const*, bool)>
c001895b:	83 c4 10             	add    esp,0x10
c001895e:	83 ec 08             	sub    esp,0x8
c0018961:	53                   	push   ebx
c0018962:	50                   	push   eax
c0018963:	e8 c9 55 00 00       	call   c001df31 <Thr::executeDLL(unsigned long, void*)>
c0018968:	83 c4 10             	add    esp,0x10
c001896b:	8b 1d 08 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f108
c0018971:	83 ec 08             	sub    esp,0x8
c0018974:	6a 01                	push   0x1
c0018976:	68 3f c1 02 c0       	push   0xc002c13f
c001897b:	e8 86 53 00 00       	call   c001dd06 <Thr::loadDLL(char const*, bool)>
c0018980:	83 c4 10             	add    esp,0x10
c0018983:	83 ec 08             	sub    esp,0x8
c0018986:	53                   	push   ebx
c0018987:	50                   	push   eax
c0018988:	e8 a4 55 00 00       	call   c001df31 <Thr::executeDLL(unsigned long, void*)>
c001898d:	83 c4 10             	add    esp,0x10
c0018990:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0018995:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001899b:	83 e0 04             	and    eax,0x4
c001899e:	84 c0                	test   al,al
c00189a0:	0f 84 d3 00 00 00    	je     c0018a79 <ACPI::open(int, int, void*)+0x485>
c00189a6:	c7 44 24 34 14 01 00 00 	mov    DWORD PTR [esp+0x34],0x114
c00189ae:	83 ec 0c             	sub    esp,0xc
c00189b1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00189b5:	e8 06 6f ff ff       	call   c000f8c0 <malloc>
c00189ba:	83 c4 10             	add    esp,0x10
c00189bd:	89 c3                	mov    ebx,eax
c00189bf:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c00189c4:	83 ec 04             	sub    esp,0x4
c00189c7:	50                   	push   eax
c00189c8:	68 5c c1 02 c0       	push   0xc002c15c
c00189cd:	53                   	push   ebx
c00189ce:	e8 1b aa ff ff       	call   c00133ee <File::File(char const*, Process*)>
c00189d3:	83 c4 10             	add    esp,0x10
c00189d6:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c00189da:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189df:	74 17                	je     c00189f8 <ACPI::open(int, int, void*)+0x404>
c00189e1:	83 ec 0c             	sub    esp,0xc
c00189e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00189e8:	e8 d3 ac ff ff       	call   c00136c0 <File::exists()>
c00189ed:	83 c4 10             	add    esp,0x10
c00189f0:	84 c0                	test   al,al
c00189f2:	74 04                	je     c00189f8 <ACPI::open(int, int, void*)+0x404>
c00189f4:	b0 01                	mov    al,0x1
c00189f6:	eb 02                	jmp    c00189fa <ACPI::open(int, int, void*)+0x406>
c00189f8:	b0 00                	mov    al,0x0
c00189fa:	84 c0                	test   al,al
c00189fc:	74 22                	je     c0018a20 <ACPI::open(int, int, void*)+0x42c>
c00189fe:	83 ec 08             	sub    esp,0x8
c0018a01:	6a 01                	push   0x1
c0018a03:	68 5c c1 02 c0       	push   0xc002c15c
c0018a08:	e8 f9 52 00 00       	call   c001dd06 <Thr::loadDLL(char const*, bool)>
c0018a0d:	83 c4 10             	add    esp,0x10
c0018a10:	83 ec 08             	sub    esp,0x8
c0018a13:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0018a17:	50                   	push   eax
c0018a18:	e8 14 55 00 00       	call   c001df31 <Thr::executeDLL(unsigned long, void*)>
c0018a1d:	83 c4 10             	add    esp,0x10
c0018a20:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018a25:	74 1e                	je     c0018a45 <ACPI::open(int, int, void*)+0x451>
c0018a27:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018a2c:	74 17                	je     c0018a45 <ACPI::open(int, int, void*)+0x451>
c0018a2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a34:	83 c0 08             	add    eax,0x8
c0018a37:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a39:	83 ec 0c             	sub    esp,0xc
c0018a3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018a40:	ff d0                	call   eax
c0018a42:	83 c4 10             	add    esp,0x10
c0018a45:	a1 e8 19 03 c0       	mov    eax,ds:0xc00319e8
c0018a4a:	83 ec 08             	sub    esp,0x8
c0018a4d:	68 79 c1 02 c0       	push   0xc002c179
c0018a52:	50                   	push   eax
c0018a53:	e8 02 f4 ff ff       	call   c0017e5a <findDataTable(unsigned char*, char*)>
c0018a58:	83 c4 10             	add    esp,0x10
c0018a5b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018a5f:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0018a64:	74 13                	je     c0018a79 <ACPI::open(int, int, void*)+0x485>
c0018a66:	83 ec 08             	sub    esp,0x8
c0018a69:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018a6d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0018a71:	e8 1e fb ff ff       	call   c0018594 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018a76:	83 c4 10             	add    esp,0x10
c0018a79:	b8 00 00 00 00       	mov    eax,0x0
c0018a7e:	83 c4 60             	add    esp,0x60
c0018a81:	5b                   	pop    ebx
c0018a82:	5e                   	pop    esi
c0018a83:	5f                   	pop    edi
c0018a84:	c3                   	ret    
c0018a85:	90                   	nop

c0018a86 <CPU::close(int, int, void*)>:
c0018a86:	31 c0                	xor    eax,eax
c0018a88:	c3                   	ret    
c0018a89:	90                   	nop

c0018a8a <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018a8a:	55                   	push   ebp
c0018a8b:	57                   	push   edi
c0018a8c:	56                   	push   esi
c0018a8d:	53                   	push   ebx
c0018a8e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018a92:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a96:	89 ce                	mov    esi,ecx
c0018a98:	89 d5                	mov    ebp,edx
c0018a9a:	80 f9 04             	cmp    cl,0x4
c0018a9d:	75 28                	jne    c0018ac7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018a9f:	8d 42 f9             	lea    eax,[edx-0x7]
c0018aa2:	3c 03                	cmp    al,0x3
c0018aa4:	0f 86 63 01 00 00    	jbe    c0018c0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018aaa:	80 fa 03             	cmp    dl,0x3
c0018aad:	0f 84 5a 01 00 00    	je     c0018c0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018ab3:	8d 7a f2             	lea    edi,[edx-0xe]
c0018ab6:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c0018abb:	89 fb                	mov    ebx,edi
c0018abd:	80 fb 01             	cmp    bl,0x1
c0018ac0:	77 4e                	ja     c0018b10 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018ac2:	e9 52 01 00 00       	jmp    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ac7:	80 f9 05             	cmp    cl,0x5
c0018aca:	75 4d                	jne    c0018b19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018acc:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c0018ad1:	80 fa 03             	cmp    dl,0x3
c0018ad4:	0f 86 3f 01 00 00    	jbe    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ada:	8d 7a fa             	lea    edi,[edx-0x6]
c0018add:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c0018ae2:	89 fb                	mov    ebx,edi
c0018ae4:	80 fb 01             	cmp    bl,0x1
c0018ae7:	0f 86 2c 01 00 00    	jbe    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aed:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018af2:	80 fa 08             	cmp    dl,0x8
c0018af5:	0f 84 1e 01 00 00    	je     c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018afb:	89 d7                	mov    edi,edx
c0018afd:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c0018b02:	83 e7 fb             	and    edi,0xfffffffb
c0018b05:	89 fb                	mov    ebx,edi
c0018b07:	80 fb 09             	cmp    bl,0x9
c0018b0a:	0f 84 09 01 00 00    	je     c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b10:	31 c0                	xor    eax,eax
c0018b12:	89 eb                	mov    ebx,ebp
c0018b14:	0f b6 fb             	movzx  edi,bl
c0018b17:	eb 30                	jmp    c0018b49 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018b19:	31 c0                	xor    eax,eax
c0018b1b:	80 f9 06             	cmp    cl,0x6
c0018b1e:	75 f2                	jne    c0018b12 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b20:	80 fa 0a             	cmp    dl,0xa
c0018b23:	77 ed                	ja     c0018b12 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b25:	bf de 05 00 00       	mov    edi,0x5de
c0018b2a:	0f a3 d7             	bt     edi,edx
c0018b2d:	73 e3                	jae    c0018b12 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b2f:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c0018b34:	e9 e0 00 00 00       	jmp    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b39:	39 c7                	cmp    edi,eax
c0018b3b:	0f 84 d3 00 00 00    	je     c0018c14 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b41:	40                   	inc    eax
c0018b42:	3d d0 00 00 00       	cmp    eax,0xd0
c0018b47:	74 09                	je     c0018b52 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018b49:	89 f3                	mov    ebx,esi
c0018b4b:	80 fb 0f             	cmp    bl,0xf
c0018b4e:	75 f1                	jne    c0018b41 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018b50:	eb e7                	jmp    c0018b39 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018b52:	80 f9 10             	cmp    cl,0x10
c0018b55:	75 14                	jne    c0018b6b <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018b57:	8d 42 fc             	lea    eax,[edx-0x4]
c0018b5a:	83 e0 fb             	and    eax,0xfffffffb
c0018b5d:	3c 02                	cmp    al,0x2
c0018b5f:	76 34                	jbe    c0018b95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018b61:	b8 86 c5 02 c0       	mov    eax,0xc002c586
c0018b66:	80 fa 02             	cmp    dl,0x2
c0018b69:	eb 24                	jmp    c0018b8f <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018b6b:	80 f9 11             	cmp    cl,0x11
c0018b6e:	75 13                	jne    c0018b83 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018b70:	b8 86 c5 02 c0       	mov    eax,0xc002c586
c0018b75:	80 fa 03             	cmp    dl,0x3
c0018b78:	0f 85 9b 00 00 00    	jne    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b7e:	e9 91 00 00 00       	jmp    c0018c14 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b83:	80 f9 12             	cmp    cl,0x12
c0018b86:	75 14                	jne    c0018b9c <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018b88:	b8 86 c5 02 c0       	mov    eax,0xc002c586
c0018b8d:	fe ca                	dec    dl
c0018b8f:	0f 85 84 00 00 00    	jne    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b95:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0018b9a:	eb 7d                	jmp    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b9c:	80 f9 14             	cmp    cl,0x14
c0018b9f:	75 12                	jne    c0018bb3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018ba1:	4a                   	dec    edx
c0018ba2:	b8 86 c5 02 c0       	mov    eax,0xc002c586
c0018ba7:	80 fa 01             	cmp    dl,0x1
c0018baa:	77 6d                	ja     c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bac:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c0018bb1:	eb 66                	jmp    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bb3:	80 f9 15             	cmp    cl,0x15
c0018bb6:	75 31                	jne    c0018be9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018bb8:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c0018bbd:	80 fa 01             	cmp    dl,0x1
c0018bc0:	74 57                	je     c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bc2:	b8 86 c5 02 c0       	mov    eax,0xc002c586
c0018bc7:	80 fa 13             	cmp    dl,0x13
c0018bca:	76 0c                	jbe    c0018bd8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018bcc:	80 fa 30             	cmp    dl,0x30
c0018bcf:	75 48                	jne    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bd1:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c0018bd6:	eb 41                	jmp    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bd8:	b9 04 00 09 00       	mov    ecx,0x90004
c0018bdd:	0f a3 d1             	bt     ecx,edx
c0018be0:	73 37                	jae    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018be2:	b8 d0 e5 02 c0       	mov    eax,0xc002e5d0
c0018be7:	eb 30                	jmp    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018be9:	b8 86 c5 02 c0       	mov    eax,0xc002c586
c0018bee:	80 f9 16             	cmp    cl,0x16
c0018bf1:	75 26                	jne    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bf3:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c0018bf8:	84 d2                	test   dl,dl
c0018bfa:	74 1d                	je     c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bfc:	b8 86 c5 02 c0       	mov    eax,0xc002c586
c0018c01:	80 fa 30             	cmp    dl,0x30
c0018c04:	75 13                	jne    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c06:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c0018c0b:	eb 0c                	jmp    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c0d:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c0018c12:	eb 05                	jmp    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c14:	b8 90 e5 02 c0       	mov    eax,0xc002e590
c0018c19:	5b                   	pop    ebx
c0018c1a:	5e                   	pop    esi
c0018c1b:	5f                   	pop    edi
c0018c1c:	5d                   	pop    ebp
c0018c1d:	c3                   	ret    

c0018c1e <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018c1e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c26:	80 f9 04             	cmp    cl,0x4
c0018c29:	75 6b                	jne    c0018c96 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018c2b:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c0018c30:	80 fa 01             	cmp    dl,0x1
c0018c33:	0f 86 92 02 00 00    	jbe    c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c39:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c0018c3e:	80 fa 02             	cmp    dl,0x2
c0018c41:	0f 84 84 02 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c47:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018c4c:	80 fa 03             	cmp    dl,0x3
c0018c4f:	0f 84 76 02 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c55:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c0018c5a:	80 fa 04             	cmp    dl,0x4
c0018c5d:	0f 84 68 02 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c63:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c0018c68:	80 fa 05             	cmp    dl,0x5
c0018c6b:	0f 84 5a 02 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c71:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018c76:	80 fa 07             	cmp    dl,0x7
c0018c79:	0f 84 4c 02 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c7f:	83 ea 08             	sub    edx,0x8
c0018c82:	b8 86 c5 02 c0       	mov    eax,0xc002c586
c0018c87:	80 fa 01             	cmp    dl,0x1
c0018c8a:	0f 87 3b 02 00 00    	ja     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c90:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c0018c95:	c3                   	ret    
c0018c96:	80 f9 05             	cmp    cl,0x5
c0018c99:	75 45                	jne    c0018ce0 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018c9b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018c9e:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c0018ca3:	80 f9 02             	cmp    cl,0x2
c0018ca6:	0f 86 1f 02 00 00    	jbe    c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cac:	80 fa 04             	cmp    dl,0x4
c0018caf:	0f 84 f3 01 00 00    	je     c0018ea8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018cb5:	80 fa 07             	cmp    dl,0x7
c0018cb8:	0f 84 0d 02 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cbe:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c0018cc3:	80 fa 08             	cmp    dl,0x8
c0018cc6:	0f 84 ff 01 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ccc:	b8 86 c5 02 c0       	mov    eax,0xc002c586
c0018cd1:	80 fa 09             	cmp    dl,0x9
c0018cd4:	0f 85 f1 01 00 00    	jne    c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cda:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c0018cdf:	c3                   	ret    
c0018ce0:	80 f9 06             	cmp    cl,0x6
c0018ce3:	0f 85 85 01 00 00    	jne    c0018e6e <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018ce9:	b8 10 e4 02 c0       	mov    eax,0xc002e410
c0018cee:	80 fa 01             	cmp    dl,0x1
c0018cf1:	0f 84 d4 01 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cf7:	8d 42 fb             	lea    eax,[edx-0x5]
c0018cfa:	3c 01                	cmp    al,0x1
c0018cfc:	0f 86 ac 01 00 00    	jbe    c0018eae <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018d02:	80 fa 03             	cmp    dl,0x3
c0018d05:	0f 84 a3 01 00 00    	je     c0018eae <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018d0b:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018d0e:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c0018d13:	80 f9 01             	cmp    cl,0x1
c0018d16:	0f 86 af 01 00 00    	jbe    c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d1c:	80 fa 09             	cmp    dl,0x9
c0018d1f:	0f 84 8f 01 00 00    	je     c0018eb4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018d25:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018d28:	80 f9 01             	cmp    cl,0x1
c0018d2b:	0f 86 9a 01 00 00    	jbe    c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d31:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018d36:	80 fa 0d             	cmp    dl,0xd
c0018d39:	0f 84 8c 01 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d3f:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018d44:	80 fa 0e             	cmp    dl,0xe
c0018d47:	0f 84 7e 01 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d4d:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018d52:	80 fa 0f             	cmp    dl,0xf
c0018d55:	0f 84 70 01 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d5b:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018d60:	80 fa 15             	cmp    dl,0x15
c0018d63:	0f 84 62 01 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d69:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018d6c:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018d71:	80 f9 01             	cmp    cl,0x1
c0018d74:	0f 86 51 01 00 00    	jbe    c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d7a:	80 fa 1a             	cmp    dl,0x1a
c0018d7d:	0f 84 37 01 00 00    	je     c0018eba <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018d83:	80 fa 1c             	cmp    dl,0x1c
c0018d86:	0f 84 34 01 00 00    	je     c0018ec0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018d8c:	80 fa 1d             	cmp    dl,0x1d
c0018d8f:	0f 84 36 01 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d95:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c0018d9a:	80 fa 25             	cmp    dl,0x25
c0018d9d:	0f 84 28 01 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018da3:	8d 4a da             	lea    ecx,[edx-0x26]
c0018da6:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c0018dab:	80 f9 01             	cmp    cl,0x1
c0018dae:	0f 86 17 01 00 00    	jbe    c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db4:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c0018db9:	80 fa 2a             	cmp    dl,0x2a
c0018dbc:	0f 84 09 01 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dc2:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c0018dc7:	80 fa 2c             	cmp    dl,0x2c
c0018dca:	0f 84 fb 00 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dd0:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c0018dd5:	80 fa 2d             	cmp    dl,0x2d
c0018dd8:	0f 84 ed 00 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dde:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c0018de3:	80 fa 2e             	cmp    dl,0x2e
c0018de6:	0f 84 df 00 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dec:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c0018df1:	80 fa 2f             	cmp    dl,0x2f
c0018df4:	0f 84 d1 00 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dfa:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018dfd:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c0018e02:	80 f9 01             	cmp    cl,0x1
c0018e05:	0f 86 c0 00 00 00    	jbe    c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e0b:	b8 b0 e4 02 c0       	mov    eax,0xc002e4b0
c0018e10:	80 fa 37             	cmp    dl,0x37
c0018e13:	0f 84 b2 00 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e19:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c0018e1e:	80 fa 3a             	cmp    dl,0x3a
c0018e21:	0f 84 a4 00 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e27:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c0018e2c:	80 fa 3c             	cmp    dl,0x3c
c0018e2f:	0f 84 96 00 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e35:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018e3a:	80 fa 3d             	cmp    dl,0x3d
c0018e3d:	0f 84 88 00 00 00    	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e43:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c0018e48:	80 fa 3e             	cmp    dl,0x3e
c0018e4b:	74 7e                	je     c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e4d:	8d 42 bb             	lea    eax,[edx-0x45]
c0018e50:	3c 01                	cmp    al,0x1
c0018e52:	76 72                	jbe    c0018ec6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e54:	80 fa 3f             	cmp    dl,0x3f
c0018e57:	74 6d                	je     c0018ec6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e59:	80 fa 4a             	cmp    dl,0x4a
c0018e5c:	74 0a                	je     c0018e68 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018e5e:	b8 86 c5 02 c0       	mov    eax,0xc002c586
c0018e63:	80 fa 4d             	cmp    dl,0x4d
c0018e66:	75 63                	jne    c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e68:	b8 b0 e4 02 c0       	mov    eax,0xc002e4b0
c0018e6d:	c3                   	ret    
c0018e6e:	b8 86 c5 02 c0       	mov    eax,0xc002c586
c0018e73:	80 f9 0b             	cmp    cl,0xb
c0018e76:	75 0a                	jne    c0018e82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018e78:	fe ca                	dec    dl
c0018e7a:	75 4f                	jne    c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e7c:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c0018e81:	c3                   	ret    
c0018e82:	80 f9 0f             	cmp    cl,0xf
c0018e85:	75 44                	jne    c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e87:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c0018e8c:	80 fa 02             	cmp    dl,0x2
c0018e8f:	76 3a                	jbe    c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e91:	8d 42 fd             	lea    eax,[edx-0x3]
c0018e94:	3c 01                	cmp    al,0x1
c0018e96:	76 0a                	jbe    c0018ea2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018e98:	b8 86 c5 02 c0       	mov    eax,0xc002c586
c0018e9d:	80 fa 06             	cmp    dl,0x6
c0018ea0:	75 29                	jne    c0018ecb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ea2:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c0018ea7:	c3                   	ret    
c0018ea8:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c0018ead:	c3                   	ret    
c0018eae:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c0018eb3:	c3                   	ret    
c0018eb4:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018eb9:	c3                   	ret    
c0018eba:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c0018ebf:	c3                   	ret    
c0018ec0:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c0018ec5:	c3                   	ret    
c0018ec6:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c0018ecb:	c3                   	ret    

c0018ecc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018ecc:	60                   	pusha  
c0018ecd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ed1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ed5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ed9:	9c                   	pushf  
c0018eda:	fa                   	cli    
c0018edb:	0f 09                	wbinvd 
c0018edd:	0f 30                	wrmsr  
c0018edf:	9d                   	popf   
c0018ee0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ee4:	89 02                	mov    DWORD PTR [edx],eax
c0018ee6:	61                   	popa   
c0018ee7:	c3                   	ret    

c0018ee8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018ee8:	60                   	pusha  
c0018ee9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018eed:	9c                   	pushf  
c0018eee:	fa                   	cli    
c0018eef:	0f 09                	wbinvd 
c0018ef1:	31 c0                	xor    eax,eax
c0018ef3:	31 d2                	xor    edx,edx
c0018ef5:	0f 32                	rdmsr  
c0018ef7:	9d                   	popf   
c0018ef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018efc:	89 02                	mov    DWORD PTR [edx],eax
c0018efe:	61                   	popa   
c0018eff:	c3                   	ret    

c0018f00 <CPU::AMD_K6_writeback(int, int, int)>:
c0018f00:	56                   	push   esi
c0018f01:	53                   	push   ebx
c0018f02:	83 ec 10             	sub    esp,0x10
c0018f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f09:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018f0e:	75 5d                	jne    c0018f6d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f10:	83 f8 08             	cmp    eax,0x8
c0018f13:	75 09                	jne    c0018f1e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018f15:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018f1a:	7e 13                	jle    c0018f2f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018f1c:	eb 30                	jmp    c0018f4e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018f1e:	83 f8 06             	cmp    eax,0x6
c0018f21:	7c 4a                	jl     c0018f6d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f23:	83 f8 07             	cmp    eax,0x7
c0018f26:	7e 07                	jle    c0018f2f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018f28:	83 f8 09             	cmp    eax,0x9
c0018f2b:	74 21                	je     c0018f4e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018f2d:	eb 3e                	jmp    c0018f6d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f2f:	89 e6                	mov    esi,esp
c0018f31:	8b 1d 48 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f148
c0018f37:	56                   	push   esi
c0018f38:	c1 eb 15             	shr    ebx,0x15
c0018f3b:	68 82 00 00 c0       	push   0xc0000082
c0018f40:	83 e3 7e             	and    ebx,0x7e
c0018f43:	e8 a0 ff ff ff       	call   c0018ee8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f48:	56                   	push   esi
c0018f49:	6a 00                	push   0x0
c0018f4b:	53                   	push   ebx
c0018f4c:	eb 12                	jmp    c0018f60 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018f4e:	89 e3                	mov    ebx,esp
c0018f50:	53                   	push   ebx
c0018f51:	68 82 00 00 c0       	push   0xc0000082
c0018f56:	e8 8d ff ff ff       	call   c0018ee8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f5b:	53                   	push   ebx
c0018f5c:	6a 00                	push   0x0
c0018f5e:	6a 00                	push   0x0
c0018f60:	68 82 00 00 c0       	push   0xc0000082
c0018f65:	e8 62 ff ff ff       	call   c0018ecc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018f6a:	83 c4 18             	add    esp,0x18
c0018f6d:	83 c4 10             	add    esp,0x10
c0018f70:	5b                   	pop    ebx
c0018f71:	5e                   	pop    esi
c0018f72:	c3                   	ret    
c0018f73:	90                   	nop

c0018f74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f74:	55                   	push   ebp
c0018f75:	57                   	push   edi
c0018f76:	56                   	push   esi
c0018f77:	53                   	push   ebx
c0018f78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f7c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018f80:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018f84:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f88:	39 05 20 e6 02 c0    	cmp    DWORD PTR ds:0xc002e620,eax
c0018f8e:	75 23                	jne    c0018fb3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018f90:	a1 4c 1c 03 c0       	mov    eax,ds:0xc0031c4c
c0018f95:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018f99:	89 06                	mov    DWORD PTR [esi],eax
c0018f9b:	a1 48 1c 03 c0       	mov    eax,ds:0xc0031c48
c0018fa0:	89 07                	mov    DWORD PTR [edi],eax
c0018fa2:	a1 44 1c 03 c0       	mov    eax,ds:0xc0031c44
c0018fa7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018faa:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0018faf:	89 02                	mov    DWORD PTR [edx],eax
c0018fb1:	eb 3f                	jmp    c0018ff2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018fb3:	31 c9                	xor    ecx,ecx
c0018fb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fb9:	0f a2                	cpuid  
c0018fbb:	89 06                	mov    DWORD PTR [esi],eax
c0018fbd:	89 1f                	mov    DWORD PTR [edi],ebx
c0018fbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018fc3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018fc6:	89 10                	mov    DWORD PTR [eax],edx
c0018fc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fcc:	a3 20 e6 02 c0       	mov    ds:0xc002e620,eax
c0018fd1:	8b 06                	mov    eax,DWORD PTR [esi]
c0018fd3:	a3 4c 1c 03 c0       	mov    ds:0xc0031c4c,eax
c0018fd8:	8b 07                	mov    eax,DWORD PTR [edi]
c0018fda:	a3 48 1c 03 c0       	mov    ds:0xc0031c48,eax
c0018fdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018fe2:	a3 44 1c 03 c0       	mov    ds:0xc0031c44,eax
c0018fe7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018feb:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fed:	a3 40 1c 03 c0       	mov    ds:0xc0031c40,eax
c0018ff2:	5b                   	pop    ebx
c0018ff3:	5e                   	pop    esi
c0018ff4:	5f                   	pop    edi
c0018ff5:	5d                   	pop    ebp
c0018ff6:	c3                   	ret    
c0018ff7:	90                   	nop

c0018ff8 <CPU::cpuidCheckEDX(unsigned int)>:
c0018ff8:	83 ec 10             	sub    esp,0x10
c0018ffb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fff:	50                   	push   eax
c0019000:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019004:	50                   	push   eax
c0019005:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019009:	50                   	push   eax
c001900a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001900e:	50                   	push   eax
c001900f:	6a 01                	push   0x1
c0019011:	e8 5e ff ff ff       	call   c0018f74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019016:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001901a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001901e:	0f 95 c0             	setne  al
c0019021:	83 c4 24             	add    esp,0x24
c0019024:	c3                   	ret    
c0019025:	90                   	nop

c0019026 <CPU::cpuidCheckECX(unsigned int)>:
c0019026:	83 ec 10             	sub    esp,0x10
c0019029:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001902d:	50                   	push   eax
c001902e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019032:	50                   	push   eax
c0019033:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019037:	50                   	push   eax
c0019038:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001903c:	50                   	push   eax
c001903d:	6a 01                	push   0x1
c001903f:	e8 30 ff ff ff       	call   c0018f74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019044:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019048:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001904c:	0f 95 c0             	setne  al
c001904f:	83 c4 24             	add    esp,0x24
c0019052:	c3                   	ret    
c0019053:	90                   	nop

c0019054 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0019054:	83 ec 10             	sub    esp,0x10
c0019057:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001905b:	50                   	push   eax
c001905c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019060:	50                   	push   eax
c0019061:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019065:	50                   	push   eax
c0019066:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001906a:	50                   	push   eax
c001906b:	6a 07                	push   0x7
c001906d:	e8 02 ff ff ff       	call   c0018f74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019072:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019076:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001907a:	0f 95 c0             	setne  al
c001907d:	83 c4 24             	add    esp,0x24
c0019080:	c3                   	ret    
c0019081:	90                   	nop

c0019082 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0019082:	83 ec 10             	sub    esp,0x10
c0019085:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019089:	50                   	push   eax
c001908a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001908e:	50                   	push   eax
c001908f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019093:	50                   	push   eax
c0019094:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019098:	50                   	push   eax
c0019099:	6a 07                	push   0x7
c001909b:	e8 d4 fe ff ff       	call   c0018f74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190a4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00190a8:	0f 95 c0             	setne  al
c00190ab:	83 c4 24             	add    esp,0x24
c00190ae:	c3                   	ret    
c00190af:	90                   	nop

c00190b0 <CPU::CPU()>:
c00190b0:	83 ec 0c             	sub    esp,0xc
c00190b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190b7:	83 ec 08             	sub    esp,0x8
c00190ba:	68 86 c5 02 c0       	push   0xc002c586
c00190bf:	50                   	push   eax
c00190c0:	e8 e5 b3 ff ff       	call   c00144aa <Device::Device(char const*)>
c00190c5:	83 c4 10             	add    esp,0x10
c00190c8:	ba 60 c6 02 c0       	mov    edx,0xc002c660
c00190cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d1:	89 10                	mov    DWORD PTR [eax],edx
c00190d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00190e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190e5:	05 78 01 00 00       	add    eax,0x178
c00190ea:	83 ec 0c             	sub    esp,0xc
c00190ed:	50                   	push   eax
c00190ee:	e8 e3 5f ff ff       	call   c000f0d6 <GDT::GDT()>
c00190f3:	83 c4 10             	add    esp,0x10
c00190f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190fa:	05 7c 09 00 00       	add    eax,0x97c
c00190ff:	83 ec 0c             	sub    esp,0xc
c0019102:	50                   	push   eax
c0019103:	e8 38 62 ff ff       	call   c000f340 <IDT::IDT()>
c0019108:	83 c4 10             	add    esp,0x10
c001910b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001910f:	05 7c 11 00 00       	add    eax,0x117c
c0019114:	83 ec 0c             	sub    esp,0xc
c0019117:	50                   	push   eax
c0019118:	e8 9d 82 ff ff       	call   c00113ba <TSS::TSS()>
c001911d:	83 c4 10             	add    esp,0x10
c0019120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019124:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001912b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001912f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0019139:	90                   	nop
c001913a:	83 c4 0c             	add    esp,0xc
c001913d:	c3                   	ret    

c001913e <CPU::displayFeatures()>:
c001913e:	53                   	push   ebx
c001913f:	83 ec 10             	sub    esp,0x10
c0019142:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019146:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001914c:	68 94 c2 02 c0       	push   0xc002c294
c0019151:	e8 39 9d ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0019156:	59                   	pop    ecx
c0019157:	58                   	pop    eax
c0019158:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001915e:	50                   	push   eax
c001915f:	68 a5 c2 02 c0       	push   0xc002c2a5
c0019164:	e8 26 9d ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0019169:	58                   	pop    eax
c001916a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019170:	5a                   	pop    edx
c0019171:	c1 e8 0e             	shr    eax,0xe
c0019174:	0f b6 c0             	movzx  eax,al
c0019177:	50                   	push   eax
c0019178:	68 b6 c2 02 c0       	push   0xc002c2b6
c001917d:	e8 0d 9d ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0019182:	59                   	pop    ecx
c0019183:	58                   	pop    eax
c0019184:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001918a:	66 c1 e8 06          	shr    ax,0x6
c001918e:	0f b6 c0             	movzx  eax,al
c0019191:	50                   	push   eax
c0019192:	68 c7 c2 02 c0       	push   0xc002c2c7
c0019197:	e8 f3 9c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001919c:	c7 04 24 74 c7 02 c0 	mov    DWORD PTR [esp],0xc002c774
c00191a3:	e8 e7 9c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00191a8:	83 c4 10             	add    esp,0x10
c00191ab:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c00191b0:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00191b7:	74 05                	je     c00191be <CPU::displayFeatures()+0x80>
c00191b9:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c00191be:	52                   	push   edx
c00191bf:	52                   	push   edx
c00191c0:	50                   	push   eax
c00191c1:	68 d8 c2 02 c0       	push   0xc002c2d8
c00191c6:	e8 c4 9c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00191cb:	83 c4 10             	add    esp,0x10
c00191ce:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c00191d3:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00191da:	78 05                	js     c00191e1 <CPU::displayFeatures()+0xa3>
c00191dc:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c00191e1:	51                   	push   ecx
c00191e2:	51                   	push   ecx
c00191e3:	50                   	push   eax
c00191e4:	68 ef c2 02 c0       	push   0xc002c2ef
c00191e9:	e8 a1 9c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00191ee:	83 c4 10             	add    esp,0x10
c00191f1:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c00191f6:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00191fd:	75 05                	jne    c0019204 <CPU::displayFeatures()+0xc6>
c00191ff:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019204:	52                   	push   edx
c0019205:	52                   	push   edx
c0019206:	50                   	push   eax
c0019207:	68 06 c3 02 c0       	push   0xc002c306
c001920c:	e8 7e 9c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0019211:	83 c4 10             	add    esp,0x10
c0019214:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019219:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0019220:	75 05                	jne    c0019227 <CPU::displayFeatures()+0xe9>
c0019222:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019227:	51                   	push   ecx
c0019228:	51                   	push   ecx
c0019229:	50                   	push   eax
c001922a:	68 1d c3 02 c0       	push   0xc002c31d
c001922f:	e8 5b 9c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0019234:	83 c4 10             	add    esp,0x10
c0019237:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c001923c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019243:	75 05                	jne    c001924a <CPU::displayFeatures()+0x10c>
c0019245:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c001924a:	52                   	push   edx
c001924b:	52                   	push   edx
c001924c:	50                   	push   eax
c001924d:	68 34 c3 02 c0       	push   0xc002c334
c0019252:	e8 38 9c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0019257:	83 c4 10             	add    esp,0x10
c001925a:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c001925f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0019266:	75 05                	jne    c001926d <CPU::displayFeatures()+0x12f>
c0019268:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c001926d:	51                   	push   ecx
c001926e:	51                   	push   ecx
c001926f:	50                   	push   eax
c0019270:	68 4b c3 02 c0       	push   0xc002c34b
c0019275:	e8 15 9c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001927a:	83 c4 10             	add    esp,0x10
c001927d:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019282:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019289:	75 05                	jne    c0019290 <CPU::displayFeatures()+0x152>
c001928b:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019290:	52                   	push   edx
c0019291:	52                   	push   edx
c0019292:	50                   	push   eax
c0019293:	68 62 c3 02 c0       	push   0xc002c362
c0019298:	e8 f2 9b ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001929d:	83 c4 10             	add    esp,0x10
c00192a0:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c00192a5:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00192ac:	75 05                	jne    c00192b3 <CPU::displayFeatures()+0x175>
c00192ae:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c00192b3:	51                   	push   ecx
c00192b4:	51                   	push   ecx
c00192b5:	50                   	push   eax
c00192b6:	68 79 c3 02 c0       	push   0xc002c379
c00192bb:	e8 cf 9b ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00192c0:	83 c4 10             	add    esp,0x10
c00192c3:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c00192c8:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00192cf:	75 05                	jne    c00192d6 <CPU::displayFeatures()+0x198>
c00192d1:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c00192d6:	52                   	push   edx
c00192d7:	52                   	push   edx
c00192d8:	50                   	push   eax
c00192d9:	68 90 c3 02 c0       	push   0xc002c390
c00192de:	e8 ac 9b ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00192e3:	83 c4 10             	add    esp,0x10
c00192e6:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c00192eb:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00192f2:	75 05                	jne    c00192f9 <CPU::displayFeatures()+0x1bb>
c00192f4:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c00192f9:	51                   	push   ecx
c00192fa:	51                   	push   ecx
c00192fb:	50                   	push   eax
c00192fc:	68 a7 c3 02 c0       	push   0xc002c3a7
c0019301:	e8 89 9b ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0019306:	83 c4 10             	add    esp,0x10
c0019309:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c001930e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019315:	75 05                	jne    c001931c <CPU::displayFeatures()+0x1de>
c0019317:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c001931c:	52                   	push   edx
c001931d:	52                   	push   edx
c001931e:	50                   	push   eax
c001931f:	68 be c3 02 c0       	push   0xc002c3be
c0019324:	e8 66 9b ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0019329:	83 c4 10             	add    esp,0x10
c001932c:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019331:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019338:	75 05                	jne    c001933f <CPU::displayFeatures()+0x201>
c001933a:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c001933f:	51                   	push   ecx
c0019340:	51                   	push   ecx
c0019341:	50                   	push   eax
c0019342:	68 d5 c3 02 c0       	push   0xc002c3d5
c0019347:	e8 43 9b ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001934c:	83 c4 10             	add    esp,0x10
c001934f:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019354:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001935b:	75 05                	jne    c0019362 <CPU::displayFeatures()+0x224>
c001935d:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019362:	52                   	push   edx
c0019363:	52                   	push   edx
c0019364:	50                   	push   eax
c0019365:	68 ec c3 02 c0       	push   0xc002c3ec
c001936a:	e8 20 9b ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001936f:	83 c4 10             	add    esp,0x10
c0019372:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019377:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001937e:	78 05                	js     c0019385 <CPU::displayFeatures()+0x247>
c0019380:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019385:	51                   	push   ecx
c0019386:	51                   	push   ecx
c0019387:	50                   	push   eax
c0019388:	68 03 c4 02 c0       	push   0xc002c403
c001938d:	e8 fd 9a ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0019392:	83 c4 10             	add    esp,0x10
c0019395:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c001939a:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00193a1:	75 05                	jne    c00193a8 <CPU::displayFeatures()+0x26a>
c00193a3:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c00193a8:	52                   	push   edx
c00193a9:	52                   	push   edx
c00193aa:	50                   	push   eax
c00193ab:	68 1a c4 02 c0       	push   0xc002c41a
c00193b0:	e8 da 9a ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00193b5:	83 c4 18             	add    esp,0x18
c00193b8:	5b                   	pop    ebx
c00193b9:	c3                   	ret    

c00193ba <CPU::detectFeatures()>:
c00193ba:	55                   	push   ebp
c00193bb:	57                   	push   edi
c00193bc:	56                   	push   esi
c00193bd:	53                   	push   ebx
c00193be:	83 ec 50             	sub    esp,0x50
c00193c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00193c5:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00193cf:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00193d6:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00193dc:	6a 0d                	push   0xd
c00193de:	6a 00                	push   0x0
c00193e0:	57                   	push   edi
c00193e1:	e8 86 73 fe ff       	call   c000076c <memset>
c00193e6:	83 c4 10             	add    esp,0x10
c00193e9:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c00193ee:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00193f5:	0f 84 0b 09 00 00    	je     c0019d06 <CPU::detectFeatures()+0x94c>
c00193fb:	83 ec 0c             	sub    esp,0xc
c00193fe:	6a 10                	push   0x10
c0019400:	e8 f3 fb ff ff       	call   c0018ff8 <CPU::cpuidCheckEDX(unsigned int)>
c0019405:	83 e0 01             	and    eax,0x1
c0019408:	8d 14 00             	lea    edx,[eax+eax*1]
c001940b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019411:	83 e0 fd             	and    eax,0xfffffffd
c0019414:	09 d0                	or     eax,edx
c0019416:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001941c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019423:	e8 d0 fb ff ff       	call   c0018ff8 <CPU::cpuidCheckEDX(unsigned int)>
c0019428:	83 e0 01             	and    eax,0x1
c001942b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019432:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019438:	83 e0 fb             	and    eax,0xfffffffb
c001943b:	09 d0                	or     eax,edx
c001943d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019443:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001944a:	e8 a9 fb ff ff       	call   c0018ff8 <CPU::cpuidCheckEDX(unsigned int)>
c001944f:	83 e0 01             	and    eax,0x1
c0019452:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019459:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001945f:	83 e0 f7             	and    eax,0xfffffff7
c0019462:	09 d0                	or     eax,edx
c0019464:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001946a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019471:	e8 82 fb ff ff       	call   c0018ff8 <CPU::cpuidCheckEDX(unsigned int)>
c0019476:	83 e0 01             	and    eax,0x1
c0019479:	c1 e0 04             	shl    eax,0x4
c001947c:	88 c2                	mov    dl,al
c001947e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019484:	83 e0 ef             	and    eax,0xffffffef
c0019487:	09 d0                	or     eax,edx
c0019489:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001948f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019496:	e8 5d fb ff ff       	call   c0018ff8 <CPU::cpuidCheckEDX(unsigned int)>
c001949b:	83 e0 01             	and    eax,0x1
c001949e:	c1 e0 05             	shl    eax,0x5
c00194a1:	88 c2                	mov    dl,al
c00194a3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194a9:	83 e0 df             	and    eax,0xffffffdf
c00194ac:	09 d0                	or     eax,edx
c00194ae:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194b4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00194bb:	e8 38 fb ff ff       	call   c0018ff8 <CPU::cpuidCheckEDX(unsigned int)>
c00194c0:	83 e0 01             	and    eax,0x1
c00194c3:	8d 14 00             	lea    edx,[eax+eax*1]
c00194c6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00194cc:	83 e0 fd             	and    eax,0xfffffffd
c00194cf:	09 d0                	or     eax,edx
c00194d1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00194d7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00194de:	e8 15 fb ff ff       	call   c0018ff8 <CPU::cpuidCheckEDX(unsigned int)>
c00194e3:	83 e0 01             	and    eax,0x1
c00194e6:	c1 e0 06             	shl    eax,0x6
c00194e9:	88 c2                	mov    dl,al
c00194eb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194f1:	83 e0 bf             	and    eax,0xffffffbf
c00194f4:	09 d0                	or     eax,edx
c00194f6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194fc:	58                   	pop    eax
c00194fd:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019501:	56                   	push   esi
c0019502:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019506:	55                   	push   ebp
c0019507:	8d 44 24 28          	lea    eax,[esp+0x28]
c001950b:	50                   	push   eax
c001950c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019510:	50                   	push   eax
c0019511:	6a 00                	push   0x0
c0019513:	e8 5c fa ff ff       	call   c0018f74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019518:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001951c:	89 83 5f 01 00 00    	mov    DWORD PTR [ebx+0x15f],eax
c0019522:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019526:	89 83 63 01 00 00    	mov    DWORD PTR [ebx+0x163],eax
c001952c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019530:	83 c4 18             	add    esp,0x18
c0019533:	89 83 67 01 00 00    	mov    DWORD PTR [ebx+0x167],eax
c0019539:	68 31 c4 02 c0       	push   0xc002c431
c001953e:	57                   	push   edi
c001953f:	e8 70 73 fe ff       	call   c00008b4 <strcmp>
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	85 c0                	test   eax,eax
c0019549:	75 0f                	jne    c001955a <CPU::detectFeatures()+0x1a0>
c001954b:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019555:	e9 22 02 00 00       	jmp    c001977c <CPU::detectFeatures()+0x3c2>
c001955a:	50                   	push   eax
c001955b:	50                   	push   eax
c001955c:	68 3e c4 02 c0       	push   0xc002c43e
c0019561:	57                   	push   edi
c0019562:	e8 4d 73 fe ff       	call   c00008b4 <strcmp>
c0019567:	83 c4 10             	add    esp,0x10
c001956a:	85 c0                	test   eax,eax
c001956c:	74 dd                	je     c001954b <CPU::detectFeatures()+0x191>
c001956e:	51                   	push   ecx
c001956f:	51                   	push   ecx
c0019570:	68 4b c4 02 c0       	push   0xc002c44b
c0019575:	57                   	push   edi
c0019576:	e8 39 73 fe ff       	call   c00008b4 <strcmp>
c001957b:	83 c4 10             	add    esp,0x10
c001957e:	85 c0                	test   eax,eax
c0019580:	74 2a                	je     c00195ac <CPU::detectFeatures()+0x1f2>
c0019582:	52                   	push   edx
c0019583:	52                   	push   edx
c0019584:	68 58 c4 02 c0       	push   0xc002c458
c0019589:	57                   	push   edi
c001958a:	e8 25 73 fe ff       	call   c00008b4 <strcmp>
c001958f:	83 c4 10             	add    esp,0x10
c0019592:	85 c0                	test   eax,eax
c0019594:	74 16                	je     c00195ac <CPU::detectFeatures()+0x1f2>
c0019596:	50                   	push   eax
c0019597:	50                   	push   eax
c0019598:	68 65 c4 02 c0       	push   0xc002c465
c001959d:	57                   	push   edi
c001959e:	e8 11 73 fe ff       	call   c00008b4 <strcmp>
c00195a3:	83 c4 10             	add    esp,0x10
c00195a6:	85 c0                	test   eax,eax
c00195a8:	74 48                	je     c00195f2 <CPU::detectFeatures()+0x238>
c00195aa:	eb 0f                	jmp    c00195bb <CPU::detectFeatures()+0x201>
c00195ac:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00195b6:	e9 c1 01 00 00       	jmp    c001977c <CPU::detectFeatures()+0x3c2>
c00195bb:	50                   	push   eax
c00195bc:	50                   	push   eax
c00195bd:	68 72 c4 02 c0       	push   0xc002c472
c00195c2:	57                   	push   edi
c00195c3:	e8 ec 72 fe ff       	call   c00008b4 <strcmp>
c00195c8:	83 c4 10             	add    esp,0x10
c00195cb:	85 c0                	test   eax,eax
c00195cd:	74 23                	je     c00195f2 <CPU::detectFeatures()+0x238>
c00195cf:	50                   	push   eax
c00195d0:	50                   	push   eax
c00195d1:	68 7f c4 02 c0       	push   0xc002c47f
c00195d6:	57                   	push   edi
c00195d7:	e8 d8 72 fe ff       	call   c00008b4 <strcmp>
c00195dc:	83 c4 10             	add    esp,0x10
c00195df:	85 c0                	test   eax,eax
c00195e1:	75 1e                	jne    c0019601 <CPU::detectFeatures()+0x247>
c00195e3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00195ed:	e9 8a 01 00 00       	jmp    c001977c <CPU::detectFeatures()+0x3c2>
c00195f2:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00195fc:	e9 7b 01 00 00       	jmp    c001977c <CPU::detectFeatures()+0x3c2>
c0019601:	50                   	push   eax
c0019602:	50                   	push   eax
c0019603:	68 8c c4 02 c0       	push   0xc002c48c
c0019608:	57                   	push   edi
c0019609:	e8 a6 72 fe ff       	call   c00008b4 <strcmp>
c001960e:	83 c4 10             	add    esp,0x10
c0019611:	85 c0                	test   eax,eax
c0019613:	75 0f                	jne    c0019624 <CPU::detectFeatures()+0x26a>
c0019615:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001961f:	e9 58 01 00 00       	jmp    c001977c <CPU::detectFeatures()+0x3c2>
c0019624:	50                   	push   eax
c0019625:	50                   	push   eax
c0019626:	68 4b c4 02 c0       	push   0xc002c44b
c001962b:	57                   	push   edi
c001962c:	e8 83 72 fe ff       	call   c00008b4 <strcmp>
c0019631:	83 c4 10             	add    esp,0x10
c0019634:	85 c0                	test   eax,eax
c0019636:	75 0f                	jne    c0019647 <CPU::detectFeatures()+0x28d>
c0019638:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019642:	e9 35 01 00 00       	jmp    c001977c <CPU::detectFeatures()+0x3c2>
c0019647:	50                   	push   eax
c0019648:	50                   	push   eax
c0019649:	68 99 c4 02 c0       	push   0xc002c499
c001964e:	57                   	push   edi
c001964f:	e8 60 72 fe ff       	call   c00008b4 <strcmp>
c0019654:	83 c4 10             	add    esp,0x10
c0019657:	85 c0                	test   eax,eax
c0019659:	75 0f                	jne    c001966a <CPU::detectFeatures()+0x2b0>
c001965b:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019665:	e9 12 01 00 00       	jmp    c001977c <CPU::detectFeatures()+0x3c2>
c001966a:	51                   	push   ecx
c001966b:	51                   	push   ecx
c001966c:	68 a6 c4 02 c0       	push   0xc002c4a6
c0019671:	57                   	push   edi
c0019672:	e8 3d 72 fe ff       	call   c00008b4 <strcmp>
c0019677:	83 c4 10             	add    esp,0x10
c001967a:	85 c0                	test   eax,eax
c001967c:	75 0f                	jne    c001968d <CPU::detectFeatures()+0x2d3>
c001967e:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019688:	e9 ef 00 00 00       	jmp    c001977c <CPU::detectFeatures()+0x3c2>
c001968d:	52                   	push   edx
c001968e:	52                   	push   edx
c001968f:	68 b3 c4 02 c0       	push   0xc002c4b3
c0019694:	57                   	push   edi
c0019695:	e8 1a 72 fe ff       	call   c00008b4 <strcmp>
c001969a:	83 c4 10             	add    esp,0x10
c001969d:	85 c0                	test   eax,eax
c001969f:	75 0f                	jne    c00196b0 <CPU::detectFeatures()+0x2f6>
c00196a1:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00196ab:	e9 cc 00 00 00       	jmp    c001977c <CPU::detectFeatures()+0x3c2>
c00196b0:	50                   	push   eax
c00196b1:	50                   	push   eax
c00196b2:	68 c0 c4 02 c0       	push   0xc002c4c0
c00196b7:	57                   	push   edi
c00196b8:	e8 f7 71 fe ff       	call   c00008b4 <strcmp>
c00196bd:	83 c4 10             	add    esp,0x10
c00196c0:	85 c0                	test   eax,eax
c00196c2:	75 0f                	jne    c00196d3 <CPU::detectFeatures()+0x319>
c00196c4:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00196ce:	e9 a9 00 00 00       	jmp    c001977c <CPU::detectFeatures()+0x3c2>
c00196d3:	50                   	push   eax
c00196d4:	50                   	push   eax
c00196d5:	68 cd c4 02 c0       	push   0xc002c4cd
c00196da:	57                   	push   edi
c00196db:	e8 d4 71 fe ff       	call   c00008b4 <strcmp>
c00196e0:	83 c4 10             	add    esp,0x10
c00196e3:	85 c0                	test   eax,eax
c00196e5:	75 0f                	jne    c00196f6 <CPU::detectFeatures()+0x33c>
c00196e7:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00196f1:	e9 86 00 00 00       	jmp    c001977c <CPU::detectFeatures()+0x3c2>
c00196f6:	50                   	push   eax
c00196f7:	50                   	push   eax
c00196f8:	68 da c4 02 c0       	push   0xc002c4da
c00196fd:	57                   	push   edi
c00196fe:	e8 b1 71 fe ff       	call   c00008b4 <strcmp>
c0019703:	83 c4 10             	add    esp,0x10
c0019706:	85 c0                	test   eax,eax
c0019708:	75 0c                	jne    c0019716 <CPU::detectFeatures()+0x35c>
c001970a:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019714:	eb 66                	jmp    c001977c <CPU::detectFeatures()+0x3c2>
c0019716:	50                   	push   eax
c0019717:	50                   	push   eax
c0019718:	68 e7 c4 02 c0       	push   0xc002c4e7
c001971d:	57                   	push   edi
c001971e:	e8 91 71 fe ff       	call   c00008b4 <strcmp>
c0019723:	83 c4 10             	add    esp,0x10
c0019726:	85 c0                	test   eax,eax
c0019728:	75 0c                	jne    c0019736 <CPU::detectFeatures()+0x37c>
c001972a:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019734:	eb 46                	jmp    c001977c <CPU::detectFeatures()+0x3c2>
c0019736:	50                   	push   eax
c0019737:	50                   	push   eax
c0019738:	68 f4 c4 02 c0       	push   0xc002c4f4
c001973d:	57                   	push   edi
c001973e:	e8 71 71 fe ff       	call   c00008b4 <strcmp>
c0019743:	83 c4 10             	add    esp,0x10
c0019746:	85 c0                	test   eax,eax
c0019748:	74 e0                	je     c001972a <CPU::detectFeatures()+0x370>
c001974a:	50                   	push   eax
c001974b:	50                   	push   eax
c001974c:	68 01 c5 02 c0       	push   0xc002c501
c0019751:	57                   	push   edi
c0019752:	e8 5d 71 fe ff       	call   c00008b4 <strcmp>
c0019757:	83 c4 10             	add    esp,0x10
c001975a:	85 c0                	test   eax,eax
c001975c:	74 cc                	je     c001972a <CPU::detectFeatures()+0x370>
c001975e:	51                   	push   ecx
c001975f:	51                   	push   ecx
c0019760:	68 0e c5 02 c0       	push   0xc002c50e
c0019765:	57                   	push   edi
c0019766:	e8 49 71 fe ff       	call   c00008b4 <strcmp>
c001976b:	83 c4 10             	add    esp,0x10
c001976e:	85 c0                	test   eax,eax
c0019770:	74 b8                	je     c001972a <CPU::detectFeatures()+0x370>
c0019772:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001977c:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019781:	0f 86 be 00 00 00    	jbe    c0019845 <CPU::detectFeatures()+0x48b>
c0019787:	83 ec 0c             	sub    esp,0xc
c001978a:	68 80 00 00 00       	push   0x80
c001978f:	e8 c0 f8 ff ff       	call   c0019054 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019794:	83 e0 01             	and    eax,0x1
c0019797:	c1 e0 06             	shl    eax,0x6
c001979a:	88 c2                	mov    dl,al
c001979c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00197a2:	83 e0 bf             	and    eax,0xffffffbf
c00197a5:	09 d0                	or     eax,edx
c00197a7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00197ad:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00197b4:	e8 9b f8 ff ff       	call   c0019054 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197b9:	83 e0 01             	and    eax,0x1
c00197bc:	c1 e0 04             	shl    eax,0x4
c00197bf:	88 c2                	mov    dl,al
c00197c1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00197c7:	83 e0 ef             	and    eax,0xffffffef
c00197ca:	09 d0                	or     eax,edx
c00197cc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00197d2:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00197d9:	e8 76 f8 ff ff       	call   c0019054 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197de:	c1 e0 07             	shl    eax,0x7
c00197e1:	88 c2                	mov    dl,al
c00197e3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00197e9:	83 e0 7f             	and    eax,0x7f
c00197ec:	09 d0                	or     eax,edx
c00197ee:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00197f4:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00197fb:	e8 82 f8 ff ff       	call   c0019082 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019800:	83 e0 01             	and    eax,0x1
c0019803:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001980a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019810:	83 e0 f7             	and    eax,0xfffffff7
c0019813:	09 d0                	or     eax,edx
c0019815:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001981b:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019822:	e8 5b f8 ff ff       	call   c0019082 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019827:	83 c4 10             	add    esp,0x10
c001982a:	83 e0 01             	and    eax,0x1
c001982d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019834:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001983a:	83 e0 fb             	and    eax,0xfffffffb
c001983d:	09 d0                	or     eax,edx
c001983f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019845:	83 ec 0c             	sub    esp,0xc
c0019848:	56                   	push   esi
c0019849:	55                   	push   ebp
c001984a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001984e:	57                   	push   edi
c001984f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019853:	50                   	push   eax
c0019854:	6a 01                	push   0x1
c0019856:	e8 19 f7 ff ff       	call   c0018f74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001985b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001985f:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019865:	88 ca                	mov    dl,cl
c0019867:	83 e0 f0             	and    eax,0xfffffff0
c001986a:	83 e2 0f             	and    edx,0xf
c001986d:	09 d0                	or     eax,edx
c001986f:	88 ca                	mov    dl,cl
c0019871:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019877:	c0 ea 04             	shr    dl,0x4
c001987a:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001987e:	0f b6 c2             	movzx  eax,dl
c0019881:	83 c4 20             	add    esp,0x20
c0019884:	c1 e0 06             	shl    eax,0x6
c0019887:	89 c5                	mov    ebp,eax
c0019889:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001988f:	66 25 3f c0          	and    ax,0xc03f
c0019893:	09 e8                	or     eax,ebp
c0019895:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001989c:	89 c8                	mov    eax,ecx
c001989e:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00198a4:	c1 e8 08             	shr    eax,0x8
c00198a7:	83 e2 3f             	and    edx,0x3f
c00198aa:	83 e0 0f             	and    eax,0xf
c00198ad:	89 c5                	mov    ebp,eax
c00198af:	c1 e5 06             	shl    ebp,0x6
c00198b2:	09 d5                	or     ebp,edx
c00198b4:	89 ea                	mov    edx,ebp
c00198b6:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00198bc:	88 c2                	mov    dl,al
c00198be:	c0 ea 02             	shr    dl,0x2
c00198c1:	89 d5                	mov    ebp,edx
c00198c3:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00198c9:	83 e2 c0             	and    edx,0xffffffc0
c00198cc:	09 d5                	or     ebp,edx
c00198ce:	89 ea                	mov    edx,ebp
c00198d0:	89 cd                	mov    ebp,ecx
c00198d2:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00198d8:	c1 ed 0c             	shr    ebp,0xc
c00198db:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00198e1:	83 e5 03             	and    ebp,0x3
c00198e4:	83 e2 cf             	and    edx,0xffffffcf
c00198e7:	c1 e5 04             	shl    ebp,0x4
c00198ea:	09 d5                	or     ebp,edx
c00198ec:	3c 0f                	cmp    al,0xf
c00198ee:	89 ea                	mov    edx,ebp
c00198f0:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00198f6:	74 04                	je     c00198fc <CPU::detectFeatures()+0x542>
c00198f8:	3c 06                	cmp    al,0x6
c00198fa:	75 5c                	jne    c0019958 <CPU::detectFeatures()+0x59e>
c00198fc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019900:	89 cd                	mov    ebp,ecx
c0019902:	c1 ed 10             	shr    ebp,0x10
c0019905:	c1 e5 04             	shl    ebp,0x4
c0019908:	09 ea                	or     edx,ebp
c001990a:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019910:	0f b6 d2             	movzx  edx,dl
c0019913:	66 81 e5 3f c0       	and    bp,0xc03f
c0019918:	c1 e2 06             	shl    edx,0x6
c001991b:	09 ea                	or     edx,ebp
c001991d:	3c 0f                	cmp    al,0xf
c001991f:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019926:	75 30                	jne    c0019958 <CPU::detectFeatures()+0x59e>
c0019928:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001992e:	c1 e9 14             	shr    ecx,0x14
c0019931:	83 e0 3f             	and    eax,0x3f
c0019934:	83 c1 0f             	add    ecx,0xf
c0019937:	88 ca                	mov    dl,cl
c0019939:	c0 e9 02             	shr    cl,0x2
c001993c:	c1 e2 06             	shl    edx,0x6
c001993f:	09 d0                	or     eax,edx
c0019941:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019947:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001994d:	83 e0 c0             	and    eax,0xffffffc0
c0019950:	09 c1                	or     ecx,eax
c0019952:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019958:	83 ec 0c             	sub    esp,0xc
c001995b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019962:	56                   	push   esi
c0019963:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019967:	50                   	push   eax
c0019968:	57                   	push   edi
c0019969:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001996d:	55                   	push   ebp
c001996e:	68 00 00 00 80       	push   0x80000000
c0019973:	e8 fc f5 ff ff       	call   c0018f74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019978:	83 c4 20             	add    esp,0x20
c001997b:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019983:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019987:	76 1e                	jbe    c00199a7 <CPU::detectFeatures()+0x5ed>
c0019989:	83 ec 0c             	sub    esp,0xc
c001998c:	56                   	push   esi
c001998d:	50                   	push   eax
c001998e:	57                   	push   edi
c001998f:	55                   	push   ebp
c0019990:	68 01 00 00 80       	push   0x80000001
c0019995:	e8 da f5 ff ff       	call   c0018f74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001999a:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00199a4:	83 c4 20             	add    esp,0x20
c00199a7:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00199ad:	83 f8 01             	cmp    eax,0x1
c00199b0:	75 6f                	jne    c0019a21 <CPU::detectFeatures()+0x667>
c00199b2:	51                   	push   ecx
c00199b3:	51                   	push   ecx
c00199b4:	68 1a c5 02 c0       	push   0xc002c51a
c00199b9:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00199bd:	56                   	push   esi
c00199be:	e8 65 6e fe ff       	call   c0000828 <strcpy>
c00199c3:	5f                   	pop    edi
c00199c4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199ca:	5d                   	pop    ebp
c00199cb:	66 c1 e8 06          	shr    ax,0x6
c00199cf:	0f b6 c0             	movzx  eax,al
c00199d2:	50                   	push   eax
c00199d3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199d9:	c1 e8 0e             	shr    eax,0xe
c00199dc:	0f b6 c0             	movzx  eax,al
c00199df:	50                   	push   eax
c00199e0:	e8 39 f2 ff ff       	call   c0018c1e <CPU::lookupIntelName(unsigned char, unsigned char)>
c00199e5:	5a                   	pop    edx
c00199e6:	59                   	pop    ecx
c00199e7:	50                   	push   eax
c00199e8:	56                   	push   esi
c00199e9:	e8 7a 6f fe ff       	call   c0000968 <strcat>
c00199ee:	5f                   	pop    edi
c00199ef:	5d                   	pop    ebp
c00199f0:	56                   	push   esi
c00199f1:	53                   	push   ebx
c00199f2:	e8 a5 aa ff ff       	call   c001449c <Device::setName(char const*)>
c00199f7:	58                   	pop    eax
c00199f8:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00199fe:	5a                   	pop    edx
c00199ff:	68 21 c5 02 c0       	push   0xc002c521
c0019a04:	50                   	push   eax
c0019a05:	e8 aa 6e fe ff       	call   c00008b4 <strcmp>
c0019a0a:	83 c4 10             	add    esp,0x10
c0019a0d:	85 c0                	test   eax,eax
c0019a0f:	0f 85 71 03 00 00    	jne    c0019d86 <CPU::detectFeatures()+0x9cc>
c0019a15:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019a1c:	e9 65 03 00 00       	jmp    c0019d86 <CPU::detectFeatures()+0x9cc>
c0019a21:	83 f8 02             	cmp    eax,0x2
c0019a24:	0f 85 b5 00 00 00    	jne    c0019adf <CPU::detectFeatures()+0x725>
c0019a2a:	57                   	push   edi
c0019a2b:	57                   	push   edi
c0019a2c:	68 33 c5 02 c0       	push   0xc002c533
c0019a31:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019a35:	56                   	push   esi
c0019a36:	e8 ed 6d fe ff       	call   c0000828 <strcpy>
c0019a3b:	5d                   	pop    ebp
c0019a3c:	58                   	pop    eax
c0019a3d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a43:	66 c1 e8 06          	shr    ax,0x6
c0019a47:	0f b6 c0             	movzx  eax,al
c0019a4a:	50                   	push   eax
c0019a4b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a51:	c1 e8 0e             	shr    eax,0xe
c0019a54:	0f b6 c0             	movzx  eax,al
c0019a57:	50                   	push   eax
c0019a58:	e8 2d f0 ff ff       	call   c0018a8a <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019a5d:	5a                   	pop    edx
c0019a5e:	59                   	pop    ecx
c0019a5f:	50                   	push   eax
c0019a60:	56                   	push   esi
c0019a61:	e8 02 6f fe ff       	call   c0000968 <strcat>
c0019a66:	5f                   	pop    edi
c0019a67:	5d                   	pop    ebp
c0019a68:	56                   	push   esi
c0019a69:	53                   	push   ebx
c0019a6a:	e8 2d aa ff ff       	call   c001449c <Device::setName(char const*)>
c0019a6f:	58                   	pop    eax
c0019a70:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019a76:	5a                   	pop    edx
c0019a77:	68 38 c5 02 c0       	push   0xc002c538
c0019a7c:	50                   	push   eax
c0019a7d:	e8 32 6e fe ff       	call   c00008b4 <strcmp>
c0019a82:	83 c4 10             	add    esp,0x10
c0019a85:	85 c0                	test   eax,eax
c0019a87:	75 20                	jne    c0019aa9 <CPU::detectFeatures()+0x6ef>
c0019a89:	8b 15 08 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f108
c0019a8f:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019a95:	a8 01                	test   al,0x1
c0019a97:	74 10                	je     c0019aa9 <CPU::detectFeatures()+0x6ef>
c0019a99:	83 e0 fe             	and    eax,0xfffffffe
c0019a9c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019aa2:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019aa9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019aaf:	c1 e8 0e             	shr    eax,0xe
c0019ab2:	3c 05                	cmp    al,0x5
c0019ab4:	0f 85 cc 02 00 00    	jne    c0019d86 <CPU::detectFeatures()+0x9cc>
c0019aba:	56                   	push   esi
c0019abb:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019ac1:	83 e0 0f             	and    eax,0xf
c0019ac4:	50                   	push   eax
c0019ac5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019acb:	66 c1 e8 06          	shr    ax,0x6
c0019acf:	0f b6 c0             	movzx  eax,al
c0019ad2:	50                   	push   eax
c0019ad3:	6a 05                	push   0x5
c0019ad5:	e8 26 f4 ff ff       	call   c0018f00 <CPU::AMD_K6_writeback(int, int, int)>
c0019ada:	e9 1f 02 00 00       	jmp    c0019cfe <CPU::detectFeatures()+0x944>
c0019adf:	8d 50 fd             	lea    edx,[eax-0x3]
c0019ae2:	83 fa 01             	cmp    edx,0x1
c0019ae5:	76 09                	jbe    c0019af0 <CPU::detectFeatures()+0x736>
c0019ae7:	83 f8 06             	cmp    eax,0x6
c0019aea:	0f 85 91 01 00 00    	jne    c0019c81 <CPU::detectFeatures()+0x8c7>
c0019af0:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019af6:	c1 ea 0e             	shr    edx,0xe
c0019af9:	80 fa 05             	cmp    dl,0x5
c0019afc:	75 7b                	jne    c0019b79 <CPU::detectFeatures()+0x7bf>
c0019afe:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b04:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019b09:	66 81 fa 00 01       	cmp    dx,0x100
c0019b0e:	75 0c                	jne    c0019b1c <CPU::detectFeatures()+0x762>
c0019b10:	51                   	push   ecx
c0019b11:	51                   	push   ecx
c0019b12:	68 3f c5 02 c0       	push   0xc002c53f
c0019b17:	e9 dc 01 00 00       	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019b1c:	66 81 fa 00 02       	cmp    dx,0x200
c0019b21:	75 0c                	jne    c0019b2f <CPU::detectFeatures()+0x775>
c0019b23:	52                   	push   edx
c0019b24:	52                   	push   edx
c0019b25:	68 52 c5 02 c0       	push   0xc002c552
c0019b2a:	e9 c9 01 00 00       	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019b2f:	66 81 fa 40 02       	cmp    dx,0x240
c0019b34:	75 0c                	jne    c0019b42 <CPU::detectFeatures()+0x788>
c0019b36:	50                   	push   eax
c0019b37:	50                   	push   eax
c0019b38:	68 64 c5 02 c0       	push   0xc002c564
c0019b3d:	e9 b6 01 00 00       	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019b42:	83 f8 06             	cmp    eax,0x6
c0019b45:	75 0c                	jne    c0019b53 <CPU::detectFeatures()+0x799>
c0019b47:	50                   	push   eax
c0019b48:	50                   	push   eax
c0019b49:	68 76 c5 02 c0       	push   0xc002c576
c0019b4e:	e9 a5 01 00 00       	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019b53:	83 f8 04             	cmp    eax,0x4
c0019b56:	75 0c                	jne    c0019b64 <CPU::detectFeatures()+0x7aa>
c0019b58:	50                   	push   eax
c0019b59:	50                   	push   eax
c0019b5a:	68 82 c5 02 c0       	push   0xc002c582
c0019b5f:	e9 94 01 00 00       	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019b64:	83 f8 03             	cmp    eax,0x3
c0019b67:	0f 85 19 02 00 00    	jne    c0019d86 <CPU::detectFeatures()+0x9cc>
c0019b6d:	50                   	push   eax
c0019b6e:	50                   	push   eax
c0019b6f:	68 8a c5 02 c0       	push   0xc002c58a
c0019b74:	e9 7f 01 00 00       	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019b79:	80 fa 06             	cmp    dl,0x6
c0019b7c:	0f 85 db 00 00 00    	jne    c0019c5d <CPU::detectFeatures()+0x8a3>
c0019b82:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b88:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019b8d:	66 81 fa 80 01       	cmp    dx,0x180
c0019b92:	75 0c                	jne    c0019ba0 <CPU::detectFeatures()+0x7e6>
c0019b94:	50                   	push   eax
c0019b95:	50                   	push   eax
c0019b96:	68 95 c5 02 c0       	push   0xc002c595
c0019b9b:	e9 58 01 00 00       	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019ba0:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019ba6:	66 f7 c1 80 ff       	test   cx,0xff80
c0019bab:	75 0c                	jne    c0019bb9 <CPU::detectFeatures()+0x7ff>
c0019bad:	50                   	push   eax
c0019bae:	50                   	push   eax
c0019baf:	68 a5 c5 02 c0       	push   0xc002c5a5
c0019bb4:	e9 3f 01 00 00       	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019bb9:	66 81 fa 40 02       	cmp    dx,0x240
c0019bbe:	75 0c                	jne    c0019bcc <CPU::detectFeatures()+0x812>
c0019bc0:	55                   	push   ebp
c0019bc1:	55                   	push   ebp
c0019bc2:	68 ac c5 02 c0       	push   0xc002c5ac
c0019bc7:	e9 2c 01 00 00       	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019bcc:	66 81 fa 80 02       	cmp    dx,0x280
c0019bd1:	75 0c                	jne    c0019bdf <CPU::detectFeatures()+0x825>
c0019bd3:	57                   	push   edi
c0019bd4:	57                   	push   edi
c0019bd5:	68 b5 c5 02 c0       	push   0xc002c5b5
c0019bda:	e9 19 01 00 00       	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019bdf:	66 81 fa 40 03       	cmp    dx,0x340
c0019be4:	74 ed                	je     c0019bd3 <CPU::detectFeatures()+0x819>
c0019be6:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019beb:	75 0c                	jne    c0019bf9 <CPU::detectFeatures()+0x83f>
c0019bed:	56                   	push   esi
c0019bee:	56                   	push   esi
c0019bef:	68 bc c5 02 c0       	push   0xc002c5bc
c0019bf4:	e9 ff 00 00 00       	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019bf9:	83 f8 06             	cmp    eax,0x6
c0019bfc:	0f 84 45 ff ff ff    	je     c0019b47 <CPU::detectFeatures()+0x78d>
c0019c02:	83 f8 04             	cmp    eax,0x4
c0019c05:	0f 84 4d ff ff ff    	je     c0019b58 <CPU::detectFeatures()+0x79e>
c0019c0b:	83 f8 03             	cmp    eax,0x3
c0019c0e:	0f 85 72 01 00 00    	jne    c0019d86 <CPU::detectFeatures()+0x9cc>
c0019c14:	51                   	push   ecx
c0019c15:	51                   	push   ecx
c0019c16:	68 c5 c5 02 c0       	push   0xc002c5c5
c0019c1b:	53                   	push   ebx
c0019c1c:	e8 7b a8 ff ff       	call   c001449c <Device::setName(char const*)>
c0019c21:	b1 c1                	mov    cl,0xc1
c0019c23:	88 c8                	mov    al,cl
c0019c25:	e6 22                	out    0x22,al
c0019c27:	e4 23                	in     al,0x23
c0019c29:	88 c2                	mov    dl,al
c0019c2b:	88 c8                	mov    al,cl
c0019c2d:	e6 22                	out    0x22,al
c0019c2f:	88 d0                	mov    al,dl
c0019c31:	83 c8 10             	or     eax,0x10
c0019c34:	e6 23                	out    0x23,al
c0019c36:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019c3d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019c40:	89 d0                	mov    eax,edx
c0019c42:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019c48:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019c4c:	40                   	inc    eax
c0019c4d:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019c53:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019c58:	e9 a1 00 00 00       	jmp    c0019cfe <CPU::detectFeatures()+0x944>
c0019c5d:	83 f8 06             	cmp    eax,0x6
c0019c60:	0f 84 e1 fe ff ff    	je     c0019b47 <CPU::detectFeatures()+0x78d>
c0019c66:	83 f8 04             	cmp    eax,0x4
c0019c69:	0f 84 e9 fe ff ff    	je     c0019b58 <CPU::detectFeatures()+0x79e>
c0019c6f:	83 f8 03             	cmp    eax,0x3
c0019c72:	0f 85 0e 01 00 00    	jne    c0019d86 <CPU::detectFeatures()+0x9cc>
c0019c78:	52                   	push   edx
c0019c79:	52                   	push   edx
c0019c7a:	68 d0 c5 02 c0       	push   0xc002c5d0
c0019c7f:	eb 77                	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019c81:	83 f8 07             	cmp    eax,0x7
c0019c84:	75 09                	jne    c0019c8f <CPU::detectFeatures()+0x8d5>
c0019c86:	50                   	push   eax
c0019c87:	50                   	push   eax
c0019c88:	68 da c5 02 c0       	push   0xc002c5da
c0019c8d:	eb 69                	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019c8f:	83 f8 0a             	cmp    eax,0xa
c0019c92:	75 09                	jne    c0019c9d <CPU::detectFeatures()+0x8e3>
c0019c94:	50                   	push   eax
c0019c95:	50                   	push   eax
c0019c96:	68 e5 c5 02 c0       	push   0xc002c5e5
c0019c9b:	eb 5b                	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019c9d:	83 f8 0b             	cmp    eax,0xb
c0019ca0:	75 09                	jne    c0019cab <CPU::detectFeatures()+0x8f1>
c0019ca2:	50                   	push   eax
c0019ca3:	50                   	push   eax
c0019ca4:	68 ed c5 02 c0       	push   0xc002c5ed
c0019ca9:	eb 4d                	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019cab:	83 f8 08             	cmp    eax,0x8
c0019cae:	75 09                	jne    c0019cb9 <CPU::detectFeatures()+0x8ff>
c0019cb0:	50                   	push   eax
c0019cb1:	50                   	push   eax
c0019cb2:	68 f6 c5 02 c0       	push   0xc002c5f6
c0019cb7:	eb 3f                	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019cb9:	83 f8 09             	cmp    eax,0x9
c0019cbc:	75 09                	jne    c0019cc7 <CPU::detectFeatures()+0x90d>
c0019cbe:	50                   	push   eax
c0019cbf:	50                   	push   eax
c0019cc0:	68 fe c5 02 c0       	push   0xc002c5fe
c0019cc5:	eb 31                	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019cc7:	83 f8 05             	cmp    eax,0x5
c0019cca:	75 09                	jne    c0019cd5 <CPU::detectFeatures()+0x91b>
c0019ccc:	50                   	push   eax
c0019ccd:	50                   	push   eax
c0019cce:	68 06 c6 02 c0       	push   0xc002c606
c0019cd3:	eb 23                	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019cd5:	83 f8 0c             	cmp    eax,0xc
c0019cd8:	75 09                	jne    c0019ce3 <CPU::detectFeatures()+0x929>
c0019cda:	55                   	push   ebp
c0019cdb:	55                   	push   ebp
c0019cdc:	68 14 c6 02 c0       	push   0xc002c614
c0019ce1:	eb 15                	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019ce3:	83 f8 0d             	cmp    eax,0xd
c0019ce6:	75 09                	jne    c0019cf1 <CPU::detectFeatures()+0x937>
c0019ce8:	57                   	push   edi
c0019ce9:	57                   	push   edi
c0019cea:	68 1f c6 02 c0       	push   0xc002c61f
c0019cef:	eb 07                	jmp    c0019cf8 <CPU::detectFeatures()+0x93e>
c0019cf1:	56                   	push   esi
c0019cf2:	56                   	push   esi
c0019cf3:	68 33 c6 02 c0       	push   0xc002c633
c0019cf8:	53                   	push   ebx
c0019cf9:	e8 9e a7 ff ff       	call   c001449c <Device::setName(char const*)>
c0019cfe:	83 c4 10             	add    esp,0x10
c0019d01:	e9 80 00 00 00       	jmp    c0019d86 <CPU::detectFeatures()+0x9cc>
c0019d06:	51                   	push   ecx
c0019d07:	51                   	push   ecx
c0019d08:	68 7f c4 02 c0       	push   0xc002c47f
c0019d0d:	57                   	push   edi
c0019d0e:	e8 15 6b fe ff       	call   c0000828 <strcpy>
c0019d13:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019d1d:	e8 8c 65 fe ff       	call   c00002ae <is486>
c0019d22:	83 c4 10             	add    esp,0x10
c0019d25:	85 c0                	test   eax,eax
c0019d27:	74 2b                	je     c0019d54 <CPU::detectFeatures()+0x99a>
c0019d29:	52                   	push   edx
c0019d2a:	52                   	push   edx
c0019d2b:	68 3f c6 02 c0       	push   0xc002c63f
c0019d30:	53                   	push   ebx
c0019d31:	e8 66 a7 ff ff       	call   c001449c <Device::setName(char const*)>
c0019d36:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019d3d:	0f 20 c0             	mov    eax,cr0
c0019d40:	83 e0 14             	and    eax,0x14
c0019d43:	83 c4 10             	add    esp,0x10
c0019d46:	83 f8 04             	cmp    eax,0x4
c0019d49:	75 1f                	jne    c0019d6a <CPU::detectFeatures()+0x9b0>
c0019d4b:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019d52:	eb 32                	jmp    c0019d86 <CPU::detectFeatures()+0x9cc>
c0019d54:	50                   	push   eax
c0019d55:	50                   	push   eax
c0019d56:	68 4a c6 02 c0       	push   0xc002c64a
c0019d5b:	53                   	push   ebx
c0019d5c:	e8 3b a7 ff ff       	call   c001449c <Device::setName(char const*)>
c0019d61:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019d68:	eb d3                	jmp    c0019d3d <CPU::detectFeatures()+0x983>
c0019d6a:	e8 1a 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019d6f:	83 e0 01             	and    eax,0x1
c0019d72:	8d 14 00             	lea    edx,[eax+eax*1]
c0019d75:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019d7b:	83 e0 fd             	and    eax,0xfffffffd
c0019d7e:	09 d0                	or     eax,edx
c0019d80:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019d86:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019d8d:	83 c4 4c             	add    esp,0x4c
c0019d90:	5b                   	pop    ebx
c0019d91:	5e                   	pop    esi
c0019d92:	5f                   	pop    edi
c0019d93:	5d                   	pop    ebp
c0019d94:	c3                   	ret    
c0019d95:	90                   	nop

c0019d96 <CPU::setupSMEP()>:
c0019d96:	0f 20 e0             	mov    eax,cr4
c0019d99:	0d 00 00 10 00       	or     eax,0x100000
c0019d9e:	0f 22 e0             	mov    cr4,eax
c0019da1:	c3                   	ret    

c0019da2 <CPU::setupUMIP()>:
c0019da2:	0f 20 e0             	mov    eax,cr4
c0019da5:	80 cc 08             	or     ah,0x8
c0019da8:	0f 22 e0             	mov    cr4,eax
c0019dab:	c3                   	ret    

c0019dac <CPU::setupTSC()>:
c0019dac:	0f 20 e0             	mov    eax,cr4
c0019daf:	83 c8 04             	or     eax,0x4
c0019db2:	0f 22 e0             	mov    cr4,eax
c0019db5:	c3                   	ret    

c0019db6 <CPU::setupLargePages()>:
c0019db6:	0f 20 e0             	mov    eax,cr4
c0019db9:	83 c8 10             	or     eax,0x10
c0019dbc:	0f 22 e0             	mov    cr4,eax
c0019dbf:	c3                   	ret    

c0019dc0 <CPU::setupPAT()>:
c0019dc0:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0019dc5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019dcc:	74 2c                	je     c0019dfa <CPU::setupPAT()+0x3a>
c0019dce:	53                   	push   ebx
c0019dcf:	83 ec 10             	sub    esp,0x10
c0019dd2:	68 77 02 00 00       	push   0x277
c0019dd7:	50                   	push   eax
c0019dd8:	e8 89 50 ff ff       	call   c000ee66 <Computer::rdmsr(unsigned int)>
c0019ddd:	83 e2 f8             	and    edx,0xfffffff8
c0019de0:	83 ca 01             	or     edx,0x1
c0019de3:	52                   	push   edx
c0019de4:	50                   	push   eax
c0019de5:	68 77 02 00 00       	push   0x277
c0019dea:	ff 35 08 f1 02 c0    	push   DWORD PTR ds:0xc002f108
c0019df0:	e8 9d 50 ff ff       	call   c000ee92 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019df5:	83 c4 28             	add    esp,0x28
c0019df8:	5b                   	pop    ebx
c0019df9:	c3                   	ret    
c0019dfa:	c3                   	ret    
c0019dfb:	90                   	nop

c0019dfc <CPU::setupMTRR()>:
c0019dfc:	c3                   	ret    
c0019dfd:	90                   	nop

c0019dfe <CPU::setupGlobalPages()>:
c0019dfe:	0f 20 e0             	mov    eax,cr4
c0019e01:	0c 80                	or     al,0x80
c0019e03:	0f 22 e0             	mov    cr4,eax
c0019e06:	c3                   	ret    
c0019e07:	90                   	nop

c0019e08 <CPU::allowUsermodeDataAccess()>:
c0019e08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e0c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019e13:	74 03                	je     c0019e18 <CPU::allowUsermodeDataAccess()+0x10>
c0019e15:	0f 01 cb             	stac   
c0019e18:	c3                   	ret    
c0019e19:	90                   	nop

c0019e1a <CPU::prohibitUsermodeDataAccess()>:
c0019e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e1e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019e25:	74 03                	je     c0019e2a <CPU::prohibitUsermodeDataAccess()+0x10>
c0019e27:	0f 01 ca             	clac   
c0019e2a:	c3                   	ret    
c0019e2b:	90                   	nop

c0019e2c <CPU::setupSMAP()>:
c0019e2c:	0f 20 e0             	mov    eax,cr4
c0019e2f:	0d 00 00 20 00       	or     eax,0x200000
c0019e34:	0f 22 e0             	mov    cr4,eax
c0019e37:	eb e1                	jmp    c0019e1a <CPU::prohibitUsermodeDataAccess()>
c0019e39:	90                   	nop

c0019e3a <CPU::setupFeatures()>:
c0019e3a:	83 ec 0c             	sub    esp,0xc
c0019e3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e41:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019e48:	74 07                	je     c0019e51 <CPU::setupFeatures()+0x17>
c0019e4a:	52                   	push   edx
c0019e4b:	e8 46 ff ff ff       	call   c0019d96 <CPU::setupSMEP()>
c0019e50:	58                   	pop    eax
c0019e51:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019e58:	74 07                	je     c0019e61 <CPU::setupFeatures()+0x27>
c0019e5a:	52                   	push   edx
c0019e5b:	e8 cc ff ff ff       	call   c0019e2c <CPU::setupSMAP()>
c0019e60:	58                   	pop    eax
c0019e61:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019e68:	74 07                	je     c0019e71 <CPU::setupFeatures()+0x37>
c0019e6a:	52                   	push   edx
c0019e6b:	e8 32 ff ff ff       	call   c0019da2 <CPU::setupUMIP()>
c0019e70:	58                   	pop    eax
c0019e71:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019e78:	74 07                	je     c0019e81 <CPU::setupFeatures()+0x47>
c0019e7a:	52                   	push   edx
c0019e7b:	e8 2c ff ff ff       	call   c0019dac <CPU::setupTSC()>
c0019e80:	58                   	pop    eax
c0019e81:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019e88:	74 07                	je     c0019e91 <CPU::setupFeatures()+0x57>
c0019e8a:	52                   	push   edx
c0019e8b:	e8 26 ff ff ff       	call   c0019db6 <CPU::setupLargePages()>
c0019e90:	59                   	pop    ecx
c0019e91:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019e98:	74 07                	je     c0019ea1 <CPU::setupFeatures()+0x67>
c0019e9a:	52                   	push   edx
c0019e9b:	e8 5e ff ff ff       	call   c0019dfe <CPU::setupGlobalPages()>
c0019ea0:	58                   	pop    eax
c0019ea1:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019ea8:	74 0c                	je     c0019eb6 <CPU::setupFeatures()+0x7c>
c0019eaa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019eae:	83 c4 0c             	add    esp,0xc
c0019eb1:	e9 0a ff ff ff       	jmp    c0019dc0 <CPU::setupPAT()>
c0019eb6:	83 c4 0c             	add    esp,0xc
c0019eb9:	c3                   	ret    

c0019eba <CPU::open(int, int, void*)>:
c0019eba:	57                   	push   edi
c0019ebb:	56                   	push   esi
c0019ebc:	53                   	push   ebx
c0019ebd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ec1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ec5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019ecb:	83 ec 0c             	sub    esp,0xc
c0019ece:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019ed4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019eda:	50                   	push   eax
c0019edb:	e8 72 52 ff ff       	call   c000f152 <GDT::setup()>
c0019ee0:	83 c4 0c             	add    esp,0xc
c0019ee3:	6a 00                	push   0x0
c0019ee5:	68 ef be ad de       	push   0xdeadbeef
c0019eea:	57                   	push   edi
c0019eeb:	e8 0a 75 ff ff       	call   c00113fa <TSS::setup(unsigned long, unsigned long)>
c0019ef0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ef3:	e8 e2 74 ff ff       	call   c00113da <TSS::flush()>
c0019ef8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019efe:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f01:	e8 b0 54 ff ff       	call   c000f3b6 <IDT::setup()>
c0019f06:	b8 00 04 00 00       	mov    eax,0x400
c0019f0b:	0f 23 f8             	mov    db7,eax
c0019f0e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019f18:	e8 0f 60 ff ff       	call   c000ff2c <Phys::allocatePage()>
c0019f1d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019f23:	89 30                	mov    DWORD PTR [eax],esi
c0019f25:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f2b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019f2e:	58                   	pop    eax
c0019f2f:	5a                   	pop    edx
c0019f30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f36:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f3a:	e8 5b 86 ff ff       	call   c001259a <VAS::setCPUSpecific(unsigned long)>
c0019f3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f42:	e8 73 f4 ff ff       	call   c00193ba <CPU::detectFeatures()>
c0019f47:	e8 a7 b9 ff ff       	call   c00158f3 <setupInterruptController()>
c0019f4c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019f52:	a1 20 f1 02 c0       	mov    eax,ds:0xc002f120
c0019f57:	83 e0 10             	and    eax,0x10
c0019f5a:	83 f8 01             	cmp    eax,0x1
c0019f5d:	19 c0                	sbb    eax,eax
c0019f5f:	83 e0 46             	and    eax,0x46
c0019f62:	83 c0 1e             	add    eax,0x1e
c0019f65:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f68:	e8 de cf ff ff       	call   c0016f4b <setupTimer(int)>
c0019f6d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019f73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f76:	e8 bf fe ff ff       	call   c0019e3a <CPU::setupFeatures()>
c0019f7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f7e:	e8 bb f1 ff ff       	call   c001913e <CPU::displayFeatures()>
c0019f83:	83 c4 10             	add    esp,0x10
c0019f86:	31 c0                	xor    eax,eax
c0019f88:	5b                   	pop    ebx
c0019f89:	5e                   	pop    esi
c0019f8a:	5f                   	pop    edi
c0019f8b:	c3                   	ret    

c0019f8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019f8c:	57                   	push   edi
c0019f8d:	56                   	push   esi
c0019f8e:	53                   	push   ebx
c0019f8f:	51                   	push   ecx
c0019f90:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f94:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019f97:	0f 02 c0             	lar    eax,ax
c0019f9a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019f9d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019fa1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019fa4:	88 ca                	mov    dl,cl
c0019fa6:	c0 ea 06             	shr    dl,0x6
c0019fa9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019fad:	89 ca                	mov    edx,ecx
c0019faf:	66 c1 ea 03          	shr    dx,0x3
c0019fb3:	83 e2 07             	and    edx,0x7
c0019fb6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019fbb:	88 17                	mov    BYTE PTR [edi],dl
c0019fbd:	0f 84 a6 01 00 00    	je     c001a169 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019fc3:	83 e1 07             	and    ecx,0x7
c0019fc6:	80 f9 04             	cmp    cl,0x4
c0019fc9:	0f 84 98 00 00 00    	je     c001a067 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019fcf:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019fd4:	0f 95 c0             	setne  al
c0019fd7:	80 f9 05             	cmp    cl,0x5
c0019fda:	0f 95 c2             	setne  dl
c0019fdd:	08 c2                	or     dl,al
c0019fdf:	74 79                	je     c001a05a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019fe1:	84 c9                	test   cl,cl
c0019fe3:	75 05                	jne    c0019fea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019fe5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019fe8:	eb 3c                	jmp    c001a026 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fea:	80 f9 01             	cmp    cl,0x1
c0019fed:	75 05                	jne    c0019ff4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019fef:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ff2:	eb 32                	jmp    c001a026 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ff4:	80 f9 02             	cmp    cl,0x2
c0019ff7:	75 05                	jne    c0019ffe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019ff9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ffc:	eb 28                	jmp    c001a026 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ffe:	31 c0                	xor    eax,eax
c001a000:	80 f9 03             	cmp    cl,0x3
c001a003:	75 05                	jne    c001a00a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001a005:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a008:	eb 1c                	jmp    c001a026 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a00a:	80 f9 05             	cmp    cl,0x5
c001a00d:	75 05                	jne    c001a014 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001a00f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a012:	eb 12                	jmp    c001a026 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a014:	80 f9 06             	cmp    cl,0x6
c001a017:	75 05                	jne    c001a01e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001a019:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a01c:	eb 08                	jmp    c001a026 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a01e:	80 f9 07             	cmp    cl,0x7
c001a021:	75 03                	jne    c001a026 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a023:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a026:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a02b:	75 10                	jne    c001a03d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001a02d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001a031:	b9 03 00 00 00       	mov    ecx,0x3
c001a036:	01 d0                	add    eax,edx
c001a038:	e9 37 01 00 00       	jmp    c001a174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a03d:	b9 02 00 00 00       	mov    ecx,0x2
c001a042:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a047:	0f 85 27 01 00 00    	jne    c001a174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a04d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a050:	b9 06 00 00 00       	mov    ecx,0x6
c001a055:	e9 1a 01 00 00       	jmp    c001a174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a05a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a05d:	b9 06 00 00 00       	mov    ecx,0x6
c001a062:	e9 0f 01 00 00       	jmp    c001a176 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a067:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a06a:	88 ca                	mov    dl,cl
c001a06c:	c0 ea 06             	shr    dl,0x6
c001a06f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a073:	89 ca                	mov    edx,ecx
c001a075:	66 c1 ea 03          	shr    dx,0x3
c001a079:	83 e2 07             	and    edx,0x7
c001a07c:	80 e1 07             	and    cl,0x7
c001a07f:	75 05                	jne    c001a086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a081:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a084:	eb 4c                	jmp    c001a0d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a086:	80 f9 01             	cmp    cl,0x1
c001a089:	75 05                	jne    c001a090 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a08b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a08e:	eb 42                	jmp    c001a0d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a090:	80 f9 02             	cmp    cl,0x2
c001a093:	75 05                	jne    c001a09a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a095:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a098:	eb 38                	jmp    c001a0d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a09a:	80 f9 03             	cmp    cl,0x3
c001a09d:	75 05                	jne    c001a0a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a09f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a0a2:	eb 2e                	jmp    c001a0d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0a4:	80 f9 04             	cmp    cl,0x4
c001a0a7:	75 12                	jne    c001a0bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a0a9:	f6 c4 60             	test   ah,0x60
c001a0ac:	75 08                	jne    c001a0b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a0ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a0b1:	8d 78 14             	lea    edi,[eax+0x14]
c001a0b4:	eb 1c                	jmp    c001a0d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0b6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a0b9:	eb 17                	jmp    c001a0d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0bb:	80 f9 05             	cmp    cl,0x5
c001a0be:	75 05                	jne    c001a0c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a0c0:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a0c3:	eb 0d                	jmp    c001a0d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0c5:	80 f9 06             	cmp    cl,0x6
c001a0c8:	75 05                	jne    c001a0cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a0ca:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a0cd:	eb 03                	jmp    c001a0d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0cf:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a0d2:	84 d2                	test   dl,dl
c001a0d4:	75 05                	jne    c001a0db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a0d6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a0d9:	eb 3c                	jmp    c001a117 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0db:	80 fa 01             	cmp    dl,0x1
c001a0de:	75 05                	jne    c001a0e5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a0e0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a0e3:	eb 32                	jmp    c001a117 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0e5:	80 fa 02             	cmp    dl,0x2
c001a0e8:	75 05                	jne    c001a0ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a0ea:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a0ed:	eb 28                	jmp    c001a117 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0ef:	80 fa 03             	cmp    dl,0x3
c001a0f2:	75 05                	jne    c001a0f9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a0f4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a0f7:	eb 1e                	jmp    c001a117 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0f9:	31 c0                	xor    eax,eax
c001a0fb:	80 fa 04             	cmp    dl,0x4
c001a0fe:	74 17                	je     c001a117 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a100:	80 fa 05             	cmp    dl,0x5
c001a103:	75 05                	jne    c001a10a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a105:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a108:	eb 0d                	jmp    c001a117 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a10a:	80 fa 06             	cmp    dl,0x6
c001a10d:	75 05                	jne    c001a114 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a10f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a112:	eb 03                	jmp    c001a117 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a114:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a117:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a11c:	0f 94 c2             	sete   dl
c001a11f:	80 f9 05             	cmp    cl,0x5
c001a122:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a126:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a12b:	d3 e0                	shl    eax,cl
c001a12d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a131:	74 0a                	je     c001a13d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a133:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a136:	b9 07 00 00 00       	mov    ecx,0x7
c001a13b:	eb 37                	jmp    c001a174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a13d:	01 f8                	add    eax,edi
c001a13f:	b9 03 00 00 00       	mov    ecx,0x3
c001a144:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a149:	74 2b                	je     c001a176 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a14b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a150:	75 0d                	jne    c001a15f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a152:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a156:	01 c8                	add    eax,ecx
c001a158:	b9 04 00 00 00       	mov    ecx,0x4
c001a15d:	eb 17                	jmp    c001a176 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a15f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a162:	b9 07 00 00 00       	mov    ecx,0x7
c001a167:	eb 0d                	jmp    c001a176 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a169:	b9 02 00 00 00       	mov    ecx,0x2
c001a16e:	b2 01                	mov    dl,0x1
c001a170:	31 c0                	xor    eax,eax
c001a172:	eb 02                	jmp    c001a176 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a174:	31 d2                	xor    edx,edx
c001a176:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a17a:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a17c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a180:	88 11                	mov    BYTE PTR [ecx],dl
c001a182:	5a                   	pop    edx
c001a183:	5b                   	pop    ebx
c001a184:	5e                   	pop    esi
c001a185:	5f                   	pop    edi
c001a186:	c3                   	ret    

c001a187 <Krnl::smpEntry()>:
c001a187:	eb fe                	jmp    c001a187 <Krnl::smpEntry()>

c001a189 <Krnl::startCPU(int)>:
c001a189:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c001a18e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a195:	0f 84 36 01 00 00    	je     c001a2d1 <Krnl::startCPU(int)+0x148>
c001a19b:	53                   	push   ebx
c001a19c:	83 ec 10             	sub    esp,0x10
c001a19f:	fa                   	cli    
c001a1a0:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001a1a6:	6a 1b                	push   0x1b
c001a1a8:	ff 35 08 f1 02 c0    	push   DWORD PTR ds:0xc002f108
c001a1ae:	e8 b3 4c ff ff       	call   c000ee66 <Computer::rdmsr(unsigned int)>
c001a1b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a1b8:	89 c3                	mov    ebx,eax
c001a1ba:	58                   	pop    eax
c001a1bb:	5a                   	pop    edx
c001a1bc:	53                   	push   ebx
c001a1bd:	68 84 c6 02 c0       	push   0xc002c684
c001a1c2:	e8 c8 8c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001a1c7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1d5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1df:	c1 e0 18             	shl    eax,0x18
c001a1e2:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a1e8:	83 c4 10             	add    esp,0x10
c001a1eb:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a1f1:	09 c2                	or     edx,eax
c001a1f3:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a1f9:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a1ff:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a205:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a20b:	80 cd c5             	or     ch,0xc5
c001a20e:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a214:	f3 90                	pause  
c001a216:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a218:	0f ba e1 0c          	bt     ecx,0xc
c001a21c:	72 f6                	jb     c001a214 <Krnl::startCPU(int)+0x8b>
c001a21e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a224:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a22a:	09 c1                	or     ecx,eax
c001a22c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a232:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a238:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a23e:	80 cd 85             	or     ch,0x85
c001a241:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a247:	f3 90                	pause  
c001a249:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a24b:	0f ba e1 0c          	bt     ecx,0xc
c001a24f:	72 f6                	jb     c001a247 <Krnl::startCPU(int)+0xbe>
c001a251:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a25b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a261:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a267:	09 c1                	or     ecx,eax
c001a269:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a26f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a275:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a27b:	81 c9 02 06 00 00    	or     ecx,0x602
c001a281:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a287:	f3 90                	pause  
c001a289:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a28b:	0f ba e1 0c          	bt     ecx,0xc
c001a28f:	72 f6                	jb     c001a287 <Krnl::startCPU(int)+0xfe>
c001a291:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a29b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a2a1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a2a7:	09 c8                	or     eax,ecx
c001a2a9:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a2af:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a2b5:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a2ba:	0d 02 06 00 00       	or     eax,0x602
c001a2bf:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a2c5:	f3 90                	pause  
c001a2c7:	8b 02                	mov    eax,DWORD PTR [edx]
c001a2c9:	0f ba e0 0c          	bt     eax,0xc
c001a2cd:	72 f6                	jb     c001a2c5 <Krnl::startCPU(int)+0x13c>
c001a2cf:	eb fe                	jmp    c001a2cf <Krnl::startCPU(int)+0x146>
c001a2d1:	c3                   	ret    

c001a2d2 <Krnl::startCPUs()>:
c001a2d2:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c001a2d7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a2dd:	88 c2                	mov    dl,al
c001a2df:	83 e2 0a             	and    edx,0xa
c001a2e2:	80 fa 0a             	cmp    dl,0xa
c001a2e5:	75 09                	jne    c001a2f0 <Krnl::startCPUs()+0x1e>
c001a2e7:	a8 01                	test   al,0x1
c001a2e9:	74 05                	je     c001a2f0 <Krnl::startCPUs()+0x1e>
c001a2eb:	e9 ab 5e fe ff       	jmp    c000019b <prepareTramp>
c001a2f0:	c3                   	ret    
c001a2f1:	90                   	nop

c001a2f2 <EnvVarContainer::getEnv(char const*)>:
c001a2f2:	57                   	push   edi
c001a2f3:	56                   	push   esi
c001a2f4:	53                   	push   ebx
c001a2f5:	31 db                	xor    ebx,ebx
c001a2f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a2fb:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a2fd:	7e 2b                	jle    c001a32a <EnvVarContainer::getEnv(char const*)+0x38>
c001a2ff:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a306:	50                   	push   eax
c001a307:	50                   	push   eax
c001a308:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a30b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a30e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a312:	e8 9d 65 fe ff       	call   c00008b4 <strcmp>
c001a317:	83 c4 10             	add    esp,0x10
c001a31a:	85 c0                	test   eax,eax
c001a31c:	75 09                	jne    c001a327 <EnvVarContainer::getEnv(char const*)+0x35>
c001a31e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a321:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a325:	eb 05                	jmp    c001a32c <EnvVarContainer::getEnv(char const*)+0x3a>
c001a327:	43                   	inc    ebx
c001a328:	eb d1                	jmp    c001a2fb <EnvVarContainer::getEnv(char const*)+0x9>
c001a32a:	31 c0                	xor    eax,eax
c001a32c:	5b                   	pop    ebx
c001a32d:	5e                   	pop    esi
c001a32e:	5f                   	pop    edi
c001a32f:	c3                   	ret    

c001a330 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a330:	55                   	push   ebp
c001a331:	57                   	push   edi
c001a332:	56                   	push   esi
c001a333:	53                   	push   ebx
c001a334:	83 ec 38             	sub    esp,0x38
c001a337:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c001a33b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001a33f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001a343:	55                   	push   ebp
c001a344:	e8 3f 64 fe ff       	call   c0000788 <strlen>
c001a349:	40                   	inc    eax
c001a34a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a34d:	e8 6e 55 ff ff       	call   c000f8c0 <malloc>
c001a352:	89 34 24             	mov    DWORD PTR [esp],esi
c001a355:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a359:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a35d:	e8 26 64 fe ff       	call   c0000788 <strlen>
c001a362:	40                   	inc    eax
c001a363:	89 04 24             	mov    DWORD PTR [esp],eax
c001a366:	e8 55 55 ff ff       	call   c000f8c0 <malloc>
c001a36b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a36e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a372:	89 c7                	mov    edi,eax
c001a374:	e8 0f 64 fe ff       	call   c0000788 <strlen>
c001a379:	83 c4 0c             	add    esp,0xc
c001a37c:	40                   	inc    eax
c001a37d:	50                   	push   eax
c001a37e:	6a 00                	push   0x0
c001a380:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a384:	51                   	push   ecx
c001a385:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001a389:	e8 de 63 fe ff       	call   c000076c <memset>
c001a38e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a391:	e8 f2 63 fe ff       	call   c0000788 <strlen>
c001a396:	31 d2                	xor    edx,edx
c001a398:	40                   	inc    eax
c001a399:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a39d:	83 c4 10             	add    esp,0x10
c001a3a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a3a4:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001a3a8:	76 0a                	jbe    c001a3b4 <EnvVarContainer::setEnv(char const*, char const*)+0x84>
c001a3aa:	8a 44 15 00          	mov    al,BYTE PTR [ebp+edx*1+0x0]
c001a3ae:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c001a3b1:	42                   	inc    edx
c001a3b2:	eb f0                	jmp    c001a3a4 <EnvVarContainer::setEnv(char const*, char const*)+0x74>
c001a3b4:	83 ec 0c             	sub    esp,0xc
c001a3b7:	56                   	push   esi
c001a3b8:	e8 cb 63 fe ff       	call   c0000788 <strlen>
c001a3bd:	83 c4 0c             	add    esp,0xc
c001a3c0:	40                   	inc    eax
c001a3c1:	50                   	push   eax
c001a3c2:	6a 00                	push   0x0
c001a3c4:	57                   	push   edi
c001a3c5:	e8 a2 63 fe ff       	call   c000076c <memset>
c001a3ca:	89 34 24             	mov    DWORD PTR [esp],esi
c001a3cd:	e8 b6 63 fe ff       	call   c0000788 <strlen>
c001a3d2:	83 c4 10             	add    esp,0x10
c001a3d5:	40                   	inc    eax
c001a3d6:	31 d2                	xor    edx,edx
c001a3d8:	39 d0                	cmp    eax,edx
c001a3da:	76 09                	jbe    c001a3e5 <EnvVarContainer::setEnv(char const*, char const*)+0xb5>
c001a3dc:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c001a3df:	88 0c 17             	mov    BYTE PTR [edi+edx*1],cl
c001a3e2:	42                   	inc    edx
c001a3e3:	eb f3                	jmp    c001a3d8 <EnvVarContainer::setEnv(char const*, char const*)+0xa8>
c001a3e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a3e7:	40                   	inc    eax
c001a3e8:	89 03                	mov    DWORD PTR [ebx],eax
c001a3ea:	52                   	push   edx
c001a3eb:	c1 e0 03             	shl    eax,0x3
c001a3ee:	52                   	push   edx
c001a3ef:	50                   	push   eax
c001a3f0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a3f3:	e8 b4 54 ff ff       	call   c000f8ac <realloc>
c001a3f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001a3fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a3fd:	83 c4 10             	add    esp,0x10
c001a400:	31 d2                	xor    edx,edx
c001a402:	8d 44 c8 f8          	lea    eax,[eax+ecx*8-0x8]
c001a406:	8a 5c 14 18          	mov    bl,BYTE PTR [esp+edx*1+0x18]
c001a40a:	88 1c 10             	mov    BYTE PTR [eax+edx*1],bl
c001a40d:	42                   	inc    edx
c001a40e:	83 fa 08             	cmp    edx,0x8
c001a411:	75 f3                	jne    c001a406 <EnvVarContainer::setEnv(char const*, char const*)+0xd6>
c001a413:	83 c4 2c             	add    esp,0x2c
c001a416:	5b                   	pop    ebx
c001a417:	5e                   	pop    esi
c001a418:	5f                   	pop    edi
c001a419:	5d                   	pop    ebp
c001a41a:	c3                   	ret    
c001a41b:	90                   	nop

c001a41c <EnvVarContainer::deleteEnv(char const*)>:
c001a41c:	c3                   	ret    
c001a41d:	90                   	nop

c001a41e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a41e:	55                   	push   ebp
c001a41f:	57                   	push   edi
c001a420:	56                   	push   esi
c001a421:	53                   	push   ebx
c001a422:	81 ec 38 01 00 00    	sub    esp,0x138
c001a428:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a42f:	8b bc 24 54 01 00 00 	mov    edi,DWORD PTR [esp+0x154]
c001a436:	68 14 01 00 00       	push   0x114
c001a43b:	e8 80 54 ff ff       	call   c000f8c0 <malloc>
c001a440:	83 c4 0c             	add    esp,0xc
c001a443:	89 c6                	mov    esi,eax
c001a445:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a448:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a44f:	50                   	push   eax
c001a450:	e8 99 8f ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001a455:	89 34 24             	mov    DWORD PTR [esp],esi
c001a458:	e8 63 92 ff ff       	call   c00136c0 <File::exists()>
c001a45d:	83 c4 10             	add    esp,0x10
c001a460:	84 c0                	test   al,al
c001a462:	75 31                	jne    c001a495 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a464:	51                   	push   ecx
c001a465:	51                   	push   ecx
c001a466:	6a 12                	push   0x12
c001a468:	56                   	push   esi
c001a469:	e8 e4 8f ff ff       	call   c0013452 <File::open(FileOpenMode)>
c001a46e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a470:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c001a473:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a476:	e8 0d 63 fe ff       	call   c0000788 <strlen>
c001a47b:	5a                   	pop    edx
c001a47c:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a480:	52                   	push   edx
c001a481:	31 d2                	xor    edx,edx
c001a483:	57                   	push   edi
c001a484:	52                   	push   edx
c001a485:	50                   	push   eax
c001a486:	56                   	push   esi
c001a487:	ff d5                	call   ebp
c001a489:	83 c4 14             	add    esp,0x14
c001a48c:	56                   	push   esi
c001a48d:	e8 1e 90 ff ff       	call   c00134b0 <File::close()>
c001a492:	83 c4 10             	add    esp,0x10
c001a495:	31 ff                	xor    edi,edi
c001a497:	50                   	push   eax
c001a498:	31 ed                	xor    ebp,ebp
c001a49a:	68 00 01 00 00       	push   0x100
c001a49f:	6a 00                	push   0x0
c001a4a1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a4a5:	50                   	push   eax
c001a4a6:	e8 c1 62 fe ff       	call   c000076c <memset>
c001a4ab:	58                   	pop    eax
c001a4ac:	5a                   	pop    edx
c001a4ad:	6a 01                	push   0x1
c001a4af:	56                   	push   esi
c001a4b0:	e8 9d 8f ff ff       	call   c0013452 <File::open(FileOpenMode)>
c001a4b5:	83 c4 10             	add    esp,0x10
c001a4b8:	83 ec 0c             	sub    esp,0xc
c001a4bb:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4bd:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a4c1:	52                   	push   edx
c001a4c2:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a4c6:	52                   	push   edx
c001a4c7:	6a 00                	push   0x0
c001a4c9:	6a 01                	push   0x1
c001a4cb:	56                   	push   esi
c001a4cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a4cf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a4d3:	83 c4 20             	add    esp,0x20
c001a4d6:	3c 0d                	cmp    al,0xd
c001a4d8:	0f 84 24 01 00 00    	je     c001a602 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e4>
c001a4de:	85 ff                	test   edi,edi
c001a4e0:	0f 84 0f 01 00 00    	je     c001a5f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d7>
c001a4e6:	3c 0a                	cmp    al,0xa
c001a4e8:	74 13                	je     c001a4fd <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a4ea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a4ef:	74 0c                	je     c001a4fd <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a4f1:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a4f7:	0f 8e f8 00 00 00    	jle    c001a5f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d7>
c001a4fd:	83 ec 0c             	sub    esp,0xc
c001a500:	8d 4f 01             	lea    ecx,[edi+0x1]
c001a503:	29 fd                	sub    ebp,edi
c001a505:	51                   	push   ecx
c001a506:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001a50a:	e8 b1 53 ff ff       	call   c000f8c0 <malloc>
c001a50f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a513:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a517:	8d 45 04             	lea    eax,[ebp+0x4]
c001a51a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a51e:	58                   	pop    eax
c001a51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a523:	e8 98 53 ff ff       	call   c000f8c0 <malloc>
c001a528:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a52c:	89 c5                	mov    ebp,eax
c001a52e:	83 c4 0c             	add    esp,0xc
c001a531:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a535:	51                   	push   ecx
c001a536:	6a 00                	push   0x0
c001a538:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a53c:	e8 2b 62 fe ff       	call   c000076c <memset>
c001a541:	83 c4 10             	add    esp,0x10
c001a544:	31 c0                	xor    eax,eax
c001a546:	8a 4c 04 20          	mov    cl,BYTE PTR [esp+eax*1+0x20]
c001a54a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a54e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a551:	40                   	inc    eax
c001a552:	39 c7                	cmp    edi,eax
c001a554:	75 f0                	jne    c001a546 <EnvVarContainer::loadFrom(char const*, char const*)+0x128>
c001a556:	50                   	push   eax
c001a557:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001a55b:	6a 00                	push   0x0
c001a55d:	55                   	push   ebp
c001a55e:	e8 09 62 fe ff       	call   c000076c <memset>
c001a563:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a567:	01 c7                	add    edi,eax
c001a569:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a56c:	e8 17 62 fe ff       	call   c0000788 <strlen>
c001a571:	89 ea                	mov    edx,ebp
c001a573:	01 e8                	add    eax,ebp
c001a575:	83 c4 10             	add    esp,0x10
c001a578:	39 c2                	cmp    edx,eax
c001a57a:	74 09                	je     c001a585 <EnvVarContainer::loadFrom(char const*, char const*)+0x167>
c001a57c:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a57e:	42                   	inc    edx
c001a57f:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
c001a582:	47                   	inc    edi
c001a583:	eb f3                	jmp    c001a578 <EnvVarContainer::loadFrom(char const*, char const*)+0x15a>
c001a585:	57                   	push   edi
c001a586:	57                   	push   edi
c001a587:	55                   	push   ebp
c001a588:	68 95 c6 02 c0       	push   0xc002c695
c001a58d:	e8 fd 88 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001a592:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a594:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a597:	40                   	inc    eax
c001a598:	83 c4 10             	add    esp,0x10
c001a59b:	89 03                	mov    DWORD PTR [ebx],eax
c001a59d:	85 d2                	test   edx,edx
c001a59f:	75 0c                	jne    c001a5ad <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a5a1:	83 ec 0c             	sub    esp,0xc
c001a5a4:	6a 08                	push   0x8
c001a5a6:	e8 15 53 ff ff       	call   c000f8c0 <malloc>
c001a5ab:	eb 0c                	jmp    c001a5b9 <EnvVarContainer::loadFrom(char const*, char const*)+0x19b>
c001a5ad:	c1 e0 03             	shl    eax,0x3
c001a5b0:	51                   	push   ecx
c001a5b1:	51                   	push   ecx
c001a5b2:	50                   	push   eax
c001a5b3:	52                   	push   edx
c001a5b4:	e8 f3 52 ff ff       	call   c000f8ac <realloc>
c001a5b9:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a5bc:	83 c4 10             	add    esp,0x10
c001a5bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5c1:	8d 14 c5 f8 ff ff ff 	lea    edx,[eax*8-0x8]
c001a5c8:	31 c0                	xor    eax,eax
c001a5ca:	03 53 04             	add    edx,DWORD PTR [ebx+0x4]
c001a5cd:	8a 4c 04 18          	mov    cl,BYTE PTR [esp+eax*1+0x18]
c001a5d1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a5d4:	40                   	inc    eax
c001a5d5:	83 f8 08             	cmp    eax,0x8
c001a5d8:	75 f3                	jne    c001a5cd <EnvVarContainer::loadFrom(char const*, char const*)+0x1af>
c001a5da:	31 ff                	xor    edi,edi
c001a5dc:	52                   	push   edx
c001a5dd:	31 ed                	xor    ebp,ebp
c001a5df:	68 00 01 00 00       	push   0x100
c001a5e4:	6a 00                	push   0x0
c001a5e6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a5ea:	50                   	push   eax
c001a5eb:	e8 7c 61 fe ff       	call   c000076c <memset>
c001a5f0:	83 c4 10             	add    esp,0x10
c001a5f3:	eb 0d                	jmp    c001a602 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e4>
c001a5f5:	3c 3d                	cmp    al,0x3d
c001a5f7:	74 07                	je     c001a600 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001a5f9:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a5fd:	45                   	inc    ebp
c001a5fe:	eb 02                	jmp    c001a602 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e4>
c001a600:	89 ef                	mov    edi,ebp
c001a602:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a607:	0f 85 ab fe ff ff    	jne    c001a4b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a60d:	50                   	push   eax
c001a60e:	50                   	push   eax
c001a60f:	ff 33                	push   DWORD PTR [ebx]
c001a611:	68 a3 c6 02 c0       	push   0xc002c6a3
c001a616:	e8 74 88 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001a61b:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a621:	5b                   	pop    ebx
c001a622:	5e                   	pop    esi
c001a623:	5f                   	pop    edi
c001a624:	5d                   	pop    ebp
c001a625:	c3                   	ret    

c001a626 <EnvVarContainer::__loadSystem()>:
c001a626:	83 ec 10             	sub    esp,0x10
c001a629:	68 40 e6 02 c0       	push   0xc002e640
c001a62e:	68 ce c6 02 c0       	push   0xc002c6ce
c001a633:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a637:	e8 e2 fd ff ff       	call   c001a41e <EnvVarContainer::loadFrom(char const*, char const*)>
c001a63c:	83 c4 1c             	add    esp,0x1c
c001a63f:	c3                   	ret    

c001a640 <EnvVarContainer::__loadUser()>:
c001a640:	c3                   	ret    
c001a641:	90                   	nop

c001a642 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a642:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a646:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a654:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a65b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a662:	90                   	nop
c001a663:	c3                   	ret    

c001a664 <EnvVarContainer::~EnvVarContainer()>:
c001a664:	83 ec 0c             	sub    esp,0xc
c001a667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a66b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a66e:	85 c0                	test   eax,eax
c001a670:	74 1d                	je     c001a68f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a676:	8b 00                	mov    eax,DWORD PTR [eax]
c001a678:	85 c0                	test   eax,eax
c001a67a:	74 13                	je     c001a68f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a680:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a683:	83 ec 0c             	sub    esp,0xc
c001a686:	50                   	push   eax
c001a687:	e8 44 52 ff ff       	call   c000f8d0 <free>
c001a68c:	83 c4 10             	add    esp,0x10
c001a68f:	90                   	nop
c001a690:	83 c4 0c             	add    esp,0xc
c001a693:	c3                   	ret    

c001a694 <Krnl::getEnv(Process*, char const*)>:
c001a694:	53                   	push   ebx
c001a695:	83 ec 08             	sub    esp,0x8
c001a698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a69c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6a0:	39 05 70 26 03 c0    	cmp    DWORD PTR ds:0xc0032670,eax
c001a6a6:	74 04                	je     c001a6ac <Krnl::getEnv(Process*, char const*)+0x18>
c001a6a8:	85 c0                	test   eax,eax
c001a6aa:	75 0b                	jne    c001a6b7 <Krnl::getEnv(Process*, char const*)+0x23>
c001a6ac:	a1 54 1c 03 c0       	mov    eax,ds:0xc0031c54
c001a6b1:	85 c0                	test   eax,eax
c001a6b3:	75 19                	jne    c001a6ce <Krnl::getEnv(Process*, char const*)+0x3a>
c001a6b5:	eb 27                	jmp    c001a6de <Krnl::getEnv(Process*, char const*)+0x4a>
c001a6b7:	52                   	push   edx
c001a6b8:	52                   	push   edx
c001a6b9:	53                   	push   ebx
c001a6ba:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a6c0:	e8 2d fc ff ff       	call   c001a2f2 <EnvVarContainer::getEnv(char const*)>
c001a6c5:	83 c4 10             	add    esp,0x10
c001a6c8:	85 c0                	test   eax,eax
c001a6ca:	75 28                	jne    c001a6f4 <Krnl::getEnv(Process*, char const*)+0x60>
c001a6cc:	eb de                	jmp    c001a6ac <Krnl::getEnv(Process*, char const*)+0x18>
c001a6ce:	52                   	push   edx
c001a6cf:	52                   	push   edx
c001a6d0:	53                   	push   ebx
c001a6d1:	50                   	push   eax
c001a6d2:	e8 1b fc ff ff       	call   c001a2f2 <EnvVarContainer::getEnv(char const*)>
c001a6d7:	83 c4 10             	add    esp,0x10
c001a6da:	85 c0                	test   eax,eax
c001a6dc:	75 16                	jne    c001a6f4 <Krnl::getEnv(Process*, char const*)+0x60>
c001a6de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a6e2:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a6e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a6eb:	83 c4 08             	add    esp,0x8
c001a6ee:	5b                   	pop    ebx
c001a6ef:	e9 fe fb ff ff       	jmp    c001a2f2 <EnvVarContainer::getEnv(char const*)>
c001a6f4:	83 c4 08             	add    esp,0x8
c001a6f7:	5b                   	pop    ebx
c001a6f8:	c3                   	ret    

c001a6f9 <Krnl::setEnvSystem(char const*, char const*)>:
c001a6f9:	83 ec 10             	sub    esp,0x10
c001a6fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a700:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a704:	ff 35 58 1c 03 c0    	push   DWORD PTR ds:0xc0031c58
c001a70a:	e8 21 fc ff ff       	call   c001a330 <EnvVarContainer::setEnv(char const*, char const*)>
c001a70f:	83 c4 1c             	add    esp,0x1c
c001a712:	c3                   	ret    

c001a713 <Krnl::setEnvUser(char const*, char const*)>:
c001a713:	a1 54 1c 03 c0       	mov    eax,ds:0xc0031c54
c001a718:	85 c0                	test   eax,eax
c001a71a:	74 15                	je     c001a731 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a71c:	83 ec 10             	sub    esp,0x10
c001a71f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a723:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a727:	50                   	push   eax
c001a728:	e8 03 fc ff ff       	call   c001a330 <EnvVarContainer::setEnv(char const*, char const*)>
c001a72d:	83 c4 1c             	add    esp,0x1c
c001a730:	c3                   	ret    
c001a731:	c3                   	ret    

c001a732 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a736:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a73c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a740:	e9 eb fb ff ff       	jmp    c001a330 <EnvVarContainer::setEnv(char const*, char const*)>

c001a745 <Krnl::deleteEnvSystem(char const*)>:
c001a745:	c3                   	ret    

c001a746 <Krnl::deleteEnvUser(char const*)>:
c001a746:	c3                   	ret    

c001a747 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a747:	c3                   	ret    

c001a748 <Krnl::newProcessEnv(Process*)>:
c001a748:	83 ec 28             	sub    esp,0x28
c001a74b:	6a 0c                	push   0xc
c001a74d:	e8 6e 51 ff ff       	call   c000f8c0 <malloc>
c001a752:	5a                   	pop    edx
c001a753:	59                   	pop    ecx
c001a754:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a758:	50                   	push   eax
c001a759:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a75d:	e8 e0 fe ff ff       	call   c001a642 <EnvVarContainer::EnvVarContainer(Process*)>
c001a762:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a766:	83 c4 2c             	add    esp,0x2c
c001a769:	c3                   	ret    

c001a76a <Krnl::copyProcessEnv(Process*, Process*)>:
c001a76a:	56                   	push   esi
c001a76b:	53                   	push   ebx
c001a76c:	83 ec 10             	sub    esp,0x10
c001a76f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a773:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a779:	6a 0c                	push   0xc
c001a77b:	e8 40 51 ff ff       	call   c000f8c0 <malloc>
c001a780:	59                   	pop    ecx
c001a781:	89 c3                	mov    ebx,eax
c001a783:	58                   	pop    eax
c001a784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a788:	53                   	push   ebx
c001a789:	e8 b4 fe ff ff       	call   c001a642 <EnvVarContainer::EnvVarContainer(Process*)>
c001a78e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a790:	89 03                	mov    DWORD PTR [ebx],eax
c001a792:	c1 e0 03             	shl    eax,0x3
c001a795:	89 04 24             	mov    DWORD PTR [esp],eax
c001a798:	e8 23 51 ff ff       	call   c000f8c0 <malloc>
c001a79d:	83 c4 10             	add    esp,0x10
c001a7a0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a7a3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a7a6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a7a8:	8d 34 ca             	lea    esi,[edx+ecx*8]
c001a7ab:	39 f2                	cmp    edx,esi
c001a7ad:	74 09                	je     c001a7b8 <Krnl::copyProcessEnv(Process*, Process*)+0x4e>
c001a7af:	8a 0a                	mov    cl,BYTE PTR [edx]
c001a7b1:	40                   	inc    eax
c001a7b2:	88 48 ff             	mov    BYTE PTR [eax-0x1],cl
c001a7b5:	42                   	inc    edx
c001a7b6:	eb f3                	jmp    c001a7ab <Krnl::copyProcessEnv(Process*, Process*)+0x41>
c001a7b8:	89 d8                	mov    eax,ebx
c001a7ba:	5a                   	pop    edx
c001a7bb:	5b                   	pop    ebx
c001a7bc:	5e                   	pop    esi
c001a7bd:	c3                   	ret    

c001a7be <Krnl::loadSystemEnv()>:
c001a7be:	53                   	push   ebx
c001a7bf:	83 ec 14             	sub    esp,0x14
c001a7c2:	6a 0c                	push   0xc
c001a7c4:	e8 f7 50 ff ff       	call   c000f8c0 <malloc>
c001a7c9:	89 c3                	mov    ebx,eax
c001a7cb:	58                   	pop    eax
c001a7cc:	5a                   	pop    edx
c001a7cd:	ff 35 70 26 03 c0    	push   DWORD PTR ds:0xc0032670
c001a7d3:	53                   	push   ebx
c001a7d4:	e8 69 fe ff ff       	call   c001a642 <EnvVarContainer::EnvVarContainer(Process*)>
c001a7d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7dc:	89 1d 58 1c 03 c0    	mov    DWORD PTR ds:0xc0031c58,ebx
c001a7e2:	e8 3f fe ff ff       	call   c001a626 <EnvVarContainer::__loadSystem()>
c001a7e7:	83 c4 18             	add    esp,0x18
c001a7ea:	5b                   	pop    ebx
c001a7eb:	c3                   	ret    

c001a7ec <Krnl::loadUserEnv()>:
c001a7ec:	53                   	push   ebx
c001a7ed:	83 ec 14             	sub    esp,0x14
c001a7f0:	6a 0c                	push   0xc
c001a7f2:	e8 c9 50 ff ff       	call   c000f8c0 <malloc>
c001a7f7:	89 c3                	mov    ebx,eax
c001a7f9:	58                   	pop    eax
c001a7fa:	5a                   	pop    edx
c001a7fb:	ff 35 70 26 03 c0    	push   DWORD PTR ds:0xc0032670
c001a801:	53                   	push   ebx
c001a802:	e8 3b fe ff ff       	call   c001a642 <EnvVarContainer::EnvVarContainer(Process*)>
c001a807:	89 1d 54 1c 03 c0    	mov    DWORD PTR ds:0xc0031c54,ebx
c001a80d:	83 c4 18             	add    esp,0x18
c001a810:	5b                   	pop    ebx
c001a811:	c3                   	ret    

c001a812 <Krnl::flushEnv()>:
c001a812:	c3                   	ret    

c001a813 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a813:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a817:	8b 15 54 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c54
c001a81d:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a823:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a828:	8b 00                	mov    eax,DWORD PTR [eax]
c001a82a:	03 01                	add    eax,DWORD PTR [ecx]
c001a82c:	85 d2                	test   edx,edx
c001a82e:	74 02                	je     c001a832 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a830:	03 02                	add    eax,DWORD PTR [edx]
c001a832:	c3                   	ret    

c001a833 <Krnl::getProcessEnvPair(Process*, int)>:
c001a833:	57                   	push   edi
c001a834:	8b 0d 54 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031c54
c001a83a:	56                   	push   esi
c001a83b:	85 c9                	test   ecx,ecx
c001a83d:	53                   	push   ebx
c001a83e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a842:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a846:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a84c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a850:	8b 02                	mov    eax,DWORD PTR [edx]
c001a852:	75 47                	jne    c001a89b <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a854:	39 c3                	cmp    ebx,eax
c001a856:	7c 47                	jl     c001a89f <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a858:	8b 15 58 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c58
c001a85e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a860:	01 c1                	add    ecx,eax
c001a862:	39 d9                	cmp    ecx,ebx
c001a864:	7e 6c                	jle    c001a8d2 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a866:	51                   	push   ecx
c001a867:	89 d9                	mov    ecx,ebx
c001a869:	29 c1                	sub    ecx,eax
c001a86b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a86e:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a872:	53                   	push   ebx
c001a873:	68 f0 c6 02 c0       	push   0xc002c6f0
c001a878:	e8 12 86 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001a87d:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a883:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a885:	a1 58 1c 03 c0       	mov    eax,ds:0xc0031c58
c001a88a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a88d:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a891:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a894:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a897:	89 06                	mov    DWORD PTR [esi],eax
c001a899:	eb 51                	jmp    c001a8ec <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a89b:	39 c3                	cmp    ebx,eax
c001a89d:	7d 05                	jge    c001a8a4 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a89f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a8a2:	eb 20                	jmp    c001a8c4 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a8a4:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a8a6:	8d 14 07             	lea    edx,[edi+eax*1]
c001a8a9:	39 da                	cmp    edx,ebx
c001a8ab:	7e 04                	jle    c001a8b1 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a8ad:	29 c3                	sub    ebx,eax
c001a8af:	eb 10                	jmp    c001a8c1 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a8b1:	8b 0d 58 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031c58
c001a8b7:	03 11                	add    edx,DWORD PTR [ecx]
c001a8b9:	39 da                	cmp    edx,ebx
c001a8bb:	7e 15                	jle    c001a8d2 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a8bd:	29 c3                	sub    ebx,eax
c001a8bf:	29 fb                	sub    ebx,edi
c001a8c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a8c4:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a8c8:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a8cb:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a8ce:	89 06                	mov    DWORD PTR [esi],eax
c001a8d0:	eb 1d                	jmp    c001a8ef <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a8d2:	83 ec 0c             	sub    esp,0xc
c001a8d5:	68 04 c7 02 c0       	push   0xc002c704
c001a8da:	e8 18 00 00 00       	call   c001a8f7 <Krnl::panic(char const*)>
c001a8df:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a8e5:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a8ec:	83 c4 10             	add    esp,0x10
c001a8ef:	89 f0                	mov    eax,esi
c001a8f1:	5b                   	pop    ebx
c001a8f2:	5e                   	pop    esi
c001a8f3:	5f                   	pop    edi
c001a8f4:	c2 04 00             	ret    0x4

c001a8f7 <Krnl::panic(char const*)>:
c001a8f7:	55                   	push   ebp
c001a8f8:	89 e5                	mov    ebp,esp
c001a8fa:	53                   	push   ebx
c001a8fb:	83 ec 0c             	sub    esp,0xc
c001a8fe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a901:	fa                   	cli    
c001a902:	c6 05 64 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c64,0x1
c001a909:	53                   	push   ebx
c001a90a:	c6 05 44 e0 02 c0 00 	mov    BYTE PTR ds:0xc002e044,0x0
c001a911:	68 1e c7 02 c0       	push   0xc002c71e
c001a916:	e8 74 85 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001a91b:	58                   	pop    eax
c001a91c:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001a921:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a927:	e8 86 63 ff ff       	call   c0010cb2 <setActiveTerminal(VgaText*)>
c001a92c:	83 c4 0c             	add    esp,0xc
c001a92f:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001a934:	6a 01                	push   0x1
c001a936:	6a 0f                	push   0xf
c001a938:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a93e:	e8 0d 5e ff ff       	call   c0010750 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a943:	58                   	pop    eax
c001a944:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001a949:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94f:	e8 a4 65 ff ff       	call   c0010ef8 <VgaText::clearScreen()>
c001a954:	58                   	pop    eax
c001a955:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001a95a:	5a                   	pop    edx
c001a95b:	68 37 c7 02 c0       	push   0xc002c737
c001a960:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a966:	e8 d3 66 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001a96b:	59                   	pop    ecx
c001a96c:	58                   	pop    eax
c001a96d:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001a972:	68 dc c7 02 c0       	push   0xc002c7dc
c001a977:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a97d:	e8 bc 66 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001a982:	58                   	pop    eax
c001a983:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001a988:	5a                   	pop    edx
c001a989:	68 53 c7 02 c0       	push   0xc002c753
c001a98e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a994:	e8 a5 66 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001a999:	59                   	pop    ecx
c001a99a:	58                   	pop    eax
c001a99b:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001a9a0:	53                   	push   ebx
c001a9a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9a7:	e8 92 66 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001a9ac:	58                   	pop    eax
c001a9ad:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001a9b2:	5a                   	pop    edx
c001a9b3:	68 73 c7 02 c0       	push   0xc002c773
c001a9b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9be:	e8 7b 66 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001a9c3:	a1 60 1c 03 c0       	mov    eax,ds:0xc0031c60
c001a9c8:	83 c4 10             	add    esp,0x10
c001a9cb:	85 c0                	test   eax,eax
c001a9cd:	74 02                	je     c001a9d1 <Krnl::panic(char const*)+0xda>
c001a9cf:	ff d0                	call   eax
c001a9d1:	83 ec 0c             	sub    esp,0xc
c001a9d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a9d7:	e8 d9 32 00 00       	call   c001dcb5 <Thr::getDriverNameFromAddress(unsigned long)>
c001a9dc:	83 c4 10             	add    esp,0x10
c001a9df:	89 c3                	mov    ebx,eax
c001a9e1:	85 c0                	test   eax,eax
c001a9e3:	0f 84 50 02 00 00    	je     c001ac39 <Krnl::panic(char const*)+0x342>
c001a9e9:	83 ec 08             	sub    esp,0x8
c001a9ec:	8b 15 70 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032670
c001a9f2:	68 18 c8 02 c0       	push   0xc002c818
c001a9f7:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a9fd:	e8 3c 66 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001aa02:	58                   	pop    eax
c001aa03:	5a                   	pop    edx
c001aa04:	8b 15 70 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032670
c001aa0a:	68 53 c7 02 c0       	push   0xc002c753
c001aa0f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001aa15:	e8 24 66 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001aa1a:	59                   	pop    ecx
c001aa1b:	58                   	pop    eax
c001aa1c:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001aa21:	53                   	push   ebx
c001aa22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa28:	e8 11 66 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001aa2d:	83 c4 10             	add    esp,0x10
c001aa30:	83 ec 08             	sub    esp,0x8
c001aa33:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001aa38:	68 72 c7 02 c0       	push   0xc002c772
c001aa3d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa43:	e8 f6 65 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001aa48:	58                   	pop    eax
c001aa49:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001aa4e:	5a                   	pop    edx
c001aa4f:	68 70 c8 02 c0       	push   0xc002c870
c001aa54:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa5a:	e8 df 65 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001aa5f:	59                   	pop    ecx
c001aa60:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001aa65:	5b                   	pop    ebx
c001aa66:	68 b0 c8 02 c0       	push   0xc002c8b0
c001aa6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa71:	e8 c8 65 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001aa76:	58                   	pop    eax
c001aa77:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001aa7c:	5a                   	pop    edx
c001aa7d:	68 5e c7 02 c0       	push   0xc002c75e
c001aa82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa88:	e8 b1 65 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001aa8d:	59                   	pop    ecx
c001aa8e:	5b                   	pop    ebx
c001aa8f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa92:	68 76 c7 02 c0       	push   0xc002c776
c001aa97:	e8 f3 83 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001aa9c:	58                   	pop    eax
c001aa9d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aaa0:	5a                   	pop    edx
c001aaa1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aaa4:	68 7f c7 02 c0       	push   0xc002c77f
c001aaa9:	e8 e1 83 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001aaae:	59                   	pop    ecx
c001aaaf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aab2:	5b                   	pop    ebx
c001aab3:	8b 00                	mov    eax,DWORD PTR [eax]
c001aab5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aab8:	68 88 c7 02 c0       	push   0xc002c788
c001aabd:	e8 cd 83 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001aac2:	58                   	pop    eax
c001aac3:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001aac8:	5a                   	pop    edx
c001aac9:	68 f4 c8 02 c0       	push   0xc002c8f4
c001aace:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aad4:	e8 65 65 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001aad9:	59                   	pop    ecx
c001aada:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001aadf:	5b                   	pop    ebx
c001aae0:	68 91 c7 02 c0       	push   0xc002c791
c001aae5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaeb:	e8 4e 65 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001aaf0:	0f 20 c0             	mov    eax,cr0
c001aaf3:	5a                   	pop    edx
c001aaf4:	59                   	pop    ecx
c001aaf5:	50                   	push   eax
c001aaf6:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001aafb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab01:	e8 5e 65 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c001ab06:	5b                   	pop    ebx
c001ab07:	58                   	pop    eax
c001ab08:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001ab0d:	68 9b c7 02 c0       	push   0xc002c79b
c001ab12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab18:	e8 21 65 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001ab1d:	0f 20 d0             	mov    eax,cr2
c001ab20:	5a                   	pop    edx
c001ab21:	59                   	pop    ecx
c001ab22:	50                   	push   eax
c001ab23:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001ab28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab2e:	e8 31 65 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c001ab33:	5b                   	pop    ebx
c001ab34:	58                   	pop    eax
c001ab35:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001ab3a:	68 a5 c7 02 c0       	push   0xc002c7a5
c001ab3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab45:	e8 f4 64 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001ab4a:	0f 20 d8             	mov    eax,cr3
c001ab4d:	5a                   	pop    edx
c001ab4e:	59                   	pop    ecx
c001ab4f:	50                   	push   eax
c001ab50:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001ab55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab5b:	e8 04 65 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c001ab60:	5b                   	pop    ebx
c001ab61:	58                   	pop    eax
c001ab62:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001ab67:	68 b8 c7 02 c0       	push   0xc002c7b8
c001ab6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab72:	e8 c7 64 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001ab77:	0f 20 e0             	mov    eax,cr4
c001ab7a:	5a                   	pop    edx
c001ab7b:	59                   	pop    ecx
c001ab7c:	50                   	push   eax
c001ab7d:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001ab82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab88:	e8 d7 64 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c001ab8d:	5b                   	pop    ebx
c001ab8e:	58                   	pop    eax
c001ab8f:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001ab94:	68 c2 c7 02 c0       	push   0xc002c7c2
c001ab99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab9f:	e8 9a 64 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001aba4:	5a                   	pop    edx
c001aba5:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001abaa:	59                   	pop    ecx
c001abab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001abb1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001abb4:	50                   	push   eax
c001abb5:	e8 aa 64 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c001abba:	5b                   	pop    ebx
c001abbb:	58                   	pop    eax
c001abbc:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001abc1:	68 d9 c7 02 c0       	push   0xc002c7d9
c001abc6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abcc:	e8 6d 64 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001abd1:	5a                   	pop    edx
c001abd2:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001abd7:	59                   	pop    ecx
c001abd8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001abde:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001abe1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001abe4:	50                   	push   eax
c001abe5:	e8 7a 64 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c001abea:	5b                   	pop    ebx
c001abeb:	58                   	pop    eax
c001abec:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001abf1:	68 d9 c7 02 c0       	push   0xc002c7d9
c001abf6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abfc:	e8 3d 64 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001ac01:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001ac06:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ac09:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ac0f:	8b 12                	mov    edx,DWORD PTR [edx]
c001ac11:	59                   	pop    ecx
c001ac12:	5b                   	pop    ebx
c001ac13:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ac16:	50                   	push   eax
c001ac17:	e8 48 64 ff ff       	call   c0011064 <VgaText::putx(unsigned int)>
c001ac1c:	83 c4 10             	add    esp,0x10
c001ac1f:	b2 fe                	mov    dl,0xfe
c001ac21:	e4 60                	in     al,0x60
c001ac23:	3c 1c                	cmp    al,0x1c
c001ac25:	74 04                	je     c001ac2b <Krnl::panic(char const*)+0x334>
c001ac27:	3c 5a                	cmp    al,0x5a
c001ac29:	75 f6                	jne    c001ac21 <Krnl::panic(char const*)+0x32a>
c001ac2b:	e4 64                	in     al,0x64
c001ac2d:	a8 02                	test   al,0x2
c001ac2f:	75 fa                	jne    c001ac2b <Krnl::panic(char const*)+0x334>
c001ac31:	88 d0                	mov    al,dl
c001ac33:	e6 64                	out    0x64,al
c001ac35:	fa                   	cli    
c001ac36:	f4                   	hlt    
c001ac37:	eb e8                	jmp    c001ac21 <Krnl::panic(char const*)+0x32a>
c001ac39:	50                   	push   eax
c001ac3a:	50                   	push   eax
c001ac3b:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001ac40:	68 44 c8 02 c0       	push   0xc002c844
c001ac45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac4b:	e8 ee 63 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001ac50:	58                   	pop    eax
c001ac51:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001ac56:	5a                   	pop    edx
c001ac57:	68 53 c7 02 c0       	push   0xc002c753
c001ac5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac62:	e8 d7 63 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001ac67:	59                   	pop    ecx
c001ac68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac6d:	5b                   	pop    ebx
c001ac6e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac71:	83 c0 0c             	add    eax,0xc
c001ac74:	50                   	push   eax
c001ac75:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001ac7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac80:	e8 b9 63 ff ff       	call   c001103e <VgaText::puts(char const*)>
c001ac85:	83 c4 10             	add    esp,0x10
c001ac88:	e9 a3 fd ff ff       	jmp    c001aa30 <Krnl::panic(char const*)+0x139>

c001ac8d <Net::switchEndian16(unsigned short)>:
c001ac8d:	83 ec 04             	sub    esp,0x4
c001ac90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac94:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ac98:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac9c:	c1 f8 08             	sar    eax,0x8
c001ac9f:	89 c2                	mov    edx,eax
c001aca1:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aca5:	c1 e0 08             	shl    eax,0x8
c001aca8:	09 d0                	or     eax,edx
c001acaa:	83 c4 04             	add    esp,0x4
c001acad:	c3                   	ret    

c001acae <Net::switchEndian32(unsigned int)>:
c001acae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acb2:	c1 e8 18             	shr    eax,0x18
c001acb5:	89 c2                	mov    edx,eax
c001acb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acbb:	c1 e0 08             	shl    eax,0x8
c001acbe:	25 00 00 ff 00       	and    eax,0xff0000
c001acc3:	09 c2                	or     edx,eax
c001acc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acc9:	c1 e8 08             	shr    eax,0x8
c001accc:	25 00 ff 00 00       	and    eax,0xff00
c001acd1:	09 c2                	or     edx,eax
c001acd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acd7:	c1 e0 18             	shl    eax,0x18
c001acda:	09 d0                	or     eax,edx
c001acdc:	c3                   	ret    

c001acdd <Net::crc32Calc(unsigned char*, int)>:
c001acdd:	83 ec 10             	sub    esp,0x10
c001ace0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ace5:	75 07                	jne    c001acee <Net::crc32Calc(unsigned char*, int)+0x11>
c001ace7:	b8 00 00 00 00       	mov    eax,0x0
c001acec:	eb 7c                	jmp    c001ad6a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001acee:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001acf3:	7f 07                	jg     c001acfc <Net::crc32Calc(unsigned char*, int)+0x1f>
c001acf5:	b8 00 00 00 00       	mov    eax,0x0
c001acfa:	eb 6e                	jmp    c001ad6a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001acfc:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ad04:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ad0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad10:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ad14:	7d 4e                	jge    c001ad64 <Net::crc32Calc(unsigned char*, int)+0x87>
c001ad16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad1e:	01 d0                	add    eax,edx
c001ad20:	8a 00                	mov    al,BYTE PTR [eax]
c001ad22:	0f b6 c0             	movzx  eax,al
c001ad25:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ad29:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad31:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ad36:	7f 26                	jg     c001ad5e <Net::crc32Calc(unsigned char*, int)+0x81>
c001ad38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad3c:	83 e0 01             	and    eax,0x1
c001ad3f:	74 0d                	je     c001ad4e <Net::crc32Calc(unsigned char*, int)+0x71>
c001ad41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad45:	d1 e8                	shr    eax,1
c001ad47:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ad4c:	eb 06                	jmp    c001ad54 <Net::crc32Calc(unsigned char*, int)+0x77>
c001ad4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad52:	d1 e8                	shr    eax,1
c001ad54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad58:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad5c:	eb d3                	jmp    c001ad31 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ad5e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ad62:	eb a8                	jmp    c001ad0c <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ad64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad68:	f7 d0                	not    eax
c001ad6a:	83 c4 10             	add    esp,0x10
c001ad6d:	c3                   	ret    

c001ad6e <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ad6e:	83 ec 60             	sub    esp,0x60
c001ad71:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001ad75:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ad79:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001ad81:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001ad86:	7f 14                	jg     c001ad9c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ad88:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001ad8c:	8d 50 01             	lea    edx,[eax+0x1]
c001ad8f:	89 54 24 7c          	mov    DWORD PTR [esp+0x7c],edx
c001ad93:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ad96:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001ad9a:	eb e5                	jmp    c001ad81 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ad9c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001ada0:	8d 50 01             	lea    edx,[eax+0x1]
c001ada3:	89 54 24 7c          	mov    DWORD PTR [esp+0x7c],edx
c001ada7:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001adaa:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001adae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001adb2:	8d 44 24 72          	lea    eax,[esp+0x72]
c001adb6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001adba:	c7 44 24 18 06 00 00 00 	mov    DWORD PTR [esp+0x18],0x6
c001adc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adc6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001adca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001add2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001adda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adde:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ade2:	76 1e                	jbe    c001ae02 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x94>
c001ade4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ade8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adec:	01 d0                	add    eax,edx
c001adee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001adf2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001adf6:	01 ca                	add    edx,ecx
c001adf8:	8a 00                	mov    al,BYTE PTR [eax]
c001adfa:	88 02                	mov    BYTE PTR [edx],al
c001adfc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ae00:	eb d8                	jmp    c001adda <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x6c>
c001ae02:	83 44 24 7c 06       	add    DWORD PTR [esp+0x7c],0x6
c001ae07:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001ae0b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ae0f:	8d 44 24 6c          	lea    eax,[esp+0x6c]
c001ae13:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ae17:	c7 44 24 30 06 00 00 00 	mov    DWORD PTR [esp+0x30],0x6
c001ae1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae23:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ae27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae2b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ae2f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ae37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae3b:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c001ae3f:	76 1e                	jbe    c001ae5f <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0xf1>
c001ae41:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae49:	01 d0                	add    eax,edx
c001ae4b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ae4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ae53:	01 ca                	add    edx,ecx
c001ae55:	8a 00                	mov    al,BYTE PTR [eax]
c001ae57:	88 02                	mov    BYTE PTR [edx],al
c001ae59:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001ae5d:	eb d8                	jmp    c001ae37 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0xc9>
c001ae5f:	83 44 24 7c 06       	add    DWORD PTR [esp+0x7c],0x6
c001ae64:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001ae68:	0f b7 c0             	movzx  eax,ax
c001ae6b:	c1 f8 08             	sar    eax,0x8
c001ae6e:	89 c1                	mov    ecx,eax
c001ae70:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001ae74:	8d 50 01             	lea    edx,[eax+0x1]
c001ae77:	89 54 24 7c          	mov    DWORD PTR [esp+0x7c],edx
c001ae7b:	88 ca                	mov    dl,cl
c001ae7d:	88 10                	mov    BYTE PTR [eax],dl
c001ae7f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c001ae83:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001ae87:	8d 48 01             	lea    ecx,[eax+0x1]
c001ae8a:	89 4c 24 7c          	mov    DWORD PTR [esp+0x7c],ecx
c001ae8e:	88 10                	mov    BYTE PTR [eax],dl
c001ae90:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ae94:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001ae98:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001ae9c:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001aea0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001aea4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001aea8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aeac:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aeb0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aeb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001aeb8:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001aec0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aec4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c001aec8:	76 1e                	jbe    c001aee8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x17a>
c001aeca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001aece:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001aed2:	01 d0                	add    eax,edx
c001aed4:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001aed8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001aedc:	01 ca                	add    edx,ecx
c001aede:	8a 00                	mov    al,BYTE PTR [eax]
c001aee0:	88 02                	mov    BYTE PTR [edx],al
c001aee2:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001aee6:	eb d8                	jmp    c001aec0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x152>
c001aee8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aeec:	01 44 24 7c          	add    DWORD PTR [esp+0x7c],eax
c001aef0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001aef4:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001aef8:	50                   	push   eax
c001aef9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001aefd:	e8 db fd ff ff       	call   c001acdd <Net::crc32Calc(unsigned char*, int)>
c001af02:	83 c4 08             	add    esp,0x8
c001af05:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001af09:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af0d:	c1 e8 18             	shr    eax,0x18
c001af10:	89 c1                	mov    ecx,eax
c001af12:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001af16:	8d 50 01             	lea    edx,[eax+0x1]
c001af19:	89 54 24 7c          	mov    DWORD PTR [esp+0x7c],edx
c001af1d:	88 ca                	mov    dl,cl
c001af1f:	88 10                	mov    BYTE PTR [eax],dl
c001af21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af25:	c1 e8 10             	shr    eax,0x10
c001af28:	89 c1                	mov    ecx,eax
c001af2a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001af2e:	8d 50 01             	lea    edx,[eax+0x1]
c001af31:	89 54 24 7c          	mov    DWORD PTR [esp+0x7c],edx
c001af35:	88 ca                	mov    dl,cl
c001af37:	88 10                	mov    BYTE PTR [eax],dl
c001af39:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af3d:	c1 e8 08             	shr    eax,0x8
c001af40:	89 c1                	mov    ecx,eax
c001af42:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001af46:	8d 50 01             	lea    edx,[eax+0x1]
c001af49:	89 54 24 7c          	mov    DWORD PTR [esp+0x7c],edx
c001af4d:	88 ca                	mov    dl,cl
c001af4f:	88 10                	mov    BYTE PTR [eax],dl
c001af51:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001af55:	8d 50 01             	lea    edx,[eax+0x1]
c001af58:	89 54 24 7c          	mov    DWORD PTR [esp+0x7c],edx
c001af5c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001af60:	88 10                	mov    BYTE PTR [eax],dl
c001af62:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001af66:	83 c4 60             	add    esp,0x60
c001af69:	c3                   	ret    

c001af6a <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001af6a:	83 ec 7c             	sub    esp,0x7c
c001af6d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af74:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001af78:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001af80:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001af87:	83 c0 0e             	add    eax,0xe
c001af8a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001af8e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af95:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001af99:	c7 44 24 30 06 00 00 00 	mov    DWORD PTR [esp+0x30],0x6
c001afa1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afa5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001afa9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001afad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001afb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001afb9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001afbd:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c001afc1:	76 1e                	jbe    c001afe1 <Net::unwrapEthernetFrame(unsigned char*, int)+0x77>
c001afc3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001afc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001afcb:	01 d0                	add    eax,edx
c001afcd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001afd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afd5:	01 ca                	add    edx,ecx
c001afd7:	8a 00                	mov    al,BYTE PTR [eax]
c001afd9:	88 02                	mov    BYTE PTR [edx],al
c001afdb:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001afdf:	eb d8                	jmp    c001afb9 <Net::unwrapEthernetFrame(unsigned char*, int)+0x4f>
c001afe1:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001afe9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aff0:	83 c0 08             	add    eax,0x8
c001aff3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aff7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001affe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b002:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001b00a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b00e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b012:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b016:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001b01a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001b022:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b026:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c001b02a:	76 1e                	jbe    c001b04a <Net::unwrapEthernetFrame(unsigned char*, int)+0xe0>
c001b02c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b030:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b034:	01 d0                	add    eax,edx
c001b036:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001b03a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001b03e:	01 ca                	add    edx,ecx
c001b040:	8a 00                	mov    al,BYTE PTR [eax]
c001b042:	88 02                	mov    BYTE PTR [edx],al
c001b044:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001b048:	eb d8                	jmp    c001b022 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb8>
c001b04a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001b052:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b059:	8d 50 01             	lea    edx,[eax+0x1]
c001b05c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b063:	8a 00                	mov    al,BYTE PTR [eax]
c001b065:	0f b6 c0             	movzx  eax,al
c001b068:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001b06d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b074:	8d 50 01             	lea    edx,[eax+0x1]
c001b077:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b07e:	8a 00                	mov    al,BYTE PTR [eax]
c001b080:	0f b6 c0             	movzx  eax,al
c001b083:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001b088:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001b08d:	c1 e0 08             	shl    eax,0x8
c001b090:	89 c2                	mov    edx,eax
c001b092:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b096:	09 d0                	or     eax,edx
c001b098:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b09f:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001b0a3:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001b0ab:	75 46                	jne    c001b0f3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x189>
c001b0ad:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b0b7:	66 3d dc 05          	cmp    ax,0x5dc
c001b0bb:	77 16                	ja     c001b0d3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x169>
c001b0bd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b0c7:	0f b7 c0             	movzx  eax,ax
c001b0ca:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001b0d1:	eb 20                	jmp    c001b0f3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x189>
c001b0d3:	83 ec 0c             	sub    esp,0xc
c001b0d6:	68 1c c9 02 c0       	push   0xc002c91c
c001b0db:	e8 af 7d ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001b0e0:	83 c4 10             	add    esp,0x10
c001b0e3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0ea:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001b0ee:	e9 2c 01 00 00       	jmp    c001b21f <Net::unwrapEthernetFrame(unsigned char*, int)+0x2b5>
c001b0f3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b0fa:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b101:	8b 12                	mov    edx,DWORD PTR [edx]
c001b103:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b107:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001b10e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001b112:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b116:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b11a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b11e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b122:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b126:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b12e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b132:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b136:	76 1e                	jbe    c001b156 <Net::unwrapEthernetFrame(unsigned char*, int)+0x1ec>
c001b138:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b13c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b140:	01 d0                	add    eax,edx
c001b142:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b146:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b14a:	01 ca                	add    edx,ecx
c001b14c:	8a 00                	mov    al,BYTE PTR [eax]
c001b14e:	88 02                	mov    BYTE PTR [edx],al
c001b150:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b154:	eb d8                	jmp    c001b12e <Net::unwrapEthernetFrame(unsigned char*, int)+0x1c4>
c001b156:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b15d:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001b164:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b16b:	8d 50 01             	lea    edx,[eax+0x1]
c001b16e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b175:	8a 00                	mov    al,BYTE PTR [eax]
c001b177:	0f b6 c0             	movzx  eax,al
c001b17a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001b17e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b185:	8d 50 01             	lea    edx,[eax+0x1]
c001b188:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b18f:	8a 00                	mov    al,BYTE PTR [eax]
c001b191:	0f b6 c0             	movzx  eax,al
c001b194:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001b198:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b19f:	8d 50 01             	lea    edx,[eax+0x1]
c001b1a2:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b1a9:	8a 00                	mov    al,BYTE PTR [eax]
c001b1ab:	0f b6 c0             	movzx  eax,al
c001b1ae:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001b1b2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b1b9:	8d 50 01             	lea    edx,[eax+0x1]
c001b1bc:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b1c3:	8a 00                	mov    al,BYTE PTR [eax]
c001b1c5:	0f b6 c0             	movzx  eax,al
c001b1c8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001b1cc:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001b1d0:	c1 e0 18             	shl    eax,0x18
c001b1d3:	89 c2                	mov    edx,eax
c001b1d5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b1d9:	c1 e0 10             	shl    eax,0x10
c001b1dc:	09 c2                	or     edx,eax
c001b1de:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b1e2:	c1 e0 08             	shl    eax,0x8
c001b1e5:	09 d0                	or     eax,edx
c001b1e7:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001b1eb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b1ef:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b1f6:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001b1fa:	83 e8 04             	sub    eax,0x4
c001b1fd:	83 ec 08             	sub    esp,0x8
c001b200:	50                   	push   eax
c001b201:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b205:	e8 d3 fa ff ff       	call   c001acdd <Net::crc32Calc(unsigned char*, int)>
c001b20a:	83 c4 10             	add    esp,0x10
c001b20d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001b211:	0f 94 c2             	sete   dl
c001b214:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b21b:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001b21e:	90                   	nop
c001b21f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b226:	83 c4 7c             	add    esp,0x7c
c001b229:	c2 04 00             	ret    0x4

c001b22c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001b22c:	55                   	push   ebp
c001b22d:	57                   	push   edi
c001b22e:	56                   	push   esi
c001b22f:	53                   	push   ebx
c001b230:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b236:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b23d:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b23f:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b242:	80 fb 40             	cmp    bl,0x40
c001b245:	75 1b                	jne    c001b262 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b247:	8a 16                	mov    dl,BYTE PTR [esi]
c001b249:	84 d2                	test   dl,dl
c001b24b:	0f 84 f1 00 00 00    	je     c001b342 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b251:	8d 46 01             	lea    eax,[esi+0x1]
c001b254:	80 fa 3a             	cmp    dl,0x3a
c001b257:	74 04                	je     c001b25d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b259:	89 c6                	mov    esi,eax
c001b25b:	eb ea                	jmp    c001b247 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b25d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b260:	89 c6                	mov    esi,eax
c001b262:	50                   	push   eax
c001b263:	6a 40                	push   0x40
c001b265:	6a 00                	push   0x0
c001b267:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b26b:	50                   	push   eax
c001b26c:	e8 fb 54 fe ff       	call   c000076c <memset>
c001b271:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b278:	31 c0                	xor    eax,eax
c001b27a:	83 c4 10             	add    esp,0x10
c001b27d:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b27f:	84 c9                	test   cl,cl
c001b281:	0f 84 bb 00 00 00    	je     c001b342 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b287:	3d c7 00 00 00       	cmp    eax,0xc7
c001b28c:	0f 8f b0 00 00 00    	jg     c001b342 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b292:	80 f9 0a             	cmp    cl,0xa
c001b295:	0f 85 98 00 00 00    	jne    c001b333 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b29b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b2a0:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b2a4:	a8 df                	test   al,0xdf
c001b2a6:	0f 94 c1             	sete   cl
c001b2a9:	3c 23                	cmp    al,0x23
c001b2ab:	0f 94 c2             	sete   dl
c001b2ae:	08 d1                	or     cl,dl
c001b2b0:	75 4a                	jne    c001b2fc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b2b2:	8d 50 f7             	lea    edx,[eax-0x9]
c001b2b5:	80 fa 01             	cmp    dl,0x1
c001b2b8:	76 42                	jbe    c001b2fc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b2ba:	3c 5b                	cmp    al,0x5b
c001b2bc:	75 42                	jne    c001b300 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b2be:	80 fb 40             	cmp    bl,0x40
c001b2c1:	75 39                	jne    c001b2fc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b2c3:	83 ec 0c             	sub    esp,0xc
c001b2c6:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b2ca:	52                   	push   edx
c001b2cb:	e8 b8 54 fe ff       	call   c0000788 <strlen>
c001b2d0:	83 c4 10             	add    esp,0x10
c001b2d3:	83 f8 3f             	cmp    eax,0x3f
c001b2d6:	77 6a                	ja     c001b342 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b2d8:	50                   	push   eax
c001b2d9:	50                   	push   eax
c001b2da:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b2de:	52                   	push   edx
c001b2df:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b2e3:	52                   	push   edx
c001b2e4:	e8 3f 55 fe ff       	call   c0000828 <strcpy>
c001b2e9:	58                   	pop    eax
c001b2ea:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b2ee:	52                   	push   edx
c001b2ef:	e8 94 54 fe ff       	call   c0000788 <strlen>
c001b2f4:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b2f9:	83 c4 10             	add    esp,0x10
c001b2fc:	31 d2                	xor    edx,edx
c001b2fe:	eb 3a                	jmp    c001b33a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b300:	80 fb 40             	cmp    bl,0x40
c001b303:	74 06                	je     c001b30b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b305:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b309:	eb 20                	jmp    c001b32b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b30b:	50                   	push   eax
c001b30c:	50                   	push   eax
c001b30d:	55                   	push   ebp
c001b30e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b312:	50                   	push   eax
c001b313:	e8 9c 55 fe ff       	call   c00008b4 <strcmp>
c001b318:	83 c4 10             	add    esp,0x10
c001b31b:	85 c0                	test   eax,eax
c001b31d:	75 dd                	jne    c001b2fc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b31f:	eb e4                	jmp    c001b305 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b321:	8d 50 01             	lea    edx,[eax+0x1]
c001b324:	80 f9 3d             	cmp    cl,0x3d
c001b327:	74 1d                	je     c001b346 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b329:	89 d0                	mov    eax,edx
c001b32b:	8a 08                	mov    cl,BYTE PTR [eax]
c001b32d:	84 c9                	test   cl,cl
c001b32f:	75 f0                	jne    c001b321 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b331:	eb 0f                	jmp    c001b342 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b333:	8d 50 01             	lea    edx,[eax+0x1]
c001b336:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b33a:	47                   	inc    edi
c001b33b:	89 d0                	mov    eax,edx
c001b33d:	e9 3b ff ff ff       	jmp    c001b27d <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b342:	31 c0                	xor    eax,eax
c001b344:	eb 33                	jmp    c001b379 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b346:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b34a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b34d:	50                   	push   eax
c001b34e:	50                   	push   eax
c001b34f:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b353:	50                   	push   eax
c001b354:	56                   	push   esi
c001b355:	e8 5a 55 fe ff       	call   c00008b4 <strcmp>
c001b35a:	83 c4 10             	add    esp,0x10
c001b35d:	85 c0                	test   eax,eax
c001b35f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b363:	75 97                	jne    c001b2fc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b365:	51                   	push   ecx
c001b366:	51                   	push   ecx
c001b367:	52                   	push   edx
c001b368:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b36f:	e8 b4 54 fe ff       	call   c0000828 <strcpy>
c001b374:	83 c4 10             	add    esp,0x10
c001b377:	b0 01                	mov    al,0x1
c001b379:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b37f:	5b                   	pop    ebx
c001b380:	5e                   	pop    esi
c001b381:	5f                   	pop    edi
c001b382:	5d                   	pop    ebp
c001b383:	c3                   	ret    

c001b384 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b384:	57                   	push   edi
c001b385:	56                   	push   esi
c001b386:	53                   	push   ebx
c001b387:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b38d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b394:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b39b:	53                   	push   ebx
c001b39c:	e8 e7 53 fe ff       	call   c0000788 <strlen>
c001b3a1:	89 34 24             	mov    DWORD PTR [esp],esi
c001b3a4:	89 c7                	mov    edi,eax
c001b3a6:	e8 dd 53 fe ff       	call   c0000788 <strlen>
c001b3ab:	83 c4 10             	add    esp,0x10
c001b3ae:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b3b2:	3d ff 00 00 00       	cmp    eax,0xff
c001b3b7:	0f 87 d3 00 00 00    	ja     c001b490 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b3bd:	57                   	push   edi
c001b3be:	57                   	push   edi
c001b3bf:	56                   	push   esi
c001b3c0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b3c4:	56                   	push   esi
c001b3c5:	e8 5e 54 fe ff       	call   c0000828 <strcpy>
c001b3ca:	58                   	pop    eax
c001b3cb:	5a                   	pop    edx
c001b3cc:	68 71 ce 02 c0       	push   0xc002ce71
c001b3d1:	56                   	push   esi
c001b3d2:	e8 91 55 fe ff       	call   c0000968 <strcat>
c001b3d7:	59                   	pop    ecx
c001b3d8:	5f                   	pop    edi
c001b3d9:	53                   	push   ebx
c001b3da:	56                   	push   esi
c001b3db:	e8 88 55 fe ff       	call   c0000968 <strcat>
c001b3e0:	58                   	pop    eax
c001b3e1:	5a                   	pop    edx
c001b3e2:	68 68 c9 02 c0       	push   0xc002c968
c001b3e7:	56                   	push   esi
c001b3e8:	e8 7b 55 fe ff       	call   c0000968 <strcat>
c001b3ed:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b3f4:	e8 c7 44 ff ff       	call   c000f8c0 <malloc>
c001b3f9:	83 c4 0c             	add    esp,0xc
c001b3fc:	89 c3                	mov    ebx,eax
c001b3fe:	ff 35 70 26 03 c0    	push   DWORD PTR ds:0xc0032670
c001b404:	56                   	push   esi
c001b405:	50                   	push   eax
c001b406:	e8 e3 7f ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001b40b:	83 c4 10             	add    esp,0x10
c001b40e:	85 db                	test   ebx,ebx
c001b410:	74 7e                	je     c001b490 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b412:	51                   	push   ecx
c001b413:	51                   	push   ecx
c001b414:	6a 01                	push   0x1
c001b416:	53                   	push   ebx
c001b417:	e8 36 80 ff ff       	call   c0013452 <File::open(FileOpenMode)>
c001b41c:	83 c4 10             	add    esp,0x10
c001b41f:	85 c0                	test   eax,eax
c001b421:	74 08                	je     c001b42b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b423:	83 ec 0c             	sub    esp,0xc
c001b426:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b428:	53                   	push   ebx
c001b429:	eb 5f                	jmp    c001b48a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b42b:	52                   	push   edx
c001b42c:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b430:	50                   	push   eax
c001b431:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b435:	50                   	push   eax
c001b436:	53                   	push   ebx
c001b437:	e8 c2 82 ff ff       	call   c00136fe <File::stat(unsigned long long*, bool*)>
c001b43c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b440:	83 c4 10             	add    esp,0x10
c001b443:	89 c1                	mov    ecx,eax
c001b445:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b449:	74 31                	je     c001b47c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b44b:	83 ec 0c             	sub    esp,0xc
c001b44e:	50                   	push   eax
c001b44f:	e8 6c 44 ff ff       	call   c000f8c0 <malloc>
c001b454:	89 c6                	mov    esi,eax
c001b456:	58                   	pop    eax
c001b457:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b459:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b45d:	52                   	push   edx
c001b45e:	56                   	push   esi
c001b45f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b463:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b467:	53                   	push   ebx
c001b468:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b46b:	83 c4 20             	add    esp,0x20
c001b46e:	85 c0                	test   eax,eax
c001b470:	75 0a                	jne    c001b47c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b472:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b476:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b47a:	74 18                	je     c001b494 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b47c:	83 ec 0c             	sub    esp,0xc
c001b47f:	53                   	push   ebx
c001b480:	e8 2b 80 ff ff       	call   c00134b0 <File::close()>
c001b485:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b487:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b48a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b48d:	83 c4 10             	add    esp,0x10
c001b490:	31 c0                	xor    eax,eax
c001b492:	eb 3b                	jmp    c001b4cf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b494:	83 ec 0c             	sub    esp,0xc
c001b497:	53                   	push   ebx
c001b498:	e8 13 80 ff ff       	call   c00134b0 <File::close()>
c001b49d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b49f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4a5:	83 c4 0c             	add    esp,0xc
c001b4a8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b4af:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b4b6:	56                   	push   esi
c001b4b7:	e8 70 fd ff ff       	call   c001b22c <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b4bc:	89 34 24             	mov    DWORD PTR [esp],esi
c001b4bf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b4c3:	e8 08 44 ff ff       	call   c000f8d0 <free>
c001b4c8:	83 c4 10             	add    esp,0x10
c001b4cb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b4cf:	81 c4 20 01 00 00    	add    esp,0x120
c001b4d5:	5b                   	pop    ebx
c001b4d6:	5e                   	pop    esi
c001b4d7:	5f                   	pop    edi
c001b4d8:	c3                   	ret    

c001b4d9 <Reg::getLine(char*, char*, char*)>:
c001b4d9:	57                   	push   edi
c001b4da:	56                   	push   esi
c001b4db:	53                   	push   ebx
c001b4dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4e0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b4e4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b4e8:	57                   	push   edi
c001b4e9:	56                   	push   esi
c001b4ea:	53                   	push   ebx
c001b4eb:	68 6d c9 02 c0       	push   0xc002c96d
c001b4f0:	e8 8f fe ff ff       	call   c001b384 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b4f5:	83 c4 10             	add    esp,0x10
c001b4f8:	84 c0                	test   al,al
c001b4fa:	75 10                	jne    c001b50c <Reg::getLine(char*, char*, char*)+0x33>
c001b4fc:	57                   	push   edi
c001b4fd:	56                   	push   esi
c001b4fe:	53                   	push   ebx
c001b4ff:	68 92 c9 02 c0       	push   0xc002c992
c001b504:	e8 7b fe ff ff       	call   c001b384 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b509:	83 c4 10             	add    esp,0x10
c001b50c:	5b                   	pop    ebx
c001b50d:	5e                   	pop    esi
c001b50e:	5f                   	pop    edi
c001b50f:	c3                   	ret    

c001b510 <Reg::readInt(char*, char*, int*)>:
c001b510:	55                   	push   ebp
c001b511:	57                   	push   edi
c001b512:	56                   	push   esi
c001b513:	53                   	push   ebx
c001b514:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b51a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b51e:	57                   	push   edi
c001b51f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b526:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b52d:	e8 a7 ff ff ff       	call   c001b4d9 <Reg::getLine(char*, char*, char*)>
c001b532:	83 c4 10             	add    esp,0x10
c001b535:	84 c0                	test   al,al
c001b537:	0f 84 b3 00 00 00    	je     c001b5f0 <Reg::readInt(char*, char*, int*)+0xe0>
c001b53d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b541:	80 fa 2b             	cmp    dl,0x2b
c001b544:	74 0c                	je     c001b552 <Reg::readInt(char*, char*, int*)+0x42>
c001b546:	80 fa 2d             	cmp    dl,0x2d
c001b549:	75 0e                	jne    c001b559 <Reg::readInt(char*, char*, int*)+0x49>
c001b54b:	ba 01 00 00 00       	mov    edx,0x1
c001b550:	eb 0b                	jmp    c001b55d <Reg::readInt(char*, char*, int*)+0x4d>
c001b552:	ba 01 00 00 00       	mov    edx,0x1
c001b557:	eb 02                	jmp    c001b55b <Reg::readInt(char*, char*, int*)+0x4b>
c001b559:	31 d2                	xor    edx,edx
c001b55b:	31 c0                	xor    eax,eax
c001b55d:	be 0a 00 00 00       	mov    esi,0xa
c001b562:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b567:	75 20                	jne    c001b589 <Reg::readInt(char*, char*, int*)+0x79>
c001b569:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b56d:	80 f9 78             	cmp    cl,0x78
c001b570:	75 0a                	jne    c001b57c <Reg::readInt(char*, char*, int*)+0x6c>
c001b572:	83 c2 02             	add    edx,0x2
c001b575:	be 10 00 00 00       	mov    esi,0x10
c001b57a:	eb 0d                	jmp    c001b589 <Reg::readInt(char*, char*, int*)+0x79>
c001b57c:	80 f9 62             	cmp    cl,0x62
c001b57f:	75 08                	jne    c001b589 <Reg::readInt(char*, char*, int*)+0x79>
c001b581:	83 c2 02             	add    edx,0x2
c001b584:	be 02 00 00 00       	mov    esi,0x2
c001b589:	01 d7                	add    edi,edx
c001b58b:	31 d2                	xor    edx,edx
c001b58d:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b58f:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b593:	80 fb 0d             	cmp    bl,0xd
c001b596:	0f 94 c3             	sete   bl
c001b599:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b59e:	0f 94 c1             	sete   cl
c001b5a1:	08 cb                	or     bl,cl
c001b5a3:	75 3a                	jne    c001b5df <Reg::readInt(char*, char*, int*)+0xcf>
c001b5a5:	0f af d6             	imul   edx,esi
c001b5a8:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b5ad:	83 fe 10             	cmp    esi,0x10
c001b5b0:	75 26                	jne    c001b5d8 <Reg::readInt(char*, char*, int*)+0xc8>
c001b5b2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b5b6:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b5b9:	89 e9                	mov    ecx,ebp
c001b5bb:	80 f9 05             	cmp    cl,0x5
c001b5be:	77 06                	ja     c001b5c6 <Reg::readInt(char*, char*, int*)+0xb6>
c001b5c0:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b5c4:	eb 16                	jmp    c001b5dc <Reg::readInt(char*, char*, int*)+0xcc>
c001b5c6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b5ca:	83 e9 61             	sub    ecx,0x61
c001b5cd:	80 f9 05             	cmp    cl,0x5
c001b5d0:	77 06                	ja     c001b5d8 <Reg::readInt(char*, char*, int*)+0xc8>
c001b5d2:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b5d6:	eb 04                	jmp    c001b5dc <Reg::readInt(char*, char*, int*)+0xcc>
c001b5d8:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b5dc:	47                   	inc    edi
c001b5dd:	eb ae                	jmp    c001b58d <Reg::readInt(char*, char*, int*)+0x7d>
c001b5df:	84 c0                	test   al,al
c001b5e1:	74 02                	je     c001b5e5 <Reg::readInt(char*, char*, int*)+0xd5>
c001b5e3:	f7 da                	neg    edx
c001b5e5:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b5ec:	89 10                	mov    DWORD PTR [eax],edx
c001b5ee:	88 d8                	mov    al,bl
c001b5f0:	81 c4 ec 00 00 00    	add    esp,0xec
c001b5f6:	5b                   	pop    ebx
c001b5f7:	5e                   	pop    esi
c001b5f8:	5f                   	pop    edi
c001b5f9:	5d                   	pop    ebp
c001b5fa:	c3                   	ret    

c001b5fb <Reg::readString(char*, char*, char*, int)>:
c001b5fb:	57                   	push   edi
c001b5fc:	56                   	push   esi
c001b5fd:	53                   	push   ebx
c001b5fe:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b604:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b60b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b60f:	57                   	push   edi
c001b610:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b617:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b61e:	e8 b6 fe ff ff       	call   c001b4d9 <Reg::getLine(char*, char*, char*)>
c001b623:	83 c4 10             	add    esp,0x10
c001b626:	89 c6                	mov    esi,eax
c001b628:	84 c0                	test   al,al
c001b62a:	74 44                	je     c001b670 <Reg::readString(char*, char*, char*, int)+0x75>
c001b62c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b633:	31 c0                	xor    eax,eax
c001b635:	4a                   	dec    edx
c001b636:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b639:	84 c9                	test   cl,cl
c001b63b:	74 0f                	je     c001b64c <Reg::readString(char*, char*, char*, int)+0x51>
c001b63d:	39 c2                	cmp    edx,eax
c001b63f:	7e 0b                	jle    c001b64c <Reg::readString(char*, char*, char*, int)+0x51>
c001b641:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b644:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b649:	40                   	inc    eax
c001b64a:	eb ea                	jmp    c001b636 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b64c:	83 ec 0c             	sub    esp,0xc
c001b64f:	53                   	push   ebx
c001b650:	e8 33 51 fe ff       	call   c0000788 <strlen>
c001b655:	83 c4 10             	add    esp,0x10
c001b658:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b65d:	75 11                	jne    c001b670 <Reg::readString(char*, char*, char*, int)+0x75>
c001b65f:	83 ec 0c             	sub    esp,0xc
c001b662:	53                   	push   ebx
c001b663:	e8 20 51 fe ff       	call   c0000788 <strlen>
c001b668:	83 c4 10             	add    esp,0x10
c001b66b:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b670:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b676:	89 f0                	mov    eax,esi
c001b678:	5b                   	pop    ebx
c001b679:	5e                   	pop    esi
c001b67a:	5f                   	pop    edi
c001b67b:	c3                   	ret    

c001b67c <Reg::readBool(char*, char*, bool*)>:
c001b67c:	83 ec 20             	sub    esp,0x20
c001b67f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b683:	50                   	push   eax
c001b684:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b688:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b68c:	e8 7f fe ff ff       	call   c001b510 <Reg::readInt(char*, char*, int*)>
c001b691:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b696:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b69a:	0f 95 02             	setne  BYTE PTR [edx]
c001b69d:	83 c4 2c             	add    esp,0x2c
c001b6a0:	c3                   	ret    

c001b6a1 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b6a1:	53                   	push   ebx
c001b6a2:	83 ec 1c             	sub    esp,0x1c
c001b6a5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b6a9:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b6ad:	50                   	push   eax
c001b6ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6b6:	e8 c1 ff ff ff       	call   c001b67c <Reg::readBool(char*, char*, bool*)>
c001b6bb:	83 c4 10             	add    esp,0x10
c001b6be:	84 c0                	test   al,al
c001b6c0:	74 04                	je     c001b6c6 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b6c2:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b6c6:	88 d8                	mov    al,bl
c001b6c8:	83 c4 18             	add    esp,0x18
c001b6cb:	5b                   	pop    ebx
c001b6cc:	c3                   	ret    

c001b6cd <Reg::readIntWithDefault(char*, char*, int)>:
c001b6cd:	53                   	push   ebx
c001b6ce:	83 ec 1c             	sub    esp,0x1c
c001b6d1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b6d5:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b6d9:	50                   	push   eax
c001b6da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6e2:	e8 29 fe ff ff       	call   c001b510 <Reg::readInt(char*, char*, int*)>
c001b6e7:	83 c4 10             	add    esp,0x10
c001b6ea:	84 c0                	test   al,al
c001b6ec:	74 04                	je     c001b6f2 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b6ee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b6f2:	89 d8                	mov    eax,ebx
c001b6f4:	83 c4 18             	add    esp,0x18
c001b6f7:	5b                   	pop    ebx
c001b6f8:	c3                   	ret    

c001b6f9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b6f9:	57                   	push   edi
c001b6fa:	56                   	push   esi
c001b6fb:	53                   	push   ebx
c001b6fc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b700:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b704:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b708:	56                   	push   esi
c001b709:	53                   	push   ebx
c001b70a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b70e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b712:	e8 e4 fe ff ff       	call   c001b5fb <Reg::readString(char*, char*, char*, int)>
c001b717:	83 c4 10             	add    esp,0x10
c001b71a:	84 c0                	test   al,al
c001b71c:	75 1f                	jne    c001b73d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x44>
c001b71e:	50                   	push   eax
c001b71f:	56                   	push   esi
c001b720:	4e                   	dec    esi
c001b721:	6a 00                	push   0x0
c001b723:	53                   	push   ebx
c001b724:	e8 43 50 fe ff       	call   c000076c <memset>
c001b729:	83 c4 10             	add    esp,0x10
c001b72c:	31 c0                	xor    eax,eax
c001b72e:	39 c6                	cmp    esi,eax
c001b730:	76 09                	jbe    c001b73b <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x42>
c001b732:	8a 14 07             	mov    dl,BYTE PTR [edi+eax*1]
c001b735:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001b738:	40                   	inc    eax
c001b739:	eb f3                	jmp    c001b72e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x35>
c001b73b:	89 fb                	mov    ebx,edi
c001b73d:	89 d8                	mov    eax,ebx
c001b73f:	5b                   	pop    ebx
c001b740:	5e                   	pop    esi
c001b741:	5f                   	pop    edi
c001b742:	c3                   	ret    

c001b743 <Sys::eject(regs*)>:
c001b743:	83 ec 0c             	sub    esp,0xc
c001b746:	83 ca ff             	or     edx,0xffffffff
c001b749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b74d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b750:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b755:	83 e9 41             	sub    ecx,0x41
c001b758:	83 f9 19             	cmp    ecx,0x19
c001b75b:	77 18                	ja     c001b775 <Sys::eject(regs*)+0x32>
c001b75d:	8b 0c 8d 20 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd08e0]
c001b764:	85 c9                	test   ecx,ecx
c001b766:	74 0d                	je     c001b775 <Sys::eject(regs*)+0x32>
c001b768:	83 ec 0c             	sub    esp,0xc
c001b76b:	51                   	push   ecx
c001b76c:	e8 35 b0 ff ff       	call   c00167a6 <LogicalDisk::eject()>
c001b771:	83 c4 10             	add    esp,0x10
c001b774:	99                   	cdq    
c001b775:	83 c4 0c             	add    esp,0xc
c001b778:	c3                   	ret    

c001b779 <Sys::exit(regs*)>:
c001b779:	83 ec 18             	sub    esp,0x18
c001b77c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b780:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b783:	e8 8f 38 00 00       	call   c001f017 <terminateTask(int)>
c001b788:	83 c8 ff             	or     eax,0xffffffff
c001b78b:	83 c4 1c             	add    esp,0x1c
c001b78e:	89 c2                	mov    edx,eax
c001b790:	c3                   	ret    

c001b791 <Sys::getCwd(regs*)>:
c001b791:	83 ec 10             	sub    esp,0x10
c001b794:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b798:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b79b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b79e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7a3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7a6:	e8 45 7a ff ff       	call   c00131f0 <Fs::getcwd(Process*, char*, int)>
c001b7ab:	83 c4 1c             	add    esp,0x1c
c001b7ae:	99                   	cdq    
c001b7af:	c3                   	ret    

c001b7b0 <Sys::getPID(regs*)>:
c001b7b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7b8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7ba:	99                   	cdq    
c001b7bb:	c3                   	ret    

c001b7bc <Sys::getRAMData(regs*)>:
c001b7bc:	8b 0d 54 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f154
c001b7c2:	6b 05 50 f1 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f150,0x64
c001b7c9:	99                   	cdq    
c001b7ca:	f7 f9                	idiv   ecx
c001b7cc:	c1 e0 18             	shl    eax,0x18
c001b7cf:	09 c8                	or     eax,ecx
c001b7d1:	99                   	cdq    
c001b7d2:	c3                   	ret    

c001b7d3 <Sys::getVGAPtr(regs*)>:
c001b7d3:	57                   	push   edi
c001b7d4:	56                   	push   esi
c001b7d5:	53                   	push   ebx
c001b7d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7da:	83 ec 0c             	sub    esp,0xc
c001b7dd:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b7e0:	e8 14 33 00 00       	call   c001eaf9 <Thr::processFromPID(int)>
c001b7e5:	83 c4 10             	add    esp,0x10
c001b7e8:	89 c1                	mov    ecx,eax
c001b7ea:	b8 01 00 00 00       	mov    eax,0x1
c001b7ef:	85 c9                	test   ecx,ecx
c001b7f1:	74 62                	je     c001b855 <Sys::getVGAPtr(regs*)+0x82>
c001b7f3:	8b b9 26 05 00 00    	mov    edi,DWORD PTR [ecx+0x526]
c001b7f9:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c001b7fd:	74 0c                	je     c001b80b <Sys::getVGAPtr(regs*)+0x38>
c001b7ff:	83 ec 0c             	sub    esp,0xc
c001b802:	57                   	push   edi
c001b803:	e8 aa 54 ff ff       	call   c0010cb2 <setActiveTerminal(VgaText*)>
c001b808:	83 c4 10             	add    esp,0x10
c001b80b:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c001b80e:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c001b811:	31 c0                	xor    eax,eax
c001b813:	8a 1c 01             	mov    bl,BYTE PTR [ecx+eax*1]
c001b816:	88 1c 02             	mov    BYTE PTR [edx+eax*1],bl
c001b819:	40                   	inc    eax
c001b81a:	3d a0 0f 00 00       	cmp    eax,0xfa0
c001b81f:	75 f2                	jne    c001b813 <Sys::getVGAPtr(regs*)+0x40>
c001b821:	8b 57 14             	mov    edx,DWORD PTR [edi+0x14]
c001b824:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b827:	8d 9f 82 00 00 00    	lea    ebx,[edi+0x82]
c001b82d:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b833:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b836:	8b 57 18             	mov    edx,DWORD PTR [edi+0x18]
c001b839:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b83f:	50                   	push   eax
c001b840:	50                   	push   eax
c001b841:	53                   	push   ebx
c001b842:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b845:	05 a8 0f 00 00       	add    eax,0xfa8
c001b84a:	50                   	push   eax
c001b84b:	e8 d8 4f fe ff       	call   c0000828 <strcpy>
c001b850:	83 c4 10             	add    esp,0x10
c001b853:	31 c0                	xor    eax,eax
c001b855:	5b                   	pop    ebx
c001b856:	31 d2                	xor    edx,edx
c001b858:	5e                   	pop    esi
c001b859:	5f                   	pop    edi
c001b85a:	c3                   	ret    

c001b85b <Sys::loadDLL(regs*)>:
c001b85b:	56                   	push   esi
c001b85c:	53                   	push   ebx
c001b85d:	31 d2                	xor    edx,edx
c001b85f:	51                   	push   ecx
c001b860:	b8 01 00 00 00       	mov    eax,0x1
c001b865:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b869:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b86d:	0f 84 8c 00 00 00    	je     c001b8ff <Sys::loadDLL(regs*)+0xa4>
c001b873:	83 ec 0c             	sub    esp,0xc
c001b876:	68 14 01 00 00       	push   0x114
c001b87b:	e8 40 40 ff ff       	call   c000f8c0 <malloc>
c001b880:	83 c4 0c             	add    esp,0xc
c001b883:	89 c3                	mov    ebx,eax
c001b885:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b88a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b88d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b890:	53                   	push   ebx
c001b891:	e8 58 7b ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001b896:	83 c4 10             	add    esp,0x10
c001b899:	31 d2                	xor    edx,edx
c001b89b:	b8 02 00 00 00       	mov    eax,0x2
c001b8a0:	85 db                	test   ebx,ebx
c001b8a2:	74 5b                	je     c001b8ff <Sys::loadDLL(regs*)+0xa4>
c001b8a4:	83 ec 0c             	sub    esp,0xc
c001b8a7:	53                   	push   ebx
c001b8a8:	e8 13 7e ff ff       	call   c00136c0 <File::exists()>
c001b8ad:	83 c4 10             	add    esp,0x10
c001b8b0:	84 c0                	test   al,al
c001b8b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8b4:	75 11                	jne    c001b8c7 <Sys::loadDLL(regs*)+0x6c>
c001b8b6:	83 ec 0c             	sub    esp,0xc
c001b8b9:	53                   	push   ebx
c001b8ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b8bd:	83 c4 10             	add    esp,0x10
c001b8c0:	b8 03 00 00 00       	mov    eax,0x3
c001b8c5:	eb 36                	jmp    c001b8fd <Sys::loadDLL(regs*)+0xa2>
c001b8c7:	83 ec 0c             	sub    esp,0xc
c001b8ca:	53                   	push   ebx
c001b8cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b8ce:	58                   	pop    eax
c001b8cf:	5a                   	pop    edx
c001b8d0:	6a 00                	push   0x0
c001b8d2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b8d5:	e8 2c 24 00 00       	call   c001dd06 <Thr::loadDLL(char const*, bool)>
c001b8da:	83 c4 10             	add    esp,0x10
c001b8dd:	89 c1                	mov    ecx,eax
c001b8df:	31 d2                	xor    edx,edx
c001b8e1:	b8 04 00 00 00       	mov    eax,0x4
c001b8e6:	85 c9                	test   ecx,ecx
c001b8e8:	74 15                	je     c001b8ff <Sys::loadDLL(regs*)+0xa4>
c001b8ea:	53                   	push   ebx
c001b8eb:	53                   	push   ebx
c001b8ec:	ff 35 08 f1 02 c0    	push   DWORD PTR ds:0xc002f108
c001b8f2:	51                   	push   ecx
c001b8f3:	e8 39 26 00 00       	call   c001df31 <Thr::executeDLL(unsigned long, void*)>
c001b8f8:	83 c4 10             	add    esp,0x10
c001b8fb:	31 c0                	xor    eax,eax
c001b8fd:	31 d2                	xor    edx,edx
c001b8ff:	59                   	pop    ecx
c001b900:	5b                   	pop    ebx
c001b901:	5e                   	pop    esi
c001b902:	c3                   	ret    

c001b903 <Sys::read(regs*)>:
c001b903:	57                   	push   edi
c001b904:	56                   	push   esi
c001b905:	53                   	push   ebx
c001b906:	83 ec 10             	sub    esp,0x10
c001b909:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b90d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b910:	83 f8 02             	cmp    eax,0x2
c001b913:	77 10                	ja     c001b925 <Sys::read(regs*)+0x22>
c001b915:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b91a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b91d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b923:	eb 0e                	jmp    c001b933 <Sys::read(regs*)+0x30>
c001b925:	83 ec 0c             	sub    esp,0xc
c001b928:	50                   	push   eax
c001b929:	e8 05 60 ff ff       	call   c0011933 <getFromFileDescriptor(int)>
c001b92e:	83 c4 10             	add    esp,0x10
c001b931:	89 c1                	mov    ecx,eax
c001b933:	83 c8 ff             	or     eax,0xffffffff
c001b936:	85 c9                	test   ecx,ecx
c001b938:	89 c2                	mov    edx,eax
c001b93a:	74 28                	je     c001b964 <Sys::read(regs*)+0x61>
c001b93c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b944:	31 ff                	xor    edi,edi
c001b946:	83 ec 0c             	sub    esp,0xc
c001b949:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b94b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b94f:	52                   	push   edx
c001b950:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b953:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b956:	57                   	push   edi
c001b957:	56                   	push   esi
c001b958:	51                   	push   ecx
c001b959:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b95c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b960:	83 c4 20             	add    esp,0x20
c001b963:	99                   	cdq    
c001b964:	83 c4 10             	add    esp,0x10
c001b967:	5b                   	pop    ebx
c001b968:	5e                   	pop    esi
c001b969:	5f                   	pop    edi
c001b96a:	c3                   	ret    

c001b96b <Sys::sbrk(regs*)>:
c001b96b:	56                   	push   esi
c001b96c:	53                   	push   ebx
c001b96d:	50                   	push   eax
c001b96e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b973:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b977:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b97a:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b97d:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b983:	85 db                	test   ebx,ebx
c001b985:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b988:	74 02                	je     c001b98c <Sys::sbrk(regs*)+0x21>
c001b98a:	79 06                	jns    c001b992 <Sys::sbrk(regs*)+0x27>
c001b98c:	89 f0                	mov    eax,esi
c001b98e:	31 d2                	xor    edx,edx
c001b990:	eb 2a                	jmp    c001b9bc <Sys::sbrk(regs*)+0x51>
c001b992:	83 c8 ff             	or     eax,0xffffffff
c001b995:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b99b:	89 c2                	mov    edx,eax
c001b99d:	77 1d                	ja     c001b9bc <Sys::sbrk(regs*)+0x51>
c001b99f:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b9a5:	50                   	push   eax
c001b9a6:	c1 ea 0c             	shr    edx,0xc
c001b9a9:	68 07 0c 00 00       	push   0xc07
c001b9ae:	52                   	push   edx
c001b9af:	51                   	push   ecx
c001b9b0:	e8 0d 6a ff ff       	call   c00123c2 <VAS::allocatePages(int, int)>
c001b9b5:	89 f0                	mov    eax,esi
c001b9b7:	31 d2                	xor    edx,edx
c001b9b9:	83 c4 10             	add    esp,0x10
c001b9bc:	59                   	pop    ecx
c001b9bd:	5b                   	pop    ebx
c001b9be:	5e                   	pop    esi
c001b9bf:	c3                   	ret    

c001b9c0 <Sys::setCwd(regs*)>:
c001b9c0:	83 ec 14             	sub    esp,0x14
c001b9c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9c7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b9ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9cf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9d2:	e8 88 7d ff ff       	call   c001375f <Fs::setcwd(Process*, char*)>
c001b9d7:	83 c4 1c             	add    esp,0x1c
c001b9da:	99                   	cdq    
c001b9db:	c3                   	ret    

c001b9dc <Sys::setTime(regs*)>:
c001b9dc:	55                   	push   ebp
c001b9dd:	31 d2                	xor    edx,edx
c001b9df:	57                   	push   edi
c001b9e0:	bf 18 00 00 00       	mov    edi,0x18
c001b9e5:	56                   	push   esi
c001b9e6:	53                   	push   ebx
c001b9e7:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b9ec:	83 ec 30             	sub    esp,0x30
c001b9ef:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b9f3:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b9f6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b9f9:	f7 f3                	div    ebx
c001b9fb:	89 d6                	mov    esi,edx
c001b9fd:	31 d2                	xor    edx,edx
c001b9ff:	f7 f3                	div    ebx
c001ba01:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ba04:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ba08:	bb 10 0e 00 00       	mov    ebx,0xe10
c001ba0d:	31 d2                	xor    edx,edx
c001ba0f:	f7 f3                	div    ebx
c001ba11:	31 d2                	xor    edx,edx
c001ba13:	bb 0c 00 00 00       	mov    ebx,0xc
c001ba18:	f7 f7                	div    edi
c001ba1a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ba1d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ba21:	0f b7 cd             	movzx  ecx,bp
c001ba24:	56                   	push   esi
c001ba25:	89 c7                	mov    edi,eax
c001ba27:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ba2b:	c1 e6 10             	shl    esi,0x10
c001ba2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba32:	83 e7 1f             	and    edi,0x1f
c001ba35:	51                   	push   ecx
c001ba36:	47                   	inc    edi
c001ba37:	c1 e8 05             	shr    eax,0x5
c001ba3a:	31 d2                	xor    edx,edx
c001ba3c:	f7 f3                	div    ebx
c001ba3e:	31 db                	xor    ebx,ebx
c001ba40:	52                   	push   edx
c001ba41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001ba45:	57                   	push   edi
c001ba46:	68 ad c9 02 c0       	push   0xc002c9ad
c001ba4b:	e8 3f 74 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001ba50:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ba54:	89 f8                	mov    eax,edi
c001ba56:	31 c9                	xor    ecx,ecx
c001ba58:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ba5c:	88 c1                	mov    cl,al
c001ba5e:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001ba64:	88 d5                	mov    ch,dl
c001ba66:	c1 e0 10             	shl    eax,0x10
c001ba69:	0f b7 d1             	movzx  edx,cx
c001ba6c:	09 c2                	or     edx,eax
c001ba6e:	89 d8                	mov    eax,ebx
c001ba70:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001ba75:	09 f0                	or     eax,esi
c001ba77:	89 c3                	mov    ebx,eax
c001ba79:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001ba7d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ba81:	83 c4 18             	add    esp,0x18
c001ba84:	53                   	push   ebx
c001ba85:	52                   	push   edx
c001ba86:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ba8a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001ba8e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ba92:	e8 ea 83 ff ff       	call   c0013e81 <datetimeToSeconds(datetime_t)>
c001ba97:	83 c4 0c             	add    esp,0xc
c001ba9a:	52                   	push   edx
c001ba9b:	50                   	push   eax
c001ba9c:	56                   	push   esi
c001ba9d:	e8 66 85 ff ff       	call   c0014008 <secondsToDatetime(unsigned long long)>
c001baa2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001baa6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001baaa:	51                   	push   ecx
c001baab:	89 d6                	mov    esi,edx
c001baad:	51                   	push   ecx
c001baae:	c1 ee 10             	shr    esi,0x10
c001bab1:	89 f3                	mov    ebx,esi
c001bab3:	0f b6 f3             	movzx  esi,bl
c001bab6:	56                   	push   esi
c001bab7:	0f b6 f6             	movzx  esi,dh
c001baba:	0f b6 d2             	movzx  edx,dl
c001babd:	56                   	push   esi
c001babe:	52                   	push   edx
c001babf:	89 c2                	mov    edx,eax
c001bac1:	c1 ea 10             	shr    edx,0x10
c001bac4:	52                   	push   edx
c001bac5:	0f b6 d4             	movzx  edx,ah
c001bac8:	0f b6 c0             	movzx  eax,al
c001bacb:	52                   	push   edx
c001bacc:	50                   	push   eax
c001bacd:	68 c9 c9 02 c0       	push   0xc002c9c9
c001bad2:	e8 b8 73 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001bad7:	83 c4 2c             	add    esp,0x2c
c001bada:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c001badf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001bae3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001bae7:	53                   	push   ebx
c001bae8:	51                   	push   ecx
c001bae9:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001baef:	e8 b4 84 ff ff       	call   c0013fa8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001baf4:	83 f0 01             	xor    eax,0x1
c001baf7:	31 d2                	xor    edx,edx
c001baf9:	0f b6 c0             	movzx  eax,al
c001bafc:	83 c4 3c             	add    esp,0x3c
c001baff:	5b                   	pop    ebx
c001bb00:	5e                   	pop    esi
c001bb01:	5f                   	pop    edi
c001bb02:	5d                   	pop    ebp
c001bb03:	c3                   	ret    

c001bb04 <Sys::timezone(regs*)>:
c001bb04:	53                   	push   ebx
c001bb05:	83 ec 08             	sub    esp,0x8
c001bb08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb0c:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001bb10:	75 17                	jne    c001bb29 <Sys::timezone(regs*)+0x25>
c001bb12:	83 ec 0c             	sub    esp,0xc
c001bb15:	68 e5 c9 02 c0       	push   0xc002c9e5
c001bb1a:	e8 70 73 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001bb1f:	83 c8 ff             	or     eax,0xffffffff
c001bb22:	83 c4 10             	add    esp,0x10
c001bb25:	89 c2                	mov    edx,eax
c001bb27:	eb 20                	jmp    c001bb49 <Sys::timezone(regs*)+0x45>
c001bb29:	83 ec 0c             	sub    esp,0xc
c001bb2c:	68 1d ca 02 c0       	push   0xc002ca1d
c001bb31:	e8 59 73 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001bb36:	58                   	pop    eax
c001bb37:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001bb3a:	e8 cb 81 ff ff       	call   c0013d0a <User::loadClockSettings(int)>
c001bb3f:	83 c4 10             	add    esp,0x10
c001bb42:	b8 01 00 00 00       	mov    eax,0x1
c001bb47:	31 d2                	xor    edx,edx
c001bb49:	83 c4 08             	add    esp,0x8
c001bb4c:	5b                   	pop    ebx
c001bb4d:	c3                   	ret    

c001bb4e <Sys::write(regs*)>:
c001bb4e:	57                   	push   edi
c001bb4f:	56                   	push   esi
c001bb50:	53                   	push   ebx
c001bb51:	83 ec 10             	sub    esp,0x10
c001bb54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb58:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb5b:	83 f8 02             	cmp    eax,0x2
c001bb5e:	77 10                	ja     c001bb70 <Sys::write(regs*)+0x22>
c001bb60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb65:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb68:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001bb6e:	eb 0e                	jmp    c001bb7e <Sys::write(regs*)+0x30>
c001bb70:	83 ec 0c             	sub    esp,0xc
c001bb73:	50                   	push   eax
c001bb74:	e8 ba 5d ff ff       	call   c0011933 <getFromFileDescriptor(int)>
c001bb79:	83 c4 10             	add    esp,0x10
c001bb7c:	89 c1                	mov    ecx,eax
c001bb7e:	83 c8 ff             	or     eax,0xffffffff
c001bb81:	85 c9                	test   ecx,ecx
c001bb83:	89 c2                	mov    edx,eax
c001bb85:	74 28                	je     c001bbaf <Sys::write(regs*)+0x61>
c001bb87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bb8f:	31 ff                	xor    edi,edi
c001bb91:	83 ec 0c             	sub    esp,0xc
c001bb94:	8b 01                	mov    eax,DWORD PTR [ecx]
c001bb96:	8d 54 24 18          	lea    edx,[esp+0x18]
c001bb9a:	52                   	push   edx
c001bb9b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb9e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001bba1:	57                   	push   edi
c001bba2:	56                   	push   esi
c001bba3:	51                   	push   ecx
c001bba4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001bba7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bbab:	83 c4 20             	add    esp,0x20
c001bbae:	99                   	cdq    
c001bbaf:	83 c4 10             	add    esp,0x10
c001bbb2:	5b                   	pop    ebx
c001bbb3:	5e                   	pop    esi
c001bbb4:	5f                   	pop    edi
c001bbb5:	c3                   	ret    

c001bbb6 <Sys::wsbe(regs*)>:
c001bbb6:	57                   	push   edi
c001bbb7:	b9 0b 00 00 00       	mov    ecx,0xb
c001bbbc:	56                   	push   esi
c001bbbd:	be 5c ca 02 c0       	mov    esi,0xc002ca5c
c001bbc2:	53                   	push   ebx
c001bbc3:	83 ec 30             	sub    esp,0x30
c001bbc6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bbca:	fc                   	cld    
c001bbcb:	83 ec 0c             	sub    esp,0xc
c001bbce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bbd0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bbd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbd9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbdc:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001bbe2:	8b 06                	mov    eax,DWORD PTR [esi]
c001bbe4:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001bbe7:	57                   	push   edi
c001bbe8:	e8 9b 4b fe ff       	call   c0000788 <strlen>
c001bbed:	5a                   	pop    edx
c001bbee:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001bbf2:	52                   	push   edx
c001bbf3:	31 d2                	xor    edx,edx
c001bbf5:	57                   	push   edi
c001bbf6:	52                   	push   edx
c001bbf7:	50                   	push   eax
c001bbf8:	56                   	push   esi
c001bbf9:	ff d3                	call   ebx
c001bbfb:	83 c4 14             	add    esp,0x14
c001bbfe:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bc02:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc05:	e8 0d 34 00 00       	call   c001f017 <terminateTask(int)>
c001bc0a:	83 c4 40             	add    esp,0x40
c001bc0d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bc12:	5b                   	pop    ebx
c001bc13:	31 d2                	xor    edx,edx
c001bc15:	5e                   	pop    esi
c001bc16:	5f                   	pop    edi
c001bc17:	c3                   	ret    

c001bc18 <Sys::yield(regs*)>:
c001bc18:	57                   	push   edi
c001bc19:	56                   	push   esi
c001bc1a:	53                   	push   ebx
c001bc1b:	fa                   	cli    
c001bc1c:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001bc22:	e8 bd 2a 00 00       	call   c001e6e4 <schedule()>
c001bc27:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001bc2c:	48                   	dec    eax
c001bc2d:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001bc32:	75 01                	jne    c001bc35 <Sys::yield(regs*)+0x1d>
c001bc34:	fb                   	sti    
c001bc35:	8b 35 90 f7 02 c0    	mov    esi,DWORD PTR ds:0xc002f790
c001bc3b:	8b 3d 94 f7 02 c0    	mov    edi,DWORD PTR ds:0xc002f794
c001bc41:	89 f0                	mov    eax,esi
c001bc43:	89 fb                	mov    ebx,edi
c001bc45:	89 f1                	mov    ecx,esi
c001bc47:	c1 e0 07             	shl    eax,0x7
c001bc4a:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001bc4e:	25 80 30 0f 00       	and    eax,0xf3080
c001bc53:	c1 eb 17             	shr    ebx,0x17
c001bc56:	31 c8                	xor    eax,ecx
c001bc58:	89 da                	mov    edx,ebx
c001bc5a:	5b                   	pop    ebx
c001bc5b:	5e                   	pop    esi
c001bc5c:	5f                   	pop    edi
c001bc5d:	c3                   	ret    

c001bc5e <sysCallSeekDir(regs*)>:
c001bc5e:	31 c0                	xor    eax,eax
c001bc60:	31 d2                	xor    edx,edx
c001bc62:	c3                   	ret    

c001bc63 <sysCallTellDir(regs*)>:
c001bc63:	31 c0                	xor    eax,eax
c001bc65:	31 d2                	xor    edx,edx
c001bc67:	c3                   	ret    

c001bc68 <sysCallVerify(regs*)>:
c001bc68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc6c:	31 d2                	xor    edx,edx
c001bc6e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc71:	c3                   	ret    

c001bc72 <sysFormatDisk(regs*)>:
c001bc72:	56                   	push   esi
c001bc73:	53                   	push   ebx
c001bc74:	53                   	push   ebx
c001bc75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc79:	8b 1d 94 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f294
c001bc7f:	eb 25                	jmp    c001bca6 <sysFormatDisk(regs*)+0x34>
c001bc81:	83 ec 0c             	sub    esp,0xc
c001bc84:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bc87:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bc89:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001bc8c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bc8f:	50                   	push   eax
c001bc90:	ff 34 85 20 f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd08e0]
c001bc97:	53                   	push   ebx
c001bc98:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001bc9b:	83 c4 20             	add    esp,0x20
c001bc9e:	83 f8 08             	cmp    eax,0x8
c001bca1:	75 12                	jne    c001bcb5 <sysFormatDisk(regs*)+0x43>
c001bca3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001bca6:	85 db                	test   ebx,ebx
c001bca8:	75 d7                	jne    c001bc81 <sysFormatDisk(regs*)+0xf>
c001bcaa:	59                   	pop    ecx
c001bcab:	b8 03 00 00 00       	mov    eax,0x3
c001bcb0:	31 d2                	xor    edx,edx
c001bcb2:	5b                   	pop    ebx
c001bcb3:	5e                   	pop    esi
c001bcb4:	c3                   	ret    
c001bcb5:	85 c0                	test   eax,eax
c001bcb7:	74 1b                	je     c001bcd4 <sysFormatDisk(regs*)+0x62>
c001bcb9:	83 f8 09             	cmp    eax,0x9
c001bcbc:	74 0b                	je     c001bcc9 <sysFormatDisk(regs*)+0x57>
c001bcbe:	59                   	pop    ecx
c001bcbf:	b8 02 00 00 00       	mov    eax,0x2
c001bcc4:	31 d2                	xor    edx,edx
c001bcc6:	5b                   	pop    ebx
c001bcc7:	5e                   	pop    esi
c001bcc8:	c3                   	ret    
c001bcc9:	59                   	pop    ecx
c001bcca:	b8 01 00 00 00       	mov    eax,0x1
c001bccf:	31 d2                	xor    edx,edx
c001bcd1:	5b                   	pop    ebx
c001bcd2:	5e                   	pop    esi
c001bcd3:	c3                   	ret    
c001bcd4:	59                   	pop    ecx
c001bcd5:	31 c0                	xor    eax,eax
c001bcd7:	31 d2                	xor    edx,edx
c001bcd9:	5b                   	pop    ebx
c001bcda:	5e                   	pop    esi
c001bcdb:	c3                   	ret    

c001bcdc <sysSetDiskVolumeLabel(regs*)>:
c001bcdc:	56                   	push   esi
c001bcdd:	53                   	push   ebx
c001bcde:	53                   	push   ebx
c001bcdf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bce3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bce6:	83 f8 19             	cmp    eax,0x19
c001bce9:	77 29                	ja     c001bd14 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bceb:	8b 0c 85 20 f7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd08e0]
c001bcf2:	85 c9                	test   ecx,ecx
c001bcf4:	74 1e                	je     c001bd14 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bcf6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bcf9:	85 d2                	test   edx,edx
c001bcfb:	74 17                	je     c001bd14 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bcfd:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bd03:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bd05:	52                   	push   edx
c001bd06:	50                   	push   eax
c001bd07:	51                   	push   ecx
c001bd08:	53                   	push   ebx
c001bd09:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bd0c:	83 c4 10             	add    esp,0x10
c001bd0f:	99                   	cdq    
c001bd10:	59                   	pop    ecx
c001bd11:	5b                   	pop    ebx
c001bd12:	5e                   	pop    esi
c001bd13:	c3                   	ret    
c001bd14:	59                   	pop    ecx
c001bd15:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bd1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd1f:	5b                   	pop    ebx
c001bd20:	5e                   	pop    esi
c001bd21:	c3                   	ret    

c001bd22 <sysGetDiskVolumeLabel(regs*)>:
c001bd22:	57                   	push   edi
c001bd23:	56                   	push   esi
c001bd24:	53                   	push   ebx
c001bd25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd29:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bd2c:	83 fa 19             	cmp    edx,0x19
c001bd2f:	77 34                	ja     c001bd65 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd31:	8b 0c 95 20 f7 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd08e0]
c001bd38:	85 c9                	test   ecx,ecx
c001bd3a:	74 29                	je     c001bd65 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd3c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bd3f:	85 db                	test   ebx,ebx
c001bd41:	74 22                	je     c001bd65 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd43:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bd46:	85 c0                	test   eax,eax
c001bd48:	74 1b                	je     c001bd65 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd4a:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bd50:	83 ec 0c             	sub    esp,0xc
c001bd53:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bd55:	50                   	push   eax
c001bd56:	53                   	push   ebx
c001bd57:	52                   	push   edx
c001bd58:	51                   	push   ecx
c001bd59:	56                   	push   esi
c001bd5a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bd5d:	83 c4 20             	add    esp,0x20
c001bd60:	99                   	cdq    
c001bd61:	5b                   	pop    ebx
c001bd62:	5e                   	pop    esi
c001bd63:	5f                   	pop    edi
c001bd64:	c3                   	ret    
c001bd65:	5b                   	pop    ebx
c001bd66:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bd6b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd70:	5e                   	pop    esi
c001bd71:	5f                   	pop    edi
c001bd72:	c3                   	ret    

c001bd73 <sysShutdown(regs*)>:
c001bd73:	83 ec 0c             	sub    esp,0xc
c001bd76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd7a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd7d:	85 c0                	test   eax,eax
c001bd7f:	74 18                	je     c001bd99 <sysShutdown(regs*)+0x26>
c001bd81:	83 f8 01             	cmp    eax,0x1
c001bd84:	74 38                	je     c001bdbe <sysShutdown(regs*)+0x4b>
c001bd86:	83 f8 02             	cmp    eax,0x2
c001bd89:	74 24                	je     c001bdaf <sysShutdown(regs*)+0x3c>
c001bd8b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd90:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd95:	83 c4 0c             	add    esp,0xc
c001bd98:	c3                   	ret    
c001bd99:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c001bd9e:	8b 10                	mov    edx,DWORD PTR [eax]
c001bda0:	6a 00                	push   0x0
c001bda2:	6a 00                	push   0x0
c001bda4:	6a 00                	push   0x0
c001bda6:	50                   	push   eax
c001bda7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bdaa:	83 c4 10             	add    esp,0x10
c001bdad:	eb dc                	jmp    c001bd8b <sysShutdown(regs*)+0x18>
c001bdaf:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c001bdb4:	8b 10                	mov    edx,DWORD PTR [eax]
c001bdb6:	6a 00                	push   0x0
c001bdb8:	6a 00                	push   0x0
c001bdba:	6a 01                	push   0x1
c001bdbc:	eb e8                	jmp    c001bda6 <sysShutdown(regs*)+0x33>
c001bdbe:	a1 c0 17 03 c0       	mov    eax,ds:0xc00317c0
c001bdc3:	85 c0                	test   eax,eax
c001bdc5:	74 02                	je     c001bdc9 <sysShutdown(regs*)+0x56>
c001bdc7:	ff d0                	call   eax
c001bdc9:	31 c0                	xor    eax,eax
c001bdcb:	31 d2                	xor    edx,edx
c001bdcd:	83 c4 0c             	add    esp,0xc
c001bdd0:	c3                   	ret    

c001bdd1 <sysCallRealpath(regs*)>:
c001bdd1:	83 ec 0c             	sub    esp,0xc
c001bdd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdd8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bddb:	85 d2                	test   edx,edx
c001bddd:	74 07                	je     c001bde6 <sysCallRealpath(regs*)+0x15>
c001bddf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bde2:	85 c0                	test   eax,eax
c001bde4:	75 0b                	jne    c001bdf1 <sysCallRealpath(regs*)+0x20>
c001bde6:	b8 01 00 00 00       	mov    eax,0x1
c001bdeb:	31 d2                	xor    edx,edx
c001bded:	83 c4 0c             	add    esp,0xc
c001bdf0:	c3                   	ret    
c001bdf1:	51                   	push   ecx
c001bdf2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bdf8:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bdfb:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001be01:	51                   	push   ecx
c001be02:	52                   	push   edx
c001be03:	50                   	push   eax
c001be04:	e8 3b 74 ff ff       	call   c0013244 <Fs::standardiseFiles(char*, char const*, char const*)>
c001be09:	83 c4 10             	add    esp,0x10
c001be0c:	31 c0                	xor    eax,eax
c001be0e:	31 d2                	xor    edx,edx
c001be10:	83 c4 0c             	add    esp,0xc
c001be13:	c3                   	ret    

c001be14 <sysCallGetArgc(regs*)>:
c001be14:	83 ec 14             	sub    esp,0x14
c001be17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be1c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be1f:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001be25:	68 88 ca 02 c0       	push   0xc002ca88
c001be2a:	e8 60 70 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001be2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be34:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be37:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001be3d:	83 c4 1c             	add    esp,0x1c
c001be40:	99                   	cdq    
c001be41:	c3                   	ret    

c001be42 <sysCallReadDir(regs*)>:
c001be42:	53                   	push   ebx
c001be43:	83 ec 18             	sub    esp,0x18
c001be46:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be4a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001be4d:	83 f8 02             	cmp    eax,0x2
c001be50:	76 53                	jbe    c001bea5 <sysCallReadDir(regs*)+0x63>
c001be52:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be55:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001be5b:	77 4f                	ja     c001beac <sysCallReadDir(regs*)+0x6a>
c001be5d:	83 ec 0c             	sub    esp,0xc
c001be60:	50                   	push   eax
c001be61:	e8 cd 5a ff ff       	call   c0011933 <getFromFileDescriptor(int)>
c001be66:	83 c4 10             	add    esp,0x10
c001be69:	85 c0                	test   eax,eax
c001be6b:	74 50                	je     c001bebd <sysCallReadDir(regs*)+0x7b>
c001be6d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001be75:	83 ec 0c             	sub    esp,0xc
c001be78:	8b 10                	mov    edx,DWORD PTR [eax]
c001be7a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001be7e:	51                   	push   ecx
c001be7f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be82:	6a 00                	push   0x0
c001be84:	68 10 01 00 00       	push   0x110
c001be89:	50                   	push   eax
c001be8a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001be8d:	83 c4 20             	add    esp,0x20
c001be90:	85 c0                	test   eax,eax
c001be92:	74 38                	je     c001becc <sysCallReadDir(regs*)+0x8a>
c001be94:	83 f8 07             	cmp    eax,0x7
c001be97:	74 0c                	je     c001bea5 <sysCallReadDir(regs*)+0x63>
c001be99:	b8 02 00 00 00       	mov    eax,0x2
c001be9e:	31 d2                	xor    edx,edx
c001bea0:	83 c4 18             	add    esp,0x18
c001bea3:	5b                   	pop    ebx
c001bea4:	c3                   	ret    
c001bea5:	b8 01 00 00 00       	mov    eax,0x1
c001beaa:	eb f2                	jmp    c001be9e <sysCallReadDir(regs*)+0x5c>
c001beac:	83 ec 08             	sub    esp,0x8
c001beaf:	52                   	push   edx
c001beb0:	68 ac cb 02 c0       	push   0xc002cbac
c001beb5:	e8 d5 6f ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001beba:	83 c4 10             	add    esp,0x10
c001bebd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bec2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bec7:	83 c4 18             	add    esp,0x18
c001beca:	5b                   	pop    ebx
c001becb:	c3                   	ret    
c001becc:	31 c0                	xor    eax,eax
c001bece:	eb ce                	jmp    c001be9e <sysCallReadDir(regs*)+0x5c>

c001bed0 <sysCallIsATTY(regs*)>:
c001bed0:	83 ec 0c             	sub    esp,0xc
c001bed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bed7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001beda:	83 f8 02             	cmp    eax,0x2
c001bedd:	76 07                	jbe    c001bee6 <sysCallIsATTY(regs*)+0x16>
c001bedf:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bee4:	75 26                	jne    c001bf0c <sysCallIsATTY(regs*)+0x3c>
c001bee6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beeb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beee:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bef4:	85 c0                	test   eax,eax
c001bef6:	74 24                	je     c001bf1c <sysCallIsATTY(regs*)+0x4c>
c001bef8:	83 ec 0c             	sub    esp,0xc
c001befb:	8b 10                	mov    edx,DWORD PTR [eax]
c001befd:	50                   	push   eax
c001befe:	ff 12                	call   DWORD PTR [edx]
c001bf00:	31 d2                	xor    edx,edx
c001bf02:	0f b6 c0             	movzx  eax,al
c001bf05:	83 c4 10             	add    esp,0x10
c001bf08:	83 c4 0c             	add    esp,0xc
c001bf0b:	c3                   	ret    
c001bf0c:	83 ec 0c             	sub    esp,0xc
c001bf0f:	50                   	push   eax
c001bf10:	e8 1e 5a ff ff       	call   c0011933 <getFromFileDescriptor(int)>
c001bf15:	83 c4 10             	add    esp,0x10
c001bf18:	85 c0                	test   eax,eax
c001bf1a:	75 dc                	jne    c001bef8 <sysCallIsATTY(regs*)+0x28>
c001bf1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf21:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf26:	83 c4 0c             	add    esp,0xc
c001bf29:	c3                   	ret    

c001bf2a <sysCallSeek(regs*)>:
c001bf2a:	53                   	push   ebx
c001bf2b:	83 ec 08             	sub    esp,0x8
c001bf2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf32:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf35:	83 f8 02             	cmp    eax,0x2
c001bf38:	76 4a                	jbe    c001bf84 <sysCallSeek(regs*)+0x5a>
c001bf3a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf3f:	77 32                	ja     c001bf73 <sysCallSeek(regs*)+0x49>
c001bf41:	83 ec 0c             	sub    esp,0xc
c001bf44:	50                   	push   eax
c001bf45:	e8 e9 59 ff ff       	call   c0011933 <getFromFileDescriptor(int)>
c001bf4a:	83 c4 0c             	add    esp,0xc
c001bf4d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bf50:	31 db                	xor    ebx,ebx
c001bf52:	53                   	push   ebx
c001bf53:	51                   	push   ecx
c001bf54:	50                   	push   eax
c001bf55:	e8 b6 75 ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001bf5a:	83 c4 10             	add    esp,0x10
c001bf5d:	85 c0                	test   eax,eax
c001bf5f:	0f 95 c0             	setne  al
c001bf62:	31 d2                	xor    edx,edx
c001bf64:	0f b6 c0             	movzx  eax,al
c001bf67:	f7 d8                	neg    eax
c001bf69:	83 d2 00             	adc    edx,0x0
c001bf6c:	83 c4 08             	add    esp,0x8
c001bf6f:	f7 da                	neg    edx
c001bf71:	5b                   	pop    ebx
c001bf72:	c3                   	ret    
c001bf73:	83 ec 08             	sub    esp,0x8
c001bf76:	50                   	push   eax
c001bf77:	68 93 ca 02 c0       	push   0xc002ca93
c001bf7c:	e8 0e 6f ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001bf81:	83 c4 10             	add    esp,0x10
c001bf84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf89:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf8e:	83 c4 08             	add    esp,0x8
c001bf91:	5b                   	pop    ebx
c001bf92:	c3                   	ret    

c001bf93 <sysCallTell(regs*)>:
c001bf93:	53                   	push   ebx
c001bf94:	83 ec 08             	sub    esp,0x8
c001bf97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf9b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf9e:	83 f8 02             	cmp    eax,0x2
c001bfa1:	76 5e                	jbe    c001c001 <sysCallTell(regs*)+0x6e>
c001bfa3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bfa8:	77 2d                	ja     c001bfd7 <sysCallTell(regs*)+0x44>
c001bfaa:	83 ec 0c             	sub    esp,0xc
c001bfad:	50                   	push   eax
c001bfae:	e8 80 59 ff ff       	call   c0011933 <getFromFileDescriptor(int)>
c001bfb3:	5a                   	pop    edx
c001bfb4:	59                   	pop    ecx
c001bfb5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bfb8:	50                   	push   eax
c001bfb9:	e8 a8 75 ff ff       	call   c0013566 <File::tell(unsigned long long*)>
c001bfbe:	83 c4 10             	add    esp,0x10
c001bfc1:	85 c0                	test   eax,eax
c001bfc3:	0f 95 c0             	setne  al
c001bfc6:	31 d2                	xor    edx,edx
c001bfc8:	0f b6 c0             	movzx  eax,al
c001bfcb:	f7 d8                	neg    eax
c001bfcd:	83 d2 00             	adc    edx,0x0
c001bfd0:	83 c4 08             	add    esp,0x8
c001bfd3:	f7 da                	neg    edx
c001bfd5:	5b                   	pop    ebx
c001bfd6:	c3                   	ret    
c001bfd7:	83 ec 08             	sub    esp,0x8
c001bfda:	50                   	push   eax
c001bfdb:	68 ad ca 02 c0       	push   0xc002caad
c001bfe0:	e8 aa 6e ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001bfe5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bfe8:	83 c4 10             	add    esp,0x10
c001bfeb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bff1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bff8:	31 d2                	xor    edx,edx
c001bffa:	31 c0                	xor    eax,eax
c001bffc:	83 c4 08             	add    esp,0x8
c001bfff:	5b                   	pop    ebx
c001c000:	c3                   	ret    
c001c001:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c006:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c00b:	83 c4 08             	add    esp,0x8
c001c00e:	5b                   	pop    ebx
c001c00f:	c3                   	ret    

c001c010 <sysCallSize(regs*)>:
c001c010:	53                   	push   ebx
c001c011:	83 ec 18             	sub    esp,0x18
c001c014:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c018:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c01b:	83 f8 02             	cmp    eax,0x2
c001c01e:	76 64                	jbe    c001c084 <sysCallSize(regs*)+0x74>
c001c020:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c025:	77 33                	ja     c001c05a <sysCallSize(regs*)+0x4a>
c001c027:	83 ec 0c             	sub    esp,0xc
c001c02a:	50                   	push   eax
c001c02b:	e8 03 59 ff ff       	call   c0011933 <getFromFileDescriptor(int)>
c001c030:	83 c4 0c             	add    esp,0xc
c001c033:	8d 54 24 13          	lea    edx,[esp+0x13]
c001c037:	52                   	push   edx
c001c038:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c03b:	50                   	push   eax
c001c03c:	e8 bd 76 ff ff       	call   c00136fe <File::stat(unsigned long long*, bool*)>
c001c041:	83 c4 10             	add    esp,0x10
c001c044:	85 c0                	test   eax,eax
c001c046:	0f 95 c0             	setne  al
c001c049:	31 d2                	xor    edx,edx
c001c04b:	0f b6 c0             	movzx  eax,al
c001c04e:	f7 d8                	neg    eax
c001c050:	83 d2 00             	adc    edx,0x0
c001c053:	83 c4 18             	add    esp,0x18
c001c056:	f7 da                	neg    edx
c001c058:	5b                   	pop    ebx
c001c059:	c3                   	ret    
c001c05a:	83 ec 08             	sub    esp,0x8
c001c05d:	50                   	push   eax
c001c05e:	68 c7 ca 02 c0       	push   0xc002cac7
c001c063:	e8 27 6e ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c068:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001c06b:	83 c4 10             	add    esp,0x10
c001c06e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c074:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c07b:	31 d2                	xor    edx,edx
c001c07d:	31 c0                	xor    eax,eax
c001c07f:	83 c4 18             	add    esp,0x18
c001c082:	5b                   	pop    ebx
c001c083:	c3                   	ret    
c001c084:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c089:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c08e:	83 c4 18             	add    esp,0x18
c001c091:	5b                   	pop    ebx
c001c092:	c3                   	ret    

c001c093 <sysCallSizeFromFilename(regs*)>:
c001c093:	57                   	push   edi
c001c094:	56                   	push   esi
c001c095:	53                   	push   ebx
c001c096:	83 ec 20             	sub    esp,0x20
c001c099:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c09d:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001c0a0:	83 fb 02             	cmp    ebx,0x2
c001c0a3:	0f 86 99 00 00 00    	jbe    c001c142 <sysCallSizeFromFilename(regs*)+0xaf>
c001c0a9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001c0af:	77 65                	ja     c001c116 <sysCallSizeFromFilename(regs*)+0x83>
c001c0b1:	83 ec 0c             	sub    esp,0xc
c001c0b4:	68 14 01 00 00       	push   0x114
c001c0b9:	e8 02 38 ff ff       	call   c000f8c0 <malloc>
c001c0be:	83 c4 0c             	add    esp,0xc
c001c0c1:	89 c6                	mov    esi,eax
c001c0c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0c8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0cb:	53                   	push   ebx
c001c0cc:	56                   	push   esi
c001c0cd:	e8 1c 73 ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001c0d2:	83 c4 0c             	add    esp,0xc
c001c0d5:	8d 44 24 23          	lea    eax,[esp+0x23]
c001c0d9:	50                   	push   eax
c001c0da:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001c0dd:	56                   	push   esi
c001c0de:	e8 1b 76 ff ff       	call   c00136fe <File::stat(unsigned long long*, bool*)>
c001c0e3:	83 c4 10             	add    esp,0x10
c001c0e6:	85 f6                	test   esi,esi
c001c0e8:	74 14                	je     c001c0fe <sysCallSizeFromFilename(regs*)+0x6b>
c001c0ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0ee:	8b 16                	mov    edx,DWORD PTR [esi]
c001c0f0:	83 ec 0c             	sub    esp,0xc
c001c0f3:	56                   	push   esi
c001c0f4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c0f7:	83 c4 10             	add    esp,0x10
c001c0fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0fe:	85 c0                	test   eax,eax
c001c100:	0f 95 c0             	setne  al
c001c103:	31 d2                	xor    edx,edx
c001c105:	0f b6 c0             	movzx  eax,al
c001c108:	f7 d8                	neg    eax
c001c10a:	83 d2 00             	adc    edx,0x0
c001c10d:	83 c4 20             	add    esp,0x20
c001c110:	f7 da                	neg    edx
c001c112:	5b                   	pop    ebx
c001c113:	5e                   	pop    esi
c001c114:	5f                   	pop    edi
c001c115:	c3                   	ret    
c001c116:	83 ec 08             	sub    esp,0x8
c001c119:	53                   	push   ebx
c001c11a:	68 c7 ca 02 c0       	push   0xc002cac7
c001c11f:	e8 6b 6d ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c124:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001c127:	83 c4 10             	add    esp,0x10
c001c12a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c130:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c137:	31 d2                	xor    edx,edx
c001c139:	83 c4 20             	add    esp,0x20
c001c13c:	31 c0                	xor    eax,eax
c001c13e:	5b                   	pop    ebx
c001c13f:	5e                   	pop    esi
c001c140:	5f                   	pop    edi
c001c141:	c3                   	ret    
c001c142:	83 c4 20             	add    esp,0x20
c001c145:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c14a:	5b                   	pop    ebx
c001c14b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c150:	5e                   	pop    esi
c001c151:	5f                   	pop    edi
c001c152:	c3                   	ret    

c001c153 <sysCallClose(regs*)>:
c001c153:	53                   	push   ebx
c001c154:	83 ec 08             	sub    esp,0x8
c001c157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c15b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c15e:	83 f8 02             	cmp    eax,0x2
c001c161:	76 50                	jbe    c001c1b3 <sysCallClose(regs*)+0x60>
c001c163:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c168:	74 58                	je     c001c1c2 <sysCallClose(regs*)+0x6f>
c001c16a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c16f:	74 60                	je     c001c1d1 <sysCallClose(regs*)+0x7e>
c001c171:	77 2f                	ja     c001c1a2 <sysCallClose(regs*)+0x4f>
c001c173:	83 ec 0c             	sub    esp,0xc
c001c176:	50                   	push   eax
c001c177:	e8 b7 57 ff ff       	call   c0011933 <getFromFileDescriptor(int)>
c001c17c:	89 c3                	mov    ebx,eax
c001c17e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c181:	e8 2a 73 ff ff       	call   c00134b0 <File::close()>
c001c186:	83 c4 10             	add    esp,0x10
c001c189:	85 db                	test   ebx,ebx
c001c18b:	74 0c                	je     c001c199 <sysCallClose(regs*)+0x46>
c001c18d:	83 ec 0c             	sub    esp,0xc
c001c190:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c192:	53                   	push   ebx
c001c193:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c196:	83 c4 10             	add    esp,0x10
c001c199:	31 c0                	xor    eax,eax
c001c19b:	31 d2                	xor    edx,edx
c001c19d:	83 c4 08             	add    esp,0x8
c001c1a0:	5b                   	pop    ebx
c001c1a1:	c3                   	ret    
c001c1a2:	83 ec 08             	sub    esp,0x8
c001c1a5:	50                   	push   eax
c001c1a6:	68 d0 cb 02 c0       	push   0xc002cbd0
c001c1ab:	e8 df 6c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c1b0:	83 c4 10             	add    esp,0x10
c001c1b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c1b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c1bd:	83 c4 08             	add    esp,0x8
c001c1c0:	5b                   	pop    ebx
c001c1c1:	c3                   	ret    
c001c1c2:	83 ec 0c             	sub    esp,0xc
c001c1c5:	68 e2 ca 02 c0       	push   0xc002cae2
c001c1ca:	e8 c0 6c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c1cf:	eb c5                	jmp    c001c196 <sysCallClose(regs*)+0x43>
c001c1d1:	83 ec 0c             	sub    esp,0xc
c001c1d4:	68 f0 ca 02 c0       	push   0xc002caf0
c001c1d9:	eb ef                	jmp    c001c1ca <sysCallClose(regs*)+0x77>

c001c1db <sysCallOpenDir(regs*)>:
c001c1db:	56                   	push   esi
c001c1dc:	53                   	push   ebx
c001c1dd:	53                   	push   ebx
c001c1de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001c1e5:	85 f6                	test   esi,esi
c001c1e7:	74 59                	je     c001c242 <sysCallOpenDir(regs*)+0x67>
c001c1e9:	83 ec 0c             	sub    esp,0xc
c001c1ec:	68 14 01 00 00       	push   0x114
c001c1f1:	e8 ca 36 ff ff       	call   c000f8c0 <malloc>
c001c1f6:	83 c4 0c             	add    esp,0xc
c001c1f9:	89 c6                	mov    esi,eax
c001c1fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c200:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c203:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c206:	56                   	push   esi
c001c207:	e8 8e 76 ff ff       	call   c001389a <Directory::Directory(char const*, Process*)>
c001c20c:	83 c4 10             	add    esp,0x10
c001c20f:	85 f6                	test   esi,esi
c001c211:	74 2f                	je     c001c242 <sysCallOpenDir(regs*)+0x67>
c001c213:	83 ec 0c             	sub    esp,0xc
c001c216:	56                   	push   esi
c001c217:	e8 e2 76 ff ff       	call   c00138fe <Directory::open()>
c001c21c:	83 c4 10             	add    esp,0x10
c001c21f:	85 c0                	test   eax,eax
c001c221:	75 1f                	jne    c001c242 <sysCallOpenDir(regs*)+0x67>
c001c223:	83 ec 0c             	sub    esp,0xc
c001c226:	56                   	push   esi
c001c227:	e8 12 54 ff ff       	call   c001163e <UnixFile::getFileDescriptor()>
c001c22c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c22f:	83 c4 10             	add    esp,0x10
c001c232:	89 02                	mov    DWORD PTR [edx],eax
c001c234:	c1 f8 1f             	sar    eax,0x1f
c001c237:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c23a:	31 c0                	xor    eax,eax
c001c23c:	59                   	pop    ecx
c001c23d:	31 d2                	xor    edx,edx
c001c23f:	5b                   	pop    ebx
c001c240:	5e                   	pop    esi
c001c241:	c3                   	ret    
c001c242:	59                   	pop    ecx
c001c243:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c248:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c24d:	5b                   	pop    ebx
c001c24e:	5e                   	pop    esi
c001c24f:	c3                   	ret    

c001c250 <sysCallCloseDir(regs*)>:
c001c250:	53                   	push   ebx
c001c251:	83 ec 08             	sub    esp,0x8
c001c254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c258:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c25b:	83 f8 02             	cmp    eax,0x2
c001c25e:	76 47                	jbe    c001c2a7 <sysCallCloseDir(regs*)+0x57>
c001c260:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c265:	77 2f                	ja     c001c296 <sysCallCloseDir(regs*)+0x46>
c001c267:	83 ec 0c             	sub    esp,0xc
c001c26a:	50                   	push   eax
c001c26b:	e8 c3 56 ff ff       	call   c0011933 <getFromFileDescriptor(int)>
c001c270:	89 c3                	mov    ebx,eax
c001c272:	89 04 24             	mov    DWORD PTR [esp],eax
c001c275:	e8 e0 76 ff ff       	call   c001395a <Directory::close()>
c001c27a:	83 c4 10             	add    esp,0x10
c001c27d:	85 db                	test   ebx,ebx
c001c27f:	74 0c                	je     c001c28d <sysCallCloseDir(regs*)+0x3d>
c001c281:	83 ec 0c             	sub    esp,0xc
c001c284:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c286:	53                   	push   ebx
c001c287:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c28a:	83 c4 10             	add    esp,0x10
c001c28d:	31 c0                	xor    eax,eax
c001c28f:	31 d2                	xor    edx,edx
c001c291:	83 c4 08             	add    esp,0x8
c001c294:	5b                   	pop    ebx
c001c295:	c3                   	ret    
c001c296:	83 ec 08             	sub    esp,0x8
c001c299:	50                   	push   eax
c001c29a:	68 f8 cb 02 c0       	push   0xc002cbf8
c001c29f:	e8 eb 6b ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c2a4:	83 c4 10             	add    esp,0x10
c001c2a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c2ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2b1:	83 c4 08             	add    esp,0x8
c001c2b4:	5b                   	pop    ebx
c001c2b5:	c3                   	ret    

c001c2b6 <sysCallMakeDir(regs*)>:
c001c2b6:	56                   	push   esi
c001c2b7:	53                   	push   ebx
c001c2b8:	83 ec 10             	sub    esp,0x10
c001c2bb:	68 14 01 00 00       	push   0x114
c001c2c0:	e8 fb 35 ff ff       	call   c000f8c0 <malloc>
c001c2c5:	83 c4 0c             	add    esp,0xc
c001c2c8:	89 c3                	mov    ebx,eax
c001c2ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2cf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2d6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c2d9:	53                   	push   ebx
c001c2da:	e8 bb 75 ff ff       	call   c001389a <Directory::Directory(char const*, Process*)>
c001c2df:	83 c4 10             	add    esp,0x10
c001c2e2:	85 db                	test   ebx,ebx
c001c2e4:	74 32                	je     c001c318 <sysCallMakeDir(regs*)+0x62>
c001c2e6:	83 ec 0c             	sub    esp,0xc
c001c2e9:	53                   	push   ebx
c001c2ea:	e8 ef 77 ff ff       	call   c0013ade <Directory::create()>
c001c2ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2f2:	89 c6                	mov    esi,eax
c001c2f4:	e8 61 76 ff ff       	call   c001395a <Directory::close()>
c001c2f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c301:	83 c4 10             	add    esp,0x10
c001c304:	31 c0                	xor    eax,eax
c001c306:	59                   	pop    ecx
c001c307:	85 f6                	test   esi,esi
c001c309:	5b                   	pop    ebx
c001c30a:	0f 95 c0             	setne  al
c001c30d:	5e                   	pop    esi
c001c30e:	31 d2                	xor    edx,edx
c001c310:	f7 d8                	neg    eax
c001c312:	83 d2 00             	adc    edx,0x0
c001c315:	f7 da                	neg    edx
c001c317:	c3                   	ret    
c001c318:	59                   	pop    ecx
c001c319:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c31e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c323:	5b                   	pop    ebx
c001c324:	5e                   	pop    esi
c001c325:	c3                   	ret    

c001c326 <sysCallWait(regs*)>:
c001c326:	83 ec 10             	sub    esp,0x10
c001c329:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c32d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c330:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c333:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c336:	e8 d5 25 00 00       	call   c001e910 <waitTask(int, int*, int)>
c001c33b:	83 c4 1c             	add    esp,0x1c
c001c33e:	99                   	cdq    
c001c33f:	c3                   	ret    

c001c340 <sysCallNotImpl(regs*)>:
c001c340:	83 ec 18             	sub    esp,0x18
c001c343:	68 fe ca 02 c0       	push   0xc002cafe
c001c348:	e8 aa e5 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001c34d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c352:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c357:	83 c4 1c             	add    esp,0x1c
c001c35a:	c3                   	ret    

c001c35b <sysPanic(regs*)>:
c001c35b:	83 ec 18             	sub    esp,0x18
c001c35e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c362:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c365:	e8 8d e5 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001c36a:	c7 04 24 18 cb 02 c0 	mov    DWORD PTR [esp],0xc002cb18
c001c371:	e8 81 e5 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001c376:	b8 01 00 00 00       	mov    eax,0x1
c001c37b:	31 d2                	xor    edx,edx
c001c37d:	83 c4 1c             	add    esp,0x1c
c001c380:	c3                   	ret    

c001c381 <sysCallRmdir(regs*)>:
c001c381:	56                   	push   esi
c001c382:	53                   	push   ebx
c001c383:	83 ec 20             	sub    esp,0x20
c001c386:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c38a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c38d:	68 14 01 00 00       	push   0x114
c001c392:	e8 29 35 ff ff       	call   c000f8c0 <malloc>
c001c397:	83 c4 0c             	add    esp,0xc
c001c39a:	89 c3                	mov    ebx,eax
c001c39c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3a1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3a4:	56                   	push   esi
c001c3a5:	53                   	push   ebx
c001c3a6:	e8 43 70 ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001c3ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3ae:	e8 17 72 ff ff       	call   c00135ca <File::unlink()>
c001c3b3:	83 c4 10             	add    esp,0x10
c001c3b6:	85 db                	test   ebx,ebx
c001c3b8:	74 14                	je     c001c3ce <sysCallRmdir(regs*)+0x4d>
c001c3ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3be:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c3c0:	83 ec 0c             	sub    esp,0xc
c001c3c3:	53                   	push   ebx
c001c3c4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c3c7:	83 c4 10             	add    esp,0x10
c001c3ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3ce:	85 c0                	test   eax,eax
c001c3d0:	0f 95 c0             	setne  al
c001c3d3:	31 d2                	xor    edx,edx
c001c3d5:	0f b6 c0             	movzx  eax,al
c001c3d8:	f7 d8                	neg    eax
c001c3da:	83 d2 00             	adc    edx,0x0
c001c3dd:	83 c4 14             	add    esp,0x14
c001c3e0:	f7 da                	neg    edx
c001c3e2:	5b                   	pop    ebx
c001c3e3:	5e                   	pop    esi
c001c3e4:	c3                   	ret    

c001c3e5 <sysCallUnlink(regs*)>:
c001c3e5:	56                   	push   esi
c001c3e6:	53                   	push   ebx
c001c3e7:	83 ec 20             	sub    esp,0x20
c001c3ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c3ee:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c3f1:	68 14 01 00 00       	push   0x114
c001c3f6:	e8 c5 34 ff ff       	call   c000f8c0 <malloc>
c001c3fb:	83 c4 0c             	add    esp,0xc
c001c3fe:	89 c3                	mov    ebx,eax
c001c400:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c405:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c408:	56                   	push   esi
c001c409:	53                   	push   ebx
c001c40a:	e8 df 6f ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001c40f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c412:	e8 b3 71 ff ff       	call   c00135ca <File::unlink()>
c001c417:	83 c4 10             	add    esp,0x10
c001c41a:	85 db                	test   ebx,ebx
c001c41c:	74 14                	je     c001c432 <sysCallUnlink(regs*)+0x4d>
c001c41e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c422:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c424:	83 ec 0c             	sub    esp,0xc
c001c427:	53                   	push   ebx
c001c428:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c42b:	83 c4 10             	add    esp,0x10
c001c42e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c432:	85 c0                	test   eax,eax
c001c434:	0f 95 c0             	setne  al
c001c437:	31 d2                	xor    edx,edx
c001c439:	0f b6 c0             	movzx  eax,al
c001c43c:	f7 d8                	neg    eax
c001c43e:	83 d2 00             	adc    edx,0x0
c001c441:	83 c4 14             	add    esp,0x14
c001c444:	f7 da                	neg    edx
c001c446:	5b                   	pop    ebx
c001c447:	5e                   	pop    esi
c001c448:	c3                   	ret    

c001c449 <sysCallGetArgv(regs*)>:
c001c449:	83 ec 0c             	sub    esp,0xc
c001c44c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c450:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c453:	85 c0                	test   eax,eax
c001c455:	78 2b                	js     c001c482 <sysCallGetArgv(regs*)+0x39>
c001c457:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c45d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c460:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c466:	7d 1a                	jge    c001c482 <sysCallGetArgv(regs*)+0x39>
c001c468:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c46f:	85 c0                	test   eax,eax
c001c471:	74 17                	je     c001c48a <sysCallGetArgv(regs*)+0x41>
c001c473:	83 ec 08             	sub    esp,0x8
c001c476:	50                   	push   eax
c001c477:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c47a:	e8 a9 43 fe ff       	call   c0000828 <strcpy>
c001c47f:	83 c4 10             	add    esp,0x10
c001c482:	31 c0                	xor    eax,eax
c001c484:	31 d2                	xor    edx,edx
c001c486:	83 c4 0c             	add    esp,0xc
c001c489:	c3                   	ret    
c001c48a:	b8 01 00 00 00       	mov    eax,0x1
c001c48f:	31 d2                	xor    edx,edx
c001c491:	83 c4 0c             	add    esp,0xc
c001c494:	c3                   	ret    

c001c495 <sysCallTTYName(regs*)>:
c001c495:	56                   	push   esi
c001c496:	53                   	push   ebx
c001c497:	53                   	push   ebx
c001c498:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c49c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c49f:	85 c0                	test   eax,eax
c001c4a1:	74 5f                	je     c001c502 <sysCallTTYName(regs*)+0x6d>
c001c4a3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c4a6:	83 f8 02             	cmp    eax,0x2
c001c4a9:	77 3e                	ja     c001c4e9 <sysCallTTYName(regs*)+0x54>
c001c4ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4b3:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c4b9:	85 db                	test   ebx,ebx
c001c4bb:	74 45                	je     c001c502 <sysCallTTYName(regs*)+0x6d>
c001c4bd:	83 ec 0c             	sub    esp,0xc
c001c4c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4c2:	53                   	push   ebx
c001c4c3:	ff 10                	call   DWORD PTR [eax]
c001c4c5:	83 c4 10             	add    esp,0x10
c001c4c8:	84 c0                	test   al,al
c001c4ca:	74 41                	je     c001c50d <sysCallTTYName(regs*)+0x78>
c001c4cc:	83 ec 08             	sub    esp,0x8
c001c4cf:	81 c3 82 00 00 00    	add    ebx,0x82
c001c4d5:	53                   	push   ebx
c001c4d6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c4d9:	e8 4a 43 fe ff       	call   c0000828 <strcpy>
c001c4de:	83 c4 10             	add    esp,0x10
c001c4e1:	31 c0                	xor    eax,eax
c001c4e3:	59                   	pop    ecx
c001c4e4:	31 d2                	xor    edx,edx
c001c4e6:	5b                   	pop    ebx
c001c4e7:	5e                   	pop    esi
c001c4e8:	c3                   	ret    
c001c4e9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c4ee:	74 bb                	je     c001c4ab <sysCallTTYName(regs*)+0x16>
c001c4f0:	83 ec 0c             	sub    esp,0xc
c001c4f3:	50                   	push   eax
c001c4f4:	e8 3a 54 ff ff       	call   c0011933 <getFromFileDescriptor(int)>
c001c4f9:	83 c4 10             	add    esp,0x10
c001c4fc:	89 c3                	mov    ebx,eax
c001c4fe:	85 db                	test   ebx,ebx
c001c500:	75 bb                	jne    c001c4bd <sysCallTTYName(regs*)+0x28>
c001c502:	59                   	pop    ecx
c001c503:	b8 01 00 00 00       	mov    eax,0x1
c001c508:	31 d2                	xor    edx,edx
c001c50a:	5b                   	pop    ebx
c001c50b:	5e                   	pop    esi
c001c50c:	c3                   	ret    
c001c50d:	59                   	pop    ecx
c001c50e:	b8 02 00 00 00       	mov    eax,0x2
c001c513:	31 d2                	xor    edx,edx
c001c515:	5b                   	pop    ebx
c001c516:	5e                   	pop    esi
c001c517:	c3                   	ret    

c001c518 <sysCallUSleep(regs*)>:
c001c518:	83 ec 14             	sub    esp,0x14
c001c51b:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c520:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c524:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c52b:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c52e:	01 ca                	add    edx,ecx
c001c530:	52                   	push   edx
c001c531:	50                   	push   eax
c001c532:	e8 b0 24 00 00       	call   c001e9e7 <nanoSleep(unsigned long long)>
c001c537:	31 c0                	xor    eax,eax
c001c539:	31 d2                	xor    edx,edx
c001c53b:	83 c4 1c             	add    esp,0x1c
c001c53e:	c3                   	ret    

c001c53f <sysCallSpawn(regs*)>:
c001c53f:	56                   	push   esi
c001c540:	53                   	push   ebx
c001c541:	50                   	push   eax
c001c542:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c546:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c549:	85 c0                	test   eax,eax
c001c54b:	75 08                	jne    c001c555 <sysCallSpawn(regs*)+0x16>
c001c54d:	59                   	pop    ecx
c001c54e:	31 c0                	xor    eax,eax
c001c550:	31 d2                	xor    edx,edx
c001c552:	5b                   	pop    ebx
c001c553:	5e                   	pop    esi
c001c554:	c3                   	ret    
c001c555:	83 ec 08             	sub    esp,0x8
c001c558:	50                   	push   eax
c001c559:	68 27 cb 02 c0       	push   0xc002cb27
c001c55e:	e8 2c 69 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c563:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c56a:	e8 51 33 ff ff       	call   c000f8c0 <malloc>
c001c56f:	83 c4 10             	add    esp,0x10
c001c572:	89 c6                	mov    esi,eax
c001c574:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c577:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c57a:	85 c0                	test   eax,eax
c001c57c:	75 32                	jne    c001c5b0 <sysCallSpawn(regs*)+0x71>
c001c57e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c583:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c586:	52                   	push   edx
c001c587:	50                   	push   eax
c001c588:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c58b:	56                   	push   esi
c001c58c:	e8 33 1b 00 00       	call   c001e0c4 <Process::Process(char const*, Process*, char**)>
c001c591:	83 c4 10             	add    esp,0x10
c001c594:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c59b:	75 b0                	jne    c001c54d <sysCallSpawn(regs*)+0xe>
c001c59d:	83 ec 0c             	sub    esp,0xc
c001c5a0:	56                   	push   esi
c001c5a1:	e8 00 20 00 00       	call   c001e5a6 <Process::createUserThread()>
c001c5a6:	8b 06                	mov    eax,DWORD PTR [esi]
c001c5a8:	83 c4 10             	add    esp,0x10
c001c5ab:	99                   	cdq    
c001c5ac:	59                   	pop    ecx
c001c5ad:	5b                   	pop    ebx
c001c5ae:	5e                   	pop    esi
c001c5af:	c3                   	ret    
c001c5b0:	31 c0                	xor    eax,eax
c001c5b2:	eb d2                	jmp    c001c586 <sysCallSpawn(regs*)+0x47>

c001c5b4 <sysCallGetEnv(regs*)>:
c001c5b4:	55                   	push   ebp
c001c5b5:	57                   	push   edi
c001c5b6:	56                   	push   esi
c001c5b7:	53                   	push   ebx
c001c5b8:	83 ec 28             	sub    esp,0x28
c001c5bb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c5bf:	68 35 cb 02 c0       	push   0xc002cb35
c001c5c4:	e8 c6 68 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c5c9:	5f                   	pop    edi
c001c5ca:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c5cd:	5d                   	pop    ebp
c001c5ce:	53                   	push   ebx
c001c5cf:	68 62 ce 02 c0       	push   0xc002ce62
c001c5d4:	e8 b6 68 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c5d9:	58                   	pop    eax
c001c5da:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c5dd:	5a                   	pop    edx
c001c5de:	57                   	push   edi
c001c5df:	68 3e cb 02 c0       	push   0xc002cb3e
c001c5e4:	e8 a6 68 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c5e9:	59                   	pop    ecx
c001c5ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5ef:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5f2:	e8 1c e2 ff ff       	call   c001a813 <Krnl::getProcessTotalEnvCount(Process*)>
c001c5f7:	5a                   	pop    edx
c001c5f8:	89 c5                	mov    ebp,eax
c001c5fa:	59                   	pop    ecx
c001c5fb:	50                   	push   eax
c001c5fc:	68 48 cb 02 c0       	push   0xc002cb48
c001c601:	e8 89 68 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c606:	83 c4 10             	add    esp,0x10
c001c609:	39 ef                	cmp    edi,ebp
c001c60b:	7c 15                	jl     c001c622 <sysCallGetEnv(regs*)+0x6e>
c001c60d:	85 db                	test   ebx,ebx
c001c60f:	75 0c                	jne    c001c61d <sysCallGetEnv(regs*)+0x69>
c001c611:	83 c4 1c             	add    esp,0x1c
c001c614:	31 c0                	xor    eax,eax
c001c616:	5b                   	pop    ebx
c001c617:	31 d2                	xor    edx,edx
c001c619:	5e                   	pop    esi
c001c61a:	5f                   	pop    edi
c001c61b:	5d                   	pop    ebp
c001c61c:	c3                   	ret    
c001c61d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c620:	eb ef                	jmp    c001c611 <sysCallGetEnv(regs*)+0x5d>
c001c622:	83 ec 0c             	sub    esp,0xc
c001c625:	68 54 cb 02 c0       	push   0xc002cb54
c001c62a:	e8 60 68 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c62f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c633:	83 c4 0c             	add    esp,0xc
c001c636:	57                   	push   edi
c001c637:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c63d:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c640:	50                   	push   eax
c001c641:	e8 ed e1 ff ff       	call   c001a833 <Krnl::getProcessEnvPair(Process*, int)>
c001c646:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c64a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c64e:	68 13 cf 02 c0       	push   0xc002cf13
c001c653:	e8 37 68 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c658:	83 c4 10             	add    esp,0x10
c001c65b:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c65e:	85 f6                	test   esi,esi
c001c660:	75 47                	jne    c001c6a9 <sysCallGetEnv(regs*)+0xf5>
c001c662:	83 ec 0c             	sub    esp,0xc
c001c665:	55                   	push   ebp
c001c666:	e8 1d 41 fe ff       	call   c0000788 <strlen>
c001c66b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c66e:	89 c3                	mov    ebx,eax
c001c670:	e8 13 41 fe ff       	call   c0000788 <strlen>
c001c675:	5a                   	pop    edx
c001c676:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c67a:	59                   	pop    ecx
c001c67b:	50                   	push   eax
c001c67c:	68 57 cb 02 c0       	push   0xc002cb57
c001c681:	e8 09 68 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c686:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c689:	e8 fa 40 fe ff       	call   c0000788 <strlen>
c001c68e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c691:	89 c3                	mov    ebx,eax
c001c693:	e8 f0 40 fe ff       	call   c0000788 <strlen>
c001c698:	83 c4 10             	add    esp,0x10
c001c69b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c69f:	83 c4 1c             	add    esp,0x1c
c001c6a2:	31 d2                	xor    edx,edx
c001c6a4:	5b                   	pop    ebx
c001c6a5:	5e                   	pop    esi
c001c6a6:	5f                   	pop    edi
c001c6a7:	5d                   	pop    ebp
c001c6a8:	c3                   	ret    
c001c6a9:	83 ec 0c             	sub    esp,0xc
c001c6ac:	68 2d cf 02 c0       	push   0xc002cf2d
c001c6b1:	e8 d9 67 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c6b6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c6b9:	58                   	pop    eax
c001c6ba:	5a                   	pop    edx
c001c6bb:	55                   	push   ebp
c001c6bc:	53                   	push   ebx
c001c6bd:	e8 66 41 fe ff       	call   c0000828 <strcpy>
c001c6c2:	59                   	pop    ecx
c001c6c3:	5e                   	pop    esi
c001c6c4:	68 61 cb 02 c0       	push   0xc002cb61
c001c6c9:	53                   	push   ebx
c001c6ca:	e8 99 42 fe ff       	call   c0000968 <strcat>
c001c6cf:	5d                   	pop    ebp
c001c6d0:	58                   	pop    eax
c001c6d1:	57                   	push   edi
c001c6d2:	53                   	push   ebx
c001c6d3:	e8 90 42 fe ff       	call   c0000968 <strcat>
c001c6d8:	c7 04 24 47 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf47
c001c6df:	e8 ab 67 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c6e4:	83 c4 10             	add    esp,0x10
c001c6e7:	e9 25 ff ff ff       	jmp    c001c611 <sysCallGetEnv(regs*)+0x5d>

c001c6ec <sysAppSettings(regs*)>:
c001c6ec:	53                   	push   ebx
c001c6ed:	83 ec 08             	sub    esp,0x8
c001c6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c6f7:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c6fd:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c702:	66 3d c0 09          	cmp    ax,0x9c0
c001c706:	75 2f                	jne    c001c737 <sysAppSettings(regs*)+0x4b>
c001c708:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c70e:	83 e0 1f             	and    eax,0x1f
c001c711:	3c 01                	cmp    al,0x1
c001c713:	74 2e                	je     c001c743 <sysAppSettings(regs*)+0x57>
c001c715:	3c 07                	cmp    al,0x7
c001c717:	0f 84 c4 00 00 00    	je     c001c7e1 <sysAppSettings(regs*)+0xf5>
c001c71d:	84 c0                	test   al,al
c001c71f:	0f 84 e3 00 00 00    	je     c001c808 <sysAppSettings(regs*)+0x11c>
c001c725:	3c 08                	cmp    al,0x8
c001c727:	74 74                	je     c001c79d <sysAppSettings(regs*)+0xb1>
c001c729:	0f b6 c0             	movzx  eax,al
c001c72c:	83 c4 08             	add    esp,0x8
c001c72f:	05 e8 03 00 00       	add    eax,0x3e8
c001c734:	5b                   	pop    ebx
c001c735:	99                   	cdq    
c001c736:	c3                   	ret    
c001c737:	b8 01 00 00 00       	mov    eax,0x1
c001c73c:	31 d2                	xor    edx,edx
c001c73e:	83 c4 08             	add    esp,0x8
c001c741:	5b                   	pop    ebx
c001c742:	c3                   	ret    
c001c743:	51                   	push   ecx
c001c744:	68 00 01 00 00       	push   0x100
c001c749:	6a 00                	push   0x0
c001c74b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c750:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c753:	83 c0 0c             	add    eax,0xc
c001c756:	50                   	push   eax
c001c757:	e8 10 40 fe ff       	call   c000076c <memset>
c001c75c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c761:	8d 8b ff 00 00 00    	lea    ecx,[ebx+0xff]
c001c767:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001c76a:	83 c4 10             	add    esp,0x10
c001c76d:	89 d8                	mov    eax,ebx
c001c76f:	29 da                	sub    edx,ebx
c001c771:	8a 18                	mov    bl,BYTE PTR [eax]
c001c773:	88 5c 02 0c          	mov    BYTE PTR [edx+eax*1+0xc],bl
c001c777:	40                   	inc    eax
c001c778:	39 c8                	cmp    eax,ecx
c001c77a:	75 f5                	jne    c001c771 <sysAppSettings(regs*)+0x85>
c001c77c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c781:	83 ec 08             	sub    esp,0x8
c001c784:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c787:	8d 50 0c             	lea    edx,[eax+0xc]
c001c78a:	52                   	push   edx
c001c78b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c791:	e8 c8 43 ff ff       	call   c0010b5e <VgaText::setTitle(char*)>
c001c796:	83 c4 10             	add    esp,0x10
c001c799:	31 c0                	xor    eax,eax
c001c79b:	eb 9f                	jmp    c001c73c <sysAppSettings(regs*)+0x50>
c001c79d:	83 ec 08             	sub    esp,0x8
c001c7a0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c7a6:	83 e0 0f             	and    eax,0xf
c001c7a9:	50                   	push   eax
c001c7aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c7b8:	e8 93 43 ff ff       	call   c0010b50 <VgaText::setTitleColour(VgaColour)>
c001c7bd:	58                   	pop    eax
c001c7be:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c7c4:	5a                   	pop    edx
c001c7c5:	c1 e8 04             	shr    eax,0x4
c001c7c8:	83 e0 0f             	and    eax,0xf
c001c7cb:	50                   	push   eax
c001c7cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c7da:	e8 63 43 ff ff       	call   c0010b42 <VgaText::setTitleTextColour(VgaColour)>
c001c7df:	eb b5                	jmp    c001c796 <sysAppSettings(regs*)+0xaa>
c001c7e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7e9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c7ef:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c7f5:	c0 e8 06             	shr    al,0x6
c001c7f8:	83 e0 01             	and    eax,0x1
c001c7fb:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c801:	31 c0                	xor    eax,eax
c001c803:	e9 34 ff ff ff       	jmp    c001c73c <sysAppSettings(regs*)+0x50>
c001c808:	b8 02 00 00 00       	mov    eax,0x2
c001c80d:	e9 2a ff ff ff       	jmp    c001c73c <sysAppSettings(regs*)+0x50>

c001c812 <sysSetFatAttrib(regs*)>:
c001c812:	57                   	push   edi
c001c813:	56                   	push   esi
c001c814:	53                   	push   ebx
c001c815:	83 ec 1c             	sub    esp,0x1c
c001c818:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c81c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c81f:	68 14 01 00 00       	push   0x114
c001c824:	e8 97 30 ff ff       	call   c000f8c0 <malloc>
c001c829:	83 c4 0c             	add    esp,0xc
c001c82c:	89 c3                	mov    ebx,eax
c001c82e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c833:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c836:	57                   	push   edi
c001c837:	53                   	push   ebx
c001c838:	e8 b1 6b ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001c83d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c840:	83 c4 0c             	add    esp,0xc
c001c843:	0f b6 d4             	movzx  edx,ah
c001c846:	0f b6 c0             	movzx  eax,al
c001c849:	52                   	push   edx
c001c84a:	50                   	push   eax
c001c84b:	53                   	push   ebx
c001c84c:	e8 13 6e ff ff       	call   c0013664 <File::chfatattr(unsigned char, unsigned char)>
c001c851:	83 c4 10             	add    esp,0x10
c001c854:	85 db                	test   ebx,ebx
c001c856:	74 14                	je     c001c86c <sysSetFatAttrib(regs*)+0x5a>
c001c858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c85c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c85e:	83 ec 0c             	sub    esp,0xc
c001c861:	53                   	push   ebx
c001c862:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c865:	83 c4 10             	add    esp,0x10
c001c868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c86c:	85 c0                	test   eax,eax
c001c86e:	0f 95 c0             	setne  al
c001c871:	31 d2                	xor    edx,edx
c001c873:	0f b6 c0             	movzx  eax,al
c001c876:	f7 d8                	neg    eax
c001c878:	83 d2 00             	adc    edx,0x0
c001c87b:	83 c4 10             	add    esp,0x10
c001c87e:	f7 da                	neg    edx
c001c880:	5b                   	pop    ebx
c001c881:	5e                   	pop    esi
c001c882:	5f                   	pop    edi
c001c883:	c3                   	ret    

c001c884 <sysPipe(regs*)>:
c001c884:	57                   	push   edi
c001c885:	56                   	push   esi
c001c886:	53                   	push   ebx
c001c887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88b:	83 ec 0c             	sub    esp,0xc
c001c88e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c891:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c894:	6a 20                	push   0x20
c001c896:	e8 25 30 ff ff       	call   c000f8c0 <malloc>
c001c89b:	89 c3                	mov    ebx,eax
c001c89d:	58                   	pop    eax
c001c89e:	5a                   	pop    edx
c001c89f:	68 00 50 00 00       	push   0x5000
c001c8a4:	53                   	push   ebx
c001c8a5:	e8 5c 3c ff ff       	call   c0010506 <Pipe::Pipe(int)>
c001c8aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8ad:	e8 8c 4d ff ff       	call   c001163e <UnixFile::getFileDescriptor()>
c001c8b2:	89 07                	mov    DWORD PTR [edi],eax
c001c8b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8b7:	e8 82 4d ff ff       	call   c001163e <UnixFile::getFileDescriptor()>
c001c8bc:	83 c4 10             	add    esp,0x10
c001c8bf:	89 06                	mov    DWORD PTR [esi],eax
c001c8c1:	31 d2                	xor    edx,edx
c001c8c3:	5b                   	pop    ebx
c001c8c4:	31 c0                	xor    eax,eax
c001c8c6:	5e                   	pop    esi
c001c8c7:	5f                   	pop    edi
c001c8c8:	c3                   	ret    

c001c8c9 <sysGetUnixTime(regs*)>:
c001c8c9:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c001c8ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c8d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8d8:	e9 03 75 ff ff       	jmp    c0013de0 <Clock::timeInSecondsLocal()>

c001c8dd <string_ends_with(char const*, char const*)>:
c001c8dd:	57                   	push   edi
c001c8de:	56                   	push   esi
c001c8df:	53                   	push   ebx
c001c8e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8e4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c8e8:	83 ec 0c             	sub    esp,0xc
c001c8eb:	53                   	push   ebx
c001c8ec:	e8 97 3e fe ff       	call   c0000788 <strlen>
c001c8f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8f4:	89 c6                	mov    esi,eax
c001c8f6:	e8 8d 3e fe ff       	call   c0000788 <strlen>
c001c8fb:	83 c4 10             	add    esp,0x10
c001c8fe:	39 c6                	cmp    esi,eax
c001c900:	7d 06                	jge    c001c908 <string_ends_with(char const*, char const*)+0x2b>
c001c902:	5b                   	pop    ebx
c001c903:	31 c0                	xor    eax,eax
c001c905:	5e                   	pop    esi
c001c906:	5f                   	pop    edi
c001c907:	c3                   	ret    
c001c908:	83 ec 08             	sub    esp,0x8
c001c90b:	29 c6                	sub    esi,eax
c001c90d:	57                   	push   edi
c001c90e:	01 f3                	add    ebx,esi
c001c910:	53                   	push   ebx
c001c911:	e8 9e 3f fe ff       	call   c00008b4 <strcmp>
c001c916:	83 c4 10             	add    esp,0x10
c001c919:	85 c0                	test   eax,eax
c001c91b:	5b                   	pop    ebx
c001c91c:	0f 94 c0             	sete   al
c001c91f:	5e                   	pop    esi
c001c920:	0f b6 c0             	movzx  eax,al
c001c923:	5f                   	pop    edi
c001c924:	c3                   	ret    

c001c925 <sysCallOpen(regs*)>:
c001c925:	56                   	push   esi
c001c926:	53                   	push   ebx
c001c927:	81 ec 04 01 00 00    	sub    esp,0x104
c001c92d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c934:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c937:	85 c9                	test   ecx,ecx
c001c939:	0f 84 b3 00 00 00    	je     c001c9f2 <sysCallOpen(regs*)+0xcd>
c001c93f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c942:	85 c0                	test   eax,eax
c001c944:	0f 84 a8 00 00 00    	je     c001c9f2 <sysCallOpen(regs*)+0xcd>
c001c94a:	52                   	push   edx
c001c94b:	68 63 cb 02 c0       	push   0xc002cb63
c001c950:	50                   	push   eax
c001c951:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c955:	56                   	push   esi
c001c956:	e8 e9 68 ff ff       	call   c0013244 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c95b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c95e:	e8 25 3e fe ff       	call   c0000788 <strlen>
c001c963:	83 c4 10             	add    esp,0x10
c001c966:	48                   	dec    eax
c001c967:	74 1d                	je     c001c986 <sysCallOpen(regs*)+0x61>
c001c969:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c96c:	eb 0f                	jmp    c001c97d <sysCallOpen(regs*)+0x58>
c001c96e:	80 fa 3a             	cmp    dl,0x3a
c001c971:	74 0f                	je     c001c982 <sysCallOpen(regs*)+0x5d>
c001c973:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c977:	48                   	dec    eax
c001c978:	74 0c                	je     c001c986 <sysCallOpen(regs*)+0x61>
c001c97a:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c97d:	80 fa 2e             	cmp    dl,0x2e
c001c980:	75 ec                	jne    c001c96e <sysCallOpen(regs*)+0x49>
c001c982:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c986:	83 ec 08             	sub    esp,0x8
c001c989:	68 67 cb 02 c0       	push   0xc002cb67
c001c98e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c991:	e8 47 ff ff ff       	call   c001c8dd <string_ends_with(char const*, char const*)>
c001c996:	83 c4 10             	add    esp,0x10
c001c999:	85 c0                	test   eax,eax
c001c99b:	75 17                	jne    c001c9b4 <sysCallOpen(regs*)+0x8f>
c001c99d:	83 ec 08             	sub    esp,0x8
c001c9a0:	68 88 cb 02 c0       	push   0xc002cb88
c001c9a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9a8:	e8 30 ff ff ff       	call   c001c8dd <string_ends_with(char const*, char const*)>
c001c9ad:	83 c4 10             	add    esp,0x10
c001c9b0:	85 c0                	test   eax,eax
c001c9b2:	74 51                	je     c001ca05 <sysCallOpen(regs*)+0xe0>
c001c9b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c9b7:	83 ec 08             	sub    esp,0x8
c001c9ba:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c9c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c9c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c9ca:	ff 30                	push   DWORD PTR [eax]
c001c9cc:	68 6c cb 02 c0       	push   0xc002cb6c
c001c9d1:	e8 b9 64 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c9d6:	c7 04 24 7b cb 02 c0 	mov    DWORD PTR [esp],0xc002cb7b
c001c9dd:	e8 ad 64 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001c9e2:	83 c4 10             	add    esp,0x10
c001c9e5:	81 c4 04 01 00 00    	add    esp,0x104
c001c9eb:	31 c0                	xor    eax,eax
c001c9ed:	31 d2                	xor    edx,edx
c001c9ef:	5b                   	pop    ebx
c001c9f0:	5e                   	pop    esi
c001c9f1:	c3                   	ret    
c001c9f2:	81 c4 04 01 00 00    	add    esp,0x104
c001c9f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c9fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ca02:	5b                   	pop    ebx
c001ca03:	5e                   	pop    esi
c001ca04:	c3                   	ret    
c001ca05:	83 ec 08             	sub    esp,0x8
c001ca08:	68 68 cb 02 c0       	push   0xc002cb68
c001ca0d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca10:	e8 9f 3e fe ff       	call   c00008b4 <strcmp>
c001ca15:	83 c4 10             	add    esp,0x10
c001ca18:	85 c0                	test   eax,eax
c001ca1a:	74 98                	je     c001c9b4 <sysCallOpen(regs*)+0x8f>
c001ca1c:	83 ec 08             	sub    esp,0x8
c001ca1f:	68 67 cb 02 c0       	push   0xc002cb67
c001ca24:	56                   	push   esi
c001ca25:	e8 b3 fe ff ff       	call   c001c8dd <string_ends_with(char const*, char const*)>
c001ca2a:	83 c4 10             	add    esp,0x10
c001ca2d:	85 c0                	test   eax,eax
c001ca2f:	75 83                	jne    c001c9b4 <sysCallOpen(regs*)+0x8f>
c001ca31:	83 ec 08             	sub    esp,0x8
c001ca34:	68 8d cb 02 c0       	push   0xc002cb8d
c001ca39:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca3c:	e8 9c fe ff ff       	call   c001c8dd <string_ends_with(char const*, char const*)>
c001ca41:	83 c4 10             	add    esp,0x10
c001ca44:	85 c0                	test   eax,eax
c001ca46:	0f 85 d9 00 00 00    	jne    c001cb25 <sysCallOpen(regs*)+0x200>
c001ca4c:	83 ec 08             	sub    esp,0x8
c001ca4f:	68 92 cb 02 c0       	push   0xc002cb92
c001ca54:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca57:	e8 81 fe ff ff       	call   c001c8dd <string_ends_with(char const*, char const*)>
c001ca5c:	83 c4 10             	add    esp,0x10
c001ca5f:	85 c0                	test   eax,eax
c001ca61:	0f 85 be 00 00 00    	jne    c001cb25 <sysCallOpen(regs*)+0x200>
c001ca67:	83 ec 08             	sub    esp,0x8
c001ca6a:	68 8e cb 02 c0       	push   0xc002cb8e
c001ca6f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca72:	e8 3d 3e fe ff       	call   c00008b4 <strcmp>
c001ca77:	83 c4 10             	add    esp,0x10
c001ca7a:	85 c0                	test   eax,eax
c001ca7c:	0f 84 a3 00 00 00    	je     c001cb25 <sysCallOpen(regs*)+0x200>
c001ca82:	83 ec 08             	sub    esp,0x8
c001ca85:	68 8d cb 02 c0       	push   0xc002cb8d
c001ca8a:	56                   	push   esi
c001ca8b:	e8 4d fe ff ff       	call   c001c8dd <string_ends_with(char const*, char const*)>
c001ca90:	83 c4 10             	add    esp,0x10
c001ca93:	85 c0                	test   eax,eax
c001ca95:	0f 85 8a 00 00 00    	jne    c001cb25 <sysCallOpen(regs*)+0x200>
c001ca9b:	83 ec 0c             	sub    esp,0xc
c001ca9e:	68 14 01 00 00       	push   0x114
c001caa3:	e8 18 2e ff ff       	call   c000f8c0 <malloc>
c001caa8:	83 c4 0c             	add    esp,0xc
c001caab:	89 c6                	mov    esi,eax
c001caad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cab2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001cab5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001cab8:	56                   	push   esi
c001cab9:	e8 30 69 ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001cabe:	83 c4 10             	add    esp,0x10
c001cac1:	85 f6                	test   esi,esi
c001cac3:	0f 84 29 ff ff ff    	je     c001c9f2 <sysCallOpen(regs*)+0xcd>
c001cac9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001cacc:	0f b6 c2             	movzx  eax,dl
c001cacf:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001cad2:	89 d0                	mov    eax,edx
c001cad4:	83 e0 01             	and    eax,0x1
c001cad7:	f6 c2 02             	test   dl,0x2
c001cada:	74 03                	je     c001cadf <sysCallOpen(regs*)+0x1ba>
c001cadc:	83 c8 02             	or     eax,0x2
c001cadf:	f6 c2 04             	test   dl,0x4
c001cae2:	74 03                	je     c001cae7 <sysCallOpen(regs*)+0x1c2>
c001cae4:	83 c8 04             	or     eax,0x4
c001cae7:	f6 c2 08             	test   dl,0x8
c001caea:	74 03                	je     c001caef <sysCallOpen(regs*)+0x1ca>
c001caec:	83 c8 0a             	or     eax,0xa
c001caef:	83 e2 10             	and    edx,0x10
c001caf2:	74 03                	je     c001caf7 <sysCallOpen(regs*)+0x1d2>
c001caf4:	83 c8 12             	or     eax,0x12
c001caf7:	83 ec 08             	sub    esp,0x8
c001cafa:	50                   	push   eax
c001cafb:	56                   	push   esi
c001cafc:	e8 51 69 ff ff       	call   c0013452 <File::open(FileOpenMode)>
c001cb01:	83 c4 10             	add    esp,0x10
c001cb04:	85 c0                	test   eax,eax
c001cb06:	0f 85 e6 fe ff ff    	jne    c001c9f2 <sysCallOpen(regs*)+0xcd>
c001cb0c:	83 ec 0c             	sub    esp,0xc
c001cb0f:	56                   	push   esi
c001cb10:	e8 29 4b ff ff       	call   c001163e <UnixFile::getFileDescriptor()>
c001cb15:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001cb18:	89 02                	mov    DWORD PTR [edx],eax
c001cb1a:	c1 f8 1f             	sar    eax,0x1f
c001cb1d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cb20:	e9 bd fe ff ff       	jmp    c001c9e2 <sysCallOpen(regs*)+0xbd>
c001cb25:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb28:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001cb2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb35:	e9 ab fe ff ff       	jmp    c001c9e5 <sysCallOpen(regs*)+0xc0>

c001cb3a <Sys::loadSyscalls()>:
c001cb3a:	c7 05 80 1c 03 c0 18 bc 01 c0 	mov    DWORD PTR ds:0xc0031c80,0xc001bc18
c001cb44:	c7 05 84 1c 03 c0 79 b7 01 c0 	mov    DWORD PTR ds:0xc0031c84,0xc001b779
c001cb4e:	c7 05 88 1c 03 c0 6b b9 01 c0 	mov    DWORD PTR ds:0xc0031c88,0xc001b96b
c001cb58:	c7 05 8c 1c 03 c0 4e bb 01 c0 	mov    DWORD PTR ds:0xc0031c8c,0xc001bb4e
c001cb62:	c7 05 90 1c 03 c0 03 b9 01 c0 	mov    DWORD PTR ds:0xc0031c90,0xc001b903
c001cb6c:	c7 05 94 1c 03 c0 b0 b7 01 c0 	mov    DWORD PTR ds:0xc0031c94,0xc001b7b0
c001cb76:	c7 05 98 1c 03 c0 91 b7 01 c0 	mov    DWORD PTR ds:0xc0031c98,0xc001b791
c001cb80:	c7 05 9c 1c 03 c0 c0 b9 01 c0 	mov    DWORD PTR ds:0xc0031c9c,0xc001b9c0
c001cb8a:	c7 05 a4 1c 03 c0 53 c1 01 c0 	mov    DWORD PTR ds:0xc0031ca4,0xc001c153
c001cb94:	c7 05 a0 1c 03 c0 25 c9 01 c0 	mov    DWORD PTR ds:0xc0031ca0,0xc001c925
c001cb9e:	c7 05 a8 1c 03 c0 db c1 01 c0 	mov    DWORD PTR ds:0xc0031ca8,0xc001c1db
c001cba8:	c7 05 ac 1c 03 c0 42 be 01 c0 	mov    DWORD PTR ds:0xc0031cac,0xc001be42
c001cbb2:	c7 05 b0 1c 03 c0 5e bc 01 c0 	mov    DWORD PTR ds:0xc0031cb0,0xc001bc5e
c001cbbc:	c7 05 b4 1c 03 c0 63 bc 01 c0 	mov    DWORD PTR ds:0xc0031cb4,0xc001bc63
c001cbc6:	c7 05 b8 1c 03 c0 b6 c2 01 c0 	mov    DWORD PTR ds:0xc0031cb8,0xc001c2b6
c001cbd0:	c7 05 bc 1c 03 c0 50 c2 01 c0 	mov    DWORD PTR ds:0xc0031cbc,0xc001c250
c001cbda:	c7 05 c0 1c 03 c0 2a bf 01 c0 	mov    DWORD PTR ds:0xc0031cc0,0xc001bf2a
c001cbe4:	c7 05 c4 1c 03 c0 93 bf 01 c0 	mov    DWORD PTR ds:0xc0031cc4,0xc001bf93
c001cbee:	c7 05 c8 1c 03 c0 10 c0 01 c0 	mov    DWORD PTR ds:0xc0031cc8,0xc001c010
c001cbf8:	c7 05 cc 1c 03 c0 68 bc 01 c0 	mov    DWORD PTR ds:0xc0031ccc,0xc001bc68
c001cc02:	c7 05 d0 1c 03 c0 26 c3 01 c0 	mov    DWORD PTR ds:0xc0031cd0,0xc001c326
c001cc0c:	c7 05 d4 1c 03 c0 40 c3 01 c0 	mov    DWORD PTR ds:0xc0031cd4,0xc001c340
c001cc16:	c7 05 d8 1c 03 c0 40 c3 01 c0 	mov    DWORD PTR ds:0xc0031cd8,0xc001c340
c001cc20:	c7 05 dc 1c 03 c0 81 c3 01 c0 	mov    DWORD PTR ds:0xc0031cdc,0xc001c381
c001cc2a:	c7 05 e0 1c 03 c0 e5 c3 01 c0 	mov    DWORD PTR ds:0xc0031ce0,0xc001c3e5
c001cc34:	c7 05 e4 1c 03 c0 14 be 01 c0 	mov    DWORD PTR ds:0xc0031ce4,0xc001be14
c001cc3e:	c7 05 e8 1c 03 c0 49 c4 01 c0 	mov    DWORD PTR ds:0xc0031ce8,0xc001c449
c001cc48:	c7 05 ec 1c 03 c0 d1 bd 01 c0 	mov    DWORD PTR ds:0xc0031cec,0xc001bdd1
c001cc52:	c7 05 f0 1c 03 c0 95 c4 01 c0 	mov    DWORD PTR ds:0xc0031cf0,0xc001c495
c001cc5c:	c7 05 f4 1c 03 c0 d0 be 01 c0 	mov    DWORD PTR ds:0xc0031cf4,0xc001bed0
c001cc66:	c7 05 f8 1c 03 c0 18 c5 01 c0 	mov    DWORD PTR ds:0xc0031cf8,0xc001c518
c001cc70:	c7 05 fc 1c 03 c0 93 c0 01 c0 	mov    DWORD PTR ds:0xc0031cfc,0xc001c093
c001cc7a:	c7 05 00 1d 03 c0 3f c5 01 c0 	mov    DWORD PTR ds:0xc0031d00,0xc001c53f
c001cc84:	c7 05 04 1d 03 c0 b4 c5 01 c0 	mov    DWORD PTR ds:0xc0031d04,0xc001c5b4
c001cc8e:	c7 05 08 1d 03 c0 ec c6 01 c0 	mov    DWORD PTR ds:0xc0031d08,0xc001c6ec
c001cc98:	c7 05 0c 1d 03 c0 72 bc 01 c0 	mov    DWORD PTR ds:0xc0031d0c,0xc001bc72
c001cca2:	c7 05 10 1d 03 c0 dc bc 01 c0 	mov    DWORD PTR ds:0xc0031d10,0xc001bcdc
c001ccac:	c7 05 14 1d 03 c0 22 bd 01 c0 	mov    DWORD PTR ds:0xc0031d14,0xc001bd22
c001ccb6:	c7 05 18 1d 03 c0 12 c8 01 c0 	mov    DWORD PTR ds:0xc0031d18,0xc001c812
c001ccc0:	c7 05 1c 1d 03 c0 5b c3 01 c0 	mov    DWORD PTR ds:0xc0031d1c,0xc001c35b
c001ccca:	c7 05 20 1d 03 c0 73 bd 01 c0 	mov    DWORD PTR ds:0xc0031d20,0xc001bd73
c001ccd4:	c7 05 24 1d 03 c0 84 c8 01 c0 	mov    DWORD PTR ds:0xc0031d24,0xc001c884
c001ccde:	c7 05 28 1d 03 c0 c9 c8 01 c0 	mov    DWORD PTR ds:0xc0031d28,0xc001c8c9
c001cce8:	c7 05 2c 1d 03 c0 5b b8 01 c0 	mov    DWORD PTR ds:0xc0031d2c,0xc001b85b
c001ccf2:	c7 05 30 1d 03 c0 dc b9 01 c0 	mov    DWORD PTR ds:0xc0031d30,0xc001b9dc
c001ccfc:	c7 05 34 1d 03 c0 04 bb 01 c0 	mov    DWORD PTR ds:0xc0031d34,0xc001bb04
c001cd06:	c7 05 38 1d 03 c0 43 b7 01 c0 	mov    DWORD PTR ds:0xc0031d38,0xc001b743
c001cd10:	c7 05 3c 1d 03 c0 b6 bb 01 c0 	mov    DWORD PTR ds:0xc0031d3c,0xc001bbb6
c001cd1a:	c7 05 40 1d 03 c0 bc b7 01 c0 	mov    DWORD PTR ds:0xc0031d40,0xc001b7bc
c001cd24:	c7 05 44 1d 03 c0 d3 b7 01 c0 	mov    DWORD PTR ds:0xc0031d44,0xc001b7d3
c001cd2e:	c3                   	ret    

c001cd2f <Sys::systemCall(regs*, void*)>:
c001cd2f:	53                   	push   ebx
c001cd30:	83 ec 08             	sub    esp,0x8
c001cd33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd37:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd3a:	83 f8 7f             	cmp    eax,0x7f
c001cd3d:	77 16                	ja     c001cd55 <Sys::systemCall(regs*, void*)+0x26>
c001cd3f:	8b 14 85 80 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce380]
c001cd46:	85 d2                	test   edx,edx
c001cd48:	74 0b                	je     c001cd55 <Sys::systemCall(regs*, void*)+0x26>
c001cd4a:	83 ec 0c             	sub    esp,0xc
c001cd4d:	53                   	push   ebx
c001cd4e:	ff d2                	call   edx
c001cd50:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd53:	eb 0d                	jmp    c001cd62 <Sys::systemCall(regs*, void*)+0x33>
c001cd55:	52                   	push   edx
c001cd56:	52                   	push   edx
c001cd57:	50                   	push   eax
c001cd58:	68 97 cb 02 c0       	push   0xc002cb97
c001cd5d:	e8 2d 61 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001cd62:	83 c4 10             	add    esp,0x10
c001cd65:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cd6a:	31 d2                	xor    edx,edx
c001cd6c:	83 c4 08             	add    esp,0x8
c001cd6f:	5b                   	pop    ebx
c001cd70:	c3                   	ret    

c001cd71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cd71:	55                   	push   ebp
c001cd72:	57                   	push   edi
c001cd73:	56                   	push   esi
c001cd74:	53                   	push   ebx
c001cd75:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cd7b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cd82:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cd89:	85 c0                	test   eax,eax
c001cd8b:	0f 95 c1             	setne  cl
c001cd8e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cd96:	0f 94 c2             	sete   dl
c001cd99:	84 d1                	test   cl,dl
c001cd9b:	74 23                	je     c001cdc0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cd9d:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cda3:	74 1b                	je     c001cdc0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cda5:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cdab:	89 da                	mov    edx,ebx
c001cdad:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cdb3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cdb9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cdc0:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001cdc7:	05 ff 0f 00 00       	add    eax,0xfff
c001cdcc:	83 ec 0c             	sub    esp,0xc
c001cdcf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cdd3:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001cdd9:	c1 e8 0c             	shr    eax,0xc
c001cddc:	89 ef                	mov    edi,ebp
c001cdde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cde2:	c1 ef 0c             	shr    edi,0xc
c001cde5:	6a 01                	push   0x1
c001cde7:	e8 9d 4c ff ff       	call   c0011a89 <Virt::allocateKernelVirtualPages(int)>
c001cdec:	89 c6                	mov    esi,eax
c001cdee:	58                   	pop    eax
c001cdef:	5a                   	pop    edx
c001cdf0:	57                   	push   edi
c001cdf1:	68 1b cc 02 c0       	push   0xc002cc1b
c001cdf6:	e8 94 60 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001cdfb:	59                   	pop    ecx
c001cdfc:	58                   	pop    eax
c001cdfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce01:	68 2d cc 02 c0       	push   0xc002cc2d
c001ce06:	e8 84 60 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001ce0b:	83 c4 10             	add    esp,0x10
c001ce0e:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001ce14:	0f 86 2d 01 00 00    	jbe    c001cf47 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d6>
c001ce1a:	c1 e7 0c             	shl    edi,0xc
c001ce1d:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001ce20:	89 df                	mov    edi,ebx
c001ce22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce26:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001ce2d:	01 dd                	add    ebp,ebx
c001ce2f:	29 fd                	sub    ebp,edi
c001ce31:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001ce35:	0f 84 0a 01 00 00    	je     c001cf45 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d4>
c001ce3b:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001ce41:	76 05                	jbe    c001ce48 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001ce43:	bd 00 10 00 00       	mov    ebp,0x1000
c001ce48:	83 ec 0c             	sub    esp,0xc
c001ce4b:	31 d2                	xor    edx,edx
c001ce4d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001ce54:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ce56:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ce5a:	50                   	push   eax
c001ce5b:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ce5f:	50                   	push   eax
c001ce60:	52                   	push   edx
c001ce61:	55                   	push   ebp
c001ce62:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001ce69:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce6c:	83 c4 20             	add    esp,0x20
c001ce6f:	85 c0                	test   eax,eax
c001ce71:	74 0a                	je     c001ce7d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001ce73:	53                   	push   ebx
c001ce74:	53                   	push   ebx
c001ce75:	50                   	push   eax
c001ce76:	68 3f cc 02 c0       	push   0xc002cc3f
c001ce7b:	eb 0f                	jmp    c001ce8c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001ce7d:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001ce81:	74 20                	je     c001cea3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001ce83:	51                   	push   ecx
c001ce84:	51                   	push   ecx
c001ce85:	6a 00                	push   0x0
c001ce87:	68 6a cc 02 c0       	push   0xc002cc6a
c001ce8c:	e8 fe 5f ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001ce91:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce94:	e8 b0 50 ff ff       	call   c0011f49 <Virt::freeKernelVirtualPages(unsigned long)>
c001ce99:	83 c4 10             	add    esp,0x10
c001ce9c:	31 c0                	xor    eax,eax
c001ce9e:	e9 69 01 00 00       	jmp    c001d00c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29b>
c001cea3:	fa                   	cli    
c001cea4:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001ceaa:	e8 7d 30 ff ff       	call   c000ff2c <Phys::allocatePage()>
c001ceaf:	6a 07                	push   0x7
c001ceb1:	89 c5                	mov    ebp,eax
c001ceb3:	56                   	push   esi
c001ceb4:	50                   	push   eax
c001ceb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ceba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cebd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cec3:	e8 f8 53 ff ff       	call   c00122c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cec8:	83 c4 0c             	add    esp,0xc
c001cecb:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ced2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ced8:	6a 00                	push   0x0
c001ceda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cedf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cee2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cee8:	e8 2d 52 ff ff       	call   c001211a <VAS::mapOtherVASIn(bool, VAS*)>
c001ceed:	58                   	pop    eax
c001ceee:	5a                   	pop    edx
c001ceef:	68 07 0c 00 00       	push   0xc07
c001cef4:	57                   	push   edi
c001cef5:	55                   	push   ebp
c001cef6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cefd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf03:	6a 00                	push   0x0
c001cf05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf0a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf0d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf13:	e8 64 57 ff ff       	call   c001267c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cf18:	83 c4 20             	add    esp,0x20
c001cf1b:	31 c0                	xor    eax,eax
c001cf1d:	8a 54 04 20          	mov    dl,BYTE PTR [esp+eax*1+0x20]
c001cf21:	88 14 06             	mov    BYTE PTR [esi+eax*1],dl
c001cf24:	40                   	inc    eax
c001cf25:	3d 00 10 00 00       	cmp    eax,0x1000
c001cf2a:	75 f1                	jne    c001cf1d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c001cf2c:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001cf31:	48                   	dec    eax
c001cf32:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001cf37:	75 01                	jne    c001cf3a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1c9>
c001cf39:	fb                   	sti    
c001cf3a:	81 c7 00 10 00 00    	add    edi,0x1000
c001cf40:	e9 e1 fe ff ff       	jmp    c001ce26 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001cf45:	89 fb                	mov    ebx,edi
c001cf47:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001cf4f:	0f 86 a9 00 00 00    	jbe    c001cffe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x28d>
c001cf55:	fa                   	cli    
c001cf56:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001cf5c:	51                   	push   ecx
c001cf5d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cf64:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf6a:	6a 00                	push   0x0
c001cf6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf71:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf74:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf7a:	e8 9b 51 ff ff       	call   c001211a <VAS::mapOtherVASIn(bool, VAS*)>
c001cf7f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001cf83:	c1 e7 0c             	shl    edi,0xc
c001cf86:	01 df                	add    edi,ebx
c001cf88:	83 c4 10             	add    esp,0x10
c001cf8b:	39 df                	cmp    edi,ebx
c001cf8d:	74 61                	je     c001cff0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27f>
c001cf8f:	e8 98 2f ff ff       	call   c000ff2c <Phys::allocatePage()>
c001cf94:	6a 07                	push   0x7
c001cf96:	89 c5                	mov    ebp,eax
c001cf98:	56                   	push   esi
c001cf99:	50                   	push   eax
c001cf9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf9f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cfa2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cfa8:	e8 13 53 ff ff       	call   c00122c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cfad:	58                   	pop    eax
c001cfae:	5a                   	pop    edx
c001cfaf:	68 07 0c 00 00       	push   0xc07
c001cfb4:	53                   	push   ebx
c001cfb5:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cfbb:	55                   	push   ebp
c001cfbc:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cfc3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cfc9:	6a 00                	push   0x0
c001cfcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cfd0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cfd3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cfd9:	e8 9e 56 ff ff       	call   c001267c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cfde:	83 c4 1c             	add    esp,0x1c
c001cfe1:	68 00 10 00 00       	push   0x1000
c001cfe6:	6a 00                	push   0x0
c001cfe8:	56                   	push   esi
c001cfe9:	e8 7e 37 fe ff       	call   c000076c <memset>
c001cfee:	eb 98                	jmp    c001cf88 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x217>
c001cff0:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001cff5:	48                   	dec    eax
c001cff6:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001cffb:	75 01                	jne    c001cffe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x28d>
c001cffd:	fb                   	sti    
c001cffe:	83 ec 0c             	sub    esp,0xc
c001d001:	56                   	push   esi
c001d002:	e8 42 4f ff ff       	call   c0011f49 <Virt::freeKernelVirtualPages(unsigned long)>
c001d007:	83 c4 10             	add    esp,0x10
c001d00a:	b0 01                	mov    al,0x1
c001d00c:	81 c4 2c 10 00 00    	add    esp,0x102c
c001d012:	5b                   	pop    ebx
c001d013:	5e                   	pop    esi
c001d014:	5f                   	pop    edi
c001d015:	5d                   	pop    ebp
c001d016:	c3                   	ret    

c001d017 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001d017:	55                   	push   ebp
c001d018:	57                   	push   edi
c001d019:	56                   	push   esi
c001d01a:	53                   	push   ebx
c001d01b:	83 ec 48             	sub    esp,0x48
c001d01e:	68 14 01 00 00       	push   0x114
c001d023:	e8 98 28 ff ff       	call   c000f8c0 <malloc>
c001d028:	83 c4 0c             	add    esp,0xc
c001d02b:	89 c6                	mov    esi,eax
c001d02d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d031:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001d035:	50                   	push   eax
c001d036:	e8 b3 63 ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001d03b:	58                   	pop    eax
c001d03c:	5a                   	pop    edx
c001d03d:	6a 01                	push   0x1
c001d03f:	56                   	push   esi
c001d040:	e8 0d 64 ff ff       	call   c0013452 <File::open(FileOpenMode)>
c001d045:	83 c4 10             	add    esp,0x10
c001d048:	85 c0                	test   eax,eax
c001d04a:	0f 85 47 01 00 00    	jne    c001d197 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d050:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001d058:	83 ec 0c             	sub    esp,0xc
c001d05b:	6a 34                	push   0x34
c001d05d:	e8 5e 28 ff ff       	call   c000f8c0 <malloc>
c001d062:	89 c3                	mov    ebx,eax
c001d064:	58                   	pop    eax
c001d065:	8b 06                	mov    eax,DWORD PTR [esi]
c001d067:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001d06b:	57                   	push   edi
c001d06c:	53                   	push   ebx
c001d06d:	6a 00                	push   0x0
c001d06f:	6a 34                	push   0x34
c001d071:	56                   	push   esi
c001d072:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d075:	83 c4 20             	add    esp,0x20
c001d078:	85 c0                	test   eax,eax
c001d07a:	0f 85 17 01 00 00    	jne    c001d197 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d080:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001d086:	0f 85 0b 01 00 00    	jne    c001d197 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d08c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001d08f:	85 c0                	test   eax,eax
c001d091:	0f 84 00 01 00 00    	je     c001d197 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d097:	31 d2                	xor    edx,edx
c001d099:	55                   	push   ebp
c001d09a:	52                   	push   edx
c001d09b:	50                   	push   eax
c001d09c:	56                   	push   esi
c001d09d:	e8 6e 64 ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d0a2:	83 c4 10             	add    esp,0x10
c001d0a5:	85 c0                	test   eax,eax
c001d0a7:	0f 85 ea 00 00 00    	jne    c001d197 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0ad:	83 ec 0c             	sub    esp,0xc
c001d0b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d0b3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d0b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d0bb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d0bf:	0f af c2             	imul   eax,edx
c001d0c2:	50                   	push   eax
c001d0c3:	e8 f8 27 ff ff       	call   c000f8c0 <malloc>
c001d0c8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d0ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0d5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d0d9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d0dd:	0f af c2             	imul   eax,edx
c001d0e0:	99                   	cdq    
c001d0e1:	52                   	push   edx
c001d0e2:	50                   	push   eax
c001d0e3:	56                   	push   esi
c001d0e4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0e7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001d0ea:	83 c4 20             	add    esp,0x20
c001d0ed:	85 c0                	test   eax,eax
c001d0ef:	0f 84 a2 00 00 00    	je     c001d197 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0f5:	31 d2                	xor    edx,edx
c001d0f7:	51                   	push   ecx
c001d0f8:	52                   	push   edx
c001d0f9:	50                   	push   eax
c001d0fa:	56                   	push   esi
c001d0fb:	e8 10 64 ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d100:	83 c4 10             	add    esp,0x10
c001d103:	85 c0                	test   eax,eax
c001d105:	0f 85 8c 00 00 00    	jne    c001d197 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d10b:	83 ec 0c             	sub    esp,0xc
c001d10e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d112:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d116:	31 ed                	xor    ebp,ebp
c001d118:	0f af c2             	imul   eax,edx
c001d11b:	50                   	push   eax
c001d11c:	e8 9f 27 ff ff       	call   c000f8c0 <malloc>
c001d121:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d123:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d127:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d12e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d132:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d136:	0f af c2             	imul   eax,edx
c001d139:	99                   	cdq    
c001d13a:	52                   	push   edx
c001d13b:	50                   	push   eax
c001d13c:	56                   	push   esi
c001d13d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d140:	83 c4 20             	add    esp,0x20
c001d143:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d14b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001d14f:	0f 86 80 00 00 00    	jbe    c001d1d5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001d155:	0f b7 fd             	movzx  edi,bp
c001d158:	c1 e7 05             	shl    edi,0x5
c001d15b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001d15f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001d162:	75 6b                	jne    c001d1cf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d164:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001d167:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d16b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001d16e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d172:	52                   	push   edx
c001d173:	31 d2                	xor    edx,edx
c001d175:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001d178:	52                   	push   edx
c001d179:	50                   	push   eax
c001d17a:	56                   	push   esi
c001d17b:	e8 90 63 ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d180:	83 c4 10             	add    esp,0x10
c001d183:	85 c0                	test   eax,eax
c001d185:	74 17                	je     c001d19e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001d187:	83 ec 0c             	sub    esp,0xc
c001d18a:	68 96 cc 02 c0       	push   0xc002cc96
c001d18f:	e8 fb 5c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001d194:	83 c4 10             	add    esp,0x10
c001d197:	31 c0                	xor    eax,eax
c001d199:	e9 87 00 00 00       	jmp    c001d225 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001d19e:	83 ec 0c             	sub    esp,0xc
c001d1a1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001d1a4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001d1a7:	50                   	push   eax
c001d1a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d1ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d1b0:	56                   	push   esi
c001d1b1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001d1b5:	e8 b7 fb ff ff       	call   c001cd71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001d1ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d1be:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001d1c2:	83 c4 20             	add    esp,0x20
c001d1c5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001d1c9:	73 04                	jae    c001d1cf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d1cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d1cf:	45                   	inc    ebp
c001d1d0:	e9 76 ff ff ff       	jmp    c001d14b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001d1d5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d1d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d1e1:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001d1e7:	83 ec 0c             	sub    esp,0xc
c001d1ea:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001d1f0:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d1f5:	05 00 10 00 00       	add    eax,0x1000
c001d1fa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001d1fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d201:	e8 ca 26 ff ff       	call   c000f8d0 <free>
c001d206:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d209:	e8 c2 26 ff ff       	call   c000f8d0 <free>
c001d20e:	58                   	pop    eax
c001d20f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d213:	e8 b8 26 ff ff       	call   c000f8d0 <free>
c001d218:	89 34 24             	mov    DWORD PTR [esp],esi
c001d21b:	e8 90 62 ff ff       	call   c00134b0 <File::close()>
c001d220:	83 c4 10             	add    esp,0x10
c001d223:	b0 01                	mov    al,0x1
c001d225:	83 c4 3c             	add    esp,0x3c
c001d228:	5b                   	pop    ebx
c001d229:	5e                   	pop    esi
c001d22a:	5f                   	pop    edi
c001d22b:	5d                   	pop    ebp
c001d22c:	c3                   	ret    

c001d22d <Thr::runtimeReferenceHelper()>:
c001d22d:	83 ec 18             	sub    esp,0x18
c001d230:	68 9e cc 02 c0       	push   0xc002cc9e
c001d235:	e8 55 5c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001d23a:	fa                   	cli    
c001d23b:	83 c4 10             	add    esp,0x10
c001d23e:	eb fe                	jmp    c001d23e <Thr::runtimeReferenceHelper()+0x11>

c001d240 <Thr::getAddressOfKernelSymbol(char const*)>:
c001d240:	57                   	push   edi
c001d241:	56                   	push   esi
c001d242:	53                   	push   ebx
c001d243:	31 db                	xor    ebx,ebx
c001d245:	39 1d 20 26 03 c0    	cmp    DWORD PTR ds:0xc0032620,ebx
c001d24b:	7e 3c                	jle    c001d289 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d24d:	8b 34 9d a0 25 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcda60]
c001d254:	31 ff                	xor    edi,edi
c001d256:	39 3c 9d a0 24 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdb60],edi
c001d25d:	7e 27                	jle    c001d286 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d25f:	50                   	push   eax
c001d260:	50                   	push   eax
c001d261:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d265:	8b 06                	mov    eax,DWORD PTR [esi]
c001d267:	03 04 9d 20 25 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdae0]
c001d26e:	50                   	push   eax
c001d26f:	e8 40 36 fe ff       	call   c00008b4 <strcmp>
c001d274:	83 c4 10             	add    esp,0x10
c001d277:	85 c0                	test   eax,eax
c001d279:	75 05                	jne    c001d280 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d27b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d27e:	eb 0b                	jmp    c001d28b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d280:	83 c6 10             	add    esi,0x10
c001d283:	47                   	inc    edi
c001d284:	eb d0                	jmp    c001d256 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d286:	43                   	inc    ebx
c001d287:	eb bc                	jmp    c001d245 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d289:	31 c0                	xor    eax,eax
c001d28b:	5b                   	pop    ebx
c001d28c:	5e                   	pop    esi
c001d28d:	5f                   	pop    edi
c001d28e:	c3                   	ret    

c001d28f <Thr::loadKernelSymbolTable(char const*)>:
c001d28f:	55                   	push   ebp
c001d290:	57                   	push   edi
c001d291:	56                   	push   esi
c001d292:	53                   	push   ebx
c001d293:	83 ec 68             	sub    esp,0x68
c001d296:	8b 35 70 26 03 c0    	mov    esi,DWORD PTR ds:0xc0032670
c001d29c:	68 14 01 00 00       	push   0x114
c001d2a1:	e8 1a 26 ff ff       	call   c000f8c0 <malloc>
c001d2a6:	83 c4 0c             	add    esp,0xc
c001d2a9:	89 c3                	mov    ebx,eax
c001d2ab:	56                   	push   esi
c001d2ac:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d2b0:	50                   	push   eax
c001d2b1:	e8 38 61 ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001d2b6:	5e                   	pop    esi
c001d2b7:	5f                   	pop    edi
c001d2b8:	6a 01                	push   0x1
c001d2ba:	53                   	push   ebx
c001d2bb:	e8 92 61 ff ff       	call   c0013452 <File::open(FileOpenMode)>
c001d2c0:	83 c4 10             	add    esp,0x10
c001d2c3:	85 c0                	test   eax,eax
c001d2c5:	74 0a                	je     c001d2d1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d2c7:	83 ec 0c             	sub    esp,0xc
c001d2ca:	68 c0 cc 02 c0       	push   0xc002ccc0
c001d2cf:	eb 34                	jmp    c001d305 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d2d1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d2d9:	83 ec 0c             	sub    esp,0xc
c001d2dc:	6a 34                	push   0x34
c001d2de:	e8 dd 25 ff ff       	call   c000f8c0 <malloc>
c001d2e3:	59                   	pop    ecx
c001d2e4:	89 c7                	mov    edi,eax
c001d2e6:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d2ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d2ec:	56                   	push   esi
c001d2ed:	57                   	push   edi
c001d2ee:	6a 00                	push   0x0
c001d2f0:	6a 34                	push   0x34
c001d2f2:	53                   	push   ebx
c001d2f3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2f6:	83 c4 20             	add    esp,0x20
c001d2f9:	85 c0                	test   eax,eax
c001d2fb:	74 17                	je     c001d314 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d2fd:	83 ec 0c             	sub    esp,0xc
c001d300:	68 d7 cc 02 c0       	push   0xc002ccd7
c001d305:	e8 ed d5 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001d30a:	83 c4 10             	add    esp,0x10
c001d30d:	31 c0                	xor    eax,eax
c001d30f:	e9 31 02 00 00       	jmp    c001d545 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d314:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d31a:	75 e1                	jne    c001d2fd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d31c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d31f:	85 c0                	test   eax,eax
c001d321:	74 da                	je     c001d2fd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d323:	52                   	push   edx
c001d324:	31 d2                	xor    edx,edx
c001d326:	52                   	push   edx
c001d327:	50                   	push   eax
c001d328:	53                   	push   ebx
c001d329:	e8 e2 61 ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d32e:	83 c4 10             	add    esp,0x10
c001d331:	85 c0                	test   eax,eax
c001d333:	75 c8                	jne    c001d2fd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d335:	83 ec 0c             	sub    esp,0xc
c001d338:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d33c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d340:	31 ed                	xor    ebp,ebp
c001d342:	0f af c2             	imul   eax,edx
c001d345:	50                   	push   eax
c001d346:	e8 75 25 ff ff       	call   c000f8c0 <malloc>
c001d34b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d34d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d351:	89 34 24             	mov    DWORD PTR [esp],esi
c001d354:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d358:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d35c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d360:	0f af c2             	imul   eax,edx
c001d363:	99                   	cdq    
c001d364:	52                   	push   edx
c001d365:	50                   	push   eax
c001d366:	53                   	push   ebx
c001d367:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d36a:	83 c4 20             	add    esp,0x20
c001d36d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d375:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d37d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d385:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d38d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d391:	0f 86 aa 00 00 00    	jbe    c001d441 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d397:	0f b7 f5             	movzx  esi,bp
c001d39a:	6b f6 28             	imul   esi,esi,0x28
c001d39d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d3a1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d3a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3a8:	50                   	push   eax
c001d3a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d3ad:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d3b1:	8b 16                	mov    edx,DWORD PTR [esi]
c001d3b3:	6b c0 28             	imul   eax,eax,0x28
c001d3b6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d3ba:	89 d0                	mov    eax,edx
c001d3bc:	31 d2                	xor    edx,edx
c001d3be:	52                   	push   edx
c001d3bf:	50                   	push   eax
c001d3c0:	53                   	push   ebx
c001d3c1:	e8 4a 61 ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d3c6:	83 c4 0c             	add    esp,0xc
c001d3c9:	6a 20                	push   0x20
c001d3cb:	6a 00                	push   0x0
c001d3cd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d3d1:	52                   	push   edx
c001d3d2:	e8 95 33 fe ff       	call   c000076c <memset>
c001d3d7:	58                   	pop    eax
c001d3d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d3da:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d3de:	51                   	push   ecx
c001d3df:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d3e3:	52                   	push   edx
c001d3e4:	6a 00                	push   0x0
c001d3e6:	6a 1f                	push   0x1f
c001d3e8:	53                   	push   ebx
c001d3e9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d3ec:	83 c4 18             	add    esp,0x18
c001d3ef:	68 ee cc 02 c0       	push   0xc002ccee
c001d3f4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d3f8:	52                   	push   edx
c001d3f9:	e8 b6 34 fe ff       	call   c00008b4 <strcmp>
c001d3fe:	83 c4 10             	add    esp,0x10
c001d401:	85 c0                	test   eax,eax
c001d403:	75 0f                	jne    c001d414 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d405:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d408:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d40c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d410:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d414:	50                   	push   eax
c001d415:	50                   	push   eax
c001d416:	68 f6 cc 02 c0       	push   0xc002ccf6
c001d41b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d41f:	50                   	push   eax
c001d420:	e8 8f 34 fe ff       	call   c00008b4 <strcmp>
c001d425:	83 c4 10             	add    esp,0x10
c001d428:	85 c0                	test   eax,eax
c001d42a:	75 0f                	jne    c001d43b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d42c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d42f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d433:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d437:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d43b:	45                   	inc    ebp
c001d43c:	e9 4c ff ff ff       	jmp    c001d38d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d441:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d446:	75 10                	jne    c001d458 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d448:	83 ec 0c             	sub    esp,0xc
c001d44b:	68 fe cc 02 c0       	push   0xc002ccfe
c001d450:	e8 a2 d4 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001d455:	83 c4 10             	add    esp,0x10
c001d458:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d45d:	75 10                	jne    c001d46f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d45f:	83 ec 0c             	sub    esp,0xc
c001d462:	68 fe cc 02 c0       	push   0xc002ccfe
c001d467:	e8 8b d4 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001d46c:	83 c4 10             	add    esp,0x10
c001d46f:	31 d2                	xor    edx,edx
c001d471:	50                   	push   eax
c001d472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d476:	52                   	push   edx
c001d477:	50                   	push   eax
c001d478:	53                   	push   ebx
c001d479:	e8 92 60 ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d47e:	5a                   	pop    edx
c001d47f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d483:	e8 38 24 ff ff       	call   c000f8c0 <malloc>
c001d488:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d48c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d490:	31 c9                	xor    ecx,ecx
c001d492:	5e                   	pop    esi
c001d493:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d495:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d499:	55                   	push   ebp
c001d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d49e:	51                   	push   ecx
c001d49f:	52                   	push   edx
c001d4a0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d4a4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d4a8:	53                   	push   ebx
c001d4a9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d4ac:	83 c4 14             	add    esp,0x14
c001d4af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d4b3:	e8 08 24 ff ff       	call   c000f8c0 <malloc>
c001d4b8:	89 c6                	mov    esi,eax
c001d4ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d4bc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4bf:	56                   	push   esi
c001d4c0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d4c4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d4c8:	51                   	push   ecx
c001d4c9:	52                   	push   edx
c001d4ca:	53                   	push   ebx
c001d4cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d4ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4d2:	8b 15 20 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032620
c001d4d8:	83 c4 1c             	add    esp,0x1c
c001d4db:	c1 e8 04             	shr    eax,0x4
c001d4de:	89 04 95 a0 24 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdb60],eax
c001d4e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4e9:	31 d2                	xor    edx,edx
c001d4eb:	52                   	push   edx
c001d4ec:	50                   	push   eax
c001d4ed:	53                   	push   ebx
c001d4ee:	e8 1d 60 ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d4f3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d4f5:	31 d2                	xor    edx,edx
c001d4f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4fa:	56                   	push   esi
c001d4fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d4ff:	52                   	push   edx
c001d500:	50                   	push   eax
c001d501:	53                   	push   ebx
c001d502:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d505:	83 c4 14             	add    esp,0x14
c001d508:	53                   	push   ebx
c001d509:	e8 a2 5f ff ff       	call   c00134b0 <File::close()>
c001d50e:	5d                   	pop    ebp
c001d50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d513:	e8 b8 23 ff ff       	call   c000f8d0 <free>
c001d518:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d51b:	e8 b0 23 ff ff       	call   c000f8d0 <free>
c001d520:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c001d525:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d529:	8d 50 01             	lea    edx,[eax+0x1]
c001d52c:	89 0c 85 a0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda60],ecx
c001d533:	89 34 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],esi
c001d53a:	89 15 20 26 03 c0    	mov    DWORD PTR ds:0xc0032620,edx
c001d540:	83 c4 10             	add    esp,0x10
c001d543:	b0 01                	mov    al,0x1
c001d545:	83 c4 5c             	add    esp,0x5c
c001d548:	5b                   	pop    ebx
c001d549:	5e                   	pop    esi
c001d54a:	5f                   	pop    edi
c001d54b:	5d                   	pop    ebp
c001d54c:	c3                   	ret    

c001d54d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d54d:	55                   	push   ebp
c001d54e:	57                   	push   edi
c001d54f:	56                   	push   esi
c001d550:	53                   	push   ebx
c001d551:	81 ec 68 03 00 00    	sub    esp,0x368
c001d557:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d55e:	8b 1d 70 26 03 c0    	mov    ebx,DWORD PTR ds:0xc0032670
c001d564:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d568:	68 14 01 00 00       	push   0x114
c001d56d:	e8 4e 23 ff ff       	call   c000f8c0 <malloc>
c001d572:	83 c4 0c             	add    esp,0xc
c001d575:	89 c5                	mov    ebp,eax
c001d577:	53                   	push   ebx
c001d578:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d57f:	50                   	push   eax
c001d580:	e8 69 5e ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001d585:	5e                   	pop    esi
c001d586:	5f                   	pop    edi
c001d587:	6a 01                	push   0x1
c001d589:	55                   	push   ebp
c001d58a:	e8 c3 5e ff ff       	call   c0013452 <File::open(FileOpenMode)>
c001d58f:	83 c4 10             	add    esp,0x10
c001d592:	85 c0                	test   eax,eax
c001d594:	0f 85 a7 06 00 00    	jne    c001dc41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d59a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d5a2:	83 ec 0c             	sub    esp,0xc
c001d5a5:	6a 34                	push   0x34
c001d5a7:	e8 14 23 ff ff       	call   c000f8c0 <malloc>
c001d5ac:	5b                   	pop    ebx
c001d5ad:	89 c7                	mov    edi,eax
c001d5af:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d5b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5b6:	53                   	push   ebx
c001d5b7:	57                   	push   edi
c001d5b8:	6a 00                	push   0x0
c001d5ba:	6a 34                	push   0x34
c001d5bc:	55                   	push   ebp
c001d5bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d5c0:	83 c4 20             	add    esp,0x20
c001d5c3:	85 c0                	test   eax,eax
c001d5c5:	0f 85 76 06 00 00    	jne    c001dc41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5cb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d5d1:	0f 85 6a 06 00 00    	jne    c001dc41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5d7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d5da:	85 c0                	test   eax,eax
c001d5dc:	0f 84 5f 06 00 00    	je     c001dc41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5e2:	31 d2                	xor    edx,edx
c001d5e4:	51                   	push   ecx
c001d5e5:	52                   	push   edx
c001d5e6:	50                   	push   eax
c001d5e7:	55                   	push   ebp
c001d5e8:	e8 23 5f ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d5ed:	83 c4 10             	add    esp,0x10
c001d5f0:	85 c0                	test   eax,eax
c001d5f2:	0f 85 49 06 00 00    	jne    c001dc41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5f8:	83 ec 0c             	sub    esp,0xc
c001d5fb:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d5fe:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d602:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d606:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d60a:	0f af c2             	imul   eax,edx
c001d60d:	50                   	push   eax
c001d60e:	e8 ad 22 ff ff       	call   c000f8c0 <malloc>
c001d613:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d616:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d61a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d61d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d621:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d625:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d629:	0f af c2             	imul   eax,edx
c001d62c:	99                   	cdq    
c001d62d:	52                   	push   edx
c001d62e:	50                   	push   eax
c001d62f:	55                   	push   ebp
c001d630:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d633:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d636:	83 c4 20             	add    esp,0x20
c001d639:	85 c0                	test   eax,eax
c001d63b:	0f 84 00 06 00 00    	je     c001dc41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d641:	52                   	push   edx
c001d642:	31 d2                	xor    edx,edx
c001d644:	52                   	push   edx
c001d645:	50                   	push   eax
c001d646:	55                   	push   ebp
c001d647:	e8 c4 5e ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d64c:	83 c4 10             	add    esp,0x10
c001d64f:	85 c0                	test   eax,eax
c001d651:	0f 85 ea 05 00 00    	jne    c001dc41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d657:	83 ec 0c             	sub    esp,0xc
c001d65a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d65e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d662:	31 f6                	xor    esi,esi
c001d664:	0f af c2             	imul   eax,edx
c001d667:	50                   	push   eax
c001d668:	e8 53 22 ff ff       	call   c000f8c0 <malloc>
c001d66d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d670:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d674:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d677:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d67b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d67f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d683:	0f af c2             	imul   eax,edx
c001d686:	99                   	cdq    
c001d687:	52                   	push   edx
c001d688:	50                   	push   eax
c001d689:	55                   	push   ebp
c001d68a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d68d:	83 c4 20             	add    esp,0x20
c001d690:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d694:	0f 86 8a 00 00 00    	jbe    c001d724 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d69a:	0f b7 de             	movzx  ebx,si
c001d69d:	c1 e3 05             	shl    ebx,0x5
c001d6a0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d6a4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d6a7:	75 75                	jne    c001d71e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d6a9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d6ac:	31 d2                	xor    edx,edx
c001d6ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d6b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d6b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6b9:	50                   	push   eax
c001d6ba:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d6bd:	52                   	push   edx
c001d6be:	50                   	push   eax
c001d6bf:	55                   	push   ebp
c001d6c0:	e8 4b 5e ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d6c5:	83 c4 10             	add    esp,0x10
c001d6c8:	85 c0                	test   eax,eax
c001d6ca:	0f 85 71 05 00 00    	jne    c001dc41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d6d0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d6d7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6da:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d6de:	31 d2                	xor    edx,edx
c001d6e0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d6e4:	83 ec 0c             	sub    esp,0xc
c001d6e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d6eb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d6f2:	50                   	push   eax
c001d6f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6fb:	52                   	push   edx
c001d6fc:	50                   	push   eax
c001d6fd:	55                   	push   ebp
c001d6fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d701:	83 c4 1c             	add    esp,0x1c
c001d704:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d707:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d70a:	50                   	push   eax
c001d70b:	6a 00                	push   0x0
c001d70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d711:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d715:	50                   	push   eax
c001d716:	e8 51 30 fe ff       	call   c000076c <memset>
c001d71b:	83 c4 10             	add    esp,0x10
c001d71e:	46                   	inc    esi
c001d71f:	e9 6c ff ff ff       	jmp    c001d690 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d724:	53                   	push   ebx
c001d725:	31 db                	xor    ebx,ebx
c001d727:	68 00 01 00 00       	push   0x100
c001d72c:	6a 00                	push   0x0
c001d72e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d732:	50                   	push   eax
c001d733:	e8 34 30 fe ff       	call   c000076c <memset>
c001d738:	83 c4 0c             	add    esp,0xc
c001d73b:	68 00 01 00 00       	push   0x100
c001d740:	6a 00                	push   0x0
c001d742:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d749:	50                   	push   eax
c001d74a:	e8 1d 30 fe ff       	call   c000076c <memset>
c001d74f:	83 c4 10             	add    esp,0x10
c001d752:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d75a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d762:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d76a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d772:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d77a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d77e:	0f 86 30 01 00 00    	jbe    c001d8b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d784:	0f b7 f3             	movzx  esi,bx
c001d787:	6b f6 28             	imul   esi,esi,0x28
c001d78a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d78e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d791:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d795:	52                   	push   edx
c001d796:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d79a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d79e:	8b 06                	mov    eax,DWORD PTR [esi]
c001d7a0:	6b d2 28             	imul   edx,edx,0x28
c001d7a3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d7a7:	31 d2                	xor    edx,edx
c001d7a9:	52                   	push   edx
c001d7aa:	50                   	push   eax
c001d7ab:	55                   	push   ebp
c001d7ac:	e8 5f 5d ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d7b1:	83 c4 0c             	add    esp,0xc
c001d7b4:	6a 20                	push   0x20
c001d7b6:	6a 00                	push   0x0
c001d7b8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d7bf:	51                   	push   ecx
c001d7c0:	e8 a7 2f fe ff       	call   c000076c <memset>
c001d7c5:	59                   	pop    ecx
c001d7c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d7c9:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d7cd:	52                   	push   edx
c001d7ce:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d7d5:	51                   	push   ecx
c001d7d6:	6a 00                	push   0x0
c001d7d8:	6a 1f                	push   0x1f
c001d7da:	55                   	push   ebp
c001d7db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d7de:	83 c4 1c             	add    esp,0x1c
c001d7e1:	6a 09                	push   0x9
c001d7e3:	68 18 cd 02 c0       	push   0xc002cd18
c001d7e8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d7ef:	51                   	push   ecx
c001d7f0:	e8 73 2e fe ff       	call   c0000668 <memcmp>
c001d7f5:	83 c4 10             	add    esp,0x10
c001d7f8:	85 c0                	test   eax,eax
c001d7fa:	75 21                	jne    c001d81d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d7fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d800:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d804:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d808:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d80c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d80f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d816:	89 d0                	mov    eax,edx
c001d818:	40                   	inc    eax
c001d819:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d81d:	50                   	push   eax
c001d81e:	6a 09                	push   0x9
c001d820:	68 22 cd 02 c0       	push   0xc002cd22
c001d825:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d82c:	50                   	push   eax
c001d82d:	e8 36 2e fe ff       	call   c0000668 <memcmp>
c001d832:	83 c4 10             	add    esp,0x10
c001d835:	85 c0                	test   eax,eax
c001d837:	75 21                	jne    c001d85a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d839:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d83d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d841:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d845:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d849:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d84c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d853:	89 d0                	mov    eax,edx
c001d855:	40                   	inc    eax
c001d856:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d85a:	50                   	push   eax
c001d85b:	50                   	push   eax
c001d85c:	68 ee cc 02 c0       	push   0xc002ccee
c001d861:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d868:	50                   	push   eax
c001d869:	e8 46 30 fe ff       	call   c00008b4 <strcmp>
c001d86e:	83 c4 10             	add    esp,0x10
c001d871:	85 c0                	test   eax,eax
c001d873:	75 0f                	jne    c001d884 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d875:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d878:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d87c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d880:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d884:	50                   	push   eax
c001d885:	50                   	push   eax
c001d886:	68 f6 cc 02 c0       	push   0xc002ccf6
c001d88b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d892:	50                   	push   eax
c001d893:	e8 1c 30 fe ff       	call   c00008b4 <strcmp>
c001d898:	83 c4 10             	add    esp,0x10
c001d89b:	85 c0                	test   eax,eax
c001d89d:	75 0f                	jne    c001d8ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d89f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d8a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d8a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8aa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d8ae:	43                   	inc    ebx
c001d8af:	e9 c6 fe ff ff       	jmp    c001d77a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d8b4:	31 d2                	xor    edx,edx
c001d8b6:	50                   	push   eax
c001d8b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8bb:	52                   	push   edx
c001d8bc:	50                   	push   eax
c001d8bd:	55                   	push   ebp
c001d8be:	e8 4d 5c ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d8c3:	58                   	pop    eax
c001d8c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d8c8:	e8 f3 1f ff ff       	call   c000f8c0 <malloc>
c001d8cd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d8d0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d8d4:	31 d2                	xor    edx,edx
c001d8d6:	58                   	pop    eax
c001d8d7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d8db:	53                   	push   ebx
c001d8dc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d8e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d8e4:	52                   	push   edx
c001d8e5:	50                   	push   eax
c001d8e6:	55                   	push   ebp
c001d8e7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d8ea:	83 c4 14             	add    esp,0x14
c001d8ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8f1:	e8 ca 1f ff ff       	call   c000f8c0 <malloc>
c001d8f6:	31 d2                	xor    edx,edx
c001d8f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d8fc:	83 c4 0c             	add    esp,0xc
c001d8ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d903:	52                   	push   edx
c001d904:	50                   	push   eax
c001d905:	55                   	push   ebp
c001d906:	e8 05 5c ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d90b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d90e:	31 d2                	xor    edx,edx
c001d910:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d913:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d917:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d91b:	52                   	push   edx
c001d91c:	50                   	push   eax
c001d91d:	55                   	push   ebp
c001d91e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d921:	83 c4 20             	add    esp,0x20
c001d924:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d92c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d930:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d934:	0f 84 0b 03 00 00    	je     c001dc45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d93a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d941:	31 d2                	xor    edx,edx
c001d943:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d947:	c1 e8 03             	shr    eax,0x3
c001d94a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d94e:	51                   	push   ecx
c001d94f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d953:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d957:	52                   	push   edx
c001d958:	50                   	push   eax
c001d959:	55                   	push   ebp
c001d95a:	e8 b1 5b ff ff       	call   c0013510 <File::seek(unsigned long long)>
c001d95f:	5b                   	pop    ebx
c001d960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d964:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d96b:	e8 50 1f ff ff       	call   c000f8c0 <malloc>
c001d970:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d973:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d977:	31 d2                	xor    edx,edx
c001d979:	5e                   	pop    esi
c001d97a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d97e:	50                   	push   eax
c001d97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d983:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d987:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d98e:	52                   	push   edx
c001d98f:	50                   	push   eax
c001d990:	55                   	push   ebp
c001d991:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d994:	83 c4 20             	add    esp,0x20
c001d997:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d99f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d9a3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d9a7:	0f 8d 7c 02 00 00    	jge    c001dc29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d9ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d9b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9b5:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d9ba:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d9bd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d9c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9c5:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d9c9:	89 d8                	mov    eax,ebx
c001d9cb:	c1 e8 08             	shr    eax,0x8
c001d9ce:	89 c6                	mov    esi,eax
c001d9d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d9d4:	c1 e6 04             	shl    esi,0x4
c001d9d7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d9db:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d9de:	85 d2                	test   edx,edx
c001d9e0:	0f 85 bf 00 00 00    	jne    c001daa5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d9e6:	83 ec 0c             	sub    esp,0xc
c001d9e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9ed:	03 06                	add    eax,DWORD PTR [esi]
c001d9ef:	50                   	push   eax
c001d9f0:	e8 4b f8 ff ff       	call   c001d240 <Thr::getAddressOfKernelSymbol(char const*)>
c001d9f5:	83 c4 10             	add    esp,0x10
c001d9f8:	89 c2                	mov    edx,eax
c001d9fa:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d9ff:	85 c0                	test   eax,eax
c001da01:	0f 85 9e 00 00 00    	jne    c001daa5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001da07:	83 ec 0c             	sub    esp,0xc
c001da0a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da0e:	03 06                	add    eax,DWORD PTR [esi]
c001da10:	50                   	push   eax
c001da11:	e8 5d 0b ff ff       	call   c000e573 <Krnl::resolveCompatibilitySymbol(char*)>
c001da16:	83 c4 10             	add    esp,0x10
c001da19:	89 c2                	mov    edx,eax
c001da1b:	85 c0                	test   eax,eax
c001da1d:	0f 85 82 00 00 00    	jne    c001daa5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001da23:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001da27:	50                   	push   eax
c001da28:	50                   	push   eax
c001da29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da2d:	03 06                	add    eax,DWORD PTR [esi]
c001da2f:	50                   	push   eax
c001da30:	68 2c cd 02 c0       	push   0xc002cd2c
c001da35:	e8 55 54 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001da3a:	58                   	pop    eax
c001da3b:	5a                   	pop    edx
c001da3c:	68 46 cd 02 c0       	push   0xc002cd46
c001da41:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da48:	50                   	push   eax
c001da49:	e8 da 2d fe ff       	call   c0000828 <strcpy>
c001da4e:	59                   	pop    ecx
c001da4f:	58                   	pop    eax
c001da50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da54:	03 06                	add    eax,DWORD PTR [esi]
c001da56:	50                   	push   eax
c001da57:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da5e:	50                   	push   eax
c001da5f:	e8 04 2f fe ff       	call   c0000968 <strcat>
c001da64:	58                   	pop    eax
c001da65:	5a                   	pop    edx
c001da66:	68 dc cd 02 c0       	push   0xc002cddc
c001da6b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da72:	50                   	push   eax
c001da73:	e8 f0 2e fe ff       	call   c0000968 <strcat>
c001da78:	83 c4 10             	add    esp,0x10
c001da7b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001da80:	0f 84 5d 01 00 00    	je     c001dbe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001da86:	83 ec 0c             	sub    esp,0xc
c001da89:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da90:	50                   	push   eax
c001da91:	e8 61 ce ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001da96:	83 c4 10             	add    esp,0x10
c001da99:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001da9d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001daa1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001daa5:	80 fb 01             	cmp    bl,0x1
c001daa8:	0f 85 88 00 00 00    	jne    c001db36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001daae:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001dab5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dab9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001dabd:	01 ce                	add    esi,ecx
c001dabf:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001dac5:	0f 94 c0             	sete   al
c001dac8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001dace:	0f 94 c3             	sete   bl
c001dad1:	09 c3                	or     ebx,eax
c001dad3:	8b 06                	mov    eax,DWORD PTR [esi]
c001dad5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001dada:	74 41                	je     c001db1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001dadc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001dadf:	84 db                	test   bl,bl
c001dae1:	75 15                	jne    c001daf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001dae3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001dae7:	66 83 f8 0c          	cmp    ax,0xc
c001daeb:	76 05                	jbe    c001daf2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001daed:	b8 0c 00 00 00       	mov    eax,0xc
c001daf2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001daf6:	76 37                	jbe    c001db2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001daf8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001dafc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001db01:	0f 84 dc 00 00 00    	je     c001dbe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db07:	83 ec 0c             	sub    esp,0xc
c001db0a:	68 5d cd 02 c0       	push   0xc002cd5d
c001db0f:	e8 e3 cd ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001db14:	83 c4 10             	add    esp,0x10
c001db17:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001db1b:	eb 12                	jmp    c001db2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001db1d:	01 c1                	add    ecx,eax
c001db1f:	84 db                	test   bl,bl
c001db21:	75 0c                	jne    c001db2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001db23:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001db27:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001db2b:	77 02                	ja     c001db2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001db2d:	01 d1                	add    ecx,edx
c001db2f:	89 0e                	mov    DWORD PTR [esi],ecx
c001db31:	e9 ea 00 00 00       	jmp    c001dc20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001db36:	80 fb 02             	cmp    bl,0x2
c001db39:	75 7c                	jne    c001dbb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001db3b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001db42:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001db46:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001db4a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001db50:	74 20                	je     c001db72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001db52:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001db58:	74 18                	je     c001db72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001db5a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001db5e:	b9 0a 00 00 00       	mov    ecx,0xa
c001db63:	66 83 f8 0e          	cmp    ax,0xe
c001db67:	77 03                	ja     c001db6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001db69:	8d 48 fc             	lea    ecx,[eax-0x4]
c001db6c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001db70:	76 1f                	jbe    c001db91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001db72:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001db76:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001db7b:	74 66                	je     c001dbe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db7d:	83 ec 0c             	sub    esp,0xc
c001db80:	68 79 cd 02 c0       	push   0xc002cd79
c001db85:	e8 6d cd ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001db8a:	83 c4 10             	add    esp,0x10
c001db8d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db91:	8b 06                	mov    eax,DWORD PTR [esi]
c001db93:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001db98:	74 13                	je     c001dbad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001db9a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001db9e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001dba5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001dba9:	01 c8                	add    eax,ecx
c001dbab:	eb 04                	jmp    c001dbb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001dbad:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001dbb1:	01 c2                	add    edx,eax
c001dbb3:	89 16                	mov    DWORD PTR [esi],edx
c001dbb5:	eb 69                	jmp    c001dc20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001dbb7:	0f b6 db             	movzx  ebx,bl
c001dbba:	50                   	push   eax
c001dbbb:	50                   	push   eax
c001dbbc:	53                   	push   ebx
c001dbbd:	68 95 cd 02 c0       	push   0xc002cd95
c001dbc2:	e8 c8 52 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001dbc7:	83 c4 10             	add    esp,0x10
c001dbca:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001dbcf:	74 12                	je     c001dbe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001dbd1:	83 ec 0c             	sub    esp,0xc
c001dbd4:	68 a0 cd 02 c0       	push   0xc002cda0
c001dbd9:	e8 19 cd ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001dbde:	83 c4 10             	add    esp,0x10
c001dbe1:	eb 3d                	jmp    c001dc20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001dbe3:	83 ec 0c             	sub    esp,0xc
c001dbe6:	55                   	push   ebp
c001dbe7:	e8 c4 58 ff ff       	call   c00134b0 <File::close()>
c001dbec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dbef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dbf2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dbf5:	59                   	pop    ecx
c001dbf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dbfa:	e8 d1 1c ff ff       	call   c000f8d0 <free>
c001dbff:	5b                   	pop    ebx
c001dc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dc04:	e8 c7 1c ff ff       	call   c000f8d0 <free>
c001dc09:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc0c:	e8 bf 1c ff ff       	call   c000f8d0 <free>
c001dc11:	5e                   	pop    esi
c001dc12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc16:	e8 b5 1c ff ff       	call   c000f8d0 <free>
c001dc1b:	83 c4 10             	add    esp,0x10
c001dc1e:	eb 21                	jmp    c001dc41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001dc20:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001dc24:	e9 76 fd ff ff       	jmp    c001d99f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001dc29:	83 ec 0c             	sub    esp,0xc
c001dc2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dc30:	e8 9b 1c ff ff       	call   c000f8d0 <free>
c001dc35:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001dc39:	83 c4 10             	add    esp,0x10
c001dc3c:	e9 eb fc ff ff       	jmp    c001d92c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001dc41:	31 c0                	xor    eax,eax
c001dc43:	eb 33                	jmp    c001dc78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001dc45:	83 ec 0c             	sub    esp,0xc
c001dc48:	55                   	push   ebp
c001dc49:	e8 62 58 ff ff       	call   c00134b0 <File::close()>
c001dc4e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dc51:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dc54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dc57:	58                   	pop    eax
c001dc58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dc5c:	e8 6f 1c ff ff       	call   c000f8d0 <free>
c001dc61:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc64:	e8 67 1c ff ff       	call   c000f8d0 <free>
c001dc69:	5a                   	pop    edx
c001dc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc6e:	e8 5d 1c ff ff       	call   c000f8d0 <free>
c001dc73:	83 c4 10             	add    esp,0x10
c001dc76:	b0 01                	mov    al,0x1
c001dc78:	81 c4 5c 03 00 00    	add    esp,0x35c
c001dc7e:	5b                   	pop    ebx
c001dc7f:	5e                   	pop    esi
c001dc80:	5f                   	pop    edi
c001dc81:	5d                   	pop    ebp
c001dc82:	c3                   	ret    

c001dc83 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001dc83:	56                   	push   esi
c001dc84:	31 d2                	xor    edx,edx
c001dc86:	53                   	push   ebx
c001dc87:	8b 1d 80 1e 03 c0    	mov    ebx,DWORD PTR ds:0xc0031e80
c001dc8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc91:	39 d3                	cmp    ebx,edx
c001dc93:	7e 1b                	jle    c001dcb0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001dc95:	8b 04 95 a0 20 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdf60]
c001dc9c:	39 c8                	cmp    eax,ecx
c001dc9e:	77 0d                	ja     c001dcad <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001dca0:	8b 34 95 a0 1e 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce160]
c001dca7:	01 c6                	add    esi,eax
c001dca9:	39 ce                	cmp    esi,ecx
c001dcab:	77 05                	ja     c001dcb2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001dcad:	42                   	inc    edx
c001dcae:	eb e1                	jmp    c001dc91 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001dcb0:	31 c0                	xor    eax,eax
c001dcb2:	5b                   	pop    ebx
c001dcb3:	5e                   	pop    esi
c001dcb4:	c3                   	ret    

c001dcb5 <Thr::getDriverNameFromAddress(unsigned long)>:
c001dcb5:	53                   	push   ebx
c001dcb6:	31 c0                	xor    eax,eax
c001dcb8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dcbc:	8b 1d 80 1e 03 c0    	mov    ebx,DWORD PTR ds:0xc0031e80
c001dcc2:	39 c3                	cmp    ebx,eax
c001dcc4:	7e 22                	jle    c001dce8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001dcc6:	8b 14 85 a0 20 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdf60]
c001dccd:	39 ca                	cmp    edx,ecx
c001dccf:	77 14                	ja     c001dce5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dcd1:	03 14 85 a0 1e 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce160]
c001dcd8:	39 ca                	cmp    edx,ecx
c001dcda:	76 09                	jbe    c001dce5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dcdc:	8b 04 85 a0 22 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdd60]
c001dce3:	eb 05                	jmp    c001dcea <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001dce5:	40                   	inc    eax
c001dce6:	eb da                	jmp    c001dcc2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001dce8:	31 c0                	xor    eax,eax
c001dcea:	5b                   	pop    ebx
c001dceb:	c3                   	ret    

c001dcec <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001dcec:	53                   	push   ebx
c001dced:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dcf1:	53                   	push   ebx
c001dcf2:	e8 8c ff ff ff       	call   c001dc83 <Thr::getDriverBaseFromAddress(unsigned long)>
c001dcf7:	5a                   	pop    edx
c001dcf8:	31 d2                	xor    edx,edx
c001dcfa:	85 c0                	test   eax,eax
c001dcfc:	74 04                	je     c001dd02 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001dcfe:	89 da                	mov    edx,ebx
c001dd00:	29 c2                	sub    edx,eax
c001dd02:	89 d0                	mov    eax,edx
c001dd04:	5b                   	pop    ebx
c001dd05:	c3                   	ret    

c001dd06 <Thr::loadDLL(char const*, bool)>:
c001dd06:	55                   	push   ebp
c001dd07:	57                   	push   edi
c001dd08:	56                   	push   esi
c001dd09:	53                   	push   ebx
c001dd0a:	81 ec 34 01 00 00    	sub    esp,0x134
c001dd10:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dd17:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dd1e:	56                   	push   esi
c001dd1f:	68 b8 cd 02 c0       	push   0xc002cdb8
c001dd24:	e8 66 51 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001dd29:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dd30:	e8 8b 1b ff ff       	call   c000f8c0 <malloc>
c001dd35:	83 c4 0c             	add    esp,0xc
c001dd38:	89 c3                	mov    ebx,eax
c001dd3a:	ff 35 70 26 03 c0    	push   DWORD PTR ds:0xc0032670
c001dd40:	56                   	push   esi
c001dd41:	50                   	push   eax
c001dd42:	e8 a7 56 ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001dd47:	83 c4 10             	add    esp,0x10
c001dd4a:	85 db                	test   ebx,ebx
c001dd4c:	75 3c                	jne    c001dd8a <Thr::loadDLL(char const*, bool)+0x84>
c001dd4e:	89 f8                	mov    eax,edi
c001dd50:	84 c0                	test   al,al
c001dd52:	0f 84 cc 01 00 00    	je     c001df24 <Thr::loadDLL(char const*, bool)+0x21e>
c001dd58:	55                   	push   ebp
c001dd59:	55                   	push   ebp
c001dd5a:	68 c9 cd 02 c0       	push   0xc002cdc9
c001dd5f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001dd63:	55                   	push   ebp
c001dd64:	e8 bf 2a fe ff       	call   c0000828 <strcpy>
c001dd69:	58                   	pop    eax
c001dd6a:	5a                   	pop    edx
c001dd6b:	56                   	push   esi
c001dd6c:	55                   	push   ebp
c001dd6d:	e8 f6 2b fe ff       	call   c0000968 <strcat>
c001dd72:	59                   	pop    ecx
c001dd73:	58                   	pop    eax
c001dd74:	68 dc cd 02 c0       	push   0xc002cddc
c001dd79:	55                   	push   ebp
c001dd7a:	e8 e9 2b fe ff       	call   c0000968 <strcat>
c001dd7f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dd82:	e8 70 cb ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001dd87:	83 c4 10             	add    esp,0x10
c001dd8a:	51                   	push   ecx
c001dd8b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001dd8f:	50                   	push   eax
c001dd90:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dd94:	50                   	push   eax
c001dd95:	53                   	push   ebx
c001dd96:	e8 63 59 ff ff       	call   c00136fe <File::stat(unsigned long long*, bool*)>
c001dd9b:	83 c4 10             	add    esp,0x10
c001dd9e:	85 db                	test   ebx,ebx
c001dda0:	74 0c                	je     c001ddae <Thr::loadDLL(char const*, bool)+0xa8>
c001dda2:	83 ec 0c             	sub    esp,0xc
c001dda5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dda7:	53                   	push   ebx
c001dda8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ddab:	83 c4 10             	add    esp,0x10
c001ddae:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001ddb3:	75 0a                	jne    c001ddbf <Thr::loadDLL(char const*, bool)+0xb9>
c001ddb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ddb9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001ddbd:	75 3c                	jne    c001ddfb <Thr::loadDLL(char const*, bool)+0xf5>
c001ddbf:	89 f8                	mov    eax,edi
c001ddc1:	84 c0                	test   al,al
c001ddc3:	0f 84 43 01 00 00    	je     c001df0c <Thr::loadDLL(char const*, bool)+0x206>
c001ddc9:	51                   	push   ecx
c001ddca:	51                   	push   ecx
c001ddcb:	68 c9 cd 02 c0       	push   0xc002cdc9
c001ddd0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001ddd4:	53                   	push   ebx
c001ddd5:	e8 4e 2a fe ff       	call   c0000828 <strcpy>
c001ddda:	5d                   	pop    ebp
c001dddb:	58                   	pop    eax
c001dddc:	56                   	push   esi
c001dddd:	53                   	push   ebx
c001ddde:	e8 85 2b fe ff       	call   c0000968 <strcat>
c001dde3:	58                   	pop    eax
c001dde4:	5a                   	pop    edx
c001dde5:	68 dc cd 02 c0       	push   0xc002cddc
c001ddea:	53                   	push   ebx
c001ddeb:	e8 78 2b fe ff       	call   c0000968 <strcat>
c001ddf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ddf3:	e8 ff ca ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001ddf8:	83 c4 10             	add    esp,0x10
c001ddfb:	52                   	push   edx
c001ddfc:	6a 03                	push   0x3
c001ddfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001de06:	05 ff 0f 00 00       	add    eax,0xfff
c001de0b:	83 d2 00             	adc    edx,0x0
c001de0e:	0f ac d0 0c          	shrd   eax,edx,0xc
c001de12:	50                   	push   eax
c001de13:	ff 35 90 f2 02 c0    	push   DWORD PTR ds:0xc002f290
c001de19:	e8 a4 45 ff ff       	call   c00123c2 <VAS::allocatePages(int, int)>
c001de1e:	59                   	pop    ecx
c001de1f:	89 c3                	mov    ebx,eax
c001de21:	5d                   	pop    ebp
c001de22:	50                   	push   eax
c001de23:	68 de cd 02 c0       	push   0xc002cdde
c001de28:	e8 62 50 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001de2d:	89 34 24             	mov    DWORD PTR [esp],esi
c001de30:	e8 53 29 fe ff       	call   c0000788 <strlen>
c001de35:	8b 2d 80 1e 03 c0    	mov    ebp,DWORD PTR ds:0xc0031e80
c001de3b:	40                   	inc    eax
c001de3c:	89 04 24             	mov    DWORD PTR [esp],eax
c001de3f:	e8 7c 1a ff ff       	call   c000f8c0 <malloc>
c001de44:	89 04 ad a0 22 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcdd60],eax
c001de4b:	58                   	pop    eax
c001de4c:	a1 80 1e 03 c0       	mov    eax,ds:0xc0031e80
c001de51:	5a                   	pop    edx
c001de52:	56                   	push   esi
c001de53:	ff 34 85 a0 22 03 c0 	push   DWORD PTR [eax*4-0x3ffcdd60]
c001de5a:	e8 c9 29 fe ff       	call   c0000828 <strcpy>
c001de5f:	a1 80 1e 03 c0       	mov    eax,ds:0xc0031e80
c001de64:	8d 50 01             	lea    edx,[eax+0x1]
c001de67:	89 1c 85 a0 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdf60],ebx
c001de6e:	89 15 80 1e 03 c0    	mov    DWORD PTR ds:0xc0031e80,edx
c001de74:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de78:	83 c4 0c             	add    esp,0xc
c001de7b:	89 14 85 a0 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce160],edx
c001de82:	6a 01                	push   0x1
c001de84:	53                   	push   ebx
c001de85:	56                   	push   esi
c001de86:	e8 c2 f6 ff ff       	call   c001d54d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001de8b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001de8f:	83 c4 10             	add    esp,0x10
c001de92:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001de97:	0f 85 83 00 00 00    	jne    c001df20 <Thr::loadDLL(char const*, bool)+0x21a>
c001de9d:	89 f8                	mov    eax,edi
c001de9f:	84 c0                	test   al,al
c001dea1:	74 6d                	je     c001df10 <Thr::loadDLL(char const*, bool)+0x20a>
c001dea3:	83 ec 0c             	sub    esp,0xc
c001dea6:	68 eb cd 02 c0       	push   0xc002cdeb
c001deab:	e8 47 ca ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001deb0:	83 c4 10             	add    esp,0x10
c001deb3:	eb 5b                	jmp    c001df10 <Thr::loadDLL(char const*, bool)+0x20a>
c001deb5:	89 ee                	mov    esi,ebp
c001deb7:	50                   	push   eax
c001deb8:	c1 e6 0c             	shl    esi,0xc
c001debb:	50                   	push   eax
c001debc:	01 de                	add    esi,ebx
c001debe:	56                   	push   esi
c001debf:	ff 35 90 f2 02 c0    	push   DWORD PTR ds:0xc002f290
c001dec5:	e8 60 40 ff ff       	call   c0011f2a <VAS::getPageTableEntry(unsigned long)>
c001deca:	83 c4 10             	add    esp,0x10
c001decd:	f6 00 60             	test   BYTE PTR [eax],0x60
c001ded0:	75 0c                	jne    c001dede <Thr::loadDLL(char const*, bool)+0x1d8>
c001ded2:	83 ec 0c             	sub    esp,0xc
c001ded5:	56                   	push   esi
c001ded6:	e8 c7 1f ff ff       	call   c000fea2 <Phys::freePage(unsigned long)>
c001dedb:	83 c4 10             	add    esp,0x10
c001dede:	45                   	inc    ebp
c001dedf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dee3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dee7:	05 ff 0f 00 00       	add    eax,0xfff
c001deec:	bf 00 00 00 00       	mov    edi,0x0
c001def1:	83 d2 00             	adc    edx,0x0
c001def4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001def8:	c1 ea 0c             	shr    edx,0xc
c001defb:	39 c5                	cmp    ebp,eax
c001defd:	89 d1                	mov    ecx,edx
c001deff:	89 f8                	mov    eax,edi
c001df01:	19 c8                	sbb    eax,ecx
c001df03:	72 b0                	jb     c001deb5 <Thr::loadDLL(char const*, bool)+0x1af>
c001df05:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001df0a:	75 18                	jne    c001df24 <Thr::loadDLL(char const*, bool)+0x21e>
c001df0c:	31 db                	xor    ebx,ebx
c001df0e:	eb 14                	jmp    c001df24 <Thr::loadDLL(char const*, bool)+0x21e>
c001df10:	83 ec 0c             	sub    esp,0xc
c001df13:	68 0a ce 02 c0       	push   0xc002ce0a
c001df18:	e8 da c9 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001df1d:	83 c4 10             	add    esp,0x10
c001df20:	31 ed                	xor    ebp,ebp
c001df22:	eb bb                	jmp    c001dedf <Thr::loadDLL(char const*, bool)+0x1d9>
c001df24:	81 c4 2c 01 00 00    	add    esp,0x12c
c001df2a:	89 d8                	mov    eax,ebx
c001df2c:	5b                   	pop    ebx
c001df2d:	5e                   	pop    esi
c001df2e:	5f                   	pop    edi
c001df2f:	5d                   	pop    ebp
c001df30:	c3                   	ret    

c001df31 <Thr::executeDLL(unsigned long, void*)>:
c001df31:	56                   	push   esi
c001df32:	53                   	push   ebx
c001df33:	52                   	push   edx
c001df34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df38:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001df3c:	85 db                	test   ebx,ebx
c001df3e:	75 10                	jne    c001df50 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001df40:	83 ec 0c             	sub    esp,0xc
c001df43:	68 26 ce 02 c0       	push   0xc002ce26
c001df48:	e8 aa c9 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001df4d:	83 c4 10             	add    esp,0x10
c001df50:	50                   	push   eax
c001df51:	50                   	push   eax
c001df52:	53                   	push   ebx
c001df53:	68 50 ce 02 c0       	push   0xc002ce50
c001df58:	e8 32 4f ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001df5d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001df61:	89 d8                	mov    eax,ebx
c001df63:	83 c4 14             	add    esp,0x14
c001df66:	5b                   	pop    ebx
c001df67:	5e                   	pop    esi
c001df68:	ff e0                	jmp    eax

c001df6a <userModeEntryPoint(void*)>:
c001df6a:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001df6f:	48                   	dec    eax
c001df70:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001df75:	75 01                	jne    c001df78 <userModeEntryPoint(void*)+0xe>
c001df77:	fb                   	sti    
c001df78:	fb                   	sti    
c001df79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df7e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001df81:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001df87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001df8b:	e9 9a 23 fe ff       	jmp    c000032a <goToUsermode>

c001df90 <changeTSS>:
c001df90:	83 ec 14             	sub    esp,0x14
c001df93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df98:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001df9b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dfa0:	c1 e2 15             	shl    edx,0x15
c001dfa3:	29 d0                	sub    eax,edx
c001dfa5:	50                   	push   eax
c001dfa6:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c001dfab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dfb1:	05 7c 11 00 00       	add    eax,0x117c
c001dfb6:	50                   	push   eax
c001dfb7:	e8 0c 34 ff ff       	call   c00113c8 <TSS::setESP(unsigned long)>
c001dfbc:	83 c4 1c             	add    esp,0x1c
c001dfbf:	c3                   	ret    

c001dfc0 <switchToThread(ThreadControlBlock*)>:
c001dfc0:	57                   	push   edi
c001dfc1:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c001dfc6:	56                   	push   esi
c001dfc7:	85 c0                	test   eax,eax
c001dfc9:	53                   	push   ebx
c001dfca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dfce:	0f 85 88 00 00 00    	jne    c001e05c <switchToThread(ThreadControlBlock*)+0x9c>
c001dfd4:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001dfd7:	3c ff                	cmp    al,0xff
c001dfd9:	74 7d                	je     c001e058 <switchToThread(ThreadControlBlock*)+0x98>
c001dfdb:	0f b6 d0             	movzx  edx,al
c001dfde:	b8 84 03 00 00       	mov    eax,0x384
c001dfe3:	29 d0                	sub    eax,edx
c001dfe5:	c1 e0 10             	shl    eax,0x10
c001dfe8:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dfeb:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dfee:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c001dff3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dff9:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001e000:	74 4a                	je     c001e04c <switchToThread(ThreadControlBlock*)+0x8c>
c001e002:	0f 31                	rdtsc  
c001e004:	a3 88 26 03 c0       	mov    ds:0xc0032688,eax
c001e009:	89 c6                	mov    esi,eax
c001e00b:	89 d7                	mov    edi,edx
c001e00d:	2b 35 78 26 03 c0    	sub    esi,DWORD PTR ds:0xc0032678
c001e013:	89 15 8c 26 03 c0    	mov    DWORD PTR ds:0xc003268c,edx
c001e019:	1b 3d 7c 26 03 c0    	sbb    edi,DWORD PTR ds:0xc003267c
c001e01f:	89 35 80 26 03 c0    	mov    DWORD PTR ds:0xc0032680,esi
c001e025:	a3 78 26 03 c0       	mov    ds:0xc0032678,eax
c001e02a:	89 3d 84 26 03 c0    	mov    DWORD PTR ds:0xc0032684,edi
c001e030:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001e036:	89 15 7c 26 03 c0    	mov    DWORD PTR ds:0xc003267c,edx
c001e03c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001e03f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001e042:	01 c6                	add    esi,eax
c001e044:	11 d7                	adc    edi,edx
c001e046:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001e049:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001e04c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001e050:	5b                   	pop    ebx
c001e051:	5e                   	pop    esi
c001e052:	5f                   	pop    edi
c001e053:	e9 0a 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001e058:	31 c0                	xor    eax,eax
c001e05a:	eb 8f                	jmp    c001dfeb <switchToThread(ThreadControlBlock*)+0x2b>
c001e05c:	5b                   	pop    ebx
c001e05d:	c7 05 40 26 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x1
c001e067:	5e                   	pop    esi
c001e068:	5f                   	pop    edi
c001e069:	c3                   	ret    

c001e06a <Process::addArgs(char**)>:
c001e06a:	57                   	push   edi
c001e06b:	56                   	push   esi
c001e06c:	53                   	push   ebx
c001e06d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e071:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e075:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001e07f:	85 ff                	test   edi,edi
c001e081:	74 3d                	je     c001e0c0 <Process::addArgs(char**)+0x56>
c001e083:	8b 07                	mov    eax,DWORD PTR [edi]
c001e085:	85 c0                	test   eax,eax
c001e087:	74 37                	je     c001e0c0 <Process::addArgs(char**)+0x56>
c001e089:	31 db                	xor    ebx,ebx
c001e08b:	83 ec 0c             	sub    esp,0xc
c001e08e:	50                   	push   eax
c001e08f:	e8 f4 26 fe ff       	call   c0000788 <strlen>
c001e094:	40                   	inc    eax
c001e095:	89 04 24             	mov    DWORD PTR [esp],eax
c001e098:	e8 23 18 ff ff       	call   c000f8c0 <malloc>
c001e09d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001e0a4:	5a                   	pop    edx
c001e0a5:	59                   	pop    ecx
c001e0a6:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001e0a9:	43                   	inc    ebx
c001e0aa:	50                   	push   eax
c001e0ab:	e8 78 27 fe ff       	call   c0000828 <strcpy>
c001e0b0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001e0b6:	83 c4 10             	add    esp,0x10
c001e0b9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001e0bc:	85 c0                	test   eax,eax
c001e0be:	75 cb                	jne    c001e08b <Process::addArgs(char**)+0x21>
c001e0c0:	5b                   	pop    ebx
c001e0c1:	5e                   	pop    esi
c001e0c2:	5f                   	pop    edi
c001e0c3:	c3                   	ret    

c001e0c4 <Process::Process(char const*, Process*, char**)>:
c001e0c4:	56                   	push   esi
c001e0c5:	53                   	push   ebx
c001e0c6:	83 ec 14             	sub    esp,0x14
c001e0c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0cd:	05 0c 02 00 00       	add    eax,0x20c
c001e0d2:	bb 07 00 00 00       	mov    ebx,0x7
c001e0d7:	89 c6                	mov    esi,eax
c001e0d9:	85 db                	test   ebx,ebx
c001e0db:	78 12                	js     c001e0ef <Process::Process(char const*, Process*, char**)+0x2b>
c001e0dd:	83 ec 0c             	sub    esp,0xc
c001e0e0:	56                   	push   esi
c001e0e1:	e8 3c b7 00 00       	call   c0029822 <ThreadControlBlock::ThreadControlBlock()>
c001e0e6:	83 c4 10             	add    esp,0x10
c001e0e9:	83 c6 63             	add    esi,0x63
c001e0ec:	4b                   	dec    ebx
c001e0ed:	eb ea                	jmp    c001e0d9 <Process::Process(char const*, Process*, char**)+0x15>
c001e0ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0f3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e0fa:	83 ec 0c             	sub    esp,0xc
c001e0fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e101:	e8 42 c6 ff ff       	call   c001a748 <Krnl::newProcessEnv(Process*)>
c001e106:	83 c4 10             	add    esp,0x10
c001e109:	89 c2                	mov    edx,eax
c001e10b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e10f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e119:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e122:	a1 90 e6 02 c0       	mov    eax,ds:0xc002e690
c001e127:	8d 50 01             	lea    edx,[eax+0x1]
c001e12a:	89 15 90 e6 02 c0    	mov    DWORD PTR ds:0xc002e690,edx
c001e130:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e134:	89 02                	mov    DWORD PTR [edx],eax
c001e136:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001e13e:	83 ec 0c             	sub    esp,0xc
c001e141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e145:	e8 76 17 ff ff       	call   c000f8c0 <malloc>
c001e14a:	83 c4 10             	add    esp,0x10
c001e14d:	89 c3                	mov    ebx,eax
c001e14f:	83 ec 08             	sub    esp,0x8
c001e152:	6a 00                	push   0x0
c001e154:	53                   	push   ebx
c001e155:	e8 10 46 ff ff       	call   c001276a <VAS::VAS(bool)>
c001e15a:	83 c4 10             	add    esp,0x10
c001e15d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e161:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e16b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e175:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e179:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e17d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e187:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e18d:	85 c0                	test   eax,eax
c001e18f:	74 42                	je     c001e1d3 <Process::Process(char const*, Process*, char**)+0x10f>
c001e191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e195:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e19b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e1a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1a5:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e1ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1af:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e1b5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e1bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1bf:	05 0c 01 00 00       	add    eax,0x10c
c001e1c4:	83 ec 08             	sub    esp,0x8
c001e1c7:	52                   	push   edx
c001e1c8:	50                   	push   eax
c001e1c9:	e8 5a 26 fe ff       	call   c0000828 <strcpy>
c001e1ce:	83 c4 10             	add    esp,0x10
c001e1d1:	eb 63                	jmp    c001e236 <Process::Process(char const*, Process*, char**)+0x172>
c001e1d3:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001e1db:	83 ec 0c             	sub    esp,0xc
c001e1de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e1e2:	e8 d9 16 ff ff       	call   c000f8c0 <malloc>
c001e1e7:	83 c4 10             	add    esp,0x10
c001e1ea:	89 c3                	mov    ebx,eax
c001e1ec:	83 ec 08             	sub    esp,0x8
c001e1ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1f3:	53                   	push   ebx
c001e1f4:	e8 b1 2e ff ff       	call   c00110aa <VgaText::VgaText(char const*)>
c001e1f9:	83 c4 10             	add    esp,0x10
c001e1fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e200:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e20a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e210:	83 ec 0c             	sub    esp,0xc
c001e213:	50                   	push   eax
c001e214:	e8 c8 23 ff ff       	call   c00105e1 <addToTerminalCycle(VgaText*)>
c001e219:	83 c4 10             	add    esp,0x10
c001e21c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e220:	05 0c 01 00 00       	add    eax,0x10c
c001e225:	83 ec 08             	sub    esp,0x8
c001e228:	68 6f ce 02 c0       	push   0xc002ce6f
c001e22d:	50                   	push   eax
c001e22e:	e8 f5 25 fe ff       	call   c0000828 <strcpy>
c001e233:	83 c4 10             	add    esp,0x10
c001e236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e23a:	83 c0 0c             	add    eax,0xc
c001e23d:	83 ec 08             	sub    esp,0x8
c001e240:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e244:	50                   	push   eax
c001e245:	e8 de 25 fe ff       	call   c0000828 <strcpy>
c001e24a:	83 c4 10             	add    esp,0x10
c001e24d:	83 ec 08             	sub    esp,0x8
c001e250:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e254:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e258:	e8 0d fe ff ff       	call   c001e06a <Process::addArgs(char**)>
c001e25d:	83 c4 10             	add    esp,0x10
c001e260:	83 ec 08             	sub    esp,0x8
c001e263:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e26b:	e8 a7 ed ff ff       	call   c001d017 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e270:	83 c4 10             	add    esp,0x10
c001e273:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e277:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e27b:	83 f0 01             	xor    eax,0x1
c001e27e:	88 c2                	mov    dl,al
c001e280:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e284:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e28a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e28f:	83 ec 08             	sub    esp,0x8
c001e292:	50                   	push   eax
c001e293:	68 9c cf 02 c0       	push   0xc002cf9c
c001e298:	e8 f2 4b ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001e29d:	83 c4 10             	add    esp,0x10
c001e2a0:	90                   	nop
c001e2a1:	83 c4 14             	add    esp,0x14
c001e2a4:	5b                   	pop    ebx
c001e2a5:	5e                   	pop    esi
c001e2a6:	c3                   	ret    
c001e2a7:	90                   	nop

c001e2a8 <Process::Process(bool, char const*, Process*, char**)>:
c001e2a8:	56                   	push   esi
c001e2a9:	53                   	push   ebx
c001e2aa:	83 ec 24             	sub    esp,0x24
c001e2ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e2b1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e2b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2b9:	05 0c 02 00 00       	add    eax,0x20c
c001e2be:	bb 07 00 00 00       	mov    ebx,0x7
c001e2c3:	89 c6                	mov    esi,eax
c001e2c5:	85 db                	test   ebx,ebx
c001e2c7:	78 12                	js     c001e2db <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e2c9:	83 ec 0c             	sub    esp,0xc
c001e2cc:	56                   	push   esi
c001e2cd:	e8 50 b5 00 00       	call   c0029822 <ThreadControlBlock::ThreadControlBlock()>
c001e2d2:	83 c4 10             	add    esp,0x10
c001e2d5:	83 c6 63             	add    esi,0x63
c001e2d8:	4b                   	dec    ebx
c001e2d9:	eb ea                	jmp    c001e2c5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e2db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2df:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e2e6:	83 ec 0c             	sub    esp,0xc
c001e2e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e2ed:	e8 56 c4 ff ff       	call   c001a748 <Krnl::newProcessEnv(Process*)>
c001e2f2:	83 c4 10             	add    esp,0x10
c001e2f5:	89 c2                	mov    edx,eax
c001e2f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2fb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e301:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e305:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e30e:	a1 90 e6 02 c0       	mov    eax,ds:0xc002e690
c001e313:	8d 50 01             	lea    edx,[eax+0x1]
c001e316:	89 15 90 e6 02 c0    	mov    DWORD PTR ds:0xc002e690,edx
c001e31c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e320:	89 02                	mov    DWORD PTR [edx],eax
c001e322:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e32a:	83 ec 0c             	sub    esp,0xc
c001e32d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e331:	e8 8a 15 ff ff       	call   c000f8c0 <malloc>
c001e336:	83 c4 10             	add    esp,0x10
c001e339:	89 c3                	mov    ebx,eax
c001e33b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e340:	83 ec 08             	sub    esp,0x8
c001e343:	50                   	push   eax
c001e344:	53                   	push   ebx
c001e345:	e8 20 44 ff ff       	call   c001276a <VAS::VAS(bool)>
c001e34a:	83 c4 10             	add    esp,0x10
c001e34d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e351:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e357:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e35b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e365:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e369:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e36d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e373:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e377:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e37d:	85 c0                	test   eax,eax
c001e37f:	74 42                	je     c001e3c3 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e381:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e385:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e38b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e391:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e395:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e39b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e39f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e3a5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e3ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3af:	05 0c 01 00 00       	add    eax,0x10c
c001e3b4:	83 ec 08             	sub    esp,0x8
c001e3b7:	52                   	push   edx
c001e3b8:	50                   	push   eax
c001e3b9:	e8 6a 24 fe ff       	call   c0000828 <strcpy>
c001e3be:	83 c4 10             	add    esp,0x10
c001e3c1:	eb 63                	jmp    c001e426 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e3c3:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e3cb:	83 ec 0c             	sub    esp,0xc
c001e3ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e3d2:	e8 e9 14 ff ff       	call   c000f8c0 <malloc>
c001e3d7:	83 c4 10             	add    esp,0x10
c001e3da:	89 c3                	mov    ebx,eax
c001e3dc:	83 ec 08             	sub    esp,0x8
c001e3df:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e3e3:	53                   	push   ebx
c001e3e4:	e8 c1 2c ff ff       	call   c00110aa <VgaText::VgaText(char const*)>
c001e3e9:	83 c4 10             	add    esp,0x10
c001e3ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3f0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e3f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3fa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e400:	83 ec 0c             	sub    esp,0xc
c001e403:	50                   	push   eax
c001e404:	e8 d8 21 ff ff       	call   c00105e1 <addToTerminalCycle(VgaText*)>
c001e409:	83 c4 10             	add    esp,0x10
c001e40c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e410:	05 0c 01 00 00       	add    eax,0x10c
c001e415:	83 ec 08             	sub    esp,0x8
c001e418:	68 6f ce 02 c0       	push   0xc002ce6f
c001e41d:	50                   	push   eax
c001e41e:	e8 05 24 fe ff       	call   c0000828 <strcpy>
c001e423:	83 c4 10             	add    esp,0x10
c001e426:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e42a:	83 c0 0c             	add    eax,0xc
c001e42d:	83 ec 08             	sub    esp,0x8
c001e430:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e434:	50                   	push   eax
c001e435:	e8 ee 23 fe ff       	call   c0000828 <strcpy>
c001e43a:	83 c4 10             	add    esp,0x10
c001e43d:	83 ec 08             	sub    esp,0x8
c001e440:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e444:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e448:	e8 1d fc ff ff       	call   c001e06a <Process::addArgs(char**)>
c001e44d:	83 c4 10             	add    esp,0x10
c001e450:	90                   	nop
c001e451:	83 c4 24             	add    esp,0x24
c001e454:	5b                   	pop    ebx
c001e455:	5e                   	pop    esi
c001e456:	c3                   	ret    

c001e457 <taskStartupFunction>:
c001e457:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e45c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e45f:	c3                   	ret    

c001e460 <Semaphore::Semaphore(int)>:
c001e460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e464:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e468:	89 10                	mov    DWORD PTR [eax],edx
c001e46a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e46e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e475:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e479:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e484:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e48b:	90                   	nop
c001e48c:	c3                   	ret    
c001e48d:	90                   	nop

c001e48e <Mutex::Mutex()>:
c001e48e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e492:	6a 01                	push   0x1
c001e494:	50                   	push   eax
c001e495:	e8 c6 ff ff ff       	call   c001e460 <Semaphore::Semaphore(int)>
c001e49a:	83 c4 08             	add    esp,0x8
c001e49d:	90                   	nop
c001e49e:	c3                   	ret    
c001e49f:	90                   	nop

c001e4a0 <Process::createThread(void (*)(void*), void*, int)>:
c001e4a0:	55                   	push   ebp
c001e4a1:	31 c9                	xor    ecx,ecx
c001e4a3:	57                   	push   edi
c001e4a4:	56                   	push   esi
c001e4a5:	53                   	push   ebx
c001e4a6:	83 ec 1c             	sub    esp,0x1c
c001e4a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4ad:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e4b4:	89 f2                	mov    edx,esi
c001e4b6:	0f b7 c2             	movzx  eax,dx
c001e4b9:	83 e2 01             	and    edx,0x1
c001e4bc:	74 16                	je     c001e4d4 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e4be:	d1 f8                	sar    eax,1
c001e4c0:	41                   	inc    ecx
c001e4c1:	89 c2                	mov    edx,eax
c001e4c3:	83 f9 10             	cmp    ecx,0x10
c001e4c6:	75 ee                	jne    c001e4b6 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e4c8:	83 c4 1c             	add    esp,0x1c
c001e4cb:	31 db                	xor    ebx,ebx
c001e4cd:	89 d8                	mov    eax,ebx
c001e4cf:	5b                   	pop    ebx
c001e4d0:	5e                   	pop    esi
c001e4d1:	5f                   	pop    edi
c001e4d2:	5d                   	pop    ebp
c001e4d3:	c3                   	ret    
c001e4d4:	b8 01 00 00 00       	mov    eax,0x1
c001e4d9:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e4dc:	d3 e0                	shl    eax,cl
c001e4de:	09 c6                	or     esi,eax
c001e4e0:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e4e3:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e4ea:	89 c6                	mov    esi,eax
c001e4ec:	c1 e6 05             	shl    esi,0x5
c001e4ef:	01 f0                	add    eax,esi
c001e4f1:	01 d8                	add    eax,ebx
c001e4f3:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e4fa:	75 0a                	jne    c001e506 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e4fc:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e506:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e50c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e510:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e513:	01 ca                	add    edx,ecx
c001e515:	83 ec 08             	sub    esp,0x8
c001e518:	89 d0                	mov    eax,edx
c001e51a:	c1 e0 05             	shl    eax,0x5
c001e51d:	01 d0                	add    eax,edx
c001e51f:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e523:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e527:	01 d8                	add    eax,ebx
c001e529:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e52f:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e535:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e53b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e541:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e547:	89 cd                	mov    ebp,ecx
c001e549:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e54d:	f7 dd                	neg    ebp
c001e54f:	c1 e5 15             	shl    ebp,0x15
c001e552:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e558:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e55e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e568:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e56e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e578:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e582:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e586:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e58d:	53                   	push   ebx
c001e58e:	68 64 26 03 c0       	push   0xc0032664
c001e593:	e8 44 b0 00 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e598:	89 d8                	mov    eax,ebx
c001e59a:	83 c4 10             	add    esp,0x10
c001e59d:	83 c4 1c             	add    esp,0x1c
c001e5a0:	5b                   	pop    ebx
c001e5a1:	5e                   	pop    esi
c001e5a2:	5f                   	pop    edi
c001e5a3:	5d                   	pop    ebp
c001e5a4:	c3                   	ret    
c001e5a5:	90                   	nop

c001e5a6 <Process::createUserThread()>:
c001e5a6:	83 ec 0c             	sub    esp,0xc
c001e5a9:	68 80 00 00 00       	push   0x80
c001e5ae:	6a 00                	push   0x0
c001e5b0:	68 6a df 01 c0       	push   0xc001df6a
c001e5b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5b9:	e8 e2 fe ff ff       	call   c001e4a0 <Process::createThread(void (*)(void*), void*, int)>
c001e5be:	83 c4 1c             	add    esp,0x1c
c001e5c1:	c3                   	ret    

c001e5c2 <setupMultitasking(void (*)())>:
c001e5c2:	56                   	push   esi
c001e5c3:	53                   	push   ebx
c001e5c4:	51                   	push   ecx
c001e5c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e5c9:	eb 10                	jmp    c001e5db <setupMultitasking(void (*)())+0x19>
c001e5cb:	83 ec 0c             	sub    esp,0xc
c001e5ce:	68 64 26 03 c0       	push   0xc0032664
c001e5d3:	e8 56 af 00 00       	call   c002952e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5d8:	83 c4 10             	add    esp,0x10
c001e5db:	83 ec 0c             	sub    esp,0xc
c001e5de:	68 64 26 03 c0       	push   0xc0032664
c001e5e3:	e8 22 af 00 00       	call   c002950a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5e8:	83 c4 10             	add    esp,0x10
c001e5eb:	84 c0                	test   al,al
c001e5ed:	74 dc                	je     c001e5cb <setupMultitasking(void (*)())+0x9>
c001e5ef:	83 ec 0c             	sub    esp,0xc
c001e5f2:	68 3f 07 00 00       	push   0x73f
c001e5f7:	e8 c4 12 ff ff       	call   c000f8c0 <malloc>
c001e5fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e603:	89 c3                	mov    ebx,eax
c001e605:	6a 00                	push   0x0
c001e607:	68 73 ce 02 c0       	push   0xc002ce73
c001e60c:	6a 01                	push   0x1
c001e60e:	50                   	push   eax
c001e60f:	e8 94 fc ff ff       	call   c001e2a8 <Process::Process(bool, char const*, Process*, char**)>
c001e614:	83 c4 18             	add    esp,0x18
c001e617:	89 1d 70 26 03 c0    	mov    DWORD PTR ds:0xc0032670,ebx
c001e61d:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e623:	68 c4 cf 02 c0       	push   0xc002cfc4
c001e628:	e8 62 48 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001e62d:	58                   	pop    eax
c001e62e:	5a                   	pop    edx
c001e62f:	6a 63                	push   0x63
c001e631:	68 f8 cf 02 c0       	push   0xc002cff8
c001e636:	e8 54 48 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001e63b:	59                   	pop    ecx
c001e63c:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e642:	e8 6b 26 ff ff       	call   c0010cb2 <setActiveTerminal(VgaText*)>
c001e647:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e64f:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e659:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e65f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e662:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e66c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e672:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e678:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e682:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e68c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e696:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e69c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e6a6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e6ac:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e6b6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e6bc:	58                   	pop    eax
c001e6bd:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e6c3:	5a                   	pop    edx
c001e6c4:	68 6f ce 02 c0       	push   0xc002ce6f
c001e6c9:	50                   	push   eax
c001e6ca:	e8 59 21 fe ff       	call   c0000828 <strcpy>
c001e6cf:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e6d6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e6da:	83 c4 14             	add    esp,0x14
c001e6dd:	5b                   	pop    ebx
c001e6de:	5e                   	pop    esi
c001e6df:	e9 70 1c fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e6e4 <schedule()>:
c001e6e4:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c001e6e9:	85 c0                	test   eax,eax
c001e6eb:	74 0b                	je     c001e6f8 <schedule()+0x14>
c001e6ed:	c7 05 40 26 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x1
c001e6f7:	c3                   	ret    
c001e6f8:	53                   	push   ebx
c001e6f9:	83 ec 14             	sub    esp,0x14
c001e6fc:	68 64 26 03 c0       	push   0xc0032664
c001e701:	e8 04 ae 00 00       	call   c002950a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e706:	83 c4 10             	add    esp,0x10
c001e709:	84 c0                	test   al,al
c001e70b:	75 38                	jne    c001e745 <schedule()+0x61>
c001e70d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e712:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e715:	4a                   	dec    edx
c001e716:	74 32                	je     c001e74a <schedule()+0x66>
c001e718:	83 ec 0c             	sub    esp,0xc
c001e71b:	68 64 26 03 c0       	push   0xc0032664
c001e720:	e8 01 ae 00 00       	call   c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e725:	c7 04 24 64 26 03 c0 	mov    DWORD PTR [esp],0xc0032664
c001e72c:	89 c3                	mov    ebx,eax
c001e72e:	e8 fb ad 00 00       	call   c002952e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e733:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e73a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e73d:	e8 7e f8 ff ff       	call   c001dfc0 <switchToThread(ThreadControlBlock*)>
c001e742:	83 c4 10             	add    esp,0x10
c001e745:	83 c4 08             	add    esp,0x8
c001e748:	5b                   	pop    ebx
c001e749:	c3                   	ret    
c001e74a:	83 ec 08             	sub    esp,0x8
c001e74d:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e754:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e75a:	68 64 26 03 c0       	push   0xc0032664
c001e75f:	e8 78 ae 00 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e764:	83 c4 10             	add    esp,0x10
c001e767:	eb af                	jmp    c001e718 <schedule()+0x34>
c001e769:	90                   	nop

c001e76a <Semaphore::tryAcquire()>:
c001e76a:	53                   	push   ebx
c001e76b:	83 ec 08             	sub    esp,0x8
c001e76e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e772:	fa                   	cli    
c001e773:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001e778:	8d 50 01             	lea    edx,[eax+0x1]
c001e77b:	89 15 48 26 03 c0    	mov    DWORD PTR ds:0xc0032648,edx
c001e781:	8b 15 44 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032644
c001e787:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e78a:	89 1d 44 26 03 c0    	mov    DWORD PTR ds:0xc0032644,ebx
c001e790:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e793:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e795:	7c 2a                	jl     c001e7c1 <Semaphore::tryAcquire()+0x57>
c001e797:	89 15 44 26 03 c0    	mov    DWORD PTR ds:0xc0032644,edx
c001e79d:	85 d2                	test   edx,edx
c001e79f:	75 0a                	jne    c001e7ab <Semaphore::tryAcquire()+0x41>
c001e7a1:	8b 15 40 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032640
c001e7a7:	85 d2                	test   edx,edx
c001e7a9:	75 5b                	jne    c001e806 <Semaphore::tryAcquire()+0x9c>
c001e7ab:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001e7b0:	85 c0                	test   eax,eax
c001e7b2:	74 07                	je     c001e7bb <Semaphore::tryAcquire()+0x51>
c001e7b4:	31 c0                	xor    eax,eax
c001e7b6:	83 c4 08             	add    esp,0x8
c001e7b9:	5b                   	pop    ebx
c001e7ba:	c3                   	ret    
c001e7bb:	fb                   	sti    
c001e7bc:	83 c4 08             	add    esp,0x8
c001e7bf:	5b                   	pop    ebx
c001e7c0:	c3                   	ret    
c001e7c1:	43                   	inc    ebx
c001e7c2:	89 15 44 26 03 c0    	mov    DWORD PTR ds:0xc0032644,edx
c001e7c8:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e7cb:	85 d2                	test   edx,edx
c001e7cd:	75 1f                	jne    c001e7ee <Semaphore::tryAcquire()+0x84>
c001e7cf:	8b 0d 40 26 03 c0    	mov    ecx,DWORD PTR ds:0xc0032640
c001e7d5:	85 c9                	test   ecx,ecx
c001e7d7:	74 15                	je     c001e7ee <Semaphore::tryAcquire()+0x84>
c001e7d9:	c7 05 40 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x0
c001e7e3:	e8 fc fe ff ff       	call   c001e6e4 <schedule()>
c001e7e8:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001e7ed:	48                   	dec    eax
c001e7ee:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001e7f3:	85 c0                	test   eax,eax
c001e7f5:	75 08                	jne    c001e7ff <Semaphore::tryAcquire()+0x95>
c001e7f7:	fb                   	sti    
c001e7f8:	b0 01                	mov    al,0x1
c001e7fa:	83 c4 08             	add    esp,0x8
c001e7fd:	5b                   	pop    ebx
c001e7fe:	c3                   	ret    
c001e7ff:	b0 01                	mov    al,0x1
c001e801:	83 c4 08             	add    esp,0x8
c001e804:	5b                   	pop    ebx
c001e805:	c3                   	ret    
c001e806:	c7 05 40 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x0
c001e810:	e8 cf fe ff ff       	call   c001e6e4 <schedule()>
c001e815:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001e81a:	48                   	dec    eax
c001e81b:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001e820:	85 c0                	test   eax,eax
c001e822:	75 90                	jne    c001e7b4 <Semaphore::tryAcquire()+0x4a>
c001e824:	eb 95                	jmp    c001e7bb <Semaphore::tryAcquire()+0x51>

c001e826 <Semaphore::assertLocked(char const*)>:
c001e826:	83 ec 0c             	sub    esp,0xc
c001e829:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e82d:	fa                   	cli    
c001e82e:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001e834:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c001e839:	8d 48 01             	lea    ecx,[eax+0x1]
c001e83c:	89 0d 44 26 03 c0    	mov    DWORD PTR ds:0xc0032644,ecx
c001e842:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e844:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e847:	7c 24                	jl     c001e86d <Semaphore::assertLocked(char const*)+0x47>
c001e849:	a3 44 26 03 c0       	mov    ds:0xc0032644,eax
c001e84e:	85 c0                	test   eax,eax
c001e850:	75 09                	jne    c001e85b <Semaphore::assertLocked(char const*)+0x35>
c001e852:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c001e857:	85 c0                	test   eax,eax
c001e859:	75 29                	jne    c001e884 <Semaphore::assertLocked(char const*)+0x5e>
c001e85b:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001e860:	48                   	dec    eax
c001e861:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001e866:	75 01                	jne    c001e869 <Semaphore::assertLocked(char const*)+0x43>
c001e868:	fb                   	sti    
c001e869:	83 c4 0c             	add    esp,0xc
c001e86c:	c3                   	ret    
c001e86d:	83 ec 0c             	sub    esp,0xc
c001e870:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e874:	e8 7e c0 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001e879:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c001e87e:	83 c4 10             	add    esp,0x10
c001e881:	48                   	dec    eax
c001e882:	eb c5                	jmp    c001e849 <Semaphore::assertLocked(char const*)+0x23>
c001e884:	c7 05 40 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x0
c001e88e:	e8 51 fe ff ff       	call   c001e6e4 <schedule()>
c001e893:	eb c6                	jmp    c001e85b <Semaphore::assertLocked(char const*)+0x35>

c001e895 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e895:	83 ec 14             	sub    esp,0x14
c001e898:	ff 35 48 26 03 c0    	push   DWORD PTR ds:0xc0032648
c001e89e:	68 1c d0 02 c0       	push   0xc002d01c
c001e8a3:	e8 e7 45 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001e8a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8b1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e8b4:	e8 2b fe ff ff       	call   c001e6e4 <schedule()>
c001e8b9:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001e8be:	83 c4 10             	add    esp,0x10
c001e8c1:	48                   	dec    eax
c001e8c2:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001e8c7:	85 c0                	test   eax,eax
c001e8c9:	75 06                	jne    c001e8d1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e8cb:	fb                   	sti    
c001e8cc:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001e8d1:	83 ec 08             	sub    esp,0x8
c001e8d4:	50                   	push   eax
c001e8d5:	68 50 d0 02 c0       	push   0xc002d050
c001e8da:	e8 b0 45 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001e8df:	83 c4 1c             	add    esp,0x1c
c001e8e2:	c3                   	ret    

c001e8e3 <blockTask(TaskState)>:
c001e8e3:	83 ec 0c             	sub    esp,0xc
c001e8e6:	fa                   	cli    
c001e8e7:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001e8ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8f6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e8f9:	e8 e6 fd ff ff       	call   c001e6e4 <schedule()>
c001e8fe:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001e903:	48                   	dec    eax
c001e904:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001e909:	75 01                	jne    c001e90c <blockTask(TaskState)+0x29>
c001e90b:	fb                   	sti    
c001e90c:	83 c4 0c             	add    esp,0xc
c001e90f:	c3                   	ret    

c001e910 <waitTask(int, int*, int)>:
c001e910:	83 ec 18             	sub    esp,0x18
c001e913:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e918:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e91c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e91f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e923:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e928:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e92b:	6a 07                	push   0x7
c001e92d:	e8 b1 ff ff ff       	call   c001e8e3 <blockTask(TaskState)>
c001e932:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e937:	83 c4 10             	add    esp,0x10
c001e93a:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e93d:	85 d2                	test   edx,edx
c001e93f:	74 0a                	je     c001e94b <waitTask(int, int*, int)+0x3b>
c001e941:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e944:	89 02                	mov    DWORD PTR [edx],eax
c001e946:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e94b:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e94e:	83 c4 0c             	add    esp,0xc
c001e951:	c3                   	ret    

c001e952 <nanoSleepUntil(unsigned long long)>:
c001e952:	83 ec 0c             	sub    esp,0xc
c001e955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e959:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e95d:	3b 05 90 f7 02 c0    	cmp    eax,DWORD PTR ds:0xc002f790
c001e963:	89 d1                	mov    ecx,edx
c001e965:	1b 0d 94 f7 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f794
c001e96b:	73 04                	jae    c001e971 <nanoSleepUntil(unsigned long long)+0x1f>
c001e96d:	83 c4 0c             	add    esp,0xc
c001e970:	c3                   	ret    
c001e971:	fa                   	cli    
c001e972:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001e978:	83 ec 08             	sub    esp,0x8
c001e97b:	ff 05 44 26 03 c0    	inc    DWORD PTR ds:0xc0032644
c001e981:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e987:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e98a:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e98d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e993:	68 58 26 03 c0       	push   0xc0032658
c001e998:	e8 3f ac 00 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e99d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e9a4:	e8 3a ff ff ff       	call   c001e8e3 <blockTask(TaskState)>
c001e9a9:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c001e9ae:	83 c4 10             	add    esp,0x10
c001e9b1:	48                   	dec    eax
c001e9b2:	a3 44 26 03 c0       	mov    ds:0xc0032644,eax
c001e9b7:	85 c0                	test   eax,eax
c001e9b9:	75 09                	jne    c001e9c4 <nanoSleepUntil(unsigned long long)+0x72>
c001e9bb:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c001e9c0:	85 c0                	test   eax,eax
c001e9c2:	75 12                	jne    c001e9d6 <nanoSleepUntil(unsigned long long)+0x84>
c001e9c4:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001e9c9:	48                   	dec    eax
c001e9ca:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001e9cf:	75 9c                	jne    c001e96d <nanoSleepUntil(unsigned long long)+0x1b>
c001e9d1:	fb                   	sti    
c001e9d2:	83 c4 0c             	add    esp,0xc
c001e9d5:	c3                   	ret    
c001e9d6:	c7 05 40 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x0
c001e9e0:	e8 ff fc ff ff       	call   c001e6e4 <schedule()>
c001e9e5:	eb dd                	jmp    c001e9c4 <nanoSleepUntil(unsigned long long)+0x72>

c001e9e7 <nanoSleep(unsigned long long)>:
c001e9e7:	a1 90 f7 02 c0       	mov    eax,ds:0xc002f790
c001e9ec:	8b 15 94 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f794
c001e9f2:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e9f6:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e9fa:	e9 53 ff ff ff       	jmp    c001e952 <nanoSleepUntil(unsigned long long)>

c001e9ff <sleep(unsigned long long)>:
c001e9ff:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001ea07:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001ea0c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001ea10:	01 ca                	add    edx,ecx
c001ea12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ea16:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ea1a:	eb cb                	jmp    c001e9e7 <nanoSleep(unsigned long long)>

c001ea1c <Semaphore::acquire()>:
c001ea1c:	83 ec 0c             	sub    esp,0xc
c001ea1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea23:	fa                   	cli    
c001ea24:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c001ea29:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001ea2f:	8d 48 01             	lea    ecx,[eax+0x1]
c001ea32:	89 0d 44 26 03 c0    	mov    DWORD PTR ds:0xc0032644,ecx
c001ea38:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ea3b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001ea3d:	7d 28                	jge    c001ea67 <Semaphore::acquire()+0x4b>
c001ea3f:	41                   	inc    ecx
c001ea40:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001ea43:	a3 44 26 03 c0       	mov    ds:0xc0032644,eax
c001ea48:	85 c0                	test   eax,eax
c001ea4a:	75 09                	jne    c001ea55 <Semaphore::acquire()+0x39>
c001ea4c:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c001ea51:	85 c0                	test   eax,eax
c001ea53:	75 4e                	jne    c001eaa3 <Semaphore::acquire()+0x87>
c001ea55:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001ea5a:	48                   	dec    eax
c001ea5b:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001ea60:	75 01                	jne    c001ea63 <Semaphore::acquire()+0x47>
c001ea62:	fb                   	sti    
c001ea63:	83 c4 0c             	add    esp,0xc
c001ea66:	c3                   	ret    
c001ea67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea6c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea73:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ea76:	85 c9                	test   ecx,ecx
c001ea78:	74 3a                	je     c001eab4 <Semaphore::acquire()+0x98>
c001ea7a:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ea7d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ea83:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001ea86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea8b:	83 ec 0c             	sub    esp,0xc
c001ea8e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001ea91:	6a 05                	push   0x5
c001ea93:	e8 4b fe ff ff       	call   c001e8e3 <blockTask(TaskState)>
c001ea98:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c001ea9d:	83 c4 10             	add    esp,0x10
c001eaa0:	48                   	dec    eax
c001eaa1:	eb a0                	jmp    c001ea43 <Semaphore::acquire()+0x27>
c001eaa3:	c7 05 40 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x0
c001eaad:	e8 32 fc ff ff       	call   c001e6e4 <schedule()>
c001eab2:	eb a1                	jmp    c001ea55 <Semaphore::acquire()+0x39>
c001eab4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eab9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001eabc:	eb c8                	jmp    c001ea86 <Semaphore::acquire()+0x6a>

c001eabe <taskReturned>:
c001eabe:	83 ec 18             	sub    esp,0x18
c001eac1:	68 84 d0 02 c0       	push   0xc002d084
c001eac6:	e8 2c be ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001eacb:	83 c4 10             	add    esp,0x10
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	6a 02                	push   0x2
c001ead3:	e8 0b fe ff ff       	call   c001e8e3 <blockTask(TaskState)>
c001ead8:	fa                   	cli    
c001ead9:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001eadf:	e8 00 fc ff ff       	call   c001e6e4 <schedule()>
c001eae4:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001eae9:	83 c4 10             	add    esp,0x10
c001eaec:	48                   	dec    eax
c001eaed:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001eaf2:	85 c0                	test   eax,eax
c001eaf4:	75 d8                	jne    c001eace <taskReturned+0x10>
c001eaf6:	fb                   	sti    
c001eaf7:	eb d5                	jmp    c001eace <taskReturned+0x10>

c001eaf9 <Thr::processFromPID(int)>:
c001eaf9:	57                   	push   edi
c001eafa:	56                   	push   esi
c001eafb:	53                   	push   ebx
c001eafc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb00:	83 ec 0c             	sub    esp,0xc
c001eb03:	68 7a ce 02 c0       	push   0xc002ce7a
c001eb08:	e8 82 43 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001eb0d:	fa                   	cli    
c001eb0e:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001eb14:	c7 04 24 64 26 03 c0 	mov    DWORD PTR [esp],0xc0032664
c001eb1b:	e8 06 aa 00 00       	call   c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb20:	83 c4 10             	add    esp,0x10
c001eb23:	89 c7                	mov    edi,eax
c001eb25:	eb 14                	jmp    c001eb3b <Thr::processFromPID(int)+0x42>
c001eb27:	83 ec 0c             	sub    esp,0xc
c001eb2a:	68 64 26 03 c0       	push   0xc0032664
c001eb2f:	e8 f2 a9 00 00       	call   c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb34:	83 c4 10             	add    esp,0x10
c001eb37:	39 f8                	cmp    eax,edi
c001eb39:	74 49                	je     c001eb84 <Thr::processFromPID(int)+0x8b>
c001eb3b:	83 ec 0c             	sub    esp,0xc
c001eb3e:	68 64 26 03 c0       	push   0xc0032664
c001eb43:	e8 de a9 00 00       	call   c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb48:	c7 04 24 64 26 03 c0 	mov    DWORD PTR [esp],0xc0032664
c001eb4f:	89 c3                	mov    ebx,eax
c001eb51:	e8 d8 a9 00 00       	call   c002952e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eb56:	58                   	pop    eax
c001eb57:	5a                   	pop    edx
c001eb58:	53                   	push   ebx
c001eb59:	68 64 26 03 c0       	push   0xc0032664
c001eb5e:	e8 79 aa 00 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eb63:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb66:	83 c4 10             	add    esp,0x10
c001eb69:	39 30                	cmp    DWORD PTR [eax],esi
c001eb6b:	75 ba                	jne    c001eb27 <Thr::processFromPID(int)+0x2e>
c001eb6d:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001eb72:	48                   	dec    eax
c001eb73:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001eb78:	74 07                	je     c001eb81 <Thr::processFromPID(int)+0x88>
c001eb7a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb7d:	5b                   	pop    ebx
c001eb7e:	5e                   	pop    esi
c001eb7f:	5f                   	pop    edi
c001eb80:	c3                   	ret    
c001eb81:	fb                   	sti    
c001eb82:	eb f6                	jmp    c001eb7a <Thr::processFromPID(int)+0x81>
c001eb84:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001eb89:	48                   	dec    eax
c001eb8a:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001eb8f:	75 01                	jne    c001eb92 <Thr::processFromPID(int)+0x99>
c001eb91:	fb                   	sti    
c001eb92:	83 ec 0c             	sub    esp,0xc
c001eb95:	68 95 ce 02 c0       	push   0xc002ce95
c001eb9a:	e8 f0 42 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001eb9f:	83 c4 10             	add    esp,0x10
c001eba2:	31 c0                	xor    eax,eax
c001eba4:	5b                   	pop    ebx
c001eba5:	5e                   	pop    esi
c001eba6:	5f                   	pop    edi
c001eba7:	c3                   	ret    

c001eba8 <unblockTask(ThreadControlBlock*)>:
c001eba8:	53                   	push   ebx
c001eba9:	83 ec 08             	sub    esp,0x8
c001ebac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ebb0:	fa                   	cli    
c001ebb1:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001ebb7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ebba:	85 c0                	test   eax,eax
c001ebbc:	74 66                	je     c001ec24 <unblockTask(ThreadControlBlock*)+0x7c>
c001ebbe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ebc1:	48                   	dec    eax
c001ebc2:	74 31                	je     c001ebf5 <unblockTask(ThreadControlBlock*)+0x4d>
c001ebc4:	83 ec 0c             	sub    esp,0xc
c001ebc7:	68 64 26 03 c0       	push   0xc0032664
c001ebcc:	e8 55 a9 00 00       	call   c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ebd1:	83 c4 10             	add    esp,0x10
c001ebd4:	85 c0                	test   eax,eax
c001ebd6:	75 17                	jne    c001ebef <unblockTask(ThreadControlBlock*)+0x47>
c001ebd8:	eb 68                	jmp    c001ec42 <unblockTask(ThreadControlBlock*)+0x9a>
c001ebda:	83 ec 08             	sub    esp,0x8
c001ebdd:	50                   	push   eax
c001ebde:	68 64 26 03 c0       	push   0xc0032664
c001ebe3:	e8 dc ac 00 00       	call   c00298c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001ebe8:	83 c4 10             	add    esp,0x10
c001ebeb:	85 c0                	test   eax,eax
c001ebed:	74 53                	je     c001ec42 <unblockTask(ThreadControlBlock*)+0x9a>
c001ebef:	39 c3                	cmp    ebx,eax
c001ebf1:	75 e7                	jne    c001ebda <unblockTask(ThreadControlBlock*)+0x32>
c001ebf3:	eb 1c                	jmp    c001ec11 <unblockTask(ThreadControlBlock*)+0x69>
c001ebf5:	83 ec 0c             	sub    esp,0xc
c001ebf8:	68 74 d1 02 c0       	push   0xc002d174
c001ebfd:	e8 8d 42 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001ec02:	c7 04 24 00 d1 02 c0 	mov    DWORD PTR [esp],0xc002d100
c001ec09:	e8 81 42 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001ec0e:	83 c4 10             	add    esp,0x10
c001ec11:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001ec16:	48                   	dec    eax
c001ec17:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001ec1c:	75 01                	jne    c001ec1f <unblockTask(ThreadControlBlock*)+0x77>
c001ec1e:	fb                   	sti    
c001ec1f:	83 c4 08             	add    esp,0x8
c001ec22:	5b                   	pop    ebx
c001ec23:	c3                   	ret    
c001ec24:	83 ec 0c             	sub    esp,0xc
c001ec27:	68 b8 d0 02 c0       	push   0xc002d0b8
c001ec2c:	e8 5e 42 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001ec31:	c7 04 24 00 d1 02 c0 	mov    DWORD PTR [esp],0xc002d100
c001ec38:	e8 52 42 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001ec3d:	83 c4 10             	add    esp,0x10
c001ec40:	eb cf                	jmp    c001ec11 <unblockTask(ThreadControlBlock*)+0x69>
c001ec42:	83 ec 08             	sub    esp,0x8
c001ec45:	53                   	push   ebx
c001ec46:	68 64 26 03 c0       	push   0xc0032664
c001ec4b:	e8 8c a9 00 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ec50:	83 c4 10             	add    esp,0x10
c001ec53:	eb bc                	jmp    c001ec11 <unblockTask(ThreadControlBlock*)+0x69>

c001ec55 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ec55:	55                   	push   ebp
c001ec56:	57                   	push   edi
c001ec57:	56                   	push   esi
c001ec58:	53                   	push   ebx
c001ec59:	83 ec 1c             	sub    esp,0x1c
c001ec5c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ec60:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec63:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ec69:	85 ff                	test   edi,edi
c001ec6b:	7e 20                	jle    c001ec8d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ec6d:	31 f6                	xor    esi,esi
c001ec6f:	83 ec 0c             	sub    esp,0xc
c001ec72:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ec79:	46                   	inc    esi
c001ec7a:	e8 51 0c ff ff       	call   c000f8d0 <free>
c001ec7f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec82:	83 c4 10             	add    esp,0x10
c001ec85:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ec8b:	7f e2                	jg     c001ec6f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ec8d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ec97:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ec9c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ec9f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001eca2:	d3 c0                	rol    eax,cl
c001eca4:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ecab:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ecae:	89 f7                	mov    edi,esi
c001ecb0:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ecb8:	0f 85 74 01 00 00    	jne    c001ee32 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ecbe:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ecc4:	85 ed                	test   ebp,ebp
c001ecc6:	74 1b                	je     c001ece3 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ecc8:	83 ec 0c             	sub    esp,0xc
c001eccb:	55                   	push   ebp
c001eccc:	e8 93 b9 ff ff       	call   c001a664 <EnvVarContainer::~EnvVarContainer()>
c001ecd1:	59                   	pop    ecx
c001ecd2:	5e                   	pop    esi
c001ecd3:	6a 0c                	push   0xc
c001ecd5:	55                   	push   ebp
c001ecd6:	e8 d4 40 ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c001ecdb:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ecde:	83 c4 10             	add    esp,0x10
c001ece1:	89 f7                	mov    edi,esi
c001ece3:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ece9:	85 c0                	test   eax,eax
c001eceb:	0f 84 aa 00 00 00    	je     c001ed9b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ecf1:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ecf4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ecf8:	31 c9                	xor    ecx,ecx
c001ecfa:	eb 10                	jmp    c001ed0c <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ecfc:	41                   	inc    ecx
c001ecfd:	83 f9 10             	cmp    ecx,0x10
c001ed00:	0f 84 95 00 00 00    	je     c001ed9b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ed06:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ed0c:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ed13:	d3 fa                	sar    edx,cl
c001ed15:	83 e2 01             	and    edx,0x1
c001ed18:	74 e2                	je     c001ecfc <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ed1a:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ed1d:	01 ca                	add    edx,ecx
c001ed1f:	89 d5                	mov    ebp,edx
c001ed21:	c1 e5 05             	shl    ebp,0x5
c001ed24:	01 ea                	add    edx,ebp
c001ed26:	01 d0                	add    eax,edx
c001ed28:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ed2e:	83 fd 07             	cmp    ebp,0x7
c001ed31:	75 c9                	jne    c001ecfc <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ed33:	05 40 02 00 00       	add    eax,0x240
c001ed38:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001ed3b:	83 fd ff             	cmp    ebp,0xffffffff
c001ed3e:	0f 8c 08 01 00 00    	jl     c001ee4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001ed44:	0f 84 b9 01 00 00    	je     c001ef03 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001ed4a:	85 ed                	test   ebp,ebp
c001ed4c:	0f 84 a0 01 00 00    	je     c001eef2 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001ed52:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001ed54:	75 a6                	jne    c001ecfc <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ed56:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ed5c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ed60:	01 d0                	add    eax,edx
c001ed62:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001ed66:	83 ec 0c             	sub    esp,0xc
c001ed69:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001ed6f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed72:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ed78:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001ed7f:	50                   	push   eax
c001ed80:	e8 23 fe ff ff       	call   c001eba8 <unblockTask(ThreadControlBlock*)>
c001ed85:	83 c4 10             	add    esp,0x10
c001ed88:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ed8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed8f:	89 f7                	mov    edi,esi
c001ed91:	41                   	inc    ecx
c001ed92:	83 f9 10             	cmp    ecx,0x10
c001ed95:	0f 85 6b ff ff ff    	jne    c001ed06 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001ed9b:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001eda1:	85 c0                	test   eax,eax
c001eda3:	74 5d                	je     c001ee02 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eda5:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001edab:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001edb1:	74 4f                	je     c001ee02 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001edb3:	83 ec 0c             	sub    esp,0xc
c001edb6:	68 64 26 03 c0       	push   0xc0032664
c001edbb:	e8 66 a7 00 00       	call   c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001edc0:	c7 04 24 64 26 03 c0 	mov    DWORD PTR [esp],0xc0032664
c001edc7:	89 c7                	mov    edi,eax
c001edc9:	e8 3c a7 00 00       	call   c002950a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001edce:	83 c4 10             	add    esp,0x10
c001edd1:	84 c0                	test   al,al
c001edd3:	0f 84 e4 00 00 00    	je     c001eebd <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001edd9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eddc:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ede2:	85 d2                	test   edx,edx
c001ede4:	74 0f                	je     c001edf5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001ede6:	83 ec 0c             	sub    esp,0xc
c001ede9:	8b 02                	mov    eax,DWORD PTR [edx]
c001edeb:	52                   	push   edx
c001edec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001edef:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001edf2:	83 c4 10             	add    esp,0x10
c001edf5:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001edff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ee02:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ee08:	85 db                	test   ebx,ebx
c001ee0a:	74 16                	je     c001ee22 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ee0c:	83 ec 0c             	sub    esp,0xc
c001ee0f:	53                   	push   ebx
c001ee10:	e8 2f 33 ff ff       	call   c0012144 <VAS::~VAS()>
c001ee15:	58                   	pop    eax
c001ee16:	5a                   	pop    edx
c001ee17:	6a 14                	push   0x14
c001ee19:	53                   	push   ebx
c001ee1a:	e8 90 3f ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c001ee1f:	83 c4 10             	add    esp,0x10
c001ee22:	83 ec 0c             	sub    esp,0xc
c001ee25:	68 ac ce 02 c0       	push   0xc002ceac
c001ee2a:	e8 60 40 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001ee2f:	83 c4 10             	add    esp,0x10
c001ee32:	83 ec 08             	sub    esp,0x8
c001ee35:	68 3f 07 00 00       	push   0x73f
c001ee3a:	68 ba ce 02 c0       	push   0xc002ceba
c001ee3f:	e8 4b 40 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001ee44:	83 c4 2c             	add    esp,0x2c
c001ee47:	5b                   	pop    ebx
c001ee48:	5e                   	pop    esi
c001ee49:	5f                   	pop    edi
c001ee4a:	5d                   	pop    ebp
c001ee4b:	c3                   	ret    
c001ee4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee50:	83 ec 0c             	sub    esp,0xc
c001ee53:	68 b8 d1 02 c0       	push   0xc002d1b8
c001ee58:	e8 9a ba ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001ee5d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ee60:	83 c4 10             	add    esp,0x10
c001ee63:	89 f7                	mov    edi,esi
c001ee65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee69:	e9 8e fe ff ff       	jmp    c001ecfc <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ee6e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ee74:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ee7a:	75 1c                	jne    c001ee98 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ee7c:	83 ec 0c             	sub    esp,0xc
c001ee7f:	68 20 d2 02 c0       	push   0xc002d220
c001ee84:	e8 06 40 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001ee89:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ee90:	e8 4e fa ff ff       	call   c001e8e3 <blockTask(TaskState)>
c001ee95:	83 c4 10             	add    esp,0x10
c001ee98:	83 ec 08             	sub    esp,0x8
c001ee9b:	56                   	push   esi
c001ee9c:	68 64 26 03 c0       	push   0xc0032664
c001eea1:	e8 36 a7 00 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eea6:	c7 04 24 64 26 03 c0 	mov    DWORD PTR [esp],0xc0032664
c001eead:	e8 74 a6 00 00       	call   c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eeb2:	83 c4 10             	add    esp,0x10
c001eeb5:	39 f8                	cmp    eax,edi
c001eeb7:	0f 84 1c ff ff ff    	je     c001edd9 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001eebd:	83 ec 0c             	sub    esp,0xc
c001eec0:	68 64 26 03 c0       	push   0xc0032664
c001eec5:	e8 5c a6 00 00       	call   c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eeca:	c7 04 24 64 26 03 c0 	mov    DWORD PTR [esp],0xc0032664
c001eed1:	89 c6                	mov    esi,eax
c001eed3:	e8 56 a6 00 00       	call   c002952e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eed8:	83 c4 10             	add    esp,0x10
c001eedb:	39 f3                	cmp    ebx,esi
c001eedd:	74 b9                	je     c001ee98 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001eedf:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001eee2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eee5:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001eeeb:	75 ab                	jne    c001ee98 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001eeed:	e9 7c ff ff ff       	jmp    c001ee6e <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001eef2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eef6:	83 ec 0c             	sub    esp,0xc
c001eef9:	68 ec d1 02 c0       	push   0xc002d1ec
c001eefe:	e9 55 ff ff ff       	jmp    c001ee58 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ef03:	8b 36                	mov    esi,DWORD PTR [esi]
c001ef05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ef09:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ef0c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ef0f:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ef15:	01 d7                	add    edi,edx
c001ef17:	89 f8                	mov    eax,edi
c001ef19:	e9 44 fe ff ff       	jmp    c001ed62 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ef1e <cleanerTaskFunction(void*)>:
c001ef1e:	53                   	push   ebx
c001ef1f:	83 ec 08             	sub    esp,0x8
c001ef22:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001ef27:	48                   	dec    eax
c001ef28:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001ef2d:	75 01                	jne    c001ef30 <cleanerTaskFunction(void*)+0x12>
c001ef2f:	fb                   	sti    
c001ef30:	fa                   	cli    
c001ef31:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001ef36:	80 3d 2c 26 03 c0 00 	cmp    BYTE PTR ds:0xc003262c,0x0
c001ef3d:	8d 50 01             	lea    edx,[eax+0x1]
c001ef40:	89 15 48 26 03 c0    	mov    DWORD PTR ds:0xc0032648,edx
c001ef46:	0f 84 b9 00 00 00    	je     c001f005 <cleanerTaskFunction(void*)+0xe7>
c001ef4c:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001ef51:	85 c0                	test   eax,eax
c001ef53:	75 01                	jne    c001ef56 <cleanerTaskFunction(void*)+0x38>
c001ef55:	fb                   	sti    
c001ef56:	c6 05 2c 26 03 c0 00 	mov    BYTE PTR ds:0xc003262c,0x0
c001ef5d:	fa                   	cli    
c001ef5e:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001ef64:	ff 05 44 26 03 c0    	inc    DWORD PTR ds:0xc0032644
c001ef6a:	fa                   	cli    
c001ef6b:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001ef71:	eb 3e                	jmp    c001efb1 <cleanerTaskFunction(void*)+0x93>
c001ef73:	83 ec 0c             	sub    esp,0xc
c001ef76:	68 4c 26 03 c0       	push   0xc003264c
c001ef7b:	e8 a6 a5 00 00       	call   c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ef80:	c7 04 24 4c 26 03 c0 	mov    DWORD PTR [esp],0xc003264c
c001ef87:	89 c3                	mov    ebx,eax
c001ef89:	e8 a0 a5 00 00       	call   c002952e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ef8e:	c7 04 24 d0 ce 02 c0 	mov    DWORD PTR [esp],0xc002ced0
c001ef95:	e8 f5 3e ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001ef9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef9d:	e8 b3 fc ff ff       	call   c001ec55 <cleanupTerminatedTask(ThreadControlBlock*)>
c001efa2:	c7 04 24 e9 ce 02 c0 	mov    DWORD PTR [esp],0xc002cee9
c001efa9:	e8 e1 3e ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001efae:	83 c4 10             	add    esp,0x10
c001efb1:	83 ec 0c             	sub    esp,0xc
c001efb4:	68 4c 26 03 c0       	push   0xc003264c
c001efb9:	e8 4c a5 00 00       	call   c002950a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001efbe:	83 c4 10             	add    esp,0x10
c001efc1:	84 c0                	test   al,al
c001efc3:	74 ae                	je     c001ef73 <cleanerTaskFunction(void*)+0x55>
c001efc5:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001efca:	48                   	dec    eax
c001efcb:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001efd0:	75 01                	jne    c001efd3 <cleanerTaskFunction(void*)+0xb5>
c001efd2:	fb                   	sti    
c001efd3:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c001efd8:	48                   	dec    eax
c001efd9:	a3 44 26 03 c0       	mov    ds:0xc0032644,eax
c001efde:	0f 85 3e ff ff ff    	jne    c001ef22 <cleanerTaskFunction(void*)+0x4>
c001efe4:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c001efe9:	85 c0                	test   eax,eax
c001efeb:	0f 84 31 ff ff ff    	je     c001ef22 <cleanerTaskFunction(void*)+0x4>
c001eff1:	c7 05 40 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x0
c001effb:	e8 e4 f6 ff ff       	call   c001e6e4 <schedule()>
c001f000:	e9 1d ff ff ff       	jmp    c001ef22 <cleanerTaskFunction(void*)+0x4>
c001f005:	83 ec 0c             	sub    esp,0xc
c001f008:	6a 02                	push   0x2
c001f00a:	e8 86 f8 ff ff       	call   c001e895 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f00f:	83 c4 10             	add    esp,0x10
c001f012:	e9 3f ff ff ff       	jmp    c001ef56 <cleanerTaskFunction(void*)+0x38>

c001f017 <terminateTask(int)>:
c001f017:	83 ec 14             	sub    esp,0x14
c001f01a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f01f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001f022:	83 c0 0c             	add    eax,0xc
c001f025:	50                   	push   eax
c001f026:	68 48 d2 02 c0       	push   0xc002d248
c001f02b:	e8 5f 3e ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f030:	fa                   	cli    
c001f031:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001f037:	ff 05 44 26 03 c0    	inc    DWORD PTR ds:0xc0032644
c001f03d:	fa                   	cli    
c001f03e:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001f044:	c7 04 24 fc ce 02 c0 	mov    DWORD PTR [esp],0xc002cefc
c001f04b:	e8 3f 3e ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f050:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f054:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f059:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001f05c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f061:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f064:	5a                   	pop    edx
c001f065:	59                   	pop    ecx
c001f066:	50                   	push   eax
c001f067:	68 4c 26 03 c0       	push   0xc003264c
c001f06c:	e8 6b a5 00 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001f071:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f076:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001f07d:	c7 04 24 16 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf16
c001f084:	e8 06 3e ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f089:	83 c4 10             	add    esp,0x10
c001f08c:	a1 28 26 03 c0       	mov    eax,ds:0xc0032628
c001f091:	85 c0                	test   eax,eax
c001f093:	0f 84 8d 00 00 00    	je     c001f126 <terminateTask(int)+0x10f>
c001f099:	83 ec 0c             	sub    esp,0xc
c001f09c:	68 30 cf 02 c0       	push   0xc002cf30
c001f0a1:	e8 e9 3d ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f0a6:	58                   	pop    eax
c001f0a7:	c6 05 2c 26 03 c0 01 	mov    BYTE PTR ds:0xc003262c,0x1
c001f0ae:	ff 35 28 26 03 c0    	push   DWORD PTR ds:0xc0032628
c001f0b4:	e8 ef fa ff ff       	call   c001eba8 <unblockTask(ThreadControlBlock*)>
c001f0b9:	c7 04 24 4a cf 02 c0 	mov    DWORD PTR [esp],0xc002cf4a
c001f0c0:	e8 ca 3d ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f0c5:	83 c4 10             	add    esp,0x10
c001f0c8:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001f0cd:	48                   	dec    eax
c001f0ce:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001f0d3:	75 01                	jne    c001f0d6 <terminateTask(int)+0xbf>
c001f0d5:	fb                   	sti    
c001f0d6:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c001f0db:	48                   	dec    eax
c001f0dc:	a3 44 26 03 c0       	mov    ds:0xc0032644,eax
c001f0e1:	75 09                	jne    c001f0ec <terminateTask(int)+0xd5>
c001f0e3:	83 3d 40 26 03 c0 00 	cmp    DWORD PTR ds:0xc0032640,0x0
c001f0ea:	75 4c                	jne    c001f138 <terminateTask(int)+0x121>
c001f0ec:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001f0f1:	48                   	dec    eax
c001f0f2:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001f0f7:	75 01                	jne    c001f0fa <terminateTask(int)+0xe3>
c001f0f9:	fb                   	sti    
c001f0fa:	83 ec 0c             	sub    esp,0xc
c001f0fd:	68 82 cf 02 c0       	push   0xc002cf82
c001f102:	e8 88 3d ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f107:	83 c4 10             	add    esp,0x10
c001f10a:	fa                   	cli    
c001f10b:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001f111:	e8 ce f5 ff ff       	call   c001e6e4 <schedule()>
c001f116:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001f11b:	48                   	dec    eax
c001f11c:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001f121:	75 e7                	jne    c001f10a <terminateTask(int)+0xf3>
c001f123:	fb                   	sti    
c001f124:	eb e4                	jmp    c001f10a <terminateTask(int)+0xf3>
c001f126:	83 ec 0c             	sub    esp,0xc
c001f129:	68 64 cf 02 c0       	push   0xc002cf64
c001f12e:	e8 5c 3d ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f133:	83 c4 10             	add    esp,0x10
c001f136:	eb 90                	jmp    c001f0c8 <terminateTask(int)+0xb1>
c001f138:	c7 05 40 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x0
c001f142:	e8 9d f5 ff ff       	call   c001e6e4 <schedule()>
c001f147:	eb a3                	jmp    c001f0ec <terminateTask(int)+0xd5>

c001f149 <Thr::terminateFromIRQ(int)>:
c001f149:	83 ec 18             	sub    esp,0x18
c001f14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f150:	e8 c2 fe ff ff       	call   c001f017 <terminateTask(int)>
c001f155:	90                   	nop

c001f156 <Semaphore::release()>:
c001f156:	83 ec 0c             	sub    esp,0xc
c001f159:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f15d:	fa                   	cli    
c001f15e:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c001f163:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001f169:	8d 48 01             	lea    ecx,[eax+0x1]
c001f16c:	89 0d 44 26 03 c0    	mov    DWORD PTR ds:0xc0032644,ecx
c001f172:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001f175:	85 c9                	test   ecx,ecx
c001f177:	74 3c                	je     c001f1b5 <Semaphore::release()+0x5f>
c001f179:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001f17c:	83 ec 0c             	sub    esp,0xc
c001f17f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001f182:	51                   	push   ecx
c001f183:	e8 20 fa ff ff       	call   c001eba8 <unblockTask(ThreadControlBlock*)>
c001f188:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c001f18d:	83 c4 10             	add    esp,0x10
c001f190:	48                   	dec    eax
c001f191:	a3 44 26 03 c0       	mov    ds:0xc0032644,eax
c001f196:	85 c0                	test   eax,eax
c001f198:	75 09                	jne    c001f1a3 <Semaphore::release()+0x4d>
c001f19a:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c001f19f:	85 c0                	test   eax,eax
c001f1a1:	75 17                	jne    c001f1ba <Semaphore::release()+0x64>
c001f1a3:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001f1a8:	48                   	dec    eax
c001f1a9:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001f1ae:	75 01                	jne    c001f1b1 <Semaphore::release()+0x5b>
c001f1b0:	fb                   	sti    
c001f1b1:	83 c4 0c             	add    esp,0xc
c001f1b4:	c3                   	ret    
c001f1b5:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001f1b8:	eb d7                	jmp    c001f191 <Semaphore::release()+0x3b>
c001f1ba:	c7 05 40 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x0
c001f1c4:	e8 1b f5 ff ff       	call   c001e6e4 <schedule()>
c001f1c9:	eb d8                	jmp    c001f1a3 <Semaphore::release()+0x4d>

c001f1cb <__static_initialization_and_destruction_0(int, int)>:
c001f1cb:	83 ec 0c             	sub    esp,0xc
c001f1ce:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f1d3:	0f 85 88 00 00 00    	jne    c001f261 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f1d9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f1e1:	75 7e                	jne    c001f261 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f1e3:	83 ec 0c             	sub    esp,0xc
c001f1e6:	68 64 26 03 c0       	push   0xc0032664
c001f1eb:	e8 7c a6 00 00       	call   c002986c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f1f0:	83 c4 10             	add    esp,0x10
c001f1f3:	83 ec 04             	sub    esp,0x4
c001f1f6:	68 30 e0 02 c0       	push   0xc002e030
c001f1fb:	68 64 26 03 c0       	push   0xc0032664
c001f200:	68 20 98 02 c0       	push   0xc0029820
c001f205:	e8 1f 3b ff ff       	call   c0012d29 <__cxa_atexit>
c001f20a:	83 c4 10             	add    esp,0x10
c001f20d:	83 ec 0c             	sub    esp,0xc
c001f210:	68 58 26 03 c0       	push   0xc0032658
c001f215:	e8 52 a6 00 00       	call   c002986c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f21a:	83 c4 10             	add    esp,0x10
c001f21d:	83 ec 04             	sub    esp,0x4
c001f220:	68 30 e0 02 c0       	push   0xc002e030
c001f225:	68 58 26 03 c0       	push   0xc0032658
c001f22a:	68 20 98 02 c0       	push   0xc0029820
c001f22f:	e8 f5 3a ff ff       	call   c0012d29 <__cxa_atexit>
c001f234:	83 c4 10             	add    esp,0x10
c001f237:	83 ec 0c             	sub    esp,0xc
c001f23a:	68 4c 26 03 c0       	push   0xc003264c
c001f23f:	e8 28 a6 00 00       	call   c002986c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f244:	83 c4 10             	add    esp,0x10
c001f247:	83 ec 04             	sub    esp,0x4
c001f24a:	68 30 e0 02 c0       	push   0xc002e030
c001f24f:	68 4c 26 03 c0       	push   0xc003264c
c001f254:	68 20 98 02 c0       	push   0xc0029820
c001f259:	e8 cb 3a ff ff       	call   c0012d29 <__cxa_atexit>
c001f25e:	83 c4 10             	add    esp,0x10
c001f261:	90                   	nop
c001f262:	83 c4 0c             	add    esp,0xc
c001f265:	c3                   	ret    

c001f266 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f266:	83 ec 0c             	sub    esp,0xc
c001f269:	83 ec 08             	sub    esp,0x8
c001f26c:	68 ff ff 00 00       	push   0xffff
c001f271:	6a 01                	push   0x1
c001f273:	e8 53 ff ff ff       	call   c001f1cb <__static_initialization_and_destruction_0(int, int)>
c001f278:	83 c4 10             	add    esp,0x10
c001f27b:	83 c4 0c             	add    esp,0xc
c001f27e:	c3                   	ret    

c001f27f <Vm::inbv(unsigned short)>:
c001f27f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f283:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f288:	75 06                	jne    c001f290 <Vm::inbv(unsigned short)+0x11>
c001f28a:	a0 ac 26 03 c0       	mov    al,ds:0xc00326ac
c001f28f:	c3                   	ret    
c001f290:	ec                   	in     al,dx
c001f291:	c3                   	ret    

c001f292 <Vm::outbv(unsigned short, unsigned char)>:
c001f292:	53                   	push   ebx
c001f293:	83 ec 08             	sub    esp,0x8
c001f296:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f29a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f29e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f2a3:	75 38                	jne    c001f2dd <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f2a5:	0f b6 c3             	movzx  eax,bl
c001f2a8:	51                   	push   ecx
c001f2a9:	51                   	push   ecx
c001f2aa:	50                   	push   eax
c001f2ab:	68 67 d2 02 c0       	push   0xc002d267
c001f2b0:	e8 da 3b ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f2b5:	8b 15 ac 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326ac
c001f2bb:	83 c4 10             	add    esp,0x10
c001f2be:	8d 42 01             	lea    eax,[edx+0x1]
c001f2c1:	88 9a c0 26 03 c0    	mov    BYTE PTR [edx-0x3ffcd940],bl
c001f2c7:	a3 ac 26 03 c0       	mov    ds:0xc00326ac,eax
c001f2cc:	83 f8 20             	cmp    eax,0x20
c001f2cf:	75 0f                	jne    c001f2e0 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f2d1:	c7 05 ac 26 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00326ac,0x1f
c001f2db:	eb 03                	jmp    c001f2e0 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f2dd:	88 d8                	mov    al,bl
c001f2df:	ee                   	out    dx,al
c001f2e0:	83 c4 08             	add    esp,0x8
c001f2e3:	5b                   	pop    ebx
c001f2e4:	c3                   	ret    

c001f2e5 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f2e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f2ea:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f2ef:	c1 e0 04             	shl    eax,0x4
c001f2f2:	01 d0                	add    eax,edx
c001f2f4:	c3                   	ret    

c001f2f5 <Vm::getSegment(unsigned int)>:
c001f2f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2f9:	c1 e8 10             	shr    eax,0x10
c001f2fc:	c3                   	ret    

c001f2fd <Vm::getOffset(unsigned int)>:
c001f2fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f301:	c3                   	ret    

c001f302 <Vm::mainloop2()>:
c001f302:	83 ec 18             	sub    esp,0x18
c001f305:	fa                   	cli    
c001f306:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001f30c:	6a 02                	push   0x2
c001f30e:	c6 05 a5 26 03 c0 01 	mov    BYTE PTR ds:0xc00326a5,0x1
c001f315:	e8 7b f5 ff ff       	call   c001e895 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f31a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f31f:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f323:	52                   	push   edx
c001f324:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f328:	52                   	push   edx
c001f329:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f32d:	52                   	push   edx
c001f32e:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f332:	50                   	push   eax
c001f333:	e8 c2 0f fe ff       	call   c00002fa <goToVM86>
c001f338:	83 c4 2c             	add    esp,0x2c
c001f33b:	c3                   	ret    

c001f33c <Vm::mainVm8086Loop(void*)>:
c001f33c:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001f341:	48                   	dec    eax
c001f342:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001f347:	75 01                	jne    c001f34a <Vm::mainVm8086Loop(void*)+0xe>
c001f349:	fb                   	sti    
c001f34a:	eb b6                	jmp    c001f302 <Vm::mainloop2()>

c001f34c <Vm::mainloop3(unsigned long)>:
c001f34c:	83 ec 18             	sub    esp,0x18
c001f34f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f353:	fa                   	cli    
c001f354:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001f35a:	6a 02                	push   0x2
c001f35c:	c6 05 a4 26 03 c0 01 	mov    BYTE PTR ds:0xc00326a4,0x1
c001f363:	a3 a0 26 03 c0       	mov    ds:0xc00326a0,eax
c001f368:	e8 28 f5 ff ff       	call   c001e895 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f36d:	83 c4 1c             	add    esp,0x1c
c001f370:	eb 90                	jmp    c001f302 <Vm::mainloop2()>

c001f372 <Vm::initialise8086()>:
c001f372:	83 ec 0c             	sub    esp,0xc
c001f375:	68 80 00 00 00       	push   0x80
c001f37a:	6a 00                	push   0x0
c001f37c:	68 3c f3 01 c0       	push   0xc001f33c
c001f381:	ff 35 70 26 03 c0    	push   DWORD PTR ds:0xc0032670
c001f387:	e8 14 f1 ff ff       	call   c001e4a0 <Process::createThread(void (*)(void*), void*, int)>
c001f38c:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f393:	a3 a8 26 03 c0       	mov    ds:0xc00326a8,eax
c001f398:	68 00 01 00 00       	push   0x100
c001f39d:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c001f3a2:	6a 00                	push   0x0
c001f3a4:	6a 00                	push   0x0
c001f3a6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f3ac:	e8 05 32 ff ff       	call   c00125b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f3b1:	83 c4 2c             	add    esp,0x2c
c001f3b4:	c3                   	ret    

c001f3b5 <Vm::finish8086()>:
c001f3b5:	53                   	push   ebx
c001f3b6:	83 ec 08             	sub    esp,0x8
c001f3b9:	fa                   	cli    
c001f3ba:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001f3c0:	80 3d a4 26 03 c0 00 	cmp    BYTE PTR ds:0xc00326a4,0x0
c001f3c7:	75 15                	jne    c001f3de <Vm::finish8086()+0x29>
c001f3c9:	e8 16 f3 ff ff       	call   c001e6e4 <schedule()>
c001f3ce:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001f3d3:	48                   	dec    eax
c001f3d4:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001f3d9:	75 de                	jne    c001f3b9 <Vm::finish8086()+0x4>
c001f3db:	fb                   	sti    
c001f3dc:	eb db                	jmp    c001f3b9 <Vm::finish8086()+0x4>
c001f3de:	83 ec 0c             	sub    esp,0xc
c001f3e1:	8b 1d a0 26 03 c0    	mov    ebx,DWORD PTR ds:0xc00326a0
c001f3e7:	ff 35 a8 26 03 c0    	push   DWORD PTR ds:0xc00326a8
c001f3ed:	c6 05 a4 26 03 c0 00 	mov    BYTE PTR ds:0xc00326a4,0x0
c001f3f4:	e8 af f7 ff ff       	call   c001eba8 <unblockTask(ThreadControlBlock*)>
c001f3f9:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001f3fe:	83 c4 10             	add    esp,0x10
c001f401:	8d 50 ff             	lea    edx,[eax-0x1]
c001f404:	89 15 48 26 03 c0    	mov    DWORD PTR ds:0xc0032648,edx
c001f40a:	85 d2                	test   edx,edx
c001f40c:	75 01                	jne    c001f40f <Vm::finish8086()+0x5a>
c001f40e:	fb                   	sti    
c001f40f:	89 d8                	mov    eax,ebx
c001f411:	83 c4 08             	add    esp,0x8
c001f414:	5b                   	pop    ebx
c001f415:	c3                   	ret    

c001f416 <Vm::getOutput8086(unsigned char*)>:
c001f416:	53                   	push   ebx
c001f417:	8b 0d ac 26 03 c0    	mov    ecx,DWORD PTR ds:0xc00326ac
c001f41d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f421:	31 c0                	xor    eax,eax
c001f423:	39 c1                	cmp    ecx,eax
c001f425:	74 0c                	je     c001f433 <Vm::getOutput8086(unsigned char*)+0x1d>
c001f427:	8a 98 c0 26 03 c0    	mov    bl,BYTE PTR [eax-0x3ffcd940]
c001f42d:	88 1c 02             	mov    BYTE PTR [edx+eax*1],bl
c001f430:	40                   	inc    eax
c001f431:	eb f0                	jmp    c001f423 <Vm::getOutput8086(unsigned char*)+0xd>
c001f433:	a1 ac 26 03 c0       	mov    eax,ds:0xc00326ac
c001f438:	5b                   	pop    ebx
c001f439:	c7 05 ac 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326ac,0x0
c001f443:	c3                   	ret    

c001f444 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f444:	55                   	push   ebp
c001f445:	57                   	push   edi
c001f446:	56                   	push   esi
c001f447:	53                   	push   ebx
c001f448:	83 ec 2c             	sub    esp,0x2c
c001f44b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f44f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f453:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f457:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f45b:	fa                   	cli    
c001f45c:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c001f462:	0f b6 35 a5 26 03 c0 	movzx  esi,BYTE PTR ds:0xc00326a5
c001f469:	89 f0                	mov    eax,esi
c001f46b:	84 c0                	test   al,al
c001f46d:	75 1d                	jne    c001f48c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f46f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f473:	e8 6c f2 ff ff       	call   c001e6e4 <schedule()>
c001f478:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001f47d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f481:	48                   	dec    eax
c001f482:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001f487:	75 d2                	jne    c001f45b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f489:	fb                   	sti    
c001f48a:	eb cf                	jmp    c001f45b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f48c:	a1 a8 26 03 c0       	mov    eax,ds:0xc00326a8
c001f491:	c7 05 ac 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326ac,0x0
c001f49b:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f49f:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f4a3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f4a7:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f4ab:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f4af:	50                   	push   eax
c001f4b0:	6a 20                	push   0x20
c001f4b2:	6a 00                	push   0x0
c001f4b4:	68 c0 26 03 c0       	push   0xc00326c0
c001f4b9:	e8 ae 12 fe ff       	call   c000076c <memset>
c001f4be:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f4c5:	e8 f6 03 ff ff       	call   c000f8c0 <malloc>
c001f4ca:	83 c4 0c             	add    esp,0xc
c001f4cd:	89 c3                	mov    ebx,eax
c001f4cf:	ff 35 70 26 03 c0    	push   DWORD PTR ds:0xc0032670
c001f4d5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f4d9:	50                   	push   eax
c001f4da:	e8 0f 3f ff ff       	call   c00133ee <File::File(char const*, Process*)>
c001f4df:	83 c4 10             	add    esp,0x10
c001f4e2:	85 db                	test   ebx,ebx
c001f4e4:	75 0a                	jne    c001f4f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f4e6:	83 ec 0c             	sub    esp,0xc
c001f4e9:	68 83 d2 02 c0       	push   0xc002d283
c001f4ee:	eb 3e                	jmp    c001f52e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f4f0:	50                   	push   eax
c001f4f1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f4f5:	50                   	push   eax
c001f4f6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f4fa:	50                   	push   eax
c001f4fb:	53                   	push   ebx
c001f4fc:	e8 fd 41 ff ff       	call   c00136fe <File::stat(unsigned long long*, bool*)>
c001f501:	83 c4 10             	add    esp,0x10
c001f504:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f509:	74 0a                	je     c001f515 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f50b:	83 ec 0c             	sub    esp,0xc
c001f50e:	68 97 d2 02 c0       	push   0xc002d297
c001f513:	eb 19                	jmp    c001f52e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f515:	51                   	push   ecx
c001f516:	51                   	push   ecx
c001f517:	6a 01                	push   0x1
c001f519:	53                   	push   ebx
c001f51a:	e8 33 3f ff ff       	call   c0013452 <File::open(FileOpenMode)>
c001f51f:	83 c4 10             	add    esp,0x10
c001f522:	85 c0                	test   eax,eax
c001f524:	74 24                	je     c001f54a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f526:	83 ec 0c             	sub    esp,0xc
c001f529:	68 b0 d2 02 c0       	push   0xc002d2b0
c001f52e:	e8 c4 b3 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c001f533:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001f538:	83 c4 10             	add    esp,0x10
c001f53b:	48                   	dec    eax
c001f53c:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001f541:	85 c0                	test   eax,eax
c001f543:	75 01                	jne    c001f546 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f545:	fb                   	sti    
c001f546:	31 f6                	xor    esi,esi
c001f548:	eb 58                	jmp    c001f5a2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f54a:	0f b7 ed             	movzx  ebp,bp
c001f54d:	50                   	push   eax
c001f54e:	0f b7 ff             	movzx  edi,di
c001f551:	50                   	push   eax
c001f552:	55                   	push   ebp
c001f553:	57                   	push   edi
c001f554:	e8 8c fd ff ff       	call   c001f2e5 <Vm::realToLinear(unsigned short, unsigned short)>
c001f559:	5a                   	pop    edx
c001f55a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f55c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f560:	51                   	push   ecx
c001f561:	50                   	push   eax
c001f562:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f566:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f56a:	53                   	push   ebx
c001f56b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f56e:	83 c4 14             	add    esp,0x14
c001f571:	53                   	push   ebx
c001f572:	e8 39 3f ff ff       	call   c00134b0 <File::close()>
c001f577:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001f57c:	83 c4 10             	add    esp,0x10
c001f57f:	48                   	dec    eax
c001f580:	c6 05 a5 26 03 c0 00 	mov    BYTE PTR ds:0xc00326a5,0x0
c001f587:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001f58c:	85 c0                	test   eax,eax
c001f58e:	75 01                	jne    c001f591 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f590:	fb                   	sti    
c001f591:	83 ec 0c             	sub    esp,0xc
c001f594:	ff 35 a8 26 03 c0    	push   DWORD PTR ds:0xc00326a8
c001f59a:	e8 09 f6 ff ff       	call   c001eba8 <unblockTask(ThreadControlBlock*)>
c001f59f:	83 c4 10             	add    esp,0x10
c001f5a2:	83 c4 2c             	add    esp,0x2c
c001f5a5:	89 f0                	mov    eax,esi
c001f5a7:	5b                   	pop    ebx
c001f5a8:	5e                   	pop    esi
c001f5a9:	5f                   	pop    edi
c001f5aa:	5d                   	pop    ebp
c001f5ab:	c3                   	ret    

c001f5ac <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f5ac:	57                   	push   edi
c001f5ad:	56                   	push   esi
c001f5ae:	53                   	push   ebx
c001f5af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f5b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f5bb:	83 e8 06             	sub    eax,0x6
c001f5be:	0f b7 c0             	movzx  eax,ax
c001f5c1:	50                   	push   eax
c001f5c2:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f5c7:	50                   	push   eax
c001f5c8:	e8 18 fd ff ff       	call   c001f2e5 <Vm::realToLinear(unsigned short, unsigned short)>
c001f5cd:	5a                   	pop    edx
c001f5ce:	5e                   	pop    esi
c001f5cf:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f5d2:	8d 56 fa             	lea    edx,[esi-0x6]
c001f5d5:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f5db:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f5de:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f5e1:	83 c2 02             	add    edx,0x2
c001f5e4:	66 89 10             	mov    WORD PTR [eax],dx
c001f5e7:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f5ea:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f5ee:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f5f1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f5f5:	89 d6                	mov    esi,edx
c001f5f7:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f5fd:	66 81 e6 ff fd       	and    si,0xfdff
c001f602:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f606:	74 07                	je     c001f60f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f608:	89 d6                	mov    esi,edx
c001f60a:	66 81 ce 00 02       	or     si,0x200
c001f60f:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f613:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f618:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f61c:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f624:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f627:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f62f:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f632:	5b                   	pop    ebx
c001f633:	5e                   	pop    esi
c001f634:	5f                   	pop    edi
c001f635:	c3                   	ret    

c001f636 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f636:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f63b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f640:	c1 e0 04             	shl    eax,0x4
c001f643:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f646:	c3                   	ret    

c001f647 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f647:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f64c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f651:	c1 e0 04             	shl    eax,0x4
c001f654:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f658:	c3                   	ret    

c001f659 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f659:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f65e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f663:	c1 e0 04             	shl    eax,0x4
c001f666:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f669:	c3                   	ret    

c001f66a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f66a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f66f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f674:	c1 e0 04             	shl    eax,0x4
c001f677:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f67b:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f67e:	c3                   	ret    

c001f67f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f67f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f684:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f689:	c1 e0 04             	shl    eax,0x4
c001f68c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f690:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f694:	c3                   	ret    

c001f695 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f695:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f69a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f69f:	c1 e0 04             	shl    eax,0x4
c001f6a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f6a6:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f6a9:	c3                   	ret    

c001f6aa <Vm::faultHandler(regs*)>:
c001f6aa:	55                   	push   ebp
c001f6ab:	57                   	push   edi
c001f6ac:	56                   	push   esi
c001f6ad:	53                   	push   ebx
c001f6ae:	83 ec 1c             	sub    esp,0x1c
c001f6b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f6b5:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f6b8:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f6bb:	0f b7 c1             	movzx  eax,cx
c001f6be:	50                   	push   eax
c001f6bf:	0f b7 c3             	movzx  eax,bx
c001f6c2:	c1 e3 04             	shl    ebx,0x4
c001f6c5:	50                   	push   eax
c001f6c6:	e8 1a fc ff ff       	call   c001f2e5 <Vm::realToLinear(unsigned short, unsigned short)>
c001f6cb:	5a                   	pop    edx
c001f6cc:	89 c5                	mov    ebp,eax
c001f6ce:	5e                   	pop    esi
c001f6cf:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f6d3:	50                   	push   eax
c001f6d4:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f6d8:	50                   	push   eax
c001f6d9:	e8 07 fc ff ff       	call   c001f2e5 <Vm::realToLinear(unsigned short, unsigned short)>
c001f6de:	01 cb                	add    ebx,ecx
c001f6e0:	89 c6                	mov    esi,eax
c001f6e2:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f6e6:	50                   	push   eax
c001f6e7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6eb:	50                   	push   eax
c001f6ec:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f6f0:	50                   	push   eax
c001f6f1:	55                   	push   ebp
c001f6f2:	53                   	push   ebx
c001f6f3:	b3 06                	mov    bl,0x6
c001f6f5:	68 c9 d2 02 c0       	push   0xc002d2c9
c001f6fa:	e8 90 37 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f6ff:	83 c4 20             	add    esp,0x20
c001f702:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f707:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f70c:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f710:	3c 9d                	cmp    al,0x9d
c001f712:	0f 84 d7 02 00 00    	je     c001f9ef <Vm::faultHandler(regs*)+0x345>
c001f718:	0f 87 a3 00 00 00    	ja     c001f7c1 <Vm::faultHandler(regs*)+0x117>
c001f71e:	3c 66                	cmp    al,0x66
c001f720:	0f 84 15 02 00 00    	je     c001f93b <Vm::faultHandler(regs*)+0x291>
c001f726:	77 5f                	ja     c001f787 <Vm::faultHandler(regs*)+0xdd>
c001f728:	3c 36                	cmp    al,0x36
c001f72a:	0f 84 f1 01 00 00    	je     c001f921 <Vm::faultHandler(regs*)+0x277>
c001f730:	77 28                	ja     c001f75a <Vm::faultHandler(regs*)+0xb0>
c001f732:	3c 26                	cmp    al,0x26
c001f734:	0f 84 99 01 00 00    	je     c001f8d3 <Vm::faultHandler(regs*)+0x229>
c001f73a:	3c 2e                	cmp    al,0x2e
c001f73c:	0f 85 3b 07 00 00    	jne    c001fe7d <Vm::faultHandler(regs*)+0x7d3>
c001f742:	83 ec 0c             	sub    esp,0xc
c001f745:	31 db                	xor    ebx,ebx
c001f747:	68 de d2 02 c0       	push   0xc002d2de
c001f74c:	e8 3e 37 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f751:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f754:	83 c4 10             	add    esp,0x10
c001f757:	45                   	inc    ebp
c001f758:	eb b2                	jmp    c001f70c <Vm::faultHandler(regs*)+0x62>
c001f75a:	3c 64                	cmp    al,0x64
c001f75c:	0f 84 8b 01 00 00    	je     c001f8ed <Vm::faultHandler(regs*)+0x243>
c001f762:	0f 87 9f 01 00 00    	ja     c001f907 <Vm::faultHandler(regs*)+0x25d>
c001f768:	3c 3e                	cmp    al,0x3e
c001f76a:	0f 85 0d 07 00 00    	jne    c001fe7d <Vm::faultHandler(regs*)+0x7d3>
c001f770:	83 ec 0c             	sub    esp,0xc
c001f773:	b3 01                	mov    bl,0x1
c001f775:	68 e2 d2 02 c0       	push   0xc002d2e2
c001f77a:	e8 10 37 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f77f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f782:	83 c4 10             	add    esp,0x10
c001f785:	eb d0                	jmp    c001f757 <Vm::faultHandler(regs*)+0xad>
c001f787:	3c 6d                	cmp    al,0x6d
c001f789:	0f 84 af 03 00 00    	je     c001fb3e <Vm::faultHandler(regs*)+0x494>
c001f78f:	77 15                	ja     c001f7a6 <Vm::faultHandler(regs*)+0xfc>
c001f791:	3c 67                	cmp    al,0x67
c001f793:	0f 84 bf 01 00 00    	je     c001f958 <Vm::faultHandler(regs*)+0x2ae>
c001f799:	3c 6c                	cmp    al,0x6c
c001f79b:	0f 84 3f 03 00 00    	je     c001fae0 <Vm::faultHandler(regs*)+0x436>
c001f7a1:	e9 d7 06 00 00       	jmp    c001fe7d <Vm::faultHandler(regs*)+0x7d3>
c001f7a6:	3c 6f                	cmp    al,0x6f
c001f7a8:	0f 84 a4 04 00 00    	je     c001fc52 <Vm::faultHandler(regs*)+0x5a8>
c001f7ae:	0f 82 11 04 00 00    	jb     c001fbc5 <Vm::faultHandler(regs*)+0x51b>
c001f7b4:	3c 9c                	cmp    al,0x9c
c001f7b6:	0f 84 ba 01 00 00    	je     c001f976 <Vm::faultHandler(regs*)+0x2cc>
c001f7bc:	e9 bc 06 00 00       	jmp    c001fe7d <Vm::faultHandler(regs*)+0x7d3>
c001f7c1:	3c ec                	cmp    al,0xec
c001f7c3:	0f 84 24 06 00 00    	je     c001fded <Vm::faultHandler(regs*)+0x743>
c001f7c9:	0f 87 93 00 00 00    	ja     c001f862 <Vm::faultHandler(regs*)+0x1b8>
c001f7cf:	3c e4                	cmp    al,0xe4
c001f7d1:	0f 84 5c 05 00 00    	je     c001fd33 <Vm::faultHandler(regs*)+0x689>
c001f7d7:	77 6a                	ja     c001f843 <Vm::faultHandler(regs*)+0x199>
c001f7d9:	3c cd                	cmp    al,0xcd
c001f7db:	0f 84 7e 02 00 00    	je     c001fa5f <Vm::faultHandler(regs*)+0x3b5>
c001f7e1:	3c cf                	cmp    al,0xcf
c001f7e3:	0f 85 94 06 00 00    	jne    c001fe7d <Vm::faultHandler(regs*)+0x7d3>
c001f7e9:	83 ec 0c             	sub    esp,0xc
c001f7ec:	68 26 d3 02 c0       	push   0xc002d326
c001f7f1:	e8 99 36 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f7f6:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f7f9:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f7fc:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f800:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f803:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f807:	0d 00 02 02 00       	or     eax,0x20200
c001f80c:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f80f:	56                   	push   esi
c001f810:	53                   	push   ebx
c001f811:	52                   	push   edx
c001f812:	68 2c d3 02 c0       	push   0xc002d32c
c001f817:	e8 73 36 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f81c:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f820:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f826:	66 c1 e8 09          	shr    ax,0x9
c001f82a:	83 e0 01             	and    eax,0x1
c001f82d:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f830:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f833:	83 c0 06             	add    eax,0x6
c001f836:	25 ff ff 00 00       	and    eax,0xffff
c001f83b:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f83e:	e9 95 02 00 00       	jmp    c001fad8 <Vm::faultHandler(regs*)+0x42e>
c001f843:	3c e6                	cmp    al,0xe6
c001f845:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f849:	0f 84 4e 05 00 00    	je     c001fd9d <Vm::faultHandler(regs*)+0x6f3>
c001f84f:	0f 82 0a 05 00 00    	jb     c001fd5f <Vm::faultHandler(regs*)+0x6b5>
c001f855:	3c e7                	cmp    al,0xe7
c001f857:	0f 84 69 05 00 00    	je     c001fdc6 <Vm::faultHandler(regs*)+0x71c>
c001f85d:	e9 1b 06 00 00       	jmp    c001fe7d <Vm::faultHandler(regs*)+0x7d3>
c001f862:	3c ef                	cmp    al,0xef
c001f864:	0f 84 e6 05 00 00    	je     c001fe50 <Vm::faultHandler(regs*)+0x7a6>
c001f86a:	77 37                	ja     c001f8a3 <Vm::faultHandler(regs*)+0x1f9>
c001f86c:	3c ed                	cmp    al,0xed
c001f86e:	0f 84 a3 05 00 00    	je     c001fe17 <Vm::faultHandler(regs*)+0x76d>
c001f874:	3c ee                	cmp    al,0xee
c001f876:	0f 85 01 06 00 00    	jne    c001fe7d <Vm::faultHandler(regs*)+0x7d3>
c001f87c:	52                   	push   edx
c001f87d:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f880:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f883:	68 c7 d3 02 c0       	push   0xc002d3c7
c001f888:	e8 02 36 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f88d:	59                   	pop    ecx
c001f88e:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f892:	5b                   	pop    ebx
c001f893:	50                   	push   eax
c001f894:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f898:	50                   	push   eax
c001f899:	e8 f4 f9 ff ff       	call   c001f292 <Vm::outbv(unsigned short, unsigned char)>
c001f89e:	e9 a5 05 00 00       	jmp    c001fe48 <Vm::faultHandler(regs*)+0x79e>
c001f8a3:	3c fa                	cmp    al,0xfa
c001f8a5:	0f 84 f7 01 00 00    	je     c001faa2 <Vm::faultHandler(regs*)+0x3f8>
c001f8ab:	3c fb                	cmp    al,0xfb
c001f8ad:	0f 84 0a 02 00 00    	je     c001fabd <Vm::faultHandler(regs*)+0x413>
c001f8b3:	3c f3                	cmp    al,0xf3
c001f8b5:	0f 85 c2 05 00 00    	jne    c001fe7d <Vm::faultHandler(regs*)+0x7d3>
c001f8bb:	83 ec 0c             	sub    esp,0xc
c001f8be:	68 ff d2 02 c0       	push   0xc002d2ff
c001f8c3:	e8 c7 35 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f8c8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8cb:	83 c4 10             	add    esp,0x10
c001f8ce:	e9 84 fe ff ff       	jmp    c001f757 <Vm::faultHandler(regs*)+0xad>
c001f8d3:	83 ec 0c             	sub    esp,0xc
c001f8d6:	b3 02                	mov    bl,0x2
c001f8d8:	68 da d2 02 c0       	push   0xc002d2da
c001f8dd:	e8 ad 35 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f8e2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8e5:	83 c4 10             	add    esp,0x10
c001f8e8:	e9 6a fe ff ff       	jmp    c001f757 <Vm::faultHandler(regs*)+0xad>
c001f8ed:	83 ec 0c             	sub    esp,0xc
c001f8f0:	b3 03                	mov    bl,0x3
c001f8f2:	68 e6 d2 02 c0       	push   0xc002d2e6
c001f8f7:	e8 93 35 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f8fc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8ff:	83 c4 10             	add    esp,0x10
c001f902:	e9 50 fe ff ff       	jmp    c001f757 <Vm::faultHandler(regs*)+0xad>
c001f907:	83 ec 0c             	sub    esp,0xc
c001f90a:	b3 04                	mov    bl,0x4
c001f90c:	68 ea d2 02 c0       	push   0xc002d2ea
c001f911:	e8 79 35 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f916:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f919:	83 c4 10             	add    esp,0x10
c001f91c:	e9 36 fe ff ff       	jmp    c001f757 <Vm::faultHandler(regs*)+0xad>
c001f921:	83 ec 0c             	sub    esp,0xc
c001f924:	b3 05                	mov    bl,0x5
c001f926:	68 ee d2 02 c0       	push   0xc002d2ee
c001f92b:	e8 5f 35 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f930:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f933:	83 c4 10             	add    esp,0x10
c001f936:	e9 1c fe ff ff       	jmp    c001f757 <Vm::faultHandler(regs*)+0xad>
c001f93b:	83 ec 0c             	sub    esp,0xc
c001f93e:	68 f2 d2 02 c0       	push   0xc002d2f2
c001f943:	e8 47 35 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f948:	83 c4 10             	add    esp,0x10
c001f94b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f94e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f953:	e9 ff fd ff ff       	jmp    c001f757 <Vm::faultHandler(regs*)+0xad>
c001f958:	50                   	push   eax
c001f959:	50                   	push   eax
c001f95a:	6a 01                	push   0x1
c001f95c:	68 f7 d2 02 c0       	push   0xc002d2f7
c001f961:	e8 29 35 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f966:	83 c4 10             	add    esp,0x10
c001f969:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f96c:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f971:	e9 e1 fd ff ff       	jmp    c001f757 <Vm::faultHandler(regs*)+0xad>
c001f976:	83 ec 0c             	sub    esp,0xc
c001f979:	68 05 d3 02 c0       	push   0xc002d305
c001f97e:	e8 0c 35 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f983:	83 c4 10             	add    esp,0x10
c001f986:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f989:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f98e:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f991:	74 2f                	je     c001f9c2 <Vm::faultHandler(regs*)+0x318>
c001f993:	83 ea 04             	sub    edx,0x4
c001f996:	25 ff 0d 00 00       	and    eax,0xdff
c001f99b:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f9a1:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f9a4:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f9a7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f9ad:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f9b1:	0f 84 bf 04 00 00    	je     c001fe76 <Vm::faultHandler(regs*)+0x7cc>
c001f9b7:	80 cc 02             	or     ah,0x2
c001f9ba:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f9bd:	e9 b4 04 00 00       	jmp    c001fe76 <Vm::faultHandler(regs*)+0x7cc>
c001f9c2:	83 ea 02             	sub    edx,0x2
c001f9c5:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f9cb:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f9ce:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f9d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f9d8:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f9dc:	74 05                	je     c001f9e3 <Vm::faultHandler(regs*)+0x339>
c001f9de:	80 cc 02             	or     ah,0x2
c001f9e1:	eb 03                	jmp    c001f9e6 <Vm::faultHandler(regs*)+0x33c>
c001f9e3:	80 e4 fd             	and    ah,0xfd
c001f9e6:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f9ea:	e9 87 04 00 00       	jmp    c001fe76 <Vm::faultHandler(regs*)+0x7cc>
c001f9ef:	83 ec 0c             	sub    esp,0xc
c001f9f2:	68 0c d3 02 c0       	push   0xc002d30c
c001f9f7:	e8 93 34 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001f9fc:	83 c4 10             	add    esp,0x10
c001f9ff:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fa04:	74 28                	je     c001fa2e <Vm::faultHandler(regs*)+0x384>
c001fa06:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa08:	25 ff 0d 00 00       	and    eax,0xdff
c001fa0d:	0d 00 02 02 00       	or     eax,0x20200
c001fa12:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001fa15:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa17:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001fa1d:	c1 e8 09             	shr    eax,0x9
c001fa20:	83 e0 01             	and    eax,0x1
c001fa23:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001fa26:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001fa29:	83 c0 04             	add    eax,0x4
c001fa2c:	eb 24                	jmp    c001fa52 <Vm::faultHandler(regs*)+0x3a8>
c001fa2e:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fa31:	0d 00 02 02 00       	or     eax,0x20200
c001fa36:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001fa39:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fa3c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001fa42:	66 c1 e8 09          	shr    ax,0x9
c001fa46:	83 e0 01             	and    eax,0x1
c001fa49:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001fa4c:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001fa4f:	83 c0 02             	add    eax,0x2
c001fa52:	25 ff ff 00 00       	and    eax,0xffff
c001fa57:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001fa5a:	e9 17 04 00 00       	jmp    c001fe76 <Vm::faultHandler(regs*)+0x7cc>
c001fa5f:	53                   	push   ebx
c001fa60:	53                   	push   ebx
c001fa61:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa65:	50                   	push   eax
c001fa66:	68 12 d3 02 c0       	push   0xc002d312
c001fa6b:	e8 1f 34 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001fa70:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa74:	83 c4 10             	add    esp,0x10
c001fa77:	3c ee                	cmp    al,0xee
c001fa79:	75 10                	jne    c001fa8b <Vm::faultHandler(regs*)+0x3e1>
c001fa7b:	83 ec 0c             	sub    esp,0xc
c001fa7e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fa81:	e8 c6 f8 ff ff       	call   c001f34c <Vm::mainloop3(unsigned long)>
c001fa86:	e9 c0 03 00 00       	jmp    c001fe4b <Vm::faultHandler(regs*)+0x7a1>
c001fa8b:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001fa8f:	83 ec 0c             	sub    esp,0xc
c001fa92:	53                   	push   ebx
c001fa93:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001fa97:	53                   	push   ebx
c001fa98:	55                   	push   ebp
c001fa99:	50                   	push   eax
c001fa9a:	57                   	push   edi
c001fa9b:	e8 0c fb ff ff       	call   c001f5ac <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001faa0:	eb 36                	jmp    c001fad8 <Vm::faultHandler(regs*)+0x42e>
c001faa2:	83 ec 0c             	sub    esp,0xc
c001faa5:	68 1c d3 02 c0       	push   0xc002d31c
c001faaa:	e8 e0 33 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001faaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fab4:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fab8:	e9 8b 03 00 00       	jmp    c001fe48 <Vm::faultHandler(regs*)+0x79e>
c001fabd:	83 ec 0c             	sub    esp,0xc
c001fac0:	68 21 d3 02 c0       	push   0xc002d321
c001fac5:	e8 c5 33 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001faca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001facf:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001fad3:	e9 70 03 00 00       	jmp    c001fe48 <Vm::faultHandler(regs*)+0x79e>
c001fad8:	83 c4 20             	add    esp,0x20
c001fadb:	e9 99 03 00 00       	jmp    c001fe79 <Vm::faultHandler(regs*)+0x7cf>
c001fae0:	83 ec 0c             	sub    esp,0xc
c001fae3:	68 5f d3 02 c0       	push   0xc002d35f
c001fae8:	e8 a2 33 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001faed:	83 c4 10             	add    esp,0x10
c001faf0:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001faf3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001faf8:	74 0d                	je     c001fb07 <Vm::faultHandler(regs*)+0x45d>
c001fafa:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fb01:	0f 87 9e 01 00 00    	ja     c001fca5 <Vm::faultHandler(regs*)+0x5fb>
c001fb07:	83 ec 0c             	sub    esp,0xc
c001fb0a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fb0e:	0f b7 db             	movzx  ebx,bx
c001fb11:	50                   	push   eax
c001fb12:	e8 68 f7 ff ff       	call   c001f27f <Vm::inbv(unsigned short)>
c001fb17:	83 c4 0c             	add    esp,0xc
c001fb1a:	0f b6 c0             	movzx  eax,al
c001fb1d:	50                   	push   eax
c001fb1e:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001fb22:	50                   	push   eax
c001fb23:	53                   	push   ebx
c001fb24:	e8 41 fb ff ff       	call   c001f66a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001fb29:	83 c4 10             	add    esp,0x10
c001fb2c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fb2f:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fb33:	74 03                	je     c001fb38 <Vm::faultHandler(regs*)+0x48e>
c001fb35:	48                   	dec    eax
c001fb36:	eb 01                	jmp    c001fb39 <Vm::faultHandler(regs*)+0x48f>
c001fb38:	40                   	inc    eax
c001fb39:	0f b7 c0             	movzx  eax,ax
c001fb3c:	eb 7f                	jmp    c001fbbd <Vm::faultHandler(regs*)+0x513>
c001fb3e:	83 ec 0c             	sub    esp,0xc
c001fb41:	68 91 d3 02 c0       	push   0xc002d391
c001fb46:	e8 44 33 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001fb4b:	83 c4 10             	add    esp,0x10
c001fb4e:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fb51:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fb56:	74 0d                	je     c001fb65 <Vm::faultHandler(regs*)+0x4bb>
c001fb58:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fb5f:	0f 87 40 01 00 00    	ja     c001fca5 <Vm::faultHandler(regs*)+0x5fb>
c001fb65:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fb68:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001fb6c:	0f b7 db             	movzx  ebx,bx
c001fb6f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb74:	74 20                	je     c001fb96 <Vm::faultHandler(regs*)+0x4ec>
c001fb76:	ed                   	in     eax,dx
c001fb77:	51                   	push   ecx
c001fb78:	50                   	push   eax
c001fb79:	56                   	push   esi
c001fb7a:	53                   	push   ebx
c001fb7b:	e8 15 fb ff ff       	call   c001f695 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001fb80:	83 c4 10             	add    esp,0x10
c001fb83:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fb86:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fb8a:	74 05                	je     c001fb91 <Vm::faultHandler(regs*)+0x4e7>
c001fb8c:	83 e8 04             	sub    eax,0x4
c001fb8f:	eb 27                	jmp    c001fbb8 <Vm::faultHandler(regs*)+0x50e>
c001fb91:	83 c0 04             	add    eax,0x4
c001fb94:	eb 22                	jmp    c001fbb8 <Vm::faultHandler(regs*)+0x50e>
c001fb96:	66 ed                	in     ax,dx
c001fb98:	0f b7 c0             	movzx  eax,ax
c001fb9b:	52                   	push   edx
c001fb9c:	50                   	push   eax
c001fb9d:	56                   	push   esi
c001fb9e:	53                   	push   ebx
c001fb9f:	e8 db fa ff ff       	call   c001f67f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001fba4:	83 c4 10             	add    esp,0x10
c001fba7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fbaa:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fbae:	74 05                	je     c001fbb5 <Vm::faultHandler(regs*)+0x50b>
c001fbb0:	83 e8 02             	sub    eax,0x2
c001fbb3:	eb 03                	jmp    c001fbb8 <Vm::faultHandler(regs*)+0x50e>
c001fbb5:	83 c0 02             	add    eax,0x2
c001fbb8:	25 ff ff 00 00       	and    eax,0xffff
c001fbbd:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001fbc0:	e9 b1 02 00 00       	jmp    c001fe76 <Vm::faultHandler(regs*)+0x7cc>
c001fbc5:	83 ec 0c             	sub    esp,0xc
c001fbc8:	4b                   	dec    ebx
c001fbc9:	68 97 d3 02 c0       	push   0xc002d397
c001fbce:	e8 bc 32 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001fbd3:	83 c4 10             	add    esp,0x10
c001fbd6:	80 fb 05             	cmp    bl,0x5
c001fbd9:	77 0a                	ja     c001fbe5 <Vm::faultHandler(regs*)+0x53b>
c001fbdb:	0f b6 db             	movzx  ebx,bl
c001fbde:	ff 24 9d 08 d4 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2bf8]
c001fbe5:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fbe9:	eb 1b                	jmp    c001fc06 <Vm::faultHandler(regs*)+0x55c>
c001fbeb:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fbef:	eb 15                	jmp    c001fc06 <Vm::faultHandler(regs*)+0x55c>
c001fbf1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fbf5:	eb 0f                	jmp    c001fc06 <Vm::faultHandler(regs*)+0x55c>
c001fbf7:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fbfb:	eb 09                	jmp    c001fc06 <Vm::faultHandler(regs*)+0x55c>
c001fbfd:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fc00:	eb 04                	jmp    c001fc06 <Vm::faultHandler(regs*)+0x55c>
c001fc02:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fc06:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fc0b:	74 0d                	je     c001fc1a <Vm::faultHandler(regs*)+0x570>
c001fc0d:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001fc14:	0f 87 8b 00 00 00    	ja     c001fca5 <Vm::faultHandler(regs*)+0x5fb>
c001fc1a:	53                   	push   ebx
c001fc1b:	53                   	push   ebx
c001fc1c:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001fc20:	52                   	push   edx
c001fc21:	50                   	push   eax
c001fc22:	e8 0f fa ff ff       	call   c001f636 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001fc27:	5e                   	pop    esi
c001fc28:	0f b6 c0             	movzx  eax,al
c001fc2b:	5d                   	pop    ebp
c001fc2c:	50                   	push   eax
c001fc2d:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fc31:	50                   	push   eax
c001fc32:	e8 5b f6 ff ff       	call   c001f292 <Vm::outbv(unsigned short, unsigned char)>
c001fc37:	83 c4 10             	add    esp,0x10
c001fc3a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001fc3d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fc41:	74 03                	je     c001fc46 <Vm::faultHandler(regs*)+0x59c>
c001fc43:	48                   	dec    eax
c001fc44:	eb 01                	jmp    c001fc47 <Vm::faultHandler(regs*)+0x59d>
c001fc46:	40                   	inc    eax
c001fc47:	0f b7 c0             	movzx  eax,ax
c001fc4a:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001fc4d:	e9 24 02 00 00       	jmp    c001fe76 <Vm::faultHandler(regs*)+0x7cc>
c001fc52:	83 ec 0c             	sub    esp,0xc
c001fc55:	4b                   	dec    ebx
c001fc56:	68 97 d3 02 c0       	push   0xc002d397
c001fc5b:	e8 2f 32 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001fc60:	83 c4 10             	add    esp,0x10
c001fc63:	80 fb 05             	cmp    bl,0x5
c001fc66:	77 0a                	ja     c001fc72 <Vm::faultHandler(regs*)+0x5c8>
c001fc68:	0f b6 db             	movzx  ebx,bl
c001fc6b:	ff 24 9d 20 d4 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2be0]
c001fc72:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fc76:	eb 1b                	jmp    c001fc93 <Vm::faultHandler(regs*)+0x5e9>
c001fc78:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fc7c:	eb 15                	jmp    c001fc93 <Vm::faultHandler(regs*)+0x5e9>
c001fc7e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fc82:	eb 0f                	jmp    c001fc93 <Vm::faultHandler(regs*)+0x5e9>
c001fc84:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fc88:	eb 09                	jmp    c001fc93 <Vm::faultHandler(regs*)+0x5e9>
c001fc8a:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fc8d:	eb 04                	jmp    c001fc93 <Vm::faultHandler(regs*)+0x5e9>
c001fc8f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fc93:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fc96:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fc9b:	74 39                	je     c001fcd6 <Vm::faultHandler(regs*)+0x62c>
c001fc9d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fca3:	76 31                	jbe    c001fcd6 <Vm::faultHandler(regs*)+0x62c>
c001fca5:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fca9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fcad:	51                   	push   ecx
c001fcae:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fcb2:	51                   	push   ecx
c001fcb3:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fcb7:	51                   	push   ecx
c001fcb8:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fcbc:	51                   	push   ecx
c001fcbd:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fcc1:	52                   	push   edx
c001fcc2:	50                   	push   eax
c001fcc3:	50                   	push   eax
c001fcc4:	68 64 d3 02 c0       	push   0xc002d364
c001fcc9:	e8 c1 31 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001fcce:	83 c4 20             	add    esp,0x20
c001fcd1:	e9 fb 01 00 00       	jmp    c001fed1 <Vm::faultHandler(regs*)+0x827>
c001fcd6:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fcd9:	0f b7 d3             	movzx  edx,bx
c001fcdc:	81 e6 00 04 00 00    	and    esi,0x400
c001fce2:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fce5:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fcea:	74 1d                	je     c001fd09 <Vm::faultHandler(regs*)+0x65f>
c001fcec:	51                   	push   ecx
c001fced:	51                   	push   ecx
c001fcee:	52                   	push   edx
c001fcef:	50                   	push   eax
c001fcf0:	e8 64 f9 ff ff       	call   c001f659 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fcf5:	83 c4 10             	add    esp,0x10
c001fcf8:	89 ea                	mov    edx,ebp
c001fcfa:	ef                   	out    dx,eax
c001fcfb:	85 f6                	test   esi,esi
c001fcfd:	74 05                	je     c001fd04 <Vm::faultHandler(regs*)+0x65a>
c001fcff:	83 eb 04             	sub    ebx,0x4
c001fd02:	eb 21                	jmp    c001fd25 <Vm::faultHandler(regs*)+0x67b>
c001fd04:	83 c3 04             	add    ebx,0x4
c001fd07:	eb 1c                	jmp    c001fd25 <Vm::faultHandler(regs*)+0x67b>
c001fd09:	51                   	push   ecx
c001fd0a:	51                   	push   ecx
c001fd0b:	52                   	push   edx
c001fd0c:	50                   	push   eax
c001fd0d:	e8 35 f9 ff ff       	call   c001f647 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fd12:	83 c4 10             	add    esp,0x10
c001fd15:	89 ea                	mov    edx,ebp
c001fd17:	66 ef                	out    dx,ax
c001fd19:	85 f6                	test   esi,esi
c001fd1b:	74 05                	je     c001fd22 <Vm::faultHandler(regs*)+0x678>
c001fd1d:	83 eb 02             	sub    ebx,0x2
c001fd20:	eb 03                	jmp    c001fd25 <Vm::faultHandler(regs*)+0x67b>
c001fd22:	83 c3 02             	add    ebx,0x2
c001fd25:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fd2b:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fd2e:	e9 43 01 00 00       	jmp    c001fe76 <Vm::faultHandler(regs*)+0x7cc>
c001fd33:	53                   	push   ebx
c001fd34:	53                   	push   ebx
c001fd35:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd39:	50                   	push   eax
c001fd3a:	68 9d d3 02 c0       	push   0xc002d39d
c001fd3f:	e8 4b 31 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001fd44:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fd4b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd4f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd52:	e8 28 f5 ff ff       	call   c001f27f <Vm::inbv(unsigned short)>
c001fd57:	0f b6 c0             	movzx  eax,al
c001fd5a:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fd5d:	eb 5e                	jmp    c001fdbd <Vm::faultHandler(regs*)+0x713>
c001fd5f:	51                   	push   ecx
c001fd60:	51                   	push   ecx
c001fd61:	53                   	push   ebx
c001fd62:	68 a3 d3 02 c0       	push   0xc002d3a3
c001fd67:	e8 23 31 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001fd6c:	83 c4 10             	add    esp,0x10
c001fd6f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd74:	74 07                	je     c001fd7d <Vm::faultHandler(regs*)+0x6d3>
c001fd76:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd7a:	ed                   	in     eax,dx
c001fd7b:	eb 14                	jmp    c001fd91 <Vm::faultHandler(regs*)+0x6e7>
c001fd7d:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fd80:	66 31 db             	xor    bx,bx
c001fd83:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fd86:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd8a:	66 ed                	in     ax,dx
c001fd8c:	0f b7 c0             	movzx  eax,ax
c001fd8f:	09 d8                	or     eax,ebx
c001fd91:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fd94:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fd98:	e9 dc 00 00 00       	jmp    c001fe79 <Vm::faultHandler(regs*)+0x7cf>
c001fd9d:	50                   	push   eax
c001fd9e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fda1:	53                   	push   ebx
c001fda2:	68 a9 d3 02 c0       	push   0xc002d3a9
c001fda7:	e8 e3 30 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001fdac:	58                   	pop    eax
c001fdad:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fdb1:	5a                   	pop    edx
c001fdb2:	50                   	push   eax
c001fdb3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdb7:	50                   	push   eax
c001fdb8:	e8 d5 f4 ff ff       	call   c001f292 <Vm::outbv(unsigned short, unsigned char)>
c001fdbd:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fdc1:	e9 85 00 00 00       	jmp    c001fe4b <Vm::faultHandler(regs*)+0x7a1>
c001fdc6:	50                   	push   eax
c001fdc7:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fdca:	53                   	push   ebx
c001fdcb:	68 b2 d3 02 c0       	push   0xc002d3b2
c001fdd0:	e8 ba 30 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001fdd5:	83 c4 10             	add    esp,0x10
c001fdd8:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fddc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fde1:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fde4:	74 03                	je     c001fde9 <Vm::faultHandler(regs*)+0x73f>
c001fde6:	ef                   	out    dx,eax
c001fde7:	eb ab                	jmp    c001fd94 <Vm::faultHandler(regs*)+0x6ea>
c001fde9:	66 ef                	out    dx,ax
c001fdeb:	eb a7                	jmp    c001fd94 <Vm::faultHandler(regs*)+0x6ea>
c001fded:	55                   	push   ebp
c001fdee:	55                   	push   ebp
c001fdef:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fdf2:	68 bb d3 02 c0       	push   0xc002d3bb
c001fdf7:	e8 93 30 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001fdfc:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fe03:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fe07:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe0a:	e8 70 f4 ff ff       	call   c001f27f <Vm::inbv(unsigned short)>
c001fe0f:	0f b6 c0             	movzx  eax,al
c001fe12:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fe15:	eb 31                	jmp    c001fe48 <Vm::faultHandler(regs*)+0x79e>
c001fe17:	56                   	push   esi
c001fe18:	56                   	push   esi
c001fe19:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fe1c:	68 c1 d3 02 c0       	push   0xc002d3c1
c001fe21:	e8 69 30 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001fe26:	83 c4 10             	add    esp,0x10
c001fe29:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fe2c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fe31:	74 03                	je     c001fe36 <Vm::faultHandler(regs*)+0x78c>
c001fe33:	ed                   	in     eax,dx
c001fe34:	eb 0d                	jmp    c001fe43 <Vm::faultHandler(regs*)+0x799>
c001fe36:	66 ed                	in     ax,dx
c001fe38:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fe3b:	0f b7 c0             	movzx  eax,ax
c001fe3e:	66 31 d2             	xor    dx,dx
c001fe41:	09 d0                	or     eax,edx
c001fe43:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fe46:	eb 2e                	jmp    c001fe76 <Vm::faultHandler(regs*)+0x7cc>
c001fe48:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fe4b:	83 c4 10             	add    esp,0x10
c001fe4e:	eb 29                	jmp    c001fe79 <Vm::faultHandler(regs*)+0x7cf>
c001fe50:	50                   	push   eax
c001fe51:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fe54:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fe57:	68 d0 d3 02 c0       	push   0xc002d3d0
c001fe5c:	e8 2e 30 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001fe61:	83 c4 10             	add    esp,0x10
c001fe64:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fe67:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fe6c:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fe6f:	74 03                	je     c001fe74 <Vm::faultHandler(regs*)+0x7ca>
c001fe71:	ef                   	out    dx,eax
c001fe72:	eb 02                	jmp    c001fe76 <Vm::faultHandler(regs*)+0x7cc>
c001fe74:	66 ef                	out    dx,ax
c001fe76:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fe79:	b0 01                	mov    al,0x1
c001fe7b:	eb 56                	jmp    c001fed3 <Vm::faultHandler(regs*)+0x829>
c001fe7d:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fe81:	51                   	push   ecx
c001fe82:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fe86:	51                   	push   ecx
c001fe87:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fe8b:	51                   	push   ecx
c001fe8c:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fe90:	51                   	push   ecx
c001fe91:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fe95:	52                   	push   edx
c001fe96:	50                   	push   eax
c001fe97:	50                   	push   eax
c001fe98:	68 d9 d3 02 c0       	push   0xc002d3d9
c001fe9d:	e8 ed 2f ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c001fea2:	83 c4 20             	add    esp,0x20
c001fea5:	83 ec 0c             	sub    esp,0xc
c001fea8:	6a 60                	push   0x60
c001feaa:	e8 d0 f3 ff ff       	call   c001f27f <Vm::inbv(unsigned short)>
c001feaf:	83 c4 10             	add    esp,0x10
c001feb2:	3c 1c                	cmp    al,0x1c
c001feb4:	74 04                	je     c001feba <Vm::faultHandler(regs*)+0x810>
c001feb6:	3c 5a                	cmp    al,0x5a
c001feb8:	75 eb                	jne    c001fea5 <Vm::faultHandler(regs*)+0x7fb>
c001feba:	3c 1c                	cmp    al,0x1c
c001febc:	74 04                	je     c001fec2 <Vm::faultHandler(regs*)+0x818>
c001febe:	3c 5a                	cmp    al,0x5a
c001fec0:	75 0f                	jne    c001fed1 <Vm::faultHandler(regs*)+0x827>
c001fec2:	83 ec 0c             	sub    esp,0xc
c001fec5:	6a 60                	push   0x60
c001fec7:	e8 b3 f3 ff ff       	call   c001f27f <Vm::inbv(unsigned short)>
c001fecc:	83 c4 10             	add    esp,0x10
c001fecf:	eb e9                	jmp    c001feba <Vm::faultHandler(regs*)+0x810>
c001fed1:	31 c0                	xor    eax,eax
c001fed3:	83 c4 1c             	add    esp,0x1c
c001fed6:	5b                   	pop    ebx
c001fed7:	5e                   	pop    esi
c001fed8:	5f                   	pop    edi
c001fed9:	5d                   	pop    ebp
c001feda:	c3                   	ret    

c001fedb <Vm::fpuInternalTo32(unsigned long long)>:
c001fedb:	57                   	push   edi
c001fedc:	56                   	push   esi
c001fedd:	53                   	push   ebx
c001fede:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee6:	89 d6                	mov    esi,edx
c001fee8:	89 d7                	mov    edi,edx
c001feea:	89 c1                	mov    ecx,eax
c001feec:	c1 ef 14             	shr    edi,0x14
c001feef:	89 d3                	mov    ebx,edx
c001fef1:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fef7:	31 d2                	xor    edx,edx
c001fef9:	89 f8                	mov    eax,edi
c001fefb:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ff01:	bf ff 00 00 00       	mov    edi,0xff
c001ff06:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ff0b:	83 d2 ff             	adc    edx,0xffffffff
c001ff0e:	39 c7                	cmp    edi,eax
c001ff10:	bf 00 00 00 00       	mov    edi,0x0
c001ff15:	19 d7                	sbb    edi,edx
c001ff17:	72 15                	jb     c001ff2e <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ff19:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ff1d:	c1 e0 17             	shl    eax,0x17
c001ff20:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ff26:	09 f1                	or     ecx,esi
c001ff28:	09 c1                	or     ecx,eax
c001ff2a:	89 cf                	mov    edi,ecx
c001ff2c:	eb 02                	jmp    c001ff30 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ff2e:	31 ff                	xor    edi,edi
c001ff30:	89 f8                	mov    eax,edi
c001ff32:	5b                   	pop    ebx
c001ff33:	5e                   	pop    esi
c001ff34:	5f                   	pop    edi
c001ff35:	c3                   	ret    

c001ff36 <Vm::fpuInternalTo64(unsigned long long)>:
c001ff36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff3e:	c3                   	ret    

c001ff3f <Vm::fpu32ToInternal(unsigned int)>:
c001ff3f:	57                   	push   edi
c001ff40:	31 ff                	xor    edi,edi
c001ff42:	56                   	push   esi
c001ff43:	53                   	push   ebx
c001ff44:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ff48:	89 cb                	mov    ebx,ecx
c001ff4a:	89 ce                	mov    esi,ecx
c001ff4c:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ff52:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ff58:	c1 e9 17             	shr    ecx,0x17
c001ff5b:	89 f0                	mov    eax,esi
c001ff5d:	0f b6 d1             	movzx  edx,cl
c001ff60:	81 c2 80 03 00 00    	add    edx,0x380
c001ff66:	89 d1                	mov    ecx,edx
c001ff68:	89 fa                	mov    edx,edi
c001ff6a:	c1 e1 14             	shl    ecx,0x14
c001ff6d:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ff71:	c1 e0 1d             	shl    eax,0x1d
c001ff74:	89 d7                	mov    edi,edx
c001ff76:	89 c6                	mov    esi,eax
c001ff78:	89 ca                	mov    edx,ecx
c001ff7a:	89 f0                	mov    eax,esi
c001ff7c:	09 fa                	or     edx,edi
c001ff7e:	09 da                	or     edx,ebx
c001ff80:	5b                   	pop    ebx
c001ff81:	5e                   	pop    esi
c001ff82:	5f                   	pop    edi
c001ff83:	c3                   	ret    

c001ff84 <Vm::fpu64ToInternal(unsigned long long)>:
c001ff84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff8c:	c3                   	ret    

c001ff8d <Vm::fpuFloatToLong(unsigned long long)>:
c001ff8d:	57                   	push   edi
c001ff8e:	31 c0                	xor    eax,eax
c001ff90:	56                   	push   esi
c001ff91:	31 d2                	xor    edx,edx
c001ff93:	53                   	push   ebx
c001ff94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff98:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ff9c:	89 d9                	mov    ecx,ebx
c001ff9e:	c1 e9 14             	shr    ecx,0x14
c001ffa1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ffa7:	89 cf                	mov    edi,ecx
c001ffa9:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ffaf:	78 33                	js     c001ffe4 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ffb1:	89 d9                	mov    ecx,ebx
c001ffb3:	89 f0                	mov    eax,esi
c001ffb5:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ffbb:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ffc1:	89 ca                	mov    edx,ecx
c001ffc3:	b9 34 00 00 00       	mov    ecx,0x34
c001ffc8:	29 f9                	sub    ecx,edi
c001ffca:	0f ad d0             	shrd   eax,edx,cl
c001ffcd:	d3 fa                	sar    edx,cl
c001ffcf:	f6 c1 20             	test   cl,0x20
c001ffd2:	74 05                	je     c001ffd9 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ffd4:	89 d0                	mov    eax,edx
c001ffd6:	c1 fa 1f             	sar    edx,0x1f
c001ffd9:	85 db                	test   ebx,ebx
c001ffdb:	79 07                	jns    c001ffe4 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ffdd:	f7 d8                	neg    eax
c001ffdf:	83 d2 00             	adc    edx,0x0
c001ffe2:	f7 da                	neg    edx
c001ffe4:	5b                   	pop    ebx
c001ffe5:	5e                   	pop    esi
c001ffe6:	5f                   	pop    edi
c001ffe7:	c3                   	ret    

c001ffe8 <Vm::fpuULongToFloat(unsigned long long)>:
c001ffe8:	57                   	push   edi
c001ffe9:	31 c9                	xor    ecx,ecx
c001ffeb:	56                   	push   esi
c001ffec:	53                   	push   ebx
c001ffed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fff1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fff5:	0f ba e7 14          	bt     edi,0x14
c001fff9:	72 07                	jb     c0020002 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fffb:	01 f6                	add    esi,esi
c001fffd:	11 ff                	adc    edi,edi
c001ffff:	41                   	inc    ecx
c0020000:	eb f3                	jmp    c001fff5 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c0020002:	89 fa                	mov    edx,edi
c0020004:	89 f0                	mov    eax,esi
c0020006:	bb 33 04 00 00       	mov    ebx,0x433
c002000b:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0020011:	29 cb                	sub    ebx,ecx
c0020013:	89 d9                	mov    ecx,ebx
c0020015:	5b                   	pop    ebx
c0020016:	c1 e1 14             	shl    ecx,0x14
c0020019:	5e                   	pop    esi
c002001a:	09 ca                	or     edx,ecx
c002001c:	5f                   	pop    edi
c002001d:	c3                   	ret    

c002001e <Vm::fpuLongToFloat(long long)>:
c002001e:	56                   	push   esi
c002001f:	31 c0                	xor    eax,eax
c0020021:	53                   	push   ebx
c0020022:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020026:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002002a:	39 c8                	cmp    eax,ecx
c002002c:	19 d8                	sbb    eax,ebx
c002002e:	7d 04                	jge    c0020034 <Vm::fpuLongToFloat(long long)+0x16>
c0020030:	31 f6                	xor    esi,esi
c0020032:	eb 0c                	jmp    c0020040 <Vm::fpuLongToFloat(long long)+0x22>
c0020034:	f7 d9                	neg    ecx
c0020036:	be 01 00 00 00       	mov    esi,0x1
c002003b:	83 d3 00             	adc    ebx,0x0
c002003e:	f7 db                	neg    ebx
c0020040:	31 c0                	xor    eax,eax
c0020042:	0f ba e3 14          	bt     ebx,0x14
c0020046:	72 07                	jb     c002004f <Vm::fpuLongToFloat(long long)+0x31>
c0020048:	01 c9                	add    ecx,ecx
c002004a:	11 db                	adc    ebx,ebx
c002004c:	40                   	inc    eax
c002004d:	eb f3                	jmp    c0020042 <Vm::fpuLongToFloat(long long)+0x24>
c002004f:	ba 33 04 00 00       	mov    edx,0x433
c0020054:	29 c2                	sub    edx,eax
c0020056:	89 c8                	mov    eax,ecx
c0020058:	c1 e2 14             	shl    edx,0x14
c002005b:	89 d9                	mov    ecx,ebx
c002005d:	89 f3                	mov    ebx,esi
c002005f:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0020065:	09 ca                	or     edx,ecx
c0020067:	84 db                	test   bl,bl
c0020069:	74 06                	je     c0020071 <Vm::fpuLongToFloat(long long)+0x53>
c002006b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0020071:	5b                   	pop    ebx
c0020072:	5e                   	pop    esi
c0020073:	c3                   	ret    

c0020074 <Vm::fpuGet0()>:
c0020074:	31 c0                	xor    eax,eax
c0020076:	31 d2                	xor    edx,edx
c0020078:	c3                   	ret    

c0020079 <Vm::fpuGet1()>:
c0020079:	b8 01 00 00 00       	mov    eax,0x1
c002007e:	31 d2                	xor    edx,edx
c0020080:	c3                   	ret    

c0020081 <Vm::fpuGetPi()>:
c0020081:	b8 03 00 00 00       	mov    eax,0x3
c0020086:	31 d2                	xor    edx,edx
c0020088:	c3                   	ret    

c0020089 <Vm::fpuGetLog2E()>:
c0020089:	83 ec 18             	sub    esp,0x18
c002008c:	68 38 d4 02 c0       	push   0xc002d438
c0020091:	e8 61 a8 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0020096:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002009b:	31 d2                	xor    edx,edx
c002009d:	83 c4 1c             	add    esp,0x1c
c00200a0:	c3                   	ret    

c00200a1 <Vm::fpuGetLogE2()>:
c00200a1:	83 ec 18             	sub    esp,0x18
c00200a4:	68 44 d4 02 c0       	push   0xc002d444
c00200a9:	e8 49 a8 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00200ae:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00200b3:	31 d2                	xor    edx,edx
c00200b5:	83 c4 1c             	add    esp,0x1c
c00200b8:	c3                   	ret    

c00200b9 <Vm::fpuGetLog210()>:
c00200b9:	83 ec 18             	sub    esp,0x18
c00200bc:	68 50 d4 02 c0       	push   0xc002d450
c00200c1:	e8 31 a8 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00200c6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00200cb:	31 d2                	xor    edx,edx
c00200cd:	83 c4 1c             	add    esp,0x1c
c00200d0:	c3                   	ret    

c00200d1 <Vm::fpuGetLog102()>:
c00200d1:	83 ec 18             	sub    esp,0x18
c00200d4:	68 5d d4 02 c0       	push   0xc002d45d
c00200d9:	e8 19 a8 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00200de:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00200e3:	31 d2                	xor    edx,edx
c00200e5:	83 c4 1c             	add    esp,0x1c
c00200e8:	c3                   	ret    

c00200e9 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c00200e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00200ed:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00200f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200f5:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c00200f9:	0f 92 c0             	setb   al
c00200fc:	c3                   	ret    

c00200fd <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c00200fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020105:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0020109:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c002010d:	09 c2                	or     edx,eax
c002010f:	0f 94 c0             	sete   al
c0020112:	c3                   	ret    

c0020113 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0020113:	57                   	push   edi
c0020114:	56                   	push   esi
c0020115:	53                   	push   ebx
c0020116:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002011a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002011e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020122:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020126:	57                   	push   edi
c0020127:	56                   	push   esi
c0020128:	53                   	push   ebx
c0020129:	51                   	push   ecx
c002012a:	e8 ce ff ff ff       	call   c00200fd <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c002012f:	83 c4 10             	add    esp,0x10
c0020132:	88 c2                	mov    dl,al
c0020134:	31 c0                	xor    eax,eax
c0020136:	84 d2                	test   dl,dl
c0020138:	75 0c                	jne    c0020146 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c002013a:	57                   	push   edi
c002013b:	56                   	push   esi
c002013c:	53                   	push   ebx
c002013d:	51                   	push   ecx
c002013e:	e8 a6 ff ff ff       	call   c00200e9 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0020143:	83 c4 10             	add    esp,0x10
c0020146:	83 e0 01             	and    eax,0x1
c0020149:	5b                   	pop    ebx
c002014a:	88 c1                	mov    cl,al
c002014c:	83 e2 01             	and    edx,0x1
c002014f:	a0 e1 26 03 c0       	mov    al,ds:0xc00326e1
c0020154:	c1 e2 06             	shl    edx,0x6
c0020157:	83 e0 ba             	and    eax,0xffffffba
c002015a:	5e                   	pop    esi
c002015b:	09 c8                	or     eax,ecx
c002015d:	5f                   	pop    edi
c002015e:	09 d0                	or     eax,edx
c0020160:	a2 e1 26 03 c0       	mov    ds:0xc00326e1,al
c0020165:	c3                   	ret    

c0020166 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0020166:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002016a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002016e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0020172:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0020176:	c3                   	ret    

c0020177 <Vm::fpuAbs(unsigned long long)>:
c0020177:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002017b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002017f:	c3                   	ret    

c0020180 <Vm::fpuChs(unsigned long long)>:
c0020180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020184:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020188:	f7 d8                	neg    eax
c002018a:	83 d2 00             	adc    edx,0x0
c002018d:	f7 da                	neg    edx
c002018f:	c3                   	ret    

c0020190 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0020190:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0020194:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0020199:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c002019d:	eb c7                	jmp    c0020166 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c002019f <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c002019f:	53                   	push   ebx
c00201a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00201a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00201a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00201ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00201b0:	0f af ca             	imul   ecx,edx
c00201b3:	0f af d8             	imul   ebx,eax
c00201b6:	f7 e2                	mul    edx
c00201b8:	01 d9                	add    ecx,ebx
c00201ba:	5b                   	pop    ebx
c00201bb:	01 ca                	add    edx,ecx
c00201bd:	c3                   	ret    

c00201be <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c00201be:	83 ec 0c             	sub    esp,0xc
c00201c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d1:	e8 ae 72 00 00       	call   c0027484 <__udivdi3>
c00201d6:	83 c4 1c             	add    esp,0x1c
c00201d9:	c3                   	ret    

c00201da <Vm::fpuSquare(unsigned long long)>:
c00201da:	50                   	push   eax
c00201db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00201df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00201e3:	52                   	push   edx
c00201e4:	50                   	push   eax
c00201e5:	52                   	push   edx
c00201e6:	50                   	push   eax
c00201e7:	e8 b3 ff ff ff       	call   c002019f <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00201ec:	83 c4 14             	add    esp,0x14
c00201ef:	c3                   	ret    

c00201f0 <Vm::fpuGetReg(int)>:
c00201f0:	83 ec 0c             	sub    esp,0xc
c00201f3:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00201f8:	76 10                	jbe    c002020a <Vm::fpuGetReg(int)+0x1a>
c00201fa:	83 ec 0c             	sub    esp,0xc
c00201fd:	68 6a d4 02 c0       	push   0xc002d46a
c0020202:	e8 f0 a6 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0020207:	83 c4 10             	add    esp,0x10
c002020a:	a0 e1 26 03 c0       	mov    al,ds:0xc00326e1
c002020f:	b9 08 00 00 00       	mov    ecx,0x8
c0020214:	c0 e8 03             	shr    al,0x3
c0020217:	83 e0 07             	and    eax,0x7
c002021a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002021e:	99                   	cdq    
c002021f:	f7 f9                	idiv   ecx
c0020221:	8b 04 d5 e4 26 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd91c]
c0020228:	8b 14 d5 e8 26 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd918]
c002022f:	83 c4 0c             	add    esp,0xc
c0020232:	c3                   	ret    

c0020233 <Vm::fpuSetReg(int, unsigned long long)>:
c0020233:	57                   	push   edi
c0020234:	56                   	push   esi
c0020235:	52                   	push   edx
c0020236:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002023a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002023e:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0020243:	76 10                	jbe    c0020255 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c0020245:	83 ec 0c             	sub    esp,0xc
c0020248:	68 7d d4 02 c0       	push   0xc002d47d
c002024d:	e8 a5 a6 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0020252:	83 c4 10             	add    esp,0x10
c0020255:	a0 e1 26 03 c0       	mov    al,ds:0xc00326e1
c002025a:	b9 08 00 00 00       	mov    ecx,0x8
c002025f:	c0 e8 03             	shr    al,0x3
c0020262:	83 e0 07             	and    eax,0x7
c0020265:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020269:	99                   	cdq    
c002026a:	f7 f9                	idiv   ecx
c002026c:	89 34 d5 e4 26 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd91c],esi
c0020273:	89 3c d5 e8 26 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd918],edi
c002027a:	58                   	pop    eax
c002027b:	5e                   	pop    esi
c002027c:	5f                   	pop    edi
c002027d:	c3                   	ret    

c002027e <Vm::fpuPush(unsigned long long)>:
c002027e:	a0 e1 26 03 c0       	mov    al,ds:0xc00326e1
c0020283:	c0 e8 03             	shr    al,0x3
c0020286:	83 e0 07             	and    eax,0x7
c0020289:	83 c0 07             	add    eax,0x7
c002028c:	88 c2                	mov    dl,al
c002028e:	83 e0 07             	and    eax,0x7
c0020291:	83 e2 07             	and    edx,0x7
c0020294:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c002029b:	8a 15 e1 26 03 c0    	mov    dl,BYTE PTR ds:0xc00326e1
c00202a1:	83 e2 c7             	and    edx,0xffffffc7
c00202a4:	09 ca                	or     edx,ecx
c00202a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00202aa:	88 15 e1 26 03 c0    	mov    BYTE PTR ds:0xc00326e1,dl
c00202b0:	89 0c c5 e8 26 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd918],ecx
c00202b7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00202bb:	89 14 c5 e4 26 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd91c],edx
c00202c2:	a1 24 27 03 c0       	mov    eax,ds:0xc0032724
c00202c7:	83 f8 08             	cmp    eax,0x8
c00202ca:	75 08                	jne    c00202d4 <Vm::fpuPush(unsigned long long)+0x56>
c00202cc:	80 0d e0 26 03 c0 40 	or     BYTE PTR ds:0xc00326e0,0x40
c00202d3:	c3                   	ret    
c00202d4:	40                   	inc    eax
c00202d5:	a3 24 27 03 c0       	mov    ds:0xc0032724,eax
c00202da:	c3                   	ret    

c00202db <Vm::fpuPop()>:
c00202db:	8a 0d e1 26 03 c0    	mov    cl,BYTE PTR ds:0xc00326e1
c00202e1:	53                   	push   ebx
c00202e2:	c0 e9 03             	shr    cl,0x3
c00202e5:	8a 1d e1 26 03 c0    	mov    bl,BYTE PTR ds:0xc00326e1
c00202eb:	83 e1 07             	and    ecx,0x7
c00202ee:	83 e3 c7             	and    ebx,0xffffffc7
c00202f1:	8b 04 cd e4 26 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd91c]
c00202f8:	8b 14 cd e8 26 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd918]
c00202ff:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0020306:	83 e1 38             	and    ecx,0x38
c0020309:	09 d9                	or     ecx,ebx
c002030b:	88 0d e1 26 03 c0    	mov    BYTE PTR ds:0xc00326e1,cl
c0020311:	8b 0d 24 27 03 c0    	mov    ecx,DWORD PTR ds:0xc0032724
c0020317:	85 c9                	test   ecx,ecx
c0020319:	74 09                	je     c0020324 <Vm::fpuPop()+0x49>
c002031b:	49                   	dec    ecx
c002031c:	89 0d 24 27 03 c0    	mov    DWORD PTR ds:0xc0032724,ecx
c0020322:	eb 07                	jmp    c002032b <Vm::fpuPop()+0x50>
c0020324:	80 0d e0 26 03 c0 40 	or     BYTE PTR ds:0xc00326e0,0x40
c002032b:	5b                   	pop    ebx
c002032c:	c3                   	ret    

c002032d <Vm::x87Handler(regs*)>:
c002032d:	55                   	push   ebp
c002032e:	57                   	push   edi
c002032f:	56                   	push   esi
c0020330:	53                   	push   ebx
c0020331:	83 ec 1c             	sub    esp,0x1c
c0020334:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020338:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c002033d:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0020340:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0020348:	8d 44 24 0b          	lea    eax,[esp+0xb]
c002034c:	50                   	push   eax
c002034d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0020351:	50                   	push   eax
c0020352:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020356:	50                   	push   eax
c0020357:	53                   	push   ebx
c0020358:	e8 2f 9c ff ff       	call   c0019f8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c002035d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0020360:	83 c4 10             	add    esp,0x10
c0020363:	89 c6                	mov    esi,eax
c0020365:	80 fa d9             	cmp    dl,0xd9
c0020368:	0f 85 52 01 00 00    	jne    c00204c0 <Vm::x87Handler(regs*)+0x193>
c002036e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020372:	8d 50 20             	lea    edx,[eax+0x20]
c0020375:	80 fa 0e             	cmp    dl,0xe
c0020378:	0f 87 86 00 00 00    	ja     c0020404 <Vm::x87Handler(regs*)+0xd7>
c002037e:	0f b6 d2             	movzx  edx,dl
c0020381:	ff 24 95 90 d4 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2b70]
c0020388:	e8 e7 fc ff ff       	call   c0020074 <Vm::fpuGet0()>
c002038d:	eb 05                	jmp    c0020394 <Vm::x87Handler(regs*)+0x67>
c002038f:	e8 e5 fc ff ff       	call   c0020079 <Vm::fpuGet1()>
c0020394:	57                   	push   edi
c0020395:	57                   	push   edi
c0020396:	52                   	push   edx
c0020397:	50                   	push   eax
c0020398:	e8 e1 fe ff ff       	call   c002027e <Vm::fpuPush(unsigned long long)>
c002039d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00203a1:	83 c4 10             	add    esp,0x10
c00203a4:	b0 01                	mov    al,0x1
c00203a6:	e9 e3 09 00 00       	jmp    c0020d8e <Vm::x87Handler(regs*)+0xa61>
c00203ab:	83 ec 0c             	sub    esp,0xc
c00203ae:	6a 00                	push   0x0
c00203b0:	e8 3b fe ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00203b5:	59                   	pop    ecx
c00203b6:	5e                   	pop    esi
c00203b7:	52                   	push   edx
c00203b8:	50                   	push   eax
c00203b9:	e8 c2 fd ff ff       	call   c0020180 <Vm::fpuChs(unsigned long long)>
c00203be:	eb 13                	jmp    c00203d3 <Vm::x87Handler(regs*)+0xa6>
c00203c0:	83 ec 0c             	sub    esp,0xc
c00203c3:	6a 00                	push   0x0
c00203c5:	e8 26 fe ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00203ca:	5f                   	pop    edi
c00203cb:	5d                   	pop    ebp
c00203cc:	52                   	push   edx
c00203cd:	50                   	push   eax
c00203ce:	e8 a4 fd ff ff       	call   c0020177 <Vm::fpuAbs(unsigned long long)>
c00203d3:	83 c4 0c             	add    esp,0xc
c00203d6:	52                   	push   edx
c00203d7:	50                   	push   eax
c00203d8:	6a 00                	push   0x0
c00203da:	e8 54 fe ff ff       	call   c0020233 <Vm::fpuSetReg(int, unsigned long long)>
c00203df:	eb bc                	jmp    c002039d <Vm::x87Handler(regs*)+0x70>
c00203e1:	e8 d3 fc ff ff       	call   c00200b9 <Vm::fpuGetLog210()>
c00203e6:	eb ac                	jmp    c0020394 <Vm::x87Handler(regs*)+0x67>
c00203e8:	e8 9c fc ff ff       	call   c0020089 <Vm::fpuGetLog2E()>
c00203ed:	eb a5                	jmp    c0020394 <Vm::x87Handler(regs*)+0x67>
c00203ef:	e8 8d fc ff ff       	call   c0020081 <Vm::fpuGetPi()>
c00203f4:	eb 9e                	jmp    c0020394 <Vm::x87Handler(regs*)+0x67>
c00203f6:	e8 d6 fc ff ff       	call   c00200d1 <Vm::fpuGetLog102()>
c00203fb:	eb 97                	jmp    c0020394 <Vm::x87Handler(regs*)+0x67>
c00203fd:	e8 9f fc ff ff       	call   c00200a1 <Vm::fpuGetLogE2()>
c0020402:	eb 90                	jmp    c0020394 <Vm::x87Handler(regs*)+0x67>
c0020404:	8d 50 40             	lea    edx,[eax+0x40]
c0020407:	80 fa 07             	cmp    dl,0x7
c002040a:	77 15                	ja     c0020421 <Vm::x87Handler(regs*)+0xf4>
c002040c:	83 ec 0c             	sub    esp,0xc
c002040f:	2d c0 00 00 00       	sub    eax,0xc0
c0020414:	50                   	push   eax
c0020415:	e8 d6 fd ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c002041a:	59                   	pop    ecx
c002041b:	5e                   	pop    esi
c002041c:	e9 75 ff ff ff       	jmp    c0020396 <Vm::x87Handler(regs*)+0x69>
c0020421:	8d 50 38             	lea    edx,[eax+0x38]
c0020424:	80 fa 07             	cmp    dl,0x7
c0020427:	77 3c                	ja     c0020465 <Vm::x87Handler(regs*)+0x138>
c0020429:	83 ec 0c             	sub    esp,0xc
c002042c:	2d c8 00 00 00       	sub    eax,0xc8
c0020431:	50                   	push   eax
c0020432:	e8 b9 fd ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020437:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002043e:	89 c6                	mov    esi,eax
c0020440:	89 d7                	mov    edi,edx
c0020442:	e8 a9 fd ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020447:	83 c4 0c             	add    esp,0xc
c002044a:	52                   	push   edx
c002044b:	50                   	push   eax
c002044c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020450:	2d c8 00 00 00       	sub    eax,0xc8
c0020455:	50                   	push   eax
c0020456:	e8 d8 fd ff ff       	call   c0020233 <Vm::fpuSetReg(int, unsigned long long)>
c002045b:	83 c4 0c             	add    esp,0xc
c002045e:	57                   	push   edi
c002045f:	56                   	push   esi
c0020460:	e9 73 ff ff ff       	jmp    c00203d8 <Vm::x87Handler(regs*)+0xab>
c0020465:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020469:	84 d2                	test   dl,dl
c002046b:	75 0f                	jne    c002047c <Vm::x87Handler(regs*)+0x14f>
c002046d:	83 ec 0c             	sub    esp,0xc
c0020470:	ff 36                	push   DWORD PTR [esi]
c0020472:	e8 c8 fa ff ff       	call   c001ff3f <Vm::fpu32ToInternal(unsigned int)>
c0020477:	e9 bf 00 00 00       	jmp    c002053b <Vm::x87Handler(regs*)+0x20e>
c002047c:	80 fa 03             	cmp    dl,0x3
c002047f:	75 13                	jne    c0020494 <Vm::x87Handler(regs*)+0x167>
c0020481:	e8 55 fe ff ff       	call   c00202db <Vm::fpuPop()>
c0020486:	55                   	push   ebp
c0020487:	55                   	push   ebp
c0020488:	52                   	push   edx
c0020489:	50                   	push   eax
c002048a:	e8 4c fa ff ff       	call   c001fedb <Vm::fpuInternalTo32(unsigned long long)>
c002048f:	e9 88 00 00 00       	jmp    c002051c <Vm::x87Handler(regs*)+0x1ef>
c0020494:	80 fa 05             	cmp    dl,0x5
c0020497:	75 0e                	jne    c00204a7 <Vm::x87Handler(regs*)+0x17a>
c0020499:	66 8b 06             	mov    ax,WORD PTR [esi]
c002049c:	66 a3 e2 26 03 c0    	mov    ds:0xc00326e2,ax
c00204a2:	e9 df 00 00 00       	jmp    c0020586 <Vm::x87Handler(regs*)+0x259>
c00204a7:	31 c0                	xor    eax,eax
c00204a9:	80 fa 07             	cmp    dl,0x7
c00204ac:	0f 85 dc 08 00 00    	jne    c0020d8e <Vm::x87Handler(regs*)+0xa61>
c00204b2:	66 a1 e2 26 03 c0    	mov    ax,ds:0xc00326e2
c00204b8:	66 89 06             	mov    WORD PTR [esi],ax
c00204bb:	e9 c6 00 00 00       	jmp    c0020586 <Vm::x87Handler(regs*)+0x259>
c00204c0:	80 fa d8             	cmp    dl,0xd8
c00204c3:	0f 84 c9 00 00 00    	je     c0020592 <Vm::x87Handler(regs*)+0x265>
c00204c9:	80 fa dc             	cmp    dl,0xdc
c00204cc:	0f 84 0d 02 00 00    	je     c00206df <Vm::x87Handler(regs*)+0x3b2>
c00204d2:	80 fa de             	cmp    dl,0xde
c00204d5:	0f 84 cd 02 00 00    	je     c00207a8 <Vm::x87Handler(regs*)+0x47b>
c00204db:	80 fa dd             	cmp    dl,0xdd
c00204de:	0f 84 5f 04 00 00    	je     c0020943 <Vm::x87Handler(regs*)+0x616>
c00204e4:	80 fa da             	cmp    dl,0xda
c00204e7:	0f 84 24 05 00 00    	je     c0020a11 <Vm::x87Handler(regs*)+0x6e4>
c00204ed:	80 fa df             	cmp    dl,0xdf
c00204f0:	0f 84 68 05 00 00    	je     c0020a5e <Vm::x87Handler(regs*)+0x731>
c00204f6:	31 c0                	xor    eax,eax
c00204f8:	80 fa db             	cmp    dl,0xdb
c00204fb:	0f 85 8d 08 00 00    	jne    c0020d8e <Vm::x87Handler(regs*)+0xa61>
c0020501:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020505:	80 fa 03             	cmp    dl,0x3
c0020508:	0f 85 70 06 00 00    	jne    c0020b7e <Vm::x87Handler(regs*)+0x851>
c002050e:	e8 c8 fd ff ff       	call   c00202db <Vm::fpuPop()>
c0020513:	55                   	push   ebp
c0020514:	55                   	push   ebp
c0020515:	52                   	push   edx
c0020516:	50                   	push   eax
c0020517:	e8 71 fa ff ff       	call   c001ff8d <Vm::fpuFloatToLong(unsigned long long)>
c002051c:	83 c4 10             	add    esp,0x10
c002051f:	89 06                	mov    DWORD PTR [esi],eax
c0020521:	eb 63                	jmp    c0020586 <Vm::x87Handler(regs*)+0x259>
c0020523:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020527:	84 d2                	test   dl,dl
c0020529:	0f 85 e6 05 00 00    	jne    c0020b15 <Vm::x87Handler(regs*)+0x7e8>
c002052f:	57                   	push   edi
c0020530:	57                   	push   edi
c0020531:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020534:	ff 36                	push   DWORD PTR [esi]
c0020536:	e8 49 fa ff ff       	call   c001ff84 <Vm::fpu64ToInternal(unsigned long long)>
c002053b:	5e                   	pop    esi
c002053c:	5f                   	pop    edi
c002053d:	52                   	push   edx
c002053e:	50                   	push   eax
c002053f:	e8 3a fd ff ff       	call   c002027e <Vm::fpuPush(unsigned long long)>
c0020544:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020548:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002054b:	e9 51 fe ff ff       	jmp    c00203a1 <Vm::x87Handler(regs*)+0x74>
c0020550:	80 fa 03             	cmp    dl,0x3
c0020553:	0f 85 d7 06 00 00    	jne    c0020c30 <Vm::x87Handler(regs*)+0x903>
c0020559:	57                   	push   edi
c002055a:	57                   	push   edi
c002055b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002055e:	ff 36                	push   DWORD PTR [esi]
c0020560:	e8 1f fa ff ff       	call   c001ff84 <Vm::fpu64ToInternal(unsigned long long)>
c0020565:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002056c:	89 c6                	mov    esi,eax
c002056e:	89 d7                	mov    edi,edx
c0020570:	e8 7b fc ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020575:	57                   	push   edi
c0020576:	56                   	push   esi
c0020577:	52                   	push   edx
c0020578:	50                   	push   eax
c0020579:	e8 95 fb ff ff       	call   c0020113 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002057e:	83 c4 20             	add    esp,0x20
c0020581:	e8 55 fd ff ff       	call   c00202db <Vm::fpuPop()>
c0020586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002058a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002058d:	e9 12 fe ff ff       	jmp    c00203a4 <Vm::x87Handler(regs*)+0x77>
c0020592:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020596:	8d 50 40             	lea    edx,[eax+0x40]
c0020599:	80 fa 07             	cmp    dl,0x7
c002059c:	77 29                	ja     c00205c7 <Vm::x87Handler(regs*)+0x29a>
c002059e:	83 ec 0c             	sub    esp,0xc
c00205a1:	2d c0 00 00 00       	sub    eax,0xc0
c00205a6:	50                   	push   eax
c00205a7:	e8 44 fc ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00205ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205b3:	89 c6                	mov    esi,eax
c00205b5:	89 d7                	mov    edi,edx
c00205b7:	e8 34 fc ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00205bc:	57                   	push   edi
c00205bd:	56                   	push   esi
c00205be:	52                   	push   edx
c00205bf:	50                   	push   eax
c00205c0:	e8 a1 fb ff ff       	call   c0020166 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00205c5:	eb 2f                	jmp    c00205f6 <Vm::x87Handler(regs*)+0x2c9>
c00205c7:	8d 50 38             	lea    edx,[eax+0x38]
c00205ca:	80 fa 07             	cmp    dl,0x7
c00205cd:	77 2f                	ja     c00205fe <Vm::x87Handler(regs*)+0x2d1>
c00205cf:	83 ec 0c             	sub    esp,0xc
c00205d2:	2d c8 00 00 00       	sub    eax,0xc8
c00205d7:	50                   	push   eax
c00205d8:	e8 13 fc ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00205dd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205e4:	89 c6                	mov    esi,eax
c00205e6:	89 d7                	mov    edi,edx
c00205e8:	e8 03 fc ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00205ed:	57                   	push   edi
c00205ee:	56                   	push   esi
c00205ef:	52                   	push   edx
c00205f0:	50                   	push   eax
c00205f1:	e8 a9 fb ff ff       	call   c002019f <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00205f6:	83 c4 1c             	add    esp,0x1c
c00205f9:	e9 d8 fd ff ff       	jmp    c00203d6 <Vm::x87Handler(regs*)+0xa9>
c00205fe:	8d 50 30             	lea    edx,[eax+0x30]
c0020601:	80 fa 07             	cmp    dl,0x7
c0020604:	77 0d                	ja     c0020613 <Vm::x87Handler(regs*)+0x2e6>
c0020606:	83 ec 0c             	sub    esp,0xc
c0020609:	2d d0 00 00 00       	sub    eax,0xd0
c002060e:	e9 99 03 00 00       	jmp    c00209ac <Vm::x87Handler(regs*)+0x67f>
c0020613:	8d 50 28             	lea    edx,[eax+0x28]
c0020616:	80 fa 07             	cmp    dl,0x7
c0020619:	77 0d                	ja     c0020628 <Vm::x87Handler(regs*)+0x2fb>
c002061b:	83 ec 0c             	sub    esp,0xc
c002061e:	2d d8 00 00 00       	sub    eax,0xd8
c0020623:	e9 c0 03 00 00       	jmp    c00209e8 <Vm::x87Handler(regs*)+0x6bb>
c0020628:	8d 50 20             	lea    edx,[eax+0x20]
c002062b:	80 fa 07             	cmp    dl,0x7
c002062e:	77 1b                	ja     c002064b <Vm::x87Handler(regs*)+0x31e>
c0020630:	83 ec 0c             	sub    esp,0xc
c0020633:	2d e0 00 00 00       	sub    eax,0xe0
c0020638:	50                   	push   eax
c0020639:	e8 b2 fb ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c002063e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020645:	89 c6                	mov    esi,eax
c0020647:	89 d7                	mov    edi,edx
c0020649:	eb 22                	jmp    c002066d <Vm::x87Handler(regs*)+0x340>
c002064b:	8d 50 18             	lea    edx,[eax+0x18]
c002064e:	80 fa 07             	cmp    dl,0x7
c0020651:	77 2d                	ja     c0020680 <Vm::x87Handler(regs*)+0x353>
c0020653:	83 ec 0c             	sub    esp,0xc
c0020656:	6a 00                	push   0x0
c0020658:	e8 93 fb ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c002065d:	89 c6                	mov    esi,eax
c002065f:	89 d7                	mov    edi,edx
c0020661:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020665:	2d e8 00 00 00       	sub    eax,0xe8
c002066a:	89 04 24             	mov    DWORD PTR [esp],eax
c002066d:	e8 7e fb ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020672:	57                   	push   edi
c0020673:	56                   	push   esi
c0020674:	52                   	push   edx
c0020675:	50                   	push   eax
c0020676:	e8 15 fb ff ff       	call   c0020190 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002067b:	e9 76 ff ff ff       	jmp    c00205f6 <Vm::x87Handler(regs*)+0x2c9>
c0020680:	8d 50 10             	lea    edx,[eax+0x10]
c0020683:	80 fa 07             	cmp    dl,0x7
c0020686:	77 1b                	ja     c00206a3 <Vm::x87Handler(regs*)+0x376>
c0020688:	83 ec 0c             	sub    esp,0xc
c002068b:	2d f0 00 00 00       	sub    eax,0xf0
c0020690:	50                   	push   eax
c0020691:	e8 5a fb ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020696:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002069d:	89 c6                	mov    esi,eax
c002069f:	89 d7                	mov    edi,edx
c00206a1:	eb 22                	jmp    c00206c5 <Vm::x87Handler(regs*)+0x398>
c00206a3:	3c f7                	cmp    al,0xf7
c00206a5:	0f 86 d1 03 00 00    	jbe    c0020a7c <Vm::x87Handler(regs*)+0x74f>
c00206ab:	83 ec 0c             	sub    esp,0xc
c00206ae:	6a 00                	push   0x0
c00206b0:	e8 3b fb ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00206b5:	89 c6                	mov    esi,eax
c00206b7:	89 d7                	mov    edi,edx
c00206b9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206bd:	2d f8 00 00 00       	sub    eax,0xf8
c00206c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00206c5:	e8 26 fb ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00206ca:	57                   	push   edi
c00206cb:	56                   	push   esi
c00206cc:	52                   	push   edx
c00206cd:	50                   	push   eax
c00206ce:	e8 eb fa ff ff       	call   c00201be <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00206d3:	83 c4 1c             	add    esp,0x1c
c00206d6:	52                   	push   edx
c00206d7:	50                   	push   eax
c00206d8:	6a 00                	push   0x0
c00206da:	e9 51 02 00 00       	jmp    c0020930 <Vm::x87Handler(regs*)+0x603>
c00206df:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206e3:	8d 50 40             	lea    edx,[eax+0x40]
c00206e6:	80 fa 07             	cmp    dl,0x7
c00206e9:	77 37                	ja     c0020722 <Vm::x87Handler(regs*)+0x3f5>
c00206eb:	83 ec 0c             	sub    esp,0xc
c00206ee:	2d c0 00 00 00       	sub    eax,0xc0
c00206f3:	50                   	push   eax
c00206f4:	e8 f7 fa ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00206f9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020700:	89 c6                	mov    esi,eax
c0020702:	89 d7                	mov    edi,edx
c0020704:	e8 e7 fa ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020709:	57                   	push   edi
c002070a:	56                   	push   esi
c002070b:	52                   	push   edx
c002070c:	50                   	push   eax
c002070d:	e8 54 fa ff ff       	call   c0020166 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020712:	83 c4 1c             	add    esp,0x1c
c0020715:	52                   	push   edx
c0020716:	50                   	push   eax
c0020717:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002071b:	2d c0 00 00 00       	sub    eax,0xc0
c0020720:	eb 3d                	jmp    c002075f <Vm::x87Handler(regs*)+0x432>
c0020722:	8d 50 38             	lea    edx,[eax+0x38]
c0020725:	80 fa 07             	cmp    dl,0x7
c0020728:	77 3b                	ja     c0020765 <Vm::x87Handler(regs*)+0x438>
c002072a:	83 ec 0c             	sub    esp,0xc
c002072d:	2d c8 00 00 00       	sub    eax,0xc8
c0020732:	50                   	push   eax
c0020733:	e8 b8 fa ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020738:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002073f:	89 c6                	mov    esi,eax
c0020741:	89 d7                	mov    edi,edx
c0020743:	e8 a8 fa ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020748:	57                   	push   edi
c0020749:	56                   	push   esi
c002074a:	52                   	push   edx
c002074b:	50                   	push   eax
c002074c:	e8 4e fa ff ff       	call   c002019f <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020751:	83 c4 1c             	add    esp,0x1c
c0020754:	52                   	push   edx
c0020755:	50                   	push   eax
c0020756:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002075a:	2d c8 00 00 00       	sub    eax,0xc8
c002075f:	50                   	push   eax
c0020760:	e9 75 fc ff ff       	jmp    c00203da <Vm::x87Handler(regs*)+0xad>
c0020765:	83 c0 18             	add    eax,0x18
c0020768:	3c 07                	cmp    al,0x7
c002076a:	0f 87 3b 04 00 00    	ja     c0020bab <Vm::x87Handler(regs*)+0x87e>
c0020770:	83 ec 0c             	sub    esp,0xc
c0020773:	6a 00                	push   0x0
c0020775:	e8 76 fa ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c002077a:	89 c6                	mov    esi,eax
c002077c:	89 d7                	mov    edi,edx
c002077e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020782:	2d e8 00 00 00       	sub    eax,0xe8
c0020787:	89 04 24             	mov    DWORD PTR [esp],eax
c002078a:	e8 61 fa ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c002078f:	57                   	push   edi
c0020790:	56                   	push   esi
c0020791:	52                   	push   edx
c0020792:	50                   	push   eax
c0020793:	e8 f8 f9 ff ff       	call   c0020190 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020798:	83 c4 1c             	add    esp,0x1c
c002079b:	52                   	push   edx
c002079c:	50                   	push   eax
c002079d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207a1:	2d e8 00 00 00       	sub    eax,0xe8
c00207a6:	eb b7                	jmp    c002075f <Vm::x87Handler(regs*)+0x432>
c00207a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207ac:	8d 50 40             	lea    edx,[eax+0x40]
c00207af:	80 fa 07             	cmp    dl,0x7
c00207b2:	77 3a                	ja     c00207ee <Vm::x87Handler(regs*)+0x4c1>
c00207b4:	83 ec 0c             	sub    esp,0xc
c00207b7:	2d c0 00 00 00       	sub    eax,0xc0
c00207bc:	50                   	push   eax
c00207bd:	e8 2e fa ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00207c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207c9:	89 c6                	mov    esi,eax
c00207cb:	89 d7                	mov    edi,edx
c00207cd:	e8 1e fa ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00207d2:	57                   	push   edi
c00207d3:	56                   	push   esi
c00207d4:	52                   	push   edx
c00207d5:	50                   	push   eax
c00207d6:	e8 8b f9 ff ff       	call   c0020166 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00207db:	83 c4 1c             	add    esp,0x1c
c00207de:	52                   	push   edx
c00207df:	50                   	push   eax
c00207e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207e4:	2d c0 00 00 00       	sub    eax,0xc0
c00207e9:	e9 9e 01 00 00       	jmp    c002098c <Vm::x87Handler(regs*)+0x65f>
c00207ee:	8d 50 20             	lea    edx,[eax+0x20]
c00207f1:	80 fa 07             	cmp    dl,0x7
c00207f4:	77 3a                	ja     c0020830 <Vm::x87Handler(regs*)+0x503>
c00207f6:	83 ec 0c             	sub    esp,0xc
c00207f9:	2d e0 00 00 00       	sub    eax,0xe0
c00207fe:	50                   	push   eax
c00207ff:	e8 ec f9 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020804:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002080b:	89 c6                	mov    esi,eax
c002080d:	89 d7                	mov    edi,edx
c002080f:	e8 dc f9 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020814:	57                   	push   edi
c0020815:	56                   	push   esi
c0020816:	52                   	push   edx
c0020817:	50                   	push   eax
c0020818:	e8 73 f9 ff ff       	call   c0020190 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002081d:	83 c4 1c             	add    esp,0x1c
c0020820:	52                   	push   edx
c0020821:	50                   	push   eax
c0020822:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020826:	2d e0 00 00 00       	sub    eax,0xe0
c002082b:	e9 5c 01 00 00       	jmp    c002098c <Vm::x87Handler(regs*)+0x65f>
c0020830:	8d 50 18             	lea    edx,[eax+0x18]
c0020833:	80 fa 07             	cmp    dl,0x7
c0020836:	77 3b                	ja     c0020873 <Vm::x87Handler(regs*)+0x546>
c0020838:	83 ec 0c             	sub    esp,0xc
c002083b:	6a 00                	push   0x0
c002083d:	e8 ae f9 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020842:	89 c6                	mov    esi,eax
c0020844:	89 d7                	mov    edi,edx
c0020846:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002084a:	2d e8 00 00 00       	sub    eax,0xe8
c002084f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020852:	e8 99 f9 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020857:	57                   	push   edi
c0020858:	56                   	push   esi
c0020859:	52                   	push   edx
c002085a:	50                   	push   eax
c002085b:	e8 30 f9 ff ff       	call   c0020190 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020860:	83 c4 1c             	add    esp,0x1c
c0020863:	52                   	push   edx
c0020864:	50                   	push   eax
c0020865:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020869:	2d e8 00 00 00       	sub    eax,0xe8
c002086e:	e9 19 01 00 00       	jmp    c002098c <Vm::x87Handler(regs*)+0x65f>
c0020873:	8d 50 38             	lea    edx,[eax+0x38]
c0020876:	80 fa 07             	cmp    dl,0x7
c0020879:	77 37                	ja     c00208b2 <Vm::x87Handler(regs*)+0x585>
c002087b:	83 ec 0c             	sub    esp,0xc
c002087e:	2d c8 00 00 00       	sub    eax,0xc8
c0020883:	50                   	push   eax
c0020884:	e8 67 f9 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020889:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020890:	89 c6                	mov    esi,eax
c0020892:	89 d7                	mov    edi,edx
c0020894:	e8 57 f9 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020899:	57                   	push   edi
c002089a:	56                   	push   esi
c002089b:	52                   	push   edx
c002089c:	50                   	push   eax
c002089d:	e8 fd f8 ff ff       	call   c002019f <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00208a2:	83 c4 1c             	add    esp,0x1c
c00208a5:	52                   	push   edx
c00208a6:	50                   	push   eax
c00208a7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208ab:	2d c8 00 00 00       	sub    eax,0xc8
c00208b0:	eb 7d                	jmp    c002092f <Vm::x87Handler(regs*)+0x602>
c00208b2:	3c f7                	cmp    al,0xf7
c00208b4:	76 38                	jbe    c00208ee <Vm::x87Handler(regs*)+0x5c1>
c00208b6:	83 ec 0c             	sub    esp,0xc
c00208b9:	6a 00                	push   0x0
c00208bb:	e8 30 f9 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00208c0:	89 c6                	mov    esi,eax
c00208c2:	89 d7                	mov    edi,edx
c00208c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208c8:	2d f8 00 00 00       	sub    eax,0xf8
c00208cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00208d0:	e8 1b f9 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00208d5:	57                   	push   edi
c00208d6:	56                   	push   esi
c00208d7:	52                   	push   edx
c00208d8:	50                   	push   eax
c00208d9:	e8 e0 f8 ff ff       	call   c00201be <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00208de:	83 c4 1c             	add    esp,0x1c
c00208e1:	52                   	push   edx
c00208e2:	50                   	push   eax
c00208e3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208e7:	2d f8 00 00 00       	sub    eax,0xf8
c00208ec:	eb 41                	jmp    c002092f <Vm::x87Handler(regs*)+0x602>
c00208ee:	8d 50 10             	lea    edx,[eax+0x10]
c00208f1:	80 fa 07             	cmp    dl,0x7
c00208f4:	0f 87 5a 01 00 00    	ja     c0020a54 <Vm::x87Handler(regs*)+0x727>
c00208fa:	83 ec 0c             	sub    esp,0xc
c00208fd:	2d f0 00 00 00       	sub    eax,0xf0
c0020902:	50                   	push   eax
c0020903:	e8 e8 f8 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020908:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002090f:	89 c6                	mov    esi,eax
c0020911:	89 d7                	mov    edi,edx
c0020913:	e8 d8 f8 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020918:	57                   	push   edi
c0020919:	56                   	push   esi
c002091a:	52                   	push   edx
c002091b:	50                   	push   eax
c002091c:	e8 9d f8 ff ff       	call   c00201be <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020921:	83 c4 1c             	add    esp,0x1c
c0020924:	52                   	push   edx
c0020925:	50                   	push   eax
c0020926:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002092a:	2d f0 00 00 00       	sub    eax,0xf0
c002092f:	50                   	push   eax
c0020930:	e8 fe f8 ff ff       	call   c0020233 <Vm::fpuSetReg(int, unsigned long long)>
c0020935:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020939:	e8 9d f9 ff ff       	call   c00202db <Vm::fpuPop()>
c002093e:	e9 5e fa ff ff       	jmp    c00203a1 <Vm::x87Handler(regs*)+0x74>
c0020943:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020947:	8d 50 30             	lea    edx,[eax+0x30]
c002094a:	80 fa 07             	cmp    dl,0x7
c002094d:	77 1d                	ja     c002096c <Vm::x87Handler(regs*)+0x63f>
c002094f:	83 ec 0c             	sub    esp,0xc
c0020952:	6a 00                	push   0x0
c0020954:	e8 97 f8 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020959:	83 c4 0c             	add    esp,0xc
c002095c:	52                   	push   edx
c002095d:	50                   	push   eax
c002095e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020962:	2d d0 00 00 00       	sub    eax,0xd0
c0020967:	e9 f3 fd ff ff       	jmp    c002075f <Vm::x87Handler(regs*)+0x432>
c002096c:	8d 50 28             	lea    edx,[eax+0x28]
c002096f:	80 fa 07             	cmp    dl,0x7
c0020972:	77 28                	ja     c002099c <Vm::x87Handler(regs*)+0x66f>
c0020974:	83 ec 0c             	sub    esp,0xc
c0020977:	6a 00                	push   0x0
c0020979:	e8 72 f8 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c002097e:	83 c4 0c             	add    esp,0xc
c0020981:	52                   	push   edx
c0020982:	50                   	push   eax
c0020983:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020987:	2d d8 00 00 00       	sub    eax,0xd8
c002098c:	50                   	push   eax
c002098d:	e8 a1 f8 ff ff       	call   c0020233 <Vm::fpuSetReg(int, unsigned long long)>
c0020992:	e8 44 f9 ff ff       	call   c00202db <Vm::fpuPop()>
c0020997:	e9 01 fa ff ff       	jmp    c002039d <Vm::x87Handler(regs*)+0x70>
c002099c:	8d 50 20             	lea    edx,[eax+0x20]
c002099f:	80 fa 07             	cmp    dl,0x7
c00209a2:	77 30                	ja     c00209d4 <Vm::x87Handler(regs*)+0x6a7>
c00209a4:	83 ec 0c             	sub    esp,0xc
c00209a7:	2d e0 00 00 00       	sub    eax,0xe0
c00209ac:	50                   	push   eax
c00209ad:	e8 3e f8 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00209b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209b9:	89 c6                	mov    esi,eax
c00209bb:	89 d7                	mov    edi,edx
c00209bd:	e8 2e f8 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00209c2:	57                   	push   edi
c00209c3:	56                   	push   esi
c00209c4:	52                   	push   edx
c00209c5:	50                   	push   eax
c00209c6:	e8 48 f7 ff ff       	call   c0020113 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00209cb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00209cf:	e9 54 02 00 00       	jmp    c0020c28 <Vm::x87Handler(regs*)+0x8fb>
c00209d4:	8d 50 18             	lea    edx,[eax+0x18]
c00209d7:	80 fa 07             	cmp    dl,0x7
c00209da:	0f 87 43 fb ff ff    	ja     c0020523 <Vm::x87Handler(regs*)+0x1f6>
c00209e0:	83 ec 0c             	sub    esp,0xc
c00209e3:	2d e8 00 00 00       	sub    eax,0xe8
c00209e8:	50                   	push   eax
c00209e9:	e8 02 f8 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00209ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209f5:	89 c6                	mov    esi,eax
c00209f7:	89 d7                	mov    edi,edx
c00209f9:	e8 f2 f7 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c00209fe:	57                   	push   edi
c00209ff:	56                   	push   esi
c0020a00:	52                   	push   edx
c0020a01:	50                   	push   eax
c0020a02:	e8 0c f7 ff ff       	call   c0020113 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020a07:	83 c4 20             	add    esp,0x20
c0020a0a:	e8 cc f8 ff ff       	call   c00202db <Vm::fpuPop()>
c0020a0f:	eb 62                	jmp    c0020a73 <Vm::x87Handler(regs*)+0x746>
c0020a11:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020a15:	0f 85 0f 01 00 00    	jne    c0020b2a <Vm::x87Handler(regs*)+0x7fd>
c0020a1b:	83 ec 0c             	sub    esp,0xc
c0020a1e:	6a 01                	push   0x1
c0020a20:	e8 cb f7 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020a25:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a2c:	89 c6                	mov    esi,eax
c0020a2e:	89 d7                	mov    edi,edx
c0020a30:	e8 bb f7 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020a35:	57                   	push   edi
c0020a36:	56                   	push   esi
c0020a37:	52                   	push   edx
c0020a38:	50                   	push   eax
c0020a39:	e8 d5 f6 ff ff       	call   c0020113 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020a3e:	83 c4 20             	add    esp,0x20
c0020a41:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020a45:	e8 91 f8 ff ff       	call   c00202db <Vm::fpuPop()>
c0020a4a:	e8 8c f8 ff ff       	call   c00202db <Vm::fpuPop()>
c0020a4f:	e9 50 f9 ff ff       	jmp    c00203a4 <Vm::x87Handler(regs*)+0x77>
c0020a54:	3c d9                	cmp    al,0xd9
c0020a56:	0f 85 b5 02 00 00    	jne    c0020d11 <Vm::x87Handler(regs*)+0x9e4>
c0020a5c:	eb bd                	jmp    c0020a1b <Vm::x87Handler(regs*)+0x6ee>
c0020a5e:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020a62:	0f 85 ea 02 00 00    	jne    c0020d52 <Vm::x87Handler(regs*)+0xa25>
c0020a68:	0f b7 05 e0 26 03 c0 	movzx  eax,WORD PTR ds:0xc00326e0
c0020a6f:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020a73:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020a77:	e9 28 f9 ff ff       	jmp    c00203a4 <Vm::x87Handler(regs*)+0x77>
c0020a7c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020a80:	84 d2                	test   dl,dl
c0020a82:	75 0f                	jne    c0020a93 <Vm::x87Handler(regs*)+0x766>
c0020a84:	83 ec 0c             	sub    esp,0xc
c0020a87:	ff 36                	push   DWORD PTR [esi]
c0020a89:	e8 b1 f4 ff ff       	call   c001ff3f <Vm::fpu32ToInternal(unsigned int)>
c0020a8e:	e9 2c 01 00 00       	jmp    c0020bbf <Vm::x87Handler(regs*)+0x892>
c0020a93:	80 fa 01             	cmp    dl,0x1
c0020a96:	75 0f                	jne    c0020aa7 <Vm::x87Handler(regs*)+0x77a>
c0020a98:	83 ec 0c             	sub    esp,0xc
c0020a9b:	ff 36                	push   DWORD PTR [esi]
c0020a9d:	e8 9d f4 ff ff       	call   c001ff3f <Vm::fpu32ToInternal(unsigned int)>
c0020aa2:	e9 81 02 00 00       	jmp    c0020d28 <Vm::x87Handler(regs*)+0x9fb>
c0020aa7:	80 fa 04             	cmp    dl,0x4
c0020aaa:	75 0f                	jne    c0020abb <Vm::x87Handler(regs*)+0x78e>
c0020aac:	83 ec 0c             	sub    esp,0xc
c0020aaf:	ff 36                	push   DWORD PTR [esi]
c0020ab1:	e8 89 f4 ff ff       	call   c001ff3f <Vm::fpu32ToInternal(unsigned int)>
c0020ab6:	e9 86 01 00 00       	jmp    c0020c41 <Vm::x87Handler(regs*)+0x914>
c0020abb:	80 fa 05             	cmp    dl,0x5
c0020abe:	75 1b                	jne    c0020adb <Vm::x87Handler(regs*)+0x7ae>
c0020ac0:	83 ec 0c             	sub    esp,0xc
c0020ac3:	6a 00                	push   0x0
c0020ac5:	e8 26 f7 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020aca:	89 c7                	mov    edi,eax
c0020acc:	89 d5                	mov    ebp,edx
c0020ace:	58                   	pop    eax
c0020acf:	ff 36                	push   DWORD PTR [esi]
c0020ad1:	e8 69 f4 ff ff       	call   c001ff3f <Vm::fpu32ToInternal(unsigned int)>
c0020ad6:	e9 a3 01 00 00       	jmp    c0020c7e <Vm::x87Handler(regs*)+0x951>
c0020adb:	80 fa 06             	cmp    dl,0x6
c0020ade:	75 0f                	jne    c0020aef <Vm::x87Handler(regs*)+0x7c2>
c0020ae0:	83 ec 0c             	sub    esp,0xc
c0020ae3:	ff 36                	push   DWORD PTR [esi]
c0020ae5:	e8 55 f4 ff ff       	call   c001ff3f <Vm::fpu32ToInternal(unsigned int)>
c0020aea:	e9 ae 01 00 00       	jmp    c0020c9d <Vm::x87Handler(regs*)+0x970>
c0020aef:	31 c0                	xor    eax,eax
c0020af1:	80 fa 07             	cmp    dl,0x7
c0020af4:	0f 85 94 02 00 00    	jne    c0020d8e <Vm::x87Handler(regs*)+0xa61>
c0020afa:	83 ec 0c             	sub    esp,0xc
c0020afd:	6a 00                	push   0x0
c0020aff:	e8 ec f6 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020b04:	89 c7                	mov    edi,eax
c0020b06:	89 d5                	mov    ebp,edx
c0020b08:	58                   	pop    eax
c0020b09:	ff 36                	push   DWORD PTR [esi]
c0020b0b:	e8 2f f4 ff ff       	call   c001ff3f <Vm::fpu32ToInternal(unsigned int)>
c0020b10:	e9 cb 01 00 00       	jmp    c0020ce0 <Vm::x87Handler(regs*)+0x9b3>
c0020b15:	80 fa 03             	cmp    dl,0x3
c0020b18:	0f 85 d3 01 00 00    	jne    c0020cf1 <Vm::x87Handler(regs*)+0x9c4>
c0020b1e:	e8 b8 f7 ff ff       	call   c00202db <Vm::fpuPop()>
c0020b23:	51                   	push   ecx
c0020b24:	51                   	push   ecx
c0020b25:	e9 de 01 00 00       	jmp    c0020d08 <Vm::x87Handler(regs*)+0x9db>
c0020b2a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020b2e:	80 fa 01             	cmp    dl,0x1
c0020b31:	75 09                	jne    c0020b3c <Vm::x87Handler(regs*)+0x80f>
c0020b33:	57                   	push   edi
c0020b34:	57                   	push   edi
c0020b35:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b37:	e9 e3 01 00 00       	jmp    c0020d1f <Vm::x87Handler(regs*)+0x9f2>
c0020b3c:	80 fa 04             	cmp    dl,0x4
c0020b3f:	75 12                	jne    c0020b53 <Vm::x87Handler(regs*)+0x826>
c0020b41:	31 d2                	xor    edx,edx
c0020b43:	51                   	push   ecx
c0020b44:	51                   	push   ecx
c0020b45:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b47:	52                   	push   edx
c0020b48:	50                   	push   eax
c0020b49:	e8 d0 f4 ff ff       	call   c002001e <Vm::fpuLongToFloat(long long)>
c0020b4e:	e9 ee 00 00 00       	jmp    c0020c41 <Vm::x87Handler(regs*)+0x914>
c0020b53:	31 c0                	xor    eax,eax
c0020b55:	80 fa 07             	cmp    dl,0x7
c0020b58:	0f 85 30 02 00 00    	jne    c0020d8e <Vm::x87Handler(regs*)+0xa61>
c0020b5e:	83 ec 0c             	sub    esp,0xc
c0020b61:	6a 00                	push   0x0
c0020b63:	e8 88 f6 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020b68:	89 c7                	mov    edi,eax
c0020b6a:	89 d5                	mov    ebp,edx
c0020b6c:	58                   	pop    eax
c0020b6d:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b6f:	5a                   	pop    edx
c0020b70:	31 d2                	xor    edx,edx
c0020b72:	52                   	push   edx
c0020b73:	50                   	push   eax
c0020b74:	e8 a5 f4 ff ff       	call   c002001e <Vm::fpuLongToFloat(long long)>
c0020b79:	e9 62 01 00 00       	jmp    c0020ce0 <Vm::x87Handler(regs*)+0x9b3>
c0020b7e:	84 d2                	test   dl,dl
c0020b80:	75 0d                	jne    c0020b8f <Vm::x87Handler(regs*)+0x862>
c0020b82:	31 d2                	xor    edx,edx
c0020b84:	55                   	push   ebp
c0020b85:	55                   	push   ebp
c0020b86:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b88:	52                   	push   edx
c0020b89:	50                   	push   eax
c0020b8a:	e9 d3 01 00 00       	jmp    c0020d62 <Vm::x87Handler(regs*)+0xa35>
c0020b8f:	31 c0                	xor    eax,eax
c0020b91:	80 fa 02             	cmp    dl,0x2
c0020b94:	0f 85 f4 01 00 00    	jne    c0020d8e <Vm::x87Handler(regs*)+0xa61>
c0020b9a:	83 ec 0c             	sub    esp,0xc
c0020b9d:	6a 00                	push   0x0
c0020b9f:	e8 4c f6 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020ba4:	59                   	pop    ecx
c0020ba5:	5f                   	pop    edi
c0020ba6:	e9 6a f9 ff ff       	jmp    c0020515 <Vm::x87Handler(regs*)+0x1e8>
c0020bab:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020baf:	84 d2                	test   dl,dl
c0020bb1:	75 2a                	jne    c0020bdd <Vm::x87Handler(regs*)+0x8b0>
c0020bb3:	50                   	push   eax
c0020bb4:	50                   	push   eax
c0020bb5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020bb8:	ff 36                	push   DWORD PTR [esi]
c0020bba:	e8 c5 f3 ff ff       	call   c001ff84 <Vm::fpu64ToInternal(unsigned long long)>
c0020bbf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020bc6:	89 c6                	mov    esi,eax
c0020bc8:	89 d7                	mov    edi,edx
c0020bca:	e8 21 f6 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020bcf:	57                   	push   edi
c0020bd0:	56                   	push   esi
c0020bd1:	52                   	push   edx
c0020bd2:	50                   	push   eax
c0020bd3:	e8 8e f5 ff ff       	call   c0020166 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020bd8:	e9 64 01 00 00       	jmp    c0020d41 <Vm::x87Handler(regs*)+0xa14>
c0020bdd:	80 fa 01             	cmp    dl,0x1
c0020be0:	75 11                	jne    c0020bf3 <Vm::x87Handler(regs*)+0x8c6>
c0020be2:	50                   	push   eax
c0020be3:	50                   	push   eax
c0020be4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020be7:	ff 36                	push   DWORD PTR [esi]
c0020be9:	e8 96 f3 ff ff       	call   c001ff84 <Vm::fpu64ToInternal(unsigned long long)>
c0020bee:	e9 35 01 00 00       	jmp    c0020d28 <Vm::x87Handler(regs*)+0x9fb>
c0020bf3:	80 fa 02             	cmp    dl,0x2
c0020bf6:	0f 85 54 f9 ff ff    	jne    c0020550 <Vm::x87Handler(regs*)+0x223>
c0020bfc:	55                   	push   ebp
c0020bfd:	55                   	push   ebp
c0020bfe:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c01:	ff 36                	push   DWORD PTR [esi]
c0020c03:	e8 7c f3 ff ff       	call   c001ff84 <Vm::fpu64ToInternal(unsigned long long)>
c0020c08:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020c0f:	89 c6                	mov    esi,eax
c0020c11:	89 d7                	mov    edi,edx
c0020c13:	e8 d8 f5 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020c18:	57                   	push   edi
c0020c19:	56                   	push   esi
c0020c1a:	52                   	push   edx
c0020c1b:	50                   	push   eax
c0020c1c:	e8 f2 f4 ff ff       	call   c0020113 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020c21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020c25:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020c28:	83 c4 20             	add    esp,0x20
c0020c2b:	e9 74 f7 ff ff       	jmp    c00203a4 <Vm::x87Handler(regs*)+0x77>
c0020c30:	80 fa 04             	cmp    dl,0x4
c0020c33:	75 2a                	jne    c0020c5f <Vm::x87Handler(regs*)+0x932>
c0020c35:	51                   	push   ecx
c0020c36:	51                   	push   ecx
c0020c37:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c3a:	ff 36                	push   DWORD PTR [esi]
c0020c3c:	e8 43 f3 ff ff       	call   c001ff84 <Vm::fpu64ToInternal(unsigned long long)>
c0020c41:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020c48:	89 c6                	mov    esi,eax
c0020c4a:	89 d7                	mov    edi,edx
c0020c4c:	e8 9f f5 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020c51:	57                   	push   edi
c0020c52:	56                   	push   esi
c0020c53:	52                   	push   edx
c0020c54:	50                   	push   eax
c0020c55:	e8 36 f5 ff ff       	call   c0020190 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020c5a:	e9 e2 00 00 00       	jmp    c0020d41 <Vm::x87Handler(regs*)+0xa14>
c0020c5f:	80 fa 05             	cmp    dl,0x5
c0020c62:	75 28                	jne    c0020c8c <Vm::x87Handler(regs*)+0x95f>
c0020c64:	83 ec 0c             	sub    esp,0xc
c0020c67:	6a 00                	push   0x0
c0020c69:	e8 82 f5 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020c6e:	89 c7                	mov    edi,eax
c0020c70:	89 d5                	mov    ebp,edx
c0020c72:	58                   	pop    eax
c0020c73:	5a                   	pop    edx
c0020c74:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c77:	ff 36                	push   DWORD PTR [esi]
c0020c79:	e8 06 f3 ff ff       	call   c001ff84 <Vm::fpu64ToInternal(unsigned long long)>
c0020c7e:	83 c4 10             	add    esp,0x10
c0020c81:	55                   	push   ebp
c0020c82:	57                   	push   edi
c0020c83:	52                   	push   edx
c0020c84:	50                   	push   eax
c0020c85:	e8 06 f5 ff ff       	call   c0020190 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020c8a:	eb 60                	jmp    c0020cec <Vm::x87Handler(regs*)+0x9bf>
c0020c8c:	80 fa 06             	cmp    dl,0x6
c0020c8f:	75 2a                	jne    c0020cbb <Vm::x87Handler(regs*)+0x98e>
c0020c91:	51                   	push   ecx
c0020c92:	51                   	push   ecx
c0020c93:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c96:	ff 36                	push   DWORD PTR [esi]
c0020c98:	e8 e7 f2 ff ff       	call   c001ff84 <Vm::fpu64ToInternal(unsigned long long)>
c0020c9d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020ca4:	89 c6                	mov    esi,eax
c0020ca6:	89 d7                	mov    edi,edx
c0020ca8:	e8 43 f5 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020cad:	57                   	push   edi
c0020cae:	56                   	push   esi
c0020caf:	52                   	push   edx
c0020cb0:	50                   	push   eax
c0020cb1:	e8 08 f5 ff ff       	call   c00201be <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020cb6:	e9 86 00 00 00       	jmp    c0020d41 <Vm::x87Handler(regs*)+0xa14>
c0020cbb:	31 c0                	xor    eax,eax
c0020cbd:	80 fa 07             	cmp    dl,0x7
c0020cc0:	0f 85 c8 00 00 00    	jne    c0020d8e <Vm::x87Handler(regs*)+0xa61>
c0020cc6:	83 ec 0c             	sub    esp,0xc
c0020cc9:	6a 00                	push   0x0
c0020ccb:	e8 20 f5 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020cd0:	89 c7                	mov    edi,eax
c0020cd2:	89 d5                	mov    ebp,edx
c0020cd4:	58                   	pop    eax
c0020cd5:	5a                   	pop    edx
c0020cd6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020cd9:	ff 36                	push   DWORD PTR [esi]
c0020cdb:	e8 a4 f2 ff ff       	call   c001ff84 <Vm::fpu64ToInternal(unsigned long long)>
c0020ce0:	83 c4 10             	add    esp,0x10
c0020ce3:	55                   	push   ebp
c0020ce4:	57                   	push   edi
c0020ce5:	52                   	push   edx
c0020ce6:	50                   	push   eax
c0020ce7:	e8 d2 f4 ff ff       	call   c00201be <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020cec:	83 c4 0c             	add    esp,0xc
c0020cef:	eb 53                	jmp    c0020d44 <Vm::x87Handler(regs*)+0xa17>
c0020cf1:	31 c0                	xor    eax,eax
c0020cf3:	80 fa 02             	cmp    dl,0x2
c0020cf6:	0f 85 92 00 00 00    	jne    c0020d8e <Vm::x87Handler(regs*)+0xa61>
c0020cfc:	83 ec 0c             	sub    esp,0xc
c0020cff:	6a 00                	push   0x0
c0020d01:	e8 ea f4 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020d06:	59                   	pop    ecx
c0020d07:	5f                   	pop    edi
c0020d08:	52                   	push   edx
c0020d09:	50                   	push   eax
c0020d0a:	e8 27 f2 ff ff       	call   c001ff36 <Vm::fpuInternalTo64(unsigned long long)>
c0020d0f:	eb 70                	jmp    c0020d81 <Vm::x87Handler(regs*)+0xa54>
c0020d11:	31 c0                	xor    eax,eax
c0020d13:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020d18:	75 74                	jne    c0020d8e <Vm::x87Handler(regs*)+0xa61>
c0020d1a:	50                   	push   eax
c0020d1b:	50                   	push   eax
c0020d1c:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020d1f:	31 d2                	xor    edx,edx
c0020d21:	52                   	push   edx
c0020d22:	50                   	push   eax
c0020d23:	e8 f6 f2 ff ff       	call   c002001e <Vm::fpuLongToFloat(long long)>
c0020d28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020d2f:	89 c6                	mov    esi,eax
c0020d31:	89 d7                	mov    edi,edx
c0020d33:	e8 b8 f4 ff ff       	call   c00201f0 <Vm::fpuGetReg(int)>
c0020d38:	57                   	push   edi
c0020d39:	56                   	push   esi
c0020d3a:	52                   	push   edx
c0020d3b:	50                   	push   eax
c0020d3c:	e8 5e f4 ff ff       	call   c002019f <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020d41:	83 c4 1c             	add    esp,0x1c
c0020d44:	52                   	push   edx
c0020d45:	50                   	push   eax
c0020d46:	6a 00                	push   0x0
c0020d48:	e8 e6 f4 ff ff       	call   c0020233 <Vm::fpuSetReg(int, unsigned long long)>
c0020d4d:	e9 f2 f7 ff ff       	jmp    c0020544 <Vm::x87Handler(regs*)+0x217>
c0020d52:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020d56:	80 fa 05             	cmp    dl,0x5
c0020d59:	75 11                	jne    c0020d6c <Vm::x87Handler(regs*)+0xa3f>
c0020d5b:	55                   	push   ebp
c0020d5c:	55                   	push   ebp
c0020d5d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020d60:	ff 36                	push   DWORD PTR [esi]
c0020d62:	e8 81 f2 ff ff       	call   c001ffe8 <Vm::fpuULongToFloat(unsigned long long)>
c0020d67:	e9 cf f7 ff ff       	jmp    c002053b <Vm::x87Handler(regs*)+0x20e>
c0020d6c:	31 c0                	xor    eax,eax
c0020d6e:	80 fa 07             	cmp    dl,0x7
c0020d71:	75 1b                	jne    c0020d8e <Vm::x87Handler(regs*)+0xa61>
c0020d73:	e8 63 f5 ff ff       	call   c00202db <Vm::fpuPop()>
c0020d78:	51                   	push   ecx
c0020d79:	51                   	push   ecx
c0020d7a:	52                   	push   edx
c0020d7b:	50                   	push   eax
c0020d7c:	e8 0c f2 ff ff       	call   c001ff8d <Vm::fpuFloatToLong(unsigned long long)>
c0020d81:	83 c4 10             	add    esp,0x10
c0020d84:	89 06                	mov    DWORD PTR [esi],eax
c0020d86:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020d89:	e9 f8 f7 ff ff       	jmp    c0020586 <Vm::x87Handler(regs*)+0x259>
c0020d8e:	83 c4 1c             	add    esp,0x1c
c0020d91:	5b                   	pop    ebx
c0020d92:	5e                   	pop    esi
c0020d93:	5f                   	pop    edi
c0020d94:	5d                   	pop    ebp
c0020d95:	c3                   	ret    

c0020d96 <__static_initialization_and_destruction_0(int, int)>:
c0020d96:	83 ec 0c             	sub    esp,0xc
c0020d99:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020d9e:	75 1a                	jne    c0020dba <__static_initialization_and_destruction_0(int, int)+0x24>
c0020da0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020da8:	75 10                	jne    c0020dba <__static_initialization_and_destruction_0(int, int)+0x24>
c0020daa:	83 ec 0c             	sub    esp,0xc
c0020dad:	68 e0 26 03 c0       	push   0xc00326e0
c0020db2:	e8 15 8b 00 00       	call   c00298cc <Vm::_FPUState::_FPUState()>
c0020db7:	83 c4 10             	add    esp,0x10
c0020dba:	90                   	nop
c0020dbb:	83 c4 0c             	add    esp,0xc
c0020dbe:	c3                   	ret    

c0020dbf <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020dbf:	83 ec 0c             	sub    esp,0xc
c0020dc2:	83 ec 08             	sub    esp,0x8
c0020dc5:	68 ff ff 00 00       	push   0xffff
c0020dca:	6a 01                	push   0x1
c0020dcc:	e8 c5 ff ff ff       	call   c0020d96 <__static_initialization_and_destruction_0(int, int)>
c0020dd1:	83 c4 10             	add    esp,0x10
c0020dd4:	83 c4 0c             	add    esp,0xc
c0020dd7:	c3                   	ret    

c0020dd8 <FAT::getName()>:
c0020dd8:	b8 cc d4 02 c0       	mov    eax,0xc002d4cc
c0020ddd:	c3                   	ret    

c0020dde <FAT::tell(void*, unsigned long long*)>:
c0020dde:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020de3:	75 06                	jne    c0020deb <FAT::tell(void*, unsigned long long*)+0xd>
c0020de5:	b8 04 00 00 00       	mov    eax,0x4
c0020dea:	c3                   	ret    
c0020deb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020df0:	75 06                	jne    c0020df8 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020df2:	b8 04 00 00 00       	mov    eax,0x4
c0020df7:	c3                   	ret    
c0020df8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020dfc:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020dff:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020e02:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020e06:	89 01                	mov    DWORD PTR [ecx],eax
c0020e08:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020e0b:	b8 00 00 00 00       	mov    eax,0x0
c0020e10:	c3                   	ret    
c0020e11:	90                   	nop

c0020e12 <FAT::stat(void*, unsigned long long*)>:
c0020e12:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020e17:	75 06                	jne    c0020e1f <FAT::stat(void*, unsigned long long*)+0xd>
c0020e19:	b8 04 00 00 00       	mov    eax,0x4
c0020e1e:	c3                   	ret    
c0020e1f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020e24:	75 06                	jne    c0020e2c <FAT::stat(void*, unsigned long long*)+0x1a>
c0020e26:	b8 04 00 00 00       	mov    eax,0x4
c0020e2b:	c3                   	ret    
c0020e2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e30:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020e33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020e36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020e3a:	89 01                	mov    DWORD PTR [ecx],eax
c0020e3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020e3f:	b8 00 00 00 00       	mov    eax,0x0
c0020e44:	c3                   	ret    
c0020e45:	90                   	nop

c0020e46 <FAT::~FAT()>:
c0020e46:	83 ec 0c             	sub    esp,0xc
c0020e49:	ba 5c d5 02 c0       	mov    edx,0xc002d55c
c0020e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e52:	89 10                	mov    DWORD PTR [eax],edx
c0020e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e58:	83 ec 0c             	sub    esp,0xc
c0020e5b:	50                   	push   eax
c0020e5c:	e8 5d 23 ff ff       	call   c00131be <Filesystem::~Filesystem()>
c0020e61:	83 c4 10             	add    esp,0x10
c0020e64:	90                   	nop
c0020e65:	83 c4 0c             	add    esp,0xc
c0020e68:	c3                   	ret    
c0020e69:	90                   	nop

c0020e6a <FAT::~FAT()>:
c0020e6a:	83 ec 0c             	sub    esp,0xc
c0020e6d:	83 ec 0c             	sub    esp,0xc
c0020e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e74:	e8 cd ff ff ff       	call   c0020e46 <FAT::~FAT()>
c0020e79:	83 c4 10             	add    esp,0x10
c0020e7c:	83 ec 08             	sub    esp,0x8
c0020e7f:	6a 08                	push   0x8
c0020e81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e85:	e8 25 1f ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0020e8a:	83 c4 10             	add    esp,0x10
c0020e8d:	83 c4 0c             	add    esp,0xc
c0020e90:	c3                   	ret    
c0020e91:	90                   	nop

c0020e92 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020e92:	83 ec 1c             	sub    esp,0x1c
c0020e95:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020e9c:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020ea1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ea5:	8b 04 85 60 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8a0]
c0020eac:	83 f8 ff             	cmp    eax,0xffffffff
c0020eaf:	75 34                	jne    c0020ee5 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020eb1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020eb5:	88 c2                	mov    dl,al
c0020eb7:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c0020ebc:	01 d0                	add    eax,edx
c0020ebe:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020ec2:	8b 15 40 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032740
c0020ec8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ecc:	89 14 85 60 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8a0],edx
c0020ed3:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c0020ed8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020edc:	89 14 85 e0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd820],edx
c0020ee3:	eb 17                	jmp    c0020efc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020ee5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020ee9:	88 c2                	mov    dl,al
c0020eeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020eef:	8b 04 85 60 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8a0]
c0020ef6:	01 d0                	add    eax,edx
c0020ef8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020efc:	83 ec 04             	sub    esp,0x4
c0020eff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020f03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020f07:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020f0b:	50                   	push   eax
c0020f0c:	e8 12 5e fe ff       	call   c0006d23 <f_getlabel>
c0020f11:	83 c4 10             	add    esp,0x10
c0020f14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f18:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020f1d:	75 07                	jne    c0020f26 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020f1f:	b8 00 00 00 00       	mov    eax,0x0
c0020f24:	eb 05                	jmp    c0020f2b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020f26:	b8 01 00 00 00       	mov    eax,0x1
c0020f2b:	83 c4 1c             	add    esp,0x1c
c0020f2e:	c3                   	ret    
c0020f2f:	90                   	nop

c0020f30 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020f30:	57                   	push   edi
c0020f31:	83 ec 58             	sub    esp,0x58
c0020f34:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020f3c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020f40:	b9 0f 00 00 00       	mov    ecx,0xf
c0020f45:	b8 00 00 00 00       	mov    eax,0x0
c0020f4a:	fc                   	cld    
c0020f4b:	89 d7                	mov    edi,edx
c0020f4d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020f4f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f53:	8b 04 85 60 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8a0]
c0020f5a:	83 f8 ff             	cmp    eax,0xffffffff
c0020f5d:	75 34                	jne    c0020f93 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020f5f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020f63:	88 c2                	mov    dl,al
c0020f65:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c0020f6a:	01 d0                	add    eax,edx
c0020f6c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f70:	8b 15 40 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032740
c0020f76:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f7a:	89 14 85 60 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8a0],edx
c0020f81:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c0020f86:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020f8a:	89 14 85 e0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd820],edx
c0020f91:	eb 17                	jmp    c0020faa <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020f93:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020f97:	88 c2                	mov    dl,al
c0020f99:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f9d:	8b 04 85 60 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8a0]
c0020fa4:	01 d0                	add    eax,edx
c0020fa6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020faa:	83 ec 08             	sub    esp,0x8
c0020fad:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020fb1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fb5:	50                   	push   eax
c0020fb6:	e8 ad f9 fd ff       	call   c0000968 <strcat>
c0020fbb:	83 c4 10             	add    esp,0x10
c0020fbe:	83 ec 0c             	sub    esp,0xc
c0020fc1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fc5:	50                   	push   eax
c0020fc6:	e8 46 5f fe ff       	call   c0006f11 <f_setlabel>
c0020fcb:	83 c4 10             	add    esp,0x10
c0020fce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020fd2:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020fd7:	75 07                	jne    c0020fe0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020fd9:	b8 00 00 00 00       	mov    eax,0x0
c0020fde:	eb 05                	jmp    c0020fe5 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020fe0:	b8 01 00 00 00       	mov    eax,0x1
c0020fe5:	83 c4 58             	add    esp,0x58
c0020fe8:	5f                   	pop    edi
c0020fe9:	c3                   	ret    

c0020fea <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020fea:	83 ec 2c             	sub    esp,0x2c
c0020fed:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020ff5:	83 ec 08             	sub    esp,0x8
c0020ff8:	68 f0 d4 02 c0       	push   0xc002d4f0
c0020ffd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021001:	e8 ae f8 fd ff       	call   c00008b4 <strcmp>
c0021006:	83 c4 10             	add    esp,0x10
c0021009:	85 c0                	test   eax,eax
c002100b:	0f 94 c0             	sete   al
c002100e:	84 c0                	test   al,al
c0021010:	74 0d                	je     c002101f <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0021012:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002101a:	e9 a6 00 00 00       	jmp    c00210c5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002101f:	83 ec 08             	sub    esp,0x8
c0021022:	68 e2 d4 02 c0       	push   0xc002d4e2
c0021027:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002102b:	e8 84 f8 fd ff       	call   c00008b4 <strcmp>
c0021030:	83 c4 10             	add    esp,0x10
c0021033:	85 c0                	test   eax,eax
c0021035:	0f 94 c0             	sete   al
c0021038:	84 c0                	test   al,al
c002103a:	74 0a                	je     c0021046 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002103c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0021044:	eb 7f                	jmp    c00210c5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0021046:	83 ec 08             	sub    esp,0x8
c0021049:	68 e8 d4 02 c0       	push   0xc002d4e8
c002104e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021052:	e8 5d f8 fd ff       	call   c00008b4 <strcmp>
c0021057:	83 c4 10             	add    esp,0x10
c002105a:	85 c0                	test   eax,eax
c002105c:	0f 94 c0             	sete   al
c002105f:	84 c0                	test   al,al
c0021061:	74 0a                	je     c002106d <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0021063:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002106b:	eb 58                	jmp    c00210c5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002106d:	83 ec 08             	sub    esp,0x8
c0021070:	68 2c a0 02 c0       	push   0xc002a02c
c0021075:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021079:	e8 36 f8 fd ff       	call   c00008b4 <strcmp>
c002107e:	83 c4 10             	add    esp,0x10
c0021081:	85 c0                	test   eax,eax
c0021083:	0f 94 c0             	sete   al
c0021086:	84 c0                	test   al,al
c0021088:	74 0a                	je     c0021094 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002108a:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0021092:	eb 31                	jmp    c00210c5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0021094:	83 ec 08             	sub    esp,0x8
c0021097:	68 ee d4 02 c0       	push   0xc002d4ee
c002109c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00210a0:	e8 0f f8 fd ff       	call   c00008b4 <strcmp>
c00210a5:	83 c4 10             	add    esp,0x10
c00210a8:	85 c0                	test   eax,eax
c00210aa:	0f 94 c0             	sete   al
c00210ad:	84 c0                	test   al,al
c00210af:	74 0a                	je     c00210bb <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00210b1:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00210b9:	eb 0a                	jmp    c00210c5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00210bb:	b8 08 00 00 00       	mov    eax,0x8
c00210c0:	e9 04 01 00 00       	jmp    c00211c9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00210c5:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00210cc:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00210d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210d5:	8b 04 85 60 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8a0]
c00210dc:	83 f8 ff             	cmp    eax,0xffffffff
c00210df:	75 34                	jne    c0021115 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00210e1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00210e5:	88 c2                	mov    dl,al
c00210e7:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c00210ec:	01 d0                	add    eax,edx
c00210ee:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00210f2:	8b 15 40 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032740
c00210f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210fc:	89 14 85 60 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8a0],edx
c0021103:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c0021108:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002110c:	89 14 85 e0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd820],edx
c0021113:	eb 17                	jmp    c002112c <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0021115:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0021119:	88 c2                	mov    dl,al
c002111b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002111f:	8b 04 85 60 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8a0]
c0021126:	01 d0                	add    eax,edx
c0021128:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002112c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021130:	88 04 24             	mov    BYTE PTR [esp],al
c0021133:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021137:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002113b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0021143:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0021148:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021150:	83 ec 0c             	sub    esp,0xc
c0021153:	68 00 20 00 00       	push   0x2000
c0021158:	e8 63 e7 fe ff       	call   c000f8c0 <malloc>
c002115d:	83 c4 10             	add    esp,0x10
c0021160:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021164:	68 00 20 00 00       	push   0x2000
c0021169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002116d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021171:	50                   	push   eax
c0021172:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0021176:	50                   	push   eax
c0021177:	e8 e0 61 fe ff       	call   c000735c <f_mkfs>
c002117c:	83 c4 10             	add    esp,0x10
c002117f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021183:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021188:	75 07                	jne    c0021191 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002118a:	b8 00 00 00 00       	mov    eax,0x0
c002118f:	eb 38                	jmp    c00211c9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0021191:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0021196:	75 17                	jne    c00211af <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0021198:	83 ec 0c             	sub    esp,0xc
c002119b:	68 2c d5 02 c0       	push   0xc002d52c
c00211a0:	e8 ea 1c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00211a5:	83 c4 10             	add    esp,0x10
c00211a8:	b8 09 00 00 00       	mov    eax,0x9
c00211ad:	eb 1a                	jmp    c00211c9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00211af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00211b3:	83 ec 08             	sub    esp,0x8
c00211b6:	50                   	push   eax
c00211b7:	68 f4 d4 02 c0       	push   0xc002d4f4
c00211bc:	e8 ce 1c ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00211c1:	83 c4 10             	add    esp,0x10
c00211c4:	b8 01 00 00 00       	mov    eax,0x1
c00211c9:	83 c4 2c             	add    esp,0x2c
c00211cc:	c3                   	ret    
c00211cd:	90                   	nop

c00211ce <FAT::tryMount(LogicalDisk*, int)>:
c00211ce:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00211d4:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c00211d9:	83 f8 14             	cmp    eax,0x14
c00211dc:	75 17                	jne    c00211f5 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00211de:	83 ec 0c             	sub    esp,0xc
c00211e1:	68 06 d5 02 c0       	push   0xc002d506
c00211e6:	e8 0c 97 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00211eb:	83 c4 10             	add    esp,0x10
c00211ee:	b0 00                	mov    al,0x0
c00211f0:	e9 d7 01 00 00       	jmp    c00213cc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00211f5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00211fc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021202:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021208:	3d 00 02 00 00       	cmp    eax,0x200
c002120d:	74 07                	je     c0021216 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002120f:	b0 00                	mov    al,0x0
c0021211:	e9 b6 01 00 00       	jmp    c00213cc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021216:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002121e:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0021225:	8b 04 85 60 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8a0]
c002122c:	83 f8 ff             	cmp    eax,0xffffffff
c002122f:	74 07                	je     c0021238 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0021231:	b0 01                	mov    al,0x1
c0021233:	e9 94 01 00 00       	jmp    c00213cc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021238:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0021242:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002124a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0021251:	88 c2                	mov    dl,al
c0021253:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c0021258:	01 d0                	add    eax,edx
c002125a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0021261:	8b 15 40 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032740
c0021267:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002126e:	89 14 85 60 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8a0],edx
c0021275:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c002127a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0021281:	89 14 85 e0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd820],edx
c0021288:	83 ec 0c             	sub    esp,0xc
c002128b:	68 54 02 00 00       	push   0x254
c0021290:	e8 2b e6 fe ff       	call   c000f8c0 <malloc>
c0021295:	83 c4 10             	add    esp,0x10
c0021298:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002129f:	83 ec 04             	sub    esp,0x4
c00212a2:	6a 00                	push   0x0
c00212a4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00212ab:	50                   	push   eax
c00212ac:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00212b3:	e8 62 3c fe ff       	call   c0004f1a <f_mount>
c00212b8:	83 c4 10             	add    esp,0x10
c00212bb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00212c2:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00212ca:	74 19                	je     c00212e5 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00212cc:	83 ec 0c             	sub    esp,0xc
c00212cf:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00212d6:	e8 05 e6 fe ff       	call   c000f8e0 <rfree>
c00212db:	83 c4 10             	add    esp,0x10
c00212de:	b0 00                	mov    al,0x0
c00212e0:	e9 e7 00 00 00       	jmp    c00213cc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00212e5:	83 ec 04             	sub    esp,0x4
c00212e8:	68 00 01 00 00       	push   0x100
c00212ed:	6a 00                	push   0x0
c00212ef:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00212f6:	50                   	push   eax
c00212f7:	e8 70 f4 fd ff       	call   c000076c <memset>
c00212fc:	83 c4 10             	add    esp,0x10
c00212ff:	83 ec 08             	sub    esp,0x8
c0021302:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021309:	50                   	push   eax
c002130a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021311:	50                   	push   eax
c0021312:	e8 51 f6 fd ff       	call   c0000968 <strcat>
c0021317:	83 c4 10             	add    esp,0x10
c002131a:	83 ec 08             	sub    esp,0x8
c002131d:	68 14 d5 02 c0       	push   0xc002d514
c0021322:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021329:	50                   	push   eax
c002132a:	e8 39 f6 fd ff       	call   c0000968 <strcat>
c002132f:	83 c4 10             	add    esp,0x10
c0021332:	83 ec 04             	sub    esp,0x4
c0021335:	6a 01                	push   0x1
c0021337:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002133e:	50                   	push   eax
c002133f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021343:	50                   	push   eax
c0021344:	e8 33 3c fe ff       	call   c0004f7c <f_open>
c0021349:	83 c4 10             	add    esp,0x10
c002134c:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021353:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002135a:	85 c0                	test   eax,eax
c002135c:	74 0a                	je     c0021368 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002135e:	78 2d                	js     c002138d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021360:	83 e8 04             	sub    eax,0x4
c0021363:	83 f8 01             	cmp    eax,0x1
c0021366:	77 25                	ja     c002138d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021368:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0021370:	83 ec 0c             	sub    esp,0xc
c0021373:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021377:	50                   	push   eax
c0021378:	e8 51 47 fe ff       	call   c0005ace <f_close>
c002137d:	83 c4 10             	add    esp,0x10
c0021380:	90                   	nop
c0021381:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0021389:	74 3a                	je     c00213c5 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c002138b:	eb 2d                	jmp    c00213ba <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c002138d:	83 ec 0c             	sub    esp,0xc
c0021390:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021397:	e8 44 e5 fe ff       	call   c000f8e0 <rfree>
c002139c:	83 c4 10             	add    esp,0x10
c002139f:	83 ec 04             	sub    esp,0x4
c00213a2:	6a 00                	push   0x0
c00213a4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00213ab:	50                   	push   eax
c00213ac:	6a 00                	push   0x0
c00213ae:	e8 67 3b fe ff       	call   c0004f1a <f_mount>
c00213b3:	83 c4 10             	add    esp,0x10
c00213b6:	b0 00                	mov    al,0x0
c00213b8:	eb 12                	jmp    c00213cc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00213ba:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c00213bf:	40                   	inc    eax
c00213c0:	a3 40 27 03 c0       	mov    ds:0xc0032740,eax
c00213c5:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00213cc:	81 c4 6c 03 00 00    	add    esp,0x36c
c00213d2:	c3                   	ret    
c00213d3:	90                   	nop

c00213d4 <FAT::getFileFirstSector(char const*)>:
c00213d4:	53                   	push   ebx
c00213d5:	83 ec 28             	sub    esp,0x28
c00213d8:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00213e0:	83 ec 0c             	sub    esp,0xc
c00213e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213e7:	e8 d4 e4 fe ff       	call   c000f8c0 <malloc>
c00213ec:	83 c4 10             	add    esp,0x10
c00213ef:	89 c3                	mov    ebx,eax
c00213f1:	a1 70 26 03 c0       	mov    eax,ds:0xc0032670
c00213f6:	83 ec 04             	sub    esp,0x4
c00213f9:	50                   	push   eax
c00213fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00213fe:	53                   	push   ebx
c00213ff:	e8 ea 1f ff ff       	call   c00133ee <File::File(char const*, Process*)>
c0021404:	83 c4 10             	add    esp,0x10
c0021407:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c002140b:	83 ec 08             	sub    esp,0x8
c002140e:	6a 01                	push   0x1
c0021410:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021414:	e8 39 20 ff ff       	call   c0013452 <File::open(FileOpenMode)>
c0021419:	83 c4 10             	add    esp,0x10
c002141c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021420:	8b 00                	mov    eax,DWORD PTR [eax]
c0021422:	83 c0 0c             	add    eax,0xc
c0021425:	8b 00                	mov    eax,DWORD PTR [eax]
c0021427:	83 ec 0c             	sub    esp,0xc
c002142a:	8d 54 24 14          	lea    edx,[esp+0x14]
c002142e:	52                   	push   edx
c002142f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021433:	52                   	push   edx
c0021434:	6a 00                	push   0x0
c0021436:	6a 04                	push   0x4
c0021438:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002143c:	ff d0                	call   eax
c002143e:	83 c4 20             	add    esp,0x20
c0021441:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021445:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002144b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002144f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021453:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021456:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021459:	83 ec 04             	sub    esp,0x4
c002145c:	52                   	push   edx
c002145d:	50                   	push   eax
c002145e:	68 1f d5 02 c0       	push   0xc002d51f
c0021463:	e8 27 1a ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0021468:	83 c4 10             	add    esp,0x10
c002146b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002146f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021472:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021475:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021479:	83 ec 0c             	sub    esp,0xc
c002147c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021480:	e8 2b 20 ff ff       	call   c00134b0 <File::close()>
c0021485:	83 c4 10             	add    esp,0x10
c0021488:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002148c:	ba 00 00 00 00       	mov    edx,0x0
c0021491:	83 c4 28             	add    esp,0x28
c0021494:	5b                   	pop    ebx
c0021495:	c3                   	ret    

c0021496 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0021496:	81 ec 5c 02 00 00    	sub    esp,0x25c
c002149c:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00214a4:	74 0a                	je     c00214b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00214a6:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00214ae:	75 0a                	jne    c00214ba <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00214b0:	b8 04 00 00 00       	mov    eax,0x4
c00214b5:	e9 49 01 00 00       	jmp    c0021603 <FAT::readDir(void*, unsigned long, void*, int*)+0x16d>
c00214ba:	83 ec 08             	sub    esp,0x8
c00214bd:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00214c4:	50                   	push   eax
c00214c5:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00214cc:	e8 07 4c fe ff       	call   c00060d8 <f_readdir>
c00214d1:	83 c4 10             	add    esp,0x10
c00214d4:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00214db:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00214e2:	83 ec 0c             	sub    esp,0xc
c00214e5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00214ec:	83 c0 1a             	add    eax,0x1a
c00214ef:	50                   	push   eax
c00214f0:	e8 93 f2 fd ff       	call   c0000788 <strlen>
c00214f5:	83 c4 10             	add    esp,0x10
c00214f8:	ba 00 00 00 00       	mov    edx,0x0
c00214fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021501:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0021505:	8a 84 24 24 01 00 00 	mov    al,BYTE PTR [esp+0x124]
c002150c:	0f b6 c0             	movzx  eax,al
c002150f:	83 e0 10             	and    eax,0x10
c0021512:	74 07                	je     c002151b <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c0021514:	b8 02 00 00 00       	mov    eax,0x2
c0021519:	eb 05                	jmp    c0021520 <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c002151b:	b8 01 00 00 00       	mov    eax,0x1
c0021520:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021524:	83 ec 08             	sub    esp,0x8
c0021527:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002152e:	83 c0 1a             	add    eax,0x1a
c0021531:	50                   	push   eax
c0021532:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021536:	83 c0 10             	add    eax,0x10
c0021539:	50                   	push   eax
c002153a:	e8 e9 f2 fd ff       	call   c0000828 <strcpy>
c002153f:	83 c4 10             	add    esp,0x10
c0021542:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0021549:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0021550:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021554:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002155b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0021562:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0021569:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0021570:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0021577:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c002157e:	89 84 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],eax
c0021585:	c7 84 24 34 02 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x234],0x0
c0021590:	8b 84 24 34 02 00 00 	mov    eax,DWORD PTR [esp+0x234]
c0021597:	39 84 24 40 02 00 00 	cmp    DWORD PTR [esp+0x240],eax
c002159e:	76 2d                	jbe    c00215cd <FAT::readDir(void*, unsigned long, void*, int*)+0x137>
c00215a0:	8b 94 24 34 02 00 00 	mov    edx,DWORD PTR [esp+0x234]
c00215a7:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00215ae:	01 d0                	add    eax,edx
c00215b0:	8b 8c 24 34 02 00 00 	mov    ecx,DWORD PTR [esp+0x234]
c00215b7:	8b 94 24 38 02 00 00 	mov    edx,DWORD PTR [esp+0x238]
c00215be:	01 ca                	add    edx,ecx
c00215c0:	8a 00                	mov    al,BYTE PTR [eax]
c00215c2:	88 02                	mov    BYTE PTR [edx],al
c00215c4:	ff 84 24 34 02 00 00 	inc    DWORD PTR [esp+0x234]
c00215cb:	eb c3                	jmp    c0021590 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c00215cd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00215d4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00215da:	8a 84 24 32 01 00 00 	mov    al,BYTE PTR [esp+0x132]
c00215e1:	84 c0                	test   al,al
c00215e3:	75 07                	jne    c00215ec <FAT::readDir(void*, unsigned long, void*, int*)+0x156>
c00215e5:	b8 07 00 00 00       	mov    eax,0x7
c00215ea:	eb 17                	jmp    c0021603 <FAT::readDir(void*, unsigned long, void*, int*)+0x16d>
c00215ec:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00215f3:	85 c0                	test   eax,eax
c00215f5:	75 07                	jne    c00215fe <FAT::readDir(void*, unsigned long, void*, int*)+0x168>
c00215f7:	b8 00 00 00 00       	mov    eax,0x0
c00215fc:	eb 05                	jmp    c0021603 <FAT::readDir(void*, unsigned long, void*, int*)+0x16d>
c00215fe:	b8 01 00 00 00       	mov    eax,0x1
c0021603:	81 c4 5c 02 00 00    	add    esp,0x25c
c0021609:	c3                   	ret    

c002160a <FAT::read(void*, unsigned long, void*, int*)>:
c002160a:	83 ec 1c             	sub    esp,0x1c
c002160d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021612:	74 07                	je     c002161b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0021614:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021619:	75 07                	jne    c0021622 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002161b:	b8 04 00 00 00       	mov    eax,0x4
c0021620:	eb 3d                	jmp    c002165f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021622:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021626:	50                   	push   eax
c0021627:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002162b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002162f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021633:	e8 80 3d fe ff       	call   c00053b8 <f_read>
c0021638:	83 c4 10             	add    esp,0x10
c002163b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002163f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021643:	89 c2                	mov    edx,eax
c0021645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021649:	89 10                	mov    DWORD PTR [eax],edx
c002164b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002164f:	85 c0                	test   eax,eax
c0021651:	75 07                	jne    c002165a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0021653:	b8 00 00 00 00       	mov    eax,0x0
c0021658:	eb 05                	jmp    c002165f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002165a:	b8 01 00 00 00       	mov    eax,0x1
c002165f:	83 c4 1c             	add    esp,0x1c
c0021662:	c3                   	ret    
c0021663:	90                   	nop

c0021664 <FAT::write(void*, unsigned long, void*, int*)>:
c0021664:	83 ec 1c             	sub    esp,0x1c
c0021667:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002166c:	74 07                	je     c0021675 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002166e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021673:	75 07                	jne    c002167c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0021675:	b8 04 00 00 00       	mov    eax,0x4
c002167a:	eb 3d                	jmp    c00216b9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002167c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021680:	50                   	push   eax
c0021681:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021685:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021689:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002168d:	e8 a6 3f fe ff       	call   c0005638 <f_write>
c0021692:	83 c4 10             	add    esp,0x10
c0021695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002169d:	89 c2                	mov    edx,eax
c002169f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00216a3:	89 10                	mov    DWORD PTR [eax],edx
c00216a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216a9:	85 c0                	test   eax,eax
c00216ab:	75 07                	jne    c00216b4 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00216ad:	b8 00 00 00 00       	mov    eax,0x0
c00216b2:	eb 05                	jmp    c00216b9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00216b4:	b8 01 00 00 00       	mov    eax,0x1
c00216b9:	83 c4 1c             	add    esp,0x1c
c00216bc:	c3                   	ret    
c00216bd:	90                   	nop

c00216be <FAT::close(void*)>:
c00216be:	83 ec 1c             	sub    esp,0x1c
c00216c1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00216c6:	75 07                	jne    c00216cf <FAT::close(void*)+0x11>
c00216c8:	b8 04 00 00 00       	mov    eax,0x4
c00216cd:	eb 36                	jmp    c0021705 <FAT::close(void*)+0x47>
c00216cf:	83 ec 0c             	sub    esp,0xc
c00216d2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00216d6:	e8 f3 43 fe ff       	call   c0005ace <f_close>
c00216db:	83 c4 10             	add    esp,0x10
c00216de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00216e2:	83 ec 0c             	sub    esp,0xc
c00216e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00216e9:	e8 e2 e1 fe ff       	call   c000f8d0 <free>
c00216ee:	83 c4 10             	add    esp,0x10
c00216f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216f5:	85 c0                	test   eax,eax
c00216f7:	75 07                	jne    c0021700 <FAT::close(void*)+0x42>
c00216f9:	b8 00 00 00 00       	mov    eax,0x0
c00216fe:	eb 05                	jmp    c0021705 <FAT::close(void*)+0x47>
c0021700:	b8 01 00 00 00       	mov    eax,0x1
c0021705:	83 c4 1c             	add    esp,0x1c
c0021708:	c3                   	ret    
c0021709:	90                   	nop

c002170a <FAT::closeDir(void*)>:
c002170a:	83 ec 1c             	sub    esp,0x1c
c002170d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021712:	75 07                	jne    c002171b <FAT::closeDir(void*)+0x11>
c0021714:	b8 04 00 00 00       	mov    eax,0x4
c0021719:	eb 36                	jmp    c0021751 <FAT::closeDir(void*)+0x47>
c002171b:	83 ec 0c             	sub    esp,0xc
c002171e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021722:	e8 8f 49 fe ff       	call   c00060b6 <f_closedir>
c0021727:	83 c4 10             	add    esp,0x10
c002172a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002172e:	83 ec 0c             	sub    esp,0xc
c0021731:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021735:	e8 96 e1 fe ff       	call   c000f8d0 <free>
c002173a:	83 c4 10             	add    esp,0x10
c002173d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021741:	85 c0                	test   eax,eax
c0021743:	75 07                	jne    c002174c <FAT::closeDir(void*)+0x42>
c0021745:	b8 00 00 00 00       	mov    eax,0x0
c002174a:	eb 05                	jmp    c0021751 <FAT::closeDir(void*)+0x47>
c002174c:	b8 01 00 00 00       	mov    eax,0x1
c0021751:	83 c4 1c             	add    esp,0x1c
c0021754:	c3                   	ret    
c0021755:	90                   	nop

c0021756 <FAT::seek(void*, unsigned long long)>:
c0021756:	83 ec 2c             	sub    esp,0x2c
c0021759:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002175d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021761:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021765:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021769:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002176e:	75 07                	jne    c0021777 <FAT::seek(void*, unsigned long long)+0x21>
c0021770:	b8 04 00 00 00       	mov    eax,0x4
c0021775:	eb 2f                	jmp    c00217a6 <FAT::seek(void*, unsigned long long)+0x50>
c0021777:	83 ec 04             	sub    esp,0x4
c002177a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002177e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021782:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0021786:	e8 72 43 fe ff       	call   c0005afd <f_lseek>
c002178b:	83 c4 10             	add    esp,0x10
c002178e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021792:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021796:	85 c0                	test   eax,eax
c0021798:	75 07                	jne    c00217a1 <FAT::seek(void*, unsigned long long)+0x4b>
c002179a:	b8 00 00 00 00       	mov    eax,0x0
c002179f:	eb 05                	jmp    c00217a6 <FAT::seek(void*, unsigned long long)+0x50>
c00217a1:	b8 01 00 00 00       	mov    eax,0x1
c00217a6:	83 c4 2c             	add    esp,0x2c
c00217a9:	c3                   	ret    

c00217aa <fatWrapperReadDisk>:
c00217aa:	83 ec 1c             	sub    esp,0x1c
c00217ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217b1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00217b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00217b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00217bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00217c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00217c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00217c9:	8b 04 85 20 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd08e0]
c00217d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00217d4:	83 ec 0c             	sub    esp,0xc
c00217d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00217db:	52                   	push   edx
c00217dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00217e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00217e4:	50                   	push   eax
c00217e5:	e8 26 50 ff ff       	call   c0016810 <LogicalDisk::read(unsigned long long, int, void*)>
c00217ea:	83 c4 20             	add    esp,0x20
c00217ed:	83 c4 1c             	add    esp,0x1c
c00217f0:	c3                   	ret    

c00217f1 <fatWrapperWriteDisk>:
c00217f1:	83 ec 1c             	sub    esp,0x1c
c00217f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00217fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021800:	89 04 24             	mov    DWORD PTR [esp],eax
c0021803:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021807:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002180b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021810:	8b 04 85 20 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd08e0]
c0021817:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002181b:	83 ec 0c             	sub    esp,0xc
c002181e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021822:	52                   	push   edx
c0021823:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002182b:	50                   	push   eax
c002182c:	e8 4b 50 ff ff       	call   c001687c <LogicalDisk::write(unsigned long long, int, void*)>
c0021831:	83 c4 20             	add    esp,0x20
c0021834:	83 c4 1c             	add    esp,0x1c
c0021837:	c3                   	ret    

c0021838 <fatWrapperIoctl>:
c0021838:	53                   	push   ebx
c0021839:	83 ec 28             	sub    esp,0x28
c002183c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021840:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021844:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021848:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002184c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021851:	75 31                	jne    c0021884 <fatWrapperIoctl+0x4c>
c0021853:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021857:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002185b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021860:	8b 04 85 20 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd08e0]
c0021867:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002186d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021873:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021877:	66 89 02             	mov    WORD PTR [edx],ax
c002187a:	b8 00 00 00 00       	mov    eax,0x0
c002187f:	e9 b2 00 00 00       	jmp    c0021936 <fatWrapperIoctl+0xfe>
c0021884:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0021889:	75 6a                	jne    c00218f5 <fatWrapperIoctl+0xbd>
c002188b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002188f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021893:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021898:	8b 04 85 20 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd08e0]
c002189f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00218a5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00218ab:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00218b1:	89 c8                	mov    eax,ecx
c00218b3:	89 da                	mov    edx,ebx
c00218b5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00218b9:	c1 e0 0a             	shl    eax,0xa
c00218bc:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00218c1:	8b 0c 8d 20 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd08e0]
c00218c8:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00218ce:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00218d4:	89 cb                	mov    ebx,ecx
c00218d6:	c1 fb 1f             	sar    ebx,0x1f
c00218d9:	53                   	push   ebx
c00218da:	51                   	push   ecx
c00218db:	52                   	push   edx
c00218dc:	50                   	push   eax
c00218dd:	e8 a2 5b 00 00       	call   c0027484 <__udivdi3>
c00218e2:	83 c4 10             	add    esp,0x10
c00218e5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00218e9:	89 01                	mov    DWORD PTR [ecx],eax
c00218eb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00218ee:	b8 00 00 00 00       	mov    eax,0x0
c00218f3:	eb 41                	jmp    c0021936 <fatWrapperIoctl+0xfe>
c00218f5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00218fa:	75 07                	jne    c0021903 <fatWrapperIoctl+0xcb>
c00218fc:	b8 00 00 00 00       	mov    eax,0x0
c0021901:	eb 33                	jmp    c0021936 <fatWrapperIoctl+0xfe>
c0021903:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021908:	75 19                	jne    c0021923 <fatWrapperIoctl+0xeb>
c002190a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002190e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021912:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021916:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002191c:	b8 00 00 00 00       	mov    eax,0x0
c0021921:	eb 13                	jmp    c0021936 <fatWrapperIoctl+0xfe>
c0021923:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021928:	75 07                	jne    c0021931 <fatWrapperIoctl+0xf9>
c002192a:	b8 00 00 00 00       	mov    eax,0x0
c002192f:	eb 05                	jmp    c0021936 <fatWrapperIoctl+0xfe>
c0021931:	b8 04 00 00 00       	mov    eax,0x4
c0021936:	83 c4 28             	add    esp,0x28
c0021939:	5b                   	pop    ebx
c002193a:	c3                   	ret    
c002193b:	90                   	nop

c002193c <FAT::FAT()>:
c002193c:	83 ec 1c             	sub    esp,0x1c
c002193f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021943:	83 ec 0c             	sub    esp,0xc
c0021946:	50                   	push   eax
c0021947:	e8 4e 18 ff ff       	call   c001319a <Filesystem::Filesystem()>
c002194c:	83 c4 10             	add    esp,0x10
c002194f:	ba 5c d5 02 c0       	mov    edx,0xc002d55c
c0021954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021958:	89 10                	mov    DWORD PTR [eax],edx
c002195a:	c7 05 40 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032740,0x0
c0021964:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002196c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021971:	7f 15                	jg     c0021988 <FAT::FAT()+0x4c>
c0021973:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021977:	c7 04 85 60 27 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd8a0],0xffffffff
c0021982:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021986:	eb e4                	jmp    c002196c <FAT::FAT()+0x30>
c0021988:	90                   	nop
c0021989:	83 c4 1c             	add    esp,0x1c
c002198c:	c3                   	ret    
c002198d:	90                   	nop

c002198e <FAT::fixFilepath(char*)>:
c002198e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021992:	8a 00                	mov    al,BYTE PTR [eax]
c0021994:	3c 40                	cmp    al,0x40
c0021996:	7e 2c                	jle    c00219c4 <FAT::fixFilepath(char*)+0x36>
c0021998:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002199c:	8a 00                	mov    al,BYTE PTR [eax]
c002199e:	83 e8 41             	sub    eax,0x41
c00219a1:	88 c2                	mov    dl,al
c00219a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219a7:	88 10                	mov    BYTE PTR [eax],dl
c00219a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219ad:	8a 00                	mov    al,BYTE PTR [eax]
c00219af:	0f be c0             	movsx  eax,al
c00219b2:	8b 04 85 60 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8a0]
c00219b9:	83 c0 30             	add    eax,0x30
c00219bc:	88 c2                	mov    dl,al
c00219be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219c2:	88 10                	mov    BYTE PTR [eax],dl
c00219c4:	90                   	nop
c00219c5:	c3                   	ret    

c00219c6 <FAT::open(char const*, void**, FileOpenMode)>:
c00219c6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00219cc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00219d4:	74 0a                	je     c00219e0 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00219d6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00219de:	75 0a                	jne    c00219ea <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00219e0:	b8 04 00 00 00       	mov    eax,0x4
c00219e5:	e9 fd 00 00 00       	jmp    c0021ae7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00219ea:	83 ec 08             	sub    esp,0x8
c00219ed:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00219f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00219f8:	50                   	push   eax
c00219f9:	e8 2a ee fd ff       	call   c0000828 <strcpy>
c00219fe:	83 c4 10             	add    esp,0x10
c0021a01:	83 ec 08             	sub    esp,0x8
c0021a04:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021a08:	50                   	push   eax
c0021a09:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a10:	e8 79 ff ff ff       	call   c002198e <FAT::fixFilepath(char*)>
c0021a15:	83 c4 10             	add    esp,0x10
c0021a18:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021a20:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a27:	83 e0 01             	and    eax,0x1
c0021a2a:	74 08                	je     c0021a34 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021a2c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021a34:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a3b:	83 e0 04             	and    eax,0x4
c0021a3e:	74 10                	je     c0021a50 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021a40:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021a48:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021a50:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a57:	83 e0 02             	and    eax,0x2
c0021a5a:	74 08                	je     c0021a64 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021a5c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021a64:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a6b:	83 e0 08             	and    eax,0x8
c0021a6e:	74 08                	je     c0021a78 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021a70:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021a78:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a7f:	83 e0 10             	and    eax,0x10
c0021a82:	74 08                	je     c0021a8c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021a84:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021a8c:	83 ec 0c             	sub    esp,0xc
c0021a8f:	68 50 02 00 00       	push   0x250
c0021a94:	e8 27 de fe ff       	call   c000f8c0 <malloc>
c0021a99:	83 c4 10             	add    esp,0x10
c0021a9c:	89 c2                	mov    edx,eax
c0021a9e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021aa5:	89 10                	mov    DWORD PTR [eax],edx
c0021aa7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021aaf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021ab6:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ab8:	83 ec 04             	sub    esp,0x4
c0021abb:	52                   	push   edx
c0021abc:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021ac0:	52                   	push   edx
c0021ac1:	50                   	push   eax
c0021ac2:	e8 b5 34 fe ff       	call   c0004f7c <f_open>
c0021ac7:	83 c4 10             	add    esp,0x10
c0021aca:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021ad1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021ad9:	74 07                	je     c0021ae2 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021adb:	b8 01 00 00 00       	mov    eax,0x1
c0021ae0:	eb 05                	jmp    c0021ae7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021ae2:	b8 00 00 00 00       	mov    eax,0x0
c0021ae7:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021aed:	c3                   	ret    

c0021aee <FAT::openDir(char const*, void**)>:
c0021aee:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021af4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021afc:	74 0a                	je     c0021b08 <FAT::openDir(char const*, void**)+0x1a>
c0021afe:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021b06:	75 07                	jne    c0021b0f <FAT::openDir(char const*, void**)+0x21>
c0021b08:	b8 04 00 00 00       	mov    eax,0x4
c0021b0d:	eb 7d                	jmp    c0021b8c <FAT::openDir(char const*, void**)+0x9e>
c0021b0f:	83 ec 08             	sub    esp,0x8
c0021b12:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021b19:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b1d:	50                   	push   eax
c0021b1e:	e8 05 ed fd ff       	call   c0000828 <strcpy>
c0021b23:	83 c4 10             	add    esp,0x10
c0021b26:	83 ec 08             	sub    esp,0x8
c0021b29:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b2d:	50                   	push   eax
c0021b2e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021b35:	e8 54 fe ff ff       	call   c002198e <FAT::fixFilepath(char*)>
c0021b3a:	83 c4 10             	add    esp,0x10
c0021b3d:	83 ec 0c             	sub    esp,0xc
c0021b40:	6a 4c                	push   0x4c
c0021b42:	e8 79 dd fe ff       	call   c000f8c0 <malloc>
c0021b47:	83 c4 10             	add    esp,0x10
c0021b4a:	89 c2                	mov    edx,eax
c0021b4c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021b53:	89 10                	mov    DWORD PTR [eax],edx
c0021b55:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b5e:	83 ec 08             	sub    esp,0x8
c0021b61:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021b65:	52                   	push   edx
c0021b66:	50                   	push   eax
c0021b67:	e8 48 44 fe ff       	call   c0005fb4 <f_opendir>
c0021b6c:	83 c4 10             	add    esp,0x10
c0021b6f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021b76:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021b7e:	74 07                	je     c0021b87 <FAT::openDir(char const*, void**)+0x99>
c0021b80:	b8 01 00 00 00       	mov    eax,0x1
c0021b85:	eb 05                	jmp    c0021b8c <FAT::openDir(char const*, void**)+0x9e>
c0021b87:	b8 00 00 00 00       	mov    eax,0x0
c0021b8c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021b92:	c3                   	ret    
c0021b93:	90                   	nop

c0021b94 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021b94:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021b9a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021ba2:	75 0a                	jne    c0021bae <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021ba4:	b8 04 00 00 00       	mov    eax,0x4
c0021ba9:	e9 c9 00 00 00       	jmp    c0021c77 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021bae:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021bb6:	75 0a                	jne    c0021bc2 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021bb8:	b8 04 00 00 00       	mov    eax,0x4
c0021bbd:	e9 b5 00 00 00       	jmp    c0021c77 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021bc2:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021bca:	75 0a                	jne    c0021bd6 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021bcc:	b8 04 00 00 00       	mov    eax,0x4
c0021bd1:	e9 a1 00 00 00       	jmp    c0021c77 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021bd6:	83 ec 08             	sub    esp,0x8
c0021bd9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021be0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021be7:	50                   	push   eax
c0021be8:	e8 3b ec fd ff       	call   c0000828 <strcpy>
c0021bed:	83 c4 10             	add    esp,0x10
c0021bf0:	83 ec 08             	sub    esp,0x8
c0021bf3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021bfa:	50                   	push   eax
c0021bfb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021c02:	e8 87 fd ff ff       	call   c002198e <FAT::fixFilepath(char*)>
c0021c07:	83 c4 10             	add    esp,0x10
c0021c0a:	83 ec 08             	sub    esp,0x8
c0021c0d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021c11:	50                   	push   eax
c0021c12:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021c19:	50                   	push   eax
c0021c1a:	e8 54 45 fe ff       	call   c0006173 <f_stat>
c0021c1f:	83 c4 10             	add    esp,0x10
c0021c22:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021c29:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021c30:	85 c0                	test   eax,eax
c0021c32:	74 07                	je     c0021c3b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021c34:	83 f8 04             	cmp    eax,0x4
c0021c37:	74 32                	je     c0021c6b <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021c39:	eb 37                	jmp    c0021c72 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021c3b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021c3f:	0f b6 c0             	movzx  eax,al
c0021c42:	83 e0 10             	and    eax,0x10
c0021c45:	0f 95 c2             	setne  dl
c0021c48:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021c4f:	88 10                	mov    BYTE PTR [eax],dl
c0021c51:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021c54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021c58:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021c5f:	89 01                	mov    DWORD PTR [ecx],eax
c0021c61:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021c64:	b8 00 00 00 00       	mov    eax,0x0
c0021c69:	eb 0c                	jmp    c0021c77 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021c6b:	b8 02 00 00 00       	mov    eax,0x2
c0021c70:	eb 05                	jmp    c0021c77 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021c72:	b8 01 00 00 00       	mov    eax,0x1
c0021c77:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021c7d:	c3                   	ret    

c0021c7e <FAT::unlink(char const*)>:
c0021c7e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c84:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021c8c:	75 07                	jne    c0021c95 <FAT::unlink(char const*)+0x17>
c0021c8e:	b8 04 00 00 00       	mov    eax,0x4
c0021c93:	eb 5c                	jmp    c0021cf1 <FAT::unlink(char const*)+0x73>
c0021c95:	83 ec 08             	sub    esp,0x8
c0021c98:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c9f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ca3:	50                   	push   eax
c0021ca4:	e8 7f eb fd ff       	call   c0000828 <strcpy>
c0021ca9:	83 c4 10             	add    esp,0x10
c0021cac:	83 ec 08             	sub    esp,0x8
c0021caf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021cb3:	50                   	push   eax
c0021cb4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021cbb:	e8 ce fc ff ff       	call   c002198e <FAT::fixFilepath(char*)>
c0021cc0:	83 c4 10             	add    esp,0x10
c0021cc3:	83 ec 0c             	sub    esp,0xc
c0021cc6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021cca:	50                   	push   eax
c0021ccb:	e8 f5 47 fe ff       	call   c00064c5 <f_unlink>
c0021cd0:	83 c4 10             	add    esp,0x10
c0021cd3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021cda:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021ce1:	85 c0                	test   eax,eax
c0021ce3:	75 07                	jne    c0021cec <FAT::unlink(char const*)+0x6e>
c0021ce5:	b8 00 00 00 00       	mov    eax,0x0
c0021cea:	eb 05                	jmp    c0021cf1 <FAT::unlink(char const*)+0x73>
c0021cec:	b8 01 00 00 00       	mov    eax,0x1
c0021cf1:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021cf7:	c3                   	ret    

c0021cf8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021cf8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021cfe:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021d05:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021d0c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021d10:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021d14:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021d1c:	75 0a                	jne    c0021d28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021d1e:	b8 04 00 00 00       	mov    eax,0x4
c0021d23:	e9 1c 01 00 00       	jmp    c0021e44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021d28:	83 ec 08             	sub    esp,0x8
c0021d2b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021d32:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021d36:	50                   	push   eax
c0021d37:	e8 ec ea fd ff       	call   c0000828 <strcpy>
c0021d3c:	83 c4 10             	add    esp,0x10
c0021d3f:	83 ec 08             	sub    esp,0x8
c0021d42:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021d46:	50                   	push   eax
c0021d47:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021d4e:	e8 3b fc ff ff       	call   c002198e <FAT::fixFilepath(char*)>
c0021d53:	83 c4 10             	add    esp,0x10
c0021d56:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021d5e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021d66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021d6b:	83 e0 01             	and    eax,0x1
c0021d6e:	74 08                	je     c0021d78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021d70:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021d78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021d7d:	83 e0 02             	and    eax,0x2
c0021d80:	74 08                	je     c0021d8a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021d82:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021d8a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021d8f:	83 e0 04             	and    eax,0x4
c0021d92:	74 08                	je     c0021d9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021d94:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021d9c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021da1:	83 e0 08             	and    eax,0x8
c0021da4:	74 08                	je     c0021dae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021da6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021dae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021db3:	83 e0 01             	and    eax,0x1
c0021db6:	74 08                	je     c0021dc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021db8:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021dc0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021dc5:	83 e0 02             	and    eax,0x2
c0021dc8:	74 08                	je     c0021dd2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021dca:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021dd2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021dd7:	83 e0 04             	and    eax,0x4
c0021dda:	74 08                	je     c0021de4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021ddc:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021de4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021de9:	83 e0 08             	and    eax,0x8
c0021dec:	74 08                	je     c0021df6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021dee:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021df6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021dfd:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021e04:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021e0c:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021e14:	83 ec 04             	sub    esp,0x4
c0021e17:	52                   	push   edx
c0021e18:	50                   	push   eax
c0021e19:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021e1d:	50                   	push   eax
c0021e1e:	e8 44 4d fe ff       	call   c0006b67 <f_chmod>
c0021e23:	83 c4 10             	add    esp,0x10
c0021e26:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021e2d:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021e34:	85 c0                	test   eax,eax
c0021e36:	75 07                	jne    c0021e3f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021e38:	b8 00 00 00 00       	mov    eax,0x0
c0021e3d:	eb 05                	jmp    c0021e44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021e3f:	b8 01 00 00 00       	mov    eax,0x1
c0021e44:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021e4a:	c3                   	ret    
c0021e4b:	90                   	nop

c0021e4c <FAT::rename(char const*, char const*)>:
c0021e4c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021e52:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021e5a:	74 0a                	je     c0021e66 <FAT::rename(char const*, char const*)+0x1a>
c0021e5c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021e64:	75 0a                	jne    c0021e70 <FAT::rename(char const*, char const*)+0x24>
c0021e66:	b8 04 00 00 00       	mov    eax,0x4
c0021e6b:	e9 98 00 00 00       	jmp    c0021f08 <FAT::rename(char const*, char const*)+0xbc>
c0021e70:	83 ec 08             	sub    esp,0x8
c0021e73:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021e7a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021e81:	50                   	push   eax
c0021e82:	e8 a1 e9 fd ff       	call   c0000828 <strcpy>
c0021e87:	83 c4 10             	add    esp,0x10
c0021e8a:	83 ec 08             	sub    esp,0x8
c0021e8d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021e94:	50                   	push   eax
c0021e95:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021e9c:	e8 ed fa ff ff       	call   c002198e <FAT::fixFilepath(char*)>
c0021ea1:	83 c4 10             	add    esp,0x10
c0021ea4:	83 ec 08             	sub    esp,0x8
c0021ea7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021eae:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021eb2:	50                   	push   eax
c0021eb3:	e8 70 e9 fd ff       	call   c0000828 <strcpy>
c0021eb8:	83 c4 10             	add    esp,0x10
c0021ebb:	83 ec 08             	sub    esp,0x8
c0021ebe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ec2:	50                   	push   eax
c0021ec3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021eca:	e8 bf fa ff ff       	call   c002198e <FAT::fixFilepath(char*)>
c0021ecf:	83 c4 10             	add    esp,0x10
c0021ed2:	83 ec 08             	sub    esp,0x8
c0021ed5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ed9:	50                   	push   eax
c0021eda:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021ee1:	50                   	push   eax
c0021ee2:	e8 8d 49 fe ff       	call   c0006874 <f_rename>
c0021ee7:	83 c4 10             	add    esp,0x10
c0021eea:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021ef1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021ef8:	85 c0                	test   eax,eax
c0021efa:	75 07                	jne    c0021f03 <FAT::rename(char const*, char const*)+0xb7>
c0021efc:	b8 00 00 00 00       	mov    eax,0x0
c0021f01:	eb 05                	jmp    c0021f08 <FAT::rename(char const*, char const*)+0xbc>
c0021f03:	b8 01 00 00 00       	mov    eax,0x1
c0021f08:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021f0e:	c3                   	ret    
c0021f0f:	90                   	nop

c0021f10 <FAT::mkdir(char const*)>:
c0021f10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021f16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021f1e:	75 07                	jne    c0021f27 <FAT::mkdir(char const*)+0x17>
c0021f20:	b8 04 00 00 00       	mov    eax,0x4
c0021f25:	eb 5c                	jmp    c0021f83 <FAT::mkdir(char const*)+0x73>
c0021f27:	83 ec 08             	sub    esp,0x8
c0021f2a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021f31:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f35:	50                   	push   eax
c0021f36:	e8 ed e8 fd ff       	call   c0000828 <strcpy>
c0021f3b:	83 c4 10             	add    esp,0x10
c0021f3e:	83 ec 08             	sub    esp,0x8
c0021f41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f45:	50                   	push   eax
c0021f46:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021f4d:	e8 3c fa ff ff       	call   c002198e <FAT::fixFilepath(char*)>
c0021f52:	83 c4 10             	add    esp,0x10
c0021f55:	83 ec 0c             	sub    esp,0xc
c0021f58:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f5c:	50                   	push   eax
c0021f5d:	e8 e6 46 fe ff       	call   c0006648 <f_mkdir>
c0021f62:	83 c4 10             	add    esp,0x10
c0021f65:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021f6c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021f73:	85 c0                	test   eax,eax
c0021f75:	75 07                	jne    c0021f7e <FAT::mkdir(char const*)+0x6e>
c0021f77:	b8 00 00 00 00       	mov    eax,0x0
c0021f7c:	eb 05                	jmp    c0021f83 <FAT::mkdir(char const*)+0x73>
c0021f7e:	b8 01 00 00 00       	mov    eax,0x1
c0021f83:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f89:	c3                   	ret    

c0021f8a <FAT::exists(char const*)>:
c0021f8a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021f90:	83 ec 08             	sub    esp,0x8
c0021f93:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021f9a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021f9e:	50                   	push   eax
c0021f9f:	e8 84 e8 fd ff       	call   c0000828 <strcpy>
c0021fa4:	83 c4 10             	add    esp,0x10
c0021fa7:	83 ec 08             	sub    esp,0x8
c0021faa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021fae:	50                   	push   eax
c0021faf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021fb6:	e8 d3 f9 ff ff       	call   c002198e <FAT::fixFilepath(char*)>
c0021fbb:	83 c4 10             	add    esp,0x10
c0021fbe:	83 ec 08             	sub    esp,0x8
c0021fc1:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021fc8:	50                   	push   eax
c0021fc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021fcd:	50                   	push   eax
c0021fce:	e8 a0 41 fe ff       	call   c0006173 <f_stat>
c0021fd3:	83 c4 10             	add    esp,0x10
c0021fd6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021fdd:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021fe4:	85 c0                	test   eax,eax
c0021fe6:	75 04                	jne    c0021fec <FAT::exists(char const*)+0x62>
c0021fe8:	b0 01                	mov    al,0x1
c0021fea:	eb 02                	jmp    c0021fee <FAT::exists(char const*)+0x64>
c0021fec:	b0 00                	mov    al,0x0
c0021fee:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021ff4:	c3                   	ret    
c0021ff5:	90                   	nop

c0021ff6 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021ff6:	b8 08 00 00 00       	mov    eax,0x8
c0021ffb:	c3                   	ret    

c0021ffc <ISO9660::seek(void*, unsigned long long)>:
c0021ffc:	53                   	push   ebx
c0021ffd:	b8 04 00 00 00       	mov    eax,0x4
c0022002:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022006:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002200a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002200e:	85 d2                	test   edx,edx
c0022010:	74 17                	je     c0022029 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0022012:	89 c8                	mov    eax,ecx
c0022014:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0022017:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002201a:	b8 01 00 00 00       	mov    eax,0x1
c002201f:	73 08                	jae    c0022029 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0022021:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0022024:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0022027:	31 c0                	xor    eax,eax
c0022029:	5b                   	pop    ebx
c002202a:	c3                   	ret    
c002202b:	90                   	nop

c002202c <ISO9660::tell(void*, unsigned long long*)>:
c002202c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022030:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022034:	85 d2                	test   edx,edx
c0022036:	74 12                	je     c002204a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0022038:	85 c0                	test   eax,eax
c002203a:	74 0e                	je     c002204a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002203c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002203f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0022042:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0022045:	89 10                	mov    DWORD PTR [eax],edx
c0022047:	31 c0                	xor    eax,eax
c0022049:	c3                   	ret    
c002204a:	b8 04 00 00 00       	mov    eax,0x4
c002204f:	c3                   	ret    

c0022050 <ISO9660::getName()>:
c0022050:	b8 bc d5 02 c0       	mov    eax,0xc002d5bc
c0022055:	c3                   	ret    

c0022056 <ISO9660::stat(void*, unsigned long long*)>:
c0022056:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002205a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002205e:	85 d2                	test   edx,edx
c0022060:	74 12                	je     c0022074 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0022062:	85 c0                	test   eax,eax
c0022064:	74 0e                	je     c0022074 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0022066:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0022069:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002206c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002206f:	89 10                	mov    DWORD PTR [eax],edx
c0022071:	31 c0                	xor    eax,eax
c0022073:	c3                   	ret    
c0022074:	b8 04 00 00 00       	mov    eax,0x4
c0022079:	c3                   	ret    

c002207a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002207a:	b8 01 00 00 00       	mov    eax,0x1
c002207f:	c3                   	ret    

c0022080 <ISO9660::unlink(char const*)>:
c0022080:	b8 01 00 00 00       	mov    eax,0x1
c0022085:	c3                   	ret    

c0022086 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0022086:	b8 01 00 00 00       	mov    eax,0x1
c002208b:	c3                   	ret    

c002208c <ISO9660::rename(char const*, char const*)>:
c002208c:	b8 01 00 00 00       	mov    eax,0x1
c0022091:	c3                   	ret    

c0022092 <ISO9660::mkdir(char const*)>:
c0022092:	b8 01 00 00 00       	mov    eax,0x1
c0022097:	c3                   	ret    

c0022098 <ISO9660::close(void*)>:
c0022098:	83 ec 0c             	sub    esp,0xc
c002209b:	b8 04 00 00 00       	mov    eax,0x4
c00220a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220a4:	85 d2                	test   edx,edx
c00220a6:	74 0e                	je     c00220b6 <ISO9660::close(void*)+0x1e>
c00220a8:	83 ec 0c             	sub    esp,0xc
c00220ab:	52                   	push   edx
c00220ac:	e8 1f d8 fe ff       	call   c000f8d0 <free>
c00220b1:	83 c4 10             	add    esp,0x10
c00220b4:	31 c0                	xor    eax,eax
c00220b6:	83 c4 0c             	add    esp,0xc
c00220b9:	c3                   	ret    

c00220ba <ISO9660::closeDir(void*)>:
c00220ba:	83 ec 0c             	sub    esp,0xc
c00220bd:	b8 04 00 00 00       	mov    eax,0x4
c00220c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220c6:	85 d2                	test   edx,edx
c00220c8:	74 0e                	je     c00220d8 <ISO9660::closeDir(void*)+0x1e>
c00220ca:	83 ec 0c             	sub    esp,0xc
c00220cd:	52                   	push   edx
c00220ce:	e8 fd d7 fe ff       	call   c000f8d0 <free>
c00220d3:	83 c4 10             	add    esp,0x10
c00220d6:	31 c0                	xor    eax,eax
c00220d8:	83 c4 0c             	add    esp,0xc
c00220db:	c3                   	ret    

c00220dc <ISO9660::~ISO9660()>:
c00220dc:	83 ec 0c             	sub    esp,0xc
c00220df:	ba 20 d6 02 c0       	mov    edx,0xc002d620
c00220e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220e8:	89 10                	mov    DWORD PTR [eax],edx
c00220ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220ee:	83 ec 0c             	sub    esp,0xc
c00220f1:	50                   	push   eax
c00220f2:	e8 c7 10 ff ff       	call   c00131be <Filesystem::~Filesystem()>
c00220f7:	83 c4 10             	add    esp,0x10
c00220fa:	90                   	nop
c00220fb:	83 c4 0c             	add    esp,0xc
c00220fe:	c3                   	ret    
c00220ff:	90                   	nop

c0022100 <ISO9660::~ISO9660()>:
c0022100:	83 ec 0c             	sub    esp,0xc
c0022103:	83 ec 0c             	sub    esp,0xc
c0022106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002210a:	e8 cd ff ff ff       	call   c00220dc <ISO9660::~ISO9660()>
c002210f:	83 c4 10             	add    esp,0x10
c0022112:	83 ec 08             	sub    esp,0x8
c0022115:	6a 08                	push   0x8
c0022117:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002211b:	e8 8f 0c ff ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0022120:	83 c4 10             	add    esp,0x10
c0022123:	83 c4 0c             	add    esp,0xc
c0022126:	c3                   	ret    

c0022127 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0022127:	55                   	push   ebp
c0022128:	31 c9                	xor    ecx,ecx
c002212a:	57                   	push   edi
c002212b:	56                   	push   esi
c002212c:	53                   	push   ebx
c002212d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0022131:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0022135:	89 eb                	mov    ebx,ebp
c0022137:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002213b:	39 ce                	cmp    esi,ecx
c002213d:	7e 17                	jle    c0022156 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002213f:	31 d2                	xor    edx,edx
c0022141:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0022145:	7d 13                	jge    c002215a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0022147:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002214b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002214e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0022151:	75 0d                	jne    c0022160 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0022153:	42                   	inc    edx
c0022154:	eb eb                	jmp    c0022141 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0022156:	31 c0                	xor    eax,eax
c0022158:	eb 0a                	jmp    c0022164 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002215a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002215e:	eb 04                	jmp    c0022164 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0022160:	41                   	inc    ecx
c0022161:	43                   	inc    ebx
c0022162:	eb d7                	jmp    c002213b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0022164:	5b                   	pop    ebx
c0022165:	5e                   	pop    esi
c0022166:	5f                   	pop    edi
c0022167:	5d                   	pop    ebp
c0022168:	c3                   	ret    

c0022169 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0022169:	53                   	push   ebx
c002216a:	83 ec 08             	sub    esp,0x8
c002216d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022171:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022175:	39 0d 40 28 03 c0    	cmp    DWORD PTR ds:0xc0032840,ecx
c002217b:	75 08                	jne    c0022185 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1c>
c002217d:	38 05 94 e6 02 c0    	cmp    BYTE PTR ds:0xc002e694,al
c0022183:	74 2b                	je     c00221b0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x47>
c0022185:	83 ec 0c             	sub    esp,0xc
c0022188:	a2 94 e6 02 c0       	mov    ds:0xc002e694,al
c002218d:	68 60 28 03 c0       	push   0xc0032860
c0022192:	0f be c0             	movsx  eax,al
c0022195:	6a 01                	push   0x1
c0022197:	89 0d 40 28 03 c0    	mov    DWORD PTR ds:0xc0032840,ecx
c002219d:	31 db                	xor    ebx,ebx
c002219f:	53                   	push   ebx
c00221a0:	51                   	push   ecx
c00221a1:	ff 34 85 1c f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd09e4]
c00221a8:	e8 63 46 ff ff       	call   c0016810 <LogicalDisk::read(unsigned long long, int, void*)>
c00221ad:	83 c4 20             	add    esp,0x20
c00221b0:	31 c0                	xor    eax,eax
c00221b2:	8a 90 60 28 03 c0    	mov    dl,BYTE PTR [eax-0x3ffcd7a0]
c00221b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00221bc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00221bf:	40                   	inc    eax
c00221c0:	3d 00 08 00 00       	cmp    eax,0x800
c00221c5:	75 eb                	jne    c00221b2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x49>
c00221c7:	83 c4 08             	add    esp,0x8
c00221ca:	5b                   	pop    ebx
c00221cb:	c3                   	ret    

c00221cc <ISO9660::tryMount(LogicalDisk*, int)>:
c00221cc:	81 ec 10 08 00 00    	sub    esp,0x810
c00221d2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00221d9:	83 c0 41             	add    eax,0x41
c00221dc:	0f be c0             	movsx  eax,al
c00221df:	50                   	push   eax
c00221e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00221e4:	50                   	push   eax
c00221e5:	6a 10                	push   0x10
c00221e7:	e8 7d ff ff ff       	call   c0022169 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00221ec:	83 c4 10             	add    esp,0x10
c00221ef:	31 c0                	xor    eax,eax
c00221f1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00221f6:	75 1d                	jne    c0022215 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00221f8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00221fd:	75 16                	jne    c0022215 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00221ff:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0022204:	75 0f                	jne    c0022215 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022206:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002220b:	75 08                	jne    c0022215 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002220d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0022212:	0f 94 c0             	sete   al
c0022215:	81 c4 0c 08 00 00    	add    esp,0x80c
c002221b:	c3                   	ret    

c002221c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002221c:	55                   	push   ebp
c002221d:	57                   	push   edi
c002221e:	56                   	push   esi
c002221f:	53                   	push   ebx
c0022220:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0022226:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002222d:	85 ed                	test   ebp,ebp
c002222f:	0f 84 d7 01 00 00    	je     c002240c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f0>
c0022235:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002223d:	0f 84 c9 01 00 00    	je     c002240c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f0>
c0022243:	b8 01 00 00 00       	mov    eax,0x1
c0022248:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002224c:	0f 85 bf 01 00 00    	jne    c0022411 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f5>
c0022252:	31 d2                	xor    edx,edx
c0022254:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002225b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002225e:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0022261:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022265:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0022268:	89 04 24             	mov    DWORD PTR [esp],eax
c002226b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002226f:	01 f0                	add    eax,esi
c0022271:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0022274:	11 fa                	adc    edx,edi
c0022276:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002227a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002227e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022282:	19 d1                	sbb    ecx,edx
c0022284:	72 0a                	jb     c0022290 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0022286:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002228a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002228e:	eb 13                	jmp    c00222a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0022290:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022294:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022298:	29 f0                	sub    eax,esi
c002229a:	19 fa                	sbb    edx,edi
c002229c:	89 04 24             	mov    DWORD PTR [esp],eax
c002229f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00222a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00222a6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00222a9:	0f a4 c2 0b          	shld   edx,eax,0xb
c00222ad:	51                   	push   ecx
c00222ae:	c1 e0 0b             	shl    eax,0xb
c00222b1:	01 c6                	add    esi,eax
c00222b3:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00222b7:	11 d7                	adc    edi,edx
c00222b9:	50                   	push   eax
c00222ba:	89 fa                	mov    edx,edi
c00222bc:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00222c0:	89 f0                	mov    eax,esi
c00222c2:	53                   	push   ebx
c00222c3:	0f ac d0 0b          	shrd   eax,edx,0xb
c00222c7:	50                   	push   eax
c00222c8:	e8 9c fe ff ff       	call   c0022169 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00222cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222d1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00222d4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00222d8:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00222de:	83 c4 10             	add    esp,0x10
c00222e1:	b8 00 08 00 00       	mov    eax,0x800
c00222e6:	29 d0                	sub    eax,edx
c00222e8:	39 c1                	cmp    ecx,eax
c00222ea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00222ee:	83 d9 00             	sbb    ecx,0x0
c00222f1:	7d 1c                	jge    c002230f <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00222f3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00222f8:	75 12                	jne    c002230c <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00222fa:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022301:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022307:	e9 fc 00 00 00       	jmp    c0022408 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ec>
c002230c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002230f:	01 d3                	add    ebx,edx
c0022311:	31 d2                	xor    edx,edx
c0022313:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0022317:	39 c2                	cmp    edx,eax
c0022319:	7d 14                	jge    c002232f <ISO9660::read(void*, unsigned long, void*, int*)+0x113>
c002231b:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0022322:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022326:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0022329:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002232c:	42                   	inc    edx
c002232d:	eb e8                	jmp    c0022317 <ISO9660::read(void*, unsigned long, void*, int*)+0xfb>
c002232f:	89 c3                	mov    ebx,eax
c0022331:	85 c0                	test   eax,eax
c0022333:	79 02                	jns    c0022337 <ISO9660::read(void*, unsigned long, void*, int*)+0x11b>
c0022335:	31 db                	xor    ebx,ebx
c0022337:	99                   	cdq    
c0022338:	01 c3                	add    ebx,eax
c002233a:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0022341:	01 c6                	add    esi,eax
c0022343:	11 d7                	adc    edi,edx
c0022345:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0022349:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002234d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0022350:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0022354:	29 c6                	sub    esi,eax
c0022356:	19 d7                	sbb    edi,edx
c0022358:	89 34 24             	mov    DWORD PTR [esp],esi
c002235b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002235f:	b8 ff 07 00 00       	mov    eax,0x7ff
c0022364:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0022367:	b8 00 00 00 00       	mov    eax,0x0
c002236c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0022370:	7d 3e                	jge    c00223b0 <ISO9660::read(void*, unsigned long, void*, int*)+0x194>
c0022372:	52                   	push   edx
c0022373:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022377:	50                   	push   eax
c0022378:	53                   	push   ebx
c0022379:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002237d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022381:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022385:	50                   	push   eax
c0022386:	e8 de fd ff ff       	call   c0022169 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002238b:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0022393:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0022398:	81 c3 00 08 00 00    	add    ebx,0x800
c002239e:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00223a6:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00223ab:	83 c4 10             	add    esp,0x10
c00223ae:	eb af                	jmp    c002235f <ISO9660::read(void*, unsigned long, void*, int*)+0x143>
c00223b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223b4:	0b 04 24             	or     eax,DWORD PTR [esp]
c00223b7:	74 34                	je     c00223ed <ISO9660::read(void*, unsigned long, void*, int*)+0x1d1>
c00223b9:	50                   	push   eax
c00223ba:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00223be:	50                   	push   eax
c00223bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00223c3:	50                   	push   eax
c00223c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00223c8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00223cc:	0f ac fe 0b          	shrd   esi,edi,0xb
c00223d0:	56                   	push   esi
c00223d1:	e8 93 fd ff ff       	call   c0022169 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00223d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223da:	31 c0                	xor    eax,eax
c00223dc:	83 c4 10             	add    esp,0x10
c00223df:	39 c1                	cmp    ecx,eax
c00223e1:	76 0a                	jbe    c00223ed <ISO9660::read(void*, unsigned long, void*, int*)+0x1d1>
c00223e3:	8a 54 04 20          	mov    dl,BYTE PTR [esp+eax*1+0x20]
c00223e7:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00223ea:	40                   	inc    eax
c00223eb:	eb f2                	jmp    c00223df <ISO9660::read(void*, unsigned long, void*, int*)+0x1c3>
c00223ed:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00223f4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00223f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00223fc:	89 38                	mov    DWORD PTR [eax],edi
c00223fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022402:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022405:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022408:	31 c0                	xor    eax,eax
c002240a:	eb 05                	jmp    c0022411 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f5>
c002240c:	b8 04 00 00 00       	mov    eax,0x4
c0022411:	81 c4 2c 08 00 00    	add    esp,0x82c
c0022417:	5b                   	pop    ebx
c0022418:	5e                   	pop    esi
c0022419:	5f                   	pop    edi
c002241a:	5d                   	pop    ebp
c002241b:	c3                   	ret    

c002241c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002241c:	55                   	push   ebp
c002241d:	57                   	push   edi
c002241e:	56                   	push   esi
c002241f:	53                   	push   ebx
c0022420:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0022426:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c002242d:	85 f6                	test   esi,esi
c002242f:	0f 84 5d 02 00 00    	je     c0022692 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x276>
c0022435:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002243d:	0f 84 4f 02 00 00    	je     c0022692 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x276>
c0022443:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0022446:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0022449:	75 0a                	jne    c0022455 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002244b:	b8 07 00 00 00       	mov    eax,0x7
c0022450:	e9 42 02 00 00       	jmp    c0022697 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c0022455:	50                   	push   eax
c0022456:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c002245a:	50                   	push   eax
c002245b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022462:	53                   	push   ebx
c0022463:	8b 06                	mov    eax,DWORD PTR [esi]
c0022465:	c1 e0 0b             	shl    eax,0xb
c0022468:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c002246b:	c1 e8 0b             	shr    eax,0xb
c002246e:	50                   	push   eax
c002246f:	e8 f5 fc ff ff       	call   c0022169 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022474:	8b 56 10             	mov    edx,DWORD PTR [esi+0x10]
c0022477:	83 c4 10             	add    esp,0x10
c002247a:	89 d0                	mov    eax,edx
c002247c:	8b 4e 14             	mov    ecx,DWORD PTR [esi+0x14]
c002247f:	25 ff 07 00 00       	and    eax,0x7ff
c0022484:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0022487:	84 db                	test   bl,bl
c0022489:	0f 85 86 00 00 00    	jne    c0022515 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xf9>
c002248f:	8d 82 ff 07 00 00    	lea    eax,[edx+0x7ff]
c0022495:	25 ff 07 00 00       	and    eax,0x7ff
c002249a:	29 d0                	sub    eax,edx
c002249c:	89 c5                	mov    ebp,eax
c002249e:	89 c7                	mov    edi,eax
c00224a0:	c1 fd 1f             	sar    ebp,0x1f
c00224a3:	01 c2                	add    edx,eax
c00224a5:	11 e9                	adc    ecx,ebp
c00224a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00224ab:	89 cb                	mov    ebx,ecx
c00224ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00224b1:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c00224b4:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00224b7:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c00224ba:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00224bd:	39 c8                	cmp    eax,ecx
c00224bf:	ba 00 00 00 00       	mov    edx,0x0
c00224c4:	89 e8                	mov    eax,ebp
c00224c6:	19 d8                	sbb    eax,ebx
c00224c8:	b8 00 00 00 00       	mov    eax,0x0
c00224cd:	73 08                	jae    c00224d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbb>
c00224cf:	89 c8                	mov    eax,ecx
c00224d1:	89 da                	mov    edx,ebx
c00224d3:	29 f8                	sub    eax,edi
c00224d5:	19 ea                	sbb    edx,ebp
c00224d7:	89 d3                	mov    ebx,edx
c00224d9:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00224dc:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00224df:	09 c3                	or     ebx,eax
c00224e1:	0f 84 64 ff ff ff    	je     c002244b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00224e7:	55                   	push   ebp
c00224e8:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00224ec:	50                   	push   eax
c00224ed:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00224f4:	53                   	push   ebx
c00224f5:	8b 16                	mov    edx,DWORD PTR [esi]
c00224f7:	c1 e2 0b             	shl    edx,0xb
c00224fa:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c00224fe:	c1 ea 0b             	shr    edx,0xb
c0022501:	52                   	push   edx
c0022502:	e8 62 fc ff ff       	call   c0022169 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022507:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002250a:	83 c4 10             	add    esp,0x10
c002250d:	25 ff 07 00 00       	and    eax,0x7ff
c0022512:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0022515:	57                   	push   edi
c0022516:	6a 28                	push   0x28
c0022518:	6a 00                	push   0x0
c002251a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002251e:	50                   	push   eax
c002251f:	e8 48 e2 fd ff       	call   c000076c <memset>
c0022524:	31 d2                	xor    edx,edx
c0022526:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0022529:	81 e7 ff 07 00 00    	and    edi,0x7ff
c002252f:	89 f8                	mov    eax,edi
c0022531:	83 c0 21             	add    eax,0x21
c0022534:	83 d2 00             	adc    edx,0x0
c0022537:	89 c7                	mov    edi,eax
c0022539:	89 d5                	mov    ebp,edx
c002253b:	83 c4 10             	add    esp,0x10
c002253e:	31 c9                	xor    ecx,ecx
c0022540:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0022547:	ba ff 07 00 00       	mov    edx,0x7ff
c002254c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022550:	39 fa                	cmp    edx,edi
c0022552:	ba 00 00 00 00       	mov    edx,0x0
c0022557:	19 ea                	sbb    edx,ebp
c0022559:	0f 92 c2             	setb   dl
c002255c:	83 f9 28             	cmp    ecx,0x28
c002255f:	88 d0                	mov    al,dl
c0022561:	0f 94 c2             	sete   dl
c0022564:	09 c2                	or     edx,eax
c0022566:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002256b:	0f 94 c0             	sete   al
c002256e:	08 d0                	or     al,dl
c0022570:	75 18                	jne    c002258a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16e>
c0022572:	80 7c 24 08 3b       	cmp    BYTE PTR [esp+0x8],0x3b
c0022577:	74 11                	je     c002258a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16e>
c0022579:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c002257d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0022581:	41                   	inc    ecx
c0022582:	83 c7 01             	add    edi,0x1
c0022585:	83 d5 00             	adc    ebp,0x0
c0022588:	eb b6                	jmp    c0022540 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x124>
c002258a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0022591:	83 ec 0c             	sub    esp,0xc
c0022594:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0022598:	57                   	push   edi
c0022599:	e8 ea e1 fd ff       	call   c0000788 <strlen>
c002259e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00225a6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00225aa:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c00225b1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00225b4:	5a                   	pop    edx
c00225b5:	25 ff 07 00 00       	and    eax,0x7ff
c00225ba:	01 c8                	add    eax,ecx
c00225bc:	59                   	pop    ecx
c00225bd:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00225c3:	83 e0 02             	and    eax,0x2
c00225c6:	3c 01                	cmp    al,0x1
c00225c8:	19 c0                	sbb    eax,eax
c00225ca:	83 c0 02             	add    eax,0x2
c00225cd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00225d1:	57                   	push   edi
c00225d2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00225d6:	50                   	push   eax
c00225d7:	e8 4c e2 fd ff       	call   c0000828 <strcpy>
c00225dc:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00225e0:	83 c4 10             	add    esp,0x10
c00225e3:	84 c0                	test   al,al
c00225e5:	75 21                	jne    c0022608 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ec>
c00225e7:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00225ef:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00225f7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00225ff:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0022606:	eb 28                	jmp    c0022630 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x214>
c0022608:	fe c8                	dec    al
c002260a:	75 24                	jne    c0022630 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x214>
c002260c:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0022614:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002261c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022624:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002262b:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0022630:	31 c0                	xor    eax,eax
c0022632:	3b 84 24 78 09 00 00 	cmp    eax,DWORD PTR [esp+0x978]
c0022639:	74 11                	je     c002264c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x230>
c002263b:	8a 4c 04 40          	mov    cl,BYTE PTR [esp+eax*1+0x40]
c002263f:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0022646:	88 0c 07             	mov    BYTE PTR [edi+eax*1],cl
c0022649:	40                   	inc    eax
c002264a:	eb e6                	jmp    c0022632 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x216>
c002264c:	0f b6 fb             	movzx  edi,bl
c002264f:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0022656:	31 db                	xor    ebx,ebx
c0022658:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002265e:	89 f9                	mov    ecx,edi
c0022660:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0022663:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0022666:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0022669:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002266c:	39 c7                	cmp    edi,eax
c002266e:	89 df                	mov    edi,ebx
c0022670:	19 d7                	sbb    edi,edx
c0022672:	72 10                	jb     c0022684 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0022674:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c002267b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0022682:	eb 0a                	jmp    c002268e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x272>
c0022684:	29 c8                	sub    eax,ecx
c0022686:	19 da                	sbb    edx,ebx
c0022688:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c002268b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002268e:	31 c0                	xor    eax,eax
c0022690:	eb 05                	jmp    c0022697 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c0022692:	b8 04 00 00 00       	mov    eax,0x4
c0022697:	81 c4 5c 09 00 00    	add    esp,0x95c
c002269d:	5b                   	pop    ebx
c002269e:	5e                   	pop    esi
c002269f:	5f                   	pop    edi
c00226a0:	5d                   	pop    ebp
c00226a1:	c3                   	ret    

c00226a2 <readRoot(unsigned int*, unsigned int*, char)>:
c00226a2:	81 ec 50 08 00 00    	sub    esp,0x850
c00226a8:	0f be 84 24 5c 08 00 00 	movsx  eax,BYTE PTR [esp+0x85c]
c00226b0:	50                   	push   eax
c00226b1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00226b5:	50                   	push   eax
c00226b6:	6a 10                	push   0x10
c00226b8:	e8 ac fa ff ff       	call   c0022169 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00226bd:	83 c4 10             	add    esp,0x10
c00226c0:	31 c0                	xor    eax,eax
c00226c2:	8a 8c 04 dc 00 00 00 	mov    cl,BYTE PTR [esp+eax*1+0xdc]
c00226c9:	88 4c 04 1e          	mov    BYTE PTR [esp+eax*1+0x1e],cl
c00226cd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00226d1:	40                   	inc    eax
c00226d2:	83 f8 22             	cmp    eax,0x22
c00226d5:	75 eb                	jne    c00226c2 <readRoot(unsigned int*, unsigned int*, char)+0x20>
c00226d7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00226de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00226e2:	89 10                	mov    DWORD PTR [eax],edx
c00226e4:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00226eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00226ef:	89 10                	mov    DWORD PTR [eax],edx
c00226f1:	b0 01                	mov    al,0x1
c00226f3:	81 c4 4c 08 00 00    	add    esp,0x84c
c00226f9:	c3                   	ret    

c00226fa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00226fa:	55                   	push   ebp
c00226fb:	57                   	push   edi
c00226fc:	56                   	push   esi
c00226fd:	53                   	push   ebx
c00226fe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0022704:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002270b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022712:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022716:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002271a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002271e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022722:	75 03                	jne    c0022727 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022724:	83 c3 02             	add    ebx,0x2
c0022727:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002272a:	75 03                	jne    c002272f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002272c:	43                   	inc    ebx
c002272d:	eb f8                	jmp    c0022727 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002272f:	51                   	push   ecx
c0022730:	68 00 01 00 00       	push   0x100
c0022735:	6a 00                	push   0x0
c0022737:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002273b:	50                   	push   eax
c002273c:	e8 2b e0 fd ff       	call   c000076c <memset>
c0022741:	83 c4 10             	add    esp,0x10
c0022744:	31 d2                	xor    edx,edx
c0022746:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022749:	84 c0                	test   al,al
c002274b:	74 21                	je     c002276e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002274d:	3c 2f                	cmp    al,0x2f
c002274f:	75 0b                	jne    c002275c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022751:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0022755:	bd 01 00 00 00       	mov    ebp,0x1
c002275a:	eb 14                	jmp    c0022770 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002275c:	8d 48 9f             	lea    ecx,[eax-0x61]
c002275f:	80 f9 19             	cmp    cl,0x19
c0022762:	77 03                	ja     c0022767 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022764:	83 e8 20             	sub    eax,0x20
c0022767:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002276b:	42                   	inc    edx
c002276c:	eb d8                	jmp    c0022746 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002276e:	31 ed                	xor    ebp,ebp
c0022770:	83 ec 0c             	sub    esp,0xc
c0022773:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002277a:	e8 41 d1 fe ff       	call   c000f8c0 <malloc>
c002277f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0022786:	89 c6                	mov    esi,eax
c0022788:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002278e:	c1 ef 0b             	shr    edi,0xb
c0022791:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0022798:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002279c:	83 c4 10             	add    esp,0x10
c002279f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00227a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00227a8:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00227af:	74 28                	je     c00227d9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00227b1:	52                   	push   edx
c00227b2:	57                   	push   edi
c00227b3:	50                   	push   eax
c00227b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00227b8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00227bf:	e8 a5 f9 ff ff       	call   c0022169 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00227c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00227c8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00227cf:	05 00 08 00 00       	add    eax,0x800
c00227d4:	83 c4 10             	add    esp,0x10
c00227d7:	eb cb                	jmp    c00227a4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00227d9:	83 ec 0c             	sub    esp,0xc
c00227dc:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00227e0:	57                   	push   edi
c00227e1:	e8 a2 df fd ff       	call   c0000788 <strlen>
c00227e6:	50                   	push   eax
c00227e7:	57                   	push   edi
c00227e8:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00227ef:	56                   	push   esi
c00227f0:	e8 32 f9 ff ff       	call   c0022127 <__memmem(unsigned char*, int, unsigned char*, int)>
c00227f5:	83 c4 20             	add    esp,0x20
c00227f8:	85 c0                	test   eax,eax
c00227fa:	75 13                	jne    c002280f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00227fc:	83 ec 0c             	sub    esp,0xc
c00227ff:	56                   	push   esi
c0022800:	e8 cb d0 fe ff       	call   c000f8d0 <free>
c0022805:	83 c4 10             	add    esp,0x10
c0022808:	31 c0                	xor    eax,eax
c002280a:	e9 b3 00 00 00       	jmp    c00228c2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002280f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022813:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022817:	c1 e7 08             	shl    edi,0x8
c002281a:	c1 e2 10             	shl    edx,0x10
c002281d:	09 d7                	or     edi,edx
c002281f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022823:	09 d7                	or     edi,edx
c0022825:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022829:	c1 e2 18             	shl    edx,0x18
c002282c:	09 d7                	or     edi,edx
c002282e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022832:	89 d1                	mov    ecx,edx
c0022834:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022838:	c1 e1 08             	shl    ecx,0x8
c002283b:	c1 e2 10             	shl    edx,0x10
c002283e:	09 ca                	or     edx,ecx
c0022840:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022844:	09 ca                	or     edx,ecx
c0022846:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002284a:	c1 e1 18             	shl    ecx,0x18
c002284d:	09 ca                	or     edx,ecx
c002284f:	89 e9                	mov    ecx,ebp
c0022851:	84 c9                	test   cl,cl
c0022853:	74 3c                	je     c0022891 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022855:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022859:	83 ec 0c             	sub    esp,0xc
c002285c:	56                   	push   esi
c002285d:	e8 6e d0 fe ff       	call   c000f8d0 <free>
c0022862:	83 c4 0c             	add    esp,0xc
c0022865:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002286c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022871:	50                   	push   eax
c0022872:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022879:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022880:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022884:	52                   	push   edx
c0022885:	57                   	push   edi
c0022886:	53                   	push   ebx
c0022887:	e8 6e fe ff ff       	call   c00226fa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002288c:	83 c4 20             	add    esp,0x20
c002288f:	eb 31                	jmp    c00228c2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022891:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0022894:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002289b:	d0 e8                	shr    al,1
c002289d:	89 3b                	mov    DWORD PTR [ebx],edi
c002289f:	83 e0 01             	and    eax,0x1
c00228a2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00228a9:	83 ec 0c             	sub    esp,0xc
c00228ac:	89 13                	mov    DWORD PTR [ebx],edx
c00228ae:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00228b5:	89 03                	mov    DWORD PTR [ebx],eax
c00228b7:	56                   	push   esi
c00228b8:	e8 13 d0 fe ff       	call   c000f8d0 <free>
c00228bd:	83 c4 10             	add    esp,0x10
c00228c0:	b0 01                	mov    al,0x1
c00228c2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00228c8:	5b                   	pop    ebx
c00228c9:	5e                   	pop    esi
c00228ca:	5f                   	pop    edi
c00228cb:	5d                   	pop    ebp
c00228cc:	c3                   	ret    

c00228cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00228cd:	55                   	push   ebp
c00228ce:	57                   	push   edi
c00228cf:	56                   	push   esi
c00228d0:	53                   	push   ebx
c00228d1:	83 ec 20             	sub    esp,0x20
c00228d4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00228d8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00228dc:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00228e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00228e8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00228f0:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00228f5:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00228fb:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022901:	57                   	push   edi
c0022902:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022906:	50                   	push   eax
c0022907:	8d 44 24 14          	lea    eax,[esp+0x14]
c002290b:	50                   	push   eax
c002290c:	e8 91 fd ff ff       	call   c00226a2 <readRoot(unsigned int*, unsigned int*, char)>
c0022911:	5a                   	pop    edx
c0022912:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022916:	e8 6d de fd ff       	call   c0000788 <strlen>
c002291b:	83 c4 10             	add    esp,0x10
c002291e:	83 f8 03             	cmp    eax,0x3
c0022921:	77 17                	ja     c002293a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022923:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022927:	89 03                	mov    DWORD PTR [ebx],eax
c0022929:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002292d:	89 06                	mov    DWORD PTR [esi],eax
c002292f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022936:	b0 01                	mov    al,0x1
c0022938:	eb 19                	jmp    c0022953 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002293a:	50                   	push   eax
c002293b:	55                   	push   ebp
c002293c:	57                   	push   edi
c002293d:	56                   	push   esi
c002293e:	53                   	push   ebx
c002293f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022943:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022947:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002294b:	e8 aa fd ff ff       	call   c00226fa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022950:	83 c4 20             	add    esp,0x20
c0022953:	83 c4 1c             	add    esp,0x1c
c0022956:	5b                   	pop    ebx
c0022957:	5e                   	pop    esi
c0022958:	5f                   	pop    edi
c0022959:	5d                   	pop    ebp
c002295a:	c3                   	ret    
c002295b:	90                   	nop

c002295c <ISO9660::open(char const*, void**, FileOpenMode)>:
c002295c:	57                   	push   edi
c002295d:	56                   	push   esi
c002295e:	53                   	push   ebx
c002295f:	83 ec 10             	sub    esp,0x10
c0022962:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022966:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002296a:	85 ff                	test   edi,edi
c002296c:	0f 84 9d 00 00 00    	je     c0022a0f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022972:	85 f6                	test   esi,esi
c0022974:	0f 84 95 00 00 00    	je     c0022a0f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002297a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002297f:	74 17                	je     c0022998 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022981:	83 ec 0c             	sub    esp,0xc
c0022984:	68 d7 d5 02 c0       	push   0xc002d5d7
c0022989:	e8 01 05 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c002298e:	83 c4 10             	add    esp,0x10
c0022991:	b8 03 00 00 00       	mov    eax,0x3
c0022996:	eb 7c                	jmp    c0022a14 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022998:	83 ec 0c             	sub    esp,0xc
c002299b:	6a 1c                	push   0x1c
c002299d:	e8 1e cf fe ff       	call   c000f8c0 <malloc>
c00229a2:	89 07                	mov    DWORD PTR [edi],eax
c00229a4:	89 c3                	mov    ebx,eax
c00229a6:	58                   	pop    eax
c00229a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00229ab:	50                   	push   eax
c00229ac:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00229af:	50                   	push   eax
c00229b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00229b4:	50                   	push   eax
c00229b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00229b9:	50                   	push   eax
c00229ba:	56                   	push   esi
c00229bb:	e8 0d ff ff ff       	call   c00228cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00229c0:	83 c4 20             	add    esp,0x20
c00229c3:	84 c0                	test   al,al
c00229c5:	74 07                	je     c00229ce <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00229c7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00229cc:	74 0b                	je     c00229d9 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00229ce:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00229d2:	b8 01 00 00 00       	mov    eax,0x1
c00229d7:	eb 3b                	jmp    c0022a14 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00229d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229dd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00229e1:	89 03                	mov    DWORD PTR [ebx],eax
c00229e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00229ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00229ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00229f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00229fc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00229ff:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022a06:	8a 06                	mov    al,BYTE PTR [esi]
c0022a08:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022a0b:	31 c0                	xor    eax,eax
c0022a0d:	eb 05                	jmp    c0022a14 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022a0f:	b8 04 00 00 00       	mov    eax,0x4
c0022a14:	83 c4 10             	add    esp,0x10
c0022a17:	5b                   	pop    ebx
c0022a18:	5e                   	pop    esi
c0022a19:	5f                   	pop    edi
c0022a1a:	c3                   	ret    
c0022a1b:	90                   	nop

c0022a1c <ISO9660::exists(char const*)>:
c0022a1c:	83 ec 28             	sub    esp,0x28
c0022a1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a23:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022a27:	52                   	push   edx
c0022a28:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022a2b:	52                   	push   edx
c0022a2c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022a30:	52                   	push   edx
c0022a31:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022a35:	52                   	push   edx
c0022a36:	50                   	push   eax
c0022a37:	e8 91 fe ff ff       	call   c00228cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022a3c:	83 c4 3c             	add    esp,0x3c
c0022a3f:	c3                   	ret    

c0022a40 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022a40:	56                   	push   esi
c0022a41:	53                   	push   ebx
c0022a42:	83 ec 14             	sub    esp,0x14
c0022a45:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022a49:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022a4d:	85 db                	test   ebx,ebx
c0022a4f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022a53:	0f 94 c2             	sete   dl
c0022a56:	85 f6                	test   esi,esi
c0022a58:	0f 94 c0             	sete   al
c0022a5b:	08 c2                	or     dl,al
c0022a5d:	75 68                	jne    c0022ac7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022a5f:	85 c9                	test   ecx,ecx
c0022a61:	74 64                	je     c0022ac7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022a63:	83 ec 0c             	sub    esp,0xc
c0022a66:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022a69:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022a6d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022a73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022a7a:	50                   	push   eax
c0022a7b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022a7e:	50                   	push   eax
c0022a7f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a83:	50                   	push   eax
c0022a84:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a88:	50                   	push   eax
c0022a89:	51                   	push   ecx
c0022a8a:	e8 3e fe ff ff       	call   c00228cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022a8f:	83 c4 20             	add    esp,0x20
c0022a92:	ba 01 00 00 00       	mov    edx,0x1
c0022a97:	84 c0                	test   al,al
c0022a99:	74 31                	je     c0022acc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022a9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022a9f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022aa6:	89 03                	mov    DWORD PTR [ebx],eax
c0022aa8:	ba 00 00 00 00       	mov    edx,0x0
c0022aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ab1:	85 c0                	test   eax,eax
c0022ab3:	0f 95 06             	setne  BYTE PTR [esi]
c0022ab6:	74 14                	je     c0022acc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022ab8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022abe:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022ac5:	eb 05                	jmp    c0022acc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022ac7:	ba 04 00 00 00       	mov    edx,0x4
c0022acc:	83 c4 14             	add    esp,0x14
c0022acf:	89 d0                	mov    eax,edx
c0022ad1:	5b                   	pop    ebx
c0022ad2:	5e                   	pop    esi
c0022ad3:	c3                   	ret    

c0022ad4 <ISO9660::openDir(char const*, void**)>:
c0022ad4:	57                   	push   edi
c0022ad5:	56                   	push   esi
c0022ad6:	53                   	push   ebx
c0022ad7:	83 ec 10             	sub    esp,0x10
c0022ada:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022ade:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022ae2:	85 ff                	test   edi,edi
c0022ae4:	0f 84 95 00 00 00    	je     c0022b7f <ISO9660::openDir(char const*, void**)+0xab>
c0022aea:	85 f6                	test   esi,esi
c0022aec:	0f 84 8d 00 00 00    	je     c0022b7f <ISO9660::openDir(char const*, void**)+0xab>
c0022af2:	83 ec 0c             	sub    esp,0xc
c0022af5:	6a 1c                	push   0x1c
c0022af7:	e8 c4 cd fe ff       	call   c000f8c0 <malloc>
c0022afc:	89 07                	mov    DWORD PTR [edi],eax
c0022afe:	89 c3                	mov    ebx,eax
c0022b00:	59                   	pop    ecx
c0022b01:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022b05:	50                   	push   eax
c0022b06:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022b09:	50                   	push   eax
c0022b0a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022b0e:	50                   	push   eax
c0022b0f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022b13:	50                   	push   eax
c0022b14:	56                   	push   esi
c0022b15:	e8 b3 fd ff ff       	call   c00228cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022b1a:	83 c4 20             	add    esp,0x20
c0022b1d:	84 c0                	test   al,al
c0022b1f:	74 07                	je     c0022b28 <ISO9660::openDir(char const*, void**)+0x54>
c0022b21:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022b26:	75 21                	jne    c0022b49 <ISO9660::openDir(char const*, void**)+0x75>
c0022b28:	0f b6 c0             	movzx  eax,al
c0022b2b:	52                   	push   edx
c0022b2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022b30:	50                   	push   eax
c0022b31:	68 fd d5 02 c0       	push   0xc002d5fd
c0022b36:	e8 54 03 ff ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0022b3b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022b3f:	83 c4 10             	add    esp,0x10
c0022b42:	b8 01 00 00 00       	mov    eax,0x1
c0022b47:	eb 3b                	jmp    c0022b84 <ISO9660::openDir(char const*, void**)+0xb0>
c0022b49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b4d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022b51:	89 03                	mov    DWORD PTR [ebx],eax
c0022b53:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022b5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022b5e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022b65:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022b6c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022b6f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022b76:	8a 06                	mov    al,BYTE PTR [esi]
c0022b78:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022b7b:	31 c0                	xor    eax,eax
c0022b7d:	eb 05                	jmp    c0022b84 <ISO9660::openDir(char const*, void**)+0xb0>
c0022b7f:	b8 04 00 00 00       	mov    eax,0x4
c0022b84:	83 c4 10             	add    esp,0x10
c0022b87:	5b                   	pop    ebx
c0022b88:	5e                   	pop    esi
c0022b89:	5f                   	pop    edi
c0022b8a:	c3                   	ret    
c0022b8b:	90                   	nop

c0022b8c <ISO9660::ISO9660()>:
c0022b8c:	83 ec 0c             	sub    esp,0xc
c0022b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b93:	83 ec 0c             	sub    esp,0xc
c0022b96:	50                   	push   eax
c0022b97:	e8 fe 05 ff ff       	call   c001319a <Filesystem::Filesystem()>
c0022b9c:	83 c4 10             	add    esp,0x10
c0022b9f:	ba 20 d6 02 c0       	mov    edx,0xc002d620
c0022ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba8:	89 10                	mov    DWORD PTR [eax],edx
c0022baa:	90                   	nop
c0022bab:	83 c4 0c             	add    esp,0xc
c0022bae:	c3                   	ret    
c0022baf:	90                   	nop

c0022bb0 <SoundChannel::~SoundChannel()>:
c0022bb0:	83 ec 0c             	sub    esp,0xc
c0022bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bb7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022bba:	83 ec 0c             	sub    esp,0xc
c0022bbd:	50                   	push   eax
c0022bbe:	e8 0d cd fe ff       	call   c000f8d0 <free>
c0022bc3:	83 c4 10             	add    esp,0x10
c0022bc6:	90                   	nop
c0022bc7:	83 c4 0c             	add    esp,0xc
c0022bca:	c3                   	ret    
c0022bcb:	90                   	nop

c0022bcc <SoundChannel::setSpeed(float)>:
c0022bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022bd4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022bd7:	c3                   	ret    

c0022bd8 <SoundChannel::getSpeed()>:
c0022bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bdc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022bdf:	c3                   	ret    

c0022be0 <SoundChannel::setVolume(int)>:
c0022be0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022be4:	83 f8 64             	cmp    eax,0x64
c0022be7:	7e 05                	jle    c0022bee <SoundChannel::setVolume(int)+0xe>
c0022be9:	b8 64 00 00 00       	mov    eax,0x64
c0022bee:	85 c0                	test   eax,eax
c0022bf0:	79 02                	jns    c0022bf4 <SoundChannel::setVolume(int)+0x14>
c0022bf2:	31 c0                	xor    eax,eax
c0022bf4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022bf8:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022bfb:	c3                   	ret    

c0022bfc <SoundChannel::getVolume()>:
c0022bfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c00:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022c03:	c3                   	ret    

c0022c04 <SoundChannel::pause()>:
c0022c04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c08:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022c0c:	c3                   	ret    
c0022c0d:	90                   	nop

c0022c0e <SoundChannel::SoundChannel(int, int, int, int)>:
c0022c0e:	83 ec 1c             	sub    esp,0x1c
c0022c11:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022c15:	e8 ea ff ff ff       	call   c0022c04 <SoundChannel::pause()>
c0022c1a:	83 c4 04             	add    esp,0x4
c0022c1d:	6a 50                	push   0x50
c0022c1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022c23:	e8 b8 ff ff ff       	call   c0022be0 <SoundChannel::setVolume(int)>
c0022c28:	83 c4 08             	add    esp,0x8
c0022c2b:	a1 9c d6 02 c0       	mov    eax,ds:0xc002d69c
c0022c30:	50                   	push   eax
c0022c31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022c35:	e8 92 ff ff ff       	call   c0022bcc <SoundChannel::setSpeed(float)>
c0022c3a:	83 c4 08             	add    esp,0x8
c0022c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c41:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022c45:	89 10                	mov    DWORD PTR [eax],edx
c0022c47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022c4f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022c52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c56:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022c5a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022c5d:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022c62:	75 23                	jne    c0022c87 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022c64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c68:	8b 10                	mov    edx,DWORD PTR [eax]
c0022c6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c71:	0f af c2             	imul   eax,edx
c0022c74:	85 c0                	test   eax,eax
c0022c76:	79 03                	jns    c0022c7b <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022c78:	83 c0 03             	add    eax,0x3
c0022c7b:	c1 f8 02             	sar    eax,0x2
c0022c7e:	05 a0 0f 00 00       	add    eax,0xfa0
c0022c83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022c87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c8b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022c8f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022c92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c96:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022c9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ca1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022ca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022caf:	c1 e0 02             	shl    eax,0x2
c0022cb2:	83 ec 0c             	sub    esp,0xc
c0022cb5:	50                   	push   eax
c0022cb6:	e8 05 cc fe ff       	call   c000f8c0 <malloc>
c0022cbb:	83 c4 10             	add    esp,0x10
c0022cbe:	89 c2                	mov    edx,eax
c0022cc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022cc7:	83 ec 04             	sub    esp,0x4
c0022cca:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022cce:	50                   	push   eax
c0022ccf:	6a 01                	push   0x1
c0022cd1:	6a 04                	push   0x4
c0022cd3:	e8 b2 5e fe ff       	call   c0008b8a <src_new>
c0022cd8:	83 c4 10             	add    esp,0x10
c0022cdb:	89 c2                	mov    edx,eax
c0022cdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ce1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ce8:	85 c0                	test   eax,eax
c0022cea:	74 10                	je     c0022cfc <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022cec:	83 ec 0c             	sub    esp,0xc
c0022cef:	68 80 d6 02 c0       	push   0xc002d680
c0022cf4:	e8 fe 7b ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0022cf9:	83 c4 10             	add    esp,0x10
c0022cfc:	a0 60 34 03 c0       	mov    al,ds:0xc0033460
c0022d01:	83 f0 01             	xor    eax,0x1
c0022d04:	84 c0                	test   al,al
c0022d06:	74 57                	je     c0022d5f <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022d08:	a1 a0 d6 02 c0       	mov    eax,ds:0xc002d6a0
c0022d0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022d19:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022d21:	7f 35                	jg     c0022d58 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022d23:	83 ec 0c             	sub    esp,0xc
c0022d26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022d2a:	e8 80 50 00 00       	call   c0027daf <__floatsisf>
c0022d2f:	83 c4 10             	add    esp,0x10
c0022d32:	8b 15 a0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a0
c0022d38:	83 ec 08             	sub    esp,0x8
c0022d3b:	52                   	push   edx
c0022d3c:	50                   	push   eax
c0022d3d:	e8 7f 4c 00 00       	call   c00279c1 <__mulsf3>
c0022d42:	83 c4 10             	add    esp,0x10
c0022d45:	89 c2                	mov    edx,eax
c0022d47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d4b:	89 14 85 60 30 03 c0 	mov    DWORD PTR [eax*4-0x3ffccfa0],edx
c0022d52:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022d56:	eb c1                	jmp    c0022d19 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022d58:	c6 05 60 34 03 c0 01 	mov    BYTE PTR ds:0xc0033460,0x1
c0022d5f:	90                   	nop
c0022d60:	83 c4 1c             	add    esp,0x1c
c0022d63:	c3                   	ret    

c0022d64 <SoundChannel::play()>:
c0022d64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d68:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022d6c:	c3                   	ret    
c0022d6d:	90                   	nop

c0022d6e <SoundChannel::paused()>:
c0022d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d72:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022d75:	c3                   	ret    

c0022d76 <SoundChannel::getSampleRate()>:
c0022d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d7c:	c3                   	ret    
c0022d7d:	90                   	nop

c0022d7e <SoundChannel::getBits()>:
c0022d7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d85:	c3                   	ret    

c0022d86 <SoundChannel::getBufferUsed()>:
c0022d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d8a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022d8d:	c3                   	ret    

c0022d8e <SoundChannel::getBufferSize()>:
c0022d8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d92:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022d95:	c3                   	ret    

c0022d96 <SoundChannel::unbuffer(float*, int, int)>:
c0022d96:	56                   	push   esi
c0022d97:	53                   	push   ebx
c0022d98:	83 ec 40             	sub    esp,0x40
c0022d9b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022d9f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022da2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022da6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022da9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022dad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022db1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022db5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022db9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022dbd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022dc1:	e8 e9 4f 00 00       	call   c0027daf <__floatsisf>
c0022dc6:	5a                   	pop    edx
c0022dc7:	89 c6                	mov    esi,eax
c0022dc9:	ff 33                	push   DWORD PTR [ebx]
c0022dcb:	e8 df 4f 00 00       	call   c0027daf <__floatsisf>
c0022dd0:	59                   	pop    ecx
c0022dd1:	5a                   	pop    edx
c0022dd2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022dd5:	50                   	push   eax
c0022dd6:	e8 e6 4b 00 00       	call   c00279c1 <__mulsf3>
c0022ddb:	59                   	pop    ecx
c0022ddc:	5a                   	pop    edx
c0022ddd:	50                   	push   eax
c0022dde:	56                   	push   esi
c0022ddf:	e8 a0 4d 00 00       	call   c0027b84 <__divsf3>
c0022de4:	89 04 24             	mov    DWORD PTR [esp],eax
c0022de7:	e8 93 62 00 00       	call   c002907f <__extendsfdf2>
c0022dec:	59                   	pop    ecx
c0022ded:	5e                   	pop    esi
c0022dee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022df2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022df6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022dfe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022e02:	50                   	push   eax
c0022e03:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022e06:	e8 74 59 fe ff       	call   c000877f <src_process>
c0022e0b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e0f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022e12:	83 c4 0c             	add    esp,0xc
c0022e15:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022e18:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022e1b:	29 d0                	sub    eax,edx
c0022e1d:	c1 e0 02             	shl    eax,0x2
c0022e20:	50                   	push   eax
c0022e21:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022e24:	50                   	push   eax
c0022e25:	51                   	push   ecx
c0022e26:	e8 79 d8 fd ff       	call   c00006a4 <memmove>
c0022e2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022e2f:	83 c4 44             	add    esp,0x44
c0022e32:	5b                   	pop    ebx
c0022e33:	5e                   	pop    esi
c0022e34:	c3                   	ret    
c0022e35:	90                   	nop

c0022e36 <SoundChannel::buffer8(unsigned char*, int)>:
c0022e36:	55                   	push   ebp
c0022e37:	57                   	push   edi
c0022e38:	56                   	push   esi
c0022e39:	53                   	push   ebx
c0022e3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e3e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022e42:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022e45:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022e49:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022e4c:	74 7a                	je     c0022ec8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022e4e:	85 ff                	test   edi,edi
c0022e50:	7e 76                	jle    c0022ec8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022e52:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022e56:	8d 70 01             	lea    esi,[eax+0x1]
c0022e59:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022e5c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022e5f:	8b 1c 9d 60 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccfa0]
c0022e66:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022e69:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022e6c:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022e6f:	74 5e                	je     c0022ecf <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022e71:	83 ff 01             	cmp    edi,0x1
c0022e74:	74 4b                	je     c0022ec1 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022e76:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022e7a:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022e7d:	8d 70 01             	lea    esi,[eax+0x1]
c0022e80:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022e83:	8b 1c 9d 60 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccfa0]
c0022e8a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022e8d:	b8 02 00 00 00       	mov    eax,0x2
c0022e92:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022e95:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022e98:	75 23                	jne    c0022ebd <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022e9a:	eb 27                	jmp    c0022ec3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022e9c:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022ea1:	8d 71 01             	lea    esi,[ecx+0x1]
c0022ea4:	40                   	inc    eax
c0022ea5:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022ea8:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022eab:	8b 1c 9d 60 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccfa0]
c0022eb2:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022eb5:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022eb8:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022ebb:	74 06                	je     c0022ec3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022ebd:	39 c7                	cmp    edi,eax
c0022ebf:	75 db                	jne    c0022e9c <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022ec1:	89 f8                	mov    eax,edi
c0022ec3:	5b                   	pop    ebx
c0022ec4:	5e                   	pop    esi
c0022ec5:	5f                   	pop    edi
c0022ec6:	5d                   	pop    ebp
c0022ec7:	c3                   	ret    
c0022ec8:	5b                   	pop    ebx
c0022ec9:	31 c0                	xor    eax,eax
c0022ecb:	5e                   	pop    esi
c0022ecc:	5f                   	pop    edi
c0022ecd:	5d                   	pop    ebp
c0022ece:	c3                   	ret    
c0022ecf:	b8 01 00 00 00       	mov    eax,0x1
c0022ed4:	eb ed                	jmp    c0022ec3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022ed6 <SoundDevice::SoundDevice(char const*)>:
c0022ed6:	83 ec 1c             	sub    esp,0x1c
c0022ed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022edd:	83 ec 08             	sub    esp,0x8
c0022ee0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ee4:	50                   	push   eax
c0022ee5:	e8 c0 15 ff ff       	call   c00144aa <Device::Device(char const*)>
c0022eea:	83 c4 10             	add    esp,0x10
c0022eed:	ba ac d6 02 c0       	mov    edx,0xc002d6ac
c0022ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ef6:	89 10                	mov    DWORD PTR [eax],edx
c0022ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022efc:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f0a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022f14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022f1c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022f21:	7f 19                	jg     c0022f3c <SoundDevice::SoundDevice(char const*)+0x66>
c0022f23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022f2b:	83 c2 54             	add    edx,0x54
c0022f2e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022f36:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022f3a:	eb e0                	jmp    c0022f1c <SoundDevice::SoundDevice(char const*)+0x46>
c0022f3c:	90                   	nop
c0022f3d:	83 c4 1c             	add    esp,0x1c
c0022f40:	c3                   	ret    
c0022f41:	90                   	nop

c0022f42 <SoundDevice::~SoundDevice()>:
c0022f42:	53                   	push   ebx
c0022f43:	83 ec 18             	sub    esp,0x18
c0022f46:	ba ac d6 02 c0       	mov    edx,0xc002d6ac
c0022f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f4f:	89 10                	mov    DWORD PTR [eax],edx
c0022f51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022f59:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022f5e:	7f 46                	jg     c0022fa6 <SoundDevice::~SoundDevice()+0x64>
c0022f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022f68:	83 c2 54             	add    edx,0x54
c0022f6b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022f6f:	85 c0                	test   eax,eax
c0022f71:	74 2d                	je     c0022fa0 <SoundDevice::~SoundDevice()+0x5e>
c0022f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022f7b:	83 c2 54             	add    edx,0x54
c0022f7e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022f82:	85 db                	test   ebx,ebx
c0022f84:	74 1a                	je     c0022fa0 <SoundDevice::~SoundDevice()+0x5e>
c0022f86:	83 ec 0c             	sub    esp,0xc
c0022f89:	53                   	push   ebx
c0022f8a:	e8 21 fc ff ff       	call   c0022bb0 <SoundChannel::~SoundChannel()>
c0022f8f:	83 c4 10             	add    esp,0x10
c0022f92:	83 ec 08             	sub    esp,0x8
c0022f95:	6a 2c                	push   0x2c
c0022f97:	53                   	push   ebx
c0022f98:	e8 12 fe fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0022f9d:	83 c4 10             	add    esp,0x10
c0022fa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022fa4:	eb b3                	jmp    c0022f59 <SoundDevice::~SoundDevice()+0x17>
c0022fa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022faa:	83 ec 0c             	sub    esp,0xc
c0022fad:	50                   	push   eax
c0022fae:	e8 e3 11 ff ff       	call   c0014196 <Device::~Device()>
c0022fb3:	83 c4 10             	add    esp,0x10
c0022fb6:	90                   	nop
c0022fb7:	83 c4 18             	add    esp,0x18
c0022fba:	5b                   	pop    ebx
c0022fbb:	c3                   	ret    

c0022fbc <SoundDevice::~SoundDevice()>:
c0022fbc:	83 ec 0c             	sub    esp,0xc
c0022fbf:	83 ec 0c             	sub    esp,0xc
c0022fc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fc6:	e8 77 ff ff ff       	call   c0022f42 <SoundDevice::~SoundDevice()>
c0022fcb:	83 c4 10             	add    esp,0x10
c0022fce:	83 ec 08             	sub    esp,0x8
c0022fd1:	68 e4 01 00 00       	push   0x1e4
c0022fd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fda:	e8 d0 fd fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0022fdf:	83 c4 10             	add    esp,0x10
c0022fe2:	83 c4 0c             	add    esp,0xc
c0022fe5:	c3                   	ret    

c0022fe6 <SoundDevice::getFreeChannelNum()>:
c0022fe6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fea:	31 c0                	xor    eax,eax
c0022fec:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022ff4:	74 09                	je     c0022fff <SoundDevice::getFreeChannelNum()+0x19>
c0022ff6:	40                   	inc    eax
c0022ff7:	83 f8 20             	cmp    eax,0x20
c0022ffa:	75 f0                	jne    c0022fec <SoundDevice::getFreeChannelNum()+0x6>
c0022ffc:	83 c8 ff             	or     eax,0xffffffff
c0022fff:	c3                   	ret    

c0023000 <SoundDevice::addChannel(SoundChannel*)>:
c0023000:	56                   	push   esi
c0023001:	53                   	push   ebx
c0023002:	51                   	push   ecx
c0023003:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023007:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002300b:	53                   	push   ebx
c002300c:	e8 d5 ff ff ff       	call   c0022fe6 <SoundDevice::getFreeChannelNum()>
c0023011:	5a                   	pop    edx
c0023012:	83 f8 ff             	cmp    eax,0xffffffff
c0023015:	74 51                	je     c0023068 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0023017:	85 f6                	test   esi,esi
c0023019:	74 4d                	je     c0023068 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002301b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0023022:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0023029:	75 30                	jne    c002305b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002302b:	83 ec 0c             	sub    esp,0xc
c002302e:	56                   	push   esi
c002302f:	e8 42 fd ff ff       	call   c0022d76 <SoundChannel::getSampleRate()>
c0023034:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002303a:	89 34 24             	mov    DWORD PTR [esp],esi
c002303d:	e8 3c fd ff ff       	call   c0022d7e <SoundChannel::getBits()>
c0023042:	83 c4 0c             	add    esp,0xc
c0023045:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002304b:	8b 13                	mov    edx,DWORD PTR [ebx]
c002304d:	50                   	push   eax
c002304e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0023054:	53                   	push   ebx
c0023055:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0023058:	83 c4 10             	add    esp,0x10
c002305b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0023061:	b8 01 00 00 00       	mov    eax,0x1
c0023066:	eb 03                	jmp    c002306b <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0023068:	83 c8 ff             	or     eax,0xffffffff
c002306b:	5a                   	pop    edx
c002306c:	5b                   	pop    ebx
c002306d:	5e                   	pop    esi
c002306e:	c3                   	ret    
c002306f:	90                   	nop

c0023070 <SoundDevice::removeChannel(int)>:
c0023070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023078:	83 fa 1f             	cmp    edx,0x1f
c002307b:	77 23                	ja     c00230a0 <SoundDevice::removeChannel(int)+0x30>
c002307d:	8d 14 90             	lea    edx,[eax+edx*4]
c0023080:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0023087:	74 17                	je     c00230a0 <SoundDevice::removeChannel(int)+0x30>
c0023089:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0023093:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0023099:	75 05                	jne    c00230a0 <SoundDevice::removeChannel(int)+0x30>
c002309b:	8b 00                	mov    eax,DWORD PTR [eax]
c002309d:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00230a0:	c3                   	ret    
c00230a1:	90                   	nop

c00230a2 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00230a2:	57                   	push   edi
c00230a3:	56                   	push   esi
c00230a4:	53                   	push   ebx
c00230a5:	31 db                	xor    ebx,ebx
c00230a7:	83 ec 10             	sub    esp,0x10
c00230aa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00230ae:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00230b2:	0f 8d cb 00 00 00    	jge    c0023183 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00230b8:	83 ec 0c             	sub    esp,0xc
c00230bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00230bf:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00230c2:	e8 b8 5f 00 00       	call   c002907f <__extendsfdf2>
c00230c7:	83 c4 10             	add    esp,0x10
c00230ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00230ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00230d2:	68 00 00 f0 3f       	push   0x3ff00000
c00230d7:	6a 00                	push   0x0
c00230d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230e1:	e8 25 4f 00 00       	call   c002800b <__adddf3>
c00230e6:	83 c4 10             	add    esp,0x10
c00230e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00230ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00230f1:	68 00 00 e0 3f       	push   0x3fe00000
c00230f6:	6a 00                	push   0x0
c00230f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023100:	e8 83 55 00 00       	call   c0028688 <__muldf3>
c0023105:	83 c4 10             	add    esp,0x10
c0023108:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002310c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023110:	68 00 00 60 40       	push   0x40600000
c0023115:	6a 00                	push   0x0
c0023117:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002311b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002311f:	e8 64 55 00 00       	call   c0028688 <__muldf3>
c0023124:	59                   	pop    ecx
c0023125:	5f                   	pop    edi
c0023126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002312a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002312e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023132:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023136:	e8 20 5e 00 00       	call   c0028f5b <__truncdfsf2>
c002313b:	5a                   	pop    edx
c002313c:	89 c7                	mov    edi,eax
c002313e:	59                   	pop    ecx
c002313f:	68 00 00 fe 42       	push   0x42fe0000
c0023144:	50                   	push   eax
c0023145:	e8 bb 4e 00 00       	call   c0028005 <__gesf2>
c002314a:	83 c4 10             	add    esp,0x10
c002314d:	85 c0                	test   eax,eax
c002314f:	78 06                	js     c0023157 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0023151:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0023155:	eb 26                	jmp    c002317d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0023157:	50                   	push   eax
c0023158:	50                   	push   eax
c0023159:	6a 00                	push   0x0
c002315b:	57                   	push   edi
c002315c:	e8 a8 4e 00 00       	call   c0028009 <__lesf2>
c0023161:	83 c4 10             	add    esp,0x10
c0023164:	85 c0                	test   eax,eax
c0023166:	7f 06                	jg     c002316e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0023168:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002316c:	eb 0f                	jmp    c002317d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002316e:	83 ec 0c             	sub    esp,0xc
c0023171:	57                   	push   edi
c0023172:	e8 a5 5f 00 00       	call   c002911c <lrintf>
c0023177:	83 c4 10             	add    esp,0x10
c002317a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002317d:	43                   	inc    ebx
c002317e:	e9 2b ff ff ff       	jmp    c00230ae <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0023183:	83 c4 10             	add    esp,0x10
c0023186:	5b                   	pop    ebx
c0023187:	5e                   	pop    esi
c0023188:	5f                   	pop    edi
c0023189:	c3                   	ret    

c002318a <SoundDevice::getAudio(int, float*, float*)>:
c002318a:	55                   	push   ebp
c002318b:	57                   	push   edi
c002318c:	56                   	push   esi
c002318d:	53                   	push   ebx
c002318e:	31 db                	xor    ebx,ebx
c0023190:	83 ec 20             	sub    esp,0x20
c0023193:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023197:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002319b:	c1 e0 02             	shl    eax,0x2
c002319e:	50                   	push   eax
c002319f:	6a 00                	push   0x0
c00231a1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00231a5:	e8 c2 d5 fd ff       	call   c000076c <memset>
c00231aa:	83 c4 10             	add    esp,0x10
c00231ad:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00231b1:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00231b8:	85 c0                	test   eax,eax
c00231ba:	0f 84 d7 00 00 00    	je     c0023297 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00231c0:	83 ec 0c             	sub    esp,0xc
c00231c3:	50                   	push   eax
c00231c4:	e8 a5 fb ff ff       	call   c0022d6e <SoundChannel::paused()>
c00231c9:	83 c4 10             	add    esp,0x10
c00231cc:	84 c0                	test   al,al
c00231ce:	0f 85 c3 00 00 00    	jne    c0023297 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00231d4:	83 ec 0c             	sub    esp,0xc
c00231d7:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00231de:	e8 19 fa ff ff       	call   c0022bfc <SoundChannel::getVolume()>
c00231e3:	83 c4 10             	add    esp,0x10
c00231e6:	85 c0                	test   eax,eax
c00231e8:	0f 84 a9 00 00 00    	je     c0023297 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00231ee:	83 ec 0c             	sub    esp,0xc
c00231f1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00231f8:	e8 ff f9 ff ff       	call   c0022bfc <SoundChannel::getVolume()>
c00231fd:	83 ec 0c             	sub    esp,0xc
c0023200:	50                   	push   eax
c0023201:	e8 a9 4b 00 00       	call   c0027daf <__floatsisf>
c0023206:	59                   	pop    ecx
c0023207:	5d                   	pop    ebp
c0023208:	31 ed                	xor    ebp,ebp
c002320a:	68 00 00 c8 42       	push   0x42c80000
c002320f:	50                   	push   eax
c0023210:	e8 6f 49 00 00       	call   c0027b84 <__divsf3>
c0023215:	83 c4 10             	add    esp,0x10
c0023218:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002321c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0023220:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0023226:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002322a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0023231:	e8 60 fb ff ff       	call   c0022d96 <SoundChannel::unbuffer(float*, int, int)>
c0023236:	83 c4 20             	add    esp,0x20
c0023239:	89 c1                	mov    ecx,eax
c002323b:	39 cd                	cmp    ebp,ecx
c002323d:	7d 52                	jge    c0023291 <SoundDevice::getAudio(int, float*, float*)+0x107>
c002323f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023243:	50                   	push   eax
c0023244:	50                   	push   eax
c0023245:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0023249:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002324c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023250:	e8 6c 47 00 00       	call   c00279c1 <__mulsf3>
c0023255:	5a                   	pop    edx
c0023256:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002325a:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0023260:	e8 4a 4b 00 00       	call   c0027daf <__floatsisf>
c0023265:	59                   	pop    ecx
c0023266:	5a                   	pop    edx
c0023267:	50                   	push   eax
c0023268:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002326c:	e8 13 49 00 00       	call   c0027b84 <__divsf3>
c0023271:	59                   	pop    ecx
c0023272:	5a                   	pop    edx
c0023273:	50                   	push   eax
c0023274:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0023278:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002327b:	e8 1e 44 00 00       	call   c002769e <__addsf3>
c0023280:	83 c4 10             	add    esp,0x10
c0023283:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023287:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002328b:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002328e:	45                   	inc    ebp
c002328f:	eb aa                	jmp    c002323b <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0023291:	39 cf                	cmp    edi,ecx
c0023293:	7e 02                	jle    c0023297 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023295:	89 cf                	mov    edi,ecx
c0023297:	43                   	inc    ebx
c0023298:	83 fb 20             	cmp    ebx,0x20
c002329b:	0f 85 10 ff ff ff    	jne    c00231b1 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00232a1:	83 c4 1c             	add    esp,0x1c
c00232a4:	89 f8                	mov    eax,edi
c00232a6:	5b                   	pop    ebx
c00232a7:	5e                   	pop    esi
c00232a8:	5f                   	pop    edi
c00232a9:	5d                   	pop    ebp
c00232aa:	c3                   	ret    
c00232ab:	90                   	nop

c00232ac <PCI::open(int, int, void*)>:
c00232ac:	83 ec 18             	sub    esp,0x18
c00232af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00232b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00232b5:	50                   	push   eax
c00232b6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00232b9:	31 c0                	xor    eax,eax
c00232bb:	83 c4 1c             	add    esp,0x1c
c00232be:	c3                   	ret    
c00232bf:	90                   	nop

c00232c0 <PCI::close(int, int, void*)>:
c00232c0:	31 c0                	xor    eax,eax
c00232c2:	c3                   	ret    
c00232c3:	90                   	nop

c00232c4 <PCI::PCI()>:
c00232c4:	83 ec 0c             	sub    esp,0xc
c00232c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232cb:	83 ec 08             	sub    esp,0x8
c00232ce:	68 dc d6 02 c0       	push   0xc002d6dc
c00232d3:	50                   	push   eax
c00232d4:	e8 57 08 ff ff       	call   c0013b30 <Bus::Bus(char const*)>
c00232d9:	83 c4 10             	add    esp,0x10
c00232dc:	ba 64 d7 02 c0       	mov    edx,0xc002d764
c00232e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232e5:	89 10                	mov    DWORD PTR [eax],edx
c00232e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00232f1:	0f b6 d0             	movzx  edx,al
c00232f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232f8:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00232ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023303:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023309:	0f b6 d0             	movzx  edx,al
c002330c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023310:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0023315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023319:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002331f:	8d 50 01             	lea    edx,[eax+0x1]
c0023322:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023326:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002332c:	0f b6 d0             	movzx  edx,al
c002332f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023333:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023337:	83 c9 c0             	or     ecx,0xffffffc0
c002333a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002333e:	90                   	nop
c002333f:	83 c4 0c             	add    esp,0xc
c0023342:	c3                   	ret    
c0023343:	90                   	nop

c0023344 <PCI::readBAR8(unsigned int, int)>:
c0023344:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023348:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002334c:	f6 c2 01             	test   dl,0x1
c002334f:	74 07                	je     c0023358 <PCI::readBAR8(unsigned int, int)+0x14>
c0023351:	83 e2 fc             	and    edx,0xfffffffc
c0023354:	01 c2                	add    edx,eax
c0023356:	ec                   	in     al,dx
c0023357:	c3                   	ret    
c0023358:	83 e2 f0             	and    edx,0xfffffff0
c002335b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002335e:	c3                   	ret    
c002335f:	90                   	nop

c0023360 <PCI::readBAR16(unsigned int, int)>:
c0023360:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023364:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023368:	f6 c2 01             	test   dl,0x1
c002336b:	74 08                	je     c0023375 <PCI::readBAR16(unsigned int, int)+0x15>
c002336d:	83 e2 fc             	and    edx,0xfffffffc
c0023370:	01 c2                	add    edx,eax
c0023372:	66 ed                	in     ax,dx
c0023374:	c3                   	ret    
c0023375:	83 e2 f0             	and    edx,0xfffffff0
c0023378:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002337c:	c3                   	ret    
c002337d:	90                   	nop

c002337e <PCI::readBAR32(unsigned int, int)>:
c002337e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023382:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023386:	f6 c2 01             	test   dl,0x1
c0023389:	74 07                	je     c0023392 <PCI::readBAR32(unsigned int, int)+0x14>
c002338b:	83 e2 fc             	and    edx,0xfffffffc
c002338e:	01 c2                	add    edx,eax
c0023390:	ed                   	in     eax,dx
c0023391:	c3                   	ret    
c0023392:	83 e2 f0             	and    edx,0xfffffff0
c0023395:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0023398:	c3                   	ret    
c0023399:	90                   	nop

c002339a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002339a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002339e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00233a6:	f6 c2 01             	test   dl,0x1
c00233a9:	74 07                	je     c00233b2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00233ab:	83 e2 fc             	and    edx,0xfffffffc
c00233ae:	01 ca                	add    edx,ecx
c00233b0:	ee                   	out    dx,al
c00233b1:	c3                   	ret    
c00233b2:	83 e2 f0             	and    edx,0xfffffff0
c00233b5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00233b8:	c3                   	ret    
c00233b9:	90                   	nop

c00233ba <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00233ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00233be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00233c6:	f6 c2 01             	test   dl,0x1
c00233c9:	74 08                	je     c00233d3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00233cb:	83 e2 fc             	and    edx,0xfffffffc
c00233ce:	01 ca                	add    edx,ecx
c00233d0:	66 ef                	out    dx,ax
c00233d2:	c3                   	ret    
c00233d3:	83 e2 f0             	and    edx,0xfffffff0
c00233d6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00233da:	c3                   	ret    
c00233db:	90                   	nop

c00233dc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00233dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00233e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00233e8:	f6 c2 01             	test   dl,0x1
c00233eb:	74 07                	je     c00233f4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00233ed:	83 e2 fc             	and    edx,0xfffffffc
c00233f0:	01 ca                	add    edx,ecx
c00233f2:	ef                   	out    dx,eax
c00233f3:	c3                   	ret    
c00233f4:	83 e2 f0             	and    edx,0xfffffff0
c00233f7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00233fa:	c3                   	ret    
c00233fb:	90                   	nop

c00233fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00233fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023400:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023405:	89 ca                	mov    edx,ecx
c0023407:	c1 e0 10             	shl    eax,0x10
c002340a:	81 e2 fc 00 00 00    	and    edx,0xfc
c0023410:	09 d0                	or     eax,edx
c0023412:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0023417:	c1 e2 08             	shl    edx,0x8
c002341a:	09 d0                	or     eax,edx
c002341c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0023421:	c1 e2 0b             	shl    edx,0xb
c0023424:	09 d0                	or     eax,edx
c0023426:	ba f8 0c 00 00       	mov    edx,0xcf8
c002342b:	0d 00 00 00 80       	or     eax,0x80000000
c0023430:	ef                   	out    dx,eax
c0023431:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023436:	ed                   	in     eax,dx
c0023437:	83 e1 02             	and    ecx,0x2
c002343a:	0f b6 c9             	movzx  ecx,cl
c002343d:	c1 e1 03             	shl    ecx,0x3
c0023440:	d3 e8                	shr    eax,cl
c0023442:	c3                   	ret    
c0023443:	90                   	nop

c0023444 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0023444:	6a 00                	push   0x0
c0023446:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002344b:	50                   	push   eax
c002344c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023451:	50                   	push   eax
c0023452:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023457:	50                   	push   eax
c0023458:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002345c:	e8 9b ff ff ff       	call   c00233fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023461:	83 c4 14             	add    esp,0x14
c0023464:	c3                   	ret    
c0023465:	90                   	nop

c0023466 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0023466:	6a 0e                	push   0xe
c0023468:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002346d:	50                   	push   eax
c002346e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023473:	50                   	push   eax
c0023474:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023479:	50                   	push   eax
c002347a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002347e:	e8 79 ff ff ff       	call   c00233fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023483:	83 c4 14             	add    esp,0x14
c0023486:	0f b6 c0             	movzx  eax,al
c0023489:	c3                   	ret    

c002348a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002348a:	55                   	push   ebp
c002348b:	57                   	push   edi
c002348c:	56                   	push   esi
c002348d:	53                   	push   ebx
c002348e:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0023493:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0023498:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c002349d:	6a 0a                	push   0xa
c002349f:	56                   	push   esi
c00234a0:	55                   	push   ebp
c00234a1:	57                   	push   edi
c00234a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00234a6:	e8 51 ff ff ff       	call   c00233fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234ab:	6a 0a                	push   0xa
c00234ad:	89 c3                	mov    ebx,eax
c00234af:	56                   	push   esi
c00234b0:	0f b6 db             	movzx  ebx,bl
c00234b3:	55                   	push   ebp
c00234b4:	57                   	push   edi
c00234b5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00234b9:	e8 3e ff ff ff       	call   c00233fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234be:	83 c4 28             	add    esp,0x28
c00234c1:	25 00 ff 00 00       	and    eax,0xff00
c00234c6:	09 d8                	or     eax,ebx
c00234c8:	5b                   	pop    ebx
c00234c9:	5e                   	pop    esi
c00234ca:	5f                   	pop    edi
c00234cb:	5d                   	pop    ebp
c00234cc:	c3                   	ret    
c00234cd:	90                   	nop

c00234ce <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00234ce:	6a 08                	push   0x8
c00234d0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234d5:	50                   	push   eax
c00234d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234db:	50                   	push   eax
c00234dc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234e1:	50                   	push   eax
c00234e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00234e6:	e8 11 ff ff ff       	call   c00233fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234eb:	83 c4 14             	add    esp,0x14
c00234ee:	0f b6 c4             	movzx  eax,ah
c00234f1:	c3                   	ret    

c00234f2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00234f2:	6a 08                	push   0x8
c00234f4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234f9:	50                   	push   eax
c00234fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234ff:	50                   	push   eax
c0023500:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023505:	50                   	push   eax
c0023506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002350a:	e8 ed fe ff ff       	call   c00233fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002350f:	83 c4 14             	add    esp,0x14
c0023512:	c3                   	ret    
c0023513:	90                   	nop

c0023514 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0023514:	6a 3c                	push   0x3c
c0023516:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002351b:	50                   	push   eax
c002351c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023521:	50                   	push   eax
c0023522:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023527:	50                   	push   eax
c0023528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002352c:	e8 cb fe ff ff       	call   c00233fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023531:	83 c4 14             	add    esp,0x14
c0023534:	c3                   	ret    
c0023535:	90                   	nop

c0023536 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0023536:	6a 18                	push   0x18
c0023538:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002353d:	50                   	push   eax
c002353e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023543:	50                   	push   eax
c0023544:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023549:	50                   	push   eax
c002354a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002354e:	e8 a9 fe ff ff       	call   c00233fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023553:	83 c4 14             	add    esp,0x14
c0023556:	0f b6 c4             	movzx  eax,ah
c0023559:	c3                   	ret    

c002355a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002355a:	55                   	push   ebp
c002355b:	57                   	push   edi
c002355c:	56                   	push   esi
c002355d:	53                   	push   ebx
c002355e:	50                   	push   eax
c002355f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0023563:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0023568:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002356d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0023572:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023579:	8d 43 12             	lea    eax,[ebx+0x12]
c002357c:	83 c3 10             	add    ebx,0x10
c002357f:	0f b6 c0             	movzx  eax,al
c0023582:	0f b6 db             	movzx  ebx,bl
c0023585:	50                   	push   eax
c0023586:	51                   	push   ecx
c0023587:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002358b:	57                   	push   edi
c002358c:	55                   	push   ebp
c002358d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0023591:	e8 66 fe ff ff       	call   c00233fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023596:	53                   	push   ebx
c0023597:	89 c6                	mov    esi,eax
c0023599:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002359d:	c1 e6 10             	shl    esi,0x10
c00235a0:	51                   	push   ecx
c00235a1:	57                   	push   edi
c00235a2:	55                   	push   ebp
c00235a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00235a7:	e8 50 fe ff ff       	call   c00233fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235ac:	83 c4 2c             	add    esp,0x2c
c00235af:	0f b7 c0             	movzx  eax,ax
c00235b2:	5b                   	pop    ebx
c00235b3:	09 f0                	or     eax,esi
c00235b5:	5e                   	pop    esi
c00235b6:	5f                   	pop    edi
c00235b7:	5d                   	pop    ebp
c00235b8:	c3                   	ret    
c00235b9:	90                   	nop

c00235ba <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00235ba:	53                   	push   ebx
c00235bb:	ba f8 0c 00 00       	mov    edx,0xcf8
c00235c0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00235c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235c9:	c1 e1 10             	shl    ecx,0x10
c00235cc:	25 fc 00 00 00       	and    eax,0xfc
c00235d1:	09 c1                	or     ecx,eax
c00235d3:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00235d8:	c1 e0 08             	shl    eax,0x8
c00235db:	09 c1                	or     ecx,eax
c00235dd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00235e2:	c1 e0 0b             	shl    eax,0xb
c00235e5:	09 c1                	or     ecx,eax
c00235e7:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00235ed:	89 c8                	mov    eax,ecx
c00235ef:	ef                   	out    dx,eax
c00235f0:	ba fc 0c 00 00       	mov    edx,0xcfc
c00235f5:	ed                   	in     eax,dx
c00235f6:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00235fb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023600:	74 0a                	je     c002360c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023602:	0f b7 d8             	movzx  ebx,ax
c0023605:	89 d0                	mov    eax,edx
c0023607:	c1 e0 10             	shl    eax,0x10
c002360a:	eb 05                	jmp    c0023611 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002360c:	66 31 c0             	xor    ax,ax
c002360f:	89 d3                	mov    ebx,edx
c0023611:	09 c3                	or     ebx,eax
c0023613:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023618:	89 c8                	mov    eax,ecx
c002361a:	ef                   	out    dx,eax
c002361b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023620:	89 d8                	mov    eax,ebx
c0023622:	ef                   	out    dx,eax
c0023623:	5b                   	pop    ebx
c0023624:	c3                   	ret    
c0023625:	90                   	nop

c0023626 <PCI::pciDetailsToFilepath(PCIDeviceInfo)>:
c0023626:	31 c0                	xor    eax,eax
c0023628:	c3                   	ret    
c0023629:	90                   	nop

c002362a <PCI::checkBus(unsigned char)>:
c002362a:	56                   	push   esi
c002362b:	53                   	push   ebx
c002362c:	31 db                	xor    ebx,ebx
c002362e:	51                   	push   ecx
c002362f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023634:	52                   	push   edx
c0023635:	53                   	push   ebx
c0023636:	43                   	inc    ebx
c0023637:	56                   	push   esi
c0023638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002363c:	e8 41 03 00 00       	call   c0023982 <PCI::checkDevice(unsigned char, unsigned char)>
c0023641:	83 c4 10             	add    esp,0x10
c0023644:	83 fb 20             	cmp    ebx,0x20
c0023647:	75 eb                	jne    c0023634 <PCI::checkBus(unsigned char)+0xa>
c0023649:	58                   	pop    eax
c002364a:	5b                   	pop    ebx
c002364b:	5e                   	pop    esi
c002364c:	c3                   	ret    
c002364d:	90                   	nop

c002364e <PCI::foundDevice(PCIDeviceInfo)>:
c002364e:	55                   	push   ebp
c002364f:	57                   	push   edi
c0023650:	56                   	push   esi
c0023651:	53                   	push   ebx
c0023652:	83 ec 1c             	sub    esp,0x1c
c0023655:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023659:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002365f:	0f 84 68 01 00 00    	je     c00237cd <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c0023665:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023669:	66 81 f9 06 04       	cmp    cx,0x406
c002366e:	75 2c                	jne    c002369c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023670:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023675:	50                   	push   eax
c0023676:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002367b:	50                   	push   eax
c002367c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023681:	50                   	push   eax
c0023682:	56                   	push   esi
c0023683:	e8 ae fe ff ff       	call   c0023536 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023688:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002368c:	0f b6 c0             	movzx  eax,al
c002368f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023693:	83 c4 2c             	add    esp,0x2c
c0023696:	5b                   	pop    ebx
c0023697:	5e                   	pop    esi
c0023698:	5f                   	pop    edi
c0023699:	5d                   	pop    ebp
c002369a:	eb 8e                	jmp    c002362a <PCI::checkBus(unsigned char)>
c002369c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00236a0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00236a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00236aa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00236ae:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00236b2:	88 d3                	mov    bl,dl
c00236b4:	85 c0                	test   eax,eax
c00236b6:	74 33                	je     c00236eb <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00236b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00236bb:	85 d2                	test   edx,edx
c00236bd:	74 28                	je     c00236e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00236bf:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00236c5:	31 ef                	xor    edi,ebp
c00236c7:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00236cd:	75 18                	jne    c00236e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00236cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00236d3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00236d9:	75 0c                	jne    c00236e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00236db:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00236e1:	0f 84 e6 00 00 00    	je     c00237cd <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c00236e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00236e9:	eb c9                	jmp    c00236b4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00236eb:	66 81 f9 01 06       	cmp    cx,0x601
c00236f0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00236f4:	75 19                	jne    c002370f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00236f6:	83 ec 0c             	sub    esp,0xc
c00236f9:	68 64 01 00 00       	push   0x164
c00236fe:	e8 bd c1 fe ff       	call   c000f8c0 <malloc>
c0023703:	89 c5                	mov    ebp,eax
c0023705:	89 04 24             	mov    DWORD PTR [esp],eax
c0023708:	e8 ab 0f 00 00       	call   c00246b8 <SATABus::SATABus()>
c002370d:	eb 1e                	jmp    c002372d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002370f:	66 81 f9 01 01       	cmp    cx,0x101
c0023714:	75 60                	jne    c0023776 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023716:	83 ec 0c             	sub    esp,0xc
c0023719:	68 70 02 00 00       	push   0x270
c002371e:	e8 9d c1 fe ff       	call   c000f8c0 <malloc>
c0023723:	89 c5                	mov    ebp,eax
c0023725:	89 04 24             	mov    DWORD PTR [esp],eax
c0023728:	e8 19 03 00 00       	call   c0023a46 <IDE::IDE()>
c002372d:	58                   	pop    eax
c002372e:	5a                   	pop    edx
c002372f:	55                   	push   ebp
c0023730:	56                   	push   esi
c0023731:	e8 84 0b ff ff       	call   c00142ba <Device::addChild(Device*)>
c0023736:	83 ec 1c             	sub    esp,0x1c
c0023739:	b9 09 00 00 00       	mov    ecx,0x9
c002373e:	fc                   	cld    
c002373f:	89 e7                	mov    edi,esp
c0023741:	89 de                	mov    esi,ebx
c0023743:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023745:	55                   	push   ebp
c0023746:	e8 83 0a ff ff       	call   c00141ce <Device::preOpenPCI(PCIDeviceInfo)>
c002374b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002374e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023752:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002375a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023762:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002376a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002376d:	83 c4 4c             	add    esp,0x4c
c0023770:	5b                   	pop    ebx
c0023771:	5e                   	pop    esi
c0023772:	5f                   	pop    edi
c0023773:	5d                   	pop    ebp
c0023774:	ff e0                	jmp    eax
c0023776:	50                   	push   eax
c0023777:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c002377c:	50                   	push   eax
c002377d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0023782:	50                   	push   eax
c0023783:	68 e4 d6 02 c0       	push   0xc002d6e4
c0023788:	e8 02 f7 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c002378d:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c0023794:	e8 27 c1 fe ff       	call   c000f8c0 <malloc>
c0023799:	5a                   	pop    edx
c002379a:	89 c5                	mov    ebp,eax
c002379c:	59                   	pop    ecx
c002379d:	68 00 d7 02 c0       	push   0xc002d700
c00237a2:	50                   	push   eax
c00237a3:	e8 08 0e ff ff       	call   c00145b0 <DriverlessDevice::DriverlessDevice(char const*)>
c00237a8:	5f                   	pop    edi
c00237a9:	58                   	pop    eax
c00237aa:	55                   	push   ebp
c00237ab:	56                   	push   esi
c00237ac:	e8 09 0b ff ff       	call   c00142ba <Device::addChild(Device*)>
c00237b1:	b9 09 00 00 00       	mov    ecx,0x9
c00237b6:	fc                   	cld    
c00237b7:	89 df                	mov    edi,ebx
c00237b9:	89 de                	mov    esi,ebx
c00237bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00237bd:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00237c1:	83 c4 2c             	add    esp,0x2c
c00237c4:	5b                   	pop    ebx
c00237c5:	5e                   	pop    esi
c00237c6:	5f                   	pop    edi
c00237c7:	5d                   	pop    ebp
c00237c8:	e9 01 0a ff ff       	jmp    c00141ce <Device::preOpenPCI(PCIDeviceInfo)>
c00237cd:	83 c4 1c             	add    esp,0x1c
c00237d0:	5b                   	pop    ebx
c00237d1:	5e                   	pop    esi
c00237d2:	5f                   	pop    edi
c00237d3:	5d                   	pop    ebp
c00237d4:	c3                   	ret    
c00237d5:	90                   	nop

c00237d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00237d6:	55                   	push   ebp
c00237d7:	57                   	push   edi
c00237d8:	56                   	push   esi
c00237d9:	53                   	push   ebx
c00237da:	83 ec 5c             	sub    esp,0x5c
c00237dd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00237e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00237e5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00237e9:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00237ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00237f2:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00237f6:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c00237fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00237ff:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0023804:	6a 0c                	push   0xc
c0023806:	55                   	push   ebp
c0023807:	53                   	push   ebx
c0023808:	57                   	push   edi
c0023809:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0023810:	e8 e7 fb ff ff       	call   c00233fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023815:	55                   	push   ebp
c0023816:	53                   	push   ebx
c0023817:	57                   	push   edi
c0023818:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002381f:	e8 66 fc ff ff       	call   c002348a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023824:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0023829:	83 c4 24             	add    esp,0x24
c002382c:	55                   	push   ebp
c002382d:	53                   	push   ebx
c002382e:	57                   	push   edi
c002382f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023833:	e8 dc fc ff ff       	call   c0023514 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0023838:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002383c:	6a 3c                	push   0x3c
c002383e:	55                   	push   ebp
c002383f:	53                   	push   ebx
c0023840:	57                   	push   edi
c0023841:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023848:	e8 af fb ff ff       	call   c00233fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002384d:	0f b6 c4             	movzx  eax,ah
c0023850:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023854:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023858:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c002385c:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0023861:	83 c4 24             	add    esp,0x24
c0023864:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002386a:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023871:	74 6c                	je     c00238df <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023873:	31 f6                	xor    esi,esi
c0023875:	8b 15 08 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f108
c002387b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023881:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0023887:	7e 56                	jle    c00238df <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023889:	8d 14 f2             	lea    edx,[edx+esi*8]
c002388c:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023893:	39 cb                	cmp    ebx,ecx
c0023895:	75 45                	jne    c00238dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023897:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002389e:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00238a2:	75 38                	jne    c00238dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00238a4:	83 ec 0c             	sub    esp,0xc
c00238a7:	68 1a d7 02 c0       	push   0xc002d71a
c00238ac:	e8 de f5 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00238b1:	8b 15 08 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f108
c00238b7:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00238bd:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00238c5:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00238c9:	52                   	push   edx
c00238ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00238ce:	53                   	push   ebx
c00238cf:	68 3f d7 02 c0       	push   0xc002d73f
c00238d4:	e8 b6 f5 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00238d9:	83 c4 20             	add    esp,0x20
c00238dc:	46                   	inc    esi
c00238dd:	eb 96                	jmp    c0023875 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00238df:	31 d2                	xor    edx,edx
c00238e1:	83 ec 0c             	sub    esp,0xc
c00238e4:	55                   	push   ebp
c00238e5:	53                   	push   ebx
c00238e6:	57                   	push   edi
c00238e7:	52                   	push   edx
c00238e8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238ec:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00238f3:	e8 62 fc ff ff       	call   c002355a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00238f8:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c00238fc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023900:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023904:	42                   	inc    edx
c0023905:	83 c4 20             	add    esp,0x20
c0023908:	83 fa 06             	cmp    edx,0x6
c002390b:	75 d4                	jne    c00238e1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002390d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023911:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0023915:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023919:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002391d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023921:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0023925:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002392a:	86 e0                	xchg   al,ah
c002392c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0023931:	55                   	push   ebp
c0023932:	53                   	push   ebx
c0023933:	57                   	push   edi
c0023934:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023938:	e8 91 fb ff ff       	call   c00234ce <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002393d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023941:	55                   	push   ebp
c0023942:	53                   	push   ebx
c0023943:	57                   	push   edi
c0023944:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002394b:	e8 f4 fa ff ff       	call   c0023444 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023950:	83 ec 0c             	sub    esp,0xc
c0023953:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0023958:	b9 09 00 00 00       	mov    ecx,0x9
c002395d:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0023961:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0023965:	fc                   	cld    
c0023966:	89 e7                	mov    edi,esp
c0023968:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002396a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0023971:	e8 d8 fc ff ff       	call   c002364e <PCI::foundDevice(PCIDeviceInfo)>
c0023976:	81 c4 8c 00 00 00    	add    esp,0x8c
c002397c:	5b                   	pop    ebx
c002397d:	5e                   	pop    esi
c002397e:	5f                   	pop    edi
c002397f:	5d                   	pop    ebp
c0023980:	c3                   	ret    
c0023981:	90                   	nop

c0023982 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023982:	55                   	push   ebp
c0023983:	57                   	push   edi
c0023984:	56                   	push   esi
c0023985:	53                   	push   ebx
c0023986:	83 ec 0c             	sub    esp,0xc
c0023989:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002398d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023992:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023997:	6a 00                	push   0x0
c0023999:	56                   	push   esi
c002399a:	57                   	push   edi
c002399b:	55                   	push   ebp
c002399c:	e8 a3 fa ff ff       	call   c0023444 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00239a1:	6a 00                	push   0x0
c00239a3:	56                   	push   esi
c00239a4:	57                   	push   edi
c00239a5:	55                   	push   ebp
c00239a6:	e8 2b fe ff ff       	call   c00237d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00239ab:	83 c4 20             	add    esp,0x20
c00239ae:	6a 00                	push   0x0
c00239b0:	56                   	push   esi
c00239b1:	57                   	push   edi
c00239b2:	55                   	push   ebp
c00239b3:	e8 ae fa ff ff       	call   c0023466 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00239b8:	83 c4 10             	add    esp,0x10
c00239bb:	84 c0                	test   al,al
c00239bd:	79 27                	jns    c00239e6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00239bf:	bb 01 00 00 00       	mov    ebx,0x1
c00239c4:	53                   	push   ebx
c00239c5:	56                   	push   esi
c00239c6:	57                   	push   edi
c00239c7:	55                   	push   ebp
c00239c8:	e8 77 fa ff ff       	call   c0023444 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00239cd:	83 c4 10             	add    esp,0x10
c00239d0:	66 40                	inc    ax
c00239d2:	74 0c                	je     c00239e0 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00239d4:	53                   	push   ebx
c00239d5:	56                   	push   esi
c00239d6:	57                   	push   edi
c00239d7:	55                   	push   ebp
c00239d8:	e8 f9 fd ff ff       	call   c00237d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00239dd:	83 c4 10             	add    esp,0x10
c00239e0:	43                   	inc    ebx
c00239e1:	83 fb 08             	cmp    ebx,0x8
c00239e4:	75 de                	jne    c00239c4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00239e6:	83 c4 0c             	add    esp,0xc
c00239e9:	5b                   	pop    ebx
c00239ea:	5e                   	pop    esi
c00239eb:	5f                   	pop    edi
c00239ec:	5d                   	pop    ebp
c00239ed:	c3                   	ret    

c00239ee <PCI::detect()>:
c00239ee:	56                   	push   esi
c00239ef:	53                   	push   ebx
c00239f0:	53                   	push   ebx
c00239f1:	31 db                	xor    ebx,ebx
c00239f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00239f7:	6a 00                	push   0x0
c00239f9:	6a 00                	push   0x0
c00239fb:	6a 00                	push   0x0
c00239fd:	56                   	push   esi
c00239fe:	e8 63 fa ff ff       	call   c0023466 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023a03:	83 c4 10             	add    esp,0x10
c0023a06:	a8 80                	test   al,0x80
c0023a08:	75 21                	jne    c0023a2b <PCI::detect()+0x3d>
c0023a0a:	51                   	push   ecx
c0023a0b:	51                   	push   ecx
c0023a0c:	6a 00                	push   0x0
c0023a0e:	56                   	push   esi
c0023a0f:	e8 16 fc ff ff       	call   c002362a <PCI::checkBus(unsigned char)>
c0023a14:	83 c4 10             	add    esp,0x10
c0023a17:	eb 24                	jmp    c0023a3d <PCI::detect()+0x4f>
c0023a19:	52                   	push   edx
c0023a1a:	52                   	push   edx
c0023a1b:	53                   	push   ebx
c0023a1c:	43                   	inc    ebx
c0023a1d:	56                   	push   esi
c0023a1e:	e8 07 fc ff ff       	call   c002362a <PCI::checkBus(unsigned char)>
c0023a23:	83 c4 10             	add    esp,0x10
c0023a26:	83 fb 08             	cmp    ebx,0x8
c0023a29:	74 12                	je     c0023a3d <PCI::detect()+0x4f>
c0023a2b:	53                   	push   ebx
c0023a2c:	6a 00                	push   0x0
c0023a2e:	6a 00                	push   0x0
c0023a30:	56                   	push   esi
c0023a31:	e8 0e fa ff ff       	call   c0023444 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023a36:	83 c4 10             	add    esp,0x10
c0023a39:	66 40                	inc    ax
c0023a3b:	74 dc                	je     c0023a19 <PCI::detect()+0x2b>
c0023a3d:	58                   	pop    eax
c0023a3e:	5b                   	pop    ebx
c0023a3f:	5e                   	pop    esi
c0023a40:	c3                   	ret    
c0023a41:	90                   	nop

c0023a42 <IDE::close(int, int, void*)>:
c0023a42:	83 c8 ff             	or     eax,0xffffffff
c0023a45:	c3                   	ret    

c0023a46 <IDE::IDE()>:
c0023a46:	83 ec 0c             	sub    esp,0xc
c0023a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a4d:	83 ec 08             	sub    esp,0x8
c0023a50:	68 88 d7 02 c0       	push   0xc002d788
c0023a55:	50                   	push   eax
c0023a56:	e8 f9 0b ff ff       	call   c0014654 <HardDiskController::HardDiskController(char const*)>
c0023a5b:	83 c4 10             	add    esp,0x10
c0023a5e:	ba c8 d9 02 c0       	mov    edx,0xc002d9c8
c0023a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a67:	89 10                	mov    DWORD PTR [eax],edx
c0023a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a6d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023a74:	90                   	nop
c0023a75:	83 c4 0c             	add    esp,0xc
c0023a78:	c3                   	ret    
c0023a79:	90                   	nop

c0023a7a <IDE::prepareInterrupt(unsigned char)>:
c0023a7a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023a7f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023a83:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023a8b:	c3                   	ret    

c0023a8c <selectDrive(unsigned char, unsigned char)>:
c0023a8c:	c3                   	ret    
c0023a8d:	90                   	nop

c0023a8e <IDE::getBase(unsigned char)>:
c0023a8e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023a93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023a97:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023a9f:	c3                   	ret    

c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023aa0:	55                   	push   ebp
c0023aa1:	57                   	push   edi
c0023aa2:	56                   	push   esi
c0023aa3:	53                   	push   ebx
c0023aa4:	83 ec 1c             	sub    esp,0x1c
c0023aa7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023aab:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023aaf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023ab2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023ab6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023aba:	80 f9 03             	cmp    cl,0x3
c0023abd:	77 51                	ja     c0023b10 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023abf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ac3:	0f b6 f2             	movzx  esi,dl
c0023ac6:	0f b6 db             	movzx  ebx,bl
c0023ac9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023acc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023ad0:	83 ca 80             	or     edx,0xffffff80
c0023ad3:	0f b6 d2             	movzx  edx,dl
c0023ad6:	52                   	push   edx
c0023ad7:	6a 0c                	push   0xc
c0023ad9:	56                   	push   esi
c0023ada:	57                   	push   edi
c0023adb:	e8 c0 ff ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ae0:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023ae5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023ae9:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023aed:	ee                   	out    dx,al
c0023aee:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023af3:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023af7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023afb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023aff:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023b07:	83 c4 2c             	add    esp,0x2c
c0023b0a:	5b                   	pop    ebx
c0023b0b:	5e                   	pop    esi
c0023b0c:	5f                   	pop    edi
c0023b0d:	5d                   	pop    ebp
c0023b0e:	eb 90                	jmp    c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b10:	80 fb 07             	cmp    bl,0x7
c0023b13:	77 12                	ja     c0023b27 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023b15:	0f b6 d2             	movzx  edx,dl
c0023b18:	0f b6 db             	movzx  ebx,bl
c0023b1b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023b23:	89 da                	mov    edx,ebx
c0023b25:	eb 2f                	jmp    c0023b56 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023b27:	80 fb 0d             	cmp    bl,0xd
c0023b2a:	77 13                	ja     c0023b3f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023b2c:	0f b6 d2             	movzx  edx,dl
c0023b2f:	0f b6 db             	movzx  ebx,bl
c0023b32:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023b39:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023b3d:	eb 17                	jmp    c0023b56 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023b3f:	80 fb 15             	cmp    bl,0x15
c0023b42:	77 13                	ja     c0023b57 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023b44:	0f b6 d2             	movzx  edx,dl
c0023b47:	0f b6 db             	movzx  ebx,bl
c0023b4a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023b52:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023b56:	ee                   	out    dx,al
c0023b57:	83 c4 1c             	add    esp,0x1c
c0023b5a:	5b                   	pop    ebx
c0023b5b:	5e                   	pop    esi
c0023b5c:	5f                   	pop    edi
c0023b5d:	5d                   	pop    ebp
c0023b5e:	c3                   	ret    
c0023b5f:	90                   	nop

c0023b60 <IDE::read(unsigned char, unsigned char)>:
c0023b60:	55                   	push   ebp
c0023b61:	57                   	push   edi
c0023b62:	56                   	push   esi
c0023b63:	53                   	push   ebx
c0023b64:	83 ec 1c             	sub    esp,0x1c
c0023b67:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023b6b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023b6f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023b72:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023b76:	3c 03                	cmp    al,0x3
c0023b78:	77 43                	ja     c0023bbd <IDE::read(unsigned char, unsigned char)+0x5d>
c0023b7a:	0f b6 f2             	movzx  esi,dl
c0023b7d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023b80:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023b84:	83 c8 80             	or     eax,0xffffff80
c0023b87:	0f b6 c0             	movzx  eax,al
c0023b8a:	50                   	push   eax
c0023b8b:	6a 0c                	push   0xc
c0023b8d:	56                   	push   esi
c0023b8e:	57                   	push   edi
c0023b8f:	e8 0c ff ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b94:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023b99:	0f b6 c3             	movzx  eax,bl
c0023b9c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023ba0:	ec                   	in     al,dx
c0023ba1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023ba5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023baa:	52                   	push   edx
c0023bab:	6a 0c                	push   0xc
c0023bad:	56                   	push   esi
c0023bae:	57                   	push   edi
c0023baf:	e8 ec fe ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bb4:	83 c4 20             	add    esp,0x20
c0023bb7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023bbb:	eb 49                	jmp    c0023c06 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023bbd:	80 fb 07             	cmp    bl,0x7
c0023bc0:	77 12                	ja     c0023bd4 <IDE::read(unsigned char, unsigned char)+0x74>
c0023bc2:	0f b6 d2             	movzx  edx,dl
c0023bc5:	0f b6 c3             	movzx  eax,bl
c0023bc8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023bd0:	89 c2                	mov    edx,eax
c0023bd2:	eb 31                	jmp    c0023c05 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023bd4:	80 fb 0d             	cmp    bl,0xd
c0023bd7:	77 13                	ja     c0023bec <IDE::read(unsigned char, unsigned char)+0x8c>
c0023bd9:	0f b6 d2             	movzx  edx,dl
c0023bdc:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023be3:	0f b6 d3             	movzx  edx,bl
c0023be6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023bea:	eb 19                	jmp    c0023c05 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023bec:	31 c0                	xor    eax,eax
c0023bee:	80 fb 15             	cmp    bl,0x15
c0023bf1:	77 13                	ja     c0023c06 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023bf3:	0f b6 d2             	movzx  edx,dl
c0023bf6:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023bfe:	0f b6 d3             	movzx  edx,bl
c0023c01:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023c05:	ec                   	in     al,dx
c0023c06:	83 c4 1c             	add    esp,0x1c
c0023c09:	5b                   	pop    ebx
c0023c0a:	5e                   	pop    esi
c0023c0b:	5f                   	pop    edi
c0023c0c:	5d                   	pop    ebp
c0023c0d:	c3                   	ret    

c0023c0e <IDE::waitInterrupt(unsigned char)>:
c0023c0e:	55                   	push   ebp
c0023c0f:	57                   	push   edi
c0023c10:	56                   	push   esi
c0023c11:	53                   	push   ebx
c0023c12:	31 db                	xor    ebx,ebx
c0023c14:	83 ec 0c             	sub    esp,0xc
c0023c17:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023c1b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023c20:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023c28:	89 e8                	mov    eax,ebp
c0023c2a:	84 c0                	test   al,al
c0023c2c:	75 34                	jne    c0023c62 <IDE::waitInterrupt(unsigned char)+0x54>
c0023c2e:	52                   	push   edx
c0023c2f:	6a 0c                	push   0xc
c0023c31:	56                   	push   esi
c0023c32:	57                   	push   edi
c0023c33:	e8 28 ff ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0023c38:	83 c4 10             	add    esp,0x10
c0023c3b:	a8 01                	test   al,0x1
c0023c3d:	75 2b                	jne    c0023c6a <IDE::waitInterrupt(unsigned char)+0x5c>
c0023c3f:	f6 c3 04             	test   bl,0x4
c0023c42:	75 16                	jne    c0023c5a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023c44:	83 fb 32             	cmp    ebx,0x32
c0023c47:	7e 11                	jle    c0023c5a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023c49:	50                   	push   eax
c0023c4a:	50                   	push   eax
c0023c4b:	6a 00                	push   0x0
c0023c4d:	68 80 96 98 00       	push   0x989680
c0023c52:	e8 90 ad ff ff       	call   c001e9e7 <nanoSleep(unsigned long long)>
c0023c57:	83 c4 10             	add    esp,0x10
c0023c5a:	83 fb 3c             	cmp    ebx,0x3c
c0023c5d:	74 0b                	je     c0023c6a <IDE::waitInterrupt(unsigned char)+0x5c>
c0023c5f:	43                   	inc    ebx
c0023c60:	eb be                	jmp    c0023c20 <IDE::waitInterrupt(unsigned char)+0x12>
c0023c62:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023c6a:	83 c4 0c             	add    esp,0xc
c0023c6d:	89 e8                	mov    eax,ebp
c0023c6f:	5b                   	pop    ebx
c0023c70:	5e                   	pop    esi
c0023c71:	5f                   	pop    edi
c0023c72:	5d                   	pop    ebp
c0023c73:	c3                   	ret    

c0023c74 <ideChannel0IRQHandler(regs*, void*)>:
c0023c74:	83 ec 10             	sub    esp,0x10
c0023c77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c7b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023c82:	6a 07                	push   0x7
c0023c84:	6a 00                	push   0x0
c0023c86:	50                   	push   eax
c0023c87:	e8 d4 fe ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0023c8c:	83 c4 1c             	add    esp,0x1c
c0023c8f:	c3                   	ret    

c0023c90 <ideChannel1IRQHandler(regs*, void*)>:
c0023c90:	83 ec 10             	sub    esp,0x10
c0023c93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c97:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023c9e:	6a 07                	push   0x7
c0023ca0:	6a 01                	push   0x1
c0023ca2:	50                   	push   eax
c0023ca3:	e8 b8 fe ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0023ca8:	83 c4 1c             	add    esp,0x1c
c0023cab:	c3                   	ret    

c0023cac <IDE::enableIRQs(unsigned char, bool)>:
c0023cac:	57                   	push   edi
c0023cad:	56                   	push   esi
c0023cae:	be 04 00 00 00       	mov    esi,0x4
c0023cb3:	53                   	push   ebx
c0023cb4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023cb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023cbd:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023cc2:	0f 94 c0             	sete   al
c0023cc5:	d1 e0                	shl    eax,1
c0023cc7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023cce:	0f b6 c0             	movzx  eax,al
c0023cd1:	50                   	push   eax
c0023cd2:	6a 0c                	push   0xc
c0023cd4:	57                   	push   edi
c0023cd5:	53                   	push   ebx
c0023cd6:	e8 c5 fd ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cdb:	83 c4 10             	add    esp,0x10
c0023cde:	50                   	push   eax
c0023cdf:	6a 0c                	push   0xc
c0023ce1:	57                   	push   edi
c0023ce2:	53                   	push   ebx
c0023ce3:	e8 78 fe ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0023ce8:	83 c4 10             	add    esp,0x10
c0023ceb:	4e                   	dec    esi
c0023cec:	75 f0                	jne    c0023cde <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023cee:	5b                   	pop    ebx
c0023cef:	5e                   	pop    esi
c0023cf0:	5f                   	pop    edi
c0023cf1:	c3                   	ret    

c0023cf2 <IDE::open(int, int, void*)>:
c0023cf2:	55                   	push   ebp
c0023cf3:	57                   	push   edi
c0023cf4:	56                   	push   esi
c0023cf5:	53                   	push   ebx
c0023cf6:	83 ec 1c             	sub    esp,0x1c
c0023cf9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023cfd:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023d06:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023d0f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023d16:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023d1d:	0f 85 b0 02 00 00    	jne    c0023fd3 <IDE::open(int, int, void*)+0x2e1>
c0023d23:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023d29:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023d2d:	83 e0 7f             	and    eax,0x7f
c0023d30:	3c 05                	cmp    al,0x5
c0023d32:	74 04                	je     c0023d38 <IDE::open(int, int, void*)+0x46>
c0023d34:	3c 0f                	cmp    al,0xf
c0023d36:	75 32                	jne    c0023d6a <IDE::open(int, int, void*)+0x78>
c0023d38:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023d3e:	83 e0 fc             	and    eax,0xfffffffc
c0023d41:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023d48:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023d4e:	83 e0 fc             	and    eax,0xfffffffc
c0023d51:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023d58:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023d5e:	83 e0 fc             	and    eax,0xfffffffc
c0023d61:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023d68:	eb 14                	jmp    c0023d7e <IDE::open(int, int, void*)+0x8c>
c0023d6a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023d74:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023d7e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023d85:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023d8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023d90:	89 c6                	mov    esi,eax
c0023d92:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023d97:	c1 e6 10             	shl    esi,0x10
c0023d9a:	89 e8                	mov    eax,ebp
c0023d9c:	89 fa                	mov    edx,edi
c0023d9e:	c1 e0 0b             	shl    eax,0xb
c0023da1:	09 f0                	or     eax,esi
c0023da3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023daa:	c1 e6 08             	shl    esi,0x8
c0023dad:	09 c6                	or     esi,eax
c0023daf:	89 f0                	mov    eax,esi
c0023db1:	0d 08 00 00 80       	or     eax,0x80000008
c0023db6:	ef                   	out    dx,eax
c0023db7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023dbc:	89 ca                	mov    edx,ecx
c0023dbe:	ed                   	in     eax,dx
c0023dbf:	c1 e8 10             	shr    eax,0x10
c0023dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0023dc7:	0f 84 f5 00 00 00    	je     c0023ec2 <IDE::open(int, int, void*)+0x1d0>
c0023dcd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023dd3:	89 fa                	mov    edx,edi
c0023dd5:	89 f0                	mov    eax,esi
c0023dd7:	ef                   	out    dx,eax
c0023dd8:	b0 fe                	mov    al,0xfe
c0023dda:	89 ca                	mov    edx,ecx
c0023ddc:	ee                   	out    dx,al
c0023ddd:	89 f0                	mov    eax,esi
c0023ddf:	89 fa                	mov    edx,edi
c0023de1:	ef                   	out    dx,eax
c0023de2:	89 ca                	mov    edx,ecx
c0023de4:	ed                   	in     eax,dx
c0023de5:	3c fe                	cmp    al,0xfe
c0023de7:	0f 85 a9 00 00 00    	jne    c0023e96 <IDE::open(int, int, void*)+0x1a4>
c0023ded:	8b 15 08 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f108
c0023df3:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023dfa:	74 33                	je     c0023e2f <IDE::open(int, int, void*)+0x13d>
c0023dfc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023e02:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023e06:	40                   	inc    eax
c0023e07:	83 ec 0c             	sub    esp,0xc
c0023e0a:	0f b6 c0             	movzx  eax,al
c0023e0d:	50                   	push   eax
c0023e0e:	55                   	push   ebp
c0023e0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023e13:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023e19:	51                   	push   ecx
c0023e1a:	e8 c7 45 ff ff       	call   c00183e6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023e1f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023e24:	83 c4 1c             	add    esp,0x1c
c0023e27:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023e2d:	eb 0a                	jmp    c0023e39 <IDE::open(int, int, void*)+0x147>
c0023e2f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023e39:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023e40:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023e47:	c1 e1 10             	shl    ecx,0x10
c0023e4a:	c1 e0 08             	shl    eax,0x8
c0023e4d:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023e52:	09 c1                	or     ecx,eax
c0023e54:	89 fa                	mov    edx,edi
c0023e56:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023e5d:	c1 e0 0b             	shl    eax,0xb
c0023e60:	09 c1                	or     ecx,eax
c0023e62:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023e68:	89 c8                	mov    eax,ecx
c0023e6a:	ef                   	out    dx,eax
c0023e6b:	be fc 0c 00 00       	mov    esi,0xcfc
c0023e70:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023e76:	89 f2                	mov    edx,esi
c0023e78:	ee                   	out    dx,al
c0023e79:	89 c8                	mov    eax,ecx
c0023e7b:	89 fa                	mov    edx,edi
c0023e7d:	ef                   	out    dx,eax
c0023e7e:	89 f2                	mov    edx,esi
c0023e80:	ed                   	in     eax,dx
c0023e81:	0f b6 c0             	movzx  eax,al
c0023e84:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023e8a:	74 46                	je     c0023ed2 <IDE::open(int, int, void*)+0x1e0>
c0023e8c:	83 ec 0c             	sub    esp,0xc
c0023e8f:	68 a0 d7 02 c0       	push   0xc002d7a0
c0023e94:	eb 34                	jmp    c0023eca <IDE::open(int, int, void*)+0x1d8>
c0023e96:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023e9f:	75 17                	jne    c0023eb8 <IDE::open(int, int, void*)+0x1c6>
c0023ea1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023ea6:	74 07                	je     c0023eaf <IDE::open(int, int, void*)+0x1bd>
c0023ea8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023ead:	75 09                	jne    c0023eb8 <IDE::open(int, int, void*)+0x1c6>
c0023eaf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023eb6:	eb 1a                	jmp    c0023ed2 <IDE::open(int, int, void*)+0x1e0>
c0023eb8:	83 ec 0c             	sub    esp,0xc
c0023ebb:	68 a8 d7 02 c0       	push   0xc002d7a8
c0023ec0:	eb 08                	jmp    c0023eca <IDE::open(int, int, void*)+0x1d8>
c0023ec2:	83 ec 0c             	sub    esp,0xc
c0023ec5:	68 d9 d7 02 c0       	push   0xc002d7d9
c0023eca:	e8 28 6a ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0023ecf:	83 c4 10             	add    esp,0x10
c0023ed2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023ed9:	79 1a                	jns    c0023ef5 <IDE::open(int, int, void*)+0x203>
c0023edb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023ee1:	83 e0 fc             	and    eax,0xfffffffc
c0023ee4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023eeb:	83 c0 08             	add    eax,0x8
c0023eee:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023ef5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023efb:	89 c2                	mov    edx,eax
c0023efd:	83 e2 0f             	and    edx,0xf
c0023f00:	66 83 fa 08          	cmp    dx,0x8
c0023f04:	75 0a                	jne    c0023f10 <IDE::open(int, int, void*)+0x21e>
c0023f06:	83 e8 02             	sub    eax,0x2
c0023f09:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023f10:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023f16:	89 c2                	mov    edx,eax
c0023f18:	83 e2 0f             	and    edx,0xf
c0023f1b:	66 83 fa 08          	cmp    dx,0x8
c0023f1f:	75 0a                	jne    c0023f2b <IDE::open(int, int, void*)+0x239>
c0023f21:	83 e8 02             	sub    eax,0x2
c0023f24:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023f2b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023f32:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023f39:	89 d0                	mov    eax,edx
c0023f3b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023f3e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023f42:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023f46:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023f49:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023f4e:	0f b6 c9             	movzx  ecx,cl
c0023f51:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023f58:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023f5b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023f5f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023f63:	8d 50 02             	lea    edx,[eax+0x2]
c0023f66:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023f6b:	0f b6 d2             	movzx  edx,dl
c0023f6e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023f74:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023f77:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023f7b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023f7f:	8d 48 03             	lea    ecx,[eax+0x3]
c0023f82:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023f87:	0f b6 c9             	movzx  ecx,cl
c0023f8a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023f90:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023f93:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023f97:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023f9b:	8d 50 04             	lea    edx,[eax+0x4]
c0023f9e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023fa4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023fa9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023fb0:	66 85 f6             	test   si,si
c0023fb3:	74 3e                	je     c0023ff3 <IDE::open(int, int, void*)+0x301>
c0023fb5:	0f b6 d2             	movzx  edx,dl
c0023fb8:	83 c0 05             	add    eax,0x5
c0023fbb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023fbe:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023fc2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023fc6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023fcc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023fd1:	eb 20                	jmp    c0023ff3 <IDE::open(int, int, void*)+0x301>
c0023fd3:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023fdd:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023fe7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023fee:	e9 02 ff ff ff       	jmp    c0023ef5 <IDE::open(int, int, void*)+0x203>
c0023ff3:	52                   	push   edx
c0023ff4:	52                   	push   edx
c0023ff5:	6a 00                	push   0x0
c0023ff7:	53                   	push   ebx
c0023ff8:	e8 7d fa ff ff       	call   c0023a7a <IDE::prepareInterrupt(unsigned char)>
c0023ffd:	59                   	pop    ecx
c0023ffe:	5e                   	pop    esi
c0023fff:	6a 01                	push   0x1
c0024001:	53                   	push   ebx
c0024002:	e8 73 fa ff ff       	call   c0023a7a <IDE::prepareInterrupt(unsigned char)>
c0024007:	83 c4 0c             	add    esp,0xc
c002400a:	6a 00                	push   0x0
c002400c:	6a 00                	push   0x0
c002400e:	53                   	push   ebx
c002400f:	e8 98 fc ff ff       	call   c0023cac <IDE::enableIRQs(unsigned char, bool)>
c0024014:	83 c4 0c             	add    esp,0xc
c0024017:	6a 00                	push   0x0
c0024019:	6a 01                	push   0x1
c002401b:	53                   	push   ebx
c002401c:	e8 8b fc ff ff       	call   c0023cac <IDE::enableIRQs(unsigned char, bool)>
c0024021:	83 c4 10             	add    esp,0x10
c0024024:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002402b:	74 40                	je     c002406d <IDE::open(int, int, void*)+0x37b>
c002402d:	83 ec 0c             	sub    esp,0xc
c0024030:	68 03 d8 02 c0       	push   0xc002d803
c0024035:	e8 55 ee fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c002403a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002403d:	6a 01                	push   0x1
c002403f:	68 74 3c 02 c0       	push   0xc0023c74
c0024044:	6a 0e                	push   0xe
c0024046:	53                   	push   ebx
c0024047:	e8 f2 01 ff ff       	call   c001423e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002404c:	83 c4 14             	add    esp,0x14
c002404f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0024055:	53                   	push   ebx
c0024056:	6a 01                	push   0x1
c0024058:	68 90 3c 02 c0       	push   0xc0023c90
c002405d:	6a 0f                	push   0xf
c002405f:	53                   	push   ebx
c0024060:	e8 d9 01 ff ff       	call   c001423e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024065:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002406b:	eb 4a                	jmp    c00240b7 <IDE::open(int, int, void*)+0x3c5>
c002406d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0024077:	50                   	push   eax
c0024078:	6a 0f                	push   0xf
c002407a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0024080:	68 1f d8 02 c0       	push   0xc002d81f
c0024085:	e8 05 ee fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c002408a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002408d:	6a 00                	push   0x0
c002408f:	68 74 3c 02 c0       	push   0xc0023c74
c0024094:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002409a:	53                   	push   ebx
c002409b:	e8 9e 01 ff ff       	call   c001423e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00240a0:	83 c4 14             	add    esp,0x14
c00240a3:	53                   	push   ebx
c00240a4:	6a 00                	push   0x0
c00240a6:	68 90 3c 02 c0       	push   0xc0023c90
c00240ab:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00240b1:	53                   	push   ebx
c00240b2:	e8 87 01 ff ff       	call   c001423e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00240b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00240b9:	83 c4 20             	add    esp,0x20
c00240bc:	83 ec 0c             	sub    esp,0xc
c00240bf:	53                   	push   ebx
c00240c0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00240c3:	83 c4 0c             	add    esp,0xc
c00240c6:	6a 07                	push   0x7
c00240c8:	6a 00                	push   0x0
c00240ca:	53                   	push   ebx
c00240cb:	e8 90 fa ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00240d0:	83 c4 0c             	add    esp,0xc
c00240d3:	6a 07                	push   0x7
c00240d5:	6a 01                	push   0x1
c00240d7:	53                   	push   ebx
c00240d8:	e8 83 fa ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00240dd:	83 c4 0c             	add    esp,0xc
c00240e0:	6a 01                	push   0x1
c00240e2:	6a 00                	push   0x0
c00240e4:	53                   	push   ebx
c00240e5:	e8 c2 fb ff ff       	call   c0023cac <IDE::enableIRQs(unsigned char, bool)>
c00240ea:	83 c4 0c             	add    esp,0xc
c00240ed:	6a 01                	push   0x1
c00240ef:	6a 01                	push   0x1
c00240f1:	53                   	push   ebx
c00240f2:	e8 b5 fb ff ff       	call   c0023cac <IDE::enableIRQs(unsigned char, bool)>
c00240f7:	83 c4 2c             	add    esp,0x2c
c00240fa:	31 c0                	xor    eax,eax
c00240fc:	5b                   	pop    ebx
c00240fd:	5e                   	pop    esi
c00240fe:	5f                   	pop    edi
c00240ff:	5d                   	pop    ebp
c0024100:	c3                   	ret    
c0024101:	90                   	nop

c0024102 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0024102:	55                   	push   ebp
c0024103:	57                   	push   edi
c0024104:	56                   	push   esi
c0024105:	53                   	push   ebx
c0024106:	83 ec 1c             	sub    esp,0x1c
c0024109:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002410d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024111:	8d 50 f8             	lea    edx,[eax-0x8]
c0024114:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024118:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002411c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0024120:	80 fa 03             	cmp    dl,0x3
c0024123:	77 5d                	ja     c0024182 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0024125:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024129:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002412d:	0f b6 db             	movzx  ebx,bl
c0024130:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0024133:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0024137:	83 ca 80             	or     edx,0xffffff80
c002413a:	0f b6 d2             	movzx  edx,dl
c002413d:	52                   	push   edx
c002413e:	6a 0c                	push   0xc
c0024140:	53                   	push   ebx
c0024141:	56                   	push   esi
c0024142:	e8 59 f9 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024147:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002414c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024150:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024154:	0f b6 c0             	movzx  eax,al
c0024157:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002415b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002415d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0024162:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0024166:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002416a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002416e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0024176:	83 c4 2c             	add    esp,0x2c
c0024179:	5b                   	pop    ebx
c002417a:	5e                   	pop    esi
c002417b:	5f                   	pop    edi
c002417c:	5d                   	pop    ebp
c002417d:	e9 1e f9 ff ff       	jmp    c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024182:	3c 07                	cmp    al,0x7
c0024184:	77 10                	ja     c0024196 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0024186:	0f b6 db             	movzx  ebx,bl
c0024189:	0f b6 d0             	movzx  edx,al
c002418c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0024194:	eb 2d                	jmp    c00241c3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024196:	3c 0d                	cmp    al,0xd
c0024198:	77 13                	ja     c00241ad <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002419a:	0f b6 db             	movzx  ebx,bl
c002419d:	0f b6 c0             	movzx  eax,al
c00241a0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00241a7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00241ab:	eb 16                	jmp    c00241c3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00241ad:	3c 15                	cmp    al,0x15
c00241af:	77 14                	ja     c00241c5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00241b1:	0f b6 db             	movzx  ebx,bl
c00241b4:	0f b6 c0             	movzx  eax,al
c00241b7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00241bf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00241c3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00241c5:	83 c4 1c             	add    esp,0x1c
c00241c8:	5b                   	pop    ebx
c00241c9:	5e                   	pop    esi
c00241ca:	5f                   	pop    edi
c00241cb:	5d                   	pop    ebp
c00241cc:	c3                   	ret    
c00241cd:	90                   	nop

c00241ce <IDE::detect()>:
c00241ce:	55                   	push   ebp
c00241cf:	57                   	push   edi
c00241d0:	56                   	push   esi
c00241d1:	53                   	push   ebx
c00241d2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00241d8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00241df:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00241e6:	0f 85 be 02 00 00    	jne    c00244aa <IDE::detect()+0x2dc>
c00241ec:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00241f3:	31 f6                	xor    esi,esi
c00241f5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00241fd:	31 ed                	xor    ebp,ebp
c00241ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024203:	c1 e0 06             	shl    eax,0x6
c0024206:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002420e:	89 e8                	mov    eax,ebp
c0024210:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0024214:	c1 e0 04             	shl    eax,0x4
c0024217:	83 c8 a0             	or     eax,0xffffffa0
c002421a:	0f b6 c0             	movzx  eax,al
c002421d:	50                   	push   eax
c002421e:	6a 06                	push   0x6
c0024220:	56                   	push   esi
c0024221:	53                   	push   ebx
c0024222:	e8 79 f8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024227:	83 c4 0c             	add    esp,0xc
c002422a:	6a 0c                	push   0xc
c002422c:	56                   	push   esi
c002422d:	53                   	push   ebx
c002422e:	e8 2d f9 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024233:	83 c4 0c             	add    esp,0xc
c0024236:	6a 0c                	push   0xc
c0024238:	56                   	push   esi
c0024239:	53                   	push   ebx
c002423a:	e8 21 f9 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c002423f:	83 c4 0c             	add    esp,0xc
c0024242:	6a 0c                	push   0xc
c0024244:	56                   	push   esi
c0024245:	53                   	push   ebx
c0024246:	e8 15 f9 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c002424b:	83 c4 0c             	add    esp,0xc
c002424e:	6a 0c                	push   0xc
c0024250:	56                   	push   esi
c0024251:	53                   	push   ebx
c0024252:	e8 09 f9 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024257:	68 ec 00 00 00       	push   0xec
c002425c:	6a 07                	push   0x7
c002425e:	56                   	push   esi
c002425f:	53                   	push   ebx
c0024260:	e8 3b f8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024265:	83 c4 1c             	add    esp,0x1c
c0024268:	6a 0c                	push   0xc
c002426a:	56                   	push   esi
c002426b:	53                   	push   ebx
c002426c:	e8 ef f8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024271:	83 c4 0c             	add    esp,0xc
c0024274:	6a 0c                	push   0xc
c0024276:	56                   	push   esi
c0024277:	53                   	push   ebx
c0024278:	e8 e3 f8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c002427d:	83 c4 0c             	add    esp,0xc
c0024280:	6a 0c                	push   0xc
c0024282:	56                   	push   esi
c0024283:	53                   	push   ebx
c0024284:	e8 d7 f8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024289:	83 c4 0c             	add    esp,0xc
c002428c:	6a 0c                	push   0xc
c002428e:	56                   	push   esi
c002428f:	53                   	push   ebx
c0024290:	e8 cb f8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024295:	83 c4 0c             	add    esp,0xc
c0024298:	6a 0c                	push   0xc
c002429a:	56                   	push   esi
c002429b:	53                   	push   ebx
c002429c:	e8 bf f8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00242a1:	83 c4 10             	add    esp,0x10
c00242a4:	84 c0                	test   al,al
c00242a6:	0f 84 8b 01 00 00    	je     c0024437 <IDE::detect()+0x269>
c00242ac:	31 ff                	xor    edi,edi
c00242ae:	50                   	push   eax
c00242af:	6a 0c                	push   0xc
c00242b1:	56                   	push   esi
c00242b2:	53                   	push   ebx
c00242b3:	e8 a8 f8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00242b8:	83 c4 10             	add    esp,0x10
c00242bb:	a8 01                	test   al,0x1
c00242bd:	0f 85 8e 01 00 00    	jne    c0024451 <IDE::detect()+0x283>
c00242c3:	84 c0                	test   al,al
c00242c5:	78 04                	js     c00242cb <IDE::detect()+0xfd>
c00242c7:	a8 08                	test   al,0x8
c00242c9:	75 27                	jne    c00242f2 <IDE::detect()+0x124>
c00242cb:	47                   	inc    edi
c00242cc:	81 ff 17 01 00 00    	cmp    edi,0x117
c00242d2:	7e da                	jle    c00242ae <IDE::detect()+0xe0>
c00242d4:	50                   	push   eax
c00242d5:	50                   	push   eax
c00242d6:	6a 00                	push   0x0
c00242d8:	68 40 4b 4c 00       	push   0x4c4b40
c00242dd:	e8 05 a7 ff ff       	call   c001e9e7 <nanoSleep(unsigned long long)>
c00242e2:	83 c4 10             	add    esp,0x10
c00242e5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00242eb:	75 c1                	jne    c00242ae <IDE::detect()+0xe0>
c00242ed:	e9 5f 01 00 00       	jmp    c0024451 <IDE::detect()+0x283>
c00242f2:	31 c9                	xor    ecx,ecx
c00242f4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00242f8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00242fc:	83 ec 0c             	sub    esp,0xc
c00242ff:	68 80 00 00 00       	push   0x80
c0024304:	57                   	push   edi
c0024305:	6a 00                	push   0x0
c0024307:	56                   	push   esi
c0024308:	53                   	push   ebx
c0024309:	e8 f4 fd ff ff       	call   c0024102 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002430e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024313:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024317:	89 d1                	mov    ecx,edx
c0024319:	c1 e0 06             	shl    eax,0x6
c002431c:	01 d8                	add    eax,ebx
c002431e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0024325:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002432c:	89 f2                	mov    edx,esi
c002432e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0024334:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0024338:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002433e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024342:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0024349:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024351:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0024358:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024360:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0024366:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002436d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024373:	8d 54 24 58          	lea    edx,[esp+0x58]
c0024377:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002437b:	83 c4 20             	add    esp,0x20
c002437e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024381:	83 c0 02             	add    eax,0x2
c0024384:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002438a:	83 c7 02             	add    edi,0x2
c002438d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024390:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0024396:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002439a:	75 e2                	jne    c002437e <IDE::detect()+0x1b0>
c002439c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00243a0:	c1 e0 06             	shl    eax,0x6
c00243a3:	01 d8                	add    eax,ebx
c00243a5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00243ab:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00243b2:	66 c1 ea 09          	shr    dx,0x9
c00243b6:	83 e2 01             	and    edx,0x1
c00243b9:	84 c9                	test   cl,cl
c00243bb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00243c1:	75 2f                	jne    c00243f2 <IDE::detect()+0x224>
c00243c3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00243c9:	85 c0                	test   eax,eax
c00243cb:	74 66                	je     c0024433 <IDE::detect()+0x265>
c00243cd:	50                   	push   eax
c00243ce:	55                   	push   ebp
c00243cf:	56                   	push   esi
c00243d0:	68 3b d8 02 c0       	push   0xc002d83b
c00243d5:	e8 b5 ea fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00243da:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00243e1:	e8 da b4 fe ff       	call   c000f8c0 <malloc>
c00243e6:	89 c7                	mov    edi,eax
c00243e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00243eb:	e8 78 06 00 00       	call   c0024a68 <ATA::ATA()>
c00243f0:	eb 28                	jmp    c002441a <IDE::detect()+0x24c>
c00243f2:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00243f8:	55                   	push   ebp
c00243f9:	56                   	push   esi
c00243fa:	68 6a d8 02 c0       	push   0xc002d86a
c00243ff:	e8 8b ea fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0024404:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002440b:	e8 b0 b4 fe ff       	call   c000f8c0 <malloc>
c0024410:	89 c7                	mov    edi,eax
c0024412:	89 04 24             	mov    DWORD PTR [esp],eax
c0024415:	e8 8e 0c 00 00       	call   c00250a8 <ATAPI::ATAPI()>
c002441a:	5a                   	pop    edx
c002441b:	59                   	pop    ecx
c002441c:	57                   	push   edi
c002441d:	53                   	push   ebx
c002441e:	e8 97 fe fe ff       	call   c00142ba <Device::addChild(Device*)>
c0024423:	8b 07                	mov    eax,DWORD PTR [edi]
c0024425:	53                   	push   ebx
c0024426:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002442a:	6a 00                	push   0x0
c002442c:	57                   	push   edi
c002442d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024430:	83 c4 20             	add    esp,0x20
c0024433:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0024437:	4d                   	dec    ebp
c0024438:	74 0a                	je     c0024444 <IDE::detect()+0x276>
c002443a:	bd 01 00 00 00       	mov    ebp,0x1
c002443f:	e9 bb fd ff ff       	jmp    c00241ff <IDE::detect()+0x31>
c0024444:	4e                   	dec    esi
c0024445:	74 63                	je     c00244aa <IDE::detect()+0x2dc>
c0024447:	be 01 00 00 00       	mov    esi,0x1
c002444c:	e9 ac fd ff ff       	jmp    c00241fd <IDE::detect()+0x2f>
c0024451:	50                   	push   eax
c0024452:	6a 04                	push   0x4
c0024454:	56                   	push   esi
c0024455:	53                   	push   ebx
c0024456:	e8 05 f7 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c002445b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002445f:	83 c4 0c             	add    esp,0xc
c0024462:	6a 05                	push   0x5
c0024464:	56                   	push   esi
c0024465:	53                   	push   ebx
c0024466:	e8 f5 f6 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c002446b:	83 c4 10             	add    esp,0x10
c002446e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024472:	80 fa 14             	cmp    dl,0x14
c0024475:	75 04                	jne    c002447b <IDE::detect()+0x2ad>
c0024477:	3c eb                	cmp    al,0xeb
c0024479:	eb 07                	jmp    c0024482 <IDE::detect()+0x2b4>
c002447b:	3c 96                	cmp    al,0x96
c002447d:	75 b8                	jne    c0024437 <IDE::detect()+0x269>
c002447f:	80 fa 69             	cmp    dl,0x69
c0024482:	75 b3                	jne    c0024437 <IDE::detect()+0x269>
c0024484:	68 a1 00 00 00       	push   0xa1
c0024489:	6a 07                	push   0x7
c002448b:	56                   	push   esi
c002448c:	53                   	push   ebx
c002448d:	e8 0e f6 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024492:	5f                   	pop    edi
c0024493:	58                   	pop    eax
c0024494:	6a 00                	push   0x0
c0024496:	68 40 42 0f 00       	push   0xf4240
c002449b:	e8 47 a5 ff ff       	call   c001e9e7 <nanoSleep(unsigned long long)>
c00244a0:	83 c4 10             	add    esp,0x10
c00244a3:	b1 01                	mov    cl,0x1
c00244a5:	e9 4a fe ff ff       	jmp    c00242f4 <IDE::detect()+0x126>
c00244aa:	81 c4 1c 02 00 00    	add    esp,0x21c
c00244b0:	5b                   	pop    ebx
c00244b1:	5e                   	pop    esi
c00244b2:	5f                   	pop    edi
c00244b3:	5d                   	pop    ebp
c00244b4:	c3                   	ret    
c00244b5:	90                   	nop

c00244b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00244b6:	55                   	push   ebp
c00244b7:	57                   	push   edi
c00244b8:	56                   	push   esi
c00244b9:	53                   	push   ebx
c00244ba:	83 ec 1c             	sub    esp,0x1c
c00244bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00244c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00244c5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00244c9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00244cd:	88 c3                	mov    bl,al
c00244cf:	84 c0                	test   al,al
c00244d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244d5:	0f 84 67 01 00 00    	je     c0024642 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00244db:	83 ec 0c             	sub    esp,0xc
c00244de:	68 9b d8 02 c0       	push   0xc002d89b
c00244e3:	e8 a7 e9 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00244e8:	83 c4 10             	add    esp,0x10
c00244eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244ef:	3c 01                	cmp    al,0x1
c00244f1:	75 17                	jne    c002450a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00244f3:	83 ec 0c             	sub    esp,0xc
c00244f6:	b3 13                	mov    bl,0x13
c00244f8:	68 a7 d8 02 c0       	push   0xc002d8a7
c00244fd:	e8 8d e9 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0024502:	83 c4 10             	add    esp,0x10
c0024505:	e9 25 01 00 00       	jmp    c002462f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002450a:	3c 02                	cmp    al,0x2
c002450c:	0f 85 ef 00 00 00    	jne    c0024601 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024512:	d1 e6                	shl    esi,1
c0024514:	09 ee                	or     esi,ebp
c0024516:	52                   	push   edx
c0024517:	89 f0                	mov    eax,esi
c0024519:	6a 01                	push   0x1
c002451b:	0f b6 f0             	movzx  esi,al
c002451e:	c1 e6 06             	shl    esi,0x6
c0024521:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0024529:	50                   	push   eax
c002452a:	57                   	push   edi
c002452b:	e8 30 f6 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024530:	83 c4 10             	add    esp,0x10
c0024533:	89 c6                	mov    esi,eax
c0024535:	a8 01                	test   al,0x1
c0024537:	74 12                	je     c002454b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0024539:	83 ec 0c             	sub    esp,0xc
c002453c:	b3 07                	mov    bl,0x7
c002453e:	68 bc d8 02 c0       	push   0xc002d8bc
c0024543:	e8 47 e9 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0024548:	83 c4 10             	add    esp,0x10
c002454b:	f7 c6 02 00 00 00    	test   esi,0x2
c0024551:	74 12                	je     c0024565 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024553:	83 ec 0c             	sub    esp,0xc
c0024556:	b3 03                	mov    bl,0x3
c0024558:	68 da d8 02 c0       	push   0xc002d8da
c002455d:	e8 2d e9 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0024562:	83 c4 10             	add    esp,0x10
c0024565:	f7 c6 04 00 00 00    	test   esi,0x4
c002456b:	74 12                	je     c002457f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002456d:	83 ec 0c             	sub    esp,0xc
c0024570:	b3 14                	mov    bl,0x14
c0024572:	68 fa d8 02 c0       	push   0xc002d8fa
c0024577:	e8 13 e9 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c002457c:	83 c4 10             	add    esp,0x10
c002457f:	f7 c6 08 00 00 00    	test   esi,0x8
c0024585:	74 12                	je     c0024599 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0024587:	83 ec 0c             	sub    esp,0xc
c002458a:	b3 03                	mov    bl,0x3
c002458c:	68 da d8 02 c0       	push   0xc002d8da
c0024591:	e8 f9 e8 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0024596:	83 c4 10             	add    esp,0x10
c0024599:	f7 c6 10 00 00 00    	test   esi,0x10
c002459f:	74 12                	je     c00245b3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00245a1:	83 ec 0c             	sub    esp,0xc
c00245a4:	b3 15                	mov    bl,0x15
c00245a6:	68 12 d9 02 c0       	push   0xc002d912
c00245ab:	e8 df e8 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00245b0:	83 c4 10             	add    esp,0x10
c00245b3:	f7 c6 20 00 00 00    	test   esi,0x20
c00245b9:	74 12                	je     c00245cd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00245bb:	83 ec 0c             	sub    esp,0xc
c00245be:	b3 03                	mov    bl,0x3
c00245c0:	68 da d8 02 c0       	push   0xc002d8da
c00245c5:	e8 c5 e8 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00245ca:	83 c4 10             	add    esp,0x10
c00245cd:	f7 c6 40 00 00 00    	test   esi,0x40
c00245d3:	74 12                	je     c00245e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00245d5:	83 ec 0c             	sub    esp,0xc
c00245d8:	b3 16                	mov    bl,0x16
c00245da:	68 2c d9 02 c0       	push   0xc002d92c
c00245df:	e8 ab e8 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00245e4:	83 c4 10             	add    esp,0x10
c00245e7:	89 f0                	mov    eax,esi
c00245e9:	84 c0                	test   al,al
c00245eb:	79 42                	jns    c002462f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00245ed:	83 ec 0c             	sub    esp,0xc
c00245f0:	b3 0d                	mov    bl,0xd
c00245f2:	68 4d d9 02 c0       	push   0xc002d94d
c00245f7:	e8 93 e8 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00245fc:	83 c4 10             	add    esp,0x10
c00245ff:	eb 2e                	jmp    c002462f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024601:	3c 03                	cmp    al,0x3
c0024603:	75 14                	jne    c0024619 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0024605:	83 ec 0c             	sub    esp,0xc
c0024608:	b3 17                	mov    bl,0x17
c002460a:	68 61 d9 02 c0       	push   0xc002d961
c002460f:	e8 7b e8 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0024614:	83 c4 10             	add    esp,0x10
c0024617:	eb 16                	jmp    c002462f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024619:	3c 04                	cmp    al,0x4
c002461b:	75 12                	jne    c002462f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002461d:	83 ec 0c             	sub    esp,0xc
c0024620:	b3 08                	mov    bl,0x8
c0024622:	68 77 d9 02 c0       	push   0xc002d977
c0024627:	e8 63 e8 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c002462c:	83 c4 10             	add    esp,0x10
c002462f:	50                   	push   eax
c0024630:	50                   	push   eax
c0024631:	0f b6 c3             	movzx  eax,bl
c0024634:	50                   	push   eax
c0024635:	68 8f d9 02 c0       	push   0xc002d98f
c002463a:	e8 50 e8 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c002463f:	83 c4 10             	add    esp,0x10
c0024642:	83 c4 1c             	add    esp,0x1c
c0024645:	88 d8                	mov    al,bl
c0024647:	5b                   	pop    ebx
c0024648:	5e                   	pop    esi
c0024649:	5f                   	pop    edi
c002464a:	5d                   	pop    ebp
c002464b:	c3                   	ret    

c002464c <IDE::polling(unsigned char, unsigned int)>:
c002464c:	57                   	push   edi
c002464d:	56                   	push   esi
c002464e:	53                   	push   ebx
c002464f:	bb 04 00 00 00       	mov    ebx,0x4
c0024654:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024658:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002465d:	52                   	push   edx
c002465e:	6a 0c                	push   0xc
c0024660:	56                   	push   esi
c0024661:	57                   	push   edi
c0024662:	e8 f9 f4 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024667:	83 c4 10             	add    esp,0x10
c002466a:	4b                   	dec    ebx
c002466b:	75 f0                	jne    c002465d <IDE::polling(unsigned char, unsigned int)+0x11>
c002466d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024672:	50                   	push   eax
c0024673:	6a 0c                	push   0xc
c0024675:	56                   	push   esi
c0024676:	57                   	push   edi
c0024677:	e8 e4 f4 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c002467c:	83 c4 10             	add    esp,0x10
c002467f:	a8 01                	test   al,0x1
c0024681:	74 12                	je     c0024695 <IDE::polling(unsigned char, unsigned int)+0x49>
c0024683:	83 ec 0c             	sub    esp,0xc
c0024686:	68 a9 d9 02 c0       	push   0xc002d9a9
c002468b:	e8 ff e7 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0024690:	83 c4 10             	add    esp,0x10
c0024693:	eb 17                	jmp    c00246ac <IDE::polling(unsigned char, unsigned int)+0x60>
c0024695:	a8 20                	test   al,0x20
c0024697:	75 0f                	jne    c00246a8 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024699:	4b                   	dec    ebx
c002469a:	74 10                	je     c00246ac <IDE::polling(unsigned char, unsigned int)+0x60>
c002469c:	84 c0                	test   al,al
c002469e:	78 d2                	js     c0024672 <IDE::polling(unsigned char, unsigned int)+0x26>
c00246a0:	a8 08                	test   al,0x8
c00246a2:	74 ce                	je     c0024672 <IDE::polling(unsigned char, unsigned int)+0x26>
c00246a4:	31 c0                	xor    eax,eax
c00246a6:	eb 06                	jmp    c00246ae <IDE::polling(unsigned char, unsigned int)+0x62>
c00246a8:	b0 01                	mov    al,0x1
c00246aa:	eb 02                	jmp    c00246ae <IDE::polling(unsigned char, unsigned int)+0x62>
c00246ac:	b0 02                	mov    al,0x2
c00246ae:	5b                   	pop    ebx
c00246af:	5e                   	pop    esi
c00246b0:	5f                   	pop    edi
c00246b1:	c3                   	ret    

c00246b2 <SATABus::close(int, int, void*)>:
c00246b2:	31 c0                	xor    eax,eax
c00246b4:	c3                   	ret    
c00246b5:	90                   	nop

c00246b6 <SATABus::detect()>:
c00246b6:	c3                   	ret    
c00246b7:	90                   	nop

c00246b8 <SATABus::SATABus()>:
c00246b8:	83 ec 0c             	sub    esp,0xc
c00246bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246bf:	83 ec 08             	sub    esp,0x8
c00246c2:	68 ec d9 02 c0       	push   0xc002d9ec
c00246c7:	50                   	push   eax
c00246c8:	e8 87 ff fe ff       	call   c0014654 <HardDiskController::HardDiskController(char const*)>
c00246cd:	83 c4 10             	add    esp,0x10
c00246d0:	ba a8 da 02 c0       	mov    edx,0xc002daa8
c00246d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246d9:	89 10                	mov    DWORD PTR [eax],edx
c00246db:	83 ec 0c             	sub    esp,0xc
c00246de:	6a 50                	push   0x50
c00246e0:	e8 2c b9 fe ff       	call   c0010011 <Phys::allocateContiguousPages(int)>
c00246e5:	83 c4 10             	add    esp,0x10
c00246e8:	89 c2                	mov    edx,eax
c00246ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246ee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00246f4:	83 ec 0c             	sub    esp,0xc
c00246f7:	6a 50                	push   0x50
c00246f9:	e8 8b d3 fe ff       	call   c0011a89 <Virt::allocateKernelVirtualPages(int)>
c00246fe:	83 c4 10             	add    esp,0x10
c0024701:	89 c2                	mov    edx,eax
c0024703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024707:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002470d:	a1 90 f2 02 c0       	mov    eax,ds:0xc002f290
c0024712:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024716:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002471c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024720:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024726:	83 ec 0c             	sub    esp,0xc
c0024729:	6a 03                	push   0x3
c002472b:	6a 50                	push   0x50
c002472d:	51                   	push   ecx
c002472e:	52                   	push   edx
c002472f:	50                   	push   eax
c0024730:	e8 81 de fe ff       	call   c00125b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024735:	83 c4 20             	add    esp,0x20
c0024738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002473c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024746:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002474c:	83 ec 04             	sub    esp,0x4
c002474f:	52                   	push   edx
c0024750:	50                   	push   eax
c0024751:	68 10 da 02 c0       	push   0xc002da10
c0024756:	e8 34 e7 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c002475b:	83 c4 10             	add    esp,0x10
c002475e:	90                   	nop
c002475f:	83 c4 0c             	add    esp,0xc
c0024762:	c3                   	ret    
c0024763:	90                   	nop

c0024764 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024764:	83 ec 0c             	sub    esp,0xc
c0024767:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002476b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002476e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024771:	09 c2                	or     edx,eax
c0024773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024777:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002477d:	8b 08                	mov    ecx,DWORD PTR [eax]
c002477f:	31 c0                	xor    eax,eax
c0024781:	c1 e9 08             	shr    ecx,0x8
c0024784:	83 e1 0f             	and    ecx,0xf
c0024787:	39 c8                	cmp    eax,ecx
c0024789:	74 0a                	je     c0024795 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002478b:	f6 c2 01             	test   dl,0x1
c002478e:	74 18                	je     c00247a8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024790:	d1 ea                	shr    edx,1
c0024792:	40                   	inc    eax
c0024793:	eb f2                	jmp    c0024787 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024795:	83 ec 0c             	sub    esp,0xc
c0024798:	68 34 da 02 c0       	push   0xc002da34
c002479d:	e8 55 61 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00247a2:	83 c4 10             	add    esp,0x10
c00247a5:	83 c8 ff             	or     eax,0xffffffff
c00247a8:	83 c4 0c             	add    esp,0xc
c00247ab:	c3                   	ret    

c00247ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00247ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00247b0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00247b3:	89 c2                	mov    edx,eax
c00247b5:	c1 ea 08             	shr    edx,0x8
c00247b8:	83 e2 0f             	and    edx,0xf
c00247bb:	fe ca                	dec    dl
c00247bd:	75 31                	jne    c00247f0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00247bf:	83 e0 0f             	and    eax,0xf
c00247c2:	3c 03                	cmp    al,0x3
c00247c4:	75 2a                	jne    c00247f0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00247c6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00247c9:	b8 02 00 00 00       	mov    eax,0x2
c00247ce:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00247d4:	74 1c                	je     c00247f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00247d6:	b8 04 00 00 00       	mov    eax,0x4
c00247db:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00247e1:	74 0f                	je     c00247f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00247e3:	31 c0                	xor    eax,eax
c00247e5:	83 fa 03             	cmp    edx,0x3
c00247e8:	0f 94 c0             	sete   al
c00247eb:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00247ef:	c3                   	ret    
c00247f0:	31 c0                	xor    eax,eax
c00247f2:	c3                   	ret    
c00247f3:	90                   	nop

c00247f4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00247f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00247f8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00247fb:	0f ba e2 0f          	bt     edx,0xf
c00247ff:	72 f7                	jb     c00247f8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024801:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024804:	83 ca 10             	or     edx,0x10
c0024807:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002480a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002480d:	83 ca 01             	or     edx,0x1
c0024810:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024813:	c3                   	ret    

c0024814 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024814:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024818:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002481b:	83 e2 fe             	and    edx,0xfffffffe
c002481e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024821:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024824:	83 e2 ef             	and    edx,0xffffffef
c0024827:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002482a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002482d:	0f ba e2 0e          	bt     edx,0xe
c0024831:	72 f7                	jb     c002482a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024833:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024836:	0f ba e2 0f          	bt     edx,0xf
c002483a:	72 ee                	jb     c002482a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002483c:	c3                   	ret    
c002483d:	90                   	nop

c002483e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002483e:	55                   	push   ebp
c002483f:	57                   	push   edi
c0024840:	56                   	push   esi
c0024841:	53                   	push   ebx
c0024842:	83 ec 1c             	sub    esp,0x1c
c0024845:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024849:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002484d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024851:	53                   	push   ebx
c0024852:	89 fd                	mov    ebp,edi
c0024854:	56                   	push   esi
c0024855:	c1 e5 0a             	shl    ebp,0xa
c0024858:	e8 b7 ff ff ff       	call   c0024814 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002485d:	83 ec 0c             	sub    esp,0xc
c0024860:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024866:	01 e8                	add    eax,ebp
c0024868:	89 03                	mov    DWORD PTR [ebx],eax
c002486a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002486c:	68 00 04 00 00       	push   0x400
c0024871:	6a 00                	push   0x0
c0024873:	50                   	push   eax
c0024874:	e8 f3 be fd ff       	call   c000076c <memset>
c0024879:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002487f:	89 fa                	mov    edx,edi
c0024881:	01 e8                	add    eax,ebp
c0024883:	c1 e7 0d             	shl    edi,0xd
c0024886:	89 03                	mov    DWORD PTR [ebx],eax
c0024888:	c1 e2 08             	shl    edx,0x8
c002488b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024892:	81 c2 00 80 00 00    	add    edx,0x8000
c0024898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002489c:	89 d0                	mov    eax,edx
c002489e:	83 c4 1c             	add    esp,0x1c
c00248a1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00248a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00248aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00248ad:	68 00 01 00 00       	push   0x100
c00248b2:	6a 00                	push   0x0
c00248b4:	50                   	push   eax
c00248b5:	e8 b2 be fd ff       	call   c000076c <memset>
c00248ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00248be:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00248c4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00248ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00248ce:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00248d1:	83 c4 10             	add    esp,0x10
c00248d4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00248db:	31 ff                	xor    edi,edi
c00248dd:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00248e3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00248e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00248ed:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00248f3:	83 c5 20             	add    ebp,0x20
c00248f6:	01 f8                	add    eax,edi
c00248f8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00248fb:	52                   	push   edx
c00248fc:	68 00 01 00 00       	push   0x100
c0024901:	6a 00                	push   0x0
c0024903:	50                   	push   eax
c0024904:	e8 63 be fd ff       	call   c000076c <memset>
c0024909:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002490d:	83 c4 10             	add    esp,0x10
c0024910:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024916:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002491d:	01 f8                	add    eax,edi
c002491f:	81 c7 00 01 00 00    	add    edi,0x100
c0024925:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024928:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002492e:	75 b3                	jne    c00248e3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024930:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024934:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024938:	83 c4 1c             	add    esp,0x1c
c002493b:	5b                   	pop    ebx
c002493c:	5e                   	pop    esi
c002493d:	5f                   	pop    edi
c002493e:	5d                   	pop    ebp
c002493f:	e9 b0 fe ff ff       	jmp    c00247f4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024944 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024944:	55                   	push   ebp
c0024945:	57                   	push   edi
c0024946:	56                   	push   esi
c0024947:	53                   	push   ebx
c0024948:	31 db                	xor    ebx,ebx
c002494a:	83 ec 0c             	sub    esp,0xc
c002494d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024951:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024955:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024958:	f7 c7 01 00 00 00    	test   edi,0x1
c002495e:	0f 84 aa 00 00 00    	je     c0024a0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024964:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024968:	89 d8                	mov    eax,ebx
c002496a:	c1 e0 07             	shl    eax,0x7
c002496d:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024974:	55                   	push   ebp
c0024975:	56                   	push   esi
c0024976:	e8 31 fe ff ff       	call   c00247ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002497b:	5a                   	pop    edx
c002497c:	83 f8 01             	cmp    eax,0x1
c002497f:	59                   	pop    ecx
c0024980:	75 30                	jne    c00249b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024982:	50                   	push   eax
c0024983:	50                   	push   eax
c0024984:	53                   	push   ebx
c0024985:	68 59 da 02 c0       	push   0xc002da59
c002498a:	e8 00 e5 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c002498f:	83 c4 0c             	add    esp,0xc
c0024992:	53                   	push   ebx
c0024993:	55                   	push   ebp
c0024994:	56                   	push   esi
c0024995:	e8 a4 fe ff ff       	call   c002483e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002499a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00249a1:	e8 1a af fe ff       	call   c000f8c0 <malloc>
c00249a6:	89 c5                	mov    ebp,eax
c00249a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00249ab:	e8 5c 0d 00 00       	call   c002570c <SATA::SATA()>
c00249b0:	eb 33                	jmp    c00249e5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00249b2:	83 f8 04             	cmp    eax,0x4
c00249b5:	75 47                	jne    c00249fe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00249b7:	50                   	push   eax
c00249b8:	50                   	push   eax
c00249b9:	53                   	push   ebx
c00249ba:	68 70 da 02 c0       	push   0xc002da70
c00249bf:	e8 cb e4 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00249c4:	83 c4 0c             	add    esp,0xc
c00249c7:	53                   	push   ebx
c00249c8:	55                   	push   ebp
c00249c9:	56                   	push   esi
c00249ca:	e8 6f fe ff ff       	call   c002483e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00249cf:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00249d6:	e8 e5 ae fe ff       	call   c000f8c0 <malloc>
c00249db:	89 c5                	mov    ebp,eax
c00249dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00249e0:	e8 df 10 00 00       	call   c0025ac4 <SATAPI::SATAPI()>
c00249e5:	5a                   	pop    edx
c00249e6:	59                   	pop    ecx
c00249e7:	55                   	push   ebp
c00249e8:	56                   	push   esi
c00249e9:	e8 cc f8 fe ff       	call   c00142ba <Device::addChild(Device*)>
c00249ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00249f1:	56                   	push   esi
c00249f2:	6a 00                	push   0x0
c00249f4:	53                   	push   ebx
c00249f5:	55                   	push   ebp
c00249f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00249f9:	83 c4 20             	add    esp,0x20
c00249fc:	eb 10                	jmp    c0024a0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00249fe:	50                   	push   eax
c00249ff:	50                   	push   eax
c0024a00:	53                   	push   ebx
c0024a01:	68 89 da 02 c0       	push   0xc002da89
c0024a06:	e8 84 e4 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0024a0b:	83 c4 10             	add    esp,0x10
c0024a0e:	d1 ef                	shr    edi,1
c0024a10:	43                   	inc    ebx
c0024a11:	83 fb 20             	cmp    ebx,0x20
c0024a14:	0f 85 3e ff ff ff    	jne    c0024958 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024a1a:	83 c4 0c             	add    esp,0xc
c0024a1d:	5b                   	pop    ebx
c0024a1e:	5e                   	pop    esi
c0024a1f:	5f                   	pop    edi
c0024a20:	5d                   	pop    ebp
c0024a21:	c3                   	ret    

c0024a22 <SATABus::open(int, int, void*)>:
c0024a22:	83 ec 14             	sub    esp,0x14
c0024a25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a29:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024a2f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024a35:	52                   	push   edx
c0024a36:	50                   	push   eax
c0024a37:	e8 08 ff ff ff       	call   c0024944 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024a3c:	31 c0                	xor    eax,eax
c0024a3e:	83 c4 1c             	add    esp,0x1c
c0024a41:	c3                   	ret    

c0024a42 <ATA::close(int, int, void*)>:
c0024a42:	83 ec 0c             	sub    esp,0xc
c0024a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a49:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a4f:	85 c0                	test   eax,eax
c0024a51:	74 0c                	je     c0024a5f <ATA::close(int, int, void*)+0x1d>
c0024a53:	83 ec 0c             	sub    esp,0xc
c0024a56:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a58:	50                   	push   eax
c0024a59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a5c:	83 c4 10             	add    esp,0x10
c0024a5f:	31 c0                	xor    eax,eax
c0024a61:	83 c4 0c             	add    esp,0xc
c0024a64:	c3                   	ret    
c0024a65:	90                   	nop

c0024a66 <ATA::powerSaving(PowerSavingLevel)>:
c0024a66:	c3                   	ret    
c0024a67:	90                   	nop

c0024a68 <ATA::ATA()>:
c0024a68:	83 ec 0c             	sub    esp,0xc
c0024a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a6f:	83 ec 04             	sub    esp,0x4
c0024a72:	68 00 02 00 00       	push   0x200
c0024a77:	68 71 db 02 c0       	push   0xc002db71
c0024a7c:	50                   	push   eax
c0024a7d:	e8 6a fc fe ff       	call   c00146ec <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a82:	83 c4 10             	add    esp,0x10
c0024a85:	ba f4 da 02 c0       	mov    edx,0xc002daf4
c0024a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a8e:	89 10                	mov    DWORD PTR [eax],edx
c0024a90:	90                   	nop
c0024a91:	83 c4 0c             	add    esp,0xc
c0024a94:	c3                   	ret    
c0024a95:	90                   	nop

c0024a96 <ATA::flush(bool)>:
c0024a96:	53                   	push   ebx
c0024a97:	83 ec 08             	sub    esp,0x8
c0024a9a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024a9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024aa3:	19 c0                	sbb    eax,eax
c0024aa5:	83 e0 fd             	and    eax,0xfffffffd
c0024aa8:	05 ea 00 00 00       	add    eax,0xea
c0024aad:	50                   	push   eax
c0024aae:	6a 07                	push   0x7
c0024ab0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ab7:	50                   	push   eax
c0024ab8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024abe:	e8 dd ef ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ac3:	83 c4 0c             	add    esp,0xc
c0024ac6:	6a 00                	push   0x0
c0024ac8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024acf:	50                   	push   eax
c0024ad0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ad6:	e8 71 fb ff ff       	call   c002464c <IDE::polling(unsigned char, unsigned int)>
c0024adb:	83 c4 18             	add    esp,0x18
c0024ade:	5b                   	pop    ebx
c0024adf:	c3                   	ret    

c0024ae0 <ATA::readyForCommand()>:
c0024ae0:	56                   	push   esi
c0024ae1:	53                   	push   ebx
c0024ae2:	31 db                	xor    ebx,ebx
c0024ae4:	50                   	push   eax
c0024ae5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024ae9:	50                   	push   eax
c0024aea:	6a 0c                	push   0xc
c0024aec:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024af3:	50                   	push   eax
c0024af4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024afa:	e8 61 f0 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024aff:	83 c4 10             	add    esp,0x10
c0024b02:	a8 88                	test   al,0x88
c0024b04:	74 23                	je     c0024b29 <ATA::readyForCommand()+0x49>
c0024b06:	43                   	inc    ebx
c0024b07:	83 fb 63             	cmp    ebx,0x63
c0024b0a:	7e dd                	jle    c0024ae9 <ATA::readyForCommand()+0x9>
c0024b0c:	51                   	push   ecx
c0024b0d:	51                   	push   ecx
c0024b0e:	6a 00                	push   0x0
c0024b10:	68 40 42 0f 00       	push   0xf4240
c0024b15:	e8 cd 9e ff ff       	call   c001e9e7 <nanoSleep(unsigned long long)>
c0024b1a:	83 c4 10             	add    esp,0x10
c0024b1d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024b23:	75 c4                	jne    c0024ae9 <ATA::readyForCommand()+0x9>
c0024b25:	31 c0                	xor    eax,eax
c0024b27:	eb 02                	jmp    c0024b2b <ATA::readyForCommand()+0x4b>
c0024b29:	b0 01                	mov    al,0x1
c0024b2b:	5a                   	pop    edx
c0024b2c:	5b                   	pop    ebx
c0024b2d:	5e                   	pop    esi
c0024b2e:	c3                   	ret    
c0024b2f:	90                   	nop

c0024b30 <ATA::access(unsigned long long, int, void*, bool)>:
c0024b30:	55                   	push   ebp
c0024b31:	57                   	push   edi
c0024b32:	56                   	push   esi
c0024b33:	53                   	push   ebx
c0024b34:	83 ec 2c             	sub    esp,0x2c
c0024b37:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024b3b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024b3f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024b47:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024b4b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024b4f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024b53:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024b5d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024b63:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024b67:	c1 e0 06             	shl    eax,0x6
c0024b6a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024b72:	74 5d                	je     c0024bd1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024b74:	89 fa                	mov    edx,edi
c0024b76:	89 f0                	mov    eax,esi
c0024b78:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024b7c:	c1 ea 1c             	shr    edx,0x1c
c0024b7f:	89 d1                	mov    ecx,edx
c0024b81:	09 c1                	or     ecx,eax
c0024b83:	74 25                	je     c0024baa <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024b85:	31 ed                	xor    ebp,ebp
c0024b87:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024b8e:	89 fa                	mov    edx,edi
c0024b90:	89 f0                	mov    eax,esi
c0024b92:	0f ad d0             	shrd   eax,edx,cl
c0024b95:	d3 ea                	shr    edx,cl
c0024b97:	f6 c1 20             	test   cl,0x20
c0024b9a:	74 02                	je     c0024b9e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024b9c:	89 d0                	mov    eax,edx
c0024b9e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024ba2:	45                   	inc    ebp
c0024ba3:	83 fd 06             	cmp    ebp,0x6
c0024ba6:	75 df                	jne    c0024b87 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024ba8:	eb 76                	jmp    c0024c20 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024baa:	89 f0                	mov    eax,esi
c0024bac:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024bb1:	89 fa                	mov    edx,edi
c0024bb3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024bba:	0f ac d0 10          	shrd   eax,edx,0x10
c0024bbe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024bc3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024bc7:	c1 ee 18             	shr    esi,0x18
c0024bca:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024bcf:	eb 56                	jmp    c0024c27 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024bd1:	6a 00                	push   0x0
c0024bd3:	6a 3f                	push   0x3f
c0024bd5:	57                   	push   edi
c0024bd6:	56                   	push   esi
c0024bd7:	e8 a8 29 00 00       	call   c0027584 <__umoddi3>
c0024bdc:	83 c4 10             	add    esp,0x10
c0024bdf:	40                   	inc    eax
c0024be0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024be4:	6a 00                	push   0x0
c0024be6:	68 f0 03 00 00       	push   0x3f0
c0024beb:	57                   	push   edi
c0024bec:	56                   	push   esi
c0024bed:	e8 92 28 00 00       	call   c0027484 <__udivdi3>
c0024bf2:	83 c4 10             	add    esp,0x10
c0024bf5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024bfa:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024c01:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024c06:	6a 00                	push   0x0
c0024c08:	6a 3f                	push   0x3f
c0024c0a:	57                   	push   edi
c0024c0b:	56                   	push   esi
c0024c0c:	e8 73 28 00 00       	call   c0027484 <__udivdi3>
c0024c11:	83 c4 10             	add    esp,0x10
c0024c14:	89 c6                	mov    esi,eax
c0024c16:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024c1b:	83 e6 0f             	and    esi,0xf
c0024c1e:	eb 07                	jmp    c0024c27 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024c20:	31 f6                	xor    esi,esi
c0024c22:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024c27:	bf 01 00 00 00       	mov    edi,0x1
c0024c2c:	50                   	push   eax
c0024c2d:	6a 00                	push   0x0
c0024c2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c36:	50                   	push   eax
c0024c37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024c3b:	e8 6c f0 ff ff       	call   c0023cac <IDE::enableIRQs(unsigned char, bool)>
c0024c40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c43:	e8 98 fe ff ff       	call   c0024ae0 <ATA::readyForCommand()>
c0024c48:	83 c4 10             	add    esp,0x10
c0024c4b:	84 c0                	test   al,al
c0024c4d:	0f 84 5a 02 00 00    	je     c0024ead <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024c53:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024c59:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024c5f:	c1 e0 04             	shl    eax,0x4
c0024c62:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024c69:	09 c6                	or     esi,eax
c0024c6b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024c70:	75 05                	jne    c0024c77 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024c72:	83 ce a0             	or     esi,0xffffffa0
c0024c75:	eb 03                	jmp    c0024c7a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024c77:	83 ce e0             	or     esi,0xffffffe0
c0024c7a:	89 f0                	mov    eax,esi
c0024c7c:	0f b6 f0             	movzx  esi,al
c0024c7f:	56                   	push   esi
c0024c80:	6a 06                	push   0x6
c0024c82:	51                   	push   ecx
c0024c83:	52                   	push   edx
c0024c84:	e8 17 ee ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c89:	83 c4 10             	add    esp,0x10
c0024c8c:	6a 00                	push   0x0
c0024c8e:	6a 01                	push   0x1
c0024c90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c97:	50                   	push   eax
c0024c98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c9e:	e8 fd ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ca3:	83 c4 10             	add    esp,0x10
c0024ca6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024cab:	75 6e                	jne    c0024d1b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024cad:	6a 00                	push   0x0
c0024caf:	6a 08                	push   0x8
c0024cb1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cb8:	50                   	push   eax
c0024cb9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cbf:	e8 dc ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cc4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024cc9:	50                   	push   eax
c0024cca:	6a 09                	push   0x9
c0024ccc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cd3:	50                   	push   eax
c0024cd4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cda:	e8 c1 ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cdf:	83 c4 20             	add    esp,0x20
c0024ce2:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024ce7:	50                   	push   eax
c0024ce8:	6a 0a                	push   0xa
c0024cea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cf1:	50                   	push   eax
c0024cf2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cf8:	e8 a3 ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cfd:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024d02:	50                   	push   eax
c0024d03:	6a 0b                	push   0xb
c0024d05:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d0c:	50                   	push   eax
c0024d0d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d13:	e8 88 ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d18:	83 c4 20             	add    esp,0x20
c0024d1b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024d20:	50                   	push   eax
c0024d21:	6a 02                	push   0x2
c0024d23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d2a:	50                   	push   eax
c0024d2b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d31:	e8 6a ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d36:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024d3b:	50                   	push   eax
c0024d3c:	6a 03                	push   0x3
c0024d3e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d45:	50                   	push   eax
c0024d46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d4c:	e8 4f ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d51:	83 c4 20             	add    esp,0x20
c0024d54:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024d59:	50                   	push   eax
c0024d5a:	6a 04                	push   0x4
c0024d5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d63:	50                   	push   eax
c0024d64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d6a:	e8 31 ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024d74:	50                   	push   eax
c0024d75:	6a 05                	push   0x5
c0024d77:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d7e:	50                   	push   eax
c0024d7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d85:	e8 16 ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d8a:	83 c4 20             	add    esp,0x20
c0024d8d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024d92:	0f 94 c0             	sete   al
c0024d95:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024d9a:	74 09                	je     c0024da5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024d9c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024da3:	eb 07                	jmp    c0024dac <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024da5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024dac:	0f b6 c0             	movzx  eax,al
c0024daf:	50                   	push   eax
c0024db0:	6a 07                	push   0x7
c0024db2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024db9:	50                   	push   eax
c0024dba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024dc0:	e8 db ec ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024dc5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024dc9:	83 c4 10             	add    esp,0x10
c0024dcc:	85 f6                	test   esi,esi
c0024dce:	0f 84 ba 00 00 00    	je     c0024e8e <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024dd4:	50                   	push   eax
c0024dd5:	6a 01                	push   0x1
c0024dd7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024dde:	50                   	push   eax
c0024ddf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024de5:	e8 62 f8 ff ff       	call   c002464c <IDE::polling(unsigned char, unsigned int)>
c0024dea:	83 c4 10             	add    esp,0x10
c0024ded:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024df3:	84 c0                	test   al,al
c0024df5:	74 2c                	je     c0024e23 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024df7:	0f b6 f8             	movzx  edi,al
c0024dfa:	0f b6 d2             	movzx  edx,dl
c0024dfd:	57                   	push   edi
c0024dfe:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024e05:	50                   	push   eax
c0024e06:	52                   	push   edx
c0024e07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e0d:	e8 a4 f6 ff ff       	call   c00244b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024e12:	c7 04 24 cc da 02 c0 	mov    DWORD PTR [esp],0xc002dacc
c0024e19:	e8 71 e0 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0024e1e:	e9 87 00 00 00       	jmp    c0024eaa <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024e23:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024e28:	74 33                	je     c0024e5d <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024e2a:	31 ed                	xor    ebp,ebp
c0024e2c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024e30:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024e34:	50                   	push   eax
c0024e35:	50                   	push   eax
c0024e36:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e3d:	50                   	push   eax
c0024e3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e44:	e8 45 ec ff ff       	call   c0023a8e <IDE::getBase(unsigned char)>
c0024e49:	89 c2                	mov    edx,eax
c0024e4b:	89 f8                	mov    eax,edi
c0024e4d:	66 ef                	out    dx,ax
c0024e4f:	45                   	inc    ebp
c0024e50:	83 c4 10             	add    esp,0x10
c0024e53:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024e59:	75 d1                	jne    c0024e2c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024e5b:	eb 23                	jmp    c0024e80 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024e5d:	0f b6 d2             	movzx  edx,dl
c0024e60:	51                   	push   ecx
c0024e61:	51                   	push   ecx
c0024e62:	52                   	push   edx
c0024e63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e69:	e8 20 ec ff ff       	call   c0023a8e <IDE::getBase(unsigned char)>
c0024e6e:	b9 00 01 00 00       	mov    ecx,0x100
c0024e73:	89 c2                	mov    edx,eax
c0024e75:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024e79:	fc                   	cld    
c0024e7a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024e7d:	83 c4 10             	add    esp,0x10
c0024e80:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024e88:	4e                   	dec    esi
c0024e89:	e9 3e ff ff ff       	jmp    c0024dcc <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024e8e:	31 ff                	xor    edi,edi
c0024e90:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024e95:	74 16                	je     c0024ead <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024e97:	50                   	push   eax
c0024e98:	50                   	push   eax
c0024e99:	31 c0                	xor    eax,eax
c0024e9b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024ea0:	0f 94 c0             	sete   al
c0024ea3:	50                   	push   eax
c0024ea4:	53                   	push   ebx
c0024ea5:	e8 ec fb ff ff       	call   c0024a96 <ATA::flush(bool)>
c0024eaa:	83 c4 10             	add    esp,0x10
c0024ead:	83 c4 2c             	add    esp,0x2c
c0024eb0:	89 f8                	mov    eax,edi
c0024eb2:	5b                   	pop    ebx
c0024eb3:	5e                   	pop    esi
c0024eb4:	5f                   	pop    edi
c0024eb5:	5d                   	pop    ebp
c0024eb6:	c3                   	ret    
c0024eb7:	90                   	nop

c0024eb8 <ATA::read(unsigned long long, int, void*)>:
c0024eb8:	57                   	push   edi
c0024eb9:	b8 04 00 00 00       	mov    eax,0x4
c0024ebe:	56                   	push   esi
c0024ebf:	53                   	push   ebx
c0024ec0:	83 ec 10             	sub    esp,0x10
c0024ec3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ec7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024ecb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024ece:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024ed2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024ed6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024edc:	77 3b                	ja     c0024f19 <ATA::read(unsigned long long, int, void*)+0x61>
c0024ede:	b8 06 00 00 00       	mov    eax,0x6
c0024ee3:	85 d2                	test   edx,edx
c0024ee5:	74 32                	je     c0024f19 <ATA::read(unsigned long long, int, void*)+0x61>
c0024ee7:	50                   	push   eax
c0024ee8:	50                   	push   eax
c0024ee9:	6a 00                	push   0x0
c0024eeb:	52                   	push   edx
c0024eec:	53                   	push   ebx
c0024eed:	57                   	push   edi
c0024eee:	56                   	push   esi
c0024eef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ef3:	e8 38 fc ff ff       	call   c0024b30 <ATA::access(unsigned long long, int, void*, bool)>
c0024ef8:	83 c4 20             	add    esp,0x20
c0024efb:	85 c0                	test   eax,eax
c0024efd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f01:	75 11                	jne    c0024f14 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024f03:	01 1d 68 34 03 c0    	add    DWORD PTR ds:0xc0033468,ebx
c0024f09:	e8 86 ba fe ff       	call   c0010994 <VgaText::updateDiskUsage()>
c0024f0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f12:	eb 05                	jmp    c0024f19 <ATA::read(unsigned long long, int, void*)+0x61>
c0024f14:	b8 01 00 00 00       	mov    eax,0x1
c0024f19:	83 c4 10             	add    esp,0x10
c0024f1c:	5b                   	pop    ebx
c0024f1d:	5e                   	pop    esi
c0024f1e:	5f                   	pop    edi
c0024f1f:	c3                   	ret    

c0024f20 <ATA::write(unsigned long long, int, void*)>:
c0024f20:	57                   	push   edi
c0024f21:	b8 04 00 00 00       	mov    eax,0x4
c0024f26:	56                   	push   esi
c0024f27:	53                   	push   ebx
c0024f28:	83 ec 10             	sub    esp,0x10
c0024f2b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f33:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f36:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f3a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f3e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f44:	77 3b                	ja     c0024f81 <ATA::write(unsigned long long, int, void*)+0x61>
c0024f46:	b8 06 00 00 00       	mov    eax,0x6
c0024f4b:	85 d2                	test   edx,edx
c0024f4d:	74 32                	je     c0024f81 <ATA::write(unsigned long long, int, void*)+0x61>
c0024f4f:	50                   	push   eax
c0024f50:	50                   	push   eax
c0024f51:	6a 01                	push   0x1
c0024f53:	52                   	push   edx
c0024f54:	53                   	push   ebx
c0024f55:	57                   	push   edi
c0024f56:	56                   	push   esi
c0024f57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f5b:	e8 d0 fb ff ff       	call   c0024b30 <ATA::access(unsigned long long, int, void*, bool)>
c0024f60:	83 c4 20             	add    esp,0x20
c0024f63:	85 c0                	test   eax,eax
c0024f65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f69:	75 11                	jne    c0024f7c <ATA::write(unsigned long long, int, void*)+0x5c>
c0024f6b:	01 1d 64 34 03 c0    	add    DWORD PTR ds:0xc0033464,ebx
c0024f71:	e8 1e ba fe ff       	call   c0010994 <VgaText::updateDiskUsage()>
c0024f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f7a:	eb 05                	jmp    c0024f81 <ATA::write(unsigned long long, int, void*)+0x61>
c0024f7c:	b8 01 00 00 00       	mov    eax,0x1
c0024f81:	83 c4 10             	add    esp,0x10
c0024f84:	5b                   	pop    ebx
c0024f85:	5e                   	pop    esi
c0024f86:	5f                   	pop    edi
c0024f87:	c3                   	ret    

c0024f88 <ATA::detectCHS()>:
c0024f88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024f8c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024f92:	c1 e0 06             	shl    eax,0x6
c0024f95:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024f9b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024fa5:	c7 44 24 04 d7 da 02 c0 	mov    DWORD PTR [esp+0x4],0xc002dad7
c0024fad:	e9 45 59 ff ff       	jmp    c001a8f7 <Krnl::panic(char const*)>

c0024fb2 <ATA::open(int, int, void*)>:
c0024fb2:	53                   	push   ebx
c0024fb3:	83 ec 08             	sub    esp,0x8
c0024fb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024fba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024fbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024fc2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024fc8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024fce:	c1 e0 06             	shl    eax,0x6
c0024fd1:	01 d0                	add    eax,edx
c0024fd3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024fda:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024fe0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024fe7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024ff1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024ff7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ffe:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0025005:	75 0c                	jne    c0025013 <ATA::open(int, int, void*)+0x61>
c0025007:	83 ec 0c             	sub    esp,0xc
c002500a:	53                   	push   ebx
c002500b:	e8 78 ff ff ff       	call   c0024f88 <ATA::detectCHS()>
c0025010:	83 c4 10             	add    esp,0x10
c0025013:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025019:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002501f:	c1 e0 06             	shl    eax,0x6
c0025022:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0025029:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025033:	d1 e8                	shr    eax,1
c0025035:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002503b:	6a 04                	push   0x4
c002503d:	6a 0c                	push   0xc
c002503f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025046:	50                   	push   eax
c0025047:	52                   	push   edx
c0025048:	e8 53 ea ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002504d:	90                   	nop
c002504e:	90                   	nop
c002504f:	6a 00                	push   0x0
c0025051:	6a 0c                	push   0xc
c0025053:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002505a:	50                   	push   eax
c002505b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025061:	e8 3a ea ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025066:	83 c4 14             	add    esp,0x14
c0025069:	53                   	push   ebx
c002506a:	e8 e5 f6 fe ff       	call   c0014754 <PhysicalDisk::startCache()>
c002506f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025072:	e8 bd 19 ff ff       	call   c0016a34 <createPartitionsForDisk(PhysicalDisk*)>
c0025077:	31 c0                	xor    eax,eax
c0025079:	83 c4 18             	add    esp,0x18
c002507c:	5b                   	pop    ebx
c002507d:	c3                   	ret    

c002507e <ATAPI::write(unsigned long long, int, void*)>:
c002507e:	b8 03 00 00 00       	mov    eax,0x3
c0025083:	c3                   	ret    

c0025084 <ATAPI::close(int, int, void*)>:
c0025084:	83 ec 0c             	sub    esp,0xc
c0025087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002508b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025091:	85 c0                	test   eax,eax
c0025093:	74 0c                	je     c00250a1 <ATAPI::close(int, int, void*)+0x1d>
c0025095:	83 ec 0c             	sub    esp,0xc
c0025098:	8b 10                	mov    edx,DWORD PTR [eax]
c002509a:	50                   	push   eax
c002509b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002509e:	83 c4 10             	add    esp,0x10
c00250a1:	31 c0                	xor    eax,eax
c00250a3:	83 c4 0c             	add    esp,0xc
c00250a6:	c3                   	ret    
c00250a7:	90                   	nop

c00250a8 <ATAPI::ATAPI()>:
c00250a8:	83 ec 0c             	sub    esp,0xc
c00250ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250af:	83 ec 04             	sub    esp,0x4
c00250b2:	68 00 08 00 00       	push   0x800
c00250b7:	68 11 dc 02 c0       	push   0xc002dc11
c00250bc:	50                   	push   eax
c00250bd:	e8 2a f6 fe ff       	call   c00146ec <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250c2:	83 c4 10             	add    esp,0x10
c00250c5:	ba 2c db 02 c0       	mov    edx,0xc002db2c
c00250ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ce:	89 10                	mov    DWORD PTR [eax],edx
c00250d0:	90                   	nop
c00250d1:	83 c4 0c             	add    esp,0xc
c00250d4:	c3                   	ret    
c00250d5:	90                   	nop

c00250d6 <ATAPI::readyForCommand()>:
c00250d6:	56                   	push   esi
c00250d7:	53                   	push   ebx
c00250d8:	31 db                	xor    ebx,ebx
c00250da:	50                   	push   eax
c00250db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00250df:	50                   	push   eax
c00250e0:	6a 0c                	push   0xc
c00250e2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00250e9:	50                   	push   eax
c00250ea:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00250f0:	e8 6b ea ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00250f5:	83 c4 10             	add    esp,0x10
c00250f8:	a8 88                	test   al,0x88
c00250fa:	74 23                	je     c002511f <ATAPI::readyForCommand()+0x49>
c00250fc:	43                   	inc    ebx
c00250fd:	83 fb 63             	cmp    ebx,0x63
c0025100:	7e dd                	jle    c00250df <ATAPI::readyForCommand()+0x9>
c0025102:	51                   	push   ecx
c0025103:	51                   	push   ecx
c0025104:	6a 00                	push   0x0
c0025106:	68 40 42 0f 00       	push   0xf4240
c002510b:	e8 d7 98 ff ff       	call   c001e9e7 <nanoSleep(unsigned long long)>
c0025110:	83 c4 10             	add    esp,0x10
c0025113:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0025119:	75 c4                	jne    c00250df <ATAPI::readyForCommand()+0x9>
c002511b:	31 c0                	xor    eax,eax
c002511d:	eb 02                	jmp    c0025121 <ATAPI::readyForCommand()+0x4b>
c002511f:	b0 01                	mov    al,0x1
c0025121:	5a                   	pop    edx
c0025122:	5b                   	pop    ebx
c0025123:	5e                   	pop    esi
c0025124:	c3                   	ret    
c0025125:	90                   	nop

c0025126 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0025126:	55                   	push   ebp
c0025127:	57                   	push   edi
c0025128:	56                   	push   esi
c0025129:	53                   	push   ebx
c002512a:	83 ec 20             	sub    esp,0x20
c002512d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0025131:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0025135:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0025139:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002513d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025141:	6a 01                	push   0x1
c0025143:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002514a:	50                   	push   eax
c002514b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025151:	e8 56 eb ff ff       	call   c0023cac <IDE::enableIRQs(unsigned char, bool)>
c0025156:	5e                   	pop    esi
c0025157:	58                   	pop    eax
c0025158:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002515f:	50                   	push   eax
c0025160:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025166:	e8 0f e9 ff ff       	call   c0023a7a <IDE::prepareInterrupt(unsigned char)>
c002516b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002516e:	e8 63 ff ff ff       	call   c00250d6 <ATAPI::readyForCommand()>
c0025173:	83 c4 10             	add    esp,0x10
c0025176:	84 c0                	test   al,al
c0025178:	75 0a                	jne    c0025184 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002517a:	bb 01 00 00 00       	mov    ebx,0x1
c002517f:	e9 57 02 00 00       	jmp    c00253db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025184:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002518a:	c1 e0 04             	shl    eax,0x4
c002518d:	0f b6 c0             	movzx  eax,al
c0025190:	50                   	push   eax
c0025191:	6a 06                	push   0x6
c0025193:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002519a:	50                   	push   eax
c002519b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251a1:	e8 fa e8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251a6:	6a 00                	push   0x0
c00251a8:	6a 01                	push   0x1
c00251aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251b1:	50                   	push   eax
c00251b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251b8:	e8 e3 e8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251bd:	83 c4 20             	add    esp,0x20
c00251c0:	0f b6 c3             	movzx  eax,bl
c00251c3:	0f b6 df             	movzx  ebx,bh
c00251c6:	50                   	push   eax
c00251c7:	6a 04                	push   0x4
c00251c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251d0:	50                   	push   eax
c00251d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251d7:	e8 c4 e8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251dc:	53                   	push   ebx
c00251dd:	6a 05                	push   0x5
c00251df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251e6:	50                   	push   eax
c00251e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251ed:	e8 ae e8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251f2:	83 c4 20             	add    esp,0x20
c00251f5:	68 a0 00 00 00       	push   0xa0
c00251fa:	6a 07                	push   0x7
c00251fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025203:	50                   	push   eax
c0025204:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002520a:	e8 91 e8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002520f:	83 c4 0c             	add    esp,0xc
c0025212:	6a 01                	push   0x1
c0025214:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002521b:	50                   	push   eax
c002521c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025222:	e8 25 f4 ff ff       	call   c002464c <IDE::polling(unsigned char, unsigned int)>
c0025227:	83 c4 10             	add    esp,0x10
c002522a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0025230:	84 c0                	test   al,al
c0025232:	74 23                	je     c0025257 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0025234:	0f b6 d8             	movzx  ebx,al
c0025237:	0f b6 d2             	movzx  edx,dl
c002523a:	53                   	push   ebx
c002523b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0025242:	50                   	push   eax
c0025243:	52                   	push   edx
c0025244:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002524a:	e8 67 f2 ff ff       	call   c00244b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002524f:	83 c4 10             	add    esp,0x10
c0025252:	e9 84 01 00 00       	jmp    c00253db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025257:	0f b6 d2             	movzx  edx,dl
c002525a:	53                   	push   ebx
c002525b:	53                   	push   ebx
c002525c:	52                   	push   edx
c002525d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025263:	e8 26 e8 ff ff       	call   c0023a8e <IDE::getBase(unsigned char)>
c0025268:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002526c:	b9 06 00 00 00       	mov    ecx,0x6
c0025271:	89 c2                	mov    edx,eax
c0025273:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0025276:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002527a:	83 c4 10             	add    esp,0x10
c002527d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025283:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002528a:	85 db                	test   ebx,ebx
c002528c:	0f 84 ec 00 00 00    	je     c002537e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0025292:	51                   	push   ecx
c0025293:	51                   	push   ecx
c0025294:	52                   	push   edx
c0025295:	50                   	push   eax
c0025296:	e8 73 e9 ff ff       	call   c0023c0e <IDE::waitInterrupt(unsigned char)>
c002529b:	83 c4 10             	add    esp,0x10
c002529e:	84 c0                	test   al,al
c00252a0:	0f 84 d4 fe ff ff    	je     c002517a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00252a6:	56                   	push   esi
c00252a7:	56                   	push   esi
c00252a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252af:	50                   	push   eax
c00252b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252b6:	e8 bf e7 ff ff       	call   c0023a7a <IDE::prepareInterrupt(unsigned char)>
c00252bb:	83 c4 0c             	add    esp,0xc
c00252be:	6a 04                	push   0x4
c00252c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252c7:	50                   	push   eax
c00252c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252ce:	e8 8d e8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00252d3:	83 c4 0c             	add    esp,0xc
c00252d6:	89 c6                	mov    esi,eax
c00252d8:	6a 05                	push   0x5
c00252da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252e1:	50                   	push   eax
c00252e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252e8:	e8 73 e8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00252ed:	89 f1                	mov    ecx,esi
c00252ef:	0f b6 c0             	movzx  eax,al
c00252f2:	0f b6 f1             	movzx  esi,cl
c00252f5:	c1 e0 08             	shl    eax,0x8
c00252f8:	09 c6                	or     esi,eax
c00252fa:	d1 fe                	sar    esi,1
c00252fc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025300:	83 c4 10             	add    esp,0x10
c0025303:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0025308:	74 41                	je     c002534b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002530a:	31 c9                	xor    ecx,ecx
c002530c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025312:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025319:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002531d:	75 0a                	jne    c0025329 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002531f:	01 c9                	add    ecx,ecx
c0025321:	01 cd                	add    ebp,ecx
c0025323:	4b                   	dec    ebx
c0025324:	e9 54 ff ff ff       	jmp    c002527d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0025329:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002532e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025332:	51                   	push   ecx
c0025333:	51                   	push   ecx
c0025334:	52                   	push   edx
c0025335:	50                   	push   eax
c0025336:	e8 53 e7 ff ff       	call   c0023a8e <IDE::getBase(unsigned char)>
c002533b:	89 c2                	mov    edx,eax
c002533d:	89 f0                	mov    eax,esi
c002533f:	66 ef                	out    dx,ax
c0025341:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0025345:	83 c4 10             	add    esp,0x10
c0025348:	41                   	inc    ecx
c0025349:	eb c1                	jmp    c002530c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002534b:	31 f6                	xor    esi,esi
c002534d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025353:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002535a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002535e:	75 06                	jne    c0025366 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025360:	01 f6                	add    esi,esi
c0025362:	01 f5                	add    ebp,esi
c0025364:	eb bd                	jmp    c0025323 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0025366:	51                   	push   ecx
c0025367:	51                   	push   ecx
c0025368:	52                   	push   edx
c0025369:	50                   	push   eax
c002536a:	e8 1f e7 ff ff       	call   c0023a8e <IDE::getBase(unsigned char)>
c002536f:	89 c2                	mov    edx,eax
c0025371:	66 ed                	in     ax,dx
c0025373:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0025378:	83 c4 10             	add    esp,0x10
c002537b:	46                   	inc    esi
c002537c:	eb cf                	jmp    c002534d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002537e:	51                   	push   ecx
c002537f:	51                   	push   ecx
c0025380:	52                   	push   edx
c0025381:	50                   	push   eax
c0025382:	e8 87 e8 ff ff       	call   c0023c0e <IDE::waitInterrupt(unsigned char)>
c0025387:	83 c4 10             	add    esp,0x10
c002538a:	84 c0                	test   al,al
c002538c:	0f 84 e8 fd ff ff    	je     c002517a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025392:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025397:	52                   	push   edx
c0025398:	52                   	push   edx
c0025399:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00253a0:	50                   	push   eax
c00253a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253a7:	e8 ce e6 ff ff       	call   c0023a7a <IDE::prepareInterrupt(unsigned char)>
c00253ac:	83 c4 10             	add    esp,0x10
c00253af:	50                   	push   eax
c00253b0:	50                   	push   eax
c00253b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00253b8:	50                   	push   eax
c00253b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253bf:	e8 ca e6 ff ff       	call   c0023a8e <IDE::getBase(unsigned char)>
c00253c4:	8d 50 07             	lea    edx,[eax+0x7]
c00253c7:	ec                   	in     al,dx
c00253c8:	83 c4 10             	add    esp,0x10
c00253cb:	a8 88                	test   al,0x88
c00253cd:	74 0a                	je     c00253d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00253cf:	4b                   	dec    ebx
c00253d0:	75 dd                	jne    c00253af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00253d2:	bb 02 00 00 00       	mov    ebx,0x2
c00253d7:	eb 02                	jmp    c00253db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00253d9:	31 db                	xor    ebx,ebx
c00253db:	83 c4 1c             	add    esp,0x1c
c00253de:	89 d8                	mov    eax,ebx
c00253e0:	5b                   	pop    ebx
c00253e1:	5e                   	pop    esi
c00253e2:	5f                   	pop    edi
c00253e3:	5d                   	pop    ebp
c00253e4:	c3                   	ret    
c00253e5:	90                   	nop

c00253e6 <ATAPI::diskRemoved()>:
c00253e6:	83 ec 18             	sub    esp,0x18
c00253e9:	68 1d dc 02 c0       	push   0xc002dc1d
c00253ee:	e8 9c da fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00253f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00253f7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00253fe:	83 c4 1c             	add    esp,0x1c
c0025401:	c3                   	ret    

c0025402 <ATAPI::eject()>:
c0025402:	57                   	push   edi
c0025403:	b9 03 00 00 00       	mov    ecx,0x3
c0025408:	53                   	push   ebx
c0025409:	83 ec 14             	sub    esp,0x14
c002540c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025410:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025414:	fc                   	cld    
c0025415:	31 c0                	xor    eax,eax
c0025417:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025419:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002541e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025423:	50                   	push   eax
c0025424:	50                   	push   eax
c0025425:	6a 00                	push   0x0
c0025427:	6a 00                	push   0x0
c0025429:	6a 00                	push   0x0
c002542b:	6a 02                	push   0x2
c002542d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025431:	50                   	push   eax
c0025432:	53                   	push   ebx
c0025433:	e8 ee fc ff ff       	call   c0025126 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025438:	83 c4 14             	add    esp,0x14
c002543b:	53                   	push   ebx
c002543c:	e8 a5 ff ff ff       	call   c00253e6 <ATAPI::diskRemoved()>
c0025441:	83 c4 24             	add    esp,0x24
c0025444:	31 c0                	xor    eax,eax
c0025446:	5b                   	pop    ebx
c0025447:	5f                   	pop    edi
c0025448:	c3                   	ret    
c0025449:	90                   	nop

c002544a <ATAPI::diskInserted()>:
c002544a:	53                   	push   ebx
c002544b:	83 ec 14             	sub    esp,0x14
c002544e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025452:	68 34 dc 02 c0       	push   0xc002dc34
c0025457:	e8 33 da fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c002545c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0025463:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025466:	e8 e9 f2 fe ff       	call   c0014754 <PhysicalDisk::startCache()>
c002546b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002546f:	83 c4 18             	add    esp,0x18
c0025472:	5b                   	pop    ebx
c0025473:	e9 bc 15 ff ff       	jmp    c0016a34 <createPartitionsForDisk(PhysicalDisk*)>

c0025478 <ATAPI::detectMedia()>:
c0025478:	56                   	push   esi
c0025479:	53                   	push   ebx
c002547a:	83 ec 28             	sub    esp,0x28
c002547d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025481:	6a 0c                	push   0xc
c0025483:	6a 00                	push   0x0
c0025485:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025489:	56                   	push   esi
c002548a:	e8 dd b2 fd ff       	call   c000076c <memset>
c002548f:	58                   	pop    eax
c0025490:	5a                   	pop    edx
c0025491:	6a 00                	push   0x0
c0025493:	6a 00                	push   0x0
c0025495:	6a 00                	push   0x0
c0025497:	6a 00                	push   0x0
c0025499:	56                   	push   esi
c002549a:	53                   	push   ebx
c002549b:	e8 86 fc ff ff       	call   c0025126 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00254a0:	83 c4 1c             	add    esp,0x1c
c00254a3:	6a 0c                	push   0xc
c00254a5:	6a 00                	push   0x0
c00254a7:	56                   	push   esi
c00254a8:	e8 bf b2 fd ff       	call   c000076c <memset>
c00254ad:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00254b2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00254b7:	59                   	pop    ecx
c00254b8:	58                   	pop    eax
c00254b9:	6a 01                	push   0x1
c00254bb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00254bf:	50                   	push   eax
c00254c0:	6a 00                	push   0x0
c00254c2:	6a 12                	push   0x12
c00254c4:	56                   	push   esi
c00254c5:	53                   	push   ebx
c00254c6:	e8 5b fc ff ff       	call   c0025126 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00254cb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00254cf:	83 c4 20             	add    esp,0x20
c00254d2:	83 e0 7f             	and    eax,0x7f
c00254d5:	3c 70                	cmp    al,0x70
c00254d7:	74 15                	je     c00254ee <ATAPI::detectMedia()+0x76>
c00254d9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00254e0:	75 0c                	jne    c00254ee <ATAPI::detectMedia()+0x76>
c00254e2:	83 ec 0c             	sub    esp,0xc
c00254e5:	53                   	push   ebx
c00254e6:	e8 5f ff ff ff       	call   c002544a <ATAPI::diskInserted()>
c00254eb:	83 c4 10             	add    esp,0x10
c00254ee:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00254f2:	83 e0 0f             	and    eax,0xf
c00254f5:	3c 02                	cmp    al,0x2
c00254f7:	75 1b                	jne    c0025514 <ATAPI::detectMedia()+0x9c>
c00254f9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00254fe:	75 2d                	jne    c002552d <ATAPI::detectMedia()+0xb5>
c0025500:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025507:	74 24                	je     c002552d <ATAPI::detectMedia()+0xb5>
c0025509:	83 ec 0c             	sub    esp,0xc
c002550c:	53                   	push   ebx
c002550d:	e8 d4 fe ff ff       	call   c00253e6 <ATAPI::diskRemoved()>
c0025512:	eb 16                	jmp    c002552a <ATAPI::detectMedia()+0xb2>
c0025514:	84 c0                	test   al,al
c0025516:	75 15                	jne    c002552d <ATAPI::detectMedia()+0xb5>
c0025518:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002551f:	75 0c                	jne    c002552d <ATAPI::detectMedia()+0xb5>
c0025521:	83 ec 0c             	sub    esp,0xc
c0025524:	53                   	push   ebx
c0025525:	e8 20 ff ff ff       	call   c002544a <ATAPI::diskInserted()>
c002552a:	83 c4 10             	add    esp,0x10
c002552d:	83 c4 24             	add    esp,0x24
c0025530:	5b                   	pop    ebx
c0025531:	5e                   	pop    esi
c0025532:	c3                   	ret    
c0025533:	90                   	nop

c0025534 <ATAPI::open(int, int, void*)>:
c0025534:	53                   	push   ebx
c0025535:	83 ec 08             	sub    esp,0x8
c0025538:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002553c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025540:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025544:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002554a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025550:	c1 e0 06             	shl    eax,0x6
c0025553:	01 d0                	add    eax,edx
c0025555:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002555c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0025562:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025569:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025573:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025579:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025580:	6a 04                	push   0x4
c0025582:	6a 0c                	push   0xc
c0025584:	51                   	push   ecx
c0025585:	52                   	push   edx
c0025586:	e8 15 e5 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002558b:	90                   	nop
c002558c:	90                   	nop
c002558d:	6a 00                	push   0x0
c002558f:	6a 0c                	push   0xc
c0025591:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025598:	50                   	push   eax
c0025599:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002559f:	e8 fc e4 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00255a4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00255ab:	83 c4 14             	add    esp,0x14
c00255ae:	53                   	push   ebx
c00255af:	e8 c4 fe ff ff       	call   c0025478 <ATAPI::detectMedia()>
c00255b4:	31 c0                	xor    eax,eax
c00255b6:	83 c4 18             	add    esp,0x18
c00255b9:	5b                   	pop    ebx
c00255ba:	c3                   	ret    
c00255bb:	90                   	nop

c00255bc <ATAPI::read(unsigned long long, int, void*)>:
c00255bc:	55                   	push   ebp
c00255bd:	57                   	push   edi
c00255be:	56                   	push   esi
c00255bf:	53                   	push   ebx
c00255c0:	83 ec 1c             	sub    esp,0x1c
c00255c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00255c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00255cb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00255cf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00255d6:	74 41                	je     c0025619 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00255d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00255dc:	b9 03 00 00 00       	mov    ecx,0x3
c00255e1:	fc                   	cld    
c00255e2:	31 c0                	xor    eax,eax
c00255e4:	86 fb                	xchg   bl,bh
c00255e6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00255e8:	c1 c3 10             	rol    ebx,0x10
c00255eb:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00255f0:	89 e8                	mov    eax,ebp
c00255f2:	86 fb                	xchg   bl,bh
c00255f4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00255f8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00255fc:	50                   	push   eax
c00255fd:	50                   	push   eax
c00255fe:	55                   	push   ebp
c00255ff:	c1 e5 0b             	shl    ebp,0xb
c0025602:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025606:	6a 00                	push   0x0
c0025608:	55                   	push   ebp
c0025609:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002560d:	50                   	push   eax
c002560e:	56                   	push   esi
c002560f:	e8 12 fb ff ff       	call   c0025126 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025614:	83 c4 20             	add    esp,0x20
c0025617:	eb 1a                	jmp    c0025633 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025619:	83 ec 0c             	sub    esp,0xc
c002561c:	56                   	push   esi
c002561d:	e8 56 fe ff ff       	call   c0025478 <ATAPI::detectMedia()>
c0025622:	83 c4 10             	add    esp,0x10
c0025625:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002562c:	75 aa                	jne    c00255d8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002562e:	b8 02 00 00 00       	mov    eax,0x2
c0025633:	83 c4 1c             	add    esp,0x1c
c0025636:	5b                   	pop    ebx
c0025637:	5e                   	pop    esi
c0025638:	5f                   	pop    edi
c0025639:	5d                   	pop    ebp
c002563a:	c3                   	ret    
c002563b:	90                   	nop

c002563c <SATA::close(int, int, void*)>:
c002563c:	83 ec 0c             	sub    esp,0xc
c002563f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025643:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025649:	85 c0                	test   eax,eax
c002564b:	74 0c                	je     c0025659 <SATA::close(int, int, void*)+0x1d>
c002564d:	83 ec 0c             	sub    esp,0xc
c0025650:	8b 10                	mov    edx,DWORD PTR [eax]
c0025652:	50                   	push   eax
c0025653:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025656:	83 c4 10             	add    esp,0x10
c0025659:	31 c0                	xor    eax,eax
c002565b:	83 c4 0c             	add    esp,0xc
c002565e:	c3                   	ret    
c002565f:	90                   	nop

c0025660 <SATA::powerSaving(PowerSavingLevel)>:
c0025660:	c3                   	ret    
c0025661:	90                   	nop

c0025662 <SATA::open(int, int, void*)>:
c0025662:	56                   	push   esi
c0025663:	53                   	push   ebx
c0025664:	50                   	push   eax
c0025665:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025669:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002566d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025677:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002567d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025687:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002568b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025695:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002569b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00256a2:	e8 85 a8 fe ff       	call   c000ff2c <Phys::allocatePage()>
c00256a7:	89 c6                	mov    esi,eax
c00256a9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00256af:	81 c6 00 10 00 00    	add    esi,0x1000
c00256b5:	e8 72 a8 fe ff       	call   c000ff2c <Phys::allocatePage()>
c00256ba:	39 c6                	cmp    esi,eax
c00256bc:	74 10                	je     c00256ce <SATA::open(int, int, void*)+0x6c>
c00256be:	83 ec 0c             	sub    esp,0xc
c00256c1:	68 5c db 02 c0       	push   0xc002db5c
c00256c6:	e8 2c 52 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00256cb:	83 c4 10             	add    esp,0x10
c00256ce:	83 ec 0c             	sub    esp,0xc
c00256d1:	6a 02                	push   0x2
c00256d3:	e8 b1 c3 fe ff       	call   c0011a89 <Virt::allocateKernelVirtualPages(int)>
c00256d8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00256de:	6a 03                	push   0x3
c00256e0:	50                   	push   eax
c00256e1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00256e7:	ff 35 90 f2 02 c0    	push   DWORD PTR ds:0xc002f290
c00256ed:	e8 ce cb fe ff       	call   c00122c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00256f2:	83 c4 14             	add    esp,0x14
c00256f5:	53                   	push   ebx
c00256f6:	e8 59 f0 fe ff       	call   c0014754 <PhysicalDisk::startCache()>
c00256fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00256fe:	e8 31 13 ff ff       	call   c0016a34 <createPartitionsForDisk(PhysicalDisk*)>
c0025703:	83 c4 14             	add    esp,0x14
c0025706:	31 c0                	xor    eax,eax
c0025708:	5b                   	pop    ebx
c0025709:	5e                   	pop    esi
c002570a:	c3                   	ret    
c002570b:	90                   	nop

c002570c <SATA::SATA()>:
c002570c:	83 ec 0c             	sub    esp,0xc
c002570f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025713:	83 ec 04             	sub    esp,0x4
c0025716:	68 00 02 00 00       	push   0x200
c002571b:	68 70 db 02 c0       	push   0xc002db70
c0025720:	50                   	push   eax
c0025721:	e8 c6 ef fe ff       	call   c00146ec <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025726:	83 c4 10             	add    esp,0x10
c0025729:	ba e0 db 02 c0       	mov    edx,0xc002dbe0
c002572e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025732:	89 10                	mov    DWORD PTR [eax],edx
c0025734:	90                   	nop
c0025735:	83 c4 0c             	add    esp,0xc
c0025738:	c3                   	ret    
c0025739:	90                   	nop

c002573a <SATA::access(unsigned long long, int, void*, bool)>:
c002573a:	55                   	push   ebp
c002573b:	57                   	push   edi
c002573c:	56                   	push   esi
c002573d:	53                   	push   ebx
c002573e:	83 ec 2c             	sub    esp,0x2c
c0025741:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025745:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0025749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002574d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0025751:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0025755:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002575a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002575e:	7e 10                	jle    c0025770 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025760:	83 ec 0c             	sub    esp,0xc
c0025763:	68 80 db 02 c0       	push   0xc002db80
c0025768:	e8 8a 51 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c002576d:	83 c4 10             	add    esp,0x10
c0025770:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0025776:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002577c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025782:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025786:	89 f0                	mov    eax,esi
c0025788:	c1 e0 07             	shl    eax,0x7
c002578b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002578f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025799:	52                   	push   edx
c002579a:	8d 46 02             	lea    eax,[esi+0x2]
c002579d:	52                   	push   edx
c002579e:	c1 e0 07             	shl    eax,0x7
c00257a1:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00257a5:	50                   	push   eax
c00257a6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00257ac:	e8 b3 ef ff ff       	call   c0024764 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00257b1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00257b5:	83 c4 10             	add    esp,0x10
c00257b8:	b8 01 00 00 00       	mov    eax,0x1
c00257bd:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c00257c2:	0f 84 dc 01 00 00    	je     c00259a4 <SATA::access(unsigned long long, int, void*, bool)+0x26a>
c00257c8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00257cc:	c1 e2 09             	shl    edx,0x9
c00257cf:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c00257d4:	74 22                	je     c00257f8 <SATA::access(unsigned long long, int, void*, bool)+0xbe>
c00257d6:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c00257dc:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00257e0:	8d 1c 02             	lea    ebx,[edx+eax*1]
c00257e3:	29 c1                	sub    ecx,eax
c00257e5:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00257e9:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00257ed:	74 09                	je     c00257f8 <SATA::access(unsigned long long, int, void*, bool)+0xbe>
c00257ef:	8a 1c 01             	mov    bl,BYTE PTR [ecx+eax*1]
c00257f2:	40                   	inc    eax
c00257f3:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00257f6:	eb f1                	jmp    c00257e9 <SATA::access(unsigned long long, int, void*, bool)+0xaf>
c00257f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00257fc:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025802:	8d 46 02             	lea    eax,[esi+0x2]
c0025805:	c1 e0 07             	shl    eax,0x7
c0025808:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002580c:	8b 00                	mov    eax,DWORD PTR [eax]
c002580e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025814:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002581a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002581e:	c1 e1 05             	shl    ecx,0x5
c0025821:	01 c8                	add    eax,ecx
c0025823:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025827:	8a 18                	mov    bl,BYTE PTR [eax]
c0025829:	83 e1 01             	and    ecx,0x1
c002582c:	83 e3 bf             	and    ebx,0xffffffbf
c002582f:	c1 e1 06             	shl    ecx,0x6
c0025832:	09 d9                	or     ecx,ebx
c0025834:	88 08                	mov    BYTE PTR [eax],cl
c0025836:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025838:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002583e:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025844:	89 08                	mov    DWORD PTR [eax],ecx
c0025846:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002584c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025852:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025858:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002585b:	50                   	push   eax
c002585c:	68 90 00 00 00       	push   0x90
c0025861:	6a 00                	push   0x0
c0025863:	53                   	push   ebx
c0025864:	e8 03 af fd ff       	call   c000076c <memset>
c0025869:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c002586f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025873:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025879:	83 c4 10             	add    esp,0x10
c002587c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025882:	8d 4a ff             	lea    ecx,[edx-0x1]
c0025885:	25 00 00 c0 ff       	and    eax,0xffc00000
c002588a:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025890:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0025894:	09 c8                	or     eax,ecx
c0025896:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002589a:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00258a0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00258a3:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00258aa:	66 25 00 7f          	and    ax,0x7f00
c00258ae:	66 0d 27 80          	or     ax,0x8027
c00258b2:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c00258b7:	66 89 03             	mov    WORD PTR [ebx],ax
c00258ba:	19 c0                	sbb    eax,eax
c00258bc:	83 e0 f0             	and    eax,0xfffffff0
c00258bf:	83 c0 35             	add    eax,0x35
c00258c2:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c00258c5:	89 f8                	mov    eax,edi
c00258c7:	c1 e8 10             	shr    eax,0x10
c00258ca:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00258cd:	89 f8                	mov    eax,edi
c00258cf:	c1 e8 18             	shr    eax,0x18
c00258d2:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00258d5:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00258d9:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00258dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00258e0:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00258e3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00258e7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00258eb:	89 f3                	mov    ebx,esi
c00258ed:	31 c0                	xor    eax,eax
c00258ef:	c1 e3 07             	shl    ebx,0x7
c00258f2:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c00258f6:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c00258fc:	80 e1 88             	and    cl,0x88
c00258ff:	74 0a                	je     c002590b <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c0025901:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025906:	74 0a                	je     c0025912 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0025908:	40                   	inc    eax
c0025909:	eb eb                	jmp    c00258f6 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c002590b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025910:	75 0a                	jne    c002591c <SATA::access(unsigned long long, int, void*, bool)+0x1e2>
c0025912:	83 ec 0c             	sub    esp,0xc
c0025915:	68 b9 db 02 c0       	push   0xc002dbb9
c002591a:	eb 54                	jmp    c0025970 <SATA::access(unsigned long long, int, void*, bool)+0x236>
c002591c:	b8 01 00 00 00       	mov    eax,0x1
c0025921:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0025925:	c1 e6 07             	shl    esi,0x7
c0025928:	d3 e0                	shl    eax,cl
c002592a:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c002592e:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0025934:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c002593a:	85 c8                	test   eax,ecx
c002593c:	74 1e                	je     c002595c <SATA::access(unsigned long long, int, void*, bool)+0x222>
c002593e:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0025944:	0f ba e1 1e          	bt     ecx,0x1e
c0025948:	73 ea                	jae    c0025934 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c002594a:	83 ec 0c             	sub    esp,0xc
c002594d:	68 c7 db 02 c0       	push   0xc002dbc7
c0025952:	e8 a0 4f ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0025957:	83 c4 10             	add    esp,0x10
c002595a:	eb 2a                	jmp    c0025986 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c002595c:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0025962:	0f ba e0 1e          	bt     eax,0x1e
c0025966:	73 17                	jae    c002597f <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0025968:	83 ec 0c             	sub    esp,0xc
c002596b:	68 c7 db 02 c0       	push   0xc002dbc7
c0025970:	e8 82 4f ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0025975:	83 c4 10             	add    esp,0x10
c0025978:	b8 01 00 00 00       	mov    eax,0x1
c002597d:	eb 25                	jmp    c00259a4 <SATA::access(unsigned long long, int, void*, bool)+0x26a>
c002597f:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0025984:	74 04                	je     c002598a <SATA::access(unsigned long long, int, void*, bool)+0x250>
c0025986:	31 c0                	xor    eax,eax
c0025988:	eb 1a                	jmp    c00259a4 <SATA::access(unsigned long long, int, void*, bool)+0x26a>
c002598a:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025990:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0025994:	01 c2                	add    edx,eax
c0025996:	29 c1                	sub    ecx,eax
c0025998:	39 c2                	cmp    edx,eax
c002599a:	74 ea                	je     c0025986 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c002599c:	8a 18                	mov    bl,BYTE PTR [eax]
c002599e:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00259a1:	40                   	inc    eax
c00259a2:	eb f4                	jmp    c0025998 <SATA::access(unsigned long long, int, void*, bool)+0x25e>
c00259a4:	83 c4 2c             	add    esp,0x2c
c00259a7:	5b                   	pop    ebx
c00259a8:	5e                   	pop    esi
c00259a9:	5f                   	pop    edi
c00259aa:	5d                   	pop    ebp
c00259ab:	c3                   	ret    

c00259ac <SATA::read(unsigned long long, int, void*)>:
c00259ac:	57                   	push   edi
c00259ad:	b8 04 00 00 00       	mov    eax,0x4
c00259b2:	56                   	push   esi
c00259b3:	53                   	push   ebx
c00259b4:	83 ec 10             	sub    esp,0x10
c00259b7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00259bb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00259bf:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00259c2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00259c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00259ca:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00259d0:	77 3b                	ja     c0025a0d <SATA::read(unsigned long long, int, void*)+0x61>
c00259d2:	b8 06 00 00 00       	mov    eax,0x6
c00259d7:	85 d2                	test   edx,edx
c00259d9:	74 32                	je     c0025a0d <SATA::read(unsigned long long, int, void*)+0x61>
c00259db:	50                   	push   eax
c00259dc:	50                   	push   eax
c00259dd:	6a 00                	push   0x0
c00259df:	52                   	push   edx
c00259e0:	53                   	push   ebx
c00259e1:	57                   	push   edi
c00259e2:	56                   	push   esi
c00259e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00259e7:	e8 4e fd ff ff       	call   c002573a <SATA::access(unsigned long long, int, void*, bool)>
c00259ec:	83 c4 20             	add    esp,0x20
c00259ef:	85 c0                	test   eax,eax
c00259f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00259f5:	75 11                	jne    c0025a08 <SATA::read(unsigned long long, int, void*)+0x5c>
c00259f7:	01 1d 68 34 03 c0    	add    DWORD PTR ds:0xc0033468,ebx
c00259fd:	e8 92 af fe ff       	call   c0010994 <VgaText::updateDiskUsage()>
c0025a02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a06:	eb 05                	jmp    c0025a0d <SATA::read(unsigned long long, int, void*)+0x61>
c0025a08:	b8 01 00 00 00       	mov    eax,0x1
c0025a0d:	83 c4 10             	add    esp,0x10
c0025a10:	5b                   	pop    ebx
c0025a11:	5e                   	pop    esi
c0025a12:	5f                   	pop    edi
c0025a13:	c3                   	ret    

c0025a14 <SATA::write(unsigned long long, int, void*)>:
c0025a14:	55                   	push   ebp
c0025a15:	b8 04 00 00 00       	mov    eax,0x4
c0025a1a:	57                   	push   edi
c0025a1b:	56                   	push   esi
c0025a1c:	53                   	push   ebx
c0025a1d:	83 ec 1c             	sub    esp,0x1c
c0025a20:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025a24:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025a28:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025a2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025a2f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025a33:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025a39:	77 56                	ja     c0025a91 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025a3b:	b8 06 00 00 00       	mov    eax,0x6
c0025a40:	85 ff                	test   edi,edi
c0025a42:	74 4d                	je     c0025a91 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025a44:	89 ee                	mov    esi,ebp
c0025a46:	c1 e6 09             	shl    esi,0x9
c0025a49:	01 fe                	add    esi,edi
c0025a4b:	89 c8                	mov    eax,ecx
c0025a4d:	89 da                	mov    edx,ebx
c0025a4f:	83 c0 01             	add    eax,0x1
c0025a52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025a56:	83 d2 00             	adc    edx,0x0
c0025a59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025a5d:	50                   	push   eax
c0025a5e:	50                   	push   eax
c0025a5f:	6a 01                	push   0x1
c0025a61:	57                   	push   edi
c0025a62:	81 c7 00 02 00 00    	add    edi,0x200
c0025a68:	6a 01                	push   0x1
c0025a6a:	53                   	push   ebx
c0025a6b:	51                   	push   ecx
c0025a6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025a70:	e8 c5 fc ff ff       	call   c002573a <SATA::access(unsigned long long, int, void*, bool)>
c0025a75:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025a79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025a7d:	83 c4 20             	add    esp,0x20
c0025a80:	39 f7                	cmp    edi,esi
c0025a82:	75 c7                	jne    c0025a4b <SATA::write(unsigned long long, int, void*)+0x37>
c0025a84:	01 2d 64 34 03 c0    	add    DWORD PTR ds:0xc0033464,ebp
c0025a8a:	e8 05 af fe ff       	call   c0010994 <VgaText::updateDiskUsage()>
c0025a8f:	31 c0                	xor    eax,eax
c0025a91:	83 c4 1c             	add    esp,0x1c
c0025a94:	5b                   	pop    ebx
c0025a95:	5e                   	pop    esi
c0025a96:	5f                   	pop    edi
c0025a97:	5d                   	pop    ebp
c0025a98:	c3                   	ret    
c0025a99:	90                   	nop

c0025a9a <SATAPI::write(unsigned long long, int, void*)>:
c0025a9a:	b8 03 00 00 00       	mov    eax,0x3
c0025a9f:	c3                   	ret    

c0025aa0 <SATAPI::close(int, int, void*)>:
c0025aa0:	83 ec 0c             	sub    esp,0xc
c0025aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aa7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025aad:	85 c0                	test   eax,eax
c0025aaf:	74 0c                	je     c0025abd <SATAPI::close(int, int, void*)+0x1d>
c0025ab1:	83 ec 0c             	sub    esp,0xc
c0025ab4:	8b 10                	mov    edx,DWORD PTR [eax]
c0025ab6:	50                   	push   eax
c0025ab7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025aba:	83 c4 10             	add    esp,0x10
c0025abd:	31 c0                	xor    eax,eax
c0025abf:	83 c4 0c             	add    esp,0xc
c0025ac2:	c3                   	ret    
c0025ac3:	90                   	nop

c0025ac4 <SATAPI::SATAPI()>:
c0025ac4:	83 ec 0c             	sub    esp,0xc
c0025ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025acb:	83 ec 04             	sub    esp,0x4
c0025ace:	68 00 08 00 00       	push   0x800
c0025ad3:	68 10 dc 02 c0       	push   0xc002dc10
c0025ad8:	50                   	push   eax
c0025ad9:	e8 0e ec fe ff       	call   c00146ec <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025ade:	83 c4 10             	add    esp,0x10
c0025ae1:	ba bc dc 02 c0       	mov    edx,0xc002dcbc
c0025ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aea:	89 10                	mov    DWORD PTR [eax],edx
c0025aec:	90                   	nop
c0025aed:	83 c4 0c             	add    esp,0xc
c0025af0:	c3                   	ret    
c0025af1:	90                   	nop

c0025af2 <SATAPI::diskRemoved()>:
c0025af2:	83 ec 18             	sub    esp,0x18
c0025af5:	68 1c dc 02 c0       	push   0xc002dc1c
c0025afa:	e8 90 d3 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0025aff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025b03:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025b0a:	83 c4 1c             	add    esp,0x1c
c0025b0d:	c3                   	ret    

c0025b0e <SATAPI::diskInserted()>:
c0025b0e:	53                   	push   ebx
c0025b0f:	83 ec 14             	sub    esp,0x14
c0025b12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025b16:	68 33 dc 02 c0       	push   0xc002dc33
c0025b1b:	e8 6f d3 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0025b20:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025b27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025b2a:	e8 25 ec fe ff       	call   c0014754 <PhysicalDisk::startCache()>
c0025b2f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025b33:	83 c4 18             	add    esp,0x18
c0025b36:	5b                   	pop    ebx
c0025b37:	e9 f8 0e ff ff       	jmp    c0016a34 <createPartitionsForDisk(PhysicalDisk*)>

c0025b3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025b3c:	55                   	push   ebp
c0025b3d:	57                   	push   edi
c0025b3e:	56                   	push   esi
c0025b3f:	53                   	push   ebx
c0025b40:	83 ec 24             	sub    esp,0x24
c0025b43:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025b47:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025b4b:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025b51:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0025b55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025b59:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025b5d:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025b63:	8d 5f 02             	lea    ebx,[edi+0x2]
c0025b66:	8b a8 60 01 00 00    	mov    ebp,DWORD PTR [eax+0x160]
c0025b6c:	c1 e3 07             	shl    ebx,0x7
c0025b6f:	89 f8                	mov    eax,edi
c0025b71:	01 eb                	add    ebx,ebp
c0025b73:	c1 e0 07             	shl    eax,0x7
c0025b76:	01 e8                	add    eax,ebp
c0025b78:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025b82:	53                   	push   ebx
c0025b83:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0025b89:	e8 d6 eb ff ff       	call   c0024764 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025b8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025b92:	83 c4 10             	add    esp,0x10
c0025b95:	b8 01 00 00 00       	mov    eax,0x1
c0025b9a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025b9f:	0f 84 9c 01 00 00    	je     c0025d41 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x205>
c0025ba5:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025bab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025bad:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025bb3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025bb9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025bbd:	c1 e1 05             	shl    ecx,0x5
c0025bc0:	01 c8                	add    eax,ecx
c0025bc2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025bc4:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025bca:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025bd0:	89 08                	mov    DWORD PTR [eax],ecx
c0025bd2:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025bd8:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025bde:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025be4:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025be7:	50                   	push   eax
c0025be8:	68 90 00 00 00       	push   0x90
c0025bed:	6a 00                	push   0x0
c0025bef:	53                   	push   ebx
c0025bf0:	e8 77 ab fd ff       	call   c000076c <memset>
c0025bf5:	83 c4 10             	add    esp,0x10
c0025bf8:	31 c0                	xor    eax,eax
c0025bfa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025bfe:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025c02:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c0025c05:	88 4c 03 40          	mov    BYTE PTR [ebx+eax*1+0x40],cl
c0025c09:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0025c0d:	40                   	inc    eax
c0025c0e:	83 f8 0c             	cmp    eax,0xc
c0025c11:	75 eb                	jne    c0025bfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0xc2>
c0025c13:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025c19:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025c1d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025c23:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025c27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0025c2b:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025c2f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025c32:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025c38:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025c3e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025c43:	09 c8                	or     eax,ecx
c0025c45:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025c4b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025c4e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025c55:	66 25 00 7f          	and    ax,0x7f00
c0025c59:	66 0d 27 80          	or     ax,0x8027
c0025c5d:	66 89 03             	mov    WORD PTR [ebx],ax
c0025c60:	89 d0                	mov    eax,edx
c0025c62:	c1 ea 18             	shr    edx,0x18
c0025c65:	c1 e8 10             	shr    eax,0x10
c0025c68:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025c6b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025c6e:	89 fa                	mov    edx,edi
c0025c70:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0025c74:	c1 e2 07             	shl    edx,0x7
c0025c77:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025c7a:	01 ea                	add    edx,ebp
c0025c7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025c80:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025c83:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025c87:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025c8b:	31 c0                	xor    eax,eax
c0025c8d:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025c93:	80 e1 88             	and    cl,0x88
c0025c96:	74 0a                	je     c0025ca2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x166>
c0025c98:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025c9d:	74 0a                	je     c0025ca9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c0025c9f:	40                   	inc    eax
c0025ca0:	eb eb                	jmp    c0025c8d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x151>
c0025ca2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025ca7:	75 0f                	jne    c0025cb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17c>
c0025ca9:	83 ec 0c             	sub    esp,0xc
c0025cac:	68 b9 db 02 c0       	push   0xc002dbb9
c0025cb1:	e8 41 4c ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0025cb6:	eb 4f                	jmp    c0025d07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0025cb8:	b8 01 00 00 00       	mov    eax,0x1
c0025cbd:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025cc1:	c1 e7 07             	shl    edi,0x7
c0025cc4:	d3 e0                	shl    eax,cl
c0025cc6:	01 ef                	add    edi,ebp
c0025cc8:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025cce:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025cd4:	85 d0                	test   eax,edx
c0025cd6:	74 16                	je     c0025cee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b2>
c0025cd8:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025cde:	0f ba e2 1e          	bt     edx,0x1e
c0025ce2:	73 ea                	jae    c0025cce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x192>
c0025ce4:	83 ec 0c             	sub    esp,0xc
c0025ce7:	68 4b dc 02 c0       	push   0xc002dc4b
c0025cec:	eb 14                	jmp    c0025d02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c6>
c0025cee:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025cf4:	0f ba e0 1e          	bt     eax,0x1e
c0025cf8:	73 17                	jae    c0025d11 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d5>
c0025cfa:	83 ec 0c             	sub    esp,0xc
c0025cfd:	68 5e dc 02 c0       	push   0xc002dc5e
c0025d02:	e8 88 d1 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0025d07:	83 c4 10             	add    esp,0x10
c0025d0a:	b8 01 00 00 00       	mov    eax,0x1
c0025d0f:	eb 30                	jmp    c0025d41 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x205>
c0025d11:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025d16:	74 07                	je     c0025d1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c0025d18:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025d1d:	75 04                	jne    c0025d23 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e7>
c0025d1f:	31 c0                	xor    eax,eax
c0025d21:	eb 1e                	jmp    c0025d41 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x205>
c0025d23:	8b 86 7c 01 00 00    	mov    eax,DWORD PTR [esi+0x17c]
c0025d29:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0025d2d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0025d31:	01 c2                	add    edx,eax
c0025d33:	29 c1                	sub    ecx,eax
c0025d35:	39 d0                	cmp    eax,edx
c0025d37:	74 e6                	je     c0025d1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c0025d39:	8a 18                	mov    bl,BYTE PTR [eax]
c0025d3b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0025d3e:	40                   	inc    eax
c0025d3f:	eb f4                	jmp    c0025d35 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025d41:	83 c4 1c             	add    esp,0x1c
c0025d44:	5b                   	pop    ebx
c0025d45:	5e                   	pop    esi
c0025d46:	5f                   	pop    edi
c0025d47:	5d                   	pop    ebp
c0025d48:	c3                   	ret    
c0025d49:	90                   	nop

c0025d4a <SATAPI::eject()>:
c0025d4a:	57                   	push   edi
c0025d4b:	b9 03 00 00 00       	mov    ecx,0x3
c0025d50:	53                   	push   ebx
c0025d51:	83 ec 14             	sub    esp,0x14
c0025d54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025d58:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025d5c:	fc                   	cld    
c0025d5d:	31 c0                	xor    eax,eax
c0025d5f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025d61:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025d66:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025d6b:	50                   	push   eax
c0025d6c:	6a 00                	push   0x0
c0025d6e:	6a 00                	push   0x0
c0025d70:	6a 00                	push   0x0
c0025d72:	6a 00                	push   0x0
c0025d74:	6a 02                	push   0x2
c0025d76:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025d7a:	50                   	push   eax
c0025d7b:	53                   	push   ebx
c0025d7c:	e8 bb fd ff ff       	call   c0025b3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025d81:	83 c4 14             	add    esp,0x14
c0025d84:	53                   	push   ebx
c0025d85:	e8 68 fd ff ff       	call   c0025af2 <SATAPI::diskRemoved()>
c0025d8a:	83 c4 24             	add    esp,0x24
c0025d8d:	31 c0                	xor    eax,eax
c0025d8f:	5b                   	pop    ebx
c0025d90:	5f                   	pop    edi
c0025d91:	c3                   	ret    

c0025d92 <SATAPI::detectMedia()>:
c0025d92:	56                   	push   esi
c0025d93:	53                   	push   ebx
c0025d94:	83 ec 28             	sub    esp,0x28
c0025d97:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025d9b:	6a 0c                	push   0xc
c0025d9d:	6a 00                	push   0x0
c0025d9f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025da3:	56                   	push   esi
c0025da4:	e8 c3 a9 fd ff       	call   c000076c <memset>
c0025da9:	83 c4 0c             	add    esp,0xc
c0025dac:	6a 00                	push   0x0
c0025dae:	6a 00                	push   0x0
c0025db0:	6a 00                	push   0x0
c0025db2:	6a 00                	push   0x0
c0025db4:	6a 00                	push   0x0
c0025db6:	56                   	push   esi
c0025db7:	53                   	push   ebx
c0025db8:	e8 7f fd ff ff       	call   c0025b3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025dbd:	83 c4 1c             	add    esp,0x1c
c0025dc0:	6a 0c                	push   0xc
c0025dc2:	6a 00                	push   0x0
c0025dc4:	56                   	push   esi
c0025dc5:	e8 a2 a9 fd ff       	call   c000076c <memset>
c0025dca:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025dcf:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025dd4:	83 c4 0c             	add    esp,0xc
c0025dd7:	6a 01                	push   0x1
c0025dd9:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025ddd:	50                   	push   eax
c0025dde:	6a 00                	push   0x0
c0025de0:	6a 00                	push   0x0
c0025de2:	6a 12                	push   0x12
c0025de4:	56                   	push   esi
c0025de5:	53                   	push   ebx
c0025de6:	e8 51 fd ff ff       	call   c0025b3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025deb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025def:	83 c4 20             	add    esp,0x20
c0025df2:	83 e0 7f             	and    eax,0x7f
c0025df5:	3c 70                	cmp    al,0x70
c0025df7:	74 15                	je     c0025e0e <SATAPI::detectMedia()+0x7c>
c0025df9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025e00:	75 0c                	jne    c0025e0e <SATAPI::detectMedia()+0x7c>
c0025e02:	83 ec 0c             	sub    esp,0xc
c0025e05:	53                   	push   ebx
c0025e06:	e8 03 fd ff ff       	call   c0025b0e <SATAPI::diskInserted()>
c0025e0b:	83 c4 10             	add    esp,0x10
c0025e0e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025e12:	83 e0 0f             	and    eax,0xf
c0025e15:	3c 02                	cmp    al,0x2
c0025e17:	75 1b                	jne    c0025e34 <SATAPI::detectMedia()+0xa2>
c0025e19:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025e1e:	75 2d                	jne    c0025e4d <SATAPI::detectMedia()+0xbb>
c0025e20:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025e27:	74 24                	je     c0025e4d <SATAPI::detectMedia()+0xbb>
c0025e29:	83 ec 0c             	sub    esp,0xc
c0025e2c:	53                   	push   ebx
c0025e2d:	e8 c0 fc ff ff       	call   c0025af2 <SATAPI::diskRemoved()>
c0025e32:	eb 16                	jmp    c0025e4a <SATAPI::detectMedia()+0xb8>
c0025e34:	84 c0                	test   al,al
c0025e36:	75 15                	jne    c0025e4d <SATAPI::detectMedia()+0xbb>
c0025e38:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025e3f:	75 0c                	jne    c0025e4d <SATAPI::detectMedia()+0xbb>
c0025e41:	83 ec 0c             	sub    esp,0xc
c0025e44:	53                   	push   ebx
c0025e45:	e8 c4 fc ff ff       	call   c0025b0e <SATAPI::diskInserted()>
c0025e4a:	83 c4 10             	add    esp,0x10
c0025e4d:	83 c4 24             	add    esp,0x24
c0025e50:	5b                   	pop    ebx
c0025e51:	5e                   	pop    esi
c0025e52:	c3                   	ret    
c0025e53:	90                   	nop

c0025e54 <SATAPI::open(int, int, void*)>:
c0025e54:	56                   	push   esi
c0025e55:	53                   	push   ebx
c0025e56:	50                   	push   eax
c0025e57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025e5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e5f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025e69:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025e6f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025e79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e7d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025e87:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025e8d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025e94:	e8 93 a0 fe ff       	call   c000ff2c <Phys::allocatePage()>
c0025e99:	89 c6                	mov    esi,eax
c0025e9b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025ea1:	81 c6 00 10 00 00    	add    esi,0x1000
c0025ea7:	e8 80 a0 fe ff       	call   c000ff2c <Phys::allocatePage()>
c0025eac:	39 c6                	cmp    esi,eax
c0025eae:	74 10                	je     c0025ec0 <SATAPI::open(int, int, void*)+0x6c>
c0025eb0:	83 ec 0c             	sub    esp,0xc
c0025eb3:	68 73 dc 02 c0       	push   0xc002dc73
c0025eb8:	e8 3a 4a ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0025ebd:	83 c4 10             	add    esp,0x10
c0025ec0:	83 ec 0c             	sub    esp,0xc
c0025ec3:	6a 02                	push   0x2
c0025ec5:	e8 bf bb fe ff       	call   c0011a89 <Virt::allocateKernelVirtualPages(int)>
c0025eca:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025ed0:	6a 03                	push   0x3
c0025ed2:	50                   	push   eax
c0025ed3:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025ed9:	ff 35 90 f2 02 c0    	push   DWORD PTR ds:0xc002f290
c0025edf:	e8 dc c3 fe ff       	call   c00122c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025ee4:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025eeb:	83 c4 14             	add    esp,0x14
c0025eee:	53                   	push   ebx
c0025eef:	e8 9e fe ff ff       	call   c0025d92 <SATAPI::detectMedia()>
c0025ef4:	83 c4 14             	add    esp,0x14
c0025ef7:	31 c0                	xor    eax,eax
c0025ef9:	5b                   	pop    ebx
c0025efa:	5e                   	pop    esi
c0025efb:	c3                   	ret    

c0025efc <SATAPI::read(unsigned long long, int, void*)>:
c0025efc:	55                   	push   ebp
c0025efd:	57                   	push   edi
c0025efe:	56                   	push   esi
c0025eff:	53                   	push   ebx
c0025f00:	83 ec 1c             	sub    esp,0x1c
c0025f03:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025f07:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f0b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025f0f:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025f16:	74 19                	je     c0025f31 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025f18:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025f1d:	7e 2e                	jle    c0025f4d <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025f1f:	83 ec 0c             	sub    esp,0xc
c0025f22:	68 89 dc 02 c0       	push   0xc002dc89
c0025f27:	e8 cb 49 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0025f2c:	83 c4 10             	add    esp,0x10
c0025f2f:	eb 1c                	jmp    c0025f4d <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025f31:	83 ec 0c             	sub    esp,0xc
c0025f34:	55                   	push   ebp
c0025f35:	e8 58 fe ff ff       	call   c0025d92 <SATAPI::detectMedia()>
c0025f3a:	83 c4 10             	add    esp,0x10
c0025f3d:	b8 02 00 00 00       	mov    eax,0x2
c0025f42:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025f49:	75 cd                	jne    c0025f18 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025f4b:	eb 49                	jmp    c0025f96 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025f4d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025f51:	b9 03 00 00 00       	mov    ecx,0x3
c0025f56:	fc                   	cld    
c0025f57:	31 c0                	xor    eax,eax
c0025f59:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025f5b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025f60:	89 d8                	mov    eax,ebx
c0025f62:	86 e0                	xchg   al,ah
c0025f64:	c1 c0 10             	rol    eax,0x10
c0025f67:	86 e0                	xchg   al,ah
c0025f69:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025f6d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025f71:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025f75:	50                   	push   eax
c0025f76:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025f7a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025f7e:	56                   	push   esi
c0025f7f:	53                   	push   ebx
c0025f80:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025f84:	c1 e0 0b             	shl    eax,0xb
c0025f87:	50                   	push   eax
c0025f88:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025f8c:	50                   	push   eax
c0025f8d:	55                   	push   ebp
c0025f8e:	e8 a9 fb ff ff       	call   c0025b3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025f93:	83 c4 20             	add    esp,0x20
c0025f96:	83 c4 1c             	add    esp,0x1c
c0025f99:	5b                   	pop    ebx
c0025f9a:	5e                   	pop    esi
c0025f9b:	5f                   	pop    edi
c0025f9c:	5d                   	pop    ebp
c0025f9d:	c3                   	ret    

c0025f9e <AVX::open(int, int, void*)>:
c0025f9e:	83 ec 0c             	sub    esp,0xc
c0025fa1:	e8 42 11 00 00       	call   c00270e8 <avxInit>
c0025fa6:	b8 00 00 00 00       	mov    eax,0x0
c0025fab:	83 c4 0c             	add    esp,0xc
c0025fae:	c3                   	ret    
c0025faf:	90                   	nop

c0025fb0 <AVX::close(int, int, void*)>:
c0025fb0:	83 ec 0c             	sub    esp,0xc
c0025fb3:	e8 31 11 00 00       	call   c00270e9 <avxClose>
c0025fb8:	b8 00 00 00 00       	mov    eax,0x0
c0025fbd:	83 c4 0c             	add    esp,0xc
c0025fc0:	c3                   	ret    
c0025fc1:	90                   	nop

c0025fc2 <AVX::available()>:
c0025fc2:	83 ec 0c             	sub    esp,0xc
c0025fc5:	e8 16 11 00 00       	call   c00270e0 <avxDetect>
c0025fca:	85 c0                	test   eax,eax
c0025fcc:	0f 95 c0             	setne  al
c0025fcf:	83 c4 0c             	add    esp,0xc
c0025fd2:	c3                   	ret    
c0025fd3:	90                   	nop

c0025fd4 <AVX::save(void*)>:
c0025fd4:	83 ec 0c             	sub    esp,0xc
c0025fd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fdb:	83 ec 0c             	sub    esp,0xc
c0025fde:	50                   	push   eax
c0025fdf:	e8 02 11 00 00       	call   c00270e6 <avxSave>
c0025fe4:	83 c4 10             	add    esp,0x10
c0025fe7:	90                   	nop
c0025fe8:	83 c4 0c             	add    esp,0xc
c0025feb:	c3                   	ret    

c0025fec <AVX::load(void*)>:
c0025fec:	83 ec 0c             	sub    esp,0xc
c0025fef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ff3:	83 ec 0c             	sub    esp,0xc
c0025ff6:	50                   	push   eax
c0025ff7:	e8 eb 10 00 00       	call   c00270e7 <avxLoad>
c0025ffc:	83 c4 10             	add    esp,0x10
c0025fff:	90                   	nop
c0026000:	83 c4 0c             	add    esp,0xc
c0026003:	c3                   	ret    

c0026004 <AVX::AVX()>:
c0026004:	83 ec 0c             	sub    esp,0xc
c0026007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600b:	83 ec 08             	sub    esp,0x8
c002600e:	68 ec dc 02 c0       	push   0xc002dcec
c0026013:	50                   	push   eax
c0026014:	e8 b1 e7 fe ff       	call   c00147ca <FPU::FPU(char const*)>
c0026019:	83 c4 10             	add    esp,0x10
c002601c:	ba fc dc 02 c0       	mov    edx,0xc002dcfc
c0026021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026025:	89 10                	mov    DWORD PTR [eax],edx
c0026027:	90                   	nop
c0026028:	83 c4 0c             	add    esp,0xc
c002602b:	c3                   	ret    

c002602c <MMX::available()>:
c002602c:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0026031:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0026037:	83 e0 20             	and    eax,0x20
c002603a:	84 c0                	test   al,al
c002603c:	0f 95 c0             	setne  al
c002603f:	c3                   	ret    

c0026040 <MMX::open(int, int, void*)>:
c0026040:	83 ec 0c             	sub    esp,0xc
c0026043:	e8 2a 11 00 00       	call   c0027172 <x87Init>
c0026048:	b8 00 00 00 00       	mov    eax,0x0
c002604d:	83 c4 0c             	add    esp,0xc
c0026050:	c3                   	ret    
c0026051:	90                   	nop

c0026052 <MMX::close(int, int, void*)>:
c0026052:	83 ec 0c             	sub    esp,0xc
c0026055:	e8 32 11 00 00       	call   c002718c <x87Close>
c002605a:	b8 00 00 00 00       	mov    eax,0x0
c002605f:	83 c4 0c             	add    esp,0xc
c0026062:	c3                   	ret    
c0026063:	90                   	nop

c0026064 <MMX::save(void*)>:
c0026064:	83 ec 0c             	sub    esp,0xc
c0026067:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002606b:	83 ec 0c             	sub    esp,0xc
c002606e:	50                   	push   eax
c002606f:	e8 ed 10 00 00       	call   c0027161 <x87Save>
c0026074:	83 c4 10             	add    esp,0x10
c0026077:	90                   	nop
c0026078:	83 c4 0c             	add    esp,0xc
c002607b:	c3                   	ret    

c002607c <MMX::load(void*)>:
c002607c:	83 ec 0c             	sub    esp,0xc
c002607f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026083:	83 ec 0c             	sub    esp,0xc
c0026086:	50                   	push   eax
c0026087:	e8 de 10 00 00       	call   c002716a <x87Load>
c002608c:	83 c4 10             	add    esp,0x10
c002608f:	90                   	nop
c0026090:	83 c4 0c             	add    esp,0xc
c0026093:	c3                   	ret    

c0026094 <MMX::MMX()>:
c0026094:	83 ec 0c             	sub    esp,0xc
c0026097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002609b:	83 ec 08             	sub    esp,0x8
c002609e:	68 2c dd 02 c0       	push   0xc002dd2c
c00260a3:	50                   	push   eax
c00260a4:	e8 21 e7 fe ff       	call   c00147ca <FPU::FPU(char const*)>
c00260a9:	83 c4 10             	add    esp,0x10
c00260ac:	ba 3c dd 02 c0       	mov    edx,0xc002dd3c
c00260b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260b5:	89 10                	mov    DWORD PTR [eax],edx
c00260b7:	90                   	nop
c00260b8:	83 c4 0c             	add    esp,0xc
c00260bb:	c3                   	ret    

c00260bc <SSE::open(int, int, void*)>:
c00260bc:	83 ec 0c             	sub    esp,0xc
c00260bf:	e8 60 10 00 00       	call   c0027124 <sseInit>
c00260c4:	b8 00 00 00 00       	mov    eax,0x0
c00260c9:	83 c4 0c             	add    esp,0xc
c00260cc:	c3                   	ret    
c00260cd:	90                   	nop

c00260ce <SSE::close(int, int, void*)>:
c00260ce:	83 ec 0c             	sub    esp,0xc
c00260d1:	e8 5e 10 00 00       	call   c0027134 <sseClose>
c00260d6:	b8 00 00 00 00       	mov    eax,0x0
c00260db:	83 c4 0c             	add    esp,0xc
c00260de:	c3                   	ret    
c00260df:	90                   	nop

c00260e0 <SSE::available()>:
c00260e0:	83 ec 1c             	sub    esp,0x1c
c00260e3:	e8 18 10 00 00       	call   c0027100 <absolutelyNoChanceInHell>
c00260e8:	85 c0                	test   eax,eax
c00260ea:	0f 95 c0             	setne  al
c00260ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00260f1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00260f5:	83 c4 1c             	add    esp,0x1c
c00260f8:	c3                   	ret    
c00260f9:	90                   	nop

c00260fa <SSE::save(void*)>:
c00260fa:	83 ec 0c             	sub    esp,0xc
c00260fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026101:	83 ec 0c             	sub    esp,0xc
c0026104:	50                   	push   eax
c0026105:	e8 0e 10 00 00       	call   c0027118 <sseSave>
c002610a:	83 c4 10             	add    esp,0x10
c002610d:	90                   	nop
c002610e:	83 c4 0c             	add    esp,0xc
c0026111:	c3                   	ret    

c0026112 <SSE::load(void*)>:
c0026112:	83 ec 0c             	sub    esp,0xc
c0026115:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026119:	83 ec 0c             	sub    esp,0xc
c002611c:	50                   	push   eax
c002611d:	e8 fc 0f 00 00       	call   c002711e <sseLoad>
c0026122:	83 c4 10             	add    esp,0x10
c0026125:	90                   	nop
c0026126:	83 c4 0c             	add    esp,0xc
c0026129:	c3                   	ret    

c002612a <SSE::SSE()>:
c002612a:	83 ec 0c             	sub    esp,0xc
c002612d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026131:	83 ec 08             	sub    esp,0x8
c0026134:	68 6c dd 02 c0       	push   0xc002dd6c
c0026139:	50                   	push   eax
c002613a:	e8 8b e6 fe ff       	call   c00147ca <FPU::FPU(char const*)>
c002613f:	83 c4 10             	add    esp,0x10
c0026142:	ba 7c dd 02 c0       	mov    edx,0xc002dd7c
c0026147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002614b:	89 10                	mov    DWORD PTR [eax],edx
c002614d:	90                   	nop
c002614e:	83 c4 0c             	add    esp,0xc
c0026151:	c3                   	ret    

c0026152 <x87::open(int, int, void*)>:
c0026152:	83 ec 0c             	sub    esp,0xc
c0026155:	e8 18 10 00 00       	call   c0027172 <x87Init>
c002615a:	b8 00 00 00 00       	mov    eax,0x0
c002615f:	83 c4 0c             	add    esp,0xc
c0026162:	c3                   	ret    
c0026163:	90                   	nop

c0026164 <x87::close(int, int, void*)>:
c0026164:	83 ec 0c             	sub    esp,0xc
c0026167:	e8 20 10 00 00       	call   c002718c <x87Close>
c002616c:	b8 00 00 00 00       	mov    eax,0x0
c0026171:	83 c4 0c             	add    esp,0xc
c0026174:	c3                   	ret    
c0026175:	90                   	nop

c0026176 <x87::available()>:
c0026176:	83 ec 0c             	sub    esp,0xc
c0026179:	e8 c8 0f 00 00       	call   c0027146 <x87Detect>
c002617e:	85 c0                	test   eax,eax
c0026180:	0f 95 c0             	setne  al
c0026183:	83 c4 0c             	add    esp,0xc
c0026186:	c3                   	ret    
c0026187:	90                   	nop

c0026188 <x87::save(void*)>:
c0026188:	83 ec 0c             	sub    esp,0xc
c002618b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002618f:	83 ec 0c             	sub    esp,0xc
c0026192:	50                   	push   eax
c0026193:	e8 c9 0f 00 00       	call   c0027161 <x87Save>
c0026198:	83 c4 10             	add    esp,0x10
c002619b:	90                   	nop
c002619c:	83 c4 0c             	add    esp,0xc
c002619f:	c3                   	ret    

c00261a0 <x87::load(void*)>:
c00261a0:	83 ec 0c             	sub    esp,0xc
c00261a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261a7:	83 ec 0c             	sub    esp,0xc
c00261aa:	50                   	push   eax
c00261ab:	e8 ba 0f 00 00       	call   c002716a <x87Load>
c00261b0:	83 c4 10             	add    esp,0x10
c00261b3:	90                   	nop
c00261b4:	83 c4 0c             	add    esp,0xc
c00261b7:	c3                   	ret    

c00261b8 <x87::x87()>:
c00261b8:	83 ec 0c             	sub    esp,0xc
c00261bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261bf:	83 ec 08             	sub    esp,0x8
c00261c2:	68 ac dd 02 c0       	push   0xc002ddac
c00261c7:	50                   	push   eax
c00261c8:	e8 fd e5 fe ff       	call   c00147ca <FPU::FPU(char const*)>
c00261cd:	83 c4 10             	add    esp,0x10
c00261d0:	ba bc dd 02 c0       	mov    edx,0xc002ddbc
c00261d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261d9:	89 10                	mov    DWORD PTR [eax],edx
c00261db:	90                   	nop
c00261dc:	83 c4 0c             	add    esp,0xc
c00261df:	c3                   	ret    

c00261e0 <APIC::disable()>:
c00261e0:	90                   	nop
c00261e1:	c3                   	ret    

c00261e2 <APIC::close(int, int, void*)>:
c00261e2:	55                   	push   ebp
c00261e3:	89 e5                	mov    ebp,esp
c00261e5:	83 ec 08             	sub    esp,0x8
c00261e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00261ed:	83 c0 3c             	add    eax,0x3c
c00261f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00261f2:	83 ec 0c             	sub    esp,0xc
c00261f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261f8:	ff d0                	call   eax
c00261fa:	83 c4 10             	add    esp,0x10
c00261fd:	b8 00 00 00 00       	mov    eax,0x0
c0026202:	c9                   	leave  
c0026203:	c3                   	ret    

c0026204 <IOAPIC::close(int, int, void*)>:
c0026204:	b8 00 00 00 00       	mov    eax,0x0
c0026209:	c3                   	ret    

c002620a <APIC::io_wait()>:
c002620a:	eb 00                	jmp    c002620c <APIC::io_wait()+0x2>
c002620c:	eb 00                	jmp    c002620e <APIC::io_wait()+0x4>
c002620e:	90                   	nop
c002620f:	c3                   	ret    

c0026210 <APIC::getBase()>:
c0026210:	55                   	push   ebp
c0026211:	89 e5                	mov    ebp,esp
c0026213:	83 ec 18             	sub    esp,0x18
c0026216:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c002621b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0026221:	83 e0 08             	and    eax,0x8
c0026224:	84 c0                	test   al,al
c0026226:	75 07                	jne    c002622f <APIC::getBase()+0x1f>
c0026228:	b8 00 00 00 00       	mov    eax,0x0
c002622d:	eb 21                	jmp    c0026250 <APIC::getBase()+0x40>
c002622f:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0026234:	83 ec 08             	sub    esp,0x8
c0026237:	6a 1b                	push   0x1b
c0026239:	50                   	push   eax
c002623a:	e8 27 8c fe ff       	call   c000ee66 <Computer::rdmsr(unsigned int)>
c002623f:	83 c4 10             	add    esp,0x10
c0026242:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026245:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026248:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002624b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0026250:	c9                   	leave  
c0026251:	c3                   	ret    

c0026252 <APIC::eoi(unsigned char)>:
c0026252:	55                   	push   ebp
c0026253:	89 e5                	mov    ebp,esp
c0026255:	83 ec 28             	sub    esp,0x28
c0026258:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002625b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002625e:	83 ec 0c             	sub    esp,0xc
c0026261:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026264:	e8 a7 ff ff ff       	call   c0026210 <APIC::getBase()>
c0026269:	83 c4 10             	add    esp,0x10
c002626c:	05 b0 00 00 00       	add    eax,0xb0
c0026271:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026274:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026277:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002627d:	90                   	nop
c002627e:	c9                   	leave  
c002627f:	c3                   	ret    

c0026280 <APIC::open(int, int, void*)>:
c0026280:	55                   	push   ebp
c0026281:	89 e5                	mov    ebp,esp
c0026283:	57                   	push   edi
c0026284:	56                   	push   esi
c0026285:	53                   	push   ebx
c0026286:	83 ec 2c             	sub    esp,0x2c
c0026289:	83 ec 0c             	sub    esp,0xc
c002628c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002628f:	e8 7c ff ff ff       	call   c0026210 <APIC::getBase()>
c0026294:	83 c4 10             	add    esp,0x10
c0026297:	89 c2                	mov    edx,eax
c0026299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002629c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262a2:	0f b6 f8             	movzx  edi,al
c00262a5:	89 d0                	mov    eax,edx
c00262a7:	ba 00 00 00 00       	mov    edx,0x0
c00262ac:	89 c1                	mov    ecx,eax
c00262ae:	80 e5 ff             	and    ch,0xff
c00262b1:	89 cb                	mov    ebx,ecx
c00262b3:	0f b6 f2             	movzx  esi,dl
c00262b6:	89 d8                	mov    eax,ebx
c00262b8:	89 f2                	mov    edx,esi
c00262ba:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262bd:	8d 5f 08             	lea    ebx,[edi+0x8]
c00262c0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00262c4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00262c8:	83 e0 00             	and    eax,0x0
c00262cb:	09 d0                	or     eax,edx
c00262cd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00262d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262d4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262da:	8d 50 01             	lea    edx,[eax+0x1]
c00262dd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262e0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00262e6:	0f b6 d0             	movzx  edx,al
c00262e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262ec:	83 c2 08             	add    edx,0x8
c00262ef:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00262f3:	0f b6 c9             	movzx  ecx,cl
c00262f6:	81 c9 00 00 01 00    	or     ecx,0x10000
c00262fc:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026300:	83 ec 0c             	sub    esp,0xc
c0026303:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026306:	e8 05 ff ff ff       	call   c0026210 <APIC::getBase()>
c002630b:	83 c4 10             	add    esp,0x10
c002630e:	05 f0 00 00 00       	add    eax,0xf0
c0026313:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026316:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026319:	8b 00                	mov    eax,DWORD PTR [eax]
c002631b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002631e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026325:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002632c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002632f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026332:	89 10                	mov    DWORD PTR [eax],edx
c0026334:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002633b:	a1 f0 19 03 c0       	mov    eax,ds:0xc00319f0
c0026340:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0026343:	7d 7c                	jge    c00263c1 <APIC::open(int, int, void*)+0x141>
c0026345:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026348:	8b 04 85 00 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce600]
c002634f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026352:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026355:	8b 04 85 00 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce600]
c002635c:	c1 e8 08             	shr    eax,0x8
c002635f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026363:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026366:	8b 04 85 00 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce600]
c002636d:	c1 e8 18             	shr    eax,0x18
c0026370:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026373:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0026377:	75 40                	jne    c00263b9 <APIC::open(int, int, void*)+0x139>
c0026379:	83 ec 0c             	sub    esp,0xc
c002637c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002637f:	e8 8c fe ff ff       	call   c0026210 <APIC::getBase()>
c0026384:	83 c4 10             	add    esp,0x10
c0026387:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002638b:	75 07                	jne    c0026394 <APIC::open(int, int, void*)+0x114>
c002638d:	ba 60 03 00 00       	mov    edx,0x360
c0026392:	eb 05                	jmp    c0026399 <APIC::open(int, int, void*)+0x119>
c0026394:	ba 50 03 00 00       	mov    edx,0x350
c0026399:	01 d0                	add    eax,edx
c002639b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002639e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00263a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00263a3:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00263a6:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00263ad:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00263b1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00263b4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00263b7:	89 10                	mov    DWORD PTR [eax],edx
c00263b9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00263bc:	e9 7a ff ff ff       	jmp    c002633b <APIC::open(int, int, void*)+0xbb>
c00263c1:	b8 00 00 00 00       	mov    eax,0x0
c00263c6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00263c9:	5b                   	pop    ebx
c00263ca:	5e                   	pop    esi
c00263cb:	5f                   	pop    edi
c00263cc:	5d                   	pop    ebp
c00263cd:	c3                   	ret    

c00263ce <IOAPIC::IOAPIC()>:
c00263ce:	83 ec 0c             	sub    esp,0xc
c00263d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d5:	83 ec 08             	sub    esp,0x8
c00263d8:	68 ec dd 02 c0       	push   0xc002ddec
c00263dd:	50                   	push   eax
c00263de:	e8 c7 e0 fe ff       	call   c00144aa <Device::Device(char const*)>
c00263e3:	83 c4 10             	add    esp,0x10
c00263e6:	ba 14 df 02 c0       	mov    edx,0xc002df14
c00263eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ef:	89 10                	mov    DWORD PTR [eax],edx
c00263f1:	90                   	nop
c00263f2:	83 c4 0c             	add    esp,0xc
c00263f5:	c3                   	ret    

c00263f6 <APIC::APIC()>:
c00263f6:	53                   	push   ebx
c00263f7:	83 ec 18             	sub    esp,0x18
c00263fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00263fe:	83 ec 08             	sub    esp,0x8
c0026401:	68 f4 dd 02 c0       	push   0xc002ddf4
c0026406:	50                   	push   eax
c0026407:	e8 18 e8 fe ff       	call   c0014c24 <InterruptController::InterruptController(char const*)>
c002640c:	83 c4 10             	add    esp,0x10
c002640f:	ba cc de 02 c0       	mov    edx,0xc002decc
c0026414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026418:	89 10                	mov    DWORD PTR [eax],edx
c002641a:	a0 c0 34 03 c0       	mov    al,ds:0xc00334c0
c002641f:	83 f0 01             	xor    eax,0x1
c0026422:	84 c0                	test   al,al
c0026424:	0f 84 a1 00 00 00    	je     c00264cb <APIC::APIC()+0xd5>
c002642a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002642f:	a0 a0 1a 03 c0       	mov    al,ds:0xc0031aa0
c0026434:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0026438:	0f 83 86 00 00 00    	jae    c00264c4 <APIC::APIC()+0xce>
c002643e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0026446:	83 ec 0c             	sub    esp,0xc
c0026449:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002644d:	e8 6e 94 fe ff       	call   c000f8c0 <malloc>
c0026452:	83 c4 10             	add    esp,0x10
c0026455:	89 c3                	mov    ebx,eax
c0026457:	83 ec 0c             	sub    esp,0xc
c002645a:	53                   	push   ebx
c002645b:	e8 6e ff ff ff       	call   c00263ce <IOAPIC::IOAPIC()>
c0026460:	83 c4 10             	add    esp,0x10
c0026463:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0026467:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002646c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026470:	89 14 85 a0 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccb60],edx
c0026477:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c002647c:	40                   	inc    eax
c002647d:	a3 80 34 03 c0       	mov    ds:0xc0033480,eax
c0026482:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0026487:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002648d:	83 ec 08             	sub    esp,0x8
c0026490:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026494:	50                   	push   eax
c0026495:	e8 20 de fe ff       	call   c00142ba <Device::addChild(Device*)>
c002649a:	83 c4 10             	add    esp,0x10
c002649d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00264a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00264a3:	83 c0 08             	add    eax,0x8
c00264a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00264a8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00264ad:	6a 00                	push   0x0
c00264af:	6a 00                	push   0x0
c00264b1:	52                   	push   edx
c00264b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00264b6:	ff d0                	call   eax
c00264b8:	83 c4 10             	add    esp,0x10
c00264bb:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00264bf:	e9 6b ff ff ff       	jmp    c002642f <APIC::APIC()+0x39>
c00264c4:	c6 05 c0 34 03 c0 01 	mov    BYTE PTR ds:0xc00334c0,0x1
c00264cb:	90                   	nop
c00264cc:	83 c4 18             	add    esp,0x18
c00264cf:	5b                   	pop    ebx
c00264d0:	c3                   	ret    
c00264d1:	90                   	nop

c00264d2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00264d2:	55                   	push   ebp
c00264d3:	89 e5                	mov    ebp,esp
c00264d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00264de:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00264e1:	72 1d                	jb     c0026500 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00264e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264e6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00264ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264ef:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00264f5:	01 d0                	add    eax,edx
c00264f7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00264fa:	73 04                	jae    c0026500 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00264fc:	b0 01                	mov    al,0x1
c00264fe:	eb 02                	jmp    c0026502 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026500:	b0 00                	mov    al,0x0
c0026502:	5d                   	pop    ebp
c0026503:	c3                   	ret    

c0026504 <IOAPIC::read(int)>:
c0026504:	55                   	push   ebp
c0026505:	89 e5                	mov    ebp,esp
c0026507:	83 ec 10             	sub    esp,0x10
c002650a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002650d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026513:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026516:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026519:	0f b6 d0             	movzx  edx,al
c002651c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002651f:	89 10                	mov    DWORD PTR [eax],edx
c0026521:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026524:	83 c0 10             	add    eax,0x10
c0026527:	8b 00                	mov    eax,DWORD PTR [eax]
c0026529:	c9                   	leave  
c002652a:	c3                   	ret    
c002652b:	90                   	nop

c002652c <IOAPIC::open(int, int, void*)>:
c002652c:	55                   	push   ebp
c002652d:	89 e5                	mov    ebp,esp
c002652f:	57                   	push   edi
c0026530:	56                   	push   esi
c0026531:	53                   	push   ebx
c0026532:	83 ec 0c             	sub    esp,0xc
c0026535:	83 ec 0c             	sub    esp,0xc
c0026538:	68 1f de 02 c0       	push   0xc002de1f
c002653d:	e8 4d c9 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0026542:	83 c4 10             	add    esp,0x10
c0026545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026548:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002654b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026554:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002655a:	8b 14 85 e0 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce520]
c0026561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026564:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002656a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002656d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026573:	8b 14 85 60 1b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce4a0]
c002657a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002657d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026586:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002658c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002658f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026595:	0f b6 f8             	movzx  edi,al
c0026598:	89 d0                	mov    eax,edx
c002659a:	ba 00 00 00 00       	mov    edx,0x0
c002659f:	89 c1                	mov    ecx,eax
c00265a1:	80 e5 ff             	and    ch,0xff
c00265a4:	89 cb                	mov    ebx,ecx
c00265a6:	0f b6 f2             	movzx  esi,dl
c00265a9:	89 d8                	mov    eax,ebx
c00265ab:	89 f2                	mov    edx,esi
c00265ad:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00265b0:	8d 5f 08             	lea    ebx,[edi+0x8]
c00265b3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00265b7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00265bb:	83 e0 00             	and    eax,0x0
c00265be:	09 d0                	or     eax,edx
c00265c0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00265c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265c7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00265cd:	8d 50 01             	lea    edx,[eax+0x1]
c00265d0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00265d3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00265d9:	0f b6 d0             	movzx  edx,al
c00265dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265df:	83 c2 08             	add    edx,0x8
c00265e2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00265e6:	0f b6 c9             	movzx  ecx,cl
c00265e9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00265ef:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00265f3:	83 ec 08             	sub    esp,0x8
c00265f6:	6a 01                	push   0x1
c00265f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265fb:	e8 04 ff ff ff       	call   c0026504 <IOAPIC::read(int)>
c0026600:	83 c4 10             	add    esp,0x10
c0026603:	c1 f8 10             	sar    eax,0x10
c0026606:	0f b6 c0             	movzx  eax,al
c0026609:	8d 50 01             	lea    edx,[eax+0x1]
c002660c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002660f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026615:	b8 00 00 00 00       	mov    eax,0x0
c002661a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002661d:	5b                   	pop    ebx
c002661e:	5e                   	pop    esi
c002661f:	5f                   	pop    edi
c0026620:	5d                   	pop    ebp
c0026621:	c3                   	ret    

c0026622 <IOAPIC::write(int, int)>:
c0026622:	55                   	push   ebp
c0026623:	89 e5                	mov    ebp,esp
c0026625:	83 ec 10             	sub    esp,0x10
c0026628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002662b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026631:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026634:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026637:	0f b6 d0             	movzx  edx,al
c002663a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002663d:	89 10                	mov    DWORD PTR [eax],edx
c002663f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026642:	8d 50 10             	lea    edx,[eax+0x10]
c0026645:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026648:	89 02                	mov    DWORD PTR [edx],eax
c002664a:	90                   	nop
c002664b:	c9                   	leave  
c002664c:	c3                   	ret    
c002664d:	90                   	nop

c002664e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002664e:	55                   	push   ebp
c002664f:	89 e5                	mov    ebp,esp
c0026651:	53                   	push   ebx
c0026652:	83 ec 2c             	sub    esp,0x2c
c0026655:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026658:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002665b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002665e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0026661:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026664:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026667:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002666a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002666d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026670:	88 d8                	mov    al,bl
c0026672:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026675:	88 c8                	mov    al,cl
c0026677:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002667a:	88 d0                	mov    al,dl
c002667c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002667f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026683:	83 c0 08             	add    eax,0x8
c0026686:	01 c0                	add    eax,eax
c0026688:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002668b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002668f:	83 c0 08             	add    eax,0x8
c0026692:	01 c0                	add    eax,eax
c0026694:	40                   	inc    eax
c0026695:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026698:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002669b:	50                   	push   eax
c002669c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002669f:	e8 60 fe ff ff       	call   c0026504 <IOAPIC::read(int)>
c00266a4:	83 c4 08             	add    esp,0x8
c00266a7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00266aa:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00266b1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00266b4:	c1 e0 18             	shl    eax,0x18
c00266b7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00266ba:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00266bd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00266c0:	52                   	push   edx
c00266c1:	50                   	push   eax
c00266c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266c5:	e8 58 ff ff ff       	call   c0026622 <IOAPIC::write(int, int)>
c00266ca:	83 c4 0c             	add    esp,0xc
c00266cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00266d0:	50                   	push   eax
c00266d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266d4:	e8 2b fe ff ff       	call   c0026504 <IOAPIC::read(int)>
c00266d9:	83 c4 08             	add    esp,0x8
c00266dc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00266df:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00266e6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00266ed:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00266f4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00266f8:	74 09                	je     c0026703 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00266fa:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026701:	eb 07                	jmp    c002670a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026703:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002670a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002670e:	74 09                	je     c0026719 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026710:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026717:	eb 07                	jmp    c0026720 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026719:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026720:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026727:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002672b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002672e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026731:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026734:	52                   	push   edx
c0026735:	50                   	push   eax
c0026736:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026739:	e8 e4 fe ff ff       	call   c0026622 <IOAPIC::write(int, int)>
c002673e:	83 c4 0c             	add    esp,0xc
c0026741:	90                   	nop
c0026742:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026745:	c9                   	leave  
c0026746:	c3                   	ret    
c0026747:	90                   	nop

c0026748 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0026748:	55                   	push   ebp
c0026749:	89 e5                	mov    ebp,esp
c002674b:	57                   	push   edi
c002674c:	56                   	push   esi
c002674d:	53                   	push   ebx
c002674e:	83 ec 2c             	sub    esp,0x2c
c0026751:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026754:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026757:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002675b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002675f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026763:	74 5a                	je     c00267bf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026765:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0026769:	7f 44                	jg     c00267af <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002676b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002676e:	05 60 e3 02 c0       	add    eax,0xc002e360
c0026773:	8a 00                	mov    al,BYTE PTR [eax]
c0026775:	0f b6 c0             	movzx  eax,al
c0026778:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002677b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002677e:	66 8b 84 00 80 1a 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce580]
c0026786:	0f b7 c0             	movzx  eax,ax
c0026789:	83 e0 02             	and    eax,0x2
c002678c:	85 c0                	test   eax,eax
c002678e:	74 04                	je     c0026794 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026790:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026794:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026797:	66 8b 84 00 80 1a 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce580]
c002679f:	0f b7 c0             	movzx  eax,ax
c00267a2:	83 e0 08             	and    eax,0x8
c00267a5:	85 c0                	test   eax,eax
c00267a7:	74 16                	je     c00267bf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00267a9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00267ad:	eb 10                	jmp    c00267bf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00267af:	83 ec 0c             	sub    esp,0xc
c00267b2:	68 30 de 02 c0       	push   0xc002de30
c00267b7:	e8 3b 41 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00267bc:	83 c4 10             	add    esp,0x10
c00267bf:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00267c3:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c00267c8:	83 ec 08             	sub    esp,0x8
c00267cb:	50                   	push   eax
c00267cc:	68 68 de 02 c0       	push   0xc002de68
c00267d1:	e8 b9 c6 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00267d6:	83 c4 10             	add    esp,0x10
c00267d9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00267e0:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c00267e5:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00267e8:	7d 67                	jge    c0026851 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00267ea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00267ed:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c00267f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00267f7:	83 ec 08             	sub    esp,0x8
c00267fa:	52                   	push   edx
c00267fb:	50                   	push   eax
c00267fc:	e8 d1 fc ff ff       	call   c00264d2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026801:	83 c4 10             	add    esp,0x10
c0026804:	84 c0                	test   al,al
c0026806:	74 44                	je     c002684c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026808:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002680b:	8b 1c 85 a0 34 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccb60]
c0026812:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026816:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026819:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002681d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026820:	83 c0 20             	add    eax,0x20
c0026823:	0f b6 f0             	movzx  esi,al
c0026826:	b8 00 00 00 00       	mov    eax,0x0
c002682b:	99                   	cdq    
c002682c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002682f:	0f b6 c9             	movzx  ecx,cl
c0026832:	83 ec 04             	sub    esp,0x4
c0026835:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026838:	57                   	push   edi
c0026839:	56                   	push   esi
c002683a:	52                   	push   edx
c002683b:	50                   	push   eax
c002683c:	51                   	push   ecx
c002683d:	53                   	push   ebx
c002683e:	e8 0b fe ff ff       	call   c002664e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026843:	83 c4 20             	add    esp,0x20
c0026846:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002684a:	eb 05                	jmp    c0026851 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002684c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002684f:	eb 8f                	jmp    c00267e0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026851:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026854:	83 f0 01             	xor    eax,0x1
c0026857:	84 c0                	test   al,al
c0026859:	74 10                	je     c002686b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002685b:	83 ec 0c             	sub    esp,0xc
c002685e:	68 7f de 02 c0       	push   0xc002de7f
c0026863:	e8 8f 40 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0026868:	83 c4 10             	add    esp,0x10
c002686b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002686f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026876:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002687a:	7f 65                	jg     c00268e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002687c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002687f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026882:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026889:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002688c:	01 ca                	add    edx,ecx
c002688e:	83 c2 54             	add    edx,0x54
c0026891:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026895:	85 c0                	test   eax,eax
c0026897:	75 43                	jne    c00268dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002689c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002689f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00268a6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00268a9:	01 ca                	add    edx,ecx
c00268ab:	8d 4a 54             	lea    ecx,[edx+0x54]
c00268ae:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00268b1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00268b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00268b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00268bb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00268c2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00268c5:	01 ca                	add    edx,ecx
c00268c7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00268cd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00268d0:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00268d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268d7:	83 e8 20             	sub    eax,0x20
c00268da:	eb 1a                	jmp    c00268f6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00268dc:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00268df:	eb 95                	jmp    c0026876 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00268e1:	83 ec 0c             	sub    esp,0xc
c00268e4:	68 8c de 02 c0       	push   0xc002de8c
c00268e9:	e8 09 40 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00268ee:	83 c4 10             	add    esp,0x10
c00268f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00268f6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00268f9:	5b                   	pop    ebx
c00268fa:	5e                   	pop    esi
c00268fb:	5f                   	pop    edi
c00268fc:	5d                   	pop    ebp
c00268fd:	c3                   	ret    

c00268fe <PIC::disable()>:
c00268fe:	55                   	push   ebp
c00268ff:	89 e5                	mov    ebp,esp
c0026901:	83 ec 10             	sub    esp,0x10
c0026904:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002690a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002690e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026911:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026915:	ee                   	out    dx,al
c0026916:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002691c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026920:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026923:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026927:	ee                   	out    dx,al
c0026928:	90                   	nop
c0026929:	c9                   	leave  
c002692a:	c3                   	ret    
c002692b:	90                   	nop

c002692c <PIC::close(int, int, void*)>:
c002692c:	55                   	push   ebp
c002692d:	89 e5                	mov    ebp,esp
c002692f:	83 ec 08             	sub    esp,0x8
c0026932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026935:	8b 00                	mov    eax,DWORD PTR [eax]
c0026937:	83 c0 3c             	add    eax,0x3c
c002693a:	8b 00                	mov    eax,DWORD PTR [eax]
c002693c:	83 ec 0c             	sub    esp,0xc
c002693f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026942:	ff d0                	call   eax
c0026944:	83 c4 10             	add    esp,0x10
c0026947:	b8 00 00 00 00       	mov    eax,0x0
c002694c:	c9                   	leave  
c002694d:	c3                   	ret    

c002694e <PIC::PIC()>:
c002694e:	83 ec 0c             	sub    esp,0xc
c0026951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026955:	83 ec 08             	sub    esp,0x8
c0026958:	68 38 df 02 c0       	push   0xc002df38
c002695d:	50                   	push   eax
c002695e:	e8 c1 e2 fe ff       	call   c0014c24 <InterruptController::InterruptController(char const*)>
c0026963:	83 c4 10             	add    esp,0x10
c0026966:	ba 64 df 02 c0       	mov    edx,0xc002df64
c002696b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002696f:	89 10                	mov    DWORD PTR [eax],edx
c0026971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026975:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002697b:	0f b6 d0             	movzx  edx,al
c002697e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026982:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002698d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026993:	0f b6 d0             	movzx  edx,al
c0026996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002699a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002699f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269a9:	8d 50 01             	lea    edx,[eax+0x1]
c00269ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00269b0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00269b6:	0f b6 d0             	movzx  edx,al
c00269b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269bd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00269c1:	83 e1 3f             	and    ecx,0x3f
c00269c4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00269c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269d2:	0f b6 d0             	movzx  edx,al
c00269d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269d9:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00269e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269e4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269ea:	0f b6 d0             	movzx  edx,al
c00269ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269f1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00269f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269fa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026a00:	8d 50 01             	lea    edx,[eax+0x1]
c0026a03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026a07:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026a0d:	0f b6 d0             	movzx  edx,al
c0026a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a14:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026a18:	83 e1 3f             	and    ecx,0x3f
c0026a1b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026a1f:	90                   	nop
c0026a20:	83 c4 0c             	add    esp,0xc
c0026a23:	c3                   	ret    

c0026a24 <PIC::ioWait()>:
c0026a24:	eb 00                	jmp    c0026a26 <PIC::ioWait()+0x2>
c0026a26:	eb 00                	jmp    c0026a28 <PIC::ioWait()+0x4>
c0026a28:	90                   	nop
c0026a29:	c3                   	ret    

c0026a2a <PIC::getIRQReg(int)>:
c0026a2a:	55                   	push   ebp
c0026a2b:	89 e5                	mov    ebp,esp
c0026a2d:	83 ec 10             	sub    esp,0x10
c0026a30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a33:	0f b6 c0             	movzx  eax,al
c0026a36:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026a3c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026a3f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026a42:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a46:	ee                   	out    dx,al
c0026a47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a4a:	0f b6 c0             	movzx  eax,al
c0026a4d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026a53:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026a56:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a59:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a5d:	ee                   	out    dx,al
c0026a5e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026a64:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026a68:	89 c2                	mov    edx,eax
c0026a6a:	ec                   	in     al,dx
c0026a6b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026a6e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026a71:	0f b6 c0             	movzx  eax,al
c0026a74:	c1 e0 08             	shl    eax,0x8
c0026a77:	89 c1                	mov    ecx,eax
c0026a79:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026a7f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026a83:	89 c2                	mov    edx,eax
c0026a85:	ec                   	in     al,dx
c0026a86:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026a89:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026a8c:	0f b6 c0             	movzx  eax,al
c0026a8f:	09 c8                	or     eax,ecx
c0026a91:	c9                   	leave  
c0026a92:	c3                   	ret    
c0026a93:	90                   	nop

c0026a94 <PIC::eoi(unsigned char)>:
c0026a94:	55                   	push   ebp
c0026a95:	89 e5                	mov    ebp,esp
c0026a97:	83 ec 14             	sub    esp,0x14
c0026a9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a9d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026aa0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026aa4:	75 1e                	jne    c0026ac4 <PIC::eoi(unsigned char)+0x30>
c0026aa6:	6a 0b                	push   0xb
c0026aa8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026aab:	e8 7a ff ff ff       	call   c0026a2a <PIC::getIRQReg(int)>
c0026ab0:	83 c4 08             	add    esp,0x8
c0026ab3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026ab7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026abb:	25 80 00 00 00       	and    eax,0x80
c0026ac0:	85 c0                	test   eax,eax
c0026ac2:	74 5f                	je     c0026b23 <PIC::eoi(unsigned char)+0x8f>
c0026ac4:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026ac8:	75 2d                	jne    c0026af7 <PIC::eoi(unsigned char)+0x63>
c0026aca:	6a 0b                	push   0xb
c0026acc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026acf:	e8 56 ff ff ff       	call   c0026a2a <PIC::getIRQReg(int)>
c0026ad4:	83 c4 08             	add    esp,0x8
c0026ad7:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026adb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026ade:	66 85 c0             	test   ax,ax
c0026ae1:	78 14                	js     c0026af7 <PIC::eoi(unsigned char)+0x63>
c0026ae3:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026ae9:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026aed:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026af0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026af4:	ee                   	out    dx,al
c0026af5:	eb 2d                	jmp    c0026b24 <PIC::eoi(unsigned char)+0x90>
c0026af7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026afb:	76 12                	jbe    c0026b0f <PIC::eoi(unsigned char)+0x7b>
c0026afd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026b03:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026b07:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026b0a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026b0e:	ee                   	out    dx,al
c0026b0f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026b15:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026b19:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026b1c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026b20:	ee                   	out    dx,al
c0026b21:	eb 01                	jmp    c0026b24 <PIC::eoi(unsigned char)+0x90>
c0026b23:	90                   	nop
c0026b24:	c9                   	leave  
c0026b25:	c3                   	ret    

c0026b26 <PIC::remap()>:
c0026b26:	55                   	push   ebp
c0026b27:	89 e5                	mov    ebp,esp
c0026b29:	83 ec 48             	sub    esp,0x48
c0026b2c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026b33:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026b3a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026b40:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026b43:	89 c2                	mov    edx,eax
c0026b45:	ec                   	in     al,dx
c0026b46:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026b49:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026b4c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026b4f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026b55:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026b58:	89 c2                	mov    edx,eax
c0026b5a:	ec                   	in     al,dx
c0026b5b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026b5e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026b61:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026b64:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026b6a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026b6e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026b71:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026b74:	ee                   	out    dx,al
c0026b75:	83 ec 0c             	sub    esp,0xc
c0026b78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b7b:	e8 a4 fe ff ff       	call   c0026a24 <PIC::ioWait()>
c0026b80:	83 c4 10             	add    esp,0x10
c0026b83:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026b89:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026b8d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026b90:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026b93:	ee                   	out    dx,al
c0026b94:	83 ec 0c             	sub    esp,0xc
c0026b97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b9a:	e8 85 fe ff ff       	call   c0026a24 <PIC::ioWait()>
c0026b9f:	83 c4 10             	add    esp,0x10
c0026ba2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026ba5:	0f b6 c0             	movzx  eax,al
c0026ba8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026bae:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026bb1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026bb4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026bb7:	ee                   	out    dx,al
c0026bb8:	83 ec 0c             	sub    esp,0xc
c0026bbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bbe:	e8 61 fe ff ff       	call   c0026a24 <PIC::ioWait()>
c0026bc3:	83 c4 10             	add    esp,0x10
c0026bc6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bc9:	0f b6 c0             	movzx  eax,al
c0026bcc:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026bd2:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026bd5:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026bd8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026bdb:	ee                   	out    dx,al
c0026bdc:	83 ec 0c             	sub    esp,0xc
c0026bdf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026be2:	e8 3d fe ff ff       	call   c0026a24 <PIC::ioWait()>
c0026be7:	83 c4 10             	add    esp,0x10
c0026bea:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026bf0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026bf4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026bf7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026bfa:	ee                   	out    dx,al
c0026bfb:	83 ec 0c             	sub    esp,0xc
c0026bfe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c01:	e8 1e fe ff ff       	call   c0026a24 <PIC::ioWait()>
c0026c06:	83 c4 10             	add    esp,0x10
c0026c09:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026c0f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026c13:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026c16:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026c19:	ee                   	out    dx,al
c0026c1a:	83 ec 0c             	sub    esp,0xc
c0026c1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c20:	e8 ff fd ff ff       	call   c0026a24 <PIC::ioWait()>
c0026c25:	83 c4 10             	add    esp,0x10
c0026c28:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026c2e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026c32:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026c35:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026c38:	ee                   	out    dx,al
c0026c39:	83 ec 0c             	sub    esp,0xc
c0026c3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c3f:	e8 e0 fd ff ff       	call   c0026a24 <PIC::ioWait()>
c0026c44:	83 c4 10             	add    esp,0x10
c0026c47:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026c4d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026c51:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026c54:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c57:	ee                   	out    dx,al
c0026c58:	83 ec 0c             	sub    esp,0xc
c0026c5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c5e:	e8 c1 fd ff ff       	call   c0026a24 <PIC::ioWait()>
c0026c63:	83 c4 10             	add    esp,0x10
c0026c66:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026c6a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026c70:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026c73:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026c76:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026c79:	ee                   	out    dx,al
c0026c7a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026c7e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026c84:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026c87:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026c8a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026c8d:	ee                   	out    dx,al
c0026c8e:	90                   	nop
c0026c8f:	c9                   	leave  
c0026c90:	c3                   	ret    
c0026c91:	90                   	nop

c0026c92 <PIC::open(int, int, void*)>:
c0026c92:	55                   	push   ebp
c0026c93:	89 e5                	mov    ebp,esp
c0026c95:	83 ec 18             	sub    esp,0x18
c0026c98:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026c9e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026ca2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026ca5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026ca9:	ee                   	out    dx,al
c0026caa:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026cb0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026cb4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026cb7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026cbb:	ee                   	out    dx,al
c0026cbc:	83 ec 0c             	sub    esp,0xc
c0026cbf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026cc2:	e8 5f fe ff ff       	call   c0026b26 <PIC::remap()>
c0026cc7:	83 c4 10             	add    esp,0x10
c0026cca:	b8 00 00 00 00       	mov    eax,0x0
c0026ccf:	c9                   	leave  
c0026cd0:	c3                   	ret    
c0026cd1:	90                   	nop

c0026cd2 <APICTimer::close(int, int, void*)>:
c0026cd2:	b8 00 00 00 00       	mov    eax,0x0
c0026cd7:	c3                   	ret    

c0026cd8 <apicTimerHandler(regs*, void*)>:
c0026cd8:	83 ec 0c             	sub    esp,0xc
c0026cdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ce1:	99                   	cdq    
c0026ce2:	52                   	push   edx
c0026ce3:	50                   	push   eax
c0026ce4:	6a 00                	push   0x0
c0026ce6:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026ceb:	e8 94 07 00 00       	call   c0027484 <__udivdi3>
c0026cf0:	83 c4 10             	add    esp,0x10
c0026cf3:	83 ec 08             	sub    esp,0x8
c0026cf6:	52                   	push   edx
c0026cf7:	50                   	push   eax
c0026cf8:	e8 dc 00 ff ff       	call   c0016dd9 <timerHandler(unsigned long long)>
c0026cfd:	83 c4 10             	add    esp,0x10
c0026d00:	90                   	nop
c0026d01:	83 c4 0c             	add    esp,0xc
c0026d04:	c3                   	ret    
c0026d05:	90                   	nop

c0026d06 <APICTimer::write(int)>:
c0026d06:	53                   	push   ebx
c0026d07:	83 ec 28             	sub    esp,0x28
c0026d0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026d0e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026d12:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026d18:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0026d1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026d23:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026d29:	83 ec 0c             	sub    esp,0xc
c0026d2c:	50                   	push   eax
c0026d2d:	e8 de f4 ff ff       	call   c0026210 <APIC::getBase()>
c0026d32:	83 c4 10             	add    esp,0x10
c0026d35:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026d39:	a1 90 f7 02 c0       	mov    eax,ds:0xc002f790
c0026d3e:	8b 15 94 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f794
c0026d44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026d48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d50:	05 e0 03 00 00       	add    eax,0x3e0
c0026d55:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026d5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d5f:	05 80 03 00 00       	add    eax,0x380
c0026d64:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026d6a:	fb                   	sti    
c0026d6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026d73:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026d78:	83 d2 00             	adc    edx,0x0
c0026d7b:	89 c1                	mov    ecx,eax
c0026d7d:	89 d3                	mov    ebx,edx
c0026d7f:	a1 90 f7 02 c0       	mov    eax,ds:0xc002f790
c0026d84:	8b 15 94 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f794
c0026d8a:	39 c8                	cmp    eax,ecx
c0026d8c:	89 d0                	mov    eax,edx
c0026d8e:	19 d8                	sbb    eax,ebx
c0026d90:	73 02                	jae    c0026d94 <APICTimer::write(int)+0x8e>
c0026d92:	eb d7                	jmp    c0026d6b <APICTimer::write(int)+0x65>
c0026d94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d98:	05 20 03 00 00       	add    eax,0x320
c0026d9d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026da3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026da7:	05 90 03 00 00       	add    eax,0x390
c0026dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0026dae:	f7 d0                	not    eax
c0026db0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026db4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026db8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026dbc:	ba 00 00 00 00       	mov    edx,0x0
c0026dc1:	f7 f3                	div    ebx
c0026dc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026dcb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026dd1:	0d 00 00 02 00       	or     eax,0x20000
c0026dd6:	89 c2                	mov    edx,eax
c0026dd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ddc:	05 20 03 00 00       	add    eax,0x320
c0026de1:	89 10                	mov    DWORD PTR [eax],edx
c0026de3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026de7:	05 e0 03 00 00       	add    eax,0x3e0
c0026dec:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026df2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026df6:	05 80 03 00 00       	add    eax,0x380
c0026dfb:	89 c2                	mov    edx,eax
c0026dfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026e01:	89 02                	mov    DWORD PTR [edx],eax
c0026e03:	90                   	nop
c0026e04:	83 c4 28             	add    esp,0x28
c0026e07:	5b                   	pop    ebx
c0026e08:	c3                   	ret    
c0026e09:	90                   	nop

c0026e0a <APICTimer::open(int, int, void*)>:
c0026e0a:	57                   	push   edi
c0026e0b:	56                   	push   esi
c0026e0c:	53                   	push   ebx
c0026e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e11:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e13:	83 c0 24             	add    eax,0x24
c0026e16:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e18:	83 ec 08             	sub    esp,0x8
c0026e1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e23:	ff d0                	call   eax
c0026e25:	83 c4 10             	add    esp,0x10
c0026e28:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0026e2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026e33:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026e39:	83 ec 0c             	sub    esp,0xc
c0026e3c:	50                   	push   eax
c0026e3d:	e8 ce f3 ff ff       	call   c0026210 <APIC::getBase()>
c0026e42:	83 c4 10             	add    esp,0x10
c0026e45:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e4f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026e55:	0f b6 f8             	movzx  edi,al
c0026e58:	89 d0                	mov    eax,edx
c0026e5a:	ba 00 00 00 00       	mov    edx,0x0
c0026e5f:	89 c1                	mov    ecx,eax
c0026e61:	80 e5 ff             	and    ch,0xff
c0026e64:	89 cb                	mov    ebx,ecx
c0026e66:	0f b6 f2             	movzx  esi,dl
c0026e69:	89 d8                	mov    eax,ebx
c0026e6b:	89 f2                	mov    edx,esi
c0026e6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e71:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026e74:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026e78:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026e7c:	83 e0 00             	and    eax,0x0
c0026e7f:	09 d0                	or     eax,edx
c0026e81:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026e85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e89:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026e8f:	8d 50 01             	lea    edx,[eax+0x1]
c0026e92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e96:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026e9c:	0f b6 d0             	movzx  edx,al
c0026e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ea3:	83 c2 08             	add    edx,0x8
c0026ea6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026eaa:	0f b6 c9             	movzx  ecx,cl
c0026ead:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026eb3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ebb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026ebf:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ec9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026ecd:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026ed3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026ed7:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026edd:	83 ec 0c             	sub    esp,0xc
c0026ee0:	51                   	push   ecx
c0026ee1:	6a 01                	push   0x1
c0026ee3:	68 d8 6c 02 c0       	push   0xc0026cd8
c0026ee8:	52                   	push   edx
c0026ee9:	50                   	push   eax
c0026eea:	e8 4f d3 fe ff       	call   c001423e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026eef:	83 c4 20             	add    esp,0x20
c0026ef2:	89 c2                	mov    edx,eax
c0026ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ef8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026efe:	b8 00 00 00 00       	mov    eax,0x0
c0026f03:	5b                   	pop    ebx
c0026f04:	5e                   	pop    esi
c0026f05:	5f                   	pop    edi
c0026f06:	c3                   	ret    
c0026f07:	90                   	nop

c0026f08 <APICTimer::APICTimer()>:
c0026f08:	83 ec 0c             	sub    esp,0xc
c0026f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f0f:	83 ec 08             	sub    esp,0x8
c0026f12:	68 a4 df 02 c0       	push   0xc002dfa4
c0026f17:	50                   	push   eax
c0026f18:	e8 2d fe fe ff       	call   c0016d4a <Timer::Timer(char const*)>
c0026f1d:	83 c4 10             	add    esp,0x10
c0026f20:	ba b8 df 02 c0       	mov    edx,0xc002dfb8
c0026f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f29:	89 10                	mov    DWORD PTR [eax],edx
c0026f2b:	90                   	nop
c0026f2c:	83 c4 0c             	add    esp,0xc
c0026f2f:	c3                   	ret    

c0026f30 <PIT::write(int)>:
c0026f30:	83 ec 10             	sub    esp,0x10
c0026f33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026f37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026f3b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026f41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026f45:	a3 c4 34 03 c0       	mov    ds:0xc00334c4,eax
c0026f4a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026f4f:	99                   	cdq    
c0026f50:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026f54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026f58:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026f5f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026f64:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026f68:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026f6d:	ee                   	out    dx,al
c0026f6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026f72:	0f b6 c0             	movzx  eax,al
c0026f75:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026f7c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026f80:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026f84:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026f89:	ee                   	out    dx,al
c0026f8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026f8e:	c1 f8 08             	sar    eax,0x8
c0026f91:	0f b6 c0             	movzx  eax,al
c0026f94:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026f9b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026f9f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026fa3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026fa8:	ee                   	out    dx,al
c0026fa9:	90                   	nop
c0026faa:	83 c4 10             	add    esp,0x10
c0026fad:	c3                   	ret    

c0026fae <pitHandler(regs*, void*)>:
c0026fae:	83 ec 0c             	sub    esp,0xc
c0026fb1:	a1 c4 34 03 c0       	mov    eax,ds:0xc00334c4
c0026fb6:	99                   	cdq    
c0026fb7:	52                   	push   edx
c0026fb8:	50                   	push   eax
c0026fb9:	6a 00                	push   0x0
c0026fbb:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026fc0:	e8 bf 04 00 00       	call   c0027484 <__udivdi3>
c0026fc5:	83 c4 10             	add    esp,0x10
c0026fc8:	83 ec 08             	sub    esp,0x8
c0026fcb:	52                   	push   edx
c0026fcc:	50                   	push   eax
c0026fcd:	e8 07 fe fe ff       	call   c0016dd9 <timerHandler(unsigned long long)>
c0026fd2:	83 c4 10             	add    esp,0x10
c0026fd5:	90                   	nop
c0026fd6:	83 c4 0c             	add    esp,0xc
c0026fd9:	c3                   	ret    

c0026fda <PIT::open(int, int, void*)>:
c0026fda:	83 ec 0c             	sub    esp,0xc
c0026fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fe1:	8b 00                	mov    eax,DWORD PTR [eax]
c0026fe3:	83 c0 24             	add    eax,0x24
c0026fe6:	8b 00                	mov    eax,DWORD PTR [eax]
c0026fe8:	83 ec 08             	sub    esp,0x8
c0026feb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ff3:	ff d0                	call   eax
c0026ff5:	83 c4 10             	add    esp,0x10
c0026ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ffc:	83 ec 0c             	sub    esp,0xc
c0026fff:	6a 00                	push   0x0
c0027001:	6a 01                	push   0x1
c0027003:	68 ae 6f 02 c0       	push   0xc0026fae
c0027008:	6a 00                	push   0x0
c002700a:	50                   	push   eax
c002700b:	e8 2e d2 fe ff       	call   c001423e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027010:	83 c4 20             	add    esp,0x20
c0027013:	89 c2                	mov    edx,eax
c0027015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027019:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002701f:	b8 00 00 00 00       	mov    eax,0x0
c0027024:	83 c4 0c             	add    esp,0xc
c0027027:	c3                   	ret    

c0027028 <PIT::close(int, int, void*)>:
c0027028:	83 ec 0c             	sub    esp,0xc
c002702b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002702f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0027039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002703d:	6a 01                	push   0x1
c002703f:	68 ae 6f 02 c0       	push   0xc0026fae
c0027044:	6a 00                	push   0x0
c0027046:	50                   	push   eax
c0027047:	e8 30 d2 fe ff       	call   c001427c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002704c:	83 c4 10             	add    esp,0x10
c002704f:	b8 00 00 00 00       	mov    eax,0x0
c0027054:	83 c4 0c             	add    esp,0xc
c0027057:	c3                   	ret    

c0027058 <PIT::PIT()>:
c0027058:	83 ec 0c             	sub    esp,0xc
c002705b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002705f:	83 ec 08             	sub    esp,0x8
c0027062:	68 e0 df 02 c0       	push   0xc002dfe0
c0027067:	50                   	push   eax
c0027068:	e8 dd fc fe ff       	call   c0016d4a <Timer::Timer(char const*)>
c002706d:	83 c4 10             	add    esp,0x10
c0027070:	ba 08 e0 02 c0       	mov    edx,0xc002e008
c0027075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027079:	89 10                	mov    DWORD PTR [eax],edx
c002707b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002707f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027085:	0f b6 d0             	movzx  edx,al
c0027088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002708c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0027093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027097:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002709d:	0f b6 d0             	movzx  edx,al
c00270a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270a4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00270a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00270b3:	8d 50 01             	lea    edx,[eax+0x1]
c00270b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00270ba:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00270c0:	0f b6 d0             	movzx  edx,al
c00270c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270c7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00270cb:	83 e1 3f             	and    ecx,0x3f
c00270ce:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00270d2:	90                   	nop
c00270d3:	83 c4 0c             	add    esp,0xc
c00270d6:	c3                   	ret    
c00270d7:	66 90                	xchg   ax,ax
c00270d9:	66 90                	xchg   ax,ax
c00270db:	66 90                	xchg   ax,ax
c00270dd:	66 90                	xchg   ax,ax
c00270df:	90                   	nop

c00270e0 <avxDetect>:
c00270e0:	b8 00 00 00 00       	mov    eax,0x0
c00270e5:	c3                   	ret    

c00270e6 <avxSave>:
c00270e6:	c3                   	ret    

c00270e7 <avxLoad>:
c00270e7:	c3                   	ret    

c00270e8 <avxInit>:
c00270e8:	c3                   	ret    

c00270e9 <avxClose>:
c00270e9:	c3                   	ret    

c00270ea <wouldSheSayYes>:
c00270ea:	c3                   	ret    
c00270eb:	49                   	dec    ecx
c00270ec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00270f0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00270f4:	75 20                	jne    c0027116 <sseDetect.noSSE+0x1>
c00270f6:	4e                   	dec    esi
c00270f7:	79 61                	jns    c002715a <x87Detect+0x14>
c00270f9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00270fe:	66 90                	xchg   ax,ax

c0027100 <absolutelyNoChanceInHell>:
c0027100:	b8 01 00 00 00       	mov    eax,0x1
c0027105:	0f a2                	cpuid  
c0027107:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002710d:	74 06                	je     c0027115 <sseDetect.noSSE>
c002710f:	b8 01 00 00 00       	mov    eax,0x1
c0027114:	c3                   	ret    

c0027115 <sseDetect.noSSE>:
c0027115:	31 c0                	xor    eax,eax
c0027117:	c3                   	ret    

c0027118 <sseSave>:
c0027118:	0f ae 44 24 04       	fxsave [esp+0x4]
c002711d:	c3                   	ret    

c002711e <sseLoad>:
c002711e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0027123:	c3                   	ret    

c0027124 <sseInit>:
c0027124:	e8 49 00 00 00       	call   c0027172 <x87Init>
c0027129:	0f 20 e0             	mov    eax,cr4
c002712c:	66 0d 00 06          	or     ax,0x600
c0027130:	0f 22 e0             	mov    cr4,eax
c0027133:	c3                   	ret    

c0027134 <sseClose>:
c0027134:	c3                   	ret    
c0027135:	66 90                	xchg   ax,ax
c0027137:	66 90                	xchg   ax,ax
c0027139:	66 90                	xchg   ax,ax
c002713b:	66 90                	xchg   ax,ax
c002713d:	66 90                	xchg   ax,ax
c002713f:	90                   	nop

c0027140 <value_37F>:
c0027140:	7f 03                	jg     c0027145 <value_37A+0x1>

c0027142 <value_37E>:
c0027142:	7e 03                	jle    c0027147 <x87Detect+0x1>

c0027144 <value_37A>:
c0027144:	7a 03                	jp     c0027149 <x87Detect+0x3>

c0027146 <x87Detect>:
c0027146:	b8 01 00 00 00       	mov    eax,0x1
c002714b:	0f a2                	cpuid  
c002714d:	f7 c2 01 00 00 00    	test   edx,0x1
c0027153:	74 06                	je     c002715b <x87Detect.nox87>
c0027155:	b8 01 00 00 00       	mov    eax,0x1
c002715a:	c3                   	ret    

c002715b <x87Detect.nox87>:
c002715b:	b8 00 00 00 00       	mov    eax,0x0
c0027160:	c3                   	ret    

c0027161 <x87Save>:
c0027161:	55                   	push   ebp
c0027162:	89 e5                	mov    ebp,esp
c0027164:	9b dd 75 08          	fsave  [ebp+0x8]
c0027168:	c9                   	leave  
c0027169:	c3                   	ret    

c002716a <x87Load>:
c002716a:	55                   	push   ebp
c002716b:	89 e5                	mov    ebp,esp
c002716d:	dd 65 08             	frstor [ebp+0x8]
c0027170:	c9                   	leave  
c0027171:	c3                   	ret    

c0027172 <x87Init>:
c0027172:	9b db e3             	finit  
c0027175:	0f 20 c0             	mov    eax,cr0
c0027178:	66 25 fb ff          	and    ax,0xfffb
c002717c:	66 0d 22 00          	or     ax,0x22
c0027180:	0f 22 c0             	mov    cr0,eax
c0027183:	0f 06                	clts   
c0027185:	d9 2d 44 71 02 c0    	fldcw  WORD PTR ds:0xc0027144
c002718b:	c3                   	ret    

c002718c <x87Close>:
c002718c:	c3                   	ret    
c002718d:	66 90                	xchg   ax,ax
c002718f:	90                   	nop

c0027190 <__do_global_ctors_aux>:
c0027190:	a1 c8 9d 02 c0       	mov    eax,ds:0xc0029dc8
c0027195:	83 f8 ff             	cmp    eax,0xffffffff
c0027198:	74 1a                	je     c00271b4 <__do_global_ctors_aux+0x24>
c002719a:	55                   	push   ebp
c002719b:	89 e5                	mov    ebp,esp
c002719d:	53                   	push   ebx
c002719e:	52                   	push   edx
c002719f:	bb c8 9d 02 c0       	mov    ebx,0xc0029dc8
c00271a4:	ff d0                	call   eax
c00271a6:	83 eb 04             	sub    ebx,0x4
c00271a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00271ab:	83 f8 ff             	cmp    eax,0xffffffff
c00271ae:	75 f4                	jne    c00271a4 <__do_global_ctors_aux+0x14>
c00271b0:	58                   	pop    eax
c00271b1:	5b                   	pop    ebx
c00271b2:	5d                   	pop    ebp
c00271b3:	c3                   	ret    
c00271b4:	c3                   	ret    
c00271b5:	66 90                	xchg   ax,ax
c00271b7:	90                   	nop

c00271b8 <__divdi3>:
c00271b8:	55                   	push   ebp
c00271b9:	57                   	push   edi
c00271ba:	56                   	push   esi
c00271bb:	53                   	push   ebx
c00271bc:	83 ec 1c             	sub    esp,0x1c
c00271bf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00271c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00271c7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00271ca:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00271ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00271d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00271d6:	85 db                	test   ebx,ebx
c00271d8:	0f 88 8e 00 00 00    	js     c002726c <__divdi3+0xb4>
c00271de:	89 dd                	mov    ebp,ebx
c00271e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00271e8:	89 d3                	mov    ebx,edx
c00271ea:	85 d2                	test   edx,edx
c00271ec:	79 0d                	jns    c00271fb <__divdi3+0x43>
c00271ee:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00271f2:	f7 d8                	neg    eax
c00271f4:	83 d2 00             	adc    edx,0x0
c00271f7:	f7 da                	neg    edx
c00271f9:	89 d3                	mov    ebx,edx
c00271fb:	89 c7                	mov    edi,eax
c00271fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027200:	85 db                	test   ebx,ebx
c0027202:	75 48                	jne    c002724c <__divdi3+0x94>
c0027204:	39 ef                	cmp    edi,ebp
c0027206:	76 24                	jbe    c002722c <__divdi3+0x74>
c0027208:	89 ea                	mov    edx,ebp
c002720a:	f7 f7                	div    edi
c002720c:	89 c1                	mov    ecx,eax
c002720e:	31 f6                	xor    esi,esi
c0027210:	89 c8                	mov    eax,ecx
c0027212:	89 f2                	mov    edx,esi
c0027214:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027218:	85 c9                	test   ecx,ecx
c002721a:	74 07                	je     c0027223 <__divdi3+0x6b>
c002721c:	f7 d8                	neg    eax
c002721e:	83 d2 00             	adc    edx,0x0
c0027221:	f7 da                	neg    edx
c0027223:	83 c4 1c             	add    esp,0x1c
c0027226:	5b                   	pop    ebx
c0027227:	5e                   	pop    esi
c0027228:	5f                   	pop    edi
c0027229:	5d                   	pop    ebp
c002722a:	c3                   	ret    
c002722b:	90                   	nop
c002722c:	85 ff                	test   edi,edi
c002722e:	75 0b                	jne    c002723b <__divdi3+0x83>
c0027230:	b8 01 00 00 00       	mov    eax,0x1
c0027235:	31 d2                	xor    edx,edx
c0027237:	f7 f3                	div    ebx
c0027239:	89 c7                	mov    edi,eax
c002723b:	31 d2                	xor    edx,edx
c002723d:	89 e8                	mov    eax,ebp
c002723f:	f7 f7                	div    edi
c0027241:	89 c6                	mov    esi,eax
c0027243:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027246:	f7 f7                	div    edi
c0027248:	89 c1                	mov    ecx,eax
c002724a:	eb c4                	jmp    c0027210 <__divdi3+0x58>
c002724c:	39 eb                	cmp    ebx,ebp
c002724e:	77 3c                	ja     c002728c <__divdi3+0xd4>
c0027250:	0f bd f3             	bsr    esi,ebx
c0027253:	83 f6 1f             	xor    esi,0x1f
c0027256:	75 40                	jne    c0027298 <__divdi3+0xe0>
c0027258:	39 eb                	cmp    ebx,ebp
c002725a:	72 09                	jb     c0027265 <__divdi3+0xad>
c002725c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002725f:	0f 87 97 00 00 00    	ja     c00272fc <__divdi3+0x144>
c0027265:	b9 01 00 00 00       	mov    ecx,0x1
c002726a:	eb a4                	jmp    c0027210 <__divdi3+0x58>
c002726c:	f7 d9                	neg    ecx
c002726e:	83 d3 00             	adc    ebx,0x0
c0027271:	f7 db                	neg    ebx
c0027273:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0027276:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002727a:	89 dd                	mov    ebp,ebx
c002727c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027284:	e9 5f ff ff ff       	jmp    c00271e8 <__divdi3+0x30>
c0027289:	8d 76 00             	lea    esi,[esi+0x0]
c002728c:	31 f6                	xor    esi,esi
c002728e:	31 c9                	xor    ecx,ecx
c0027290:	e9 7b ff ff ff       	jmp    c0027210 <__divdi3+0x58>
c0027295:	8d 76 00             	lea    esi,[esi+0x0]
c0027298:	b8 20 00 00 00       	mov    eax,0x20
c002729d:	29 f0                	sub    eax,esi
c002729f:	89 f1                	mov    ecx,esi
c00272a1:	d3 e3                	shl    ebx,cl
c00272a3:	89 fa                	mov    edx,edi
c00272a5:	88 c1                	mov    cl,al
c00272a7:	d3 ea                	shr    edx,cl
c00272a9:	09 da                	or     edx,ebx
c00272ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00272af:	89 f1                	mov    ecx,esi
c00272b1:	d3 e7                	shl    edi,cl
c00272b3:	89 eb                	mov    ebx,ebp
c00272b5:	88 c1                	mov    cl,al
c00272b7:	d3 eb                	shr    ebx,cl
c00272b9:	89 f1                	mov    ecx,esi
c00272bb:	d3 e5                	shl    ebp,cl
c00272bd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00272c0:	88 c1                	mov    cl,al
c00272c2:	d3 ea                	shr    edx,cl
c00272c4:	09 d5                	or     ebp,edx
c00272c6:	89 e8                	mov    eax,ebp
c00272c8:	89 da                	mov    edx,ebx
c00272ca:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00272ce:	89 d3                	mov    ebx,edx
c00272d0:	89 c5                	mov    ebp,eax
c00272d2:	f7 e7                	mul    edi
c00272d4:	39 d3                	cmp    ebx,edx
c00272d6:	72 18                	jb     c00272f0 <__divdi3+0x138>
c00272d8:	74 0a                	je     c00272e4 <__divdi3+0x12c>
c00272da:	89 e9                	mov    ecx,ebp
c00272dc:	31 f6                	xor    esi,esi
c00272de:	e9 2d ff ff ff       	jmp    c0027210 <__divdi3+0x58>
c00272e3:	90                   	nop
c00272e4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00272e7:	89 f1                	mov    ecx,esi
c00272e9:	d3 e7                	shl    edi,cl
c00272eb:	39 c7                	cmp    edi,eax
c00272ed:	73 eb                	jae    c00272da <__divdi3+0x122>
c00272ef:	90                   	nop
c00272f0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00272f3:	31 f6                	xor    esi,esi
c00272f5:	e9 16 ff ff ff       	jmp    c0027210 <__divdi3+0x58>
c00272fa:	66 90                	xchg   ax,ax
c00272fc:	31 c9                	xor    ecx,ecx
c00272fe:	e9 0d ff ff ff       	jmp    c0027210 <__divdi3+0x58>
c0027303:	90                   	nop

c0027304 <__moddi3>:
c0027304:	55                   	push   ebp
c0027305:	57                   	push   edi
c0027306:	56                   	push   esi
c0027307:	53                   	push   ebx
c0027308:	83 ec 2c             	sub    esp,0x2c
c002730b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002730f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027313:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027317:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002731b:	85 db                	test   ebx,ebx
c002731d:	0f 88 85 00 00 00    	js     c00273a8 <__moddi3+0xa4>
c0027323:	89 de                	mov    esi,ebx
c0027325:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002732d:	89 d7                	mov    edi,edx
c002732f:	85 d2                	test   edx,edx
c0027331:	79 09                	jns    c002733c <__moddi3+0x38>
c0027333:	f7 d8                	neg    eax
c0027335:	83 d2 00             	adc    edx,0x0
c0027338:	f7 da                	neg    edx
c002733a:	89 d7                	mov    edi,edx
c002733c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027340:	89 cd                	mov    ebp,ecx
c0027342:	85 ff                	test   edi,edi
c0027344:	75 52                	jne    c0027398 <__moddi3+0x94>
c0027346:	89 c3                	mov    ebx,eax
c0027348:	39 f0                	cmp    eax,esi
c002734a:	76 24                	jbe    c0027370 <__moddi3+0x6c>
c002734c:	89 c8                	mov    eax,ecx
c002734e:	89 f2                	mov    edx,esi
c0027350:	f7 f3                	div    ebx
c0027352:	89 d6                	mov    esi,edx
c0027354:	89 f0                	mov    eax,esi
c0027356:	31 d2                	xor    edx,edx
c0027358:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002735c:	85 c9                	test   ecx,ecx
c002735e:	74 07                	je     c0027367 <__moddi3+0x63>
c0027360:	f7 d8                	neg    eax
c0027362:	83 d2 00             	adc    edx,0x0
c0027365:	f7 da                	neg    edx
c0027367:	83 c4 2c             	add    esp,0x2c
c002736a:	5b                   	pop    ebx
c002736b:	5e                   	pop    esi
c002736c:	5f                   	pop    edi
c002736d:	5d                   	pop    ebp
c002736e:	c3                   	ret    
c002736f:	90                   	nop
c0027370:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027374:	85 db                	test   ebx,ebx
c0027376:	75 0d                	jne    c0027385 <__moddi3+0x81>
c0027378:	b8 01 00 00 00       	mov    eax,0x1
c002737d:	31 d2                	xor    edx,edx
c002737f:	f7 f7                	div    edi
c0027381:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027385:	89 f0                	mov    eax,esi
c0027387:	31 d2                	xor    edx,edx
c0027389:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002738d:	f7 f7                	div    edi
c002738f:	89 e8                	mov    eax,ebp
c0027391:	f7 f7                	div    edi
c0027393:	89 d6                	mov    esi,edx
c0027395:	eb bd                	jmp    c0027354 <__moddi3+0x50>
c0027397:	90                   	nop
c0027398:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002739c:	39 f7                	cmp    edi,esi
c002739e:	76 20                	jbe    c00273c0 <__moddi3+0xbc>
c00273a0:	89 c8                	mov    eax,ecx
c00273a2:	89 f2                	mov    edx,esi
c00273a4:	eb b2                	jmp    c0027358 <__moddi3+0x54>
c00273a6:	66 90                	xchg   ax,ax
c00273a8:	f7 d9                	neg    ecx
c00273aa:	83 d3 00             	adc    ebx,0x0
c00273ad:	f7 db                	neg    ebx
c00273af:	89 de                	mov    esi,ebx
c00273b1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00273b9:	e9 6f ff ff ff       	jmp    c002732d <__moddi3+0x29>
c00273be:	66 90                	xchg   ax,ax
c00273c0:	0f bd c7             	bsr    eax,edi
c00273c3:	83 f0 1f             	xor    eax,0x1f
c00273c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00273ca:	75 24                	jne    c00273f0 <__moddi3+0xec>
c00273cc:	39 f7                	cmp    edi,esi
c00273ce:	72 06                	jb     c00273d6 <__moddi3+0xd2>
c00273d0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00273d4:	77 0c                	ja     c00273e2 <__moddi3+0xde>
c00273d6:	89 e9                	mov    ecx,ebp
c00273d8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00273dc:	19 fe                	sbb    esi,edi
c00273de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00273e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00273e6:	89 f2                	mov    edx,esi
c00273e8:	e9 6b ff ff ff       	jmp    c0027358 <__moddi3+0x54>
c00273ed:	8d 76 00             	lea    esi,[esi+0x0]
c00273f0:	b8 20 00 00 00       	mov    eax,0x20
c00273f5:	89 c2                	mov    edx,eax
c00273f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00273fb:	29 da                	sub    edx,ebx
c00273fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027401:	88 d9                	mov    cl,bl
c0027403:	d3 e7                	shl    edi,cl
c0027405:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027409:	88 d1                	mov    cl,dl
c002740b:	d3 e8                	shr    eax,cl
c002740d:	09 c7                	or     edi,eax
c002740f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027413:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027417:	89 d8                	mov    eax,ebx
c0027419:	88 d9                	mov    cl,bl
c002741b:	d3 e7                	shl    edi,cl
c002741d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027421:	89 f3                	mov    ebx,esi
c0027423:	88 d1                	mov    cl,dl
c0027425:	d3 eb                	shr    ebx,cl
c0027427:	89 c7                	mov    edi,eax
c0027429:	88 c1                	mov    cl,al
c002742b:	d3 e6                	shl    esi,cl
c002742d:	89 e8                	mov    eax,ebp
c002742f:	88 d1                	mov    cl,dl
c0027431:	d3 e8                	shr    eax,cl
c0027433:	09 f0                	or     eax,esi
c0027435:	89 f9                	mov    ecx,edi
c0027437:	d3 e5                	shl    ebp,cl
c0027439:	89 da                	mov    edx,ebx
c002743b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002743f:	89 d3                	mov    ebx,edx
c0027441:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027445:	89 c6                	mov    esi,eax
c0027447:	89 d1                	mov    ecx,edx
c0027449:	39 d3                	cmp    ebx,edx
c002744b:	72 27                	jb     c0027474 <__moddi3+0x170>
c002744d:	74 21                	je     c0027470 <__moddi3+0x16c>
c002744f:	29 f5                	sub    ebp,esi
c0027451:	19 cb                	sbb    ebx,ecx
c0027453:	89 de                	mov    esi,ebx
c0027455:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027459:	d3 e6                	shl    esi,cl
c002745b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002745f:	89 f9                	mov    ecx,edi
c0027461:	d3 ed                	shr    ebp,cl
c0027463:	09 ee                	or     esi,ebp
c0027465:	89 f0                	mov    eax,esi
c0027467:	d3 eb                	shr    ebx,cl
c0027469:	89 da                	mov    edx,ebx
c002746b:	e9 e8 fe ff ff       	jmp    c0027358 <__moddi3+0x54>
c0027470:	39 c5                	cmp    ebp,eax
c0027472:	73 db                	jae    c002744f <__moddi3+0x14b>
c0027474:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027478:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002747c:	89 d1                	mov    ecx,edx
c002747e:	89 c6                	mov    esi,eax
c0027480:	eb cd                	jmp    c002744f <__moddi3+0x14b>
c0027482:	66 90                	xchg   ax,ax

c0027484 <__udivdi3>:
c0027484:	55                   	push   ebp
c0027485:	57                   	push   edi
c0027486:	56                   	push   esi
c0027487:	53                   	push   ebx
c0027488:	83 ec 1c             	sub    esp,0x1c
c002748b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002748f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027493:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027497:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002749b:	85 d2                	test   edx,edx
c002749d:	75 41                	jne    c00274e0 <__udivdi3+0x5c>
c002749f:	39 f7                	cmp    edi,esi
c00274a1:	76 15                	jbe    c00274b8 <__udivdi3+0x34>
c00274a3:	89 e8                	mov    eax,ebp
c00274a5:	89 f2                	mov    edx,esi
c00274a7:	f7 f7                	div    edi
c00274a9:	31 db                	xor    ebx,ebx
c00274ab:	89 da                	mov    edx,ebx
c00274ad:	83 c4 1c             	add    esp,0x1c
c00274b0:	5b                   	pop    ebx
c00274b1:	5e                   	pop    esi
c00274b2:	5f                   	pop    edi
c00274b3:	5d                   	pop    ebp
c00274b4:	c3                   	ret    
c00274b5:	8d 76 00             	lea    esi,[esi+0x0]
c00274b8:	89 f9                	mov    ecx,edi
c00274ba:	85 ff                	test   edi,edi
c00274bc:	75 0b                	jne    c00274c9 <__udivdi3+0x45>
c00274be:	b8 01 00 00 00       	mov    eax,0x1
c00274c3:	31 d2                	xor    edx,edx
c00274c5:	f7 f7                	div    edi
c00274c7:	89 c1                	mov    ecx,eax
c00274c9:	31 d2                	xor    edx,edx
c00274cb:	89 f0                	mov    eax,esi
c00274cd:	f7 f1                	div    ecx
c00274cf:	89 c3                	mov    ebx,eax
c00274d1:	89 e8                	mov    eax,ebp
c00274d3:	f7 f1                	div    ecx
c00274d5:	89 da                	mov    edx,ebx
c00274d7:	83 c4 1c             	add    esp,0x1c
c00274da:	5b                   	pop    ebx
c00274db:	5e                   	pop    esi
c00274dc:	5f                   	pop    edi
c00274dd:	5d                   	pop    ebp
c00274de:	c3                   	ret    
c00274df:	90                   	nop
c00274e0:	39 f2                	cmp    edx,esi
c00274e2:	77 1c                	ja     c0027500 <__udivdi3+0x7c>
c00274e4:	0f bd da             	bsr    ebx,edx
c00274e7:	83 f3 1f             	xor    ebx,0x1f
c00274ea:	75 24                	jne    c0027510 <__udivdi3+0x8c>
c00274ec:	39 f2                	cmp    edx,esi
c00274ee:	72 08                	jb     c00274f8 <__udivdi3+0x74>
c00274f0:	39 ef                	cmp    edi,ebp
c00274f2:	0f 87 84 00 00 00    	ja     c002757c <__udivdi3+0xf8>
c00274f8:	b8 01 00 00 00       	mov    eax,0x1
c00274fd:	eb ac                	jmp    c00274ab <__udivdi3+0x27>
c00274ff:	90                   	nop
c0027500:	31 db                	xor    ebx,ebx
c0027502:	31 c0                	xor    eax,eax
c0027504:	89 da                	mov    edx,ebx
c0027506:	83 c4 1c             	add    esp,0x1c
c0027509:	5b                   	pop    ebx
c002750a:	5e                   	pop    esi
c002750b:	5f                   	pop    edi
c002750c:	5d                   	pop    ebp
c002750d:	c3                   	ret    
c002750e:	66 90                	xchg   ax,ax
c0027510:	b8 20 00 00 00       	mov    eax,0x20
c0027515:	29 d8                	sub    eax,ebx
c0027517:	88 d9                	mov    cl,bl
c0027519:	d3 e2                	shl    edx,cl
c002751b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002751f:	89 fa                	mov    edx,edi
c0027521:	88 c1                	mov    cl,al
c0027523:	d3 ea                	shr    edx,cl
c0027525:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027529:	09 d1                	or     ecx,edx
c002752b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002752f:	88 d9                	mov    cl,bl
c0027531:	d3 e7                	shl    edi,cl
c0027533:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027537:	89 f7                	mov    edi,esi
c0027539:	88 c1                	mov    cl,al
c002753b:	d3 ef                	shr    edi,cl
c002753d:	88 d9                	mov    cl,bl
c002753f:	d3 e6                	shl    esi,cl
c0027541:	89 ea                	mov    edx,ebp
c0027543:	88 c1                	mov    cl,al
c0027545:	d3 ea                	shr    edx,cl
c0027547:	09 d6                	or     esi,edx
c0027549:	89 f0                	mov    eax,esi
c002754b:	89 fa                	mov    edx,edi
c002754d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027551:	89 d7                	mov    edi,edx
c0027553:	89 c6                	mov    esi,eax
c0027555:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027559:	39 d7                	cmp    edi,edx
c002755b:	72 13                	jb     c0027570 <__udivdi3+0xec>
c002755d:	74 09                	je     c0027568 <__udivdi3+0xe4>
c002755f:	89 f0                	mov    eax,esi
c0027561:	31 db                	xor    ebx,ebx
c0027563:	e9 43 ff ff ff       	jmp    c00274ab <__udivdi3+0x27>
c0027568:	88 d9                	mov    cl,bl
c002756a:	d3 e5                	shl    ebp,cl
c002756c:	39 c5                	cmp    ebp,eax
c002756e:	73 ef                	jae    c002755f <__udivdi3+0xdb>
c0027570:	8d 46 ff             	lea    eax,[esi-0x1]
c0027573:	31 db                	xor    ebx,ebx
c0027575:	e9 31 ff ff ff       	jmp    c00274ab <__udivdi3+0x27>
c002757a:	66 90                	xchg   ax,ax
c002757c:	31 c0                	xor    eax,eax
c002757e:	e9 28 ff ff ff       	jmp    c00274ab <__udivdi3+0x27>
c0027583:	90                   	nop

c0027584 <__umoddi3>:
c0027584:	55                   	push   ebp
c0027585:	57                   	push   edi
c0027586:	56                   	push   esi
c0027587:	53                   	push   ebx
c0027588:	83 ec 1c             	sub    esp,0x1c
c002758b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002758f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027593:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027597:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002759b:	89 da                	mov    edx,ebx
c002759d:	85 c0                	test   eax,eax
c002759f:	75 37                	jne    c00275d8 <__umoddi3+0x54>
c00275a1:	39 df                	cmp    edi,ebx
c00275a3:	76 13                	jbe    c00275b8 <__umoddi3+0x34>
c00275a5:	89 f0                	mov    eax,esi
c00275a7:	f7 f7                	div    edi
c00275a9:	89 d0                	mov    eax,edx
c00275ab:	31 d2                	xor    edx,edx
c00275ad:	83 c4 1c             	add    esp,0x1c
c00275b0:	5b                   	pop    ebx
c00275b1:	5e                   	pop    esi
c00275b2:	5f                   	pop    edi
c00275b3:	5d                   	pop    ebp
c00275b4:	c3                   	ret    
c00275b5:	8d 76 00             	lea    esi,[esi+0x0]
c00275b8:	89 fd                	mov    ebp,edi
c00275ba:	85 ff                	test   edi,edi
c00275bc:	75 0b                	jne    c00275c9 <__umoddi3+0x45>
c00275be:	b8 01 00 00 00       	mov    eax,0x1
c00275c3:	31 d2                	xor    edx,edx
c00275c5:	f7 f7                	div    edi
c00275c7:	89 c5                	mov    ebp,eax
c00275c9:	89 d8                	mov    eax,ebx
c00275cb:	31 d2                	xor    edx,edx
c00275cd:	f7 f5                	div    ebp
c00275cf:	89 f0                	mov    eax,esi
c00275d1:	f7 f5                	div    ebp
c00275d3:	89 d0                	mov    eax,edx
c00275d5:	eb d4                	jmp    c00275ab <__umoddi3+0x27>
c00275d7:	90                   	nop
c00275d8:	89 f1                	mov    ecx,esi
c00275da:	39 d8                	cmp    eax,ebx
c00275dc:	76 0a                	jbe    c00275e8 <__umoddi3+0x64>
c00275de:	89 f0                	mov    eax,esi
c00275e0:	83 c4 1c             	add    esp,0x1c
c00275e3:	5b                   	pop    ebx
c00275e4:	5e                   	pop    esi
c00275e5:	5f                   	pop    edi
c00275e6:	5d                   	pop    ebp
c00275e7:	c3                   	ret    
c00275e8:	0f bd e8             	bsr    ebp,eax
c00275eb:	83 f5 1f             	xor    ebp,0x1f
c00275ee:	75 1c                	jne    c002760c <__umoddi3+0x88>
c00275f0:	39 d8                	cmp    eax,ebx
c00275f2:	72 04                	jb     c00275f8 <__umoddi3+0x74>
c00275f4:	39 f7                	cmp    edi,esi
c00275f6:	77 08                	ja     c0027600 <__umoddi3+0x7c>
c00275f8:	89 da                	mov    edx,ebx
c00275fa:	29 fe                	sub    esi,edi
c00275fc:	19 c2                	sbb    edx,eax
c00275fe:	89 f1                	mov    ecx,esi
c0027600:	89 c8                	mov    eax,ecx
c0027602:	83 c4 1c             	add    esp,0x1c
c0027605:	5b                   	pop    ebx
c0027606:	5e                   	pop    esi
c0027607:	5f                   	pop    edi
c0027608:	5d                   	pop    ebp
c0027609:	c3                   	ret    
c002760a:	66 90                	xchg   ax,ax
c002760c:	ba 20 00 00 00       	mov    edx,0x20
c0027611:	29 ea                	sub    edx,ebp
c0027613:	89 e9                	mov    ecx,ebp
c0027615:	d3 e0                	shl    eax,cl
c0027617:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002761b:	89 f8                	mov    eax,edi
c002761d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027621:	88 d1                	mov    cl,dl
c0027623:	d3 e8                	shr    eax,cl
c0027625:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027629:	09 c1                	or     ecx,eax
c002762b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002762f:	89 e9                	mov    ecx,ebp
c0027631:	d3 e7                	shl    edi,cl
c0027633:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027637:	89 d8                	mov    eax,ebx
c0027639:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002763d:	88 d1                	mov    cl,dl
c002763f:	d3 e8                	shr    eax,cl
c0027641:	89 c7                	mov    edi,eax
c0027643:	89 e9                	mov    ecx,ebp
c0027645:	d3 e3                	shl    ebx,cl
c0027647:	89 f0                	mov    eax,esi
c0027649:	88 d1                	mov    cl,dl
c002764b:	d3 e8                	shr    eax,cl
c002764d:	09 d8                	or     eax,ebx
c002764f:	89 e9                	mov    ecx,ebp
c0027651:	d3 e6                	shl    esi,cl
c0027653:	89 f3                	mov    ebx,esi
c0027655:	89 fa                	mov    edx,edi
c0027657:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002765b:	89 d1                	mov    ecx,edx
c002765d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027661:	89 c6                	mov    esi,eax
c0027663:	89 d7                	mov    edi,edx
c0027665:	39 d1                	cmp    ecx,edx
c0027667:	72 27                	jb     c0027690 <__umoddi3+0x10c>
c0027669:	74 21                	je     c002768c <__umoddi3+0x108>
c002766b:	89 ca                	mov    edx,ecx
c002766d:	29 f3                	sub    ebx,esi
c002766f:	19 fa                	sbb    edx,edi
c0027671:	89 d0                	mov    eax,edx
c0027673:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027677:	d3 e0                	shl    eax,cl
c0027679:	89 e9                	mov    ecx,ebp
c002767b:	d3 eb                	shr    ebx,cl
c002767d:	09 d8                	or     eax,ebx
c002767f:	d3 ea                	shr    edx,cl
c0027681:	83 c4 1c             	add    esp,0x1c
c0027684:	5b                   	pop    ebx
c0027685:	5e                   	pop    esi
c0027686:	5f                   	pop    edi
c0027687:	5d                   	pop    ebp
c0027688:	c3                   	ret    
c0027689:	8d 76 00             	lea    esi,[esi+0x0]
c002768c:	39 c3                	cmp    ebx,eax
c002768e:	73 db                	jae    c002766b <__umoddi3+0xe7>
c0027690:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027694:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027698:	89 d7                	mov    edi,edx
c002769a:	89 c6                	mov    esi,eax
c002769c:	eb cd                	jmp    c002766b <__umoddi3+0xe7>

c002769e <__addsf3>:
c002769e:	55                   	push   ebp
c002769f:	89 e5                	mov    ebp,esp
c00276a1:	57                   	push   edi
c00276a2:	56                   	push   esi
c00276a3:	53                   	push   ebx
c00276a4:	83 ec 08             	sub    esp,0x8
c00276a7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00276aa:	89 fa                	mov    edx,edi
c00276ac:	89 f8                	mov    eax,edi
c00276ae:	c1 f8 17             	sar    eax,0x17
c00276b1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00276b4:	c1 e2 08             	shl    edx,0x8
c00276b7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00276bd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00276c0:	89 de                	mov    esi,ebx
c00276c2:	c1 fe 17             	sar    esi,0x17
c00276c5:	c1 e3 08             	shl    ebx,0x8
c00276c8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00276ce:	31 f0                	xor    eax,esi
c00276d0:	0f 88 3b 01 00 00    	js     c0027811 <__addsf3+0x173>
c00276d6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00276d9:	29 f1                	sub    ecx,esi
c00276db:	85 c9                	test   ecx,ecx
c00276dd:	7e 54                	jle    c0027733 <__addsf3+0x95>
c00276df:	89 f0                	mov    eax,esi
c00276e1:	84 c0                	test   al,al
c00276e3:	75 10                	jne    c00276f5 <__addsf3+0x57>
c00276e5:	85 db                	test   ebx,ebx
c00276e7:	0f 84 aa 02 00 00    	je     c0027997 <__addsf3+0x2f9>
c00276ed:	49                   	dec    ecx
c00276ee:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00276f1:	74 38                	je     c002772b <__addsf3+0x8d>
c00276f3:	eb 13                	jmp    c0027708 <__addsf3+0x6a>
c00276f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00276f8:	f7 d0                	not    eax
c00276fa:	84 c0                	test   al,al
c00276fc:	0f 84 95 02 00 00    	je     c0027997 <__addsf3+0x2f9>
c0027702:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027708:	83 f9 1f             	cmp    ecx,0x1f
c002770b:	0f 8f 86 02 00 00    	jg     c0027997 <__addsf3+0x2f9>
c0027711:	89 de                	mov    esi,ebx
c0027713:	d3 ee                	shr    esi,cl
c0027715:	b8 20 00 00 00       	mov    eax,0x20
c002771a:	29 c8                	sub    eax,ecx
c002771c:	89 c1                	mov    ecx,eax
c002771e:	d3 e3                	shl    ebx,cl
c0027720:	31 c0                	xor    eax,eax
c0027722:	85 db                	test   ebx,ebx
c0027724:	0f 95 c0             	setne  al
c0027727:	09 f0                	or     eax,esi
c0027729:	01 d0                	add    eax,edx
c002772b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002772e:	e9 b6 00 00 00       	jmp    c00277e9 <__addsf3+0x14b>
c0027733:	74 5c                	je     c0027791 <__addsf3+0xf3>
c0027735:	89 f1                	mov    ecx,esi
c0027737:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002773a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002773d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027741:	75 14                	jne    c0027757 <__addsf3+0xb9>
c0027743:	85 d2                	test   edx,edx
c0027745:	0f 84 4c 02 00 00    	je     c0027997 <__addsf3+0x2f9>
c002774b:	49                   	dec    ecx
c002774c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002774f:	0f 84 94 00 00 00    	je     c00277e9 <__addsf3+0x14b>
c0027755:	eb 12                	jmp    c0027769 <__addsf3+0xcb>
c0027757:	89 f0                	mov    eax,esi
c0027759:	f7 d0                	not    eax
c002775b:	84 c0                	test   al,al
c002775d:	0f 84 34 02 00 00    	je     c0027997 <__addsf3+0x2f9>
c0027763:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027769:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002776c:	83 f9 1f             	cmp    ecx,0x1f
c002776f:	0f 8f 22 02 00 00    	jg     c0027997 <__addsf3+0x2f9>
c0027775:	89 d7                	mov    edi,edx
c0027777:	d3 ef                	shr    edi,cl
c0027779:	b8 20 00 00 00       	mov    eax,0x20
c002777e:	29 c8                	sub    eax,ecx
c0027780:	89 c1                	mov    ecx,eax
c0027782:	d3 e2                	shl    edx,cl
c0027784:	31 c0                	xor    eax,eax
c0027786:	85 d2                	test   edx,edx
c0027788:	0f 95 c0             	setne  al
c002778b:	09 f8                	or     eax,edi
c002778d:	01 d8                	add    eax,ebx
c002778f:	eb 58                	jmp    c00277e9 <__addsf3+0x14b>
c0027791:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027794:	8d 70 01             	lea    esi,[eax+0x1]
c0027797:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002779d:	75 32                	jne    c00277d1 <__addsf3+0x133>
c002779f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00277a3:	75 1f                	jne    c00277c4 <__addsf3+0x126>
c00277a5:	85 d2                	test   edx,edx
c00277a7:	0f 84 e0 01 00 00    	je     c002798d <__addsf3+0x2ef>
c00277ad:	85 db                	test   ebx,ebx
c00277af:	0f 84 e2 01 00 00    	je     c0027997 <__addsf3+0x2f9>
c00277b5:	89 d0                	mov    eax,edx
c00277b7:	01 d8                	add    eax,ebx
c00277b9:	0f 89 a9 01 00 00    	jns    c0027968 <__addsf3+0x2ca>
c00277bf:	e9 9d 01 00 00       	jmp    c0027961 <__addsf3+0x2c3>
c00277c4:	85 d2                	test   edx,edx
c00277c6:	0f 85 cb 01 00 00    	jne    c0027997 <__addsf3+0x2f9>
c00277cc:	e9 bc 01 00 00       	jmp    c002798d <__addsf3+0x2ef>
c00277d1:	31 c0                	xor    eax,eax
c00277d3:	89 f1                	mov    ecx,esi
c00277d5:	f7 d1                	not    ecx
c00277d7:	84 c9                	test   cl,cl
c00277d9:	0f 84 90 01 00 00    	je     c002796f <__addsf3+0x2d1>
c00277df:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00277e2:	d1 e8                	shr    eax,1
c00277e4:	e9 86 01 00 00       	jmp    c002796f <__addsf3+0x2d1>
c00277e9:	85 c0                	test   eax,eax
c00277eb:	0f 89 7e 01 00 00    	jns    c002796f <__addsf3+0x2d1>
c00277f1:	46                   	inc    esi
c00277f2:	89 f2                	mov    edx,esi
c00277f4:	f7 d2                	not    edx
c00277f6:	84 d2                	test   dl,dl
c00277f8:	0f 84 6f 01 00 00    	je     c002796d <__addsf3+0x2cf>
c00277fe:	89 c2                	mov    edx,eax
c0027800:	83 e2 01             	and    edx,0x1
c0027803:	d1 e8                	shr    eax,1
c0027805:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002780a:	09 d0                	or     eax,edx
c002780c:	e9 5e 01 00 00       	jmp    c002796f <__addsf3+0x2d1>
c0027811:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027815:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027818:	89 f0                	mov    eax,esi
c002781a:	0f b6 c0             	movzx  eax,al
c002781d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027820:	29 c1                	sub    ecx,eax
c0027822:	85 c9                	test   ecx,ecx
c0027824:	7e 55                	jle    c002787b <__addsf3+0x1dd>
c0027826:	85 c0                	test   eax,eax
c0027828:	75 11                	jne    c002783b <__addsf3+0x19d>
c002782a:	85 db                	test   ebx,ebx
c002782c:	0f 84 65 01 00 00    	je     c0027997 <__addsf3+0x2f9>
c0027832:	49                   	dec    ecx
c0027833:	75 19                	jne    c002784e <__addsf3+0x1b0>
c0027835:	89 d0                	mov    eax,edx
c0027837:	29 d8                	sub    eax,ebx
c0027839:	eb 38                	jmp    c0027873 <__addsf3+0x1d5>
c002783b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002783e:	f7 d0                	not    eax
c0027840:	84 c0                	test   al,al
c0027842:	0f 84 4f 01 00 00    	je     c0027997 <__addsf3+0x2f9>
c0027848:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002784e:	83 f9 1f             	cmp    ecx,0x1f
c0027851:	0f 8f 40 01 00 00    	jg     c0027997 <__addsf3+0x2f9>
c0027857:	89 de                	mov    esi,ebx
c0027859:	d3 ee                	shr    esi,cl
c002785b:	b8 20 00 00 00       	mov    eax,0x20
c0027860:	29 c8                	sub    eax,ecx
c0027862:	89 c1                	mov    ecx,eax
c0027864:	d3 e3                	shl    ebx,cl
c0027866:	31 c0                	xor    eax,eax
c0027868:	85 db                	test   ebx,ebx
c002786a:	0f 95 c0             	setne  al
c002786d:	09 f0                	or     eax,esi
c002786f:	29 c2                	sub    edx,eax
c0027871:	89 d0                	mov    eax,edx
c0027873:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027876:	e9 af 00 00 00       	jmp    c002792a <__addsf3+0x28c>
c002787b:	74 5c                	je     c00278d9 <__addsf3+0x23b>
c002787d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027880:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027883:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027887:	75 14                	jne    c002789d <__addsf3+0x1ff>
c0027889:	85 d2                	test   edx,edx
c002788b:	0f 84 06 01 00 00    	je     c0027997 <__addsf3+0x2f9>
c0027891:	48                   	dec    eax
c0027892:	75 1b                	jne    c00278af <__addsf3+0x211>
c0027894:	89 d8                	mov    eax,ebx
c0027896:	29 d0                	sub    eax,edx
c0027898:	e9 8d 00 00 00       	jmp    c002792a <__addsf3+0x28c>
c002789d:	89 f1                	mov    ecx,esi
c002789f:	f7 d1                	not    ecx
c00278a1:	84 c9                	test   cl,cl
c00278a3:	0f 84 ee 00 00 00    	je     c0027997 <__addsf3+0x2f9>
c00278a9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278af:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00278b2:	83 f8 1f             	cmp    eax,0x1f
c00278b5:	0f 8f dc 00 00 00    	jg     c0027997 <__addsf3+0x2f9>
c00278bb:	89 d7                	mov    edi,edx
c00278bd:	88 c1                	mov    cl,al
c00278bf:	d3 ef                	shr    edi,cl
c00278c1:	b9 20 00 00 00       	mov    ecx,0x20
c00278c6:	29 c1                	sub    ecx,eax
c00278c8:	d3 e2                	shl    edx,cl
c00278ca:	31 c0                	xor    eax,eax
c00278cc:	85 d2                	test   edx,edx
c00278ce:	0f 95 c0             	setne  al
c00278d1:	09 f8                	or     eax,edi
c00278d3:	29 c3                	sub    ebx,eax
c00278d5:	89 d8                	mov    eax,ebx
c00278d7:	eb 51                	jmp    c002792a <__addsf3+0x28c>
c00278d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00278dc:	40                   	inc    eax
c00278dd:	a8 fe                	test   al,0xfe
c00278df:	75 3d                	jne    c002791e <__addsf3+0x280>
c00278e1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00278e5:	0f 85 a7 00 00 00    	jne    c0027992 <__addsf3+0x2f4>
c00278eb:	85 d2                	test   edx,edx
c00278ed:	75 12                	jne    c0027901 <__addsf3+0x263>
c00278ef:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00278f2:	85 db                	test   ebx,ebx
c00278f4:	0f 85 9d 00 00 00    	jne    c0027997 <__addsf3+0x2f9>
c00278fa:	31 ff                	xor    edi,edi
c00278fc:	e9 96 00 00 00       	jmp    c0027997 <__addsf3+0x2f9>
c0027901:	85 db                	test   ebx,ebx
c0027903:	0f 84 8e 00 00 00    	je     c0027997 <__addsf3+0x2f9>
c0027909:	89 d0                	mov    eax,edx
c002790b:	29 d8                	sub    eax,ebx
c002790d:	79 06                	jns    c0027915 <__addsf3+0x277>
c002790f:	89 d8                	mov    eax,ebx
c0027911:	29 d0                	sub    eax,edx
c0027913:	eb 5a                	jmp    c002796f <__addsf3+0x2d1>
c0027915:	bf 00 00 00 00       	mov    edi,0x0
c002791a:	74 7b                	je     c0027997 <__addsf3+0x2f9>
c002791c:	eb 4a                	jmp    c0027968 <__addsf3+0x2ca>
c002791e:	89 d0                	mov    eax,edx
c0027920:	29 d8                	sub    eax,ebx
c0027922:	79 12                	jns    c0027936 <__addsf3+0x298>
c0027924:	89 d8                	mov    eax,ebx
c0027926:	29 d0                	sub    eax,edx
c0027928:	eb 09                	jmp    c0027933 <__addsf3+0x295>
c002792a:	85 c0                	test   eax,eax
c002792c:	79 41                	jns    c002796f <__addsf3+0x2d1>
c002792e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027933:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027936:	31 f6                	xor    esi,esi
c0027938:	85 c0                	test   eax,eax
c002793a:	74 33                	je     c002796f <__addsf3+0x2d1>
c002793c:	0f bd c8             	bsr    ecx,eax
c002793f:	83 f1 1f             	xor    ecx,0x1f
c0027942:	d3 e0                	shl    eax,cl
c0027944:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027948:	39 ca                	cmp    edx,ecx
c002794a:	7f 10                	jg     c002795c <__addsf3+0x2be>
c002794c:	29 d1                	sub    ecx,edx
c002794e:	41                   	inc    ecx
c002794f:	d3 e8                	shr    eax,cl
c0027951:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027954:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002795a:	eb 13                	jmp    c002796f <__addsf3+0x2d1>
c002795c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002795f:	29 ce                	sub    esi,ecx
c0027961:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027966:	eb 07                	jmp    c002796f <__addsf3+0x2d1>
c0027968:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002796b:	eb 02                	jmp    c002796f <__addsf3+0x2d1>
c002796d:	31 c0                	xor    eax,eax
c002796f:	89 c2                	mov    edx,eax
c0027971:	c1 ea 08             	shr    edx,0x8
c0027974:	a8 7f                	test   al,0x7f
c0027976:	0f 95 c1             	setne  cl
c0027979:	09 d1                	or     ecx,edx
c002797b:	83 e1 01             	and    ecx,0x1
c002797e:	c1 e8 07             	shr    eax,0x7
c0027981:	21 c8                	and    eax,ecx
c0027983:	c1 e6 17             	shl    esi,0x17
c0027986:	09 d6                	or     esi,edx
c0027988:	8d 3c 30             	lea    edi,[eax+esi*1]
c002798b:	eb 0a                	jmp    c0027997 <__addsf3+0x2f9>
c002798d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027990:	eb 05                	jmp    c0027997 <__addsf3+0x2f9>
c0027992:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027997:	89 f8                	mov    eax,edi
c0027999:	5a                   	pop    edx
c002799a:	59                   	pop    ecx
c002799b:	5b                   	pop    ebx
c002799c:	5e                   	pop    esi
c002799d:	5f                   	pop    edi
c002799e:	5d                   	pop    ebp
c002799f:	c3                   	ret    

c00279a0 <__subsf3>:
c00279a0:	55                   	push   ebp
c00279a1:	89 e5                	mov    ebp,esp
c00279a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00279a6:	05 00 00 00 80       	add    eax,0x80000000
c00279ab:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00279ae:	5d                   	pop    ebp
c00279af:	e9 ea fc ff ff       	jmp    c002769e <__addsf3>

c00279b4 <__negsf2>:
c00279b4:	55                   	push   ebp
c00279b5:	89 e5                	mov    ebp,esp
c00279b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00279ba:	05 00 00 00 80       	add    eax,0x80000000
c00279bf:	5d                   	pop    ebp
c00279c0:	c3                   	ret    

c00279c1 <__mulsf3>:
c00279c1:	55                   	push   ebp
c00279c2:	89 e5                	mov    ebp,esp
c00279c4:	57                   	push   edi
c00279c5:	56                   	push   esi
c00279c6:	53                   	push   ebx
c00279c7:	83 ec 1c             	sub    esp,0x1c
c00279ca:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00279cd:	89 f0                	mov    eax,esi
c00279cf:	89 f1                	mov    ecx,esi
c00279d1:	c1 f9 17             	sar    ecx,0x17
c00279d4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00279d7:	c1 e0 08             	shl    eax,0x8
c00279da:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00279df:	89 c1                	mov    ecx,eax
c00279e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00279e4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00279e7:	89 c7                	mov    edi,eax
c00279e9:	c1 ff 17             	sar    edi,0x17
c00279ec:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00279f0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00279f3:	89 f8                	mov    eax,edi
c00279f5:	0f b6 c0             	movzx  eax,al
c00279f8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279fb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00279ff:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027a02:	42                   	inc    edx
c0027a03:	80 e2 fe             	and    dl,0xfe
c0027a06:	75 7b                	jne    c0027a83 <__mulsf3+0xc2>
c0027a08:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027a0c:	74 54                	je     c0027a62 <__mulsf3+0xa1>
c0027a0e:	85 c9                	test   ecx,ecx
c0027a10:	0f 85 64 01 00 00    	jne    c0027b7a <__mulsf3+0x1b9>
c0027a16:	8d 57 01             	lea    edx,[edi+0x1]
c0027a19:	80 e2 fe             	and    dl,0xfe
c0027a1c:	75 1f                	jne    c0027a3d <__mulsf3+0x7c>
c0027a1e:	85 c0                	test   eax,eax
c0027a20:	b8 00 00 00 00       	mov    eax,0x0
c0027a25:	74 29                	je     c0027a50 <__mulsf3+0x8f>
c0027a27:	53                   	push   ebx
c0027a28:	53                   	push   ebx
c0027a29:	50                   	push   eax
c0027a2a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a2d:	e8 96 05 00 00       	call   c0027fc8 <__nesf2>
c0027a32:	83 c4 10             	add    esp,0x10
c0027a35:	85 c0                	test   eax,eax
c0027a37:	0f 85 3a 01 00 00    	jne    c0027b77 <__mulsf3+0x1b6>
c0027a3d:	85 ff                	test   edi,edi
c0027a3f:	0f 89 35 01 00 00    	jns    c0027b7a <__mulsf3+0x1b9>
c0027a45:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027a4b:	e9 2a 01 00 00       	jmp    c0027b7a <__mulsf3+0x1b9>
c0027a50:	51                   	push   ecx
c0027a51:	51                   	push   ecx
c0027a52:	50                   	push   eax
c0027a53:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a56:	e8 6d 05 00 00       	call   c0027fc8 <__nesf2>
c0027a5b:	83 c4 10             	add    esp,0x10
c0027a5e:	85 c0                	test   eax,eax
c0027a60:	eb 15                	jmp    c0027a77 <__mulsf3+0xb6>
c0027a62:	85 c9                	test   ecx,ecx
c0027a64:	74 0b                	je     c0027a71 <__mulsf3+0xb0>
c0027a66:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027a69:	01 c9                	add    ecx,ecx
c0027a6b:	78 16                	js     c0027a83 <__mulsf3+0xc2>
c0027a6d:	89 d3                	mov    ebx,edx
c0027a6f:	eb f5                	jmp    c0027a66 <__mulsf3+0xa5>
c0027a71:	89 f8                	mov    eax,edi
c0027a73:	f7 d0                	not    eax
c0027a75:	84 c0                	test   al,al
c0027a77:	75 c4                	jne    c0027a3d <__mulsf3+0x7c>
c0027a79:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027a7e:	e9 f7 00 00 00       	jmp    c0027b7a <__mulsf3+0x1b9>
c0027a83:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027a86:	c1 e6 08             	shl    esi,0x8
c0027a89:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027a8f:	8d 57 01             	lea    edx,[edi+0x1]
c0027a92:	80 e2 fe             	and    dl,0xfe
c0027a95:	75 63                	jne    c0027afa <__mulsf3+0x139>
c0027a97:	85 c0                	test   eax,eax
c0027a99:	74 2f                	je     c0027aca <__mulsf3+0x109>
c0027a9b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027a9f:	0f 89 d2 00 00 00    	jns    c0027b77 <__mulsf3+0x1b6>
c0027aa5:	52                   	push   edx
c0027aa6:	52                   	push   edx
c0027aa7:	6a 00                	push   0x0
c0027aa9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027aac:	e8 dc 04 00 00       	call   c0027f8d <__eqsf2>
c0027ab1:	83 c4 10             	add    esp,0x10
c0027ab4:	85 c0                	test   eax,eax
c0027ab6:	0f 85 bb 00 00 00    	jne    c0027b77 <__mulsf3+0x1b6>
c0027abc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027abf:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027ac5:	e9 b0 00 00 00       	jmp    c0027b7a <__mulsf3+0x1b9>
c0027aca:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027acd:	50                   	push   eax
c0027ace:	50                   	push   eax
c0027acf:	6a 00                	push   0x0
c0027ad1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ad4:	e8 b4 04 00 00       	call   c0027f8d <__eqsf2>
c0027ad9:	83 c4 10             	add    esp,0x10
c0027adc:	85 c0                	test   eax,eax
c0027ade:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ae1:	75 0c                	jne    c0027aef <__mulsf3+0x12e>
c0027ae3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027ae7:	0f 89 8a 00 00 00    	jns    c0027b77 <__mulsf3+0x1b6>
c0027aed:	eb cd                	jmp    c0027abc <__mulsf3+0xfb>
c0027aef:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027af2:	01 f6                	add    esi,esi
c0027af4:	78 04                	js     c0027afa <__mulsf3+0x139>
c0027af6:	89 c3                	mov    ebx,eax
c0027af8:	eb f5                	jmp    c0027aef <__mulsf3+0x12e>
c0027afa:	89 c8                	mov    eax,ecx
c0027afc:	0d 00 00 00 80       	or     eax,0x80000000
c0027b01:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b07:	f7 e6                	mul    esi
c0027b09:	85 c0                	test   eax,eax
c0027b0b:	0f 95 c0             	setne  al
c0027b0e:	0f b6 c0             	movzx  eax,al
c0027b11:	09 c2                	or     edx,eax
c0027b13:	78 03                	js     c0027b18 <__mulsf3+0x157>
c0027b15:	01 d2                	add    edx,edx
c0027b17:	4b                   	dec    ebx
c0027b18:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027b1e:	7f 22                	jg     c0027b42 <__mulsf3+0x181>
c0027b20:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027b26:	85 db                	test   ebx,ebx
c0027b28:	7f 23                	jg     c0027b4d <__mulsf3+0x18c>
c0027b2a:	83 fb e9             	cmp    ebx,0xffffffe9
c0027b2d:	7c 1a                	jl     c0027b49 <__mulsf3+0x188>
c0027b2f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027b35:	b9 01 00 00 00       	mov    ecx,0x1
c0027b3a:	29 d9                	sub    ecx,ebx
c0027b3c:	d3 ea                	shr    edx,cl
c0027b3e:	31 db                	xor    ebx,ebx
c0027b40:	eb 0b                	jmp    c0027b4d <__mulsf3+0x18c>
c0027b42:	bb ff 00 00 00       	mov    ebx,0xff
c0027b47:	eb 02                	jmp    c0027b4b <__mulsf3+0x18a>
c0027b49:	31 db                	xor    ebx,ebx
c0027b4b:	31 d2                	xor    edx,edx
c0027b4d:	89 d0                	mov    eax,edx
c0027b4f:	c1 e8 08             	shr    eax,0x8
c0027b52:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027b55:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027b5b:	09 fb                	or     ebx,edi
c0027b5d:	c1 e3 17             	shl    ebx,0x17
c0027b60:	09 c3                	or     ebx,eax
c0027b62:	f6 c2 7f             	test   dl,0x7f
c0027b65:	0f 95 c1             	setne  cl
c0027b68:	09 c8                	or     eax,ecx
c0027b6a:	83 e0 01             	and    eax,0x1
c0027b6d:	c1 ea 07             	shr    edx,0x7
c0027b70:	21 c2                	and    edx,eax
c0027b72:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027b75:	eb 03                	jmp    c0027b7a <__mulsf3+0x1b9>
c0027b77:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027b7a:	89 f0                	mov    eax,esi
c0027b7c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027b7f:	5b                   	pop    ebx
c0027b80:	5e                   	pop    esi
c0027b81:	5f                   	pop    edi
c0027b82:	5d                   	pop    ebp
c0027b83:	c3                   	ret    

c0027b84 <__divsf3>:
c0027b84:	55                   	push   ebp
c0027b85:	89 e5                	mov    ebp,esp
c0027b87:	57                   	push   edi
c0027b88:	56                   	push   esi
c0027b89:	53                   	push   ebx
c0027b8a:	83 ec 1c             	sub    esp,0x1c
c0027b8d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027b90:	89 d8                	mov    eax,ebx
c0027b92:	89 d9                	mov    ecx,ebx
c0027b94:	c1 f9 17             	sar    ecx,0x17
c0027b97:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027b9a:	c1 e0 08             	shl    eax,0x8
c0027b9d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027ba2:	89 c1                	mov    ecx,eax
c0027ba4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027ba7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027baa:	89 c7                	mov    edi,eax
c0027bac:	c1 ff 17             	sar    edi,0x17
c0027baf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027bb3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027bb6:	89 f8                	mov    eax,edi
c0027bb8:	0f b6 c0             	movzx  eax,al
c0027bbb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027bbe:	29 c6                	sub    esi,eax
c0027bc0:	83 c6 7f             	add    esi,0x7f
c0027bc3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027bc6:	42                   	inc    edx
c0027bc7:	80 e2 fe             	and    dl,0xfe
c0027bca:	0f 85 9c 00 00 00    	jne    c0027c6c <__divsf3+0xe8>
c0027bd0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027bd4:	74 33                	je     c0027c09 <__divsf3+0x85>
c0027bd6:	85 c9                	test   ecx,ecx
c0027bd8:	0f 85 c7 01 00 00    	jne    c0027da5 <__divsf3+0x221>
c0027bde:	8d 57 01             	lea    edx,[edi+0x1]
c0027be1:	80 e2 fe             	and    dl,0xfe
c0027be4:	75 2f                	jne    c0027c15 <__divsf3+0x91>
c0027be6:	85 c0                	test   eax,eax
c0027be8:	74 2b                	je     c0027c15 <__divsf3+0x91>
c0027bea:	51                   	push   ecx
c0027beb:	51                   	push   ecx
c0027bec:	6a 00                	push   0x0
c0027bee:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027bf1:	e8 d2 03 00 00       	call   c0027fc8 <__nesf2>
c0027bf6:	83 c4 10             	add    esp,0x10
c0027bf9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027bfc:	85 c0                	test   eax,eax
c0027bfe:	0f 85 a1 01 00 00    	jne    c0027da5 <__divsf3+0x221>
c0027c04:	e9 92 01 00 00       	jmp    c0027d9b <__divsf3+0x217>
c0027c09:	85 c9                	test   ecx,ecx
c0027c0b:	75 1b                	jne    c0027c28 <__divsf3+0xa4>
c0027c0d:	8d 57 01             	lea    edx,[edi+0x1]
c0027c10:	80 e2 fe             	and    dl,0xfe
c0027c13:	74 1e                	je     c0027c33 <__divsf3+0xaf>
c0027c15:	85 ff                	test   edi,edi
c0027c17:	0f 89 88 01 00 00    	jns    c0027da5 <__divsf3+0x221>
c0027c1d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027c23:	e9 7d 01 00 00       	jmp    c0027da5 <__divsf3+0x221>
c0027c28:	8d 56 ff             	lea    edx,[esi-0x1]
c0027c2b:	01 c9                	add    ecx,ecx
c0027c2d:	78 3d                	js     c0027c6c <__divsf3+0xe8>
c0027c2f:	89 d6                	mov    esi,edx
c0027c31:	eb f5                	jmp    c0027c28 <__divsf3+0xa4>
c0027c33:	85 c0                	test   eax,eax
c0027c35:	b8 00 00 00 00       	mov    eax,0x0
c0027c3a:	74 18                	je     c0027c54 <__divsf3+0xd0>
c0027c3c:	52                   	push   edx
c0027c3d:	52                   	push   edx
c0027c3e:	50                   	push   eax
c0027c3f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c42:	e8 81 03 00 00       	call   c0027fc8 <__nesf2>
c0027c47:	83 c4 10             	add    esp,0x10
c0027c4a:	85 c0                	test   eax,eax
c0027c4c:	0f 85 50 01 00 00    	jne    c0027da2 <__divsf3+0x21e>
c0027c52:	eb c1                	jmp    c0027c15 <__divsf3+0x91>
c0027c54:	56                   	push   esi
c0027c55:	56                   	push   esi
c0027c56:	50                   	push   eax
c0027c57:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c5a:	e8 69 03 00 00       	call   c0027fc8 <__nesf2>
c0027c5f:	83 c4 10             	add    esp,0x10
c0027c62:	85 c0                	test   eax,eax
c0027c64:	0f 84 31 01 00 00    	je     c0027d9b <__divsf3+0x217>
c0027c6a:	eb a9                	jmp    c0027c15 <__divsf3+0x91>
c0027c6c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027c6f:	c1 e3 08             	shl    ebx,0x8
c0027c72:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027c78:	8d 57 01             	lea    edx,[edi+0x1]
c0027c7b:	80 e2 fe             	and    dl,0xfe
c0027c7e:	75 71                	jne    c0027cf1 <__divsf3+0x16d>
c0027c80:	85 c0                	test   eax,eax
c0027c82:	ba 00 00 00 00       	mov    edx,0x0
c0027c87:	74 2f                	je     c0027cb8 <__divsf3+0x134>
c0027c89:	51                   	push   ecx
c0027c8a:	51                   	push   ecx
c0027c8b:	52                   	push   edx
c0027c8c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c8f:	e8 f9 02 00 00       	call   c0027f8d <__eqsf2>
c0027c94:	83 c4 10             	add    esp,0x10
c0027c97:	85 c0                	test   eax,eax
c0027c99:	0f 85 03 01 00 00    	jne    c0027da2 <__divsf3+0x21e>
c0027c9f:	31 d2                	xor    edx,edx
c0027ca1:	89 d3                	mov    ebx,edx
c0027ca3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ca6:	31 f8                	xor    eax,edi
c0027ca8:	0f 89 f7 00 00 00    	jns    c0027da5 <__divsf3+0x221>
c0027cae:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027cb3:	e9 ed 00 00 00       	jmp    c0027da5 <__divsf3+0x221>
c0027cb8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027cbb:	50                   	push   eax
c0027cbc:	50                   	push   eax
c0027cbd:	52                   	push   edx
c0027cbe:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cc1:	e8 c7 02 00 00       	call   c0027f8d <__eqsf2>
c0027cc6:	83 c4 10             	add    esp,0x10
c0027cc9:	85 c0                	test   eax,eax
c0027ccb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027cce:	75 16                	jne    c0027ce6 <__divsf3+0x162>
c0027cd0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027cd3:	31 fb                	xor    ebx,edi
c0027cd5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027cdb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027ce1:	e9 bf 00 00 00       	jmp    c0027da5 <__divsf3+0x221>
c0027ce6:	8d 46 01             	lea    eax,[esi+0x1]
c0027ce9:	01 db                	add    ebx,ebx
c0027ceb:	78 04                	js     c0027cf1 <__divsf3+0x16d>
c0027ced:	89 c6                	mov    esi,eax
c0027cef:	eb f5                	jmp    c0027ce6 <__divsf3+0x162>
c0027cf1:	89 c8                	mov    eax,ecx
c0027cf3:	0d 00 00 00 80       	or     eax,0x80000000
c0027cf8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027cfe:	31 d2                	xor    edx,edx
c0027d00:	39 d8                	cmp    eax,ebx
c0027d02:	72 07                	jb     c0027d0b <__divsf3+0x187>
c0027d04:	29 d8                	sub    eax,ebx
c0027d06:	ba 01 00 00 00       	mov    edx,0x1
c0027d0b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027d12:	01 d2                	add    edx,edx
c0027d14:	89 c1                	mov    ecx,eax
c0027d16:	01 c0                	add    eax,eax
c0027d18:	85 c9                	test   ecx,ecx
c0027d1a:	78 04                	js     c0027d20 <__divsf3+0x19c>
c0027d1c:	39 c3                	cmp    ebx,eax
c0027d1e:	77 05                	ja     c0027d25 <__divsf3+0x1a1>
c0027d20:	29 d8                	sub    eax,ebx
c0027d22:	83 ca 01             	or     edx,0x1
c0027d25:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027d28:	75 e8                	jne    c0027d12 <__divsf3+0x18e>
c0027d2a:	85 c0                	test   eax,eax
c0027d2c:	0f 95 c0             	setne  al
c0027d2f:	0f b6 c0             	movzx  eax,al
c0027d32:	c1 e2 06             	shl    edx,0x6
c0027d35:	09 c2                	or     edx,eax
c0027d37:	78 03                	js     c0027d3c <__divsf3+0x1b8>
c0027d39:	01 d2                	add    edx,edx
c0027d3b:	4e                   	dec    esi
c0027d3c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027d42:	7f 22                	jg     c0027d66 <__divsf3+0x1e2>
c0027d44:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027d4a:	85 f6                	test   esi,esi
c0027d4c:	7f 23                	jg     c0027d71 <__divsf3+0x1ed>
c0027d4e:	83 fe e9             	cmp    esi,0xffffffe9
c0027d51:	7c 1a                	jl     c0027d6d <__divsf3+0x1e9>
c0027d53:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027d59:	b9 01 00 00 00       	mov    ecx,0x1
c0027d5e:	29 f1                	sub    ecx,esi
c0027d60:	d3 ea                	shr    edx,cl
c0027d62:	31 f6                	xor    esi,esi
c0027d64:	eb 0b                	jmp    c0027d71 <__divsf3+0x1ed>
c0027d66:	be ff 00 00 00       	mov    esi,0xff
c0027d6b:	eb 02                	jmp    c0027d6f <__divsf3+0x1eb>
c0027d6d:	31 f6                	xor    esi,esi
c0027d6f:	31 d2                	xor    edx,edx
c0027d71:	89 d0                	mov    eax,edx
c0027d73:	c1 e8 08             	shr    eax,0x8
c0027d76:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027d79:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027d7f:	09 fe                	or     esi,edi
c0027d81:	c1 e6 17             	shl    esi,0x17
c0027d84:	09 c6                	or     esi,eax
c0027d86:	f6 c2 7f             	test   dl,0x7f
c0027d89:	0f 95 c1             	setne  cl
c0027d8c:	09 c8                	or     eax,ecx
c0027d8e:	83 e0 01             	and    eax,0x1
c0027d91:	c1 ea 07             	shr    edx,0x7
c0027d94:	21 c2                	and    edx,eax
c0027d96:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027d99:	eb 0a                	jmp    c0027da5 <__divsf3+0x221>
c0027d9b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027da0:	eb 03                	jmp    c0027da5 <__divsf3+0x221>
c0027da2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027da5:	89 d8                	mov    eax,ebx
c0027da7:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027daa:	5b                   	pop    ebx
c0027dab:	5e                   	pop    esi
c0027dac:	5f                   	pop    edi
c0027dad:	5d                   	pop    ebp
c0027dae:	c3                   	ret    

c0027daf <__floatsisf>:
c0027daf:	55                   	push   ebp
c0027db0:	89 e5                	mov    ebp,esp
c0027db2:	53                   	push   ebx
c0027db3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027db6:	85 d2                	test   edx,edx
c0027db8:	7e 2b                	jle    c0027de5 <__floatsisf+0x36>
c0027dba:	0f bd ca             	bsr    ecx,edx
c0027dbd:	83 f1 1f             	xor    ecx,0x1f
c0027dc0:	d3 e2                	shl    edx,cl
c0027dc2:	89 d0                	mov    eax,edx
c0027dc4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027dc9:	89 c3                	mov    ebx,eax
c0027dcb:	c1 eb 08             	shr    ebx,0x8
c0027dce:	80 e2 7f             	and    dl,0x7f
c0027dd1:	0f 95 c2             	setne  dl
c0027dd4:	09 da                	or     edx,ebx
c0027dd6:	83 e2 01             	and    edx,0x1
c0027dd9:	c1 e8 07             	shr    eax,0x7
c0027ddc:	21 c2                	and    edx,eax
c0027dde:	b8 9e 00 00 00       	mov    eax,0x9e
c0027de3:	eb 32                	jmp    c0027e17 <__floatsisf+0x68>
c0027de5:	b8 00 00 00 00       	mov    eax,0x0
c0027dea:	74 34                	je     c0027e20 <__floatsisf+0x71>
c0027dec:	f7 da                	neg    edx
c0027dee:	0f bd ca             	bsr    ecx,edx
c0027df1:	83 f1 1f             	xor    ecx,0x1f
c0027df4:	d3 e2                	shl    edx,cl
c0027df6:	89 d0                	mov    eax,edx
c0027df8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027dfd:	89 c3                	mov    ebx,eax
c0027dff:	c1 eb 08             	shr    ebx,0x8
c0027e02:	80 e2 7f             	and    dl,0x7f
c0027e05:	0f 95 c2             	setne  dl
c0027e08:	09 da                	or     edx,ebx
c0027e0a:	83 e2 01             	and    edx,0x1
c0027e0d:	c1 e8 07             	shr    eax,0x7
c0027e10:	21 c2                	and    edx,eax
c0027e12:	b8 9e 01 00 00       	mov    eax,0x19e
c0027e17:	29 c8                	sub    eax,ecx
c0027e19:	c1 e0 17             	shl    eax,0x17
c0027e1c:	09 d8                	or     eax,ebx
c0027e1e:	01 d0                	add    eax,edx
c0027e20:	5b                   	pop    ebx
c0027e21:	5d                   	pop    ebp
c0027e22:	c3                   	ret    

c0027e23 <__floatunsisf>:
c0027e23:	55                   	push   ebp
c0027e24:	89 e5                	mov    ebp,esp
c0027e26:	53                   	push   ebx
c0027e27:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027e2a:	31 c0                	xor    eax,eax
c0027e2c:	85 d2                	test   edx,edx
c0027e2e:	74 32                	je     c0027e62 <__floatunsisf+0x3f>
c0027e30:	0f bd ca             	bsr    ecx,edx
c0027e33:	83 f1 1f             	xor    ecx,0x1f
c0027e36:	d3 e2                	shl    edx,cl
c0027e38:	89 d0                	mov    eax,edx
c0027e3a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027e3f:	89 c3                	mov    ebx,eax
c0027e41:	c1 eb 08             	shr    ebx,0x8
c0027e44:	80 e2 7f             	and    dl,0x7f
c0027e47:	0f 95 c2             	setne  dl
c0027e4a:	09 da                	or     edx,ebx
c0027e4c:	83 e2 01             	and    edx,0x1
c0027e4f:	c1 e8 07             	shr    eax,0x7
c0027e52:	21 c2                	and    edx,eax
c0027e54:	b8 9e 00 00 00       	mov    eax,0x9e
c0027e59:	29 c8                	sub    eax,ecx
c0027e5b:	c1 e0 17             	shl    eax,0x17
c0027e5e:	09 d8                	or     eax,ebx
c0027e60:	01 d0                	add    eax,edx
c0027e62:	5b                   	pop    ebx
c0027e63:	5d                   	pop    ebp
c0027e64:	c3                   	ret    

c0027e65 <__fixsfsi>:
c0027e65:	55                   	push   ebp
c0027e66:	89 e5                	mov    ebp,esp
c0027e68:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027e6b:	89 d1                	mov    ecx,edx
c0027e6d:	c1 e1 08             	shl    ecx,0x8
c0027e70:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027e76:	c1 fa 17             	sar    edx,0x17
c0027e79:	78 1c                	js     c0027e97 <__fixsfsi+0x32>
c0027e7b:	83 ea 7f             	sub    edx,0x7f
c0027e7e:	31 c0                	xor    eax,eax
c0027e80:	83 fa 1e             	cmp    edx,0x1e
c0027e83:	77 40                	ja     c0027ec5 <__fixsfsi+0x60>
c0027e85:	89 c8                	mov    eax,ecx
c0027e87:	0d 00 00 00 80       	or     eax,0x80000000
c0027e8c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e91:	29 d1                	sub    ecx,edx
c0027e93:	d3 e8                	shr    eax,cl
c0027e95:	eb 2e                	jmp    c0027ec5 <__fixsfsi+0x60>
c0027e97:	31 c0                	xor    eax,eax
c0027e99:	81 c2 81 00 00 00    	add    edx,0x81
c0027e9f:	78 24                	js     c0027ec5 <__fixsfsi+0x60>
c0027ea1:	83 fa 1e             	cmp    edx,0x1e
c0027ea4:	7e 09                	jle    c0027eaf <__fixsfsi+0x4a>
c0027ea6:	83 fa 1f             	cmp    edx,0x1f
c0027ea9:	75 18                	jne    c0027ec3 <__fixsfsi+0x5e>
c0027eab:	85 c9                	test   ecx,ecx
c0027ead:	75 14                	jne    c0027ec3 <__fixsfsi+0x5e>
c0027eaf:	89 c8                	mov    eax,ecx
c0027eb1:	0d 00 00 00 80       	or     eax,0x80000000
c0027eb6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ebb:	29 d1                	sub    ecx,edx
c0027ebd:	d3 e8                	shr    eax,cl
c0027ebf:	f7 d8                	neg    eax
c0027ec1:	eb 02                	jmp    c0027ec5 <__fixsfsi+0x60>
c0027ec3:	31 c0                	xor    eax,eax
c0027ec5:	5d                   	pop    ebp
c0027ec6:	c3                   	ret    

c0027ec7 <__fixunssfsi>:
c0027ec7:	55                   	push   ebp
c0027ec8:	89 e5                	mov    ebp,esp
c0027eca:	53                   	push   ebx
c0027ecb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027ece:	89 d3                	mov    ebx,edx
c0027ed0:	c1 fb 17             	sar    ebx,0x17
c0027ed3:	83 eb 7f             	sub    ebx,0x7f
c0027ed6:	31 c0                	xor    eax,eax
c0027ed8:	83 fb 1f             	cmp    ebx,0x1f
c0027edb:	77 18                	ja     c0027ef5 <__fixunssfsi+0x2e>
c0027edd:	89 d0                	mov    eax,edx
c0027edf:	c1 e0 08             	shl    eax,0x8
c0027ee2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027ee7:	0d 00 00 00 80       	or     eax,0x80000000
c0027eec:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ef1:	29 d9                	sub    ecx,ebx
c0027ef3:	d3 e8                	shr    eax,cl
c0027ef5:	5b                   	pop    ebx
c0027ef6:	5d                   	pop    ebp
c0027ef7:	c3                   	ret    

c0027ef8 <__cmpsf2>:
c0027ef8:	55                   	push   ebp
c0027ef9:	89 e5                	mov    ebp,esp
c0027efb:	57                   	push   edi
c0027efc:	56                   	push   esi
c0027efd:	53                   	push   ebx
c0027efe:	83 ec 24             	sub    esp,0x24
c0027f01:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027f04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027f07:	e8 4f 10 00 00       	call   c0028f5b <__truncdfsf2>
c0027f0c:	5a                   	pop    edx
c0027f0d:	59                   	pop    ecx
c0027f0e:	89 c3                	mov    ebx,eax
c0027f10:	c1 e8 17             	shr    eax,0x17
c0027f13:	0f b6 f0             	movzx  esi,al
c0027f16:	89 d8                	mov    eax,ebx
c0027f18:	c1 e8 1f             	shr    eax,0x1f
c0027f1b:	31 c6                	xor    esi,eax
c0027f1d:	c1 e3 08             	shl    ebx,0x8
c0027f20:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027f23:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027f26:	e8 30 10 00 00       	call   c0028f5b <__truncdfsf2>
c0027f2b:	83 c4 10             	add    esp,0x10
c0027f2e:	89 c1                	mov    ecx,eax
c0027f30:	c1 e9 17             	shr    ecx,0x17
c0027f33:	0f b6 c9             	movzx  ecx,cl
c0027f36:	89 c7                	mov    edi,eax
c0027f38:	c1 ef 1f             	shr    edi,0x1f
c0027f3b:	89 ca                	mov    edx,ecx
c0027f3d:	31 fa                	xor    edx,edi
c0027f3f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f42:	c1 e0 08             	shl    eax,0x8
c0027f45:	89 c2                	mov    edx,eax
c0027f47:	89 d8                	mov    eax,ebx
c0027f49:	09 d0                	or     eax,edx
c0027f4b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027f50:	09 f0                	or     eax,esi
c0027f52:	75 08                	jne    c0027f5c <__cmpsf2+0x64>
c0027f54:	31 c0                	xor    eax,eax
c0027f56:	39 f9                	cmp    ecx,edi
c0027f58:	75 0c                	jne    c0027f66 <__cmpsf2+0x6e>
c0027f5a:	eb 29                	jmp    c0027f85 <__cmpsf2+0x8d>
c0027f5c:	b8 01 00 00 00       	mov    eax,0x1
c0027f61:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027f64:	7f 1f                	jg     c0027f85 <__cmpsf2+0x8d>
c0027f66:	83 c8 ff             	or     eax,0xffffffff
c0027f69:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027f6c:	7c 17                	jl     c0027f85 <__cmpsf2+0x8d>
c0027f6e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027f74:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027f7a:	b8 01 00 00 00       	mov    eax,0x1
c0027f7f:	39 d3                	cmp    ebx,edx
c0027f81:	77 02                	ja     c0027f85 <__cmpsf2+0x8d>
c0027f83:	19 c0                	sbb    eax,eax
c0027f85:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027f88:	5b                   	pop    ebx
c0027f89:	5e                   	pop    esi
c0027f8a:	5f                   	pop    edi
c0027f8b:	5d                   	pop    ebp
c0027f8c:	c3                   	ret    

c0027f8d <__eqsf2>:
c0027f8d:	55                   	push   ebp
c0027f8e:	89 e5                	mov    ebp,esp
c0027f90:	83 ec 24             	sub    esp,0x24
c0027f93:	6a 01                	push   0x1
c0027f95:	83 ec 0c             	sub    esp,0xc
c0027f98:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027f9b:	e8 df 10 00 00       	call   c002907f <__extendsfdf2>
c0027fa0:	83 c4 10             	add    esp,0x10
c0027fa3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027fa6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027fa9:	52                   	push   edx
c0027faa:	50                   	push   eax
c0027fab:	50                   	push   eax
c0027fac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027faf:	e8 cb 10 00 00       	call   c002907f <__extendsfdf2>
c0027fb4:	59                   	pop    ecx
c0027fb5:	59                   	pop    ecx
c0027fb6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027fb9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027fbc:	52                   	push   edx
c0027fbd:	50                   	push   eax
c0027fbe:	e8 35 ff ff ff       	call   c0027ef8 <__cmpsf2>
c0027fc3:	83 c4 20             	add    esp,0x20
c0027fc6:	c9                   	leave  
c0027fc7:	c3                   	ret    

c0027fc8 <__nesf2>:
c0027fc8:	eb c3                	jmp    c0027f8d <__eqsf2>

c0027fca <__gtsf2>:
c0027fca:	55                   	push   ebp
c0027fcb:	89 e5                	mov    ebp,esp
c0027fcd:	83 ec 24             	sub    esp,0x24
c0027fd0:	6a ff                	push   0xffffffff
c0027fd2:	83 ec 0c             	sub    esp,0xc
c0027fd5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027fd8:	e8 a2 10 00 00       	call   c002907f <__extendsfdf2>
c0027fdd:	83 c4 10             	add    esp,0x10
c0027fe0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027fe3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027fe6:	52                   	push   edx
c0027fe7:	50                   	push   eax
c0027fe8:	50                   	push   eax
c0027fe9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027fec:	e8 8e 10 00 00       	call   c002907f <__extendsfdf2>
c0027ff1:	59                   	pop    ecx
c0027ff2:	59                   	pop    ecx
c0027ff3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027ff6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027ff9:	52                   	push   edx
c0027ffa:	50                   	push   eax
c0027ffb:	e8 f8 fe ff ff       	call   c0027ef8 <__cmpsf2>
c0028000:	83 c4 20             	add    esp,0x20
c0028003:	c9                   	leave  
c0028004:	c3                   	ret    

c0028005 <__gesf2>:
c0028005:	eb c3                	jmp    c0027fca <__gtsf2>

c0028007 <__ltsf2>:
c0028007:	eb 84                	jmp    c0027f8d <__eqsf2>

c0028009 <__lesf2>:
c0028009:	eb 82                	jmp    c0027f8d <__eqsf2>

c002800b <__adddf3>:
c002800b:	55                   	push   ebp
c002800c:	89 e5                	mov    ebp,esp
c002800e:	57                   	push   edi
c002800f:	56                   	push   esi
c0028010:	53                   	push   ebx
c0028011:	83 ec 24             	sub    esp,0x24
c0028014:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028017:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002801a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002801d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028020:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028023:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028026:	89 c8                	mov    eax,ecx
c0028028:	89 ce                	mov    esi,ecx
c002802a:	c1 fe 14             	sar    esi,0x14
c002802d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0028030:	89 fb                	mov    ebx,edi
c0028032:	89 fa                	mov    edx,edi
c0028034:	c1 e2 0b             	shl    edx,0xb
c0028037:	c1 e0 0b             	shl    eax,0xb
c002803a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002803f:	c1 eb 15             	shr    ebx,0x15
c0028042:	09 d8                	or     eax,ebx
c0028044:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028047:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002804a:	c1 fe 14             	sar    esi,0x14
c002804d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028050:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028053:	89 f3                	mov    ebx,esi
c0028055:	c1 e3 0b             	shl    ebx,0xb
c0028058:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002805b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002805e:	c1 e3 0b             	shl    ebx,0xb
c0028061:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0028067:	c1 ee 15             	shr    esi,0x15
c002806a:	09 f3                	or     ebx,esi
c002806c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002806f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0028072:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0028075:	0f 88 5f 02 00 00    	js     c00282da <__adddf3+0x2cf>
c002807b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002807e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0028081:	85 db                	test   ebx,ebx
c0028083:	0f 8e c7 00 00 00    	jle    c0028150 <__adddf3+0x145>
c0028089:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0028090:	75 1a                	jne    c00280ac <__adddf3+0xa1>
c0028092:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028095:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028098:	0f 84 b2 05 00 00    	je     c0028650 <__adddf3+0x645>
c002809e:	4b                   	dec    ebx
c002809f:	75 23                	jne    c00280c4 <__adddf3+0xb9>
c00280a1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00280a4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00280a7:	e9 99 00 00 00       	jmp    c0028145 <__adddf3+0x13a>
c00280ac:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00280af:	f7 d6                	not    esi
c00280b1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00280b7:	0f 84 93 05 00 00    	je     c0028650 <__adddf3+0x645>
c00280bd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00280c4:	83 fb 1f             	cmp    ebx,0x1f
c00280c7:	7e 42                	jle    c002810b <__adddf3+0x100>
c00280c9:	83 fb 3f             	cmp    ebx,0x3f
c00280cc:	0f 8f 7e 05 00 00    	jg     c0028650 <__adddf3+0x645>
c00280d2:	83 e3 1f             	and    ebx,0x1f
c00280d5:	89 d9                	mov    ecx,ebx
c00280d7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280da:	d3 ef                	shr    edi,cl
c00280dc:	31 db                	xor    ebx,ebx
c00280de:	85 c9                	test   ecx,ecx
c00280e0:	74 15                	je     c00280f7 <__adddf3+0xec>
c00280e2:	be 20 00 00 00       	mov    esi,0x20
c00280e7:	29 ce                	sub    esi,ecx
c00280e9:	89 f1                	mov    ecx,esi
c00280eb:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280ee:	d3 e6                	shl    esi,cl
c00280f0:	31 db                	xor    ebx,ebx
c00280f2:	85 f6                	test   esi,esi
c00280f4:	0f 95 c3             	setne  bl
c00280f7:	31 c9                	xor    ecx,ecx
c00280f9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00280fd:	0f 95 c1             	setne  cl
c0028100:	09 cf                	or     edi,ecx
c0028102:	09 fb                	or     ebx,edi
c0028104:	01 da                	add    edx,ebx
c0028106:	83 d0 00             	adc    eax,0x0
c0028109:	eb 3a                	jmp    c0028145 <__adddf3+0x13a>
c002810b:	bf 20 00 00 00       	mov    edi,0x20
c0028110:	29 df                	sub    edi,ebx
c0028112:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028115:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028118:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002811b:	d3 e6                	shl    esi,cl
c002811d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028120:	88 d9                	mov    cl,bl
c0028122:	d3 ef                	shr    edi,cl
c0028124:	09 fe                	or     esi,edi
c0028126:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028129:	88 d9                	mov    cl,bl
c002812b:	d3 ef                	shr    edi,cl
c002812d:	89 fb                	mov    ebx,edi
c002812f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028132:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028135:	d3 e7                	shl    edi,cl
c0028137:	85 ff                	test   edi,edi
c0028139:	0f 95 c1             	setne  cl
c002813c:	0f b6 c9             	movzx  ecx,cl
c002813f:	09 ce                	or     esi,ecx
c0028141:	01 f2                	add    edx,esi
c0028143:	11 d8                	adc    eax,ebx
c0028145:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028148:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002814b:	e9 52 01 00 00       	jmp    c00282a2 <__adddf3+0x297>
c0028150:	0f 84 d5 00 00 00    	je     c002822b <__adddf3+0x220>
c0028156:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028159:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002815c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002815f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028162:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028169:	75 20                	jne    c002818b <__adddf3+0x180>
c002816b:	89 d6                	mov    esi,edx
c002816d:	09 c6                	or     esi,eax
c002816f:	0f 84 db 04 00 00    	je     c0028650 <__adddf3+0x645>
c0028175:	4b                   	dec    ebx
c0028176:	75 29                	jne    c00281a1 <__adddf3+0x196>
c0028178:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002817b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002817e:	01 d1                	add    ecx,edx
c0028180:	11 c6                	adc    esi,eax
c0028182:	89 f0                	mov    eax,esi
c0028184:	89 ca                	mov    edx,ecx
c0028186:	e9 17 01 00 00       	jmp    c00282a2 <__adddf3+0x297>
c002818b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002818e:	f7 d6                	not    esi
c0028190:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028196:	0f 84 b4 04 00 00    	je     c0028650 <__adddf3+0x645>
c002819c:	0d 00 00 00 80       	or     eax,0x80000000
c00281a1:	83 fb 1f             	cmp    ebx,0x1f
c00281a4:	7e 48                	jle    c00281ee <__adddf3+0x1e3>
c00281a6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00281a9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00281ac:	83 fb 3f             	cmp    ebx,0x3f
c00281af:	0f 8f 9b 04 00 00    	jg     c0028650 <__adddf3+0x645>
c00281b5:	83 e3 1f             	and    ebx,0x1f
c00281b8:	89 d9                	mov    ecx,ebx
c00281ba:	89 c7                	mov    edi,eax
c00281bc:	d3 ef                	shr    edi,cl
c00281be:	31 db                	xor    ebx,ebx
c00281c0:	85 c9                	test   ecx,ecx
c00281c2:	74 12                	je     c00281d6 <__adddf3+0x1cb>
c00281c4:	be 20 00 00 00       	mov    esi,0x20
c00281c9:	29 ce                	sub    esi,ecx
c00281cb:	89 f1                	mov    ecx,esi
c00281cd:	d3 e0                	shl    eax,cl
c00281cf:	31 db                	xor    ebx,ebx
c00281d1:	85 c0                	test   eax,eax
c00281d3:	0f 95 c3             	setne  bl
c00281d6:	31 c0                	xor    eax,eax
c00281d8:	85 d2                	test   edx,edx
c00281da:	0f 95 c0             	setne  al
c00281dd:	09 c7                	or     edi,eax
c00281df:	09 fb                	or     ebx,edi
c00281e1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281e4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281e7:	01 da                	add    edx,ebx
c00281e9:	83 d6 00             	adc    esi,0x0
c00281ec:	eb 39                	jmp    c0028227 <__adddf3+0x21c>
c00281ee:	be 20 00 00 00       	mov    esi,0x20
c00281f3:	29 de                	sub    esi,ebx
c00281f5:	89 c7                	mov    edi,eax
c00281f7:	89 f1                	mov    ecx,esi
c00281f9:	d3 e7                	shl    edi,cl
c00281fb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00281fe:	89 d7                	mov    edi,edx
c0028200:	88 d9                	mov    cl,bl
c0028202:	d3 ef                	shr    edi,cl
c0028204:	89 f9                	mov    ecx,edi
c0028206:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028209:	09 cf                	or     edi,ecx
c002820b:	88 d9                	mov    cl,bl
c002820d:	d3 e8                	shr    eax,cl
c002820f:	89 f1                	mov    ecx,esi
c0028211:	d3 e2                	shl    edx,cl
c0028213:	85 d2                	test   edx,edx
c0028215:	0f 95 c2             	setne  dl
c0028218:	0f b6 d2             	movzx  edx,dl
c002821b:	09 d7                	or     edi,edx
c002821d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028220:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028223:	01 fa                	add    edx,edi
c0028225:	11 c6                	adc    esi,eax
c0028227:	89 f0                	mov    eax,esi
c0028229:	eb 77                	jmp    c00282a2 <__adddf3+0x297>
c002822b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002822e:	46                   	inc    esi
c002822f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028232:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028238:	75 41                	jne    c002827b <__adddf3+0x270>
c002823a:	89 d3                	mov    ebx,edx
c002823c:	09 c3                	or     ebx,eax
c002823e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028245:	75 27                	jne    c002826e <__adddf3+0x263>
c0028247:	85 db                	test   ebx,ebx
c0028249:	0f 84 fb 03 00 00    	je     c002864a <__adddf3+0x63f>
c002824f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028252:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028255:	0f 84 f5 03 00 00    	je     c0028650 <__adddf3+0x645>
c002825b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002825e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028261:	85 c0                	test   eax,eax
c0028263:	0f 89 91 03 00 00    	jns    c00285fa <__adddf3+0x5ef>
c0028269:	e9 85 03 00 00       	jmp    c00285f3 <__adddf3+0x5e8>
c002826e:	85 db                	test   ebx,ebx
c0028270:	0f 85 da 03 00 00    	jne    c0028650 <__adddf3+0x645>
c0028276:	e9 cf 03 00 00       	jmp    c002864a <__adddf3+0x63f>
c002827b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002827e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028281:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028284:	f7 d1                	not    ecx
c0028286:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002828c:	0f 84 70 03 00 00    	je     c0028602 <__adddf3+0x5f7>
c0028292:	d1 ea                	shr    edx,1
c0028294:	89 c1                	mov    ecx,eax
c0028296:	c1 e1 1f             	shl    ecx,0x1f
c0028299:	09 ca                	or     edx,ecx
c002829b:	d1 e8                	shr    eax,1
c002829d:	e9 6f 03 00 00       	jmp    c0028611 <__adddf3+0x606>
c00282a2:	85 c0                	test   eax,eax
c00282a4:	0f 89 67 03 00 00    	jns    c0028611 <__adddf3+0x606>
c00282aa:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00282ad:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00282b0:	f7 d1                	not    ecx
c00282b2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00282b8:	0f 84 44 03 00 00    	je     c0028602 <__adddf3+0x5f7>
c00282be:	89 d1                	mov    ecx,edx
c00282c0:	d1 e9                	shr    ecx,1
c00282c2:	83 e2 01             	and    edx,0x1
c00282c5:	09 ca                	or     edx,ecx
c00282c7:	89 c1                	mov    ecx,eax
c00282c9:	c1 e1 1f             	shl    ecx,0x1f
c00282cc:	09 ca                	or     edx,ecx
c00282ce:	d1 e8                	shr    eax,1
c00282d0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00282d5:	e9 37 03 00 00       	jmp    c0028611 <__adddf3+0x606>
c00282da:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00282dd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00282e3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00282e6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00282e9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282ef:	29 de                	sub    esi,ebx
c00282f1:	85 f6                	test   esi,esi
c00282f3:	0f 8e bd 00 00 00    	jle    c00283b6 <__adddf3+0x3ab>
c00282f9:	85 db                	test   ebx,ebx
c00282fb:	75 17                	jne    c0028314 <__adddf3+0x309>
c00282fd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028300:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028303:	0f 84 47 03 00 00    	je     c0028650 <__adddf3+0x645>
c0028309:	4e                   	dec    esi
c002830a:	75 20                	jne    c002832c <__adddf3+0x321>
c002830c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002830f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028312:	eb 5b                	jmp    c002836f <__adddf3+0x364>
c0028314:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028317:	f7 d3                	not    ebx
c0028319:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002831f:	0f 84 2b 03 00 00    	je     c0028650 <__adddf3+0x645>
c0028325:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002832c:	83 fe 1f             	cmp    esi,0x1f
c002832f:	7e 49                	jle    c002837a <__adddf3+0x36f>
c0028331:	83 fe 3f             	cmp    esi,0x3f
c0028334:	0f 8f 16 03 00 00    	jg     c0028650 <__adddf3+0x645>
c002833a:	83 e6 1f             	and    esi,0x1f
c002833d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028340:	89 f1                	mov    ecx,esi
c0028342:	d3 ef                	shr    edi,cl
c0028344:	31 db                	xor    ebx,ebx
c0028346:	85 f6                	test   esi,esi
c0028348:	74 13                	je     c002835d <__adddf3+0x352>
c002834a:	b9 20 00 00 00       	mov    ecx,0x20
c002834f:	29 f1                	sub    ecx,esi
c0028351:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028354:	d3 e6                	shl    esi,cl
c0028356:	31 db                	xor    ebx,ebx
c0028358:	85 f6                	test   esi,esi
c002835a:	0f 95 c3             	setne  bl
c002835d:	31 c9                	xor    ecx,ecx
c002835f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028363:	0f 95 c1             	setne  cl
c0028366:	09 cf                	or     edi,ecx
c0028368:	09 fb                	or     ebx,edi
c002836a:	29 da                	sub    edx,ebx
c002836c:	83 d8 00             	sbb    eax,0x0
c002836f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028372:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028375:	e9 aa 01 00 00       	jmp    c0028524 <__adddf3+0x519>
c002837a:	bf 20 00 00 00       	mov    edi,0x20
c002837f:	29 f7                	sub    edi,esi
c0028381:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028384:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028387:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002838a:	d3 e3                	shl    ebx,cl
c002838c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002838f:	89 f1                	mov    ecx,esi
c0028391:	d3 ef                	shr    edi,cl
c0028393:	09 fb                	or     ebx,edi
c0028395:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028398:	89 f1                	mov    ecx,esi
c002839a:	d3 ef                	shr    edi,cl
c002839c:	89 fe                	mov    esi,edi
c002839e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00283a1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00283a4:	d3 e7                	shl    edi,cl
c00283a6:	85 ff                	test   edi,edi
c00283a8:	0f 95 c1             	setne  cl
c00283ab:	0f b6 c9             	movzx  ecx,cl
c00283ae:	09 cb                	or     ebx,ecx
c00283b0:	29 da                	sub    edx,ebx
c00283b2:	19 f0                	sbb    eax,esi
c00283b4:	eb b9                	jmp    c002836f <__adddf3+0x364>
c00283b6:	0f 84 cd 00 00 00    	je     c0028489 <__adddf3+0x47e>
c00283bc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00283bf:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283c2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283c5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00283c9:	75 1b                	jne    c00283e6 <__adddf3+0x3db>
c00283cb:	89 d6                	mov    esi,edx
c00283cd:	09 c6                	or     esi,eax
c00283cf:	0f 84 7b 02 00 00    	je     c0028650 <__adddf3+0x645>
c00283d5:	4b                   	dec    ebx
c00283d6:	75 24                	jne    c00283fc <__adddf3+0x3f1>
c00283d8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00283db:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00283de:	29 d1                	sub    ecx,edx
c00283e0:	19 c6                	sbb    esi,eax
c00283e2:	89 ca                	mov    edx,ecx
c00283e4:	eb 61                	jmp    c0028447 <__adddf3+0x43c>
c00283e6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00283e9:	f7 d6                	not    esi
c00283eb:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283f1:	0f 84 59 02 00 00    	je     c0028650 <__adddf3+0x645>
c00283f7:	0d 00 00 00 80       	or     eax,0x80000000
c00283fc:	83 fb 1f             	cmp    ebx,0x1f
c00283ff:	7e 4d                	jle    c002844e <__adddf3+0x443>
c0028401:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028404:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028407:	83 fb 3f             	cmp    ebx,0x3f
c002840a:	0f 8f 40 02 00 00    	jg     c0028650 <__adddf3+0x645>
c0028410:	83 e3 1f             	and    ebx,0x1f
c0028413:	89 d9                	mov    ecx,ebx
c0028415:	89 c7                	mov    edi,eax
c0028417:	d3 ef                	shr    edi,cl
c0028419:	31 db                	xor    ebx,ebx
c002841b:	85 c9                	test   ecx,ecx
c002841d:	74 12                	je     c0028431 <__adddf3+0x426>
c002841f:	be 20 00 00 00       	mov    esi,0x20
c0028424:	29 ce                	sub    esi,ecx
c0028426:	89 f1                	mov    ecx,esi
c0028428:	d3 e0                	shl    eax,cl
c002842a:	31 db                	xor    ebx,ebx
c002842c:	85 c0                	test   eax,eax
c002842e:	0f 95 c3             	setne  bl
c0028431:	31 c0                	xor    eax,eax
c0028433:	85 d2                	test   edx,edx
c0028435:	0f 95 c0             	setne  al
c0028438:	09 c7                	or     edi,eax
c002843a:	09 fb                	or     ebx,edi
c002843c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002843f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028442:	29 da                	sub    edx,ebx
c0028444:	83 de 00             	sbb    esi,0x0
c0028447:	89 f0                	mov    eax,esi
c0028449:	e9 d6 00 00 00       	jmp    c0028524 <__adddf3+0x519>
c002844e:	be 20 00 00 00       	mov    esi,0x20
c0028453:	29 de                	sub    esi,ebx
c0028455:	89 c7                	mov    edi,eax
c0028457:	89 f1                	mov    ecx,esi
c0028459:	d3 e7                	shl    edi,cl
c002845b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002845e:	89 d7                	mov    edi,edx
c0028460:	88 d9                	mov    cl,bl
c0028462:	d3 ef                	shr    edi,cl
c0028464:	89 f9                	mov    ecx,edi
c0028466:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028469:	09 cf                	or     edi,ecx
c002846b:	88 d9                	mov    cl,bl
c002846d:	d3 e8                	shr    eax,cl
c002846f:	89 f1                	mov    ecx,esi
c0028471:	d3 e2                	shl    edx,cl
c0028473:	85 d2                	test   edx,edx
c0028475:	0f 95 c2             	setne  dl
c0028478:	0f b6 d2             	movzx  edx,dl
c002847b:	09 d7                	or     edi,edx
c002847d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028480:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028483:	29 fa                	sub    edx,edi
c0028485:	19 c6                	sbb    esi,eax
c0028487:	eb be                	jmp    c0028447 <__adddf3+0x43c>
c0028489:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002848c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002848f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028495:	75 6a                	jne    c0028501 <__adddf3+0x4f6>
c0028497:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002849b:	75 58                	jne    c00284f5 <__adddf3+0x4ea>
c002849d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00284a0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00284a3:	89 d6                	mov    esi,edx
c00284a5:	09 c6                	or     esi,eax
c00284a7:	75 17                	jne    c00284c0 <__adddf3+0x4b5>
c00284a9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00284ac:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00284af:	85 db                	test   ebx,ebx
c00284b1:	0f 85 99 01 00 00    	jne    c0028650 <__adddf3+0x645>
c00284b7:	31 ff                	xor    edi,edi
c00284b9:	31 c9                	xor    ecx,ecx
c00284bb:	e9 90 01 00 00       	jmp    c0028650 <__adddf3+0x645>
c00284c0:	85 db                	test   ebx,ebx
c00284c2:	0f 84 88 01 00 00    	je     c0028650 <__adddf3+0x645>
c00284c8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00284cb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00284ce:	85 c0                	test   eax,eax
c00284d0:	79 10                	jns    c00284e2 <__adddf3+0x4d7>
c00284d2:	31 c9                	xor    ecx,ecx
c00284d4:	f7 da                	neg    edx
c00284d6:	0f 95 c1             	setne  cl
c00284d9:	01 c8                	add    eax,ecx
c00284db:	f7 d8                	neg    eax
c00284dd:	e9 2f 01 00 00       	jmp    c0028611 <__adddf3+0x606>
c00284e2:	31 ff                	xor    edi,edi
c00284e4:	31 c9                	xor    ecx,ecx
c00284e6:	89 c3                	mov    ebx,eax
c00284e8:	09 d3                	or     ebx,edx
c00284ea:	0f 84 60 01 00 00    	je     c0028650 <__adddf3+0x645>
c00284f0:	e9 05 01 00 00       	jmp    c00285fa <__adddf3+0x5ef>
c00284f5:	31 ff                	xor    edi,edi
c00284f7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00284fc:	e9 4f 01 00 00       	jmp    c0028650 <__adddf3+0x645>
c0028501:	89 c1                	mov    ecx,eax
c0028503:	89 d0                	mov    eax,edx
c0028505:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028508:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002850b:	89 ca                	mov    edx,ecx
c002850d:	85 c9                	test   ecx,ecx
c002850f:	79 2c                	jns    c002853d <__adddf3+0x532>
c0028511:	31 c9                	xor    ecx,ecx
c0028513:	f7 d8                	neg    eax
c0028515:	0f 95 c1             	setne  cl
c0028518:	01 ca                	add    edx,ecx
c002851a:	f7 da                	neg    edx
c002851c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002851f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028522:	eb 19                	jmp    c002853d <__adddf3+0x532>
c0028524:	85 c0                	test   eax,eax
c0028526:	0f 89 e5 00 00 00    	jns    c0028611 <__adddf3+0x606>
c002852c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028531:	89 c1                	mov    ecx,eax
c0028533:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028536:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028539:	89 d0                	mov    eax,edx
c002853b:	89 ca                	mov    edx,ecx
c002853d:	85 d2                	test   edx,edx
c002853f:	74 59                	je     c002859a <__adddf3+0x58f>
c0028541:	0f bd da             	bsr    ebx,edx
c0028544:	83 f3 1f             	xor    ebx,0x1f
c0028547:	88 d9                	mov    cl,bl
c0028549:	d3 e2                	shl    edx,cl
c002854b:	bf 20 00 00 00       	mov    edi,0x20
c0028550:	89 f9                	mov    ecx,edi
c0028552:	29 d9                	sub    ecx,ebx
c0028554:	89 c6                	mov    esi,eax
c0028556:	d3 ee                	shr    esi,cl
c0028558:	09 d6                	or     esi,edx
c002855a:	88 d9                	mov    cl,bl
c002855c:	d3 e0                	shl    eax,cl
c002855e:	89 c2                	mov    edx,eax
c0028560:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028563:	25 ff 07 00 00       	and    eax,0x7ff
c0028568:	39 d8                	cmp    eax,ebx
c002856a:	7f 22                	jg     c002858e <__adddf3+0x583>
c002856c:	29 c3                	sub    ebx,eax
c002856e:	43                   	inc    ebx
c002856f:	88 d9                	mov    cl,bl
c0028571:	d3 ea                	shr    edx,cl
c0028573:	29 df                	sub    edi,ebx
c0028575:	89 f9                	mov    ecx,edi
c0028577:	89 f0                	mov    eax,esi
c0028579:	d3 e0                	shl    eax,cl
c002857b:	09 c2                	or     edx,eax
c002857d:	89 f0                	mov    eax,esi
c002857f:	88 d9                	mov    cl,bl
c0028581:	d3 e8                	shr    eax,cl
c0028583:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028586:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002858c:	eb 6f                	jmp    c00285fd <__adddf3+0x5f2>
c002858e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028591:	29 d8                	sub    eax,ebx
c0028593:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028596:	89 f0                	mov    eax,esi
c0028598:	eb 59                	jmp    c00285f3 <__adddf3+0x5e8>
c002859a:	85 c0                	test   eax,eax
c002859c:	74 6a                	je     c0028608 <__adddf3+0x5fd>
c002859e:	0f bd c8             	bsr    ecx,eax
c00285a1:	83 f1 1f             	xor    ecx,0x1f
c00285a4:	d3 e0                	shl    eax,cl
c00285a6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00285a9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00285af:	83 c1 20             	add    ecx,0x20
c00285b2:	39 cb                	cmp    ebx,ecx
c00285b4:	7f 35                	jg     c00285eb <__adddf3+0x5e0>
c00285b6:	29 d9                	sub    ecx,ebx
c00285b8:	8d 71 01             	lea    esi,[ecx+0x1]
c00285bb:	83 fe 1f             	cmp    esi,0x1f
c00285be:	7e 09                	jle    c00285c9 <__adddf3+0x5be>
c00285c0:	83 e9 1f             	sub    ecx,0x1f
c00285c3:	d3 e8                	shr    eax,cl
c00285c5:	89 c3                	mov    ebx,eax
c00285c7:	eb 11                	jmp    c00285da <__adddf3+0x5cf>
c00285c9:	b9 20 00 00 00       	mov    ecx,0x20
c00285ce:	29 f1                	sub    ecx,esi
c00285d0:	89 c3                	mov    ebx,eax
c00285d2:	d3 e3                	shl    ebx,cl
c00285d4:	89 f1                	mov    ecx,esi
c00285d6:	d3 e8                	shr    eax,cl
c00285d8:	89 c2                	mov    edx,eax
c00285da:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00285dd:	25 00 f8 ff ff       	and    eax,0xfffff800
c00285e2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00285e5:	89 d0                	mov    eax,edx
c00285e7:	89 da                	mov    edx,ebx
c00285e9:	eb 26                	jmp    c0028611 <__adddf3+0x606>
c00285eb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285ee:	29 cf                	sub    edi,ecx
c00285f0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285f3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00285f8:	eb 17                	jmp    c0028611 <__adddf3+0x606>
c00285fa:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285fd:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028600:	eb 0f                	jmp    c0028611 <__adddf3+0x606>
c0028602:	31 d2                	xor    edx,edx
c0028604:	31 c0                	xor    eax,eax
c0028606:	eb 09                	jmp    c0028611 <__adddf3+0x606>
c0028608:	89 c2                	mov    edx,eax
c002860a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028611:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028614:	c1 e1 14             	shl    ecx,0x14
c0028617:	89 c3                	mov    ebx,eax
c0028619:	c1 eb 0b             	shr    ebx,0xb
c002861c:	09 d9                	or     ecx,ebx
c002861e:	89 d3                	mov    ebx,edx
c0028620:	c1 eb 0b             	shr    ebx,0xb
c0028623:	c1 e0 15             	shl    eax,0x15
c0028626:	09 d8                	or     eax,ebx
c0028628:	89 c7                	mov    edi,eax
c002862a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028630:	0f 95 c0             	setne  al
c0028633:	89 c6                	mov    esi,eax
c0028635:	09 f3                	or     ebx,esi
c0028637:	83 e3 01             	and    ebx,0x1
c002863a:	c1 ea 0a             	shr    edx,0xa
c002863d:	21 da                	and    edx,ebx
c002863f:	89 f8                	mov    eax,edi
c0028641:	01 d0                	add    eax,edx
c0028643:	83 d1 00             	adc    ecx,0x0
c0028646:	89 c7                	mov    edi,eax
c0028648:	eb 06                	jmp    c0028650 <__adddf3+0x645>
c002864a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002864d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028650:	89 f8                	mov    eax,edi
c0028652:	89 ca                	mov    edx,ecx
c0028654:	83 c4 24             	add    esp,0x24
c0028657:	5b                   	pop    ebx
c0028658:	5e                   	pop    esi
c0028659:	5f                   	pop    edi
c002865a:	5d                   	pop    ebp
c002865b:	c3                   	ret    

c002865c <__subdf3>:
c002865c:	55                   	push   ebp
c002865d:	89 e5                	mov    ebp,esp
c002865f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028662:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028665:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002866b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002866e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028671:	5d                   	pop    ebp
c0028672:	e9 94 f9 ff ff       	jmp    c002800b <__adddf3>

c0028677 <__negdf2>:
c0028677:	55                   	push   ebp
c0028678:	89 e5                	mov    ebp,esp
c002867a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002867d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028680:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028686:	5d                   	pop    ebp
c0028687:	c3                   	ret    

c0028688 <__muldf3>:
c0028688:	55                   	push   ebp
c0028689:	89 e5                	mov    ebp,esp
c002868b:	57                   	push   edi
c002868c:	56                   	push   esi
c002868d:	53                   	push   ebx
c002868e:	83 ec 24             	sub    esp,0x24
c0028691:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028694:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028697:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002869a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002869d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00286a0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00286a3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00286a6:	89 c8                	mov    eax,ecx
c00286a8:	c1 f8 14             	sar    eax,0x14
c00286ab:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00286ae:	89 f8                	mov    eax,edi
c00286b0:	89 fb                	mov    ebx,edi
c00286b2:	c1 e3 0b             	shl    ebx,0xb
c00286b5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00286b8:	c1 e1 0b             	shl    ecx,0xb
c00286bb:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00286c1:	c1 e8 15             	shr    eax,0x15
c00286c4:	09 c1                	or     ecx,eax
c00286c6:	89 d6                	mov    esi,edx
c00286c8:	89 d0                	mov    eax,edx
c00286ca:	c1 f8 14             	sar    eax,0x14
c00286cd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00286d0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00286d3:	89 c3                	mov    ebx,eax
c00286d5:	c1 e3 0b             	shl    ebx,0xb
c00286d8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00286db:	c1 e6 0b             	shl    esi,0xb
c00286de:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00286e4:	c1 e8 15             	shr    eax,0x15
c00286e7:	09 c6                	or     esi,eax
c00286e9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00286ec:	25 ff 07 00 00       	and    eax,0x7ff
c00286f1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00286f4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00286f7:	25 ff 07 00 00       	and    eax,0x7ff
c00286fc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00286ff:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028702:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028705:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002870c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002870f:	40                   	inc    eax
c0028710:	a9 fe 07 00 00       	test   eax,0x7fe
c0028715:	0f 85 8d 00 00 00    	jne    c00287a8 <__muldf3+0x120>
c002871b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002871e:	09 c8                	or     eax,ecx
c0028720:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028724:	74 44                	je     c002876a <__muldf3+0xe2>
c0028726:	85 c0                	test   eax,eax
c0028728:	0f 85 31 02 00 00    	jne    c002895f <__muldf3+0x2d7>
c002872e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028731:	40                   	inc    eax
c0028732:	a9 fe 07 00 00       	test   eax,0x7fe
c0028737:	75 13                	jne    c002874c <__muldf3+0xc4>
c0028739:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002873c:	09 f1                	or     ecx,esi
c002873e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028742:	74 22                	je     c0028766 <__muldf3+0xde>
c0028744:	85 c9                	test   ecx,ecx
c0028746:	0f 85 0d 02 00 00    	jne    c0028959 <__muldf3+0x2d1>
c002874c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028750:	0f 89 09 02 00 00    	jns    c002895f <__muldf3+0x2d7>
c0028756:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028759:	05 00 00 00 80       	add    eax,0x80000000
c002875e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028761:	e9 f9 01 00 00       	jmp    c002895f <__muldf3+0x2d7>
c0028766:	85 c9                	test   ecx,ecx
c0028768:	eb 2e                	jmp    c0028798 <__muldf3+0x110>
c002876a:	85 c0                	test   eax,eax
c002876c:	74 20                	je     c002878e <__muldf3+0x106>
c002876e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028771:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028774:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028777:	c1 ef 1f             	shr    edi,0x1f
c002877a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002877d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028780:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028783:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028786:	09 f9                	or     ecx,edi
c0028788:	78 1e                	js     c00287a8 <__muldf3+0x120>
c002878a:	89 c3                	mov    ebx,eax
c002878c:	eb e0                	jmp    c002876e <__muldf3+0xe6>
c002878e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028791:	f7 d0                	not    eax
c0028793:	a9 ff 07 00 00       	test   eax,0x7ff
c0028798:	75 b2                	jne    c002874c <__muldf3+0xc4>
c002879a:	31 ff                	xor    edi,edi
c002879c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00287a3:	e9 b7 01 00 00       	jmp    c002895f <__muldf3+0x2d7>
c00287a8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00287ab:	40                   	inc    eax
c00287ac:	a9 fe 07 00 00       	test   eax,0x7fe
c00287b1:	75 57                	jne    c002880a <__muldf3+0x182>
c00287b3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00287b6:	09 f0                	or     eax,esi
c00287b8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00287bc:	74 23                	je     c00287e1 <__muldf3+0x159>
c00287be:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00287c2:	0f 89 91 01 00 00    	jns    c0028959 <__muldf3+0x2d1>
c00287c8:	85 c0                	test   eax,eax
c00287ca:	0f 85 89 01 00 00    	jne    c0028959 <__muldf3+0x2d1>
c00287d0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00287d3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00287d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00287dc:	e9 7e 01 00 00       	jmp    c002895f <__muldf3+0x2d7>
c00287e1:	85 c0                	test   eax,eax
c00287e3:	75 0c                	jne    c00287f1 <__muldf3+0x169>
c00287e5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00287e9:	0f 89 6a 01 00 00    	jns    c0028959 <__muldf3+0x2d1>
c00287ef:	eb df                	jmp    c00287d0 <__muldf3+0x148>
c00287f1:	01 f6                	add    esi,esi
c00287f3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00287f6:	c1 ea 1f             	shr    edx,0x1f
c00287f9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00287fc:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00287ff:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028802:	09 d6                	or     esi,edx
c0028804:	78 04                	js     c002880a <__muldf3+0x182>
c0028806:	89 c3                	mov    ebx,eax
c0028808:	eb e7                	jmp    c00287f1 <__muldf3+0x169>
c002880a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028810:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028816:	89 c8                	mov    eax,ecx
c0028818:	f7 e6                	mul    esi
c002881a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002881d:	89 c7                	mov    edi,eax
c002881f:	89 c8                	mov    eax,ecx
c0028821:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028824:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028827:	89 c1                	mov    ecx,eax
c0028829:	89 f0                	mov    eax,esi
c002882b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002882e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028831:	89 c6                	mov    esi,eax
c0028833:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028836:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028839:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002883c:	31 c0                	xor    eax,eax
c002883e:	01 f1                	add    ecx,esi
c0028840:	0f 92 c0             	setb   al
c0028843:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028846:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028849:	83 d6 00             	adc    esi,0x0
c002884c:	01 c7                	add    edi,eax
c002884e:	83 d6 00             	adc    esi,0x0
c0028851:	01 ca                	add    edx,ecx
c0028853:	0f 92 c1             	setb   cl
c0028856:	0f b6 c9             	movzx  ecx,cl
c0028859:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002885c:	83 d6 00             	adc    esi,0x0
c002885f:	01 cf                	add    edi,ecx
c0028861:	83 d6 00             	adc    esi,0x0
c0028864:	31 c9                	xor    ecx,ecx
c0028866:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028869:	0f 95 c1             	setne  cl
c002886c:	09 cf                	or     edi,ecx
c002886e:	85 f6                	test   esi,esi
c0028870:	78 0c                	js     c002887e <__muldf3+0x1f6>
c0028872:	01 f6                	add    esi,esi
c0028874:	89 f8                	mov    eax,edi
c0028876:	c1 e8 1f             	shr    eax,0x1f
c0028879:	09 c6                	or     esi,eax
c002887b:	01 ff                	add    edi,edi
c002887d:	4b                   	dec    ebx
c002887e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028884:	0f 8f 85 00 00 00    	jg     c002890f <__muldf3+0x287>
c002888a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028890:	85 db                	test   ebx,ebx
c0028892:	0f 8f 84 00 00 00    	jg     c002891c <__muldf3+0x294>
c0028898:	83 fb cc             	cmp    ebx,0xffffffcc
c002889b:	7c 79                	jl     c0028916 <__muldf3+0x28e>
c002889d:	ba 01 00 00 00       	mov    edx,0x1
c00288a2:	29 da                	sub    edx,ebx
c00288a4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00288aa:	83 fa 1f             	cmp    edx,0x1f
c00288ad:	7e 30                	jle    c00288df <__muldf3+0x257>
c00288af:	83 fa 20             	cmp    edx,0x20
c00288b2:	75 0b                	jne    c00288bf <__muldf3+0x237>
c00288b4:	31 c0                	xor    eax,eax
c00288b6:	85 ff                	test   edi,edi
c00288b8:	0f 95 c0             	setne  al
c00288bb:	89 c7                	mov    edi,eax
c00288bd:	eb 1a                	jmp    c00288d9 <__muldf3+0x251>
c00288bf:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00288c2:	89 f0                	mov    eax,esi
c00288c4:	d3 e0                	shl    eax,cl
c00288c6:	09 f8                	or     eax,edi
c00288c8:	0f 95 c0             	setne  al
c00288cb:	0f b6 c0             	movzx  eax,al
c00288ce:	89 c7                	mov    edi,eax
c00288d0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00288d5:	29 d9                	sub    ecx,ebx
c00288d7:	d3 ee                	shr    esi,cl
c00288d9:	09 f7                	or     edi,esi
c00288db:	31 db                	xor    ebx,ebx
c00288dd:	eb 3b                	jmp    c002891a <__muldf3+0x292>
c00288df:	83 c3 1f             	add    ebx,0x1f
c00288e2:	89 f0                	mov    eax,esi
c00288e4:	88 d9                	mov    cl,bl
c00288e6:	d3 e0                	shl    eax,cl
c00288e8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00288eb:	89 f8                	mov    eax,edi
c00288ed:	88 d1                	mov    cl,dl
c00288ef:	d3 e8                	shr    eax,cl
c00288f1:	89 c1                	mov    ecx,eax
c00288f3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00288f6:	09 c8                	or     eax,ecx
c00288f8:	88 d9                	mov    cl,bl
c00288fa:	d3 e7                	shl    edi,cl
c00288fc:	31 db                	xor    ebx,ebx
c00288fe:	85 ff                	test   edi,edi
c0028900:	0f 95 c3             	setne  bl
c0028903:	89 df                	mov    edi,ebx
c0028905:	09 c7                	or     edi,eax
c0028907:	88 d1                	mov    cl,dl
c0028909:	d3 ee                	shr    esi,cl
c002890b:	31 db                	xor    ebx,ebx
c002890d:	eb 0d                	jmp    c002891c <__muldf3+0x294>
c002890f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028914:	eb 02                	jmp    c0028918 <__muldf3+0x290>
c0028916:	31 db                	xor    ebx,ebx
c0028918:	31 ff                	xor    edi,edi
c002891a:	31 f6                	xor    esi,esi
c002891c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002891f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028922:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028927:	09 c3                	or     ebx,eax
c0028929:	c1 e3 14             	shl    ebx,0x14
c002892c:	89 f0                	mov    eax,esi
c002892e:	c1 e8 0b             	shr    eax,0xb
c0028931:	09 c3                	or     ebx,eax
c0028933:	89 f8                	mov    eax,edi
c0028935:	c1 e8 0b             	shr    eax,0xb
c0028938:	c1 e6 15             	shl    esi,0x15
c002893b:	09 c6                	or     esi,eax
c002893d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028943:	0f 95 c1             	setne  cl
c0028946:	09 c8                	or     eax,ecx
c0028948:	83 e0 01             	and    eax,0x1
c002894b:	c1 ef 0a             	shr    edi,0xa
c002894e:	21 c7                	and    edi,eax
c0028950:	01 f7                	add    edi,esi
c0028952:	83 d3 00             	adc    ebx,0x0
c0028955:	89 da                	mov    edx,ebx
c0028957:	eb 03                	jmp    c002895c <__muldf3+0x2d4>
c0028959:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002895c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002895f:	89 f8                	mov    eax,edi
c0028961:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028964:	83 c4 24             	add    esp,0x24
c0028967:	5b                   	pop    ebx
c0028968:	5e                   	pop    esi
c0028969:	5f                   	pop    edi
c002896a:	5d                   	pop    ebp
c002896b:	c3                   	ret    

c002896c <__divdf3>:
c002896c:	55                   	push   ebp
c002896d:	89 e5                	mov    ebp,esp
c002896f:	57                   	push   edi
c0028970:	56                   	push   esi
c0028971:	53                   	push   ebx
c0028972:	83 ec 2c             	sub    esp,0x2c
c0028975:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028978:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002897b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002897e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028981:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028984:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028987:	89 ce                	mov    esi,ecx
c0028989:	89 c8                	mov    eax,ecx
c002898b:	c1 f8 14             	sar    eax,0x14
c002898e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028991:	89 f8                	mov    eax,edi
c0028993:	89 fb                	mov    ebx,edi
c0028995:	c1 e3 0b             	shl    ebx,0xb
c0028998:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002899b:	c1 e6 0b             	shl    esi,0xb
c002899e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00289a4:	c1 e8 15             	shr    eax,0x15
c00289a7:	09 c6                	or     esi,eax
c00289a9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00289ac:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00289af:	89 c2                	mov    edx,eax
c00289b1:	c1 fa 14             	sar    edx,0x14
c00289b4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00289b7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00289ba:	89 de                	mov    esi,ebx
c00289bc:	c1 e6 0b             	shl    esi,0xb
c00289bf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00289c2:	c1 e0 0b             	shl    eax,0xb
c00289c5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00289ca:	c1 eb 15             	shr    ebx,0x15
c00289cd:	09 d8                	or     eax,ebx
c00289cf:	89 c2                	mov    edx,eax
c00289d1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00289d4:	25 ff 07 00 00       	and    eax,0x7ff
c00289d9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00289dc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00289df:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00289e5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00289e8:	29 d8                	sub    eax,ebx
c00289ea:	05 ff 03 00 00       	add    eax,0x3ff
c00289ef:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00289f2:	46                   	inc    esi
c00289f3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00289f9:	0f 85 a5 00 00 00    	jne    c0028aa4 <__divdf3+0x138>
c00289ff:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028a02:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028a05:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028a09:	74 2a                	je     c0028a35 <__divdf3+0xc9>
c0028a0b:	85 f6                	test   esi,esi
c0028a0d:	0f 85 cc 02 00 00    	jne    c0028cdf <__divdf3+0x373>
c0028a13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028a16:	40                   	inc    eax
c0028a17:	a9 fe 07 00 00       	test   eax,0x7fe
c0028a1c:	75 26                	jne    c0028a44 <__divdf3+0xd8>
c0028a1e:	85 db                	test   ebx,ebx
c0028a20:	74 22                	je     c0028a44 <__divdf3+0xd8>
c0028a22:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028a25:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028a28:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028a2b:	09 d0                	or     eax,edx
c0028a2d:	0f 85 ac 02 00 00    	jne    c0028cdf <__divdf3+0x373>
c0028a33:	eb 63                	jmp    c0028a98 <__divdf3+0x12c>
c0028a35:	85 f6                	test   esi,esi
c0028a37:	75 22                	jne    c0028a5b <__divdf3+0xef>
c0028a39:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028a3c:	40                   	inc    eax
c0028a3d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028a42:	74 36                	je     c0028a7a <__divdf3+0x10e>
c0028a44:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028a48:	0f 89 91 02 00 00    	jns    c0028cdf <__divdf3+0x373>
c0028a4e:	89 f8                	mov    eax,edi
c0028a50:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028a56:	e9 80 02 00 00       	jmp    c0028cdb <__divdf3+0x36f>
c0028a5b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028a5e:	01 f6                	add    esi,esi
c0028a60:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028a63:	c1 ef 1f             	shr    edi,0x1f
c0028a66:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028a69:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028a6c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028a6f:	09 f7                	or     edi,esi
c0028a71:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028a74:	78 2e                	js     c0028aa4 <__divdf3+0x138>
c0028a76:	89 c8                	mov    eax,ecx
c0028a78:	eb e1                	jmp    c0028a5b <__divdf3+0xef>
c0028a7a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028a7d:	09 d0                	or     eax,edx
c0028a7f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028a83:	74 0f                	je     c0028a94 <__divdf3+0x128>
c0028a85:	85 c0                	test   eax,eax
c0028a87:	74 bb                	je     c0028a44 <__divdf3+0xd8>
c0028a89:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028a8c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028a8f:	e9 4b 02 00 00       	jmp    c0028cdf <__divdf3+0x373>
c0028a94:	85 c0                	test   eax,eax
c0028a96:	75 ac                	jne    c0028a44 <__divdf3+0xd8>
c0028a98:	31 ff                	xor    edi,edi
c0028a9a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028a9f:	e9 3b 02 00 00       	jmp    c0028cdf <__divdf3+0x373>
c0028aa4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028aa7:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028aaa:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028ab0:	75 6b                	jne    c0028b1d <__divdf3+0x1b1>
c0028ab2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028ab5:	09 d6                	or     esi,edx
c0028ab7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028abb:	74 28                	je     c0028ae5 <__divdf3+0x179>
c0028abd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028ac0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028ac3:	85 f6                	test   esi,esi
c0028ac5:	0f 85 14 02 00 00    	jne    c0028cdf <__divdf3+0x373>
c0028acb:	31 ff                	xor    edi,edi
c0028acd:	31 c9                	xor    ecx,ecx
c0028acf:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028ad2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028ad5:	0f 89 04 02 00 00    	jns    c0028cdf <__divdf3+0x373>
c0028adb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028ae0:	e9 fa 01 00 00       	jmp    c0028cdf <__divdf3+0x373>
c0028ae5:	85 f6                	test   esi,esi
c0028ae7:	75 1b                	jne    c0028b04 <__divdf3+0x198>
c0028ae9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028aec:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028aef:	25 00 00 00 80       	and    eax,0x80000000
c0028af4:	31 c9                	xor    ecx,ecx
c0028af6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028afb:	89 cf                	mov    edi,ecx
c0028afd:	89 c1                	mov    ecx,eax
c0028aff:	e9 db 01 00 00       	jmp    c0028cdf <__divdf3+0x373>
c0028b04:	01 d2                	add    edx,edx
c0028b06:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028b09:	c1 eb 1f             	shr    ebx,0x1f
c0028b0c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028b0f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028b12:	8d 48 01             	lea    ecx,[eax+0x1]
c0028b15:	09 da                	or     edx,ebx
c0028b17:	78 04                	js     c0028b1d <__divdf3+0x1b1>
c0028b19:	89 c8                	mov    eax,ecx
c0028b1b:	eb e7                	jmp    c0028b04 <__divdf3+0x198>
c0028b1d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028b20:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028b26:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028b2c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028b2f:	39 d6                	cmp    esi,edx
c0028b31:	77 0d                	ja     c0028b40 <__divdf3+0x1d4>
c0028b33:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028b36:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028b39:	72 1b                	jb     c0028b56 <__divdf3+0x1ea>
c0028b3b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028b3e:	75 16                	jne    c0028b56 <__divdf3+0x1ea>
c0028b40:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028b43:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028b46:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028b49:	83 de 00             	sbb    esi,0x0
c0028b4c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028b4f:	ba 01 00 00 00       	mov    edx,0x1
c0028b54:	eb 02                	jmp    c0028b58 <__divdf3+0x1ec>
c0028b56:	31 d2                	xor    edx,edx
c0028b58:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028b5f:	31 ff                	xor    edi,edi
c0028b61:	01 ff                	add    edi,edi
c0028b63:	89 d1                	mov    ecx,edx
c0028b65:	c1 e9 1f             	shr    ecx,0x1f
c0028b68:	09 cf                	or     edi,ecx
c0028b6a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028b6d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028b70:	89 da                	mov    edx,ebx
c0028b72:	89 f3                	mov    ebx,esi
c0028b74:	8d 34 36             	lea    esi,[esi+esi*1]
c0028b77:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028b7a:	c1 e9 1f             	shr    ecx,0x1f
c0028b7d:	09 ce                	or     esi,ecx
c0028b7f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028b82:	01 c9                	add    ecx,ecx
c0028b84:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028b87:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028b8a:	85 db                	test   ebx,ebx
c0028b8c:	78 29                	js     c0028bb7 <__divdf3+0x24b>
c0028b8e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028b91:	72 07                	jb     c0028b9a <__divdf3+0x22e>
c0028b93:	75 3c                	jne    c0028bd1 <__divdf3+0x265>
c0028b95:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028b98:	77 37                	ja     c0028bd1 <__divdf3+0x265>
c0028b9a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028b9d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028ba0:	31 d2                	xor    edx,edx
c0028ba2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028ba5:	0f 97 c2             	seta   dl
c0028ba8:	29 d6                	sub    esi,edx
c0028baa:	89 d9                	mov    ecx,ebx
c0028bac:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028baf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028bb2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028bb5:	eb 17                	jmp    c0028bce <__divdf3+0x262>
c0028bb7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028bba:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028bbd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028bc0:	0f 97 c1             	seta   cl
c0028bc3:	0f b6 c9             	movzx  ecx,cl
c0028bc6:	29 ce                	sub    esi,ecx
c0028bc8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028bcb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028bce:	83 ca 01             	or     edx,0x1
c0028bd1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028bd4:	75 8b                	jne    c0028b61 <__divdf3+0x1f5>
c0028bd6:	c1 e7 09             	shl    edi,0x9
c0028bd9:	89 d1                	mov    ecx,edx
c0028bdb:	c1 e9 17             	shr    ecx,0x17
c0028bde:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028be1:	09 f3                	or     ebx,esi
c0028be3:	0f 95 c3             	setne  bl
c0028be6:	0f b6 db             	movzx  ebx,bl
c0028be9:	c1 e2 09             	shl    edx,0x9
c0028bec:	09 d3                	or     ebx,edx
c0028bee:	89 ca                	mov    edx,ecx
c0028bf0:	09 fa                	or     edx,edi
c0028bf2:	78 0c                	js     c0028c00 <__divdf3+0x294>
c0028bf4:	01 d2                	add    edx,edx
c0028bf6:	89 d9                	mov    ecx,ebx
c0028bf8:	c1 e9 1f             	shr    ecx,0x1f
c0028bfb:	09 ca                	or     edx,ecx
c0028bfd:	01 db                	add    ebx,ebx
c0028bff:	48                   	dec    eax
c0028c00:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028c05:	0f 8f 83 00 00 00    	jg     c0028c8e <__divdf3+0x322>
c0028c0b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028c11:	85 c0                	test   eax,eax
c0028c13:	0f 8f 82 00 00 00    	jg     c0028c9b <__divdf3+0x32f>
c0028c19:	83 f8 cc             	cmp    eax,0xffffffcc
c0028c1c:	7c 77                	jl     c0028c95 <__divdf3+0x329>
c0028c1e:	be 01 00 00 00       	mov    esi,0x1
c0028c23:	29 c6                	sub    esi,eax
c0028c25:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028c2b:	83 fe 1f             	cmp    esi,0x1f
c0028c2e:	7e 2f                	jle    c0028c5f <__divdf3+0x2f3>
c0028c30:	83 fe 20             	cmp    esi,0x20
c0028c33:	75 0a                	jne    c0028c3f <__divdf3+0x2d3>
c0028c35:	85 db                	test   ebx,ebx
c0028c37:	0f 95 c3             	setne  bl
c0028c3a:	0f b6 db             	movzx  ebx,bl
c0028c3d:	eb 1a                	jmp    c0028c59 <__divdf3+0x2ed>
c0028c3f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028c42:	89 d7                	mov    edi,edx
c0028c44:	d3 e7                	shl    edi,cl
c0028c46:	89 f9                	mov    ecx,edi
c0028c48:	09 d9                	or     ecx,ebx
c0028c4a:	0f 95 c3             	setne  bl
c0028c4d:	0f b6 db             	movzx  ebx,bl
c0028c50:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028c55:	29 c1                	sub    ecx,eax
c0028c57:	d3 ea                	shr    edx,cl
c0028c59:	09 d3                	or     ebx,edx
c0028c5b:	31 c0                	xor    eax,eax
c0028c5d:	eb 3a                	jmp    c0028c99 <__divdf3+0x32d>
c0028c5f:	83 c0 1f             	add    eax,0x1f
c0028c62:	89 d7                	mov    edi,edx
c0028c64:	88 c1                	mov    cl,al
c0028c66:	d3 e7                	shl    edi,cl
c0028c68:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028c6b:	89 df                	mov    edi,ebx
c0028c6d:	89 f1                	mov    ecx,esi
c0028c6f:	d3 ef                	shr    edi,cl
c0028c71:	89 f9                	mov    ecx,edi
c0028c73:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028c76:	09 cf                	or     edi,ecx
c0028c78:	88 c1                	mov    cl,al
c0028c7a:	d3 e3                	shl    ebx,cl
c0028c7c:	85 db                	test   ebx,ebx
c0028c7e:	0f 95 c3             	setne  bl
c0028c81:	0f b6 db             	movzx  ebx,bl
c0028c84:	09 fb                	or     ebx,edi
c0028c86:	89 f1                	mov    ecx,esi
c0028c88:	d3 ea                	shr    edx,cl
c0028c8a:	31 c0                	xor    eax,eax
c0028c8c:	eb 0d                	jmp    c0028c9b <__divdf3+0x32f>
c0028c8e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028c93:	eb 02                	jmp    c0028c97 <__divdf3+0x32b>
c0028c95:	31 c0                	xor    eax,eax
c0028c97:	31 db                	xor    ebx,ebx
c0028c99:	31 d2                	xor    edx,edx
c0028c9b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028c9e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028ca1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028ca7:	09 c8                	or     eax,ecx
c0028ca9:	c1 e0 14             	shl    eax,0x14
c0028cac:	89 d1                	mov    ecx,edx
c0028cae:	c1 e9 0b             	shr    ecx,0xb
c0028cb1:	09 c8                	or     eax,ecx
c0028cb3:	89 c6                	mov    esi,eax
c0028cb5:	89 d9                	mov    ecx,ebx
c0028cb7:	c1 e9 0b             	shr    ecx,0xb
c0028cba:	c1 e2 15             	shl    edx,0x15
c0028cbd:	09 ca                	or     edx,ecx
c0028cbf:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028cc5:	0f 95 c0             	setne  al
c0028cc8:	09 c1                	or     ecx,eax
c0028cca:	83 e1 01             	and    ecx,0x1
c0028ccd:	c1 eb 0a             	shr    ebx,0xa
c0028cd0:	21 cb                	and    ebx,ecx
c0028cd2:	01 d3                	add    ebx,edx
c0028cd4:	89 d8                	mov    eax,ebx
c0028cd6:	83 d6 00             	adc    esi,0x0
c0028cd9:	89 f2                	mov    edx,esi
c0028cdb:	89 c7                	mov    edi,eax
c0028cdd:	89 d1                	mov    ecx,edx
c0028cdf:	89 f8                	mov    eax,edi
c0028ce1:	89 ca                	mov    edx,ecx
c0028ce3:	83 c4 2c             	add    esp,0x2c
c0028ce6:	5b                   	pop    ebx
c0028ce7:	5e                   	pop    esi
c0028ce8:	5f                   	pop    edi
c0028ce9:	5d                   	pop    ebp
c0028cea:	c3                   	ret    

c0028ceb <__floatsidf>:
c0028ceb:	55                   	push   ebp
c0028cec:	89 e5                	mov    ebp,esp
c0028cee:	56                   	push   esi
c0028cef:	53                   	push   ebx
c0028cf0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028cf3:	85 db                	test   ebx,ebx
c0028cf5:	7e 15                	jle    c0028d0c <__floatsidf+0x21>
c0028cf7:	0f bd cb             	bsr    ecx,ebx
c0028cfa:	83 f1 1f             	xor    ecx,0x1f
c0028cfd:	d3 e3                	shl    ebx,cl
c0028cff:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028d05:	b8 1e 04 00 00       	mov    eax,0x41e
c0028d0a:	eb 21                	jmp    c0028d2d <__floatsidf+0x42>
c0028d0c:	b8 00 00 00 00       	mov    eax,0x0
c0028d11:	ba 00 00 00 00       	mov    edx,0x0
c0028d16:	74 2a                	je     c0028d42 <__floatsidf+0x57>
c0028d18:	f7 db                	neg    ebx
c0028d1a:	0f bd cb             	bsr    ecx,ebx
c0028d1d:	83 f1 1f             	xor    ecx,0x1f
c0028d20:	d3 e3                	shl    ebx,cl
c0028d22:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028d28:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028d2d:	29 c8                	sub    eax,ecx
c0028d2f:	c1 e0 14             	shl    eax,0x14
c0028d32:	89 c1                	mov    ecx,eax
c0028d34:	89 de                	mov    esi,ebx
c0028d36:	c1 ee 0b             	shr    esi,0xb
c0028d39:	09 f1                	or     ecx,esi
c0028d3b:	89 ca                	mov    edx,ecx
c0028d3d:	c1 e3 15             	shl    ebx,0x15
c0028d40:	89 d8                	mov    eax,ebx
c0028d42:	5b                   	pop    ebx
c0028d43:	5e                   	pop    esi
c0028d44:	5d                   	pop    ebp
c0028d45:	c3                   	ret    

c0028d46 <__floatunsidf>:
c0028d46:	55                   	push   ebp
c0028d47:	89 e5                	mov    ebp,esp
c0028d49:	56                   	push   esi
c0028d4a:	53                   	push   ebx
c0028d4b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028d4e:	85 db                	test   ebx,ebx
c0028d50:	74 2a                	je     c0028d7c <__floatunsidf+0x36>
c0028d52:	0f bd cb             	bsr    ecx,ebx
c0028d55:	83 f1 1f             	xor    ecx,0x1f
c0028d58:	d3 e3                	shl    ebx,cl
c0028d5a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028d60:	b8 1e 04 00 00       	mov    eax,0x41e
c0028d65:	29 c8                	sub    eax,ecx
c0028d67:	c1 e0 14             	shl    eax,0x14
c0028d6a:	89 c1                	mov    ecx,eax
c0028d6c:	89 de                	mov    esi,ebx
c0028d6e:	c1 ee 0b             	shr    esi,0xb
c0028d71:	09 f1                	or     ecx,esi
c0028d73:	89 ca                	mov    edx,ecx
c0028d75:	c1 e3 15             	shl    ebx,0x15
c0028d78:	89 d8                	mov    eax,ebx
c0028d7a:	eb 04                	jmp    c0028d80 <__floatunsidf+0x3a>
c0028d7c:	31 c0                	xor    eax,eax
c0028d7e:	31 d2                	xor    edx,edx
c0028d80:	5b                   	pop    ebx
c0028d81:	5e                   	pop    esi
c0028d82:	5d                   	pop    ebp
c0028d83:	c3                   	ret    

c0028d84 <__fixdfsi>:
c0028d84:	55                   	push   ebp
c0028d85:	89 e5                	mov    ebp,esp
c0028d87:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028d8a:	89 d1                	mov    ecx,edx
c0028d8c:	c1 e1 0b             	shl    ecx,0xb
c0028d8f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028d95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028d98:	c1 e8 15             	shr    eax,0x15
c0028d9b:	09 c1                	or     ecx,eax
c0028d9d:	c1 fa 14             	sar    edx,0x14
c0028da0:	78 1f                	js     c0028dc1 <__fixdfsi+0x3d>
c0028da2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028da8:	31 c0                	xor    eax,eax
c0028daa:	83 fa 1e             	cmp    edx,0x1e
c0028dad:	77 40                	ja     c0028def <__fixdfsi+0x6b>
c0028daf:	89 c8                	mov    eax,ecx
c0028db1:	0d 00 00 00 80       	or     eax,0x80000000
c0028db6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028dbb:	29 d1                	sub    ecx,edx
c0028dbd:	d3 e8                	shr    eax,cl
c0028dbf:	eb 2e                	jmp    c0028def <__fixdfsi+0x6b>
c0028dc1:	31 c0                	xor    eax,eax
c0028dc3:	81 c2 01 04 00 00    	add    edx,0x401
c0028dc9:	78 24                	js     c0028def <__fixdfsi+0x6b>
c0028dcb:	83 fa 1e             	cmp    edx,0x1e
c0028dce:	7e 09                	jle    c0028dd9 <__fixdfsi+0x55>
c0028dd0:	83 fa 1f             	cmp    edx,0x1f
c0028dd3:	75 18                	jne    c0028ded <__fixdfsi+0x69>
c0028dd5:	85 c9                	test   ecx,ecx
c0028dd7:	75 14                	jne    c0028ded <__fixdfsi+0x69>
c0028dd9:	89 c8                	mov    eax,ecx
c0028ddb:	0d 00 00 00 80       	or     eax,0x80000000
c0028de0:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028de5:	29 d1                	sub    ecx,edx
c0028de7:	d3 e8                	shr    eax,cl
c0028de9:	f7 d8                	neg    eax
c0028deb:	eb 02                	jmp    c0028def <__fixdfsi+0x6b>
c0028ded:	31 c0                	xor    eax,eax
c0028def:	5d                   	pop    ebp
c0028df0:	c3                   	ret    

c0028df1 <__fixunsdfsi>:
c0028df1:	55                   	push   ebp
c0028df2:	89 e5                	mov    ebp,esp
c0028df4:	53                   	push   ebx
c0028df5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028df8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028dfb:	89 d3                	mov    ebx,edx
c0028dfd:	c1 fb 14             	sar    ebx,0x14
c0028e00:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028e06:	31 c0                	xor    eax,eax
c0028e08:	83 fb 1f             	cmp    ebx,0x1f
c0028e0b:	77 1d                	ja     c0028e2a <__fixunsdfsi+0x39>
c0028e0d:	89 d0                	mov    eax,edx
c0028e0f:	c1 e0 0b             	shl    eax,0xb
c0028e12:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028e17:	c1 e9 15             	shr    ecx,0x15
c0028e1a:	09 c8                	or     eax,ecx
c0028e1c:	0d 00 00 00 80       	or     eax,0x80000000
c0028e21:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028e26:	29 d9                	sub    ecx,ebx
c0028e28:	d3 e8                	shr    eax,cl
c0028e2a:	5b                   	pop    ebx
c0028e2b:	5d                   	pop    ebp
c0028e2c:	c3                   	ret    

c0028e2d <__cmpdf2>:
c0028e2d:	55                   	push   ebp
c0028e2e:	89 e5                	mov    ebp,esp
c0028e30:	57                   	push   edi
c0028e31:	56                   	push   esi
c0028e32:	53                   	push   ebx
c0028e33:	83 ec 0c             	sub    esp,0xc
c0028e36:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028e39:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028e3c:	89 ca                	mov    edx,ecx
c0028e3e:	c1 ea 14             	shr    edx,0x14
c0028e41:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028e47:	89 cb                	mov    ebx,ecx
c0028e49:	c1 fb 1f             	sar    ebx,0x1f
c0028e4c:	31 da                	xor    edx,ebx
c0028e4e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028e51:	89 df                	mov    edi,ebx
c0028e53:	c1 e7 0b             	shl    edi,0xb
c0028e56:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028e59:	c1 e1 0b             	shl    ecx,0xb
c0028e5c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028e62:	c1 eb 15             	shr    ebx,0x15
c0028e65:	09 d9                	or     ecx,ebx
c0028e67:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028e6a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028e6d:	89 ce                	mov    esi,ecx
c0028e6f:	c1 ee 14             	shr    esi,0x14
c0028e72:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028e78:	89 cb                	mov    ebx,ecx
c0028e7a:	c1 fb 1f             	sar    ebx,0x1f
c0028e7d:	31 de                	xor    esi,ebx
c0028e7f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028e82:	89 df                	mov    edi,ebx
c0028e84:	c1 e7 0b             	shl    edi,0xb
c0028e87:	c1 e1 0b             	shl    ecx,0xb
c0028e8a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028e90:	c1 eb 15             	shr    ebx,0x15
c0028e93:	09 d9                	or     ecx,ebx
c0028e95:	89 d3                	mov    ebx,edx
c0028e97:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028e9d:	43                   	inc    ebx
c0028e9e:	83 fb 01             	cmp    ebx,0x1
c0028ea1:	77 08                	ja     c0028eab <__cmpdf2+0x7e>
c0028ea3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028ea6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028ea9:	75 68                	jne    c0028f13 <__cmpdf2+0xe6>
c0028eab:	89 f3                	mov    ebx,esi
c0028ead:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028eb3:	43                   	inc    ebx
c0028eb4:	83 fb 01             	cmp    ebx,0x1
c0028eb7:	77 06                	ja     c0028ebf <__cmpdf2+0x92>
c0028eb9:	89 fb                	mov    ebx,edi
c0028ebb:	09 cb                	or     ebx,ecx
c0028ebd:	75 54                	jne    c0028f13 <__cmpdf2+0xe6>
c0028ebf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028ec2:	09 f8                	or     eax,edi
c0028ec4:	09 c8                	or     eax,ecx
c0028ec6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028ec9:	75 12                	jne    c0028edd <__cmpdf2+0xb0>
c0028ecb:	8d 42 01             	lea    eax,[edx+0x1]
c0028ece:	83 f8 01             	cmp    eax,0x1
c0028ed1:	77 0a                	ja     c0028edd <__cmpdf2+0xb0>
c0028ed3:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028ed6:	31 c0                	xor    eax,eax
c0028ed8:	83 fb 01             	cmp    ebx,0x1
c0028edb:	76 36                	jbe    c0028f13 <__cmpdf2+0xe6>
c0028edd:	b8 01 00 00 00       	mov    eax,0x1
c0028ee2:	39 f2                	cmp    edx,esi
c0028ee4:	7f 2d                	jg     c0028f13 <__cmpdf2+0xe6>
c0028ee6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028eeb:	7c 26                	jl     c0028f13 <__cmpdf2+0xe6>
c0028eed:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028ef0:	77 07                	ja     c0028ef9 <__cmpdf2+0xcc>
c0028ef2:	72 16                	jb     c0028f0a <__cmpdf2+0xdd>
c0028ef4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028ef7:	76 0a                	jbe    c0028f03 <__cmpdf2+0xd6>
c0028ef9:	89 d0                	mov    eax,edx
c0028efb:	c1 f8 1f             	sar    eax,0x1f
c0028efe:	83 c8 01             	or     eax,0x1
c0028f01:	eb 10                	jmp    c0028f13 <__cmpdf2+0xe6>
c0028f03:	b8 00 00 00 00       	mov    eax,0x0
c0028f08:	73 09                	jae    c0028f13 <__cmpdf2+0xe6>
c0028f0a:	89 d0                	mov    eax,edx
c0028f0c:	c1 f8 1f             	sar    eax,0x1f
c0028f0f:	83 e0 02             	and    eax,0x2
c0028f12:	48                   	dec    eax
c0028f13:	83 c4 0c             	add    esp,0xc
c0028f16:	5b                   	pop    ebx
c0028f17:	5e                   	pop    esi
c0028f18:	5f                   	pop    edi
c0028f19:	5d                   	pop    ebp
c0028f1a:	c3                   	ret    

c0028f1b <__eqdf2>:
c0028f1b:	55                   	push   ebp
c0028f1c:	89 e5                	mov    ebp,esp
c0028f1e:	50                   	push   eax
c0028f1f:	6a 01                	push   0x1
c0028f21:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028f24:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028f27:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028f2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028f2d:	e8 fb fe ff ff       	call   c0028e2d <__cmpdf2>
c0028f32:	83 c4 18             	add    esp,0x18
c0028f35:	c9                   	leave  
c0028f36:	c3                   	ret    

c0028f37 <__nedf2>:
c0028f37:	eb e2                	jmp    c0028f1b <__eqdf2>

c0028f39 <__gtdf2>:
c0028f39:	55                   	push   ebp
c0028f3a:	89 e5                	mov    ebp,esp
c0028f3c:	50                   	push   eax
c0028f3d:	6a ff                	push   0xffffffff
c0028f3f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028f42:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028f45:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028f48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028f4b:	e8 dd fe ff ff       	call   c0028e2d <__cmpdf2>
c0028f50:	83 c4 18             	add    esp,0x18
c0028f53:	c9                   	leave  
c0028f54:	c3                   	ret    

c0028f55 <__gedf2>:
c0028f55:	eb e2                	jmp    c0028f39 <__gtdf2>

c0028f57 <__ltdf2>:
c0028f57:	eb c2                	jmp    c0028f1b <__eqdf2>

c0028f59 <__ledf2>:
c0028f59:	eb c0                	jmp    c0028f1b <__eqdf2>

c0028f5b <__truncdfsf2>:
c0028f5b:	55                   	push   ebp
c0028f5c:	89 e5                	mov    ebp,esp
c0028f5e:	57                   	push   edi
c0028f5f:	56                   	push   esi
c0028f60:	53                   	push   ebx
c0028f61:	83 ec 0c             	sub    esp,0xc
c0028f64:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028f67:	89 d1                	mov    ecx,edx
c0028f69:	c1 f9 14             	sar    ecx,0x14
c0028f6c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028f6f:	89 df                	mov    edi,ebx
c0028f71:	c1 e7 0b             	shl    edi,0xb
c0028f74:	89 d0                	mov    eax,edx
c0028f76:	c1 e0 0b             	shl    eax,0xb
c0028f79:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028f7e:	c1 eb 15             	shr    ebx,0x15
c0028f81:	09 d8                	or     eax,ebx
c0028f83:	89 cb                	mov    ebx,ecx
c0028f85:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028f8b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028f91:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028f97:	0f 86 9e 00 00 00    	jbe    c002903b <__truncdfsf2+0xe0>
c0028f9d:	85 db                	test   ebx,ebx
c0028f9f:	75 0a                	jne    c0028fab <__truncdfsf2+0x50>
c0028fa1:	c1 fa 17             	sar    edx,0x17
c0028fa4:	30 d2                	xor    dl,dl
c0028fa6:	e9 84 00 00 00       	jmp    c002902f <__truncdfsf2+0xd4>
c0028fab:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028fb1:	83 fe 83             	cmp    esi,0xffffff83
c0028fb4:	7d 4b                	jge    c0029001 <__truncdfsf2+0xa6>
c0028fb6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028fbb:	29 f1                	sub    ecx,esi
c0028fbd:	83 f9 1f             	cmp    ecx,0x1f
c0028fc0:	7f 6b                	jg     c002902d <__truncdfsf2+0xd2>
c0028fc2:	0d 00 00 00 80       	or     eax,0x80000000
c0028fc7:	89 c3                	mov    ebx,eax
c0028fc9:	d3 eb                	shr    ebx,cl
c0028fcb:	be 01 00 00 00       	mov    esi,0x1
c0028fd0:	d3 e6                	shl    esi,cl
c0028fd2:	4e                   	dec    esi
c0028fd3:	21 f0                	and    eax,esi
c0028fd5:	09 f8                	or     eax,edi
c0028fd7:	0f 95 c0             	setne  al
c0028fda:	0f b6 c0             	movzx  eax,al
c0028fdd:	09 c3                	or     ebx,eax
c0028fdf:	89 d9                	mov    ecx,ebx
c0028fe1:	c1 e9 08             	shr    ecx,0x8
c0028fe4:	f6 c3 7f             	test   bl,0x7f
c0028fe7:	0f 95 c0             	setne  al
c0028fea:	09 c8                	or     eax,ecx
c0028fec:	83 e0 01             	and    eax,0x1
c0028fef:	c1 eb 07             	shr    ebx,0x7
c0028ff2:	21 c3                	and    ebx,eax
c0028ff4:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028ffa:	09 d1                	or     ecx,edx
c0028ffc:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028fff:	eb 76                	jmp    c0029077 <__truncdfsf2+0x11c>
c0029001:	83 c6 80             	add    esi,0xffffff80
c0029004:	7e 1d                	jle    c0029023 <__truncdfsf2+0xc8>
c0029006:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002900c:	75 0b                	jne    c0029019 <__truncdfsf2+0xbe>
c002900e:	09 f8                	or     eax,edi
c0029010:	74 09                	je     c002901b <__truncdfsf2+0xc0>
c0029012:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0029017:	eb 02                	jmp    c002901b <__truncdfsf2+0xc0>
c0029019:	31 c0                	xor    eax,eax
c002901b:	c1 fa 17             	sar    edx,0x17
c002901e:	80 ca ff             	or     dl,0xff
c0029021:	eb 0e                	jmp    c0029031 <__truncdfsf2+0xd6>
c0029023:	c1 fa 1f             	sar    edx,0x1f
c0029026:	c1 e2 08             	shl    edx,0x8
c0029029:	09 ca                	or     edx,ecx
c002902b:	eb 04                	jmp    c0029031 <__truncdfsf2+0xd6>
c002902d:	31 d2                	xor    edx,edx
c002902f:	31 c0                	xor    eax,eax
c0029031:	c1 e2 17             	shl    edx,0x17
c0029034:	c1 e8 08             	shr    eax,0x8
c0029037:	09 d0                	or     eax,edx
c0029039:	eb 3c                	jmp    c0029077 <__truncdfsf2+0x11c>
c002903b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0029041:	89 ca                	mov    edx,ecx
c0029043:	c1 fa 0b             	sar    edx,0xb
c0029046:	c1 e2 08             	shl    edx,0x8
c0029049:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002904c:	31 db                	xor    ebx,ebx
c002904e:	85 ff                	test   edi,edi
c0029050:	0f 95 c3             	setne  bl
c0029053:	09 d8                	or     eax,ebx
c0029055:	89 c3                	mov    ebx,eax
c0029057:	c1 eb 08             	shr    ebx,0x8
c002905a:	a8 7f                	test   al,0x7f
c002905c:	0f 95 c2             	setne  dl
c002905f:	89 d6                	mov    esi,edx
c0029061:	09 de                	or     esi,ebx
c0029063:	83 e6 01             	and    esi,0x1
c0029066:	c1 e8 07             	shr    eax,0x7
c0029069:	21 f0                	and    eax,esi
c002906b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002906e:	09 ca                	or     edx,ecx
c0029070:	c1 e2 17             	shl    edx,0x17
c0029073:	09 da                	or     edx,ebx
c0029075:	01 d0                	add    eax,edx
c0029077:	83 c4 0c             	add    esp,0xc
c002907a:	5b                   	pop    ebx
c002907b:	5e                   	pop    esi
c002907c:	5f                   	pop    edi
c002907d:	5d                   	pop    ebp
c002907e:	c3                   	ret    

c002907f <__extendsfdf2>:
c002907f:	55                   	push   ebp
c0029080:	89 e5                	mov    ebp,esp
c0029082:	57                   	push   edi
c0029083:	56                   	push   esi
c0029084:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0029087:	89 d1                	mov    ecx,edx
c0029089:	c1 f9 17             	sar    ecx,0x17
c002908c:	c1 e2 08             	shl    edx,0x8
c002908f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0029095:	89 c8                	mov    eax,ecx
c0029097:	80 e4 f8             	and    ah,0xf8
c002909a:	8d 71 01             	lea    esi,[ecx+0x1]
c002909d:	81 e6 fe 00 00 00    	and    esi,0xfe
c00290a3:	75 27                	jne    c00290cc <__extendsfdf2+0x4d>
c00290a5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00290ab:	75 18                	jne    c00290c5 <__extendsfdf2+0x46>
c00290ad:	85 d2                	test   edx,edx
c00290af:	74 20                	je     c00290d1 <__extendsfdf2+0x52>
c00290b1:	41                   	inc    ecx
c00290b2:	01 d2                	add    edx,edx
c00290b4:	79 fb                	jns    c00290b1 <__extendsfdf2+0x32>
c00290b6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00290bc:	29 c8                	sub    eax,ecx
c00290be:	05 81 03 00 00       	add    eax,0x381
c00290c3:	eb 0c                	jmp    c00290d1 <__extendsfdf2+0x52>
c00290c5:	05 00 07 00 00       	add    eax,0x700
c00290ca:	eb 05                	jmp    c00290d1 <__extendsfdf2+0x52>
c00290cc:	05 80 03 00 00       	add    eax,0x380
c00290d1:	c1 e0 14             	shl    eax,0x14
c00290d4:	89 c1                	mov    ecx,eax
c00290d6:	89 d0                	mov    eax,edx
c00290d8:	c1 e8 0b             	shr    eax,0xb
c00290db:	09 c1                	or     ecx,eax
c00290dd:	c1 e2 15             	shl    edx,0x15
c00290e0:	89 d0                	mov    eax,edx
c00290e2:	89 ca                	mov    edx,ecx
c00290e4:	5e                   	pop    esi
c00290e5:	5f                   	pop    edi
c00290e6:	5d                   	pop    ebp
c00290e7:	c3                   	ret    
c00290e8:	66 90                	xchg   ax,ax
c00290ea:	66 90                	xchg   ax,ax
c00290ec:	66 90                	xchg   ax,ax
c00290ee:	66 90                	xchg   ax,ax

c00290f0 <fabs>:
c00290f0:	83 ec 0c             	sub    esp,0xc
c00290f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00290fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00290fe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0029103:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0029107:	dd 04 24             	fld    QWORD PTR [esp]
c002910a:	83 c4 0c             	add    esp,0xc
c002910d:	c3                   	ret    
c002910e:	66 90                	xchg   ax,ax

c0029110 <lrint>:
c0029110:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0029114:	83 ec 04             	sub    esp,0x4
c0029117:	db 1c 24             	fistp  DWORD PTR [esp]
c002911a:	58                   	pop    eax
c002911b:	c3                   	ret    

c002911c <lrintf>:
c002911c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0029120:	83 ec 04             	sub    esp,0x4
c0029123:	db 1c 24             	fistp  DWORD PTR [esp]
c0029126:	58                   	pop    eax
c0029127:	c3                   	ret    

Disassembly of section .init:

c0029128 <_init>:
c0029128:	55                   	push   ebp
c0029129:	89 e5                	mov    ebp,esp
c002912b:	e8 e8 6f fd ff       	call   c0000118 <frame_dummy>
c0029130:	e8 5b e0 ff ff       	call   c0027190 <__do_global_ctors_aux>
c0029135:	5d                   	pop    ebp
c0029136:	c3                   	ret    

Disassembly of section .fini:

c0029137 <_fini>:
c0029137:	55                   	push   ebp
c0029138:	89 e5                	mov    ebp,esp
c002913a:	e8 69 6f fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002913f:	5d                   	pop    ebp
c0029140:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0029142 <Computer::~Computer()>:
c0029142:	83 ec 0c             	sub    esp,0xc
c0029145:	ba 68 ad 02 c0       	mov    edx,0xc002ad68
c002914a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002914e:	89 10                	mov    DWORD PTR [eax],edx
c0029150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029154:	83 ec 0c             	sub    esp,0xc
c0029157:	50                   	push   eax
c0029158:	e8 39 b0 fe ff       	call   c0014196 <Device::~Device()>
c002915d:	83 c4 10             	add    esp,0x10
c0029160:	90                   	nop
c0029161:	83 c4 0c             	add    esp,0xc
c0029164:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0029166 <Computer::~Computer()>:
c0029166:	83 ec 0c             	sub    esp,0xc
c0029169:	83 ec 0c             	sub    esp,0xc
c002916c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029170:	e8 cd ff ff ff       	call   c0029142 <Computer::~Computer()>
c0029175:	83 c4 10             	add    esp,0x10
c0029178:	83 ec 08             	sub    esp,0x8
c002917b:	68 ec 01 00 00       	push   0x1ec
c0029180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029184:	e8 26 9c fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029189:	83 c4 10             	add    esp,0x10
c002918c:	83 c4 0c             	add    esp,0xc
c002918f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0029190 <idleCommon()>:
c0029190:	83 ec 0c             	sub    esp,0xc
c0029193:	fa                   	cli    
c0029194:	ff 05 48 26 03 c0    	inc    DWORD PTR ds:0xc0032648
c002919a:	e8 45 55 ff ff       	call   c001e6e4 <schedule()>
c002919f:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c00291a4:	48                   	dec    eax
c00291a5:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c00291aa:	75 01                	jne    c00291ad <idleCommon()+0x1d>
c00291ac:	fb                   	sti    
c00291ad:	83 c4 0c             	add    esp,0xc
c00291b0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00291b2 <LinkedList<UnixFile>::~LinkedList()>:
c00291b2:	90                   	nop
c00291b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00291b4 <LinkedList<UnixFile>::LinkedList()>:
c00291b4:	83 ec 0c             	sub    esp,0xc
c00291b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291f7:	83 ec 0c             	sub    esp,0xc
c00291fa:	68 26 b0 02 c0       	push   0xc002b026
c00291ff:	e8 8b 9c fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0029204:	83 c4 10             	add    esp,0x10
c0029207:	90                   	nop
c0029208:	83 c4 0c             	add    esp,0xc
c002920b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002920c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002920c:	83 ec 0c             	sub    esp,0xc
c002920f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029214:	75 10                	jne    c0029226 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029216:	83 ec 0c             	sub    esp,0xc
c0029219:	68 40 b0 02 c0       	push   0xc002b040
c002921e:	e8 d4 16 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0029223:	83 c4 10             	add    esp,0x10
c0029226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922a:	8b 00                	mov    eax,DWORD PTR [eax]
c002922c:	85 c0                	test   eax,eax
c002922e:	74 34                	je     c0029264 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029234:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029237:	85 c0                	test   eax,eax
c0029239:	74 29                	je     c0029264 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002923b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002923f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029242:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029246:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029251:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029258:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002925b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029262:	eb 65                	jmp    c00292c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029268:	8b 00                	mov    eax,DWORD PTR [eax]
c002926a:	85 c0                	test   eax,eax
c002926c:	75 4b                	jne    c00292b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002926e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029272:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029275:	85 c0                	test   eax,eax
c0029277:	75 40                	jne    c00292b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002927d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029281:	89 10                	mov    DWORD PTR [eax],edx
c0029283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029287:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002928b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002928e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029295:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002929c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292a3:	85 c0                	test   eax,eax
c00292a5:	74 22                	je     c00292c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00292a7:	83 ec 0c             	sub    esp,0xc
c00292aa:	68 62 b0 02 c0       	push   0xc002b062
c00292af:	e8 43 16 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00292b4:	83 c4 10             	add    esp,0x10
c00292b7:	eb 10                	jmp    c00292c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00292b9:	83 ec 0c             	sub    esp,0xc
c00292bc:	68 6c b0 02 c0       	push   0xc002b06c
c00292c1:	e8 31 16 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00292c6:	83 c4 10             	add    esp,0x10
c00292c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292d0:	8d 50 01             	lea    edx,[eax+0x1]
c00292d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00292da:	90                   	nop
c00292db:	83 c4 0c             	add    esp,0xc
c00292de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00292e0 <LinkedList<UnixFile>::getFirstElement()>:
c00292e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00292e6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00292e8 <LinkedList<UnixFile>::removeFirst()>:
c00292e8:	83 ec 0c             	sub    esp,0xc
c00292eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00292f1:	85 c0                	test   eax,eax
c00292f3:	75 12                	jne    c0029307 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00292f5:	83 ec 0c             	sub    esp,0xc
c00292f8:	68 78 b0 02 c0       	push   0xc002b078
c00292fd:	e8 f5 15 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0029302:	83 c4 10             	add    esp,0x10
c0029305:	eb 7e                	jmp    c0029385 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002930b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002930e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029311:	85 c0                	test   eax,eax
c0029313:	74 10                	je     c0029325 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029315:	83 ec 0c             	sub    esp,0xc
c0029318:	68 c3 b0 02 c0       	push   0xc002b0c3
c002931d:	e8 d5 15 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0029322:	83 c4 10             	add    esp,0x10
c0029325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029329:	8b 00                	mov    eax,DWORD PTR [eax]
c002932b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002932e:	85 c0                	test   eax,eax
c0029330:	75 33                	jne    c0029365 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029336:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002933c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029340:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002934b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002934e:	83 f8 01             	cmp    eax,0x1
c0029351:	74 21                	je     c0029374 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029353:	83 ec 0c             	sub    esp,0xc
c0029356:	68 9c b0 02 c0       	push   0xc002b09c
c002935b:	e8 97 15 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0029360:	83 c4 10             	add    esp,0x10
c0029363:	eb 0f                	jmp    c0029374 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029369:	8b 00                	mov    eax,DWORD PTR [eax]
c002936b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002936e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029372:	89 10                	mov    DWORD PTR [eax],edx
c0029374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029378:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002937b:	8d 50 ff             	lea    edx,[eax-0x1]
c002937e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029382:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029385:	83 c4 0c             	add    esp,0xc
c0029388:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002938a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002938a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002938e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029391:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029392 <DriverlessDevice::~DriverlessDevice()>:
c0029392:	ba 44 b8 02 c0       	mov    edx,0xc002b844
c0029397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002939b:	89 10                	mov    DWORD PTR [eax],edx
c002939d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293a1:	50                   	push   eax
c00293a2:	e8 ef ad fe ff       	call   c0014196 <Device::~Device()>
c00293a7:	83 c4 04             	add    esp,0x4
c00293aa:	90                   	nop
c00293ab:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00293ac <DriverlessDevice::~DriverlessDevice()>:
c00293ac:	83 ec 0c             	sub    esp,0xc
c00293af:	83 ec 0c             	sub    esp,0xc
c00293b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293b6:	e8 d7 ff ff ff       	call   c0029392 <DriverlessDevice::~DriverlessDevice()>
c00293bb:	83 c4 10             	add    esp,0x10
c00293be:	83 ec 08             	sub    esp,0x8
c00293c1:	68 58 01 00 00       	push   0x158
c00293c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293ca:	e8 e0 99 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c00293cf:	83 c4 10             	add    esp,0x10
c00293d2:	83 c4 0c             	add    esp,0xc
c00293d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00293d6 <LinkedList<Device>::addElement(Device*)>:
c00293d6:	83 ec 0c             	sub    esp,0xc
c00293d9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00293de:	75 10                	jne    c00293f0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00293e0:	83 ec 0c             	sub    esp,0xc
c00293e3:	68 40 b0 02 c0       	push   0xc002b040
c00293e8:	e8 0a 15 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00293ed:	83 c4 10             	add    esp,0x10
c00293f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00293f6:	85 c0                	test   eax,eax
c00293f8:	74 3a                	je     c0029434 <LinkedList<Device>::addElement(Device*)+0x5e>
c00293fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029401:	85 c0                	test   eax,eax
c0029403:	74 2f                	je     c0029434 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029409:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002940c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029410:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002941a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002941e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029425:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029428:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029432:	eb 68                	jmp    c002949c <LinkedList<Device>::addElement(Device*)+0xc6>
c0029434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029438:	8b 00                	mov    eax,DWORD PTR [eax]
c002943a:	85 c0                	test   eax,eax
c002943c:	75 4e                	jne    c002948c <LinkedList<Device>::addElement(Device*)+0xb6>
c002943e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029445:	85 c0                	test   eax,eax
c0029447:	75 43                	jne    c002948c <LinkedList<Device>::addElement(Device*)+0xb6>
c0029449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002944d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029451:	89 10                	mov    DWORD PTR [eax],edx
c0029453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029457:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002945b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029462:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029465:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002946f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029473:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029476:	85 c0                	test   eax,eax
c0029478:	74 22                	je     c002949c <LinkedList<Device>::addElement(Device*)+0xc6>
c002947a:	83 ec 0c             	sub    esp,0xc
c002947d:	68 62 b0 02 c0       	push   0xc002b062
c0029482:	e8 70 14 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0029487:	83 c4 10             	add    esp,0x10
c002948a:	eb 10                	jmp    c002949c <LinkedList<Device>::addElement(Device*)+0xc6>
c002948c:	83 ec 0c             	sub    esp,0xc
c002948f:	68 6c b0 02 c0       	push   0xc002b06c
c0029494:	e8 5e 14 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0029499:	83 c4 10             	add    esp,0x10
c002949c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294a3:	8d 50 01             	lea    edx,[eax+0x1]
c00294a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294aa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00294ad:	90                   	nop
c00294ae:	83 c4 0c             	add    esp,0xc
c00294b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00294b2 <LinkedList<Device>::LinkedList()>:
c00294b2:	83 ec 0c             	sub    esp,0xc
c00294b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ce:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00294d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00294f5:	83 ec 0c             	sub    esp,0xc
c00294f8:	68 26 b0 02 c0       	push   0xc002b026
c00294fd:	e8 8d 99 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c0029502:	83 c4 10             	add    esp,0x10
c0029505:	90                   	nop
c0029506:	83 c4 0c             	add    esp,0xc
c0029509:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002950a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002950a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002950e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029510:	85 c0                	test   eax,eax
c0029512:	75 0e                	jne    c0029522 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002951b:	85 c0                	test   eax,eax
c002951d:	75 03                	jne    c0029522 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002951f:	b0 01                	mov    al,0x1
c0029521:	c3                   	ret    
c0029522:	b0 00                	mov    al,0x0
c0029524:	90                   	nop
c0029525:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029526 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002952a:	8b 00                	mov    eax,DWORD PTR [eax]
c002952c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002952e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002952e:	83 ec 0c             	sub    esp,0xc
c0029531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029535:	8b 00                	mov    eax,DWORD PTR [eax]
c0029537:	85 c0                	test   eax,eax
c0029539:	75 15                	jne    c0029550 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002953b:	83 ec 0c             	sub    esp,0xc
c002953e:	68 78 b0 02 c0       	push   0xc002b078
c0029543:	e8 af 13 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0029548:	83 c4 10             	add    esp,0x10
c002954b:	e9 88 00 00 00       	jmp    c00295d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029557:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002955a:	85 c0                	test   eax,eax
c002955c:	0f 95 c0             	setne  al
c002955f:	84 c0                	test   al,al
c0029561:	74 10                	je     c0029573 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029563:	83 ec 0c             	sub    esp,0xc
c0029566:	68 c3 b0 02 c0       	push   0xc002b0c3
c002956b:	e8 87 13 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0029570:	83 c4 10             	add    esp,0x10
c0029573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029577:	8b 00                	mov    eax,DWORD PTR [eax]
c0029579:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002957c:	85 c0                	test   eax,eax
c002957e:	0f 94 c0             	sete   al
c0029581:	84 c0                	test   al,al
c0029583:	74 33                	je     c00295b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029589:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002958f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029593:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002959a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002959e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295a1:	83 f8 01             	cmp    eax,0x1
c00295a4:	74 21                	je     c00295c7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00295a6:	83 ec 0c             	sub    esp,0xc
c00295a9:	68 9c b0 02 c0       	push   0xc002b09c
c00295ae:	e8 44 13 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00295b3:	83 c4 10             	add    esp,0x10
c00295b6:	eb 0f                	jmp    c00295c7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00295b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00295be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00295c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c5:	89 10                	mov    DWORD PTR [eax],edx
c00295c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295ce:	8d 50 ff             	lea    edx,[eax-0x1]
c00295d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00295d8:	83 c4 0c             	add    esp,0xc
c00295db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00295dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00295dc:	83 ec 0c             	sub    esp,0xc
c00295df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00295e4:	75 10                	jne    c00295f6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00295e6:	83 ec 0c             	sub    esp,0xc
c00295e9:	68 40 b0 02 c0       	push   0xc002b040
c00295ee:	e8 04 13 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00295f3:	83 c4 10             	add    esp,0x10
c00295f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00295fc:	85 c0                	test   eax,eax
c00295fe:	74 34                	je     c0029634 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029604:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029607:	85 c0                	test   eax,eax
c0029609:	74 29                	je     c0029634 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002960b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029612:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029616:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002961d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029621:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002962b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029632:	eb 65                	jmp    c0029699 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029638:	8b 00                	mov    eax,DWORD PTR [eax]
c002963a:	85 c0                	test   eax,eax
c002963c:	75 4b                	jne    c0029689 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002963e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029642:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029645:	85 c0                	test   eax,eax
c0029647:	75 40                	jne    c0029689 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002964d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029651:	89 10                	mov    DWORD PTR [eax],edx
c0029653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002965b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002965e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029662:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029665:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002966c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029670:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029673:	85 c0                	test   eax,eax
c0029675:	74 22                	je     c0029699 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029677:	83 ec 0c             	sub    esp,0xc
c002967a:	68 62 b0 02 c0       	push   0xc002b062
c002967f:	e8 73 12 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0029684:	83 c4 10             	add    esp,0x10
c0029687:	eb 10                	jmp    c0029699 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029689:	83 ec 0c             	sub    esp,0xc
c002968c:	68 6c b0 02 c0       	push   0xc002b06c
c0029691:	e8 61 12 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0029696:	83 c4 10             	add    esp,0x10
c0029699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002969d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00296a0:	8d 50 01             	lea    edx,[eax+0x1]
c00296a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00296aa:	90                   	nop
c00296ab:	83 c4 0c             	add    esp,0xc
c00296ae:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00296b0 <ACPI::~ACPI()>:
c00296b0:	83 ec 0c             	sub    esp,0xc
c00296b3:	ba 70 c2 02 c0       	mov    edx,0xc002c270
c00296b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296bc:	89 10                	mov    DWORD PTR [eax],edx
c00296be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c2:	83 ec 0c             	sub    esp,0xc
c00296c5:	50                   	push   eax
c00296c6:	e8 cb aa fe ff       	call   c0014196 <Device::~Device()>
c00296cb:	83 c4 10             	add    esp,0x10
c00296ce:	90                   	nop
c00296cf:	83 c4 0c             	add    esp,0xc
c00296d2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00296d4 <ACPI::~ACPI()>:
c00296d4:	83 ec 0c             	sub    esp,0xc
c00296d7:	83 ec 0c             	sub    esp,0xc
c00296da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296de:	e8 cd ff ff ff       	call   c00296b0 <ACPI::~ACPI()>
c00296e3:	83 c4 10             	add    esp,0x10
c00296e6:	83 ec 08             	sub    esp,0x8
c00296e9:	68 68 12 00 00       	push   0x1268
c00296ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296f2:	e8 b8 96 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c00296f7:	83 c4 10             	add    esp,0x10
c00296fa:	83 c4 0c             	add    esp,0xc
c00296fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00296fe <LinkedList<Device>::~LinkedList()>:
c00296fe:	90                   	nop
c00296ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029700 <LinkedList<Device>::isEmpty()>:
c0029700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029704:	8b 00                	mov    eax,DWORD PTR [eax]
c0029706:	85 c0                	test   eax,eax
c0029708:	75 0e                	jne    c0029718 <LinkedList<Device>::isEmpty()+0x18>
c002970a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002970e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029711:	85 c0                	test   eax,eax
c0029713:	75 03                	jne    c0029718 <LinkedList<Device>::isEmpty()+0x18>
c0029715:	b0 01                	mov    al,0x1
c0029717:	c3                   	ret    
c0029718:	b0 00                	mov    al,0x0
c002971a:	90                   	nop
c002971b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002971c <LinkedList<Device>::getFirstElement()>:
c002971c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029720:	8b 00                	mov    eax,DWORD PTR [eax]
c0029722:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029724 <LinkedList<Device>::removeFirst()>:
c0029724:	83 ec 0c             	sub    esp,0xc
c0029727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002972b:	8b 00                	mov    eax,DWORD PTR [eax]
c002972d:	85 c0                	test   eax,eax
c002972f:	75 15                	jne    c0029746 <LinkedList<Device>::removeFirst()+0x22>
c0029731:	83 ec 0c             	sub    esp,0xc
c0029734:	68 78 b0 02 c0       	push   0xc002b078
c0029739:	e8 b9 11 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c002973e:	83 c4 10             	add    esp,0x10
c0029741:	e9 87 00 00 00       	jmp    c00297cd <LinkedList<Device>::removeFirst()+0xa9>
c0029746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002974a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002974d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029753:	85 c0                	test   eax,eax
c0029755:	74 10                	je     c0029767 <LinkedList<Device>::removeFirst()+0x43>
c0029757:	83 ec 0c             	sub    esp,0xc
c002975a:	68 c3 b0 02 c0       	push   0xc002b0c3
c002975f:	e8 93 11 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c0029764:	83 c4 10             	add    esp,0x10
c0029767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002976b:	8b 00                	mov    eax,DWORD PTR [eax]
c002976d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029773:	85 c0                	test   eax,eax
c0029775:	75 33                	jne    c00297aa <LinkedList<Device>::removeFirst()+0x86>
c0029777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002977b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029785:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002978c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029790:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029793:	83 f8 01             	cmp    eax,0x1
c0029796:	74 24                	je     c00297bc <LinkedList<Device>::removeFirst()+0x98>
c0029798:	83 ec 0c             	sub    esp,0xc
c002979b:	68 9c b0 02 c0       	push   0xc002b09c
c00297a0:	e8 52 11 ff ff       	call   c001a8f7 <Krnl::panic(char const*)>
c00297a5:	83 c4 10             	add    esp,0x10
c00297a8:	eb 12                	jmp    c00297bc <LinkedList<Device>::removeFirst()+0x98>
c00297aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00297b0:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00297b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ba:	89 10                	mov    DWORD PTR [eax],edx
c00297bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00297c3:	8d 50 ff             	lea    edx,[eax-0x1]
c00297c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00297cd:	83 c4 0c             	add    esp,0xc
c00297d0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00297d2 <CPU::~CPU()>:
c00297d2:	83 ec 0c             	sub    esp,0xc
c00297d5:	ba 60 c6 02 c0       	mov    edx,0xc002c660
c00297da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297de:	89 10                	mov    DWORD PTR [eax],edx
c00297e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e4:	83 ec 0c             	sub    esp,0xc
c00297e7:	50                   	push   eax
c00297e8:	e8 a9 a9 fe ff       	call   c0014196 <Device::~Device()>
c00297ed:	83 c4 10             	add    esp,0x10
c00297f0:	90                   	nop
c00297f1:	83 c4 0c             	add    esp,0xc
c00297f4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00297f6 <CPU::~CPU()>:
c00297f6:	83 ec 0c             	sub    esp,0xc
c00297f9:	83 ec 0c             	sub    esp,0xc
c00297fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029800:	e8 cd ff ff ff       	call   c00297d2 <CPU::~CPU()>
c0029805:	83 c4 10             	add    esp,0x10
c0029808:	83 ec 08             	sub    esp,0x8
c002980b:	68 98 11 00 00       	push   0x1198
c0029810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029814:	e8 96 95 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029819:	83 c4 10             	add    esp,0x10
c002981c:	83 c4 0c             	add    esp,0xc
c002981f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029820 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029820:	90                   	nop
c0029821:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029822 <ThreadControlBlock::ThreadControlBlock()>:
c0029822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029826:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002982d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029831:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002983c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029847:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002984e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029852:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029859:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002985d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029861:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029865:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029869:	90                   	nop
c002986a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002986c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002986c:	83 ec 0c             	sub    esp,0xc
c002986f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029873:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002987d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029888:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002988f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029893:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002989d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00298a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298a8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00298af:	83 ec 0c             	sub    esp,0xc
c00298b2:	68 26 b0 02 c0       	push   0xc002b026
c00298b7:	e8 d3 95 fe ff       	call   c0012e8f <Dbg::kprintf(char const*, ...)>
c00298bc:	83 c4 10             	add    esp,0x10
c00298bf:	90                   	nop
c00298c0:	83 c4 0c             	add    esp,0xc
c00298c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00298c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00298c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00298c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00298cb:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00298cc <Vm::_FPUState::_FPUState()>:
c00298cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00298d0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00298d7:	90                   	nop
c00298d8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00298da <PCI::~PCI()>:
c00298da:	83 ec 0c             	sub    esp,0xc
c00298dd:	ba 64 d7 02 c0       	mov    edx,0xc002d764
c00298e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298e6:	89 10                	mov    DWORD PTR [eax],edx
c00298e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ec:	83 ec 0c             	sub    esp,0xc
c00298ef:	50                   	push   eax
c00298f0:	e8 71 a2 fe ff       	call   c0013b66 <Bus::~Bus()>
c00298f5:	83 c4 10             	add    esp,0x10
c00298f8:	90                   	nop
c00298f9:	83 c4 0c             	add    esp,0xc
c00298fc:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00298fe <PCI::~PCI()>:
c00298fe:	83 ec 0c             	sub    esp,0xc
c0029901:	83 ec 0c             	sub    esp,0xc
c0029904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029908:	e8 cd ff ff ff       	call   c00298da <PCI::~PCI()>
c002990d:	83 c4 10             	add    esp,0x10
c0029910:	83 ec 08             	sub    esp,0x8
c0029913:	68 58 01 00 00       	push   0x158
c0029918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002991c:	e8 8e 94 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029921:	83 c4 10             	add    esp,0x10
c0029924:	83 c4 0c             	add    esp,0xc
c0029927:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029928 <IDE::~IDE()>:
c0029928:	83 ec 0c             	sub    esp,0xc
c002992b:	ba c8 d9 02 c0       	mov    edx,0xc002d9c8
c0029930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029934:	89 10                	mov    DWORD PTR [eax],edx
c0029936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002993a:	83 ec 0c             	sub    esp,0xc
c002993d:	50                   	push   eax
c002993e:	e8 47 ad fe ff       	call   c001468a <HardDiskController::~HardDiskController()>
c0029943:	83 c4 10             	add    esp,0x10
c0029946:	90                   	nop
c0029947:	83 c4 0c             	add    esp,0xc
c002994a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002994c <IDE::~IDE()>:
c002994c:	83 ec 0c             	sub    esp,0xc
c002994f:	83 ec 0c             	sub    esp,0xc
c0029952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029956:	e8 cd ff ff ff       	call   c0029928 <IDE::~IDE()>
c002995b:	83 c4 10             	add    esp,0x10
c002995e:	83 ec 08             	sub    esp,0x8
c0029961:	68 70 02 00 00       	push   0x270
c0029966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002996a:	e8 40 94 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c002996f:	83 c4 10             	add    esp,0x10
c0029972:	83 c4 0c             	add    esp,0xc
c0029975:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029976 <SATABus::~SATABus()>:
c0029976:	83 ec 0c             	sub    esp,0xc
c0029979:	ba a8 da 02 c0       	mov    edx,0xc002daa8
c002997e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029982:	89 10                	mov    DWORD PTR [eax],edx
c0029984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029988:	83 ec 0c             	sub    esp,0xc
c002998b:	50                   	push   eax
c002998c:	e8 f9 ac fe ff       	call   c001468a <HardDiskController::~HardDiskController()>
c0029991:	83 c4 10             	add    esp,0x10
c0029994:	90                   	nop
c0029995:	83 c4 0c             	add    esp,0xc
c0029998:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002999a <SATABus::~SATABus()>:
c002999a:	83 ec 0c             	sub    esp,0xc
c002999d:	83 ec 0c             	sub    esp,0xc
c00299a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299a4:	e8 cd ff ff ff       	call   c0029976 <SATABus::~SATABus()>
c00299a9:	83 c4 10             	add    esp,0x10
c00299ac:	83 ec 08             	sub    esp,0x8
c00299af:	68 64 01 00 00       	push   0x164
c00299b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299b8:	e8 f2 93 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c00299bd:	83 c4 10             	add    esp,0x10
c00299c0:	83 c4 0c             	add    esp,0xc
c00299c3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00299c4 <ATA::~ATA()>:
c00299c4:	83 ec 0c             	sub    esp,0xc
c00299c7:	ba f4 da 02 c0       	mov    edx,0xc002daf4
c00299cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299d0:	89 10                	mov    DWORD PTR [eax],edx
c00299d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299d6:	83 ec 0c             	sub    esp,0xc
c00299d9:	50                   	push   eax
c00299da:	e8 9d ad fe ff       	call   c001477c <PhysicalDisk::~PhysicalDisk()>
c00299df:	83 c4 10             	add    esp,0x10
c00299e2:	90                   	nop
c00299e3:	83 c4 0c             	add    esp,0xc
c00299e6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00299e8 <ATA::~ATA()>:
c00299e8:	83 ec 0c             	sub    esp,0xc
c00299eb:	83 ec 0c             	sub    esp,0xc
c00299ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299f2:	e8 cd ff ff ff       	call   c00299c4 <ATA::~ATA()>
c00299f7:	83 c4 10             	add    esp,0x10
c00299fa:	83 ec 08             	sub    esp,0x8
c00299fd:	68 7c 01 00 00       	push   0x17c
c0029a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a06:	e8 a4 93 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029a0b:	83 c4 10             	add    esp,0x10
c0029a0e:	83 c4 0c             	add    esp,0xc
c0029a11:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029a12 <ATAPI::~ATAPI()>:
c0029a12:	83 ec 0c             	sub    esp,0xc
c0029a15:	ba 2c db 02 c0       	mov    edx,0xc002db2c
c0029a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a1e:	89 10                	mov    DWORD PTR [eax],edx
c0029a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a24:	83 ec 0c             	sub    esp,0xc
c0029a27:	50                   	push   eax
c0029a28:	e8 4f ad fe ff       	call   c001477c <PhysicalDisk::~PhysicalDisk()>
c0029a2d:	83 c4 10             	add    esp,0x10
c0029a30:	90                   	nop
c0029a31:	83 c4 0c             	add    esp,0xc
c0029a34:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029a36 <ATAPI::~ATAPI()>:
c0029a36:	83 ec 0c             	sub    esp,0xc
c0029a39:	83 ec 0c             	sub    esp,0xc
c0029a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a40:	e8 cd ff ff ff       	call   c0029a12 <ATAPI::~ATAPI()>
c0029a45:	83 c4 10             	add    esp,0x10
c0029a48:	83 ec 08             	sub    esp,0x8
c0029a4b:	68 80 01 00 00       	push   0x180
c0029a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a54:	e8 56 93 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029a59:	83 c4 10             	add    esp,0x10
c0029a5c:	83 c4 0c             	add    esp,0xc
c0029a5f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029a60 <SATA::~SATA()>:
c0029a60:	83 ec 0c             	sub    esp,0xc
c0029a63:	ba e0 db 02 c0       	mov    edx,0xc002dbe0
c0029a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a6c:	89 10                	mov    DWORD PTR [eax],edx
c0029a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a72:	83 ec 0c             	sub    esp,0xc
c0029a75:	50                   	push   eax
c0029a76:	e8 01 ad fe ff       	call   c001477c <PhysicalDisk::~PhysicalDisk()>
c0029a7b:	83 c4 10             	add    esp,0x10
c0029a7e:	90                   	nop
c0029a7f:	83 c4 0c             	add    esp,0xc
c0029a82:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029a84 <SATA::~SATA()>:
c0029a84:	83 ec 0c             	sub    esp,0xc
c0029a87:	83 ec 0c             	sub    esp,0xc
c0029a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a8e:	e8 cd ff ff ff       	call   c0029a60 <SATA::~SATA()>
c0029a93:	83 c4 10             	add    esp,0x10
c0029a96:	83 ec 08             	sub    esp,0x8
c0029a99:	68 7c 01 00 00       	push   0x17c
c0029a9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aa2:	e8 08 93 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029aa7:	83 c4 10             	add    esp,0x10
c0029aaa:	83 c4 0c             	add    esp,0xc
c0029aad:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0029aae <SATAPI::~SATAPI()>:
c0029aae:	83 ec 0c             	sub    esp,0xc
c0029ab1:	ba bc dc 02 c0       	mov    edx,0xc002dcbc
c0029ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aba:	89 10                	mov    DWORD PTR [eax],edx
c0029abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ac0:	83 ec 0c             	sub    esp,0xc
c0029ac3:	50                   	push   eax
c0029ac4:	e8 b3 ac fe ff       	call   c001477c <PhysicalDisk::~PhysicalDisk()>
c0029ac9:	83 c4 10             	add    esp,0x10
c0029acc:	90                   	nop
c0029acd:	83 c4 0c             	add    esp,0xc
c0029ad0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029ad2 <SATAPI::~SATAPI()>:
c0029ad2:	83 ec 0c             	sub    esp,0xc
c0029ad5:	83 ec 0c             	sub    esp,0xc
c0029ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029adc:	e8 cd ff ff ff       	call   c0029aae <SATAPI::~SATAPI()>
c0029ae1:	83 c4 10             	add    esp,0x10
c0029ae4:	83 ec 08             	sub    esp,0x8
c0029ae7:	68 80 01 00 00       	push   0x180
c0029aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029af0:	e8 ba 92 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029af5:	83 c4 10             	add    esp,0x10
c0029af8:	83 c4 0c             	add    esp,0xc
c0029afb:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029afc <AVX::~AVX()>:
c0029afc:	83 ec 0c             	sub    esp,0xc
c0029aff:	ba fc dc 02 c0       	mov    edx,0xc002dcfc
c0029b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b08:	89 10                	mov    DWORD PTR [eax],edx
c0029b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b0e:	83 ec 0c             	sub    esp,0xc
c0029b11:	50                   	push   eax
c0029b12:	e8 e9 ac fe ff       	call   c0014800 <FPU::~FPU()>
c0029b17:	83 c4 10             	add    esp,0x10
c0029b1a:	90                   	nop
c0029b1b:	83 c4 0c             	add    esp,0xc
c0029b1e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029b20 <AVX::~AVX()>:
c0029b20:	83 ec 0c             	sub    esp,0xc
c0029b23:	83 ec 0c             	sub    esp,0xc
c0029b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b2a:	e8 cd ff ff ff       	call   c0029afc <AVX::~AVX()>
c0029b2f:	83 c4 10             	add    esp,0x10
c0029b32:	83 ec 08             	sub    esp,0x8
c0029b35:	68 58 01 00 00       	push   0x158
c0029b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b3e:	e8 6c 92 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029b43:	83 c4 10             	add    esp,0x10
c0029b46:	83 c4 0c             	add    esp,0xc
c0029b49:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029b4a <MMX::~MMX()>:
c0029b4a:	83 ec 0c             	sub    esp,0xc
c0029b4d:	ba 3c dd 02 c0       	mov    edx,0xc002dd3c
c0029b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b56:	89 10                	mov    DWORD PTR [eax],edx
c0029b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b5c:	83 ec 0c             	sub    esp,0xc
c0029b5f:	50                   	push   eax
c0029b60:	e8 9b ac fe ff       	call   c0014800 <FPU::~FPU()>
c0029b65:	83 c4 10             	add    esp,0x10
c0029b68:	90                   	nop
c0029b69:	83 c4 0c             	add    esp,0xc
c0029b6c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029b6e <MMX::~MMX()>:
c0029b6e:	83 ec 0c             	sub    esp,0xc
c0029b71:	83 ec 0c             	sub    esp,0xc
c0029b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b78:	e8 cd ff ff ff       	call   c0029b4a <MMX::~MMX()>
c0029b7d:	83 c4 10             	add    esp,0x10
c0029b80:	83 ec 08             	sub    esp,0x8
c0029b83:	68 58 01 00 00       	push   0x158
c0029b88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b8c:	e8 1e 92 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029b91:	83 c4 10             	add    esp,0x10
c0029b94:	83 c4 0c             	add    esp,0xc
c0029b97:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029b98 <SSE::~SSE()>:
c0029b98:	83 ec 0c             	sub    esp,0xc
c0029b9b:	ba 7c dd 02 c0       	mov    edx,0xc002dd7c
c0029ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ba4:	89 10                	mov    DWORD PTR [eax],edx
c0029ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029baa:	83 ec 0c             	sub    esp,0xc
c0029bad:	50                   	push   eax
c0029bae:	e8 4d ac fe ff       	call   c0014800 <FPU::~FPU()>
c0029bb3:	83 c4 10             	add    esp,0x10
c0029bb6:	90                   	nop
c0029bb7:	83 c4 0c             	add    esp,0xc
c0029bba:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029bbc <SSE::~SSE()>:
c0029bbc:	83 ec 0c             	sub    esp,0xc
c0029bbf:	83 ec 0c             	sub    esp,0xc
c0029bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bc6:	e8 cd ff ff ff       	call   c0029b98 <SSE::~SSE()>
c0029bcb:	83 c4 10             	add    esp,0x10
c0029bce:	83 ec 08             	sub    esp,0x8
c0029bd1:	68 58 01 00 00       	push   0x158
c0029bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bda:	e8 d0 91 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029bdf:	83 c4 10             	add    esp,0x10
c0029be2:	83 c4 0c             	add    esp,0xc
c0029be5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029be6 <x87::~x87()>:
c0029be6:	83 ec 0c             	sub    esp,0xc
c0029be9:	ba bc dd 02 c0       	mov    edx,0xc002ddbc
c0029bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bf2:	89 10                	mov    DWORD PTR [eax],edx
c0029bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bf8:	83 ec 0c             	sub    esp,0xc
c0029bfb:	50                   	push   eax
c0029bfc:	e8 ff ab fe ff       	call   c0014800 <FPU::~FPU()>
c0029c01:	83 c4 10             	add    esp,0x10
c0029c04:	90                   	nop
c0029c05:	83 c4 0c             	add    esp,0xc
c0029c08:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029c0a <x87::~x87()>:
c0029c0a:	83 ec 0c             	sub    esp,0xc
c0029c0d:	83 ec 0c             	sub    esp,0xc
c0029c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c14:	e8 cd ff ff ff       	call   c0029be6 <x87::~x87()>
c0029c19:	83 c4 10             	add    esp,0x10
c0029c1c:	83 ec 08             	sub    esp,0x8
c0029c1f:	68 58 01 00 00       	push   0x158
c0029c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c28:	e8 82 91 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029c2d:	83 c4 10             	add    esp,0x10
c0029c30:	83 c4 0c             	add    esp,0xc
c0029c33:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029c34 <IOAPIC::~IOAPIC()>:
c0029c34:	83 ec 0c             	sub    esp,0xc
c0029c37:	ba 14 df 02 c0       	mov    edx,0xc002df14
c0029c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c40:	89 10                	mov    DWORD PTR [eax],edx
c0029c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c46:	83 ec 0c             	sub    esp,0xc
c0029c49:	50                   	push   eax
c0029c4a:	e8 47 a5 fe ff       	call   c0014196 <Device::~Device()>
c0029c4f:	83 c4 10             	add    esp,0x10
c0029c52:	90                   	nop
c0029c53:	83 c4 0c             	add    esp,0xc
c0029c56:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029c58 <IOAPIC::~IOAPIC()>:
c0029c58:	83 ec 0c             	sub    esp,0xc
c0029c5b:	83 ec 0c             	sub    esp,0xc
c0029c5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c62:	e8 cd ff ff ff       	call   c0029c34 <IOAPIC::~IOAPIC()>
c0029c67:	83 c4 10             	add    esp,0x10
c0029c6a:	83 ec 08             	sub    esp,0x8
c0029c6d:	68 68 01 00 00       	push   0x168
c0029c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c76:	e8 34 91 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029c7b:	83 c4 10             	add    esp,0x10
c0029c7e:	83 c4 0c             	add    esp,0xc
c0029c81:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029c82 <APIC::~APIC()>:
c0029c82:	83 ec 0c             	sub    esp,0xc
c0029c85:	ba cc de 02 c0       	mov    edx,0xc002decc
c0029c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c8e:	89 10                	mov    DWORD PTR [eax],edx
c0029c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c94:	83 ec 0c             	sub    esp,0xc
c0029c97:	50                   	push   eax
c0029c98:	e8 2d b0 fe ff       	call   c0014cca <InterruptController::~InterruptController()>
c0029c9d:	83 c4 10             	add    esp,0x10
c0029ca0:	90                   	nop
c0029ca1:	83 c4 0c             	add    esp,0xc
c0029ca4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029ca6 <APIC::~APIC()>:
c0029ca6:	83 ec 0c             	sub    esp,0xc
c0029ca9:	83 ec 0c             	sub    esp,0xc
c0029cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cb0:	e8 cd ff ff ff       	call   c0029c82 <APIC::~APIC()>
c0029cb5:	83 c4 10             	add    esp,0x10
c0029cb8:	83 ec 08             	sub    esp,0x8
c0029cbb:	68 58 21 00 00       	push   0x2158
c0029cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cc4:	e8 e6 90 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029cc9:	83 c4 10             	add    esp,0x10
c0029ccc:	83 c4 0c             	add    esp,0xc
c0029ccf:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029cd0 <PIC::~PIC()>:
c0029cd0:	83 ec 0c             	sub    esp,0xc
c0029cd3:	ba 64 df 02 c0       	mov    edx,0xc002df64
c0029cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cdc:	89 10                	mov    DWORD PTR [eax],edx
c0029cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ce2:	83 ec 0c             	sub    esp,0xc
c0029ce5:	50                   	push   eax
c0029ce6:	e8 df af fe ff       	call   c0014cca <InterruptController::~InterruptController()>
c0029ceb:	83 c4 10             	add    esp,0x10
c0029cee:	90                   	nop
c0029cef:	83 c4 0c             	add    esp,0xc
c0029cf2:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029cf4 <PIC::~PIC()>:
c0029cf4:	83 ec 0c             	sub    esp,0xc
c0029cf7:	83 ec 0c             	sub    esp,0xc
c0029cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cfe:	e8 cd ff ff ff       	call   c0029cd0 <PIC::~PIC()>
c0029d03:	83 c4 10             	add    esp,0x10
c0029d06:	83 ec 08             	sub    esp,0x8
c0029d09:	68 58 21 00 00       	push   0x2158
c0029d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d12:	e8 98 90 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029d17:	83 c4 10             	add    esp,0x10
c0029d1a:	83 c4 0c             	add    esp,0xc
c0029d1d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029d1e <APICTimer::~APICTimer()>:
c0029d1e:	83 ec 0c             	sub    esp,0xc
c0029d21:	ba b8 df 02 c0       	mov    edx,0xc002dfb8
c0029d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d2a:	89 10                	mov    DWORD PTR [eax],edx
c0029d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d30:	83 ec 0c             	sub    esp,0xc
c0029d33:	50                   	push   eax
c0029d34:	e8 47 d0 fe ff       	call   c0016d80 <Timer::~Timer()>
c0029d39:	83 c4 10             	add    esp,0x10
c0029d3c:	90                   	nop
c0029d3d:	83 c4 0c             	add    esp,0xc
c0029d40:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029d42 <APICTimer::~APICTimer()>:
c0029d42:	83 ec 0c             	sub    esp,0xc
c0029d45:	83 ec 0c             	sub    esp,0xc
c0029d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d4c:	e8 cd ff ff ff       	call   c0029d1e <APICTimer::~APICTimer()>
c0029d51:	83 c4 10             	add    esp,0x10
c0029d54:	83 ec 08             	sub    esp,0x8
c0029d57:	68 60 01 00 00       	push   0x160
c0029d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d60:	e8 4a 90 fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029d65:	83 c4 10             	add    esp,0x10
c0029d68:	83 c4 0c             	add    esp,0xc
c0029d6b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029d6c <PIT::~PIT()>:
c0029d6c:	83 ec 0c             	sub    esp,0xc
c0029d6f:	ba 08 e0 02 c0       	mov    edx,0xc002e008
c0029d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d78:	89 10                	mov    DWORD PTR [eax],edx
c0029d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d7e:	83 ec 0c             	sub    esp,0xc
c0029d81:	50                   	push   eax
c0029d82:	e8 f9 cf fe ff       	call   c0016d80 <Timer::~Timer()>
c0029d87:	83 c4 10             	add    esp,0x10
c0029d8a:	90                   	nop
c0029d8b:	83 c4 0c             	add    esp,0xc
c0029d8e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029d90 <PIT::~PIT()>:
c0029d90:	83 ec 0c             	sub    esp,0xc
c0029d93:	83 ec 0c             	sub    esp,0xc
c0029d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d9a:	e8 cd ff ff ff       	call   c0029d6c <PIT::~PIT()>
c0029d9f:	83 c4 10             	add    esp,0x10
c0029da2:	83 ec 08             	sub    esp,0x8
c0029da5:	68 5c 01 00 00       	push   0x15c
c0029daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029dae:	e8 fc 8f fe ff       	call   c0012daf <operator delete(void*, unsigned long)>
c0029db3:	83 c4 10             	add    esp,0x10
c0029db6:	83 c4 0c             	add    esp,0xc
c0029db9:	c3                   	ret    
