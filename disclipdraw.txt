
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 0c             	sub    esp,0xc
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	6a 14                	push   0x14
10000069:	e8 fc ff ff ff       	call   1000006a <NiMain(void*)+0x6a>	1000006a: R_386_PC32	malloc
1000006e:	89 c6                	mov    esi,eax
10000070:	58                   	pop    eax
10000071:	5a                   	pop    edx
10000072:	53                   	push   ebx
10000073:	56                   	push   esi
10000074:	e8 fc ff ff ff       	call   10000075 <NiMain(void*)+0x75>	10000075: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
10000079:	68 80 00 00 00       	push   0x80
1000007e:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000080: R_386_32	desktop
10000084:	6a 00                	push   0x0
10000086:	68 00 00 00 00       	push   0x0	10000087: R_386_32	NiDisplayRAM(void*)
1000008b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000008d: R_386_32	kernelProcess
10000091:	e8 fc ff ff ff       	call   10000092 <NiMain(void*)+0x92>	10000092: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000096:	83 c4 14             	add    esp,0x14
10000099:	6a 40                	push   0x40
1000009b:	e8 fc ff ff ff       	call   1000009c <NiMain(void*)+0x9c>	1000009c: R_386_PC32	malloc
100000a0:	59                   	pop    ecx
100000a1:	89 c5                	mov    ebp,eax
100000a3:	5b                   	pop    ebx
100000a4:	6a 01                	push   0x1
100000a6:	6a 01                	push   0x1
100000a8:	6a 00                	push   0x0
100000aa:	6a 00                	push   0x0
100000ac:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000ae: R_386_32	ctxt
100000b2:	50                   	push   eax
100000b3:	e8 fc ff ff ff       	call   100000b4 <NiMain(void*)+0xb4>	100000b4: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000b8:	83 c4 14             	add    esp,0x14
100000bb:	6a 40                	push   0x40
100000bd:	e8 fc ff ff ff       	call   100000be <NiMain(void*)+0xbe>	100000be: R_386_PC32	malloc
100000c2:	5e                   	pop    esi
100000c3:	89 c7                	mov    edi,eax
100000c5:	58                   	pop    eax
100000c6:	68 40 01 00 00       	push   0x140
100000cb:	68 90 01 00 00       	push   0x190
100000d0:	6a 32                	push   0x32
100000d2:	6a 32                	push   0x32
100000d4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000d6: R_386_32	ctxt
100000da:	57                   	push   edi
100000db:	e8 fc ff ff ff       	call   100000dc <NiMain(void*)+0xdc>	100000dc: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000e0:	83 c4 14             	add    esp,0x14
100000e3:	6a 40                	push   0x40
100000e5:	e8 fc ff ff ff       	call   100000e6 <NiMain(void*)+0xe6>	100000e6: R_386_PC32	malloc
100000ea:	89 c6                	mov    esi,eax
100000ec:	58                   	pop    eax
100000ed:	5a                   	pop    edx
100000ee:	68 7c 01 00 00       	push   0x17c
100000f3:	68 f4 01 00 00       	push   0x1f4
100000f8:	68 96 00 00 00       	push   0x96
100000fd:	68 c8 00 00 00       	push   0xc8
10000102:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000104: R_386_32	ctxt
10000108:	56                   	push   esi
10000109:	e8 fc ff ff ff       	call   1000010a <NiMain(void*)+0x10a>	1000010a: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
1000010e:	83 c4 14             	add    esp,0x14
10000111:	6a 40                	push   0x40
10000113:	e8 fc ff ff ff       	call   10000114 <NiMain(void*)+0x114>	10000114: R_386_PC32	malloc
10000118:	59                   	pop    ecx
10000119:	89 c3                	mov    ebx,eax
1000011b:	58                   	pop    eax
1000011c:	68 af 00 00 00       	push   0xaf
10000121:	68 0e 01 00 00       	push   0x10e
10000126:	68 90 01 00 00       	push   0x190
1000012b:	6a 7d                	push   0x7d
1000012d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000012f: R_386_32	ctxt
10000133:	53                   	push   ebx
10000134:	e8 fc ff ff ff       	call   10000135 <NiMain(void*)+0x135>	10000135: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10000139:	83 c4 18             	add    esp,0x18
1000013c:	83 4b 3c 01          	or     DWORD PTR [ebx+0x3c],0x1
10000140:	55                   	push   ebp
10000141:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000143: R_386_32	desktop
10000147:	e8 fc ff ff ff       	call   10000148 <NiMain(void*)+0x148>	10000148: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000014c:	58                   	pop    eax
1000014d:	5a                   	pop    edx
1000014e:	57                   	push   edi
1000014f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000151: R_386_32	desktop
10000155:	e8 fc ff ff ff       	call   10000156 <NiMain(void*)+0x156>	10000156: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000015a:	59                   	pop    ecx
1000015b:	5f                   	pop    edi
1000015c:	56                   	push   esi
1000015d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000015f: R_386_32	desktop
10000163:	e8 fc ff ff ff       	call   10000164 <NiMain(void*)+0x164>	10000164: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000168:	5d                   	pop    ebp
10000169:	58                   	pop    eax
1000016a:	53                   	push   ebx
1000016b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000016d: R_386_32	desktop
10000171:	e8 fc ff ff ff       	call   10000172 <NiMain(void*)+0x172>	10000172: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000176:	58                   	pop    eax
10000177:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000179: R_386_32	desktop
1000017d:	e8 fc ff ff ff       	call   1000017e <NiMain(void*)+0x17e>	1000017e: R_386_PC32	NIDesktop::completeRefresh()
10000182:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
10000189:	e8 fc ff ff ff       	call   1000018a <NiMain(void*)+0x18a>	1000018a: R_386_PC32	malloc
1000018e:	6a 00                	push   0x0
10000190:	89 c3                	mov    ebx,eax
10000192:	6a 00                	push   0x0
10000194:	68 15 51 00 10       	push   0x10005115	10000195: R_386_32	.text
10000199:	50                   	push   eax
1000019a:	e8 fc ff ff ff       	call   1000019b <NiMain(void*)+0x19b>	1000019b: R_386_PC32	Process::Process(char const*, Process*, char**)
1000019f:	83 c4 14             	add    esp,0x14
100001a2:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
100001a8:	e8 fc ff ff ff       	call   100001a9 <NiMain(void*)+0x1a9>	100001a9: R_386_PC32	setActiveTerminal(VgaText*)
100001ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
100001b0:	e8 fc ff ff ff       	call   100001b1 <NiMain(void*)+0x1b1>	100001b1: R_386_PC32	Process::createUserThread()
100001b5:	83 c4 10             	add    esp,0x10
100001b8:	fa                   	cli    
100001b9:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100001bb: R_386_32	irqDisableCounter
100001bf:	e8 fc ff ff ff       	call   100001c0 <NiMain(void*)+0x1c0>	100001c0: R_386_PC32	schedule()
100001c4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001c5: R_386_32	irqDisableCounter
100001c9:	48                   	dec    eax
100001ca:	a3 00 00 00 00       	mov    ds:0x0,eax	100001cb: R_386_32	irqDisableCounter
100001cf:	75 e7                	jne    100001b8 <NiMain(void*)+0x1b8>
100001d1:	fb                   	sti    
100001d2:	eb e4                	jmp    100001b8 <NiMain(void*)+0x1b8>

100001d4 <NiBegin(void*)>:
100001d4:	83 ec 18             	sub    esp,0x18
100001d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100001db:	e8 fc ff ff ff       	call   100001dc <NiBegin(void*)+0x8>	100001dc: R_386_PC32	NiMain(void*)

100001e0 <_ssfn__bitreverse16>:
100001e0:	89 c2                	mov    edx,eax
100001e2:	01 c0                	add    eax,eax
100001e4:	d1 fa                	sar    edx,1
100001e6:	25 aa aa 00 00       	and    eax,0xaaaa
100001eb:	81 e2 55 55 00 00    	and    edx,0x5555
100001f1:	09 c2                	or     edx,eax
100001f3:	89 d0                	mov    eax,edx
100001f5:	c1 e2 02             	shl    edx,0x2
100001f8:	c1 f8 02             	sar    eax,0x2
100001fb:	81 e2 cc cc 00 00    	and    edx,0xcccc
10000201:	25 33 33 00 00       	and    eax,0x3333
10000206:	09 d0                	or     eax,edx
10000208:	89 c2                	mov    edx,eax
1000020a:	c1 e0 04             	shl    eax,0x4
1000020d:	c1 fa 04             	sar    edx,0x4
10000210:	25 f0 f0 00 00       	and    eax,0xf0f0
10000215:	81 e2 0f 0f 00 00    	and    edx,0xf0f
1000021b:	09 c2                	or     edx,eax
1000021d:	89 d1                	mov    ecx,edx
1000021f:	c1 e2 08             	shl    edx,0x8
10000222:	c1 f9 08             	sar    ecx,0x8
10000225:	0f b7 c2             	movzx  eax,dx
10000228:	09 c8                	or     eax,ecx
1000022a:	c3                   	ret    

1000022b <_ssfn__zhuffman_decode>:
1000022b:	55                   	push   ebp
1000022c:	57                   	push   edi
1000022d:	56                   	push   esi
1000022e:	53                   	push   ebx
1000022f:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
10000233:	7f 1d                	jg     10000252 <_ssfn__zhuffman_decode+0x27>
10000235:	8b 18                	mov    ebx,DWORD PTR [eax]
10000237:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000023a:	89 08                	mov    DWORD PTR [eax],ecx
1000023c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
1000023f:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000242:	d3 e3                	shl    ebx,cl
10000244:	83 c1 08             	add    ecx,0x8
10000247:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000024a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
1000024d:	83 f9 18             	cmp    ecx,0x18
10000250:	eb e1                	jmp    10000233 <_ssfn__zhuffman_decode+0x8>
10000252:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
10000255:	89 f9                	mov    ecx,edi
10000257:	81 e1 ff 01 00 00    	and    ecx,0x1ff
1000025d:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
10000261:	89 cb                	mov    ebx,ecx
10000263:	85 c9                	test   ecx,ecx
10000265:	74 15                	je     1000027c <_ssfn__zhuffman_decode+0x51>
10000267:	c1 f9 09             	sar    ecx,0x9
1000026a:	89 da                	mov    edx,ebx
1000026c:	d3 ef                	shr    edi,cl
1000026e:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
10000271:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10000274:	81 e2 ff 01 00 00    	and    edx,0x1ff
1000027a:	eb 58                	jmp    100002d4 <_ssfn__zhuffman_decode+0xa9>
1000027c:	89 d5                	mov    ebp,edx
1000027e:	89 c3                	mov    ebx,eax
10000280:	be 0a 00 00 00       	mov    esi,0xa
10000285:	89 f8                	mov    eax,edi
10000287:	e8 54 ff ff ff       	call   100001e0 <_ssfn__bitreverse16>
1000028c:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
10000293:	7c 03                	jl     10000298 <_ssfn__zhuffman_decode+0x6d>
10000295:	46                   	inc    esi
10000296:	eb f4                	jmp    1000028c <_ssfn__zhuffman_decode+0x61>
10000298:	83 ca ff             	or     edx,0xffffffff
1000029b:	83 fe 10             	cmp    esi,0x10
1000029e:	74 34                	je     100002d4 <_ssfn__zhuffman_decode+0xa9>
100002a0:	8d 14 36             	lea    edx,[esi+esi*1]
100002a3:	b9 10 00 00 00       	mov    ecx,0x10
100002a8:	01 ea                	add    edx,ebp
100002aa:	29 f1                	sub    ecx,esi
100002ac:	d3 f8                	sar    eax,cl
100002ae:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
100002b5:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
100002bc:	29 c8                	sub    eax,ecx
100002be:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
100002c1:	89 f1                	mov    ecx,esi
100002c3:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
100002ca:	d3 ef                	shr    edi,cl
100002cc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
100002cf:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
100002d4:	5b                   	pop    ebx
100002d5:	89 d0                	mov    eax,edx
100002d7:	5e                   	pop    esi
100002d8:	5f                   	pop    edi
100002d9:	5d                   	pop    ebp
100002da:	c3                   	ret    

100002db <_ssfn__zexpand>:
100002db:	55                   	push   ebp
100002dc:	57                   	push   edi
100002dd:	56                   	push   esi
100002de:	53                   	push   ebx
100002df:	83 ec 0c             	sub    esp,0xc
100002e2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100002e5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
100002e8:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
100002eb:	29 f9                	sub    ecx,edi
100002ed:	83 f9 08             	cmp    ecx,0x8
100002f0:	74 04                	je     100002f6 <_ssfn__zexpand+0x1b>
100002f2:	31 c0                	xor    eax,eax
100002f4:	eb 3c                	jmp    10000332 <_ssfn__zexpand+0x57>
100002f6:	80 3f 53             	cmp    BYTE PTR [edi],0x53
100002f9:	75 f7                	jne    100002f2 <_ssfn__zexpand+0x17>
100002fb:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
100002ff:	75 f1                	jne    100002f2 <_ssfn__zexpand+0x17>
10000301:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
10000305:	75 eb                	jne    100002f2 <_ssfn__zexpand+0x17>
10000307:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
1000030a:	89 c3                	mov    ebx,eax
1000030c:	89 d6                	mov    esi,edx
1000030e:	50                   	push   eax
1000030f:	50                   	push   eax
10000310:	55                   	push   ebp
10000311:	57                   	push   edi
10000312:	e8 fc ff ff ff       	call   10000313 <_ssfn__zexpand+0x38>	10000313: R_386_PC32	realloc
10000317:	83 c4 10             	add    esp,0x10
1000031a:	85 c0                	test   eax,eax
1000031c:	74 d4                	je     100002f2 <_ssfn__zexpand+0x17>
1000031e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000321:	29 fe                	sub    esi,edi
10000323:	01 c6                	add    esi,eax
10000325:	01 e8                	add    eax,ebp
10000327:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
1000032a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
1000032d:	b8 01 00 00 00       	mov    eax,0x1
10000332:	83 c4 0c             	add    esp,0xc
10000335:	5b                   	pop    ebx
10000336:	5e                   	pop    esi
10000337:	5f                   	pop    edi
10000338:	5d                   	pop    ebp
10000339:	c3                   	ret    

1000033a <_ssfn__zbuild_huffman>:
1000033a:	55                   	push   ebp
1000033b:	57                   	push   edi
1000033c:	56                   	push   esi
1000033d:	53                   	push   ebx
1000033e:	89 c3                	mov    ebx,eax
10000340:	81 ec a0 00 00 00    	sub    esp,0xa0
10000346:	31 c0                	xor    eax,eax
10000348:	89 0c 24             	mov    DWORD PTR [esp],ecx
1000034b:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
1000034f:	b9 11 00 00 00       	mov    ecx,0x11
10000354:	89 ef                	mov    edi,ebp
10000356:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
1000035a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000035c:	b9 00 01 00 00       	mov    ecx,0x100
10000361:	89 df                	mov    edi,ebx
10000363:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000365:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10000368:	7d 0f                	jge    10000379 <_ssfn__zbuild_huffman+0x3f>
1000036a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
1000036e:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
10000372:	40                   	inc    eax
10000373:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
10000377:	eb ec                	jmp    10000365 <_ssfn__zbuild_huffman+0x2b>
10000379:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
10000381:	b9 01 00 00 00       	mov    ecx,0x1
10000386:	b8 01 00 00 00       	mov    eax,0x1
1000038b:	89 c7                	mov    edi,eax
1000038d:	d3 e7                	shl    edi,cl
1000038f:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
10000393:	0f 8f 10 01 00 00    	jg     100004a9 <_ssfn__zbuild_huffman+0x16f>
10000399:	41                   	inc    ecx
1000039a:	83 f9 10             	cmp    ecx,0x10
1000039d:	75 ec                	jne    1000038b <_ssfn__zbuild_huffman+0x51>
1000039f:	31 ff                	xor    edi,edi
100003a1:	31 f6                	xor    esi,esi
100003a3:	b8 01 00 00 00       	mov    eax,0x1
100003a8:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
100003ac:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
100003b0:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
100003b8:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
100003c0:	01 ef                	add    edi,ebp
100003c2:	85 ed                	test   ebp,ebp
100003c4:	74 11                	je     100003d7 <_ssfn__zbuild_huffman+0x9d>
100003c6:	ba 01 00 00 00       	mov    edx,0x1
100003cb:	88 c1                	mov    cl,al
100003cd:	d3 e2                	shl    edx,cl
100003cf:	39 fa                	cmp    edx,edi
100003d1:	0f 8c d2 00 00 00    	jl     100004a9 <_ssfn__zbuild_huffman+0x16f>
100003d7:	89 fa                	mov    edx,edi
100003d9:	b9 10 00 00 00       	mov    ecx,0x10
100003de:	01 ff                	add    edi,edi
100003e0:	29 c1                	sub    ecx,eax
100003e2:	01 ee                	add    esi,ebp
100003e4:	d3 e2                	shl    edx,cl
100003e6:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
100003ed:	40                   	inc    eax
100003ee:	83 f8 10             	cmp    eax,0x10
100003f1:	75 b5                	jne    100003a8 <_ssfn__zbuild_huffman+0x6e>
100003f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
100003f6:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
10000400:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000404:	31 ff                	xor    edi,edi
10000406:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
1000040a:	0f 8d 9d 00 00 00    	jge    100004ad <_ssfn__zbuild_huffman+0x173>
10000410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000414:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
10000418:	89 f2                	mov    edx,esi
1000041a:	85 f6                	test   esi,esi
1000041c:	0f 84 81 00 00 00    	je     100004a3 <_ssfn__zbuild_huffman+0x169>
10000422:	8d 0c 36             	lea    ecx,[esi+esi*1]
10000425:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
10000429:	8d 04 19             	lea    eax,[ecx+ebx*1]
1000042c:	89 e9                	mov    ecx,ebp
1000042e:	89 04 24             	mov    DWORD PTR [esp],eax
10000431:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
10000438:	29 c1                	sub    ecx,eax
1000043a:	89 c8                	mov    eax,ecx
1000043c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000043f:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
10000446:	01 c8                	add    eax,ecx
10000448:	83 fe 09             	cmp    esi,0x9
1000044b:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
10000452:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
1000045a:	7f 42                	jg     1000049e <_ssfn__zbuild_huffman+0x164>
1000045c:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10000460:	89 e8                	mov    eax,ebp
10000462:	e8 79 fd ff ff       	call   100001e0 <_ssfn__bitreverse16>
10000467:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
1000046b:	b9 10 00 00 00       	mov    ecx,0x10
10000470:	29 f1                	sub    ecx,esi
10000472:	d3 f8                	sar    eax,cl
10000474:	88 d1                	mov    cl,dl
10000476:	89 04 24             	mov    DWORD PTR [esp],eax
10000479:	89 f2                	mov    edx,esi
1000047b:	b8 01 00 00 00       	mov    eax,0x1
10000480:	c1 e2 09             	shl    edx,0x9
10000483:	d3 e0                	shl    eax,cl
10000485:	09 fa                	or     edx,edi
10000487:	89 c1                	mov    ecx,eax
10000489:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
10000490:	7f 0c                	jg     1000049e <_ssfn__zbuild_huffman+0x164>
10000492:	8b 04 24             	mov    eax,DWORD PTR [esp]
10000495:	01 0c 24             	add    DWORD PTR [esp],ecx
10000498:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
1000049c:	eb eb                	jmp    10000489 <_ssfn__zbuild_huffman+0x14f>
1000049e:	45                   	inc    ebp
1000049f:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
100004a3:	47                   	inc    edi
100004a4:	e9 5d ff ff ff       	jmp    10000406 <_ssfn__zbuild_huffman+0xcc>
100004a9:	31 c0                	xor    eax,eax
100004ab:	eb 05                	jmp    100004b2 <_ssfn__zbuild_huffman+0x178>
100004ad:	b8 01 00 00 00       	mov    eax,0x1
100004b2:	81 c4 a0 00 00 00    	add    esp,0xa0
100004b8:	5b                   	pop    ebx
100004b9:	5e                   	pop    esi
100004ba:	5f                   	pop    edi
100004bb:	5d                   	pop    ebp
100004bc:	c3                   	ret    

100004bd <_ssfn_fc.part.1>:
100004bd:	55                   	push   ebp
100004be:	57                   	push   edi
100004bf:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
100004c5:	56                   	push   esi
100004c6:	53                   	push   ebx
100004c7:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
100004cd:	83 ec 0c             	sub    esp,0xc
100004d0:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
100004d3:	74 5d                	je     10000532 <_ssfn_fc.part.1+0x75>
100004d5:	31 f6                	xor    esi,esi
100004d7:	8b 03                	mov    eax,DWORD PTR [ebx]
100004d9:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
100004dd:	74 35                	je     10000514 <_ssfn_fc.part.1+0x57>
100004df:	31 ed                	xor    ebp,ebp
100004e1:	8b 03                	mov    eax,DWORD PTR [ebx]
100004e3:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
100004e6:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
100004e9:	85 c0                	test   eax,eax
100004eb:	74 0c                	je     100004f9 <_ssfn_fc.part.1+0x3c>
100004ed:	83 ec 0c             	sub    esp,0xc
100004f0:	50                   	push   eax
100004f1:	e8 fc ff ff ff       	call   100004f2 <_ssfn_fc.part.1+0x35>	100004f2: R_386_PC32	free
100004f6:	83 c4 10             	add    esp,0x10
100004f9:	83 c5 04             	add    ebp,0x4
100004fc:	81 fd 00 04 00 00    	cmp    ebp,0x400
10000502:	75 dd                	jne    100004e1 <_ssfn_fc.part.1+0x24>
10000504:	83 ec 0c             	sub    esp,0xc
10000507:	8b 03                	mov    eax,DWORD PTR [ebx]
10000509:	ff 34 30             	push   DWORD PTR [eax+esi*1]
1000050c:	e8 fc ff ff ff       	call   1000050d <_ssfn_fc.part.1+0x50>	1000050d: R_386_PC32	free
10000511:	83 c4 10             	add    esp,0x10
10000514:	83 c6 04             	add    esi,0x4
10000517:	81 fe 00 04 00 00    	cmp    esi,0x400
1000051d:	75 b8                	jne    100004d7 <_ssfn_fc.part.1+0x1a>
1000051f:	83 ec 0c             	sub    esp,0xc
10000522:	ff 33                	push   DWORD PTR [ebx]
10000524:	e8 fc ff ff ff       	call   10000525 <_ssfn_fc.part.1+0x68>	10000525: R_386_PC32	free
10000529:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
1000052f:	83 c4 10             	add    esp,0x10
10000532:	83 c3 04             	add    ebx,0x4
10000535:	39 fb                	cmp    ebx,edi
10000537:	75 97                	jne    100004d0 <_ssfn_fc.part.1+0x13>
10000539:	83 c4 0c             	add    esp,0xc
1000053c:	5b                   	pop    ebx
1000053d:	5e                   	pop    esi
1000053e:	5f                   	pop    edi
1000053f:	5d                   	pop    ebp
10000540:	c3                   	ret    

10000541 <_ssfn_l>:
10000541:	57                   	push   edi
10000542:	56                   	push   esi
10000543:	53                   	push   ebx
10000544:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000548:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000054c:	39 ce                	cmp    esi,ecx
1000054e:	89 f3                	mov    ebx,esi
10000550:	0f 9d c1             	setge  cl
10000553:	c1 eb 1f             	shr    ebx,0x1f
10000556:	09 d9                	or     ecx,ebx
10000558:	89 fb                	mov    ebx,edi
1000055a:	c1 eb 1f             	shr    ebx,0x1f
1000055d:	08 d9                	or     cl,bl
1000055f:	0f 85 e9 00 00 00    	jne    1000064e <_ssfn_l+0x10d>
10000565:	39 d7                	cmp    edi,edx
10000567:	0f 8d e1 00 00 00    	jge    1000064e <_ssfn_l+0x10d>
1000056d:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
10000573:	8d 51 08             	lea    edx,[ecx+0x8]
10000576:	8d 4f 08             	lea    ecx,[edi+0x8]
10000579:	c1 fa 04             	sar    edx,0x4
1000057c:	c1 f9 04             	sar    ecx,0x4
1000057f:	39 ca                	cmp    edx,ecx
10000581:	75 1a                	jne    1000059d <_ssfn_l+0x5c>
10000583:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
10000589:	8d 4e 08             	lea    ecx,[esi+0x8]
1000058c:	83 c2 08             	add    edx,0x8
1000058f:	c1 f9 04             	sar    ecx,0x4
10000592:	c1 fa 04             	sar    edx,0x4
10000595:	39 ca                	cmp    edx,ecx
10000597:	0f 84 b1 00 00 00    	je     1000064e <_ssfn_l+0x10d>
1000059d:	89 c3                	mov    ebx,eax
1000059f:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
100005a5:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
100005ab:	7f 3e                	jg     100005eb <_ssfn_l+0xaa>
100005ad:	05 00 02 00 00       	add    eax,0x200
100005b2:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
100005b8:	52                   	push   edx
100005b9:	01 c0                	add    eax,eax
100005bb:	52                   	push   edx
100005bc:	50                   	push   eax
100005bd:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
100005c3:	e8 fc ff ff ff       	call   100005c4 <_ssfn_l+0x83>	100005c4: R_386_PC32	realloc
100005c8:	83 c4 10             	add    esp,0x10
100005cb:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
100005d1:	85 c0                	test   eax,eax
100005d3:	75 16                	jne    100005eb <_ssfn_l+0xaa>
100005d5:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
100005df:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
100005e9:	eb 63                	jmp    1000064e <_ssfn_l+0x10d>
100005eb:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
100005f2:	75 26                	jne    1000061a <_ssfn_l+0xd9>
100005f4:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005fa:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
10000600:	66 89 10             	mov    WORD PTR [eax],dx
10000603:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000609:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
1000060f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
10000613:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
1000061a:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000620:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000626:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
1000062a:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000630:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000636:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
1000063b:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10000641:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000648:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
1000064e:	5b                   	pop    ebx
1000064f:	5e                   	pop    esi
10000650:	5f                   	pop    edi
10000651:	c3                   	ret    

10000652 <_ssfn_b>:
10000652:	55                   	push   ebp
10000653:	57                   	push   edi
10000654:	56                   	push   esi
10000655:	53                   	push   ebx
10000656:	83 ec 4c             	sub    esp,0x4c
10000659:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000065d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10000661:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10000665:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10000669:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000066d:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
10000671:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10000675:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
10000679:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000067d:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
10000681:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10000685:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
10000689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000068d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10000691:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000695:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
1000069c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100006a0:	83 f8 04             	cmp    eax,0x4
100006a3:	75 28                	jne    100006cd <_ssfn_b+0x7b>
100006a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100006a9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100006ad:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100006b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
100006b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100006b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
100006bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100006c1:	83 c4 4c             	add    esp,0x4c
100006c4:	5b                   	pop    ebx
100006c5:	5e                   	pop    esi
100006c6:	5f                   	pop    edi
100006c7:	5d                   	pop    ebp
100006c8:	e9 74 fe ff ff       	jmp    10000541 <_ssfn_l>
100006cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100006d1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
100006d5:	75 0e                	jne    100006e5 <_ssfn_b+0x93>
100006d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
100006db:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
100006df:	0f 84 19 01 00 00    	je     100007fe <_ssfn_b+0x1ac>
100006e5:	be 02 00 00 00       	mov    esi,0x2
100006ea:	89 d8                	mov    eax,ebx
100006ec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
100006f0:	99                   	cdq    
100006f1:	f7 fe                	idiv   esi
100006f3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
100006f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100006fb:	89 e8                	mov    eax,ebp
100006fd:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000701:	99                   	cdq    
10000702:	f7 fe                	idiv   esi
10000704:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
10000708:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000070c:	89 f8                	mov    eax,edi
1000070e:	29 d8                	sub    eax,ebx
10000710:	99                   	cdq    
10000711:	f7 fe                	idiv   esi
10000713:	01 c3                	add    ebx,eax
10000715:	89 c8                	mov    eax,ecx
10000717:	29 e8                	sub    eax,ebp
10000719:	99                   	cdq    
1000071a:	f7 fe                	idiv   esi
1000071c:	01 e8                	add    eax,ebp
1000071e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000726:	29 f8                	sub    eax,edi
10000728:	99                   	cdq    
10000729:	f7 fe                	idiv   esi
1000072b:	01 f8                	add    eax,edi
1000072d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000731:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10000735:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000739:	29 c8                	sub    eax,ecx
1000073b:	99                   	cdq    
1000073c:	f7 fe                	idiv   esi
1000073e:	01 c8                	add    eax,ecx
10000740:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10000744:	89 d8                	mov    eax,ebx
10000746:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
1000074a:	99                   	cdq    
1000074b:	f7 fe                	idiv   esi
1000074d:	8d 0c 38             	lea    ecx,[eax+edi*1]
10000750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000754:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10000758:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
1000075c:	99                   	cdq    
1000075d:	f7 fe                	idiv   esi
1000075f:	8d 2c 38             	lea    ebp,[eax+edi*1]
10000762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000766:	29 d8                	sub    eax,ebx
10000768:	99                   	cdq    
10000769:	f7 fe                	idiv   esi
1000076b:	83 ec 0c             	sub    esp,0xc
1000076e:	01 d8                	add    eax,ebx
10000770:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000774:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10000778:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
1000077c:	99                   	cdq    
1000077d:	f7 fe                	idiv   esi
1000077f:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10000783:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10000787:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000078b:	29 c8                	sub    eax,ecx
1000078d:	99                   	cdq    
1000078e:	f7 fe                	idiv   esi
10000790:	8d 1c 08             	lea    ebx,[eax+ecx*1]
10000793:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10000797:	29 e8                	sub    eax,ebp
10000799:	99                   	cdq    
1000079a:	f7 fe                	idiv   esi
1000079c:	8d 34 28             	lea    esi,[eax+ebp*1]
1000079f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100007a3:	8d 78 01             	lea    edi,[eax+0x1]
100007a6:	57                   	push   edi
100007a7:	56                   	push   esi
100007a8:	53                   	push   ebx
100007a9:	55                   	push   ebp
100007aa:	51                   	push   ecx
100007ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100007af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100007b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100007b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100007bb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100007bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100007c3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100007c7:	e8 86 fe ff ff       	call   10000652 <_ssfn_b>
100007cc:	83 c4 24             	add    esp,0x24
100007cf:	57                   	push   edi
100007d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100007d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100007d8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100007dc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100007e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
100007e4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
100007e8:	56                   	push   esi
100007e9:	53                   	push   ebx
100007ea:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100007ee:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100007f2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100007f6:	e8 57 fe ff ff       	call   10000652 <_ssfn_b>
100007fb:	83 c4 30             	add    esp,0x30
100007fe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10000803:	0f 85 9c fe ff ff    	jne    100006a5 <_ssfn_b+0x53>
10000809:	83 c4 4c             	add    esp,0x4c
1000080c:	5b                   	pop    ebx
1000080d:	5e                   	pop    esi
1000080e:	5f                   	pop    edi
1000080f:	5d                   	pop    ebp
10000810:	c3                   	ret    

10000811 <_ssfn__zreceive>:
10000811:	56                   	push   esi
10000812:	53                   	push   ebx
10000813:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
10000816:	7d 1d                	jge    10000835 <_ssfn__zreceive+0x24>
10000818:	8b 18                	mov    ebx,DWORD PTR [eax]
1000081a:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000081d:	89 08                	mov    DWORD PTR [eax],ecx
1000081f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000822:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000825:	d3 e3                	shl    ebx,cl
10000827:	83 c1 08             	add    ecx,0x8
1000082a:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000082d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000830:	83 f9 18             	cmp    ecx,0x18
10000833:	7e e3                	jle    10000818 <_ssfn__zreceive+0x7>
10000835:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
10000838:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
1000083b:	89 f3                	mov    ebx,esi
1000083d:	88 d1                	mov    cl,dl
1000083f:	d3 eb                	shr    ebx,cl
10000841:	88 d1                	mov    cl,dl
10000843:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10000846:	bb 01 00 00 00       	mov    ebx,0x1
1000084b:	d3 e3                	shl    ebx,cl
1000084d:	8d 43 ff             	lea    eax,[ebx-0x1]
10000850:	5b                   	pop    ebx
10000851:	21 f0                	and    eax,esi
10000853:	5e                   	pop    esi
10000854:	c3                   	ret    

10000855 <ssfn_utf8>:
10000855:	56                   	push   esi
10000856:	53                   	push   ebx
10000857:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000085b:	8b 11                	mov    edx,DWORD PTR [ecx]
1000085d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
10000860:	89 f0                	mov    eax,esi
10000862:	84 c0                	test   al,al
10000864:	0f be d8             	movsx  ebx,al
10000867:	78 04                	js     1000086d <ssfn_utf8+0x18>
10000869:	89 d8                	mov    eax,ebx
1000086b:	eb 7d                	jmp    100008ea <ssfn_utf8+0x95>
1000086d:	f7 c6 20 00 00 00    	test   esi,0x20
10000873:	75 14                	jne    10000889 <ssfn_utf8+0x34>
10000875:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
10000878:	c1 e3 06             	shl    ebx,0x6
1000087b:	83 e0 3f             	and    eax,0x3f
1000087e:	81 e3 c0 07 00 00    	and    ebx,0x7c0
10000884:	42                   	inc    edx
10000885:	09 d8                	or     eax,ebx
10000887:	eb 5f                	jmp    100008e8 <ssfn_utf8+0x93>
10000889:	f7 c6 10 00 00 00    	test   esi,0x10
1000088f:	75 20                	jne    100008b1 <ssfn_utf8+0x5c>
10000891:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10000895:	c1 e3 0c             	shl    ebx,0xc
10000898:	c1 e0 06             	shl    eax,0x6
1000089b:	0f b7 db             	movzx  ebx,bx
1000089e:	25 c0 0f 00 00       	and    eax,0xfc0
100008a3:	83 c2 02             	add    edx,0x2
100008a6:	09 d8                	or     eax,ebx
100008a8:	8a 1a                	mov    bl,BYTE PTR [edx]
100008aa:	83 e3 3f             	and    ebx,0x3f
100008ad:	09 d8                	or     eax,ebx
100008af:	eb 37                	jmp    100008e8 <ssfn_utf8+0x93>
100008b1:	31 c0                	xor    eax,eax
100008b3:	83 e6 08             	and    esi,0x8
100008b6:	75 32                	jne    100008ea <ssfn_utf8+0x95>
100008b8:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100008bc:	c1 e3 12             	shl    ebx,0x12
100008bf:	c1 e0 0c             	shl    eax,0xc
100008c2:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
100008c8:	25 00 f0 03 00       	and    eax,0x3f000
100008cd:	83 c2 03             	add    edx,0x3
100008d0:	09 d8                	or     eax,ebx
100008d2:	8a 1a                	mov    bl,BYTE PTR [edx]
100008d4:	83 e3 3f             	and    ebx,0x3f
100008d7:	09 d8                	or     eax,ebx
100008d9:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
100008dd:	c1 e3 06             	shl    ebx,0x6
100008e0:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
100008e6:	09 d8                	or     eax,ebx
100008e8:	89 11                	mov    DWORD PTR [ecx],edx
100008ea:	ff 01                	inc    DWORD PTR [ecx]
100008ec:	5b                   	pop    ebx
100008ed:	5e                   	pop    esi
100008ee:	c3                   	ret    

100008ef <_ssfn_c>:
100008ef:	55                   	push   ebp
100008f0:	57                   	push   edi
100008f1:	56                   	push   esi
100008f2:	53                   	push   ebx
100008f3:	83 ec 14             	sub    esp,0x14
100008f6:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
100008fc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000900:	85 c0                	test   eax,eax
10000902:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
10000908:	0f 84 e6 00 00 00    	je     100009f4 <_ssfn_c+0x105>
1000090e:	31 ff                	xor    edi,edi
10000910:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
10000914:	0f 84 f3 00 00 00    	je     10000a0d <_ssfn_c+0x11e>
1000091a:	85 d2                	test   edx,edx
1000091c:	0f 84 eb 00 00 00    	je     10000a0d <_ssfn_c+0x11e>
10000922:	80 3a 00             	cmp    BYTE PTR [edx],0x0
10000925:	0f 84 e2 00 00 00    	je     10000a0d <_ssfn_c+0x11e>
1000092b:	89 d6                	mov    esi,edx
1000092d:	89 cd                	mov    ebp,ecx
1000092f:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000932:	89 c3                	mov    ebx,eax
10000934:	85 d2                	test   edx,edx
10000936:	74 38                	je     10000970 <_ssfn_c+0x81>
10000938:	8d 0c 13             	lea    ecx,[ebx+edx*1]
1000093b:	31 c0                	xor    eax,eax
1000093d:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000940:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000943:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
10000947:	66 85 d2             	test   dx,dx
1000094a:	74 24                	je     10000970 <_ssfn_c+0x81>
1000094c:	01 da                	add    edx,ebx
1000094e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000952:	8a 0a                	mov    cl,BYTE PTR [edx]
10000954:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000958:	84 c9                	test   cl,cl
1000095a:	0f 84 9e 00 00 00    	je     100009fe <_ssfn_c+0x10f>
10000960:	3a 0f                	cmp    cl,BYTE PTR [edi]
10000962:	0f 85 90 00 00 00    	jne    100009f8 <_ssfn_c+0x109>
10000968:	47                   	inc    edi
10000969:	42                   	inc    edx
1000096a:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
1000096e:	eb e2                	jmp    10000952 <_ssfn_c+0x63>
10000970:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000974:	8d 44 24 10          	lea    eax,[esp+0x10]
10000978:	50                   	push   eax
10000979:	e8 fc ff ff ff       	call   1000097a <_ssfn_c+0x8b>	1000097a: R_386_PC32	ssfn_utf8
1000097e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000982:	29 f2                	sub    edx,esi
10000984:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
10000987:	5a                   	pop    edx
10000988:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
1000098c:	89 06                	mov    DWORD PTR [esi],eax
1000098e:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
10000991:	89 df                	mov    edi,ebx
10000993:	31 db                	xor    ebx,ebx
10000995:	8a 17                	mov    dl,BYTE PTR [edi]
10000997:	80 fa ff             	cmp    dl,0xff
1000099a:	75 08                	jne    100009a4 <_ssfn_c+0xb5>
1000099c:	81 c3 ff ff 00 00    	add    ebx,0xffff
100009a2:	eb 2a                	jmp    100009ce <_ssfn_c+0xdf>
100009a4:	88 d1                	mov    cl,dl
100009a6:	83 e1 c0             	and    ecx,0xffffffc0
100009a9:	80 f9 c0             	cmp    cl,0xc0
100009ac:	75 16                	jne    100009c4 <_ssfn_c+0xd5>
100009ae:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100009b2:	c1 e2 08             	shl    edx,0x8
100009b5:	83 c7 02             	add    edi,0x2
100009b8:	81 e2 00 3f 00 00    	and    edx,0x3f00
100009be:	09 ca                	or     edx,ecx
100009c0:	01 d3                	add    ebx,edx
100009c2:	eb 27                	jmp    100009eb <_ssfn_c+0xfc>
100009c4:	80 f9 80             	cmp    cl,0x80
100009c7:	75 08                	jne    100009d1 <_ssfn_c+0xe2>
100009c9:	83 e2 3f             	and    edx,0x3f
100009cc:	01 d3                	add    ebx,edx
100009ce:	47                   	inc    edi
100009cf:	eb 1a                	jmp    100009eb <_ssfn_c+0xfc>
100009d1:	39 d8                	cmp    eax,ebx
100009d3:	74 38                	je     10000a0d <_ssfn_c+0x11e>
100009d5:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100009d9:	83 e2 40             	and    edx,0x40
100009dc:	80 fa 01             	cmp    dl,0x1
100009df:	19 d2                	sbb    edx,edx
100009e1:	83 c2 06             	add    edx,0x6
100009e4:	0f af d1             	imul   edx,ecx
100009e7:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
100009eb:	43                   	inc    ebx
100009ec:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
100009f2:	76 a1                	jbe    10000995 <_ssfn_c+0xa6>
100009f4:	31 ff                	xor    edi,edi
100009f6:	eb 15                	jmp    10000a0d <_ssfn_c+0x11e>
100009f8:	40                   	inc    eax
100009f9:	e9 42 ff ff ff       	jmp    10000940 <_ssfn_c+0x51>
100009fe:	29 f7                	sub    edi,esi
10000a00:	05 00 f0 00 00       	add    eax,0xf000
10000a05:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
10000a08:	e9 7b ff ff ff       	jmp    10000988 <_ssfn_c+0x99>
10000a0d:	83 c4 14             	add    esp,0x14
10000a10:	89 f8                	mov    eax,edi
10000a12:	5b                   	pop    ebx
10000a13:	5e                   	pop    esi
10000a14:	5f                   	pop    edi
10000a15:	5d                   	pop    ebp
10000a16:	c3                   	ret    

10000a17 <_ssfn_zlib_decode>:
10000a17:	55                   	push   ebp
10000a18:	57                   	push   edi
10000a19:	56                   	push   esi
10000a1a:	53                   	push   ebx
10000a1b:	81 ec c8 19 00 00    	sub    esp,0x19c8
10000a21:	6a 08                	push   0x8
10000a23:	e8 fc ff ff ff       	call   10000a24 <_ssfn_zlib_decode+0xd>	10000a24: R_386_PC32	malloc
10000a28:	83 c4 10             	add    esp,0x10
10000a2b:	89 c2                	mov    edx,eax
10000a2d:	85 c0                	test   eax,eax
10000a2f:	0f 84 eb 04 00 00    	je     10000f20 <_ssfn_zlib_decode+0x509>
10000a35:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
10000a3c:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
10000a43:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
10000a4a:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
10000a51:	31 c0                	xor    eax,eax
10000a53:	83 c2 08             	add    edx,0x8
10000a56:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
10000a5d:	c6 80 e0 56 03 10 08 	mov    BYTE PTR [eax+0x100356e0],0x8	10000a5f: R_386_32	.bss
10000a64:	40                   	inc    eax
10000a65:	3d 90 00 00 00       	cmp    eax,0x90
10000a6a:	75 f1                	jne    10000a5d <_ssfn_zlib_decode+0x46>
10000a6c:	c6 80 e0 56 03 10 09 	mov    BYTE PTR [eax+0x100356e0],0x9	10000a6e: R_386_32	.bss
10000a73:	40                   	inc    eax
10000a74:	3d 00 01 00 00       	cmp    eax,0x100
10000a79:	75 f1                	jne    10000a6c <_ssfn_zlib_decode+0x55>
10000a7b:	c6 80 e0 56 03 10 07 	mov    BYTE PTR [eax+0x100356e0],0x7	10000a7d: R_386_32	.bss
10000a82:	40                   	inc    eax
10000a83:	3d 18 01 00 00       	cmp    eax,0x118
10000a88:	75 f1                	jne    10000a7b <_ssfn_zlib_decode+0x64>
10000a8a:	c7 05 f8 57 03 10 08 08 08 08 	mov    DWORD PTR ds:0x100357f8,0x8080808	10000a8c: R_386_32	.bss
10000a94:	c7 05 fc 57 03 10 08 08 08 08 	mov    DWORD PTR ds:0x100357fc,0x8080808	10000a96: R_386_32	.bss
10000a9e:	31 c0                	xor    eax,eax
10000aa0:	c6 80 c0 56 03 10 05 	mov    BYTE PTR [eax+0x100356c0],0x5	10000aa2: R_386_32	.bss
10000aa7:	40                   	inc    eax
10000aa8:	83 f8 20             	cmp    eax,0x20
10000aab:	75 f3                	jne    10000aa0 <_ssfn_zlib_decode+0x89>
10000aad:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
10000ab8:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
10000ac3:	ba 01 00 00 00       	mov    edx,0x1
10000ac8:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000acf:	e8 3d fd ff ff       	call   10000811 <_ssfn__zreceive>
10000ad4:	ba 02 00 00 00       	mov    edx,0x2
10000ad9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000add:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ae4:	e8 28 fd ff ff       	call   10000811 <_ssfn__zreceive>
10000ae9:	89 c6                	mov    esi,eax
10000aeb:	85 c0                	test   eax,eax
10000aed:	0f 85 09 01 00 00    	jne    10000bfc <_ssfn_zlib_decode+0x1e5>
10000af3:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000afa:	83 e2 07             	and    edx,0x7
10000afd:	74 0c                	je     10000b0b <_ssfn_zlib_decode+0xf4>
10000aff:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b06:	e8 06 fd ff ff       	call   10000811 <_ssfn__zreceive>
10000b0b:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000b12:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000b19:	31 c0                	xor    eax,eax
10000b1b:	31 db                	xor    ebx,ebx
10000b1d:	85 d2                	test   edx,edx
10000b1f:	7f 14                	jg     10000b35 <_ssfn_zlib_decode+0x11e>
10000b21:	84 db                	test   bl,bl
10000b23:	74 22                	je     10000b47 <_ssfn_zlib_decode+0x130>
10000b25:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000b2c:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000b33:	eb 12                	jmp    10000b47 <_ssfn_zlib_decode+0x130>
10000b35:	40                   	inc    eax
10000b36:	83 ea 08             	sub    edx,0x8
10000b39:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000b40:	b3 01                	mov    bl,0x1
10000b42:	c1 e9 08             	shr    ecx,0x8
10000b45:	eb d6                	jmp    10000b1d <_ssfn_zlib_decode+0x106>
10000b47:	83 f8 04             	cmp    eax,0x4
10000b4a:	74 1d                	je     10000b69 <_ssfn_zlib_decode+0x152>
10000b4c:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000b53:	40                   	inc    eax
10000b54:	8d 4a 01             	lea    ecx,[edx+0x1]
10000b57:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000b5e:	8a 12                	mov    dl,BYTE PTR [edx]
10000b60:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000b67:	eb de                	jmp    10000b47 <_ssfn_zlib_decode+0x130>
10000b69:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000b71:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000b79:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000b81:	c1 e3 08             	shl    ebx,0x8
10000b84:	01 c3                	add    ebx,eax
10000b86:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000b8e:	c1 e0 08             	shl    eax,0x8
10000b91:	01 d0                	add    eax,edx
10000b93:	89 da                	mov    edx,ebx
10000b95:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000b9b:	39 d0                	cmp    eax,edx
10000b9d:	0f 85 69 03 00 00    	jne    10000f0c <_ssfn_zlib_decode+0x4f5>
10000ba3:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000baa:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000bad:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000bb4:	73 14                	jae    10000bca <_ssfn_zlib_decode+0x1b3>
10000bb6:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000bbd:	e8 19 f7 ff ff       	call   100002db <_ssfn__zexpand>
10000bc2:	85 c0                	test   eax,eax
10000bc4:	0f 84 42 03 00 00    	je     10000f0c <_ssfn_zlib_decode+0x4f5>
10000bca:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000bd1:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000bd8:	39 f3                	cmp    ebx,esi
10000bda:	74 09                	je     10000be5 <_ssfn_zlib_decode+0x1ce>
10000bdc:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000bdf:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000be2:	46                   	inc    esi
10000be3:	eb e5                	jmp    10000bca <_ssfn_zlib_decode+0x1b3>
10000be5:	01 da                	add    edx,ebx
10000be7:	01 c3                	add    ebx,eax
10000be9:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000bf0:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000bf7:	e9 fc 02 00 00       	jmp    10000ef8 <_ssfn_zlib_decode+0x4e1>
10000bfc:	83 f8 03             	cmp    eax,0x3
10000bff:	0f 84 07 03 00 00    	je     10000f0c <_ssfn_zlib_decode+0x4f5>
10000c05:	4e                   	dec    esi
10000c06:	75 2d                	jne    10000c35 <_ssfn_zlib_decode+0x21e>
10000c08:	b9 20 01 00 00       	mov    ecx,0x120
10000c0d:	ba e0 56 03 10       	mov    edx,0x100356e0	10000c0e: R_386_32	.bss
10000c12:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000c19:	e8 1c f7 ff ff       	call   1000033a <_ssfn__zbuild_huffman>
10000c1e:	85 c0                	test   eax,eax
10000c20:	0f 84 e6 02 00 00    	je     10000f0c <_ssfn_zlib_decode+0x4f5>
10000c26:	b9 20 00 00 00       	mov    ecx,0x20
10000c2b:	ba c0 56 03 10       	mov    edx,0x100356c0	10000c2c: R_386_32	.bss
10000c30:	e9 78 01 00 00       	jmp    10000dad <_ssfn_zlib_decode+0x396>
10000c35:	ba 05 00 00 00       	mov    edx,0x5
10000c3a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c41:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000c45:	e8 c7 fb ff ff       	call   10000811 <_ssfn__zreceive>
10000c4a:	89 df                	mov    edi,ebx
10000c4c:	ba 05 00 00 00       	mov    edx,0x5
10000c51:	89 c5                	mov    ebp,eax
10000c53:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c5a:	e8 b2 fb ff ff       	call   10000811 <_ssfn__zreceive>
10000c5f:	ba 04 00 00 00       	mov    edx,0x4
10000c64:	89 c6                	mov    esi,eax
10000c66:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c6d:	e8 9f fb ff ff       	call   10000811 <_ssfn__zreceive>
10000c72:	b9 13 00 00 00       	mov    ecx,0x13
10000c77:	83 c0 04             	add    eax,0x4
10000c7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000c7e:	31 c0                	xor    eax,eax
10000c80:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000c82:	31 ff                	xor    edi,edi
10000c84:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000c88:	7e 1f                	jle    10000ca9 <_ssfn_zlib_decode+0x292>
10000c8a:	ba 03 00 00 00       	mov    edx,0x3
10000c8f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c96:	47                   	inc    edi
10000c97:	e8 75 fb ff ff       	call   10000811 <_ssfn__zreceive>
10000c9c:	0f b6 97 5f 52 00 10 	movzx  edx,BYTE PTR [edi+0x1000525f]	10000c9f: R_386_32	.text
10000ca3:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000ca7:	eb db                	jmp    10000c84 <_ssfn_zlib_decode+0x26d>
10000ca9:	b9 13 00 00 00       	mov    ecx,0x13
10000cae:	89 da                	mov    edx,ebx
10000cb0:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000cb7:	e8 7e f6 ff ff       	call   1000033a <_ssfn__zbuild_huffman>
10000cbc:	85 c0                	test   eax,eax
10000cbe:	0f 84 48 02 00 00    	je     10000f0c <_ssfn_zlib_decode+0x4f5>
10000cc4:	8d 46 01             	lea    eax,[esi+0x1]
10000cc7:	81 c5 01 01 00 00    	add    ebp,0x101
10000ccd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000cd1:	31 f6                	xor    esi,esi
10000cd3:	01 e8                	add    eax,ebp
10000cd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000cd9:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000cdd:	0f 8e 9f 00 00 00    	jle    10000d82 <_ssfn_zlib_decode+0x36b>
10000ce3:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000cea:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000cf1:	e8 35 f5 ff ff       	call   1000022b <_ssfn__zhuffman_decode>
10000cf6:	83 f8 12             	cmp    eax,0x12
10000cf9:	0f 87 0d 02 00 00    	ja     10000f0c <_ssfn_zlib_decode+0x4f5>
10000cff:	83 f8 0f             	cmp    eax,0xf
10000d02:	7f 07                	jg     10000d0b <_ssfn_zlib_decode+0x2f4>
10000d04:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000d08:	46                   	inc    esi
10000d09:	eb ce                	jmp    10000cd9 <_ssfn_zlib_decode+0x2c2>
10000d0b:	83 f8 10             	cmp    eax,0x10
10000d0e:	75 22                	jne    10000d32 <_ssfn_zlib_decode+0x31b>
10000d10:	ba 02 00 00 00       	mov    edx,0x2
10000d15:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d1c:	e8 f0 fa ff ff       	call   10000811 <_ssfn__zreceive>
10000d21:	85 f6                	test   esi,esi
10000d23:	8d 58 03             	lea    ebx,[eax+0x3]
10000d26:	0f 84 e0 01 00 00    	je     10000f0c <_ssfn_zlib_decode+0x4f5>
10000d2c:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000d30:	eb 31                	jmp    10000d63 <_ssfn_zlib_decode+0x34c>
10000d32:	83 f8 11             	cmp    eax,0x11
10000d35:	75 16                	jne    10000d4d <_ssfn_zlib_decode+0x336>
10000d37:	ba 03 00 00 00       	mov    edx,0x3
10000d3c:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d43:	e8 c9 fa ff ff       	call   10000811 <_ssfn__zreceive>
10000d48:	8d 58 03             	lea    ebx,[eax+0x3]
10000d4b:	eb 14                	jmp    10000d61 <_ssfn_zlib_decode+0x34a>
10000d4d:	ba 07 00 00 00       	mov    edx,0x7
10000d52:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d59:	e8 b3 fa ff ff       	call   10000811 <_ssfn__zreceive>
10000d5e:	8d 58 0b             	lea    ebx,[eax+0xb]
10000d61:	31 c0                	xor    eax,eax
10000d63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000d67:	29 f2                	sub    edx,esi
10000d69:	39 da                	cmp    edx,ebx
10000d6b:	0f 8c 9b 01 00 00    	jl     10000f0c <_ssfn_zlib_decode+0x4f5>
10000d71:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000d75:	89 d9                	mov    ecx,ebx
10000d77:	89 d7                	mov    edi,edx
10000d79:	01 de                	add    esi,ebx
10000d7b:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000d7d:	e9 57 ff ff ff       	jmp    10000cd9 <_ssfn_zlib_decode+0x2c2>
10000d82:	0f 85 84 01 00 00    	jne    10000f0c <_ssfn_zlib_decode+0x4f5>
10000d88:	89 e9                	mov    ecx,ebp
10000d8a:	8d 54 24 25          	lea    edx,[esp+0x25]
10000d8e:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000d95:	e8 a0 f5 ff ff       	call   1000033a <_ssfn__zbuild_huffman>
10000d9a:	85 c0                	test   eax,eax
10000d9c:	0f 84 6a 01 00 00    	je     10000f0c <_ssfn_zlib_decode+0x4f5>
10000da2:	8d 44 24 25          	lea    eax,[esp+0x25]
10000da6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000daa:	8d 14 28             	lea    edx,[eax+ebp*1]
10000dad:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000db4:	e8 81 f5 ff ff       	call   1000033a <_ssfn__zbuild_huffman>
10000db9:	85 c0                	test   eax,eax
10000dbb:	0f 84 4b 01 00 00    	je     10000f0c <_ssfn_zlib_decode+0x4f5>
10000dc1:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000dc8:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000dcf:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dd6:	e8 50 f4 ff ff       	call   1000022b <_ssfn__zhuffman_decode>
10000ddb:	89 c3                	mov    ebx,eax
10000ddd:	3d ff 00 00 00       	cmp    eax,0xff
10000de2:	7f 34                	jg     10000e18 <_ssfn_zlib_decode+0x401>
10000de4:	85 c0                	test   eax,eax
10000de6:	0f 88 20 01 00 00    	js     10000f0c <_ssfn_zlib_decode+0x4f5>
10000dec:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000df3:	77 1d                	ja     10000e12 <_ssfn_zlib_decode+0x3fb>
10000df5:	89 ea                	mov    edx,ebp
10000df7:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dfe:	e8 d8 f4 ff ff       	call   100002db <_ssfn__zexpand>
10000e03:	85 c0                	test   eax,eax
10000e05:	0f 84 01 01 00 00    	je     10000f0c <_ssfn_zlib_decode+0x4f5>
10000e0b:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000e12:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000e15:	45                   	inc    ebp
10000e16:	eb b0                	jmp    10000dc8 <_ssfn_zlib_decode+0x3b1>
10000e18:	3d 00 01 00 00       	cmp    eax,0x100
10000e1d:	75 0c                	jne    10000e2b <_ssfn_zlib_decode+0x414>
10000e1f:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000e26:	e9 cd 00 00 00       	jmp    10000ef8 <_ssfn_zlib_decode+0x4e1>
10000e2b:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000e31:	8b 14 85 80 53 00 10 	mov    edx,DWORD PTR [eax*4+0x10005380]	10000e34: R_386_32	.text
10000e38:	8b 1c 85 00 54 00 10 	mov    ebx,DWORD PTR [eax*4+0x10005400]	10000e3b: R_386_32	.text
10000e3f:	85 d2                	test   edx,edx
10000e41:	74 0e                	je     10000e51 <_ssfn_zlib_decode+0x43a>
10000e43:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e4a:	e8 c2 f9 ff ff       	call   10000811 <_ssfn__zreceive>
10000e4f:	01 c3                	add    ebx,eax
10000e51:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000e58:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e5f:	e8 c7 f3 ff ff       	call   1000022b <_ssfn__zhuffman_decode>
10000e64:	85 c0                	test   eax,eax
10000e66:	0f 88 a0 00 00 00    	js     10000f0c <_ssfn_zlib_decode+0x4f5>
10000e6c:	8b 14 85 80 52 00 10 	mov    edx,DWORD PTR [eax*4+0x10005280]	10000e6f: R_386_32	.text
10000e73:	8b 3c 85 00 53 00 10 	mov    edi,DWORD PTR [eax*4+0x10005300]	10000e76: R_386_32	.text
10000e7a:	85 d2                	test   edx,edx
10000e7c:	74 0e                	je     10000e8c <_ssfn_zlib_decode+0x475>
10000e7e:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e85:	e8 87 f9 ff ff       	call   10000811 <_ssfn__zreceive>
10000e8a:	01 c7                	add    edi,eax
10000e8c:	89 e8                	mov    eax,ebp
10000e8e:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000e95:	39 f8                	cmp    eax,edi
10000e97:	7c 73                	jl     10000f0c <_ssfn_zlib_decode+0x4f5>
10000e99:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000e9d:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000ea4:	73 19                	jae    10000ebf <_ssfn_zlib_decode+0x4a8>
10000ea6:	89 ea                	mov    edx,ebp
10000ea8:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000eaf:	e8 27 f4 ff ff       	call   100002db <_ssfn__zexpand>
10000eb4:	85 c0                	test   eax,eax
10000eb6:	74 54                	je     10000f0c <_ssfn_zlib_decode+0x4f5>
10000eb8:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000ebf:	89 ee                	mov    esi,ebp
10000ec1:	29 fe                	sub    esi,edi
10000ec3:	4f                   	dec    edi
10000ec4:	75 19                	jne    10000edf <_ssfn_zlib_decode+0x4c8>
10000ec6:	85 db                	test   ebx,ebx
10000ec8:	0f 84 fa fe ff ff    	je     10000dc8 <_ssfn_zlib_decode+0x3b1>
10000ece:	8a 06                	mov    al,BYTE PTR [esi]
10000ed0:	01 eb                	add    ebx,ebp
10000ed2:	45                   	inc    ebp
10000ed3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000ed6:	39 dd                	cmp    ebp,ebx
10000ed8:	75 f8                	jne    10000ed2 <_ssfn_zlib_decode+0x4bb>
10000eda:	e9 e9 fe ff ff       	jmp    10000dc8 <_ssfn_zlib_decode+0x3b1>
10000edf:	85 db                	test   ebx,ebx
10000ee1:	0f 84 e1 fe ff ff    	je     10000dc8 <_ssfn_zlib_decode+0x3b1>
10000ee7:	8d 04 1e             	lea    eax,[esi+ebx*1]
10000eea:	89 ef                	mov    edi,ebp
10000eec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000eed:	39 f0                	cmp    eax,esi
10000eef:	75 fb                	jne    10000eec <_ssfn_zlib_decode+0x4d5>
10000ef1:	01 dd                	add    ebp,ebx
10000ef3:	e9 d0 fe ff ff       	jmp    10000dc8 <_ssfn_zlib_decode+0x3b1>
10000ef8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10000efd:	0f 84 c0 fb ff ff    	je     10000ac3 <_ssfn_zlib_decode+0xac>
10000f03:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
10000f0a:	eb 14                	jmp    10000f20 <_ssfn_zlib_decode+0x509>
10000f0c:	83 ec 0c             	sub    esp,0xc
10000f0f:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10000f16:	e8 fc ff ff ff       	call   10000f17 <_ssfn_zlib_decode+0x500>	10000f17: R_386_PC32	free
10000f1b:	83 c4 10             	add    esp,0x10
10000f1e:	31 c0                	xor    eax,eax
10000f20:	81 c4 bc 19 00 00    	add    esp,0x19bc
10000f26:	5b                   	pop    ebx
10000f27:	5e                   	pop    esi
10000f28:	5f                   	pop    edi
10000f29:	5d                   	pop    ebp
10000f2a:	c3                   	ret    

10000f2b <ssfn_load>:
10000f2b:	55                   	push   ebp
10000f2c:	57                   	push   edi
10000f2d:	56                   	push   esi
10000f2e:	53                   	push   ebx
10000f2f:	83 ec 1c             	sub    esp,0x1c
10000f32:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000f36:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000f3a:	85 ff                	test   edi,edi
10000f3c:	0f 84 d0 01 00 00    	je     10001112 <ssfn_load+0x1e7>
10000f42:	85 f6                	test   esi,esi
10000f44:	0f 84 c8 01 00 00    	je     10001112 <ssfn_load+0x1e7>
10000f4a:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
10000f4d:	0f 85 a8 00 00 00    	jne    10000ffb <ssfn_load+0xd0>
10000f53:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10000f57:	0f 85 9e 00 00 00    	jne    10000ffb <ssfn_load+0xd0>
10000f5d:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10000f61:	74 0a                	je     10000f6d <ssfn_load+0x42>
10000f63:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10000f68:	e9 aa 01 00 00       	jmp    10001117 <ssfn_load+0x1ec>
10000f6d:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
10000f70:	a8 04                	test   al,0x4
10000f72:	75 05                	jne    10000f79 <ssfn_load+0x4e>
10000f74:	83 c6 0a             	add    esi,0xa
10000f77:	eb 08                	jmp    10000f81 <ssfn_load+0x56>
10000f79:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
10000f7d:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10000f81:	a8 08                	test   al,0x8
10000f83:	74 07                	je     10000f8c <ssfn_load+0x61>
10000f85:	46                   	inc    esi
10000f86:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f8a:	eb f7                	jmp    10000f83 <ssfn_load+0x58>
10000f8c:	a8 10                	test   al,0x10
10000f8e:	74 07                	je     10000f97 <ssfn_load+0x6c>
10000f90:	46                   	inc    esi
10000f91:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f95:	eb f7                	jmp    10000f8e <ssfn_load+0x63>
10000f97:	83 ec 0c             	sub    esp,0xc
10000f9a:	56                   	push   esi
10000f9b:	e8 fc ff ff ff       	call   10000f9c <ssfn_load+0x71>	10000f9c: R_386_PC32	_ssfn_zlib_decode
10000fa0:	83 c4 10             	add    esp,0x10
10000fa3:	89 c6                	mov    esi,eax
10000fa5:	85 c0                	test   eax,eax
10000fa7:	74 ba                	je     10000f63 <ssfn_load+0x38>
10000fa9:	50                   	push   eax
10000faa:	50                   	push   eax
10000fab:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10000fb1:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10000fb8:	50                   	push   eax
10000fb9:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
10000fbf:	e8 fc ff ff ff       	call   10000fc0 <ssfn_load+0x95>	10000fc0: R_386_PC32	realloc
10000fc4:	83 c4 10             	add    esp,0x10
10000fc7:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
10000fcd:	85 c0                	test   eax,eax
10000fcf:	75 0f                	jne    10000fe0 <ssfn_load+0xb5>
10000fd1:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10000fdb:	e9 1a 01 00 00       	jmp    100010fa <ssfn_load+0x1cf>
10000fe0:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10000fe6:	8d 4a 01             	lea    ecx,[edx+0x1]
10000fe9:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
10000fef:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10000ff2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000ff5:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10000ffb:	50                   	push   eax
10000ffc:	6a 04                	push   0x4
10000ffe:	68 31 51 00 10       	push   0x10005131	10000fff: R_386_32	.text
10001003:	56                   	push   esi
10001004:	e8 fc ff ff ff       	call   10001005 <ssfn_load+0xda>	10001005: R_386_PC32	memcmp
10001009:	83 c4 10             	add    esp,0x10
1000100c:	89 c5                	mov    ebp,eax
1000100e:	85 c0                	test   eax,eax
10001010:	75 29                	jne    1000103b <ssfn_load+0x110>
10001012:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10001015:	01 f3                	add    ebx,esi
10001017:	83 c6 08             	add    esi,0x8
1000101a:	39 de                	cmp    esi,ebx
1000101c:	0f 83 f5 00 00 00    	jae    10001117 <ssfn_load+0x1ec>
10001022:	50                   	push   eax
10001023:	50                   	push   eax
10001024:	56                   	push   esi
10001025:	57                   	push   edi
10001026:	e8 fc ff ff ff       	call   10001027 <ssfn_load+0xfc>	10001027: R_386_PC32	ssfn_load
1000102b:	83 c4 10             	add    esp,0x10
1000102e:	85 c0                	test   eax,eax
10001030:	0f 85 e1 00 00 00    	jne    10001117 <ssfn_load+0x1ec>
10001036:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10001039:	eb df                	jmp    1000101a <ssfn_load+0xef>
1000103b:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
1000103e:	83 e0 0f             	and    eax,0xf
10001041:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10001045:	53                   	push   ebx
10001046:	6a 04                	push   0x4
10001048:	68 36 51 00 10       	push   0x10005136	10001049: R_386_32	.text
1000104d:	56                   	push   esi
1000104e:	e8 fc ff ff ff       	call   1000104f <ssfn_load+0x124>	1000104f: R_386_PC32	memcmp
10001053:	83 c4 10             	add    esp,0x10
10001056:	89 c5                	mov    ebp,eax
10001058:	85 c0                	test   eax,eax
1000105a:	0f 85 03 ff ff ff    	jne    10000f63 <ssfn_load+0x38>
10001060:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10001063:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
10001067:	51                   	push   ecx
10001068:	6a 04                	push   0x4
1000106a:	68 3b 51 00 10       	push   0x1000513b	1000106b: R_386_32	.text
1000106f:	50                   	push   eax
10001070:	e8 fc ff ff ff       	call   10001071 <ssfn_load+0x146>	10001071: R_386_PC32	memcmp
10001075:	83 c4 10             	add    esp,0x10
10001078:	85 c0                	test   eax,eax
1000107a:	0f 85 e3 fe ff ff    	jne    10000f63 <ssfn_load+0x38>
10001080:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
10001085:	0f 87 d8 fe ff ff    	ja     10000f63 <ssfn_load+0x38>
1000108b:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
1000108f:	39 cb                	cmp    ebx,ecx
10001091:	0f 86 cc fe ff ff    	jbe    10000f63 <ssfn_load+0x38>
10001097:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
1000109a:	39 c3                	cmp    ebx,eax
1000109c:	0f 86 c1 fe ff ff    	jbe    10000f63 <ssfn_load+0x38>
100010a2:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
100010a5:	0f 86 b8 fe ff ff    	jbe    10000f63 <ssfn_load+0x38>
100010ab:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
100010ae:	0f 86 af fe ff ff    	jbe    10000f63 <ssfn_load+0x38>
100010b4:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
100010b7:	0f 86 a6 fe ff ff    	jbe    10000f63 <ssfn_load+0x38>
100010bd:	39 c1                	cmp    ecx,eax
100010bf:	0f 83 9e fe ff ff    	jae    10000f63 <ssfn_load+0x38>
100010c5:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
100010ca:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
100010cd:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
100010d3:	40                   	inc    eax
100010d4:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
100010da:	52                   	push   edx
100010db:	c1 e0 02             	shl    eax,0x2
100010de:	52                   	push   edx
100010df:	50                   	push   eax
100010e0:	ff 33                	push   DWORD PTR [ebx]
100010e2:	e8 fc ff ff ff       	call   100010e3 <ssfn_load+0x1b8>	100010e3: R_386_PC32	realloc
100010e7:	83 c4 10             	add    esp,0x10
100010ea:	89 03                	mov    DWORD PTR [ebx],eax
100010ec:	85 c0                	test   eax,eax
100010ee:	75 0f                	jne    100010ff <ssfn_load+0x1d4>
100010f0:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
100010fa:	83 cd ff             	or     ebp,0xffffffff
100010fd:	eb 18                	jmp    10001117 <ssfn_load+0x1ec>
100010ff:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
10001105:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
10001109:	89 f8                	mov    eax,edi
1000110b:	e8 ad f3 ff ff       	call   100004bd <_ssfn_fc.part.1>
10001110:	eb 05                	jmp    10001117 <ssfn_load+0x1ec>
10001112:	bd fc ff ff ff       	mov    ebp,0xfffffffc
10001117:	83 c4 1c             	add    esp,0x1c
1000111a:	89 e8                	mov    eax,ebp
1000111c:	5b                   	pop    ebx
1000111d:	5e                   	pop    esi
1000111e:	5f                   	pop    edi
1000111f:	5d                   	pop    ebp
10001120:	c3                   	ret    

10001121 <ssfn_free>:
10001121:	57                   	push   edi
10001122:	56                   	push   esi
10001123:	53                   	push   ebx
10001124:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001128:	85 db                	test   ebx,ebx
1000112a:	74 7e                	je     100011aa <ssfn_free+0x89>
1000112c:	89 d8                	mov    eax,ebx
1000112e:	e8 8a f3 ff ff       	call   100004bd <_ssfn_fc.part.1>
10001133:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
1000113a:	74 32                	je     1000116e <ssfn_free+0x4d>
1000113c:	31 f6                	xor    esi,esi
1000113e:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
10001144:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
1000114a:	7e 16                	jle    10001162 <ssfn_free+0x41>
1000114c:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
1000114f:	85 c0                	test   eax,eax
10001151:	74 0c                	je     1000115f <ssfn_free+0x3e>
10001153:	83 ec 0c             	sub    esp,0xc
10001156:	50                   	push   eax
10001157:	e8 fc ff ff ff       	call   10001158 <ssfn_free+0x37>	10001158: R_386_PC32	free
1000115c:	83 c4 10             	add    esp,0x10
1000115f:	46                   	inc    esi
10001160:	eb dc                	jmp    1000113e <ssfn_free+0x1d>
10001162:	83 ec 0c             	sub    esp,0xc
10001165:	50                   	push   eax
10001166:	e8 fc ff ff ff       	call   10001167 <ssfn_free+0x46>	10001167: R_386_PC32	free
1000116b:	83 c4 10             	add    esp,0x10
1000116e:	31 f6                	xor    esi,esi
10001170:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
10001173:	85 c0                	test   eax,eax
10001175:	74 0c                	je     10001183 <ssfn_free+0x62>
10001177:	83 ec 0c             	sub    esp,0xc
1000117a:	50                   	push   eax
1000117b:	e8 fc ff ff ff       	call   1000117c <ssfn_free+0x5b>	1000117c: R_386_PC32	free
10001180:	83 c4 10             	add    esp,0x10
10001183:	46                   	inc    esi
10001184:	83 fe 05             	cmp    esi,0x5
10001187:	75 e7                	jne    10001170 <ssfn_free+0x4f>
10001189:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000118f:	85 c0                	test   eax,eax
10001191:	74 0c                	je     1000119f <ssfn_free+0x7e>
10001193:	83 ec 0c             	sub    esp,0xc
10001196:	50                   	push   eax
10001197:	e8 fc ff ff ff       	call   10001198 <ssfn_free+0x77>	10001198: R_386_PC32	free
1000119c:	83 c4 10             	add    esp,0x10
1000119f:	b9 72 3d 00 00       	mov    ecx,0x3d72
100011a4:	31 c0                	xor    eax,eax
100011a6:	89 df                	mov    edi,ebx
100011a8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100011aa:	5b                   	pop    ebx
100011ab:	5e                   	pop    esi
100011ac:	5f                   	pop    edi
100011ad:	c3                   	ret    

100011ae <ssfn_mem>:
100011ae:	55                   	push   ebp
100011af:	31 c0                	xor    eax,eax
100011b1:	57                   	push   edi
100011b2:	56                   	push   esi
100011b3:	53                   	push   ebx
100011b4:	83 ec 08             	sub    esp,0x8
100011b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100011bb:	85 d2                	test   edx,edx
100011bd:	0f 84 8e 00 00 00    	je     10001251 <ssfn_mem+0xa3>
100011c3:	b8 c8 f5 00 00       	mov    eax,0xf5c8
100011c8:	31 c9                	xor    ecx,ecx
100011ca:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
100011d1:	41                   	inc    ecx
100011d2:	8d 04 98             	lea    eax,[eax+ebx*4]
100011d5:	83 f9 05             	cmp    ecx,0x5
100011d8:	75 f0                	jne    100011ca <ssfn_mem+0x1c>
100011da:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
100011e0:	31 c9                	xor    ecx,ecx
100011e2:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
100011e9:	89 34 24             	mov    DWORD PTR [esp],esi
100011ec:	85 f6                	test   esi,esi
100011ee:	74 48                	je     10001238 <ssfn_mem+0x8a>
100011f0:	31 db                	xor    ebx,ebx
100011f2:	8b 34 24             	mov    esi,DWORD PTR [esp]
100011f5:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
100011f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
100011fc:	85 ff                	test   edi,edi
100011fe:	74 2a                	je     1000122a <ssfn_mem+0x7c>
10001200:	31 f6                	xor    esi,esi
10001202:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
10001206:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10001209:	85 ed                	test   ebp,ebp
1000120b:	74 0f                	je     1000121c <ssfn_mem+0x6e>
1000120d:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
10001211:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
10001215:	0f af fd             	imul   edi,ebp
10001218:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
1000121c:	46                   	inc    esi
1000121d:	81 fe 00 01 00 00    	cmp    esi,0x100
10001223:	75 dd                	jne    10001202 <ssfn_mem+0x54>
10001225:	05 00 04 00 00       	add    eax,0x400
1000122a:	43                   	inc    ebx
1000122b:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001231:	75 bf                	jne    100011f2 <ssfn_mem+0x44>
10001233:	05 00 04 00 00       	add    eax,0x400
10001238:	41                   	inc    ecx
10001239:	83 f9 11             	cmp    ecx,0x11
1000123c:	75 a4                	jne    100011e2 <ssfn_mem+0x34>
1000123e:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
10001245:	74 0a                	je     10001251 <ssfn_mem+0xa3>
10001247:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
1000124d:	01 d2                	add    edx,edx
1000124f:	01 d0                	add    eax,edx
10001251:	83 c4 08             	add    esp,0x8
10001254:	5b                   	pop    ebx
10001255:	5e                   	pop    esi
10001256:	5f                   	pop    edi
10001257:	5d                   	pop    ebp
10001258:	c3                   	ret    

10001259 <ssfn_select>:
10001259:	55                   	push   ebp
1000125a:	57                   	push   edi
1000125b:	56                   	push   esi
1000125c:	53                   	push   ebx
1000125d:	83 ec 1c             	sub    esp,0x1c
10001260:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10001264:	85 db                	test   ebx,ebx
10001266:	75 0a                	jne    10001272 <ssfn_select+0x19>
10001268:	be fc ff ff ff       	mov    esi,0xfffffffc
1000126d:	e9 13 01 00 00       	jmp    10001385 <ssfn_select+0x12c>
10001272:	89 d8                	mov    eax,ebx
10001274:	e8 44 f2 ff ff       	call   100004bd <_ssfn_fc.part.1>
10001279:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
1000127d:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
10001283:	0f 85 e9 00 00 00    	jne    10001372 <ssfn_select+0x119>
10001289:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000128d:	83 e8 08             	sub    eax,0x8
10001290:	3d b8 00 00 00       	cmp    eax,0xb8
10001295:	0f 87 de 00 00 00    	ja     10001379 <ssfn_select+0x120>
1000129b:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
100012a3:	75 76                	jne    1000131b <ssfn_select+0xc2>
100012a5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
100012aa:	74 bc                	je     10001268 <ssfn_select+0xf>
100012ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100012b0:	80 38 00             	cmp    BYTE PTR [eax],0x0
100012b3:	74 b3                	je     10001268 <ssfn_select+0xf>
100012b5:	31 ed                	xor    ebp,ebp
100012b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100012bb:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
100012bf:	74 03                	je     100012c4 <ssfn_select+0x6b>
100012c1:	45                   	inc    ebp
100012c2:	eb f3                	jmp    100012b7 <ssfn_select+0x5e>
100012c4:	8d 43 14             	lea    eax,[ebx+0x14]
100012c7:	89 df                	mov    edi,ebx
100012c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100012cd:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
100012d3:	31 d2                	xor    edx,edx
100012d5:	89 04 24             	mov    DWORD PTR [esp],eax
100012d8:	39 14 24             	cmp    DWORD PTR [esp],edx
100012db:	7e 33                	jle    10001310 <ssfn_select+0xb7>
100012dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100012e1:	8b 07                	mov    eax,DWORD PTR [edi]
100012e3:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
100012e6:	50                   	push   eax
100012e7:	8d 41 20             	lea    eax,[ecx+0x20]
100012ea:	55                   	push   ebp
100012eb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100012ef:	50                   	push   eax
100012f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
100012f4:	e8 fc ff ff ff       	call   100012f5 <ssfn_select+0x9c>	100012f5: R_386_PC32	memcmp
100012f9:	83 c4 10             	add    esp,0x10
100012fc:	85 c0                	test   eax,eax
100012fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10001302:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10001306:	75 05                	jne    1000130d <ssfn_select+0xb4>
10001308:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
1000130b:	eb 34                	jmp    10001341 <ssfn_select+0xe8>
1000130d:	42                   	inc    edx
1000130e:	eb c8                	jmp    100012d8 <ssfn_select+0x7f>
10001310:	83 c7 04             	add    edi,0x4
10001313:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10001317:	75 b4                	jne    100012cd <ssfn_select+0x74>
10001319:	eb 65                	jmp    10001380 <ssfn_select+0x127>
1000131b:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
10001323:	74 15                	je     1000133a <ssfn_select+0xe1>
10001325:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
1000132a:	7f 54                	jg     10001380 <ssfn_select+0x127>
1000132c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001330:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
10001338:	74 46                	je     10001380 <ssfn_select+0x127>
1000133a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10001341:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001345:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
1000134c:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
10001352:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
1000135c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001360:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
10001366:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000136a:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
10001370:	eb 13                	jmp    10001385 <ssfn_select+0x12c>
10001372:	be fb ff ff ff       	mov    esi,0xfffffffb
10001377:	eb 0c                	jmp    10001385 <ssfn_select+0x12c>
10001379:	be fa ff ff ff       	mov    esi,0xfffffffa
1000137e:	eb 05                	jmp    10001385 <ssfn_select+0x12c>
10001380:	be fd ff ff ff       	mov    esi,0xfffffffd
10001385:	83 c4 1c             	add    esp,0x1c
10001388:	89 f0                	mov    eax,esi
1000138a:	5b                   	pop    ebx
1000138b:	5e                   	pop    esi
1000138c:	5f                   	pop    edi
1000138d:	5d                   	pop    ebp
1000138e:	c3                   	ret    

1000138f <ssfn_render>:
1000138f:	55                   	push   ebp
10001390:	57                   	push   edi
10001391:	56                   	push   esi
10001392:	53                   	push   ebx
10001393:	81 ec dc 05 01 00    	sub    esp,0x105dc
10001399:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
100013a0:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
100013ab:	85 ed                	test   ebp,ebp
100013ad:	0f 94 c2             	sete   dl
100013b0:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
100013b8:	0f 94 c0             	sete   al
100013bb:	08 c2                	or     dl,al
100013bd:	74 0a                	je     100013c9 <ssfn_render+0x3a>
100013bf:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
100013c4:	e9 14 1e 00 00       	jmp    100031dd <ssfn_render+0x1e4e>
100013c9:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
100013d0:	31 c9                	xor    ecx,ecx
100013d2:	8a 00                	mov    al,BYTE PTR [eax]
100013d4:	84 c0                	test   al,al
100013d6:	0f 84 01 1e 00 00    	je     100031dd <ssfn_render+0x1e4e>
100013dc:	3c 0d                	cmp    al,0xd
100013de:	75 0f                	jne    100013ef <ssfn_render+0x60>
100013e0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100013e7:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100013ed:	eb 31                	jmp    10001420 <ssfn_render+0x91>
100013ef:	3c 0a                	cmp    al,0xa
100013f1:	75 37                	jne    1000142a <ssfn_render+0x9b>
100013f3:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100013fa:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10001400:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
10001403:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
10001409:	85 c0                	test   eax,eax
1000140b:	75 06                	jne    10001413 <ssfn_render+0x84>
1000140d:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
10001413:	01 d0                	add    eax,edx
10001415:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000141c:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10001420:	b9 01 00 00 00       	mov    ecx,0x1
10001425:	e9 b3 1d 00 00       	jmp    100031dd <ssfn_render+0x1e4e>
1000142a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000142d:	85 c0                	test   eax,eax
1000142f:	74 3e                	je     1000146f <ssfn_render+0xe0>
10001431:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10001434:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
1000143b:	56                   	push   esi
1000143c:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001443:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000144a:	e8 a0 f4 ff ff       	call   100008ef <_ssfn_c>
1000144f:	5b                   	pop    ebx
10001450:	85 c0                	test   eax,eax
10001452:	0f 85 71 02 00 00    	jne    100016c9 <ssfn_render+0x33a>
10001458:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
1000145e:	81 e2 00 01 00 00    	and    edx,0x100
10001464:	0f 84 fd 01 00 00    	je     10001667 <ssfn_render+0x2d8>
1000146a:	e9 1d 02 00 00       	jmp    1000168c <ssfn_render+0x2fd>
1000146f:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
10001475:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
1000147c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001480:	3d fd 00 00 00       	cmp    eax,0xfd
10001485:	7f 08                	jg     1000148f <ssfn_render+0x100>
10001487:	89 c3                	mov    ebx,eax
10001489:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000148d:	eb 3f                	jmp    100014ce <ssfn_render+0x13f>
1000148f:	31 db                	xor    ebx,ebx
10001491:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
10001499:	eb 33                	jmp    100014ce <ssfn_render+0x13f>
1000149b:	85 c0                	test   eax,eax
1000149d:	0f 84 64 01 00 00    	je     10001607 <ssfn_render+0x278>
100014a3:	43                   	inc    ebx
100014a4:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
100014a8:	7e 28                	jle    100014d2 <ssfn_render+0x143>
100014aa:	85 c0                	test   eax,eax
100014ac:	0f 85 17 02 00 00    	jne    100016c9 <ssfn_render+0x33a>
100014b2:	31 db                	xor    ebx,ebx
100014b4:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100014bc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
100014c4:	74 92                	je     10001458 <ssfn_render+0xc9>
100014c6:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
100014ce:	31 c0                	xor    eax,eax
100014d0:	eb d2                	jmp    100014a4 <ssfn_render+0x115>
100014d2:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
100014d6:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
100014dd:	74 bc                	je     1000149b <ssfn_render+0x10c>
100014df:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100014ea:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
100014f1:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
100014f8:	7e 50                	jle    1000154a <ssfn_render+0x1bb>
100014fa:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
100014fd:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
10001501:	c1 fa 04             	sar    edx,0x4
10001504:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
1000150a:	80 e2 03             	and    dl,0x3
1000150d:	75 32                	jne    10001541 <ssfn_render+0x1b2>
1000150f:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
10001513:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001519:	75 26                	jne    10001541 <ssfn_render+0x1b2>
1000151b:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
10001522:	50                   	push   eax
10001523:	89 f8                	mov    eax,edi
10001525:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000152c:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001533:	e8 b7 f3 ff ff       	call   100008ef <_ssfn_c>
10001538:	59                   	pop    ecx
10001539:	85 c0                	test   eax,eax
1000153b:	0f 85 04 01 00 00    	jne    10001645 <ssfn_render+0x2b6>
10001541:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001548:	eb a0                	jmp    100014ea <ssfn_render+0x15b>
1000154a:	85 c0                	test   eax,eax
1000154c:	0f 85 51 ff ff ff    	jne    100014a3 <ssfn_render+0x114>
10001552:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000155d:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001564:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
1000156b:	0f 8e f9 1b 00 00    	jle    1000316a <ssfn_render+0x1ddb>
10001571:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001574:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
10001578:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
1000157e:	74 09                	je     10001589 <ssfn_render+0x1fa>
10001580:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001587:	eb d4                	jmp    1000155d <ssfn_render+0x1ce>
10001589:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001590:	57                   	push   edi
10001591:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001598:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000159f:	e8 4b f3 ff ff       	call   100008ef <_ssfn_c>
100015a4:	5a                   	pop    edx
100015a5:	85 c0                	test   eax,eax
100015a7:	74 d7                	je     10001580 <ssfn_render+0x1f1>
100015a9:	e9 97 00 00 00       	jmp    10001645 <ssfn_render+0x2b6>
100015ae:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100015b1:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
100015b5:	c1 fa 04             	sar    edx,0x4
100015b8:	31 ca                	xor    edx,ecx
100015ba:	80 e2 03             	and    dl,0x3
100015bd:	0f 84 b7 1b 00 00    	je     1000317a <ssfn_render+0x1deb>
100015c3:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100015ca:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015d1:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
100015d7:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015de:	7f ce                	jg     100015ae <ssfn_render+0x21f>
100015e0:	83 e1 03             	and    ecx,0x3
100015e3:	83 f9 03             	cmp    ecx,0x3
100015e6:	75 1f                	jne    10001607 <ssfn_render+0x278>
100015e8:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100015f3:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015fa:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001601:	0f 8f 9c 1b 00 00    	jg     100031a3 <ssfn_render+0x1e14>
10001607:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001612:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001619:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001620:	7e 3e                	jle    10001660 <ssfn_render+0x2d1>
10001622:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001625:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
1000162c:	57                   	push   edi
1000162d:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001634:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000163b:	e8 af f2 ff ff       	call   100008ef <_ssfn_c>
10001640:	5a                   	pop    edx
10001641:	85 c0                	test   eax,eax
10001643:	74 12                	je     10001657 <ssfn_render+0x2c8>
10001645:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000164c:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
1000164f:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
10001652:	e9 4c fe ff ff       	jmp    100014a3 <ssfn_render+0x114>
10001657:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000165e:	eb b2                	jmp    10001612 <ssfn_render+0x283>
10001660:	31 c0                	xor    eax,eax
10001662:	e9 3c fe ff ff       	jmp    100014a3 <ssfn_render+0x114>
10001667:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
1000166d:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
10001678:	81 fb fd 00 00 00    	cmp    ebx,0xfd
1000167e:	7f 16                	jg     10001696 <ssfn_render+0x307>
10001680:	89 da                	mov    edx,ebx
10001682:	31 c0                	xor    eax,eax
10001684:	39 da                	cmp    edx,ebx
10001686:	7e 15                	jle    1000169d <ssfn_render+0x30e>
10001688:	85 c0                	test   eax,eax
1000168a:	75 3d                	jne    100016c9 <ssfn_render+0x33a>
1000168c:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
10001691:	e9 47 1b 00 00       	jmp    100031dd <ssfn_render+0x1e4e>
10001696:	bb 04 00 00 00       	mov    ebx,0x4
1000169b:	eb e5                	jmp    10001682 <ssfn_render+0x2f3>
1000169d:	85 c0                	test   eax,eax
1000169f:	75 28                	jne    100016c9 <ssfn_render+0x33a>
100016a1:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
100016a9:	74 1b                	je     100016c6 <ssfn_render+0x337>
100016ab:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
100016af:	8b 09                	mov    ecx,DWORD PTR [ecx]
100016b1:	85 c9                	test   ecx,ecx
100016b3:	74 11                	je     100016c6 <ssfn_render+0x337>
100016b5:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
100016b8:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
100016bc:	78 08                	js     100016c6 <ssfn_render+0x337>
100016be:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
100016c1:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
100016c4:	01 c8                	add    eax,ecx
100016c6:	42                   	inc    edx
100016c7:	eb bb                	jmp    10001684 <ssfn_render+0x2f5>
100016c9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
100016cc:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
100016d1:	85 d2                	test   edx,edx
100016d3:	0f 84 04 1b 00 00    	je     100031dd <ssfn_render+0x1e4e>
100016d9:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
100016dd:	0f 84 fa 1a 00 00    	je     100031dd <ssfn_render+0x1e4e>
100016e3:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100016e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100016ed:	85 ff                	test   edi,edi
100016ef:	0f 84 e8 1a 00 00    	je     100031dd <ssfn_render+0x1e4e>
100016f5:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
100016fc:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10001700:	c1 ef 10             	shr    edi,0x10
10001703:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10001707:	83 ff 10             	cmp    edi,0x10
1000170a:	0f 87 af fc ff ff    	ja     100013bf <ssfn_render+0x30>
10001710:	8d 70 06             	lea    esi,[eax+0x6]
10001713:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
10001719:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
1000171d:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
10001723:	89 f7                	mov    edi,esi
10001725:	81 e7 00 02 00 00    	and    edi,0x200
1000172b:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
1000172f:	75 34                	jne    10001765 <ssfn_render+0x3d6>
10001731:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001735:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
1000173c:	85 c9                	test   ecx,ecx
1000173e:	74 25                	je     10001765 <ssfn_render+0x3d6>
10001740:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001744:	0f b6 ff             	movzx  edi,bh
10001747:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000174a:	85 c9                	test   ecx,ecx
1000174c:	74 17                	je     10001765 <ssfn_render+0x3d6>
1000174e:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
10001753:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
10001756:	85 c9                	test   ecx,ecx
10001758:	74 0b                	je     10001765 <ssfn_render+0x3d6>
1000175a:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
10001760:	e9 25 0d 00 00       	jmp    1000248a <ssfn_render+0x10fb>
10001765:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
10001769:	f7 c6 40 00 00 00    	test   esi,0x40
1000176f:	75 1a                	jne    1000178b <ssfn_render+0x3fc>
10001771:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
10001775:	7e 10                	jle    10001787 <ssfn_render+0x3f8>
10001777:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000177b:	83 c7 04             	add    edi,0x4
1000177e:	83 e7 fc             	and    edi,0xfffffffc
10001781:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001785:	eb 04                	jmp    1000178b <ssfn_render+0x3fc>
10001787:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000178b:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
10001790:	f7 c6 02 00 00 00    	test   esi,0x2
10001796:	74 14                	je     100017ac <ssfn_render+0x41d>
10001798:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
1000179b:	c0 eb 05             	shr    bl,0x5
1000179e:	89 df                	mov    edi,ebx
100017a0:	83 f7 01             	xor    edi,0x1
100017a3:	83 e7 01             	and    edi,0x1
100017a6:	89 fb                	mov    ebx,edi
100017a8:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
100017ac:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
100017b1:	83 e6 01             	and    esi,0x1
100017b4:	74 10                	je     100017c6 <ssfn_render+0x437>
100017b6:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
100017ba:	75 0a                	jne    100017c6 <ssfn_render+0x437>
100017bc:	8d 51 40             	lea    edx,[ecx+0x40]
100017bf:	c1 fa 06             	sar    edx,0x6
100017c2:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
100017c6:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
100017ca:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100017cf:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100017d3:	99                   	cdq    
100017d4:	f7 f9                	idiv   ecx
100017d6:	89 c1                	mov    ecx,eax
100017d8:	31 c0                	xor    eax,eax
100017da:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100017df:	74 0c                	je     100017ed <ssfn_render+0x45e>
100017e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100017e5:	be 04 00 00 00       	mov    esi,0x4
100017ea:	99                   	cdq    
100017eb:	f7 fe                	idiv   esi
100017ed:	01 c8                	add    eax,ecx
100017ef:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
100017f4:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
100017f9:	01 f0                	add    eax,esi
100017fb:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100017ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001803:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001807:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
1000180c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001810:	3d ff f4 00 00       	cmp    eax,0xf4ff
10001815:	0f 8f c2 19 00 00    	jg     100031dd <ssfn_render+0x1e4e>
1000181b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
10001820:	0f 85 f0 00 00 00    	jne    10001916 <ssfn_render+0x587>
10001826:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000182a:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
1000182e:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
10001835:	75 2f                	jne    10001866 <ssfn_render+0x4d7>
10001837:	83 ec 0c             	sub    esp,0xc
1000183a:	68 00 04 00 00       	push   0x400
1000183f:	e8 fc ff ff ff       	call   10001840 <ssfn_render+0x4b1>	10001840: R_386_PC32	malloc
10001844:	83 c4 10             	add    esp,0x10
10001847:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
1000184d:	85 c0                	test   eax,eax
1000184f:	75 08                	jne    10001859 <ssfn_render+0x4ca>
10001851:	83 c9 ff             	or     ecx,0xffffffff
10001854:	e9 84 19 00 00       	jmp    100031dd <ssfn_render+0x1e4e>
10001859:	89 c7                	mov    edi,eax
1000185b:	b9 00 01 00 00       	mov    ecx,0x100
10001860:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001864:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10001866:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000186a:	0f b6 dc             	movzx  ebx,ah
1000186d:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
10001873:	8d 1c 98             	lea    ebx,[eax+ebx*4]
10001876:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10001879:	75 3a                	jne    100018b5 <ssfn_render+0x526>
1000187b:	83 ec 0c             	sub    esp,0xc
1000187e:	68 00 04 00 00       	push   0x400
10001883:	e8 fc ff ff ff       	call   10001884 <ssfn_render+0x4f5>	10001884: R_386_PC32	malloc
10001888:	89 03                	mov    DWORD PTR [ebx],eax
1000188a:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10001891:	83 c4 10             	add    esp,0x10
10001894:	89 c2                	mov    edx,eax
10001896:	0f b6 c4             	movzx  eax,ah
10001899:	c1 ea 10             	shr    edx,0x10
1000189c:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100018a3:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
100018a6:	85 d2                	test   edx,edx
100018a8:	74 a7                	je     10001851 <ssfn_render+0x4c2>
100018aa:	b9 00 01 00 00       	mov    ecx,0x100
100018af:	31 c0                	xor    eax,eax
100018b1:	89 d7                	mov    edi,edx
100018b3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100018b5:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
100018bc:	83 ec 0c             	sub    esp,0xc
100018bf:	0f b6 cc             	movzx  ecx,ah
100018c2:	89 c2                	mov    edx,eax
100018c4:	0f b6 c0             	movzx  eax,al
100018c7:	c1 ea 10             	shr    edx,0x10
100018ca:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100018d1:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
100018d4:	8d 1c 82             	lea    ebx,[edx+eax*4]
100018d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100018db:	83 c0 08             	add    eax,0x8
100018de:	50                   	push   eax
100018df:	e8 fc ff ff ff       	call   100018e0 <ssfn_render+0x551>	100018e0: R_386_PC32	malloc
100018e4:	89 03                	mov    DWORD PTR [ebx],eax
100018e6:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
100018ec:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
100018f3:	83 c4 10             	add    esp,0x10
100018f6:	89 c2                	mov    edx,eax
100018f8:	0f b6 cc             	movzx  ecx,ah
100018fb:	c1 ea 10             	shr    edx,0x10
100018fe:	0f b6 c0             	movzx  eax,al
10001901:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001908:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
1000190b:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
1000190f:	75 0e                	jne    1000191f <ssfn_render+0x590>
10001911:	e9 3b ff ff ff       	jmp    10001851 <ssfn_render+0x4c2>
10001916:	8d 45 1c             	lea    eax,[ebp+0x1c]
10001919:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
1000191f:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10001925:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10001929:	74 2a                	je     10001955 <ssfn_render+0x5c6>
1000192b:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001930:	74 23                	je     10001955 <ssfn_render+0x5c6>
10001932:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001935:	bb 04 00 00 00       	mov    ebx,0x4
1000193a:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
1000193e:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10001942:	89 cf                	mov    edi,ecx
10001944:	29 c7                	sub    edi,eax
10001946:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000194a:	0f af c7             	imul   eax,edi
1000194d:	99                   	cdq    
1000194e:	f7 fb                	idiv   ebx
10001950:	99                   	cdq    
10001951:	f7 f9                	idiv   ecx
10001953:	eb 02                	jmp    10001957 <ssfn_render+0x5c8>
10001955:	31 c0                	xor    eax,eax
10001957:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000195d:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10001961:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001965:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
1000196d:	66 89 32             	mov    WORD PTR [edx],si
10001970:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
10001975:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000197b:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
1000197e:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001984:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000198a:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
1000198d:	01 c3                	add    ebx,eax
1000198f:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
10001992:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001998:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
1000199e:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
100019a1:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
100019a4:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
100019aa:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100019b0:	8a 12                	mov    dl,BYTE PTR [edx]
100019b2:	83 e2 3f             	and    edx,0x3f
100019b5:	01 d0                	add    eax,edx
100019b7:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
100019ba:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
100019be:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019c4:	8d 50 08             	lea    edx,[eax+0x8]
100019c7:	b0 ff                	mov    al,0xff
100019c9:	89 d7                	mov    edi,edx
100019cb:	f3 aa                	rep stos BYTE PTR es:[edi],al
100019cd:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019d3:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
100019d7:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019dd:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
100019e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100019e5:	c1 e0 04             	shl    eax,0x4
100019e8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
100019ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100019f0:	c1 e0 04             	shl    eax,0x4
100019f3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
100019f7:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100019fd:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
10001a01:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
10001a05:	0f 8e 4d 0a 00 00    	jle    10002458 <ssfn_render+0x10c9>
10001a0b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001a0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a13:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
10001a16:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10001a19:	8a 12                	mov    dl,BYTE PTR [edx]
10001a1b:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
10001a1f:	83 e2 40             	and    edx,0x40
10001a22:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
10001a26:	88 c2                	mov    dl,al
10001a28:	21 ca                	and    edx,ecx
10001a2a:	fe c2                	inc    dl
10001a2c:	75 14                	jne    10001a42 <ssfn_render+0x6b3>
10001a2e:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
10001a33:	19 c0                	sbb    eax,eax
10001a35:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
10001a39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001a3d:	e9 09 0a 00 00       	jmp    1000244b <ssfn_render+0x10bc>
10001a42:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10001a46:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10001a49:	c1 e0 04             	shl    eax,0x4
10001a4c:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
10001a50:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a55:	99                   	cdq    
10001a56:	f7 fe                	idiv   esi
10001a58:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001a5c:	0f b6 c1             	movzx  eax,cl
10001a5f:	c1 e0 04             	shl    eax,0x4
10001a62:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a67:	99                   	cdq    
10001a68:	f7 fe                	idiv   esi
10001a6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001a6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a72:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
10001a76:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10001a7a:	c1 e2 10             	shl    edx,0x10
10001a7d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
10001a82:	74 0e                	je     10001a92 <ssfn_render+0x703>
10001a84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a88:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
10001a8d:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
10001a90:	eb 0c                	jmp    10001a9e <ssfn_render+0x70f>
10001a92:	c1 e0 08             	shl    eax,0x8
10001a95:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
10001a9a:	09 d0                	or     eax,edx
10001a9c:	09 c3                	or     ebx,eax
10001a9e:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
10001aa1:	8a 01                	mov    al,BYTE PTR [ecx]
10001aa3:	84 c0                	test   al,al
10001aa5:	0f 88 17 05 00 00    	js     10001fc2 <ssfn_render+0xc33>
10001aab:	89 c7                	mov    edi,eax
10001aad:	83 e7 3f             	and    edi,0x3f
10001ab0:	a8 40                	test   al,0x40
10001ab2:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10001ab6:	74 10                	je     10001ac8 <ssfn_render+0x739>
10001ab8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10001abc:	89 f8                	mov    eax,edi
10001abe:	41                   	inc    ecx
10001abf:	c1 e0 08             	shl    eax,0x8
10001ac2:	09 c2                	or     edx,eax
10001ac4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
10001ac8:	8d 41 01             	lea    eax,[ecx+0x1]
10001acb:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001ad5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001ad9:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001ae4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001ae8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001aec:	83 c0 04             	add    eax,0x4
10001aef:	c1 f8 02             	sar    eax,0x2
10001af2:	01 c7                	add    edi,eax
10001af4:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001afb:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001aff:	0f 8f d7 01 00 00    	jg     10001cdc <ssfn_render+0x94d>
10001b05:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001b08:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001b0c:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001b10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001b14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001b18:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001b1b:	c1 e0 04             	shl    eax,0x4
10001b1e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b23:	99                   	cdq    
10001b24:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b28:	01 c6                	add    esi,eax
10001b2a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001b2e:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001b32:	c1 e0 04             	shl    eax,0x4
10001b35:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b3a:	99                   	cdq    
10001b3b:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b3f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001b43:	01 c3                	add    ebx,eax
10001b45:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001b49:	89 c8                	mov    eax,ecx
10001b4b:	01 c9                	add    ecx,ecx
10001b4d:	c1 f8 02             	sar    eax,0x2
10001b50:	83 e1 06             	and    ecx,0x6
10001b53:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001b57:	d3 f8                	sar    eax,cl
10001b59:	83 e0 03             	and    eax,0x3
10001b5c:	89 c1                	mov    ecx,eax
10001b5e:	83 f8 02             	cmp    eax,0x2
10001b61:	74 4a                	je     10001bad <ssfn_render+0x81e>
10001b63:	83 f8 03             	cmp    eax,0x3
10001b66:	0f 84 e4 00 00 00    	je     10001c50 <ssfn_render+0x8c1>
10001b6c:	49                   	dec    ecx
10001b6d:	74 20                	je     10001b8f <ssfn_render+0x800>
10001b6f:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001b75:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001b7b:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001b81:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001b87:	83 c7 02             	add    edi,0x2
10001b8a:	e9 41 01 00 00       	jmp    10001cd0 <ssfn_render+0x941>
10001b8f:	83 c7 02             	add    edi,0x2
10001b92:	50                   	push   eax
10001b93:	50                   	push   eax
10001b94:	89 e8                	mov    eax,ebp
10001b96:	53                   	push   ebx
10001b97:	56                   	push   esi
10001b98:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001b9c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001ba0:	e8 9c e9 ff ff       	call   10000541 <_ssfn_l>
10001ba5:	83 c4 10             	add    esp,0x10
10001ba8:	e9 23 01 00 00       	jmp    10001cd0 <ssfn_render+0x941>
10001bad:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001bb1:	83 c7 04             	add    edi,0x4
10001bb4:	c1 e0 04             	shl    eax,0x4
10001bb7:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001bbc:	99                   	cdq    
10001bbd:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001bc1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001bc5:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001bc9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001bcd:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001bd1:	c1 e0 04             	shl    eax,0x4
10001bd4:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001bd9:	99                   	cdq    
10001bda:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001bde:	83 ec 0c             	sub    esp,0xc
10001be1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001be5:	6a 00                	push   0x0
10001be7:	53                   	push   ebx
10001be8:	56                   	push   esi
10001be9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001bed:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001bf1:	99                   	cdq    
10001bf2:	f7 f9                	idiv   ecx
10001bf4:	01 d8                	add    eax,ebx
10001bf6:	50                   	push   eax
10001bf7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001bfb:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001bff:	99                   	cdq    
10001c00:	f7 f9                	idiv   ecx
10001c02:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001c06:	50                   	push   eax
10001c07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001c0b:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001c0f:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001c15:	99                   	cdq    
10001c16:	f7 f9                	idiv   ecx
10001c18:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001c1e:	50                   	push   eax
10001c1f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001c23:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001c29:	99                   	cdq    
10001c2a:	f7 f9                	idiv   ecx
10001c2c:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001c32:	50                   	push   eax
10001c33:	89 e8                	mov    eax,ebp
10001c35:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001c3b:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001c41:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001c45:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001c49:	e8 04 ea ff ff       	call   10000652 <_ssfn_b>
10001c4e:	eb 7d                	jmp    10001ccd <ssfn_render+0x93e>
10001c50:	83 ec 0c             	sub    esp,0xc
10001c53:	83 c7 06             	add    edi,0x6
10001c56:	6a 00                	push   0x0
10001c58:	53                   	push   ebx
10001c59:	56                   	push   esi
10001c5a:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001c5e:	c1 e0 04             	shl    eax,0x4
10001c61:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001c66:	99                   	cdq    
10001c67:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001c6b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001c6f:	50                   	push   eax
10001c70:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001c74:	c1 e0 04             	shl    eax,0x4
10001c77:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001c7c:	99                   	cdq    
10001c7d:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001c81:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001c85:	50                   	push   eax
10001c86:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001c8a:	c1 e0 04             	shl    eax,0x4
10001c8d:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001c92:	99                   	cdq    
10001c93:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001c97:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001c9b:	50                   	push   eax
10001c9c:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001ca0:	c1 e0 04             	shl    eax,0x4
10001ca3:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001ca8:	99                   	cdq    
10001ca9:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001cad:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001cb1:	50                   	push   eax
10001cb2:	89 e8                	mov    eax,ebp
10001cb4:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001cba:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001cc0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001cc4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001cc8:	e8 85 e9 ff ff       	call   10000652 <_ssfn_b>
10001ccd:	83 c4 30             	add    esp,0x30
10001cd0:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001cd7:	e9 18 fe ff ff       	jmp    10001af4 <ssfn_render+0x765>
10001cdc:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001ce2:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001ce8:	75 0e                	jne    10001cf8 <ssfn_render+0x969>
10001cea:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001cf0:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001cf6:	74 2e                	je     10001d26 <ssfn_render+0x997>
10001cf8:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001cfe:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001d04:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001d08:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001d0e:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001d14:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001d1a:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001d1f:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001d26:	b3 fe                	mov    bl,0xfe
10001d28:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001d2f:	0f 8e 16 07 00 00    	jle    1000244b <ssfn_render+0x10bc>
10001d35:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001d3d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001d45:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001d4d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001d55:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001d5d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001d61:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001d65:	0f 8d de 06 00 00    	jge    10002449 <ssfn_render+0x10ba>
10001d6b:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001d71:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001d7c:	83 e8 03             	sub    eax,0x3
10001d7f:	31 f6                	xor    esi,esi
10001d81:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001d85:	89 f8                	mov    eax,edi
10001d87:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001d8b:	c1 f8 02             	sar    eax,0x2
10001d8e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001d92:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001d99:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001d9d:	0f 8e 16 01 00 00    	jle    10001eb9 <ssfn_render+0xb2a>
10001da3:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001da9:	8d 47 01             	lea    eax,[edi+0x1]
10001dac:	01 c0                	add    eax,eax
10001dae:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001db2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001db6:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001dbb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001dbf:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001dc3:	7d 0c                	jge    10001dd1 <ssfn_render+0xa42>
10001dc5:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001dc9:	0f 8f db 00 00 00    	jg     10001eaa <ssfn_render+0xb1b>
10001dcf:	eb 0a                	jmp    10001ddb <ssfn_render+0xa4c>
10001dd1:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001dd5:	0f 8e cf 00 00 00    	jle    10001eaa <ssfn_render+0xb1b>
10001ddb:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001de0:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001de4:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001de9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001ded:	89 d8                	mov    eax,ebx
10001def:	c1 fa 04             	sar    edx,0x4
10001df2:	c1 f8 04             	sar    eax,0x4
10001df5:	39 c2                	cmp    edx,eax
10001df7:	75 0a                	jne    10001e03 <ssfn_render+0xa74>
10001df9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001dfd:	01 c8                	add    eax,ecx
10001dff:	d1 f8                	sar    eax,1
10001e01:	eb 1a                	jmp    10001e1d <ssfn_render+0xa8e>
10001e03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001e07:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001e0b:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001e0f:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001e13:	0f af c1             	imul   eax,ecx
10001e16:	99                   	cdq    
10001e17:	f7 fb                	idiv   ebx
10001e19:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001e1d:	c1 f8 04             	sar    eax,0x4
10001e20:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001e25:	74 04                	je     10001e2b <ssfn_render+0xa9c>
10001e27:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001e2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001e30:	75 3f                	jne    10001e71 <ssfn_render+0xae2>
10001e32:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001e37:	74 38                	je     10001e71 <ssfn_render+0xae2>
10001e39:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e3d:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001e43:	f7 db                	neg    ebx
10001e45:	01 c2                	add    edx,eax
10001e47:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001e4b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001e4f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e53:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001e57:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001e5b:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001e5f:	74 10                	je     10001e71 <ssfn_render+0xae2>
10001e61:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001e65:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001e69:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e6d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001e71:	31 d2                	xor    edx,edx
10001e73:	39 f2                	cmp    edx,esi
10001e75:	75 0b                	jne    10001e82 <ssfn_render+0xaf3>
10001e77:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001e7f:	46                   	inc    esi
10001e80:	eb 28                	jmp    10001eaa <ssfn_render+0xb1b>
10001e82:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001e8a:	39 c1                	cmp    ecx,eax
10001e8c:	7d 03                	jge    10001e91 <ssfn_render+0xb02>
10001e8e:	42                   	inc    edx
10001e8f:	eb e2                	jmp    10001e73 <ssfn_render+0xae4>
10001e91:	89 f1                	mov    ecx,esi
10001e93:	49                   	dec    ecx
10001e94:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001e9c:	39 d1                	cmp    ecx,edx
10001e9e:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001ea6:	7f eb                	jg     10001e93 <ssfn_render+0xb04>
10001ea8:	eb cd                	jmp    10001e77 <ssfn_render+0xae8>
10001eaa:	8d 47 02             	lea    eax,[edi+0x2]
10001ead:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001eb4:	e9 d9 fe ff ff       	jmp    10001d92 <ssfn_render+0xa03>
10001eb9:	83 fe 01             	cmp    esi,0x1
10001ebc:	7e 1f                	jle    10001edd <ssfn_render+0xb4e>
10001ebe:	f7 c6 01 00 00 00    	test   esi,0x1
10001ec4:	74 24                	je     10001eea <ssfn_render+0xb5b>
10001ec6:	8d 46 ff             	lea    eax,[esi-0x1]
10001ec9:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10001ed1:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10001ed9:	89 c6                	mov    esi,eax
10001edb:	eb 0d                	jmp    10001eea <ssfn_render+0xb5b>
10001edd:	85 f6                	test   esi,esi
10001edf:	0f 84 c7 00 00 00    	je     10001fac <ssfn_render+0xc1d>
10001ee5:	be 01 00 00 00       	mov    esi,0x1
10001eea:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001ef0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001ef4:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10001ef8:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001efc:	39 d1                	cmp    ecx,edx
10001efe:	7d 0b                	jge    10001f0b <ssfn_render+0xb7c>
10001f00:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10001f04:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001f08:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001f0b:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001f16:	31 c0                	xor    eax,eax
10001f18:	31 d2                	xor    edx,edx
10001f1a:	8d 4e ff             	lea    ecx,[esi-0x1]
10001f1d:	39 d1                	cmp    ecx,edx
10001f1f:	7e 7d                	jle    10001f9e <ssfn_render+0xc0f>
10001f21:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10001f29:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10001f31:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001f35:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001f39:	79 02                	jns    10001f3d <ssfn_render+0xbae>
10001f3b:	31 c0                	xor    eax,eax
10001f3d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001f41:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10001f45:	39 cf                	cmp    edi,ecx
10001f47:	7e 04                	jle    10001f4d <ssfn_render+0xbbe>
10001f49:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001f4d:	85 d2                	test   edx,edx
10001f4f:	74 12                	je     10001f63 <ssfn_render+0xbd4>
10001f51:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10001f59:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001f5d:	39 c8                	cmp    eax,ecx
10001f5f:	7d 02                	jge    10001f63 <ssfn_render+0xbd4>
10001f61:	89 c8                	mov    eax,ecx
10001f63:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10001f67:	7d 2b                	jge    10001f94 <ssfn_render+0xc05>
10001f69:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001f6d:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10001f73:	8d 3c 01             	lea    edi,[ecx+eax*1]
10001f76:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10001f7a:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
10001f7e:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10001f82:	75 05                	jne    10001f89 <ssfn_render+0xbfa>
10001f84:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
10001f89:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
10001f8d:	40                   	inc    eax
10001f8e:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10001f92:	eb cf                	jmp    10001f63 <ssfn_render+0xbd4>
10001f94:	83 c2 02             	add    edx,0x2
10001f97:	b0 01                	mov    al,0x1
10001f99:	e9 7c ff ff ff       	jmp    10001f1a <ssfn_render+0xb8b>
10001f9e:	83 e6 fe             	and    esi,0xfffffffe
10001fa1:	84 c0                	test   al,al
10001fa3:	74 07                	je     10001fac <ssfn_render+0xc1d>
10001fa5:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10001fac:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001fb0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
10001fb4:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
10001fb8:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
10001fbd:	e9 9b fd ff ff       	jmp    10001d5d <ssfn_render+0x9ce>
10001fc2:	88 c2                	mov    dl,al
10001fc4:	80 e2 60             	and    dl,0x60
10001fc7:	0f 85 95 02 00 00    	jne    10002262 <ssfn_render+0xed3>
10001fcd:	83 e0 1f             	and    eax,0x1f
10001fd0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001fd4:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10001fdb:	c1 fb 04             	sar    ebx,0x4
10001fde:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10001fe2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10001fe6:	40                   	inc    eax
10001fe7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001feb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001fef:	c1 f8 04             	sar    eax,0x4
10001ff2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001ff6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001ffa:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001fff:	99                   	cdq    
10002000:	f7 fe                	idiv   esi
10002002:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000200a:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
1000200f:	99                   	cdq    
10002010:	f7 fe                	idiv   esi
10002012:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002016:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000201c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002020:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002024:	8d 14 3b             	lea    edx,[ebx+edi*1]
10002027:	39 d6                	cmp    esi,edx
10002029:	7d 0a                	jge    10002035 <ssfn_render+0xca6>
1000202b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000202f:	8d 14 3b             	lea    edx,[ebx+edi*1]
10002032:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002039:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10002041:	0f af c3             	imul   eax,ebx
10002044:	31 ff                	xor    edi,edi
10002046:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
1000204a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000204e:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002052:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10002056:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000205a:	29 d8                	sub    eax,ebx
1000205c:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10002060:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
10002064:	0f 8d b1 00 00 00    	jge    1000211b <ssfn_render+0xd8c>
1000206a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000206e:	99                   	cdq    
1000206f:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002073:	89 c6                	mov    esi,eax
10002075:	31 c0                	xor    eax,eax
10002077:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
1000207c:	74 0e                	je     1000208c <ssfn_render+0xcfd>
1000207e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10002082:	bb 04 00 00 00       	mov    ebx,0x4
10002087:	29 f8                	sub    eax,edi
10002089:	99                   	cdq    
1000208a:	f7 fb                	idiv   ebx
1000208c:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10002090:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000209b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
1000209f:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
100020a4:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100020ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100020af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100020b3:	39 d8                	cmp    eax,ebx
100020b5:	7d 4e                	jge    10002105 <ssfn_render+0xd76>
100020b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100020bb:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
100020c0:	99                   	cdq    
100020c1:	f7 fb                	idiv   ebx
100020c3:	8d 14 06             	lea    edx,[esi+eax*1]
100020c6:	83 e0 07             	and    eax,0x7
100020c9:	c1 fa 03             	sar    edx,0x3
100020cc:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
100020d1:	0f a3 c2             	bt     edx,eax
100020d4:	72 0e                	jb     100020e4 <ssfn_render+0xd55>
100020d6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100020da:	43                   	inc    ebx
100020db:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
100020e2:	eb c0                	jmp    100020a4 <ssfn_render+0xd15>
100020e4:	31 c0                	xor    eax,eax
100020e6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100020ea:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100020ee:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
100020f4:	40                   	inc    eax
100020f5:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
100020f9:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
100020fd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
10002101:	7d e3                	jge    100020e6 <ssfn_render+0xd57>
10002103:	eb d1                	jmp    100020d6 <ssfn_render+0xd47>
10002105:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002109:	47                   	inc    edi
1000210a:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
1000210e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10002112:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
10002116:	e9 45 ff ff ff       	jmp    10002060 <ssfn_render+0xcd1>
1000211b:	b3 fe                	mov    bl,0xfe
1000211d:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
10002124:	0f 85 21 03 00 00    	jne    1000244b <ssfn_render+0x10bc>
1000212a:	31 c0                	xor    eax,eax
1000212c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002130:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
10002135:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10002139:	0f 95 c0             	setne  al
1000213c:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002140:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002144:	4f                   	dec    edi
10002145:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10002149:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
10002151:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002155:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000215c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002160:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
10002164:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002168:	31 c0                	xor    eax,eax
1000216a:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
1000216d:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002171:	83 c1 04             	add    ecx,0x4
10002174:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10002178:	0f 8d c0 02 00 00    	jge    1000243e <ssfn_render+0x10af>
1000217e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10002182:	8d 77 01             	lea    esi,[edi+0x1]
10002185:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002189:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
1000218d:	4f                   	dec    edi
1000218e:	be 01 00 00 00       	mov    esi,0x1
10002193:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10002197:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
1000219b:	7e 63                	jle    10002200 <ssfn_render+0xe71>
1000219d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100021a1:	b9 01 00 00 00       	mov    ecx,0x1
100021a6:	89 ca                	mov    edx,ecx
100021a8:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
100021ac:	7e 45                	jle    100021f3 <ssfn_render+0xe64>
100021ae:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100021b4:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
100021b9:	75 34                	jne    100021ef <ssfn_render+0xe60>
100021bb:	89 c7                	mov    edi,eax
100021bd:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100021c1:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
100021c5:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
100021c9:	74 0c                	je     100021d7 <ssfn_render+0xe48>
100021cb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100021cf:	01 d7                	add    edi,edx
100021d1:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
100021d5:	75 18                	jne    100021ef <ssfn_render+0xe60>
100021d7:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100021db:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
100021df:	74 06                	je     100021e7 <ssfn_render+0xe58>
100021e1:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
100021e5:	75 08                	jne    100021ef <ssfn_render+0xe60>
100021e7:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
100021eb:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
100021ef:	41                   	inc    ecx
100021f0:	40                   	inc    eax
100021f1:	eb b3                	jmp    100021a6 <ssfn_render+0xe17>
100021f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100021f7:	46                   	inc    esi
100021f8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
100021fc:	b0 01                	mov    al,0x1
100021fe:	eb 97                	jmp    10002197 <ssfn_render+0xe08>
10002200:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
10002204:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10002208:	bb 01 00 00 00       	mov    ebx,0x1
1000220d:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002211:	7e 3d                	jle    10002250 <ssfn_render+0xec1>
10002213:	b8 01 00 00 00       	mov    eax,0x1
10002218:	89 c2                	mov    edx,eax
1000221a:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
1000221e:	7e 23                	jle    10002243 <ssfn_render+0xeb4>
10002220:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10002224:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
1000222a:	8d 14 07             	lea    edx,[edi+eax*1]
1000222d:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
10002232:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002236:	75 08                	jne    10002240 <ssfn_render+0xeb1>
10002238:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
1000223c:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10002240:	40                   	inc    eax
10002241:	eb d5                	jmp    10002218 <ssfn_render+0xe89>
10002243:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002247:	43                   	inc    ebx
10002248:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
1000224c:	b0 01                	mov    al,0x1
1000224e:	eb bd                	jmp    1000220d <ssfn_render+0xe7e>
10002250:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
10002253:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002257:	01 c9                	add    ecx,ecx
10002259:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
1000225d:	e9 08 ff ff ff       	jmp    1000216a <ssfn_render+0xddb>
10002262:	b3 fe                	mov    bl,0xfe
10002264:	80 fa 20             	cmp    dl,0x20
10002267:	0f 85 de 01 00 00    	jne    1000244b <ssfn_render+0x10bc>
1000226d:	89 c3                	mov    ebx,eax
1000226f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10002273:	c1 e3 08             	shl    ebx,0x8
10002276:	81 e3 00 1f 00 00    	and    ebx,0x1f00
1000227c:	09 c3                	or     ebx,eax
1000227e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
10002282:	43                   	inc    ebx
10002283:	40                   	inc    eax
10002284:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002288:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
1000228c:	40                   	inc    eax
1000228d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10002291:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002295:	c1 f8 04             	sar    eax,0x4
10002298:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000229c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100022a0:	c1 f8 04             	sar    eax,0x4
100022a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100022a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100022ab:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
100022b0:	99                   	cdq    
100022b1:	f7 fe                	idiv   esi
100022b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100022b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100022bb:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
100022c0:	99                   	cdq    
100022c1:	f7 fe                	idiv   esi
100022c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100022c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100022cb:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100022d1:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100022d5:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
100022d9:	39 d6                	cmp    esi,edx
100022db:	7d 0b                	jge    100022e8 <ssfn_render+0xf59>
100022dd:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
100022e1:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100022e5:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
100022e8:	83 c1 04             	add    ecx,0x4
100022eb:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100022f6:	8d 04 19             	lea    eax,[ecx+ebx*1]
100022f9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100022fd:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
10002301:	72 35                	jb     10002338 <ssfn_render+0xfa9>
10002303:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10002307:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
1000230b:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002310:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
10002314:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
10002318:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000231f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
10002323:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
1000232b:	31 d2                	xor    edx,edx
1000232d:	31 ff                	xor    edi,edi
1000232f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
10002333:	e9 cc 00 00 00       	jmp    10002404 <ssfn_render+0x1075>
10002338:	8a 11                	mov    dl,BYTE PTR [ecx]
1000233a:	89 d0                	mov    eax,edx
1000233c:	83 e0 7f             	and    eax,0x7f
1000233f:	84 d2                	test   dl,dl
10002341:	8d 78 01             	lea    edi,[eax+0x1]
10002344:	78 09                	js     1000234f <ssfn_render+0xfc0>
10002346:	41                   	inc    ecx
10002347:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000234b:	89 ca                	mov    edx,ecx
1000234d:	eb 3d                	jmp    1000238c <ssfn_render+0xffd>
1000234f:	48                   	dec    eax
10002350:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002357:	83 f8 fe             	cmp    eax,0xfffffffe
1000235a:	74 16                	je     10002372 <ssfn_render+0xfe3>
1000235c:	8d 5a 01             	lea    ebx,[edx+0x1]
1000235f:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
10002366:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
10002369:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
10002370:	eb dd                	jmp    1000234f <ssfn_render+0xfc0>
10002372:	83 c1 02             	add    ecx,0x2
10002375:	eb 86                	jmp    100022fd <ssfn_render+0xf6e>
10002377:	42                   	inc    edx
10002378:	8d 73 01             	lea    esi,[ebx+0x1]
1000237b:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10002382:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
10002385:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
1000238c:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
10002390:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
10002397:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
1000239c:	75 d9                	jne    10002377 <ssfn_render+0xfe8>
1000239e:	01 f9                	add    ecx,edi
100023a0:	e9 58 ff ff ff       	jmp    100022fd <ssfn_render+0xf6e>
100023a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100023a9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100023ad:	99                   	cdq    
100023ae:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100023b2:	0f af c8             	imul   ecx,eax
100023b5:	31 c0                	xor    eax,eax
100023b7:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100023bc:	74 0e                	je     100023cc <ssfn_render+0x103d>
100023be:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100023c2:	bb 04 00 00 00       	mov    ebx,0x4
100023c7:	29 f8                	sub    eax,edi
100023c9:	99                   	cdq    
100023ca:	f7 fb                	idiv   ebx
100023cc:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
100023d0:	31 db                	xor    ebx,ebx
100023d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100023d6:	31 f6                	xor    esi,esi
100023d8:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
100023df:	01 c1                	add    ecx,eax
100023e1:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
100023e5:	7f 30                	jg     10002417 <ssfn_render+0x1088>
100023e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100023eb:	85 c0                	test   eax,eax
100023ed:	79 02                	jns    100023f1 <ssfn_render+0x1062>
100023ef:	31 c0                	xor    eax,eax
100023f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100023f5:	47                   	inc    edi
100023f6:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
100023fa:	b2 01                	mov    dl,0x1
100023fc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
10002400:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
10002404:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002408:	7c 9b                	jl     100023a5 <ssfn_render+0x1016>
1000240a:	84 d2                	test   dl,dl
1000240c:	74 3b                	je     10002449 <ssfn_render+0x10ba>
1000240e:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10002415:	eb 32                	jmp    10002449 <ssfn_render+0x10ba>
10002417:	89 d8                	mov    eax,ebx
10002419:	99                   	cdq    
1000241a:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
1000241e:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
10002425:	3c ff                	cmp    al,0xff
10002427:	74 0e                	je     10002437 <ssfn_render+0x10a8>
10002429:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000242d:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002433:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
10002437:	46                   	inc    esi
10002438:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
1000243c:	eb a3                	jmp    100023e1 <ssfn_render+0x1052>
1000243e:	84 c0                	test   al,al
10002440:	74 07                	je     10002449 <ssfn_render+0x10ba>
10002442:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
10002449:	b3 fe                	mov    bl,0xfe
1000244b:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
1000244f:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
10002453:	e9 9f f5 ff ff       	jmp    100019f7 <ssfn_render+0x668>
10002458:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000245e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10002461:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
10002464:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
10002467:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000246d:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
10002471:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
10002475:	89 f0                	mov    eax,esi
10002477:	89 d9                	mov    ecx,ebx
10002479:	43                   	inc    ebx
1000247a:	39 de                	cmp    esi,ebx
1000247c:	7e 08                	jle    10002486 <ssfn_render+0x10f7>
1000247e:	48                   	dec    eax
1000247f:	29 c8                	sub    eax,ecx
10002481:	88 42 07             	mov    BYTE PTR [edx+0x7],al
10002484:	eb 04                	jmp    1000248a <ssfn_render+0x10fb>
10002486:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
1000248a:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
10002492:	0f 84 c9 0c 00 00    	je     10003161 <ssfn_render+0x1dd2>
10002498:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
1000249e:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100024a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100024a8:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100024ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100024af:	0f ba e0 0c          	bt     eax,0xc
100024b3:	72 22                	jb     100024d7 <ssfn_render+0x1148>
100024b5:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
100024b8:	83 e0 0f             	and    eax,0xf
100024bb:	3c 03                	cmp    al,0x3
100024bd:	74 18                	je     100024d7 <ssfn_render+0x1148>
100024bf:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
100024c3:	84 c9                	test   cl,cl
100024c5:	74 10                	je     100024d7 <ssfn_render+0x1148>
100024c7:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
100024cb:	0f af d7             	imul   edx,edi
100024ce:	89 d0                	mov    eax,edx
100024d0:	99                   	cdq    
100024d1:	f7 f9                	idiv   ecx
100024d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100024d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100024db:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
100024e1:	7d 06                	jge    100024e9 <ssfn_render+0x115a>
100024e3:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
100024e9:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
100024ef:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
100024f3:	0f b7 13             	movzx  edx,WORD PTR [ebx]
100024f6:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
100024fb:	89 d0                	mov    eax,edx
100024fd:	99                   	cdq    
100024fe:	f7 f9                	idiv   ecx
10002500:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
10002504:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002508:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
1000250b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
1000250f:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
10002513:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002517:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
1000251c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002520:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002525:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002529:	99                   	cdq    
1000252a:	f7 f9                	idiv   ecx
1000252c:	31 d2                	xor    edx,edx
1000252e:	83 ff 10             	cmp    edi,0x10
10002531:	0f 9f c2             	setg   dl
10002534:	42                   	inc    edx
10002535:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10002539:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
1000253d:	7d 08                	jge    10002547 <ssfn_render+0x11b8>
1000253f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002543:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10002547:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
1000254b:	39 c2                	cmp    edx,eax
1000254d:	7d 04                	jge    10002553 <ssfn_render+0x11c4>
1000254f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002553:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10002558:	74 4c                	je     100025a6 <ssfn_render+0x1217>
1000255a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000255e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002563:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002567:	99                   	cdq    
10002568:	f7 f9                	idiv   ecx
1000256a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000256e:	81 e2 00 08 00 00    	and    edx,0x800
10002574:	74 04                	je     1000257a <ssfn_render+0x11eb>
10002576:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000257a:	01 d0                	add    eax,edx
1000257c:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
10002582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002586:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
1000258a:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
1000258e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002593:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002597:	99                   	cdq    
10002598:	f7 f9                	idiv   ecx
1000259a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000259e:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
100025a4:	eb 22                	jmp    100025c8 <ssfn_render+0x1239>
100025a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100025aa:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
100025b4:	d1 f8                	sar    eax,1
100025b6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
100025be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100025c2:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100025c8:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025cf:	8b 18                	mov    ebx,DWORD PTR [eax]
100025d1:	85 db                	test   ebx,ebx
100025d3:	0f 84 2e 09 00 00    	je     10002f07 <ssfn_render+0x1b78>
100025d9:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
100025dd:	89 d1                	mov    ecx,edx
100025df:	89 d0                	mov    eax,edx
100025e1:	66 c1 f9 0b          	sar    cx,0xb
100025e5:	c1 f8 1f             	sar    eax,0x1f
100025e8:	31 c2                	xor    edx,eax
100025ea:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
100025ee:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
100025f2:	88 c8                	mov    al,cl
100025f4:	83 e0 10             	and    eax,0x10
100025f7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
100025fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100025ff:	83 c0 40             	add    eax,0x40
10002602:	c1 f8 06             	sar    eax,0x6
10002605:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
1000260c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002610:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002614:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
10002618:	7d 08                	jge    10002622 <ssfn_render+0x1293>
1000261a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000261e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002622:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002625:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
1000262d:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002631:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10002639:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
1000263d:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002642:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002646:	99                   	cdq    
10002647:	f7 f9                	idiv   ecx
10002649:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
1000264d:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002654:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10002657:	0f b6 f4             	movzx  esi,ah
1000265a:	89 c2                	mov    edx,eax
1000265c:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
10002660:	c1 ea 10             	shr    edx,0x10
10002663:	0f b6 fa             	movzx  edi,dl
10002666:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
1000266a:	0f b6 f8             	movzx  edi,al
1000266d:	c1 e8 18             	shr    eax,0x18
10002670:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
10002674:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002678:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000267f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10002682:	0f b6 fc             	movzx  edi,ah
10002685:	89 c2                	mov    edx,eax
10002687:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
1000268e:	c1 ea 10             	shr    edx,0x10
10002691:	0f b6 c0             	movzx  eax,al
10002694:	0f b6 f2             	movzx  esi,dl
10002697:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000269e:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100026a5:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
100026a9:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026b0:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100026b7:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
100026bb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
100026bf:	0f af c2             	imul   eax,edx
100026c2:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
100026c6:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
100026ca:	8d 04 90             	lea    eax,[eax+edx*4]
100026cd:	01 d8                	add    eax,ebx
100026cf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
100026d6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
100026da:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
100026e1:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
100026e6:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
100026ed:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100026f1:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
100026f5:	0f 8d e2 04 00 00    	jge    10002bdd <ssfn_render+0x184e>
100026fb:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002702:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002709:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
1000270d:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
10002711:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002715:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002719:	39 d0                	cmp    eax,edx
1000271b:	0f 8d bc 04 00 00    	jge    10002bdd <ssfn_render+0x184e>
10002721:	85 c0                	test   eax,eax
10002723:	0f 88 94 04 00 00    	js     10002bbd <ssfn_render+0x182e>
10002729:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000272f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10002733:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10002737:	c1 e1 08             	shl    ecx,0x8
1000273a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10002742:	89 c8                	mov    eax,ecx
10002744:	0f af c3             	imul   eax,ebx
10002747:	99                   	cdq    
10002748:	f7 fe                	idiv   esi
1000274a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002751:	c1 f8 08             	sar    eax,0x8
10002754:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
1000275b:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002761:	0f af c3             	imul   eax,ebx
10002764:	99                   	cdq    
10002765:	f7 fe                	idiv   esi
10002767:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
1000276b:	c1 f8 08             	sar    eax,0x8
1000276e:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
10002775:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002779:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
10002780:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
10002787:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000278e:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002792:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002796:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
1000279a:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
1000279e:	0f 8d 19 04 00 00    	jge    10002bbd <ssfn_render+0x182e>
100027a4:	85 c0                	test   eax,eax
100027a6:	0f 88 ff 03 00 00    	js     10002bab <ssfn_render+0x181c>
100027ac:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100027b3:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
100027b7:	75 42                	jne    100027fb <ssfn_render+0x146c>
100027b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100027bd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100027c4:	b9 10 00 00 00       	mov    ecx,0x10
100027c9:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100027cc:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
100027d3:	89 c2                	mov    edx,eax
100027d5:	0f b6 fc             	movzx  edi,ah
100027d8:	d3 ea                	shr    edx,cl
100027da:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
100027e1:	0f b6 f2             	movzx  esi,dl
100027e4:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
100027e8:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100027ef:	d3 e8                	shr    eax,cl
100027f1:	0f b6 c0             	movzx  eax,al
100027f4:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100027fb:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002801:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10002805:	0f b7 18             	movzx  ebx,WORD PTR [eax]
10002808:	c1 e1 08             	shl    ecx,0x8
1000280b:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
1000280f:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10002817:	89 c8                	mov    eax,ecx
10002819:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
10002821:	0f af c3             	imul   eax,ebx
10002824:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
1000282c:	99                   	cdq    
1000282d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10002835:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002839:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10002841:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
10002848:	c1 f8 08             	sar    eax,0x8
1000284b:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10002852:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002858:	0f af c3             	imul   eax,ebx
1000285b:	99                   	cdq    
1000285c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002860:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002864:	c1 f8 08             	sar    eax,0x8
10002867:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
1000286e:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
10002875:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002879:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
1000287d:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
10002881:	0f 8d 3b 02 00 00    	jge    10002ac2 <ssfn_render+0x1733>
10002887:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
1000288b:	c1 fa 08             	sar    edx,0x8
1000288e:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
10002895:	75 25                	jne    100028bc <ssfn_render+0x152d>
10002897:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
1000289c:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
100028a3:	b8 00 01 00 00       	mov    eax,0x100
100028a8:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
100028b0:	29 c8                	sub    eax,ecx
100028b2:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100028b6:	39 c7                	cmp    edi,eax
100028b8:	7e 1c                	jle    100028d6 <ssfn_render+0x1547>
100028ba:	eb 16                	jmp    100028d2 <ssfn_render+0x1543>
100028bc:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
100028c4:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
100028cb:	75 09                	jne    100028d6 <ssfn_render+0x1547>
100028cd:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
100028d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100028d6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
100028da:	0f b7 00             	movzx  eax,WORD PTR [eax]
100028dd:	0f af c2             	imul   eax,edx
100028e0:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
100028e7:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
100028ec:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
100028f1:	c1 f8 08             	sar    eax,0x8
100028f4:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
100028fb:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
10002902:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002906:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
1000290a:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
1000290e:	0f 8d a1 01 00 00    	jge    10002ab5 <ssfn_render+0x1726>
10002914:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002918:	c1 f8 08             	sar    eax,0x8
1000291b:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
10002922:	75 3b                	jne    1000295f <ssfn_render+0x15d0>
10002924:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
10002929:	ba 00 01 00 00       	mov    edx,0x100
1000292e:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
10002936:	29 ca                	sub    edx,ecx
10002938:	89 f1                	mov    ecx,esi
1000293a:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
10002941:	39 d1                	cmp    ecx,edx
10002943:	7c 0e                	jl     10002953 <ssfn_render+0x15c4>
10002945:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002949:	81 fa 00 01 00 00    	cmp    edx,0x100
1000294f:	74 22                	je     10002973 <ssfn_render+0x15e4>
10002951:	89 d1                	mov    ecx,edx
10002953:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
10002958:	89 cf                	mov    edi,ecx
1000295a:	c1 ff 08             	sar    edi,0x8
1000295d:	eb 14                	jmp    10002973 <ssfn_render+0x15e4>
1000295f:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
10002966:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
1000296d:	74 04                	je     10002973 <ssfn_render+0x15e4>
1000296f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002973:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
10002977:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
1000297b:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
10002982:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
10002987:	81 fa ff 00 00 00    	cmp    edx,0xff
1000298d:	75 37                	jne    100029c6 <ssfn_render+0x1637>
1000298f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10002996:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
1000299e:	0f af c7             	imul   eax,edi
100029a1:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
100029a5:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
100029ac:	0f af c7             	imul   eax,edi
100029af:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
100029b3:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
100029ba:	0f af c7             	imul   eax,edi
100029bd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
100029c1:	e9 e2 00 00 00       	jmp    10002aa8 <ssfn_render+0x1719>
100029c6:	81 fa fe 00 00 00    	cmp    edx,0xfe
100029cc:	74 2d                	je     100029fb <ssfn_render+0x166c>
100029ce:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100029d1:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
100029d4:	85 c9                	test   ecx,ecx
100029d6:	74 23                	je     100029fb <ssfn_render+0x166c>
100029d8:	01 c8                	add    eax,ecx
100029da:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
100029dd:	89 d9                	mov    ecx,ebx
100029df:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
100029e6:	c1 e9 10             	shr    ecx,0x10
100029e9:	0f b6 f7             	movzx  esi,bh
100029ec:	0f b6 c1             	movzx  eax,cl
100029ef:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100029f3:	0f b6 c3             	movzx  eax,bl
100029f6:	c1 eb 18             	shr    ebx,0x18
100029f9:	eb 14                	jmp    10002a0f <ssfn_render+0x1680>
100029fb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100029ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002a03:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10002a07:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
10002a0b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002a0f:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002a15:	75 25                	jne    10002a3c <ssfn_render+0x16ad>
10002a17:	0f af c7             	imul   eax,edi
10002a1a:	0f af f7             	imul   esi,edi
10002a1d:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002a21:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002a25:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
10002a2b:	0f af cf             	imul   ecx,edi
10002a2e:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
10002a32:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
10002a36:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
10002a3a:	eb 6c                	jmp    10002aa8 <ssfn_render+0x1719>
10002a3c:	0f af f3             	imul   esi,ebx
10002a3f:	0f af c3             	imul   eax,ebx
10002a42:	b9 ff 00 00 00       	mov    ecx,0xff
10002a47:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
10002a4e:	29 d9                	sub    ecx,ebx
10002a50:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
10002a54:	0f af d1             	imul   edx,ecx
10002a57:	b9 ff 00 00 00       	mov    ecx,0xff
10002a5c:	01 d0                	add    eax,edx
10002a5e:	0f af c7             	imul   eax,edi
10002a61:	99                   	cdq    
10002a62:	f7 f9                	idiv   ecx
10002a64:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002a68:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a6c:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
10002a74:	01 f0                	add    eax,esi
10002a76:	89 ce                	mov    esi,ecx
10002a78:	0f af c7             	imul   eax,edi
10002a7b:	99                   	cdq    
10002a7c:	f7 f9                	idiv   ecx
10002a7e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002a82:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002a86:	0f af cb             	imul   ecx,ebx
10002a89:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a8d:	0f af df             	imul   ebx,edi
10002a90:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
10002a98:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
10002a9c:	01 c8                	add    eax,ecx
10002a9e:	0f af c7             	imul   eax,edi
10002aa1:	99                   	cdq    
10002aa2:	f7 fe                	idiv   esi
10002aa4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002aa8:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
10002ab0:	e9 51 fe ff ff       	jmp    10002906 <ssfn_render+0x1577>
10002ab5:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
10002abd:	e9 b7 fd ff ff       	jmp    10002879 <ssfn_render+0x14ea>
10002ac2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002ac7:	74 30                	je     10002af9 <ssfn_render+0x176a>
10002ac9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002acd:	31 d2                	xor    edx,edx
10002acf:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002ad3:	31 d2                	xor    edx,edx
10002ad5:	89 c1                	mov    ecx,eax
10002ad7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002adb:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002adf:	31 d2                	xor    edx,edx
10002ae1:	89 c6                	mov    esi,eax
10002ae3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002ae7:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002aeb:	31 d2                	xor    edx,edx
10002aed:	89 c3                	mov    ebx,eax
10002aef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002af3:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002af7:	eb 1c                	jmp    10002b15 <ssfn_render+0x1786>
10002af9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002afd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002b01:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002b05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002b09:	c1 e9 08             	shr    ecx,0x8
10002b0c:	c1 ee 08             	shr    esi,0x8
10002b0f:	c1 eb 08             	shr    ebx,0x8
10002b12:	c1 e8 08             	shr    eax,0x8
10002b15:	83 f8 0f             	cmp    eax,0xf
10002b18:	0f 86 8d 00 00 00    	jbe    10002bab <ssfn_render+0x181c>
10002b1e:	89 ca                	mov    edx,ecx
10002b20:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002b26:	76 05                	jbe    10002b2d <ssfn_render+0x179e>
10002b28:	ba ff 00 00 00       	mov    edx,0xff
10002b2d:	b9 10 00 00 00       	mov    ecx,0x10
10002b32:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002b39:	d3 e2                	shl    edx,cl
10002b3b:	3d ff 00 00 00       	cmp    eax,0xff
10002b40:	89 d1                	mov    ecx,edx
10002b42:	76 05                	jbe    10002b49 <ssfn_render+0x17ba>
10002b44:	b8 ff 00 00 00       	mov    eax,0xff
10002b49:	c1 e0 18             	shl    eax,0x18
10002b4c:	09 c8                	or     eax,ecx
10002b4e:	81 fe ff 00 00 00    	cmp    esi,0xff
10002b54:	76 05                	jbe    10002b5b <ssfn_render+0x17cc>
10002b56:	be ff 00 00 00       	mov    esi,0xff
10002b5b:	c1 e6 08             	shl    esi,0x8
10002b5e:	09 f0                	or     eax,esi
10002b60:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002b66:	76 05                	jbe    10002b6d <ssfn_render+0x17de>
10002b68:	bb ff 00 00 00       	mov    ebx,0xff
10002b6d:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002b71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002b75:	d3 e3                	shl    ebx,cl
10002b77:	09 c3                	or     ebx,eax
10002b79:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002b80:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002b83:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002b87:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002b8b:	75 1e                	jne    10002bab <ssfn_render+0x181c>
10002b8d:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002b94:	7e 07                	jle    10002b9d <ssfn_render+0x180e>
10002b96:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002b9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002ba1:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002ba5:	7d 04                	jge    10002bab <ssfn_render+0x181c>
10002ba7:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002bab:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002bb3:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002bb7:	0f 85 ca fb ff ff    	jne    10002787 <ssfn_render+0x13f8>
10002bbd:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bc4:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002bc8:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002bcc:	25 fc ff 00 00       	and    eax,0xfffc
10002bd1:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002bd8:	e9 10 fb ff ff       	jmp    100026ed <ssfn_render+0x135e>
10002bdd:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002be4:	0f 84 90 01 00 00    	je     10002d7a <ssfn_render+0x19eb>
10002bea:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002bf2:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002bf9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002bfd:	40                   	inc    eax
10002bfe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002c02:	29 c7                	sub    edi,eax
10002c04:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002c08:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002c0c:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002c10:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002c14:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002c18:	7e 09                	jle    10002c23 <ssfn_render+0x1894>
10002c1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002c1e:	40                   	inc    eax
10002c1f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002c23:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002c2a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c31:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002c35:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002c39:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002c3d:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002c41:	0f af c2             	imul   eax,edx
10002c44:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002c48:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002c4c:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002c50:	03 07                	add    eax,DWORD PTR [edi]
10002c52:	89 c7                	mov    edi,eax
10002c54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002c58:	c1 e0 18             	shl    eax,0x18
10002c5b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002c5f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002c63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002c67:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002c6c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002c70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002c74:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002c78:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002c7c:	0f 8e f8 00 00 00    	jle    10002d7a <ssfn_render+0x19eb>
10002c82:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c89:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002c90:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002c94:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002c98:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002c9c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002ca0:	39 d0                	cmp    eax,edx
10002ca2:	0f 8d d2 00 00 00    	jge    10002d7a <ssfn_render+0x19eb>
10002ca8:	31 db                	xor    ebx,ebx
10002caa:	85 c0                	test   eax,eax
10002cac:	79 23                	jns    10002cd1 <ssfn_render+0x1942>
10002cae:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002cb5:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002cb9:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002cbd:	25 fc ff 00 00       	and    eax,0xfffc
10002cc2:	01 c7                	add    edi,eax
10002cc4:	eb aa                	jmp    10002c70 <ssfn_render+0x18e1>
10002cc6:	85 c0                	test   eax,eax
10002cc8:	79 20                	jns    10002cea <ssfn_render+0x195b>
10002cca:	43                   	inc    ebx
10002ccb:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002ccf:	7c dd                	jl     10002cae <ssfn_render+0x191f>
10002cd1:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002cd8:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002cdc:	01 d8                	add    eax,ebx
10002cde:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002ce2:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002ce6:	7c de                	jl     10002cc6 <ssfn_render+0x1937>
10002ce8:	eb c4                	jmp    10002cae <ssfn_render+0x191f>
10002cea:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002cee:	7e 06                	jle    10002cf6 <ssfn_render+0x1967>
10002cf0:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002cf4:	7f d4                	jg     10002cca <ssfn_render+0x193b>
10002cf6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002cf9:	b8 10 00 00 00       	mov    eax,0x10
10002cfe:	0f b6 f6             	movzx  esi,dh
10002d01:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002d05:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002d09:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002d0d:	89 d0                	mov    eax,edx
10002d0f:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002d13:	d3 e8                	shr    eax,cl
10002d15:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002d19:	0f b6 c0             	movzx  eax,al
10002d1c:	d3 ea                	shr    edx,cl
10002d1e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002d22:	0f b6 f2             	movzx  esi,dl
10002d25:	29 c1                	sub    ecx,eax
10002d27:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002d2b:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002d30:	29 f2                	sub    edx,esi
10002d32:	c1 f9 08             	sar    ecx,0x8
10002d35:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002d3a:	01 c8                	add    eax,ecx
10002d3c:	c1 fa 08             	sar    edx,0x8
10002d3f:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002d43:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002d47:	d3 e0                	shl    eax,cl
10002d49:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002d4d:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002d51:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002d55:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002d59:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002d5e:	d3 e6                	shl    esi,cl
10002d60:	c1 fa 08             	sar    edx,0x8
10002d63:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002d67:	c1 e2 08             	shl    edx,0x8
10002d6a:	09 d0                	or     eax,edx
10002d6c:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002d70:	09 c6                	or     esi,eax
10002d72:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002d75:	e9 50 ff ff ff       	jmp    10002cca <ssfn_render+0x193b>
10002d7a:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002d81:	0f 84 80 01 00 00    	je     10002f07 <ssfn_render+0x1b78>
10002d87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002d8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002d8f:	d1 fa                	sar    edx,1
10002d91:	40                   	inc    eax
10002d92:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002d96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d9a:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002d9e:	7e 09                	jle    10002da9 <ssfn_render+0x1a1a>
10002da0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002da4:	40                   	inc    eax
10002da5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002da9:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002db0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002db7:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002dbb:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002dbf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002dc3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002dc7:	01 d0                	add    eax,edx
10002dc9:	0f af c1             	imul   eax,ecx
10002dcc:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002dd0:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002dd4:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002dd8:	03 03                	add    eax,DWORD PTR [ebx]
10002dda:	89 c7                	mov    edi,eax
10002ddc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002de0:	c1 e0 18             	shl    eax,0x18
10002de3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002de7:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002def:	01 d0                	add    eax,edx
10002df1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002df5:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002dfa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002dfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002e02:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002e06:	0f 8e fb 00 00 00    	jle    10002f07 <ssfn_render+0x1b78>
10002e0c:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e13:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002e17:	01 d8                	add    eax,ebx
10002e19:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002e20:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002e24:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002e28:	39 d0                	cmp    eax,edx
10002e2a:	0f 8d d7 00 00 00    	jge    10002f07 <ssfn_render+0x1b78>
10002e30:	31 f6                	xor    esi,esi
10002e32:	85 c0                	test   eax,eax
10002e34:	0f 89 ad 00 00 00    	jns    10002ee7 <ssfn_render+0x1b58>
10002e3a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e41:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002e45:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002e49:	25 fc ff 00 00       	and    eax,0xfffc
10002e4e:	01 c7                	add    edi,eax
10002e50:	eb ac                	jmp    10002dfe <ssfn_render+0x1a6f>
10002e52:	85 c0                	test   eax,eax
10002e54:	0f 88 82 00 00 00    	js     10002edc <ssfn_render+0x1b4d>
10002e5a:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002e5d:	b8 10 00 00 00       	mov    eax,0x10
10002e62:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002e66:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002e6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002e6e:	89 d8                	mov    eax,ebx
10002e70:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002e74:	d3 e8                	shr    eax,cl
10002e76:	0f b6 cf             	movzx  ecx,bh
10002e79:	0f b6 c0             	movzx  eax,al
10002e7c:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002e80:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e84:	d3 eb                	shr    ebx,cl
10002e86:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002e8a:	0f b6 db             	movzx  ebx,bl
10002e8d:	29 c1                	sub    ecx,eax
10002e8f:	29 da                	sub    edx,ebx
10002e91:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002e96:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e9b:	c1 f9 08             	sar    ecx,0x8
10002e9e:	c1 fa 08             	sar    edx,0x8
10002ea1:	01 c8                	add    eax,ecx
10002ea3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002ea7:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002eab:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002eaf:	d3 e0                	shl    eax,cl
10002eb1:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002eb5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002eb9:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002ebe:	c1 fa 08             	sar    edx,0x8
10002ec1:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10002ec5:	c1 e2 08             	shl    edx,0x8
10002ec8:	09 d0                	or     eax,edx
10002eca:	8d 14 19             	lea    edx,[ecx+ebx*1]
10002ecd:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10002ed1:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002ed5:	d3 e2                	shl    edx,cl
10002ed7:	09 c2                	or     edx,eax
10002ed9:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10002edc:	46                   	inc    esi
10002edd:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002ee1:	0f 8c 53 ff ff ff    	jl     10002e3a <ssfn_render+0x1aab>
10002ee7:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002eee:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002ef2:	01 f0                	add    eax,esi
10002ef4:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002ef8:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002efc:	0f 8c 50 ff ff ff    	jl     10002e52 <ssfn_render+0x1ac3>
10002f02:	e9 33 ff ff ff       	jmp    10002e3a <ssfn_render+0x1aab>
10002f07:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10002f0e:	74 04                	je     10002f14 <ssfn_render+0x1b85>
10002f10:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10002f14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002f18:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002f1c:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10002f22:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002f29:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10002f2d:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002f34:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f37:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002f3b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002f41:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10002f45:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002f4a:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002f4e:	99                   	cdq    
10002f4f:	f7 f9                	idiv   ecx
10002f51:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10002f55:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002f5b:	25 80 00 00 00       	and    eax,0x80
10002f60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002f64:	0f 85 f7 01 00 00    	jne    10003161 <ssfn_render+0x1dd2>
10002f6a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f6d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10002f71:	0f 84 ea 01 00 00    	je     10003161 <ssfn_render+0x1dd2>
10002f77:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
10002f7e:	83 ec 0c             	sub    esp,0xc
10002f81:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
10002f88:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10002f8f:	51                   	push   ecx
10002f90:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
10002f97:	e8 53 d9 ff ff       	call   100008ef <_ssfn_c>
10002f9c:	83 c4 10             	add    esp,0x10
10002f9f:	85 c0                	test   eax,eax
10002fa1:	0f 84 ba 01 00 00    	je     10003161 <ssfn_render+0x1dd2>
10002fa7:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
10002faf:	0f 86 ac 01 00 00    	jbe    10003161 <ssfn_render+0x1dd2>
10002fb5:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002fbb:	8d 48 06             	lea    ecx,[eax+0x6]
10002fbe:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002fc4:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10002fc8:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10002fcc:	0f 8e 8f 01 00 00    	jle    10003161 <ssfn_render+0x1dd2>
10002fd2:	8a 19                	mov    bl,BYTE PTR [ecx]
10002fd4:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10002fd8:	8a 18                	mov    bl,BYTE PTR [eax]
10002fda:	83 e3 40             	and    ebx,0x40
10002fdd:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10002fe2:	75 14                	jne    10002ff8 <ssfn_render+0x1c69>
10002fe4:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10002fe8:	75 0e                	jne    10002ff8 <ssfn_render+0x1c69>
10002fea:	80 fb 01             	cmp    bl,0x1
10002fed:	19 c0                	sbb    eax,eax
10002fef:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10002ff3:	e9 60 01 00 00       	jmp    10003158 <ssfn_render+0x1dc9>
10002ff8:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10002ffc:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10003000:	c1 e6 10             	shl    esi,0x10
10003003:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10003007:	84 db                	test   bl,bl
10003009:	74 08                	je     10003013 <ssfn_render+0x1c84>
1000300b:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
1000300e:	83 c1 06             	add    ecx,0x6
10003011:	eb 0c                	jmp    1000301f <ssfn_render+0x1c90>
10003013:	c1 e2 08             	shl    edx,0x8
10003016:	83 c1 05             	add    ecx,0x5
10003019:	89 d0                	mov    eax,edx
1000301b:	09 f0                	or     eax,esi
1000301d:	09 c7                	or     edi,eax
1000301f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003022:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003026:	01 f8                	add    eax,edi
10003028:	8a 10                	mov    dl,BYTE PTR [eax]
1000302a:	88 d3                	mov    bl,dl
1000302c:	83 e3 e0             	and    ebx,0xffffffe0
1000302f:	80 fb c0             	cmp    bl,0xc0
10003032:	0f 85 20 01 00 00    	jne    10003158 <ssfn_render+0x1dc9>
10003038:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
1000303c:	c1 e2 08             	shl    edx,0x8
1000303f:	83 c0 02             	add    eax,0x2
10003042:	81 e2 00 1f 00 00    	and    edx,0x1f00
10003048:	09 da                	or     edx,ebx
1000304a:	8d 72 01             	lea    esi,[edx+0x1]
1000304d:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003051:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
10003058:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
1000305c:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10003061:	0f 84 f1 00 00 00    	je     10003158 <ssfn_render+0x1dc9>
10003067:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000306b:	0f b7 10             	movzx  edx,WORD PTR [eax]
1000306e:	c1 e3 10             	shl    ebx,0x10
10003071:	81 e3 00 00 0f 00    	and    ebx,0xf0000
10003077:	09 d3                	or     ebx,edx
10003079:	39 de                	cmp    esi,ebx
1000307b:	0f 82 cf 00 00 00    	jb     10003150 <ssfn_render+0x1dc1>
10003081:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
10003084:	89 d7                	mov    edi,edx
10003086:	c1 e7 10             	shl    edi,0x10
10003089:	81 e7 00 00 0f 00    	and    edi,0xf0000
1000308f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10003093:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
10003097:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
1000309b:	39 fe                	cmp    esi,edi
1000309d:	0f 87 ad 00 00 00    	ja     10003150 <ssfn_render+0x1dc1>
100030a3:	29 de                	sub    esi,ebx
100030a5:	c0 ea 04             	shr    dl,0x4
100030a8:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
100030af:	0f b6 d2             	movzx  edx,dl
100030b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100030b6:	89 d3                	mov    ebx,edx
100030b8:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
100030bc:	c1 e3 10             	shl    ebx,0x10
100030bf:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100030c2:	09 da                	or     edx,ebx
100030c4:	c0 e8 04             	shr    al,0x4
100030c7:	c1 e0 18             	shl    eax,0x18
100030ca:	09 c2                	or     edx,eax
100030cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100030d0:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
100030d3:	01 c2                	add    edx,eax
100030d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100030d8:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
100030dc:	39 d7                	cmp    edi,edx
100030de:	76 78                	jbe    10003158 <ssfn_render+0x1dc9>
100030e0:	8a 1a                	mov    bl,BYTE PTR [edx]
100030e2:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
100030e9:	89 de                	mov    esi,ebx
100030eb:	83 e6 7f             	and    esi,0x7f
100030ee:	39 c6                	cmp    esi,eax
100030f0:	73 1d                	jae    1000310f <ssfn_render+0x1d80>
100030f2:	48                   	dec    eax
100030f3:	bb 02 00 00 00       	mov    ebx,0x2
100030f8:	29 f0                	sub    eax,esi
100030fa:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
10003101:	0f b6 02             	movzx  eax,BYTE PTR [edx]
10003104:	84 c0                	test   al,al
10003106:	78 03                	js     1000310b <ssfn_render+0x1d7c>
10003108:	8d 58 02             	lea    ebx,[eax+0x2]
1000310b:	01 da                	add    edx,ebx
1000310d:	eb cd                	jmp    100030dc <ssfn_render+0x1d4d>
1000310f:	be 01 00 00 00       	mov    esi,0x1
10003114:	84 db                	test   bl,bl
10003116:	78 03                	js     1000311b <ssfn_render+0x1d8c>
10003118:	8d 70 01             	lea    esi,[eax+0x1]
1000311b:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
1000311f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003123:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10003128:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
1000312c:	99                   	cdq    
1000312d:	f7 fb                	idiv   ebx
1000312f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10003134:	74 0d                	je     10003143 <ssfn_render+0x1db4>
10003136:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000313d:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10003141:	eb 15                	jmp    10003158 <ssfn_render+0x1dc9>
10003143:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
1000314a:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
1000314e:	eb 08                	jmp    10003158 <ssfn_render+0x1dc9>
10003150:	83 c0 08             	add    eax,0x8
10003153:	e9 00 ff ff ff       	jmp    10003058 <ssfn_render+0x1cc9>
10003158:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
1000315c:	e9 5d fe ff ff       	jmp    10002fbe <ssfn_render+0x1c2f>
10003161:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
10003168:	eb 73                	jmp    100031dd <ssfn_render+0x1e4e>
1000316a:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10003175:	e9 50 e4 ff ff       	jmp    100015ca <ssfn_render+0x23b>
1000317a:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10003181:	57                   	push   edi
10003182:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10003189:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10003190:	e8 5a d7 ff ff       	call   100008ef <_ssfn_c>
10003195:	5f                   	pop    edi
10003196:	85 c0                	test   eax,eax
10003198:	0f 84 25 e4 ff ff    	je     100015c3 <ssfn_render+0x234>
1000319e:	e9 a2 e4 ff ff       	jmp    10001645 <ssfn_render+0x2b6>
100031a3:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100031a6:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
100031aa:	75 0c                	jne    100031b8 <ssfn_render+0x1e29>
100031ac:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100031b3:	e9 3b e4 ff ff       	jmp    100015f3 <ssfn_render+0x264>
100031b8:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100031bf:	57                   	push   edi
100031c0:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100031c7:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100031ce:	e8 1c d7 ff ff       	call   100008ef <_ssfn_c>
100031d3:	59                   	pop    ecx
100031d4:	85 c0                	test   eax,eax
100031d6:	74 d4                	je     100031ac <ssfn_render+0x1e1d>
100031d8:	e9 68 e4 ff ff       	jmp    10001645 <ssfn_render+0x2b6>
100031dd:	81 c4 dc 05 01 00    	add    esp,0x105dc
100031e3:	89 c8                	mov    eax,ecx
100031e5:	5b                   	pop    ebx
100031e6:	5e                   	pop    esi
100031e7:	5f                   	pop    edi
100031e8:	5d                   	pop    ebp
100031e9:	c3                   	ret    

100031ea <ssfn_bbox>:
100031ea:	55                   	push   ebp
100031eb:	57                   	push   edi
100031ec:	56                   	push   esi
100031ed:	53                   	push   ebx
100031ee:	83 ec 3c             	sub    esp,0x3c
100031f1:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
100031f6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
100031fa:	0f 94 c0             	sete   al
100031fd:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
10003202:	0f 94 c2             	sete   dl
10003205:	09 d0                	or     eax,edx
10003207:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
1000320c:	0f 94 c2             	sete   dl
1000320f:	09 d0                	or     eax,edx
10003211:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
10003216:	0f 94 c2             	sete   dl
10003219:	09 d0                	or     eax,edx
1000321b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003220:	0f 94 c2             	sete   dl
10003223:	08 d0                	or     al,dl
10003225:	0f 85 7c 01 00 00    	jne    100033a7 <ssfn_bbox+0x1bd>
1000322b:	85 db                	test   ebx,ebx
1000322d:	0f 84 74 01 00 00    	je     100033a7 <ssfn_bbox+0x1bd>
10003233:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003237:	31 f6                	xor    esi,esi
10003239:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000323f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003243:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003249:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
1000324d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003253:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003257:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000325d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10003261:	80 38 00             	cmp    BYTE PTR [eax],0x0
10003264:	0f 84 42 01 00 00    	je     100033ac <ssfn_bbox+0x1c2>
1000326a:	8d 54 24 18          	lea    edx,[esp+0x18]
1000326e:	b9 06 00 00 00       	mov    ecx,0x6
10003273:	89 d7                	mov    edi,edx
10003275:	89 f0                	mov    eax,esi
10003277:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10003281:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003283:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
1000328b:	31 ff                	xor    edi,edi
1000328d:	bd 01 00 00 00       	mov    ebp,0x1
10003292:	50                   	push   eax
10003293:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10003297:	8d 44 24 20          	lea    eax,[esp+0x20]
1000329b:	50                   	push   eax
1000329c:	53                   	push   ebx
1000329d:	e8 fc ff ff ff       	call   1000329e <ssfn_bbox+0xb4>	1000329e: R_386_PC32	ssfn_render
100032a2:	83 c4 10             	add    esp,0x10
100032a5:	89 c6                	mov    esi,eax
100032a7:	85 c0                	test   eax,eax
100032a9:	74 6f                	je     1000331a <ssfn_bbox+0x130>
100032ab:	0f 88 fb 00 00 00    	js     100033ac <ssfn_bbox+0x1c2>
100032b1:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100032b7:	85 c0                	test   eax,eax
100032b9:	0f 84 ed 00 00 00    	je     100033ac <ssfn_bbox+0x1c2>
100032bf:	85 ed                	test   ebp,ebp
100032c1:	74 0b                	je     100032ce <ssfn_bbox+0xe4>
100032c3:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
100032c9:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
100032ce:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100032d2:	74 12                	je     100032e6 <ssfn_bbox+0xfc>
100032d4:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
100032da:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100032de:	7d 2f                	jge    1000330f <ssfn_bbox+0x125>
100032e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100032e4:	eb 29                	jmp    1000330f <ssfn_bbox+0x125>
100032e6:	0f b7 08             	movzx  ecx,WORD PTR [eax]
100032e9:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
100032ee:	39 cd                	cmp    ebp,ecx
100032f0:	7d 05                	jge    100032f7 <ssfn_bbox+0x10d>
100032f2:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
100032f7:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
100032fb:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
10003300:	84 d2                	test   dl,dl
10003302:	75 04                	jne    10003308 <ssfn_bbox+0x11e>
10003304:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
10003308:	01 ca                	add    edx,ecx
1000330a:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
1000330f:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10003313:	31 ed                	xor    ebp,ebp
10003315:	e9 78 ff ff ff       	jmp    10003292 <ssfn_bbox+0xa8>
1000331a:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10003321:	74 23                	je     10003346 <ssfn_bbox+0x15c>
10003323:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003326:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
1000332a:	75 1a                	jne    10003346 <ssfn_bbox+0x15c>
1000332c:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
10003332:	b9 04 00 00 00       	mov    ecx,0x4
10003337:	99                   	cdq    
10003338:	f7 f9                	idiv   ecx
1000333a:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
1000333f:	29 f8                	sub    eax,edi
10003341:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
10003346:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
1000334c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003350:	74 29                	je     1000337b <ssfn_bbox+0x191>
10003352:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003357:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000335b:	89 01                	mov    DWORD PTR [ecx],eax
1000335d:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003361:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
10003367:	89 01                	mov    DWORD PTR [ecx],eax
10003369:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000336d:	89 38                	mov    DWORD PTR [eax],edi
1000336f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003373:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10003377:	89 38                	mov    DWORD PTR [eax],edi
10003379:	eb 31                	jmp    100033ac <ssfn_bbox+0x1c2>
1000337b:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
10003380:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
10003384:	89 07                	mov    DWORD PTR [edi],eax
10003386:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
1000338b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
1000338f:	89 07                	mov    DWORD PTR [edi],eax
10003391:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003395:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000339b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000339f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100033a5:	eb 05                	jmp    100033ac <ssfn_bbox+0x1c2>
100033a7:	be fc ff ff ff       	mov    esi,0xfffffffc
100033ac:	83 c4 3c             	add    esp,0x3c
100033af:	89 f0                	mov    eax,esi
100033b1:	5b                   	pop    ebx
100033b2:	5e                   	pop    esi
100033b3:	5f                   	pop    edi
100033b4:	5d                   	pop    ebp
100033b5:	c3                   	ret    

100033b6 <ssfn_text>:
100033b6:	55                   	push   ebp
100033b7:	57                   	push   edi
100033b8:	56                   	push   esi
100033b9:	53                   	push   ebx
100033ba:	83 ec 1c             	sub    esp,0x1c
100033bd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100033c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
100033c5:	85 f6                	test   esi,esi
100033c7:	0f 84 b2 00 00 00    	je     1000347f <ssfn_text+0xc9>
100033cd:	85 ed                	test   ebp,ebp
100033cf:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
100033d4:	0f 84 a5 00 00 00    	je     1000347f <ssfn_text+0xc9>
100033da:	83 ec 0c             	sub    esp,0xc
100033dd:	6a 18                	push   0x18
100033df:	e8 fc ff ff ff       	call   100033e0 <ssfn_text+0x2a>	100033e0: R_386_PC32	malloc
100033e4:	83 c4 10             	add    esp,0x10
100033e7:	89 c3                	mov    ebx,eax
100033e9:	85 c0                	test   eax,eax
100033eb:	0f 84 8e 00 00 00    	je     1000347f <ssfn_text+0xc9>
100033f1:	31 c0                	xor    eax,eax
100033f3:	b9 06 00 00 00       	mov    ecx,0x6
100033f8:	89 df                	mov    edi,ebx
100033fa:	80 3e 00             	cmp    BYTE PTR [esi],0x0
100033fd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100033ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003403:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10003406:	74 79                	je     10003481 <ssfn_text+0xcb>
10003408:	8d 43 0c             	lea    eax,[ebx+0xc]
1000340b:	52                   	push   edx
1000340c:	52                   	push   edx
1000340d:	50                   	push   eax
1000340e:	8d 43 0a             	lea    eax,[ebx+0xa]
10003411:	50                   	push   eax
10003412:	8d 43 06             	lea    eax,[ebx+0x6]
10003415:	50                   	push   eax
10003416:	8d 43 04             	lea    eax,[ebx+0x4]
10003419:	50                   	push   eax
1000341a:	56                   	push   esi
1000341b:	55                   	push   ebp
1000341c:	e8 fc ff ff ff       	call   1000341d <ssfn_text+0x67>	1000341d: R_386_PC32	ssfn_bbox
10003421:	83 c4 20             	add    esp,0x20
10003424:	85 c0                	test   eax,eax
10003426:	75 59                	jne    10003481 <ssfn_text+0xcb>
10003428:	83 ec 0c             	sub    esp,0xc
1000342b:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
1000342f:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10003433:	0f af c8             	imul   ecx,eax
10003436:	c1 e1 02             	shl    ecx,0x2
10003439:	51                   	push   ecx
1000343a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000343e:	e8 fc ff ff ff       	call   1000343f <ssfn_text+0x89>	1000343f: R_386_PC32	malloc
10003443:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003447:	89 c7                	mov    edi,eax
10003449:	89 03                	mov    DWORD PTR [ebx],eax
1000344b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
1000344f:	83 c4 10             	add    esp,0x10
10003452:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003454:	50                   	push   eax
10003455:	56                   	push   esi
10003456:	53                   	push   ebx
10003457:	55                   	push   ebp
10003458:	e8 fc ff ff ff       	call   10003459 <ssfn_text+0xa3>	10003459: R_386_PC32	ssfn_render
1000345d:	83 c4 10             	add    esp,0x10
10003460:	85 c0                	test   eax,eax
10003462:	7e 04                	jle    10003468 <ssfn_text+0xb2>
10003464:	01 c6                	add    esi,eax
10003466:	eb ec                	jmp    10003454 <ssfn_text+0x9e>
10003468:	74 17                	je     10003481 <ssfn_text+0xcb>
1000346a:	83 ec 0c             	sub    esp,0xc
1000346d:	ff 33                	push   DWORD PTR [ebx]
1000346f:	e8 fc ff ff ff       	call   10003470 <ssfn_text+0xba>	10003470: R_386_PC32	free
10003474:	89 1c 24             	mov    DWORD PTR [esp],ebx
10003477:	e8 fc ff ff ff       	call   10003478 <ssfn_text+0xc2>	10003478: R_386_PC32	free
1000347c:	83 c4 10             	add    esp,0x10
1000347f:	31 db                	xor    ebx,ebx
10003481:	83 c4 1c             	add    esp,0x1c
10003484:	89 d8                	mov    eax,ebx
10003486:	5b                   	pop    ebx
10003487:	5e                   	pop    esi
10003488:	5f                   	pop    edi
10003489:	5d                   	pop    ebp
1000348a:	c3                   	ret    
1000348b:	90                   	nop

1000348c <NIContext::drvPutpixel4(int, int, unsigned int)>:
1000348c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003490:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003496:	8b 10                	mov    edx,DWORD PTR [eax]
10003498:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000349c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
1000349f:	90                   	nop

100034a0 <NIContext::drvDarken4(int, int, int)>:
100034a0:	55                   	push   ebp
100034a1:	57                   	push   edi
100034a2:	56                   	push   esi
100034a3:	53                   	push   ebx
100034a4:	83 ec 20             	sub    esp,0x20
100034a7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
100034ab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100034af:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100034b3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
100034b7:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
100034bd:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100034c1:	8b 10                	mov    edx,DWORD PTR [eax]
100034c3:	56                   	push   esi
100034c4:	53                   	push   ebx
100034c5:	50                   	push   eax
100034c6:	ff 52 34             	call   DWORD PTR [edx+0x34]
100034c9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100034cd:	89 c2                	mov    edx,eax
100034cf:	0f b6 ec             	movzx  ebp,ah
100034d2:	c1 ea 10             	shr    edx,0x10
100034d5:	0f af e9             	imul   ebp,ecx
100034d8:	0f b6 d2             	movzx  edx,dl
100034db:	0f b6 c0             	movzx  eax,al
100034de:	0f af d1             	imul   edx,ecx
100034e1:	0f af c1             	imul   eax,ecx
100034e4:	c1 ea 07             	shr    edx,0x7
100034e7:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
100034ed:	c1 e8 07             	shr    eax,0x7
100034f0:	8b 39                	mov    edi,DWORD PTR [ecx]
100034f2:	c1 e2 10             	shl    edx,0x10
100034f5:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
100034f9:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
100034fd:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10003501:	c1 ed 07             	shr    ebp,0x7
10003504:	c1 e5 08             	shl    ebp,0x8
10003507:	09 ea                	or     edx,ebp
10003509:	09 c2                	or     edx,eax
1000350b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
1000350f:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
10003512:	83 c4 2c             	add    esp,0x2c
10003515:	5b                   	pop    ebx
10003516:	5e                   	pop    esi
10003517:	5f                   	pop    edi
10003518:	5d                   	pop    ebp
10003519:	ff e0                	jmp    eax
1000351b:	90                   	nop

1000351c <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
1000351c:	55                   	push   ebp
1000351d:	b9 00 40 00 00       	mov    ecx,0x4000
10003522:	57                   	push   edi
10003523:	b0 ff                	mov    al,0xff
10003525:	56                   	push   esi
10003526:	53                   	push   ebx
10003527:	83 ec 3c             	sub    esp,0x3c
1000352a:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
1000352e:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10003532:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10003535:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
10003539:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000353b:	85 db                	test   ebx,ebx
1000353d:	75 10                	jne    1000354f <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
1000353f:	83 ec 0c             	sub    esp,0xc
10003542:	68 40 51 00 10       	push   0x10005140	10003543: R_386_32	.text
10003547:	e8 fc ff ff ff       	call   10003548 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	10003548: R_386_PC32	KePanic(char const*)
1000354c:	83 c4 10             	add    esp,0x10
1000354f:	50                   	push   eax
10003550:	50                   	push   eax
10003551:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003555:	50                   	push   eax
10003556:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000355a:	50                   	push   eax
1000355b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000355f:	50                   	push   eax
10003560:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003564:	50                   	push   eax
10003565:	56                   	push   esi
10003566:	68 00 00 00 00       	push   0x0	10003567: R_386_32	ssfn_ctx
1000356b:	e8 fc ff ff ff       	call   1000356c <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	1000356c: R_386_PC32	ssfn_bbox
10003570:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003573:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
1000357b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000357f:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
10003587:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000358b:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
10003590:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10003594:	0d 00 00 00 ff       	or     eax,0xff000000
10003599:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000359d:	83 c4 1c             	add    esp,0x1c
100035a0:	56                   	push   esi
100035a1:	8d 44 24 20          	lea    eax,[esp+0x20]
100035a5:	50                   	push   eax
100035a6:	68 00 00 00 00       	push   0x0	100035a7: R_386_32	ssfn_ctx
100035ab:	e8 fc ff ff ff       	call   100035ac <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	100035ac: R_386_PC32	ssfn_render
100035b0:	83 c4 10             	add    esp,0x10
100035b3:	89 03                	mov    DWORD PTR [ebx],eax
100035b5:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
100035b9:	31 db                	xor    ebx,ebx
100035bb:	89 f0                	mov    eax,esi
100035bd:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
100035c1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100035c5:	7e 3f                	jle    10003606 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
100035c7:	31 ff                	xor    edi,edi
100035c9:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100035ce:	39 f8                	cmp    eax,edi
100035d0:	7e 2c                	jle    100035fe <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
100035d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100035d5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
100035d8:	83 f8 ff             	cmp    eax,0xffffffff
100035db:	74 1d                	je     100035fa <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
100035dd:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
100035e3:	25 ff ff ff 00       	and    eax,0xffffff
100035e8:	8b 0a                	mov    ecx,DWORD PTR [edx]
100035ea:	50                   	push   eax
100035eb:	56                   	push   esi
100035ec:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
100035f0:	01 f8                	add    eax,edi
100035f2:	50                   	push   eax
100035f3:	52                   	push   edx
100035f4:	ff 51 24             	call   DWORD PTR [ecx+0x24]
100035f7:	83 c4 10             	add    esp,0x10
100035fa:	43                   	inc    ebx
100035fb:	47                   	inc    edi
100035fc:	eb cb                	jmp    100035c9 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
100035fe:	29 c3                	sub    ebx,eax
10003600:	46                   	inc    esi
10003601:	83 c3 40             	add    ebx,0x40
10003604:	eb b5                	jmp    100035bb <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
10003606:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000360b:	83 c4 3c             	add    esp,0x3c
1000360e:	5b                   	pop    ebx
1000360f:	5e                   	pop    esi
10003610:	5f                   	pop    edi
10003611:	5d                   	pop    ebp
10003612:	c3                   	ret    
10003613:	90                   	nop

10003614 <NIContext::~NIContext()>:
10003614:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10003618: R_386_32	ssfn_ctx
1000361c:	e9 00 db ff ff       	jmp    10001121 <ssfn_free>
10003621:	90                   	nop

10003622 <NIContext::NIContext(Video*, int, int, int, int)>:
10003622:	55                   	push   ebp
10003623:	ba 00 00 00 00       	mov    edx,0x0	10003624: R_386_32	ssfn_ctx
10003628:	57                   	push   edi
10003629:	b9 72 3d 00 00       	mov    ecx,0x3d72
1000362e:	56                   	push   esi
1000362f:	89 d7                	mov    edi,edx
10003631:	53                   	push   ebx
10003632:	81 ec 48 02 00 00    	sub    esp,0x248
10003638:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
1000363f:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
10003646:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
1000364c:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
10003653:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
10003659:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
10003660:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
10003666:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
1000366d:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
10003673:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
1000367a:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
10003680:	31 c0                	xor    eax,eax
10003682:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003684:	68 00 40 00 00       	push   0x4000
10003689:	e8 fc ff ff ff       	call   1000368a <NIContext::NIContext(Video*, int, int, int, int)+0x68>	1000368a: R_386_PC32	malloc
1000368e:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
10003698:	89 03                	mov    DWORD PTR [ebx],eax
1000369a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100036a1:	e8 fc ff ff ff       	call   100036a2 <NIContext::NIContext(Video*, int, int, int, int)+0x80>	100036a2: R_386_PC32	malloc
100036a6:	83 c4 0c             	add    esp,0xc
100036a9:	89 c6                	mov    esi,eax
100036ab:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100036ad: R_386_32	kernelProcess
100036b1:	68 59 51 00 10       	push   0x10005159	100036b2: R_386_32	.text
100036b6:	50                   	push   eax
100036b7:	e8 fc ff ff ff       	call   100036b8 <NIContext::NIContext(Video*, int, int, int, int)+0x96>	100036b8: R_386_PC32	Directory::Directory(char const*, Process*)
100036bc:	83 c4 10             	add    esp,0x10
100036bf:	85 f6                	test   esi,esi
100036c1:	75 10                	jne    100036d3 <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
100036c3:	83 ec 0c             	sub    esp,0xc
100036c6:	68 6d 51 00 10       	push   0x1000516d	100036c7: R_386_32	.text
100036cb:	e8 fc ff ff ff       	call   100036cc <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	100036cc: R_386_PC32	KePanic(char const*)
100036d0:	83 c4 10             	add    esp,0x10
100036d3:	83 ec 0c             	sub    esp,0xc
100036d6:	56                   	push   esi
100036d7:	e8 fc ff ff ff       	call   100036d8 <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	100036d8: R_386_PC32	Directory::open()
100036dc:	83 c4 10             	add    esp,0x10
100036df:	85 c0                	test   eax,eax
100036e1:	75 e0                	jne    100036c3 <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
100036e3:	83 ec 0c             	sub    esp,0xc
100036e6:	8b 06                	mov    eax,DWORD PTR [esi]
100036e8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
100036ec:	51                   	push   ecx
100036ed:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
100036f4:	52                   	push   edx
100036f5:	6a 00                	push   0x0
100036f7:	68 10 01 00 00       	push   0x110
100036fc:	56                   	push   esi
100036fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003700:	83 c4 20             	add    esp,0x20
10003703:	85 c0                	test   eax,eax
10003705:	0f 85 a0 01 00 00    	jne    100038ab <NIContext::NIContext(Video*, int, int, int, int)+0x289>
1000370b:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
10003713:	0f 85 92 01 00 00    	jne    100038ab <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003719:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
10003720:	83 c9 ff             	or     ecx,0xffffffff
10003723:	83 ec 0c             	sub    esp,0xc
10003726:	89 ef                	mov    edi,ebp
10003728:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
1000372a:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
10003730:	89 ca                	mov    edx,ecx
10003732:	f7 d2                	not    edx
10003734:	52                   	push   edx
10003735:	e8 fc ff ff ff       	call   10003736 <NIContext::NIContext(Video*, int, int, int, int)+0x114>	10003736: R_386_PC32	malloc
1000373a:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
1000373e:	47                   	inc    edi
1000373f:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
10003745:	5a                   	pop    edx
10003746:	59                   	pop    ecx
10003747:	55                   	push   ebp
10003748:	50                   	push   eax
10003749:	e8 fc ff ff ff       	call   1000374a <NIContext::NIContext(Video*, int, int, int, int)+0x128>	1000374a: R_386_PC32	strcpy
1000374e:	5f                   	pop    edi
1000374f:	58                   	pop    eax
10003750:	68 88 51 00 10       	push   0x10005188	10003751: R_386_32	.text
10003755:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
10003759:	57                   	push   edi
1000375a:	e8 fc ff ff ff       	call   1000375b <NIContext::NIContext(Video*, int, int, int, int)+0x139>	1000375b: R_386_PC32	strcpy
1000375f:	58                   	pop    eax
10003760:	5a                   	pop    edx
10003761:	55                   	push   ebp
10003762:	57                   	push   edi
10003763:	e8 fc ff ff ff       	call   10003764 <NIContext::NIContext(Video*, int, int, int, int)+0x142>	10003764: R_386_PC32	strcat
10003768:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
1000376f:	e8 fc ff ff ff       	call   10003770 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	10003770: R_386_PC32	malloc
10003774:	83 c4 0c             	add    esp,0xc
10003777:	89 c5                	mov    ebp,eax
10003779:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000377b: R_386_32	kernelProcess
1000377f:	57                   	push   edi
10003780:	50                   	push   eax
10003781:	e8 fc ff ff ff       	call   10003782 <NIContext::NIContext(Video*, int, int, int, int)+0x160>	10003782: R_386_PC32	File::File(char const*, Process*)
10003786:	83 c4 10             	add    esp,0x10
10003789:	85 ed                	test   ebp,ebp
1000378b:	0f 84 52 ff ff ff    	je     100036e3 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
10003791:	50                   	push   eax
10003792:	50                   	push   eax
10003793:	6a 01                	push   0x1
10003795:	55                   	push   ebp
10003796:	e8 fc ff ff ff       	call   10003797 <NIContext::NIContext(Video*, int, int, int, int)+0x175>	10003797: R_386_PC32	File::open(FileOpenMode)
1000379b:	83 c4 10             	add    esp,0x10
1000379e:	85 c0                	test   eax,eax
100037a0:	74 0c                	je     100037ae <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
100037a2:	83 ec 0c             	sub    esp,0xc
100037a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037a8:	55                   	push   ebp
100037a9:	e9 b4 00 00 00       	jmp    10003862 <NIContext::NIContext(Video*, int, int, int, int)+0x240>
100037ae:	50                   	push   eax
100037af:	8d 44 24 17          	lea    eax,[esp+0x17]
100037b3:	50                   	push   eax
100037b4:	8d 44 24 20          	lea    eax,[esp+0x20]
100037b8:	50                   	push   eax
100037b9:	55                   	push   ebp
100037ba:	e8 fc ff ff ff       	call   100037bb <NIContext::NIContext(Video*, int, int, int, int)+0x199>	100037bb: R_386_PC32	File::stat(unsigned long long*, bool*)
100037bf:	83 c4 10             	add    esp,0x10
100037c2:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
100037c7:	74 0e                	je     100037d7 <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
100037c9:	83 ec 0c             	sub    esp,0xc
100037cc:	55                   	push   ebp
100037cd:	e8 fc ff ff ff       	call   100037ce <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	100037ce: R_386_PC32	File::close()
100037d2:	e9 85 00 00 00       	jmp    1000385c <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
100037d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100037db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100037df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100037e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100037e7:	83 ec 0c             	sub    esp,0xc
100037ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100037ee:	e8 fc ff ff ff       	call   100037ef <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	100037ef: R_386_PC32	malloc
100037f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100037f7:	58                   	pop    eax
100037f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037fb:	8d 54 24 20          	lea    edx,[esp+0x20]
100037ff:	52                   	push   edx
10003800:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10003804:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003808:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000380c:	55                   	push   ebp
1000380d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003810:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003814:	83 c4 1c             	add    esp,0x1c
10003817:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000381b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000381f:	68 9d 51 00 10       	push   0x1000519d	10003820: R_386_32	.text
10003824:	e8 fc ff ff ff       	call   10003825 <NIContext::NIContext(Video*, int, int, int, int)+0x203>	10003825: R_386_PC32	Dbg::kprintf(char const*, ...)
10003829:	83 c4 10             	add    esp,0x10
1000382c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003830:	85 c0                	test   eax,eax
10003832:	75 15                	jne    10003849 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003834:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003838:	89 c1                	mov    ecx,eax
1000383a:	c1 f9 1f             	sar    ecx,0x1f
1000383d:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10003841:	75 06                	jne    10003849 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003843:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10003847:	74 24                	je     1000386d <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
10003849:	83 ec 0c             	sub    esp,0xc
1000384c:	55                   	push   ebp
1000384d:	e8 fc ff ff ff       	call   1000384e <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	1000384e: R_386_PC32	File::close()
10003852:	58                   	pop    eax
10003853:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10003857:	e8 fc ff ff ff       	call   10003858 <NIContext::NIContext(Video*, int, int, int, int)+0x236>	10003858: R_386_PC32	free
1000385c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000385f:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003862:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003865:	83 c4 10             	add    esp,0x10
10003868:	e9 76 fe ff ff       	jmp    100036e3 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
1000386d:	50                   	push   eax
1000386e:	50                   	push   eax
1000386f:	57                   	push   edi
10003870:	68 b1 51 00 10       	push   0x100051b1	10003871: R_386_32	.text
10003875:	e8 fc ff ff ff       	call   10003876 <NIContext::NIContext(Video*, int, int, int, int)+0x254>	10003876: R_386_PC32	Dbg::kprintf(char const*, ...)
1000387a:	5a                   	pop    edx
1000387b:	59                   	pop    ecx
1000387c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10003880:	68 00 00 00 00       	push   0x0	10003881: R_386_32	ssfn_ctx
10003885:	e8 fc ff ff ff       	call   10003886 <NIContext::NIContext(Video*, int, int, int, int)+0x264>	10003886: R_386_PC32	ssfn_load
1000388a:	5b                   	pop    ebx
1000388b:	5f                   	pop    edi
1000388c:	50                   	push   eax
1000388d:	68 c2 51 00 10       	push   0x100051c2	1000388e: R_386_32	.text
10003892:	e8 fc ff ff ff       	call   10003893 <NIContext::NIContext(Video*, int, int, int, int)+0x271>	10003893: R_386_PC32	Dbg::kprintf(char const*, ...)
10003897:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000389a:	e8 fc ff ff ff       	call   1000389b <NIContext::NIContext(Video*, int, int, int, int)+0x279>	1000389b: R_386_PC32	File::close()
1000389f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100038a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
100038a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
100038a8:	83 c4 10             	add    esp,0x10
100038ab:	83 ec 0c             	sub    esp,0xc
100038ae:	56                   	push   esi
100038af:	e8 fc ff ff ff       	call   100038b0 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	100038b0: R_386_PC32	Directory::close()
100038b4:	8b 06                	mov    eax,DWORD PTR [esi]
100038b6:	89 34 24             	mov    DWORD PTR [esp],esi
100038b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
100038bc:	b8 00 00 00 00       	mov    eax,0x0	100038bd: R_386_32	ssfn_ctx
100038c1:	e8 f7 cb ff ff       	call   100004bd <_ssfn_fc.part.1>
100038c6:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	100038c8: R_386_32	ssfn_ctx
100038d0:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	100038d2: R_386_32	ssfn_ctx
100038da:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	100038dc: R_386_32	ssfn_ctx
100038e4:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	100038e6: R_386_32	ssfn_ctx
100038ee:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	100038f0: R_386_32	ssfn_ctx
100038f8:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	100038fa: R_386_32	ssfn_ctx
10003902:	81 c4 4c 02 00 00    	add    esp,0x24c
10003908:	5b                   	pop    ebx
10003909:	5e                   	pop    esi
1000390a:	5f                   	pop    edi
1000390b:	5d                   	pop    ebp
1000390c:	c3                   	ret    
1000390d:	90                   	nop

1000390e <NiLoadCursors()>:
1000390e:	55                   	push   ebp
1000390f:	57                   	push   edi
10003910:	56                   	push   esi
10003911:	53                   	push   ebx
10003912:	83 ec 38             	sub    esp,0x38
10003915:	68 14 01 00 00       	push   0x114
1000391a:	e8 fc ff ff ff       	call   1000391b <NiLoadCursors()+0xd>	1000391b: R_386_PC32	malloc
1000391f:	83 c4 0c             	add    esp,0xc
10003922:	89 c5                	mov    ebp,eax
10003924:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10003926: R_386_32	kernelProcess
1000392a:	68 7c 54 00 10       	push   0x1000547c	1000392b: R_386_32	.text
1000392f:	50                   	push   eax
10003930:	e8 fc ff ff ff       	call   10003931 <NiLoadCursors()+0x23>	10003931: R_386_PC32	File::File(char const*, Process*)
10003935:	58                   	pop    eax
10003936:	5a                   	pop    edx
10003937:	6a 01                	push   0x1
10003939:	55                   	push   ebp
1000393a:	e8 fc ff ff ff       	call   1000393b <NiLoadCursors()+0x2d>	1000393b: R_386_PC32	File::open(FileOpenMode)
1000393f:	83 c4 10             	add    esp,0x10
10003942:	85 c0                	test   eax,eax
10003944:	74 0a                	je     10003950 <NiLoadCursors()+0x42>
10003946:	83 ec 0c             	sub    esp,0xc
10003949:	68 9b 54 00 10       	push   0x1000549b	1000394a: R_386_32	.text
1000394e:	eb 4c                	jmp    1000399c <NiLoadCursors()+0x8e>
10003950:	53                   	push   ebx
10003951:	8d 44 24 17          	lea    eax,[esp+0x17]
10003955:	50                   	push   eax
10003956:	8d 44 24 20          	lea    eax,[esp+0x20]
1000395a:	50                   	push   eax
1000395b:	55                   	push   ebp
1000395c:	e8 fc ff ff ff       	call   1000395d <NiLoadCursors()+0x4f>	1000395d: R_386_PC32	File::stat(unsigned long long*, bool*)
10003961:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10003965:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10003969:	89 34 24             	mov    DWORD PTR [esp],esi
1000396c:	e8 fc ff ff ff       	call   1000396d <NiLoadCursors()+0x5f>	1000396d: R_386_PC32	malloc
10003971:	89 c3                	mov    ebx,eax
10003973:	58                   	pop    eax
10003974:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003977:	8d 54 24 20          	lea    edx,[esp+0x20]
1000397b:	52                   	push   edx
1000397c:	53                   	push   ebx
1000397d:	57                   	push   edi
1000397e:	56                   	push   esi
1000397f:	55                   	push   ebp
10003980:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003983:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003987:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
1000398b:	83 c4 20             	add    esp,0x20
1000398e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10003992:	74 12                	je     100039a6 <NiLoadCursors()+0x98>
10003994:	83 ec 0c             	sub    esp,0xc
10003997:	68 af 54 00 10       	push   0x100054af	10003998: R_386_32	.text
1000399c:	e8 fc ff ff ff       	call   1000399d <NiLoadCursors()+0x8f>	1000399d: R_386_PC32	Dbg::kprintf(char const*, ...)
100039a1:	e9 3d 01 00 00       	jmp    10003ae3 <NiLoadCursors()+0x1d5>
100039a6:	6a 00                	push   0x0
100039a8:	31 ed                	xor    ebp,ebp
100039aa:	68 04 01 00 00       	push   0x104
100039af:	52                   	push   edx
100039b0:	50                   	push   eax
100039b1:	e8 fc ff ff ff       	call   100039b2 <NiLoadCursors()+0xa4>	100039b2: R_386_PC32	__udivdi3
100039b6:	5a                   	pop    edx
100039b7:	59                   	pop    ecx
100039b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100039bc:	50                   	push   eax
100039bd:	68 c3 54 00 10       	push   0x100054c3	100039be: R_386_32	.text
100039c2:	e8 fc ff ff ff       	call   100039c3 <NiLoadCursors()+0xb5>	100039c3: R_386_PC32	Dbg::kprintf(char const*, ...)
100039c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
100039ca:	e8 fc ff ff ff       	call   100039cb <NiLoadCursors()+0xbd>	100039cb: R_386_PC32	Dbg::kprintf(char const*, ...)
100039cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100039d3:	8d 04 83             	lea    eax,[ebx+eax*4]
100039d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100039da:	83 c4 10             	add    esp,0x10
100039dd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
100039e1:	0f 8d f3 00 00 00    	jge    10003ada <NiLoadCursors()+0x1cc>
100039e7:	8d 34 ab             	lea    esi,[ebx+ebp*4]
100039ea:	50                   	push   eax
100039eb:	6a 04                	push   0x4
100039ed:	68 d0 54 00 10       	push   0x100054d0	100039ee: R_386_32	.text
100039f2:	56                   	push   esi
100039f3:	e8 fc ff ff ff       	call   100039f4 <NiLoadCursors()+0xe6>	100039f4: R_386_PC32	memcmp
100039f8:	83 c4 10             	add    esp,0x10
100039fb:	85 c0                	test   eax,eax
100039fd:	0f 84 b8 00 00 00    	je     10003abb <NiLoadCursors()+0x1ad>
10003a03:	50                   	push   eax
10003a04:	6a 04                	push   0x4
10003a06:	68 d5 54 00 10       	push   0x100054d5	10003a07: R_386_32	.text
10003a0b:	56                   	push   esi
10003a0c:	e8 fc ff ff ff       	call   10003a0d <NiLoadCursors()+0xff>	10003a0d: R_386_PC32	memcmp
10003a11:	83 c4 10             	add    esp,0x10
10003a14:	85 c0                	test   eax,eax
10003a16:	74 7b                	je     10003a93 <NiLoadCursors()+0x185>
10003a18:	50                   	push   eax
10003a19:	6a 04                	push   0x4
10003a1b:	68 da 54 00 10       	push   0x100054da	10003a1c: R_386_32	.text
10003a20:	56                   	push   esi
10003a21:	e8 fc ff ff ff       	call   10003a22 <NiLoadCursors()+0x114>	10003a22: R_386_PC32	memcmp
10003a26:	83 c4 10             	add    esp,0x10
10003a29:	85 c0                	test   eax,eax
10003a2b:	74 6d                	je     10003a9a <NiLoadCursors()+0x18c>
10003a2d:	57                   	push   edi
10003a2e:	6a 04                	push   0x4
10003a30:	68 df 54 00 10       	push   0x100054df	10003a31: R_386_32	.text
10003a35:	56                   	push   esi
10003a36:	e8 fc ff ff ff       	call   10003a37 <NiLoadCursors()+0x129>	10003a37: R_386_PC32	memcmp
10003a3b:	83 c4 10             	add    esp,0x10
10003a3e:	85 c0                	test   eax,eax
10003a40:	74 5f                	je     10003aa1 <NiLoadCursors()+0x193>
10003a42:	51                   	push   ecx
10003a43:	6a 04                	push   0x4
10003a45:	68 e4 54 00 10       	push   0x100054e4	10003a46: R_386_32	.text
10003a4a:	56                   	push   esi
10003a4b:	e8 fc ff ff ff       	call   10003a4c <NiLoadCursors()+0x13e>	10003a4c: R_386_PC32	memcmp
10003a50:	83 c4 10             	add    esp,0x10
10003a53:	85 c0                	test   eax,eax
10003a55:	74 51                	je     10003aa8 <NiLoadCursors()+0x19a>
10003a57:	52                   	push   edx
10003a58:	6a 04                	push   0x4
10003a5a:	68 e9 54 00 10       	push   0x100054e9	10003a5b: R_386_32	.text
10003a5f:	56                   	push   esi
10003a60:	e8 fc ff ff ff       	call   10003a61 <NiLoadCursors()+0x153>	10003a61: R_386_PC32	memcmp
10003a65:	83 c4 10             	add    esp,0x10
10003a68:	85 c0                	test   eax,eax
10003a6a:	74 43                	je     10003aaf <NiLoadCursors()+0x1a1>
10003a6c:	50                   	push   eax
10003a6d:	6a 04                	push   0x4
10003a6f:	68 ee 54 00 10       	push   0x100054ee	10003a70: R_386_32	.text
10003a74:	56                   	push   esi
10003a75:	e8 fc ff ff ff       	call   10003a76 <NiLoadCursors()+0x168>	10003a76: R_386_PC32	memcmp
10003a7a:	83 c4 10             	add    esp,0x10
10003a7d:	85 c0                	test   eax,eax
10003a7f:	74 35                	je     10003ab6 <NiLoadCursors()+0x1a8>
10003a81:	83 ec 0c             	sub    esp,0xc
10003a84:	68 f3 54 00 10       	push   0x100054f3	10003a85: R_386_32	.text
10003a89:	e8 fc ff ff ff       	call   10003a8a <NiLoadCursors()+0x17c>	10003a8a: R_386_PC32	Dbg::kprintf(char const*, ...)
10003a8e:	83 c4 10             	add    esp,0x10
10003a91:	eb 47                	jmp    10003ada <NiLoadCursors()+0x1cc>
10003a93:	b8 00 02 00 00       	mov    eax,0x200
10003a98:	eb 21                	jmp    10003abb <NiLoadCursors()+0x1ad>
10003a9a:	b8 00 03 00 00       	mov    eax,0x300
10003a9f:	eb 1a                	jmp    10003abb <NiLoadCursors()+0x1ad>
10003aa1:	b8 00 01 00 00       	mov    eax,0x100
10003aa6:	eb 13                	jmp    10003abb <NiLoadCursors()+0x1ad>
10003aa8:	b8 00 04 00 00       	mov    eax,0x400
10003aad:	eb 0c                	jmp    10003abb <NiLoadCursors()+0x1ad>
10003aaf:	b8 00 05 00 00       	mov    eax,0x500
10003ab4:	eb 05                	jmp    10003abb <NiLoadCursors()+0x1ad>
10003ab6:	b8 00 06 00 00       	mov    eax,0x600
10003abb:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003abd: R_386_32	___mouse_data
10003ac1:	b9 00 01 00 00       	mov    ecx,0x100
10003ac6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003aca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003acc:	45                   	inc    ebp
10003acd:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003ad5:	e9 03 ff ff ff       	jmp    100039dd <NiLoadCursors()+0xcf>
10003ada:	83 ec 0c             	sub    esp,0xc
10003add:	53                   	push   ebx
10003ade:	e8 fc ff ff ff       	call   10003adf <NiLoadCursors()+0x1d1>	10003adf: R_386_PC32	free
10003ae3:	83 c4 10             	add    esp,0x10
10003ae6:	83 c4 2c             	add    esp,0x2c
10003ae9:	5b                   	pop    ebx
10003aea:	5e                   	pop    esi
10003aeb:	5f                   	pop    edi
10003aec:	5d                   	pop    ebp
10003aed:	c3                   	ret    

10003aee <NIDesktop::NIDesktop(NIContext*)>:
10003aee:	53                   	push   ebx
10003aef:	83 ec 14             	sub    esp,0x14
10003af2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10003af6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003afa:	c7 43 08 1e 00 00 00 	mov    DWORD PTR [ebx+0x8],0x1e
10003b01:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003b04:	c7 43 0c 1e 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1e
10003b0b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10003b12:	6a 08                	push   0x8
10003b14:	e8 fc ff ff ff       	call   10003b15 <NIDesktop::NIDesktop(NIContext*)+0x27>	10003b15: R_386_PC32	malloc
10003b19:	89 03                	mov    DWORD PTR [ebx],eax
10003b1b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003b22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003b28:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10003b2a: R_386_32	mouseDesktop
10003b2e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003b30: R_386_32	guiMouseHandler
	10003b34: R_386_32	NiHandleMouse(int, int, int, int)
10003b38:	83 c4 18             	add    esp,0x18
10003b3b:	5b                   	pop    ebx
10003b3c:	c3                   	ret    
10003b3d:	90                   	nop

10003b3e <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003b3e:	53                   	push   ebx
10003b3f:	83 ec 08             	sub    esp,0x8
10003b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003b46:	8b 00                	mov    eax,DWORD PTR [eax]
10003b48:	8b 18                	mov    ebx,DWORD PTR [eax]
10003b4a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10003b4e:	74 1d                	je     10003b6d <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2f>
10003b50:	8b 03                	mov    eax,DWORD PTR [ebx]
10003b52:	85 c0                	test   eax,eax
10003b54:	74 12                	je     10003b68 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003b56:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10003b5a:	74 0c                	je     10003b68 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003b5c:	83 ec 0c             	sub    esp,0xc
10003b5f:	50                   	push   eax
10003b60:	e8 fc ff ff ff       	call   10003b61 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x23>	10003b61: R_386_PC32	NIWindow::invalidate()
10003b65:	83 c4 10             	add    esp,0x10
10003b68:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
10003b6b:	eb dd                	jmp    10003b4a <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xc>
10003b6d:	83 c4 08             	add    esp,0x8
10003b70:	5b                   	pop    ebx
10003b71:	c3                   	ret    

10003b72 <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003b72:	57                   	push   edi
10003b73:	56                   	push   esi
10003b74:	53                   	push   ebx
10003b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003b79:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003b7d:	8b 00                	mov    eax,DWORD PTR [eax]
10003b7f:	8b 00                	mov    eax,DWORD PTR [eax]
10003b81:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003b84:	85 db                	test   ebx,ebx
10003b86:	74 43                	je     10003bcb <NIDesktop::getTopmostWindowAtPixel(int, int)+0x59>
10003b88:	8b 00                	mov    eax,DWORD PTR [eax]
10003b8a:	85 c0                	test   eax,eax
10003b8c:	74 3f                	je     10003bcd <NIDesktop::getTopmostWindowAtPixel(int, int)+0x5b>
10003b8e:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10003b91:	39 ca                	cmp    edx,ecx
10003b93:	7e 04                	jle    10003b99 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003b95:	89 d8                	mov    eax,ebx
10003b97:	eb e8                	jmp    10003b81 <NIDesktop::getTopmostWindowAtPixel(int, int)+0xf>
10003b99:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
10003b9c:	01 d6                	add    esi,edx
10003b9e:	39 ce                	cmp    esi,ecx
10003ba0:	7e f3                	jle    10003b95 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003ba2:	89 ce                	mov    esi,ecx
10003ba4:	29 d6                	sub    esi,edx
10003ba6:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10003ba9:	8d 34 b2             	lea    esi,[edx+esi*4]
10003bac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
10003baf:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003bb2:	01 d7                	add    edi,edx
10003bb4:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003bb8:	7f db                	jg     10003b95 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003bba:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
10003bbd:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003bc1:	29 f2                	sub    edx,esi
10003bc3:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003bc7:	7e cc                	jle    10003b95 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003bc9:	eb 02                	jmp    10003bcd <NIDesktop::getTopmostWindowAtPixel(int, int)+0x5b>
10003bcb:	31 c0                	xor    eax,eax
10003bcd:	5b                   	pop    ebx
10003bce:	5e                   	pop    esi
10003bcf:	5f                   	pop    edi
10003bd0:	c3                   	ret    
10003bd1:	90                   	nop

10003bd2 <NIDesktop::renderScanline(int, int, int)>:
10003bd2:	55                   	push   ebp
10003bd3:	57                   	push   edi
10003bd4:	56                   	push   esi
10003bd5:	53                   	push   ebx
10003bd6:	83 ec 2c             	sub    esp,0x2c
10003bd9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10003bdd:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10003be1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003be5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003be9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003bed:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003bef: R_386_32	render
10003bf3:	31 c0                	xor    eax,eax
10003bf5:	89 d7                	mov    edi,edx
10003bf7:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003bf9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003bfd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003c01:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003c03: R_386_32	shadow
10003c07:	b0 80                	mov    al,0x80
10003c09:	89 d7                	mov    edi,edx
10003c0b:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003c0d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003c11:	8b 00                	mov    eax,DWORD PTR [eax]
10003c13:	8b 00                	mov    eax,DWORD PTR [eax]
10003c15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003c19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003c1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003c21:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003c23: R_386_32	movingWin
10003c27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003c2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003c2e:	85 c0                	test   eax,eax
10003c30:	75 09                	jne    10003c3b <NIDesktop::renderScanline(int, int, int)+0x69>
10003c32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003c36:	e9 cf 02 00 00       	jmp    10003f0a <NIDesktop::renderScanline(int, int, int)+0x338>
10003c3b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003c3f:	8b 1f                	mov    ebx,DWORD PTR [edi]
10003c41:	85 db                	test   ebx,ebx
10003c43:	74 ed                	je     10003c32 <NIDesktop::renderScanline(int, int, int)+0x60>
10003c45:	39 da                	cmp    edx,ebx
10003c47:	75 06                	jne    10003c4f <NIDesktop::renderScanline(int, int, int)+0x7d>
10003c49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003c4d:	eb d8                	jmp    10003c27 <NIDesktop::renderScanline(int, int, int)+0x55>
10003c4f:	83 ec 0c             	sub    esp,0xc
10003c52:	53                   	push   ebx
10003c53:	e8 fc ff ff ff       	call   10003c54 <NIDesktop::renderScanline(int, int, int)+0x82>	10003c54: R_386_PC32	NIWindow::request()
10003c58:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003c5b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
10003c5e:	83 c4 10             	add    esp,0x10
10003c61:	01 c2                	add    edx,eax
10003c63:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003c67:	0f 8e ad 00 00 00    	jle    10003d1a <NIDesktop::renderScanline(int, int, int)+0x148>
10003c6d:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003c71:	0f 85 a3 00 00 00    	jne    10003d1a <NIDesktop::renderScanline(int, int, int)+0x148>
10003c77:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003c7b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10003c7e:	83 c0 06             	add    eax,0x6
10003c81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003c85:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
10003c88:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10003c8b:	01 c8                	add    eax,ecx
10003c8d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003c91:	39 d0                	cmp    eax,edx
10003c93:	0f 8e 40 01 00 00    	jle    10003dd9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003c99:	3b 54 24 48          	cmp    edx,DWORD PTR [esp+0x48]
10003c9d:	7c 75                	jl     10003d14 <NIDesktop::renderScanline(int, int, int)+0x142>
10003c9f:	3b 54 24 4c          	cmp    edx,DWORD PTR [esp+0x4c]
10003ca3:	0f 8f 30 01 00 00    	jg     10003dd9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003ca9:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
10003cac:	89 d5                	mov    ebp,edx
10003cae:	6b fe fc             	imul   edi,esi,0xfffffffc
10003cb1:	29 cd                	sub    ebp,ecx
10003cb3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003cb7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
10003cbb:	39 f0                	cmp    eax,esi
10003cbd:	7c 1d                	jl     10003cdc <NIDesktop::renderScanline(int, int, int)+0x10a>
10003cbf:	8d 0c 87             	lea    ecx,[edi+eax*4]
10003cc2:	03 4b 14             	add    ecx,DWORD PTR [ebx+0x14]
10003cc5:	0f b7 29             	movzx  ebp,WORD PTR [ecx]
10003cc8:	3b 6c 24 18          	cmp    ebp,DWORD PTR [esp+0x18]
10003ccc:	7f 0e                	jg     10003cdc <NIDesktop::renderScanline(int, int, int)+0x10a>
10003cce:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
10003cd2:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
10003cd6:	29 cd                	sub    ebp,ecx
10003cd8:	39 d5                	cmp    ebp,edx
10003cda:	7d 07                	jge    10003ce3 <NIDesktop::renderScanline(int, int, int)+0x111>
10003cdc:	40                   	inc    eax
10003cdd:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
10003ce1:	75 d8                	jne    10003cbb <NIDesktop::renderScanline(int, int, int)+0xe9>
10003ce3:	2b 44 24 44          	sub    eax,DWORD PTR [esp+0x44]
10003ce7:	48                   	dec    eax
10003ce8:	83 f8 03             	cmp    eax,0x3
10003ceb:	77 27                	ja     10003d14 <NIDesktop::renderScanline(int, int, int)+0x142>
10003ced:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003cef: R_386_32	render
10003cf4:	75 1e                	jne    10003d14 <NIDesktop::renderScanline(int, int, int)+0x142>
10003cf6:	8d 0c c5 65 00 00 00 	lea    ecx,[eax*8+0x65]
10003cfd:	0f b6 82 00 00 00 00 	movzx  eax,BYTE PTR [edx+0x0]	10003d00: R_386_32	shadow
10003d04:	0f af c1             	imul   eax,ecx
10003d07:	d1 f9                	sar    ecx,1
10003d09:	c1 f8 08             	sar    eax,0x8
10003d0c:	01 c1                	add    ecx,eax
10003d0e:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	10003d10: R_386_32	shadow
10003d14:	42                   	inc    edx
10003d15:	e9 6b ff ff ff       	jmp    10003c85 <NIDesktop::renderScanline(int, int, int)+0xb3>
10003d1a:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003d1e:	0f 8d b5 00 00 00    	jge    10003dd9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d24:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003d28:	0f 85 ab 00 00 00    	jne    10003dd9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d2e:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10003d32:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003d35:	8d 77 fa             	lea    esi,[edi-0x6]
10003d38:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003d3c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
10003d3f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
10003d42:	01 ce                	add    esi,ecx
10003d44:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10003d48:	39 c6                	cmp    esi,eax
10003d4a:	0f 8e 89 00 00 00    	jle    10003dd9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d50:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003d54:	7c 7d                	jl     10003dd3 <NIDesktop::renderScanline(int, int, int)+0x201>
10003d56:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003d5a:	7f 7d                	jg     10003dd9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d5c:	89 c7                	mov    edi,eax
10003d5e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003d62:	29 cf                	sub    edi,ecx
10003d64:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003d68:	4a                   	dec    edx
10003d69:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10003d6d:	29 d1                	sub    ecx,edx
10003d6f:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
10003d73:	74 32                	je     10003da7 <NIDesktop::renderScanline(int, int, int)+0x1d5>
10003d75:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
10003d78:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10003d7b:	8d 2c 37             	lea    ebp,[edi+esi*1]
10003d7e:	39 d5                	cmp    ebp,edx
10003d80:	7e e6                	jle    10003d68 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d82:	89 d5                	mov    ebp,edx
10003d84:	29 fd                	sub    ebp,edi
10003d86:	39 ee                	cmp    esi,ebp
10003d88:	7e 1d                	jle    10003da7 <NIDesktop::renderScanline(int, int, int)+0x1d5>
10003d8a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10003d8d:	8d 34 ae             	lea    esi,[esi+ebp*4]
10003d90:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003d93:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10003d97:	7f cf                	jg     10003d68 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d99:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003d9d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10003da1:	29 f7                	sub    edi,esi
10003da3:	39 c7                	cmp    edi,eax
10003da5:	7c c1                	jl     10003d68 <NIDesktop::renderScanline(int, int, int)+0x196>
10003da7:	83 f9 04             	cmp    ecx,0x4
10003daa:	77 27                	ja     10003dd3 <NIDesktop::renderScanline(int, int, int)+0x201>
10003dac:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003dae: R_386_32	render
10003db3:	75 1e                	jne    10003dd3 <NIDesktop::renderScanline(int, int, int)+0x201>
10003db5:	8d 0c cd 5d 00 00 00 	lea    ecx,[ecx*8+0x5d]
10003dbc:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10003dbf: R_386_32	shadow
10003dc3:	0f af d1             	imul   edx,ecx
10003dc6:	d1 f9                	sar    ecx,1
10003dc8:	c1 fa 08             	sar    edx,0x8
10003dcb:	01 d1                	add    ecx,edx
10003dcd:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	10003dcf: R_386_32	shadow
10003dd3:	40                   	inc    eax
10003dd4:	e9 63 ff ff ff       	jmp    10003d3c <NIDesktop::renderScanline(int, int, int)+0x16a>
10003dd9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003ddc:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003de0:	0f 8f 00 01 00 00    	jg     10003ee6 <NIDesktop::renderScanline(int, int, int)+0x314>
10003de6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
10003de9:	01 c2                	add    edx,eax
10003deb:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003def:	0f 8e f1 00 00 00    	jle    10003ee6 <NIDesktop::renderScanline(int, int, int)+0x314>
10003df5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003df9:	29 c2                	sub    edx,eax
10003dfb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10003dfe:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003e02:	8d 14 90             	lea    edx,[eax+edx*4]
10003e05:	0f b7 02             	movzx  eax,WORD PTR [edx]
10003e08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003e0c:	0f b7 42 02          	movzx  eax,WORD PTR [edx+0x2]
10003e10:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003e14:	74 09                	je     10003e1f <NIDesktop::renderScanline(int, int, int)+0x24d>
10003e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003e1a:	03 43 18             	add    eax,DWORD PTR [ebx+0x18]
10003e1d:	eb 78                	jmp    10003e97 <NIDesktop::renderScanline(int, int, int)+0x2c5>
10003e1f:	31 c9                	xor    ecx,ecx
10003e21:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10003e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003e28:	8d 6c 02 fc          	lea    ebp,[edx+eax*1-0x4]
10003e2c:	03 53 20             	add    edx,DWORD PTR [ebx+0x20]
10003e2f:	01 cd                	add    ebp,ecx
10003e31:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003e35:	01 ca                	add    edx,ecx
10003e37:	80 bd 00 00 00 00 00 	cmp    BYTE PTR [ebp+0x0],0x0	10003e39: R_386_32	render
10003e3e:	75 1f                	jne    10003e5f <NIDesktop::renderScanline(int, int, int)+0x28d>
10003e40:	0f b6 b5 00 00 00 00 	movzx  esi,BYTE PTR [ebp+0x0]	10003e43: R_386_32	shadow
10003e47:	6b f9 f8             	imul   edi,ecx,0xfffffff8
10003e4a:	83 c7 7d             	add    edi,0x7d
10003e4d:	0f af f7             	imul   esi,edi
10003e50:	d1 ff                	sar    edi,1
10003e52:	c1 fe 08             	sar    esi,0x8
10003e55:	01 f7                	add    edi,esi
10003e57:	89 f8                	mov    eax,edi
10003e59:	88 85 00 00 00 00    	mov    BYTE PTR [ebp+0x0],al	10003e5b: R_386_32	shadow
10003e5f:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003e61: R_386_32	render
10003e66:	75 20                	jne    10003e88 <NIDesktop::renderScanline(int, int, int)+0x2b6>
10003e68:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
10003e6f:	0f b6 b2 00 00 00 00 	movzx  esi,BYTE PTR [edx+0x0]	10003e72: R_386_32	shadow
10003e76:	0f af f7             	imul   esi,edi
10003e79:	d1 ff                	sar    edi,1
10003e7b:	c1 fe 08             	sar    esi,0x8
10003e7e:	01 f7                	add    edi,esi
10003e80:	89 f8                	mov    eax,edi
10003e82:	88 82 00 00 00 00    	mov    BYTE PTR [edx+0x0],al	10003e84: R_386_32	shadow
10003e88:	41                   	inc    ecx
10003e89:	83 f9 04             	cmp    ecx,0x4
10003e8c:	75 93                	jne    10003e21 <NIDesktop::renderScanline(int, int, int)+0x24f>
10003e8e:	eb 86                	jmp    10003e16 <NIDesktop::renderScanline(int, int, int)+0x244>
10003e90:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003e94:	7d 11                	jge    10003ea7 <NIDesktop::renderScanline(int, int, int)+0x2d5>
10003e96:	40                   	inc    eax
10003e97:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
10003e9a:	03 53 18             	add    edx,DWORD PTR [ebx+0x18]
10003e9d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003ea1:	39 c2                	cmp    edx,eax
10003ea3:	7f eb                	jg     10003e90 <NIDesktop::renderScanline(int, int, int)+0x2be>
10003ea5:	eb 3f                	jmp    10003ee6 <NIDesktop::renderScanline(int, int, int)+0x314>
10003ea7:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003eab:	7f 39                	jg     10003ee6 <NIDesktop::renderScanline(int, int, int)+0x314>
10003ead:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003eaf: R_386_32	render
10003eb4:	75 e0                	jne    10003e96 <NIDesktop::renderScanline(int, int, int)+0x2c4>
10003eb6:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003eb8: R_386_32	render
10003ebd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003ec1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
10003ec4:	2b 53 1c             	sub    edx,DWORD PTR [ebx+0x1c]
10003ec7:	0f af ca             	imul   ecx,edx
10003eca:	89 c2                	mov    edx,eax
10003ecc:	2b 53 18             	sub    edx,DWORD PTR [ebx+0x18]
10003ecf:	01 ca                	add    edx,ecx
10003ed1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10003ed4:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003ed8:	8b 14 91             	mov    edx,DWORD PTR [ecx+edx*4]
10003edb:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	10003ede: R_386_32	renderData
10003ee2:	75 b2                	jne    10003e96 <NIDesktop::renderScanline(int, int, int)+0x2c4>
10003ee4:	eb 44                	jmp    10003f2a <NIDesktop::renderScanline(int, int, int)+0x358>
10003ee6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003eea:	0f 85 42 fd ff ff    	jne    10003c32 <NIDesktop::renderScanline(int, int, int)+0x60>
10003ef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003ef4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003ef7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003efb:	e9 21 fd ff ff       	jmp    10003c21 <NIDesktop::renderScanline(int, int, int)+0x4f>
10003f00:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003f02: R_386_32	render
10003f07:	74 09                	je     10003f12 <NIDesktop::renderScanline(int, int, int)+0x340>
10003f09:	40                   	inc    eax
10003f0a:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003f0e:	7c f0                	jl     10003f00 <NIDesktop::renderScanline(int, int, int)+0x32e>
10003f10:	eb 18                	jmp    10003f2a <NIDesktop::renderScanline(int, int, int)+0x358>
10003f12:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003f14: R_386_32	render
10003f19:	c7 04 85 00 00 00 00 ff 80 55 00 	mov    DWORD PTR [eax*4+0x0],0x5580ff	10003f1c: R_386_32	renderData
10003f24:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003f28:	75 df                	jne    10003f09 <NIDesktop::renderScanline(int, int, int)+0x337>
10003f2a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003f2e:	8b 00                	mov    eax,DWORD PTR [eax]
10003f30:	8b 00                	mov    eax,DWORD PTR [eax]
10003f32:	85 c0                	test   eax,eax
10003f34:	74 5e                	je     10003f94 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f36:	8b 00                	mov    eax,DWORD PTR [eax]
10003f38:	85 c0                	test   eax,eax
10003f3a:	74 58                	je     10003f94 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f3c:	80 78 28 00          	cmp    BYTE PTR [eax+0x28],0x0
10003f40:	75 52                	jne    10003f94 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f42:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10003f46:	3b 5c 24 4c          	cmp    ebx,DWORD PTR [esp+0x4c]
10003f4a:	7d 48                	jge    10003f94 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f4c:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	10003f4e: R_386_32	shadow
10003f52:	3c 80                	cmp    al,0x80
10003f54:	74 3b                	je     10003f91 <NIDesktop::renderScanline(int, int, int)+0x3bf>
10003f56:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	10003f59: R_386_32	renderData
10003f5d:	0f b6 f0             	movzx  esi,al
10003f60:	89 d1                	mov    ecx,edx
10003f62:	0f b6 c6             	movzx  eax,dh
10003f65:	c1 e9 10             	shr    ecx,0x10
10003f68:	0f af c6             	imul   eax,esi
10003f6b:	0f b6 c9             	movzx  ecx,cl
10003f6e:	0f b6 d2             	movzx  edx,dl
10003f71:	0f af ce             	imul   ecx,esi
10003f74:	0f af d6             	imul   edx,esi
10003f77:	c1 e9 07             	shr    ecx,0x7
10003f7a:	c1 e8 07             	shr    eax,0x7
10003f7d:	c1 e1 10             	shl    ecx,0x10
10003f80:	c1 e0 08             	shl    eax,0x8
10003f83:	c1 ea 07             	shr    edx,0x7
10003f86:	09 c1                	or     ecx,eax
10003f88:	09 ca                	or     edx,ecx
10003f8a:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	10003f8d: R_386_32	renderData
10003f91:	43                   	inc    ebx
10003f92:	eb b2                	jmp    10003f46 <NIDesktop::renderScanline(int, int, int)+0x374>
10003f94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003f98:	83 ec 0c             	sub    esp,0xc
10003f9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003f9e:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003fa4:	8b 10                	mov    edx,DWORD PTR [eax]
10003fa6:	68 00 00 00 00       	push   0x0	10003fa7: R_386_32	renderData
10003fab:	6a 00                	push   0x0
10003fad:	6a 01                	push   0x1
10003faf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10003fb3:	6a 00                	push   0x0
10003fb5:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10003fb9:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10003fbd:	ff 74 24 70          	push   DWORD PTR [esp+0x70]
10003fc1:	50                   	push   eax
10003fc2:	ff 52 38             	call   DWORD PTR [edx+0x38]
10003fc5:	83 c4 5c             	add    esp,0x5c
10003fc8:	5b                   	pop    ebx
10003fc9:	5e                   	pop    esi
10003fca:	5f                   	pop    edi
10003fcb:	5d                   	pop    ebp
10003fcc:	c3                   	ret    
10003fcd:	90                   	nop

10003fce <NIDesktop::rangeRefresh(int, int, int, int)>:
10003fce:	53                   	push   ebx
10003fcf:	83 ec 08             	sub    esp,0x8
10003fd2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10003fd6:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
10003fda:	7d 18                	jge    10003ff4 <NIDesktop::rangeRefresh(int, int, int, int)+0x26>
10003fdc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003fe0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003fe4:	53                   	push   ebx
10003fe5:	43                   	inc    ebx
10003fe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003fea:	e8 fc ff ff ff       	call   10003feb <NIDesktop::rangeRefresh(int, int, int, int)+0x1d>	10003feb: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10003fef:	83 c4 10             	add    esp,0x10
10003ff2:	eb e2                	jmp    10003fd6 <NIDesktop::rangeRefresh(int, int, int, int)+0x8>
10003ff4:	83 c4 08             	add    esp,0x8
10003ff7:	5b                   	pop    ebx
10003ff8:	c3                   	ret    
10003ff9:	90                   	nop

10003ffa <NIDesktop::refreshWindowBounds(NIWindow*)>:
10003ffa:	55                   	push   ebp
10003ffb:	ba 05 00 00 00       	mov    edx,0x5
10004000:	57                   	push   edi
10004001:	56                   	push   esi
10004002:	53                   	push   ebx
10004003:	83 ec 0c             	sub    esp,0xc
10004006:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
1000400a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
1000400d:	83 f8 05             	cmp    eax,0x5
10004010:	7c 02                	jl     10004014 <NIDesktop::refreshWindowBounds(NIWindow*)+0x1a>
10004012:	89 c2                	mov    edx,eax
10004014:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10004018:	03 43 24             	add    eax,DWORD PTR [ebx+0x24]
1000401b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
1000401e:	83 ea 05             	sub    edx,0x5
10004021:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
10004027:	8d 70 05             	lea    esi,[eax+0x5]
1000402a:	8d 69 fb             	lea    ebp,[ecx-0x5]
1000402d:	39 c5                	cmp    ebp,eax
1000402f:	7f 03                	jg     10004034 <NIDesktop::refreshWindowBounds(NIWindow*)+0x3a>
10004031:	8d 71 ff             	lea    esi,[ecx-0x1]
10004034:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10004037:	89 c1                	mov    ecx,eax
10004039:	83 f8 05             	cmp    eax,0x5
1000403c:	7d 05                	jge    10004043 <NIDesktop::refreshWindowBounds(NIWindow*)+0x49>
1000403e:	b9 05 00 00 00       	mov    ecx,0x5
10004043:	03 43 20             	add    eax,DWORD PTR [ebx+0x20]
10004046:	83 e9 05             	sub    ecx,0x5
10004049:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
1000404f:	8d 58 05             	lea    ebx,[eax+0x5]
10004052:	8d 6f fb             	lea    ebp,[edi-0x5]
10004055:	39 c5                	cmp    ebp,eax
10004057:	7f 03                	jg     1000405c <NIDesktop::refreshWindowBounds(NIWindow*)+0x62>
10004059:	8d 5f ff             	lea    ebx,[edi-0x1]
1000405c:	83 ec 0c             	sub    esp,0xc
1000405f:	53                   	push   ebx
10004060:	51                   	push   ecx
10004061:	56                   	push   esi
10004062:	52                   	push   edx
10004063:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10004067:	e8 fc ff ff ff       	call   10004068 <NIDesktop::refreshWindowBounds(NIWindow*)+0x6e>	10004068: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000406c:	83 c4 2c             	add    esp,0x2c
1000406f:	5b                   	pop    ebx
10004070:	5e                   	pop    esi
10004071:	5f                   	pop    edi
10004072:	5d                   	pop    ebp
10004073:	c3                   	ret    

10004074 <NIDesktop::completeRefresh()>:
10004074:	56                   	push   esi
10004075:	53                   	push   ebx
10004076:	31 f6                	xor    esi,esi
10004078:	50                   	push   eax
10004079:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000407d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004080:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
10004086:	7e 15                	jle    1000409d <NIDesktop::completeRefresh()+0x29>
10004088:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
1000408e:	6a 00                	push   0x0
10004090:	56                   	push   esi
10004091:	46                   	inc    esi
10004092:	53                   	push   ebx
10004093:	e8 fc ff ff ff       	call   10004094 <NIDesktop::completeRefresh()+0x20>	10004094: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10004098:	83 c4 10             	add    esp,0x10
1000409b:	eb e0                	jmp    1000407d <NIDesktop::completeRefresh()+0x9>
1000409d:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
100040a3:	83 ec 0c             	sub    esp,0xc
100040a6:	8b 0a                	mov    ecx,DWORD PTR [edx]
100040a8:	6a 00                	push   0x0
100040aa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
100040ad:	05 00 00 00 00       	add    eax,0x0	100040ae: R_386_32	___mouse_data
100040b2:	50                   	push   eax
100040b3:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100040b6:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100040b9:	52                   	push   edx
100040ba:	ff 51 30             	call   DWORD PTR [ecx+0x30]
100040bd:	83 c4 24             	add    esp,0x24
100040c0:	5b                   	pop    ebx
100040c1:	5e                   	pop    esi
100040c2:	c3                   	ret    
100040c3:	90                   	nop

100040c4 <NIDesktop::addWindow(NIWindow*)>:
100040c4:	56                   	push   esi
100040c5:	53                   	push   ebx
100040c6:	83 ec 0c             	sub    esp,0xc
100040c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100040cd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
100040d1:	56                   	push   esi
100040d2:	ff 33                	push   DWORD PTR [ebx]
100040d4:	e8 fc ff ff ff       	call   100040d5 <NIDesktop::addWindow(NIWindow*)+0x11>	100040d5: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100040d9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100040dd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100040e1:	83 c4 14             	add    esp,0x14
100040e4:	5b                   	pop    ebx
100040e5:	5e                   	pop    esi
100040e6:	e9 0f ff ff ff       	jmp    10003ffa <NIDesktop::refreshWindowBounds(NIWindow*)>
100040eb:	90                   	nop

100040ec <NIDesktop::raiseWindow(NIWindow*)>:
100040ec:	53                   	push   ebx
100040ed:	83 ec 10             	sub    esp,0x10
100040f0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100040f4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100040f8:	50                   	push   eax
100040f9:	ff 33                	push   DWORD PTR [ebx]
100040fb:	e8 fc ff ff ff       	call   100040fc <NIDesktop::raiseWindow(NIWindow*)+0x10>	100040fc: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
10004100:	58                   	pop    eax
10004101:	5a                   	pop    edx
10004102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004106:	ff 33                	push   DWORD PTR [ebx]
10004108:	e8 fc ff ff ff       	call   10004109 <NIDesktop::raiseWindow(NIWindow*)+0x1d>	10004109: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
1000410d:	59                   	pop    ecx
1000410e:	58                   	pop    eax
1000410f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004113:	53                   	push   ebx
10004114:	e8 fc ff ff ff       	call   10004115 <NIDesktop::raiseWindow(NIWindow*)+0x29>	10004115: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004119:	83 c4 18             	add    esp,0x18
1000411c:	5b                   	pop    ebx
1000411d:	c3                   	ret    

1000411e <NIDesktop::deleteWindow(NIWindow*)>:
1000411e:	53                   	push   ebx
1000411f:	83 ec 10             	sub    esp,0x10
10004122:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004126:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000412a:	50                   	push   eax
1000412b:	ff 33                	push   DWORD PTR [ebx]
1000412d:	e8 fc ff ff ff       	call   1000412e <NIDesktop::deleteWindow(NIWindow*)+0x10>	1000412e: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
10004132:	58                   	pop    eax
10004133:	5a                   	pop    edx
10004134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004138:	53                   	push   ebx
10004139:	e8 fc ff ff ff       	call   1000413a <NIDesktop::deleteWindow(NIWindow*)+0x1c>	1000413a: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
1000413e:	83 c4 18             	add    esp,0x18
10004141:	5b                   	pop    ebx
10004142:	c3                   	ret    
10004143:	90                   	nop

10004144 <NIDesktop::handleMouse(int, int, int, int)>:
10004144:	55                   	push   ebp
10004145:	57                   	push   edi
10004146:	56                   	push   esi
10004147:	53                   	push   ebx
10004148:	83 ec 38             	sub    esp,0x38
1000414b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000414f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004152:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004155:	8d 4a 20             	lea    ecx,[edx+0x20]
10004158:	51                   	push   ecx
10004159:	52                   	push   edx
1000415a:	8d 50 20             	lea    edx,[eax+0x20]
1000415d:	52                   	push   edx
1000415e:	50                   	push   eax
1000415f:	53                   	push   ebx
10004160:	e8 fc ff ff ff       	call   10004161 <NIDesktop::handleMouse(int, int, int, int)+0x1d>	10004161: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004165:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000416c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000416f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10004173:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10004177:	03 54 24 64          	add    edx,DWORD PTR [esp+0x64]
1000417b:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
1000417f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
10004182:	83 c4 20             	add    esp,0x20
10004185:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10004188:	85 d2                	test   edx,edx
1000418a:	79 07                	jns    10004193 <NIDesktop::handleMouse(int, int, int, int)+0x4f>
1000418c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10004193:	85 c0                	test   eax,eax
10004195:	79 07                	jns    1000419e <NIDesktop::handleMouse(int, int, int, int)+0x5a>
10004197:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
1000419e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100041a1:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
100041a7:	3b 43 08             	cmp    eax,DWORD PTR [ebx+0x8]
100041aa:	7f 04                	jg     100041b0 <NIDesktop::handleMouse(int, int, int, int)+0x6c>
100041ac:	48                   	dec    eax
100041ad:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
100041b0:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
100041b6:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
100041b9:	7f 04                	jg     100041bf <NIDesktop::handleMouse(int, int, int, int)+0x7b>
100041bb:	48                   	dec    eax
100041bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
100041bf:	50                   	push   eax
100041c0:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100041c3:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100041c6:	53                   	push   ebx
100041c7:	e8 fc ff ff ff       	call   100041c8 <NIDesktop::handleMouse(int, int, int, int)+0x84>	100041c8: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
100041cc:	83 c4 10             	add    esp,0x10
100041cf:	89 c6                	mov    esi,eax
100041d1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100041d5:	83 e0 01             	and    eax,0x1
100041d8:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100041da: R_386_32	movingWin
100041df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100041e3:	0f 84 f0 01 00 00    	je     100043d9 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100041e9:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	100041eb: R_386_32	movingType
100041f0:	0f 85 e3 01 00 00    	jne    100043d9 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100041f6:	c6 04 24 00          	mov    BYTE PTR [esp],0x0
100041fa:	85 c0                	test   eax,eax
100041fc:	75 0b                	jne    10004209 <NIDesktop::handleMouse(int, int, int, int)+0xc5>
100041fe:	a0 38 88 03 10       	mov    al,ds:0x10038838	100041ff: R_386_32	.bss
10004203:	83 e0 01             	and    eax,0x1
10004206:	88 04 24             	mov    BYTE PTR [esp],al
10004209:	bd 01 00 00 00       	mov    ebp,0x1
1000420e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000420f: R_386_32	movingWin
10004213:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
10004216:	8d 51 ff             	lea    edx,[ecx-0x1]
10004219:	39 ea                	cmp    edx,ebp
1000421b:	0f 8e b1 00 00 00    	jle    100042d2 <NIDesktop::handleMouse(int, int, int, int)+0x18e>
10004221:	bf 01 00 00 00       	mov    edi,0x1
10004226:	a1 00 00 00 00       	mov    eax,ds:0x0	10004227: R_386_32	movingWin
1000422b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
1000422e:	48                   	dec    eax
1000422f:	39 f8                	cmp    eax,edi
10004231:	0f 8e 95 00 00 00    	jle    100042cc <NIDesktop::handleMouse(int, int, int, int)+0x188>
10004237:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
1000423b:	89 ea                	mov    edx,ebp
1000423d:	83 e0 1f             	and    eax,0x1f
10004240:	83 e2 03             	and    edx,0x3
10004243:	09 d0                	or     eax,edx
10004245:	75 7f                	jne    100042c6 <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004247:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000424b:	2b 05 34 88 03 10    	sub    eax,DWORD PTR ds:0x10038834	1000424d: R_386_32	.bss
10004251:	01 f8                	add    eax,edi
10004253:	78 2d                	js     10004282 <NIDesktop::handleMouse(int, int, int, int)+0x13e>
10004255:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004258:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
1000425e:	7d 22                	jge    10004282 <NIDesktop::handleMouse(int, int, int, int)+0x13e>
10004260:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10004264:	8d 48 01             	lea    ecx,[eax+0x1]
10004267:	83 ec 0c             	sub    esp,0xc
1000426a:	2b 15 30 88 03 10    	sub    edx,DWORD PTR ds:0x10038830	1000426c: R_386_32	.bss
10004270:	51                   	push   ecx
10004271:	01 ea                	add    edx,ebp
10004273:	50                   	push   eax
10004274:	8d 42 01             	lea    eax,[edx+0x1]
10004277:	50                   	push   eax
10004278:	52                   	push   edx
10004279:	53                   	push   ebx
1000427a:	e8 fc ff ff ff       	call   1000427b <NIDesktop::handleMouse(int, int, int, int)+0x137>	1000427b: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000427f:	83 c4 20             	add    esp,0x20
10004282:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
10004286:	75 3e                	jne    100042c6 <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004288:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
1000428b:	01 f8                	add    eax,edi
1000428d:	2b 05 34 88 03 10    	sub    eax,DWORD PTR ds:0x10038834	1000428f: R_386_32	.bss
10004293:	78 31                	js     100042c6 <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004295:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004298:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
1000429e:	7d 26                	jge    100042c6 <NIDesktop::handleMouse(int, int, int, int)+0x182>
100042a0:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
100042a6:	8b 11                	mov    edx,DWORD PTR [ecx]
100042a8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
100042ac:	6a 00                	push   0x0
100042ae:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100042b1:	01 ea                	add    edx,ebp
100042b3:	2b 15 30 88 03 10    	sub    edx,DWORD PTR ds:0x10038830	100042b5: R_386_32	.bss
100042b9:	52                   	push   edx
100042ba:	50                   	push   eax
100042bb:	51                   	push   ecx
100042bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100042c0:	ff 50 24             	call   DWORD PTR [eax+0x24]
100042c3:	83 c4 10             	add    esp,0x10
100042c6:	47                   	inc    edi
100042c7:	e9 5a ff ff ff       	jmp    10004226 <NIDesktop::handleMouse(int, int, int, int)+0xe2>
100042cc:	45                   	inc    ebp
100042cd:	e9 3c ff ff ff       	jmp    1000420e <NIDesktop::handleMouse(int, int, int, int)+0xca>
100042d2:	8b 15 34 88 03 10    	mov    edx,DWORD PTR ds:0x10038834	100042d4: R_386_32	.bss
100042d8:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
100042db:	29 d7                	sub    edi,edx
100042dd:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
100042e1:	0f 85 86 05 00 00    	jne    1000486d <NIDesktop::handleMouse(int, int, int, int)+0x729>
100042e7:	89 3c 24             	mov    DWORD PTR [esp],edi
100042ea:	85 ff                	test   edi,edi
100042ec:	79 07                	jns    100042f5 <NIDesktop::handleMouse(int, int, int, int)+0x1b1>
100042ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100042f5:	8b 68 20             	mov    ebp,DWORD PTR [eax+0x20]
100042f8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100042fb:	01 ef                	add    edi,ebp
100042fd:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
10004303:	39 c7                	cmp    edi,eax
10004305:	7d 05                	jge    1000430c <NIDesktop::handleMouse(int, int, int, int)+0x1c8>
10004307:	2b 3c 24             	sub    edi,DWORD PTR [esp]
1000430a:	eb 0b                	jmp    10004317 <NIDesktop::handleMouse(int, int, int, int)+0x1d3>
1000430c:	89 c7                	mov    edi,eax
1000430e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
10004311:	0f 88 c2 00 00 00    	js     100043d9 <NIDesktop::handleMouse(int, int, int, int)+0x295>
10004317:	85 ff                	test   edi,edi
10004319:	0f 84 ba 00 00 00    	je     100043d9 <NIDesktop::handleMouse(int, int, int, int)+0x295>
1000431f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004323:	29 d1                	sub    ecx,edx
10004325:	89 ca                	mov    edx,ecx
10004327:	79 02                	jns    1000432b <NIDesktop::handleMouse(int, int, int, int)+0x1e7>
10004329:	31 d2                	xor    edx,edx
1000432b:	01 cd                	add    ebp,ecx
1000432d:	39 e8                	cmp    eax,ebp
1000432f:	7e 04                	jle    10004335 <NIDesktop::handleMouse(int, int, int, int)+0x1f1>
10004331:	29 d5                	sub    ebp,edx
10004333:	eb 08                	jmp    1000433d <NIDesktop::handleMouse(int, int, int, int)+0x1f9>
10004335:	29 d0                	sub    eax,edx
10004337:	89 c5                	mov    ebp,eax
10004339:	79 02                	jns    1000433d <NIDesktop::handleMouse(int, int, int, int)+0x1f9>
1000433b:	31 ed                	xor    ebp,ebp
1000433d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004341:	01 d5                	add    ebp,edx
10004343:	83 ec 0c             	sub    esp,0xc
10004346:	2b 05 30 88 03 10    	sub    eax,DWORD PTR ds:0x10038830	10004348: R_386_32	.bss
1000434c:	55                   	push   ebp
1000434d:	8d 48 01             	lea    ecx,[eax+0x1]
10004350:	52                   	push   edx
10004351:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
10004355:	51                   	push   ecx
10004356:	50                   	push   eax
10004357:	53                   	push   ebx
10004358:	e8 fc ff ff ff       	call   10004359 <NIDesktop::handleMouse(int, int, int, int)+0x215>	10004359: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000435d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004361:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004363: R_386_32	movingWin
10004367:	83 c4 14             	add    esp,0x14
1000436a:	2b 05 30 88 03 10    	sub    eax,DWORD PTR ds:0x10038830	1000436c: R_386_32	.bss
10004370:	03 41 24             	add    eax,DWORD PTR [ecx+0x24]
10004373:	55                   	push   ebp
10004374:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10004378:	52                   	push   edx
10004379:	50                   	push   eax
1000437a:	48                   	dec    eax
1000437b:	50                   	push   eax
1000437c:	53                   	push   ebx
1000437d:	e8 fc ff ff ff       	call   1000437e <NIDesktop::handleMouse(int, int, int, int)+0x23a>	1000437e: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004382:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004385:	83 c4 18             	add    esp,0x18
10004388:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
1000438e:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004390:	6a 00                	push   0x0
10004392:	6a 01                	push   0x1
10004394:	57                   	push   edi
10004395:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004398:	2b 05 30 88 03 10    	sub    eax,DWORD PTR ds:0x10038830	1000439a: R_386_32	.bss
1000439e:	50                   	push   eax
1000439f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100043a3:	52                   	push   edx
100043a4:	ff 51 28             	call   DWORD PTR [ecx+0x28]
100043a7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100043aa:	83 c4 18             	add    esp,0x18
100043ad:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
100043b3:	8b 0a                	mov    ecx,DWORD PTR [edx]
100043b5:	6a 00                	push   0x0
100043b7:	6a 01                	push   0x1
100043b9:	57                   	push   edi
100043ba:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	100043bc: R_386_32	movingWin
100043c0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
100043c3:	2b 05 30 88 03 10    	sub    eax,DWORD PTR ds:0x10038830	100043c5: R_386_32	.bss
100043c9:	03 47 24             	add    eax,DWORD PTR [edi+0x24]
100043cc:	48                   	dec    eax
100043cd:	50                   	push   eax
100043ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100043d2:	52                   	push   edx
100043d3:	ff 51 28             	call   DWORD PTR [ecx+0x28]
100043d6:	83 c4 20             	add    esp,0x20
100043d9:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100043db: R_386_32	movingWin
100043df:	85 d2                	test   edx,edx
100043e1:	0f 84 05 02 00 00    	je     100045ec <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
100043e7:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100043e9: R_386_32	movingType
100043ed:	8d 41 fe             	lea    eax,[ecx-0x2]
100043f0:	83 f8 02             	cmp    eax,0x2
100043f3:	0f 87 f3 01 00 00    	ja     100045ec <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
100043f9:	c6 44 24 10 00       	mov    BYTE PTR [esp+0x10],0x0
100043fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10004403:	75 0c                	jne    10004411 <NIDesktop::handleMouse(int, int, int, int)+0x2cd>
10004405:	a0 38 88 03 10       	mov    al,ds:0x10038838	10004406: R_386_32	.bss
1000440a:	83 e0 01             	and    eax,0x1
1000440d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
10004411:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
10004414:	8b 2d 34 88 03 10    	mov    ebp,DWORD PTR ds:0x10038834	10004416: R_386_32	.bss
1000441a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
1000441e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
10004421:	01 c7                	add    edi,eax
10004423:	29 ef                	sub    edi,ebp
10004425:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10004429:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
1000442d:	01 d7                	add    edi,edx
1000442f:	2b 3d 30 88 03 10    	sub    edi,DWORD PTR ds:0x10038830	10004431: R_386_32	.bss
10004435:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10004439:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
1000443c:	01 c7                	add    edi,eax
1000443e:	29 ef                	sub    edi,ebp
10004440:	89 fd                	mov    ebp,edi
10004442:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
10004445:	01 d7                	add    edi,edx
10004447:	2b 3d 30 88 03 10    	sub    edi,DWORD PTR ds:0x10038830	10004449: R_386_32	.bss
1000444d:	83 f9 03             	cmp    ecx,0x3
10004450:	89 3c 24             	mov    DWORD PTR [esp],edi
10004453:	74 0e                	je     10004463 <NIDesktop::handleMouse(int, int, int, int)+0x31f>
10004455:	83 f9 04             	cmp    ecx,0x4
10004458:	75 0f                	jne    10004469 <NIDesktop::handleMouse(int, int, int, int)+0x325>
1000445a:	89 14 24             	mov    DWORD PTR [esp],edx
1000445d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10004461:	eb 06                	jmp    10004469 <NIDesktop::handleMouse(int, int, int, int)+0x325>
10004463:	89 c5                	mov    ebp,eax
10004465:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004469:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000446d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004471:	39 e8                	cmp    eax,ebp
10004473:	7d 04                	jge    10004479 <NIDesktop::handleMouse(int, int, int, int)+0x335>
10004475:	89 6c 24 14          	mov    DWORD PTR [esp+0x14],ebp
10004479:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000447d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004481:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004484:	7d 07                	jge    1000448d <NIDesktop::handleMouse(int, int, int, int)+0x349>
10004486:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004489:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000448d:	bf 01 00 00 00       	mov    edi,0x1
10004492:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10004496:	0f 8d ab 00 00 00    	jge    10004547 <NIDesktop::handleMouse(int, int, int, int)+0x403>
1000449c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
100044a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100044a8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
100044ac:	0f 8d 8f 00 00 00    	jge    10004541 <NIDesktop::handleMouse(int, int, int, int)+0x3fd>
100044b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100044b6:	89 fa                	mov    edx,edi
100044b8:	01 f8                	add    eax,edi
100044ba:	83 e2 03             	and    edx,0x3
100044bd:	83 e0 1f             	and    eax,0x1f
100044c0:	09 d0                	or     eax,edx
100044c2:	75 74                	jne    10004538 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
100044c4:	83 ec 0c             	sub    esp,0xc
100044c7:	a1 00 00 00 00       	mov    eax,ds:0x0	100044c8: R_386_32	movingWin
100044cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100044d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
100044d3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
100044d6:	8d 4c 0a 01          	lea    ecx,[edx+ecx*1+0x1]
100044da:	51                   	push   ecx
100044db:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
100044df:	52                   	push   edx
100044e0:	8d 54 38 01          	lea    edx,[eax+edi*1+0x1]
100044e4:	01 f8                	add    eax,edi
100044e6:	52                   	push   edx
100044e7:	50                   	push   eax
100044e8:	53                   	push   ebx
100044e9:	e8 fc ff ff ff       	call   100044ea <NIDesktop::handleMouse(int, int, int, int)+0x3a6>	100044ea: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100044ee:	8a 54 24 30          	mov    dl,BYTE PTR [esp+0x30]
100044f2:	83 c4 20             	add    esp,0x20
100044f5:	83 f2 01             	xor    edx,0x1
100044f8:	39 3c 24             	cmp    DWORD PTR [esp],edi
100044fb:	0f 9f c0             	setg   al
100044fe:	84 c2                	test   dl,al
10004500:	74 36                	je     10004538 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
10004502:	39 6c 24 04          	cmp    DWORD PTR [esp+0x4],ebp
10004506:	7d 30                	jge    10004538 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
10004508:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000450b:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004511:	8b 08                	mov    ecx,DWORD PTR [eax]
10004513:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10004517:	6a 00                	push   0x0
10004519:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000451b: R_386_32	movingWin
1000451f:	8b 51 1c             	mov    edx,DWORD PTR [ecx+0x1c]
10004522:	01 fa                	add    edx,edi
10004524:	52                   	push   edx
10004525:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10004529:	03 51 18             	add    edx,DWORD PTR [ecx+0x18]
1000452c:	52                   	push   edx
1000452d:	50                   	push   eax
1000452e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10004532:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004535:	83 c4 10             	add    esp,0x10
10004538:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
1000453c:	e9 63 ff ff ff       	jmp    100044a4 <NIDesktop::handleMouse(int, int, int, int)+0x360>
10004541:	47                   	inc    edi
10004542:	e9 4b ff ff ff       	jmp    10004492 <NIDesktop::handleMouse(int, int, int, int)+0x34e>
10004547:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	10004549: R_386_32	movingWin
1000454d:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
10004552:	0f 85 d8 02 00 00    	jne    10004830 <NIDesktop::handleMouse(int, int, int, int)+0x6ec>
10004558:	8b 57 18             	mov    edx,DWORD PTR [edi+0x18]
1000455b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
1000455e:	83 ec 0c             	sub    esp,0xc
10004561:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004565:	01 d1                	add    ecx,edx
10004567:	51                   	push   ecx
10004568:	52                   	push   edx
10004569:	8d 50 01             	lea    edx,[eax+0x1]
1000456c:	52                   	push   edx
1000456d:	50                   	push   eax
1000456e:	53                   	push   ebx
1000456f:	e8 fc ff ff ff       	call   10004570 <NIDesktop::handleMouse(int, int, int, int)+0x42c>	10004570: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004574:	83 c4 18             	add    esp,0x18
10004577:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000457a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000457c: R_386_32	movingWin
10004580:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004586:	8b 08                	mov    ecx,DWORD PTR [eax]
10004588:	6a 00                	push   0x0
1000458a:	6a 01                	push   0x1
1000458c:	55                   	push   ebp
1000458d:	ff 72 1c             	push   DWORD PTR [edx+0x1c]
10004590:	ff 72 18             	push   DWORD PTR [edx+0x18]
10004593:	50                   	push   eax
10004594:	ff 51 28             	call   DWORD PTR [ecx+0x28]
10004597:	83 c4 14             	add    esp,0x14
1000459a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000459b: R_386_32	movingWin
1000459f:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
100045a2:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
100045a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100045a9:	01 c8                	add    eax,ecx
100045ab:	50                   	push   eax
100045ac:	51                   	push   ecx
100045ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100045b1:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
100045b5:	50                   	push   eax
100045b6:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100045ba:	52                   	push   edx
100045bb:	53                   	push   ebx
100045bc:	e8 fc ff ff ff       	call   100045bd <NIDesktop::handleMouse(int, int, int, int)+0x479>	100045bd: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100045c1:	83 c4 18             	add    esp,0x18
100045c4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100045c7:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100045c9: R_386_32	movingWin
100045cd:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100045d3:	8b 08                	mov    ecx,DWORD PTR [eax]
100045d5:	6a 00                	push   0x0
100045d7:	6a 01                	push   0x1
100045d9:	55                   	push   ebp
100045da:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
100045de:	03 7a 1c             	add    edi,DWORD PTR [edx+0x1c]
100045e1:	57                   	push   edi
100045e2:	ff 72 18             	push   DWORD PTR [edx+0x18]
100045e5:	50                   	push   eax
100045e6:	ff 51 28             	call   DWORD PTR [ecx+0x28]
100045e9:	83 c4 20             	add    esp,0x20
100045ec:	85 f6                	test   esi,esi
100045ee:	0f 84 08 02 00 00    	je     100047fc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100045f4:	f6 44 24 4c 01       	test   BYTE PTR [esp+0x4c],0x1
100045f9:	0f 84 fd 01 00 00    	je     100047fc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100045ff:	8b 0d 38 88 03 10    	mov    ecx,DWORD PTR ds:0x10038838	10004601: R_386_32	.bss
10004605:	83 e1 01             	and    ecx,0x1
10004608:	0f 85 ea 00 00 00    	jne    100046f8 <NIDesktop::handleMouse(int, int, int, int)+0x5b4>
1000460e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000460f: R_386_32	milliTenthsSinceBoot
10004613:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10004615: R_386_32	milliTenthsSinceBoot
10004619:	2b 05 28 88 03 10    	sub    eax,DWORD PTR ds:0x10038828	1000461b: R_386_32	.bss
1000461f:	bf b7 0b 00 00       	mov    edi,0xbb7
10004624:	1b 15 2c 88 03 10    	sbb    edx,DWORD PTR ds:0x1003882c	10004626: R_386_32	.bss
1000462a:	39 c7                	cmp    edi,eax
1000462c:	19 d1                	sbb    ecx,edx
1000462e:	0f 82 95 00 00 00    	jb     100046c9 <NIDesktop::handleMouse(int, int, int, int)+0x585>
10004634:	8b 56 1c             	mov    edx,DWORD PTR [esi+0x1c]
10004637:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000463a:	29 d0                	sub    eax,edx
1000463c:	83 f8 18             	cmp    eax,0x18
1000463f:	0f 8f 84 00 00 00    	jg     100046c9 <NIDesktop::handleMouse(int, int, int, int)+0x585>
10004645:	f6 46 3c 01          	test   BYTE PTR [esi+0x3c],0x1
10004649:	75 7e                	jne    100046c9 <NIDesktop::handleMouse(int, int, int, int)+0x585>
1000464b:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
1000464f:	74 26                	je     10004677 <NIDesktop::handleMouse(int, int, int, int)+0x533>
10004651:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
10004654:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
10004657:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
1000465a:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
1000465d:	8b 46 34             	mov    eax,DWORD PTR [esi+0x34]
10004660:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
10004663:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
10004666:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
10004669:	50                   	push   eax
1000466a:	50                   	push   eax
1000466b:	56                   	push   esi
1000466c:	53                   	push   ebx
1000466d:	e8 fc ff ff ff       	call   1000466e <NIDesktop::handleMouse(int, int, int, int)+0x52a>	1000466e: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
10004672:	83 c4 10             	add    esp,0x10
10004675:	eb 3b                	jmp    100046b2 <NIDesktop::handleMouse(int, int, int, int)+0x56e>
10004677:	89 56 30             	mov    DWORD PTR [esi+0x30],edx
1000467a:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
10004681:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10004684:	c7 46 18 00 00 00 00 	mov    DWORD PTR [esi+0x18],0x0
1000468b:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
1000468e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
10004691:	89 46 34             	mov    DWORD PTR [esi+0x34],eax
10004694:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
10004697:	89 46 38             	mov    DWORD PTR [esi+0x38],eax
1000469a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000469d:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
100046a3:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
100046a6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100046a9:	8b 80 10 04 00 00    	mov    eax,DWORD PTR [eax+0x410]
100046af:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
100046b2:	83 ec 0c             	sub    esp,0xc
100046b5:	80 76 28 01          	xor    BYTE PTR [esi+0x28],0x1
100046b9:	56                   	push   esi
100046ba:	e8 fc ff ff ff       	call   100046bb <NIDesktop::handleMouse(int, int, int, int)+0x577>	100046bb: R_386_PC32	NIWindow::rerender()
100046bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
100046c2:	e8 fc ff ff ff       	call   100046c3 <NIDesktop::handleMouse(int, int, int, int)+0x57f>	100046c3: R_386_PC32	NIDesktop::completeRefresh()
100046c7:	eb 11                	jmp    100046da <NIDesktop::handleMouse(int, int, int, int)+0x596>
100046c9:	8b 03                	mov    eax,DWORD PTR [ebx]
100046cb:	8b 00                	mov    eax,DWORD PTR [eax]
100046cd:	39 30                	cmp    DWORD PTR [eax],esi
100046cf:	74 0c                	je     100046dd <NIDesktop::handleMouse(int, int, int, int)+0x599>
100046d1:	50                   	push   eax
100046d2:	50                   	push   eax
100046d3:	56                   	push   esi
100046d4:	53                   	push   ebx
100046d5:	e8 fc ff ff ff       	call   100046d6 <NIDesktop::handleMouse(int, int, int, int)+0x592>	100046d6: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
100046da:	83 c4 10             	add    esp,0x10
100046dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100046de: R_386_32	milliTenthsSinceBoot
100046e2:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	100046e4: R_386_32	milliTenthsSinceBoot
100046e8:	a3 28 88 03 10       	mov    ds:0x10038828,eax	100046e9: R_386_32	.bss
100046ed:	89 15 2c 88 03 10    	mov    DWORD PTR ds:0x1003882c,edx	100046ef: R_386_32	.bss
100046f3:	e9 04 01 00 00       	jmp    100047fc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100046f8:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100046fa: R_386_32	movingWin
100046ff:	0f 85 f7 00 00 00    	jne    100047fc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
10004705:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004708:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
1000470b:	89 d1                	mov    ecx,edx
1000470d:	83 e8 0e             	sub    eax,0xe
10004710:	2b 4e 1c             	sub    ecx,DWORD PTR [esi+0x1c]
10004713:	39 c8                	cmp    eax,ecx
10004715:	7f 37                	jg     1000474e <NIDesktop::handleMouse(int, int, int, int)+0x60a>
10004717:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
1000471b:	75 31                	jne    1000474e <NIDesktop::handleMouse(int, int, int, int)+0x60a>
1000471d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004720:	c7 43 10 00 04 00 00 	mov    DWORD PTR [ebx+0x10],0x400
10004727:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10004729: R_386_32	movingWin
1000472d:	55                   	push   ebp
1000472e:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	10004730: R_386_32	movingType
10004738:	55                   	push   ebp
10004739:	a3 34 88 03 10       	mov    ds:0x10038834,eax	1000473a: R_386_32	.bss
1000473e:	56                   	push   esi
1000473f:	89 15 30 88 03 10    	mov    DWORD PTR ds:0x10038830,edx	10004741: R_386_32	.bss
10004745:	53                   	push   ebx
10004746:	e8 fc ff ff ff       	call   10004747 <NIDesktop::handleMouse(int, int, int, int)+0x603>	10004747: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
1000474b:	83 c4 10             	add    esp,0x10
1000474e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004751:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
10004754:	89 d1                	mov    ecx,edx
10004756:	83 e8 0e             	sub    eax,0xe
10004759:	2b 4e 18             	sub    ecx,DWORD PTR [esi+0x18]
1000475c:	39 c8                	cmp    eax,ecx
1000475e:	7f 55                	jg     100047b5 <NIDesktop::handleMouse(int, int, int, int)+0x671>
10004760:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
10004764:	75 4f                	jne    100047b5 <NIDesktop::handleMouse(int, int, int, int)+0x671>
10004766:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004768: R_386_32	movingWin
1000476d:	75 33                	jne    100047a2 <NIDesktop::handleMouse(int, int, int, int)+0x65e>
1000476f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004772:	c7 43 10 00 05 00 00 	mov    DWORD PTR [ebx+0x10],0x500
10004779:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	1000477b: R_386_32	movingWin
1000477f:	57                   	push   edi
10004780:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	10004782: R_386_32	movingType
1000478a:	57                   	push   edi
1000478b:	89 15 34 88 03 10    	mov    DWORD PTR ds:0x10038834,edx	1000478d: R_386_32	.bss
10004791:	56                   	push   esi
10004792:	a3 30 88 03 10       	mov    ds:0x10038830,eax	10004793: R_386_32	.bss
10004797:	53                   	push   ebx
10004798:	e8 fc ff ff ff       	call   10004799 <NIDesktop::handleMouse(int, int, int, int)+0x655>	10004799: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
1000479d:	83 c4 10             	add    esp,0x10
100047a0:	eb 13                	jmp    100047b5 <NIDesktop::handleMouse(int, int, int, int)+0x671>
100047a2:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	100047a4: R_386_32	movingType
100047ac:	c7 43 10 00 03 00 00 	mov    DWORD PTR [ebx+0x10],0x300
100047b3:	eb 47                	jmp    100047fc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047b5:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100047b7: R_386_32	movingWin
100047bc:	75 3e                	jne    100047fc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
100047c1:	2b 46 1c             	sub    eax,DWORD PTR [esi+0x1c]
100047c4:	83 f8 18             	cmp    eax,0x18
100047c7:	7f 33                	jg     100047fc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047c9:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
100047cd:	75 2d                	jne    100047fc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047cf:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
100047d2:	2b 56 18             	sub    edx,DWORD PTR [esi+0x18]
100047d5:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	100047d7: R_386_32	movingWin
100047db:	51                   	push   ecx
100047dc:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	100047de: R_386_32	movingType
100047e6:	51                   	push   ecx
100047e7:	89 15 34 88 03 10    	mov    DWORD PTR ds:0x10038834,edx	100047e9: R_386_32	.bss
100047ed:	56                   	push   esi
100047ee:	a3 30 88 03 10       	mov    ds:0x10038830,eax	100047ef: R_386_32	.bss
100047f3:	53                   	push   ebx
100047f4:	e8 fc ff ff ff       	call   100047f5 <NIDesktop::handleMouse(int, int, int, int)+0x6b1>	100047f5: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
100047f9:	83 c4 10             	add    esp,0x10
100047fc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100047ff:	83 ec 0c             	sub    esp,0xc
10004802:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004808:	8b 0a                	mov    ecx,DWORD PTR [edx]
1000480a:	6a 00                	push   0x0
1000480c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
1000480f:	05 00 00 00 00       	add    eax,0x0	10004810: R_386_32	___mouse_data
10004814:	50                   	push   eax
10004815:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004818:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000481b:	52                   	push   edx
1000481c:	ff 51 30             	call   DWORD PTR [ecx+0x30]
1000481f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
10004823:	a3 38 88 03 10       	mov    ds:0x10038838,eax	10004824: R_386_32	.bss
10004828:	83 c4 4c             	add    esp,0x4c
1000482b:	5b                   	pop    ebx
1000482c:	5e                   	pop    esi
1000482d:	5f                   	pop    edi
1000482e:	5d                   	pop    ebp
1000482f:	c3                   	ret    
10004830:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004833:	89 6f 20             	mov    DWORD PTR [edi+0x20],ebp
10004836:	83 ec 0c             	sub    esp,0xc
10004839:	89 47 24             	mov    DWORD PTR [edi+0x24],eax
1000483c:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000483e: R_386_32	movingWin
10004846:	57                   	push   edi
10004847:	e8 fc ff ff ff       	call   10004848 <NIDesktop::handleMouse(int, int, int, int)+0x704>	10004848: R_386_PC32	NIWindow::rerender()
1000484c:	59                   	pop    ecx
1000484d:	5d                   	pop    ebp
1000484e:	57                   	push   edi
1000484f:	53                   	push   ebx
10004850:	e8 fc ff ff ff       	call   10004851 <NIDesktop::handleMouse(int, int, int, int)+0x70d>	10004851: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004855:	58                   	pop    eax
10004856:	5a                   	pop    edx
10004857:	57                   	push   edi
10004858:	53                   	push   ebx
10004859:	e8 fc ff ff ff       	call   1000485a <NIDesktop::handleMouse(int, int, int, int)+0x716>	1000485a: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
1000485e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10004865:	83 c4 10             	add    esp,0x10
10004868:	e9 7f fd ff ff       	jmp    100045ec <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
1000486d:	89 78 18             	mov    DWORD PTR [eax+0x18],edi
10004870:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004872: R_386_32	movingWin
1000487a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
1000487d:	2b 15 30 88 03 10    	sub    edx,DWORD PTR ds:0x10038830	1000487f: R_386_32	.bss
10004883:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
10004886:	52                   	push   edx
10004887:	52                   	push   edx
10004888:	50                   	push   eax
10004889:	53                   	push   ebx
1000488a:	e8 fc ff ff ff       	call   1000488b <NIDesktop::handleMouse(int, int, int, int)+0x747>	1000488b: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000488f:	83 c4 10             	add    esp,0x10
10004892:	e9 42 fb ff ff       	jmp    100043d9 <NIDesktop::handleMouse(int, int, int, int)+0x295>

10004897 <NiHandleMouse(int, int, int, int)>:
10004897:	83 ec 18             	sub    esp,0x18
1000489a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000489e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100048a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100048a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100048aa:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100048ac: R_386_32	mouseDesktop
100048b0:	e8 fc ff ff ff       	call   100048b1 <NiHandleMouse(int, int, int, int)+0x1a>	100048b1: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
100048b5:	83 c4 2c             	add    esp,0x2c
100048b8:	c3                   	ret    

100048b9 <drawVGAChar(int, int, int)>:
100048b9:	55                   	push   ebp
100048ba:	57                   	push   edi
100048bb:	56                   	push   esi
100048bc:	53                   	push   ebx
100048bd:	31 db                	xor    ebx,ebx
100048bf:	83 ec 1c             	sub    esp,0x1c
100048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100048c6:	c1 e0 04             	shl    eax,0x4
100048c9:	89 04 24             	mov    DWORD PTR [esp],eax
100048cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100048d0:	c1 e0 04             	shl    eax,0x4
100048d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100048d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100048db:	c1 e0 03             	shl    eax,0x3
100048de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100048e2:	8b 04 24             	mov    eax,DWORD PTR [esp]
100048e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
100048e9:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	100048ec: R_386_32	cp
100048f0:	8d 3c 19             	lea    edi,[ecx+ebx*1]
100048f3:	31 f6                	xor    esi,esi
100048f5:	84 c0                	test   al,al
100048f7:	79 22                	jns    1000491b <drawVGAChar(int, int, int)+0x62>
100048f9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100048fd:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100048ff: R_386_32	screen
10004903:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004905:	6a 00                	push   0x0
10004907:	57                   	push   edi
10004908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000490c:	8d 2c 06             	lea    ebp,[esi+eax*1]
1000490f:	55                   	push   ebp
10004910:	52                   	push   edx
10004911:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10004914:	83 c4 10             	add    esp,0x10
10004917:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
1000491b:	d1 e0                	shl    eax,1
1000491d:	46                   	inc    esi
1000491e:	83 fe 08             	cmp    esi,0x8
10004921:	75 d2                	jne    100048f5 <drawVGAChar(int, int, int)+0x3c>
10004923:	43                   	inc    ebx
10004924:	83 fb 10             	cmp    ebx,0x10
10004927:	75 b9                	jne    100048e2 <drawVGAChar(int, int, int)+0x29>
10004929:	83 c4 1c             	add    esp,0x1c
1000492c:	5b                   	pop    ebx
1000492d:	5e                   	pop    esi
1000492e:	5f                   	pop    edi
1000492f:	5d                   	pop    ebp
10004930:	c3                   	ret    

10004931 <NiDisplayRAM(void*)>:
10004931:	83 ec 0c             	sub    esp,0xc
10004934:	a1 00 00 00 00       	mov    eax,ds:0x0	10004935: R_386_32	irqDisableCounter
10004939:	48                   	dec    eax
1000493a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000493b: R_386_32	irqDisableCounter
1000493f:	75 01                	jne    10004942 <NiDisplayRAM(void*)+0x11>
10004941:	fb                   	sti    
10004942:	50                   	push   eax
10004943:	6a 3f                	push   0x3f
10004945:	6a 00                	push   0x0
10004947:	6a 00                	push   0x0
10004949:	e8 fc ff ff ff       	call   1000494a <NiDisplayRAM(void*)+0x19>	1000494a: R_386_PC32	drawVGAChar(int, int, int)
1000494e:	83 c4 0c             	add    esp,0xc
10004951:	6a 3f                	push   0x3f
10004953:	6a 00                	push   0x0
10004955:	6a 01                	push   0x1
10004957:	e8 fc ff ff ff       	call   10004958 <NiDisplayRAM(void*)+0x27>	10004958: R_386_PC32	drawVGAChar(int, int, int)
1000495c:	83 c4 0c             	add    esp,0xc
1000495f:	6a 25                	push   0x25
10004961:	6a 00                	push   0x0
10004963:	6a 02                	push   0x2
10004965:	e8 fc ff ff ff       	call   10004966 <NiDisplayRAM(void*)+0x35>	10004966: R_386_PC32	drawVGAChar(int, int, int)
1000496a:	83 c4 0c             	add    esp,0xc
1000496d:	6a 20                	push   0x20
1000496f:	6a 00                	push   0x0
10004971:	6a 03                	push   0x3
10004973:	e8 fc ff ff ff       	call   10004974 <NiDisplayRAM(void*)+0x43>	10004974: R_386_PC32	drawVGAChar(int, int, int)
10004978:	83 c4 0c             	add    esp,0xc
1000497b:	6a 52                	push   0x52
1000497d:	6a 00                	push   0x0
1000497f:	6a 04                	push   0x4
10004981:	e8 fc ff ff ff       	call   10004982 <NiDisplayRAM(void*)+0x51>	10004982: R_386_PC32	drawVGAChar(int, int, int)
10004986:	83 c4 0c             	add    esp,0xc
10004989:	6a 41                	push   0x41
1000498b:	6a 00                	push   0x0
1000498d:	6a 05                	push   0x5
1000498f:	e8 fc ff ff ff       	call   10004990 <NiDisplayRAM(void*)+0x5f>	10004990: R_386_PC32	drawVGAChar(int, int, int)
10004994:	83 c4 0c             	add    esp,0xc
10004997:	6a 4d                	push   0x4d
10004999:	6a 00                	push   0x0
1000499b:	6a 06                	push   0x6
1000499d:	e8 fc ff ff ff       	call   1000499e <NiDisplayRAM(void*)+0x6d>	1000499e: R_386_PC32	drawVGAChar(int, int, int)
100049a2:	83 c4 0c             	add    esp,0xc
100049a5:	6a 20                	push   0x20
100049a7:	6a 00                	push   0x0
100049a9:	6a 07                	push   0x7
100049ab:	e8 fc ff ff ff       	call   100049ac <NiDisplayRAM(void*)+0x7b>	100049ac: R_386_PC32	drawVGAChar(int, int, int)
100049b0:	83 c4 0c             	add    esp,0xc
100049b3:	6a 75                	push   0x75
100049b5:	6a 00                	push   0x0
100049b7:	6a 08                	push   0x8
100049b9:	e8 fc ff ff ff       	call   100049ba <NiDisplayRAM(void*)+0x89>	100049ba: R_386_PC32	drawVGAChar(int, int, int)
100049be:	83 c4 0c             	add    esp,0xc
100049c1:	6a 73                	push   0x73
100049c3:	6a 00                	push   0x0
100049c5:	6a 09                	push   0x9
100049c7:	e8 fc ff ff ff       	call   100049c8 <NiDisplayRAM(void*)+0x97>	100049c8: R_386_PC32	drawVGAChar(int, int, int)
100049cc:	83 c4 0c             	add    esp,0xc
100049cf:	6a 65                	push   0x65
100049d1:	6a 00                	push   0x0
100049d3:	6a 0a                	push   0xa
100049d5:	e8 fc ff ff ff       	call   100049d6 <NiDisplayRAM(void*)+0xa5>	100049d6: R_386_PC32	drawVGAChar(int, int, int)
100049da:	83 c4 0c             	add    esp,0xc
100049dd:	6a 64                	push   0x64
100049df:	6a 00                	push   0x0
100049e1:	6a 0b                	push   0xb
100049e3:	e8 fc ff ff ff       	call   100049e4 <NiDisplayRAM(void*)+0xb3>	100049e4: R_386_PC32	drawVGAChar(int, int, int)
100049e8:	83 c4 10             	add    esp,0x10
100049eb:	e9 52 ff ff ff       	jmp    10004942 <NiDisplayRAM(void*)+0x11>

100049f0 <monikaBsod(char*)>:
100049f0:	55                   	push   ebp
100049f1:	57                   	push   edi
100049f2:	31 ff                	xor    edi,edi
100049f4:	56                   	push   esi
100049f5:	53                   	push   ebx
100049f6:	31 db                	xor    ebx,ebx
100049f8:	83 ec 24             	sub    esp,0x24
100049fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100049fc: R_386_32	screen
10004a00:	8b 10                	mov    edx,DWORD PTR [eax]
10004a02:	68 ff ff ff 00       	push   0xffffff
10004a07:	50                   	push   eax
10004a08:	ff 52 40             	call   DWORD PTR [edx+0x40]
10004a0b:	83 c4 10             	add    esp,0x10
10004a0e:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	10004a10: R_386_32	justMonika
10004a14:	8d 43 01             	lea    eax,[ebx+0x1]
10004a17:	84 c9                	test   cl,cl
10004a19:	79 0e                	jns    10004a29 <monikaBsod(char*)+0x39>
10004a1b:	8d 51 80             	lea    edx,[ecx-0x80]
10004a1e:	83 c3 02             	add    ebx,0x2
10004a21:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	10004a23: R_386_32	justMonika
10004a27:	eb 04                	jmp    10004a2d <monikaBsod(char*)+0x3d>
10004a29:	89 c3                	mov    ebx,eax
10004a2b:	b2 01                	mov    dl,0x1
10004a2d:	0f b6 c1             	movzx  eax,cl
10004a30:	83 e1 03             	and    ecx,0x3
10004a33:	89 c6                	mov    esi,eax
10004a35:	6b c9 55             	imul   ecx,ecx,0x55
10004a38:	c1 fe 05             	sar    esi,0x5
10004a3b:	c1 f8 02             	sar    eax,0x2
10004a3e:	83 e6 03             	and    esi,0x3
10004a41:	83 e0 07             	and    eax,0x7
10004a44:	6b f6 55             	imul   esi,esi,0x55
10004a47:	6b c0 24             	imul   eax,eax,0x24
10004a4a:	c1 e6 10             	shl    esi,0x10
10004a4d:	c1 e0 08             	shl    eax,0x8
10004a50:	09 f0                	or     eax,esi
10004a52:	31 f6                	xor    esi,esi
10004a54:	09 c8                	or     eax,ecx
10004a56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004a5a:	0f b6 c2             	movzx  eax,dl
10004a5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004a61:	8d 04 37             	lea    eax,[edi+esi*1]
10004a64:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10004a68:	7f 10                	jg     10004a7a <monikaBsod(char*)+0x8a>
10004a6a:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
10004a6e:	81 ff ff af 04 00    	cmp    edi,0x4afff
10004a74:	7e 98                	jle    10004a0e <monikaBsod(char*)+0x1e>
10004a76:	31 db                	xor    ebx,ebx
10004a78:	eb 25                	jmp    10004a9f <monikaBsod(char*)+0xaf>
10004a7a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004a7c: R_386_32	screen
10004a80:	b9 80 02 00 00       	mov    ecx,0x280
10004a85:	8b 2a                	mov    ebp,DWORD PTR [edx]
10004a87:	46                   	inc    esi
10004a88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10004a8c:	99                   	cdq    
10004a8d:	f7 f9                	idiv   ecx
10004a8f:	50                   	push   eax
10004a90:	52                   	push   edx
10004a91:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004a93: R_386_32	screen
10004a97:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10004a9a:	83 c4 10             	add    esp,0x10
10004a9d:	eb c2                	jmp    10004a61 <monikaBsod(char*)+0x71>
10004a9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004aa3:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
10004aa7:	84 c0                	test   al,al
10004aa9:	74 1d                	je     10004ac8 <monikaBsod(char*)+0xd8>
10004aab:	b9 19 00 00 00       	mov    ecx,0x19
10004ab0:	52                   	push   edx
10004ab1:	50                   	push   eax
10004ab2:	89 d8                	mov    eax,ebx
10004ab4:	43                   	inc    ebx
10004ab5:	99                   	cdq    
10004ab6:	f7 f9                	idiv   ecx
10004ab8:	83 c0 0a             	add    eax,0xa
10004abb:	42                   	inc    edx
10004abc:	50                   	push   eax
10004abd:	52                   	push   edx
10004abe:	e8 fc ff ff ff       	call   10004abf <monikaBsod(char*)+0xcf>	10004abf: R_386_PC32	drawVGAChar(int, int, int)
10004ac3:	83 c4 10             	add    esp,0x10
10004ac6:	eb d7                	jmp    10004a9f <monikaBsod(char*)+0xaf>
10004ac8:	f4                   	hlt    
10004ac9:	eb fd                	jmp    10004ac8 <monikaBsod(char*)+0xd8>

10004acb <NiInstallSysHooks()>:
10004acb:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004acd: R_386_32	guiPanicHandler
	10004ad1: R_386_32	monikaBsod(char*)
10004ad5:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10004ad7: R_386_32	systemCallHandlers
	10004adb: R_386_32	NiSystemCallHandler(regs*)
10004adf:	c3                   	ret    

10004ae0 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
10004ae0:	56                   	push   esi
10004ae1:	53                   	push   ebx
10004ae2:	83 ec 10             	sub    esp,0x10
10004ae5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10004ae9:	68 07 55 00 10       	push   0x10005507	10004aea: R_386_32	.text
10004aee:	e8 fc ff ff ff       	call   10004aef <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	10004aef: R_386_PC32	Dbg::kprintf(char const*, ...)
10004af3:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10004afa:	e8 fc ff ff ff       	call   10004afb <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x1b>	10004afb: R_386_PC32	malloc
10004aff:	89 c6                	mov    esi,eax
10004b01:	58                   	pop    eax
10004b02:	5a                   	pop    edx
10004b03:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10004b09:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10004b0f:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10004b15:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10004b1b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b1d: R_386_32	ctxt
10004b21:	56                   	push   esi
10004b22:	e8 fc ff ff ff       	call   10004b23 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x43>	10004b23: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10004b27:	83 c4 18             	add    esp,0x18
10004b2a:	56                   	push   esi
10004b2b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b2d: R_386_32	desktop
10004b31:	e8 fc ff ff ff       	call   10004b32 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x52>	10004b32: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004b36:	59                   	pop    ecx
10004b37:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b39: R_386_32	desktop
10004b3d:	e8 fc ff ff ff       	call   10004b3e <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	10004b3e: R_386_PC32	NIDesktop::completeRefresh()
10004b42:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10004b48:	89 34 24             	mov    DWORD PTR [esp],esi
10004b4b:	e8 fc ff ff ff       	call   10004b4c <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x6c>	10004b4c: R_386_PC32	NIWindow::drawBasicWindow()
10004b50:	83 c4 14             	add    esp,0x14
10004b53:	31 c0                	xor    eax,eax
10004b55:	31 d2                	xor    edx,edx
10004b57:	5b                   	pop    ebx
10004b58:	5e                   	pop    esi
10004b59:	c3                   	ret    

10004b5a <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004b5a:	55                   	push   ebp
10004b5b:	57                   	push   edi
10004b5c:	56                   	push   esi
10004b5d:	31 f6                	xor    esi,esi
10004b5f:	53                   	push   ebx
10004b60:	83 ec 28             	sub    esp,0x28
10004b63:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10004b67:	68 22 55 00 10       	push   0x10005522	10004b68: R_386_32	.text
10004b6c:	e8 fc ff ff ff       	call   10004b6d <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x13>	10004b6d: R_386_PC32	Dbg::kprintf(char const*, ...)
10004b71:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10004b77:	83 c4 10             	add    esp,0x10
10004b7a:	31 c0                	xor    eax,eax
10004b7c:	39 73 24             	cmp    DWORD PTR [ebx+0x24],esi
10004b7f:	7e 30                	jle    10004bb1 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x57>
10004b81:	31 ff                	xor    edi,edi
10004b83:	39 7b 20             	cmp    DWORD PTR [ebx+0x20],edi
10004b86:	7e 26                	jle    10004bae <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x54>
10004b88:	8b 95 b8 00 00 00    	mov    edx,DWORD PTR [ebp+0xb8]
10004b8e:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
10004b91:	83 fa ff             	cmp    edx,0xffffffff
10004b94:	74 14                	je     10004baa <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x50>
10004b96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004b9a:	52                   	push   edx
10004b9b:	56                   	push   esi
10004b9c:	57                   	push   edi
10004b9d:	53                   	push   ebx
10004b9e:	e8 fc ff ff ff       	call   10004b9f <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x45>	10004b9f: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004ba3:	83 c4 10             	add    esp,0x10
10004ba6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004baa:	40                   	inc    eax
10004bab:	47                   	inc    edi
10004bac:	eb d5                	jmp    10004b83 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x29>
10004bae:	46                   	inc    esi
10004baf:	eb cb                	jmp    10004b7c <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x22>
10004bb1:	50                   	push   eax
10004bb2:	50                   	push   eax
10004bb3:	53                   	push   ebx
10004bb4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004bb6: R_386_32	desktop
10004bba:	e8 fc ff ff ff       	call   10004bbb <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x61>	10004bbb: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004bbf:	83 c4 2c             	add    esp,0x2c
10004bc2:	31 c0                	xor    eax,eax
10004bc4:	5b                   	pop    ebx
10004bc5:	31 d2                	xor    edx,edx
10004bc7:	5e                   	pop    esi
10004bc8:	5f                   	pop    edi
10004bc9:	5d                   	pop    ebp
10004bca:	c3                   	ret    

10004bcb <NiSystemCallHandler(regs*)>:
10004bcb:	53                   	push   ebx
10004bcc:	83 ec 08             	sub    esp,0x8
10004bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004bd3:	8b 59 20             	mov    ebx,DWORD PTR [ecx+0x20]
10004bd6:	83 fb 04             	cmp    ebx,0x4
10004bd9:	74 1d                	je     10004bf8 <NiSystemCallHandler(regs*)+0x2d>
10004bdb:	83 fb 05             	cmp    ebx,0x5
10004bde:	74 2a                	je     10004c0a <NiSystemCallHandler(regs*)+0x3f>
10004be0:	83 c8 ff             	or     eax,0xffffffff
10004be3:	85 db                	test   ebx,ebx
10004be5:	89 c2                	mov    edx,eax
10004be7:	75 44                	jne    10004c2d <NiSystemCallHandler(regs*)+0x62>
10004be9:	50                   	push   eax
10004bea:	50                   	push   eax
10004beb:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10004bee:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10004bf1:	e8 fc ff ff ff       	call   10004bf2 <NiSystemCallHandler(regs*)+0x27>	10004bf2: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
10004bf6:	eb 0d                	jmp    10004c05 <NiSystemCallHandler(regs*)+0x3a>
10004bf8:	50                   	push   eax
10004bf9:	50                   	push   eax
10004bfa:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10004bfd:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10004c00:	e8 fc ff ff ff       	call   10004c01 <NiSystemCallHandler(regs*)+0x36>	10004c01: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
10004c05:	83 c4 10             	add    esp,0x10
10004c08:	eb 23                	jmp    10004c2d <NiSystemCallHandler(regs*)+0x62>
10004c0a:	83 ec 0c             	sub    esp,0xc
10004c0d:	8b 59 24             	mov    ebx,DWORD PTR [ecx+0x24]
10004c10:	68 44 55 00 10       	push   0x10005544	10004c11: R_386_32	.text
10004c15:	e8 fc ff ff ff       	call   10004c16 <NiSystemCallHandler(regs*)+0x4b>	10004c16: R_386_PC32	Dbg::kprintf(char const*, ...)
10004c1a:	58                   	pop    eax
10004c1b:	ff b3 a0 00 00 00    	push   DWORD PTR [ebx+0xa0]
10004c21:	e8 fc ff ff ff       	call   10004c22 <NiSystemCallHandler(regs*)+0x57>	10004c22: R_386_PC32	NIWindow::drawBasicWindow()
10004c26:	83 c4 10             	add    esp,0x10
10004c29:	31 c0                	xor    eax,eax
10004c2b:	31 d2                	xor    edx,edx
10004c2d:	83 c4 08             	add    esp,0x8
10004c30:	5b                   	pop    ebx
10004c31:	c3                   	ret    

10004c32 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004c32:	83 ec 18             	sub    esp,0x18
10004c35:	68 44 55 00 10       	push   0x10005544	10004c36: R_386_32	.text
10004c3a:	e8 fc ff ff ff       	call   10004c3b <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x9>	10004c3b: R_386_PC32	Dbg::kprintf(char const*, ...)
10004c3f:	58                   	pop    eax
10004c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004c44:	ff b0 a0 00 00 00    	push   DWORD PTR [eax+0xa0]
10004c4a:	e8 fc ff ff ff       	call   10004c4b <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x19>	10004c4b: R_386_PC32	NIWindow::drawBasicWindow()
10004c4f:	31 c0                	xor    eax,eax
10004c51:	31 d2                	xor    edx,edx
10004c53:	83 c4 1c             	add    esp,0x1c
10004c56:	c3                   	ret    
10004c57:	90                   	nop

10004c58 <NIWindow::invalidate()>:
10004c58:	53                   	push   ebx
10004c59:	83 ec 08             	sub    esp,0x8
10004c5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004c60:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
10004c64:	74 1d                	je     10004c83 <NIWindow::invalidate()+0x2b>
10004c66:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
10004c6a:	74 17                	je     10004c83 <NIWindow::invalidate()+0x2b>
10004c6c:	83 ec 0c             	sub    esp,0xc
10004c6f:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004c72:	e8 fc ff ff ff       	call   10004c73 <NIWindow::invalidate()+0x1b>	10004c73: R_386_PC32	free
10004c77:	59                   	pop    ecx
10004c78:	ff 73 14             	push   DWORD PTR [ebx+0x14]
10004c7b:	e8 fc ff ff ff       	call   10004c7c <NIWindow::invalidate()+0x24>	10004c7c: R_386_PC32	free
10004c80:	83 c4 10             	add    esp,0x10
10004c83:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10004c8a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10004c91:	c6 43 0c 00          	mov    BYTE PTR [ebx+0xc],0x0
10004c95:	83 c4 08             	add    esp,0x8
10004c98:	5b                   	pop    ebx
10004c99:	c3                   	ret    

10004c9a <NIWindow::putpixel(int, int, unsigned int)>:
10004c9a:	56                   	push   esi
10004c9b:	53                   	push   ebx
10004c9c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10004ca0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004ca4:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
10004ca7:	0f af 43 20          	imul   eax,DWORD PTR [ebx+0x20]
10004cab:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004caf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10004cb3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004cb6:	83 fe 04             	cmp    esi,0x4
10004cb9:	75 05                	jne    10004cc0 <NIWindow::putpixel(int, int, unsigned int)+0x26>
10004cbb:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
10004cbe:	eb 0e                	jmp    10004cce <NIWindow::putpixel(int, int, unsigned int)+0x34>
10004cc0:	83 fe 02             	cmp    esi,0x2
10004cc3:	75 06                	jne    10004ccb <NIWindow::putpixel(int, int, unsigned int)+0x31>
10004cc5:	66 89 0c 42          	mov    WORD PTR [edx+eax*2],cx
10004cc9:	eb 03                	jmp    10004cce <NIWindow::putpixel(int, int, unsigned int)+0x34>
10004ccb:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
10004cce:	5b                   	pop    ebx
10004ccf:	5e                   	pop    esi
10004cd0:	c3                   	ret    
10004cd1:	90                   	nop

10004cd2 <NIWindow::drawBasicWindow()>:
10004cd2:	55                   	push   ebp
10004cd3:	57                   	push   edi
10004cd4:	56                   	push   esi
10004cd5:	31 f6                	xor    esi,esi
10004cd7:	53                   	push   ebx
10004cd8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
10004cdc:	39 75 24             	cmp    DWORD PTR [ebp+0x24],esi
10004cdf:	7e 2e                	jle    10004d0f <NIWindow::drawBasicWindow()+0x3d>
10004ce1:	31 db                	xor    ebx,ebx
10004ce3:	83 fe 19             	cmp    esi,0x19
10004ce6:	0f 9e c3             	setle  bl
10004ce9:	31 ff                	xor    edi,edi
10004ceb:	4b                   	dec    ebx
10004cec:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
10004cf2:	81 c3 ff ff ff 00    	add    ebx,0xffffff
10004cf8:	39 7d 20             	cmp    DWORD PTR [ebp+0x20],edi
10004cfb:	7e 0f                	jle    10004d0c <NIWindow::drawBasicWindow()+0x3a>
10004cfd:	53                   	push   ebx
10004cfe:	56                   	push   esi
10004cff:	57                   	push   edi
10004d00:	47                   	inc    edi
10004d01:	55                   	push   ebp
10004d02:	e8 fc ff ff ff       	call   10004d03 <NIWindow::drawBasicWindow()+0x31>	10004d03: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004d07:	83 c4 10             	add    esp,0x10
10004d0a:	eb ec                	jmp    10004cf8 <NIWindow::drawBasicWindow()+0x26>
10004d0c:	46                   	inc    esi
10004d0d:	eb cd                	jmp    10004cdc <NIWindow::drawBasicWindow()+0xa>
10004d0f:	5b                   	pop    ebx
10004d10:	5e                   	pop    esi
10004d11:	5f                   	pop    edi
10004d12:	5d                   	pop    ebp
10004d13:	c3                   	ret    

10004d14 <NIWindow::rerender()>:
10004d14:	57                   	push   edi
10004d15:	56                   	push   esi
10004d16:	53                   	push   ebx
10004d17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004d1b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
10004d1f:	74 0c                	je     10004d2d <NIWindow::rerender()+0x19>
10004d21:	83 ec 0c             	sub    esp,0xc
10004d24:	53                   	push   ebx
10004d25:	e8 fc ff ff ff       	call   10004d26 <NIWindow::rerender()+0x12>	10004d26: R_386_PC32	NIWindow::invalidate()
10004d2a:	83 c4 10             	add    esp,0x10
10004d2d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10004d30:	83 ec 0c             	sub    esp,0xc
10004d33:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
10004d36:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10004d3d:	50                   	push   eax
10004d3e:	e8 fc ff ff ff       	call   10004d3f <NIWindow::rerender()+0x2b>	10004d3f: R_386_PC32	malloc
10004d43:	0f af 73 20          	imul   esi,DWORD PTR [ebx+0x20]
10004d47:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10004d4a:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
10004d4e:	89 34 24             	mov    DWORD PTR [esp],esi
10004d51:	e8 fc ff ff ff       	call   10004d52 <NIWindow::rerender()+0x3e>	10004d52: R_386_PC32	malloc
10004d56:	83 c4 10             	add    esp,0x10
10004d59:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10004d5c:	31 c0                	xor    eax,eax
10004d5e:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004d61:	7e 6a                	jle    10004dcd <NIWindow::rerender()+0xb9>
10004d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004d6a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10004d6d:	01 d6                	add    esi,edx
10004d6f:	83 f8 06             	cmp    eax,0x6
10004d72:	7f 1b                	jg     10004d8f <NIWindow::rerender()+0x7b>
10004d74:	8b 0c 85 00 00 00 00 	mov    ecx,DWORD PTR [eax*4+0x0]	10004d77: R_386_32	curveLookup7
10004d7b:	66 89 0e             	mov    WORD PTR [esi],cx
10004d7e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
10004d81:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10004d84: R_386_32	curveLookup7
10004d88:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
10004d8d:	eb 3b                	jmp    10004dca <NIWindow::rerender()+0xb6>
10004d8f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004d92:	8d 79 fa             	lea    edi,[ecx-0x6]
10004d95:	39 c7                	cmp    edi,eax
10004d97:	7f 22                	jg     10004dbb <NIWindow::rerender()+0xa7>
10004d99:	29 c1                	sub    ecx,eax
10004d9b:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10004d9e: R_386_32	curveLookup7
10004da2:	66 89 0e             	mov    WORD PTR [esi],cx
10004da5:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004da8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10004dab:	29 c1                	sub    ecx,eax
10004dad:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10004db0: R_386_32	curveLookup7
10004db4:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
10004db9:	eb 0f                	jmp    10004dca <NIWindow::rerender()+0xb6>
10004dbb:	66 c7 06 00 00       	mov    WORD PTR [esi],0x0
10004dc0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
10004dc3:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
10004dca:	40                   	inc    eax
10004dcb:	eb 91                	jmp    10004d5e <NIWindow::rerender()+0x4a>
10004dcd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
10004dd1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10004dd5:	5b                   	pop    ebx
10004dd6:	5e                   	pop    esi
10004dd7:	5f                   	pop    edi
10004dd8:	e9 f5 fe ff ff       	jmp    10004cd2 <NIWindow::drawBasicWindow()>
10004ddd:	90                   	nop

10004dde <NIWindow::changeContext(NIContext*, int, int)>:
10004dde:	55                   	push   ebp
10004ddf:	57                   	push   edi
10004de0:	56                   	push   esi
10004de1:	53                   	push   ebx
10004de2:	83 ec 18             	sub    esp,0x18
10004de5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10004de9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
10004ded:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10004df1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10004df5:	53                   	push   ebx
10004df6:	e8 fc ff ff ff       	call   10004df7 <NIWindow::changeContext(NIContext*, int, int)+0x19>	10004df7: R_386_PC32	NIWindow::invalidate()
10004dfb:	89 33                	mov    DWORD PTR [ebx],esi
10004dfd:	89 6b 18             	mov    DWORD PTR [ebx+0x18],ebp
10004e00:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
10004e03:	83 c4 10             	add    esp,0x10
10004e06:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
10004e0c:	83 f8 08             	cmp    eax,0x8
10004e0f:	7f 09                	jg     10004e1a <NIWindow::changeContext(NIContext*, int, int)+0x3c>
10004e11:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
10004e18:	eb 15                	jmp    10004e2f <NIWindow::changeContext(NIContext*, int, int)+0x51>
10004e1a:	83 f8 10             	cmp    eax,0x10
10004e1d:	7f 09                	jg     10004e28 <NIWindow::changeContext(NIContext*, int, int)+0x4a>
10004e1f:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
10004e26:	eb 07                	jmp    10004e2f <NIWindow::changeContext(NIContext*, int, int)+0x51>
10004e28:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
10004e2f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10004e33:	83 c4 0c             	add    esp,0xc
10004e36:	5b                   	pop    ebx
10004e37:	5e                   	pop    esi
10004e38:	5f                   	pop    edi
10004e39:	5d                   	pop    ebp
10004e3a:	e9 d5 fe ff ff       	jmp    10004d14 <NIWindow::rerender()>
10004e3f:	90                   	nop

10004e40 <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
10004e40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004e44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10004e48:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
10004e4c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
10004e4f:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
10004e56:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10004e5a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
10004e5e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
10004e61:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10004e68:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10004e6f:	e9 6a ff ff ff       	jmp    10004dde <NIWindow::changeContext(NIContext*, int, int)>

10004e74 <NIWindow::request()>:
10004e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004e78:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
10004e7c:	75 05                	jne    10004e83 <NIWindow::request()+0xf>
10004e7e:	e9 91 fe ff ff       	jmp    10004d14 <NIWindow::rerender()>
10004e83:	c3                   	ret    

10004e84 <NIWindow::SHADOW_TEST()>:
10004e84:	55                   	push   ebp
10004e85:	57                   	push   edi
10004e86:	56                   	push   esi
10004e87:	53                   	push   ebx
10004e88:	83 ec 28             	sub    esp,0x28
10004e8b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10004e8f:	53                   	push   ebx
10004e90:	e8 fc ff ff ff       	call   10004e91 <NIWindow::SHADOW_TEST()+0xd>	10004e91: R_386_PC32	NIWindow::request()
10004e95:	83 c4 10             	add    esp,0x10
10004e98:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
10004e9b:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004e9e:	74 10                	je     10004eb0 <NIWindow::SHADOW_TEST()+0x2c>
10004ea0:	83 ec 0c             	sub    esp,0xc
10004ea3:	68 63 55 00 10       	push   0x10005563	10004ea4: R_386_32	.text
10004ea8:	e8 fc ff ff ff       	call   10004ea9 <NIWindow::SHADOW_TEST()+0x25>	10004ea9: R_386_PC32	KePanic(char const*)
10004ead:	83 c4 10             	add    esp,0x10
10004eb0:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10004eb4:	0f 85 28 01 00 00    	jne    10004fe2 <NIWindow::SHADOW_TEST()+0x15e>
10004eba:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
10004ec2:	31 ff                	xor    edi,edi
10004ec4:	39 7b 24             	cmp    DWORD PTR [ebx+0x24],edi
10004ec7:	0f 8e 15 01 00 00    	jle    10004fe2 <NIWindow::SHADOW_TEST()+0x15e>
10004ecd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10004ed0:	8d 04 b8             	lea    eax,[eax+edi*4]
10004ed3:	0f b7 30             	movzx  esi,WORD PTR [eax]
10004ed6:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
10004eda:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
10004ede:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004ee2:	89 34 24             	mov    DWORD PTR [esp],esi
10004ee5:	8b 6b 20             	mov    ebp,DWORD PTR [ebx+0x20]
10004ee8:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004eeb:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
10004eef:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
10004ef2:	0f 8e d4 00 00 00    	jle    10004fcc <NIWindow::SHADOW_TEST()+0x148>
10004ef8:	83 ff 05             	cmp    edi,0x5
10004efb:	7e 1f                	jle    10004f1c <NIWindow::SHADOW_TEST()+0x98>
10004efd:	8d 41 fb             	lea    eax,[ecx-0x5]
10004f00:	39 f8                	cmp    eax,edi
10004f02:	7e 18                	jle    10004f1c <NIWindow::SHADOW_TEST()+0x98>
10004f04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004f08:	83 c0 05             	add    eax,0x5
10004f0b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004f0e:	7d 0c                	jge    10004f1c <NIWindow::SHADOW_TEST()+0x98>
10004f10:	8d 45 fb             	lea    eax,[ebp-0x5]
10004f13:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004f16:	0f 8f a8 00 00 00    	jg     10004fc4 <NIWindow::SHADOW_TEST()+0x140>
10004f1c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
10004f20:	be ea 01 00 00       	mov    esi,0x1ea
10004f25:	29 f9                	sub    ecx,edi
10004f27:	89 f0                	mov    eax,esi
10004f29:	83 c1 04             	add    ecx,0x4
10004f2c:	99                   	cdq    
10004f2d:	f7 f9                	idiv   ecx
10004f2f:	89 c1                	mov    ecx,eax
10004f31:	89 f0                	mov    eax,esi
10004f33:	99                   	cdq    
10004f34:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004f38:	83 f8 0a             	cmp    eax,0xa
10004f3b:	7d 05                	jge    10004f42 <NIWindow::SHADOW_TEST()+0xbe>
10004f3d:	b8 0a 00 00 00       	mov    eax,0xa
10004f42:	39 c1                	cmp    ecx,eax
10004f44:	7d 02                	jge    10004f48 <NIWindow::SHADOW_TEST()+0xc4>
10004f46:	89 c1                	mov    ecx,eax
10004f48:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
10004f4b:	b8 ea 01 00 00       	mov    eax,0x1ea
10004f50:	83 c5 04             	add    ebp,0x4
10004f53:	99                   	cdq    
10004f54:	f7 fd                	idiv   ebp
10004f56:	89 c6                	mov    esi,eax
10004f58:	83 f8 0a             	cmp    eax,0xa
10004f5b:	7d 05                	jge    10004f62 <NIWindow::SHADOW_TEST()+0xde>
10004f5d:	be 0a 00 00 00       	mov    esi,0xa
10004f62:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004f65:	8d 68 05             	lea    ebp,[eax+0x5]
10004f68:	b8 ea 01 00 00       	mov    eax,0x1ea
10004f6d:	99                   	cdq    
10004f6e:	f7 fd                	idiv   ebp
10004f70:	39 c6                	cmp    esi,eax
10004f72:	7d 02                	jge    10004f76 <NIWindow::SHADOW_TEST()+0xf2>
10004f74:	89 c6                	mov    esi,eax
10004f76:	89 f0                	mov    eax,esi
10004f78:	89 ca                	mov    edx,ecx
10004f7a:	0f af c6             	imul   eax,esi
10004f7d:	0f af d1             	imul   edx,ecx
10004f80:	0f af f1             	imul   esi,ecx
10004f83:	01 d0                	add    eax,edx
10004f85:	8d 04 c6             	lea    eax,[esi+eax*8]
10004f88:	c1 f8 08             	sar    eax,0x8
10004f8b:	83 f8 66             	cmp    eax,0x66
10004f8e:	7e 46                	jle    10004fd6 <NIWindow::SHADOW_TEST()+0x152>
10004f90:	8d 50 9a             	lea    edx,[eax-0x66]
10004f93:	d1 fa                	sar    edx,1
10004f95:	8d 42 66             	lea    eax,[edx+0x66]
10004f98:	83 f8 73             	cmp    eax,0x73
10004f9b:	7e 39                	jle    10004fd6 <NIWindow::SHADOW_TEST()+0x152>
10004f9d:	83 ea 0d             	sub    edx,0xd
10004fa0:	c1 fa 02             	sar    edx,0x2
10004fa3:	8d 42 73             	lea    eax,[edx+0x73]
10004fa6:	83 f8 7f             	cmp    eax,0x7f
10004fa9:	7f 19                	jg     10004fc4 <NIWindow::SHADOW_TEST()+0x140>
10004fab:	50                   	push   eax
10004fac:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10004faf:	01 f8                	add    eax,edi
10004fb1:	50                   	push   eax
10004fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004fb6:	03 43 18             	add    eax,DWORD PTR [ebx+0x18]
10004fb9:	50                   	push   eax
10004fba:	ff 33                	push   DWORD PTR [ebx]
10004fbc:	e8 fc ff ff ff       	call   10004fbd <NIWindow::SHADOW_TEST()+0x139>	10004fbd: R_386_PC32	NIContext::drvDarken4(int, int, int)
10004fc1:	83 c4 10             	add    esp,0x10
10004fc4:	ff 04 24             	inc    DWORD PTR [esp]
10004fc7:	e9 19 ff ff ff       	jmp    10004ee5 <NIWindow::SHADOW_TEST()+0x61>
10004fcc:	47                   	inc    edi
10004fcd:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
10004fd1:	e9 ee fe ff ff       	jmp    10004ec4 <NIWindow::SHADOW_TEST()+0x40>
10004fd6:	83 f8 0a             	cmp    eax,0xa
10004fd9:	7d d0                	jge    10004fab <NIWindow::SHADOW_TEST()+0x127>
10004fdb:	b8 0a 00 00 00       	mov    eax,0xa
10004fe0:	eb c9                	jmp    10004fab <NIWindow::SHADOW_TEST()+0x127>
10004fe2:	83 c4 1c             	add    esp,0x1c
10004fe5:	5b                   	pop    ebx
10004fe6:	5e                   	pop    esi
10004fe7:	5f                   	pop    edi
10004fe8:	5d                   	pop    ebp
10004fe9:	c3                   	ret    

10004fea <NIWindow::realdraw()>:
10004fea:	55                   	push   ebp
10004feb:	57                   	push   edi
10004fec:	56                   	push   esi
10004fed:	53                   	push   ebx
10004fee:	83 ec 18             	sub    esp,0x18
10004ff1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10004ff5:	53                   	push   ebx
10004ff6:	e8 fc ff ff ff       	call   10004ff7 <NIWindow::realdraw()+0xd>	10004ff7: R_386_PC32	NIWindow::request()
10004ffb:	83 c4 10             	add    esp,0x10
10004ffe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
10005001:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10005004:	74 10                	je     10005016 <NIWindow::realdraw()+0x2c>
10005006:	83 ec 0c             	sub    esp,0xc
10005009:	68 63 55 00 10       	push   0x10005563	1000500a: R_386_32	.text
1000500e:	e8 fc ff ff ff       	call   1000500f <NIWindow::realdraw()+0x25>	1000500f: R_386_PC32	KePanic(char const*)
10005013:	83 c4 10             	add    esp,0x10
10005016:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
1000501a:	75 46                	jne    10005062 <NIWindow::realdraw()+0x78>
1000501c:	31 f6                	xor    esi,esi
1000501e:	39 73 24             	cmp    DWORD PTR [ebx+0x24],esi
10005021:	7e 3f                	jle    10005062 <NIWindow::realdraw()+0x78>
10005023:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10005026:	8d 04 b0             	lea    eax,[eax+esi*4]
10005029:	0f b7 28             	movzx  ebp,WORD PTR [eax]
1000502c:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
10005030:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10005033:	89 c2                	mov    edx,eax
10005035:	29 fa                	sub    edx,edi
10005037:	39 ea                	cmp    edx,ebp
10005039:	7e 24                	jle    1000505f <NIWindow::realdraw()+0x75>
1000503b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000503e:	0f af c6             	imul   eax,esi
10005041:	01 e8                	add    eax,ebp
10005043:	ff 34 82             	push   DWORD PTR [edx+eax*4]
10005046:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10005049:	01 f0                	add    eax,esi
1000504b:	50                   	push   eax
1000504c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000504f:	01 e8                	add    eax,ebp
10005051:	45                   	inc    ebp
10005052:	50                   	push   eax
10005053:	ff 33                	push   DWORD PTR [ebx]
10005055:	e8 fc ff ff ff       	call   10005056 <NIWindow::realdraw()+0x6c>	10005056: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
1000505a:	83 c4 10             	add    esp,0x10
1000505d:	eb d1                	jmp    10005030 <NIWindow::realdraw()+0x46>
1000505f:	46                   	inc    esi
10005060:	eb bc                	jmp    1000501e <NIWindow::realdraw()+0x34>
10005062:	83 c4 0c             	add    esp,0xc
10005065:	5b                   	pop    ebx
10005066:	5e                   	pop    esi
10005067:	5f                   	pop    edi
10005068:	5d                   	pop    ebp
10005069:	c3                   	ret    

1000506a <List<NIWindow*>::insertAtHead(NIWindow*)>:
1000506a:	53                   	push   ebx
1000506b:	83 ec 14             	sub    esp,0x14
1000506e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10005072:	6a 0c                	push   0xc
10005074:	e8 fc ff ff ff       	call   10005075 <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	10005075: R_386_PC32	malloc
10005079:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
1000507d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10005084:	89 10                	mov    DWORD PTR [eax],edx
10005086:	83 c4 10             	add    esp,0x10
10005089:	8b 13                	mov    edx,DWORD PTR [ebx]
1000508b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000508e:	85 d2                	test   edx,edx
10005090:	74 05                	je     10005097 <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
10005092:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10005095:	eb 03                	jmp    1000509a <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
10005097:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000509a:	89 03                	mov    DWORD PTR [ebx],eax
1000509c:	83 c4 08             	add    esp,0x8
1000509f:	5b                   	pop    ebx
100050a0:	c3                   	ret    
100050a1:	90                   	nop

100050a2 <List<NIWindow*>::deleteElement(NIWindow*&)>:
100050a2:	57                   	push   edi
100050a3:	56                   	push   esi
100050a4:	53                   	push   ebx
100050a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100050a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100050ad:	8b 19                	mov    ebx,DWORD PTR [ecx]
100050af:	85 db                	test   ebx,ebx
100050b1:	74 5e                	je     10005111 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
100050b3:	8b 30                	mov    esi,DWORD PTR [eax]
100050b5:	89 da                	mov    edx,ebx
100050b7:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
100050ba:	8b 3a                	mov    edi,DWORD PTR [edx]
100050bc:	85 c0                	test   eax,eax
100050be:	74 08                	je     100050c8 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
100050c0:	39 f7                	cmp    edi,esi
100050c2:	73 04                	jae    100050c8 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
100050c4:	89 c2                	mov    edx,eax
100050c6:	eb ef                	jmp    100050b7 <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
100050c8:	39 f7                	cmp    edi,esi
100050ca:	75 45                	jne    10005111 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
100050cc:	39 d3                	cmp    ebx,edx
100050ce:	75 18                	jne    100050e8 <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
100050d0:	89 01                	mov    DWORD PTR [ecx],eax
100050d2:	85 c0                	test   eax,eax
100050d4:	75 09                	jne    100050df <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
100050d6:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
100050dd:	eb 1e                	jmp    100050fd <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100050df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100050e6:	eb 15                	jmp    100050fd <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100050e8:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
100050eb:	85 c0                	test   eax,eax
100050ed:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100050f0:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
100050f3:	74 05                	je     100050fa <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
100050f5:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
100050f8:	eb 03                	jmp    100050fd <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100050fa:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
100050fd:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
10005105:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10005109:	5b                   	pop    ebx
1000510a:	5e                   	pop    esi
1000510b:	5f                   	pop    edi
1000510c:	e9 fc ff ff ff       	jmp    1000510d <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	1000510d: R_386_PC32	operator delete(void*, unsigned long)
10005111:	5b                   	pop    ebx
10005112:	5e                   	pop    esi
10005113:	5f                   	pop    edi
10005114:	c3                   	ret    
10005115:	43                   	inc    ebx
10005116:	3a 2f                	cmp    ch,BYTE PTR [edi]
10005118:	42                   	inc    edx
10005119:	61                   	popa   
1000511a:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000511b:	61                   	popa   
1000511c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000511d:	61                   	popa   
1000511e:	2f                   	das    
1000511f:	53                   	push   ebx
10005120:	79 73                	jns    10005195 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005122:	74 65                	je     10005189 <List<NIWindow*>::deleteElement(NIWindow*&)+0xe7>
10005124:	6d                   	ins    DWORD PTR es:[edi],dx
10005125:	2f                   	das    
10005126:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005127:	65 77 67             	gs ja  10005191 <List<NIWindow*>::deleteElement(NIWindow*&)+0xef>
1000512a:	75 69                	jne    10005195 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
1000512c:	2e 65 78 65          	cs gs js 10005195 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005130:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10005133:	4e                   	dec    esi
10005134:	43                   	inc    ebx
10005135:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10005138:	4e                   	dec    esi
10005139:	32 00                	xor    al,BYTE PTR [eax]
1000513b:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
1000513e:	53                   	push   ebx
1000513f:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
10005142:	43                   	inc    ebx
10005143:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005144:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005145:	74 65                	je     100051ac <List<NIWindow*>::deleteElement(NIWindow*&)+0x10a>
10005147:	78 74                	js     100051bd <List<NIWindow*>::deleteElement(NIWindow*&)+0x11b>
10005149:	3a 3a                	cmp    bh,BYTE PTR [edx]
1000514b:	64 72 76             	fs jb  100051c4 <List<NIWindow*>::deleteElement(NIWindow*&)+0x122>
1000514e:	52                   	push   edx
1000514f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10005151:	64 65 72 54          	fs gs jb 100051a9 <List<NIWindow*>::deleteElement(NIWindow*&)+0x107>
10005155:	54                   	push   esp
10005156:	46                   	inc    esi
10005157:	34 00                	xor    al,0x0
10005159:	43                   	inc    ebx
1000515a:	3a 2f                	cmp    ch,BYTE PTR [edi]
1000515c:	42                   	inc    edx
1000515d:	61                   	popa   
1000515e:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000515f:	61                   	popa   
10005160:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005161:	61                   	popa   
10005162:	2f                   	das    
10005163:	46                   	inc    esi
10005164:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005165:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005166:	74 73                	je     100051db <List<NIWindow*>::deleteElement(NIWindow*&)+0x139>
10005168:	2f                   	das    
10005169:	53                   	push   ebx
1000516a:	46                   	inc    esi
1000516b:	4e                   	dec    esi
1000516c:	00 43 41             	add    BYTE PTR [ebx+0x41],al
1000516f:	4e                   	dec    esi
10005170:	4e                   	dec    esi
10005171:	4f                   	dec    edi
10005172:	54                   	push   esp
10005173:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10005177:	44                   	inc    esp
10005178:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
1000517b:	4e                   	dec    esi
1000517c:	54                   	push   esp
1000517d:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
10005181:	45                   	inc    ebp
10005182:	43                   	inc    ebx
10005183:	54                   	push   esp
10005184:	4f                   	dec    edi
10005185:	52                   	push   edx
10005186:	59                   	pop    ecx
10005187:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
1000518a:	2f                   	das    
1000518b:	42                   	inc    edx
1000518c:	61                   	popa   
1000518d:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000518e:	61                   	popa   
1000518f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005190:	61                   	popa   
10005191:	2f                   	das    
10005192:	46                   	inc    esi
10005193:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005194:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005195:	74 73                	je     1000520a <List<NIWindow*>::deleteElement(NIWindow*&)+0x168>
10005197:	2f                   	das    
10005198:	53                   	push   ebx
10005199:	46                   	inc    esi
1000519a:	4e                   	dec    esi
1000519b:	2f                   	das    
1000519c:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
1000519f:	6e                   	outs   dx,BYTE PTR ds:[esi]
100051a0:	74 20                	je     100051c2 <List<NIWindow*>::deleteElement(NIWindow*&)+0x120>
100051a2:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
100051a9:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
100051b0:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
100051b4:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
100051ba:	6e                   	outs   dx,BYTE PTR ds:[esi]
100051bb:	74 3a                	je     100051f7 <List<NIWindow*>::deleteElement(NIWindow*&)+0x155>
100051bd:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
100051c3:	53                   	push   ebx
100051c4:	46                   	inc    esi
100051c5:	4e                   	dec    esi
100051c6:	5f                   	pop    edi
100051c7:	52                   	push   edx
100051c8:	45                   	inc    ebp
100051c9:	53                   	push   ebx
100051ca:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
100051d0:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
100051d3:	6d                   	ins    DWORD PTR es:[edi],dx
100051d4:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051d5:	72 79                	jb     10005250 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1ae>
100051d7:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
100051da:	6c                   	ins    BYTE PTR es:[edi],dx
100051db:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051dc:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
100051df:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
100051e6:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051e7:	72 00                	jb     100051e9 <List<NIWindow*>::deleteElement(NIWindow*&)+0x147>
100051e9:	42                   	inc    edx
100051ea:	61                   	popa   
100051eb:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
100051ef:	6c                   	ins    BYTE PTR es:[edi],dx
100051f0:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
100051f4:	72 6d                	jb     10005263 <_ssfn__compute_huffman_codes::length_dezigzag+0x3>
100051f6:	61                   	popa   
100051f7:	74 00                	je     100051f9 <List<NIWindow*>::deleteElement(NIWindow*&)+0x157>
100051f9:	4e                   	dec    esi
100051fa:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051fb:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
100051fe:	6e                   	outs   dx,BYTE PTR ds:[esi]
100051ff:	74 20                	je     10005221 <List<NIWindow*>::deleteElement(NIWindow*&)+0x17f>
10005201:	66 61                	popaw  
10005203:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
10005206:	66 6f                	outs   dx,WORD PTR ds:[esi]
10005208:	75 6e                	jne    10005278 <_ssfn__compute_huffman_codes::length_dezigzag+0x18>
1000520a:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
1000520e:	76 61                	jbe    10005271 <_ssfn__compute_huffman_codes::length_dezigzag+0x11>
10005210:	6c                   	ins    BYTE PTR es:[edi],dx
10005211:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
10005219:	20 76 61             	and    BYTE PTR [esi+0x61],dh
1000521c:	6c                   	ins    BYTE PTR es:[edi],dx
1000521d:	75 65                	jne    10005284 <_ssfn__zdist_extra+0x4>
1000521f:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005222:	76 61                	jbe    10005285 <_ssfn__zdist_extra+0x5>
10005224:	6c                   	ins    BYTE PTR es:[edi],dx
10005225:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
1000522d:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005230:	76 61                	jbe    10005293 <_ssfn__zdist_extra+0x13>
10005232:	6c                   	ins    BYTE PTR es:[edi],dx
10005233:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
1000523b:	47                   	inc    edi
1000523c:	6c                   	ins    BYTE PTR es:[edi],dx
1000523d:	79 70                	jns    100052af <_ssfn__zdist_extra+0x2f>
1000523f:	68 20 6e 6f 74       	push   0x746f6e20
10005244:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10005247:	75 6e                	jne    100052b7 <_ssfn__zdist_extra+0x37>
10005249:	64 00 66 90          	add    BYTE PTR fs:[esi-0x70],ah
1000524d:	66 90                	xchg   ax,ax
1000524f:	66 90                	xchg   ax,ax
10005251:	66 90                	xchg   ax,ax
10005253:	66 90                	xchg   ax,ax
10005255:	66 90                	xchg   ax,ax
10005257:	66 90                	xchg   ax,ax
10005259:	66 90                	xchg   ax,ax
1000525b:	66 90                	xchg   ax,ax
1000525d:	66 90                	xchg   ax,ax
1000525f:	90                   	nop

10005260 <_ssfn__compute_huffman_codes::length_dezigzag>:
10005260:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10005270:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

10005280 <_ssfn__zdist_extra>:
	...
10005290:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
100052a0:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
100052b0:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
100052c0:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
100052d0:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
100052e0:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
100052f0:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

10005300 <_ssfn__zdist_base>:
10005300:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
10005310:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
10005320:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
10005330:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
10005340:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
10005350:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10005360:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10005370:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

10005380 <_ssfn__zlength_extra>:
	...
100053a0:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
100053b0:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
100053c0:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
100053d0:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
100053e0:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

10005400 <_ssfn__zlength_base>:
10005400:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
10005410:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
10005420:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
10005430:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
10005440:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
10005450:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10005460:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10005470:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
10005480:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
10005490:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
100054a0:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
100054b0:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
100054c0:	32 0a 00 43 55 52 53 4f 52 53 3a 20 25 64 0a 00     2..CURSORS: %d..
100054d0:	4e 52 4d 4c 00 57 41 49 54 00 54 4c 44 52 00 54     NRML.WAIT.TLDR.T
100054e0:	45 58 54 00 56 45 52 54 00 48 4f 52 5a 00 48 41     EXT.VERT.HORZ.HA
100054f0:	4e 44 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a 20     ND.CURSOR LOAD: 
10005500:	42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b 43 6f 6d     BAD 3..NiLinkCom
10005510:	6d 61 6e 64 43 72 65 61 74 65 57 69 6e 64 6f 77     mandCreateWindow
10005520:	0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e 64 52     ..NiLinkCommandR
10005530:	65 73 75 70 70 6c 79 46 72 61 6d 65 62 75 66 66     esupplyFramebuff
10005540:	65 72 0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e     er..NiLinkComman
10005550:	64 43 6c 65 61 72 46 72 61 6d 65 62 75 66 66 65     dClearFramebuffe
10005560:	72 0a 00 41 53 53 45 52 54 49 4f 4e 20 46 41 49     r..ASSERTION FAI
10005570:	4c 55 52 45 20 28 41 29 2e 00                       LURE (A)..
