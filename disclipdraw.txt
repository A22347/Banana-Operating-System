
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <clipdrawPanicHandler(char*)>:
10000000:	57                   	push   edi
10000001:	56                   	push   esi
10000002:	53                   	push   ebx
10000003:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10000005: R_386_32	screen
10000009:	8b 03                	mov    eax,DWORD PTR [ebx]
1000000b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
1000000e:	83 ec 0c             	sub    esp,0xc
10000011:	53                   	push   ebx
10000012:	e8 fc ff ff ff       	call   10000013 <clipdrawPanicHandler(char*)+0x13>	10000013: R_386_PC32	Video::getHeight()
10000017:	89 c7                	mov    edi,eax
10000019:	58                   	pop    eax
1000001a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000001c: R_386_32	screen
10000020:	e8 fc ff ff ff       	call   10000021 <clipdrawPanicHandler(char*)+0x21>	10000021: R_386_PC32	Video::getWidth()
10000025:	5a                   	pop    edx
10000026:	59                   	pop    ecx
10000027:	68 aa 00 00 00       	push   0xaa
1000002c:	57                   	push   edi
1000002d:	50                   	push   eax
1000002e:	6a 00                	push   0x0
10000030:	6a 00                	push   0x0
10000032:	53                   	push   ebx
10000033:	ff d6                	call   esi
10000035:	83 c4 20             	add    esp,0x20
10000038:	5b                   	pop    ebx
10000039:	5e                   	pop    esi
1000003a:	5f                   	pop    edi
1000003b:	c3                   	ret    

1000003c <start(void*)>:
1000003c:	55                   	push   ebp
1000003d:	57                   	push   edi
1000003e:	56                   	push   esi
1000003f:	53                   	push   ebx
10000040:	83 ec 48             	sub    esp,0x48
10000043:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000045: R_386_32	Krnl::guiPanicHandler
	10000049: R_386_32	clipdrawPanicHandler(char*)
1000004d:	68 6f 2b 00 10       	push   0x10002b6f	1000004e: R_386_32	.text
10000052:	e8 fc ff ff ff       	call   10000053 <start(void*)+0x17>	10000053: R_386_PC32	Dbg::kprintf(char const*, ...)
10000057:	e8 fc ff ff ff       	call   10000058 <start(void*)+0x1c>	10000058: R_386_PC32	legacyFontInit()
1000005c:	e8 fc ff ff ff       	call   1000005d <start(void*)+0x21>	1000005d: R_386_PC32	setupCursor()
10000061:	c7 04 24 1c 00 00 00 	mov    DWORD PTR [esp],0x1c
10000068:	e8 fc ff ff ff       	call   10000069 <start(void*)+0x2d>	10000069: R_386_PC32	operator new(unsigned long)
1000006d:	89 c3                	mov    ebx,eax
1000006f:	58                   	pop    eax
10000070:	5a                   	pop    edx
10000071:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000073: R_386_32	screen
10000077:	53                   	push   ebx
10000078:	e8 fc ff ff ff       	call   10000079 <start(void*)+0x3d>	10000079: R_386_PC32	Context::Context(Video*)
1000007d:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000084:	e8 fc ff ff ff       	call   10000085 <start(void*)+0x49>	10000085: R_386_PC32	operator new(unsigned long)
10000089:	89 c6                	mov    esi,eax
1000008b:	59                   	pop    ecx
1000008c:	5f                   	pop    edi
1000008d:	53                   	push   ebx
1000008e:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10000091:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10000094:	6a 00                	push   0x0
10000096:	6a 00                	push   0x0
10000098:	50                   	push   eax
10000099:	e8 fc ff ff ff       	call   1000009a <start(void*)+0x5e>	1000009a: R_386_PC32	Region::Region(int, int, int, int, Context*)
1000009e:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
100000a5:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	100000a7: R_386_32	rootRgn
100000ab:	83 c4 14             	add    esp,0x14
100000ae:	6a 58                	push   0x58
100000b0:	e8 fc ff ff ff       	call   100000b1 <start(void*)+0x75>	100000b1: R_386_PC32	operator new(unsigned long)
100000b5:	89 c7                	mov    edi,eax
100000b7:	83 c4 0c             	add    esp,0xc
100000ba:	53                   	push   ebx
100000bb:	68 aa aa 00 00       	push   0xaaaa
100000c0:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100000c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100000c6:	6a 00                	push   0x0
100000c8:	6a 00                	push   0x0
100000ca:	50                   	push   eax
100000cb:	e8 fc ff ff ff       	call   100000cc <start(void*)+0x90>	100000cc: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
100000d0:	83 c4 18             	add    esp,0x18
100000d3:	57                   	push   edi
100000d4:	56                   	push   esi
100000d5:	e8 fc ff ff ff       	call   100000d6 <start(void*)+0x9a>	100000d6: R_386_PC32	GDO::addChild(GDO*)
100000da:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000e1:	e8 fc ff ff ff       	call   100000e2 <start(void*)+0xa6>	100000e2: R_386_PC32	operator new(unsigned long)
100000e6:	89 c1                	mov    ecx,eax
100000e8:	5d                   	pop    ebp
100000e9:	58                   	pop    eax
100000ea:	6a 06                	push   0x6
100000ec:	51                   	push   ecx
100000ed:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
100000f1:	e8 fc ff ff ff       	call   100000f2 <start(void*)+0xb6>	100000f2: R_386_PC32	Brush::Brush(BrushType)
100000f6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000fd:	e8 fc ff ff ff       	call   100000fe <start(void*)+0xc2>	100000fe: R_386_PC32	operator new(unsigned long)
10000102:	89 c2                	mov    edx,eax
10000104:	58                   	pop    eax
10000105:	59                   	pop    ecx
10000106:	6a 07                	push   0x7
10000108:	52                   	push   edx
10000109:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
1000010d:	e8 fc ff ff ff       	call   1000010e <start(void*)+0xd2>	1000010e: R_386_PC32	Brush::Brush(BrushType)
10000112:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000119:	e8 fc ff ff ff       	call   1000011a <start(void*)+0xde>	1000011a: R_386_PC32	operator new(unsigned long)
1000011e:	89 c5                	mov    ebp,eax
10000120:	5f                   	pop    edi
10000121:	58                   	pop    eax
10000122:	6a 08                	push   0x8
10000124:	55                   	push   ebp
10000125:	e8 fc ff ff ff       	call   10000126 <start(void*)+0xea>	10000126: R_386_PC32	Brush::Brush(BrushType)
1000012a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000131:	e8 fc ff ff ff       	call   10000132 <start(void*)+0xf6>	10000132: R_386_PC32	operator new(unsigned long)
10000136:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000013a:	58                   	pop    eax
1000013b:	5a                   	pop    edx
1000013c:	6a 0a                	push   0xa
1000013e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10000142:	e8 fc ff ff ff       	call   10000143 <start(void*)+0x107>	10000143: R_386_PC32	Brush::Brush(BrushType)
10000147:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000014e:	e8 fc ff ff ff       	call   1000014f <start(void*)+0x113>	1000014f: R_386_PC32	operator new(unsigned long)
10000153:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000157:	59                   	pop    ecx
10000158:	5f                   	pop    edi
10000159:	6a 09                	push   0x9
1000015b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000015f:	e8 fc ff ff ff       	call   10000160 <start(void*)+0x124>	10000160: R_386_PC32	Brush::Brush(BrushType)
10000164:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000016b:	e8 fc ff ff ff       	call   1000016c <start(void*)+0x130>	1000016c: R_386_PC32	operator new(unsigned long)
10000170:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000174:	58                   	pop    eax
10000175:	5a                   	pop    edx
10000176:	6a 0b                	push   0xb
10000178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000017c:	e8 fc ff ff ff       	call   1000017d <start(void*)+0x141>	1000017d: R_386_PC32	Brush::Brush(BrushType)
10000181:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000188:	e8 fc ff ff ff       	call   10000189 <start(void*)+0x14d>	10000189: R_386_PC32	operator new(unsigned long)
1000018d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10000191:	59                   	pop    ecx
10000192:	5f                   	pop    edi
10000193:	6a 0c                	push   0xc
10000195:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10000199:	e8 fc ff ff ff       	call   1000019a <start(void*)+0x15e>	1000019a: R_386_PC32	Brush::Brush(BrushType)
1000019e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001a5:	e8 fc ff ff ff       	call   100001a6 <start(void*)+0x16a>	100001a6: R_386_PC32	operator new(unsigned long)
100001aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100001ae:	58                   	pop    eax
100001af:	5a                   	pop    edx
100001b0:	6a 0d                	push   0xd
100001b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100001b6:	e8 fc ff ff ff       	call   100001b7 <start(void*)+0x17b>	100001b7: R_386_PC32	Brush::Brush(BrushType)
100001bb:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001c2:	e8 fc ff ff ff       	call   100001c3 <start(void*)+0x187>	100001c3: R_386_PC32	operator new(unsigned long)
100001c7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100001cb:	59                   	pop    ecx
100001cc:	5f                   	pop    edi
100001cd:	6a 0e                	push   0xe
100001cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100001d3:	e8 fc ff ff ff       	call   100001d4 <start(void*)+0x198>	100001d4: R_386_PC32	Brush::Brush(BrushType)
100001d8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001df:	e8 fc ff ff ff       	call   100001e0 <start(void*)+0x1a4>	100001e0: R_386_PC32	operator new(unsigned long)
100001e4:	89 c7                	mov    edi,eax
100001e6:	58                   	pop    eax
100001e7:	5a                   	pop    edx
100001e8:	6a 00                	push   0x0
100001ea:	57                   	push   edi
100001eb:	e8 fc ff ff ff       	call   100001ec <start(void*)+0x1b0>	100001ec: R_386_PC32	Brush::Brush(BrushType)
100001f0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001f7:	e8 fc ff ff ff       	call   100001f8 <start(void*)+0x1bc>	100001f8: R_386_PC32	operator new(unsigned long)
100001fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10000200:	59                   	pop    ecx
10000201:	58                   	pop    eax
10000202:	6a 04                	push   0x4
10000204:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000208:	e8 fc ff ff ff       	call   10000209 <start(void*)+0x1cd>	10000209: R_386_PC32	Brush::Brush(BrushType)
1000020d:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000214:	e8 fc ff ff ff       	call   10000215 <start(void*)+0x1d9>	10000215: R_386_PC32	operator new(unsigned long)
10000219:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000021d:	58                   	pop    eax
1000021e:	5a                   	pop    edx
1000021f:	6a 0f                	push   0xf
10000221:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
10000225:	e8 fc ff ff ff       	call   10000226 <start(void*)+0x1ea>	10000226: R_386_PC32	Brush::Brush(BrushType)
1000022a:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000231:	e8 fc ff ff ff       	call   10000232 <start(void*)+0x1f6>	10000232: R_386_PC32	operator new(unsigned long)
10000236:	83 c4 0c             	add    esp,0xc
10000239:	53                   	push   ebx
1000023a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
1000023e:	51                   	push   ecx
1000023f:	6a 64                	push   0x64
10000241:	6a 64                	push   0x64
10000243:	6a 32                	push   0x32
10000245:	6a 32                	push   0x32
10000247:	50                   	push   eax
10000248:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000024c:	e8 fc ff ff ff       	call   1000024d <start(void*)+0x211>	1000024d: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000251:	83 c4 18             	add    esp,0x18
10000254:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000258:	50                   	push   eax
10000259:	56                   	push   esi
1000025a:	e8 fc ff ff ff       	call   1000025b <start(void*)+0x21f>	1000025b: R_386_PC32	GDO::addChild(GDO*)
1000025f:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000266:	e8 fc ff ff ff       	call   10000267 <start(void*)+0x22b>	10000267: R_386_PC32	operator new(unsigned long)
1000026b:	83 c4 0c             	add    esp,0xc
1000026e:	53                   	push   ebx
1000026f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10000273:	52                   	push   edx
10000274:	6a 64                	push   0x64
10000276:	6a 64                	push   0x64
10000278:	6a 32                	push   0x32
1000027a:	68 c8 00 00 00       	push   0xc8
1000027f:	50                   	push   eax
10000280:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000284:	e8 fc ff ff ff       	call   10000285 <start(void*)+0x249>	10000285: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000289:	83 c4 18             	add    esp,0x18
1000028c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000290:	50                   	push   eax
10000291:	56                   	push   esi
10000292:	e8 fc ff ff ff       	call   10000293 <start(void*)+0x257>	10000293: R_386_PC32	GDO::addChild(GDO*)
10000297:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000029e:	e8 fc ff ff ff       	call   1000029f <start(void*)+0x263>	1000029f: R_386_PC32	operator new(unsigned long)
100002a3:	83 c4 0c             	add    esp,0xc
100002a6:	53                   	push   ebx
100002a7:	55                   	push   ebp
100002a8:	6a 64                	push   0x64
100002aa:	6a 64                	push   0x64
100002ac:	6a 32                	push   0x32
100002ae:	68 5e 01 00 00       	push   0x15e
100002b3:	50                   	push   eax
100002b4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100002b8:	e8 fc ff ff ff       	call   100002b9 <start(void*)+0x27d>	100002b9: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100002bd:	83 c4 18             	add    esp,0x18
100002c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100002c4:	50                   	push   eax
100002c5:	56                   	push   esi
100002c6:	e8 fc ff ff ff       	call   100002c7 <start(void*)+0x28b>	100002c7: R_386_PC32	GDO::addChild(GDO*)
100002cb:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100002d2:	e8 fc ff ff ff       	call   100002d3 <start(void*)+0x297>	100002d3: R_386_PC32	operator new(unsigned long)
100002d7:	89 c5                	mov    ebp,eax
100002d9:	83 c4 0c             	add    esp,0xc
100002dc:	53                   	push   ebx
100002dd:	57                   	push   edi
100002de:	6a 64                	push   0x64
100002e0:	6a 64                	push   0x64
100002e2:	6a 32                	push   0x32
100002e4:	68 f4 01 00 00       	push   0x1f4
100002e9:	50                   	push   eax
100002ea:	e8 fc ff ff ff       	call   100002eb <start(void*)+0x2af>	100002eb: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100002ef:	83 c4 18             	add    esp,0x18
100002f2:	55                   	push   ebp
100002f3:	56                   	push   esi
100002f4:	e8 fc ff ff ff       	call   100002f5 <start(void*)+0x2b9>	100002f5: R_386_PC32	GDO::addChild(GDO*)
100002f9:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000300:	e8 fc ff ff ff       	call   10000301 <start(void*)+0x2c5>	10000301: R_386_PC32	operator new(unsigned long)
10000305:	89 c7                	mov    edi,eax
10000307:	83 c4 0c             	add    esp,0xc
1000030a:	53                   	push   ebx
1000030b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000030f:	6a 64                	push   0x64
10000311:	6a 64                	push   0x64
10000313:	68 c8 00 00 00       	push   0xc8
10000318:	6a 32                	push   0x32
1000031a:	50                   	push   eax
1000031b:	e8 fc ff ff ff       	call   1000031c <start(void*)+0x2e0>	1000031c: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000320:	83 c4 18             	add    esp,0x18
10000323:	57                   	push   edi
10000324:	56                   	push   esi
10000325:	e8 fc ff ff ff       	call   10000326 <start(void*)+0x2ea>	10000326: R_386_PC32	GDO::addChild(GDO*)
1000032a:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000331:	e8 fc ff ff ff       	call   10000332 <start(void*)+0x2f6>	10000332: R_386_PC32	operator new(unsigned long)
10000336:	89 c7                	mov    edi,eax
10000338:	83 c4 0c             	add    esp,0xc
1000033b:	53                   	push   ebx
1000033c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10000340:	6a 64                	push   0x64
10000342:	6a 64                	push   0x64
10000344:	68 c8 00 00 00       	push   0xc8
10000349:	68 c8 00 00 00       	push   0xc8
1000034e:	50                   	push   eax
1000034f:	e8 fc ff ff ff       	call   10000350 <start(void*)+0x314>	10000350: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000354:	83 c4 18             	add    esp,0x18
10000357:	57                   	push   edi
10000358:	56                   	push   esi
10000359:	e8 fc ff ff ff       	call   1000035a <start(void*)+0x31e>	1000035a: R_386_PC32	GDO::addChild(GDO*)
1000035e:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000365:	e8 fc ff ff ff       	call   10000366 <start(void*)+0x32a>	10000366: R_386_PC32	operator new(unsigned long)
1000036a:	89 c7                	mov    edi,eax
1000036c:	83 c4 0c             	add    esp,0xc
1000036f:	53                   	push   ebx
10000370:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000374:	6a 64                	push   0x64
10000376:	6a 64                	push   0x64
10000378:	68 c8 00 00 00       	push   0xc8
1000037d:	68 5e 01 00 00       	push   0x15e
10000382:	50                   	push   eax
10000383:	e8 fc ff ff ff       	call   10000384 <start(void*)+0x348>	10000384: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000388:	83 c4 18             	add    esp,0x18
1000038b:	57                   	push   edi
1000038c:	56                   	push   esi
1000038d:	e8 fc ff ff ff       	call   1000038e <start(void*)+0x352>	1000038e: R_386_PC32	GDO::addChild(GDO*)
10000392:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000399:	e8 fc ff ff ff       	call   1000039a <start(void*)+0x35e>	1000039a: R_386_PC32	operator new(unsigned long)
1000039e:	89 c7                	mov    edi,eax
100003a0:	83 c4 0c             	add    esp,0xc
100003a3:	53                   	push   ebx
100003a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100003a8:	6a 64                	push   0x64
100003aa:	6a 64                	push   0x64
100003ac:	68 c8 00 00 00       	push   0xc8
100003b1:	68 f4 01 00 00       	push   0x1f4
100003b6:	50                   	push   eax
100003b7:	e8 fc ff ff ff       	call   100003b8 <start(void*)+0x37c>	100003b8: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100003bc:	83 c4 18             	add    esp,0x18
100003bf:	57                   	push   edi
100003c0:	56                   	push   esi
100003c1:	e8 fc ff ff ff       	call   100003c2 <start(void*)+0x386>	100003c2: R_386_PC32	GDO::addChild(GDO*)
100003c6:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100003cd:	e8 fc ff ff ff       	call   100003ce <start(void*)+0x392>	100003ce: R_386_PC32	operator new(unsigned long)
100003d2:	89 c7                	mov    edi,eax
100003d4:	83 c4 0c             	add    esp,0xc
100003d7:	53                   	push   ebx
100003d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100003dc:	6a 64                	push   0x64
100003de:	6a 64                	push   0x64
100003e0:	68 5e 01 00 00       	push   0x15e
100003e5:	6a 32                	push   0x32
100003e7:	50                   	push   eax
100003e8:	e8 fc ff ff ff       	call   100003e9 <start(void*)+0x3ad>	100003e9: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100003ed:	83 c4 18             	add    esp,0x18
100003f0:	57                   	push   edi
100003f1:	56                   	push   esi
100003f2:	e8 fc ff ff ff       	call   100003f3 <start(void*)+0x3b7>	100003f3: R_386_PC32	GDO::addChild(GDO*)
100003f7:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100003fe:	e8 fc ff ff ff       	call   100003ff <start(void*)+0x3c3>	100003ff: R_386_PC32	operator new(unsigned long)
10000403:	89 c7                	mov    edi,eax
10000405:	83 c4 0c             	add    esp,0xc
10000408:	53                   	push   ebx
10000409:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000040d:	6a 64                	push   0x64
1000040f:	6a 64                	push   0x64
10000411:	68 5e 01 00 00       	push   0x15e
10000416:	68 c8 00 00 00       	push   0xc8
1000041b:	50                   	push   eax
1000041c:	e8 fc ff ff ff       	call   1000041d <start(void*)+0x3e1>	1000041d: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000421:	83 c4 18             	add    esp,0x18
10000424:	57                   	push   edi
10000425:	56                   	push   esi
10000426:	e8 fc ff ff ff       	call   10000427 <start(void*)+0x3eb>	10000427: R_386_PC32	GDO::addChild(GDO*)
1000042b:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000432:	e8 fc ff ff ff       	call   10000433 <start(void*)+0x3f7>	10000433: R_386_PC32	operator new(unsigned long)
10000437:	89 c7                	mov    edi,eax
10000439:	83 c4 0c             	add    esp,0xc
1000043c:	53                   	push   ebx
1000043d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000441:	6a 64                	push   0x64
10000443:	6a 64                	push   0x64
10000445:	68 5e 01 00 00       	push   0x15e
1000044a:	68 5e 01 00 00       	push   0x15e
1000044f:	50                   	push   eax
10000450:	e8 fc ff ff ff       	call   10000451 <start(void*)+0x415>	10000451: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000455:	83 c4 18             	add    esp,0x18
10000458:	57                   	push   edi
10000459:	56                   	push   esi
1000045a:	e8 fc ff ff ff       	call   1000045b <start(void*)+0x41f>	1000045b: R_386_PC32	GDO::addChild(GDO*)
1000045f:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000466:	e8 fc ff ff ff       	call   10000467 <start(void*)+0x42b>	10000467: R_386_PC32	operator new(unsigned long)
1000046b:	89 c7                	mov    edi,eax
1000046d:	83 c4 0c             	add    esp,0xc
10000470:	53                   	push   ebx
10000471:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000475:	6a 64                	push   0x64
10000477:	6a 64                	push   0x64
10000479:	68 5e 01 00 00       	push   0x15e
1000047e:	68 f4 01 00 00       	push   0x1f4
10000483:	50                   	push   eax
10000484:	e8 fc ff ff ff       	call   10000485 <start(void*)+0x449>	10000485: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000489:	83 c4 18             	add    esp,0x18
1000048c:	57                   	push   edi
1000048d:	56                   	push   esi
1000048e:	e8 fc ff ff ff       	call   1000048f <start(void*)+0x453>	1000048f: R_386_PC32	GDO::addChild(GDO*)
10000493:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000049a:	e8 fc ff ff ff       	call   1000049b <start(void*)+0x45f>	1000049b: R_386_PC32	operator new(unsigned long)
1000049f:	89 c5                	mov    ebp,eax
100004a1:	59                   	pop    ecx
100004a2:	5f                   	pop    edi
100004a3:	53                   	push   ebx
100004a4:	68 c8 00 00 00       	push   0xc8
100004a9:	68 2c 01 00 00       	push   0x12c
100004ae:	6a 0a                	push   0xa
100004b0:	6a 0a                	push   0xa
100004b2:	50                   	push   eax
100004b3:	e8 fc ff ff ff       	call   100004b4 <start(void*)+0x478>	100004b4: R_386_PC32	Region::Region(int, int, int, int, Context*)
100004b8:	83 c4 18             	add    esp,0x18
100004bb:	55                   	push   ebp
100004bc:	56                   	push   esi
100004bd:	e8 fc ff ff ff       	call   100004be <start(void*)+0x482>	100004be: R_386_PC32	GDO::addChild(GDO*)
100004c2:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100004c9:	e8 fc ff ff ff       	call   100004ca <start(void*)+0x48e>	100004ca: R_386_PC32	operator new(unsigned long)
100004ce:	89 c7                	mov    edi,eax
100004d0:	83 c4 0c             	add    esp,0xc
100004d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
100004d6:	68 ff 00 00 00       	push   0xff
100004db:	68 c8 00 00 00       	push   0xc8
100004e0:	68 2c 01 00 00       	push   0x12c
100004e5:	6a 00                	push   0x0
100004e7:	6a 00                	push   0x0
100004e9:	50                   	push   eax
100004ea:	e8 fc ff ff ff       	call   100004eb <start(void*)+0x4af>	100004eb: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
100004ef:	83 c4 18             	add    esp,0x18
100004f2:	57                   	push   edi
100004f3:	55                   	push   ebp
100004f4:	e8 fc ff ff ff       	call   100004f5 <start(void*)+0x4b9>	100004f5: R_386_PC32	GDO::addChild(GDO*)
100004f9:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000500:	e8 fc ff ff ff       	call   10000501 <start(void*)+0x4c5>	10000501: R_386_PC32	operator new(unsigned long)
10000505:	89 c1                	mov    ecx,eax
10000507:	58                   	pop    eax
10000508:	5a                   	pop    edx
10000509:	6a 09                	push   0x9
1000050b:	51                   	push   ecx
1000050c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
10000510:	e8 fc ff ff ff       	call   10000511 <start(void*)+0x4d5>	10000511: R_386_PC32	Brush::Brush(BrushType)
10000515:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10000519:	c7 41 04 00 ff 00 00 	mov    DWORD PTR [ecx+0x4],0xff00
10000520:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10000524:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000052b:	e8 fc ff ff ff       	call   1000052c <start(void*)+0x4f0>	1000052c: R_386_PC32	operator new(unsigned long)
10000530:	59                   	pop    ecx
10000531:	5f                   	pop    edi
10000532:	6a 07                	push   0x7
10000534:	50                   	push   eax
10000535:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000539:	e8 fc ff ff ff       	call   1000053a <start(void*)+0x4fe>	1000053a: R_386_PC32	Brush::Brush(BrushType)
1000053e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10000542:	c7 42 04 00 88 ff 00 	mov    DWORD PTR [edx+0x4],0xff8800
10000549:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000550:	e8 fc ff ff ff       	call   10000551 <start(void*)+0x515>	10000551: R_386_PC32	operator new(unsigned long)
10000555:	89 c7                	mov    edi,eax
10000557:	58                   	pop    eax
10000558:	5a                   	pop    edx
10000559:	ff 75 04             	push   DWORD PTR [ebp+0x4]
1000055c:	6a 78                	push   0x78
1000055e:	68 c8 00 00 00       	push   0xc8
10000563:	6a 32                	push   0x32
10000565:	6a 32                	push   0x32
10000567:	57                   	push   edi
10000568:	e8 fc ff ff ff       	call   10000569 <start(void*)+0x52d>	10000569: R_386_PC32	Region::Region(int, int, int, int, Context*)
1000056d:	83 c4 18             	add    esp,0x18
10000570:	57                   	push   edi
10000571:	55                   	push   ebp
10000572:	e8 fc ff ff ff       	call   10000573 <start(void*)+0x537>	10000573: R_386_PC32	GDO::addChild(GDO*)
10000577:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000057e:	e8 fc ff ff ff       	call   1000057f <start(void*)+0x543>	1000057f: R_386_PC32	operator new(unsigned long)
10000583:	89 c5                	mov    ebp,eax
10000585:	83 c4 0c             	add    esp,0xc
10000588:	ff 77 04             	push   DWORD PTR [edi+0x4]
1000058b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
1000058f:	51                   	push   ecx
10000590:	6a 46                	push   0x46
10000592:	6a 46                	push   0x46
10000594:	6a 00                	push   0x0
10000596:	6a 00                	push   0x0
10000598:	50                   	push   eax
10000599:	e8 fc ff ff ff       	call   1000059a <start(void*)+0x55e>	1000059a: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000059e:	83 c4 18             	add    esp,0x18
100005a1:	55                   	push   ebp
100005a2:	57                   	push   edi
100005a3:	e8 fc ff ff ff       	call   100005a4 <start(void*)+0x568>	100005a4: R_386_PC32	GDO::addChild(GDO*)
100005a8:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100005af:	e8 fc ff ff ff       	call   100005b0 <start(void*)+0x574>	100005b0: R_386_PC32	operator new(unsigned long)
100005b4:	89 c5                	mov    ebp,eax
100005b6:	83 c4 0c             	add    esp,0xc
100005b9:	ff 77 04             	push   DWORD PTR [edi+0x4]
100005bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100005c0:	52                   	push   edx
100005c1:	6a 46                	push   0x46
100005c3:	6a 55                	push   0x55
100005c5:	6a 14                	push   0x14
100005c7:	6a 64                	push   0x64
100005c9:	50                   	push   eax
100005ca:	e8 fc ff ff ff       	call   100005cb <start(void*)+0x58f>	100005cb: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100005cf:	83 c4 18             	add    esp,0x18
100005d2:	55                   	push   ebp
100005d3:	57                   	push   edi
100005d4:	e8 fc ff ff ff       	call   100005d5 <start(void*)+0x599>	100005d5: R_386_PC32	GDO::addChild(GDO*)
100005d9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100005e0:	e8 fc ff ff ff       	call   100005e1 <start(void*)+0x5a5>	100005e1: R_386_PC32	getLegacyFont(LegacyFontType)
100005e5:	89 c5                	mov    ebp,eax
100005e7:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100005ee:	e8 fc ff ff ff       	call   100005ef <start(void*)+0x5b3>	100005ef: R_386_PC32	operator new(unsigned long)
100005f3:	89 c7                	mov    edi,eax
100005f5:	83 c4 0c             	add    esp,0xc
100005f8:	53                   	push   ebx
100005f9:	6a 00                	push   0x0
100005fb:	68 c2 01 00 00       	push   0x1c2
10000600:	6a 32                	push   0x32
10000602:	68 82 2b 00 10       	push   0x10002b82	10000603: R_386_32	.text
10000607:	55                   	push   ebp
10000608:	50                   	push   eax
10000609:	e8 fc ff ff ff       	call   1000060a <start(void*)+0x5ce>	1000060a: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
1000060e:	83 c4 18             	add    esp,0x18
10000611:	57                   	push   edi
10000612:	56                   	push   esi
10000613:	e8 fc ff ff ff       	call   10000614 <start(void*)+0x5d8>	10000614: R_386_PC32	GDO::addChild(GDO*)
10000618:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
1000061f:	e8 fc ff ff ff       	call   10000620 <start(void*)+0x5e4>	10000620: R_386_PC32	getLegacyFont(LegacyFontType)
10000624:	89 c5                	mov    ebp,eax
10000626:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000062d:	e8 fc ff ff ff       	call   1000062e <start(void*)+0x5f2>	1000062e: R_386_PC32	operator new(unsigned long)
10000632:	89 c7                	mov    edi,eax
10000634:	83 c4 0c             	add    esp,0xc
10000637:	53                   	push   ebx
10000638:	6a 00                	push   0x0
1000063a:	68 c2 01 00 00       	push   0x1c2
1000063f:	68 96 00 00 00       	push   0x96
10000644:	68 93 2b 00 10       	push   0x10002b93	10000645: R_386_32	.text
10000649:	55                   	push   ebp
1000064a:	50                   	push   eax
1000064b:	e8 fc ff ff ff       	call   1000064c <start(void*)+0x610>	1000064c: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
10000650:	83 c4 18             	add    esp,0x18
10000653:	57                   	push   edi
10000654:	56                   	push   esi
10000655:	e8 fc ff ff ff       	call   10000656 <start(void*)+0x61a>	10000656: R_386_PC32	GDO::addChild(GDO*)
1000065a:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
10000661:	e8 fc ff ff ff       	call   10000662 <start(void*)+0x626>	10000662: R_386_PC32	getLegacyFont(LegacyFontType)
10000666:	89 c5                	mov    ebp,eax
10000668:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000066f:	e8 fc ff ff ff       	call   10000670 <start(void*)+0x634>	10000670: R_386_PC32	operator new(unsigned long)
10000674:	89 c7                	mov    edi,eax
10000676:	83 c4 0c             	add    esp,0xc
10000679:	53                   	push   ebx
1000067a:	6a 00                	push   0x0
1000067c:	68 c2 01 00 00       	push   0x1c2
10000681:	68 04 01 00 00       	push   0x104
10000686:	68 a4 2b 00 10       	push   0x10002ba4	10000687: R_386_32	.text
1000068b:	55                   	push   ebp
1000068c:	50                   	push   eax
1000068d:	e8 fc ff ff ff       	call   1000068e <start(void*)+0x652>	1000068e: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
10000692:	83 c4 18             	add    esp,0x18
10000695:	57                   	push   edi
10000696:	56                   	push   esi
10000697:	e8 fc ff ff ff       	call   10000698 <start(void*)+0x65c>	10000698: R_386_PC32	GDO::addChild(GDO*)
1000069c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
100006a3:	e8 fc ff ff ff       	call   100006a4 <start(void*)+0x668>	100006a4: R_386_PC32	getLegacyFont(LegacyFontType)
100006a8:	89 c5                	mov    ebp,eax
100006aa:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100006b1:	e8 fc ff ff ff       	call   100006b2 <start(void*)+0x676>	100006b2: R_386_PC32	operator new(unsigned long)
100006b6:	89 c7                	mov    edi,eax
100006b8:	83 c4 0c             	add    esp,0xc
100006bb:	53                   	push   ebx
100006bc:	6a 00                	push   0x0
100006be:	68 c2 01 00 00       	push   0x1c2
100006c3:	68 5e 01 00 00       	push   0x15e
100006c8:	68 b3 2b 00 10       	push   0x10002bb3	100006c9: R_386_32	.text
100006cd:	55                   	push   ebp
100006ce:	50                   	push   eax
100006cf:	e8 fc ff ff ff       	call   100006d0 <start(void*)+0x694>	100006d0: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
100006d4:	83 c4 18             	add    esp,0x18
100006d7:	57                   	push   edi
100006d8:	56                   	push   esi
100006d9:	e8 fc ff ff ff       	call   100006da <start(void*)+0x69e>	100006da: R_386_PC32	GDO::addChild(GDO*)
100006de:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
100006e5:	e8 fc ff ff ff       	call   100006e6 <start(void*)+0x6aa>	100006e6: R_386_PC32	getLegacyFont(LegacyFontType)
100006ea:	89 c5                	mov    ebp,eax
100006ec:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100006f3:	e8 fc ff ff ff       	call   100006f4 <start(void*)+0x6b8>	100006f4: R_386_PC32	operator new(unsigned long)
100006f8:	89 c7                	mov    edi,eax
100006fa:	83 c4 0c             	add    esp,0xc
100006fd:	53                   	push   ebx
100006fe:	6a 00                	push   0x0
10000700:	68 c2 01 00 00       	push   0x1c2
10000705:	68 c2 01 00 00       	push   0x1c2
1000070a:	68 c9 2b 00 10       	push   0x10002bc9	1000070b: R_386_32	.text
1000070f:	55                   	push   ebp
10000710:	50                   	push   eax
10000711:	e8 fc ff ff ff       	call   10000712 <start(void*)+0x6d6>	10000712: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
10000716:	83 c4 18             	add    esp,0x18
10000719:	57                   	push   edi
1000071a:	56                   	push   esi
1000071b:	e8 fc ff ff ff       	call   1000071c <start(void*)+0x6e0>	1000071c: R_386_PC32	GDO::addChild(GDO*)
10000720:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
10000727:	e8 fc ff ff ff       	call   10000728 <start(void*)+0x6ec>	10000728: R_386_PC32	getLegacyFont(LegacyFontType)
1000072c:	89 c5                	mov    ebp,eax
1000072e:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000735:	e8 fc ff ff ff       	call   10000736 <start(void*)+0x6fa>	10000736: R_386_PC32	operator new(unsigned long)
1000073a:	89 c7                	mov    edi,eax
1000073c:	83 c4 0c             	add    esp,0xc
1000073f:	53                   	push   ebx
10000740:	6a 00                	push   0x0
10000742:	68 d1 01 00 00       	push   0x1d1
10000747:	68 c2 01 00 00       	push   0x1c2
1000074c:	68 c9 2b 00 10       	push   0x10002bc9	1000074d: R_386_32	.text
10000751:	55                   	push   ebp
10000752:	50                   	push   eax
10000753:	e8 fc ff ff ff       	call   10000754 <start(void*)+0x718>	10000754: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
10000758:	83 c4 18             	add    esp,0x18
1000075b:	57                   	push   edi
1000075c:	56                   	push   esi
1000075d:	e8 fc ff ff ff       	call   1000075e <start(void*)+0x722>	1000075e: R_386_PC32	GDO::addChild(GDO*)
10000762:	83 c4 0c             	add    esp,0xc
10000765:	6a 01                	push   0x1
10000767:	6a 00                	push   0x0
10000769:	56                   	push   esi
1000076a:	e8 fc ff ff ff       	call   1000076b <start(void*)+0x72f>	1000076b: R_386_PC32	GDO::update(List<CRect*>*, bool)
1000076f:	e8 fc ff ff ff       	call   10000770 <start(void*)+0x734>	10000770: R_386_PC32	startMouse()
10000774:	83 c4 0c             	add    esp,0xc
10000777:	6a 00                	push   0x0
10000779:	68 c8 00 00 00       	push   0xc8
1000077e:	68 2c 01 00 00       	push   0x12c
10000783:	e8 fc ff ff ff       	call   10000784 <start(void*)+0x748>	10000784: R_386_PC32	processMouse(int, int, int)
10000788:	83 c4 10             	add    esp,0x10
1000078b:	83 ec 0c             	sub    esp,0xc
1000078e:	6a 02                	push   0x2
10000790:	e8 fc ff ff ff       	call   10000791 <start(void*)+0x755>	10000791: R_386_PC32	blockTask(TaskState)
10000795:	eb f1                	jmp    10000788 <start(void*)+0x74c>

10000797 <begin(void*)>:
10000797:	83 ec 18             	sub    esp,0x18
1000079a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000079e:	e8 fc ff ff ff       	call   1000079f <begin(void*)+0x8>	1000079f: R_386_PC32	start(void*)
100007a3:	90                   	nop

100007a4 <Brush::Brush(unsigned int, unsigned int)>:
100007a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100007a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100007ac:	89 10                	mov    DWORD PTR [eax],edx
100007ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100007b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100007b5:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
100007bc:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
100007c3:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
100007ca:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
100007d1:	c3                   	ret    

100007d2 <Brush::Brush(BrushType)>:
100007d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100007d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100007dc:	c7 40 04 ff ff ff ff 	mov    DWORD PTR [eax+0x4],0xffffffff
100007e3:	c6 40 10 ff          	mov    BYTE PTR [eax+0x10],0xff
100007e7:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
100007ee:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
100007f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100007fc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10000803:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10000807:	8d 51 ff             	lea    edx,[ecx-0x1]
1000080a:	83 fa 0e             	cmp    edx,0xe
1000080d:	0f 87 ae 00 00 00    	ja     100008c1 <Brush::Brush(BrushType)+0xef>
10000813:	ff 24 95 e4 2b 00 10 	jmp    DWORD PTR [edx*4+0x10002be4]	10000816: R_386_32	.text
1000081a:	c7 00 aa aa aa 00    	mov    DWORD PTR [eax],0xaaaaaa
10000820:	c3                   	ret    
10000821:	c7 00 80 80 80 00    	mov    DWORD PTR [eax],0x808080
10000827:	c3                   	ret    
10000828:	c7 00 55 55 55 00    	mov    DWORD PTR [eax],0x555555
1000082e:	c3                   	ret    
1000082f:	c7 00 ff ff ff 00    	mov    DWORD PTR [eax],0xffffff
10000835:	c3                   	ret    
10000836:	c6 40 10 00          	mov    BYTE PTR [eax+0x10],0x0
1000083a:	c3                   	ret    
1000083b:	c7 40 10 01 08 04 02 	mov    DWORD PTR [eax+0x10],0x2040801
10000842:	eb 6f                	jmp    100008b3 <Brush::Brush(BrushType)+0xe1>
10000844:	c7 40 10 01 02 04 08 	mov    DWORD PTR [eax+0x10],0x8040201
1000084b:	eb 66                	jmp    100008b3 <Brush::Brush(BrushType)+0xe1>
1000084d:	c7 40 10 01 01 01 0f 	mov    DWORD PTR [eax+0x10],0xf010101
10000854:	eb 5d                	jmp    100008b3 <Brush::Brush(BrushType)+0xe1>
10000856:	c7 40 10 08 14 22 01 	mov    DWORD PTR [eax+0x10],0x1221408
1000085d:	66 c7 40 14 22 14    	mov    WORD PTR [eax+0x14],0x1422
10000863:	c7 40 18 06 00 00 00 	mov    DWORD PTR [eax+0x18],0x6
1000086a:	c7 40 1c 06 00 00 00 	mov    DWORD PTR [eax+0x1c],0x6
10000871:	c3                   	ret    
10000872:	c7 40 10 00 00 00 01 	mov    DWORD PTR [eax+0x10],0x1000000
10000879:	eb 3f                	jmp    100008ba <Brush::Brush(BrushType)+0xe8>
1000087b:	c6 40 10 02          	mov    BYTE PTR [eax+0x10],0x2
1000087f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
10000886:	c3                   	ret    
10000887:	66 c7 40 10 02 01    	mov    WORD PTR [eax+0x10],0x102
1000088d:	eb 0e                	jmp    1000089d <Brush::Brush(BrushType)+0xcb>
1000088f:	66 c7 40 10 02 00    	mov    WORD PTR [eax+0x10],0x2
10000895:	eb 06                	jmp    1000089d <Brush::Brush(BrushType)+0xcb>
10000897:	66 c7 40 10 03 02    	mov    WORD PTR [eax+0x10],0x203
1000089d:	c7 40 18 02 00 00 00 	mov    DWORD PTR [eax+0x18],0x2
100008a4:	c7 40 1c 02 00 00 00 	mov    DWORD PTR [eax+0x1c],0x2
100008ab:	c3                   	ret    
100008ac:	c7 40 10 0c 0c 03 03 	mov    DWORD PTR [eax+0x10],0x3030c0c
100008b3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
100008ba:	c7 40 1c 04 00 00 00 	mov    DWORD PTR [eax+0x1c],0x4
100008c1:	c3                   	ret    

100008c2 <List<CRect*>::length() [clone .isra.0]>:
100008c2:	31 d2                	xor    edx,edx
100008c4:	85 c0                	test   eax,eax
100008c6:	74 06                	je     100008ce <List<CRect*>::length() [clone .isra.0]+0xc>
100008c8:	42                   	inc    edx
100008c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100008cc:	eb f6                	jmp    100008c4 <List<CRect*>::length() [clone .isra.0]+0x2>
100008ce:	89 d0                	mov    eax,edx
100008d0:	c3                   	ret    
100008d1:	90                   	nop

100008d2 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>:
100008d2:	53                   	push   ebx
100008d3:	89 c1                	mov    ecx,eax
100008d5:	89 d3                	mov    ebx,edx
100008d7:	e8 e6 ff ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
100008dc:	39 d8                	cmp    eax,ebx
100008de:	7c 0a                	jl     100008ea <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0x18>
100008e0:	85 db                	test   ebx,ebx
100008e2:	74 06                	je     100008ea <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0x18>
100008e4:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
100008e7:	4b                   	dec    ebx
100008e8:	eb f6                	jmp    100008e0 <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0xe>
100008ea:	89 c8                	mov    eax,ecx
100008ec:	5b                   	pop    ebx
100008ed:	c3                   	ret    

100008ee <CRect::CRect()>:
100008ee:	c3                   	ret    
100008ef:	90                   	nop

100008f0 <CRect::CRect(int, int, int, int)>:
100008f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100008f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100008f8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
100008fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100008ff:	89 10                	mov    DWORD PTR [eax],edx
10000901:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000905:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10000908:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000090c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000090f:	c3                   	ret    

10000910 <CRect::intersect(CRect*)>:
10000910:	55                   	push   ebp
10000911:	57                   	push   edi
10000912:	56                   	push   esi
10000913:	53                   	push   ebx
10000914:	83 ec 1c             	sub    esp,0x1c
10000917:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
1000091b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
1000091f:	8b 0f                	mov    ecx,DWORD PTR [edi]
10000921:	8b 75 04             	mov    esi,DWORD PTR [ebp+0x4]
10000924:	31 c0                	xor    eax,eax
10000926:	39 f1                	cmp    ecx,esi
10000928:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000092c:	7f 7f                	jg     100009ad <CRect::intersect(CRect*)+0x9d>
1000092e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
10000931:	89 04 24             	mov    DWORD PTR [esp],eax
10000934:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
10000937:	31 c0                	xor    eax,eax
10000939:	39 14 24             	cmp    DWORD PTR [esp],edx
1000093c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10000940:	7c 6b                	jl     100009ad <CRect::intersect(CRect*)+0x9d>
10000942:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
10000945:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000949:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
1000094c:	31 c0                	xor    eax,eax
1000094e:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
10000952:	7f 59                	jg     100009ad <CRect::intersect(CRect*)+0x9d>
10000954:	8b 7f 0c             	mov    edi,DWORD PTR [edi+0xc]
10000957:	8b 6d 08             	mov    ebp,DWORD PTR [ebp+0x8]
1000095a:	39 ef                	cmp    edi,ebp
1000095c:	7c 4f                	jl     100009ad <CRect::intersect(CRect*)+0x9d>
1000095e:	83 ec 0c             	sub    esp,0xc
10000961:	6a 10                	push   0x10
10000963:	e8 fc ff ff ff       	call   10000964 <CRect::intersect(CRect*)+0x54>	10000964: R_386_PC32	malloc
10000968:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
1000096c:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
1000096f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10000973:	89 08                	mov    DWORD PTR [eax],ecx
10000975:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
10000978:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000097c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000097f:	83 c4 10             	add    esp,0x10
10000982:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000986:	39 d1                	cmp    ecx,edx
10000988:	7f 02                	jg     1000098c <CRect::intersect(CRect*)+0x7c>
1000098a:	89 10                	mov    DWORD PTR [eax],edx
1000098c:	39 6c 24 04          	cmp    DWORD PTR [esp+0x4],ebp
10000990:	7f 03                	jg     10000995 <CRect::intersect(CRect*)+0x85>
10000992:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
10000995:	3b 30                	cmp    esi,DWORD PTR [eax]
10000997:	7c 08                	jl     100009a1 <CRect::intersect(CRect*)+0x91>
10000999:	3b 34 24             	cmp    esi,DWORD PTR [esp]
1000099c:	7f 03                	jg     100009a1 <CRect::intersect(CRect*)+0x91>
1000099e:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
100009a1:	3b 58 08             	cmp    ebx,DWORD PTR [eax+0x8]
100009a4:	7c 07                	jl     100009ad <CRect::intersect(CRect*)+0x9d>
100009a6:	39 fb                	cmp    ebx,edi
100009a8:	7f 03                	jg     100009ad <CRect::intersect(CRect*)+0x9d>
100009aa:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
100009ad:	83 c4 1c             	add    esp,0x1c
100009b0:	5b                   	pop    ebx
100009b1:	5e                   	pop    esi
100009b2:	5f                   	pop    edi
100009b3:	5d                   	pop    ebp
100009b4:	c3                   	ret    
100009b5:	90                   	nop

100009b6 <Context::Context(Video*)>:
100009b6:	53                   	push   ebx
100009b7:	83 ec 14             	sub    esp,0x14
100009ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100009be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100009c2:	89 03                	mov    DWORD PTR [ebx],eax
100009c4:	50                   	push   eax
100009c5:	e8 fc ff ff ff       	call   100009c6 <Context::Context(Video*)+0x10>	100009c6: R_386_PC32	Video::getWidth()
100009ca:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100009cd:	58                   	pop    eax
100009ce:	ff 33                	push   DWORD PTR [ebx]
100009d0:	e8 fc ff ff ff       	call   100009d1 <Context::Context(Video*)+0x1b>	100009d1: R_386_PC32	Video::getHeight()
100009d5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
100009d8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
100009df:	e8 fc ff ff ff       	call   100009e0 <Context::Context(Video*)+0x2a>	100009e0: R_386_PC32	malloc
100009e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100009eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100009f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
100009f4:	c6 43 14 00          	mov    BYTE PTR [ebx+0x14],0x0
100009f8:	83 c4 18             	add    esp,0x18
100009fb:	5b                   	pop    ebx
100009fc:	c3                   	ret    
100009fd:	90                   	nop

100009fe <Context::clippedRect(int, int, int, int, CRect*, Brush*)>:
100009fe:	55                   	push   ebp
100009ff:	57                   	push   edi
10000a00:	56                   	push   esi
10000a01:	53                   	push   ebx
10000a02:	83 ec 2c             	sub    esp,0x2c
10000a05:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10000a09:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000a0d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
10000a11:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
10000a15:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
10000a19:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10000a1d:	01 f9                	add    ecx,edi
10000a1f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10000a23:	01 f0                	add    eax,esi
10000a25:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
10000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10000a2c:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
10000a2f:	01 fe                	add    esi,edi
10000a31:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
10000a35:	03 4d 0c             	add    ecx,DWORD PTR [ebp+0xc]
10000a38:	01 f8                	add    eax,edi
10000a3a:	8b 32                	mov    esi,DWORD PTR [edx]
10000a3c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10000a40:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
10000a44:	7d 08                	jge    10000a4e <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x50>
10000a46:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10000a4a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10000a4e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
10000a51:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
10000a55:	7d 04                	jge    10000a5b <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x5d>
10000a57:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10000a5b:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
10000a5e:	47                   	inc    edi
10000a5f:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10000a63:	39 cf                	cmp    edi,ecx
10000a65:	7e 04                	jle    10000a6b <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x6d>
10000a67:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10000a6b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
10000a6e:	8d 4a 01             	lea    ecx,[edx+0x1]
10000a71:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
10000a75:	39 c1                	cmp    ecx,eax
10000a77:	7e 04                	jle    10000a7d <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x7f>
10000a79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000a7d:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
10000a81:	7d 62                	jge    10000ae5 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe7>
10000a83:	89 f0                	mov    eax,esi
10000a85:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000a89:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
10000a8c:	99                   	cdq    
10000a8d:	f7 7b 1c             	idiv   DWORD PTR [ebx+0x1c]
10000a90:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000a94:	0f b6 44 13 10       	movzx  eax,BYTE PTR [ebx+edx*1+0x10]
10000a99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000a9d:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
10000aa1:	7d 3f                	jge    10000ae2 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe4>
10000aa3:	89 f8                	mov    eax,edi
10000aa5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000aa9:	03 43 08             	add    eax,DWORD PTR [ebx+0x8]
10000aac:	99                   	cdq    
10000aad:	f7 7b 18             	idiv   DWORD PTR [ebx+0x18]
10000ab0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000ab4:	0f a3 d0             	bt     eax,edx
10000ab7:	73 0f                	jae    10000ac8 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xca>
10000ab9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000abc:	8b 10                	mov    edx,DWORD PTR [eax]
10000abe:	ff 33                	push   DWORD PTR [ebx]
10000ac0:	56                   	push   esi
10000ac1:	57                   	push   edi
10000ac2:	50                   	push   eax
10000ac3:	ff 52 24             	call   DWORD PTR [edx+0x24]
10000ac6:	eb 14                	jmp    10000adc <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xde>
10000ac8:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10000acb:	83 fa ff             	cmp    edx,0xffffffff
10000ace:	74 0f                	je     10000adf <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe1>
10000ad0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000ad3:	8b 08                	mov    ecx,DWORD PTR [eax]
10000ad5:	52                   	push   edx
10000ad6:	56                   	push   esi
10000ad7:	57                   	push   edi
10000ad8:	50                   	push   eax
10000ad9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10000adc:	83 c4 10             	add    esp,0x10
10000adf:	47                   	inc    edi
10000ae0:	eb bb                	jmp    10000a9d <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x9f>
10000ae2:	46                   	inc    esi
10000ae3:	eb 98                	jmp    10000a7d <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x7f>
10000ae5:	83 c4 2c             	add    esp,0x2c
10000ae8:	5b                   	pop    ebx
10000ae9:	5e                   	pop    esi
10000aea:	5f                   	pop    edi
10000aeb:	5d                   	pop    ebp
10000aec:	c3                   	ret    
10000aed:	90                   	nop

10000aee <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)>:
10000aee:	55                   	push   ebp
10000aef:	57                   	push   edi
10000af0:	56                   	push   esi
10000af1:	53                   	push   ebx
10000af2:	83 ec 1c             	sub    esp,0x1c
10000af5:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
10000af9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000afd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000b00:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000b04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000b08:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10000b0b:	39 c2                	cmp    edx,eax
10000b0d:	0f 8c c9 00 00 00    	jl     10000bdc <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b13:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10000b17:	01 c5                	add    ebp,eax
10000b19:	8b 19                	mov    ebx,DWORD PTR [ecx]
10000b1b:	39 dd                	cmp    ebp,ebx
10000b1d:	0f 8e b9 00 00 00    	jle    10000bdc <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b23:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10000b27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000b2b:	03 70 10             	add    esi,DWORD PTR [eax+0x10]
10000b2e:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
10000b31:	39 f0                	cmp    eax,esi
10000b33:	0f 8c a3 00 00 00    	jl     10000bdc <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b39:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000b3d:	01 f7                	add    edi,esi
10000b3f:	8b 49 08             	mov    ecx,DWORD PTR [ecx+0x8]
10000b42:	39 cf                	cmp    edi,ecx
10000b44:	0f 8e 92 00 00 00    	jle    10000bdc <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b4a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000b52:	3b 5c 24 04          	cmp    ebx,DWORD PTR [esp+0x4]
10000b56:	7e 08                	jle    10000b60 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x72>
10000b58:	2b 5c 24 04          	sub    ebx,DWORD PTR [esp+0x4]
10000b5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000b60:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10000b64:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
10000b68:	39 ea                	cmp    edx,ebp
10000b6a:	7d 09                	jge    10000b75 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x87>
10000b6c:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
10000b70:	42                   	inc    edx
10000b71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000b75:	31 db                	xor    ebx,ebx
10000b77:	39 f1                	cmp    ecx,esi
10000b79:	7e 04                	jle    10000b7f <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x91>
10000b7b:	29 f1                	sub    ecx,esi
10000b7d:	89 cb                	mov    ebx,ecx
10000b7f:	39 f8                	cmp    eax,edi
10000b81:	7d 07                	jge    10000b8a <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x9c>
10000b83:	29 f0                	sub    eax,esi
10000b85:	40                   	inc    eax
10000b86:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10000b8a:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
10000b8d:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
10000b92:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
10000b96:	89 e8                	mov    eax,ebp
10000b98:	29 f0                	sub    eax,esi
10000b9a:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
10000b9e:	7e 3c                	jle    10000bdc <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000ba0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10000ba4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
10000ba8:	7e 2b                	jle    10000bd5 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xe7>
10000baa:	0f b6 04 3b          	movzx  eax,BYTE PTR [ebx+edi*1]
10000bae:	8b 14 85 00 00 00 00 	mov    edx,DWORD PTR [eax*4+0x0]	10000bb1: R_386_32	palette256
10000bb5:	83 fa ff             	cmp    edx,0xffffffff
10000bb8:	74 18                	je     10000bd2 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xe4>
10000bba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000bbe:	8b 00                	mov    eax,DWORD PTR [eax]
10000bc0:	8b 08                	mov    ecx,DWORD PTR [eax]
10000bc2:	52                   	push   edx
10000bc3:	55                   	push   ebp
10000bc4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000bc8:	01 fa                	add    edx,edi
10000bca:	52                   	push   edx
10000bcb:	50                   	push   eax
10000bcc:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10000bcf:	83 c4 10             	add    esp,0x10
10000bd2:	47                   	inc    edi
10000bd3:	eb cf                	jmp    10000ba4 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xb6>
10000bd5:	45                   	inc    ebp
10000bd6:	03 5c 24 40          	add    ebx,DWORD PTR [esp+0x40]
10000bda:	eb ba                	jmp    10000b96 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xa8>
10000bdc:	83 c4 1c             	add    esp,0x1c
10000bdf:	5b                   	pop    ebx
10000be0:	5e                   	pop    esi
10000be1:	5f                   	pop    edi
10000be2:	5d                   	pop    ebp
10000be3:	c3                   	ret    

10000be4 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)>:
10000be4:	55                   	push   ebp
10000be5:	57                   	push   edi
10000be6:	56                   	push   esi
10000be7:	53                   	push   ebx
10000be8:	83 ec 1c             	sub    esp,0x1c
10000beb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
10000bef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000bf3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000bf6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000bfa:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
10000bfd:	39 c1                	cmp    ecx,eax
10000bff:	0f 8c c1 00 00 00    	jl     10000cc6 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c05:	89 c5                	mov    ebp,eax
10000c07:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10000c0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000c0f:	8b 1e                	mov    ebx,DWORD PTR [esi]
10000c11:	39 d8                	cmp    eax,ebx
10000c13:	0f 8e ad 00 00 00    	jle    10000cc6 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c19:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10000c1d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
10000c21:	03 42 10             	add    eax,DWORD PTR [edx+0x10]
10000c24:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
10000c27:	39 c2                	cmp    edx,eax
10000c29:	0f 8c 97 00 00 00    	jl     10000cc6 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c2f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000c33:	01 c7                	add    edi,eax
10000c35:	8b 76 08             	mov    esi,DWORD PTR [esi+0x8]
10000c38:	39 f7                	cmp    edi,esi
10000c3a:	0f 8e 86 00 00 00    	jle    10000cc6 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c40:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000c48:	39 eb                	cmp    ebx,ebp
10000c4a:	7e 06                	jle    10000c52 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x6e>
10000c4c:	29 eb                	sub    ebx,ebp
10000c4e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000c52:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
10000c56:	7d 07                	jge    10000c5f <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x7b>
10000c58:	29 e9                	sub    ecx,ebp
10000c5a:	41                   	inc    ecx
10000c5b:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10000c5f:	31 db                	xor    ebx,ebx
10000c61:	39 c6                	cmp    esi,eax
10000c63:	7e 04                	jle    10000c69 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x85>
10000c65:	89 f3                	mov    ebx,esi
10000c67:	29 c3                	sub    ebx,eax
10000c69:	39 fa                	cmp    edx,edi
10000c6b:	7d 07                	jge    10000c74 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x90>
10000c6d:	29 c2                	sub    edx,eax
10000c6f:	42                   	inc    edx
10000c70:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
10000c74:	01 d8                	add    eax,ebx
10000c76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000c7a:	39 5c 24 44          	cmp    DWORD PTR [esp+0x44],ebx
10000c7e:	7e 46                	jle    10000cc6 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000c84:	0f b6 34 18          	movzx  esi,BYTE PTR [eax+ebx*1]
10000c88:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
10000c8c:	d3 e6                	shl    esi,cl
10000c8e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10000c92:	39 7c 24 40          	cmp    DWORD PTR [esp+0x40],edi
10000c96:	7e 27                	jle    10000cbf <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xdb>
10000c98:	89 f0                	mov    eax,esi
10000c9a:	84 c0                	test   al,al
10000c9c:	79 1c                	jns    10000cba <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xd6>
10000c9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000ca2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ca4:	8b 10                	mov    edx,DWORD PTR [eax]
10000ca6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000caa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10000cae:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
10000cb2:	51                   	push   ecx
10000cb3:	50                   	push   eax
10000cb4:	ff 52 24             	call   DWORD PTR [edx+0x24]
10000cb7:	83 c4 10             	add    esp,0x10
10000cba:	d1 e6                	shl    esi,1
10000cbc:	47                   	inc    edi
10000cbd:	eb d3                	jmp    10000c92 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xae>
10000cbf:	43                   	inc    ebx
10000cc0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
10000cc4:	eb b4                	jmp    10000c7a <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x96>
10000cc6:	83 c4 1c             	add    esp,0x1c
10000cc9:	5b                   	pop    ebx
10000cca:	5e                   	pop    esi
10000ccb:	5f                   	pop    edi
10000ccc:	5d                   	pop    ebp
10000ccd:	c3                   	ret    

10000cce <Context::drawBitmap8(unsigned char*, int, int, int, int)>:
10000cce:	55                   	push   ebp
10000ccf:	57                   	push   edi
10000cd0:	56                   	push   esi
10000cd1:	53                   	push   ebx
10000cd2:	83 ec 1c             	sub    esp,0x1c
10000cd5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10000cd9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
10000cdd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
10000ce1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000ce4:	8b 00                	mov    eax,DWORD PTR [eax]
10000ce6:	e8 d7 fb ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
10000ceb:	85 c0                	test   eax,eax
10000ced:	74 38                	je     10000d27 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x59>
10000cef:	31 f6                	xor    esi,esi
10000cf1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000cf4:	8b 08                	mov    ecx,DWORD PTR [eax]
10000cf6:	89 c8                	mov    eax,ecx
10000cf8:	e8 c5 fb ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
10000cfd:	39 f0                	cmp    eax,esi
10000cff:	7e 68                	jle    10000d69 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x9b>
10000d01:	89 f2                	mov    edx,esi
10000d03:	89 c8                	mov    eax,ecx
10000d05:	e8 c8 fb ff ff       	call   100008d2 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000d0a:	52                   	push   edx
10000d0b:	ff 30                	push   DWORD PTR [eax]
10000d0d:	55                   	push   ebp
10000d0e:	57                   	push   edi
10000d0f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d13:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d1b:	53                   	push   ebx
10000d1c:	e8 fc ff ff ff       	call   10000d1d <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x4f>	10000d1d: R_386_PC32	Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)
10000d21:	46                   	inc    esi
10000d22:	83 c4 20             	add    esp,0x20
10000d25:	eb ca                	jmp    10000cf1 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x23>
10000d27:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10000d2b:	75 3c                	jne    10000d69 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x9b>
10000d2d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000d35:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000d3c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10000d3f:	48                   	dec    eax
10000d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000d44:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000d47:	48                   	dec    eax
10000d48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000d4c:	50                   	push   eax
10000d4d:	8d 44 24 04          	lea    eax,[esp+0x4]
10000d51:	50                   	push   eax
10000d52:	55                   	push   ebp
10000d53:	57                   	push   edi
10000d54:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d60:	53                   	push   ebx
10000d61:	e8 fc ff ff ff       	call   10000d62 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x94>	10000d62: R_386_PC32	Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)
10000d66:	83 c4 20             	add    esp,0x20
10000d69:	83 c4 1c             	add    esp,0x1c
10000d6c:	5b                   	pop    ebx
10000d6d:	5e                   	pop    esi
10000d6e:	5f                   	pop    edi
10000d6f:	5d                   	pop    ebp
10000d70:	c3                   	ret    
10000d71:	90                   	nop

10000d72 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)>:
10000d72:	55                   	push   ebp
10000d73:	57                   	push   edi
10000d74:	56                   	push   esi
10000d75:	53                   	push   ebx
10000d76:	83 ec 1c             	sub    esp,0x1c
10000d79:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10000d7d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000d81:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
10000d85:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000d88:	8b 00                	mov    eax,DWORD PTR [eax]
10000d8a:	e8 33 fb ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
10000d8f:	85 c0                	test   eax,eax
10000d91:	74 3b                	je     10000dce <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x5c>
10000d93:	31 f6                	xor    esi,esi
10000d95:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000d98:	8b 08                	mov    ecx,DWORD PTR [eax]
10000d9a:	89 c8                	mov    eax,ecx
10000d9c:	e8 21 fb ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
10000da1:	39 f0                	cmp    eax,esi
10000da3:	7e 6e                	jle    10000e13 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0xa1>
10000da5:	89 f2                	mov    edx,esi
10000da7:	89 c8                	mov    eax,ecx
10000da9:	e8 24 fb ff ff       	call   100008d2 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000dae:	55                   	push   ebp
10000daf:	ff 30                	push   DWORD PTR [eax]
10000db1:	57                   	push   edi
10000db2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000db6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dbe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dc2:	53                   	push   ebx
10000dc3:	e8 fc ff ff ff       	call   10000dc4 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x52>	10000dc4: R_386_PC32	Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)
10000dc8:	46                   	inc    esi
10000dc9:	83 c4 20             	add    esp,0x20
10000dcc:	eb c7                	jmp    10000d95 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x23>
10000dce:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10000dd2:	75 3f                	jne    10000e13 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0xa1>
10000dd4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000ddc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000de3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10000de6:	48                   	dec    eax
10000de7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000deb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000dee:	48                   	dec    eax
10000def:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000df3:	55                   	push   ebp
10000df4:	8d 44 24 04          	lea    eax,[esp+0x4]
10000df8:	50                   	push   eax
10000df9:	57                   	push   edi
10000dfa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dfe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e0a:	53                   	push   ebx
10000e0b:	e8 fc ff ff ff       	call   10000e0c <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x9a>	10000e0c: R_386_PC32	Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)
10000e10:	83 c4 20             	add    esp,0x20
10000e13:	83 c4 1c             	add    esp,0x1c
10000e16:	5b                   	pop    ebx
10000e17:	5e                   	pop    esi
10000e18:	5f                   	pop    edi
10000e19:	5d                   	pop    ebp
10000e1a:	c3                   	ret    

10000e1b <drawEllipse(unsigned char*, int, int, int, int, bool)>:
10000e1b:	c3                   	ret    

10000e1c <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)>:
10000e1c:	55                   	push   ebp
10000e1d:	57                   	push   edi
10000e1e:	56                   	push   esi
10000e1f:	53                   	push   ebx
10000e20:	83 ec 38             	sub    esp,0x38
10000e23:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10000e27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000e2b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000e2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000e33:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10000e37:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000e3b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
10000e3f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
10000e43:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
10000e47:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10000e4b:	89 f1                	mov    ecx,esi
10000e4d:	0f af cd             	imul   ecx,ebp
10000e50:	51                   	push   ecx
10000e51:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
10000e55:	e8 fc ff ff ff       	call   10000e56 <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)+0x3a>	10000e56: R_386_PC32	malloc
10000e5a:	89 c3                	mov    ebx,eax
10000e5c:	31 c0                	xor    eax,eax
10000e5e:	89 df                	mov    edi,ebx
10000e60:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
10000e64:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000e66:	a1 00 00 00 00       	mov    eax,ds:0x0	10000e67: R_386_32	palette256
10000e6b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10000e6f:	8b 3d fc 03 00 00    	mov    edi,DWORD PTR ds:0x3fc	10000e71: R_386_32	palette256
10000e75:	c7 05 00 00 00 00 ff ff ff ff 	mov    DWORD PTR ds:0x0,0xffffffff	10000e77: R_386_32	palette256
10000e7f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
10000e83:	89 15 fc 03 00 00    	mov    DWORD PTR ds:0x3fc,edx	10000e85: R_386_32	palette256
10000e89:	58                   	pop    eax
10000e8a:	5a                   	pop    edx
10000e8b:	55                   	push   ebp
10000e8c:	56                   	push   esi
10000e8d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000e91:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000e95:	53                   	push   ebx
10000e96:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000e9a:	e8 fc ff ff ff       	call   10000e9b <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)+0x7f>	10000e9b: R_386_PC32	Context::drawBitmap8(unsigned char*, int, int, int, int)
10000e9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10000ea3:	a3 00 00 00 00       	mov    ds:0x0,eax	10000ea4: R_386_32	palette256
10000ea8:	89 3d fc 03 00 00    	mov    DWORD PTR ds:0x3fc,edi	10000eaa: R_386_32	palette256
10000eae:	89 5c 24 60          	mov    DWORD PTR [esp+0x60],ebx
10000eb2:	83 c4 4c             	add    esp,0x4c
10000eb5:	5b                   	pop    ebx
10000eb6:	5e                   	pop    esi
10000eb7:	5f                   	pop    edi
10000eb8:	5d                   	pop    ebp
10000eb9:	e9 fc ff ff ff       	jmp    10000eba <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)+0x9e>	10000eba: R_386_PC32	free

10000ebe <Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)>:
10000ebe:	c7 44 24 20 00 00 ff 00 	mov    DWORD PTR [esp+0x20],0xff0000
10000ec6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
10000ecb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000ecf:	e9 48 ff ff ff       	jmp    10000e1c <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)>

10000ed4 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)>:
10000ed4:	55                   	push   ebp
10000ed5:	57                   	push   edi
10000ed6:	56                   	push   esi
10000ed7:	53                   	push   ebx
10000ed8:	83 ec 1c             	sub    esp,0x1c
10000edb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
10000edf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10000ee3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10000ee7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10000eeb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10000eef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10000ef3:	01 ca                	add    edx,ecx
10000ef5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10000ef9:	01 fe                	add    esi,edi
10000efb:	03 4d 0c             	add    ecx,DWORD PTR [ebp+0xc]
10000efe:	03 7d 10             	add    edi,DWORD PTR [ebp+0x10]
10000f01:	03 55 0c             	add    edx,DWORD PTR [ebp+0xc]
10000f04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000f08:	03 75 10             	add    esi,DWORD PTR [ebp+0x10]
10000f0b:	8b 13                	mov    edx,DWORD PTR [ebx]
10000f0d:	39 ca                	cmp    edx,ecx
10000f0f:	7d 02                	jge    10000f13 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x3f>
10000f11:	89 ca                	mov    edx,ecx
10000f13:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10000f16:	39 f9                	cmp    ecx,edi
10000f18:	7d 02                	jge    10000f1c <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x48>
10000f1a:	89 f9                	mov    ecx,edi
10000f1c:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10000f1f:	8b 2f                	mov    ebp,DWORD PTR [edi]
10000f21:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10000f25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10000f28:	40                   	inc    eax
10000f29:	39 f0                	cmp    eax,esi
10000f2b:	7e 02                	jle    10000f2f <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x5b>
10000f2d:	89 f0                	mov    eax,esi
10000f2f:	29 c8                	sub    eax,ecx
10000f31:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10000f35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000f38:	40                   	inc    eax
10000f39:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10000f3d:	7e 04                	jle    10000f43 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x6f>
10000f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000f43:	29 d0                	sub    eax,edx
10000f45:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10000f49:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
10000f4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10000f51:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10000f55:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
10000f58:	83 c4 1c             	add    esp,0x1c
10000f5b:	5b                   	pop    ebx
10000f5c:	5e                   	pop    esi
10000f5d:	5f                   	pop    edi
10000f5e:	5d                   	pop    ebp
10000f5f:	ff e0                	jmp    eax
10000f61:	90                   	nop

10000f62 <Context::fillRect(int, int, int, int, Brush*)>:
10000f62:	55                   	push   ebp
10000f63:	57                   	push   edi
10000f64:	56                   	push   esi
10000f65:	53                   	push   ebx
10000f66:	83 ec 2c             	sub    esp,0x2c
10000f69:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10000f6d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10000f71:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
10000f75:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10000f79:	01 d8                	add    eax,ebx
10000f7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000f7f:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10000f83:	01 fa                	add    edx,edi
10000f85:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
10000f88:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
10000f8b:	85 db                	test   ebx,ebx
10000f8d:	79 02                	jns    10000f91 <Context::fillRect(int, int, int, int, Brush*)+0x2f>
10000f8f:	31 db                	xor    ebx,ebx
10000f91:	85 ff                	test   edi,edi
10000f93:	79 02                	jns    10000f97 <Context::fillRect(int, int, int, int, Brush*)+0x35>
10000f95:	31 ff                	xor    edi,edi
10000f97:	89 e8                	mov    eax,ebp
10000f99:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
10000f9d:	7e 04                	jle    10000fa3 <Context::fillRect(int, int, int, int, Brush*)+0x41>
10000f9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10000fa3:	29 d8                	sub    eax,ebx
10000fa5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000fa9:	89 c8                	mov    eax,ecx
10000fab:	39 d1                	cmp    ecx,edx
10000fad:	7e 02                	jle    10000fb1 <Context::fillRect(int, int, int, int, Brush*)+0x4f>
10000faf:	89 d0                	mov    eax,edx
10000fb1:	29 f8                	sub    eax,edi
10000fb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000fb7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10000fba:	8b 00                	mov    eax,DWORD PTR [eax]
10000fbc:	e8 01 f9 ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
10000fc1:	85 c0                	test   eax,eax
10000fc3:	74 38                	je     10000ffd <Context::fillRect(int, int, int, int, Brush*)+0x9b>
10000fc5:	31 ed                	xor    ebp,ebp
10000fc7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10000fca:	8b 08                	mov    ecx,DWORD PTR [eax]
10000fcc:	89 c8                	mov    eax,ecx
10000fce:	e8 ef f8 ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
10000fd3:	39 e8                	cmp    eax,ebp
10000fd5:	7e 65                	jle    1000103c <Context::fillRect(int, int, int, int, Brush*)+0xda>
10000fd7:	89 ea                	mov    edx,ebp
10000fd9:	89 c8                	mov    eax,ecx
10000fdb:	e8 f2 f8 ff ff       	call   100008d2 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000fe0:	52                   	push   edx
10000fe1:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10000fe5:	ff 30                	push   DWORD PTR [eax]
10000fe7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000feb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000fef:	57                   	push   edi
10000ff0:	53                   	push   ebx
10000ff1:	56                   	push   esi
10000ff2:	e8 fc ff ff ff       	call   10000ff3 <Context::fillRect(int, int, int, int, Brush*)+0x91>	10000ff3: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
10000ff7:	45                   	inc    ebp
10000ff8:	83 c4 20             	add    esp,0x20
10000ffb:	eb ca                	jmp    10000fc7 <Context::fillRect(int, int, int, int, Brush*)+0x65>
10000ffd:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
10001001:	75 39                	jne    1000103c <Context::fillRect(int, int, int, int, Brush*)+0xda>
10001003:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
1000100b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10001013:	49                   	dec    ecx
10001014:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10001018:	8d 45 ff             	lea    eax,[ebp-0x1]
1000101b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000101f:	50                   	push   eax
10001020:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001024:	8d 44 24 18          	lea    eax,[esp+0x18]
10001028:	50                   	push   eax
10001029:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000102d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001031:	57                   	push   edi
10001032:	53                   	push   ebx
10001033:	56                   	push   esi
10001034:	e8 fc ff ff ff       	call   10001035 <Context::fillRect(int, int, int, int, Brush*)+0xd3>	10001035: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
10001039:	83 c4 20             	add    esp,0x20
1000103c:	83 c4 2c             	add    esp,0x2c
1000103f:	5b                   	pop    ebx
10001040:	5e                   	pop    esi
10001041:	5f                   	pop    edi
10001042:	5d                   	pop    ebp
10001043:	c3                   	ret    

10001044 <Context::fillRect(int, int, int, int, unsigned int)>:
10001044:	55                   	push   ebp
10001045:	57                   	push   edi
10001046:	56                   	push   esi
10001047:	53                   	push   ebx
10001048:	83 ec 2c             	sub    esp,0x2c
1000104b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
1000104f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10001053:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
10001057:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
1000105b:	01 d8                	add    eax,ebx
1000105d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001061:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001065:	01 fa                	add    edx,edi
10001067:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
1000106a:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
1000106d:	85 db                	test   ebx,ebx
1000106f:	79 02                	jns    10001073 <Context::fillRect(int, int, int, int, unsigned int)+0x2f>
10001071:	31 db                	xor    ebx,ebx
10001073:	85 ff                	test   edi,edi
10001075:	79 02                	jns    10001079 <Context::fillRect(int, int, int, int, unsigned int)+0x35>
10001077:	31 ff                	xor    edi,edi
10001079:	89 e8                	mov    eax,ebp
1000107b:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
1000107f:	7e 04                	jle    10001085 <Context::fillRect(int, int, int, int, unsigned int)+0x41>
10001081:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10001085:	29 d8                	sub    eax,ebx
10001087:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000108b:	89 c8                	mov    eax,ecx
1000108d:	39 d1                	cmp    ecx,edx
1000108f:	7e 02                	jle    10001093 <Context::fillRect(int, int, int, int, unsigned int)+0x4f>
10001091:	89 d0                	mov    eax,edx
10001093:	29 f8                	sub    eax,edi
10001095:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001099:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
1000109c:	8b 00                	mov    eax,DWORD PTR [eax]
1000109e:	e8 1f f8 ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
100010a3:	85 c0                	test   eax,eax
100010a5:	74 38                	je     100010df <Context::fillRect(int, int, int, int, unsigned int)+0x9b>
100010a7:	31 ed                	xor    ebp,ebp
100010a9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
100010ac:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ae:	89 c8                	mov    eax,ecx
100010b0:	e8 0d f8 ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
100010b5:	39 e8                	cmp    eax,ebp
100010b7:	7e 65                	jle    1000111e <Context::fillRect(int, int, int, int, unsigned int)+0xda>
100010b9:	89 ea                	mov    edx,ebp
100010bb:	89 c8                	mov    eax,ecx
100010bd:	e8 10 f8 ff ff       	call   100008d2 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
100010c2:	52                   	push   edx
100010c3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100010c7:	ff 30                	push   DWORD PTR [eax]
100010c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100010cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100010d1:	57                   	push   edi
100010d2:	53                   	push   ebx
100010d3:	56                   	push   esi
100010d4:	e8 fc ff ff ff       	call   100010d5 <Context::fillRect(int, int, int, int, unsigned int)+0x91>	100010d5: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
100010d9:	45                   	inc    ebp
100010da:	83 c4 20             	add    esp,0x20
100010dd:	eb ca                	jmp    100010a9 <Context::fillRect(int, int, int, int, unsigned int)+0x65>
100010df:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
100010e3:	75 39                	jne    1000111e <Context::fillRect(int, int, int, int, unsigned int)+0xda>
100010e5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
100010ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
100010f5:	49                   	dec    ecx
100010f6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100010fa:	8d 45 ff             	lea    eax,[ebp-0x1]
100010fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001101:	50                   	push   eax
10001102:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001106:	8d 44 24 18          	lea    eax,[esp+0x18]
1000110a:	50                   	push   eax
1000110b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000110f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001113:	57                   	push   edi
10001114:	53                   	push   ebx
10001115:	56                   	push   esi
10001116:	e8 fc ff ff ff       	call   10001117 <Context::fillRect(int, int, int, int, unsigned int)+0xd3>	10001117: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
1000111b:	83 c4 20             	add    esp,0x20
1000111e:	83 c4 2c             	add    esp,0x2c
10001121:	5b                   	pop    ebx
10001122:	5e                   	pop    esi
10001123:	5f                   	pop    edi
10001124:	5d                   	pop    ebp
10001125:	c3                   	ret    

10001126 <Context::drawHorizontalLine(int, int, int, unsigned int)>:
10001126:	83 ec 14             	sub    esp,0x14
10001129:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000112d:	6a 01                	push   0x1
1000112f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001133:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001137:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000113b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000113f:	e8 fc ff ff ff       	call   10001140 <Context::drawHorizontalLine(int, int, int, unsigned int)+0x1a>	10001140: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10001144:	83 c4 2c             	add    esp,0x2c
10001147:	c3                   	ret    

10001148 <Context::drawVerticalLine(int, int, int, unsigned int)>:
10001148:	83 ec 14             	sub    esp,0x14
1000114b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000114f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10001153:	6a 01                	push   0x1
10001155:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001159:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000115d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001161:	e8 fc ff ff ff       	call   10001162 <Context::drawVerticalLine(int, int, int, unsigned int)+0x1a>	10001162: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10001166:	83 c4 2c             	add    esp,0x2c
10001169:	c3                   	ret    

1000116a <Context::drawRect(int, int, int, int, unsigned int)>:
1000116a:	55                   	push   ebp
1000116b:	57                   	push   edi
1000116c:	56                   	push   esi
1000116d:	53                   	push   ebx
1000116e:	83 ec 28             	sub    esp,0x28
10001171:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10001175:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10001179:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
1000117d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
10001181:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001185:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001189:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
1000118d:	57                   	push   edi
1000118e:	55                   	push   ebp
1000118f:	52                   	push   edx
10001190:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
10001194:	56                   	push   esi
10001195:	53                   	push   ebx
10001196:	e8 fc ff ff ff       	call   10001197 <Context::drawRect(int, int, int, int, unsigned int)+0x2d>	10001197: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
1000119b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000119f:	8d 48 fe             	lea    ecx,[eax-0x2]
100011a2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
100011a6:	8d 42 01             	lea    eax,[edx+0x1]
100011a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
100011ad:	83 c4 14             	add    esp,0x14
100011b0:	57                   	push   edi
100011b1:	51                   	push   ecx
100011b2:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100011b6:	50                   	push   eax
100011b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100011bb:	56                   	push   esi
100011bc:	53                   	push   ebx
100011bd:	e8 fc ff ff ff       	call   100011be <Context::drawRect(int, int, int, int, unsigned int)+0x54>	100011be: R_386_PC32	Context::drawVerticalLine(int, int, int, unsigned int)
100011c2:	83 c4 14             	add    esp,0x14
100011c5:	57                   	push   edi
100011c6:	55                   	push   ebp
100011c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100011cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100011cf:	8d 54 02 ff          	lea    edx,[edx+eax*1-0x1]
100011d3:	52                   	push   edx
100011d4:	56                   	push   esi
100011d5:	53                   	push   ebx
100011d6:	e8 fc ff ff ff       	call   100011d7 <Context::drawRect(int, int, int, int, unsigned int)+0x6d>	100011d7: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
100011db:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
100011df:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
100011e3:	89 4c 24 5c          	mov    DWORD PTR [esp+0x5c],ecx
100011e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100011eb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
100011ef:	8d 44 2e ff          	lea    eax,[esi+ebp*1-0x1]
100011f3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100011f7:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
100011fb:	83 c4 3c             	add    esp,0x3c
100011fe:	5b                   	pop    ebx
100011ff:	5e                   	pop    esi
10001200:	5f                   	pop    edi
10001201:	5d                   	pop    ebp
10001202:	e9 41 ff ff ff       	jmp    10001148 <Context::drawVerticalLine(int, int, int, unsigned int)>
10001207:	90                   	nop

10001208 <Context::ellipse(bool, int, int, int, int, unsigned int)>:
10001208:	55                   	push   ebp
10001209:	57                   	push   edi
1000120a:	56                   	push   esi
1000120b:	53                   	push   ebx
1000120c:	83 ec 1c             	sub    esp,0x1c
1000120f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
10001213:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001217:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
1000121b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
1000121f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
10001223:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10001227:	01 dd                	add    ebp,ebx
10001229:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
1000122d:	01 fa                	add    edx,edi
1000122f:	85 db                	test   ebx,ebx
10001231:	79 02                	jns    10001235 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x2d>
10001233:	31 db                	xor    ebx,ebx
10001235:	85 ff                	test   edi,edi
10001237:	79 02                	jns    1000123b <Context::ellipse(bool, int, int, int, int, unsigned int)+0x33>
10001239:	31 ff                	xor    edi,edi
1000123b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
1000123e:	39 e8                	cmp    eax,ebp
10001240:	7e 02                	jle    10001244 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x3c>
10001242:	89 e8                	mov    eax,ebp
10001244:	29 d8                	sub    eax,ebx
10001246:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000124a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
1000124d:	39 d0                	cmp    eax,edx
1000124f:	7e 02                	jle    10001253 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x4b>
10001251:	89 d0                	mov    eax,edx
10001253:	29 f8                	sub    eax,edi
10001255:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001259:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
1000125c:	8b 00                	mov    eax,DWORD PTR [eax]
1000125e:	e8 5f f6 ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
10001263:	85 c0                	test   eax,eax
10001265:	74 44                	je     100012ab <Context::ellipse(bool, int, int, int, int, unsigned int)+0xa3>
10001267:	31 ed                	xor    ebp,ebp
10001269:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
1000126e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001272:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001275:	8b 08                	mov    ecx,DWORD PTR [eax]
10001277:	89 c8                	mov    eax,ecx
10001279:	e8 44 f6 ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
1000127e:	39 e8                	cmp    eax,ebp
10001280:	7e 4c                	jle    100012ce <Context::ellipse(bool, int, int, int, int, unsigned int)+0xc6>
10001282:	89 ea                	mov    edx,ebp
10001284:	89 c8                	mov    eax,ecx
10001286:	e8 47 f6 ff ff       	call   100008d2 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
1000128b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
1000128f:	ff 30                	push   DWORD PTR [eax]
10001291:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001295:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001299:	57                   	push   edi
1000129a:	53                   	push   ebx
1000129b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
1000129f:	56                   	push   esi
100012a0:	e8 fc ff ff ff       	call   100012a1 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x99>	100012a1: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
100012a5:	45                   	inc    ebp
100012a6:	83 c4 20             	add    esp,0x20
100012a9:	eb c7                	jmp    10001272 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x6a>
100012ab:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
100012af:	75 1d                	jne    100012ce <Context::ellipse(bool, int, int, int, int, unsigned int)+0xc6>
100012b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
100012b5:	6a 00                	push   0x0
100012b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100012bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100012bf:	57                   	push   edi
100012c0:	53                   	push   ebx
100012c1:	0f b6 c9             	movzx  ecx,cl
100012c4:	51                   	push   ecx
100012c5:	56                   	push   esi
100012c6:	e8 fc ff ff ff       	call   100012c7 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xbf>	100012c7: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
100012cb:	83 c4 20             	add    esp,0x20
100012ce:	83 c4 1c             	add    esp,0x1c
100012d1:	5b                   	pop    ebx
100012d2:	5e                   	pop    esi
100012d3:	5f                   	pop    edi
100012d4:	5d                   	pop    ebp
100012d5:	c3                   	ret    

100012d6 <Context::ellipse(bool, int, int, int, int, Brush*)>:
100012d6:	55                   	push   ebp
100012d7:	57                   	push   edi
100012d8:	56                   	push   esi
100012d9:	53                   	push   ebx
100012da:	83 ec 1c             	sub    esp,0x1c
100012dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
100012e1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
100012e5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100012e9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100012ed:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
100012f1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100012f5:	01 dd                	add    ebp,ebx
100012f7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
100012fb:	01 f2                	add    edx,esi
100012fd:	85 db                	test   ebx,ebx
100012ff:	79 02                	jns    10001303 <Context::ellipse(bool, int, int, int, int, Brush*)+0x2d>
10001301:	31 db                	xor    ebx,ebx
10001303:	85 f6                	test   esi,esi
10001305:	79 02                	jns    10001309 <Context::ellipse(bool, int, int, int, int, Brush*)+0x33>
10001307:	31 f6                	xor    esi,esi
10001309:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
1000130c:	39 e8                	cmp    eax,ebp
1000130e:	7e 02                	jle    10001312 <Context::ellipse(bool, int, int, int, int, Brush*)+0x3c>
10001310:	89 e8                	mov    eax,ebp
10001312:	29 d8                	sub    eax,ebx
10001314:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001318:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
1000131b:	39 d0                	cmp    eax,edx
1000131d:	7e 02                	jle    10001321 <Context::ellipse(bool, int, int, int, int, Brush*)+0x4b>
1000131f:	89 d0                	mov    eax,edx
10001321:	29 f0                	sub    eax,esi
10001323:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001327:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
1000132a:	8b 00                	mov    eax,DWORD PTR [eax]
1000132c:	e8 91 f5 ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
10001331:	85 c0                	test   eax,eax
10001333:	74 45                	je     1000137a <Context::ellipse(bool, int, int, int, int, Brush*)+0xa4>
10001335:	31 ed                	xor    ebp,ebp
10001337:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
1000133c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001340:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
10001343:	8b 08                	mov    ecx,DWORD PTR [eax]
10001345:	89 c8                	mov    eax,ecx
10001347:	e8 76 f5 ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
1000134c:	39 e8                	cmp    eax,ebp
1000134e:	7e 4e                	jle    1000139e <Context::ellipse(bool, int, int, int, int, Brush*)+0xc8>
10001350:	89 ea                	mov    edx,ebp
10001352:	89 c8                	mov    eax,ecx
10001354:	e8 79 f5 ff ff       	call   100008d2 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001359:	68 00 00 ff 00       	push   0xff0000
1000135e:	ff 30                	push   DWORD PTR [eax]
10001360:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001364:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001368:	56                   	push   esi
10001369:	53                   	push   ebx
1000136a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
1000136e:	57                   	push   edi
1000136f:	e8 fc ff ff ff       	call   10001370 <Context::ellipse(bool, int, int, int, int, Brush*)+0x9a>	10001370: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
10001374:	45                   	inc    ebp
10001375:	83 c4 20             	add    esp,0x20
10001378:	eb c6                	jmp    10001340 <Context::ellipse(bool, int, int, int, int, Brush*)+0x6a>
1000137a:	80 7f 14 00          	cmp    BYTE PTR [edi+0x14],0x0
1000137e:	75 1e                	jne    1000139e <Context::ellipse(bool, int, int, int, int, Brush*)+0xc8>
10001380:	68 00 00 ff 00       	push   0xff0000
10001385:	6a 00                	push   0x0
10001387:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000138b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000138f:	56                   	push   esi
10001390:	53                   	push   ebx
10001391:	0f b6 c9             	movzx  ecx,cl
10001394:	51                   	push   ecx
10001395:	57                   	push   edi
10001396:	e8 fc ff ff ff       	call   10001397 <Context::ellipse(bool, int, int, int, int, Brush*)+0xc1>	10001397: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
1000139b:	83 c4 20             	add    esp,0x20
1000139e:	83 c4 1c             	add    esp,0x1c
100013a1:	5b                   	pop    ebx
100013a2:	5e                   	pop    esi
100013a3:	5f                   	pop    edi
100013a4:	5d                   	pop    ebp
100013a5:	c3                   	ret    

100013a6 <CRect::split(CRect*)>:
100013a6:	55                   	push   ebp
100013a7:	57                   	push   edi
100013a8:	56                   	push   esi
100013a9:	53                   	push   ebx
100013aa:	83 ec 28             	sub    esp,0x28
100013ad:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
100013b1:	6a 08                	push   0x8
100013b3:	e8 fc ff ff ff       	call   100013b4 <CRect::split(CRect*)+0xe>	100013b4: R_386_PC32	malloc
100013b8:	89 c3                	mov    ebx,eax
100013ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100013c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100013c7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
100013cb:	8b 6a 08             	mov    ebp,DWORD PTR [edx+0x8]
100013ce:	8b 3a                	mov    edi,DWORD PTR [edx]
100013d0:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
100013d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100013d7:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
100013da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100013de:	8b 16                	mov    edx,DWORD PTR [esi]
100013e0:	83 c4 10             	add    esp,0x10
100013e3:	39 d7                	cmp    edi,edx
100013e5:	7f 36                	jg     1000141d <CRect::split(CRect*)+0x77>
100013e7:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
100013eb:	7c 30                	jl     1000141d <CRect::split(CRect*)+0x77>
100013ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100013f1:	83 ec 0c             	sub    esp,0xc
100013f4:	6a 10                	push   0x10
100013f6:	e8 fc ff ff ff       	call   100013f7 <CRect::split(CRect*)+0x51>	100013f7: R_386_PC32	malloc
100013fb:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
100013fe:	89 38                	mov    DWORD PTR [eax],edi
10001400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10001404:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
10001407:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
1000140b:	4a                   	dec    edx
1000140c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000140f:	59                   	pop    ecx
10001410:	5f                   	pop    edi
10001411:	50                   	push   eax
10001412:	53                   	push   ebx
10001413:	e8 fc ff ff ff       	call   10001414 <CRect::split(CRect*)+0x6e>	10001414: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001418:	8b 3e                	mov    edi,DWORD PTR [esi]
1000141a:	83 c4 10             	add    esp,0x10
1000141d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
10001420:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
10001424:	7c 35                	jl     1000145b <CRect::split(CRect*)+0xb5>
10001426:	39 d5                	cmp    ebp,edx
10001428:	7f 31                	jg     1000145b <CRect::split(CRect*)+0xb5>
1000142a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000142e:	83 ec 0c             	sub    esp,0xc
10001431:	6a 10                	push   0x10
10001433:	e8 fc ff ff ff       	call   10001434 <CRect::split(CRect*)+0x8e>	10001434: R_386_PC32	malloc
10001438:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
1000143b:	89 38                	mov    DWORD PTR [eax],edi
1000143d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10001441:	4a                   	dec    edx
10001442:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10001445:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10001449:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
1000144c:	5d                   	pop    ebp
1000144d:	5a                   	pop    edx
1000144e:	50                   	push   eax
1000144f:	53                   	push   ebx
10001450:	e8 fc ff ff ff       	call   10001451 <CRect::split(CRect*)+0xab>	10001451: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001455:	8b 6e 08             	mov    ebp,DWORD PTR [esi+0x8]
10001458:	83 c4 10             	add    esp,0x10
1000145b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
1000145e:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
10001462:	7c 3d                	jl     100014a1 <CRect::split(CRect*)+0xfb>
10001464:	39 fa                	cmp    edx,edi
10001466:	7c 39                	jl     100014a1 <CRect::split(CRect*)+0xfb>
10001468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000146c:	83 ec 0c             	sub    esp,0xc
1000146f:	6a 10                	push   0x10
10001471:	e8 fc ff ff ff       	call   10001472 <CRect::split(CRect*)+0xcc>	10001472: R_386_PC32	malloc
10001476:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
10001479:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
1000147d:	42                   	inc    edx
1000147e:	89 10                	mov    DWORD PTR [eax],edx
10001480:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10001484:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
10001487:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
1000148b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
1000148e:	5a                   	pop    edx
1000148f:	59                   	pop    ecx
10001490:	50                   	push   eax
10001491:	53                   	push   ebx
10001492:	e8 fc ff ff ff       	call   10001493 <CRect::split(CRect*)+0xed>	10001493: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001497:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
1000149a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000149e:	83 c4 10             	add    esp,0x10
100014a1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
100014a4:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
100014a8:	7c 2e                	jl     100014d8 <CRect::split(CRect*)+0x132>
100014aa:	39 ee                	cmp    esi,ebp
100014ac:	7c 2a                	jl     100014d8 <CRect::split(CRect*)+0x132>
100014ae:	83 ec 0c             	sub    esp,0xc
100014b1:	6a 10                	push   0x10
100014b3:	e8 fc ff ff ff       	call   100014b4 <CRect::split(CRect*)+0x10e>	100014b4: R_386_PC32	malloc
100014b8:	46                   	inc    esi
100014b9:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
100014bc:	89 38                	mov    DWORD PTR [eax],edi
100014be:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
100014c2:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
100014c5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100014c9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
100014cc:	5a                   	pop    edx
100014cd:	59                   	pop    ecx
100014ce:	50                   	push   eax
100014cf:	53                   	push   ebx
100014d0:	e8 fc ff ff ff       	call   100014d1 <CRect::split(CRect*)+0x12b>	100014d1: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	89 d8                	mov    eax,ebx
100014da:	83 c4 1c             	add    esp,0x1c
100014dd:	5b                   	pop    ebx
100014de:	5e                   	pop    esi
100014df:	5f                   	pop    edi
100014e0:	5d                   	pop    ebp
100014e1:	c3                   	ret    

100014e2 <Context::clearClipRects()>:
100014e2:	53                   	push   ebx
100014e3:	83 ec 08             	sub    esp,0x8
100014e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100014ea:	c6 43 14 00          	mov    BYTE PTR [ebx+0x14],0x0
100014ee:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
100014f1:	8b 08                	mov    ecx,DWORD PTR [eax]
100014f3:	89 c8                	mov    eax,ecx
100014f5:	e8 c8 f3 ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
100014fa:	85 c0                	test   eax,eax
100014fc:	74 19                	je     10001517 <Context::clearClipRects()+0x35>
100014fe:	50                   	push   eax
100014ff:	50                   	push   eax
10001500:	6a 10                	push   0x10
10001502:	ff 31                	push   DWORD PTR [ecx]
10001504:	e8 fc ff ff ff       	call   10001505 <Context::clearClipRects()+0x23>	10001505: R_386_PC32	operator delete(void*, unsigned long)
10001509:	58                   	pop    eax
1000150a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
1000150d:	e8 fc ff ff ff       	call   1000150e <Context::clearClipRects()+0x2c>	1000150e: R_386_PC32	List<CRect*>::deleteHead()
10001512:	83 c4 10             	add    esp,0x10
10001515:	eb d7                	jmp    100014ee <Context::clearClipRects()+0xc>
10001517:	83 c4 08             	add    esp,0x8
1000151a:	5b                   	pop    ebx
1000151b:	c3                   	ret    

1000151c <Context::subClipRect(CRect*)>:
1000151c:	55                   	push   ebp
1000151d:	57                   	push   edi
1000151e:	56                   	push   esi
1000151f:	53                   	push   ebx
10001520:	83 ec 1c             	sub    esp,0x1c
10001523:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10001527:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000152b:	c6 40 14 01          	mov    BYTE PTR [eax+0x14],0x1
1000152f:	31 db                	xor    ebx,ebx
10001531:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001535:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
10001538:	8b 29                	mov    ebp,DWORD PTR [ecx]
1000153a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000153e:	89 e8                	mov    eax,ebp
10001540:	e8 7d f3 ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
10001545:	39 d8                	cmp    eax,ebx
10001547:	0f 8e d4 00 00 00    	jle    10001621 <Context::subClipRect(CRect*)+0x105>
1000154d:	89 da                	mov    edx,ebx
1000154f:	89 e8                	mov    eax,ebp
10001551:	e8 7c f3 ff ff       	call   100008d2 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001556:	8b 38                	mov    edi,DWORD PTR [eax]
10001558:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
1000155b:	39 17                	cmp    DWORD PTR [edi],edx
1000155d:	7f 1b                	jg     1000157a <Context::subClipRect(CRect*)+0x5e>
1000155f:	8b 16                	mov    edx,DWORD PTR [esi]
10001561:	39 57 04             	cmp    DWORD PTR [edi+0x4],edx
10001564:	7c 14                	jl     1000157a <Context::subClipRect(CRect*)+0x5e>
10001566:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
10001569:	39 57 08             	cmp    DWORD PTR [edi+0x8],edx
1000156c:	7f 0c                	jg     1000157a <Context::subClipRect(CRect*)+0x5e>
1000156e:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
10001571:	39 57 0c             	cmp    DWORD PTR [edi+0xc],edx
10001574:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10001578:	7d 03                	jge    1000157d <Context::subClipRect(CRect*)+0x61>
1000157a:	43                   	inc    ebx
1000157b:	eb b4                	jmp    10001531 <Context::subClipRect(CRect*)+0x15>
1000157d:	39 e8                	cmp    eax,ebp
1000157f:	75 07                	jne    10001588 <Context::subClipRect(CRect*)+0x6c>
10001581:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10001584:	89 19                	mov    DWORD PTR [ecx],ebx
10001586:	eb 19                	jmp    100015a1 <Context::subClipRect(CRect*)+0x85>
10001588:	3b 41 04             	cmp    eax,DWORD PTR [ecx+0x4]
1000158b:	75 08                	jne    10001595 <Context::subClipRect(CRect*)+0x79>
1000158d:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
10001590:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
10001593:	eb 0c                	jmp    100015a1 <Context::subClipRect(CRect*)+0x85>
10001595:	8b 68 08             	mov    ebp,DWORD PTR [eax+0x8]
10001598:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
1000159b:	89 5d 04             	mov    DWORD PTR [ebp+0x4],ebx
1000159e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
100015a1:	8b 19                	mov    ebx,DWORD PTR [ecx]
100015a3:	85 db                	test   ebx,ebx
100015a5:	74 0a                	je     100015b1 <Context::subClipRect(CRect*)+0x95>
100015a7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
100015ae:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
100015b1:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
100015b8:	55                   	push   ebp
100015b9:	55                   	push   ebp
100015ba:	6a 0c                	push   0xc
100015bc:	50                   	push   eax
100015bd:	e8 fc ff ff ff       	call   100015be <Context::subClipRect(CRect*)+0xa2>	100015be: R_386_PC32	operator delete(void*, unsigned long)
100015c2:	58                   	pop    eax
100015c3:	5a                   	pop    edx
100015c4:	56                   	push   esi
100015c5:	57                   	push   edi
100015c6:	e8 fc ff ff ff       	call   100015c7 <Context::subClipRect(CRect*)+0xab>	100015c7: R_386_PC32	CRect::split(CRect*)
100015cb:	89 c5                	mov    ebp,eax
100015cd:	59                   	pop    ecx
100015ce:	5b                   	pop    ebx
100015cf:	6a 10                	push   0x10
100015d1:	57                   	push   edi
100015d2:	e8 fc ff ff ff       	call   100015d3 <Context::subClipRect(CRect*)+0xb7>	100015d3: R_386_PC32	operator delete(void*, unsigned long)
100015d7:	83 c4 10             	add    esp,0x10
100015da:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
100015dd:	89 c8                	mov    eax,ecx
100015df:	e8 de f2 ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
100015e4:	89 c3                	mov    ebx,eax
100015e6:	85 c0                	test   eax,eax
100015e8:	74 1c                	je     10001606 <Context::subClipRect(CRect*)+0xea>
100015ea:	8b 19                	mov    ebx,DWORD PTR [ecx]
100015ec:	83 ec 0c             	sub    esp,0xc
100015ef:	55                   	push   ebp
100015f0:	e8 fc ff ff ff       	call   100015f1 <Context::subClipRect(CRect*)+0xd5>	100015f1: R_386_PC32	List<CRect*>::deleteHead()
100015f5:	59                   	pop    ecx
100015f6:	5f                   	pop    edi
100015f7:	53                   	push   ebx
100015f8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100015fc:	ff 70 18             	push   DWORD PTR [eax+0x18]
100015ff:	e8 fc ff ff ff       	call   10001600 <Context::subClipRect(CRect*)+0xe4>	10001600: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001604:	eb d1                	jmp    100015d7 <Context::subClipRect(CRect*)+0xbb>
10001606:	83 ec 0c             	sub    esp,0xc
10001609:	55                   	push   ebp
1000160a:	e8 fc ff ff ff       	call   1000160b <Context::subClipRect(CRect*)+0xef>	1000160b: R_386_PC32	List<CRect*>::~List()
1000160f:	58                   	pop    eax
10001610:	5a                   	pop    edx
10001611:	6a 08                	push   0x8
10001613:	55                   	push   ebp
10001614:	e8 fc ff ff ff       	call   10001615 <Context::subClipRect(CRect*)+0xf9>	10001615: R_386_PC32	operator delete(void*, unsigned long)
10001619:	83 c4 10             	add    esp,0x10
1000161c:	e9 10 ff ff ff       	jmp    10001531 <Context::subClipRect(CRect*)+0x15>
10001621:	83 c4 1c             	add    esp,0x1c
10001624:	5b                   	pop    ebx
10001625:	5e                   	pop    esi
10001626:	5f                   	pop    edi
10001627:	5d                   	pop    ebp
10001628:	c3                   	ret    
10001629:	90                   	nop

1000162a <Context::addClipRect(CRect*)>:
1000162a:	56                   	push   esi
1000162b:	53                   	push   ebx
1000162c:	83 ec 0c             	sub    esp,0xc
1000162f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10001633:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10001637:	56                   	push   esi
10001638:	53                   	push   ebx
10001639:	e8 fc ff ff ff       	call   1000163a <Context::addClipRect(CRect*)+0x10>	1000163a: R_386_PC32	Context::subClipRect(CRect*)
1000163e:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
10001642:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10001645:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001649:	83 c4 14             	add    esp,0x14
1000164c:	5b                   	pop    ebx
1000164d:	5e                   	pop    esi
1000164e:	e9 fc ff ff ff       	jmp    1000164f <Context::addClipRect(CRect*)+0x25>	1000164f: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001653:	90                   	nop

10001654 <Context::intersectClipRect(CRect*)>:
10001654:	55                   	push   ebp
10001655:	57                   	push   edi
10001656:	56                   	push   esi
10001657:	53                   	push   ebx
10001658:	83 ec 28             	sub    esp,0x28
1000165b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
1000165f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10001663:	c6 46 14 01          	mov    BYTE PTR [esi+0x14],0x1
10001667:	6a 08                	push   0x8
10001669:	e8 fc ff ff ff       	call   1000166a <Context::intersectClipRect(CRect*)+0x16>	1000166a: R_386_PC32	malloc
1000166e:	89 c7                	mov    edi,eax
10001670:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001677:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000167d:	83 c4 10             	add    esp,0x10
10001680:	31 db                	xor    ebx,ebx
10001682:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001685:	8b 08                	mov    ecx,DWORD PTR [eax]
10001687:	89 c8                	mov    eax,ecx
10001689:	e8 34 f2 ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
1000168e:	39 d8                	cmp    eax,ebx
10001690:	7e 59                	jle    100016eb <Context::intersectClipRect(CRect*)+0x97>
10001692:	89 da                	mov    edx,ebx
10001694:	89 c8                	mov    eax,ecx
10001696:	e8 37 f2 ff ff       	call   100008d2 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
1000169b:	51                   	push   ecx
1000169c:	51                   	push   ecx
1000169d:	55                   	push   ebp
1000169e:	ff 30                	push   DWORD PTR [eax]
100016a0:	e8 fc ff ff ff       	call   100016a1 <Context::intersectClipRect(CRect*)+0x4d>	100016a1: R_386_PC32	CRect::intersect(CRect*)
100016a5:	83 c4 10             	add    esp,0x10
100016a8:	85 c0                	test   eax,eax
100016aa:	74 0c                	je     100016b8 <Context::intersectClipRect(CRect*)+0x64>
100016ac:	52                   	push   edx
100016ad:	52                   	push   edx
100016ae:	50                   	push   eax
100016af:	57                   	push   edi
100016b0:	e8 fc ff ff ff       	call   100016b1 <Context::intersectClipRect(CRect*)+0x5d>	100016b1: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100016b5:	83 c4 10             	add    esp,0x10
100016b8:	43                   	inc    ebx
100016b9:	eb c7                	jmp    10001682 <Context::intersectClipRect(CRect*)+0x2e>
100016bb:	85 c0                	test   eax,eax
100016bd:	74 43                	je     10001702 <Context::intersectClipRect(CRect*)+0xae>
100016bf:	85 c9                	test   ecx,ecx
100016c1:	74 f8                	je     100016bb <Context::intersectClipRect(CRect*)+0x67>
100016c3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100016c6:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
100016c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100016cd:	51                   	push   ecx
100016ce:	51                   	push   ecx
100016cf:	6a 0c                	push   0xc
100016d1:	52                   	push   edx
100016d2:	e8 fc ff ff ff       	call   100016d3 <Context::intersectClipRect(CRect*)+0x7f>	100016d3: R_386_PC32	operator delete(void*, unsigned long)
100016d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100016db:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100016de:	83 c4 10             	add    esp,0x10
100016e1:	85 c0                	test   eax,eax
100016e3:	75 14                	jne    100016f9 <Context::intersectClipRect(CRect*)+0xa5>
100016e5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
100016eb:	8b 5e 18             	mov    ebx,DWORD PTR [esi+0x18]
100016ee:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100016f0:	89 c8                	mov    eax,ecx
100016f2:	e8 cb f1 ff ff       	call   100008c2 <List<CRect*>::length() [clone .isra.0]>
100016f7:	eb c2                	jmp    100016bb <Context::intersectClipRect(CRect*)+0x67>
100016f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001700:	eb e9                	jmp    100016eb <Context::intersectClipRect(CRect*)+0x97>
10001702:	83 ec 0c             	sub    esp,0xc
10001705:	53                   	push   ebx
10001706:	e8 fc ff ff ff       	call   10001707 <Context::intersectClipRect(CRect*)+0xb3>	10001707: R_386_PC32	List<CRect*>::~List()
1000170b:	58                   	pop    eax
1000170c:	5a                   	pop    edx
1000170d:	6a 08                	push   0x8
1000170f:	53                   	push   ebx
10001710:	e8 fc ff ff ff       	call   10001711 <Context::intersectClipRect(CRect*)+0xbd>	10001711: R_386_PC32	operator delete(void*, unsigned long)
10001715:	89 7e 18             	mov    DWORD PTR [esi+0x18],edi
10001718:	c7 44 24 44 10 00 00 00 	mov    DWORD PTR [esp+0x44],0x10
10001720:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
10001724:	83 c4 2c             	add    esp,0x2c
10001727:	5b                   	pop    ebx
10001728:	5e                   	pop    esi
10001729:	5f                   	pop    edi
1000172a:	5d                   	pop    ebp
1000172b:	e9 fc ff ff ff       	jmp    1000172c <Context::intersectClipRect(CRect*)+0xd8>	1000172c: R_386_PC32	operator delete(void*, unsigned long)

10001730 <startMouse()>:
10001730:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10001732: R_386_32	guiMouseHandler
	10001736: R_386_32	handleMouse
1000173a:	c3                   	ret    

1000173b <setupCursor()>:
1000173b:	55                   	push   ebp
1000173c:	57                   	push   edi
1000173d:	56                   	push   esi
1000173e:	53                   	push   ebx
1000173f:	83 ec 38             	sub    esp,0x38
10001742:	c7 05 00 00 00 00 2c 01 00 00 	mov    DWORD PTR ds:0x0,0x12c	10001744: R_386_32	krnlMouseX
1000174c:	c7 05 00 00 00 00 c8 00 00 00 	mov    DWORD PTR ds:0x0,0xc8	1000174e: R_386_32	krnlMouseY
10001756:	c7 05 04 00 00 00 2c 01 00 00 	mov    DWORD PTR ds:0x4,0x12c	10001758: R_386_32	rootRgn
10001760:	c7 05 08 00 00 00 c8 00 00 00 	mov    DWORD PTR ds:0x8,0xc8	10001762: R_386_32	rootRgn
1000176a:	c7 05 0c 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xc,0x0	1000176c: R_386_32	rootRgn
10001774:	68 14 01 00 00       	push   0x114
10001779:	e8 fc ff ff ff       	call   1000177a <setupCursor()+0x3f>	1000177a: R_386_PC32	malloc
1000177e:	89 c5                	mov    ebp,eax
10001780:	83 c4 0c             	add    esp,0xc
10001783:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001785: R_386_32	kernelProcess
10001789:	68 20 2c 00 10       	push   0x10002c20	1000178a: R_386_32	.text
1000178e:	50                   	push   eax
1000178f:	e8 fc ff ff ff       	call   10001790 <setupCursor()+0x55>	10001790: R_386_PC32	File::File(char const*, Process*)
10001794:	58                   	pop    eax
10001795:	5a                   	pop    edx
10001796:	6a 01                	push   0x1
10001798:	55                   	push   ebp
10001799:	e8 fc ff ff ff       	call   1000179a <setupCursor()+0x5f>	1000179a: R_386_PC32	File::open(FileOpenMode)
1000179e:	83 c4 10             	add    esp,0x10
100017a1:	85 c0                	test   eax,eax
100017a3:	74 0a                	je     100017af <setupCursor()+0x74>
100017a5:	83 ec 0c             	sub    esp,0xc
100017a8:	68 3f 2c 00 10       	push   0x10002c3f	100017a9: R_386_32	.text
100017ad:	eb 4c                	jmp    100017fb <setupCursor()+0xc0>
100017af:	53                   	push   ebx
100017b0:	8d 44 24 17          	lea    eax,[esp+0x17]
100017b4:	50                   	push   eax
100017b5:	8d 44 24 20          	lea    eax,[esp+0x20]
100017b9:	50                   	push   eax
100017ba:	55                   	push   ebp
100017bb:	e8 fc ff ff ff       	call   100017bc <setupCursor()+0x81>	100017bc: R_386_PC32	File::stat(unsigned long long*, bool*)
100017c0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100017c4:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100017c8:	89 34 24             	mov    DWORD PTR [esp],esi
100017cb:	e8 fc ff ff ff       	call   100017cc <setupCursor()+0x91>	100017cc: R_386_PC32	malloc
100017d0:	89 c3                	mov    ebx,eax
100017d2:	58                   	pop    eax
100017d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100017d6:	8d 54 24 20          	lea    edx,[esp+0x20]
100017da:	52                   	push   edx
100017db:	53                   	push   ebx
100017dc:	57                   	push   edi
100017dd:	56                   	push   esi
100017de:	55                   	push   ebp
100017df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100017e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100017e6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
100017ea:	83 c4 20             	add    esp,0x20
100017ed:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
100017f1:	74 12                	je     10001805 <setupCursor()+0xca>
100017f3:	83 ec 0c             	sub    esp,0xc
100017f6:	68 53 2c 00 10       	push   0x10002c53	100017f7: R_386_32	.text
100017fb:	e8 fc ff ff ff       	call   100017fc <setupCursor()+0xc1>	100017fc: R_386_PC32	Dbg::kprintf(char const*, ...)
10001800:	e9 3d 01 00 00       	jmp    10001942 <setupCursor()+0x207>
10001805:	6a 00                	push   0x0
10001807:	68 04 01 00 00       	push   0x104
1000180c:	52                   	push   edx
1000180d:	50                   	push   eax
1000180e:	e8 fc ff ff ff       	call   1000180f <setupCursor()+0xd4>	1000180f: R_386_PC32	__udivdi3
10001813:	5a                   	pop    edx
10001814:	59                   	pop    ecx
10001815:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001819:	50                   	push   eax
1000181a:	68 67 2c 00 10       	push   0x10002c67	1000181b: R_386_32	.text
1000181f:	e8 fc ff ff ff       	call   10001820 <setupCursor()+0xe5>	10001820: R_386_PC32	Dbg::kprintf(char const*, ...)
10001824:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001827:	e8 fc ff ff ff       	call   10001828 <setupCursor()+0xed>	10001828: R_386_PC32	Dbg::kprintf(char const*, ...)
1000182c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001830:	8d 04 83             	lea    eax,[ebx+eax*4]
10001833:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001837:	83 c4 10             	add    esp,0x10
1000183a:	31 ed                	xor    ebp,ebp
1000183c:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
10001840:	0f 8d f3 00 00 00    	jge    10001939 <setupCursor()+0x1fe>
10001846:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10001849:	50                   	push   eax
1000184a:	6a 04                	push   0x4
1000184c:	68 74 2c 00 10       	push   0x10002c74	1000184d: R_386_32	.text
10001851:	56                   	push   esi
10001852:	e8 fc ff ff ff       	call   10001853 <setupCursor()+0x118>	10001853: R_386_PC32	memcmp
10001857:	83 c4 10             	add    esp,0x10
1000185a:	85 c0                	test   eax,eax
1000185c:	0f 84 b8 00 00 00    	je     1000191a <setupCursor()+0x1df>
10001862:	50                   	push   eax
10001863:	6a 04                	push   0x4
10001865:	68 79 2c 00 10       	push   0x10002c79	10001866: R_386_32	.text
1000186a:	56                   	push   esi
1000186b:	e8 fc ff ff ff       	call   1000186c <setupCursor()+0x131>	1000186c: R_386_PC32	memcmp
10001870:	83 c4 10             	add    esp,0x10
10001873:	85 c0                	test   eax,eax
10001875:	74 7b                	je     100018f2 <setupCursor()+0x1b7>
10001877:	50                   	push   eax
10001878:	6a 04                	push   0x4
1000187a:	68 7e 2c 00 10       	push   0x10002c7e	1000187b: R_386_32	.text
1000187f:	56                   	push   esi
10001880:	e8 fc ff ff ff       	call   10001881 <setupCursor()+0x146>	10001881: R_386_PC32	memcmp
10001885:	83 c4 10             	add    esp,0x10
10001888:	85 c0                	test   eax,eax
1000188a:	74 6d                	je     100018f9 <setupCursor()+0x1be>
1000188c:	57                   	push   edi
1000188d:	6a 04                	push   0x4
1000188f:	68 83 2c 00 10       	push   0x10002c83	10001890: R_386_32	.text
10001894:	56                   	push   esi
10001895:	e8 fc ff ff ff       	call   10001896 <setupCursor()+0x15b>	10001896: R_386_PC32	memcmp
1000189a:	83 c4 10             	add    esp,0x10
1000189d:	85 c0                	test   eax,eax
1000189f:	74 5f                	je     10001900 <setupCursor()+0x1c5>
100018a1:	51                   	push   ecx
100018a2:	6a 04                	push   0x4
100018a4:	68 88 2c 00 10       	push   0x10002c88	100018a5: R_386_32	.text
100018a9:	56                   	push   esi
100018aa:	e8 fc ff ff ff       	call   100018ab <setupCursor()+0x170>	100018ab: R_386_PC32	memcmp
100018af:	83 c4 10             	add    esp,0x10
100018b2:	85 c0                	test   eax,eax
100018b4:	74 51                	je     10001907 <setupCursor()+0x1cc>
100018b6:	52                   	push   edx
100018b7:	6a 04                	push   0x4
100018b9:	68 8d 2c 00 10       	push   0x10002c8d	100018ba: R_386_32	.text
100018be:	56                   	push   esi
100018bf:	e8 fc ff ff ff       	call   100018c0 <setupCursor()+0x185>	100018c0: R_386_PC32	memcmp
100018c4:	83 c4 10             	add    esp,0x10
100018c7:	85 c0                	test   eax,eax
100018c9:	74 43                	je     1000190e <setupCursor()+0x1d3>
100018cb:	50                   	push   eax
100018cc:	6a 04                	push   0x4
100018ce:	68 92 2c 00 10       	push   0x10002c92	100018cf: R_386_32	.text
100018d3:	56                   	push   esi
100018d4:	e8 fc ff ff ff       	call   100018d5 <setupCursor()+0x19a>	100018d5: R_386_PC32	memcmp
100018d9:	83 c4 10             	add    esp,0x10
100018dc:	85 c0                	test   eax,eax
100018de:	74 35                	je     10001915 <setupCursor()+0x1da>
100018e0:	83 ec 0c             	sub    esp,0xc
100018e3:	68 97 2c 00 10       	push   0x10002c97	100018e4: R_386_32	.text
100018e8:	e8 fc ff ff ff       	call   100018e9 <setupCursor()+0x1ae>	100018e9: R_386_PC32	Dbg::kprintf(char const*, ...)
100018ed:	83 c4 10             	add    esp,0x10
100018f0:	eb 47                	jmp    10001939 <setupCursor()+0x1fe>
100018f2:	b8 00 02 00 00       	mov    eax,0x200
100018f7:	eb 21                	jmp    1000191a <setupCursor()+0x1df>
100018f9:	b8 00 03 00 00       	mov    eax,0x300
100018fe:	eb 1a                	jmp    1000191a <setupCursor()+0x1df>
10001900:	b8 00 01 00 00       	mov    eax,0x100
10001905:	eb 13                	jmp    1000191a <setupCursor()+0x1df>
10001907:	b8 00 04 00 00       	mov    eax,0x400
1000190c:	eb 0c                	jmp    1000191a <setupCursor()+0x1df>
1000190e:	b8 00 05 00 00       	mov    eax,0x500
10001913:	eb 05                	jmp    1000191a <setupCursor()+0x1df>
10001915:	b8 00 06 00 00       	mov    eax,0x600
1000191a:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	1000191c: R_386_32	mouse_data
10001920:	b9 00 01 00 00       	mov    ecx,0x100
10001925:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10001929:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000192b:	45                   	inc    ebp
1000192c:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10001934:	e9 03 ff ff ff       	jmp    1000183c <setupCursor()+0x101>
10001939:	83 ec 0c             	sub    esp,0xc
1000193c:	53                   	push   ebx
1000193d:	e8 fc ff ff ff       	call   1000193e <setupCursor()+0x203>	1000193e: R_386_PC32	free
10001942:	83 c4 10             	add    esp,0x10
10001945:	83 c4 2c             	add    esp,0x2c
10001948:	5b                   	pop    ebx
10001949:	5e                   	pop    esi
1000194a:	5f                   	pop    edi
1000194b:	5d                   	pop    ebp
1000194c:	c3                   	ret    

1000194d <processMouse(int, int, int)>:
1000194d:	55                   	push   ebp
1000194e:	57                   	push   edi
1000194f:	56                   	push   esi
10001950:	53                   	push   ebx
10001951:	83 ec 18             	sub    esp,0x18
10001954:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10001958:	6a 08                	push   0x8
1000195a:	e8 fc ff ff ff       	call   1000195b <processMouse(int, int, int)+0xe>	1000195b: R_386_PC32	malloc
1000195f:	89 c6                	mov    esi,eax
10001961:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001968:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000196e:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10001975:	e8 fc ff ff ff       	call   10001976 <processMouse(int, int, int)+0x29>	10001976: R_386_PC32	malloc
1000197a:	89 c3                	mov    ebx,eax
1000197c:	8b 0d 04 00 00 00    	mov    ecx,DWORD PTR ds:0x4	1000197e: R_386_32	rootRgn
10001982:	a1 08 00 00 00       	mov    eax,ds:0x8	10001983: R_386_32	rootRgn
10001987:	8d 69 1f             	lea    ebp,[ecx+0x1f]
1000198a:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000198d:	8d 68 1f             	lea    ebp,[eax+0x1f]
10001990:	55                   	push   ebp
10001991:	51                   	push   ecx
10001992:	50                   	push   eax
10001993:	53                   	push   ebx
10001994:	e8 fc ff ff ff       	call   10001995 <processMouse(int, int, int)+0x48>	10001995: R_386_PC32	CRect::CRect(int, int, int, int)
10001999:	83 c4 14             	add    esp,0x14
1000199c:	6a 0c                	push   0xc
1000199e:	e8 fc ff ff ff       	call   1000199f <processMouse(int, int, int)+0x52>	1000199f: R_386_PC32	malloc
100019a3:	89 18                	mov    DWORD PTR [eax],ebx
100019a5:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
100019a8:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
100019ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100019b2:	83 c4 10             	add    esp,0x10
100019b5:	85 c9                	test   ecx,ecx
100019b7:	74 05                	je     100019be <processMouse(int, int, int)+0x71>
100019b9:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
100019bc:	eb 02                	jmp    100019c0 <processMouse(int, int, int)+0x73>
100019be:	89 06                	mov    DWORD PTR [esi],eax
100019c0:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
100019c3:	55                   	push   ebp
100019c4:	6a 01                	push   0x1
100019c6:	56                   	push   esi
100019c7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100019c9: R_386_32	rootRgn
100019cd:	e8 fc ff ff ff       	call   100019ce <processMouse(int, int, int)+0x81>	100019ce: R_386_PC32	GDO::update(List<CRect*>*, bool)
100019d2:	8b 06                	mov    eax,DWORD PTR [esi]
100019d4:	83 c4 10             	add    esp,0x10
100019d7:	85 c0                	test   eax,eax
100019d9:	74 26                	je     10001a01 <processMouse(int, int, int)+0xb4>
100019db:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
100019de:	51                   	push   ecx
100019df:	51                   	push   ecx
100019e0:	6a 0c                	push   0xc
100019e2:	50                   	push   eax
100019e3:	e8 fc ff ff ff       	call   100019e4 <processMouse(int, int, int)+0x97>	100019e4: R_386_PC32	operator delete(void*, unsigned long)
100019e8:	89 2e                	mov    DWORD PTR [esi],ebp
100019ea:	83 c4 10             	add    esp,0x10
100019ed:	85 ed                	test   ebp,ebp
100019ef:	75 09                	jne    100019fa <processMouse(int, int, int)+0xad>
100019f1:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
100019f8:	eb 07                	jmp    10001a01 <processMouse(int, int, int)+0xb4>
100019fa:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
10001a01:	8b 06                	mov    eax,DWORD PTR [esi]
10001a03:	85 c0                	test   eax,eax
10001a05:	74 14                	je     10001a1b <processMouse(int, int, int)+0xce>
10001a07:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10001a0a:	52                   	push   edx
10001a0b:	52                   	push   edx
10001a0c:	6a 0c                	push   0xc
10001a0e:	50                   	push   eax
10001a0f:	e8 fc ff ff ff       	call   10001a10 <processMouse(int, int, int)+0xc3>	10001a10: R_386_PC32	operator delete(void*, unsigned long)
10001a14:	89 e8                	mov    eax,ebp
10001a16:	83 c4 10             	add    esp,0x10
10001a19:	eb e8                	jmp    10001a03 <processMouse(int, int, int)+0xb6>
10001a1b:	50                   	push   eax
10001a1c:	50                   	push   eax
10001a1d:	6a 08                	push   0x8
10001a1f:	56                   	push   esi
10001a20:	e8 fc ff ff ff       	call   10001a21 <processMouse(int, int, int)+0xd4>	10001a21: R_386_PC32	operator delete(void*, unsigned long)
10001a25:	5a                   	pop    edx
10001a26:	59                   	pop    ecx
10001a27:	6a 10                	push   0x10
10001a29:	53                   	push   ebx
10001a2a:	e8 fc ff ff ff       	call   10001a2b <processMouse(int, int, int)+0xde>	10001a2b: R_386_PC32	operator delete(void*, unsigned long)
10001a2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001a33:	a3 04 00 00 00       	mov    ds:0x4,eax	10001a34: R_386_32	rootRgn
10001a38:	89 3d 08 00 00 00    	mov    DWORD PTR ds:0x8,edi	10001a3a: R_386_32	rootRgn
10001a3e:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a3f: R_386_32	rootRgn
10001a43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10001a46:	8b 10                	mov    edx,DWORD PTR [eax]
10001a48:	8b 0a                	mov    ecx,DWORD PTR [edx]
10001a4a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10001a51:	a1 0c 00 00 00       	mov    eax,ds:0xc	10001a52: R_386_32	rootRgn
10001a56:	05 00 00 00 00       	add    eax,0x0	10001a57: R_386_32	mouse_data
10001a5b:	50                   	push   eax
10001a5c:	57                   	push   edi
10001a5d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
10001a61:	52                   	push   edx
10001a62:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10001a65:	83 c4 2c             	add    esp,0x2c
10001a68:	5b                   	pop    ebx
10001a69:	5e                   	pop    esi
10001a6a:	5f                   	pop    edi
10001a6b:	5d                   	pop    ebp
10001a6c:	c3                   	ret    

10001a6d <handleMouse>:
10001a6d:	53                   	push   ebx
10001a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001a72:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10001a74: R_386_32	krnlMouseX
10001a78:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
10001a7c:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	10001a7e: R_386_32	krnlMouseX
10001a82:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10001a84: R_386_32	krnlMouseY
10001a88:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
10001a8c:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001a8e: R_386_32	krnlMouseY
10001a92:	85 c9                	test   ecx,ecx
10001a94:	7f 0a                	jg     10001aa0 <handleMouse+0x33>
10001a96:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10001a98: R_386_32	krnlMouseX
10001aa0:	85 d2                	test   edx,edx
10001aa2:	7f 0a                	jg     10001aae <handleMouse+0x41>
10001aa4:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10001aa6: R_386_32	krnlMouseY
10001aae:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10001ab0: R_386_32	rootRgn
10001ab4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
10001ab7:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10001aba:	8d 5a ff             	lea    ebx,[edx-0x1]
10001abd:	3b 1d 00 00 00 00    	cmp    ebx,DWORD PTR ds:0x0	10001abf: R_386_32	krnlMouseX
10001ac3:	7f 09                	jg     10001ace <handleMouse+0x61>
10001ac5:	83 ea 02             	sub    edx,0x2
10001ac8:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001aca: R_386_32	krnlMouseX
10001ace:	8b 51 08             	mov    edx,DWORD PTR [ecx+0x8]
10001ad1:	8d 4a ff             	lea    ecx,[edx-0x1]
10001ad4:	3b 0d 00 00 00 00    	cmp    ecx,DWORD PTR ds:0x0	10001ad6: R_386_32	krnlMouseY
10001ada:	7f 09                	jg     10001ae5 <handleMouse+0x78>
10001adc:	83 ea 02             	sub    edx,0x2
10001adf:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001ae1: R_386_32	krnlMouseY
10001ae5:	83 e0 01             	and    eax,0x1
10001ae8:	a3 00 00 00 00       	mov    ds:0x0,eax	10001ae9: R_386_32	krnlButtons
10001aed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001af1:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af2: R_386_32	krnlMouseY
10001af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001afa:	a1 00 00 00 00       	mov    eax,ds:0x0	10001afb: R_386_32	krnlMouseX
10001aff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001b03:	5b                   	pop    ebx
10001b04:	e9 44 fe ff ff       	jmp    1000194d <processMouse(int, int, int)>
10001b09:	90                   	nop

10001b0a <elpsDrawFunc(GDO*)>:
10001b0a:	83 ec 10             	sub    esp,0x10
10001b0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001b11:	ff 70 50             	push   DWORD PTR [eax+0x50]
10001b14:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10001b17:	ff 70 48             	push   DWORD PTR [eax+0x48]
10001b1a:	ff 70 44             	push   DWORD PTR [eax+0x44]
10001b1d:	ff 70 40             	push   DWORD PTR [eax+0x40]
10001b20:	6a 01                	push   0x1
10001b22:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001b25:	e8 fc ff ff ff       	call   10001b26 <elpsDrawFunc(GDO*)+0x1c>	10001b26: R_386_PC32	Context::ellipse(bool, int, int, int, int, unsigned int)
10001b2a:	83 c4 2c             	add    esp,0x2c
10001b2d:	c3                   	ret    

10001b2e <elpsPtnDrawFunc(GDO*)>:
10001b2e:	83 ec 10             	sub    esp,0x10
10001b31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001b35:	ff 70 50             	push   DWORD PTR [eax+0x50]
10001b38:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10001b3b:	ff 70 48             	push   DWORD PTR [eax+0x48]
10001b3e:	ff 70 44             	push   DWORD PTR [eax+0x44]
10001b41:	ff 70 40             	push   DWORD PTR [eax+0x40]
10001b44:	6a 01                	push   0x1
10001b46:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001b49:	e8 fc ff ff ff       	call   10001b4a <elpsPtnDrawFunc(GDO*)+0x1c>	10001b4a: R_386_PC32	Context::ellipse(bool, int, int, int, int, Brush*)
10001b4e:	83 c4 2c             	add    esp,0x2c
10001b51:	c3                   	ret    

10001b52 <Ellipse::Ellipse(int, int, int, int, Brush*, Context*)>:
10001b52:	53                   	push   ebx
10001b53:	83 ec 0c             	sub    esp,0xc
10001b56:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001b5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001b5e:	6a 03                	push   0x3
10001b60:	53                   	push   ebx
10001b61:	e8 fc ff ff ff       	call   10001b62 <Ellipse::Ellipse(int, int, int, int, Brush*, Context*)+0x10>	10001b62: R_386_PC32	GDO::GDO(GDOType, Context*)
10001b66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001b6a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10001b6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001b71:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10001b74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001b78:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10001b7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001b7f:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10001b82:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001b86:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10001b89:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10001b8c: R_386_32	elpsPtnDrawFunc(GDO*)
10001b90:	83 c4 18             	add    esp,0x18
10001b93:	5b                   	pop    ebx
10001b94:	c3                   	ret    
10001b95:	90                   	nop

10001b96 <Ellipse::Ellipse(int, int, int, int, unsigned int, Context*)>:
10001b96:	53                   	push   ebx
10001b97:	83 ec 0c             	sub    esp,0xc
10001b9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001b9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001ba2:	6a 01                	push   0x1
10001ba4:	53                   	push   ebx
10001ba5:	e8 fc ff ff ff       	call   10001ba6 <Ellipse::Ellipse(int, int, int, int, unsigned int, Context*)+0x10>	10001ba6: R_386_PC32	GDO::GDO(GDOType, Context*)
10001baa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001bae:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10001bb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001bb5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10001bb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001bbc:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10001bbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001bc3:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10001bc6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001bca:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10001bcd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10001bd0: R_386_32	elpsDrawFunc(GDO*)
10001bd4:	83 c4 18             	add    esp,0x18
10001bd7:	5b                   	pop    ebx
10001bd8:	c3                   	ret    
10001bd9:	90                   	nop

10001bda <GDO::resetNext()>:
10001bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001bde:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
10001be5:	c3                   	ret    

10001be6 <GDO::GDO(GDOType, Context*)>:
10001be6:	53                   	push   ebx
10001be7:	83 ec 08             	sub    esp,0x8
10001bea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001bee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001bf2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001bf6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
10001bf9:	88 03                	mov    BYTE PTR [ebx],al
10001bfb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
10001c02:	84 c0                	test   al,al
10001c04:	75 45                	jne    10001c4b <GDO::GDO(GDOType, Context*)+0x65>
10001c06:	83 ec 0c             	sub    esp,0xc
10001c09:	68 ab 2c 00 10       	push   0x10002cab	10001c0a: R_386_32	.text
10001c0e:	e8 fc ff ff ff       	call   10001c0f <GDO::GDO(GDOType, Context*)+0x29>	10001c0f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c13:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001c1a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10001c21:	e8 fc ff ff ff       	call   10001c22 <GDO::GDO(GDOType, Context*)+0x3c>	10001c22: R_386_PC32	malloc
10001c26:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10001c29:	59                   	pop    ecx
10001c2a:	5a                   	pop    edx
10001c2b:	50                   	push   eax
10001c2c:	68 c6 2c 00 10       	push   0x10002cc6	10001c2d: R_386_32	.text
10001c31:	e8 fc ff ff ff       	call   10001c32 <GDO::GDO(GDOType, Context*)+0x4c>	10001c32: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10001c39:	83 c4 10             	add    esp,0x10
10001c3c:	31 c0                	xor    eax,eax
10001c3e:	c7 04 82 00 00 00 00 	mov    DWORD PTR [edx+eax*4],0x0
10001c45:	40                   	inc    eax
10001c46:	83 f8 10             	cmp    eax,0x10
10001c49:	75 f3                	jne    10001c3e <GDO::GDO(GDOType, Context*)+0x58>
10001c4b:	83 c4 08             	add    esp,0x8
10001c4e:	5b                   	pop    ebx
10001c4f:	c3                   	ret    

10001c50 <GDO::~GDO()>:
10001c50:	c3                   	ret    
10001c51:	90                   	nop

10001c52 <GDO::getChild(int)>:
10001c52:	56                   	push   esi
10001c53:	53                   	push   ebx
10001c54:	51                   	push   ecx
10001c55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001c59:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001c5d:	81 fb ff 00 00 00    	cmp    ebx,0xff
10001c63:	7e 04                	jle    10001c69 <GDO::getChild(int)+0x17>
10001c65:	31 c0                	xor    eax,eax
10001c67:	eb 2b                	jmp    10001c94 <GDO::getChild(int)+0x42>
10001c69:	83 7e 0c 00          	cmp    DWORD PTR [esi+0xc],0x0
10001c6d:	75 10                	jne    10001c7f <GDO::getChild(int)+0x2d>
10001c6f:	83 ec 0c             	sub    esp,0xc
10001c72:	68 d7 2c 00 10       	push   0x10002cd7	10001c73: R_386_32	.text
10001c77:	e8 fc ff ff ff       	call   10001c78 <GDO::getChild(int)+0x26>	10001c78: R_386_PC32	Krnl::panic(char const*)
10001c7c:	83 c4 10             	add    esp,0x10
10001c7f:	89 da                	mov    edx,ebx
10001c81:	c1 ea 04             	shr    edx,0x4
10001c84:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
10001c87:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10001c8a:	85 c0                	test   eax,eax
10001c8c:	74 d7                	je     10001c65 <GDO::getChild(int)+0x13>
10001c8e:	83 e3 0f             	and    ebx,0xf
10001c91:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10001c94:	5a                   	pop    edx
10001c95:	5b                   	pop    ebx
10001c96:	5e                   	pop    esi
10001c97:	c3                   	ret    

10001c98 <GDO::hasNext()>:
10001c98:	56                   	push   esi
10001c99:	53                   	push   ebx
10001c9a:	53                   	push   ebx
10001c9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001c9f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
10001ca2:	3d ff 00 00 00       	cmp    eax,0xff
10001ca7:	7f 1b                	jg     10001cc4 <GDO::hasNext()+0x2c>
10001ca9:	8d 70 01             	lea    esi,[eax+0x1]
10001cac:	51                   	push   ecx
10001cad:	51                   	push   ecx
10001cae:	50                   	push   eax
10001caf:	53                   	push   ebx
10001cb0:	e8 fc ff ff ff       	call   10001cb1 <GDO::hasNext()+0x19>	10001cb1: R_386_PC32	GDO::getChild(int)
10001cb5:	83 c4 10             	add    esp,0x10
10001cb8:	85 c0                	test   eax,eax
10001cba:	75 04                	jne    10001cc0 <GDO::hasNext()+0x28>
10001cbc:	89 f0                	mov    eax,esi
10001cbe:	eb e2                	jmp    10001ca2 <GDO::hasNext()+0xa>
10001cc0:	b0 01                	mov    al,0x1
10001cc2:	eb 02                	jmp    10001cc6 <GDO::hasNext()+0x2e>
10001cc4:	31 c0                	xor    eax,eax
10001cc6:	5a                   	pop    edx
10001cc7:	5b                   	pop    ebx
10001cc8:	5e                   	pop    esi
10001cc9:	c3                   	ret    

10001cca <GDO::getNext()>:
10001cca:	53                   	push   ebx
10001ccb:	83 ec 08             	sub    esp,0x8
10001cce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001cd2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
10001cd5:	3d ff 00 00 00       	cmp    eax,0xff
10001cda:	7f 18                	jg     10001cf4 <GDO::getNext()+0x2a>
10001cdc:	8d 50 01             	lea    edx,[eax+0x1]
10001cdf:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
10001ce2:	52                   	push   edx
10001ce3:	52                   	push   edx
10001ce4:	50                   	push   eax
10001ce5:	53                   	push   ebx
10001ce6:	e8 fc ff ff ff       	call   10001ce7 <GDO::getNext()+0x1d>	10001ce7: R_386_PC32	GDO::getChild(int)
10001ceb:	83 c4 10             	add    esp,0x10
10001cee:	85 c0                	test   eax,eax
10001cf0:	74 e0                	je     10001cd2 <GDO::getNext()+0x8>
10001cf2:	eb 02                	jmp    10001cf6 <GDO::getNext()+0x2c>
10001cf4:	31 c0                	xor    eax,eax
10001cf6:	83 c4 08             	add    esp,0x8
10001cf9:	5b                   	pop    ebx
10001cfa:	c3                   	ret    
10001cfb:	90                   	nop

10001cfc <GDO::indexOf(GDO*)>:
10001cfc:	56                   	push   esi
10001cfd:	53                   	push   ebx
10001cfe:	53                   	push   ebx
10001cff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001d03:	31 db                	xor    ebx,ebx
10001d05:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
10001d08:	8d 50 01             	lea    edx,[eax+0x1]
10001d0b:	89 56 3c             	mov    DWORD PTR [esi+0x3c],edx
10001d0e:	51                   	push   ecx
10001d0f:	51                   	push   ecx
10001d10:	50                   	push   eax
10001d11:	56                   	push   esi
10001d12:	e8 fc ff ff ff       	call   10001d13 <GDO::indexOf(GDO*)+0x17>	10001d13: R_386_PC32	GDO::getChild(int)
10001d17:	83 c4 10             	add    esp,0x10
10001d1a:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10001d1e:	74 0c                	je     10001d2c <GDO::indexOf(GDO*)+0x30>
10001d20:	43                   	inc    ebx
10001d21:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001d27:	75 dc                	jne    10001d05 <GDO::indexOf(GDO*)+0x9>
10001d29:	83 cb ff             	or     ebx,0xffffffff
10001d2c:	89 d8                	mov    eax,ebx
10001d2e:	5a                   	pop    edx
10001d2f:	5b                   	pop    ebx
10001d30:	5e                   	pop    esi
10001d31:	c3                   	ret    

10001d32 <GDO::screenX()>:
10001d32:	56                   	push   esi
10001d33:	53                   	push   ebx
10001d34:	51                   	push   ecx
10001d35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001d39:	31 f6                	xor    esi,esi
10001d3b:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10001d3e:	74 10                	je     10001d50 <GDO::screenX()+0x1e>
10001d40:	83 ec 0c             	sub    esp,0xc
10001d43:	68 f0 2c 00 10       	push   0x10002cf0	10001d44: R_386_32	.text
10001d48:	e8 fc ff ff ff       	call   10001d49 <GDO::screenX()+0x17>	10001d49: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d4d:	83 c4 10             	add    esp,0x10
10001d50:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10001d53:	85 c0                	test   eax,eax
10001d55:	74 1f                	je     10001d76 <GDO::screenX()+0x44>
10001d57:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001d5a:	74 10                	je     10001d6c <GDO::screenX()+0x3a>
10001d5c:	83 ec 0c             	sub    esp,0xc
10001d5f:	68 e4 2c 00 10       	push   0x10002ce4	10001d60: R_386_32	.text
10001d64:	e8 fc ff ff ff       	call   10001d65 <GDO::screenX()+0x33>	10001d65: R_386_PC32	Krnl::panic(char const*)
10001d69:	83 c4 10             	add    esp,0x10
10001d6c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
10001d6f:	8b 5b 08             	mov    ebx,DWORD PTR [ebx+0x8]
10001d72:	01 c6                	add    esi,eax
10001d74:	eb c5                	jmp    10001d3b <GDO::screenX()+0x9>
10001d76:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
10001d79:	01 f0                	add    eax,esi
10001d7b:	5a                   	pop    edx
10001d7c:	5b                   	pop    ebx
10001d7d:	5e                   	pop    esi
10001d7e:	c3                   	ret    
10001d7f:	90                   	nop

10001d80 <GDO::screenY()>:
10001d80:	56                   	push   esi
10001d81:	53                   	push   ebx
10001d82:	51                   	push   ecx
10001d83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001d87:	31 f6                	xor    esi,esi
10001d89:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10001d8c:	74 10                	je     10001d9e <GDO::screenY()+0x1e>
10001d8e:	83 ec 0c             	sub    esp,0xc
10001d91:	68 17 2d 00 10       	push   0x10002d17	10001d92: R_386_32	.text
10001d96:	e8 fc ff ff ff       	call   10001d97 <GDO::screenY()+0x17>	10001d97: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d9b:	83 c4 10             	add    esp,0x10
10001d9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10001da1:	85 c0                	test   eax,eax
10001da3:	74 1f                	je     10001dc4 <GDO::screenY()+0x44>
10001da5:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001da8:	74 10                	je     10001dba <GDO::screenY()+0x3a>
10001daa:	83 ec 0c             	sub    esp,0xc
10001dad:	68 0b 2d 00 10       	push   0x10002d0b	10001dae: R_386_32	.text
10001db2:	e8 fc ff ff ff       	call   10001db3 <GDO::screenY()+0x33>	10001db3: R_386_PC32	Krnl::panic(char const*)
10001db7:	83 c4 10             	add    esp,0x10
10001dba:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
10001dbd:	8b 5b 08             	mov    ebx,DWORD PTR [ebx+0x8]
10001dc0:	01 c6                	add    esi,eax
10001dc2:	eb c5                	jmp    10001d89 <GDO::screenY()+0x9>
10001dc4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
10001dc7:	01 f0                	add    eax,esi
10001dc9:	5a                   	pop    edx
10001dca:	5b                   	pop    ebx
10001dcb:	5e                   	pop    esi
10001dcc:	c3                   	ret    
10001dcd:	90                   	nop

10001dce <GDO::update(List<CRect*>*, bool)>:
10001dce:	55                   	push   ebp
10001dcf:	57                   	push   edi
10001dd0:	56                   	push   esi
10001dd1:	53                   	push   ebx
10001dd2:	83 ec 2c             	sub    esp,0x2c
10001dd5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10001dd9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001ddd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001de1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10001de5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001de9:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10001dec:	74 14                	je     10001e02 <GDO::update(List<CRect*>*, bool)+0x34>
10001dee:	c7 44 24 40 32 2d 00 10 	mov    DWORD PTR [esp+0x40],0x10002d32	10001df2: R_386_32	.text
10001df6:	83 c4 2c             	add    esp,0x2c
10001df9:	5b                   	pop    ebx
10001dfa:	5e                   	pop    esi
10001dfb:	5f                   	pop    edi
10001dfc:	5d                   	pop    ebp
10001dfd:	e9 fc ff ff ff       	jmp    10001dfe <GDO::update(List<CRect*>*, bool)+0x30>	10001dfe: R_386_PC32	Krnl::panic(char const*)
10001e02:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10001e06:	0f 84 02 02 00 00    	je     1000200e <GDO::update(List<CRect*>*, bool)+0x240>
10001e0c:	56                   	push   esi
10001e0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001e11:	6a 00                	push   0x0
10001e13:	53                   	push   ebx
10001e14:	e8 fc ff ff ff       	call   10001e15 <GDO::update(List<CRect*>*, bool)+0x47>	10001e15: R_386_PC32	Region::applyBoundClipping(int, List<CRect*>*)
10001e19:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001e1c:	e8 fc ff ff ff       	call   10001e1d <GDO::update(List<CRect*>*, bool)+0x4f>	10001e1d: R_386_PC32	GDO::screenX()
10001e21:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001e25:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001e28:	e8 fc ff ff ff       	call   10001e29 <GDO::update(List<CRect*>*, bool)+0x5b>	10001e29: R_386_PC32	GDO::screenY()
10001e2d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10001e31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10001e34:	c6 40 14 00          	mov    BYTE PTR [eax+0x14],0x0
10001e38:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001e3f:	83 c4 10             	add    esp,0x10
10001e42:	83 ec 0c             	sub    esp,0xc
10001e45:	53                   	push   ebx
10001e46:	e8 fc ff ff ff       	call   10001e47 <GDO::update(List<CRect*>*, bool)+0x79>	10001e47: R_386_PC32	GDO::hasNext()
10001e4b:	83 c4 10             	add    esp,0x10
10001e4e:	84 c0                	test   al,al
10001e50:	74 6c                	je     10001ebe <GDO::update(List<CRect*>*, bool)+0xf0>
10001e52:	83 ec 0c             	sub    esp,0xc
10001e55:	53                   	push   ebx
10001e56:	e8 fc ff ff ff       	call   10001e57 <GDO::update(List<CRect*>*, bool)+0x89>	10001e57: R_386_PC32	GDO::getNext()
10001e5b:	89 c6                	mov    esi,eax
10001e5d:	83 c4 10             	add    esp,0x10
10001e60:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001e63:	75 dd                	jne    10001e42 <GDO::update(List<CRect*>*, bool)+0x74>
10001e65:	83 ec 0c             	sub    esp,0xc
10001e68:	50                   	push   eax
10001e69:	e8 fc ff ff ff       	call   10001e6a <GDO::update(List<CRect*>*, bool)+0x9c>	10001e6a: R_386_PC32	GDO::screenX()
10001e6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001e72:	89 34 24             	mov    DWORD PTR [esp],esi
10001e75:	e8 fc ff ff ff       	call   10001e76 <GDO::update(List<CRect*>*, bool)+0xa8>	10001e76: R_386_PC32	GDO::screenY()
10001e7a:	89 c5                	mov    ebp,eax
10001e7c:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10001e83:	e8 fc ff ff ff       	call   10001e84 <GDO::update(List<CRect*>*, bool)+0xb6>	10001e84: R_386_PC32	malloc
10001e88:	89 c7                	mov    edi,eax
10001e8a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
10001e8e:	8b 46 34             	mov    eax,DWORD PTR [esi+0x34]
10001e91:	01 d0                	add    eax,edx
10001e93:	48                   	dec    eax
10001e94:	89 04 24             	mov    DWORD PTR [esp],eax
10001e97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
10001e9a:	01 e8                	add    eax,ebp
10001e9c:	48                   	dec    eax
10001e9d:	50                   	push   eax
10001e9e:	52                   	push   edx
10001e9f:	55                   	push   ebp
10001ea0:	57                   	push   edi
10001ea1:	e8 fc ff ff ff       	call   10001ea2 <GDO::update(List<CRect*>*, bool)+0xd4>	10001ea2: R_386_PC32	CRect::CRect(int, int, int, int)
10001ea6:	83 c4 18             	add    esp,0x18
10001ea9:	57                   	push   edi
10001eaa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10001ead:	e8 fc ff ff ff       	call   10001eae <GDO::update(List<CRect*>*, bool)+0xe0>	10001eae: R_386_PC32	Context::subClipRect(CRect*)
10001eb2:	5a                   	pop    edx
10001eb3:	59                   	pop    ecx
10001eb4:	6a 10                	push   0x10
10001eb6:	57                   	push   edi
10001eb7:	e8 fc ff ff ff       	call   10001eb8 <GDO::update(List<CRect*>*, bool)+0xea>	10001eb8: R_386_PC32	operator delete(void*, unsigned long)
10001ebc:	eb 81                	jmp    10001e3f <GDO::update(List<CRect*>*, bool)+0x71>
10001ebe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10001ec1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10001ec5:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
10001ec8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10001ecc:	89 78 10             	mov    DWORD PTR [eax+0x10],edi
10001ecf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001ed6:	83 ec 0c             	sub    esp,0xc
10001ed9:	53                   	push   ebx
10001eda:	e8 fc ff ff ff       	call   10001edb <GDO::update(List<CRect*>*, bool)+0x10d>	10001edb: R_386_PC32	GDO::hasNext()
10001edf:	83 c4 10             	add    esp,0x10
10001ee2:	84 c0                	test   al,al
10001ee4:	74 23                	je     10001f09 <GDO::update(List<CRect*>*, bool)+0x13b>
10001ee6:	83 ec 0c             	sub    esp,0xc
10001ee9:	53                   	push   ebx
10001eea:	e8 fc ff ff ff       	call   10001eeb <GDO::update(List<CRect*>*, bool)+0x11d>	10001eeb: R_386_PC32	GDO::getNext()
10001eef:	83 c4 10             	add    esp,0x10
10001ef2:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001ef5:	74 df                	je     10001ed6 <GDO::update(List<CRect*>*, bool)+0x108>
10001ef7:	8b 50 54             	mov    edx,DWORD PTR [eax+0x54]
10001efa:	85 d2                	test   edx,edx
10001efc:	74 d8                	je     10001ed6 <GDO::update(List<CRect*>*, bool)+0x108>
10001efe:	83 ec 0c             	sub    esp,0xc
10001f01:	50                   	push   eax
10001f02:	ff d2                	call   edx
10001f04:	83 c4 10             	add    esp,0x10
10001f07:	eb cd                	jmp    10001ed6 <GDO::update(List<CRect*>*, bool)+0x108>
10001f09:	83 ec 0c             	sub    esp,0xc
10001f0c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10001f0f:	e8 fc ff ff ff       	call   10001f10 <GDO::update(List<CRect*>*, bool)+0x142>	10001f10: R_386_PC32	Context::clearClipRects()
10001f14:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10001f17:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10001f1e:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10001f25:	83 c4 10             	add    esp,0x10
10001f28:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10001f2d:	0f 84 db 00 00 00    	je     1000200e <GDO::update(List<CRect*>*, bool)+0x240>
10001f33:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001f3a:	83 ec 0c             	sub    esp,0xc
10001f3d:	53                   	push   ebx
10001f3e:	e8 fc ff ff ff       	call   10001f3f <GDO::update(List<CRect*>*, bool)+0x171>	10001f3f: R_386_PC32	GDO::hasNext()
10001f43:	83 c4 10             	add    esp,0x10
10001f46:	84 c0                	test   al,al
10001f48:	0f 84 c0 00 00 00    	je     1000200e <GDO::update(List<CRect*>*, bool)+0x240>
10001f4e:	83 ec 0c             	sub    esp,0xc
10001f51:	53                   	push   ebx
10001f52:	e8 fc ff ff ff       	call   10001f53 <GDO::update(List<CRect*>*, bool)+0x185>	10001f53: R_386_PC32	GDO::getNext()
10001f57:	89 c7                	mov    edi,eax
10001f59:	83 c4 10             	add    esp,0x10
10001f5c:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001f5f:	75 d9                	jne    10001f3a <GDO::update(List<CRect*>*, bool)+0x16c>
10001f61:	31 f6                	xor    esi,esi
10001f63:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10001f68:	75 3b                	jne    10001fa5 <GDO::update(List<CRect*>*, bool)+0x1d7>
10001f6a:	50                   	push   eax
10001f6b:	6a 01                	push   0x1
10001f6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10001f71:	57                   	push   edi
10001f72:	e8 fc ff ff ff       	call   10001f73 <GDO::update(List<CRect*>*, bool)+0x1a5>	10001f73: R_386_PC32	GDO::update(List<CRect*>*, bool)
10001f77:	83 c4 10             	add    esp,0x10
10001f7a:	eb be                	jmp    10001f3a <GDO::update(List<CRect*>*, bool)+0x16c>
10001f7c:	8b 28                	mov    ebp,DWORD PTR [eax]
10001f7e:	83 ec 0c             	sub    esp,0xc
10001f81:	57                   	push   edi
10001f82:	e8 fc ff ff ff       	call   10001f83 <GDO::update(List<CRect*>*, bool)+0x1b5>	10001f83: R_386_PC32	GDO::screenX()
10001f87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001f8b:	89 3c 24             	mov    DWORD PTR [esp],edi
10001f8e:	e8 fc ff ff ff       	call   10001f8f <GDO::update(List<CRect*>*, bool)+0x1c1>	10001f8f: R_386_PC32	GDO::screenY()
10001f93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001f97:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
10001f9a:	01 d1                	add    ecx,edx
10001f9c:	83 c4 10             	add    esp,0x10
10001f9f:	3b 4d 00             	cmp    ecx,DWORD PTR [ebp+0x0]
10001fa2:	7f 37                	jg     10001fdb <GDO::update(List<CRect*>*, bool)+0x20d>
10001fa4:	46                   	inc    esi
10001fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001fa9:	8b 00                	mov    eax,DWORD PTR [eax]
10001fab:	89 c1                	mov    ecx,eax
10001fad:	31 d2                	xor    edx,edx
10001faf:	85 c9                	test   ecx,ecx
10001fb1:	74 06                	je     10001fb9 <GDO::update(List<CRect*>*, bool)+0x1eb>
10001fb3:	42                   	inc    edx
10001fb4:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10001fb7:	eb f6                	jmp    10001faf <GDO::update(List<CRect*>*, bool)+0x1e1>
10001fb9:	39 d6                	cmp    esi,edx
10001fbb:	7d 32                	jge    10001fef <GDO::update(List<CRect*>*, bool)+0x221>
10001fbd:	89 c1                	mov    ecx,eax
10001fbf:	31 d2                	xor    edx,edx
10001fc1:	85 c9                	test   ecx,ecx
10001fc3:	74 06                	je     10001fcb <GDO::update(List<CRect*>*, bool)+0x1fd>
10001fc5:	42                   	inc    edx
10001fc6:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10001fc9:	eb f6                	jmp    10001fc1 <GDO::update(List<CRect*>*, bool)+0x1f3>
10001fcb:	39 d6                	cmp    esi,edx
10001fcd:	7f ad                	jg     10001f7c <GDO::update(List<CRect*>*, bool)+0x1ae>
10001fcf:	89 f2                	mov    edx,esi
10001fd1:	85 d2                	test   edx,edx
10001fd3:	74 a7                	je     10001f7c <GDO::update(List<CRect*>*, bool)+0x1ae>
10001fd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10001fd8:	4a                   	dec    edx
10001fd9:	eb f6                	jmp    10001fd1 <GDO::update(List<CRect*>*, bool)+0x203>
10001fdb:	39 55 04             	cmp    DWORD PTR [ebp+0x4],edx
10001fde:	7c c4                	jl     10001fa4 <GDO::update(List<CRect*>*, bool)+0x1d6>
10001fe0:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
10001fe3:	01 c2                	add    edx,eax
10001fe5:	3b 55 08             	cmp    edx,DWORD PTR [ebp+0x8]
10001fe8:	7e ba                	jle    10001fa4 <GDO::update(List<CRect*>*, bool)+0x1d6>
10001fea:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10001fed:	7c b5                	jl     10001fa4 <GDO::update(List<CRect*>*, bool)+0x1d6>
10001fef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
10001ff5:	31 c0                	xor    eax,eax
10001ff7:	85 d2                	test   edx,edx
10001ff9:	74 06                	je     10002001 <GDO::update(List<CRect*>*, bool)+0x233>
10001ffb:	40                   	inc    eax
10001ffc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
10001fff:	eb f6                	jmp    10001ff7 <GDO::update(List<CRect*>*, bool)+0x229>
10002001:	39 c6                	cmp    esi,eax
10002003:	0f 85 61 ff ff ff    	jne    10001f6a <GDO::update(List<CRect*>*, bool)+0x19c>
10002009:	e9 2c ff ff ff       	jmp    10001f3a <GDO::update(List<CRect*>*, bool)+0x16c>
1000200e:	83 c4 2c             	add    esp,0x2c
10002011:	5b                   	pop    ebx
10002012:	5e                   	pop    esi
10002013:	5f                   	pop    edi
10002014:	5d                   	pop    ebp
10002015:	c3                   	ret    

10002016 <GDO::addChild(GDO*)>:
10002016:	55                   	push   ebp
10002017:	57                   	push   edi
10002018:	56                   	push   esi
10002019:	53                   	push   ebx
1000201a:	83 ec 1c             	sub    esp,0x1c
1000201d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
10002021:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10002025:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
10002029:	74 17                	je     10002042 <GDO::addChild(GDO*)+0x2c>
1000202b:	83 ec 0c             	sub    esp,0xc
1000202e:	68 4e 2d 00 10       	push   0x10002d4e	1000202f: R_386_32	.text
10002033:	e8 fc ff ff ff       	call   10002034 <GDO::addChild(GDO*)+0x1e>	10002034: R_386_PC32	Krnl::panic(char const*)
10002038:	83 c4 10             	add    esp,0x10
1000203b:	31 db                	xor    ebx,ebx
1000203d:	e9 8c 00 00 00       	jmp    100020ce <GDO::addChild(GDO*)+0xb8>
10002042:	89 6e 08             	mov    DWORD PTR [esi+0x8],ebp
10002045:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10002048:	31 c9                	xor    ecx,ecx
1000204a:	83 cb ff             	or     ebx,0xffffffff
1000204d:	8b 04 8a             	mov    eax,DWORD PTR [edx+ecx*4]
10002050:	85 c0                	test   eax,eax
10002052:	74 1c                	je     10002070 <GDO::addChild(GDO*)+0x5a>
10002054:	31 ff                	xor    edi,edi
10002056:	83 38 00             	cmp    DWORD PTR [eax],0x0
10002059:	75 0a                	jne    10002065 <GDO::addChild(GDO*)+0x4f>
1000205b:	89 30                	mov    DWORD PTR [eax],esi
1000205d:	c1 e1 04             	shl    ecx,0x4
10002060:	8d 1c 39             	lea    ebx,[ecx+edi*1]
10002063:	eb 69                	jmp    100020ce <GDO::addChild(GDO*)+0xb8>
10002065:	47                   	inc    edi
10002066:	83 c0 04             	add    eax,0x4
10002069:	83 ff 10             	cmp    edi,0x10
1000206c:	75 e8                	jne    10002056 <GDO::addChild(GDO*)+0x40>
1000206e:	eb 07                	jmp    10002077 <GDO::addChild(GDO*)+0x61>
10002070:	83 fb ff             	cmp    ebx,0xffffffff
10002073:	75 02                	jne    10002077 <GDO::addChild(GDO*)+0x61>
10002075:	89 cb                	mov    ebx,ecx
10002077:	41                   	inc    ecx
10002078:	83 f9 10             	cmp    ecx,0x10
1000207b:	75 d0                	jne    1000204d <GDO::addChild(GDO*)+0x37>
1000207d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10002081:	83 fb ff             	cmp    ebx,0xffffffff
10002084:	74 38                	je     100020be <GDO::addChild(GDO*)+0xa8>
10002086:	50                   	push   eax
10002087:	50                   	push   eax
10002088:	53                   	push   ebx
10002089:	68 6a 2d 00 10       	push   0x10002d6a	1000208a: R_386_32	.text
1000208e:	e8 fc ff ff ff       	call   1000208f <GDO::addChild(GDO*)+0x79>	1000208f: R_386_PC32	Dbg::kprintf(char const*, ...)
10002093:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002096:	8d 2c 98             	lea    ebp,[eax+ebx*4]
10002099:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
100020a0:	e8 fc ff ff ff       	call   100020a1 <GDO::addChild(GDO*)+0x8b>	100020a1: R_386_PC32	malloc
100020a5:	89 c2                	mov    edx,eax
100020a7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
100020aa:	31 c0                	xor    eax,eax
100020ac:	89 d7                	mov    edi,edx
100020ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100020b2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100020b4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100020b7:	89 30                	mov    DWORD PTR [eax],esi
100020b9:	c1 e3 04             	shl    ebx,0x4
100020bc:	eb 0d                	jmp    100020cb <GDO::addChild(GDO*)+0xb5>
100020be:	83 ec 0c             	sub    esp,0xc
100020c1:	68 84 2d 00 10       	push   0x10002d84	100020c2: R_386_32	.text
100020c6:	e8 fc ff ff ff       	call   100020c7 <GDO::addChild(GDO*)+0xb1>	100020c7: R_386_PC32	Krnl::panic(char const*)
100020cb:	83 c4 10             	add    esp,0x10
100020ce:	89 d8                	mov    eax,ebx
100020d0:	83 c4 1c             	add    esp,0x1c
100020d3:	5b                   	pop    ebx
100020d4:	5e                   	pop    esi
100020d5:	5f                   	pop    edi
100020d6:	5d                   	pop    ebp
100020d7:	c3                   	ret    

100020d8 <GDO::removeChild(int)>:
100020d8:	53                   	push   ebx
100020d9:	83 ec 08             	sub    esp,0x8
100020dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100020e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100020e4:	80 39 00             	cmp    BYTE PTR [ecx],0x0
100020e7:	74 14                	je     100020fd <GDO::removeChild(int)+0x25>
100020e9:	83 ec 0c             	sub    esp,0xc
100020ec:	68 a6 2d 00 10       	push   0x10002da6	100020ed: R_386_32	.text
100020f1:	e8 fc ff ff ff       	call   100020f2 <GDO::removeChild(int)+0x1a>	100020f2: R_386_PC32	Krnl::panic(char const*)
100020f6:	83 c4 10             	add    esp,0x10
100020f9:	31 c0                	xor    eax,eax
100020fb:	eb 2d                	jmp    1000212a <GDO::removeChild(int)+0x52>
100020fd:	31 c0                	xor    eax,eax
100020ff:	81 fa ff 00 00 00    	cmp    edx,0xff
10002105:	7f 23                	jg     1000212a <GDO::removeChild(int)+0x52>
10002107:	89 d3                	mov    ebx,edx
10002109:	c1 eb 04             	shr    ebx,0x4
1000210c:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
1000210f:	8b 0c 98             	mov    ecx,DWORD PTR [eax+ebx*4]
10002112:	31 c0                	xor    eax,eax
10002114:	85 c9                	test   ecx,ecx
10002116:	74 12                	je     1000212a <GDO::removeChild(int)+0x52>
10002118:	83 e2 0f             	and    edx,0xf
1000211b:	8d 14 91             	lea    edx,[ecx+edx*4]
1000211e:	83 3a 00             	cmp    DWORD PTR [edx],0x0
10002121:	0f 95 c0             	setne  al
10002124:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
1000212a:	83 c4 08             	add    esp,0x8
1000212d:	5b                   	pop    ebx
1000212e:	c3                   	ret    
1000212f:	90                   	nop

10002130 <GDO::removeChild(GDO*)>:
10002130:	53                   	push   ebx
10002131:	83 ec 10             	sub    esp,0x10
10002134:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10002138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000213c:	53                   	push   ebx
1000213d:	e8 fc ff ff ff       	call   1000213e <GDO::removeChild(GDO*)+0xe>	1000213e: R_386_PC32	GDO::indexOf(GDO*)
10002142:	83 c4 10             	add    esp,0x10
10002145:	83 f8 ff             	cmp    eax,0xffffffff
10002148:	74 0e                	je     10002158 <GDO::removeChild(GDO*)+0x28>
1000214a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000214e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10002152:	83 c4 08             	add    esp,0x8
10002155:	5b                   	pop    ebx
10002156:	eb 80                	jmp    100020d8 <GDO::removeChild(int)>
10002158:	31 c0                	xor    eax,eax
1000215a:	83 c4 08             	add    esp,0x8
1000215d:	5b                   	pop    ebx
1000215e:	c3                   	ret    
1000215f:	90                   	nop

10002160 <legacyDraw(GDO*)>:
10002160:	55                   	push   ebp
10002161:	57                   	push   edi
10002162:	56                   	push   esi
10002163:	53                   	push   ebx
10002164:	83 ec 1c             	sub    esp,0x1c
10002167:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
1000216b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
1000216e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
10002171:	31 f6                	xor    esi,esi
10002173:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10002176:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
1000217a:	84 c0                	test   al,al
1000217c:	74 45                	je     100021c3 <legacyDraw(GDO*)+0x63>
1000217e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
10002181:	69 ca ff 00 00 00    	imul   ecx,edx,0xff
10002187:	0f b6 8c 08 00 00 00 00 	movzx  ecx,BYTE PTR [eax+ecx*1+0x0]	1000218b: R_386_32	FontWidths
1000218f:	83 ec 04             	sub    esp,0x4
10002192:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10002195:	6a 0e                	push   0xe
10002197:	51                   	push   ecx
10002198:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000219c:	55                   	push   ebp
1000219d:	57                   	push   edi
1000219e:	6b c0 0e             	imul   eax,eax,0xe
100021a1:	69 d2 f2 0d 00 00    	imul   edx,edx,0xdf2
100021a7:	8d 84 10 00 00 00 00 	lea    eax,[eax+edx*1+0x0]	100021aa: R_386_32	Fonts
100021ae:	50                   	push   eax
100021af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100021b2:	e8 fc ff ff ff       	call   100021b3 <legacyDraw(GDO*)+0x53>	100021b3: R_386_PC32	Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)
100021b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100021bb:	01 cf                	add    edi,ecx
100021bd:	46                   	inc    esi
100021be:	83 c4 20             	add    esp,0x20
100021c1:	eb b0                	jmp    10002173 <legacyDraw(GDO*)+0x13>
100021c3:	83 c4 1c             	add    esp,0x1c
100021c6:	5b                   	pop    ebx
100021c7:	5e                   	pop    esi
100021c8:	5f                   	pop    edi
100021c9:	5d                   	pop    ebp
100021ca:	c3                   	ret    

100021cb <reverse(unsigned char)>:
100021cb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
100021cf:	c3                   	ret    

100021d0 <loadFontWithName(char*)>:
100021d0:	55                   	push   ebp
100021d1:	57                   	push   edi
100021d2:	56                   	push   esi
100021d3:	53                   	push   ebx
100021d4:	83 ec 34             	sub    esp,0x34
100021d7:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
100021db:	53                   	push   ebx
100021dc:	68 c5 2d 00 10       	push   0x10002dc5	100021dd: R_386_32	.text
100021e1:	e8 fc ff ff ff       	call   100021e2 <loadFontWithName(char*)+0x12>	100021e2: R_386_PC32	Dbg::kprintf(char const*, ...)
100021e6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100021ed:	e8 fc ff ff ff       	call   100021ee <loadFontWithName(char*)+0x1e>	100021ee: R_386_PC32	malloc
100021f2:	89 c6                	mov    esi,eax
100021f4:	83 c4 0c             	add    esp,0xc
100021f7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100021f9: R_386_32	kernelProcess
100021fd:	53                   	push   ebx
100021fe:	50                   	push   eax
100021ff:	e8 fc ff ff ff       	call   10002200 <loadFontWithName(char*)+0x30>	10002200: R_386_PC32	File::File(char const*, Process*)
10002204:	59                   	pop    ecx
10002205:	5f                   	pop    edi
10002206:	6a 01                	push   0x1
10002208:	56                   	push   esi
10002209:	e8 fc ff ff ff       	call   1000220a <loadFontWithName(char*)+0x3a>	1000220a: R_386_PC32	File::open(FileOpenMode)
1000220e:	83 c4 10             	add    esp,0x10
10002211:	85 c0                	test   eax,eax
10002213:	74 10                	je     10002225 <loadFontWithName(char*)+0x55>
10002215:	83 ec 0c             	sub    esp,0xc
10002218:	68 e9 2d 00 10       	push   0x10002de9	10002219: R_386_32	.text
1000221d:	e8 fc ff ff ff       	call   1000221e <loadFontWithName(char*)+0x4e>	1000221e: R_386_PC32	Krnl::panic(char const*)
10002222:	83 c4 10             	add    esp,0x10
10002225:	83 ec 0c             	sub    esp,0xc
10002228:	8b 06                	mov    eax,DWORD PTR [esi]
1000222a:	8d 54 24 28          	lea    edx,[esp+0x28]
1000222e:	52                   	push   edx
1000222f:	68 00 00 00 00       	push   0x0	10002230: R_386_32	FONT
10002234:	6a 00                	push   0x0
10002236:	68 10 10 00 00       	push   0x1010
1000223b:	56                   	push   esi
1000223c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
1000223f:	83 c4 14             	add    esp,0x14
10002242:	56                   	push   esi
10002243:	e8 fc ff ff ff       	call   10002244 <loadFontWithName(char*)+0x74>	10002244: R_386_PC32	File::close()
10002248:	8b 06                	mov    eax,DWORD PTR [esi]
1000224a:	89 34 24             	mov    DWORD PTR [esp],esi
1000224d:	ff 50 08             	call   DWORD PTR [eax+0x8]
10002250:	a1 00 00 00 00       	mov    eax,ds:0x0	10002251: R_386_32	nextfont_
10002255:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002259:	69 f8 f2 0d 00 00    	imul   edi,eax,0xdf2
1000225f:	83 c4 10             	add    esp,0x10
10002262:	b8 00 02 00 00       	mov    eax,0x200
10002267:	69 74 24 0c ff 00 00 00 	imul   esi,DWORD PTR [esp+0xc],0xff
1000226f:	81 c6 00 00 00 00    	add    esi,0x0	10002271: R_386_32	FontWidths
10002275:	0f be 90 10 00 00 00 	movsx  edx,BYTE PTR [eax+0x10]	10002278: R_386_32	FONT
1000227c:	8a 88 1f 00 00 00    	mov    cl,BYTE PTR [eax+0x1f]	1000227e: R_386_32	FONT
10002282:	88 0c 16             	mov    BYTE PTR [esi+edx*1],cl
10002285:	6b d2 0e             	imul   edx,edx,0xe
10002288:	01 fa                	add    edx,edi
1000228a:	31 ed                	xor    ebp,ebp
1000228c:	8a 8c 28 11 00 00 00 	mov    cl,BYTE PTR [eax+ebp*1+0x11]	1000228f: R_386_32	FONT
10002293:	88 8c 2a 00 00 00 00 	mov    BYTE PTR [edx+ebp*1+0x0],cl	10002296: R_386_32	Fonts
1000229a:	45                   	inc    ebp
1000229b:	83 fd 0e             	cmp    ebp,0xe
1000229e:	75 ec                	jne    1000228c <loadFontWithName(char*)+0xbc>
100022a0:	83 c0 10             	add    eax,0x10
100022a3:	3d 00 08 00 00       	cmp    eax,0x800
100022a8:	75 cb                	jne    10002275 <loadFontWithName(char*)+0xa5>
100022aa:	43                   	inc    ebx
100022ab:	80 7b ff 00          	cmp    BYTE PTR [ebx-0x1],0x0
100022af:	75 f9                	jne    100022aa <loadFontWithName(char*)+0xda>
100022b1:	8a 03                	mov    al,BYTE PTR [ebx]
100022b3:	3c 2f                	cmp    al,0x2f
100022b5:	74 07                	je     100022be <loadFontWithName(char*)+0xee>
100022b7:	3c 5c                	cmp    al,0x5c
100022b9:	74 03                	je     100022be <loadFontWithName(char*)+0xee>
100022bb:	4b                   	dec    ebx
100022bc:	eb f3                	jmp    100022b1 <loadFontWithName(char*)+0xe1>
100022be:	31 d2                	xor    edx,edx
100022c0:	69 7c 24 0c ff 00 00 00 	imul   edi,DWORD PTR [esp+0xc],0xff
100022c8:	81 c7 00 00 00 00    	add    edi,0x0	100022ca: R_386_32	FontNames
100022ce:	8a 44 13 01          	mov    al,BYTE PTR [ebx+edx*1+0x1]
100022d2:	3c 2e                	cmp    al,0x2e
100022d4:	0f b7 f2             	movzx  esi,dx
100022d7:	74 13                	je     100022ec <loadFontWithName(char*)+0x11c>
100022d9:	8d 68 9f             	lea    ebp,[eax-0x61]
100022dc:	89 e9                	mov    ecx,ebp
100022de:	80 f9 19             	cmp    cl,0x19
100022e1:	77 03                	ja     100022e6 <loadFontWithName(char*)+0x116>
100022e3:	83 e8 20             	sub    eax,0x20
100022e6:	88 04 37             	mov    BYTE PTR [edi+esi*1],al
100022e9:	42                   	inc    edx
100022ea:	eb e2                	jmp    100022ce <loadFontWithName(char*)+0xfe>
100022ec:	69 44 24 0c ff 00 00 00 	imul   eax,DWORD PTR [esp+0xc],0xff
100022f4:	c6 84 30 00 00 00 00 00 	mov    BYTE PTR [eax+esi*1+0x0],0x0	100022f7: R_386_32	FontNames
100022fc:	05 00 00 00 00       	add    eax,0x0	100022fd: R_386_32	FontNames
10002301:	52                   	push   edx
10002302:	50                   	push   eax
10002303:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10002307:	68 fb 2d 00 10       	push   0x10002dfb	10002308: R_386_32	.text
1000230c:	e8 fc ff ff ff       	call   1000230d <loadFontWithName(char*)+0x13d>	1000230d: R_386_PC32	Dbg::kprintf(char const*, ...)
10002311:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	10002313: R_386_32	nextfont_
10002317:	83 c4 3c             	add    esp,0x3c
1000231a:	5b                   	pop    ebx
1000231b:	5e                   	pop    esi
1000231c:	5f                   	pop    edi
1000231d:	5d                   	pop    ebp
1000231e:	c3                   	ret    

1000231f <loadbuiltinfonts()>:
1000231f:	56                   	push   esi
10002320:	53                   	push   ebx
10002321:	52                   	push   edx
10002322:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002324: R_386_32	nextfont_
1000232c:	bb 00 00 00 00       	mov    ebx,0x0	1000232d: R_386_32	FontWidths
10002331:	ba f2 0d 00 00       	mov    edx,0xdf2
10002336:	8d 82 0e f2 ff ff    	lea    eax,[edx-0xdf2]
1000233c:	89 de                	mov    esi,ebx
1000233e:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10002340: R_386_32	Fonts
10002345:	b9 01 00 00 00       	mov    ecx,0x1
1000234a:	c6 84 08 00 00 00 00 66 	mov    BYTE PTR [eax+ecx*1+0x0],0x66	1000234d: R_386_32	Fonts
10002352:	41                   	inc    ecx
10002353:	83 f9 0d             	cmp    ecx,0xd
10002356:	75 f2                	jne    1000234a <loadbuiltinfonts()+0x2b>
10002358:	c6 80 0d 00 00 00 00 	mov    BYTE PTR [eax+0xd],0x0	1000235a: R_386_32	Fonts
1000235f:	c6 06 08             	mov    BYTE PTR [esi],0x8
10002362:	46                   	inc    esi
10002363:	83 c0 0e             	add    eax,0xe
10002366:	39 d0                	cmp    eax,edx
10002368:	75 d4                	jne    1000233e <loadbuiltinfonts()+0x1f>
1000236a:	8d 90 f2 0d 00 00    	lea    edx,[eax+0xdf2]
10002370:	81 c3 ff 00 00 00    	add    ebx,0xff
10002376:	81 fa 90 6f 00 00    	cmp    edx,0x6f90
1000237c:	75 b8                	jne    10002336 <loadbuiltinfonts()+0x17>
1000237e:	b8 00 02 00 00       	mov    eax,0x200
10002383:	0f be 90 10 00 00 00 	movsx  edx,BYTE PTR [eax+0x10]	10002386: R_386_32	FONT
1000238a:	8a 88 1f 00 00 00    	mov    cl,BYTE PTR [eax+0x1f]	1000238c: R_386_32	FONT
10002390:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	10002392: R_386_32	FontWidths
10002396:	6b ca 0e             	imul   ecx,edx,0xe
10002399:	31 d2                	xor    edx,edx
1000239b:	8a 9c 10 11 00 00 00 	mov    bl,BYTE PTR [eax+edx*1+0x11]	1000239e: R_386_32	FONT
100023a2:	88 9c 11 00 00 00 00 	mov    BYTE PTR [ecx+edx*1+0x0],bl	100023a5: R_386_32	Fonts
100023a9:	42                   	inc    edx
100023aa:	83 fa 0e             	cmp    edx,0xe
100023ad:	75 ec                	jne    1000239b <loadbuiltinfonts()+0x7c>
100023af:	83 c0 10             	add    eax,0x10
100023b2:	3d 00 08 00 00       	cmp    eax,0x800
100023b7:	75 ca                	jne    10002383 <loadbuiltinfonts()+0x64>
100023b9:	50                   	push   eax
100023ba:	50                   	push   eax
100023bb:	68 0f 2e 00 10       	push   0x10002e0f	100023bc: R_386_32	.text
100023c0:	68 00 00 00 00       	push   0x0	100023c1: R_386_32	FontNames
100023c5:	e8 fc ff ff ff       	call   100023c6 <loadbuiltinfonts()+0xa7>	100023c6: R_386_PC32	strcpy
100023ca:	83 c4 0c             	add    esp,0xc
100023cd:	68 00 00 00 00       	push   0x0	100023ce: R_386_32	FontNames
100023d2:	6a 00                	push   0x0
100023d4:	68 fb 2d 00 10       	push   0x10002dfb	100023d5: R_386_32	.text
100023d9:	e8 fc ff ff ff       	call   100023da <loadbuiltinfonts()+0xbb>	100023da: R_386_PC32	Dbg::kprintf(char const*, ...)
100023de:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100023e0: R_386_32	nextfont_
100023e8:	83 c4 14             	add    esp,0x14
100023eb:	5b                   	pop    ebx
100023ec:	5e                   	pop    esi
100023ed:	c3                   	ret    

100023ee <loadfonts()>:
100023ee:	57                   	push   edi
100023ef:	56                   	push   esi
100023f0:	53                   	push   ebx
100023f1:	81 ec 1c 02 00 00    	sub    esp,0x21c
100023f7:	68 14 01 00 00       	push   0x114
100023fc:	e8 fc ff ff ff       	call   100023fd <loadfonts()+0xf>	100023fd: R_386_PC32	malloc
10002401:	89 c3                	mov    ebx,eax
10002403:	83 c4 0c             	add    esp,0xc
10002406:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002408: R_386_32	kernelProcess
1000240c:	68 16 2e 00 10       	push   0x10002e16	1000240d: R_386_32	.text
10002411:	50                   	push   eax
10002412:	e8 fc ff ff ff       	call   10002413 <loadfonts()+0x25>	10002413: R_386_PC32	Directory::Directory(char const*, Process*)
10002417:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000241a:	e8 fc ff ff ff       	call   1000241b <loadfonts()+0x2d>	1000241b: R_386_PC32	Directory::open()
1000241f:	83 c4 10             	add    esp,0x10
10002422:	51                   	push   ecx
10002423:	51                   	push   ecx
10002424:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
1000242b:	50                   	push   eax
1000242c:	53                   	push   ebx
1000242d:	e8 fc ff ff ff       	call   1000242e <loadfonts()+0x40>	1000242e: R_386_PC32	Directory::read(dirent*)
10002432:	89 c6                	mov    esi,eax
10002434:	5f                   	pop    edi
10002435:	58                   	pop    eax
10002436:	56                   	push   esi
10002437:	68 2d 2e 00 10       	push   0x10002e2d	10002438: R_386_32	.text
1000243c:	e8 fc ff ff ff       	call   1000243d <loadfonts()+0x4f>	1000243d: R_386_PC32	Dbg::kprintf(char const*, ...)
10002441:	83 c4 10             	add    esp,0x10
10002444:	85 f6                	test   esi,esi
10002446:	75 4c                	jne    10002494 <loadfonts()+0xa6>
10002448:	80 bc 24 10 01 00 00 00 	cmp    BYTE PTR [esp+0x110],0x0
10002450:	74 42                	je     10002494 <loadfonts()+0xa6>
10002452:	f6 84 24 0c 01 00 00 02 	test   BYTE PTR [esp+0x10c],0x2
1000245a:	75 c6                	jne    10002422 <loadfonts()+0x34>
1000245c:	50                   	push   eax
1000245d:	50                   	push   eax
1000245e:	68 41 2e 00 10       	push   0x10002e41	1000245f: R_386_32	.text
10002463:	8d 74 24 0c          	lea    esi,[esp+0xc]
10002467:	56                   	push   esi
10002468:	e8 fc ff ff ff       	call   10002469 <loadfonts()+0x7b>	10002469: R_386_PC32	strcpy
1000246d:	5a                   	pop    edx
1000246e:	59                   	pop    ecx
1000246f:	8d bc 24 18 01 00 00 	lea    edi,[esp+0x118]
10002476:	57                   	push   edi
10002477:	56                   	push   esi
10002478:	e8 fc ff ff ff       	call   10002479 <loadfonts()+0x8b>	10002479: R_386_PC32	strcat
1000247d:	58                   	pop    eax
1000247e:	5a                   	pop    edx
1000247f:	57                   	push   edi
10002480:	68 59 2e 00 10       	push   0x10002e59	10002481: R_386_32	.text
10002485:	e8 fc ff ff ff       	call   10002486 <loadfonts()+0x98>	10002486: R_386_PC32	Dbg::kprintf(char const*, ...)
1000248a:	89 34 24             	mov    DWORD PTR [esp],esi
1000248d:	e8 fc ff ff ff       	call   1000248e <loadfonts()+0xa0>	1000248e: R_386_PC32	loadFontWithName(char*)
10002492:	eb 8b                	jmp    1000241f <loadfonts()+0x31>
10002494:	83 ec 0c             	sub    esp,0xc
10002497:	53                   	push   ebx
10002498:	e8 fc ff ff ff       	call   10002499 <loadfonts()+0xab>	10002499: R_386_PC32	Directory::close()
1000249d:	83 c4 10             	add    esp,0x10
100024a0:	85 db                	test   ebx,ebx
100024a2:	74 0c                	je     100024b0 <loadfonts()+0xc2>
100024a4:	83 ec 0c             	sub    esp,0xc
100024a7:	8b 03                	mov    eax,DWORD PTR [ebx]
100024a9:	53                   	push   ebx
100024aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
100024ad:	83 c4 10             	add    esp,0x10
100024b0:	81 c4 10 02 00 00    	add    esp,0x210
100024b6:	5b                   	pop    ebx
100024b7:	5e                   	pop    esi
100024b8:	5f                   	pop    edi
100024b9:	c3                   	ret    

100024ba <getLegacyFont(char const*)>:
100024ba:	57                   	push   edi
100024bb:	56                   	push   esi
100024bc:	53                   	push   ebx
100024bd:	81 ec 08 01 00 00    	sub    esp,0x108
100024c3:	8b b4 24 18 01 00 00 	mov    esi,DWORD PTR [esp+0x118]
100024ca:	68 67 2e 00 10       	push   0x10002e67	100024cb: R_386_32	.text
100024cf:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
100024d3:	53                   	push   ebx
100024d4:	e8 fc ff ff ff       	call   100024d5 <getLegacyFont(char const*)+0x1b>	100024d5: R_386_PC32	strcpy
100024d9:	59                   	pop    ecx
100024da:	5f                   	pop    edi
100024db:	56                   	push   esi
100024dc:	53                   	push   ebx
100024dd:	e8 fc ff ff ff       	call   100024de <getLegacyFont(char const*)+0x24>	100024de: R_386_PC32	strcat
100024e2:	58                   	pop    eax
100024e3:	5a                   	pop    edx
100024e4:	68 7f 2e 00 10       	push   0x10002e7f	100024e5: R_386_32	.text
100024e9:	53                   	push   ebx
100024ea:	e8 fc ff ff ff       	call   100024eb <getLegacyFont(char const*)+0x31>	100024eb: R_386_PC32	strcat
100024ef:	83 c4 10             	add    esp,0x10
100024f2:	31 db                	xor    ebx,ebx
100024f4:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	100024f6: R_386_32	nextfont_
100024fa:	39 df                	cmp    edi,ebx
100024fc:	7e 3b                	jle    10002539 <getLegacyFont(char const*)+0x7f>
100024fe:	69 fb ff 00 00 00    	imul   edi,ebx,0xff
10002504:	81 c7 00 00 00 00    	add    edi,0x0	10002506: R_386_32	FontNames
1000250a:	50                   	push   eax
1000250b:	56                   	push   esi
1000250c:	57                   	push   edi
1000250d:	68 84 2e 00 10       	push   0x10002e84	1000250e: R_386_32	.text
10002512:	e8 fc ff ff ff       	call   10002513 <getLegacyFont(char const*)+0x59>	10002513: R_386_PC32	Dbg::kprintf(char const*, ...)
10002517:	58                   	pop    eax
10002518:	5a                   	pop    edx
10002519:	56                   	push   esi
1000251a:	57                   	push   edi
1000251b:	e8 fc ff ff ff       	call   1000251c <getLegacyFont(char const*)+0x62>	1000251c: R_386_PC32	strcmp
10002520:	83 c4 10             	add    esp,0x10
10002523:	85 c0                	test   eax,eax
10002525:	75 0f                	jne    10002536 <getLegacyFont(char const*)+0x7c>
10002527:	51                   	push   ecx
10002528:	53                   	push   ebx
10002529:	56                   	push   esi
1000252a:	68 8f 2e 00 10       	push   0x10002e8f	1000252b: R_386_32	.text
1000252f:	e8 fc ff ff ff       	call   10002530 <getLegacyFont(char const*)+0x76>	10002530: R_386_PC32	Dbg::kprintf(char const*, ...)
10002534:	eb 43                	jmp    10002579 <getLegacyFont(char const*)+0xbf>
10002536:	43                   	inc    ebx
10002537:	eb bb                	jmp    100024f4 <getLegacyFont(char const*)+0x3a>
10002539:	83 ec 0c             	sub    esp,0xc
1000253c:	56                   	push   esi
1000253d:	e8 fc ff ff ff       	call   1000253e <getLegacyFont(char const*)+0x84>	1000253e: R_386_PC32	loadFontWithName(char*)
10002542:	a1 00 00 00 00       	mov    eax,ds:0x0	10002543: R_386_32	nextfont_
10002547:	83 c4 10             	add    esp,0x10
1000254a:	39 c7                	cmp    edi,eax
1000254c:	75 15                	jne    10002563 <getLegacyFont(char const*)+0xa9>
1000254e:	83 ec 0c             	sub    esp,0xc
10002551:	68 b3 2e 00 10       	push   0x10002eb3	10002552: R_386_32	.text
10002556:	e8 fc ff ff ff       	call   10002557 <getLegacyFont(char const*)+0x9d>	10002557: R_386_PC32	Dbg::kprintf(char const*, ...)
1000255b:	83 c4 10             	add    esp,0x10
1000255e:	83 cb ff             	or     ebx,0xffffffff
10002561:	eb 19                	jmp    1000257c <getLegacyFont(char const*)+0xc2>
10002563:	52                   	push   edx
10002564:	48                   	dec    eax
10002565:	50                   	push   eax
10002566:	56                   	push   esi
10002567:	68 d0 2e 00 10       	push   0x10002ed0	10002568: R_386_32	.text
1000256c:	e8 fc ff ff ff       	call   1000256d <getLegacyFont(char const*)+0xb3>	1000256d: R_386_PC32	Dbg::kprintf(char const*, ...)
10002571:	a1 00 00 00 00       	mov    eax,ds:0x0	10002572: R_386_32	nextfont_
10002576:	8d 58 ff             	lea    ebx,[eax-0x1]
10002579:	83 c4 10             	add    esp,0x10
1000257c:	89 d8                	mov    eax,ebx
1000257e:	81 c4 00 01 00 00    	add    esp,0x100
10002584:	5b                   	pop    ebx
10002585:	5e                   	pop    esi
10002586:	5f                   	pop    edi
10002587:	c3                   	ret    

10002588 <getLegacyFont(LegacyFontType)>:
10002588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000258c:	83 f8 05             	cmp    eax,0x5
1000258f:	77 46                	ja     100025d7 <getLegacyFont(LegacyFontType)+0x4f>
10002591:	ff 24 85 1c 2f 00 10 	jmp    DWORD PTR [eax*4+0x10002f1c]	10002594: R_386_32	.text
10002598:	c7 44 24 04 0f 2e 00 10 	mov    DWORD PTR [esp+0x4],0x10002e0f	1000259c: R_386_32	.text
100025a0:	eb 30                	jmp    100025d2 <getLegacyFont(LegacyFontType)+0x4a>
100025a2:	c7 44 24 04 f1 2e 00 10 	mov    DWORD PTR [esp+0x4],0x10002ef1	100025a6: R_386_32	.text
100025aa:	eb 26                	jmp    100025d2 <getLegacyFont(LegacyFontType)+0x4a>
100025ac:	c7 44 24 04 f9 2e 00 10 	mov    DWORD PTR [esp+0x4],0x10002ef9	100025b0: R_386_32	.text
100025b4:	eb 1c                	jmp    100025d2 <getLegacyFont(LegacyFontType)+0x4a>
100025b6:	c7 44 24 04 02 2f 00 10 	mov    DWORD PTR [esp+0x4],0x10002f02	100025ba: R_386_32	.text
100025be:	eb 12                	jmp    100025d2 <getLegacyFont(LegacyFontType)+0x4a>
100025c0:	c7 44 24 04 0a 2f 00 10 	mov    DWORD PTR [esp+0x4],0x10002f0a	100025c4: R_386_32	.text
100025c8:	eb 08                	jmp    100025d2 <getLegacyFont(LegacyFontType)+0x4a>
100025ca:	c7 44 24 04 10 2f 00 10 	mov    DWORD PTR [esp+0x4],0x10002f10	100025ce: R_386_32	.text
100025d2:	e9 e3 fe ff ff       	jmp    100024ba <getLegacyFont(char const*)>
100025d7:	83 c8 ff             	or     eax,0xffffffff
100025da:	c3                   	ret    
100025db:	90                   	nop

100025dc <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)>:
100025dc:	57                   	push   edi
100025dd:	53                   	push   ebx
100025de:	83 ec 08             	sub    esp,0x8
100025e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100025e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100025e9:	6a 02                	push   0x2
100025eb:	53                   	push   ebx
100025ec:	e8 fc ff ff ff       	call   100025ed <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x11>	100025ed: R_386_PC32	GDO::GDO(GDOType, Context*)
100025f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100025f5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100025f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100025fc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
100025ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002603:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
10002606:	a1 00 00 00 00       	mov    eax,ds:0x0	10002607: R_386_32	System
1000260b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
1000260e:	83 c9 ff             	or     ecx,0xffffffff
10002611:	31 c0                	xor    eax,eax
10002613:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10002617:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
10002619:	89 ca                	mov    edx,ecx
1000261b:	f7 d2                	not    edx
1000261d:	89 14 24             	mov    DWORD PTR [esp],edx
10002620:	e8 fc ff ff ff       	call   10002621 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x45>	10002621: R_386_PC32	malloc
10002625:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
10002628:	5a                   	pop    edx
10002629:	59                   	pop    ecx
1000262a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000262e:	50                   	push   eax
1000262f:	e8 fc ff ff ff       	call   10002630 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x54>	10002630: R_386_PC32	strcpy
10002634:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002637: R_386_32	legacyDraw(GDO*)
1000263b:	83 c4 14             	add    esp,0x14
1000263e:	5b                   	pop    ebx
1000263f:	5f                   	pop    edi
10002640:	c3                   	ret    
10002641:	90                   	nop

10002642 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)>:
10002642:	57                   	push   edi
10002643:	53                   	push   ebx
10002644:	83 ec 08             	sub    esp,0x8
10002647:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000264b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000264f:	6a 02                	push   0x2
10002651:	53                   	push   ebx
10002652:	e8 fc ff ff ff       	call   10002653 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x11>	10002653: R_386_PC32	GDO::GDO(GDOType, Context*)
10002657:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000265b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000265e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002662:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10002665:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002669:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
1000266c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002670:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
10002673:	83 c9 ff             	or     ecx,0xffffffff
10002676:	31 c0                	xor    eax,eax
10002678:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
1000267c:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
1000267e:	89 ca                	mov    edx,ecx
10002680:	f7 d2                	not    edx
10002682:	89 14 24             	mov    DWORD PTR [esp],edx
10002685:	e8 fc ff ff ff       	call   10002686 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x44>	10002686: R_386_PC32	malloc
1000268a:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
1000268d:	5a                   	pop    edx
1000268e:	59                   	pop    ecx
1000268f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10002693:	50                   	push   eax
10002694:	e8 fc ff ff ff       	call   10002695 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x53>	10002695: R_386_PC32	strcpy
10002699:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	1000269c: R_386_32	legacyDraw(GDO*)
100026a0:	83 c4 14             	add    esp,0x14
100026a3:	5b                   	pop    ebx
100026a4:	5f                   	pop    edi
100026a5:	c3                   	ret    

100026a6 <legacyFontInit()>:
100026a6:	83 ec 0c             	sub    esp,0xc
100026a9:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100026ab: R_386_32	nextfont_
100026b3:	e8 fc ff ff ff       	call   100026b4 <legacyFontInit()+0xe>	100026b4: R_386_PC32	loadbuiltinfonts()
100026b8:	e8 fc ff ff ff       	call   100026b9 <legacyFontInit()+0x13>	100026b9: R_386_PC32	loadfonts()
100026bd:	83 ec 0c             	sub    esp,0xc
100026c0:	68 0f 2e 00 10       	push   0x10002e0f	100026c1: R_386_32	.text
100026c5:	e8 fc ff ff ff       	call   100026c6 <legacyFontInit()+0x20>	100026c6: R_386_PC32	getLegacyFont(char const*)
100026ca:	a3 00 00 00 00       	mov    ds:0x0,eax	100026cb: R_386_32	System
100026cf:	83 c4 1c             	add    esp,0x1c
100026d2:	c3                   	ret    
100026d3:	90                   	nop

100026d4 <rectDrawFunc(GDO*)>:
100026d4:	83 ec 14             	sub    esp,0x14
100026d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100026db:	ff 70 50             	push   DWORD PTR [eax+0x50]
100026de:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
100026e1:	ff 70 48             	push   DWORD PTR [eax+0x48]
100026e4:	ff 70 44             	push   DWORD PTR [eax+0x44]
100026e7:	ff 70 40             	push   DWORD PTR [eax+0x40]
100026ea:	ff 70 04             	push   DWORD PTR [eax+0x4]
100026ed:	e8 fc ff ff ff       	call   100026ee <rectDrawFunc(GDO*)+0x1a>	100026ee: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
100026f2:	83 c4 2c             	add    esp,0x2c
100026f5:	c3                   	ret    

100026f6 <rectPtnDrawFunc(GDO*)>:
100026f6:	83 ec 14             	sub    esp,0x14
100026f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100026fd:	ff 70 50             	push   DWORD PTR [eax+0x50]
10002700:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10002703:	ff 70 48             	push   DWORD PTR [eax+0x48]
10002706:	ff 70 44             	push   DWORD PTR [eax+0x44]
10002709:	ff 70 40             	push   DWORD PTR [eax+0x40]
1000270c:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000270f:	e8 fc ff ff ff       	call   10002710 <rectPtnDrawFunc(GDO*)+0x1a>	10002710: R_386_PC32	Context::fillRect(int, int, int, int, Brush*)
10002714:	83 c4 2c             	add    esp,0x2c
10002717:	c3                   	ret    

10002718 <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)>:
10002718:	53                   	push   ebx
10002719:	83 ec 0c             	sub    esp,0xc
1000271c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002724:	6a 01                	push   0x1
10002726:	53                   	push   ebx
10002727:	e8 fc ff ff ff       	call   10002728 <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)+0x10>	10002728: R_386_PC32	GDO::GDO(GDOType, Context*)
1000272c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002730:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10002733:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002737:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
1000273a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000273e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10002741:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002745:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10002748:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000274c:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
1000274f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002752: R_386_32	rectPtnDrawFunc(GDO*)
10002756:	83 c4 18             	add    esp,0x18
10002759:	5b                   	pop    ebx
1000275a:	c3                   	ret    
1000275b:	90                   	nop

1000275c <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)>:
1000275c:	53                   	push   ebx
1000275d:	83 ec 0c             	sub    esp,0xc
10002760:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002764:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002768:	6a 01                	push   0x1
1000276a:	53                   	push   ebx
1000276b:	e8 fc ff ff ff       	call   1000276c <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)+0x10>	1000276c: R_386_PC32	GDO::GDO(GDOType, Context*)
10002770:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002774:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10002777:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000277b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
1000277e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002782:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10002785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002789:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
1000278c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002790:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10002793:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002796: R_386_32	rectDrawFunc(GDO*)
1000279a:	83 c4 18             	add    esp,0x18
1000279d:	5b                   	pop    ebx
1000279e:	c3                   	ret    
1000279f:	90                   	nop

100027a0 <regnDrawFunc(GDO*)>:
100027a0:	c3                   	ret    
100027a1:	90                   	nop

100027a2 <Region::Region(int, int, int, int, Context*)>:
100027a2:	53                   	push   ebx
100027a3:	83 ec 0c             	sub    esp,0xc
100027a6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100027aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100027ae:	6a 00                	push   0x0
100027b0:	53                   	push   ebx
100027b1:	e8 fc ff ff ff       	call   100027b2 <Region::Region(int, int, int, int, Context*)+0x10>	100027b2: R_386_PC32	GDO::GDO(GDOType, Context*)
100027b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100027ba:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
100027bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100027c1:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
100027c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100027c8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
100027cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100027cf:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
100027d2:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	100027d5: R_386_32	regnDrawFunc(GDO*)
100027d9:	83 c4 18             	add    esp,0x18
100027dc:	5b                   	pop    ebx
100027dd:	c3                   	ret    

100027de <Region::getRegionsAbove(Region*)>:
100027de:	55                   	push   ebp
100027df:	57                   	push   edi
100027e0:	56                   	push   esi
100027e1:	53                   	push   ebx
100027e2:	83 ec 28             	sub    esp,0x28
100027e5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
100027e9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100027ed:	6a 08                	push   0x8
100027ef:	e8 fc ff ff ff       	call   100027f0 <Region::getRegionsAbove(Region*)+0x12>	100027f0: R_386_PC32	malloc
100027f4:	89 c3                	mov    ebx,eax
100027f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100027fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10002803:	89 3c 24             	mov    DWORD PTR [esp],edi
10002806:	e8 fc ff ff ff       	call   10002807 <Region::getRegionsAbove(Region*)+0x29>	10002807: R_386_PC32	GDO::resetNext()
1000280b:	83 c4 10             	add    esp,0x10
1000280e:	83 ec 0c             	sub    esp,0xc
10002811:	57                   	push   edi
10002812:	e8 fc ff ff ff       	call   10002813 <Region::getRegionsAbove(Region*)+0x35>	10002813: R_386_PC32	GDO::hasNext()
10002817:	83 c4 10             	add    esp,0x10
1000281a:	84 c0                	test   al,al
1000281c:	74 10                	je     1000282e <Region::getRegionsAbove(Region*)+0x50>
1000281e:	83 ec 0c             	sub    esp,0xc
10002821:	57                   	push   edi
10002822:	e8 fc ff ff ff       	call   10002823 <Region::getRegionsAbove(Region*)+0x45>	10002823: R_386_PC32	GDO::getNext()
10002827:	83 c4 10             	add    esp,0x10
1000282a:	39 e8                	cmp    eax,ebp
1000282c:	75 e0                	jne    1000280e <Region::getRegionsAbove(Region*)+0x30>
1000282e:	83 ec 0c             	sub    esp,0xc
10002831:	57                   	push   edi
10002832:	e8 fc ff ff ff       	call   10002833 <Region::getRegionsAbove(Region*)+0x55>	10002833: R_386_PC32	GDO::hasNext()
10002837:	83 c4 10             	add    esp,0x10
1000283a:	84 c0                	test   al,al
1000283c:	74 7b                	je     100028b9 <Region::getRegionsAbove(Region*)+0xdb>
1000283e:	83 ec 0c             	sub    esp,0xc
10002841:	57                   	push   edi
10002842:	e8 fc ff ff ff       	call   10002843 <Region::getRegionsAbove(Region*)+0x65>	10002843: R_386_PC32	GDO::getNext()
10002847:	89 c6                	mov    esi,eax
10002849:	83 c4 10             	add    esp,0x10
1000284c:	85 c0                	test   eax,eax
1000284e:	74 de                	je     1000282e <Region::getRegionsAbove(Region*)+0x50>
10002850:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
10002853:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10002857:	8b 56 2c             	mov    edx,DWORD PTR [esi+0x2c]
1000285a:	03 45 34             	add    eax,DWORD PTR [ebp+0x34]
1000285d:	39 d0                	cmp    eax,edx
1000285f:	7e cd                	jle    1000282e <Region::getRegionsAbove(Region*)+0x50>
10002861:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
10002864:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
10002867:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000286b:	8b 45 38             	mov    eax,DWORD PTR [ebp+0x38]
1000286e:	01 c8                	add    eax,ecx
10002870:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10002874:	7e b8                	jle    1000282e <Region::getRegionsAbove(Region*)+0x50>
10002876:	03 56 34             	add    edx,DWORD PTR [esi+0x34]
10002879:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
1000287d:	7d af                	jge    1000282e <Region::getRegionsAbove(Region*)+0x50>
1000287f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002883:	03 46 38             	add    eax,DWORD PTR [esi+0x38]
10002886:	39 c1                	cmp    ecx,eax
10002888:	7d a4                	jge    1000282e <Region::getRegionsAbove(Region*)+0x50>
1000288a:	83 ec 0c             	sub    esp,0xc
1000288d:	6a 0c                	push   0xc
1000288f:	e8 fc ff ff ff       	call   10002890 <Region::getRegionsAbove(Region*)+0xb2>	10002890: R_386_PC32	malloc
10002894:	89 30                	mov    DWORD PTR [eax],esi
10002896:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10002899:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
1000289c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100028a3:	83 c4 10             	add    esp,0x10
100028a6:	85 d2                	test   edx,edx
100028a8:	74 05                	je     100028af <Region::getRegionsAbove(Region*)+0xd1>
100028aa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
100028ad:	eb 02                	jmp    100028b1 <Region::getRegionsAbove(Region*)+0xd3>
100028af:	89 03                	mov    DWORD PTR [ebx],eax
100028b1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100028b4:	e9 75 ff ff ff       	jmp    1000282e <Region::getRegionsAbove(Region*)+0x50>
100028b9:	89 d8                	mov    eax,ebx
100028bb:	83 c4 1c             	add    esp,0x1c
100028be:	5b                   	pop    ebx
100028bf:	5e                   	pop    esi
100028c0:	5f                   	pop    edi
100028c1:	5d                   	pop    ebp
100028c2:	c3                   	ret    
100028c3:	90                   	nop

100028c4 <Region::applyBoundClipping(int, List<CRect*>*)>:
100028c4:	55                   	push   ebp
100028c5:	57                   	push   edi
100028c6:	56                   	push   esi
100028c7:	53                   	push   ebx
100028c8:	83 ec 1c             	sub    esp,0x1c
100028cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100028cf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
100028d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
100028d7:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
100028db:	0f 84 ef 01 00 00    	je     10002ad0 <Region::applyBoundClipping(int, List<CRect*>*)+0x20c>
100028e1:	83 ec 0c             	sub    esp,0xc
100028e4:	53                   	push   ebx
100028e5:	e8 fc ff ff ff       	call   100028e6 <Region::applyBoundClipping(int, List<CRect*>*)+0x22>	100028e6: R_386_PC32	GDO::screenX()
100028ea:	89 c5                	mov    ebp,eax
100028ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
100028ef:	e8 fc ff ff ff       	call   100028f0 <Region::applyBoundClipping(int, List<CRect*>*)+0x2c>	100028f0: R_386_PC32	GDO::screenY()
100028f4:	89 c6                	mov    esi,eax
100028f6:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
100028fd:	e8 fc ff ff ff       	call   100028fe <Region::applyBoundClipping(int, List<CRect*>*)+0x3a>	100028fe: R_386_PC32	malloc
10002902:	89 c7                	mov    edi,eax
10002904:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
10002907:	01 e8                	add    eax,ebp
10002909:	48                   	dec    eax
1000290a:	89 04 24             	mov    DWORD PTR [esp],eax
1000290d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10002910:	01 f0                	add    eax,esi
10002912:	48                   	dec    eax
10002913:	50                   	push   eax
10002914:	55                   	push   ebp
10002915:	56                   	push   esi
10002916:	57                   	push   edi
10002917:	e8 fc ff ff ff       	call   10002918 <Region::applyBoundClipping(int, List<CRect*>*)+0x54>	10002918: R_386_PC32	CRect::CRect(int, int, int, int)
1000291c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
1000291f:	83 c4 20             	add    esp,0x20
10002922:	85 c0                	test   eax,eax
10002924:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10002928:	0f 85 ab 00 00 00    	jne    100029d9 <Region::applyBoundClipping(int, List<CRect*>*)+0x115>
1000292e:	85 d2                	test   edx,edx
10002930:	0f 84 8c 00 00 00    	je     100029c2 <Region::applyBoundClipping(int, List<CRect*>*)+0xfe>
10002936:	31 f6                	xor    esi,esi
10002938:	8b 02                	mov    eax,DWORD PTR [edx]
1000293a:	89 c5                	mov    ebp,eax
1000293c:	31 c9                	xor    ecx,ecx
1000293e:	85 ed                	test   ebp,ebp
10002940:	74 06                	je     10002948 <Region::applyBoundClipping(int, List<CRect*>*)+0x84>
10002942:	41                   	inc    ecx
10002943:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10002946:	eb f6                	jmp    1000293e <Region::applyBoundClipping(int, List<CRect*>*)+0x7a>
10002948:	39 ce                	cmp    esi,ecx
1000294a:	7d 5f                	jge    100029ab <Region::applyBoundClipping(int, List<CRect*>*)+0xe7>
1000294c:	89 c5                	mov    ebp,eax
1000294e:	31 c9                	xor    ecx,ecx
10002950:	85 ed                	test   ebp,ebp
10002952:	74 06                	je     1000295a <Region::applyBoundClipping(int, List<CRect*>*)+0x96>
10002954:	41                   	inc    ecx
10002955:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10002958:	eb f6                	jmp    10002950 <Region::applyBoundClipping(int, List<CRect*>*)+0x8c>
1000295a:	39 ce                	cmp    esi,ecx
1000295c:	7f 0c                	jg     1000296a <Region::applyBoundClipping(int, List<CRect*>*)+0xa6>
1000295e:	89 f1                	mov    ecx,esi
10002960:	85 c9                	test   ecx,ecx
10002962:	74 06                	je     1000296a <Region::applyBoundClipping(int, List<CRect*>*)+0xa6>
10002964:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10002967:	49                   	dec    ecx
10002968:	eb f6                	jmp    10002960 <Region::applyBoundClipping(int, List<CRect*>*)+0x9c>
1000296a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000296e:	8b 28                	mov    ebp,DWORD PTR [eax]
10002970:	83 ec 0c             	sub    esp,0xc
10002973:	6a 10                	push   0x10
10002975:	e8 fc ff ff ff       	call   10002976 <Region::applyBoundClipping(int, List<CRect*>*)+0xb2>	10002976: R_386_PC32	malloc
1000297a:	59                   	pop    ecx
1000297b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
1000297e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10002981:	ff 75 00             	push   DWORD PTR [ebp+0x0]
10002984:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002987:	50                   	push   eax
10002988:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000298c:	e8 fc ff ff ff       	call   1000298d <Region::applyBoundClipping(int, List<CRect*>*)+0xc9>	1000298d: R_386_PC32	CRect::CRect(int, int, int, int)
10002991:	83 c4 18             	add    esp,0x18
10002994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002998:	50                   	push   eax
10002999:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000299c:	e8 fc ff ff ff       	call   1000299d <Region::applyBoundClipping(int, List<CRect*>*)+0xd9>	1000299d: R_386_PC32	Context::addClipRect(CRect*)
100029a1:	46                   	inc    esi
100029a2:	83 c4 10             	add    esp,0x10
100029a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100029a9:	eb 8d                	jmp    10002938 <Region::applyBoundClipping(int, List<CRect*>*)+0x74>
100029ab:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
100029af:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100029b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100029b6:	83 c4 1c             	add    esp,0x1c
100029b9:	5b                   	pop    ebx
100029ba:	5e                   	pop    esi
100029bb:	5f                   	pop    edi
100029bc:	5d                   	pop    ebp
100029bd:	e9 fc ff ff ff       	jmp    100029be <Region::applyBoundClipping(int, List<CRect*>*)+0xfa>	100029be: R_386_PC32	Context::intersectClipRect(CRect*)
100029c2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
100029c6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100029c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100029cd:	83 c4 1c             	add    esp,0x1c
100029d0:	5b                   	pop    ebx
100029d1:	5e                   	pop    esi
100029d2:	5f                   	pop    edi
100029d3:	5d                   	pop    ebp
100029d4:	e9 fc ff ff ff       	jmp    100029d5 <Region::applyBoundClipping(int, List<CRect*>*)+0x111>	100029d5: R_386_PC32	Context::addClipRect(CRect*)
100029d9:	51                   	push   ecx
100029da:	52                   	push   edx
100029db:	6a 01                	push   0x1
100029dd:	50                   	push   eax
100029de:	e8 fc ff ff ff       	call   100029df <Region::applyBoundClipping(int, List<CRect*>*)+0x11b>	100029df: R_386_PC32	Region::applyBoundClipping(int, List<CRect*>*)
100029e3:	5e                   	pop    esi
100029e4:	5d                   	pop    ebp
100029e5:	57                   	push   edi
100029e6:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100029e9:	e8 fc ff ff ff       	call   100029ea <Region::applyBoundClipping(int, List<CRect*>*)+0x126>	100029ea: R_386_PC32	Context::intersectClipRect(CRect*)
100029ee:	58                   	pop    eax
100029ef:	5a                   	pop    edx
100029f0:	53                   	push   ebx
100029f1:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100029f4:	e8 fc ff ff ff       	call   100029f5 <Region::applyBoundClipping(int, List<CRect*>*)+0x131>	100029f5: R_386_PC32	Region::getRegionsAbove(Region*)
100029f9:	89 c6                	mov    esi,eax
100029fb:	83 c4 10             	add    esp,0x10
100029fe:	8b 06                	mov    eax,DWORD PTR [esi]
10002a00:	89 c1                	mov    ecx,eax
10002a02:	31 d2                	xor    edx,edx
10002a04:	85 c9                	test   ecx,ecx
10002a06:	74 06                	je     10002a0e <Region::applyBoundClipping(int, List<CRect*>*)+0x14a>
10002a08:	42                   	inc    edx
10002a09:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10002a0c:	eb f6                	jmp    10002a04 <Region::applyBoundClipping(int, List<CRect*>*)+0x140>
10002a0e:	85 d2                	test   edx,edx
10002a10:	0f 84 8a 00 00 00    	je     10002aa0 <Region::applyBoundClipping(int, List<CRect*>*)+0x1dc>
10002a16:	8b 38                	mov    edi,DWORD PTR [eax]
10002a18:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10002a1b:	52                   	push   edx
10002a1c:	52                   	push   edx
10002a1d:	6a 0c                	push   0xc
10002a1f:	50                   	push   eax
10002a20:	e8 fc ff ff ff       	call   10002a21 <Region::applyBoundClipping(int, List<CRect*>*)+0x15d>	10002a21: R_386_PC32	operator delete(void*, unsigned long)
10002a25:	89 2e                	mov    DWORD PTR [esi],ebp
10002a27:	83 c4 10             	add    esp,0x10
10002a2a:	85 ed                	test   ebp,ebp
10002a2c:	75 09                	jne    10002a37 <Region::applyBoundClipping(int, List<CRect*>*)+0x173>
10002a2e:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10002a35:	eb 07                	jmp    10002a3e <Region::applyBoundClipping(int, List<CRect*>*)+0x17a>
10002a37:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
10002a3e:	83 ec 0c             	sub    esp,0xc
10002a41:	57                   	push   edi
10002a42:	e8 fc ff ff ff       	call   10002a43 <Region::applyBoundClipping(int, List<CRect*>*)+0x17f>	10002a43: R_386_PC32	GDO::screenX()
10002a47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002a4b:	89 3c 24             	mov    DWORD PTR [esp],edi
10002a4e:	e8 fc ff ff ff       	call   10002a4f <Region::applyBoundClipping(int, List<CRect*>*)+0x18b>	10002a4f: R_386_PC32	GDO::screenY()
10002a53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002a57:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10002a5e:	e8 fc ff ff ff       	call   10002a5f <Region::applyBoundClipping(int, List<CRect*>*)+0x19b>	10002a5f: R_386_PC32	malloc
10002a63:	89 c5                	mov    ebp,eax
10002a65:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10002a69:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
10002a6c:	01 c8                	add    eax,ecx
10002a6e:	48                   	dec    eax
10002a6f:	89 04 24             	mov    DWORD PTR [esp],eax
10002a72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10002a76:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
10002a79:	01 d0                	add    eax,edx
10002a7b:	48                   	dec    eax
10002a7c:	50                   	push   eax
10002a7d:	51                   	push   ecx
10002a7e:	52                   	push   edx
10002a7f:	55                   	push   ebp
10002a80:	e8 fc ff ff ff       	call   10002a81 <Region::applyBoundClipping(int, List<CRect*>*)+0x1bd>	10002a81: R_386_PC32	CRect::CRect(int, int, int, int)
10002a85:	83 c4 18             	add    esp,0x18
10002a88:	55                   	push   ebp
10002a89:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002a8c:	e8 fc ff ff ff       	call   10002a8d <Region::applyBoundClipping(int, List<CRect*>*)+0x1c9>	10002a8d: R_386_PC32	Context::subClipRect(CRect*)
10002a91:	59                   	pop    ecx
10002a92:	5f                   	pop    edi
10002a93:	6a 10                	push   0x10
10002a95:	55                   	push   ebp
10002a96:	e8 fc ff ff ff       	call   10002a97 <Region::applyBoundClipping(int, List<CRect*>*)+0x1d3>	10002a97: R_386_PC32	operator delete(void*, unsigned long)
10002a9b:	e9 5b ff ff ff       	jmp    100029fb <Region::applyBoundClipping(int, List<CRect*>*)+0x137>
10002aa0:	85 c0                	test   eax,eax
10002aa2:	74 14                	je     10002ab8 <Region::applyBoundClipping(int, List<CRect*>*)+0x1f4>
10002aa4:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002aa7:	52                   	push   edx
10002aa8:	52                   	push   edx
10002aa9:	6a 0c                	push   0xc
10002aab:	50                   	push   eax
10002aac:	e8 fc ff ff ff       	call   10002aad <Region::applyBoundClipping(int, List<CRect*>*)+0x1e9>	10002aad: R_386_PC32	operator delete(void*, unsigned long)
10002ab1:	89 d8                	mov    eax,ebx
10002ab3:	83 c4 10             	add    esp,0x10
10002ab6:	eb e8                	jmp    10002aa0 <Region::applyBoundClipping(int, List<CRect*>*)+0x1dc>
10002ab8:	c7 44 24 34 08 00 00 00 	mov    DWORD PTR [esp+0x34],0x8
10002ac0:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
10002ac4:	83 c4 1c             	add    esp,0x1c
10002ac7:	5b                   	pop    ebx
10002ac8:	5e                   	pop    esi
10002ac9:	5f                   	pop    edi
10002aca:	5d                   	pop    ebp
10002acb:	e9 fc ff ff ff       	jmp    10002acc <Region::applyBoundClipping(int, List<CRect*>*)+0x208>	10002acc: R_386_PC32	operator delete(void*, unsigned long)
10002ad0:	83 c4 1c             	add    esp,0x1c
10002ad3:	5b                   	pop    ebx
10002ad4:	5e                   	pop    esi
10002ad5:	5f                   	pop    edi
10002ad6:	5d                   	pop    ebp
10002ad7:	c3                   	ret    

10002ad8 <List<CRect*>::insertAtTail(CRect*)>:
10002ad8:	53                   	push   ebx
10002ad9:	83 ec 14             	sub    esp,0x14
10002adc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10002ae0:	6a 0c                	push   0xc
10002ae2:	e8 fc ff ff ff       	call   10002ae3 <List<CRect*>::insertAtTail(CRect*)+0xb>	10002ae3: R_386_PC32	malloc
10002ae7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10002aeb:	89 10                	mov    DWORD PTR [eax],edx
10002aed:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10002af0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10002af3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10002afa:	83 c4 10             	add    esp,0x10
10002afd:	85 d2                	test   edx,edx
10002aff:	74 05                	je     10002b06 <List<CRect*>::insertAtTail(CRect*)+0x2e>
10002b01:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
10002b04:	eb 02                	jmp    10002b08 <List<CRect*>::insertAtTail(CRect*)+0x30>
10002b06:	89 03                	mov    DWORD PTR [ebx],eax
10002b08:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10002b0b:	83 c4 08             	add    esp,0x8
10002b0e:	5b                   	pop    ebx
10002b0f:	c3                   	ret    

10002b10 <List<CRect*>::deleteHead()>:
10002b10:	56                   	push   esi
10002b11:	53                   	push   ebx
10002b12:	51                   	push   ecx
10002b13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002b17:	8b 06                	mov    eax,DWORD PTR [esi]
10002b19:	85 c0                	test   eax,eax
10002b1b:	74 26                	je     10002b43 <List<CRect*>::deleteHead()+0x33>
10002b1d:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002b20:	52                   	push   edx
10002b21:	52                   	push   edx
10002b22:	6a 0c                	push   0xc
10002b24:	50                   	push   eax
10002b25:	e8 fc ff ff ff       	call   10002b26 <List<CRect*>::deleteHead()+0x16>	10002b26: R_386_PC32	operator delete(void*, unsigned long)
10002b2a:	89 1e                	mov    DWORD PTR [esi],ebx
10002b2c:	83 c4 10             	add    esp,0x10
10002b2f:	85 db                	test   ebx,ebx
10002b31:	75 09                	jne    10002b3c <List<CRect*>::deleteHead()+0x2c>
10002b33:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10002b3a:	eb 07                	jmp    10002b43 <List<CRect*>::deleteHead()+0x33>
10002b3c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10002b43:	58                   	pop    eax
10002b44:	5b                   	pop    ebx
10002b45:	5e                   	pop    esi
10002b46:	c3                   	ret    
10002b47:	90                   	nop

10002b48 <List<CRect*>::~List()>:
10002b48:	53                   	push   ebx
10002b49:	83 ec 08             	sub    esp,0x8
10002b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002b50:	8b 00                	mov    eax,DWORD PTR [eax]
10002b52:	85 c0                	test   eax,eax
10002b54:	74 14                	je     10002b6a <List<CRect*>::~List()+0x22>
10002b56:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002b59:	51                   	push   ecx
10002b5a:	51                   	push   ecx
10002b5b:	6a 0c                	push   0xc
10002b5d:	50                   	push   eax
10002b5e:	e8 fc ff ff ff       	call   10002b5f <List<CRect*>::~List()+0x17>	10002b5f: R_386_PC32	operator delete(void*, unsigned long)
10002b63:	89 d8                	mov    eax,ebx
10002b65:	83 c4 10             	add    esp,0x10
10002b68:	eb e8                	jmp    10002b52 <List<CRect*>::~List()+0xa>
10002b6a:	83 c4 08             	add    esp,0x8
10002b6d:	5b                   	pop    ebx
10002b6e:	c3                   	ret    
10002b6f:	43                   	inc    ebx
10002b70:	4c                   	dec    esp
10002b71:	49                   	dec    ecx
10002b72:	50                   	push   eax
10002b73:	44                   	inc    esp
10002b74:	52                   	push   edx
10002b75:	41                   	inc    ecx
10002b76:	57                   	push   edi
10002b77:	20 53 54             	and    BYTE PTR [ebx+0x54],dl
10002b7a:	41                   	inc    ecx
10002b7b:	52                   	push   edx
10002b7c:	54                   	push   esp
10002b7d:	45                   	inc    ebp
10002b7e:	44                   	inc    esp
10002b7f:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002b82:	54                   	push   esp
10002b83:	68 65 20 53 79       	push   0x79532065
10002b88:	73 74                	jae    10002bfe <List<CRect*>::~List()+0xb6>
10002b8a:	65 6d                	gs ins DWORD PTR es:[edi],dx
10002b8c:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10002b8f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002b90:	74 21                	je     10002bb3 <List<CRect*>::~List()+0x6b>
10002b92:	00 54 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dl
10002b96:	65 73 20             	gs jae 10002bb9 <List<CRect*>::~List()+0x71>
10002b99:	4e                   	dec    esi
10002b9a:	65 77 20             	gs ja  10002bbd <List<CRect*>::~List()+0x75>
10002b9d:	52                   	push   edx
10002b9e:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002b9f:	6d                   	ins    DWORD PTR es:[edi],dx
10002ba0:	61                   	popa   
10002ba1:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002ba2:	21 00                	and    DWORD PTR [eax],eax
10002ba4:	43                   	inc    ebx
10002ba5:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002ba6:	6d                   	ins    DWORD PTR es:[edi],dx
10002ba7:	69 63 20 53 61 6e 73 	imul   esp,DWORD PTR [ebx+0x20],0x736e6153
10002bae:	21 20                	and    DWORD PTR [eax],esp
10002bb0:	3a 29                	cmp    ch,BYTE PTR [ecx]
10002bb2:	00 41 72             	add    BYTE PTR [ecx+0x72],al
10002bb5:	69 61 6c 20 69 73 20 	imul   esp,DWORD PTR [ecx+0x6c],0x20736920
10002bbc:	73 6f                	jae    10002c2d <List<CRect*>::~List()+0xe5>
10002bbe:	20 62 6f             	and    BYTE PTR [edx+0x6f],ah
10002bc1:	72 69                	jb     10002c2c <List<CRect*>::~List()+0xe4>
10002bc3:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002bc4:	67 2e 2e 2e 00 43 6f 	cs cs add BYTE PTR cs:[bp+di+0x6f],al
10002bcb:	75 72                	jne    10002c3f <List<CRect*>::~List()+0xf7>
10002bcd:	69 65 72 20 66 6f 72 	imul   esp,DWORD PTR [ebp+0x72],0x726f6620
10002bd4:	20 70 72             	and    BYTE PTR [eax+0x72],dh
10002bd7:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002bd8:	67 72 61             	addr16 jb 10002c3c <List<CRect*>::~List()+0xf4>
10002bdb:	6d                   	ins    DWORD PTR es:[edi],dx
10002bdc:	6d                   	ins    DWORD PTR es:[edi],dx
10002bdd:	69 6e 67 2e 2e 2e 00 	imul   ebp,DWORD PTR [esi+0x67],0x2e2e2e
10002be4:	1a 08                	sbb    cl,BYTE PTR [eax]	10002be4: R_386_32	.text
10002be6:	00 10                	add    BYTE PTR [eax],dl
10002be8:	21 08                	and    DWORD PTR [eax],ecx	10002be8: R_386_32	.text
10002bea:	00 10                	add    BYTE PTR [eax],dl
10002bec:	28 08                	sub    BYTE PTR [eax],cl	10002bec: R_386_32	.text
10002bee:	00 10                	add    BYTE PTR [eax],dl
10002bf0:	2f                   	das    	10002bf0: R_386_32	.text
10002bf1:	08 00                	or     BYTE PTR [eax],al
10002bf3:	10 36                	adc    BYTE PTR [esi],dh	10002bf4: R_386_32	.text
10002bf5:	08 00                	or     BYTE PTR [eax],al
10002bf7:	10 3b                	adc    BYTE PTR [ebx],bh	10002bf8: R_386_32	.text
10002bf9:	08 00                	or     BYTE PTR [eax],al
10002bfb:	10 44 08 00          	adc    BYTE PTR [eax+ecx*1+0x0],al	10002bfc: R_386_32	.text
10002bff:	10 4d 08             	adc    BYTE PTR [ebp+0x8],cl	10002c00: R_386_32	.text
10002c02:	00 10                	add    BYTE PTR [eax],dl
10002c04:	56                   	push   esi	10002c04: R_386_32	.text
10002c05:	08 00                	or     BYTE PTR [eax],al
10002c07:	10 72 08             	adc    BYTE PTR [edx+0x8],dh	10002c08: R_386_32	.text
10002c0a:	00 10                	add    BYTE PTR [eax],dl
10002c0c:	7b 08                	jnp    10002c16 <List<CRect*>::~List()+0xce>	10002c0c: R_386_32	.text
10002c0e:	00 10                	add    BYTE PTR [eax],dl
10002c10:	87 08                	xchg   DWORD PTR [eax],ecx	10002c10: R_386_32	.text
10002c12:	00 10                	add    BYTE PTR [eax],dl
10002c14:	8f 08 00 10          	(bad)	10002c14: R_386_32	.text
10002c18:	97                   	xchg   edi,eax	10002c18: R_386_32	.text
10002c19:	08 00                	or     BYTE PTR [eax],al
10002c1b:	10 ac 08 00 10 43 3a 	adc    BYTE PTR [eax+ecx*1+0x3a431000],ch	10002c1c: R_386_32	.text
10002c22:	2f                   	das    
10002c23:	42                   	inc    edx
10002c24:	61                   	popa   
10002c25:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002c26:	61                   	popa   
10002c27:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002c28:	61                   	popa   
10002c29:	2f                   	das    
10002c2a:	43                   	inc    ebx
10002c2b:	75 72                	jne    10002c9f <List<CRect*>::~List()+0x157>
10002c2d:	73 6f                	jae    10002c9e <List<CRect*>::~List()+0x156>
10002c2f:	72 73                	jb     10002ca4 <List<CRect*>::~List()+0x15c>
10002c31:	2f                   	das    
10002c32:	53                   	push   ebx
10002c33:	54                   	push   esp
10002c34:	41                   	inc    ecx
10002c35:	4e                   	dec    esi
10002c36:	44                   	inc    esp
10002c37:	41                   	inc    ecx
10002c38:	52                   	push   edx
10002c39:	44                   	inc    esp
10002c3a:	2e 43                	cs inc ebx
10002c3c:	55                   	push   ebp
10002c3d:	52                   	push   edx
10002c3e:	00 43 55             	add    BYTE PTR [ebx+0x55],al
10002c41:	52                   	push   edx
10002c42:	53                   	push   ebx
10002c43:	4f                   	dec    edi
10002c44:	52                   	push   edx
10002c45:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002c49:	44                   	inc    esp
10002c4a:	3a 20                	cmp    ah,BYTE PTR [eax]
10002c4c:	42                   	inc    edx
10002c4d:	41                   	inc    ecx
10002c4e:	44                   	inc    esp
10002c4f:	20 31                	and    BYTE PTR [ecx],dh
10002c51:	0a 00                	or     al,BYTE PTR [eax]
10002c53:	43                   	inc    ebx
10002c54:	55                   	push   ebp
10002c55:	52                   	push   edx
10002c56:	53                   	push   ebx
10002c57:	4f                   	dec    edi
10002c58:	52                   	push   edx
10002c59:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002c5d:	44                   	inc    esp
10002c5e:	3a 20                	cmp    ah,BYTE PTR [eax]
10002c60:	42                   	inc    edx
10002c61:	41                   	inc    ecx
10002c62:	44                   	inc    esp
10002c63:	20 32                	and    BYTE PTR [edx],dh
10002c65:	0a 00                	or     al,BYTE PTR [eax]
10002c67:	43                   	inc    ebx
10002c68:	55                   	push   ebp
10002c69:	52                   	push   edx
10002c6a:	53                   	push   ebx
10002c6b:	4f                   	dec    edi
10002c6c:	52                   	push   edx
10002c6d:	53                   	push   ebx
10002c6e:	3a 20                	cmp    ah,BYTE PTR [eax]
10002c70:	25 64 0a 00 4e       	and    eax,0x4e000a64
10002c75:	52                   	push   edx
10002c76:	4d                   	dec    ebp
10002c77:	4c                   	dec    esp
10002c78:	00 57 41             	add    BYTE PTR [edi+0x41],dl
10002c7b:	49                   	dec    ecx
10002c7c:	54                   	push   esp
10002c7d:	00 54 4c 44          	add    BYTE PTR [esp+ecx*2+0x44],dl
10002c81:	52                   	push   edx
10002c82:	00 54 45 58          	add    BYTE PTR [ebp+eax*2+0x58],dl
10002c86:	54                   	push   esp
10002c87:	00 56 45             	add    BYTE PTR [esi+0x45],dl
10002c8a:	52                   	push   edx
10002c8b:	54                   	push   esp
10002c8c:	00 48 4f             	add    BYTE PTR [eax+0x4f],cl
10002c8f:	52                   	push   edx
10002c90:	5a                   	pop    edx
10002c91:	00 48 41             	add    BYTE PTR [eax+0x41],cl
10002c94:	4e                   	dec    esi
10002c95:	44                   	inc    esp
10002c96:	00 43 55             	add    BYTE PTR [ebx+0x55],al
10002c99:	52                   	push   edx
10002c9a:	53                   	push   ebx
10002c9b:	4f                   	dec    edi
10002c9c:	52                   	push   edx
10002c9d:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002ca1:	44                   	inc    esp
10002ca2:	3a 20                	cmp    ah,BYTE PTR [eax]
10002ca4:	42                   	inc    edx
10002ca5:	41                   	inc    ecx
10002ca6:	44                   	inc    esp
10002ca7:	20 33                	and    BYTE PTR [ebx],dh
10002ca9:	0a 00                	or     al,BYTE PTR [eax]
10002cab:	61                   	popa   
10002cac:	6c                   	ins    BYTE PTR es:[edi],dx
10002cad:	6c                   	ins    BYTE PTR es:[edi],dx
10002cae:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002caf:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
10002cb2:	69 6e 67 20 74 68 65 	imul   ebp,DWORD PTR [esi+0x67],0x65687420
10002cb9:	20 63 68             	and    BYTE PTR [ebx+0x68],ah
10002cbc:	69 6c 64 20 64 69 6d 2e 	imul   ebp,DWORD PTR [esp+eiz*2+0x20],0x2e6d6964
10002cc4:	0a 00                	or     al,BYTE PTR [eax]
10002cc6:	63 68 69             	arpl   WORD PTR [eax+0x69],bp
10002cc9:	6c                   	ins    BYTE PTR es:[edi],dx
10002cca:	64 44                	fs inc esp
10002ccc:	69 6d 20 3d 20 30 78 	imul   ebp,DWORD PTR [ebp+0x20],0x7830203d
10002cd3:	25 58 0a 00 4e       	and    eax,0x4e000a58
10002cd8:	4f                   	dec    edi
10002cd9:	20 43 48             	and    BYTE PTR [ebx+0x48],al
10002cdc:	49                   	dec    ecx
10002cdd:	4c                   	dec    esp
10002cde:	44                   	inc    esp
10002cdf:	20 44 49 4d          	and    BYTE PTR [ecx+ecx*2+0x4d],al
10002ce3:	00 70 72             	add    BYTE PTR [eax+0x72],dh
10002ce6:	65 2d 65 6d 70 74    	gs sub eax,0x74706d65
10002cec:	69 76 65 20 47 44 4f 	imul   esi,DWORD PTR [esi+0x65],0x4f444720
10002cf3:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002cf5:	73 63                	jae    10002d5a <List<CRect*>::~List()+0x212>
10002cf7:	72 65                	jb     10002d5e <List<CRect*>::~List()+0x216>
10002cf9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10002cfb:	58                   	pop    eax
10002cfc:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
10002cff:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002d02:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d03:	2d 72 65 67 69       	sub    eax,0x69676572
10002d08:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002d09:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d0a:	00 70 72             	add    BYTE PTR [eax+0x72],dh
10002d0d:	65 2d 65 6d 70 74    	gs sub eax,0x74706d65
10002d13:	69 76 65 20 47 44 4f 	imul   esi,DWORD PTR [esi+0x65],0x4f444720
10002d1a:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002d1c:	73 63                	jae    10002d81 <List<CRect*>::~List()+0x239>
10002d1e:	72 65                	jb     10002d85 <List<CRect*>::~List()+0x23d>
10002d20:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10002d22:	59                   	pop    ecx
10002d23:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
10002d26:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002d29:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d2a:	2d 72 65 67 69       	sub    eax,0x69676572
10002d2f:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002d30:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d31:	00 55 50             	add    BYTE PTR [ebp+0x50],dl
10002d34:	44                   	inc    esp
10002d35:	41                   	inc    ecx
10002d36:	54                   	push   esp
10002d37:	45                   	inc    ebp
10002d38:	20 43 41             	and    BYTE PTR [ebx+0x41],al
10002d3b:	4c                   	dec    esp
10002d3c:	4c                   	dec    esp
10002d3d:	45                   	inc    ebp
10002d3e:	44                   	inc    esp
10002d3f:	20 4f 4e             	and    BYTE PTR [edi+0x4e],cl
10002d42:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10002d45:	4e                   	dec    esi
10002d46:	2d 52 45 47 49       	sub    eax,0x49474552
10002d4b:	4f                   	dec    edi
10002d4c:	4e                   	dec    esi
10002d4d:	00 47 44             	add    BYTE PTR [edi+0x44],al
10002d50:	4f                   	dec    edi
10002d51:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002d53:	61                   	popa   
10002d54:	64 64 43             	fs fs inc ebx
10002d57:	68 69 6c 64 20       	push   0x20646c69
10002d5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002d5d:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d5e:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002d61:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d62:	2d 72 65 67 69       	sub    eax,0x69676572
10002d67:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002d68:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d69:	00 43 52             	add    BYTE PTR [ebx+0x52],al
10002d6c:	45                   	inc    ebp
10002d6d:	41                   	inc    ecx
10002d6e:	54                   	push   esp
10002d6f:	49                   	dec    ecx
10002d70:	4e                   	dec    esi
10002d71:	47                   	inc    edi
10002d72:	20 41 20             	and    BYTE PTR [ecx+0x20],al
10002d75:	4e                   	dec    esi
10002d76:	45                   	inc    ebp
10002d77:	57                   	push   edi
10002d78:	20 44 49 4d          	and    BYTE PTR [ecx+ecx*2+0x4d],al
10002d7c:	20 41 54             	and    BYTE PTR [ecx+0x54],al
10002d7f:	20 25 64 0a 00 47    	and    BYTE PTR ds:0x47000a64,ah
10002d85:	44                   	inc    esp
10002d86:	4f                   	dec    edi
10002d87:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002d89:	61                   	popa   
10002d8a:	64 64 43             	fs fs inc ebx
10002d8d:	68 69 6c 64 20       	push   0x20646c69
10002d92:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d93:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002d94:	20 6d 6f             	and    BYTE PTR [ebp+0x6f],ch
10002d97:	72 65                	jb     10002dfe <List<CRect*>::~List()+0x2b6>
10002d99:	20 73 6c             	and    BYTE PTR [ebx+0x6c],dh
10002d9c:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002d9d:	74 73                	je     10002e12 <List<CRect*>::~List()+0x2ca>
10002d9f:	20 6c 65 66          	and    BYTE PTR [ebp+eiz*2+0x66],ch
10002da3:	74 21                	je     10002dc6 <List<CRect*>::~List()+0x27e>
10002da5:	00 47 44             	add    BYTE PTR [edi+0x44],al
10002da8:	4f                   	dec    edi
10002da9:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002dab:	72 65                	jb     10002e12 <List<CRect*>::~List()+0x2ca>
10002dad:	6d                   	ins    DWORD PTR es:[edi],dx
10002dae:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002daf:	76 65                	jbe    10002e16 <List<CRect*>::~List()+0x2ce>
10002db1:	43                   	inc    ebx
10002db2:	68 69 6c 64 20       	push   0x20646c69
10002db7:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002db8:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002db9:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002dbc:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002dbd:	2d 72 65 67 69       	sub    eax,0x69676572
10002dc2:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002dc3:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002dc4:	00 4c 4f 41          	add    BYTE PTR [edi+ecx*2+0x41],cl
10002dc8:	44                   	inc    esp
10002dc9:	49                   	dec    ecx
10002dca:	4e                   	dec    esi
10002dcb:	47                   	inc    edi
10002dcc:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10002dd0:	41                   	inc    ecx
10002dd1:	43                   	inc    ebx
10002dd2:	59                   	pop    ecx
10002dd3:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002dd6:	4e                   	dec    esi
10002dd7:	54                   	push   esp
10002dd8:	20 57 49             	and    BYTE PTR [edi+0x49],dl
10002ddb:	54                   	push   esp
10002ddc:	48                   	dec    eax
10002ddd:	20 4e 41             	and    BYTE PTR [esi+0x41],cl
10002de0:	4d                   	dec    ebp
10002de1:	45                   	inc    ebp
10002de2:	20 27                	and    BYTE PTR [edi],ah
10002de4:	25 73 27 0a 00       	and    eax,0xa2773
10002de9:	43                   	inc    ebx
10002dea:	41                   	inc    ecx
10002deb:	4e                   	dec    esi
10002dec:	4e                   	dec    esi
10002ded:	4f                   	dec    edi
10002dee:	54                   	push   esp
10002def:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002df3:	44                   	inc    esp
10002df4:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002df7:	4e                   	dec    esi
10002df8:	54                   	push   esp
10002df9:	53                   	push   ebx
10002dfa:	00 46 6f             	add    BYTE PTR [esi+0x6f],al
10002dfd:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002dfe:	74 4e                	je     10002e4e <List<CRect*>::~List()+0x306>
10002e00:	61                   	popa   
10002e01:	6d                   	ins    DWORD PTR es:[edi],dx
10002e02:	65 73 5b             	gs jae 10002e60 <List<CRect*>::~List()+0x318>
10002e05:	25 64 5d 20 3d       	and    eax,0x3d205d64
10002e0a:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10002e10:	59                   	pop    ecx
10002e11:	53                   	push   ebx
10002e12:	54                   	push   esp
10002e13:	45                   	inc    ebp
10002e14:	4d                   	dec    ebp
10002e15:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10002e18:	2f                   	das    
10002e19:	42                   	inc    edx
10002e1a:	41                   	inc    ecx
10002e1b:	4e                   	dec    esi
10002e1c:	41                   	inc    ecx
10002e1d:	4e                   	dec    esi
10002e1e:	41                   	inc    ecx
10002e1f:	2f                   	das    
10002e20:	46                   	inc    esi
10002e21:	4f                   	dec    edi
10002e22:	4e                   	dec    esi
10002e23:	54                   	push   esp
10002e24:	53                   	push   ebx
10002e25:	2f                   	das    
10002e26:	4c                   	dec    esp
10002e27:	45                   	inc    ebp
10002e28:	47                   	inc    edi
10002e29:	41                   	inc    ecx
10002e2a:	43                   	inc    ebx
10002e2b:	59                   	pop    ecx
10002e2c:	00 64 69 72          	add    BYTE PTR [ecx+ebp*2+0x72],ah
10002e30:	2d 3e 72 65 61       	sub    eax,0x6165723e
10002e35:	64 2e 20 73 74       	fs and BYTE PTR cs:[ebx+0x74],dh
10002e3a:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10002e40:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10002e43:	2f                   	das    
10002e44:	42                   	inc    edx
10002e45:	41                   	inc    ecx
10002e46:	4e                   	dec    esi
10002e47:	41                   	inc    ecx
10002e48:	4e                   	dec    esi
10002e49:	41                   	inc    ecx
10002e4a:	2f                   	das    
10002e4b:	46                   	inc    esi
10002e4c:	4f                   	dec    edi
10002e4d:	4e                   	dec    esi
10002e4e:	54                   	push   esp
10002e4f:	53                   	push   ebx
10002e50:	2f                   	das    
10002e51:	4c                   	dec    esp
10002e52:	45                   	inc    ebp
10002e53:	47                   	inc    edi
10002e54:	41                   	inc    ecx
10002e55:	43                   	inc    ebx
10002e56:	59                   	pop    ecx
10002e57:	2f                   	das    
10002e58:	00 64 70 20          	add    BYTE PTR [eax+esi*2+0x20],ah
10002e5c:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e5d:	61                   	popa   
10002e5e:	6d                   	ins    DWORD PTR es:[edi],dx
10002e5f:	65 20 3d 20 25 73 0a 	and    BYTE PTR gs:0xa732520,bh
10002e66:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10002e69:	2f                   	das    
10002e6a:	42                   	inc    edx
10002e6b:	61                   	popa   
10002e6c:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e6d:	61                   	popa   
10002e6e:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e6f:	61                   	popa   
10002e70:	2f                   	das    
10002e71:	46                   	inc    esi
10002e72:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002e73:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e74:	74 73                	je     10002ee9 <List<CRect*>::~List()+0x3a1>
10002e76:	2f                   	das    
10002e77:	4c                   	dec    esp
10002e78:	65 67 61             	gs addr16 popa 
10002e7b:	63 79 2f             	arpl   WORD PTR [ecx+0x2f],di
10002e7e:	00 2e                	add    BYTE PTR [esi],ch
10002e80:	46                   	inc    esi
10002e81:	4e                   	dec    esi
10002e82:	54                   	push   esp
10002e83:	00 25 73 20 76 73    	add    BYTE PTR ds:0x73762073,ah
10002e89:	2e 20 25 73 0a 00 46 	and    BYTE PTR cs:0x46000a73,ah
10002e90:	4f                   	dec    edi
10002e91:	55                   	push   ebp
10002e92:	4e                   	dec    esi
10002e93:	44                   	inc    esp
10002e94:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10002e98:	41                   	inc    ecx
10002e99:	43                   	inc    ebx
10002e9a:	59                   	pop    ecx
10002e9b:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002e9e:	4e                   	dec    esi
10002e9f:	54                   	push   esp
10002ea0:	20 27                	and    BYTE PTR [edi],ah
10002ea2:	25 73 27 20 57       	and    eax,0x57202773
10002ea7:	49                   	dec    ecx
10002ea8:	54                   	push   esp
10002ea9:	48                   	dec    eax
10002eaa:	20 49 44             	and    BYTE PTR [ecx+0x44],cl
10002ead:	20 25 64 2e 0a 00    	and    BYTE PTR ds:0xa2e64,ah
10002eb3:	43                   	inc    ebx
10002eb4:	4f                   	dec    edi
10002eb5:	55                   	push   ebp
10002eb6:	4c                   	dec    esp
10002eb7:	44                   	inc    esp
10002eb8:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10002ebb:	54                   	push   esp
10002ebc:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002ec0:	44                   	inc    esp
10002ec1:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10002ec5:	41                   	inc    ecx
10002ec6:	43                   	inc    ebx
10002ec7:	59                   	pop    ecx
10002ec8:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002ecb:	4e                   	dec    esi
10002ecc:	54                   	push   esp
10002ecd:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002ed0:	4c                   	dec    esp
10002ed1:	4f                   	dec    edi
10002ed2:	41                   	inc    ecx
10002ed3:	44                   	inc    esp
10002ed4:	45                   	inc    ebp
10002ed5:	44                   	inc    esp
10002ed6:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10002eda:	41                   	inc    ecx
10002edb:	43                   	inc    ebx
10002edc:	59                   	pop    ecx
10002edd:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002ee0:	4e                   	dec    esi
10002ee1:	54                   	push   esp
10002ee2:	20 25 73 20 54 4f    	and    BYTE PTR ds:0x4f542073,ah
10002ee8:	20 49 44             	and    BYTE PTR [ecx+0x44],cl
10002eeb:	20 25 64 2e 0a 00    	and    BYTE PTR ds:0xa2e64,ah
10002ef1:	43                   	inc    ebx
10002ef2:	4f                   	dec    edi
10002ef3:	55                   	push   ebp
10002ef4:	52                   	push   edx
10002ef5:	49                   	dec    ecx
10002ef6:	45                   	inc    ebp
10002ef7:	52                   	push   edx
10002ef8:	00 43 4f             	add    BYTE PTR [ebx+0x4f],al
10002efb:	55                   	push   ebp
10002efc:	52                   	push   edx
10002efd:	49                   	dec    ecx
10002efe:	45                   	inc    ebp
10002eff:	52                   	push   edx
10002f00:	58                   	pop    eax
10002f01:	00 54 49 4d          	add    BYTE PTR [ecx+ecx*2+0x4d],dl
10002f05:	45                   	inc    ebp
10002f06:	53                   	push   ebx
10002f07:	4e                   	dec    esi
10002f08:	52                   	push   edx
10002f09:	00 41 52             	add    BYTE PTR [ecx+0x52],al
10002f0c:	49                   	dec    ecx
10002f0d:	41                   	inc    ecx
10002f0e:	4c                   	dec    esp
10002f0f:	00 43 4f             	add    BYTE PTR [ebx+0x4f],al
10002f12:	4d                   	dec    ebp
10002f13:	49                   	dec    ecx
10002f14:	43                   	inc    ebx
10002f15:	53                   	push   ebx
10002f16:	41                   	inc    ecx
10002f17:	4e                   	dec    esi
10002f18:	00 66 90             	add    BYTE PTR [esi-0x70],ah
10002f1b:	90                   	nop
10002f1c:	98                   	cwde   	10002f1c: R_386_32	.text
10002f1d:	25 00 10 a2 25       	and    eax,0x25a21000	10002f20: R_386_32	.text
10002f22:	00 10                	add    BYTE PTR [eax],dl
10002f24:	ac                   	lods   al,BYTE PTR ds:[esi]	10002f24: R_386_32	.text
10002f25:	25 00 10 b6 25       	and    eax,0x25b61000	10002f28: R_386_32	.text
10002f2a:	00 10                	add    BYTE PTR [eax],dl
10002f2c:	c0 25 00 10 ca 25 00 	shl    BYTE PTR ds:0x25ca1000,0x0	10002f2c: R_386_32	.text
	10002f30: R_386_32	.text
10002f33:	10                   	.byte 0x10
