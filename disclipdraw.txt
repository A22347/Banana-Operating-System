
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 48             	sub    esp,0x48
10000007:	68 a3 2e 00 10       	push   0x10002ea3	10000008: R_386_32	.text
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000011:	e8 fc ff ff ff       	call   10000012 <start(void*)+0x12>	10000012: R_386_PC32	legacyFontInit()
10000016:	e8 fc ff ff ff       	call   10000017 <start(void*)+0x17>	10000017: R_386_PC32	setupCursor()
1000001b:	c7 04 24 1c 00 00 00 	mov    DWORD PTR [esp],0x1c
10000022:	e8 fc ff ff ff       	call   10000023 <start(void*)+0x23>	10000023: R_386_PC32	operator new(unsigned long)
10000027:	89 c3                	mov    ebx,eax
10000029:	58                   	pop    eax
1000002a:	5a                   	pop    edx
1000002b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000002d: R_386_32	screen
10000031:	53                   	push   ebx
10000032:	e8 fc ff ff ff       	call   10000033 <start(void*)+0x33>	10000033: R_386_PC32	Context::Context(Video*)
10000037:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000003e:	e8 fc ff ff ff       	call   1000003f <start(void*)+0x3f>	1000003f: R_386_PC32	operator new(unsigned long)
10000043:	89 c6                	mov    esi,eax
10000045:	59                   	pop    ecx
10000046:	5f                   	pop    edi
10000047:	53                   	push   ebx
10000048:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000004b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000004e:	6a 00                	push   0x0
10000050:	6a 00                	push   0x0
10000052:	50                   	push   eax
10000053:	e8 fc ff ff ff       	call   10000054 <start(void*)+0x54>	10000054: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000058:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
1000005f:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000061: R_386_32	rootRgn
10000065:	83 c4 14             	add    esp,0x14
10000068:	6a 58                	push   0x58
1000006a:	e8 fc ff ff ff       	call   1000006b <start(void*)+0x6b>	1000006b: R_386_PC32	operator new(unsigned long)
1000006f:	89 c7                	mov    edi,eax
10000071:	83 c4 0c             	add    esp,0xc
10000074:	53                   	push   ebx
10000075:	68 aa aa 00 00       	push   0xaaaa
1000007a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000007d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10000080:	6a 00                	push   0x0
10000082:	6a 00                	push   0x0
10000084:	50                   	push   eax
10000085:	e8 fc ff ff ff       	call   10000086 <start(void*)+0x86>	10000086: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
1000008a:	83 c4 18             	add    esp,0x18
1000008d:	57                   	push   edi
1000008e:	56                   	push   esi
1000008f:	e8 fc ff ff ff       	call   10000090 <start(void*)+0x90>	10000090: R_386_PC32	GDO::addChild(GDO*)
10000094:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000009b:	e8 fc ff ff ff       	call   1000009c <start(void*)+0x9c>	1000009c: R_386_PC32	operator new(unsigned long)
100000a0:	89 c1                	mov    ecx,eax
100000a2:	5d                   	pop    ebp
100000a3:	58                   	pop    eax
100000a4:	6a 06                	push   0x6
100000a6:	51                   	push   ecx
100000a7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
100000ab:	e8 fc ff ff ff       	call   100000ac <start(void*)+0xac>	100000ac: R_386_PC32	Brush::Brush(BrushType)
100000b0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000b7:	e8 fc ff ff ff       	call   100000b8 <start(void*)+0xb8>	100000b8: R_386_PC32	operator new(unsigned long)
100000bc:	89 c2                	mov    edx,eax
100000be:	58                   	pop    eax
100000bf:	59                   	pop    ecx
100000c0:	6a 07                	push   0x7
100000c2:	52                   	push   edx
100000c3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
100000c7:	e8 fc ff ff ff       	call   100000c8 <start(void*)+0xc8>	100000c8: R_386_PC32	Brush::Brush(BrushType)
100000cc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000d3:	e8 fc ff ff ff       	call   100000d4 <start(void*)+0xd4>	100000d4: R_386_PC32	operator new(unsigned long)
100000d8:	89 c5                	mov    ebp,eax
100000da:	5f                   	pop    edi
100000db:	58                   	pop    eax
100000dc:	6a 08                	push   0x8
100000de:	55                   	push   ebp
100000df:	e8 fc ff ff ff       	call   100000e0 <start(void*)+0xe0>	100000e0: R_386_PC32	Brush::Brush(BrushType)
100000e4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000eb:	e8 fc ff ff ff       	call   100000ec <start(void*)+0xec>	100000ec: R_386_PC32	operator new(unsigned long)
100000f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100000f4:	58                   	pop    eax
100000f5:	5a                   	pop    edx
100000f6:	6a 0a                	push   0xa
100000f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100000fc:	e8 fc ff ff ff       	call   100000fd <start(void*)+0xfd>	100000fd: R_386_PC32	Brush::Brush(BrushType)
10000101:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000108:	e8 fc ff ff ff       	call   10000109 <start(void*)+0x109>	10000109: R_386_PC32	operator new(unsigned long)
1000010d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000111:	59                   	pop    ecx
10000112:	5f                   	pop    edi
10000113:	6a 09                	push   0x9
10000115:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000119:	e8 fc ff ff ff       	call   1000011a <start(void*)+0x11a>	1000011a: R_386_PC32	Brush::Brush(BrushType)
1000011e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000125:	e8 fc ff ff ff       	call   10000126 <start(void*)+0x126>	10000126: R_386_PC32	operator new(unsigned long)
1000012a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000012e:	58                   	pop    eax
1000012f:	5a                   	pop    edx
10000130:	6a 0b                	push   0xb
10000132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000136:	e8 fc ff ff ff       	call   10000137 <start(void*)+0x137>	10000137: R_386_PC32	Brush::Brush(BrushType)
1000013b:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000142:	e8 fc ff ff ff       	call   10000143 <start(void*)+0x143>	10000143: R_386_PC32	operator new(unsigned long)
10000147:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000014b:	59                   	pop    ecx
1000014c:	5f                   	pop    edi
1000014d:	6a 0c                	push   0xc
1000014f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10000153:	e8 fc ff ff ff       	call   10000154 <start(void*)+0x154>	10000154: R_386_PC32	Brush::Brush(BrushType)
10000158:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000015f:	e8 fc ff ff ff       	call   10000160 <start(void*)+0x160>	10000160: R_386_PC32	operator new(unsigned long)
10000164:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10000168:	58                   	pop    eax
10000169:	5a                   	pop    edx
1000016a:	6a 0d                	push   0xd
1000016c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000170:	e8 fc ff ff ff       	call   10000171 <start(void*)+0x171>	10000171: R_386_PC32	Brush::Brush(BrushType)
10000175:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000017c:	e8 fc ff ff ff       	call   1000017d <start(void*)+0x17d>	1000017d: R_386_PC32	operator new(unsigned long)
10000181:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10000185:	59                   	pop    ecx
10000186:	5f                   	pop    edi
10000187:	6a 0e                	push   0xe
10000189:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000018d:	e8 fc ff ff ff       	call   1000018e <start(void*)+0x18e>	1000018e: R_386_PC32	Brush::Brush(BrushType)
10000192:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000199:	e8 fc ff ff ff       	call   1000019a <start(void*)+0x19a>	1000019a: R_386_PC32	operator new(unsigned long)
1000019e:	89 c7                	mov    edi,eax
100001a0:	58                   	pop    eax
100001a1:	5a                   	pop    edx
100001a2:	6a 00                	push   0x0
100001a4:	57                   	push   edi
100001a5:	e8 fc ff ff ff       	call   100001a6 <start(void*)+0x1a6>	100001a6: R_386_PC32	Brush::Brush(BrushType)
100001aa:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001b1:	e8 fc ff ff ff       	call   100001b2 <start(void*)+0x1b2>	100001b2: R_386_PC32	operator new(unsigned long)
100001b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100001ba:	59                   	pop    ecx
100001bb:	58                   	pop    eax
100001bc:	6a 04                	push   0x4
100001be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100001c2:	e8 fc ff ff ff       	call   100001c3 <start(void*)+0x1c3>	100001c3: R_386_PC32	Brush::Brush(BrushType)
100001c7:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001ce:	e8 fc ff ff ff       	call   100001cf <start(void*)+0x1cf>	100001cf: R_386_PC32	operator new(unsigned long)
100001d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100001d7:	58                   	pop    eax
100001d8:	5a                   	pop    edx
100001d9:	6a 0f                	push   0xf
100001db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
100001df:	e8 fc ff ff ff       	call   100001e0 <start(void*)+0x1e0>	100001e0: R_386_PC32	Brush::Brush(BrushType)
100001e4:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100001eb:	e8 fc ff ff ff       	call   100001ec <start(void*)+0x1ec>	100001ec: R_386_PC32	operator new(unsigned long)
100001f0:	83 c4 0c             	add    esp,0xc
100001f3:	53                   	push   ebx
100001f4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100001f8:	51                   	push   ecx
100001f9:	6a 64                	push   0x64
100001fb:	6a 64                	push   0x64
100001fd:	6a 32                	push   0x32
100001ff:	6a 32                	push   0x32
10000201:	50                   	push   eax
10000202:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000206:	e8 fc ff ff ff       	call   10000207 <start(void*)+0x207>	10000207: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000020b:	83 c4 18             	add    esp,0x18
1000020e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000212:	50                   	push   eax
10000213:	56                   	push   esi
10000214:	e8 fc ff ff ff       	call   10000215 <start(void*)+0x215>	10000215: R_386_PC32	GDO::addChild(GDO*)
10000219:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000220:	e8 fc ff ff ff       	call   10000221 <start(void*)+0x221>	10000221: R_386_PC32	operator new(unsigned long)
10000225:	83 c4 0c             	add    esp,0xc
10000228:	53                   	push   ebx
10000229:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
1000022d:	52                   	push   edx
1000022e:	6a 64                	push   0x64
10000230:	6a 64                	push   0x64
10000232:	6a 32                	push   0x32
10000234:	68 c8 00 00 00       	push   0xc8
10000239:	50                   	push   eax
1000023a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000023e:	e8 fc ff ff ff       	call   1000023f <start(void*)+0x23f>	1000023f: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000243:	83 c4 18             	add    esp,0x18
10000246:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000024a:	50                   	push   eax
1000024b:	56                   	push   esi
1000024c:	e8 fc ff ff ff       	call   1000024d <start(void*)+0x24d>	1000024d: R_386_PC32	GDO::addChild(GDO*)
10000251:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000258:	e8 fc ff ff ff       	call   10000259 <start(void*)+0x259>	10000259: R_386_PC32	operator new(unsigned long)
1000025d:	83 c4 0c             	add    esp,0xc
10000260:	53                   	push   ebx
10000261:	55                   	push   ebp
10000262:	6a 64                	push   0x64
10000264:	6a 64                	push   0x64
10000266:	6a 32                	push   0x32
10000268:	68 5e 01 00 00       	push   0x15e
1000026d:	50                   	push   eax
1000026e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000272:	e8 fc ff ff ff       	call   10000273 <start(void*)+0x273>	10000273: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000277:	83 c4 18             	add    esp,0x18
1000027a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000027e:	50                   	push   eax
1000027f:	56                   	push   esi
10000280:	e8 fc ff ff ff       	call   10000281 <start(void*)+0x281>	10000281: R_386_PC32	GDO::addChild(GDO*)
10000285:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000028c:	e8 fc ff ff ff       	call   1000028d <start(void*)+0x28d>	1000028d: R_386_PC32	operator new(unsigned long)
10000291:	89 c5                	mov    ebp,eax
10000293:	83 c4 0c             	add    esp,0xc
10000296:	53                   	push   ebx
10000297:	57                   	push   edi
10000298:	6a 64                	push   0x64
1000029a:	6a 64                	push   0x64
1000029c:	6a 32                	push   0x32
1000029e:	68 f4 01 00 00       	push   0x1f4
100002a3:	50                   	push   eax
100002a4:	e8 fc ff ff ff       	call   100002a5 <start(void*)+0x2a5>	100002a5: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100002a9:	83 c4 18             	add    esp,0x18
100002ac:	55                   	push   ebp
100002ad:	56                   	push   esi
100002ae:	e8 fc ff ff ff       	call   100002af <start(void*)+0x2af>	100002af: R_386_PC32	GDO::addChild(GDO*)
100002b3:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100002ba:	e8 fc ff ff ff       	call   100002bb <start(void*)+0x2bb>	100002bb: R_386_PC32	operator new(unsigned long)
100002bf:	89 c7                	mov    edi,eax
100002c1:	83 c4 0c             	add    esp,0xc
100002c4:	53                   	push   ebx
100002c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100002c9:	6a 64                	push   0x64
100002cb:	6a 64                	push   0x64
100002cd:	68 c8 00 00 00       	push   0xc8
100002d2:	6a 32                	push   0x32
100002d4:	50                   	push   eax
100002d5:	e8 fc ff ff ff       	call   100002d6 <start(void*)+0x2d6>	100002d6: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100002da:	83 c4 18             	add    esp,0x18
100002dd:	57                   	push   edi
100002de:	56                   	push   esi
100002df:	e8 fc ff ff ff       	call   100002e0 <start(void*)+0x2e0>	100002e0: R_386_PC32	GDO::addChild(GDO*)
100002e4:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100002eb:	e8 fc ff ff ff       	call   100002ec <start(void*)+0x2ec>	100002ec: R_386_PC32	operator new(unsigned long)
100002f0:	89 c7                	mov    edi,eax
100002f2:	83 c4 0c             	add    esp,0xc
100002f5:	53                   	push   ebx
100002f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100002fa:	6a 64                	push   0x64
100002fc:	6a 64                	push   0x64
100002fe:	68 c8 00 00 00       	push   0xc8
10000303:	68 c8 00 00 00       	push   0xc8
10000308:	50                   	push   eax
10000309:	e8 fc ff ff ff       	call   1000030a <start(void*)+0x30a>	1000030a: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000030e:	83 c4 18             	add    esp,0x18
10000311:	57                   	push   edi
10000312:	56                   	push   esi
10000313:	e8 fc ff ff ff       	call   10000314 <start(void*)+0x314>	10000314: R_386_PC32	GDO::addChild(GDO*)
10000318:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000031f:	e8 fc ff ff ff       	call   10000320 <start(void*)+0x320>	10000320: R_386_PC32	operator new(unsigned long)
10000324:	89 c7                	mov    edi,eax
10000326:	83 c4 0c             	add    esp,0xc
10000329:	53                   	push   ebx
1000032a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000032e:	6a 64                	push   0x64
10000330:	6a 64                	push   0x64
10000332:	68 c8 00 00 00       	push   0xc8
10000337:	68 5e 01 00 00       	push   0x15e
1000033c:	50                   	push   eax
1000033d:	e8 fc ff ff ff       	call   1000033e <start(void*)+0x33e>	1000033e: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000342:	83 c4 18             	add    esp,0x18
10000345:	57                   	push   edi
10000346:	56                   	push   esi
10000347:	e8 fc ff ff ff       	call   10000348 <start(void*)+0x348>	10000348: R_386_PC32	GDO::addChild(GDO*)
1000034c:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000353:	e8 fc ff ff ff       	call   10000354 <start(void*)+0x354>	10000354: R_386_PC32	operator new(unsigned long)
10000358:	89 c7                	mov    edi,eax
1000035a:	83 c4 0c             	add    esp,0xc
1000035d:	53                   	push   ebx
1000035e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000362:	6a 64                	push   0x64
10000364:	6a 64                	push   0x64
10000366:	68 c8 00 00 00       	push   0xc8
1000036b:	68 f4 01 00 00       	push   0x1f4
10000370:	50                   	push   eax
10000371:	e8 fc ff ff ff       	call   10000372 <start(void*)+0x372>	10000372: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000376:	83 c4 18             	add    esp,0x18
10000379:	57                   	push   edi
1000037a:	56                   	push   esi
1000037b:	e8 fc ff ff ff       	call   1000037c <start(void*)+0x37c>	1000037c: R_386_PC32	GDO::addChild(GDO*)
10000380:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000387:	e8 fc ff ff ff       	call   10000388 <start(void*)+0x388>	10000388: R_386_PC32	operator new(unsigned long)
1000038c:	89 c7                	mov    edi,eax
1000038e:	83 c4 0c             	add    esp,0xc
10000391:	53                   	push   ebx
10000392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000396:	6a 64                	push   0x64
10000398:	6a 64                	push   0x64
1000039a:	68 5e 01 00 00       	push   0x15e
1000039f:	6a 32                	push   0x32
100003a1:	50                   	push   eax
100003a2:	e8 fc ff ff ff       	call   100003a3 <start(void*)+0x3a3>	100003a3: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100003a7:	83 c4 18             	add    esp,0x18
100003aa:	57                   	push   edi
100003ab:	56                   	push   esi
100003ac:	e8 fc ff ff ff       	call   100003ad <start(void*)+0x3ad>	100003ad: R_386_PC32	GDO::addChild(GDO*)
100003b1:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100003b8:	e8 fc ff ff ff       	call   100003b9 <start(void*)+0x3b9>	100003b9: R_386_PC32	operator new(unsigned long)
100003bd:	89 c7                	mov    edi,eax
100003bf:	83 c4 0c             	add    esp,0xc
100003c2:	53                   	push   ebx
100003c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100003c7:	6a 64                	push   0x64
100003c9:	6a 64                	push   0x64
100003cb:	68 5e 01 00 00       	push   0x15e
100003d0:	68 c8 00 00 00       	push   0xc8
100003d5:	50                   	push   eax
100003d6:	e8 fc ff ff ff       	call   100003d7 <start(void*)+0x3d7>	100003d7: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100003db:	83 c4 18             	add    esp,0x18
100003de:	57                   	push   edi
100003df:	56                   	push   esi
100003e0:	e8 fc ff ff ff       	call   100003e1 <start(void*)+0x3e1>	100003e1: R_386_PC32	GDO::addChild(GDO*)
100003e5:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100003ec:	e8 fc ff ff ff       	call   100003ed <start(void*)+0x3ed>	100003ed: R_386_PC32	operator new(unsigned long)
100003f1:	89 c7                	mov    edi,eax
100003f3:	83 c4 0c             	add    esp,0xc
100003f6:	53                   	push   ebx
100003f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100003fb:	6a 64                	push   0x64
100003fd:	6a 64                	push   0x64
100003ff:	68 5e 01 00 00       	push   0x15e
10000404:	68 5e 01 00 00       	push   0x15e
10000409:	50                   	push   eax
1000040a:	e8 fc ff ff ff       	call   1000040b <start(void*)+0x40b>	1000040b: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000040f:	83 c4 18             	add    esp,0x18
10000412:	57                   	push   edi
10000413:	56                   	push   esi
10000414:	e8 fc ff ff ff       	call   10000415 <start(void*)+0x415>	10000415: R_386_PC32	GDO::addChild(GDO*)
10000419:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000420:	e8 fc ff ff ff       	call   10000421 <start(void*)+0x421>	10000421: R_386_PC32	operator new(unsigned long)
10000425:	89 c7                	mov    edi,eax
10000427:	83 c4 0c             	add    esp,0xc
1000042a:	53                   	push   ebx
1000042b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000042f:	6a 64                	push   0x64
10000431:	6a 64                	push   0x64
10000433:	68 5e 01 00 00       	push   0x15e
10000438:	68 f4 01 00 00       	push   0x1f4
1000043d:	50                   	push   eax
1000043e:	e8 fc ff ff ff       	call   1000043f <start(void*)+0x43f>	1000043f: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000443:	83 c4 18             	add    esp,0x18
10000446:	57                   	push   edi
10000447:	56                   	push   esi
10000448:	e8 fc ff ff ff       	call   10000449 <start(void*)+0x449>	10000449: R_386_PC32	GDO::addChild(GDO*)
1000044d:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000454:	e8 fc ff ff ff       	call   10000455 <start(void*)+0x455>	10000455: R_386_PC32	operator new(unsigned long)
10000459:	89 c5                	mov    ebp,eax
1000045b:	59                   	pop    ecx
1000045c:	5f                   	pop    edi
1000045d:	53                   	push   ebx
1000045e:	68 c8 00 00 00       	push   0xc8
10000463:	68 2c 01 00 00       	push   0x12c
10000468:	6a 0a                	push   0xa
1000046a:	6a 0a                	push   0xa
1000046c:	50                   	push   eax
1000046d:	e8 fc ff ff ff       	call   1000046e <start(void*)+0x46e>	1000046e: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000472:	83 c4 18             	add    esp,0x18
10000475:	55                   	push   ebp
10000476:	56                   	push   esi
10000477:	e8 fc ff ff ff       	call   10000478 <start(void*)+0x478>	10000478: R_386_PC32	GDO::addChild(GDO*)
1000047c:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000483:	e8 fc ff ff ff       	call   10000484 <start(void*)+0x484>	10000484: R_386_PC32	operator new(unsigned long)
10000488:	89 c7                	mov    edi,eax
1000048a:	83 c4 0c             	add    esp,0xc
1000048d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
10000490:	68 ff 00 00 00       	push   0xff
10000495:	68 c8 00 00 00       	push   0xc8
1000049a:	68 2c 01 00 00       	push   0x12c
1000049f:	6a 00                	push   0x0
100004a1:	6a 00                	push   0x0
100004a3:	50                   	push   eax
100004a4:	e8 fc ff ff ff       	call   100004a5 <start(void*)+0x4a5>	100004a5: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
100004a9:	83 c4 18             	add    esp,0x18
100004ac:	57                   	push   edi
100004ad:	55                   	push   ebp
100004ae:	e8 fc ff ff ff       	call   100004af <start(void*)+0x4af>	100004af: R_386_PC32	GDO::addChild(GDO*)
100004b3:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100004ba:	e8 fc ff ff ff       	call   100004bb <start(void*)+0x4bb>	100004bb: R_386_PC32	operator new(unsigned long)
100004bf:	89 c1                	mov    ecx,eax
100004c1:	58                   	pop    eax
100004c2:	5a                   	pop    edx
100004c3:	6a 09                	push   0x9
100004c5:	51                   	push   ecx
100004c6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
100004ca:	e8 fc ff ff ff       	call   100004cb <start(void*)+0x4cb>	100004cb: R_386_PC32	Brush::Brush(BrushType)
100004cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100004d3:	c7 41 04 00 ff 00 00 	mov    DWORD PTR [ecx+0x4],0xff00
100004da:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100004de:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100004e5:	e8 fc ff ff ff       	call   100004e6 <start(void*)+0x4e6>	100004e6: R_386_PC32	operator new(unsigned long)
100004ea:	59                   	pop    ecx
100004eb:	5f                   	pop    edi
100004ec:	6a 07                	push   0x7
100004ee:	50                   	push   eax
100004ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100004f3:	e8 fc ff ff ff       	call   100004f4 <start(void*)+0x4f4>	100004f4: R_386_PC32	Brush::Brush(BrushType)
100004f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100004fc:	c7 42 04 00 88 ff 00 	mov    DWORD PTR [edx+0x4],0xff8800
10000503:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000050a:	e8 fc ff ff ff       	call   1000050b <start(void*)+0x50b>	1000050b: R_386_PC32	operator new(unsigned long)
1000050f:	89 c7                	mov    edi,eax
10000511:	58                   	pop    eax
10000512:	5a                   	pop    edx
10000513:	ff 75 04             	push   DWORD PTR [ebp+0x4]
10000516:	6a 78                	push   0x78
10000518:	68 c8 00 00 00       	push   0xc8
1000051d:	6a 32                	push   0x32
1000051f:	6a 32                	push   0x32
10000521:	57                   	push   edi
10000522:	e8 fc ff ff ff       	call   10000523 <start(void*)+0x523>	10000523: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000527:	83 c4 18             	add    esp,0x18
1000052a:	57                   	push   edi
1000052b:	55                   	push   ebp
1000052c:	e8 fc ff ff ff       	call   1000052d <start(void*)+0x52d>	1000052d: R_386_PC32	GDO::addChild(GDO*)
10000531:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000538:	e8 fc ff ff ff       	call   10000539 <start(void*)+0x539>	10000539: R_386_PC32	operator new(unsigned long)
1000053d:	89 c5                	mov    ebp,eax
1000053f:	83 c4 0c             	add    esp,0xc
10000542:	ff 77 04             	push   DWORD PTR [edi+0x4]
10000545:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10000549:	51                   	push   ecx
1000054a:	6a 46                	push   0x46
1000054c:	6a 46                	push   0x46
1000054e:	6a 00                	push   0x0
10000550:	6a 00                	push   0x0
10000552:	50                   	push   eax
10000553:	e8 fc ff ff ff       	call   10000554 <start(void*)+0x554>	10000554: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000558:	83 c4 18             	add    esp,0x18
1000055b:	55                   	push   ebp
1000055c:	57                   	push   edi
1000055d:	e8 fc ff ff ff       	call   1000055e <start(void*)+0x55e>	1000055e: R_386_PC32	GDO::addChild(GDO*)
10000562:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000569:	e8 fc ff ff ff       	call   1000056a <start(void*)+0x56a>	1000056a: R_386_PC32	operator new(unsigned long)
1000056e:	89 c5                	mov    ebp,eax
10000570:	83 c4 0c             	add    esp,0xc
10000573:	ff 77 04             	push   DWORD PTR [edi+0x4]
10000576:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000057a:	52                   	push   edx
1000057b:	6a 46                	push   0x46
1000057d:	6a 55                	push   0x55
1000057f:	6a 14                	push   0x14
10000581:	6a 64                	push   0x64
10000583:	50                   	push   eax
10000584:	e8 fc ff ff ff       	call   10000585 <start(void*)+0x585>	10000585: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000589:	83 c4 18             	add    esp,0x18
1000058c:	55                   	push   ebp
1000058d:	57                   	push   edi
1000058e:	e8 fc ff ff ff       	call   1000058f <start(void*)+0x58f>	1000058f: R_386_PC32	GDO::addChild(GDO*)
10000593:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
1000059a:	e8 fc ff ff ff       	call   1000059b <start(void*)+0x59b>	1000059b: R_386_PC32	getLegacyFont(LegacyFontType)
1000059f:	89 c5                	mov    ebp,eax
100005a1:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100005a8:	e8 fc ff ff ff       	call   100005a9 <start(void*)+0x5a9>	100005a9: R_386_PC32	operator new(unsigned long)
100005ad:	89 c7                	mov    edi,eax
100005af:	83 c4 0c             	add    esp,0xc
100005b2:	53                   	push   ebx
100005b3:	6a 00                	push   0x0
100005b5:	68 c2 01 00 00       	push   0x1c2
100005ba:	6a 32                	push   0x32
100005bc:	68 b6 2e 00 10       	push   0x10002eb6	100005bd: R_386_32	.text
100005c1:	55                   	push   ebp
100005c2:	50                   	push   eax
100005c3:	e8 fc ff ff ff       	call   100005c4 <start(void*)+0x5c4>	100005c4: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
100005c8:	83 c4 18             	add    esp,0x18
100005cb:	57                   	push   edi
100005cc:	56                   	push   esi
100005cd:	e8 fc ff ff ff       	call   100005ce <start(void*)+0x5ce>	100005ce: R_386_PC32	GDO::addChild(GDO*)
100005d2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
100005d9:	e8 fc ff ff ff       	call   100005da <start(void*)+0x5da>	100005da: R_386_PC32	getLegacyFont(LegacyFontType)
100005de:	89 c5                	mov    ebp,eax
100005e0:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100005e7:	e8 fc ff ff ff       	call   100005e8 <start(void*)+0x5e8>	100005e8: R_386_PC32	operator new(unsigned long)
100005ec:	89 c7                	mov    edi,eax
100005ee:	83 c4 0c             	add    esp,0xc
100005f1:	53                   	push   ebx
100005f2:	6a 00                	push   0x0
100005f4:	68 c2 01 00 00       	push   0x1c2
100005f9:	68 96 00 00 00       	push   0x96
100005fe:	68 c7 2e 00 10       	push   0x10002ec7	100005ff: R_386_32	.text
10000603:	55                   	push   ebp
10000604:	50                   	push   eax
10000605:	e8 fc ff ff ff       	call   10000606 <start(void*)+0x606>	10000606: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
1000060a:	83 c4 18             	add    esp,0x18
1000060d:	57                   	push   edi
1000060e:	56                   	push   esi
1000060f:	e8 fc ff ff ff       	call   10000610 <start(void*)+0x610>	10000610: R_386_PC32	GDO::addChild(GDO*)
10000614:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
1000061b:	e8 fc ff ff ff       	call   1000061c <start(void*)+0x61c>	1000061c: R_386_PC32	getLegacyFont(LegacyFontType)
10000620:	89 c5                	mov    ebp,eax
10000622:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000629:	e8 fc ff ff ff       	call   1000062a <start(void*)+0x62a>	1000062a: R_386_PC32	operator new(unsigned long)
1000062e:	89 c7                	mov    edi,eax
10000630:	83 c4 0c             	add    esp,0xc
10000633:	53                   	push   ebx
10000634:	6a 00                	push   0x0
10000636:	68 c2 01 00 00       	push   0x1c2
1000063b:	68 04 01 00 00       	push   0x104
10000640:	68 d8 2e 00 10       	push   0x10002ed8	10000641: R_386_32	.text
10000645:	55                   	push   ebp
10000646:	50                   	push   eax
10000647:	e8 fc ff ff ff       	call   10000648 <start(void*)+0x648>	10000648: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
1000064c:	83 c4 18             	add    esp,0x18
1000064f:	57                   	push   edi
10000650:	56                   	push   esi
10000651:	e8 fc ff ff ff       	call   10000652 <start(void*)+0x652>	10000652: R_386_PC32	GDO::addChild(GDO*)
10000656:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
1000065d:	e8 fc ff ff ff       	call   1000065e <start(void*)+0x65e>	1000065e: R_386_PC32	getLegacyFont(LegacyFontType)
10000662:	89 c5                	mov    ebp,eax
10000664:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000066b:	e8 fc ff ff ff       	call   1000066c <start(void*)+0x66c>	1000066c: R_386_PC32	operator new(unsigned long)
10000670:	89 c7                	mov    edi,eax
10000672:	83 c4 0c             	add    esp,0xc
10000675:	53                   	push   ebx
10000676:	6a 00                	push   0x0
10000678:	68 c2 01 00 00       	push   0x1c2
1000067d:	68 5e 01 00 00       	push   0x15e
10000682:	68 e7 2e 00 10       	push   0x10002ee7	10000683: R_386_32	.text
10000687:	55                   	push   ebp
10000688:	50                   	push   eax
10000689:	e8 fc ff ff ff       	call   1000068a <start(void*)+0x68a>	1000068a: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
1000068e:	83 c4 18             	add    esp,0x18
10000691:	57                   	push   edi
10000692:	56                   	push   esi
10000693:	e8 fc ff ff ff       	call   10000694 <start(void*)+0x694>	10000694: R_386_PC32	GDO::addChild(GDO*)
10000698:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
1000069f:	e8 fc ff ff ff       	call   100006a0 <start(void*)+0x6a0>	100006a0: R_386_PC32	getLegacyFont(LegacyFontType)
100006a4:	89 c5                	mov    ebp,eax
100006a6:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100006ad:	e8 fc ff ff ff       	call   100006ae <start(void*)+0x6ae>	100006ae: R_386_PC32	operator new(unsigned long)
100006b2:	89 c7                	mov    edi,eax
100006b4:	83 c4 0c             	add    esp,0xc
100006b7:	53                   	push   ebx
100006b8:	6a 00                	push   0x0
100006ba:	68 c2 01 00 00       	push   0x1c2
100006bf:	68 c2 01 00 00       	push   0x1c2
100006c4:	68 fd 2e 00 10       	push   0x10002efd	100006c5: R_386_32	.text
100006c9:	55                   	push   ebp
100006ca:	50                   	push   eax
100006cb:	e8 fc ff ff ff       	call   100006cc <start(void*)+0x6cc>	100006cc: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
100006d0:	83 c4 18             	add    esp,0x18
100006d3:	57                   	push   edi
100006d4:	56                   	push   esi
100006d5:	e8 fc ff ff ff       	call   100006d6 <start(void*)+0x6d6>	100006d6: R_386_PC32	GDO::addChild(GDO*)
100006da:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
100006e1:	e8 fc ff ff ff       	call   100006e2 <start(void*)+0x6e2>	100006e2: R_386_PC32	getLegacyFont(LegacyFontType)
100006e6:	89 c5                	mov    ebp,eax
100006e8:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100006ef:	e8 fc ff ff ff       	call   100006f0 <start(void*)+0x6f0>	100006f0: R_386_PC32	operator new(unsigned long)
100006f4:	89 c7                	mov    edi,eax
100006f6:	83 c4 0c             	add    esp,0xc
100006f9:	53                   	push   ebx
100006fa:	6a 00                	push   0x0
100006fc:	68 d1 01 00 00       	push   0x1d1
10000701:	68 5e 01 00 00       	push   0x15e
10000706:	68 18 2f 00 10       	push   0x10002f18	10000707: R_386_32	.text
1000070b:	55                   	push   ebp
1000070c:	50                   	push   eax
1000070d:	e8 fc ff ff ff       	call   1000070e <start(void*)+0x70e>	1000070e: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
10000712:	83 c4 18             	add    esp,0x18
10000715:	57                   	push   edi
10000716:	56                   	push   esi
10000717:	e8 fc ff ff ff       	call   10000718 <start(void*)+0x718>	10000718: R_386_PC32	GDO::addChild(GDO*)
1000071c:	83 c4 0c             	add    esp,0xc
1000071f:	6a 01                	push   0x1
10000721:	6a 00                	push   0x0
10000723:	56                   	push   esi
10000724:	e8 fc ff ff ff       	call   10000725 <start(void*)+0x725>	10000725: R_386_PC32	GDO::update(List<CRect*>*, bool)
10000729:	e8 fc ff ff ff       	call   1000072a <start(void*)+0x72a>	1000072a: R_386_PC32	startMouse()
1000072e:	83 c4 0c             	add    esp,0xc
10000731:	6a 00                	push   0x0
10000733:	68 c8 00 00 00       	push   0xc8
10000738:	68 2c 01 00 00       	push   0x12c
1000073d:	e8 fc ff ff ff       	call   1000073e <start(void*)+0x73e>	1000073e: R_386_PC32	processMouse(int, int, int)
10000742:	83 c4 10             	add    esp,0x10
10000745:	83 ec 0c             	sub    esp,0xc
10000748:	6a 02                	push   0x2
1000074a:	e8 fc ff ff ff       	call   1000074b <start(void*)+0x74b>	1000074b: R_386_PC32	blockTask(TaskState)
1000074f:	eb f1                	jmp    10000742 <start(void*)+0x742>

10000751 <begin(void*)>:
10000751:	83 ec 18             	sub    esp,0x18
10000754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000758:	e8 fc ff ff ff       	call   10000759 <begin(void*)+0x8>	10000759: R_386_PC32	start(void*)
1000075d:	90                   	nop

1000075e <Brush::Brush(unsigned int, unsigned int)>:
1000075e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000762:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000766:	89 10                	mov    DWORD PTR [eax],edx
10000768:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
1000076c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000076f:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
10000776:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
1000077d:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
10000784:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
1000078b:	c3                   	ret    

1000078c <Brush::Brush(BrushType)>:
1000078c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000790:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000796:	c7 40 04 ff ff ff ff 	mov    DWORD PTR [eax+0x4],0xffffffff
1000079d:	c6 40 10 ff          	mov    BYTE PTR [eax+0x10],0xff
100007a1:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
100007a8:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
100007af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100007b6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
100007bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100007c1:	8d 51 ff             	lea    edx,[ecx-0x1]
100007c4:	83 fa 0e             	cmp    edx,0xe
100007c7:	0f 87 ae 00 00 00    	ja     1000087b <Brush::Brush(BrushType)+0xef>
100007cd:	ff 24 95 44 2f 00 10 	jmp    DWORD PTR [edx*4+0x10002f44]	100007d0: R_386_32	.text
100007d4:	c7 00 aa aa aa 00    	mov    DWORD PTR [eax],0xaaaaaa
100007da:	c3                   	ret    
100007db:	c7 00 80 80 80 00    	mov    DWORD PTR [eax],0x808080
100007e1:	c3                   	ret    
100007e2:	c7 00 55 55 55 00    	mov    DWORD PTR [eax],0x555555
100007e8:	c3                   	ret    
100007e9:	c7 00 ff ff ff 00    	mov    DWORD PTR [eax],0xffffff
100007ef:	c3                   	ret    
100007f0:	c6 40 10 00          	mov    BYTE PTR [eax+0x10],0x0
100007f4:	c3                   	ret    
100007f5:	c7 40 10 01 08 04 02 	mov    DWORD PTR [eax+0x10],0x2040801
100007fc:	eb 6f                	jmp    1000086d <Brush::Brush(BrushType)+0xe1>
100007fe:	c7 40 10 01 02 04 08 	mov    DWORD PTR [eax+0x10],0x8040201
10000805:	eb 66                	jmp    1000086d <Brush::Brush(BrushType)+0xe1>
10000807:	c7 40 10 01 01 01 0f 	mov    DWORD PTR [eax+0x10],0xf010101
1000080e:	eb 5d                	jmp    1000086d <Brush::Brush(BrushType)+0xe1>
10000810:	c7 40 10 08 14 22 01 	mov    DWORD PTR [eax+0x10],0x1221408
10000817:	66 c7 40 14 22 14    	mov    WORD PTR [eax+0x14],0x1422
1000081d:	c7 40 18 06 00 00 00 	mov    DWORD PTR [eax+0x18],0x6
10000824:	c7 40 1c 06 00 00 00 	mov    DWORD PTR [eax+0x1c],0x6
1000082b:	c3                   	ret    
1000082c:	c7 40 10 00 00 00 01 	mov    DWORD PTR [eax+0x10],0x1000000
10000833:	eb 3f                	jmp    10000874 <Brush::Brush(BrushType)+0xe8>
10000835:	c6 40 10 02          	mov    BYTE PTR [eax+0x10],0x2
10000839:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
10000840:	c3                   	ret    
10000841:	66 c7 40 10 02 01    	mov    WORD PTR [eax+0x10],0x102
10000847:	eb 0e                	jmp    10000857 <Brush::Brush(BrushType)+0xcb>
10000849:	66 c7 40 10 02 00    	mov    WORD PTR [eax+0x10],0x2
1000084f:	eb 06                	jmp    10000857 <Brush::Brush(BrushType)+0xcb>
10000851:	66 c7 40 10 03 02    	mov    WORD PTR [eax+0x10],0x203
10000857:	c7 40 18 02 00 00 00 	mov    DWORD PTR [eax+0x18],0x2
1000085e:	c7 40 1c 02 00 00 00 	mov    DWORD PTR [eax+0x1c],0x2
10000865:	c3                   	ret    
10000866:	c7 40 10 0c 0c 03 03 	mov    DWORD PTR [eax+0x10],0x3030c0c
1000086d:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
10000874:	c7 40 1c 04 00 00 00 	mov    DWORD PTR [eax+0x1c],0x4
1000087b:	c3                   	ret    

1000087c <List<CRect*>::length() [clone .isra.0]>:
1000087c:	31 d2                	xor    edx,edx
1000087e:	85 c0                	test   eax,eax
10000880:	74 06                	je     10000888 <List<CRect*>::length() [clone .isra.0]+0xc>
10000882:	42                   	inc    edx
10000883:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000886:	eb f6                	jmp    1000087e <List<CRect*>::length() [clone .isra.0]+0x2>
10000888:	89 d0                	mov    eax,edx
1000088a:	c3                   	ret    
1000088b:	90                   	nop

1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>:
1000088c:	53                   	push   ebx
1000088d:	89 c1                	mov    ecx,eax
1000088f:	89 d3                	mov    ebx,edx
10000891:	e8 e6 ff ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10000896:	39 d8                	cmp    eax,ebx
10000898:	7c 0a                	jl     100008a4 <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0x18>
1000089a:	85 db                	test   ebx,ebx
1000089c:	74 06                	je     100008a4 <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0x18>
1000089e:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
100008a1:	4b                   	dec    ebx
100008a2:	eb f6                	jmp    1000089a <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0xe>
100008a4:	89 c8                	mov    eax,ecx
100008a6:	5b                   	pop    ebx
100008a7:	c3                   	ret    

100008a8 <CRect::CRect()>:
100008a8:	c3                   	ret    
100008a9:	90                   	nop

100008aa <CRect::CRect(int, int, int, int)>:
100008aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100008ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100008b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
100008b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100008b9:	89 10                	mov    DWORD PTR [eax],edx
100008bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100008bf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100008c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100008c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100008c9:	c3                   	ret    

100008ca <CRect::intersect(CRect*)>:
100008ca:	55                   	push   ebp
100008cb:	57                   	push   edi
100008cc:	56                   	push   esi
100008cd:	53                   	push   ebx
100008ce:	83 ec 1c             	sub    esp,0x1c
100008d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
100008d5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
100008d9:	8b 0f                	mov    ecx,DWORD PTR [edi]
100008db:	8b 75 04             	mov    esi,DWORD PTR [ebp+0x4]
100008de:	31 c0                	xor    eax,eax
100008e0:	39 f1                	cmp    ecx,esi
100008e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100008e6:	7f 7f                	jg     10000967 <CRect::intersect(CRect*)+0x9d>
100008e8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
100008eb:	89 04 24             	mov    DWORD PTR [esp],eax
100008ee:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
100008f1:	31 c0                	xor    eax,eax
100008f3:	39 14 24             	cmp    DWORD PTR [esp],edx
100008f6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
100008fa:	7c 6b                	jl     10000967 <CRect::intersect(CRect*)+0x9d>
100008fc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
100008ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000903:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
10000906:	31 c0                	xor    eax,eax
10000908:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
1000090c:	7f 59                	jg     10000967 <CRect::intersect(CRect*)+0x9d>
1000090e:	8b 7f 0c             	mov    edi,DWORD PTR [edi+0xc]
10000911:	8b 6d 08             	mov    ebp,DWORD PTR [ebp+0x8]
10000914:	39 ef                	cmp    edi,ebp
10000916:	7c 4f                	jl     10000967 <CRect::intersect(CRect*)+0x9d>
10000918:	83 ec 0c             	sub    esp,0xc
1000091b:	6a 10                	push   0x10
1000091d:	e8 fc ff ff ff       	call   1000091e <CRect::intersect(CRect*)+0x54>	1000091e: R_386_PC32	malloc
10000922:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10000926:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
10000929:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000092d:	89 08                	mov    DWORD PTR [eax],ecx
1000092f:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
10000932:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000936:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000939:	83 c4 10             	add    esp,0x10
1000093c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000940:	39 d1                	cmp    ecx,edx
10000942:	7f 02                	jg     10000946 <CRect::intersect(CRect*)+0x7c>
10000944:	89 10                	mov    DWORD PTR [eax],edx
10000946:	39 6c 24 04          	cmp    DWORD PTR [esp+0x4],ebp
1000094a:	7f 03                	jg     1000094f <CRect::intersect(CRect*)+0x85>
1000094c:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
1000094f:	3b 30                	cmp    esi,DWORD PTR [eax]
10000951:	7c 08                	jl     1000095b <CRect::intersect(CRect*)+0x91>
10000953:	3b 34 24             	cmp    esi,DWORD PTR [esp]
10000956:	7f 03                	jg     1000095b <CRect::intersect(CRect*)+0x91>
10000958:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
1000095b:	3b 58 08             	cmp    ebx,DWORD PTR [eax+0x8]
1000095e:	7c 07                	jl     10000967 <CRect::intersect(CRect*)+0x9d>
10000960:	39 fb                	cmp    ebx,edi
10000962:	7f 03                	jg     10000967 <CRect::intersect(CRect*)+0x9d>
10000964:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
10000967:	83 c4 1c             	add    esp,0x1c
1000096a:	5b                   	pop    ebx
1000096b:	5e                   	pop    esi
1000096c:	5f                   	pop    edi
1000096d:	5d                   	pop    ebp
1000096e:	c3                   	ret    
1000096f:	90                   	nop

10000970 <Context::Context(Video*)>:
10000970:	53                   	push   ebx
10000971:	83 ec 14             	sub    esp,0x14
10000974:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000097c:	89 03                	mov    DWORD PTR [ebx],eax
1000097e:	50                   	push   eax
1000097f:	e8 fc ff ff ff       	call   10000980 <Context::Context(Video*)+0x10>	10000980: R_386_PC32	Video::getWidth()
10000984:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10000987:	58                   	pop    eax
10000988:	ff 33                	push   DWORD PTR [ebx]
1000098a:	e8 fc ff ff ff       	call   1000098b <Context::Context(Video*)+0x1b>	1000098b: R_386_PC32	Video::getHeight()
1000098f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10000992:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
10000999:	e8 fc ff ff ff       	call   1000099a <Context::Context(Video*)+0x2a>	1000099a: R_386_PC32	malloc
1000099e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100009a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100009ab:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
100009ae:	c6 43 14 00          	mov    BYTE PTR [ebx+0x14],0x0
100009b2:	83 c4 18             	add    esp,0x18
100009b5:	5b                   	pop    ebx
100009b6:	c3                   	ret    
100009b7:	90                   	nop

100009b8 <Context::clippedRect(int, int, int, int, CRect*, Brush*)>:
100009b8:	55                   	push   ebp
100009b9:	57                   	push   edi
100009ba:	56                   	push   esi
100009bb:	53                   	push   ebx
100009bc:	83 ec 2c             	sub    esp,0x2c
100009bf:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100009c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
100009c7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
100009cb:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
100009cf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
100009d3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
100009d7:	01 f9                	add    ecx,edi
100009d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
100009dd:	01 f0                	add    eax,esi
100009df:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
100009e2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
100009e6:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
100009e9:	01 fe                	add    esi,edi
100009eb:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
100009ef:	03 4d 0c             	add    ecx,DWORD PTR [ebp+0xc]
100009f2:	01 f8                	add    eax,edi
100009f4:	8b 32                	mov    esi,DWORD PTR [edx]
100009f6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
100009fa:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
100009fe:	7d 08                	jge    10000a08 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x50>
10000a00:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10000a04:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10000a08:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
10000a0b:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
10000a0f:	7d 04                	jge    10000a15 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x5d>
10000a11:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10000a15:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
10000a18:	47                   	inc    edi
10000a19:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10000a1d:	39 cf                	cmp    edi,ecx
10000a1f:	7e 04                	jle    10000a25 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x6d>
10000a21:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10000a25:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
10000a28:	8d 4a 01             	lea    ecx,[edx+0x1]
10000a2b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
10000a2f:	39 c1                	cmp    ecx,eax
10000a31:	7e 04                	jle    10000a37 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x7f>
10000a33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000a37:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
10000a3b:	7d 62                	jge    10000a9f <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe7>
10000a3d:	89 f0                	mov    eax,esi
10000a3f:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000a43:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
10000a46:	99                   	cdq    
10000a47:	f7 7b 1c             	idiv   DWORD PTR [ebx+0x1c]
10000a4a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000a4e:	0f b6 44 13 10       	movzx  eax,BYTE PTR [ebx+edx*1+0x10]
10000a53:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000a57:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
10000a5b:	7d 3f                	jge    10000a9c <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe4>
10000a5d:	89 f8                	mov    eax,edi
10000a5f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000a63:	03 43 08             	add    eax,DWORD PTR [ebx+0x8]
10000a66:	99                   	cdq    
10000a67:	f7 7b 18             	idiv   DWORD PTR [ebx+0x18]
10000a6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000a6e:	0f a3 d0             	bt     eax,edx
10000a71:	73 0f                	jae    10000a82 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xca>
10000a73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000a76:	8b 10                	mov    edx,DWORD PTR [eax]
10000a78:	ff 33                	push   DWORD PTR [ebx]
10000a7a:	56                   	push   esi
10000a7b:	57                   	push   edi
10000a7c:	50                   	push   eax
10000a7d:	ff 52 24             	call   DWORD PTR [edx+0x24]
10000a80:	eb 14                	jmp    10000a96 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xde>
10000a82:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10000a85:	83 fa ff             	cmp    edx,0xffffffff
10000a88:	74 0f                	je     10000a99 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe1>
10000a8a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000a8d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a8f:	52                   	push   edx
10000a90:	56                   	push   esi
10000a91:	57                   	push   edi
10000a92:	50                   	push   eax
10000a93:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10000a96:	83 c4 10             	add    esp,0x10
10000a99:	47                   	inc    edi
10000a9a:	eb bb                	jmp    10000a57 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x9f>
10000a9c:	46                   	inc    esi
10000a9d:	eb 98                	jmp    10000a37 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x7f>
10000a9f:	83 c4 2c             	add    esp,0x2c
10000aa2:	5b                   	pop    ebx
10000aa3:	5e                   	pop    esi
10000aa4:	5f                   	pop    edi
10000aa5:	5d                   	pop    ebp
10000aa6:	c3                   	ret    
10000aa7:	90                   	nop

10000aa8 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)>:
10000aa8:	55                   	push   ebp
10000aa9:	57                   	push   edi
10000aaa:	56                   	push   esi
10000aab:	53                   	push   ebx
10000aac:	83 ec 1c             	sub    esp,0x1c
10000aaf:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
10000ab3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000ab7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000aba:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000abe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000ac2:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10000ac5:	39 c2                	cmp    edx,eax
10000ac7:	0f 8c c9 00 00 00    	jl     10000b96 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000acd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10000ad1:	01 c5                	add    ebp,eax
10000ad3:	8b 19                	mov    ebx,DWORD PTR [ecx]
10000ad5:	39 dd                	cmp    ebp,ebx
10000ad7:	0f 8e b9 00 00 00    	jle    10000b96 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000add:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10000ae1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000ae5:	03 70 10             	add    esi,DWORD PTR [eax+0x10]
10000ae8:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
10000aeb:	39 f0                	cmp    eax,esi
10000aed:	0f 8c a3 00 00 00    	jl     10000b96 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000af3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000af7:	01 f7                	add    edi,esi
10000af9:	8b 49 08             	mov    ecx,DWORD PTR [ecx+0x8]
10000afc:	39 cf                	cmp    edi,ecx
10000afe:	0f 8e 92 00 00 00    	jle    10000b96 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b04:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000b0c:	3b 5c 24 04          	cmp    ebx,DWORD PTR [esp+0x4]
10000b10:	7e 08                	jle    10000b1a <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x72>
10000b12:	2b 5c 24 04          	sub    ebx,DWORD PTR [esp+0x4]
10000b16:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000b1a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10000b1e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
10000b22:	39 ea                	cmp    edx,ebp
10000b24:	7d 09                	jge    10000b2f <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x87>
10000b26:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
10000b2a:	42                   	inc    edx
10000b2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000b2f:	31 db                	xor    ebx,ebx
10000b31:	39 f1                	cmp    ecx,esi
10000b33:	7e 04                	jle    10000b39 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x91>
10000b35:	29 f1                	sub    ecx,esi
10000b37:	89 cb                	mov    ebx,ecx
10000b39:	39 f8                	cmp    eax,edi
10000b3b:	7d 07                	jge    10000b44 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x9c>
10000b3d:	29 f0                	sub    eax,esi
10000b3f:	40                   	inc    eax
10000b40:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10000b44:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
10000b47:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
10000b4c:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
10000b50:	89 e8                	mov    eax,ebp
10000b52:	29 f0                	sub    eax,esi
10000b54:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
10000b58:	7e 3c                	jle    10000b96 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b5a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10000b5e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
10000b62:	7e 2b                	jle    10000b8f <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xe7>
10000b64:	0f b6 04 3b          	movzx  eax,BYTE PTR [ebx+edi*1]
10000b68:	8b 14 85 00 00 00 00 	mov    edx,DWORD PTR [eax*4+0x0]	10000b6b: R_386_32	palette256
10000b6f:	83 fa ff             	cmp    edx,0xffffffff
10000b72:	74 18                	je     10000b8c <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xe4>
10000b74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000b78:	8b 00                	mov    eax,DWORD PTR [eax]
10000b7a:	8b 08                	mov    ecx,DWORD PTR [eax]
10000b7c:	52                   	push   edx
10000b7d:	55                   	push   ebp
10000b7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000b82:	01 fa                	add    edx,edi
10000b84:	52                   	push   edx
10000b85:	50                   	push   eax
10000b86:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10000b89:	83 c4 10             	add    esp,0x10
10000b8c:	47                   	inc    edi
10000b8d:	eb cf                	jmp    10000b5e <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xb6>
10000b8f:	45                   	inc    ebp
10000b90:	03 5c 24 40          	add    ebx,DWORD PTR [esp+0x40]
10000b94:	eb ba                	jmp    10000b50 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xa8>
10000b96:	83 c4 1c             	add    esp,0x1c
10000b99:	5b                   	pop    ebx
10000b9a:	5e                   	pop    esi
10000b9b:	5f                   	pop    edi
10000b9c:	5d                   	pop    ebp
10000b9d:	c3                   	ret    

10000b9e <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)>:
10000b9e:	55                   	push   ebp
10000b9f:	57                   	push   edi
10000ba0:	56                   	push   esi
10000ba1:	53                   	push   ebx
10000ba2:	83 ec 1c             	sub    esp,0x1c
10000ba5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
10000ba9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000bad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000bb0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000bb4:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
10000bb7:	39 c1                	cmp    ecx,eax
10000bb9:	0f 8c c1 00 00 00    	jl     10000c80 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000bbf:	89 c5                	mov    ebp,eax
10000bc1:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10000bc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000bc9:	8b 1e                	mov    ebx,DWORD PTR [esi]
10000bcb:	39 d8                	cmp    eax,ebx
10000bcd:	0f 8e ad 00 00 00    	jle    10000c80 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000bd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10000bd7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
10000bdb:	03 42 10             	add    eax,DWORD PTR [edx+0x10]
10000bde:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
10000be1:	39 c2                	cmp    edx,eax
10000be3:	0f 8c 97 00 00 00    	jl     10000c80 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000be9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000bed:	01 c7                	add    edi,eax
10000bef:	8b 76 08             	mov    esi,DWORD PTR [esi+0x8]
10000bf2:	39 f7                	cmp    edi,esi
10000bf4:	0f 8e 86 00 00 00    	jle    10000c80 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000bfa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000c02:	39 eb                	cmp    ebx,ebp
10000c04:	7e 06                	jle    10000c0c <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x6e>
10000c06:	29 eb                	sub    ebx,ebp
10000c08:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000c0c:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
10000c10:	7d 07                	jge    10000c19 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x7b>
10000c12:	29 e9                	sub    ecx,ebp
10000c14:	41                   	inc    ecx
10000c15:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10000c19:	31 db                	xor    ebx,ebx
10000c1b:	39 c6                	cmp    esi,eax
10000c1d:	7e 04                	jle    10000c23 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x85>
10000c1f:	89 f3                	mov    ebx,esi
10000c21:	29 c3                	sub    ebx,eax
10000c23:	39 fa                	cmp    edx,edi
10000c25:	7d 07                	jge    10000c2e <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x90>
10000c27:	29 c2                	sub    edx,eax
10000c29:	42                   	inc    edx
10000c2a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
10000c2e:	01 d8                	add    eax,ebx
10000c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000c34:	39 5c 24 44          	cmp    DWORD PTR [esp+0x44],ebx
10000c38:	7e 46                	jle    10000c80 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000c3e:	0f b6 34 18          	movzx  esi,BYTE PTR [eax+ebx*1]
10000c42:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
10000c46:	d3 e6                	shl    esi,cl
10000c48:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10000c4c:	39 7c 24 40          	cmp    DWORD PTR [esp+0x40],edi
10000c50:	7e 27                	jle    10000c79 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xdb>
10000c52:	89 f0                	mov    eax,esi
10000c54:	84 c0                	test   al,al
10000c56:	79 1c                	jns    10000c74 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xd6>
10000c58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000c5c:	8b 00                	mov    eax,DWORD PTR [eax]
10000c5e:	8b 10                	mov    edx,DWORD PTR [eax]
10000c60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000c64:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10000c68:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
10000c6c:	51                   	push   ecx
10000c6d:	50                   	push   eax
10000c6e:	ff 52 24             	call   DWORD PTR [edx+0x24]
10000c71:	83 c4 10             	add    esp,0x10
10000c74:	d1 e6                	shl    esi,1
10000c76:	47                   	inc    edi
10000c77:	eb d3                	jmp    10000c4c <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xae>
10000c79:	43                   	inc    ebx
10000c7a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
10000c7e:	eb b4                	jmp    10000c34 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x96>
10000c80:	83 c4 1c             	add    esp,0x1c
10000c83:	5b                   	pop    ebx
10000c84:	5e                   	pop    esi
10000c85:	5f                   	pop    edi
10000c86:	5d                   	pop    ebp
10000c87:	c3                   	ret    

10000c88 <Context::drawBitmap8(unsigned char*, int, int, int, int)>:
10000c88:	55                   	push   ebp
10000c89:	57                   	push   edi
10000c8a:	56                   	push   esi
10000c8b:	53                   	push   ebx
10000c8c:	83 ec 1c             	sub    esp,0x1c
10000c8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10000c93:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
10000c97:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
10000c9b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000c9e:	8b 00                	mov    eax,DWORD PTR [eax]
10000ca0:	e8 d7 fb ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10000ca5:	85 c0                	test   eax,eax
10000ca7:	74 38                	je     10000ce1 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x59>
10000ca9:	31 f6                	xor    esi,esi
10000cab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000cae:	8b 08                	mov    ecx,DWORD PTR [eax]
10000cb0:	89 c8                	mov    eax,ecx
10000cb2:	e8 c5 fb ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10000cb7:	39 f0                	cmp    eax,esi
10000cb9:	7e 68                	jle    10000d23 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x9b>
10000cbb:	89 f2                	mov    edx,esi
10000cbd:	89 c8                	mov    eax,ecx
10000cbf:	e8 c8 fb ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000cc4:	52                   	push   edx
10000cc5:	ff 30                	push   DWORD PTR [eax]
10000cc7:	55                   	push   ebp
10000cc8:	57                   	push   edi
10000cc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000ccd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000cd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000cd5:	53                   	push   ebx
10000cd6:	e8 fc ff ff ff       	call   10000cd7 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x4f>	10000cd7: R_386_PC32	Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)
10000cdb:	46                   	inc    esi
10000cdc:	83 c4 20             	add    esp,0x20
10000cdf:	eb ca                	jmp    10000cab <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x23>
10000ce1:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10000ce5:	75 3c                	jne    10000d23 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x9b>
10000ce7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000cef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10000cf9:	48                   	dec    eax
10000cfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000cfe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000d01:	48                   	dec    eax
10000d02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000d06:	50                   	push   eax
10000d07:	8d 44 24 04          	lea    eax,[esp+0x4]
10000d0b:	50                   	push   eax
10000d0c:	55                   	push   ebp
10000d0d:	57                   	push   edi
10000d0e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d12:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d16:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d1a:	53                   	push   ebx
10000d1b:	e8 fc ff ff ff       	call   10000d1c <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x94>	10000d1c: R_386_PC32	Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)
10000d20:	83 c4 20             	add    esp,0x20
10000d23:	83 c4 1c             	add    esp,0x1c
10000d26:	5b                   	pop    ebx
10000d27:	5e                   	pop    esi
10000d28:	5f                   	pop    edi
10000d29:	5d                   	pop    ebp
10000d2a:	c3                   	ret    
10000d2b:	90                   	nop

10000d2c <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)>:
10000d2c:	55                   	push   ebp
10000d2d:	57                   	push   edi
10000d2e:	56                   	push   esi
10000d2f:	53                   	push   ebx
10000d30:	83 ec 1c             	sub    esp,0x1c
10000d33:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10000d37:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000d3b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
10000d3f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000d42:	8b 00                	mov    eax,DWORD PTR [eax]
10000d44:	e8 33 fb ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10000d49:	85 c0                	test   eax,eax
10000d4b:	74 3b                	je     10000d88 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x5c>
10000d4d:	31 f6                	xor    esi,esi
10000d4f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000d52:	8b 08                	mov    ecx,DWORD PTR [eax]
10000d54:	89 c8                	mov    eax,ecx
10000d56:	e8 21 fb ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10000d5b:	39 f0                	cmp    eax,esi
10000d5d:	7e 6e                	jle    10000dcd <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0xa1>
10000d5f:	89 f2                	mov    edx,esi
10000d61:	89 c8                	mov    eax,ecx
10000d63:	e8 24 fb ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000d68:	55                   	push   ebp
10000d69:	ff 30                	push   DWORD PTR [eax]
10000d6b:	57                   	push   edi
10000d6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d70:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d74:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d78:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d7c:	53                   	push   ebx
10000d7d:	e8 fc ff ff ff       	call   10000d7e <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x52>	10000d7e: R_386_PC32	Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)
10000d82:	46                   	inc    esi
10000d83:	83 c4 20             	add    esp,0x20
10000d86:	eb c7                	jmp    10000d4f <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x23>
10000d88:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10000d8c:	75 3f                	jne    10000dcd <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0xa1>
10000d8e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000d96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000d9d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10000da0:	48                   	dec    eax
10000da1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000da5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000da8:	48                   	dec    eax
10000da9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000dad:	55                   	push   ebp
10000dae:	8d 44 24 04          	lea    eax,[esp+0x4]
10000db2:	50                   	push   eax
10000db3:	57                   	push   edi
10000db4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000db8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dbc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dc0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dc4:	53                   	push   ebx
10000dc5:	e8 fc ff ff ff       	call   10000dc6 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x9a>	10000dc6: R_386_PC32	Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)
10000dca:	83 c4 20             	add    esp,0x20
10000dcd:	83 c4 1c             	add    esp,0x1c
10000dd0:	5b                   	pop    ebx
10000dd1:	5e                   	pop    esi
10000dd2:	5f                   	pop    edi
10000dd3:	5d                   	pop    ebp
10000dd4:	c3                   	ret    
10000dd5:	90                   	nop

10000dd6 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)>:
10000dd6:	55                   	push   ebp
10000dd7:	57                   	push   edi
10000dd8:	56                   	push   esi
10000dd9:	53                   	push   ebx
10000dda:	83 ec 1c             	sub    esp,0x1c
10000ddd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
10000de1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10000de5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10000de9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10000ded:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10000df1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10000df5:	01 ca                	add    edx,ecx
10000df7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10000dfb:	01 fe                	add    esi,edi
10000dfd:	03 4d 0c             	add    ecx,DWORD PTR [ebp+0xc]
10000e00:	03 7d 10             	add    edi,DWORD PTR [ebp+0x10]
10000e03:	03 55 0c             	add    edx,DWORD PTR [ebp+0xc]
10000e06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000e0a:	03 75 10             	add    esi,DWORD PTR [ebp+0x10]
10000e0d:	8b 13                	mov    edx,DWORD PTR [ebx]
10000e0f:	39 ca                	cmp    edx,ecx
10000e11:	7d 02                	jge    10000e15 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x3f>
10000e13:	89 ca                	mov    edx,ecx
10000e15:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10000e18:	39 f9                	cmp    ecx,edi
10000e1a:	7d 02                	jge    10000e1e <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x48>
10000e1c:	89 f9                	mov    ecx,edi
10000e1e:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10000e21:	8b 2f                	mov    ebp,DWORD PTR [edi]
10000e23:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10000e27:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10000e2a:	40                   	inc    eax
10000e2b:	39 f0                	cmp    eax,esi
10000e2d:	7e 02                	jle    10000e31 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x5b>
10000e2f:	89 f0                	mov    eax,esi
10000e31:	29 c8                	sub    eax,ecx
10000e33:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10000e37:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000e3a:	40                   	inc    eax
10000e3b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10000e3f:	7e 04                	jle    10000e45 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x6f>
10000e41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000e45:	29 d0                	sub    eax,edx
10000e47:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10000e4b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
10000e4f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10000e53:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10000e57:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
10000e5a:	83 c4 1c             	add    esp,0x1c
10000e5d:	5b                   	pop    ebx
10000e5e:	5e                   	pop    esi
10000e5f:	5f                   	pop    edi
10000e60:	5d                   	pop    ebp
10000e61:	ff e0                	jmp    eax

10000e63 <plot(Context*, int, int, CRect*)>:
10000e63:	83 ec 10             	sub    esp,0x10
10000e66:	6a 00                	push   0x0
10000e68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000e6c:	6a 01                	push   0x1
10000e6e:	6a 01                	push   0x1
10000e70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000e74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000e78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000e7c:	e8 fc ff ff ff       	call   10000e7d <plot(Context*, int, int, CRect*)+0x1a>	10000e7d: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
10000e81:	83 c4 2c             	add    esp,0x2c
10000e84:	c3                   	ret    

10000e85 <midptellipse(Context*, int, int, int, int, CRect*)>:
10000e85:	55                   	push   ebp
10000e86:	57                   	push   edi
10000e87:	56                   	push   esi
10000e88:	53                   	push   ebx
10000e89:	83 ec 4c             	sub    esp,0x4c
10000e8c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
10000e90:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
10000e94:	db 44 24 68          	fild   DWORD PTR [esp+0x68]
10000e98:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
10000e9c:	0f af d2             	imul   edx,edx
10000e9f:	8b 4c 24 64          	mov    ecx,DWORD PTR [esp+0x64]
10000ea3:	0f af c9             	imul   ecx,ecx
10000ea6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10000eaa:	0f af c1             	imul   eax,ecx
10000ead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000eb1:	db 44 24 64          	fild   DWORD PTR [esp+0x64]
10000eb5:	89 d0                	mov    eax,edx
10000eb7:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000ebb:	d9 c0                	fld    st(0)
10000ebd:	d8 0d 80 2f 00 10    	fmul   DWORD PTR ds:0x10002f80	10000ebf: R_386_32	.text
10000ec3:	de c9                	fmulp  st(1),st
10000ec5:	89 04 24             	mov    DWORD PTR [esp],eax
10000ec8:	da 04 24             	fiadd  DWORD PTR [esp]
10000ecb:	d9 5c 24 3c          	fstp   DWORD PTR [esp+0x3c]
10000ecf:	d9 44 24 3c          	fld    DWORD PTR [esp+0x3c]
10000ed3:	8d 04 12             	lea    eax,[edx+edx*1]
10000ed6:	89 04 24             	mov    DWORD PTR [esp],eax
10000ed9:	db 04 24             	fild   DWORD PTR [esp]
10000edc:	d9 54 24 04          	fst    DWORD PTR [esp+0x4]
10000ee0:	d9 ee                	fldz   
10000ee2:	dc c9                	fmul   st(1),st
10000ee4:	8d 04 09             	lea    eax,[ecx+ecx*1]
10000ee7:	89 04 24             	mov    DWORD PTR [esp],eax
10000eea:	db 04 24             	fild   DWORD PTR [esp]
10000eed:	d9 14 24             	fst    DWORD PTR [esp]
10000ef0:	d8 cc                	fmul   st,st(4)
10000ef2:	d9 cb                	fxch   st(3)
10000ef4:	d9 5c 24 30          	fstp   DWORD PTR [esp+0x30]
10000ef8:	d9 ca                	fxch   st(2)
10000efa:	d8 d1                	fcom   st(1)
10000efc:	df e0                	fnstsw ax
10000efe:	9e                   	sahf   
10000eff:	0f 86 68 01 00 00    	jbe    1000106d <midptellipse(Context*, int, int, int, int, CRect*)+0x1e8>
10000f05:	d9 c9                	fxch   st(1)
10000f07:	d9 5c 24 2c          	fstp   DWORD PTR [esp+0x2c]
10000f0b:	d9 5c 24 28          	fstp   DWORD PTR [esp+0x28]
10000f0f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
10000f13:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
10000f17:	db 44 24 70          	fild   DWORD PTR [esp+0x70]
10000f1b:	d9 c0                	fld    st(0)
10000f1d:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
10000f21:	d8 c2                	fadd   st,st(2)
10000f23:	d9 ca                	fxch   st(2)
10000f25:	d9 5c 24 18          	fstp   DWORD PTR [esp+0x18]
10000f29:	d9 c9                	fxch   st(1)
10000f2b:	d9 7c 24 3a          	fnstcw WORD PTR [esp+0x3a]
10000f2f:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
10000f34:	80 cc 0c             	or     ah,0xc
10000f37:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
10000f3c:	d9 6c 24 38          	fldcw  WORD PTR [esp+0x38]
10000f40:	db 5c 24 34          	fistp  DWORD PTR [esp+0x34]
10000f44:	d9 6c 24 3a          	fldcw  WORD PTR [esp+0x3a]
10000f48:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10000f4c:	db 44 24 6c          	fild   DWORD PTR [esp+0x6c]
10000f50:	d9 c0                	fld    st(0)
10000f52:	d9 5c 24 10          	fstp   DWORD PTR [esp+0x10]
10000f56:	d8 c1                	fadd   st,st(1)
10000f58:	d9 c9                	fxch   st(1)
10000f5a:	d9 5c 24 08          	fstp   DWORD PTR [esp+0x8]
10000f5e:	d9 6c 24 38          	fldcw  WORD PTR [esp+0x38]
10000f62:	db 5c 24 34          	fistp  DWORD PTR [esp+0x34]
10000f66:	d9 6c 24 3a          	fldcw  WORD PTR [esp+0x3a]
10000f6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000f6e:	56                   	push   esi
10000f6f:	55                   	push   ebp
10000f70:	50                   	push   eax
10000f71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000f75:	53                   	push   ebx
10000f76:	e8 fc ff ff ff       	call   10000f77 <midptellipse(Context*, int, int, int, int, CRect*)+0xf2>	10000f77: R_386_PC32	plot(Context*, int, int, CRect*)
10000f7b:	d9 44 24 18          	fld    DWORD PTR [esp+0x18]
10000f7f:	d9 44 24 20          	fld    DWORD PTR [esp+0x20]
10000f83:	d8 e1                	fsub   st,st(1)
10000f85:	d9 c9                	fxch   st(1)
10000f87:	d9 5c 24 20          	fstp   DWORD PTR [esp+0x20]
10000f8b:	d9 7c 24 4a          	fnstcw WORD PTR [esp+0x4a]
10000f8f:	66 8b 7c 24 4a       	mov    di,WORD PTR [esp+0x4a]
10000f94:	66 81 cf 00 0c       	or     di,0xc00
10000f99:	66 89 7c 24 48       	mov    WORD PTR [esp+0x48],di
10000f9e:	d9 6c 24 48          	fldcw  WORD PTR [esp+0x48]
10000fa2:	db 5c 24 44          	fistp  DWORD PTR [esp+0x44]
10000fa6:	d9 6c 24 4a          	fldcw  WORD PTR [esp+0x4a]
10000faa:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000fae:	56                   	push   esi
10000faf:	55                   	push   ebp
10000fb0:	57                   	push   edi
10000fb1:	53                   	push   ebx
10000fb2:	e8 fc ff ff ff       	call   10000fb3 <midptellipse(Context*, int, int, int, int, CRect*)+0x12e>	10000fb3: R_386_PC32	plot(Context*, int, int, CRect*)
10000fb7:	d9 44 24 38          	fld    DWORD PTR [esp+0x38]
10000fbb:	d9 44 24 3c          	fld    DWORD PTR [esp+0x3c]
10000fbf:	d8 e1                	fsub   st,st(1)
10000fc1:	d9 c9                	fxch   st(1)
10000fc3:	d9 5c 24 28          	fstp   DWORD PTR [esp+0x28]
10000fc7:	d9 7c 24 5a          	fnstcw WORD PTR [esp+0x5a]
10000fcb:	66 8b 6c 24 5a       	mov    bp,WORD PTR [esp+0x5a]
10000fd0:	66 81 cd 00 0c       	or     bp,0xc00
10000fd5:	66 89 6c 24 58       	mov    WORD PTR [esp+0x58],bp
10000fda:	d9 6c 24 58          	fldcw  WORD PTR [esp+0x58]
10000fde:	db 5c 24 54          	fistp  DWORD PTR [esp+0x54]
10000fe2:	d9 6c 24 5a          	fldcw  WORD PTR [esp+0x5a]
10000fe6:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
10000fea:	83 c4 20             	add    esp,0x20
10000fed:	56                   	push   esi
10000fee:	55                   	push   ebp
10000fef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000ff3:	50                   	push   eax
10000ff4:	53                   	push   ebx
10000ff5:	e8 fc ff ff ff       	call   10000ff6 <midptellipse(Context*, int, int, int, int, CRect*)+0x171>	10000ff6: R_386_PC32	plot(Context*, int, int, CRect*)
10000ffa:	56                   	push   esi
10000ffb:	55                   	push   ebp
10000ffc:	57                   	push   edi
10000ffd:	53                   	push   ebx
10000ffe:	e8 fc ff ff ff       	call   10000fff <midptellipse(Context*, int, int, int, int, CRect*)+0x17a>	10000fff: R_386_PC32	plot(Context*, int, int, CRect*)
10001003:	83 c4 20             	add    esp,0x20
10001006:	d9 44 24 30          	fld    DWORD PTR [esp+0x30]
1000100a:	d9 ee                	fldz   
1000100c:	d8 d9                	fcomp  st(1)
1000100e:	df e0                	fnstsw ax
10001010:	9e                   	sahf   
10001011:	d9 e8                	fld1   
10001013:	d9 44 24 2c          	fld    DWORD PTR [esp+0x2c]
10001017:	d8 44 24 04          	fadd   DWORD PTR [esp+0x4]
1000101b:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
1000101f:	d9 44 24 28          	fld    DWORD PTR [esp+0x28]
10001023:	d9 44 24 10          	fld    DWORD PTR [esp+0x10]
10001027:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
1000102b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
1000102f:	d8 c4                	fadd   st,st(4)
10001031:	76 1a                	jbe    1000104d <midptellipse(Context*, int, int, int, int, CRect*)+0x1c8>
10001033:	dd dc                	fstp   st(4)
10001035:	d9 c9                	fxch   st(1)
10001037:	d9 ca                	fxch   st(2)
10001039:	d9 cb                	fxch   st(3)
1000103b:	d9 cc                	fxch   st(4)
1000103d:	d8 c3                	fadd   st,st(3)
1000103f:	d9 c9                	fxch   st(1)
10001041:	d9 cc                	fxch   st(4)
10001043:	d9 c9                	fxch   st(1)
10001045:	d9 ca                	fxch   st(2)
10001047:	d9 cb                	fxch   st(3)
10001049:	d9 ca                	fxch   st(2)
1000104b:	eb 0d                	jmp    1000105a <midptellipse(Context*, int, int, int, int, CRect*)+0x1d5>
1000104d:	d9 ca                	fxch   st(2)
1000104f:	de e4                	fsubrp st(4),st
10001051:	d8 24 24             	fsub   DWORD PTR [esp]
10001054:	d9 cc                	fxch   st(4)
10001056:	d8 c2                	fadd   st,st(2)
10001058:	d8 e4                	fsub   st,st(4)
1000105a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
1000105e:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
10001062:	d9 cb                	fxch   st(3)
10001064:	d9 cc                	fxch   st(4)
10001066:	d9 cb                	fxch   st(3)
10001068:	e9 87 fe ff ff       	jmp    10000ef4 <midptellipse(Context*, int, int, int, int, CRect*)+0x6f>
1000106d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
10001071:	db 44 24 08          	fild   DWORD PTR [esp+0x8]
10001075:	d9 54 24 08          	fst    DWORD PTR [esp+0x8]
10001079:	d9 e8                	fld1   
1000107b:	d8 ed                	fsubr  st,st(5)
1000107d:	d9 c4                	fld    st(4)
1000107f:	d8 05 84 2f 00 10    	fadd   DWORD PTR ds:0x10002f84	10001081: R_386_32	.text
10001085:	d8 c8                	fmul   st,st(0)
10001087:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
1000108b:	da 4c 24 10          	fimul  DWORD PTR [esp+0x10]
1000108f:	d9 c9                	fxch   st(1)
10001091:	d8 c8                	fmul   st,st(0)
10001093:	de ca                	fmulp  st(2),st
10001095:	de c1                	faddp  st(1),st
10001097:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000109b:	0f af 44 24 68       	imul   eax,DWORD PTR [esp+0x68]
100010a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100010a4:	da 64 24 0c          	fisub  DWORD PTR [esp+0xc]
100010a8:	d9 5c 24 3c          	fstp   DWORD PTR [esp+0x3c]
100010ac:	d9 44 24 3c          	fld    DWORD PTR [esp+0x3c]
100010b0:	d9 5c 24 28          	fstp   DWORD PTR [esp+0x28]
100010b4:	d9 c9                	fxch   st(1)
100010b6:	d9 5c 24 24          	fstp   DWORD PTR [esp+0x24]
100010ba:	d9 5c 24 20          	fstp   DWORD PTR [esp+0x20]
100010be:	d9 c9                	fxch   st(1)
100010c0:	d9 e4                	ftst   
100010c2:	df e0                	fnstsw ax
100010c4:	9e                   	sahf   
100010c5:	0f 82 54 01 00 00    	jb     1000121f <midptellipse(Context*, int, int, int, int, CRect*)+0x39a>
100010cb:	db 44 24 70          	fild   DWORD PTR [esp+0x70]
100010cf:	d9 c0                	fld    st(0)
100010d1:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
100010d5:	d8 c1                	fadd   st,st(1)
100010d7:	d9 c9                	fxch   st(1)
100010d9:	d9 5c 24 18          	fstp   DWORD PTR [esp+0x18]
100010dd:	d9 7c 24 3a          	fnstcw WORD PTR [esp+0x3a]
100010e1:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
100010e6:	80 cc 0c             	or     ah,0xc
100010e9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
100010ee:	d9 6c 24 38          	fldcw  WORD PTR [esp+0x38]
100010f2:	db 5c 24 34          	fistp  DWORD PTR [esp+0x34]
100010f6:	d9 6c 24 3a          	fldcw  WORD PTR [esp+0x3a]
100010fa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
100010fe:	db 44 24 6c          	fild   DWORD PTR [esp+0x6c]
10001102:	d9 c0                	fld    st(0)
10001104:	d9 5c 24 10          	fstp   DWORD PTR [esp+0x10]
10001108:	d8 c1                	fadd   st,st(1)
1000110a:	d9 c9                	fxch   st(1)
1000110c:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
10001110:	d9 6c 24 38          	fldcw  WORD PTR [esp+0x38]
10001114:	db 5c 24 34          	fistp  DWORD PTR [esp+0x34]
10001118:	d9 6c 24 3a          	fldcw  WORD PTR [esp+0x3a]
1000111c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001120:	56                   	push   esi
10001121:	55                   	push   ebp
10001122:	52                   	push   edx
10001123:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
10001127:	53                   	push   ebx
10001128:	e8 fc ff ff ff       	call   10001129 <midptellipse(Context*, int, int, int, int, CRect*)+0x2a4>	10001129: R_386_PC32	plot(Context*, int, int, CRect*)
1000112d:	d9 44 24 1c          	fld    DWORD PTR [esp+0x1c]
10001131:	d9 44 24 20          	fld    DWORD PTR [esp+0x20]
10001135:	d8 e1                	fsub   st,st(1)
10001137:	d9 c9                	fxch   st(1)
10001139:	d9 5c 24 20          	fstp   DWORD PTR [esp+0x20]
1000113d:	d9 7c 24 4a          	fnstcw WORD PTR [esp+0x4a]
10001141:	66 8b 44 24 4a       	mov    ax,WORD PTR [esp+0x4a]
10001146:	80 cc 0c             	or     ah,0xc
10001149:	66 89 44 24 48       	mov    WORD PTR [esp+0x48],ax
1000114e:	d9 6c 24 48          	fldcw  WORD PTR [esp+0x48]
10001152:	db 5c 24 44          	fistp  DWORD PTR [esp+0x44]
10001156:	d9 6c 24 4a          	fldcw  WORD PTR [esp+0x4a]
1000115a:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
1000115e:	56                   	push   esi
1000115f:	55                   	push   ebp
10001160:	57                   	push   edi
10001161:	53                   	push   ebx
10001162:	e8 fc ff ff ff       	call   10001163 <midptellipse(Context*, int, int, int, int, CRect*)+0x2de>	10001163: R_386_PC32	plot(Context*, int, int, CRect*)
10001167:	d9 44 24 38          	fld    DWORD PTR [esp+0x38]
1000116b:	d9 44 24 3c          	fld    DWORD PTR [esp+0x3c]
1000116f:	d8 e1                	fsub   st,st(1)
10001171:	d9 c9                	fxch   st(1)
10001173:	d9 5c 24 2c          	fstp   DWORD PTR [esp+0x2c]
10001177:	d9 7c 24 5a          	fnstcw WORD PTR [esp+0x5a]
1000117b:	66 8b 44 24 5a       	mov    ax,WORD PTR [esp+0x5a]
10001180:	80 cc 0c             	or     ah,0xc
10001183:	66 89 44 24 58       	mov    WORD PTR [esp+0x58],ax
10001188:	d9 6c 24 58          	fldcw  WORD PTR [esp+0x58]
1000118c:	db 5c 24 54          	fistp  DWORD PTR [esp+0x54]
10001190:	d9 6c 24 5a          	fldcw  WORD PTR [esp+0x5a]
10001194:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
10001198:	83 c4 20             	add    esp,0x20
1000119b:	56                   	push   esi
1000119c:	55                   	push   ebp
1000119d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100011a1:	52                   	push   edx
100011a2:	53                   	push   ebx
100011a3:	e8 fc ff ff ff       	call   100011a4 <midptellipse(Context*, int, int, int, int, CRect*)+0x31f>	100011a4: R_386_PC32	plot(Context*, int, int, CRect*)
100011a8:	56                   	push   esi
100011a9:	55                   	push   ebp
100011aa:	57                   	push   edi
100011ab:	53                   	push   ebx
100011ac:	e8 fc ff ff ff       	call   100011ad <midptellipse(Context*, int, int, int, int, CRect*)+0x328>	100011ad: R_386_PC32	plot(Context*, int, int, CRect*)
100011b1:	83 c4 20             	add    esp,0x20
100011b4:	d9 44 24 28          	fld    DWORD PTR [esp+0x28]
100011b8:	d9 e4                	ftst   
100011ba:	df e0                	fnstsw ax
100011bc:	9e                   	sahf   
100011bd:	d9 e8                	fld1   
100011bf:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
100011c3:	d9 44 24 10          	fld    DWORD PTR [esp+0x10]
100011c7:	d9 44 24 20          	fld    DWORD PTR [esp+0x20]
100011cb:	d9 44 24 24          	fld    DWORD PTR [esp+0x24]
100011cf:	d9 cb                	fxch   st(3)
100011d1:	d8 e4                	fsub   st,st(4)
100011d3:	76 26                	jbe    100011fb <midptellipse(Context*, int, int, int, int, CRect*)+0x376>
100011d5:	dd dc                	fstp   st(4)
100011d7:	d9 c9                	fxch   st(1)
100011d9:	d9 ca                	fxch   st(2)
100011db:	d9 cb                	fxch   st(3)
100011dd:	d9 c9                	fxch   st(1)
100011df:	d8 24 24             	fsub   DWORD PTR [esp]
100011e2:	d9 cc                	fxch   st(4)
100011e4:	d8 44 24 08          	fadd   DWORD PTR [esp+0x8]
100011e8:	d8 e4                	fsub   st,st(4)
100011ea:	d9 c9                	fxch   st(1)
100011ec:	d9 cc                	fxch   st(4)
100011ee:	d9 c9                	fxch   st(1)
100011f0:	d9 ca                	fxch   st(2)
100011f2:	d9 cb                	fxch   st(3)
100011f4:	d9 ca                	fxch   st(2)
100011f6:	e9 b5 fe ff ff       	jmp    100010b0 <midptellipse(Context*, int, int, int, int, CRect*)+0x22b>
100011fb:	d9 ca                	fxch   st(2)
100011fd:	de c4                	faddp  st(4),st
100011ff:	d9 ca                	fxch   st(2)
10001201:	d8 44 24 04          	fadd   DWORD PTR [esp+0x4]
10001205:	d9 ca                	fxch   st(2)
10001207:	d8 24 24             	fsub   DWORD PTR [esp]
1000120a:	d9 cc                	fxch   st(4)
1000120c:	d8 c2                	fadd   st,st(2)
1000120e:	d8 e4                	fsub   st,st(4)
10001210:	d8 44 24 08          	fadd   DWORD PTR [esp+0x8]
10001214:	d9 c9                	fxch   st(1)
10001216:	d9 cc                	fxch   st(4)
10001218:	d9 c9                	fxch   st(1)
1000121a:	e9 91 fe ff ff       	jmp    100010b0 <midptellipse(Context*, int, int, int, int, CRect*)+0x22b>
1000121f:	dd d8                	fstp   st(0)
10001221:	dd d8                	fstp   st(0)
10001223:	83 c4 4c             	add    esp,0x4c
10001226:	5b                   	pop    ebx
10001227:	5e                   	pop    esi
10001228:	5f                   	pop    edi
10001229:	5d                   	pop    ebp
1000122a:	c3                   	ret    
1000122b:	90                   	nop

1000122c <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)>:
1000122c:	57                   	push   edi
1000122d:	56                   	push   esi
1000122e:	53                   	push   ebx
1000122f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10001233:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001237:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
1000123b:	b9 02 00 00 00       	mov    ecx,0x2
10001240:	99                   	cdq    
10001241:	f7 f9                	idiv   ecx
10001243:	89 c7                	mov    edi,eax
10001245:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000124d:	89 d8                	mov    eax,ebx
1000124f:	99                   	cdq    
10001250:	f7 f9                	idiv   ecx
10001252:	89 c3                	mov    ebx,eax
10001254:	01 f3                	add    ebx,esi
10001256:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
1000125a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000125e:	01 f8                	add    eax,edi
10001260:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001264:	89 f0                	mov    eax,esi
10001266:	99                   	cdq    
10001267:	f7 f9                	idiv   ecx
10001269:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000126d:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10001271:	5b                   	pop    ebx
10001272:	5e                   	pop    esi
10001273:	5f                   	pop    edi
10001274:	e9 0c fc ff ff       	jmp    10000e85 <midptellipse(Context*, int, int, int, int, CRect*)>
10001279:	90                   	nop

1000127a <Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)>:
1000127a:	c7 44 24 20 00 00 ff 00 	mov    DWORD PTR [esp+0x20],0xff0000
10001282:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
10001287:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000128b:	eb 9f                	jmp    1000122c <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)>
1000128d:	90                   	nop

1000128e <Context::fillRect(int, int, int, int, Brush*)>:
1000128e:	55                   	push   ebp
1000128f:	57                   	push   edi
10001290:	56                   	push   esi
10001291:	53                   	push   ebx
10001292:	83 ec 2c             	sub    esp,0x2c
10001295:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10001299:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
1000129d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
100012a1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100012a5:	01 d8                	add    eax,ebx
100012a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100012ab:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
100012af:	01 fa                	add    edx,edi
100012b1:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
100012b4:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
100012b7:	85 db                	test   ebx,ebx
100012b9:	79 02                	jns    100012bd <Context::fillRect(int, int, int, int, Brush*)+0x2f>
100012bb:	31 db                	xor    ebx,ebx
100012bd:	85 ff                	test   edi,edi
100012bf:	79 02                	jns    100012c3 <Context::fillRect(int, int, int, int, Brush*)+0x35>
100012c1:	31 ff                	xor    edi,edi
100012c3:	89 e8                	mov    eax,ebp
100012c5:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
100012c9:	7e 04                	jle    100012cf <Context::fillRect(int, int, int, int, Brush*)+0x41>
100012cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100012cf:	29 d8                	sub    eax,ebx
100012d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100012d5:	89 c8                	mov    eax,ecx
100012d7:	39 d1                	cmp    ecx,edx
100012d9:	7e 02                	jle    100012dd <Context::fillRect(int, int, int, int, Brush*)+0x4f>
100012db:	89 d0                	mov    eax,edx
100012dd:	29 f8                	sub    eax,edi
100012df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100012e3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
100012e6:	8b 00                	mov    eax,DWORD PTR [eax]
100012e8:	e8 8f f5 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
100012ed:	85 c0                	test   eax,eax
100012ef:	74 38                	je     10001329 <Context::fillRect(int, int, int, int, Brush*)+0x9b>
100012f1:	31 ed                	xor    ebp,ebp
100012f3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
100012f6:	8b 08                	mov    ecx,DWORD PTR [eax]
100012f8:	89 c8                	mov    eax,ecx
100012fa:	e8 7d f5 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
100012ff:	39 e8                	cmp    eax,ebp
10001301:	7e 65                	jle    10001368 <Context::fillRect(int, int, int, int, Brush*)+0xda>
10001303:	89 ea                	mov    edx,ebp
10001305:	89 c8                	mov    eax,ecx
10001307:	e8 80 f5 ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
1000130c:	52                   	push   edx
1000130d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001311:	ff 30                	push   DWORD PTR [eax]
10001313:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001317:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000131b:	57                   	push   edi
1000131c:	53                   	push   ebx
1000131d:	56                   	push   esi
1000131e:	e8 fc ff ff ff       	call   1000131f <Context::fillRect(int, int, int, int, Brush*)+0x91>	1000131f: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
10001323:	45                   	inc    ebp
10001324:	83 c4 20             	add    esp,0x20
10001327:	eb ca                	jmp    100012f3 <Context::fillRect(int, int, int, int, Brush*)+0x65>
10001329:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
1000132d:	75 39                	jne    10001368 <Context::fillRect(int, int, int, int, Brush*)+0xda>
1000132f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
10001337:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
1000133f:	49                   	dec    ecx
10001340:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10001344:	8d 45 ff             	lea    eax,[ebp-0x1]
10001347:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000134b:	50                   	push   eax
1000134c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001350:	8d 44 24 18          	lea    eax,[esp+0x18]
10001354:	50                   	push   eax
10001355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001359:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000135d:	57                   	push   edi
1000135e:	53                   	push   ebx
1000135f:	56                   	push   esi
10001360:	e8 fc ff ff ff       	call   10001361 <Context::fillRect(int, int, int, int, Brush*)+0xd3>	10001361: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
10001365:	83 c4 20             	add    esp,0x20
10001368:	83 c4 2c             	add    esp,0x2c
1000136b:	5b                   	pop    ebx
1000136c:	5e                   	pop    esi
1000136d:	5f                   	pop    edi
1000136e:	5d                   	pop    ebp
1000136f:	c3                   	ret    

10001370 <Context::fillRect(int, int, int, int, unsigned int)>:
10001370:	55                   	push   ebp
10001371:	57                   	push   edi
10001372:	56                   	push   esi
10001373:	53                   	push   ebx
10001374:	83 ec 2c             	sub    esp,0x2c
10001377:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
1000137b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
1000137f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
10001383:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001387:	01 d8                	add    eax,ebx
10001389:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000138d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001391:	01 fa                	add    edx,edi
10001393:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
10001396:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
10001399:	85 db                	test   ebx,ebx
1000139b:	79 02                	jns    1000139f <Context::fillRect(int, int, int, int, unsigned int)+0x2f>
1000139d:	31 db                	xor    ebx,ebx
1000139f:	85 ff                	test   edi,edi
100013a1:	79 02                	jns    100013a5 <Context::fillRect(int, int, int, int, unsigned int)+0x35>
100013a3:	31 ff                	xor    edi,edi
100013a5:	89 e8                	mov    eax,ebp
100013a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
100013ab:	7e 04                	jle    100013b1 <Context::fillRect(int, int, int, int, unsigned int)+0x41>
100013ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100013b1:	29 d8                	sub    eax,ebx
100013b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100013b7:	89 c8                	mov    eax,ecx
100013b9:	39 d1                	cmp    ecx,edx
100013bb:	7e 02                	jle    100013bf <Context::fillRect(int, int, int, int, unsigned int)+0x4f>
100013bd:	89 d0                	mov    eax,edx
100013bf:	29 f8                	sub    eax,edi
100013c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100013c5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
100013c8:	8b 00                	mov    eax,DWORD PTR [eax]
100013ca:	e8 ad f4 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
100013cf:	85 c0                	test   eax,eax
100013d1:	74 38                	je     1000140b <Context::fillRect(int, int, int, int, unsigned int)+0x9b>
100013d3:	31 ed                	xor    ebp,ebp
100013d5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
100013d8:	8b 08                	mov    ecx,DWORD PTR [eax]
100013da:	89 c8                	mov    eax,ecx
100013dc:	e8 9b f4 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
100013e1:	39 e8                	cmp    eax,ebp
100013e3:	7e 65                	jle    1000144a <Context::fillRect(int, int, int, int, unsigned int)+0xda>
100013e5:	89 ea                	mov    edx,ebp
100013e7:	89 c8                	mov    eax,ecx
100013e9:	e8 9e f4 ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
100013ee:	52                   	push   edx
100013ef:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100013f3:	ff 30                	push   DWORD PTR [eax]
100013f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100013f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100013fd:	57                   	push   edi
100013fe:	53                   	push   ebx
100013ff:	56                   	push   esi
10001400:	e8 fc ff ff ff       	call   10001401 <Context::fillRect(int, int, int, int, unsigned int)+0x91>	10001401: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
10001405:	45                   	inc    ebp
10001406:	83 c4 20             	add    esp,0x20
10001409:	eb ca                	jmp    100013d5 <Context::fillRect(int, int, int, int, unsigned int)+0x65>
1000140b:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
1000140f:	75 39                	jne    1000144a <Context::fillRect(int, int, int, int, unsigned int)+0xda>
10001411:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
10001419:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10001421:	49                   	dec    ecx
10001422:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10001426:	8d 45 ff             	lea    eax,[ebp-0x1]
10001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000142d:	50                   	push   eax
1000142e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001432:	8d 44 24 18          	lea    eax,[esp+0x18]
10001436:	50                   	push   eax
10001437:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000143b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000143f:	57                   	push   edi
10001440:	53                   	push   ebx
10001441:	56                   	push   esi
10001442:	e8 fc ff ff ff       	call   10001443 <Context::fillRect(int, int, int, int, unsigned int)+0xd3>	10001443: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
10001447:	83 c4 20             	add    esp,0x20
1000144a:	83 c4 2c             	add    esp,0x2c
1000144d:	5b                   	pop    ebx
1000144e:	5e                   	pop    esi
1000144f:	5f                   	pop    edi
10001450:	5d                   	pop    ebp
10001451:	c3                   	ret    

10001452 <Context::drawHorizontalLine(int, int, int, unsigned int)>:
10001452:	83 ec 14             	sub    esp,0x14
10001455:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10001459:	6a 01                	push   0x1
1000145b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000145f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001467:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000146b:	e8 fc ff ff ff       	call   1000146c <Context::drawHorizontalLine(int, int, int, unsigned int)+0x1a>	1000146c: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10001470:	83 c4 2c             	add    esp,0x2c
10001473:	c3                   	ret    

10001474 <Context::drawVerticalLine(int, int, int, unsigned int)>:
10001474:	83 ec 14             	sub    esp,0x14
10001477:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000147b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000147f:	6a 01                	push   0x1
10001481:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001485:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001489:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000148d:	e8 fc ff ff ff       	call   1000148e <Context::drawVerticalLine(int, int, int, unsigned int)+0x1a>	1000148e: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10001492:	83 c4 2c             	add    esp,0x2c
10001495:	c3                   	ret    

10001496 <Context::drawRect(int, int, int, int, unsigned int)>:
10001496:	55                   	push   ebp
10001497:	57                   	push   edi
10001498:	56                   	push   esi
10001499:	53                   	push   ebx
1000149a:	83 ec 28             	sub    esp,0x28
1000149d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
100014a1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
100014a5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
100014a9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
100014ad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100014b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100014b5:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
100014b9:	57                   	push   edi
100014ba:	55                   	push   ebp
100014bb:	52                   	push   edx
100014bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
100014c0:	56                   	push   esi
100014c1:	53                   	push   ebx
100014c2:	e8 fc ff ff ff       	call   100014c3 <Context::drawRect(int, int, int, int, unsigned int)+0x2d>	100014c3: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
100014c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100014cb:	8d 48 fe             	lea    ecx,[eax-0x2]
100014ce:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
100014d2:	8d 42 01             	lea    eax,[edx+0x1]
100014d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
100014d9:	83 c4 14             	add    esp,0x14
100014dc:	57                   	push   edi
100014dd:	51                   	push   ecx
100014de:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100014e2:	50                   	push   eax
100014e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100014e7:	56                   	push   esi
100014e8:	53                   	push   ebx
100014e9:	e8 fc ff ff ff       	call   100014ea <Context::drawRect(int, int, int, int, unsigned int)+0x54>	100014ea: R_386_PC32	Context::drawVerticalLine(int, int, int, unsigned int)
100014ee:	83 c4 14             	add    esp,0x14
100014f1:	57                   	push   edi
100014f2:	55                   	push   ebp
100014f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100014f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100014fb:	8d 54 02 ff          	lea    edx,[edx+eax*1-0x1]
100014ff:	52                   	push   edx
10001500:	56                   	push   esi
10001501:	53                   	push   ebx
10001502:	e8 fc ff ff ff       	call   10001503 <Context::drawRect(int, int, int, int, unsigned int)+0x6d>	10001503: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
10001507:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
1000150b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
1000150f:	89 4c 24 5c          	mov    DWORD PTR [esp+0x5c],ecx
10001513:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001517:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
1000151b:	8d 44 2e ff          	lea    eax,[esi+ebp*1-0x1]
1000151f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001523:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
10001527:	83 c4 3c             	add    esp,0x3c
1000152a:	5b                   	pop    ebx
1000152b:	5e                   	pop    esi
1000152c:	5f                   	pop    edi
1000152d:	5d                   	pop    ebp
1000152e:	e9 41 ff ff ff       	jmp    10001474 <Context::drawVerticalLine(int, int, int, unsigned int)>
10001533:	90                   	nop

10001534 <Context::ellipse(bool, int, int, int, int, unsigned int)>:
10001534:	55                   	push   ebp
10001535:	57                   	push   edi
10001536:	56                   	push   esi
10001537:	53                   	push   ebx
10001538:	83 ec 1c             	sub    esp,0x1c
1000153b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
1000153f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001543:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
10001547:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
1000154b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
1000154f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10001553:	01 dd                	add    ebp,ebx
10001555:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10001559:	01 fa                	add    edx,edi
1000155b:	85 db                	test   ebx,ebx
1000155d:	79 02                	jns    10001561 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x2d>
1000155f:	31 db                	xor    ebx,ebx
10001561:	85 ff                	test   edi,edi
10001563:	79 02                	jns    10001567 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x33>
10001565:	31 ff                	xor    edi,edi
10001567:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
1000156a:	39 e8                	cmp    eax,ebp
1000156c:	7e 02                	jle    10001570 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x3c>
1000156e:	89 e8                	mov    eax,ebp
10001570:	29 d8                	sub    eax,ebx
10001572:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001576:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
10001579:	39 d0                	cmp    eax,edx
1000157b:	7e 02                	jle    1000157f <Context::ellipse(bool, int, int, int, int, unsigned int)+0x4b>
1000157d:	89 d0                	mov    eax,edx
1000157f:	29 f8                	sub    eax,edi
10001581:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001585:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001588:	8b 00                	mov    eax,DWORD PTR [eax]
1000158a:	e8 ed f2 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
1000158f:	85 c0                	test   eax,eax
10001591:	74 44                	je     100015d7 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xa3>
10001593:	31 ed                	xor    ebp,ebp
10001595:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
1000159a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000159e:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
100015a1:	8b 08                	mov    ecx,DWORD PTR [eax]
100015a3:	89 c8                	mov    eax,ecx
100015a5:	e8 d2 f2 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
100015aa:	39 e8                	cmp    eax,ebp
100015ac:	7e 4c                	jle    100015fa <Context::ellipse(bool, int, int, int, int, unsigned int)+0xc6>
100015ae:	89 ea                	mov    edx,ebp
100015b0:	89 c8                	mov    eax,ecx
100015b2:	e8 d5 f2 ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
100015b7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
100015bb:	ff 30                	push   DWORD PTR [eax]
100015bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100015c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100015c5:	57                   	push   edi
100015c6:	53                   	push   ebx
100015c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100015cb:	56                   	push   esi
100015cc:	e8 fc ff ff ff       	call   100015cd <Context::ellipse(bool, int, int, int, int, unsigned int)+0x99>	100015cd: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
100015d1:	45                   	inc    ebp
100015d2:	83 c4 20             	add    esp,0x20
100015d5:	eb c7                	jmp    1000159e <Context::ellipse(bool, int, int, int, int, unsigned int)+0x6a>
100015d7:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
100015db:	75 1d                	jne    100015fa <Context::ellipse(bool, int, int, int, int, unsigned int)+0xc6>
100015dd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
100015e1:	6a 00                	push   0x0
100015e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100015e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100015eb:	57                   	push   edi
100015ec:	53                   	push   ebx
100015ed:	0f b6 c9             	movzx  ecx,cl
100015f0:	51                   	push   ecx
100015f1:	56                   	push   esi
100015f2:	e8 fc ff ff ff       	call   100015f3 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xbf>	100015f3: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
100015f7:	83 c4 20             	add    esp,0x20
100015fa:	83 c4 1c             	add    esp,0x1c
100015fd:	5b                   	pop    ebx
100015fe:	5e                   	pop    esi
100015ff:	5f                   	pop    edi
10001600:	5d                   	pop    ebp
10001601:	c3                   	ret    

10001602 <Context::ellipse(bool, int, int, int, int, Brush*)>:
10001602:	55                   	push   ebp
10001603:	57                   	push   edi
10001604:	56                   	push   esi
10001605:	53                   	push   ebx
10001606:	83 ec 1c             	sub    esp,0x1c
10001609:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
1000160d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001611:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
10001615:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001619:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
1000161d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10001621:	01 dd                	add    ebp,ebx
10001623:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10001627:	01 f2                	add    edx,esi
10001629:	85 db                	test   ebx,ebx
1000162b:	79 02                	jns    1000162f <Context::ellipse(bool, int, int, int, int, Brush*)+0x2d>
1000162d:	31 db                	xor    ebx,ebx
1000162f:	85 f6                	test   esi,esi
10001631:	79 02                	jns    10001635 <Context::ellipse(bool, int, int, int, int, Brush*)+0x33>
10001633:	31 f6                	xor    esi,esi
10001635:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
10001638:	39 e8                	cmp    eax,ebp
1000163a:	7e 02                	jle    1000163e <Context::ellipse(bool, int, int, int, int, Brush*)+0x3c>
1000163c:	89 e8                	mov    eax,ebp
1000163e:	29 d8                	sub    eax,ebx
10001640:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001644:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
10001647:	39 d0                	cmp    eax,edx
10001649:	7e 02                	jle    1000164d <Context::ellipse(bool, int, int, int, int, Brush*)+0x4b>
1000164b:	89 d0                	mov    eax,edx
1000164d:	29 f0                	sub    eax,esi
1000164f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001653:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
10001656:	8b 00                	mov    eax,DWORD PTR [eax]
10001658:	e8 1f f2 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
1000165d:	85 c0                	test   eax,eax
1000165f:	74 45                	je     100016a6 <Context::ellipse(bool, int, int, int, int, Brush*)+0xa4>
10001661:	31 ed                	xor    ebp,ebp
10001663:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10001668:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000166c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
1000166f:	8b 08                	mov    ecx,DWORD PTR [eax]
10001671:	89 c8                	mov    eax,ecx
10001673:	e8 04 f2 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10001678:	39 e8                	cmp    eax,ebp
1000167a:	7e 4e                	jle    100016ca <Context::ellipse(bool, int, int, int, int, Brush*)+0xc8>
1000167c:	89 ea                	mov    edx,ebp
1000167e:	89 c8                	mov    eax,ecx
10001680:	e8 07 f2 ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001685:	68 00 00 ff 00       	push   0xff0000
1000168a:	ff 30                	push   DWORD PTR [eax]
1000168c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001690:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001694:	56                   	push   esi
10001695:	53                   	push   ebx
10001696:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
1000169a:	57                   	push   edi
1000169b:	e8 fc ff ff ff       	call   1000169c <Context::ellipse(bool, int, int, int, int, Brush*)+0x9a>	1000169c: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
100016a0:	45                   	inc    ebp
100016a1:	83 c4 20             	add    esp,0x20
100016a4:	eb c6                	jmp    1000166c <Context::ellipse(bool, int, int, int, int, Brush*)+0x6a>
100016a6:	80 7f 14 00          	cmp    BYTE PTR [edi+0x14],0x0
100016aa:	75 1e                	jne    100016ca <Context::ellipse(bool, int, int, int, int, Brush*)+0xc8>
100016ac:	68 00 00 ff 00       	push   0xff0000
100016b1:	6a 00                	push   0x0
100016b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100016b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100016bb:	56                   	push   esi
100016bc:	53                   	push   ebx
100016bd:	0f b6 c9             	movzx  ecx,cl
100016c0:	51                   	push   ecx
100016c1:	57                   	push   edi
100016c2:	e8 fc ff ff ff       	call   100016c3 <Context::ellipse(bool, int, int, int, int, Brush*)+0xc1>	100016c3: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
100016c7:	83 c4 20             	add    esp,0x20
100016ca:	83 c4 1c             	add    esp,0x1c
100016cd:	5b                   	pop    ebx
100016ce:	5e                   	pop    esi
100016cf:	5f                   	pop    edi
100016d0:	5d                   	pop    ebp
100016d1:	c3                   	ret    

100016d2 <CRect::split(CRect*)>:
100016d2:	55                   	push   ebp
100016d3:	57                   	push   edi
100016d4:	56                   	push   esi
100016d5:	53                   	push   ebx
100016d6:	83 ec 28             	sub    esp,0x28
100016d9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
100016dd:	6a 08                	push   0x8
100016df:	e8 fc ff ff ff       	call   100016e0 <CRect::split(CRect*)+0xe>	100016e0: R_386_PC32	malloc
100016e4:	89 c3                	mov    ebx,eax
100016e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100016ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100016f3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
100016f7:	8b 6a 08             	mov    ebp,DWORD PTR [edx+0x8]
100016fa:	8b 3a                	mov    edi,DWORD PTR [edx]
100016fc:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
100016ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001703:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
10001706:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000170a:	8b 16                	mov    edx,DWORD PTR [esi]
1000170c:	83 c4 10             	add    esp,0x10
1000170f:	39 d7                	cmp    edi,edx
10001711:	7f 36                	jg     10001749 <CRect::split(CRect*)+0x77>
10001713:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
10001717:	7c 30                	jl     10001749 <CRect::split(CRect*)+0x77>
10001719:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000171d:	83 ec 0c             	sub    esp,0xc
10001720:	6a 10                	push   0x10
10001722:	e8 fc ff ff ff       	call   10001723 <CRect::split(CRect*)+0x51>	10001723: R_386_PC32	malloc
10001727:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
1000172a:	89 38                	mov    DWORD PTR [eax],edi
1000172c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10001730:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
10001733:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10001737:	4a                   	dec    edx
10001738:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000173b:	59                   	pop    ecx
1000173c:	5f                   	pop    edi
1000173d:	50                   	push   eax
1000173e:	53                   	push   ebx
1000173f:	e8 fc ff ff ff       	call   10001740 <CRect::split(CRect*)+0x6e>	10001740: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001744:	8b 3e                	mov    edi,DWORD PTR [esi]
10001746:	83 c4 10             	add    esp,0x10
10001749:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
1000174c:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
10001750:	7c 35                	jl     10001787 <CRect::split(CRect*)+0xb5>
10001752:	39 d5                	cmp    ebp,edx
10001754:	7f 31                	jg     10001787 <CRect::split(CRect*)+0xb5>
10001756:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000175a:	83 ec 0c             	sub    esp,0xc
1000175d:	6a 10                	push   0x10
1000175f:	e8 fc ff ff ff       	call   10001760 <CRect::split(CRect*)+0x8e>	10001760: R_386_PC32	malloc
10001764:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
10001767:	89 38                	mov    DWORD PTR [eax],edi
10001769:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
1000176d:	4a                   	dec    edx
1000176e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10001771:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10001775:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10001778:	5d                   	pop    ebp
10001779:	5a                   	pop    edx
1000177a:	50                   	push   eax
1000177b:	53                   	push   ebx
1000177c:	e8 fc ff ff ff       	call   1000177d <CRect::split(CRect*)+0xab>	1000177d: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001781:	8b 6e 08             	mov    ebp,DWORD PTR [esi+0x8]
10001784:	83 c4 10             	add    esp,0x10
10001787:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
1000178a:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
1000178e:	7c 3d                	jl     100017cd <CRect::split(CRect*)+0xfb>
10001790:	39 fa                	cmp    edx,edi
10001792:	7c 39                	jl     100017cd <CRect::split(CRect*)+0xfb>
10001794:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10001798:	83 ec 0c             	sub    esp,0xc
1000179b:	6a 10                	push   0x10
1000179d:	e8 fc ff ff ff       	call   1000179e <CRect::split(CRect*)+0xcc>	1000179e: R_386_PC32	malloc
100017a2:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
100017a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100017a9:	42                   	inc    edx
100017aa:	89 10                	mov    DWORD PTR [eax],edx
100017ac:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100017b0:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
100017b3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100017b7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
100017ba:	5a                   	pop    edx
100017bb:	59                   	pop    ecx
100017bc:	50                   	push   eax
100017bd:	53                   	push   ebx
100017be:	e8 fc ff ff ff       	call   100017bf <CRect::split(CRect*)+0xed>	100017bf: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100017c3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
100017c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100017ca:	83 c4 10             	add    esp,0x10
100017cd:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
100017d0:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
100017d4:	7c 2e                	jl     10001804 <CRect::split(CRect*)+0x132>
100017d6:	39 ee                	cmp    esi,ebp
100017d8:	7c 2a                	jl     10001804 <CRect::split(CRect*)+0x132>
100017da:	83 ec 0c             	sub    esp,0xc
100017dd:	6a 10                	push   0x10
100017df:	e8 fc ff ff ff       	call   100017e0 <CRect::split(CRect*)+0x10e>	100017e0: R_386_PC32	malloc
100017e4:	46                   	inc    esi
100017e5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
100017e8:	89 38                	mov    DWORD PTR [eax],edi
100017ea:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
100017ee:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
100017f1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100017f5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
100017f8:	5a                   	pop    edx
100017f9:	59                   	pop    ecx
100017fa:	50                   	push   eax
100017fb:	53                   	push   ebx
100017fc:	e8 fc ff ff ff       	call   100017fd <CRect::split(CRect*)+0x12b>	100017fd: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001801:	83 c4 10             	add    esp,0x10
10001804:	89 d8                	mov    eax,ebx
10001806:	83 c4 1c             	add    esp,0x1c
10001809:	5b                   	pop    ebx
1000180a:	5e                   	pop    esi
1000180b:	5f                   	pop    edi
1000180c:	5d                   	pop    ebp
1000180d:	c3                   	ret    

1000180e <Context::clearClipRects()>:
1000180e:	53                   	push   ebx
1000180f:	83 ec 08             	sub    esp,0x8
10001812:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001816:	c6 43 14 00          	mov    BYTE PTR [ebx+0x14],0x0
1000181a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000181d:	8b 08                	mov    ecx,DWORD PTR [eax]
1000181f:	89 c8                	mov    eax,ecx
10001821:	e8 56 f0 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10001826:	85 c0                	test   eax,eax
10001828:	74 19                	je     10001843 <Context::clearClipRects()+0x35>
1000182a:	50                   	push   eax
1000182b:	50                   	push   eax
1000182c:	6a 10                	push   0x10
1000182e:	ff 31                	push   DWORD PTR [ecx]
10001830:	e8 fc ff ff ff       	call   10001831 <Context::clearClipRects()+0x23>	10001831: R_386_PC32	operator delete(void*, unsigned long)
10001835:	58                   	pop    eax
10001836:	ff 73 18             	push   DWORD PTR [ebx+0x18]
10001839:	e8 fc ff ff ff       	call   1000183a <Context::clearClipRects()+0x2c>	1000183a: R_386_PC32	List<CRect*>::deleteHead()
1000183e:	83 c4 10             	add    esp,0x10
10001841:	eb d7                	jmp    1000181a <Context::clearClipRects()+0xc>
10001843:	83 c4 08             	add    esp,0x8
10001846:	5b                   	pop    ebx
10001847:	c3                   	ret    

10001848 <Context::subClipRect(CRect*)>:
10001848:	55                   	push   ebp
10001849:	57                   	push   edi
1000184a:	56                   	push   esi
1000184b:	53                   	push   ebx
1000184c:	83 ec 1c             	sub    esp,0x1c
1000184f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10001853:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001857:	c6 40 14 01          	mov    BYTE PTR [eax+0x14],0x1
1000185b:	31 db                	xor    ebx,ebx
1000185d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001861:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
10001864:	8b 29                	mov    ebp,DWORD PTR [ecx]
10001866:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000186a:	89 e8                	mov    eax,ebp
1000186c:	e8 0b f0 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10001871:	39 d8                	cmp    eax,ebx
10001873:	0f 8e d4 00 00 00    	jle    1000194d <Context::subClipRect(CRect*)+0x105>
10001879:	89 da                	mov    edx,ebx
1000187b:	89 e8                	mov    eax,ebp
1000187d:	e8 0a f0 ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001882:	8b 38                	mov    edi,DWORD PTR [eax]
10001884:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
10001887:	39 17                	cmp    DWORD PTR [edi],edx
10001889:	7f 1b                	jg     100018a6 <Context::subClipRect(CRect*)+0x5e>
1000188b:	8b 16                	mov    edx,DWORD PTR [esi]
1000188d:	39 57 04             	cmp    DWORD PTR [edi+0x4],edx
10001890:	7c 14                	jl     100018a6 <Context::subClipRect(CRect*)+0x5e>
10001892:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
10001895:	39 57 08             	cmp    DWORD PTR [edi+0x8],edx
10001898:	7f 0c                	jg     100018a6 <Context::subClipRect(CRect*)+0x5e>
1000189a:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
1000189d:	39 57 0c             	cmp    DWORD PTR [edi+0xc],edx
100018a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
100018a4:	7d 03                	jge    100018a9 <Context::subClipRect(CRect*)+0x61>
100018a6:	43                   	inc    ebx
100018a7:	eb b4                	jmp    1000185d <Context::subClipRect(CRect*)+0x15>
100018a9:	39 e8                	cmp    eax,ebp
100018ab:	75 07                	jne    100018b4 <Context::subClipRect(CRect*)+0x6c>
100018ad:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
100018b0:	89 19                	mov    DWORD PTR [ecx],ebx
100018b2:	eb 19                	jmp    100018cd <Context::subClipRect(CRect*)+0x85>
100018b4:	3b 41 04             	cmp    eax,DWORD PTR [ecx+0x4]
100018b7:	75 08                	jne    100018c1 <Context::subClipRect(CRect*)+0x79>
100018b9:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
100018bc:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
100018bf:	eb 0c                	jmp    100018cd <Context::subClipRect(CRect*)+0x85>
100018c1:	8b 68 08             	mov    ebp,DWORD PTR [eax+0x8]
100018c4:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
100018c7:	89 5d 04             	mov    DWORD PTR [ebp+0x4],ebx
100018ca:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
100018cd:	8b 19                	mov    ebx,DWORD PTR [ecx]
100018cf:	85 db                	test   ebx,ebx
100018d1:	74 0a                	je     100018dd <Context::subClipRect(CRect*)+0x95>
100018d3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
100018da:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
100018dd:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
100018e4:	55                   	push   ebp
100018e5:	55                   	push   ebp
100018e6:	6a 0c                	push   0xc
100018e8:	50                   	push   eax
100018e9:	e8 fc ff ff ff       	call   100018ea <Context::subClipRect(CRect*)+0xa2>	100018ea: R_386_PC32	operator delete(void*, unsigned long)
100018ee:	58                   	pop    eax
100018ef:	5a                   	pop    edx
100018f0:	56                   	push   esi
100018f1:	57                   	push   edi
100018f2:	e8 fc ff ff ff       	call   100018f3 <Context::subClipRect(CRect*)+0xab>	100018f3: R_386_PC32	CRect::split(CRect*)
100018f7:	89 c5                	mov    ebp,eax
100018f9:	59                   	pop    ecx
100018fa:	5b                   	pop    ebx
100018fb:	6a 10                	push   0x10
100018fd:	57                   	push   edi
100018fe:	e8 fc ff ff ff       	call   100018ff <Context::subClipRect(CRect*)+0xb7>	100018ff: R_386_PC32	operator delete(void*, unsigned long)
10001903:	83 c4 10             	add    esp,0x10
10001906:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
10001909:	89 c8                	mov    eax,ecx
1000190b:	e8 6c ef ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10001910:	89 c3                	mov    ebx,eax
10001912:	85 c0                	test   eax,eax
10001914:	74 1c                	je     10001932 <Context::subClipRect(CRect*)+0xea>
10001916:	8b 19                	mov    ebx,DWORD PTR [ecx]
10001918:	83 ec 0c             	sub    esp,0xc
1000191b:	55                   	push   ebp
1000191c:	e8 fc ff ff ff       	call   1000191d <Context::subClipRect(CRect*)+0xd5>	1000191d: R_386_PC32	List<CRect*>::deleteHead()
10001921:	59                   	pop    ecx
10001922:	5f                   	pop    edi
10001923:	53                   	push   ebx
10001924:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001928:	ff 70 18             	push   DWORD PTR [eax+0x18]
1000192b:	e8 fc ff ff ff       	call   1000192c <Context::subClipRect(CRect*)+0xe4>	1000192c: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001930:	eb d1                	jmp    10001903 <Context::subClipRect(CRect*)+0xbb>
10001932:	83 ec 0c             	sub    esp,0xc
10001935:	55                   	push   ebp
10001936:	e8 fc ff ff ff       	call   10001937 <Context::subClipRect(CRect*)+0xef>	10001937: R_386_PC32	List<CRect*>::~List()
1000193b:	58                   	pop    eax
1000193c:	5a                   	pop    edx
1000193d:	6a 08                	push   0x8
1000193f:	55                   	push   ebp
10001940:	e8 fc ff ff ff       	call   10001941 <Context::subClipRect(CRect*)+0xf9>	10001941: R_386_PC32	operator delete(void*, unsigned long)
10001945:	83 c4 10             	add    esp,0x10
10001948:	e9 10 ff ff ff       	jmp    1000185d <Context::subClipRect(CRect*)+0x15>
1000194d:	83 c4 1c             	add    esp,0x1c
10001950:	5b                   	pop    ebx
10001951:	5e                   	pop    esi
10001952:	5f                   	pop    edi
10001953:	5d                   	pop    ebp
10001954:	c3                   	ret    
10001955:	90                   	nop

10001956 <Context::addClipRect(CRect*)>:
10001956:	56                   	push   esi
10001957:	53                   	push   ebx
10001958:	83 ec 0c             	sub    esp,0xc
1000195b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000195f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10001963:	56                   	push   esi
10001964:	53                   	push   ebx
10001965:	e8 fc ff ff ff       	call   10001966 <Context::addClipRect(CRect*)+0x10>	10001966: R_386_PC32	Context::subClipRect(CRect*)
1000196a:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
1000196e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10001971:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001975:	83 c4 14             	add    esp,0x14
10001978:	5b                   	pop    ebx
10001979:	5e                   	pop    esi
1000197a:	e9 fc ff ff ff       	jmp    1000197b <Context::addClipRect(CRect*)+0x25>	1000197b: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000197f:	90                   	nop

10001980 <Context::intersectClipRect(CRect*)>:
10001980:	55                   	push   ebp
10001981:	57                   	push   edi
10001982:	56                   	push   esi
10001983:	53                   	push   ebx
10001984:	83 ec 28             	sub    esp,0x28
10001987:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
1000198b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
1000198f:	c6 46 14 01          	mov    BYTE PTR [esi+0x14],0x1
10001993:	6a 08                	push   0x8
10001995:	e8 fc ff ff ff       	call   10001996 <Context::intersectClipRect(CRect*)+0x16>	10001996: R_386_PC32	malloc
1000199a:	89 c7                	mov    edi,eax
1000199c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100019a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100019a9:	83 c4 10             	add    esp,0x10
100019ac:	31 db                	xor    ebx,ebx
100019ae:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
100019b1:	8b 08                	mov    ecx,DWORD PTR [eax]
100019b3:	89 c8                	mov    eax,ecx
100019b5:	e8 c2 ee ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
100019ba:	39 d8                	cmp    eax,ebx
100019bc:	7e 59                	jle    10001a17 <Context::intersectClipRect(CRect*)+0x97>
100019be:	89 da                	mov    edx,ebx
100019c0:	89 c8                	mov    eax,ecx
100019c2:	e8 c5 ee ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
100019c7:	51                   	push   ecx
100019c8:	51                   	push   ecx
100019c9:	55                   	push   ebp
100019ca:	ff 30                	push   DWORD PTR [eax]
100019cc:	e8 fc ff ff ff       	call   100019cd <Context::intersectClipRect(CRect*)+0x4d>	100019cd: R_386_PC32	CRect::intersect(CRect*)
100019d1:	83 c4 10             	add    esp,0x10
100019d4:	85 c0                	test   eax,eax
100019d6:	74 0c                	je     100019e4 <Context::intersectClipRect(CRect*)+0x64>
100019d8:	52                   	push   edx
100019d9:	52                   	push   edx
100019da:	50                   	push   eax
100019db:	57                   	push   edi
100019dc:	e8 fc ff ff ff       	call   100019dd <Context::intersectClipRect(CRect*)+0x5d>	100019dd: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100019e1:	83 c4 10             	add    esp,0x10
100019e4:	43                   	inc    ebx
100019e5:	eb c7                	jmp    100019ae <Context::intersectClipRect(CRect*)+0x2e>
100019e7:	85 c0                	test   eax,eax
100019e9:	74 43                	je     10001a2e <Context::intersectClipRect(CRect*)+0xae>
100019eb:	85 c9                	test   ecx,ecx
100019ed:	74 f8                	je     100019e7 <Context::intersectClipRect(CRect*)+0x67>
100019ef:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100019f2:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
100019f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100019f9:	51                   	push   ecx
100019fa:	51                   	push   ecx
100019fb:	6a 0c                	push   0xc
100019fd:	52                   	push   edx
100019fe:	e8 fc ff ff ff       	call   100019ff <Context::intersectClipRect(CRect*)+0x7f>	100019ff: R_386_PC32	operator delete(void*, unsigned long)
10001a03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001a07:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10001a0a:	83 c4 10             	add    esp,0x10
10001a0d:	85 c0                	test   eax,eax
10001a0f:	75 14                	jne    10001a25 <Context::intersectClipRect(CRect*)+0xa5>
10001a11:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
10001a17:	8b 5e 18             	mov    ebx,DWORD PTR [esi+0x18]
10001a1a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
10001a1c:	89 c8                	mov    eax,ecx
10001a1e:	e8 59 ee ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10001a23:	eb c2                	jmp    100019e7 <Context::intersectClipRect(CRect*)+0x67>
10001a25:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001a2c:	eb e9                	jmp    10001a17 <Context::intersectClipRect(CRect*)+0x97>
10001a2e:	83 ec 0c             	sub    esp,0xc
10001a31:	53                   	push   ebx
10001a32:	e8 fc ff ff ff       	call   10001a33 <Context::intersectClipRect(CRect*)+0xb3>	10001a33: R_386_PC32	List<CRect*>::~List()
10001a37:	58                   	pop    eax
10001a38:	5a                   	pop    edx
10001a39:	6a 08                	push   0x8
10001a3b:	53                   	push   ebx
10001a3c:	e8 fc ff ff ff       	call   10001a3d <Context::intersectClipRect(CRect*)+0xbd>	10001a3d: R_386_PC32	operator delete(void*, unsigned long)
10001a41:	89 7e 18             	mov    DWORD PTR [esi+0x18],edi
10001a44:	c7 44 24 44 10 00 00 00 	mov    DWORD PTR [esp+0x44],0x10
10001a4c:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
10001a50:	83 c4 2c             	add    esp,0x2c
10001a53:	5b                   	pop    ebx
10001a54:	5e                   	pop    esi
10001a55:	5f                   	pop    edi
10001a56:	5d                   	pop    ebp
10001a57:	e9 fc ff ff ff       	jmp    10001a58 <Context::intersectClipRect(CRect*)+0xd8>	10001a58: R_386_PC32	operator delete(void*, unsigned long)

10001a5c <startMouse()>:
10001a5c:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10001a5e: R_386_32	guiMouseHandler
	10001a62: R_386_32	handleMouse
10001a66:	c3                   	ret    

10001a67 <setupCursor()>:
10001a67:	55                   	push   ebp
10001a68:	57                   	push   edi
10001a69:	56                   	push   esi
10001a6a:	53                   	push   ebx
10001a6b:	83 ec 38             	sub    esp,0x38
10001a6e:	c7 05 00 00 00 00 2c 01 00 00 	mov    DWORD PTR ds:0x0,0x12c	10001a70: R_386_32	krnlMouseX
10001a78:	c7 05 00 00 00 00 c8 00 00 00 	mov    DWORD PTR ds:0x0,0xc8	10001a7a: R_386_32	krnlMouseY
10001a82:	c7 05 04 00 00 00 2c 01 00 00 	mov    DWORD PTR ds:0x4,0x12c	10001a84: R_386_32	rootRgn
10001a8c:	c7 05 08 00 00 00 c8 00 00 00 	mov    DWORD PTR ds:0x8,0xc8	10001a8e: R_386_32	rootRgn
10001a96:	c7 05 0c 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xc,0x0	10001a98: R_386_32	rootRgn
10001aa0:	68 14 01 00 00       	push   0x114
10001aa5:	e8 fc ff ff ff       	call   10001aa6 <setupCursor()+0x3f>	10001aa6: R_386_PC32	malloc
10001aaa:	89 c5                	mov    ebp,eax
10001aac:	83 c4 0c             	add    esp,0xc
10001aaf:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001ab1: R_386_32	kernelProcess
10001ab5:	68 88 2f 00 10       	push   0x10002f88	10001ab6: R_386_32	.text
10001aba:	50                   	push   eax
10001abb:	e8 fc ff ff ff       	call   10001abc <setupCursor()+0x55>	10001abc: R_386_PC32	File::File(char const*, Process*)
10001ac0:	58                   	pop    eax
10001ac1:	5a                   	pop    edx
10001ac2:	6a 01                	push   0x1
10001ac4:	55                   	push   ebp
10001ac5:	e8 fc ff ff ff       	call   10001ac6 <setupCursor()+0x5f>	10001ac6: R_386_PC32	File::open(FileOpenMode)
10001aca:	83 c4 10             	add    esp,0x10
10001acd:	85 c0                	test   eax,eax
10001acf:	74 0a                	je     10001adb <setupCursor()+0x74>
10001ad1:	83 ec 0c             	sub    esp,0xc
10001ad4:	68 a7 2f 00 10       	push   0x10002fa7	10001ad5: R_386_32	.text
10001ad9:	eb 4c                	jmp    10001b27 <setupCursor()+0xc0>
10001adb:	53                   	push   ebx
10001adc:	8d 44 24 17          	lea    eax,[esp+0x17]
10001ae0:	50                   	push   eax
10001ae1:	8d 44 24 20          	lea    eax,[esp+0x20]
10001ae5:	50                   	push   eax
10001ae6:	55                   	push   ebp
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <setupCursor()+0x81>	10001ae8: R_386_PC32	File::stat(unsigned long long*, bool*)
10001aec:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10001af0:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10001af4:	89 34 24             	mov    DWORD PTR [esp],esi
10001af7:	e8 fc ff ff ff       	call   10001af8 <setupCursor()+0x91>	10001af8: R_386_PC32	malloc
10001afc:	89 c3                	mov    ebx,eax
10001afe:	58                   	pop    eax
10001aff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10001b02:	8d 54 24 20          	lea    edx,[esp+0x20]
10001b06:	52                   	push   edx
10001b07:	53                   	push   ebx
10001b08:	57                   	push   edi
10001b09:	56                   	push   esi
10001b0a:	55                   	push   ebp
10001b0b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10001b0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001b12:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10001b16:	83 c4 20             	add    esp,0x20
10001b19:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10001b1d:	74 12                	je     10001b31 <setupCursor()+0xca>
10001b1f:	83 ec 0c             	sub    esp,0xc
10001b22:	68 bb 2f 00 10       	push   0x10002fbb	10001b23: R_386_32	.text
10001b27:	e8 fc ff ff ff       	call   10001b28 <setupCursor()+0xc1>	10001b28: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b2c:	e9 3d 01 00 00       	jmp    10001c6e <setupCursor()+0x207>
10001b31:	6a 00                	push   0x0
10001b33:	68 04 01 00 00       	push   0x104
10001b38:	52                   	push   edx
10001b39:	50                   	push   eax
10001b3a:	e8 fc ff ff ff       	call   10001b3b <setupCursor()+0xd4>	10001b3b: R_386_PC32	__udivdi3
10001b3f:	5a                   	pop    edx
10001b40:	59                   	pop    ecx
10001b41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001b45:	50                   	push   eax
10001b46:	68 cf 2f 00 10       	push   0x10002fcf	10001b47: R_386_32	.text
10001b4b:	e8 fc ff ff ff       	call   10001b4c <setupCursor()+0xe5>	10001b4c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b50:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001b53:	e8 fc ff ff ff       	call   10001b54 <setupCursor()+0xed>	10001b54: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001b5c:	8d 04 83             	lea    eax,[ebx+eax*4]
10001b5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001b63:	83 c4 10             	add    esp,0x10
10001b66:	31 ed                	xor    ebp,ebp
10001b68:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
10001b6c:	0f 8d f3 00 00 00    	jge    10001c65 <setupCursor()+0x1fe>
10001b72:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10001b75:	50                   	push   eax
10001b76:	6a 04                	push   0x4
10001b78:	68 dc 2f 00 10       	push   0x10002fdc	10001b79: R_386_32	.text
10001b7d:	56                   	push   esi
10001b7e:	e8 fc ff ff ff       	call   10001b7f <setupCursor()+0x118>	10001b7f: R_386_PC32	memcmp
10001b83:	83 c4 10             	add    esp,0x10
10001b86:	85 c0                	test   eax,eax
10001b88:	0f 84 b8 00 00 00    	je     10001c46 <setupCursor()+0x1df>
10001b8e:	50                   	push   eax
10001b8f:	6a 04                	push   0x4
10001b91:	68 e1 2f 00 10       	push   0x10002fe1	10001b92: R_386_32	.text
10001b96:	56                   	push   esi
10001b97:	e8 fc ff ff ff       	call   10001b98 <setupCursor()+0x131>	10001b98: R_386_PC32	memcmp
10001b9c:	83 c4 10             	add    esp,0x10
10001b9f:	85 c0                	test   eax,eax
10001ba1:	74 7b                	je     10001c1e <setupCursor()+0x1b7>
10001ba3:	50                   	push   eax
10001ba4:	6a 04                	push   0x4
10001ba6:	68 e6 2f 00 10       	push   0x10002fe6	10001ba7: R_386_32	.text
10001bab:	56                   	push   esi
10001bac:	e8 fc ff ff ff       	call   10001bad <setupCursor()+0x146>	10001bad: R_386_PC32	memcmp
10001bb1:	83 c4 10             	add    esp,0x10
10001bb4:	85 c0                	test   eax,eax
10001bb6:	74 6d                	je     10001c25 <setupCursor()+0x1be>
10001bb8:	57                   	push   edi
10001bb9:	6a 04                	push   0x4
10001bbb:	68 eb 2f 00 10       	push   0x10002feb	10001bbc: R_386_32	.text
10001bc0:	56                   	push   esi
10001bc1:	e8 fc ff ff ff       	call   10001bc2 <setupCursor()+0x15b>	10001bc2: R_386_PC32	memcmp
10001bc6:	83 c4 10             	add    esp,0x10
10001bc9:	85 c0                	test   eax,eax
10001bcb:	74 5f                	je     10001c2c <setupCursor()+0x1c5>
10001bcd:	51                   	push   ecx
10001bce:	6a 04                	push   0x4
10001bd0:	68 f0 2f 00 10       	push   0x10002ff0	10001bd1: R_386_32	.text
10001bd5:	56                   	push   esi
10001bd6:	e8 fc ff ff ff       	call   10001bd7 <setupCursor()+0x170>	10001bd7: R_386_PC32	memcmp
10001bdb:	83 c4 10             	add    esp,0x10
10001bde:	85 c0                	test   eax,eax
10001be0:	74 51                	je     10001c33 <setupCursor()+0x1cc>
10001be2:	52                   	push   edx
10001be3:	6a 04                	push   0x4
10001be5:	68 f5 2f 00 10       	push   0x10002ff5	10001be6: R_386_32	.text
10001bea:	56                   	push   esi
10001beb:	e8 fc ff ff ff       	call   10001bec <setupCursor()+0x185>	10001bec: R_386_PC32	memcmp
10001bf0:	83 c4 10             	add    esp,0x10
10001bf3:	85 c0                	test   eax,eax
10001bf5:	74 43                	je     10001c3a <setupCursor()+0x1d3>
10001bf7:	50                   	push   eax
10001bf8:	6a 04                	push   0x4
10001bfa:	68 fa 2f 00 10       	push   0x10002ffa	10001bfb: R_386_32	.text
10001bff:	56                   	push   esi
10001c00:	e8 fc ff ff ff       	call   10001c01 <setupCursor()+0x19a>	10001c01: R_386_PC32	memcmp
10001c05:	83 c4 10             	add    esp,0x10
10001c08:	85 c0                	test   eax,eax
10001c0a:	74 35                	je     10001c41 <setupCursor()+0x1da>
10001c0c:	83 ec 0c             	sub    esp,0xc
10001c0f:	68 ff 2f 00 10       	push   0x10002fff	10001c10: R_386_32	.text
10001c14:	e8 fc ff ff ff       	call   10001c15 <setupCursor()+0x1ae>	10001c15: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c19:	83 c4 10             	add    esp,0x10
10001c1c:	eb 47                	jmp    10001c65 <setupCursor()+0x1fe>
10001c1e:	b8 00 02 00 00       	mov    eax,0x200
10001c23:	eb 21                	jmp    10001c46 <setupCursor()+0x1df>
10001c25:	b8 00 03 00 00       	mov    eax,0x300
10001c2a:	eb 1a                	jmp    10001c46 <setupCursor()+0x1df>
10001c2c:	b8 00 01 00 00       	mov    eax,0x100
10001c31:	eb 13                	jmp    10001c46 <setupCursor()+0x1df>
10001c33:	b8 00 04 00 00       	mov    eax,0x400
10001c38:	eb 0c                	jmp    10001c46 <setupCursor()+0x1df>
10001c3a:	b8 00 05 00 00       	mov    eax,0x500
10001c3f:	eb 05                	jmp    10001c46 <setupCursor()+0x1df>
10001c41:	b8 00 06 00 00       	mov    eax,0x600
10001c46:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10001c48: R_386_32	mouse_data
10001c4c:	b9 00 01 00 00       	mov    ecx,0x100
10001c51:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10001c55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001c57:	45                   	inc    ebp
10001c58:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10001c60:	e9 03 ff ff ff       	jmp    10001b68 <setupCursor()+0x101>
10001c65:	83 ec 0c             	sub    esp,0xc
10001c68:	53                   	push   ebx
10001c69:	e8 fc ff ff ff       	call   10001c6a <setupCursor()+0x203>	10001c6a: R_386_PC32	free
10001c6e:	83 c4 10             	add    esp,0x10
10001c71:	83 c4 2c             	add    esp,0x2c
10001c74:	5b                   	pop    ebx
10001c75:	5e                   	pop    esi
10001c76:	5f                   	pop    edi
10001c77:	5d                   	pop    ebp
10001c78:	c3                   	ret    

10001c79 <processMouse(int, int, int)>:
10001c79:	55                   	push   ebp
10001c7a:	57                   	push   edi
10001c7b:	56                   	push   esi
10001c7c:	53                   	push   ebx
10001c7d:	83 ec 0c             	sub    esp,0xc
10001c80:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10001c84:	e8 fc ff ff ff       	call   10001c85 <processMouse(int, int, int)+0xc>	10001c85: R_386_PC32	Krnl::userIOReceived()
10001c89:	83 ec 0c             	sub    esp,0xc
10001c8c:	6a 08                	push   0x8
10001c8e:	e8 fc ff ff ff       	call   10001c8f <processMouse(int, int, int)+0x16>	10001c8f: R_386_PC32	malloc
10001c93:	89 c6                	mov    esi,eax
10001c95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001c9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10001ca2:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10001ca9:	e8 fc ff ff ff       	call   10001caa <processMouse(int, int, int)+0x31>	10001caa: R_386_PC32	malloc
10001cae:	89 c3                	mov    ebx,eax
10001cb0:	8b 0d 04 00 00 00    	mov    ecx,DWORD PTR ds:0x4	10001cb2: R_386_32	rootRgn
10001cb6:	a1 08 00 00 00       	mov    eax,ds:0x8	10001cb7: R_386_32	rootRgn
10001cbb:	8d 69 1f             	lea    ebp,[ecx+0x1f]
10001cbe:	89 2c 24             	mov    DWORD PTR [esp],ebp
10001cc1:	8d 68 1f             	lea    ebp,[eax+0x1f]
10001cc4:	55                   	push   ebp
10001cc5:	51                   	push   ecx
10001cc6:	50                   	push   eax
10001cc7:	53                   	push   ebx
10001cc8:	e8 fc ff ff ff       	call   10001cc9 <processMouse(int, int, int)+0x50>	10001cc9: R_386_PC32	CRect::CRect(int, int, int, int)
10001ccd:	83 c4 14             	add    esp,0x14
10001cd0:	6a 0c                	push   0xc
10001cd2:	e8 fc ff ff ff       	call   10001cd3 <processMouse(int, int, int)+0x5a>	10001cd3: R_386_PC32	malloc
10001cd7:	89 18                	mov    DWORD PTR [eax],ebx
10001cd9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
10001cdc:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
10001cdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001ce6:	83 c4 10             	add    esp,0x10
10001ce9:	85 c9                	test   ecx,ecx
10001ceb:	74 05                	je     10001cf2 <processMouse(int, int, int)+0x79>
10001ced:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
10001cf0:	eb 02                	jmp    10001cf4 <processMouse(int, int, int)+0x7b>
10001cf2:	89 06                	mov    DWORD PTR [esi],eax
10001cf4:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
10001cf7:	55                   	push   ebp
10001cf8:	6a 01                	push   0x1
10001cfa:	56                   	push   esi
10001cfb:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001cfd: R_386_32	rootRgn
10001d01:	e8 fc ff ff ff       	call   10001d02 <processMouse(int, int, int)+0x89>	10001d02: R_386_PC32	GDO::update(List<CRect*>*, bool)
10001d06:	8b 06                	mov    eax,DWORD PTR [esi]
10001d08:	83 c4 10             	add    esp,0x10
10001d0b:	85 c0                	test   eax,eax
10001d0d:	74 26                	je     10001d35 <processMouse(int, int, int)+0xbc>
10001d0f:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10001d12:	51                   	push   ecx
10001d13:	51                   	push   ecx
10001d14:	6a 0c                	push   0xc
10001d16:	50                   	push   eax
10001d17:	e8 fc ff ff ff       	call   10001d18 <processMouse(int, int, int)+0x9f>	10001d18: R_386_PC32	operator delete(void*, unsigned long)
10001d1c:	89 2e                	mov    DWORD PTR [esi],ebp
10001d1e:	83 c4 10             	add    esp,0x10
10001d21:	85 ed                	test   ebp,ebp
10001d23:	75 09                	jne    10001d2e <processMouse(int, int, int)+0xb5>
10001d25:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10001d2c:	eb 07                	jmp    10001d35 <processMouse(int, int, int)+0xbc>
10001d2e:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
10001d35:	8b 06                	mov    eax,DWORD PTR [esi]
10001d37:	85 c0                	test   eax,eax
10001d39:	74 14                	je     10001d4f <processMouse(int, int, int)+0xd6>
10001d3b:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10001d3e:	52                   	push   edx
10001d3f:	52                   	push   edx
10001d40:	6a 0c                	push   0xc
10001d42:	50                   	push   eax
10001d43:	e8 fc ff ff ff       	call   10001d44 <processMouse(int, int, int)+0xcb>	10001d44: R_386_PC32	operator delete(void*, unsigned long)
10001d48:	89 e8                	mov    eax,ebp
10001d4a:	83 c4 10             	add    esp,0x10
10001d4d:	eb e8                	jmp    10001d37 <processMouse(int, int, int)+0xbe>
10001d4f:	50                   	push   eax
10001d50:	50                   	push   eax
10001d51:	6a 08                	push   0x8
10001d53:	56                   	push   esi
10001d54:	e8 fc ff ff ff       	call   10001d55 <processMouse(int, int, int)+0xdc>	10001d55: R_386_PC32	operator delete(void*, unsigned long)
10001d59:	5a                   	pop    edx
10001d5a:	59                   	pop    ecx
10001d5b:	6a 10                	push   0x10
10001d5d:	53                   	push   ebx
10001d5e:	e8 fc ff ff ff       	call   10001d5f <processMouse(int, int, int)+0xe6>	10001d5f: R_386_PC32	operator delete(void*, unsigned long)
10001d63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001d67:	a3 04 00 00 00       	mov    ds:0x4,eax	10001d68: R_386_32	rootRgn
10001d6c:	89 3d 08 00 00 00    	mov    DWORD PTR ds:0x8,edi	10001d6e: R_386_32	rootRgn
10001d72:	a1 00 00 00 00       	mov    eax,ds:0x0	10001d73: R_386_32	rootRgn
10001d77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10001d7a:	8b 10                	mov    edx,DWORD PTR [eax]
10001d7c:	8b 0a                	mov    ecx,DWORD PTR [edx]
10001d7e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10001d85:	a1 0c 00 00 00       	mov    eax,ds:0xc	10001d86: R_386_32	rootRgn
10001d8a:	05 00 00 00 00       	add    eax,0x0	10001d8b: R_386_32	mouse_data
10001d8f:	50                   	push   eax
10001d90:	57                   	push   edi
10001d91:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
10001d95:	52                   	push   edx
10001d96:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10001d99:	83 c4 2c             	add    esp,0x2c
10001d9c:	5b                   	pop    ebx
10001d9d:	5e                   	pop    esi
10001d9e:	5f                   	pop    edi
10001d9f:	5d                   	pop    ebp
10001da0:	c3                   	ret    

10001da1 <handleMouse>:
10001da1:	53                   	push   ebx
10001da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001da6:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10001da8: R_386_32	krnlMouseX
10001dac:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
10001db0:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	10001db2: R_386_32	krnlMouseX
10001db6:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10001db8: R_386_32	krnlMouseY
10001dbc:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
10001dc0:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001dc2: R_386_32	krnlMouseY
10001dc6:	85 c9                	test   ecx,ecx
10001dc8:	7f 0a                	jg     10001dd4 <handleMouse+0x33>
10001dca:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10001dcc: R_386_32	krnlMouseX
10001dd4:	85 d2                	test   edx,edx
10001dd6:	7f 0a                	jg     10001de2 <handleMouse+0x41>
10001dd8:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10001dda: R_386_32	krnlMouseY
10001de2:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10001de4: R_386_32	rootRgn
10001de8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
10001deb:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10001dee:	8d 5a ff             	lea    ebx,[edx-0x1]
10001df1:	3b 1d 00 00 00 00    	cmp    ebx,DWORD PTR ds:0x0	10001df3: R_386_32	krnlMouseX
10001df7:	7f 09                	jg     10001e02 <handleMouse+0x61>
10001df9:	83 ea 02             	sub    edx,0x2
10001dfc:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001dfe: R_386_32	krnlMouseX
10001e02:	8b 51 08             	mov    edx,DWORD PTR [ecx+0x8]
10001e05:	8d 4a ff             	lea    ecx,[edx-0x1]
10001e08:	3b 0d 00 00 00 00    	cmp    ecx,DWORD PTR ds:0x0	10001e0a: R_386_32	krnlMouseY
10001e0e:	7f 09                	jg     10001e19 <handleMouse+0x78>
10001e10:	83 ea 02             	sub    edx,0x2
10001e13:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001e15: R_386_32	krnlMouseY
10001e19:	83 e0 01             	and    eax,0x1
10001e1c:	a3 00 00 00 00       	mov    ds:0x0,eax	10001e1d: R_386_32	krnlButtons
10001e21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001e25:	a1 00 00 00 00       	mov    eax,ds:0x0	10001e26: R_386_32	krnlMouseY
10001e2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001e2e:	a1 00 00 00 00       	mov    eax,ds:0x0	10001e2f: R_386_32	krnlMouseX
10001e33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001e37:	5b                   	pop    ebx
10001e38:	e9 3c fe ff ff       	jmp    10001c79 <processMouse(int, int, int)>
10001e3d:	90                   	nop

10001e3e <elpsDrawFunc(GDO*)>:
10001e3e:	83 ec 10             	sub    esp,0x10
10001e41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001e45:	ff 70 50             	push   DWORD PTR [eax+0x50]
10001e48:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10001e4b:	ff 70 48             	push   DWORD PTR [eax+0x48]
10001e4e:	ff 70 44             	push   DWORD PTR [eax+0x44]
10001e51:	ff 70 40             	push   DWORD PTR [eax+0x40]
10001e54:	6a 01                	push   0x1
10001e56:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001e59:	e8 fc ff ff ff       	call   10001e5a <elpsDrawFunc(GDO*)+0x1c>	10001e5a: R_386_PC32	Context::ellipse(bool, int, int, int, int, unsigned int)
10001e5e:	83 c4 2c             	add    esp,0x2c
10001e61:	c3                   	ret    

10001e62 <elpsPtnDrawFunc(GDO*)>:
10001e62:	83 ec 10             	sub    esp,0x10
10001e65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001e69:	ff 70 50             	push   DWORD PTR [eax+0x50]
10001e6c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10001e6f:	ff 70 48             	push   DWORD PTR [eax+0x48]
10001e72:	ff 70 44             	push   DWORD PTR [eax+0x44]
10001e75:	ff 70 40             	push   DWORD PTR [eax+0x40]
10001e78:	6a 01                	push   0x1
10001e7a:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001e7d:	e8 fc ff ff ff       	call   10001e7e <elpsPtnDrawFunc(GDO*)+0x1c>	10001e7e: R_386_PC32	Context::ellipse(bool, int, int, int, int, Brush*)
10001e82:	83 c4 2c             	add    esp,0x2c
10001e85:	c3                   	ret    

10001e86 <Ellipse::Ellipse(int, int, int, int, Brush*, Context*)>:
10001e86:	53                   	push   ebx
10001e87:	83 ec 0c             	sub    esp,0xc
10001e8a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001e8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001e92:	6a 03                	push   0x3
10001e94:	53                   	push   ebx
10001e95:	e8 fc ff ff ff       	call   10001e96 <Ellipse::Ellipse(int, int, int, int, Brush*, Context*)+0x10>	10001e96: R_386_PC32	GDO::GDO(GDOType, Context*)
10001e9a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001e9e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10001ea1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001ea5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10001ea8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001eac:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10001eaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001eb3:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10001eb6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001eba:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10001ebd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10001ec0: R_386_32	elpsPtnDrawFunc(GDO*)
10001ec4:	83 c4 18             	add    esp,0x18
10001ec7:	5b                   	pop    ebx
10001ec8:	c3                   	ret    
10001ec9:	90                   	nop

10001eca <Ellipse::Ellipse(int, int, int, int, unsigned int, Context*)>:
10001eca:	53                   	push   ebx
10001ecb:	83 ec 0c             	sub    esp,0xc
10001ece:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001ed2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001ed6:	6a 01                	push   0x1
10001ed8:	53                   	push   ebx
10001ed9:	e8 fc ff ff ff       	call   10001eda <Ellipse::Ellipse(int, int, int, int, unsigned int, Context*)+0x10>	10001eda: R_386_PC32	GDO::GDO(GDOType, Context*)
10001ede:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001ee2:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10001ee5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001ee9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10001eec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001ef0:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10001ef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001ef7:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10001efa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001efe:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10001f01:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10001f04: R_386_32	elpsDrawFunc(GDO*)
10001f08:	83 c4 18             	add    esp,0x18
10001f0b:	5b                   	pop    ebx
10001f0c:	c3                   	ret    
10001f0d:	90                   	nop

10001f0e <GDO::resetNext()>:
10001f0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001f12:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
10001f19:	c3                   	ret    

10001f1a <GDO::GDO(GDOType, Context*)>:
10001f1a:	53                   	push   ebx
10001f1b:	83 ec 08             	sub    esp,0x8
10001f1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001f22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001f26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001f2a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
10001f2d:	88 03                	mov    BYTE PTR [ebx],al
10001f2f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
10001f36:	84 c0                	test   al,al
10001f38:	75 45                	jne    10001f7f <GDO::GDO(GDOType, Context*)+0x65>
10001f3a:	83 ec 0c             	sub    esp,0xc
10001f3d:	68 13 30 00 10       	push   0x10003013	10001f3e: R_386_32	.text
10001f42:	e8 fc ff ff ff       	call   10001f43 <GDO::GDO(GDOType, Context*)+0x29>	10001f43: R_386_PC32	Dbg::kprintf(char const*, ...)
10001f47:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001f4e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10001f55:	e8 fc ff ff ff       	call   10001f56 <GDO::GDO(GDOType, Context*)+0x3c>	10001f56: R_386_PC32	malloc
10001f5a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10001f5d:	59                   	pop    ecx
10001f5e:	5a                   	pop    edx
10001f5f:	50                   	push   eax
10001f60:	68 2e 30 00 10       	push   0x1000302e	10001f61: R_386_32	.text
10001f65:	e8 fc ff ff ff       	call   10001f66 <GDO::GDO(GDOType, Context*)+0x4c>	10001f66: R_386_PC32	Dbg::kprintf(char const*, ...)
10001f6a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10001f6d:	83 c4 10             	add    esp,0x10
10001f70:	31 c0                	xor    eax,eax
10001f72:	c7 04 82 00 00 00 00 	mov    DWORD PTR [edx+eax*4],0x0
10001f79:	40                   	inc    eax
10001f7a:	83 f8 10             	cmp    eax,0x10
10001f7d:	75 f3                	jne    10001f72 <GDO::GDO(GDOType, Context*)+0x58>
10001f7f:	83 c4 08             	add    esp,0x8
10001f82:	5b                   	pop    ebx
10001f83:	c3                   	ret    

10001f84 <GDO::~GDO()>:
10001f84:	c3                   	ret    
10001f85:	90                   	nop

10001f86 <GDO::getChild(int)>:
10001f86:	56                   	push   esi
10001f87:	53                   	push   ebx
10001f88:	51                   	push   ecx
10001f89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001f8d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001f91:	81 fb ff 00 00 00    	cmp    ebx,0xff
10001f97:	7e 04                	jle    10001f9d <GDO::getChild(int)+0x17>
10001f99:	31 c0                	xor    eax,eax
10001f9b:	eb 2b                	jmp    10001fc8 <GDO::getChild(int)+0x42>
10001f9d:	83 7e 0c 00          	cmp    DWORD PTR [esi+0xc],0x0
10001fa1:	75 10                	jne    10001fb3 <GDO::getChild(int)+0x2d>
10001fa3:	83 ec 0c             	sub    esp,0xc
10001fa6:	68 3f 30 00 10       	push   0x1000303f	10001fa7: R_386_32	.text
10001fab:	e8 fc ff ff ff       	call   10001fac <GDO::getChild(int)+0x26>	10001fac: R_386_PC32	Krnl::panic(char const*)
10001fb0:	83 c4 10             	add    esp,0x10
10001fb3:	89 da                	mov    edx,ebx
10001fb5:	c1 ea 04             	shr    edx,0x4
10001fb8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
10001fbb:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10001fbe:	85 c0                	test   eax,eax
10001fc0:	74 d7                	je     10001f99 <GDO::getChild(int)+0x13>
10001fc2:	83 e3 0f             	and    ebx,0xf
10001fc5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10001fc8:	5a                   	pop    edx
10001fc9:	5b                   	pop    ebx
10001fca:	5e                   	pop    esi
10001fcb:	c3                   	ret    

10001fcc <GDO::hasNext()>:
10001fcc:	56                   	push   esi
10001fcd:	53                   	push   ebx
10001fce:	53                   	push   ebx
10001fcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001fd3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
10001fd6:	3d ff 00 00 00       	cmp    eax,0xff
10001fdb:	7f 1b                	jg     10001ff8 <GDO::hasNext()+0x2c>
10001fdd:	8d 70 01             	lea    esi,[eax+0x1]
10001fe0:	51                   	push   ecx
10001fe1:	51                   	push   ecx
10001fe2:	50                   	push   eax
10001fe3:	53                   	push   ebx
10001fe4:	e8 fc ff ff ff       	call   10001fe5 <GDO::hasNext()+0x19>	10001fe5: R_386_PC32	GDO::getChild(int)
10001fe9:	83 c4 10             	add    esp,0x10
10001fec:	85 c0                	test   eax,eax
10001fee:	75 04                	jne    10001ff4 <GDO::hasNext()+0x28>
10001ff0:	89 f0                	mov    eax,esi
10001ff2:	eb e2                	jmp    10001fd6 <GDO::hasNext()+0xa>
10001ff4:	b0 01                	mov    al,0x1
10001ff6:	eb 02                	jmp    10001ffa <GDO::hasNext()+0x2e>
10001ff8:	31 c0                	xor    eax,eax
10001ffa:	5a                   	pop    edx
10001ffb:	5b                   	pop    ebx
10001ffc:	5e                   	pop    esi
10001ffd:	c3                   	ret    

10001ffe <GDO::getNext()>:
10001ffe:	53                   	push   ebx
10001fff:	83 ec 08             	sub    esp,0x8
10002002:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002006:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
10002009:	3d ff 00 00 00       	cmp    eax,0xff
1000200e:	7f 18                	jg     10002028 <GDO::getNext()+0x2a>
10002010:	8d 50 01             	lea    edx,[eax+0x1]
10002013:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
10002016:	52                   	push   edx
10002017:	52                   	push   edx
10002018:	50                   	push   eax
10002019:	53                   	push   ebx
1000201a:	e8 fc ff ff ff       	call   1000201b <GDO::getNext()+0x1d>	1000201b: R_386_PC32	GDO::getChild(int)
1000201f:	83 c4 10             	add    esp,0x10
10002022:	85 c0                	test   eax,eax
10002024:	74 e0                	je     10002006 <GDO::getNext()+0x8>
10002026:	eb 02                	jmp    1000202a <GDO::getNext()+0x2c>
10002028:	31 c0                	xor    eax,eax
1000202a:	83 c4 08             	add    esp,0x8
1000202d:	5b                   	pop    ebx
1000202e:	c3                   	ret    
1000202f:	90                   	nop

10002030 <GDO::indexOf(GDO*)>:
10002030:	56                   	push   esi
10002031:	53                   	push   ebx
10002032:	53                   	push   ebx
10002033:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002037:	31 db                	xor    ebx,ebx
10002039:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
1000203c:	8d 50 01             	lea    edx,[eax+0x1]
1000203f:	89 56 3c             	mov    DWORD PTR [esi+0x3c],edx
10002042:	51                   	push   ecx
10002043:	51                   	push   ecx
10002044:	50                   	push   eax
10002045:	56                   	push   esi
10002046:	e8 fc ff ff ff       	call   10002047 <GDO::indexOf(GDO*)+0x17>	10002047: R_386_PC32	GDO::getChild(int)
1000204b:	83 c4 10             	add    esp,0x10
1000204e:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10002052:	74 0c                	je     10002060 <GDO::indexOf(GDO*)+0x30>
10002054:	43                   	inc    ebx
10002055:	81 fb 00 01 00 00    	cmp    ebx,0x100
1000205b:	75 dc                	jne    10002039 <GDO::indexOf(GDO*)+0x9>
1000205d:	83 cb ff             	or     ebx,0xffffffff
10002060:	89 d8                	mov    eax,ebx
10002062:	5a                   	pop    edx
10002063:	5b                   	pop    ebx
10002064:	5e                   	pop    esi
10002065:	c3                   	ret    

10002066 <GDO::screenX()>:
10002066:	56                   	push   esi
10002067:	53                   	push   ebx
10002068:	51                   	push   ecx
10002069:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000206d:	31 f6                	xor    esi,esi
1000206f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10002072:	74 10                	je     10002084 <GDO::screenX()+0x1e>
10002074:	83 ec 0c             	sub    esp,0xc
10002077:	68 58 30 00 10       	push   0x10003058	10002078: R_386_32	.text
1000207c:	e8 fc ff ff ff       	call   1000207d <GDO::screenX()+0x17>	1000207d: R_386_PC32	Dbg::kprintf(char const*, ...)
10002081:	83 c4 10             	add    esp,0x10
10002084:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10002087:	85 c0                	test   eax,eax
10002089:	74 1f                	je     100020aa <GDO::screenX()+0x44>
1000208b:	80 38 00             	cmp    BYTE PTR [eax],0x0
1000208e:	74 10                	je     100020a0 <GDO::screenX()+0x3a>
10002090:	83 ec 0c             	sub    esp,0xc
10002093:	68 4c 30 00 10       	push   0x1000304c	10002094: R_386_32	.text
10002098:	e8 fc ff ff ff       	call   10002099 <GDO::screenX()+0x33>	10002099: R_386_PC32	Krnl::panic(char const*)
1000209d:	83 c4 10             	add    esp,0x10
100020a0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
100020a3:	8b 5b 08             	mov    ebx,DWORD PTR [ebx+0x8]
100020a6:	01 c6                	add    esi,eax
100020a8:	eb c5                	jmp    1000206f <GDO::screenX()+0x9>
100020aa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
100020ad:	01 f0                	add    eax,esi
100020af:	5a                   	pop    edx
100020b0:	5b                   	pop    ebx
100020b1:	5e                   	pop    esi
100020b2:	c3                   	ret    
100020b3:	90                   	nop

100020b4 <GDO::screenY()>:
100020b4:	56                   	push   esi
100020b5:	53                   	push   ebx
100020b6:	51                   	push   ecx
100020b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100020bb:	31 f6                	xor    esi,esi
100020bd:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
100020c0:	74 10                	je     100020d2 <GDO::screenY()+0x1e>
100020c2:	83 ec 0c             	sub    esp,0xc
100020c5:	68 7f 30 00 10       	push   0x1000307f	100020c6: R_386_32	.text
100020ca:	e8 fc ff ff ff       	call   100020cb <GDO::screenY()+0x17>	100020cb: R_386_PC32	Dbg::kprintf(char const*, ...)
100020cf:	83 c4 10             	add    esp,0x10
100020d2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
100020d5:	85 c0                	test   eax,eax
100020d7:	74 1f                	je     100020f8 <GDO::screenY()+0x44>
100020d9:	80 38 00             	cmp    BYTE PTR [eax],0x0
100020dc:	74 10                	je     100020ee <GDO::screenY()+0x3a>
100020de:	83 ec 0c             	sub    esp,0xc
100020e1:	68 73 30 00 10       	push   0x10003073	100020e2: R_386_32	.text
100020e6:	e8 fc ff ff ff       	call   100020e7 <GDO::screenY()+0x33>	100020e7: R_386_PC32	Krnl::panic(char const*)
100020eb:	83 c4 10             	add    esp,0x10
100020ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
100020f1:	8b 5b 08             	mov    ebx,DWORD PTR [ebx+0x8]
100020f4:	01 c6                	add    esi,eax
100020f6:	eb c5                	jmp    100020bd <GDO::screenY()+0x9>
100020f8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
100020fb:	01 f0                	add    eax,esi
100020fd:	5a                   	pop    edx
100020fe:	5b                   	pop    ebx
100020ff:	5e                   	pop    esi
10002100:	c3                   	ret    
10002101:	90                   	nop

10002102 <GDO::update(List<CRect*>*, bool)>:
10002102:	55                   	push   ebp
10002103:	57                   	push   edi
10002104:	56                   	push   esi
10002105:	53                   	push   ebx
10002106:	83 ec 2c             	sub    esp,0x2c
10002109:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
1000210d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002111:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002115:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10002119:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000211d:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10002120:	74 14                	je     10002136 <GDO::update(List<CRect*>*, bool)+0x34>
10002122:	c7 44 24 40 9a 30 00 10 	mov    DWORD PTR [esp+0x40],0x1000309a	10002126: R_386_32	.text
1000212a:	83 c4 2c             	add    esp,0x2c
1000212d:	5b                   	pop    ebx
1000212e:	5e                   	pop    esi
1000212f:	5f                   	pop    edi
10002130:	5d                   	pop    ebp
10002131:	e9 fc ff ff ff       	jmp    10002132 <GDO::update(List<CRect*>*, bool)+0x30>	10002132: R_386_PC32	Krnl::panic(char const*)
10002136:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
1000213a:	0f 84 02 02 00 00    	je     10002342 <GDO::update(List<CRect*>*, bool)+0x240>
10002140:	56                   	push   esi
10002141:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10002145:	6a 00                	push   0x0
10002147:	53                   	push   ebx
10002148:	e8 fc ff ff ff       	call   10002149 <GDO::update(List<CRect*>*, bool)+0x47>	10002149: R_386_PC32	Region::applyBoundClipping(int, List<CRect*>*)
1000214d:	89 1c 24             	mov    DWORD PTR [esp],ebx
10002150:	e8 fc ff ff ff       	call   10002151 <GDO::update(List<CRect*>*, bool)+0x4f>	10002151: R_386_PC32	GDO::screenX()
10002155:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002159:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000215c:	e8 fc ff ff ff       	call   1000215d <GDO::update(List<CRect*>*, bool)+0x5b>	1000215d: R_386_PC32	GDO::screenY()
10002161:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10002165:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10002168:	c6 40 14 00          	mov    BYTE PTR [eax+0x14],0x0
1000216c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10002173:	83 c4 10             	add    esp,0x10
10002176:	83 ec 0c             	sub    esp,0xc
10002179:	53                   	push   ebx
1000217a:	e8 fc ff ff ff       	call   1000217b <GDO::update(List<CRect*>*, bool)+0x79>	1000217b: R_386_PC32	GDO::hasNext()
1000217f:	83 c4 10             	add    esp,0x10
10002182:	84 c0                	test   al,al
10002184:	74 6c                	je     100021f2 <GDO::update(List<CRect*>*, bool)+0xf0>
10002186:	83 ec 0c             	sub    esp,0xc
10002189:	53                   	push   ebx
1000218a:	e8 fc ff ff ff       	call   1000218b <GDO::update(List<CRect*>*, bool)+0x89>	1000218b: R_386_PC32	GDO::getNext()
1000218f:	89 c6                	mov    esi,eax
10002191:	83 c4 10             	add    esp,0x10
10002194:	80 38 00             	cmp    BYTE PTR [eax],0x0
10002197:	75 dd                	jne    10002176 <GDO::update(List<CRect*>*, bool)+0x74>
10002199:	83 ec 0c             	sub    esp,0xc
1000219c:	50                   	push   eax
1000219d:	e8 fc ff ff ff       	call   1000219e <GDO::update(List<CRect*>*, bool)+0x9c>	1000219e: R_386_PC32	GDO::screenX()
100021a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100021a6:	89 34 24             	mov    DWORD PTR [esp],esi
100021a9:	e8 fc ff ff ff       	call   100021aa <GDO::update(List<CRect*>*, bool)+0xa8>	100021aa: R_386_PC32	GDO::screenY()
100021ae:	89 c5                	mov    ebp,eax
100021b0:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
100021b7:	e8 fc ff ff ff       	call   100021b8 <GDO::update(List<CRect*>*, bool)+0xb6>	100021b8: R_386_PC32	malloc
100021bc:	89 c7                	mov    edi,eax
100021be:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
100021c2:	8b 46 34             	mov    eax,DWORD PTR [esi+0x34]
100021c5:	01 d0                	add    eax,edx
100021c7:	48                   	dec    eax
100021c8:	89 04 24             	mov    DWORD PTR [esp],eax
100021cb:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
100021ce:	01 e8                	add    eax,ebp
100021d0:	48                   	dec    eax
100021d1:	50                   	push   eax
100021d2:	52                   	push   edx
100021d3:	55                   	push   ebp
100021d4:	57                   	push   edi
100021d5:	e8 fc ff ff ff       	call   100021d6 <GDO::update(List<CRect*>*, bool)+0xd4>	100021d6: R_386_PC32	CRect::CRect(int, int, int, int)
100021da:	83 c4 18             	add    esp,0x18
100021dd:	57                   	push   edi
100021de:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100021e1:	e8 fc ff ff ff       	call   100021e2 <GDO::update(List<CRect*>*, bool)+0xe0>	100021e2: R_386_PC32	Context::subClipRect(CRect*)
100021e6:	5a                   	pop    edx
100021e7:	59                   	pop    ecx
100021e8:	6a 10                	push   0x10
100021ea:	57                   	push   edi
100021eb:	e8 fc ff ff ff       	call   100021ec <GDO::update(List<CRect*>*, bool)+0xea>	100021ec: R_386_PC32	operator delete(void*, unsigned long)
100021f0:	eb 81                	jmp    10002173 <GDO::update(List<CRect*>*, bool)+0x71>
100021f2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100021f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100021f9:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
100021fc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10002200:	89 78 10             	mov    DWORD PTR [eax+0x10],edi
10002203:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
1000220a:	83 ec 0c             	sub    esp,0xc
1000220d:	53                   	push   ebx
1000220e:	e8 fc ff ff ff       	call   1000220f <GDO::update(List<CRect*>*, bool)+0x10d>	1000220f: R_386_PC32	GDO::hasNext()
10002213:	83 c4 10             	add    esp,0x10
10002216:	84 c0                	test   al,al
10002218:	74 23                	je     1000223d <GDO::update(List<CRect*>*, bool)+0x13b>
1000221a:	83 ec 0c             	sub    esp,0xc
1000221d:	53                   	push   ebx
1000221e:	e8 fc ff ff ff       	call   1000221f <GDO::update(List<CRect*>*, bool)+0x11d>	1000221f: R_386_PC32	GDO::getNext()
10002223:	83 c4 10             	add    esp,0x10
10002226:	80 38 00             	cmp    BYTE PTR [eax],0x0
10002229:	74 df                	je     1000220a <GDO::update(List<CRect*>*, bool)+0x108>
1000222b:	8b 50 54             	mov    edx,DWORD PTR [eax+0x54]
1000222e:	85 d2                	test   edx,edx
10002230:	74 d8                	je     1000220a <GDO::update(List<CRect*>*, bool)+0x108>
10002232:	83 ec 0c             	sub    esp,0xc
10002235:	50                   	push   eax
10002236:	ff d2                	call   edx
10002238:	83 c4 10             	add    esp,0x10
1000223b:	eb cd                	jmp    1000220a <GDO::update(List<CRect*>*, bool)+0x108>
1000223d:	83 ec 0c             	sub    esp,0xc
10002240:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002243:	e8 fc ff ff ff       	call   10002244 <GDO::update(List<CRect*>*, bool)+0x142>	10002244: R_386_PC32	Context::clearClipRects()
10002248:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000224b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10002252:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10002259:	83 c4 10             	add    esp,0x10
1000225c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10002261:	0f 84 db 00 00 00    	je     10002342 <GDO::update(List<CRect*>*, bool)+0x240>
10002267:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
1000226e:	83 ec 0c             	sub    esp,0xc
10002271:	53                   	push   ebx
10002272:	e8 fc ff ff ff       	call   10002273 <GDO::update(List<CRect*>*, bool)+0x171>	10002273: R_386_PC32	GDO::hasNext()
10002277:	83 c4 10             	add    esp,0x10
1000227a:	84 c0                	test   al,al
1000227c:	0f 84 c0 00 00 00    	je     10002342 <GDO::update(List<CRect*>*, bool)+0x240>
10002282:	83 ec 0c             	sub    esp,0xc
10002285:	53                   	push   ebx
10002286:	e8 fc ff ff ff       	call   10002287 <GDO::update(List<CRect*>*, bool)+0x185>	10002287: R_386_PC32	GDO::getNext()
1000228b:	89 c7                	mov    edi,eax
1000228d:	83 c4 10             	add    esp,0x10
10002290:	80 38 00             	cmp    BYTE PTR [eax],0x0
10002293:	75 d9                	jne    1000226e <GDO::update(List<CRect*>*, bool)+0x16c>
10002295:	31 f6                	xor    esi,esi
10002297:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
1000229c:	75 3b                	jne    100022d9 <GDO::update(List<CRect*>*, bool)+0x1d7>
1000229e:	50                   	push   eax
1000229f:	6a 01                	push   0x1
100022a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100022a5:	57                   	push   edi
100022a6:	e8 fc ff ff ff       	call   100022a7 <GDO::update(List<CRect*>*, bool)+0x1a5>	100022a7: R_386_PC32	GDO::update(List<CRect*>*, bool)
100022ab:	83 c4 10             	add    esp,0x10
100022ae:	eb be                	jmp    1000226e <GDO::update(List<CRect*>*, bool)+0x16c>
100022b0:	8b 28                	mov    ebp,DWORD PTR [eax]
100022b2:	83 ec 0c             	sub    esp,0xc
100022b5:	57                   	push   edi
100022b6:	e8 fc ff ff ff       	call   100022b7 <GDO::update(List<CRect*>*, bool)+0x1b5>	100022b7: R_386_PC32	GDO::screenX()
100022bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100022bf:	89 3c 24             	mov    DWORD PTR [esp],edi
100022c2:	e8 fc ff ff ff       	call   100022c3 <GDO::update(List<CRect*>*, bool)+0x1c1>	100022c3: R_386_PC32	GDO::screenY()
100022c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100022cb:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
100022ce:	01 d1                	add    ecx,edx
100022d0:	83 c4 10             	add    esp,0x10
100022d3:	3b 4d 00             	cmp    ecx,DWORD PTR [ebp+0x0]
100022d6:	7f 37                	jg     1000230f <GDO::update(List<CRect*>*, bool)+0x20d>
100022d8:	46                   	inc    esi
100022d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100022dd:	8b 00                	mov    eax,DWORD PTR [eax]
100022df:	89 c1                	mov    ecx,eax
100022e1:	31 d2                	xor    edx,edx
100022e3:	85 c9                	test   ecx,ecx
100022e5:	74 06                	je     100022ed <GDO::update(List<CRect*>*, bool)+0x1eb>
100022e7:	42                   	inc    edx
100022e8:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
100022eb:	eb f6                	jmp    100022e3 <GDO::update(List<CRect*>*, bool)+0x1e1>
100022ed:	39 d6                	cmp    esi,edx
100022ef:	7d 32                	jge    10002323 <GDO::update(List<CRect*>*, bool)+0x221>
100022f1:	89 c1                	mov    ecx,eax
100022f3:	31 d2                	xor    edx,edx
100022f5:	85 c9                	test   ecx,ecx
100022f7:	74 06                	je     100022ff <GDO::update(List<CRect*>*, bool)+0x1fd>
100022f9:	42                   	inc    edx
100022fa:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
100022fd:	eb f6                	jmp    100022f5 <GDO::update(List<CRect*>*, bool)+0x1f3>
100022ff:	39 d6                	cmp    esi,edx
10002301:	7f ad                	jg     100022b0 <GDO::update(List<CRect*>*, bool)+0x1ae>
10002303:	89 f2                	mov    edx,esi
10002305:	85 d2                	test   edx,edx
10002307:	74 a7                	je     100022b0 <GDO::update(List<CRect*>*, bool)+0x1ae>
10002309:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000230c:	4a                   	dec    edx
1000230d:	eb f6                	jmp    10002305 <GDO::update(List<CRect*>*, bool)+0x203>
1000230f:	39 55 04             	cmp    DWORD PTR [ebp+0x4],edx
10002312:	7c c4                	jl     100022d8 <GDO::update(List<CRect*>*, bool)+0x1d6>
10002314:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
10002317:	01 c2                	add    edx,eax
10002319:	3b 55 08             	cmp    edx,DWORD PTR [ebp+0x8]
1000231c:	7e ba                	jle    100022d8 <GDO::update(List<CRect*>*, bool)+0x1d6>
1000231e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10002321:	7c b5                	jl     100022d8 <GDO::update(List<CRect*>*, bool)+0x1d6>
10002323:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002327:	8b 10                	mov    edx,DWORD PTR [eax]
10002329:	31 c0                	xor    eax,eax
1000232b:	85 d2                	test   edx,edx
1000232d:	74 06                	je     10002335 <GDO::update(List<CRect*>*, bool)+0x233>
1000232f:	40                   	inc    eax
10002330:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
10002333:	eb f6                	jmp    1000232b <GDO::update(List<CRect*>*, bool)+0x229>
10002335:	39 c6                	cmp    esi,eax
10002337:	0f 85 61 ff ff ff    	jne    1000229e <GDO::update(List<CRect*>*, bool)+0x19c>
1000233d:	e9 2c ff ff ff       	jmp    1000226e <GDO::update(List<CRect*>*, bool)+0x16c>
10002342:	83 c4 2c             	add    esp,0x2c
10002345:	5b                   	pop    ebx
10002346:	5e                   	pop    esi
10002347:	5f                   	pop    edi
10002348:	5d                   	pop    ebp
10002349:	c3                   	ret    

1000234a <GDO::addChild(GDO*)>:
1000234a:	55                   	push   ebp
1000234b:	57                   	push   edi
1000234c:	56                   	push   esi
1000234d:	53                   	push   ebx
1000234e:	83 ec 1c             	sub    esp,0x1c
10002351:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
10002355:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10002359:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
1000235d:	74 17                	je     10002376 <GDO::addChild(GDO*)+0x2c>
1000235f:	83 ec 0c             	sub    esp,0xc
10002362:	68 b6 30 00 10       	push   0x100030b6	10002363: R_386_32	.text
10002367:	e8 fc ff ff ff       	call   10002368 <GDO::addChild(GDO*)+0x1e>	10002368: R_386_PC32	Krnl::panic(char const*)
1000236c:	83 c4 10             	add    esp,0x10
1000236f:	31 db                	xor    ebx,ebx
10002371:	e9 8c 00 00 00       	jmp    10002402 <GDO::addChild(GDO*)+0xb8>
10002376:	89 6e 08             	mov    DWORD PTR [esi+0x8],ebp
10002379:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000237c:	31 c9                	xor    ecx,ecx
1000237e:	83 cb ff             	or     ebx,0xffffffff
10002381:	8b 04 8a             	mov    eax,DWORD PTR [edx+ecx*4]
10002384:	85 c0                	test   eax,eax
10002386:	74 1c                	je     100023a4 <GDO::addChild(GDO*)+0x5a>
10002388:	31 ff                	xor    edi,edi
1000238a:	83 38 00             	cmp    DWORD PTR [eax],0x0
1000238d:	75 0a                	jne    10002399 <GDO::addChild(GDO*)+0x4f>
1000238f:	89 30                	mov    DWORD PTR [eax],esi
10002391:	c1 e1 04             	shl    ecx,0x4
10002394:	8d 1c 39             	lea    ebx,[ecx+edi*1]
10002397:	eb 69                	jmp    10002402 <GDO::addChild(GDO*)+0xb8>
10002399:	47                   	inc    edi
1000239a:	83 c0 04             	add    eax,0x4
1000239d:	83 ff 10             	cmp    edi,0x10
100023a0:	75 e8                	jne    1000238a <GDO::addChild(GDO*)+0x40>
100023a2:	eb 07                	jmp    100023ab <GDO::addChild(GDO*)+0x61>
100023a4:	83 fb ff             	cmp    ebx,0xffffffff
100023a7:	75 02                	jne    100023ab <GDO::addChild(GDO*)+0x61>
100023a9:	89 cb                	mov    ebx,ecx
100023ab:	41                   	inc    ecx
100023ac:	83 f9 10             	cmp    ecx,0x10
100023af:	75 d0                	jne    10002381 <GDO::addChild(GDO*)+0x37>
100023b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100023b5:	83 fb ff             	cmp    ebx,0xffffffff
100023b8:	74 38                	je     100023f2 <GDO::addChild(GDO*)+0xa8>
100023ba:	50                   	push   eax
100023bb:	50                   	push   eax
100023bc:	53                   	push   ebx
100023bd:	68 d2 30 00 10       	push   0x100030d2	100023be: R_386_32	.text
100023c2:	e8 fc ff ff ff       	call   100023c3 <GDO::addChild(GDO*)+0x79>	100023c3: R_386_PC32	Dbg::kprintf(char const*, ...)
100023c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100023ca:	8d 2c 98             	lea    ebp,[eax+ebx*4]
100023cd:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
100023d4:	e8 fc ff ff ff       	call   100023d5 <GDO::addChild(GDO*)+0x8b>	100023d5: R_386_PC32	malloc
100023d9:	89 c2                	mov    edx,eax
100023db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
100023de:	31 c0                	xor    eax,eax
100023e0:	89 d7                	mov    edi,edx
100023e2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100023e6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100023e8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100023eb:	89 30                	mov    DWORD PTR [eax],esi
100023ed:	c1 e3 04             	shl    ebx,0x4
100023f0:	eb 0d                	jmp    100023ff <GDO::addChild(GDO*)+0xb5>
100023f2:	83 ec 0c             	sub    esp,0xc
100023f5:	68 ec 30 00 10       	push   0x100030ec	100023f6: R_386_32	.text
100023fa:	e8 fc ff ff ff       	call   100023fb <GDO::addChild(GDO*)+0xb1>	100023fb: R_386_PC32	Krnl::panic(char const*)
100023ff:	83 c4 10             	add    esp,0x10
10002402:	89 d8                	mov    eax,ebx
10002404:	83 c4 1c             	add    esp,0x1c
10002407:	5b                   	pop    ebx
10002408:	5e                   	pop    esi
10002409:	5f                   	pop    edi
1000240a:	5d                   	pop    ebp
1000240b:	c3                   	ret    

1000240c <GDO::removeChild(int)>:
1000240c:	53                   	push   ebx
1000240d:	83 ec 08             	sub    esp,0x8
10002410:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10002414:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10002418:	80 39 00             	cmp    BYTE PTR [ecx],0x0
1000241b:	74 14                	je     10002431 <GDO::removeChild(int)+0x25>
1000241d:	83 ec 0c             	sub    esp,0xc
10002420:	68 0e 31 00 10       	push   0x1000310e	10002421: R_386_32	.text
10002425:	e8 fc ff ff ff       	call   10002426 <GDO::removeChild(int)+0x1a>	10002426: R_386_PC32	Krnl::panic(char const*)
1000242a:	83 c4 10             	add    esp,0x10
1000242d:	31 c0                	xor    eax,eax
1000242f:	eb 2d                	jmp    1000245e <GDO::removeChild(int)+0x52>
10002431:	31 c0                	xor    eax,eax
10002433:	81 fa ff 00 00 00    	cmp    edx,0xff
10002439:	7f 23                	jg     1000245e <GDO::removeChild(int)+0x52>
1000243b:	89 d3                	mov    ebx,edx
1000243d:	c1 eb 04             	shr    ebx,0x4
10002440:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
10002443:	8b 0c 98             	mov    ecx,DWORD PTR [eax+ebx*4]
10002446:	31 c0                	xor    eax,eax
10002448:	85 c9                	test   ecx,ecx
1000244a:	74 12                	je     1000245e <GDO::removeChild(int)+0x52>
1000244c:	83 e2 0f             	and    edx,0xf
1000244f:	8d 14 91             	lea    edx,[ecx+edx*4]
10002452:	83 3a 00             	cmp    DWORD PTR [edx],0x0
10002455:	0f 95 c0             	setne  al
10002458:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
1000245e:	83 c4 08             	add    esp,0x8
10002461:	5b                   	pop    ebx
10002462:	c3                   	ret    
10002463:	90                   	nop

10002464 <GDO::removeChild(GDO*)>:
10002464:	53                   	push   ebx
10002465:	83 ec 10             	sub    esp,0x10
10002468:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000246c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10002470:	53                   	push   ebx
10002471:	e8 fc ff ff ff       	call   10002472 <GDO::removeChild(GDO*)+0xe>	10002472: R_386_PC32	GDO::indexOf(GDO*)
10002476:	83 c4 10             	add    esp,0x10
10002479:	83 f8 ff             	cmp    eax,0xffffffff
1000247c:	74 0e                	je     1000248c <GDO::removeChild(GDO*)+0x28>
1000247e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002482:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10002486:	83 c4 08             	add    esp,0x8
10002489:	5b                   	pop    ebx
1000248a:	eb 80                	jmp    1000240c <GDO::removeChild(int)>
1000248c:	31 c0                	xor    eax,eax
1000248e:	83 c4 08             	add    esp,0x8
10002491:	5b                   	pop    ebx
10002492:	c3                   	ret    
10002493:	90                   	nop

10002494 <legacyDraw(GDO*)>:
10002494:	55                   	push   ebp
10002495:	57                   	push   edi
10002496:	56                   	push   esi
10002497:	53                   	push   ebx
10002498:	83 ec 1c             	sub    esp,0x1c
1000249b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
1000249f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
100024a2:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
100024a5:	31 f6                	xor    esi,esi
100024a7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
100024aa:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
100024ae:	84 c0                	test   al,al
100024b0:	74 45                	je     100024f7 <legacyDraw(GDO*)+0x63>
100024b2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
100024b5:	69 ca ff 00 00 00    	imul   ecx,edx,0xff
100024bb:	0f b6 8c 08 00 00 00 00 	movzx  ecx,BYTE PTR [eax+ecx*1+0x0]	100024bf: R_386_32	FontWidths
100024c3:	83 ec 04             	sub    esp,0x4
100024c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
100024c9:	6a 0e                	push   0xe
100024cb:	51                   	push   ecx
100024cc:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100024d0:	55                   	push   ebp
100024d1:	57                   	push   edi
100024d2:	6b c0 0e             	imul   eax,eax,0xe
100024d5:	69 d2 f2 0d 00 00    	imul   edx,edx,0xdf2
100024db:	8d 84 10 00 00 00 00 	lea    eax,[eax+edx*1+0x0]	100024de: R_386_32	Fonts
100024e2:	50                   	push   eax
100024e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100024e6:	e8 fc ff ff ff       	call   100024e7 <legacyDraw(GDO*)+0x53>	100024e7: R_386_PC32	Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)
100024eb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100024ef:	01 cf                	add    edi,ecx
100024f1:	46                   	inc    esi
100024f2:	83 c4 20             	add    esp,0x20
100024f5:	eb b0                	jmp    100024a7 <legacyDraw(GDO*)+0x13>
100024f7:	83 c4 1c             	add    esp,0x1c
100024fa:	5b                   	pop    ebx
100024fb:	5e                   	pop    esi
100024fc:	5f                   	pop    edi
100024fd:	5d                   	pop    ebp
100024fe:	c3                   	ret    

100024ff <reverse(unsigned char)>:
100024ff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
10002503:	c3                   	ret    

10002504 <loadFontWithName(char*)>:
10002504:	55                   	push   ebp
10002505:	57                   	push   edi
10002506:	56                   	push   esi
10002507:	53                   	push   ebx
10002508:	83 ec 34             	sub    esp,0x34
1000250b:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
1000250f:	53                   	push   ebx
10002510:	68 2d 31 00 10       	push   0x1000312d	10002511: R_386_32	.text
10002515:	e8 fc ff ff ff       	call   10002516 <loadFontWithName(char*)+0x12>	10002516: R_386_PC32	Dbg::kprintf(char const*, ...)
1000251a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10002521:	e8 fc ff ff ff       	call   10002522 <loadFontWithName(char*)+0x1e>	10002522: R_386_PC32	malloc
10002526:	89 c6                	mov    esi,eax
10002528:	83 c4 0c             	add    esp,0xc
1000252b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000252d: R_386_32	kernelProcess
10002531:	53                   	push   ebx
10002532:	50                   	push   eax
10002533:	e8 fc ff ff ff       	call   10002534 <loadFontWithName(char*)+0x30>	10002534: R_386_PC32	File::File(char const*, Process*)
10002538:	59                   	pop    ecx
10002539:	5f                   	pop    edi
1000253a:	6a 01                	push   0x1
1000253c:	56                   	push   esi
1000253d:	e8 fc ff ff ff       	call   1000253e <loadFontWithName(char*)+0x3a>	1000253e: R_386_PC32	File::open(FileOpenMode)
10002542:	83 c4 10             	add    esp,0x10
10002545:	85 c0                	test   eax,eax
10002547:	74 10                	je     10002559 <loadFontWithName(char*)+0x55>
10002549:	83 ec 0c             	sub    esp,0xc
1000254c:	68 51 31 00 10       	push   0x10003151	1000254d: R_386_32	.text
10002551:	e8 fc ff ff ff       	call   10002552 <loadFontWithName(char*)+0x4e>	10002552: R_386_PC32	Krnl::panic(char const*)
10002556:	83 c4 10             	add    esp,0x10
10002559:	83 ec 0c             	sub    esp,0xc
1000255c:	8b 06                	mov    eax,DWORD PTR [esi]
1000255e:	8d 54 24 28          	lea    edx,[esp+0x28]
10002562:	52                   	push   edx
10002563:	68 00 00 00 00       	push   0x0	10002564: R_386_32	FONT
10002568:	6a 00                	push   0x0
1000256a:	68 10 10 00 00       	push   0x1010
1000256f:	56                   	push   esi
10002570:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10002573:	83 c4 14             	add    esp,0x14
10002576:	56                   	push   esi
10002577:	e8 fc ff ff ff       	call   10002578 <loadFontWithName(char*)+0x74>	10002578: R_386_PC32	File::close()
1000257c:	8b 06                	mov    eax,DWORD PTR [esi]
1000257e:	89 34 24             	mov    DWORD PTR [esp],esi
10002581:	ff 50 08             	call   DWORD PTR [eax+0x8]
10002584:	a1 00 00 00 00       	mov    eax,ds:0x0	10002585: R_386_32	nextfont_
10002589:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000258d:	69 f8 f2 0d 00 00    	imul   edi,eax,0xdf2
10002593:	83 c4 10             	add    esp,0x10
10002596:	b8 00 02 00 00       	mov    eax,0x200
1000259b:	69 74 24 0c ff 00 00 00 	imul   esi,DWORD PTR [esp+0xc],0xff
100025a3:	81 c6 00 00 00 00    	add    esi,0x0	100025a5: R_386_32	FontWidths
100025a9:	0f be 90 10 00 00 00 	movsx  edx,BYTE PTR [eax+0x10]	100025ac: R_386_32	FONT
100025b0:	8a 88 1f 00 00 00    	mov    cl,BYTE PTR [eax+0x1f]	100025b2: R_386_32	FONT
100025b6:	88 0c 16             	mov    BYTE PTR [esi+edx*1],cl
100025b9:	6b d2 0e             	imul   edx,edx,0xe
100025bc:	01 fa                	add    edx,edi
100025be:	31 ed                	xor    ebp,ebp
100025c0:	8a 8c 28 11 00 00 00 	mov    cl,BYTE PTR [eax+ebp*1+0x11]	100025c3: R_386_32	FONT
100025c7:	88 8c 2a 00 00 00 00 	mov    BYTE PTR [edx+ebp*1+0x0],cl	100025ca: R_386_32	Fonts
100025ce:	45                   	inc    ebp
100025cf:	83 fd 0e             	cmp    ebp,0xe
100025d2:	75 ec                	jne    100025c0 <loadFontWithName(char*)+0xbc>
100025d4:	83 c0 10             	add    eax,0x10
100025d7:	3d 00 08 00 00       	cmp    eax,0x800
100025dc:	75 cb                	jne    100025a9 <loadFontWithName(char*)+0xa5>
100025de:	43                   	inc    ebx
100025df:	80 7b ff 00          	cmp    BYTE PTR [ebx-0x1],0x0
100025e3:	75 f9                	jne    100025de <loadFontWithName(char*)+0xda>
100025e5:	8a 03                	mov    al,BYTE PTR [ebx]
100025e7:	3c 2f                	cmp    al,0x2f
100025e9:	74 07                	je     100025f2 <loadFontWithName(char*)+0xee>
100025eb:	3c 5c                	cmp    al,0x5c
100025ed:	74 03                	je     100025f2 <loadFontWithName(char*)+0xee>
100025ef:	4b                   	dec    ebx
100025f0:	eb f3                	jmp    100025e5 <loadFontWithName(char*)+0xe1>
100025f2:	31 d2                	xor    edx,edx
100025f4:	69 7c 24 0c ff 00 00 00 	imul   edi,DWORD PTR [esp+0xc],0xff
100025fc:	81 c7 00 00 00 00    	add    edi,0x0	100025fe: R_386_32	FontNames
10002602:	8a 44 13 01          	mov    al,BYTE PTR [ebx+edx*1+0x1]
10002606:	3c 2e                	cmp    al,0x2e
10002608:	0f b7 f2             	movzx  esi,dx
1000260b:	74 13                	je     10002620 <loadFontWithName(char*)+0x11c>
1000260d:	8d 68 9f             	lea    ebp,[eax-0x61]
10002610:	89 e9                	mov    ecx,ebp
10002612:	80 f9 19             	cmp    cl,0x19
10002615:	77 03                	ja     1000261a <loadFontWithName(char*)+0x116>
10002617:	83 e8 20             	sub    eax,0x20
1000261a:	88 04 37             	mov    BYTE PTR [edi+esi*1],al
1000261d:	42                   	inc    edx
1000261e:	eb e2                	jmp    10002602 <loadFontWithName(char*)+0xfe>
10002620:	69 44 24 0c ff 00 00 00 	imul   eax,DWORD PTR [esp+0xc],0xff
10002628:	c6 84 30 00 00 00 00 00 	mov    BYTE PTR [eax+esi*1+0x0],0x0	1000262b: R_386_32	FontNames
10002630:	05 00 00 00 00       	add    eax,0x0	10002631: R_386_32	FontNames
10002635:	52                   	push   edx
10002636:	50                   	push   eax
10002637:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000263b:	68 63 31 00 10       	push   0x10003163	1000263c: R_386_32	.text
10002640:	e8 fc ff ff ff       	call   10002641 <loadFontWithName(char*)+0x13d>	10002641: R_386_PC32	Dbg::kprintf(char const*, ...)
10002645:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	10002647: R_386_32	nextfont_
1000264b:	83 c4 3c             	add    esp,0x3c
1000264e:	5b                   	pop    ebx
1000264f:	5e                   	pop    esi
10002650:	5f                   	pop    edi
10002651:	5d                   	pop    ebp
10002652:	c3                   	ret    

10002653 <loadbuiltinfonts()>:
10002653:	56                   	push   esi
10002654:	53                   	push   ebx
10002655:	52                   	push   edx
10002656:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002658: R_386_32	nextfont_
10002660:	bb 00 00 00 00       	mov    ebx,0x0	10002661: R_386_32	FontWidths
10002665:	ba f2 0d 00 00       	mov    edx,0xdf2
1000266a:	8d 82 0e f2 ff ff    	lea    eax,[edx-0xdf2]
10002670:	89 de                	mov    esi,ebx
10002672:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10002674: R_386_32	Fonts
10002679:	b9 01 00 00 00       	mov    ecx,0x1
1000267e:	c6 84 08 00 00 00 00 66 	mov    BYTE PTR [eax+ecx*1+0x0],0x66	10002681: R_386_32	Fonts
10002686:	41                   	inc    ecx
10002687:	83 f9 0d             	cmp    ecx,0xd
1000268a:	75 f2                	jne    1000267e <loadbuiltinfonts()+0x2b>
1000268c:	c6 80 0d 00 00 00 00 	mov    BYTE PTR [eax+0xd],0x0	1000268e: R_386_32	Fonts
10002693:	c6 06 08             	mov    BYTE PTR [esi],0x8
10002696:	46                   	inc    esi
10002697:	83 c0 0e             	add    eax,0xe
1000269a:	39 d0                	cmp    eax,edx
1000269c:	75 d4                	jne    10002672 <loadbuiltinfonts()+0x1f>
1000269e:	8d 90 f2 0d 00 00    	lea    edx,[eax+0xdf2]
100026a4:	81 c3 ff 00 00 00    	add    ebx,0xff
100026aa:	81 fa 90 6f 00 00    	cmp    edx,0x6f90
100026b0:	75 b8                	jne    1000266a <loadbuiltinfonts()+0x17>
100026b2:	b8 00 02 00 00       	mov    eax,0x200
100026b7:	0f be 90 10 00 00 00 	movsx  edx,BYTE PTR [eax+0x10]	100026ba: R_386_32	FONT
100026be:	8a 88 1f 00 00 00    	mov    cl,BYTE PTR [eax+0x1f]	100026c0: R_386_32	FONT
100026c4:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	100026c6: R_386_32	FontWidths
100026ca:	6b ca 0e             	imul   ecx,edx,0xe
100026cd:	31 d2                	xor    edx,edx
100026cf:	8a 9c 10 11 00 00 00 	mov    bl,BYTE PTR [eax+edx*1+0x11]	100026d2: R_386_32	FONT
100026d6:	88 9c 11 00 00 00 00 	mov    BYTE PTR [ecx+edx*1+0x0],bl	100026d9: R_386_32	Fonts
100026dd:	42                   	inc    edx
100026de:	83 fa 0e             	cmp    edx,0xe
100026e1:	75 ec                	jne    100026cf <loadbuiltinfonts()+0x7c>
100026e3:	83 c0 10             	add    eax,0x10
100026e6:	3d 00 08 00 00       	cmp    eax,0x800
100026eb:	75 ca                	jne    100026b7 <loadbuiltinfonts()+0x64>
100026ed:	50                   	push   eax
100026ee:	50                   	push   eax
100026ef:	68 77 31 00 10       	push   0x10003177	100026f0: R_386_32	.text
100026f4:	68 00 00 00 00       	push   0x0	100026f5: R_386_32	FontNames
100026f9:	e8 fc ff ff ff       	call   100026fa <loadbuiltinfonts()+0xa7>	100026fa: R_386_PC32	strcpy
100026fe:	83 c4 0c             	add    esp,0xc
10002701:	68 00 00 00 00       	push   0x0	10002702: R_386_32	FontNames
10002706:	6a 00                	push   0x0
10002708:	68 63 31 00 10       	push   0x10003163	10002709: R_386_32	.text
1000270d:	e8 fc ff ff ff       	call   1000270e <loadbuiltinfonts()+0xbb>	1000270e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002712:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002714: R_386_32	nextfont_
1000271c:	83 c4 14             	add    esp,0x14
1000271f:	5b                   	pop    ebx
10002720:	5e                   	pop    esi
10002721:	c3                   	ret    

10002722 <loadfonts()>:
10002722:	57                   	push   edi
10002723:	56                   	push   esi
10002724:	53                   	push   ebx
10002725:	81 ec 1c 02 00 00    	sub    esp,0x21c
1000272b:	68 14 01 00 00       	push   0x114
10002730:	e8 fc ff ff ff       	call   10002731 <loadfonts()+0xf>	10002731: R_386_PC32	malloc
10002735:	89 c3                	mov    ebx,eax
10002737:	83 c4 0c             	add    esp,0xc
1000273a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000273c: R_386_32	kernelProcess
10002740:	68 7e 31 00 10       	push   0x1000317e	10002741: R_386_32	.text
10002745:	50                   	push   eax
10002746:	e8 fc ff ff ff       	call   10002747 <loadfonts()+0x25>	10002747: R_386_PC32	Directory::Directory(char const*, Process*)
1000274b:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000274e:	e8 fc ff ff ff       	call   1000274f <loadfonts()+0x2d>	1000274f: R_386_PC32	Directory::open()
10002753:	83 c4 10             	add    esp,0x10
10002756:	51                   	push   ecx
10002757:	51                   	push   ecx
10002758:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
1000275f:	50                   	push   eax
10002760:	53                   	push   ebx
10002761:	e8 fc ff ff ff       	call   10002762 <loadfonts()+0x40>	10002762: R_386_PC32	Directory::read(dirent*)
10002766:	89 c6                	mov    esi,eax
10002768:	5f                   	pop    edi
10002769:	58                   	pop    eax
1000276a:	56                   	push   esi
1000276b:	68 95 31 00 10       	push   0x10003195	1000276c: R_386_32	.text
10002770:	e8 fc ff ff ff       	call   10002771 <loadfonts()+0x4f>	10002771: R_386_PC32	Dbg::kprintf(char const*, ...)
10002775:	83 c4 10             	add    esp,0x10
10002778:	85 f6                	test   esi,esi
1000277a:	75 4c                	jne    100027c8 <loadfonts()+0xa6>
1000277c:	80 bc 24 10 01 00 00 00 	cmp    BYTE PTR [esp+0x110],0x0
10002784:	74 42                	je     100027c8 <loadfonts()+0xa6>
10002786:	f6 84 24 0c 01 00 00 02 	test   BYTE PTR [esp+0x10c],0x2
1000278e:	75 c6                	jne    10002756 <loadfonts()+0x34>
10002790:	50                   	push   eax
10002791:	50                   	push   eax
10002792:	68 a9 31 00 10       	push   0x100031a9	10002793: R_386_32	.text
10002797:	8d 74 24 0c          	lea    esi,[esp+0xc]
1000279b:	56                   	push   esi
1000279c:	e8 fc ff ff ff       	call   1000279d <loadfonts()+0x7b>	1000279d: R_386_PC32	strcpy
100027a1:	5a                   	pop    edx
100027a2:	59                   	pop    ecx
100027a3:	8d bc 24 18 01 00 00 	lea    edi,[esp+0x118]
100027aa:	57                   	push   edi
100027ab:	56                   	push   esi
100027ac:	e8 fc ff ff ff       	call   100027ad <loadfonts()+0x8b>	100027ad: R_386_PC32	strcat
100027b1:	58                   	pop    eax
100027b2:	5a                   	pop    edx
100027b3:	57                   	push   edi
100027b4:	68 c1 31 00 10       	push   0x100031c1	100027b5: R_386_32	.text
100027b9:	e8 fc ff ff ff       	call   100027ba <loadfonts()+0x98>	100027ba: R_386_PC32	Dbg::kprintf(char const*, ...)
100027be:	89 34 24             	mov    DWORD PTR [esp],esi
100027c1:	e8 fc ff ff ff       	call   100027c2 <loadfonts()+0xa0>	100027c2: R_386_PC32	loadFontWithName(char*)
100027c6:	eb 8b                	jmp    10002753 <loadfonts()+0x31>
100027c8:	83 ec 0c             	sub    esp,0xc
100027cb:	53                   	push   ebx
100027cc:	e8 fc ff ff ff       	call   100027cd <loadfonts()+0xab>	100027cd: R_386_PC32	Directory::close()
100027d1:	83 c4 10             	add    esp,0x10
100027d4:	85 db                	test   ebx,ebx
100027d6:	74 0c                	je     100027e4 <loadfonts()+0xc2>
100027d8:	83 ec 0c             	sub    esp,0xc
100027db:	8b 03                	mov    eax,DWORD PTR [ebx]
100027dd:	53                   	push   ebx
100027de:	ff 50 08             	call   DWORD PTR [eax+0x8]
100027e1:	83 c4 10             	add    esp,0x10
100027e4:	81 c4 10 02 00 00    	add    esp,0x210
100027ea:	5b                   	pop    ebx
100027eb:	5e                   	pop    esi
100027ec:	5f                   	pop    edi
100027ed:	c3                   	ret    

100027ee <getLegacyFont(char const*)>:
100027ee:	57                   	push   edi
100027ef:	56                   	push   esi
100027f0:	53                   	push   ebx
100027f1:	81 ec 08 01 00 00    	sub    esp,0x108
100027f7:	8b b4 24 18 01 00 00 	mov    esi,DWORD PTR [esp+0x118]
100027fe:	68 cf 31 00 10       	push   0x100031cf	100027ff: R_386_32	.text
10002803:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
10002807:	53                   	push   ebx
10002808:	e8 fc ff ff ff       	call   10002809 <getLegacyFont(char const*)+0x1b>	10002809: R_386_PC32	strcpy
1000280d:	59                   	pop    ecx
1000280e:	5f                   	pop    edi
1000280f:	56                   	push   esi
10002810:	53                   	push   ebx
10002811:	e8 fc ff ff ff       	call   10002812 <getLegacyFont(char const*)+0x24>	10002812: R_386_PC32	strcat
10002816:	58                   	pop    eax
10002817:	5a                   	pop    edx
10002818:	68 e7 31 00 10       	push   0x100031e7	10002819: R_386_32	.text
1000281d:	53                   	push   ebx
1000281e:	e8 fc ff ff ff       	call   1000281f <getLegacyFont(char const*)+0x31>	1000281f: R_386_PC32	strcat
10002823:	83 c4 10             	add    esp,0x10
10002826:	31 db                	xor    ebx,ebx
10002828:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	1000282a: R_386_32	nextfont_
1000282e:	39 df                	cmp    edi,ebx
10002830:	7e 3b                	jle    1000286d <getLegacyFont(char const*)+0x7f>
10002832:	69 fb ff 00 00 00    	imul   edi,ebx,0xff
10002838:	81 c7 00 00 00 00    	add    edi,0x0	1000283a: R_386_32	FontNames
1000283e:	50                   	push   eax
1000283f:	56                   	push   esi
10002840:	57                   	push   edi
10002841:	68 ec 31 00 10       	push   0x100031ec	10002842: R_386_32	.text
10002846:	e8 fc ff ff ff       	call   10002847 <getLegacyFont(char const*)+0x59>	10002847: R_386_PC32	Dbg::kprintf(char const*, ...)
1000284b:	58                   	pop    eax
1000284c:	5a                   	pop    edx
1000284d:	56                   	push   esi
1000284e:	57                   	push   edi
1000284f:	e8 fc ff ff ff       	call   10002850 <getLegacyFont(char const*)+0x62>	10002850: R_386_PC32	strcmp
10002854:	83 c4 10             	add    esp,0x10
10002857:	85 c0                	test   eax,eax
10002859:	75 0f                	jne    1000286a <getLegacyFont(char const*)+0x7c>
1000285b:	51                   	push   ecx
1000285c:	53                   	push   ebx
1000285d:	56                   	push   esi
1000285e:	68 f7 31 00 10       	push   0x100031f7	1000285f: R_386_32	.text
10002863:	e8 fc ff ff ff       	call   10002864 <getLegacyFont(char const*)+0x76>	10002864: R_386_PC32	Dbg::kprintf(char const*, ...)
10002868:	eb 43                	jmp    100028ad <getLegacyFont(char const*)+0xbf>
1000286a:	43                   	inc    ebx
1000286b:	eb bb                	jmp    10002828 <getLegacyFont(char const*)+0x3a>
1000286d:	83 ec 0c             	sub    esp,0xc
10002870:	56                   	push   esi
10002871:	e8 fc ff ff ff       	call   10002872 <getLegacyFont(char const*)+0x84>	10002872: R_386_PC32	loadFontWithName(char*)
10002876:	a1 00 00 00 00       	mov    eax,ds:0x0	10002877: R_386_32	nextfont_
1000287b:	83 c4 10             	add    esp,0x10
1000287e:	39 c7                	cmp    edi,eax
10002880:	75 15                	jne    10002897 <getLegacyFont(char const*)+0xa9>
10002882:	83 ec 0c             	sub    esp,0xc
10002885:	68 1b 32 00 10       	push   0x1000321b	10002886: R_386_32	.text
1000288a:	e8 fc ff ff ff       	call   1000288b <getLegacyFont(char const*)+0x9d>	1000288b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000288f:	83 c4 10             	add    esp,0x10
10002892:	83 cb ff             	or     ebx,0xffffffff
10002895:	eb 19                	jmp    100028b0 <getLegacyFont(char const*)+0xc2>
10002897:	52                   	push   edx
10002898:	48                   	dec    eax
10002899:	50                   	push   eax
1000289a:	56                   	push   esi
1000289b:	68 38 32 00 10       	push   0x10003238	1000289c: R_386_32	.text
100028a0:	e8 fc ff ff ff       	call   100028a1 <getLegacyFont(char const*)+0xb3>	100028a1: R_386_PC32	Dbg::kprintf(char const*, ...)
100028a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100028a6: R_386_32	nextfont_
100028aa:	8d 58 ff             	lea    ebx,[eax-0x1]
100028ad:	83 c4 10             	add    esp,0x10
100028b0:	89 d8                	mov    eax,ebx
100028b2:	81 c4 00 01 00 00    	add    esp,0x100
100028b8:	5b                   	pop    ebx
100028b9:	5e                   	pop    esi
100028ba:	5f                   	pop    edi
100028bb:	c3                   	ret    

100028bc <getLegacyFont(LegacyFontType)>:
100028bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100028c0:	83 f8 05             	cmp    eax,0x5
100028c3:	77 46                	ja     1000290b <getLegacyFont(LegacyFontType)+0x4f>
100028c5:	ff 24 85 84 32 00 10 	jmp    DWORD PTR [eax*4+0x10003284]	100028c8: R_386_32	.text
100028cc:	c7 44 24 04 77 31 00 10 	mov    DWORD PTR [esp+0x4],0x10003177	100028d0: R_386_32	.text
100028d4:	eb 30                	jmp    10002906 <getLegacyFont(LegacyFontType)+0x4a>
100028d6:	c7 44 24 04 59 32 00 10 	mov    DWORD PTR [esp+0x4],0x10003259	100028da: R_386_32	.text
100028de:	eb 26                	jmp    10002906 <getLegacyFont(LegacyFontType)+0x4a>
100028e0:	c7 44 24 04 61 32 00 10 	mov    DWORD PTR [esp+0x4],0x10003261	100028e4: R_386_32	.text
100028e8:	eb 1c                	jmp    10002906 <getLegacyFont(LegacyFontType)+0x4a>
100028ea:	c7 44 24 04 6a 32 00 10 	mov    DWORD PTR [esp+0x4],0x1000326a	100028ee: R_386_32	.text
100028f2:	eb 12                	jmp    10002906 <getLegacyFont(LegacyFontType)+0x4a>
100028f4:	c7 44 24 04 72 32 00 10 	mov    DWORD PTR [esp+0x4],0x10003272	100028f8: R_386_32	.text
100028fc:	eb 08                	jmp    10002906 <getLegacyFont(LegacyFontType)+0x4a>
100028fe:	c7 44 24 04 78 32 00 10 	mov    DWORD PTR [esp+0x4],0x10003278	10002902: R_386_32	.text
10002906:	e9 e3 fe ff ff       	jmp    100027ee <getLegacyFont(char const*)>
1000290b:	83 c8 ff             	or     eax,0xffffffff
1000290e:	c3                   	ret    
1000290f:	90                   	nop

10002910 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)>:
10002910:	57                   	push   edi
10002911:	53                   	push   ebx
10002912:	83 ec 08             	sub    esp,0x8
10002915:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002919:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000291d:	6a 02                	push   0x2
1000291f:	53                   	push   ebx
10002920:	e8 fc ff ff ff       	call   10002921 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x11>	10002921: R_386_PC32	GDO::GDO(GDOType, Context*)
10002925:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002929:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000292c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002930:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10002933:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002937:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
1000293a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000293b: R_386_32	System
1000293f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
10002942:	83 c9 ff             	or     ecx,0xffffffff
10002945:	31 c0                	xor    eax,eax
10002947:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
1000294b:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
1000294d:	89 ca                	mov    edx,ecx
1000294f:	f7 d2                	not    edx
10002951:	89 14 24             	mov    DWORD PTR [esp],edx
10002954:	e8 fc ff ff ff       	call   10002955 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x45>	10002955: R_386_PC32	malloc
10002959:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
1000295c:	5a                   	pop    edx
1000295d:	59                   	pop    ecx
1000295e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10002962:	50                   	push   eax
10002963:	e8 fc ff ff ff       	call   10002964 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x54>	10002964: R_386_PC32	strcpy
10002968:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	1000296b: R_386_32	legacyDraw(GDO*)
1000296f:	83 c4 14             	add    esp,0x14
10002972:	5b                   	pop    ebx
10002973:	5f                   	pop    edi
10002974:	c3                   	ret    
10002975:	90                   	nop

10002976 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)>:
10002976:	57                   	push   edi
10002977:	53                   	push   ebx
10002978:	83 ec 08             	sub    esp,0x8
1000297b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000297f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002983:	6a 02                	push   0x2
10002985:	53                   	push   ebx
10002986:	e8 fc ff ff ff       	call   10002987 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x11>	10002987: R_386_PC32	GDO::GDO(GDOType, Context*)
1000298b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000298f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10002992:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002996:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10002999:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000299d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
100029a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100029a4:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
100029a7:	83 c9 ff             	or     ecx,0xffffffff
100029aa:	31 c0                	xor    eax,eax
100029ac:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
100029b0:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
100029b2:	89 ca                	mov    edx,ecx
100029b4:	f7 d2                	not    edx
100029b6:	89 14 24             	mov    DWORD PTR [esp],edx
100029b9:	e8 fc ff ff ff       	call   100029ba <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x44>	100029ba: R_386_PC32	malloc
100029be:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
100029c1:	5a                   	pop    edx
100029c2:	59                   	pop    ecx
100029c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100029c7:	50                   	push   eax
100029c8:	e8 fc ff ff ff       	call   100029c9 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x53>	100029c9: R_386_PC32	strcpy
100029cd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	100029d0: R_386_32	legacyDraw(GDO*)
100029d4:	83 c4 14             	add    esp,0x14
100029d7:	5b                   	pop    ebx
100029d8:	5f                   	pop    edi
100029d9:	c3                   	ret    

100029da <legacyFontInit()>:
100029da:	83 ec 0c             	sub    esp,0xc
100029dd:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100029df: R_386_32	nextfont_
100029e7:	e8 fc ff ff ff       	call   100029e8 <legacyFontInit()+0xe>	100029e8: R_386_PC32	loadbuiltinfonts()
100029ec:	e8 fc ff ff ff       	call   100029ed <legacyFontInit()+0x13>	100029ed: R_386_PC32	loadfonts()
100029f1:	83 ec 0c             	sub    esp,0xc
100029f4:	68 77 31 00 10       	push   0x10003177	100029f5: R_386_32	.text
100029f9:	e8 fc ff ff ff       	call   100029fa <legacyFontInit()+0x20>	100029fa: R_386_PC32	getLegacyFont(char const*)
100029fe:	a3 00 00 00 00       	mov    ds:0x0,eax	100029ff: R_386_32	System
10002a03:	83 c4 1c             	add    esp,0x1c
10002a06:	c3                   	ret    
10002a07:	90                   	nop

10002a08 <rectDrawFunc(GDO*)>:
10002a08:	83 ec 14             	sub    esp,0x14
10002a0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002a0f:	ff 70 50             	push   DWORD PTR [eax+0x50]
10002a12:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10002a15:	ff 70 48             	push   DWORD PTR [eax+0x48]
10002a18:	ff 70 44             	push   DWORD PTR [eax+0x44]
10002a1b:	ff 70 40             	push   DWORD PTR [eax+0x40]
10002a1e:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002a21:	e8 fc ff ff ff       	call   10002a22 <rectDrawFunc(GDO*)+0x1a>	10002a22: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10002a26:	83 c4 2c             	add    esp,0x2c
10002a29:	c3                   	ret    

10002a2a <rectPtnDrawFunc(GDO*)>:
10002a2a:	83 ec 14             	sub    esp,0x14
10002a2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002a31:	ff 70 50             	push   DWORD PTR [eax+0x50]
10002a34:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10002a37:	ff 70 48             	push   DWORD PTR [eax+0x48]
10002a3a:	ff 70 44             	push   DWORD PTR [eax+0x44]
10002a3d:	ff 70 40             	push   DWORD PTR [eax+0x40]
10002a40:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002a43:	e8 fc ff ff ff       	call   10002a44 <rectPtnDrawFunc(GDO*)+0x1a>	10002a44: R_386_PC32	Context::fillRect(int, int, int, int, Brush*)
10002a48:	83 c4 2c             	add    esp,0x2c
10002a4b:	c3                   	ret    

10002a4c <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)>:
10002a4c:	53                   	push   ebx
10002a4d:	83 ec 0c             	sub    esp,0xc
10002a50:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002a54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002a58:	6a 01                	push   0x1
10002a5a:	53                   	push   ebx
10002a5b:	e8 fc ff ff ff       	call   10002a5c <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)+0x10>	10002a5c: R_386_PC32	GDO::GDO(GDOType, Context*)
10002a60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002a64:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10002a67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002a6b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10002a6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002a72:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10002a75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002a79:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10002a7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002a80:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10002a83:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002a86: R_386_32	rectPtnDrawFunc(GDO*)
10002a8a:	83 c4 18             	add    esp,0x18
10002a8d:	5b                   	pop    ebx
10002a8e:	c3                   	ret    
10002a8f:	90                   	nop

10002a90 <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)>:
10002a90:	53                   	push   ebx
10002a91:	83 ec 0c             	sub    esp,0xc
10002a94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002a98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002a9c:	6a 01                	push   0x1
10002a9e:	53                   	push   ebx
10002a9f:	e8 fc ff ff ff       	call   10002aa0 <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)+0x10>	10002aa0: R_386_PC32	GDO::GDO(GDOType, Context*)
10002aa4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002aa8:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10002aab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002aaf:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10002ab2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002ab6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10002ab9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002abd:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10002ac0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002ac4:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10002ac7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002aca: R_386_32	rectDrawFunc(GDO*)
10002ace:	83 c4 18             	add    esp,0x18
10002ad1:	5b                   	pop    ebx
10002ad2:	c3                   	ret    
10002ad3:	90                   	nop

10002ad4 <regnDrawFunc(GDO*)>:
10002ad4:	c3                   	ret    
10002ad5:	90                   	nop

10002ad6 <Region::Region(int, int, int, int, Context*)>:
10002ad6:	53                   	push   ebx
10002ad7:	83 ec 0c             	sub    esp,0xc
10002ada:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002ade:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10002ae2:	6a 00                	push   0x0
10002ae4:	53                   	push   ebx
10002ae5:	e8 fc ff ff ff       	call   10002ae6 <Region::Region(int, int, int, int, Context*)+0x10>	10002ae6: R_386_PC32	GDO::GDO(GDOType, Context*)
10002aea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002aee:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
10002af1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002af5:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
10002af8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002afc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
10002aff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002b03:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
10002b06:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002b09: R_386_32	regnDrawFunc(GDO*)
10002b0d:	83 c4 18             	add    esp,0x18
10002b10:	5b                   	pop    ebx
10002b11:	c3                   	ret    

10002b12 <Region::getRegionsAbove(Region*)>:
10002b12:	55                   	push   ebp
10002b13:	57                   	push   edi
10002b14:	56                   	push   esi
10002b15:	53                   	push   ebx
10002b16:	83 ec 28             	sub    esp,0x28
10002b19:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10002b1d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10002b21:	6a 08                	push   0x8
10002b23:	e8 fc ff ff ff       	call   10002b24 <Region::getRegionsAbove(Region*)+0x12>	10002b24: R_386_PC32	malloc
10002b28:	89 c3                	mov    ebx,eax
10002b2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10002b31:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10002b37:	89 3c 24             	mov    DWORD PTR [esp],edi
10002b3a:	e8 fc ff ff ff       	call   10002b3b <Region::getRegionsAbove(Region*)+0x29>	10002b3b: R_386_PC32	GDO::resetNext()
10002b3f:	83 c4 10             	add    esp,0x10
10002b42:	83 ec 0c             	sub    esp,0xc
10002b45:	57                   	push   edi
10002b46:	e8 fc ff ff ff       	call   10002b47 <Region::getRegionsAbove(Region*)+0x35>	10002b47: R_386_PC32	GDO::hasNext()
10002b4b:	83 c4 10             	add    esp,0x10
10002b4e:	84 c0                	test   al,al
10002b50:	74 10                	je     10002b62 <Region::getRegionsAbove(Region*)+0x50>
10002b52:	83 ec 0c             	sub    esp,0xc
10002b55:	57                   	push   edi
10002b56:	e8 fc ff ff ff       	call   10002b57 <Region::getRegionsAbove(Region*)+0x45>	10002b57: R_386_PC32	GDO::getNext()
10002b5b:	83 c4 10             	add    esp,0x10
10002b5e:	39 e8                	cmp    eax,ebp
10002b60:	75 e0                	jne    10002b42 <Region::getRegionsAbove(Region*)+0x30>
10002b62:	83 ec 0c             	sub    esp,0xc
10002b65:	57                   	push   edi
10002b66:	e8 fc ff ff ff       	call   10002b67 <Region::getRegionsAbove(Region*)+0x55>	10002b67: R_386_PC32	GDO::hasNext()
10002b6b:	83 c4 10             	add    esp,0x10
10002b6e:	84 c0                	test   al,al
10002b70:	74 7b                	je     10002bed <Region::getRegionsAbove(Region*)+0xdb>
10002b72:	83 ec 0c             	sub    esp,0xc
10002b75:	57                   	push   edi
10002b76:	e8 fc ff ff ff       	call   10002b77 <Region::getRegionsAbove(Region*)+0x65>	10002b77: R_386_PC32	GDO::getNext()
10002b7b:	89 c6                	mov    esi,eax
10002b7d:	83 c4 10             	add    esp,0x10
10002b80:	85 c0                	test   eax,eax
10002b82:	74 de                	je     10002b62 <Region::getRegionsAbove(Region*)+0x50>
10002b84:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
10002b87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10002b8b:	8b 56 2c             	mov    edx,DWORD PTR [esi+0x2c]
10002b8e:	03 45 34             	add    eax,DWORD PTR [ebp+0x34]
10002b91:	39 d0                	cmp    eax,edx
10002b93:	7e cd                	jle    10002b62 <Region::getRegionsAbove(Region*)+0x50>
10002b95:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
10002b98:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
10002b9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002b9f:	8b 45 38             	mov    eax,DWORD PTR [ebp+0x38]
10002ba2:	01 c8                	add    eax,ecx
10002ba4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10002ba8:	7e b8                	jle    10002b62 <Region::getRegionsAbove(Region*)+0x50>
10002baa:	03 56 34             	add    edx,DWORD PTR [esi+0x34]
10002bad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
10002bb1:	7d af                	jge    10002b62 <Region::getRegionsAbove(Region*)+0x50>
10002bb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002bb7:	03 46 38             	add    eax,DWORD PTR [esi+0x38]
10002bba:	39 c1                	cmp    ecx,eax
10002bbc:	7d a4                	jge    10002b62 <Region::getRegionsAbove(Region*)+0x50>
10002bbe:	83 ec 0c             	sub    esp,0xc
10002bc1:	6a 0c                	push   0xc
10002bc3:	e8 fc ff ff ff       	call   10002bc4 <Region::getRegionsAbove(Region*)+0xb2>	10002bc4: R_386_PC32	malloc
10002bc8:	89 30                	mov    DWORD PTR [eax],esi
10002bca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10002bcd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10002bd0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10002bd7:	83 c4 10             	add    esp,0x10
10002bda:	85 d2                	test   edx,edx
10002bdc:	74 05                	je     10002be3 <Region::getRegionsAbove(Region*)+0xd1>
10002bde:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
10002be1:	eb 02                	jmp    10002be5 <Region::getRegionsAbove(Region*)+0xd3>
10002be3:	89 03                	mov    DWORD PTR [ebx],eax
10002be5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10002be8:	e9 75 ff ff ff       	jmp    10002b62 <Region::getRegionsAbove(Region*)+0x50>
10002bed:	89 d8                	mov    eax,ebx
10002bef:	83 c4 1c             	add    esp,0x1c
10002bf2:	5b                   	pop    ebx
10002bf3:	5e                   	pop    esi
10002bf4:	5f                   	pop    edi
10002bf5:	5d                   	pop    ebp
10002bf6:	c3                   	ret    
10002bf7:	90                   	nop

10002bf8 <Region::applyBoundClipping(int, List<CRect*>*)>:
10002bf8:	55                   	push   ebp
10002bf9:	57                   	push   edi
10002bfa:	56                   	push   esi
10002bfb:	53                   	push   ebx
10002bfc:	83 ec 1c             	sub    esp,0x1c
10002bff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002c03:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
10002c07:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10002c0b:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10002c0f:	0f 84 ef 01 00 00    	je     10002e04 <Region::applyBoundClipping(int, List<CRect*>*)+0x20c>
10002c15:	83 ec 0c             	sub    esp,0xc
10002c18:	53                   	push   ebx
10002c19:	e8 fc ff ff ff       	call   10002c1a <Region::applyBoundClipping(int, List<CRect*>*)+0x22>	10002c1a: R_386_PC32	GDO::screenX()
10002c1e:	89 c5                	mov    ebp,eax
10002c20:	89 1c 24             	mov    DWORD PTR [esp],ebx
10002c23:	e8 fc ff ff ff       	call   10002c24 <Region::applyBoundClipping(int, List<CRect*>*)+0x2c>	10002c24: R_386_PC32	GDO::screenY()
10002c28:	89 c6                	mov    esi,eax
10002c2a:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10002c31:	e8 fc ff ff ff       	call   10002c32 <Region::applyBoundClipping(int, List<CRect*>*)+0x3a>	10002c32: R_386_PC32	malloc
10002c36:	89 c7                	mov    edi,eax
10002c38:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
10002c3b:	01 e8                	add    eax,ebp
10002c3d:	48                   	dec    eax
10002c3e:	89 04 24             	mov    DWORD PTR [esp],eax
10002c41:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10002c44:	01 f0                	add    eax,esi
10002c46:	48                   	dec    eax
10002c47:	50                   	push   eax
10002c48:	55                   	push   ebp
10002c49:	56                   	push   esi
10002c4a:	57                   	push   edi
10002c4b:	e8 fc ff ff ff       	call   10002c4c <Region::applyBoundClipping(int, List<CRect*>*)+0x54>	10002c4c: R_386_PC32	CRect::CRect(int, int, int, int)
10002c50:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10002c53:	83 c4 20             	add    esp,0x20
10002c56:	85 c0                	test   eax,eax
10002c58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10002c5c:	0f 85 ab 00 00 00    	jne    10002d0d <Region::applyBoundClipping(int, List<CRect*>*)+0x115>
10002c62:	85 d2                	test   edx,edx
10002c64:	0f 84 8c 00 00 00    	je     10002cf6 <Region::applyBoundClipping(int, List<CRect*>*)+0xfe>
10002c6a:	31 f6                	xor    esi,esi
10002c6c:	8b 02                	mov    eax,DWORD PTR [edx]
10002c6e:	89 c5                	mov    ebp,eax
10002c70:	31 c9                	xor    ecx,ecx
10002c72:	85 ed                	test   ebp,ebp
10002c74:	74 06                	je     10002c7c <Region::applyBoundClipping(int, List<CRect*>*)+0x84>
10002c76:	41                   	inc    ecx
10002c77:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10002c7a:	eb f6                	jmp    10002c72 <Region::applyBoundClipping(int, List<CRect*>*)+0x7a>
10002c7c:	39 ce                	cmp    esi,ecx
10002c7e:	7d 5f                	jge    10002cdf <Region::applyBoundClipping(int, List<CRect*>*)+0xe7>
10002c80:	89 c5                	mov    ebp,eax
10002c82:	31 c9                	xor    ecx,ecx
10002c84:	85 ed                	test   ebp,ebp
10002c86:	74 06                	je     10002c8e <Region::applyBoundClipping(int, List<CRect*>*)+0x96>
10002c88:	41                   	inc    ecx
10002c89:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10002c8c:	eb f6                	jmp    10002c84 <Region::applyBoundClipping(int, List<CRect*>*)+0x8c>
10002c8e:	39 ce                	cmp    esi,ecx
10002c90:	7f 0c                	jg     10002c9e <Region::applyBoundClipping(int, List<CRect*>*)+0xa6>
10002c92:	89 f1                	mov    ecx,esi
10002c94:	85 c9                	test   ecx,ecx
10002c96:	74 06                	je     10002c9e <Region::applyBoundClipping(int, List<CRect*>*)+0xa6>
10002c98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10002c9b:	49                   	dec    ecx
10002c9c:	eb f6                	jmp    10002c94 <Region::applyBoundClipping(int, List<CRect*>*)+0x9c>
10002c9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10002ca2:	8b 28                	mov    ebp,DWORD PTR [eax]
10002ca4:	83 ec 0c             	sub    esp,0xc
10002ca7:	6a 10                	push   0x10
10002ca9:	e8 fc ff ff ff       	call   10002caa <Region::applyBoundClipping(int, List<CRect*>*)+0xb2>	10002caa: R_386_PC32	malloc
10002cae:	59                   	pop    ecx
10002caf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
10002cb2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10002cb5:	ff 75 00             	push   DWORD PTR [ebp+0x0]
10002cb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002cbb:	50                   	push   eax
10002cbc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002cc0:	e8 fc ff ff ff       	call   10002cc1 <Region::applyBoundClipping(int, List<CRect*>*)+0xc9>	10002cc1: R_386_PC32	CRect::CRect(int, int, int, int)
10002cc5:	83 c4 18             	add    esp,0x18
10002cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002ccc:	50                   	push   eax
10002ccd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002cd0:	e8 fc ff ff ff       	call   10002cd1 <Region::applyBoundClipping(int, List<CRect*>*)+0xd9>	10002cd1: R_386_PC32	Context::addClipRect(CRect*)
10002cd5:	46                   	inc    esi
10002cd6:	83 c4 10             	add    esp,0x10
10002cd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002cdd:	eb 8d                	jmp    10002c6c <Region::applyBoundClipping(int, List<CRect*>*)+0x74>
10002cdf:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002ce3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10002ce6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002cea:	83 c4 1c             	add    esp,0x1c
10002ced:	5b                   	pop    ebx
10002cee:	5e                   	pop    esi
10002cef:	5f                   	pop    edi
10002cf0:	5d                   	pop    ebp
10002cf1:	e9 fc ff ff ff       	jmp    10002cf2 <Region::applyBoundClipping(int, List<CRect*>*)+0xfa>	10002cf2: R_386_PC32	Context::intersectClipRect(CRect*)
10002cf6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002cfa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10002cfd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002d01:	83 c4 1c             	add    esp,0x1c
10002d04:	5b                   	pop    ebx
10002d05:	5e                   	pop    esi
10002d06:	5f                   	pop    edi
10002d07:	5d                   	pop    ebp
10002d08:	e9 fc ff ff ff       	jmp    10002d09 <Region::applyBoundClipping(int, List<CRect*>*)+0x111>	10002d09: R_386_PC32	Context::addClipRect(CRect*)
10002d0d:	51                   	push   ecx
10002d0e:	52                   	push   edx
10002d0f:	6a 01                	push   0x1
10002d11:	50                   	push   eax
10002d12:	e8 fc ff ff ff       	call   10002d13 <Region::applyBoundClipping(int, List<CRect*>*)+0x11b>	10002d13: R_386_PC32	Region::applyBoundClipping(int, List<CRect*>*)
10002d17:	5e                   	pop    esi
10002d18:	5d                   	pop    ebp
10002d19:	57                   	push   edi
10002d1a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002d1d:	e8 fc ff ff ff       	call   10002d1e <Region::applyBoundClipping(int, List<CRect*>*)+0x126>	10002d1e: R_386_PC32	Context::intersectClipRect(CRect*)
10002d22:	58                   	pop    eax
10002d23:	5a                   	pop    edx
10002d24:	53                   	push   ebx
10002d25:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10002d28:	e8 fc ff ff ff       	call   10002d29 <Region::applyBoundClipping(int, List<CRect*>*)+0x131>	10002d29: R_386_PC32	Region::getRegionsAbove(Region*)
10002d2d:	89 c6                	mov    esi,eax
10002d2f:	83 c4 10             	add    esp,0x10
10002d32:	8b 06                	mov    eax,DWORD PTR [esi]
10002d34:	89 c1                	mov    ecx,eax
10002d36:	31 d2                	xor    edx,edx
10002d38:	85 c9                	test   ecx,ecx
10002d3a:	74 06                	je     10002d42 <Region::applyBoundClipping(int, List<CRect*>*)+0x14a>
10002d3c:	42                   	inc    edx
10002d3d:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10002d40:	eb f6                	jmp    10002d38 <Region::applyBoundClipping(int, List<CRect*>*)+0x140>
10002d42:	85 d2                	test   edx,edx
10002d44:	0f 84 8a 00 00 00    	je     10002dd4 <Region::applyBoundClipping(int, List<CRect*>*)+0x1dc>
10002d4a:	8b 38                	mov    edi,DWORD PTR [eax]
10002d4c:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10002d4f:	52                   	push   edx
10002d50:	52                   	push   edx
10002d51:	6a 0c                	push   0xc
10002d53:	50                   	push   eax
10002d54:	e8 fc ff ff ff       	call   10002d55 <Region::applyBoundClipping(int, List<CRect*>*)+0x15d>	10002d55: R_386_PC32	operator delete(void*, unsigned long)
10002d59:	89 2e                	mov    DWORD PTR [esi],ebp
10002d5b:	83 c4 10             	add    esp,0x10
10002d5e:	85 ed                	test   ebp,ebp
10002d60:	75 09                	jne    10002d6b <Region::applyBoundClipping(int, List<CRect*>*)+0x173>
10002d62:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10002d69:	eb 07                	jmp    10002d72 <Region::applyBoundClipping(int, List<CRect*>*)+0x17a>
10002d6b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
10002d72:	83 ec 0c             	sub    esp,0xc
10002d75:	57                   	push   edi
10002d76:	e8 fc ff ff ff       	call   10002d77 <Region::applyBoundClipping(int, List<CRect*>*)+0x17f>	10002d77: R_386_PC32	GDO::screenX()
10002d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002d7f:	89 3c 24             	mov    DWORD PTR [esp],edi
10002d82:	e8 fc ff ff ff       	call   10002d83 <Region::applyBoundClipping(int, List<CRect*>*)+0x18b>	10002d83: R_386_PC32	GDO::screenY()
10002d87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002d8b:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10002d92:	e8 fc ff ff ff       	call   10002d93 <Region::applyBoundClipping(int, List<CRect*>*)+0x19b>	10002d93: R_386_PC32	malloc
10002d97:	89 c5                	mov    ebp,eax
10002d99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10002d9d:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
10002da0:	01 c8                	add    eax,ecx
10002da2:	48                   	dec    eax
10002da3:	89 04 24             	mov    DWORD PTR [esp],eax
10002da6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10002daa:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
10002dad:	01 d0                	add    eax,edx
10002daf:	48                   	dec    eax
10002db0:	50                   	push   eax
10002db1:	51                   	push   ecx
10002db2:	52                   	push   edx
10002db3:	55                   	push   ebp
10002db4:	e8 fc ff ff ff       	call   10002db5 <Region::applyBoundClipping(int, List<CRect*>*)+0x1bd>	10002db5: R_386_PC32	CRect::CRect(int, int, int, int)
10002db9:	83 c4 18             	add    esp,0x18
10002dbc:	55                   	push   ebp
10002dbd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002dc0:	e8 fc ff ff ff       	call   10002dc1 <Region::applyBoundClipping(int, List<CRect*>*)+0x1c9>	10002dc1: R_386_PC32	Context::subClipRect(CRect*)
10002dc5:	59                   	pop    ecx
10002dc6:	5f                   	pop    edi
10002dc7:	6a 10                	push   0x10
10002dc9:	55                   	push   ebp
10002dca:	e8 fc ff ff ff       	call   10002dcb <Region::applyBoundClipping(int, List<CRect*>*)+0x1d3>	10002dcb: R_386_PC32	operator delete(void*, unsigned long)
10002dcf:	e9 5b ff ff ff       	jmp    10002d2f <Region::applyBoundClipping(int, List<CRect*>*)+0x137>
10002dd4:	85 c0                	test   eax,eax
10002dd6:	74 14                	je     10002dec <Region::applyBoundClipping(int, List<CRect*>*)+0x1f4>
10002dd8:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002ddb:	52                   	push   edx
10002ddc:	52                   	push   edx
10002ddd:	6a 0c                	push   0xc
10002ddf:	50                   	push   eax
10002de0:	e8 fc ff ff ff       	call   10002de1 <Region::applyBoundClipping(int, List<CRect*>*)+0x1e9>	10002de1: R_386_PC32	operator delete(void*, unsigned long)
10002de5:	89 d8                	mov    eax,ebx
10002de7:	83 c4 10             	add    esp,0x10
10002dea:	eb e8                	jmp    10002dd4 <Region::applyBoundClipping(int, List<CRect*>*)+0x1dc>
10002dec:	c7 44 24 34 08 00 00 00 	mov    DWORD PTR [esp+0x34],0x8
10002df4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
10002df8:	83 c4 1c             	add    esp,0x1c
10002dfb:	5b                   	pop    ebx
10002dfc:	5e                   	pop    esi
10002dfd:	5f                   	pop    edi
10002dfe:	5d                   	pop    ebp
10002dff:	e9 fc ff ff ff       	jmp    10002e00 <Region::applyBoundClipping(int, List<CRect*>*)+0x208>	10002e00: R_386_PC32	operator delete(void*, unsigned long)
10002e04:	83 c4 1c             	add    esp,0x1c
10002e07:	5b                   	pop    ebx
10002e08:	5e                   	pop    esi
10002e09:	5f                   	pop    edi
10002e0a:	5d                   	pop    ebp
10002e0b:	c3                   	ret    

10002e0c <List<CRect*>::insertAtTail(CRect*)>:
10002e0c:	53                   	push   ebx
10002e0d:	83 ec 14             	sub    esp,0x14
10002e10:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10002e14:	6a 0c                	push   0xc
10002e16:	e8 fc ff ff ff       	call   10002e17 <List<CRect*>::insertAtTail(CRect*)+0xb>	10002e17: R_386_PC32	malloc
10002e1b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10002e1f:	89 10                	mov    DWORD PTR [eax],edx
10002e21:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10002e24:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10002e27:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10002e2e:	83 c4 10             	add    esp,0x10
10002e31:	85 d2                	test   edx,edx
10002e33:	74 05                	je     10002e3a <List<CRect*>::insertAtTail(CRect*)+0x2e>
10002e35:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
10002e38:	eb 02                	jmp    10002e3c <List<CRect*>::insertAtTail(CRect*)+0x30>
10002e3a:	89 03                	mov    DWORD PTR [ebx],eax
10002e3c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10002e3f:	83 c4 08             	add    esp,0x8
10002e42:	5b                   	pop    ebx
10002e43:	c3                   	ret    

10002e44 <List<CRect*>::deleteHead()>:
10002e44:	56                   	push   esi
10002e45:	53                   	push   ebx
10002e46:	51                   	push   ecx
10002e47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002e4b:	8b 06                	mov    eax,DWORD PTR [esi]
10002e4d:	85 c0                	test   eax,eax
10002e4f:	74 26                	je     10002e77 <List<CRect*>::deleteHead()+0x33>
10002e51:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002e54:	52                   	push   edx
10002e55:	52                   	push   edx
10002e56:	6a 0c                	push   0xc
10002e58:	50                   	push   eax
10002e59:	e8 fc ff ff ff       	call   10002e5a <List<CRect*>::deleteHead()+0x16>	10002e5a: R_386_PC32	operator delete(void*, unsigned long)
10002e5e:	89 1e                	mov    DWORD PTR [esi],ebx
10002e60:	83 c4 10             	add    esp,0x10
10002e63:	85 db                	test   ebx,ebx
10002e65:	75 09                	jne    10002e70 <List<CRect*>::deleteHead()+0x2c>
10002e67:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10002e6e:	eb 07                	jmp    10002e77 <List<CRect*>::deleteHead()+0x33>
10002e70:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10002e77:	58                   	pop    eax
10002e78:	5b                   	pop    ebx
10002e79:	5e                   	pop    esi
10002e7a:	c3                   	ret    
10002e7b:	90                   	nop

10002e7c <List<CRect*>::~List()>:
10002e7c:	53                   	push   ebx
10002e7d:	83 ec 08             	sub    esp,0x8
10002e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002e84:	8b 00                	mov    eax,DWORD PTR [eax]
10002e86:	85 c0                	test   eax,eax
10002e88:	74 14                	je     10002e9e <List<CRect*>::~List()+0x22>
10002e8a:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002e8d:	51                   	push   ecx
10002e8e:	51                   	push   ecx
10002e8f:	6a 0c                	push   0xc
10002e91:	50                   	push   eax
10002e92:	e8 fc ff ff ff       	call   10002e93 <List<CRect*>::~List()+0x17>	10002e93: R_386_PC32	operator delete(void*, unsigned long)
10002e97:	89 d8                	mov    eax,ebx
10002e99:	83 c4 10             	add    esp,0x10
10002e9c:	eb e8                	jmp    10002e86 <List<CRect*>::~List()+0xa>
10002e9e:	83 c4 08             	add    esp,0x8
10002ea1:	5b                   	pop    ebx
10002ea2:	c3                   	ret    
10002ea3:	43                   	inc    ebx
10002ea4:	4c                   	dec    esp
10002ea5:	49                   	dec    ecx
10002ea6:	50                   	push   eax
10002ea7:	44                   	inc    esp
10002ea8:	52                   	push   edx
10002ea9:	41                   	inc    ecx
10002eaa:	57                   	push   edi
10002eab:	20 53 54             	and    BYTE PTR [ebx+0x54],dl
10002eae:	41                   	inc    ecx
10002eaf:	52                   	push   edx
10002eb0:	54                   	push   esp
10002eb1:	45                   	inc    ebp
10002eb2:	44                   	inc    esp
10002eb3:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002eb6:	54                   	push   esp
10002eb7:	68 65 20 53 79       	push   0x79532065
10002ebc:	73 74                	jae    10002f32 <List<CRect*>::~List()+0xb6>
10002ebe:	65 6d                	gs ins DWORD PTR es:[edi],dx
10002ec0:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10002ec3:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002ec4:	74 21                	je     10002ee7 <List<CRect*>::~List()+0x6b>
10002ec6:	00 54 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dl
10002eca:	65 73 20             	gs jae 10002eed <List<CRect*>::~List()+0x71>
10002ecd:	4e                   	dec    esi
10002ece:	65 77 20             	gs ja  10002ef1 <List<CRect*>::~List()+0x75>
10002ed1:	52                   	push   edx
10002ed2:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002ed3:	6d                   	ins    DWORD PTR es:[edi],dx
10002ed4:	61                   	popa   
10002ed5:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002ed6:	21 00                	and    DWORD PTR [eax],eax
10002ed8:	43                   	inc    ebx
10002ed9:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002eda:	6d                   	ins    DWORD PTR es:[edi],dx
10002edb:	69 63 20 53 61 6e 73 	imul   esp,DWORD PTR [ebx+0x20],0x736e6153
10002ee2:	21 20                	and    DWORD PTR [eax],esp
10002ee4:	3a 29                	cmp    ch,BYTE PTR [ecx]
10002ee6:	00 41 72             	add    BYTE PTR [ecx+0x72],al
10002ee9:	69 61 6c 20 69 73 20 	imul   esp,DWORD PTR [ecx+0x6c],0x20736920
10002ef0:	73 6f                	jae    10002f61 <List<CRect*>::~List()+0xe5>
10002ef2:	20 62 6f             	and    BYTE PTR [edx+0x6f],ah
10002ef5:	72 69                	jb     10002f60 <List<CRect*>::~List()+0xe4>
10002ef7:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002ef8:	67 2e 2e 2e 00 43 6f 	cs cs add BYTE PTR cs:[bp+di+0x6f],al
10002eff:	75 72                	jne    10002f73 <List<CRect*>::~List()+0xf7>
10002f01:	69 65 72 20 66 6f 72 	imul   esp,DWORD PTR [ebp+0x72],0x726f6620
10002f08:	20 70 72             	and    BYTE PTR [eax+0x72],dh
10002f0b:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002f0c:	67 72 61             	addr16 jb 10002f70 <List<CRect*>::~List()+0xf4>
10002f0f:	6d                   	ins    DWORD PTR es:[edi],dx
10002f10:	6d                   	ins    DWORD PTR es:[edi],dx
10002f11:	69 6e 67 2e 2e 2e 00 	imul   ebp,DWORD PTR [esi+0x67],0x2e2e2e
10002f18:	50                   	push   eax
10002f19:	55                   	push   ebp
10002f1a:	54                   	push   esp
10002f1b:	20 4d 4f             	and    BYTE PTR [ebp+0x4f],cl
10002f1e:	55                   	push   ebp
10002f1f:	53                   	push   ebx
10002f20:	45                   	inc    ebp
10002f21:	20 49 4e             	and    BYTE PTR [ecx+0x4e],cl
10002f24:	20 54 4f 50          	and    BYTE PTR [edi+ecx*2+0x50],dl
10002f28:	20 52 49             	and    BYTE PTR [edx+0x49],dl
10002f2b:	47                   	inc    edi
10002f2c:	48                   	dec    eax
10002f2d:	54                   	push   esp
10002f2e:	20 43 4f             	and    BYTE PTR [ebx+0x4f],al
10002f31:	52                   	push   edx
10002f32:	4e                   	dec    esi
10002f33:	45                   	inc    ebp
10002f34:	52                   	push   edx
10002f35:	20 54 4f 20          	and    BYTE PTR [edi+ecx*2+0x20],dl
10002f39:	54                   	push   esp
10002f3a:	45                   	inc    ebp
10002f3b:	53                   	push   ebx
10002f3c:	54                   	push   esp
10002f3d:	20 42 53             	and    BYTE PTR [edx+0x53],al
10002f40:	4f                   	dec    edi
10002f41:	44                   	inc    esp
10002f42:	00 90 d4 07 00 10    	add    BYTE PTR [eax+0x100007d4],dl	10002f44: R_386_32	.text
10002f48:	db 07                	fild   DWORD PTR [edi]	10002f48: R_386_32	.text
10002f4a:	00 10                	add    BYTE PTR [eax],dl
10002f4c:	e2 07                	loop   10002f55 <List<CRect*>::~List()+0xd9>	10002f4c: R_386_32	.text
10002f4e:	00 10                	add    BYTE PTR [eax],dl
10002f50:	e9 07 00 10 f0       	jmp    102f5c <start(void*)-0xfefd0a4>	10002f50: R_386_32	.text
	10002f54: R_386_32	.text
10002f55:	07                   	pop    es
10002f56:	00 10                	add    BYTE PTR [eax],dl
10002f58:	f5                   	cmc    	10002f58: R_386_32	.text
10002f59:	07                   	pop    es
10002f5a:	00 10                	add    BYTE PTR [eax],dl
10002f5c:	fe 07                	inc    BYTE PTR [edi]	10002f5c: R_386_32	.text
10002f5e:	00 10                	add    BYTE PTR [eax],dl
10002f60:	07                   	pop    es	10002f60: R_386_32	.text
10002f61:	08 00                	or     BYTE PTR [eax],al
10002f63:	10 10                	adc    BYTE PTR [eax],dl	10002f64: R_386_32	.text
10002f65:	08 00                	or     BYTE PTR [eax],al
10002f67:	10 2c 08             	adc    BYTE PTR [eax+ecx*1],ch	10002f68: R_386_32	.text
10002f6a:	00 10                	add    BYTE PTR [eax],dl
10002f6c:	35 08 00 10 41       	xor    eax,0x41100008	10002f6c: R_386_32	.text
	10002f70: R_386_32	.text
10002f71:	08 00                	or     BYTE PTR [eax],al
10002f73:	10 49 08             	adc    BYTE PTR [ecx+0x8],cl	10002f74: R_386_32	.text
10002f76:	00 10                	add    BYTE PTR [eax],dl
10002f78:	51                   	push   ecx	10002f78: R_386_32	.text
10002f79:	08 00                	or     BYTE PTR [eax],al
10002f7b:	10 66 08             	adc    BYTE PTR [esi+0x8],ah	10002f7c: R_386_32	.text
10002f7e:	00 10                	add    BYTE PTR [eax],dl
10002f80:	00 00                	add    BYTE PTR [eax],al
10002f82:	80 3e 00             	cmp    BYTE PTR [esi],0x0
10002f85:	00 00                	add    BYTE PTR [eax],al
10002f87:	3f                   	aas    
10002f88:	43                   	inc    ebx
10002f89:	3a 2f                	cmp    ch,BYTE PTR [edi]
10002f8b:	42                   	inc    edx
10002f8c:	61                   	popa   
10002f8d:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002f8e:	61                   	popa   
10002f8f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002f90:	61                   	popa   
10002f91:	2f                   	das    
10002f92:	43                   	inc    ebx
10002f93:	75 72                	jne    10003007 <List<CRect*>::~List()+0x18b>
10002f95:	73 6f                	jae    10003006 <List<CRect*>::~List()+0x18a>
10002f97:	72 73                	jb     1000300c <List<CRect*>::~List()+0x190>
10002f99:	2f                   	das    
10002f9a:	53                   	push   ebx
10002f9b:	54                   	push   esp
10002f9c:	41                   	inc    ecx
10002f9d:	4e                   	dec    esi
10002f9e:	44                   	inc    esp
10002f9f:	41                   	inc    ecx
10002fa0:	52                   	push   edx
10002fa1:	44                   	inc    esp
10002fa2:	2e 43                	cs inc ebx
10002fa4:	55                   	push   ebp
10002fa5:	52                   	push   edx
10002fa6:	00 43 55             	add    BYTE PTR [ebx+0x55],al
10002fa9:	52                   	push   edx
10002faa:	53                   	push   ebx
10002fab:	4f                   	dec    edi
10002fac:	52                   	push   edx
10002fad:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002fb1:	44                   	inc    esp
10002fb2:	3a 20                	cmp    ah,BYTE PTR [eax]
10002fb4:	42                   	inc    edx
10002fb5:	41                   	inc    ecx
10002fb6:	44                   	inc    esp
10002fb7:	20 31                	and    BYTE PTR [ecx],dh
10002fb9:	0a 00                	or     al,BYTE PTR [eax]
10002fbb:	43                   	inc    ebx
10002fbc:	55                   	push   ebp
10002fbd:	52                   	push   edx
10002fbe:	53                   	push   ebx
10002fbf:	4f                   	dec    edi
10002fc0:	52                   	push   edx
10002fc1:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002fc5:	44                   	inc    esp
10002fc6:	3a 20                	cmp    ah,BYTE PTR [eax]
10002fc8:	42                   	inc    edx
10002fc9:	41                   	inc    ecx
10002fca:	44                   	inc    esp
10002fcb:	20 32                	and    BYTE PTR [edx],dh
10002fcd:	0a 00                	or     al,BYTE PTR [eax]
10002fcf:	43                   	inc    ebx
10002fd0:	55                   	push   ebp
10002fd1:	52                   	push   edx
10002fd2:	53                   	push   ebx
10002fd3:	4f                   	dec    edi
10002fd4:	52                   	push   edx
10002fd5:	53                   	push   ebx
10002fd6:	3a 20                	cmp    ah,BYTE PTR [eax]
10002fd8:	25 64 0a 00 4e       	and    eax,0x4e000a64
10002fdd:	52                   	push   edx
10002fde:	4d                   	dec    ebp
10002fdf:	4c                   	dec    esp
10002fe0:	00 57 41             	add    BYTE PTR [edi+0x41],dl
10002fe3:	49                   	dec    ecx
10002fe4:	54                   	push   esp
10002fe5:	00 54 4c 44          	add    BYTE PTR [esp+ecx*2+0x44],dl
10002fe9:	52                   	push   edx
10002fea:	00 54 45 58          	add    BYTE PTR [ebp+eax*2+0x58],dl
10002fee:	54                   	push   esp
10002fef:	00 56 45             	add    BYTE PTR [esi+0x45],dl
10002ff2:	52                   	push   edx
10002ff3:	54                   	push   esp
10002ff4:	00 48 4f             	add    BYTE PTR [eax+0x4f],cl
10002ff7:	52                   	push   edx
10002ff8:	5a                   	pop    edx
10002ff9:	00 48 41             	add    BYTE PTR [eax+0x41],cl
10002ffc:	4e                   	dec    esi
10002ffd:	44                   	inc    esp
10002ffe:	00 43 55             	add    BYTE PTR [ebx+0x55],al
10003001:	52                   	push   edx
10003002:	53                   	push   ebx
10003003:	4f                   	dec    edi
10003004:	52                   	push   edx
10003005:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10003009:	44                   	inc    esp
1000300a:	3a 20                	cmp    ah,BYTE PTR [eax]
1000300c:	42                   	inc    edx
1000300d:	41                   	inc    ecx
1000300e:	44                   	inc    esp
1000300f:	20 33                	and    BYTE PTR [ebx],dh
10003011:	0a 00                	or     al,BYTE PTR [eax]
10003013:	61                   	popa   
10003014:	6c                   	ins    BYTE PTR es:[edi],dx
10003015:	6c                   	ins    BYTE PTR es:[edi],dx
10003016:	6f                   	outs   dx,DWORD PTR ds:[esi]
10003017:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
1000301a:	69 6e 67 20 74 68 65 	imul   ebp,DWORD PTR [esi+0x67],0x65687420
10003021:	20 63 68             	and    BYTE PTR [ebx+0x68],ah
10003024:	69 6c 64 20 64 69 6d 2e 	imul   ebp,DWORD PTR [esp+eiz*2+0x20],0x2e6d6964
1000302c:	0a 00                	or     al,BYTE PTR [eax]
1000302e:	63 68 69             	arpl   WORD PTR [eax+0x69],bp
10003031:	6c                   	ins    BYTE PTR es:[edi],dx
10003032:	64 44                	fs inc esp
10003034:	69 6d 20 3d 20 30 78 	imul   ebp,DWORD PTR [ebp+0x20],0x7830203d
1000303b:	25 58 0a 00 4e       	and    eax,0x4e000a58
10003040:	4f                   	dec    edi
10003041:	20 43 48             	and    BYTE PTR [ebx+0x48],al
10003044:	49                   	dec    ecx
10003045:	4c                   	dec    esp
10003046:	44                   	inc    esp
10003047:	20 44 49 4d          	and    BYTE PTR [ecx+ecx*2+0x4d],al
1000304b:	00 70 72             	add    BYTE PTR [eax+0x72],dh
1000304e:	65 2d 65 6d 70 74    	gs sub eax,0x74706d65
10003054:	69 76 65 20 47 44 4f 	imul   esi,DWORD PTR [esi+0x65],0x4f444720
1000305b:	3a 3a                	cmp    bh,BYTE PTR [edx]
1000305d:	73 63                	jae    100030c2 <List<CRect*>::~List()+0x246>
1000305f:	72 65                	jb     100030c6 <List<CRect*>::~List()+0x24a>
10003061:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10003063:	58                   	pop    eax
10003064:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
10003067:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
1000306a:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000306b:	2d 72 65 67 69       	sub    eax,0x69676572
10003070:	6f                   	outs   dx,DWORD PTR ds:[esi]
10003071:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003072:	00 70 72             	add    BYTE PTR [eax+0x72],dh
10003075:	65 2d 65 6d 70 74    	gs sub eax,0x74706d65
1000307b:	69 76 65 20 47 44 4f 	imul   esi,DWORD PTR [esi+0x65],0x4f444720
10003082:	3a 3a                	cmp    bh,BYTE PTR [edx]
10003084:	73 63                	jae    100030e9 <List<CRect*>::~List()+0x26d>
10003086:	72 65                	jb     100030ed <List<CRect*>::~List()+0x271>
10003088:	65 6e                	outs   dx,BYTE PTR gs:[esi]
1000308a:	59                   	pop    ecx
1000308b:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
1000308e:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10003091:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003092:	2d 72 65 67 69       	sub    eax,0x69676572
10003097:	6f                   	outs   dx,DWORD PTR ds:[esi]
10003098:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003099:	00 55 50             	add    BYTE PTR [ebp+0x50],dl
1000309c:	44                   	inc    esp
1000309d:	41                   	inc    ecx
1000309e:	54                   	push   esp
1000309f:	45                   	inc    ebp
100030a0:	20 43 41             	and    BYTE PTR [ebx+0x41],al
100030a3:	4c                   	dec    esp
100030a4:	4c                   	dec    esp
100030a5:	45                   	inc    ebp
100030a6:	44                   	inc    esp
100030a7:	20 4f 4e             	and    BYTE PTR [edi+0x4e],cl
100030aa:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
100030ad:	4e                   	dec    esi
100030ae:	2d 52 45 47 49       	sub    eax,0x49474552
100030b3:	4f                   	dec    edi
100030b4:	4e                   	dec    esi
100030b5:	00 47 44             	add    BYTE PTR [edi+0x44],al
100030b8:	4f                   	dec    edi
100030b9:	3a 3a                	cmp    bh,BYTE PTR [edx]
100030bb:	61                   	popa   
100030bc:	64 64 43             	fs fs inc ebx
100030bf:	68 69 6c 64 20       	push   0x20646c69
100030c4:	6f                   	outs   dx,DWORD PTR ds:[esi]
100030c5:	6e                   	outs   dx,BYTE PTR ds:[esi]
100030c6:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
100030c9:	6e                   	outs   dx,BYTE PTR ds:[esi]
100030ca:	2d 72 65 67 69       	sub    eax,0x69676572
100030cf:	6f                   	outs   dx,DWORD PTR ds:[esi]
100030d0:	6e                   	outs   dx,BYTE PTR ds:[esi]
100030d1:	00 43 52             	add    BYTE PTR [ebx+0x52],al
100030d4:	45                   	inc    ebp
100030d5:	41                   	inc    ecx
100030d6:	54                   	push   esp
100030d7:	49                   	dec    ecx
100030d8:	4e                   	dec    esi
100030d9:	47                   	inc    edi
100030da:	20 41 20             	and    BYTE PTR [ecx+0x20],al
100030dd:	4e                   	dec    esi
100030de:	45                   	inc    ebp
100030df:	57                   	push   edi
100030e0:	20 44 49 4d          	and    BYTE PTR [ecx+ecx*2+0x4d],al
100030e4:	20 41 54             	and    BYTE PTR [ecx+0x54],al
100030e7:	20 25 64 0a 00 47    	and    BYTE PTR ds:0x47000a64,ah
100030ed:	44                   	inc    esp
100030ee:	4f                   	dec    edi
100030ef:	3a 3a                	cmp    bh,BYTE PTR [edx]
100030f1:	61                   	popa   
100030f2:	64 64 43             	fs fs inc ebx
100030f5:	68 69 6c 64 20       	push   0x20646c69
100030fa:	6e                   	outs   dx,BYTE PTR ds:[esi]
100030fb:	6f                   	outs   dx,DWORD PTR ds:[esi]
100030fc:	20 6d 6f             	and    BYTE PTR [ebp+0x6f],ch
100030ff:	72 65                	jb     10003166 <List<CRect*>::~List()+0x2ea>
10003101:	20 73 6c             	and    BYTE PTR [ebx+0x6c],dh
10003104:	6f                   	outs   dx,DWORD PTR ds:[esi]
10003105:	74 73                	je     1000317a <List<CRect*>::~List()+0x2fe>
10003107:	20 6c 65 66          	and    BYTE PTR [ebp+eiz*2+0x66],ch
1000310b:	74 21                	je     1000312e <List<CRect*>::~List()+0x2b2>
1000310d:	00 47 44             	add    BYTE PTR [edi+0x44],al
10003110:	4f                   	dec    edi
10003111:	3a 3a                	cmp    bh,BYTE PTR [edx]
10003113:	72 65                	jb     1000317a <List<CRect*>::~List()+0x2fe>
10003115:	6d                   	ins    DWORD PTR es:[edi],dx
10003116:	6f                   	outs   dx,DWORD PTR ds:[esi]
10003117:	76 65                	jbe    1000317e <List<CRect*>::~List()+0x302>
10003119:	43                   	inc    ebx
1000311a:	68 69 6c 64 20       	push   0x20646c69
1000311f:	6f                   	outs   dx,DWORD PTR ds:[esi]
10003120:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003121:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10003124:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003125:	2d 72 65 67 69       	sub    eax,0x69676572
1000312a:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000312b:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000312c:	00 4c 4f 41          	add    BYTE PTR [edi+ecx*2+0x41],cl
10003130:	44                   	inc    esp
10003131:	49                   	dec    ecx
10003132:	4e                   	dec    esi
10003133:	47                   	inc    edi
10003134:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10003138:	41                   	inc    ecx
10003139:	43                   	inc    ebx
1000313a:	59                   	pop    ecx
1000313b:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
1000313e:	4e                   	dec    esi
1000313f:	54                   	push   esp
10003140:	20 57 49             	and    BYTE PTR [edi+0x49],dl
10003143:	54                   	push   esp
10003144:	48                   	dec    eax
10003145:	20 4e 41             	and    BYTE PTR [esi+0x41],cl
10003148:	4d                   	dec    ebp
10003149:	45                   	inc    ebp
1000314a:	20 27                	and    BYTE PTR [edi],ah
1000314c:	25 73 27 0a 00       	and    eax,0xa2773
10003151:	43                   	inc    ebx
10003152:	41                   	inc    ecx
10003153:	4e                   	dec    esi
10003154:	4e                   	dec    esi
10003155:	4f                   	dec    edi
10003156:	54                   	push   esp
10003157:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
1000315b:	44                   	inc    esp
1000315c:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
1000315f:	4e                   	dec    esi
10003160:	54                   	push   esp
10003161:	53                   	push   ebx
10003162:	00 46 6f             	add    BYTE PTR [esi+0x6f],al
10003165:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003166:	74 4e                	je     100031b6 <List<CRect*>::~List()+0x33a>
10003168:	61                   	popa   
10003169:	6d                   	ins    DWORD PTR es:[edi],dx
1000316a:	65 73 5b             	gs jae 100031c8 <List<CRect*>::~List()+0x34c>
1000316d:	25 64 5d 20 3d       	and    eax,0x3d205d64
10003172:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10003178:	59                   	pop    ecx
10003179:	53                   	push   ebx
1000317a:	54                   	push   esp
1000317b:	45                   	inc    ebp
1000317c:	4d                   	dec    ebp
1000317d:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10003180:	2f                   	das    
10003181:	42                   	inc    edx
10003182:	41                   	inc    ecx
10003183:	4e                   	dec    esi
10003184:	41                   	inc    ecx
10003185:	4e                   	dec    esi
10003186:	41                   	inc    ecx
10003187:	2f                   	das    
10003188:	46                   	inc    esi
10003189:	4f                   	dec    edi
1000318a:	4e                   	dec    esi
1000318b:	54                   	push   esp
1000318c:	53                   	push   ebx
1000318d:	2f                   	das    
1000318e:	4c                   	dec    esp
1000318f:	45                   	inc    ebp
10003190:	47                   	inc    edi
10003191:	41                   	inc    ecx
10003192:	43                   	inc    ebx
10003193:	59                   	pop    ecx
10003194:	00 64 69 72          	add    BYTE PTR [ecx+ebp*2+0x72],ah
10003198:	2d 3e 72 65 61       	sub    eax,0x6165723e
1000319d:	64 2e 20 73 74       	fs and BYTE PTR cs:[ebx+0x74],dh
100031a2:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
100031a8:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
100031ab:	2f                   	das    
100031ac:	42                   	inc    edx
100031ad:	41                   	inc    ecx
100031ae:	4e                   	dec    esi
100031af:	41                   	inc    ecx
100031b0:	4e                   	dec    esi
100031b1:	41                   	inc    ecx
100031b2:	2f                   	das    
100031b3:	46                   	inc    esi
100031b4:	4f                   	dec    edi
100031b5:	4e                   	dec    esi
100031b6:	54                   	push   esp
100031b7:	53                   	push   ebx
100031b8:	2f                   	das    
100031b9:	4c                   	dec    esp
100031ba:	45                   	inc    ebp
100031bb:	47                   	inc    edi
100031bc:	41                   	inc    ecx
100031bd:	43                   	inc    ebx
100031be:	59                   	pop    ecx
100031bf:	2f                   	das    
100031c0:	00 64 70 20          	add    BYTE PTR [eax+esi*2+0x20],ah
100031c4:	6e                   	outs   dx,BYTE PTR ds:[esi]
100031c5:	61                   	popa   
100031c6:	6d                   	ins    DWORD PTR es:[edi],dx
100031c7:	65 20 3d 20 25 73 0a 	and    BYTE PTR gs:0xa732520,bh
100031ce:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
100031d1:	2f                   	das    
100031d2:	42                   	inc    edx
100031d3:	61                   	popa   
100031d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
100031d5:	61                   	popa   
100031d6:	6e                   	outs   dx,BYTE PTR ds:[esi]
100031d7:	61                   	popa   
100031d8:	2f                   	das    
100031d9:	46                   	inc    esi
100031da:	6f                   	outs   dx,DWORD PTR ds:[esi]
100031db:	6e                   	outs   dx,BYTE PTR ds:[esi]
100031dc:	74 73                	je     10003251 <List<CRect*>::~List()+0x3d5>
100031de:	2f                   	das    
100031df:	4c                   	dec    esp
100031e0:	65 67 61             	gs addr16 popa 
100031e3:	63 79 2f             	arpl   WORD PTR [ecx+0x2f],di
100031e6:	00 2e                	add    BYTE PTR [esi],ch
100031e8:	46                   	inc    esi
100031e9:	4e                   	dec    esi
100031ea:	54                   	push   esp
100031eb:	00 25 73 20 76 73    	add    BYTE PTR ds:0x73762073,ah
100031f1:	2e 20 25 73 0a 00 46 	and    BYTE PTR cs:0x46000a73,ah
100031f8:	4f                   	dec    edi
100031f9:	55                   	push   ebp
100031fa:	4e                   	dec    esi
100031fb:	44                   	inc    esp
100031fc:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10003200:	41                   	inc    ecx
10003201:	43                   	inc    ebx
10003202:	59                   	pop    ecx
10003203:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10003206:	4e                   	dec    esi
10003207:	54                   	push   esp
10003208:	20 27                	and    BYTE PTR [edi],ah
1000320a:	25 73 27 20 57       	and    eax,0x57202773
1000320f:	49                   	dec    ecx
10003210:	54                   	push   esp
10003211:	48                   	dec    eax
10003212:	20 49 44             	and    BYTE PTR [ecx+0x44],cl
10003215:	20 25 64 2e 0a 00    	and    BYTE PTR ds:0xa2e64,ah
1000321b:	43                   	inc    ebx
1000321c:	4f                   	dec    edi
1000321d:	55                   	push   ebp
1000321e:	4c                   	dec    esp
1000321f:	44                   	inc    esp
10003220:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10003223:	54                   	push   esp
10003224:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10003228:	44                   	inc    esp
10003229:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
1000322d:	41                   	inc    ecx
1000322e:	43                   	inc    ebx
1000322f:	59                   	pop    ecx
10003230:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10003233:	4e                   	dec    esi
10003234:	54                   	push   esp
10003235:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10003238:	4c                   	dec    esp
10003239:	4f                   	dec    edi
1000323a:	41                   	inc    ecx
1000323b:	44                   	inc    esp
1000323c:	45                   	inc    ebp
1000323d:	44                   	inc    esp
1000323e:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10003242:	41                   	inc    ecx
10003243:	43                   	inc    ebx
10003244:	59                   	pop    ecx
10003245:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10003248:	4e                   	dec    esi
10003249:	54                   	push   esp
1000324a:	20 25 73 20 54 4f    	and    BYTE PTR ds:0x4f542073,ah
10003250:	20 49 44             	and    BYTE PTR [ecx+0x44],cl
10003253:	20 25 64 2e 0a 00    	and    BYTE PTR ds:0xa2e64,ah
10003259:	43                   	inc    ebx
1000325a:	4f                   	dec    edi
1000325b:	55                   	push   ebp
1000325c:	52                   	push   edx
1000325d:	49                   	dec    ecx
1000325e:	45                   	inc    ebp
1000325f:	52                   	push   edx
10003260:	00 43 4f             	add    BYTE PTR [ebx+0x4f],al
10003263:	55                   	push   ebp
10003264:	52                   	push   edx
10003265:	49                   	dec    ecx
10003266:	45                   	inc    ebp
10003267:	52                   	push   edx
10003268:	58                   	pop    eax
10003269:	00 54 49 4d          	add    BYTE PTR [ecx+ecx*2+0x4d],dl
1000326d:	45                   	inc    ebp
1000326e:	53                   	push   ebx
1000326f:	4e                   	dec    esi
10003270:	52                   	push   edx
10003271:	00 41 52             	add    BYTE PTR [ecx+0x52],al
10003274:	49                   	dec    ecx
10003275:	41                   	inc    ecx
10003276:	4c                   	dec    esp
10003277:	00 43 4f             	add    BYTE PTR [ebx+0x4f],al
1000327a:	4d                   	dec    ebp
1000327b:	49                   	dec    ecx
1000327c:	43                   	inc    ebx
1000327d:	53                   	push   ebx
1000327e:	41                   	inc    ecx
1000327f:	4e                   	dec    esi
10003280:	00 66 90             	add    BYTE PTR [esi-0x70],ah
10003283:	90                   	nop
10003284:	cc                   	int3   	10003284: R_386_32	.text
10003285:	28 00                	sub    BYTE PTR [eax],al
10003287:	10 d6                	adc    dh,dl	10003288: R_386_32	.text
10003289:	28 00                	sub    BYTE PTR [eax],al
1000328b:	10 e0                	adc    al,ah	1000328c: R_386_32	.text
1000328d:	28 00                	sub    BYTE PTR [eax],al
1000328f:	10 ea                	adc    dl,ch	10003290: R_386_32	.text
10003291:	28 00                	sub    BYTE PTR [eax],al
10003293:	10 f4                	adc    ah,dh	10003294: R_386_32	.text
10003295:	28 00                	sub    BYTE PTR [eax],al
10003297:	10 fe                	adc    dh,bh	10003298: R_386_32	.text
10003299:	28 00                	sub    BYTE PTR [eax],al
1000329b:	10                   	.byte 0x10
