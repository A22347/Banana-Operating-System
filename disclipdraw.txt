
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 48             	sub    esp,0x48
10000007:	68 4b 2e 00 10       	push   0x10002e4b	10000008: R_386_32	.text
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000011:	e8 fc ff ff ff       	call   10000012 <start(void*)+0x12>	10000012: R_386_PC32	legacyFontInit()
10000016:	e8 fc ff ff ff       	call   10000017 <start(void*)+0x17>	10000017: R_386_PC32	setupCursor()
1000001b:	c7 04 24 1c 00 00 00 	mov    DWORD PTR [esp],0x1c
10000022:	e8 fc ff ff ff       	call   10000023 <start(void*)+0x23>	10000023: R_386_PC32	operator new(unsigned long)
10000027:	89 c3                	mov    ebx,eax
10000029:	58                   	pop    eax
1000002a:	5a                   	pop    edx
1000002b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000002d: R_386_32	screen
10000031:	53                   	push   ebx
10000032:	e8 fc ff ff ff       	call   10000033 <start(void*)+0x33>	10000033: R_386_PC32	Context::Context(Video*)
10000037:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000003e:	e8 fc ff ff ff       	call   1000003f <start(void*)+0x3f>	1000003f: R_386_PC32	operator new(unsigned long)
10000043:	89 c6                	mov    esi,eax
10000045:	59                   	pop    ecx
10000046:	5f                   	pop    edi
10000047:	53                   	push   ebx
10000048:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000004b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000004e:	6a 00                	push   0x0
10000050:	6a 00                	push   0x0
10000052:	50                   	push   eax
10000053:	e8 fc ff ff ff       	call   10000054 <start(void*)+0x54>	10000054: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000058:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
1000005f:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000061: R_386_32	rootRgn
10000065:	83 c4 14             	add    esp,0x14
10000068:	6a 58                	push   0x58
1000006a:	e8 fc ff ff ff       	call   1000006b <start(void*)+0x6b>	1000006b: R_386_PC32	operator new(unsigned long)
1000006f:	89 c7                	mov    edi,eax
10000071:	83 c4 0c             	add    esp,0xc
10000074:	53                   	push   ebx
10000075:	68 aa aa 00 00       	push   0xaaaa
1000007a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000007d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10000080:	6a 00                	push   0x0
10000082:	6a 00                	push   0x0
10000084:	50                   	push   eax
10000085:	e8 fc ff ff ff       	call   10000086 <start(void*)+0x86>	10000086: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
1000008a:	83 c4 18             	add    esp,0x18
1000008d:	57                   	push   edi
1000008e:	56                   	push   esi
1000008f:	e8 fc ff ff ff       	call   10000090 <start(void*)+0x90>	10000090: R_386_PC32	GDO::addChild(GDO*)
10000094:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000009b:	e8 fc ff ff ff       	call   1000009c <start(void*)+0x9c>	1000009c: R_386_PC32	operator new(unsigned long)
100000a0:	89 c1                	mov    ecx,eax
100000a2:	5d                   	pop    ebp
100000a3:	58                   	pop    eax
100000a4:	6a 06                	push   0x6
100000a6:	51                   	push   ecx
100000a7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
100000ab:	e8 fc ff ff ff       	call   100000ac <start(void*)+0xac>	100000ac: R_386_PC32	Brush::Brush(BrushType)
100000b0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000b7:	e8 fc ff ff ff       	call   100000b8 <start(void*)+0xb8>	100000b8: R_386_PC32	operator new(unsigned long)
100000bc:	89 c2                	mov    edx,eax
100000be:	58                   	pop    eax
100000bf:	59                   	pop    ecx
100000c0:	6a 07                	push   0x7
100000c2:	52                   	push   edx
100000c3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
100000c7:	e8 fc ff ff ff       	call   100000c8 <start(void*)+0xc8>	100000c8: R_386_PC32	Brush::Brush(BrushType)
100000cc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000d3:	e8 fc ff ff ff       	call   100000d4 <start(void*)+0xd4>	100000d4: R_386_PC32	operator new(unsigned long)
100000d8:	89 c5                	mov    ebp,eax
100000da:	5f                   	pop    edi
100000db:	58                   	pop    eax
100000dc:	6a 08                	push   0x8
100000de:	55                   	push   ebp
100000df:	e8 fc ff ff ff       	call   100000e0 <start(void*)+0xe0>	100000e0: R_386_PC32	Brush::Brush(BrushType)
100000e4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000eb:	e8 fc ff ff ff       	call   100000ec <start(void*)+0xec>	100000ec: R_386_PC32	operator new(unsigned long)
100000f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100000f4:	58                   	pop    eax
100000f5:	5a                   	pop    edx
100000f6:	6a 0a                	push   0xa
100000f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100000fc:	e8 fc ff ff ff       	call   100000fd <start(void*)+0xfd>	100000fd: R_386_PC32	Brush::Brush(BrushType)
10000101:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000108:	e8 fc ff ff ff       	call   10000109 <start(void*)+0x109>	10000109: R_386_PC32	operator new(unsigned long)
1000010d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000111:	59                   	pop    ecx
10000112:	5f                   	pop    edi
10000113:	6a 09                	push   0x9
10000115:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000119:	e8 fc ff ff ff       	call   1000011a <start(void*)+0x11a>	1000011a: R_386_PC32	Brush::Brush(BrushType)
1000011e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000125:	e8 fc ff ff ff       	call   10000126 <start(void*)+0x126>	10000126: R_386_PC32	operator new(unsigned long)
1000012a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000012e:	58                   	pop    eax
1000012f:	5a                   	pop    edx
10000130:	6a 0b                	push   0xb
10000132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000136:	e8 fc ff ff ff       	call   10000137 <start(void*)+0x137>	10000137: R_386_PC32	Brush::Brush(BrushType)
1000013b:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000142:	e8 fc ff ff ff       	call   10000143 <start(void*)+0x143>	10000143: R_386_PC32	operator new(unsigned long)
10000147:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000014b:	59                   	pop    ecx
1000014c:	5f                   	pop    edi
1000014d:	6a 0c                	push   0xc
1000014f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10000153:	e8 fc ff ff ff       	call   10000154 <start(void*)+0x154>	10000154: R_386_PC32	Brush::Brush(BrushType)
10000158:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000015f:	e8 fc ff ff ff       	call   10000160 <start(void*)+0x160>	10000160: R_386_PC32	operator new(unsigned long)
10000164:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10000168:	58                   	pop    eax
10000169:	5a                   	pop    edx
1000016a:	6a 0d                	push   0xd
1000016c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000170:	e8 fc ff ff ff       	call   10000171 <start(void*)+0x171>	10000171: R_386_PC32	Brush::Brush(BrushType)
10000175:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000017c:	e8 fc ff ff ff       	call   1000017d <start(void*)+0x17d>	1000017d: R_386_PC32	operator new(unsigned long)
10000181:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10000185:	59                   	pop    ecx
10000186:	5f                   	pop    edi
10000187:	6a 0e                	push   0xe
10000189:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000018d:	e8 fc ff ff ff       	call   1000018e <start(void*)+0x18e>	1000018e: R_386_PC32	Brush::Brush(BrushType)
10000192:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000199:	e8 fc ff ff ff       	call   1000019a <start(void*)+0x19a>	1000019a: R_386_PC32	operator new(unsigned long)
1000019e:	89 c7                	mov    edi,eax
100001a0:	58                   	pop    eax
100001a1:	5a                   	pop    edx
100001a2:	6a 00                	push   0x0
100001a4:	57                   	push   edi
100001a5:	e8 fc ff ff ff       	call   100001a6 <start(void*)+0x1a6>	100001a6: R_386_PC32	Brush::Brush(BrushType)
100001aa:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001b1:	e8 fc ff ff ff       	call   100001b2 <start(void*)+0x1b2>	100001b2: R_386_PC32	operator new(unsigned long)
100001b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100001ba:	59                   	pop    ecx
100001bb:	58                   	pop    eax
100001bc:	6a 04                	push   0x4
100001be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100001c2:	e8 fc ff ff ff       	call   100001c3 <start(void*)+0x1c3>	100001c3: R_386_PC32	Brush::Brush(BrushType)
100001c7:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001ce:	e8 fc ff ff ff       	call   100001cf <start(void*)+0x1cf>	100001cf: R_386_PC32	operator new(unsigned long)
100001d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100001d7:	58                   	pop    eax
100001d8:	5a                   	pop    edx
100001d9:	6a 0f                	push   0xf
100001db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
100001df:	e8 fc ff ff ff       	call   100001e0 <start(void*)+0x1e0>	100001e0: R_386_PC32	Brush::Brush(BrushType)
100001e4:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100001eb:	e8 fc ff ff ff       	call   100001ec <start(void*)+0x1ec>	100001ec: R_386_PC32	operator new(unsigned long)
100001f0:	83 c4 0c             	add    esp,0xc
100001f3:	53                   	push   ebx
100001f4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100001f8:	51                   	push   ecx
100001f9:	6a 64                	push   0x64
100001fb:	6a 64                	push   0x64
100001fd:	6a 32                	push   0x32
100001ff:	6a 32                	push   0x32
10000201:	50                   	push   eax
10000202:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000206:	e8 fc ff ff ff       	call   10000207 <start(void*)+0x207>	10000207: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000020b:	83 c4 18             	add    esp,0x18
1000020e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000212:	50                   	push   eax
10000213:	56                   	push   esi
10000214:	e8 fc ff ff ff       	call   10000215 <start(void*)+0x215>	10000215: R_386_PC32	GDO::addChild(GDO*)
10000219:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000220:	e8 fc ff ff ff       	call   10000221 <start(void*)+0x221>	10000221: R_386_PC32	operator new(unsigned long)
10000225:	83 c4 0c             	add    esp,0xc
10000228:	53                   	push   ebx
10000229:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
1000022d:	52                   	push   edx
1000022e:	6a 64                	push   0x64
10000230:	6a 64                	push   0x64
10000232:	6a 32                	push   0x32
10000234:	68 c8 00 00 00       	push   0xc8
10000239:	50                   	push   eax
1000023a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000023e:	e8 fc ff ff ff       	call   1000023f <start(void*)+0x23f>	1000023f: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000243:	83 c4 18             	add    esp,0x18
10000246:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000024a:	50                   	push   eax
1000024b:	56                   	push   esi
1000024c:	e8 fc ff ff ff       	call   1000024d <start(void*)+0x24d>	1000024d: R_386_PC32	GDO::addChild(GDO*)
10000251:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000258:	e8 fc ff ff ff       	call   10000259 <start(void*)+0x259>	10000259: R_386_PC32	operator new(unsigned long)
1000025d:	83 c4 0c             	add    esp,0xc
10000260:	53                   	push   ebx
10000261:	55                   	push   ebp
10000262:	6a 64                	push   0x64
10000264:	6a 64                	push   0x64
10000266:	6a 32                	push   0x32
10000268:	68 5e 01 00 00       	push   0x15e
1000026d:	50                   	push   eax
1000026e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000272:	e8 fc ff ff ff       	call   10000273 <start(void*)+0x273>	10000273: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000277:	83 c4 18             	add    esp,0x18
1000027a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000027e:	50                   	push   eax
1000027f:	56                   	push   esi
10000280:	e8 fc ff ff ff       	call   10000281 <start(void*)+0x281>	10000281: R_386_PC32	GDO::addChild(GDO*)
10000285:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000028c:	e8 fc ff ff ff       	call   1000028d <start(void*)+0x28d>	1000028d: R_386_PC32	operator new(unsigned long)
10000291:	89 c5                	mov    ebp,eax
10000293:	83 c4 0c             	add    esp,0xc
10000296:	53                   	push   ebx
10000297:	57                   	push   edi
10000298:	6a 64                	push   0x64
1000029a:	6a 64                	push   0x64
1000029c:	6a 32                	push   0x32
1000029e:	68 f4 01 00 00       	push   0x1f4
100002a3:	50                   	push   eax
100002a4:	e8 fc ff ff ff       	call   100002a5 <start(void*)+0x2a5>	100002a5: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100002a9:	83 c4 18             	add    esp,0x18
100002ac:	55                   	push   ebp
100002ad:	56                   	push   esi
100002ae:	e8 fc ff ff ff       	call   100002af <start(void*)+0x2af>	100002af: R_386_PC32	GDO::addChild(GDO*)
100002b3:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100002ba:	e8 fc ff ff ff       	call   100002bb <start(void*)+0x2bb>	100002bb: R_386_PC32	operator new(unsigned long)
100002bf:	89 c7                	mov    edi,eax
100002c1:	83 c4 0c             	add    esp,0xc
100002c4:	53                   	push   ebx
100002c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100002c9:	6a 64                	push   0x64
100002cb:	6a 64                	push   0x64
100002cd:	68 c8 00 00 00       	push   0xc8
100002d2:	6a 32                	push   0x32
100002d4:	50                   	push   eax
100002d5:	e8 fc ff ff ff       	call   100002d6 <start(void*)+0x2d6>	100002d6: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100002da:	83 c4 18             	add    esp,0x18
100002dd:	57                   	push   edi
100002de:	56                   	push   esi
100002df:	e8 fc ff ff ff       	call   100002e0 <start(void*)+0x2e0>	100002e0: R_386_PC32	GDO::addChild(GDO*)
100002e4:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100002eb:	e8 fc ff ff ff       	call   100002ec <start(void*)+0x2ec>	100002ec: R_386_PC32	operator new(unsigned long)
100002f0:	89 c7                	mov    edi,eax
100002f2:	83 c4 0c             	add    esp,0xc
100002f5:	53                   	push   ebx
100002f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100002fa:	6a 64                	push   0x64
100002fc:	6a 64                	push   0x64
100002fe:	68 c8 00 00 00       	push   0xc8
10000303:	68 c8 00 00 00       	push   0xc8
10000308:	50                   	push   eax
10000309:	e8 fc ff ff ff       	call   1000030a <start(void*)+0x30a>	1000030a: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000030e:	83 c4 18             	add    esp,0x18
10000311:	57                   	push   edi
10000312:	56                   	push   esi
10000313:	e8 fc ff ff ff       	call   10000314 <start(void*)+0x314>	10000314: R_386_PC32	GDO::addChild(GDO*)
10000318:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000031f:	e8 fc ff ff ff       	call   10000320 <start(void*)+0x320>	10000320: R_386_PC32	operator new(unsigned long)
10000324:	89 c7                	mov    edi,eax
10000326:	83 c4 0c             	add    esp,0xc
10000329:	53                   	push   ebx
1000032a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000032e:	6a 64                	push   0x64
10000330:	6a 64                	push   0x64
10000332:	68 c8 00 00 00       	push   0xc8
10000337:	68 5e 01 00 00       	push   0x15e
1000033c:	50                   	push   eax
1000033d:	e8 fc ff ff ff       	call   1000033e <start(void*)+0x33e>	1000033e: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000342:	83 c4 18             	add    esp,0x18
10000345:	57                   	push   edi
10000346:	56                   	push   esi
10000347:	e8 fc ff ff ff       	call   10000348 <start(void*)+0x348>	10000348: R_386_PC32	GDO::addChild(GDO*)
1000034c:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000353:	e8 fc ff ff ff       	call   10000354 <start(void*)+0x354>	10000354: R_386_PC32	operator new(unsigned long)
10000358:	89 c7                	mov    edi,eax
1000035a:	83 c4 0c             	add    esp,0xc
1000035d:	53                   	push   ebx
1000035e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000362:	6a 64                	push   0x64
10000364:	6a 64                	push   0x64
10000366:	68 c8 00 00 00       	push   0xc8
1000036b:	68 f4 01 00 00       	push   0x1f4
10000370:	50                   	push   eax
10000371:	e8 fc ff ff ff       	call   10000372 <start(void*)+0x372>	10000372: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000376:	83 c4 18             	add    esp,0x18
10000379:	57                   	push   edi
1000037a:	56                   	push   esi
1000037b:	e8 fc ff ff ff       	call   1000037c <start(void*)+0x37c>	1000037c: R_386_PC32	GDO::addChild(GDO*)
10000380:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000387:	e8 fc ff ff ff       	call   10000388 <start(void*)+0x388>	10000388: R_386_PC32	operator new(unsigned long)
1000038c:	89 c7                	mov    edi,eax
1000038e:	83 c4 0c             	add    esp,0xc
10000391:	53                   	push   ebx
10000392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000396:	6a 64                	push   0x64
10000398:	6a 64                	push   0x64
1000039a:	68 5e 01 00 00       	push   0x15e
1000039f:	6a 32                	push   0x32
100003a1:	50                   	push   eax
100003a2:	e8 fc ff ff ff       	call   100003a3 <start(void*)+0x3a3>	100003a3: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100003a7:	83 c4 18             	add    esp,0x18
100003aa:	57                   	push   edi
100003ab:	56                   	push   esi
100003ac:	e8 fc ff ff ff       	call   100003ad <start(void*)+0x3ad>	100003ad: R_386_PC32	GDO::addChild(GDO*)
100003b1:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100003b8:	e8 fc ff ff ff       	call   100003b9 <start(void*)+0x3b9>	100003b9: R_386_PC32	operator new(unsigned long)
100003bd:	89 c7                	mov    edi,eax
100003bf:	83 c4 0c             	add    esp,0xc
100003c2:	53                   	push   ebx
100003c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100003c7:	6a 64                	push   0x64
100003c9:	6a 64                	push   0x64
100003cb:	68 5e 01 00 00       	push   0x15e
100003d0:	68 c8 00 00 00       	push   0xc8
100003d5:	50                   	push   eax
100003d6:	e8 fc ff ff ff       	call   100003d7 <start(void*)+0x3d7>	100003d7: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100003db:	83 c4 18             	add    esp,0x18
100003de:	57                   	push   edi
100003df:	56                   	push   esi
100003e0:	e8 fc ff ff ff       	call   100003e1 <start(void*)+0x3e1>	100003e1: R_386_PC32	GDO::addChild(GDO*)
100003e5:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100003ec:	e8 fc ff ff ff       	call   100003ed <start(void*)+0x3ed>	100003ed: R_386_PC32	operator new(unsigned long)
100003f1:	89 c7                	mov    edi,eax
100003f3:	83 c4 0c             	add    esp,0xc
100003f6:	53                   	push   ebx
100003f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100003fb:	6a 64                	push   0x64
100003fd:	6a 64                	push   0x64
100003ff:	68 5e 01 00 00       	push   0x15e
10000404:	68 5e 01 00 00       	push   0x15e
10000409:	50                   	push   eax
1000040a:	e8 fc ff ff ff       	call   1000040b <start(void*)+0x40b>	1000040b: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000040f:	83 c4 18             	add    esp,0x18
10000412:	57                   	push   edi
10000413:	56                   	push   esi
10000414:	e8 fc ff ff ff       	call   10000415 <start(void*)+0x415>	10000415: R_386_PC32	GDO::addChild(GDO*)
10000419:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000420:	e8 fc ff ff ff       	call   10000421 <start(void*)+0x421>	10000421: R_386_PC32	operator new(unsigned long)
10000425:	89 c7                	mov    edi,eax
10000427:	83 c4 0c             	add    esp,0xc
1000042a:	53                   	push   ebx
1000042b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000042f:	6a 64                	push   0x64
10000431:	6a 64                	push   0x64
10000433:	68 5e 01 00 00       	push   0x15e
10000438:	68 f4 01 00 00       	push   0x1f4
1000043d:	50                   	push   eax
1000043e:	e8 fc ff ff ff       	call   1000043f <start(void*)+0x43f>	1000043f: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000443:	83 c4 18             	add    esp,0x18
10000446:	57                   	push   edi
10000447:	56                   	push   esi
10000448:	e8 fc ff ff ff       	call   10000449 <start(void*)+0x449>	10000449: R_386_PC32	GDO::addChild(GDO*)
1000044d:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000454:	e8 fc ff ff ff       	call   10000455 <start(void*)+0x455>	10000455: R_386_PC32	operator new(unsigned long)
10000459:	89 c7                	mov    edi,eax
1000045b:	59                   	pop    ecx
1000045c:	5d                   	pop    ebp
1000045d:	53                   	push   ebx
1000045e:	68 c8 00 00 00       	push   0xc8
10000463:	68 2c 01 00 00       	push   0x12c
10000468:	6a 0a                	push   0xa
1000046a:	6a 0a                	push   0xa
1000046c:	50                   	push   eax
1000046d:	e8 fc ff ff ff       	call   1000046e <start(void*)+0x46e>	1000046e: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000472:	89 77 08             	mov    DWORD PTR [edi+0x8],esi
10000475:	83 c4 18             	add    esp,0x18
10000478:	57                   	push   edi
10000479:	56                   	push   esi
1000047a:	e8 fc ff ff ff       	call   1000047b <start(void*)+0x47b>	1000047b: R_386_PC32	GDO::addChild(GDO*)
1000047f:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000486:	e8 fc ff ff ff       	call   10000487 <start(void*)+0x487>	10000487: R_386_PC32	operator new(unsigned long)
1000048b:	89 c5                	mov    ebp,eax
1000048d:	83 c4 0c             	add    esp,0xc
10000490:	ff 77 04             	push   DWORD PTR [edi+0x4]
10000493:	68 ff 00 00 00       	push   0xff
10000498:	68 c8 00 00 00       	push   0xc8
1000049d:	68 2c 01 00 00       	push   0x12c
100004a2:	6a 00                	push   0x0
100004a4:	6a 00                	push   0x0
100004a6:	50                   	push   eax
100004a7:	e8 fc ff ff ff       	call   100004a8 <start(void*)+0x4a8>	100004a8: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
100004ac:	83 c4 18             	add    esp,0x18
100004af:	55                   	push   ebp
100004b0:	57                   	push   edi
100004b1:	e8 fc ff ff ff       	call   100004b2 <start(void*)+0x4b2>	100004b2: R_386_PC32	GDO::addChild(GDO*)
100004b6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100004bd:	e8 fc ff ff ff       	call   100004be <start(void*)+0x4be>	100004be: R_386_PC32	operator new(unsigned long)
100004c2:	89 c1                	mov    ecx,eax
100004c4:	58                   	pop    eax
100004c5:	5a                   	pop    edx
100004c6:	6a 09                	push   0x9
100004c8:	51                   	push   ecx
100004c9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
100004cd:	e8 fc ff ff ff       	call   100004ce <start(void*)+0x4ce>	100004ce: R_386_PC32	Brush::Brush(BrushType)
100004d2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100004d6:	c7 41 04 00 ff 00 00 	mov    DWORD PTR [ecx+0x4],0xff00
100004dd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100004e1:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100004e8:	e8 fc ff ff ff       	call   100004e9 <start(void*)+0x4e9>	100004e9: R_386_PC32	operator new(unsigned long)
100004ed:	59                   	pop    ecx
100004ee:	5d                   	pop    ebp
100004ef:	6a 07                	push   0x7
100004f1:	50                   	push   eax
100004f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100004f6:	e8 fc ff ff ff       	call   100004f7 <start(void*)+0x4f7>	100004f7: R_386_PC32	Brush::Brush(BrushType)
100004fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100004ff:	c7 42 04 00 88 ff 00 	mov    DWORD PTR [edx+0x4],0xff8800
10000506:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000050d:	e8 fc ff ff ff       	call   1000050e <start(void*)+0x50e>	1000050e: R_386_PC32	operator new(unsigned long)
10000512:	89 c5                	mov    ebp,eax
10000514:	58                   	pop    eax
10000515:	5a                   	pop    edx
10000516:	ff 77 04             	push   DWORD PTR [edi+0x4]
10000519:	6a 78                	push   0x78
1000051b:	68 c8 00 00 00       	push   0xc8
10000520:	6a 32                	push   0x32
10000522:	6a 32                	push   0x32
10000524:	55                   	push   ebp
10000525:	e8 fc ff ff ff       	call   10000526 <start(void*)+0x526>	10000526: R_386_PC32	Region::Region(int, int, int, int, Context*)
1000052a:	89 7d 08             	mov    DWORD PTR [ebp+0x8],edi
1000052d:	83 c4 18             	add    esp,0x18
10000530:	55                   	push   ebp
10000531:	57                   	push   edi
10000532:	e8 fc ff ff ff       	call   10000533 <start(void*)+0x533>	10000533: R_386_PC32	GDO::addChild(GDO*)
10000537:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000053e:	e8 fc ff ff ff       	call   1000053f <start(void*)+0x53f>	1000053f: R_386_PC32	operator new(unsigned long)
10000543:	89 c7                	mov    edi,eax
10000545:	83 c4 0c             	add    esp,0xc
10000548:	ff 75 04             	push   DWORD PTR [ebp+0x4]
1000054b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
1000054f:	51                   	push   ecx
10000550:	6a 78                	push   0x78
10000552:	68 c8 00 00 00       	push   0xc8
10000557:	6a 00                	push   0x0
10000559:	6a 00                	push   0x0
1000055b:	50                   	push   eax
1000055c:	e8 fc ff ff ff       	call   1000055d <start(void*)+0x55d>	1000055d: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000561:	83 c4 18             	add    esp,0x18
10000564:	57                   	push   edi
10000565:	55                   	push   ebp
10000566:	e8 fc ff ff ff       	call   10000567 <start(void*)+0x567>	10000567: R_386_PC32	GDO::addChild(GDO*)
1000056b:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000572:	e8 fc ff ff ff       	call   10000573 <start(void*)+0x573>	10000573: R_386_PC32	operator new(unsigned long)
10000577:	89 c7                	mov    edi,eax
10000579:	83 c4 0c             	add    esp,0xc
1000057c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
1000057f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000583:	52                   	push   edx
10000584:	6a 46                	push   0x46
10000586:	6a 55                	push   0x55
10000588:	6a 14                	push   0x14
1000058a:	6a 64                	push   0x64
1000058c:	50                   	push   eax
1000058d:	e8 fc ff ff ff       	call   1000058e <start(void*)+0x58e>	1000058e: R_386_PC32	Ellipse::Ellipse(int, int, int, int, Brush*, Context*)
10000592:	83 c4 18             	add    esp,0x18
10000595:	57                   	push   edi
10000596:	55                   	push   ebp
10000597:	e8 fc ff ff ff       	call   10000598 <start(void*)+0x598>	10000598: R_386_PC32	GDO::addChild(GDO*)
1000059c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100005a3:	e8 fc ff ff ff       	call   100005a4 <start(void*)+0x5a4>	100005a4: R_386_PC32	getLegacyFont(LegacyFontType)
100005a8:	89 c5                	mov    ebp,eax
100005aa:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100005b1:	e8 fc ff ff ff       	call   100005b2 <start(void*)+0x5b2>	100005b2: R_386_PC32	operator new(unsigned long)
100005b6:	89 c7                	mov    edi,eax
100005b8:	83 c4 0c             	add    esp,0xc
100005bb:	53                   	push   ebx
100005bc:	6a 00                	push   0x0
100005be:	68 c2 01 00 00       	push   0x1c2
100005c3:	6a 32                	push   0x32
100005c5:	68 5e 2e 00 10       	push   0x10002e5e	100005c6: R_386_32	.text
100005ca:	55                   	push   ebp
100005cb:	50                   	push   eax
100005cc:	e8 fc ff ff ff       	call   100005cd <start(void*)+0x5cd>	100005cd: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
100005d1:	83 c4 18             	add    esp,0x18
100005d4:	57                   	push   edi
100005d5:	56                   	push   esi
100005d6:	e8 fc ff ff ff       	call   100005d7 <start(void*)+0x5d7>	100005d7: R_386_PC32	GDO::addChild(GDO*)
100005db:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
100005e2:	e8 fc ff ff ff       	call   100005e3 <start(void*)+0x5e3>	100005e3: R_386_PC32	getLegacyFont(LegacyFontType)
100005e7:	89 c5                	mov    ebp,eax
100005e9:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100005f0:	e8 fc ff ff ff       	call   100005f1 <start(void*)+0x5f1>	100005f1: R_386_PC32	operator new(unsigned long)
100005f5:	89 c7                	mov    edi,eax
100005f7:	83 c4 0c             	add    esp,0xc
100005fa:	53                   	push   ebx
100005fb:	6a 00                	push   0x0
100005fd:	68 c2 01 00 00       	push   0x1c2
10000602:	68 96 00 00 00       	push   0x96
10000607:	68 6f 2e 00 10       	push   0x10002e6f	10000608: R_386_32	.text
1000060c:	55                   	push   ebp
1000060d:	50                   	push   eax
1000060e:	e8 fc ff ff ff       	call   1000060f <start(void*)+0x60f>	1000060f: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
10000613:	83 c4 18             	add    esp,0x18
10000616:	57                   	push   edi
10000617:	56                   	push   esi
10000618:	e8 fc ff ff ff       	call   10000619 <start(void*)+0x619>	10000619: R_386_PC32	GDO::addChild(GDO*)
1000061d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
10000624:	e8 fc ff ff ff       	call   10000625 <start(void*)+0x625>	10000625: R_386_PC32	getLegacyFont(LegacyFontType)
10000629:	89 c5                	mov    ebp,eax
1000062b:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000632:	e8 fc ff ff ff       	call   10000633 <start(void*)+0x633>	10000633: R_386_PC32	operator new(unsigned long)
10000637:	89 c7                	mov    edi,eax
10000639:	83 c4 0c             	add    esp,0xc
1000063c:	53                   	push   ebx
1000063d:	6a 00                	push   0x0
1000063f:	68 c2 01 00 00       	push   0x1c2
10000644:	68 04 01 00 00       	push   0x104
10000649:	68 80 2e 00 10       	push   0x10002e80	1000064a: R_386_32	.text
1000064e:	55                   	push   ebp
1000064f:	50                   	push   eax
10000650:	e8 fc ff ff ff       	call   10000651 <start(void*)+0x651>	10000651: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
10000655:	83 c4 18             	add    esp,0x18
10000658:	57                   	push   edi
10000659:	56                   	push   esi
1000065a:	e8 fc ff ff ff       	call   1000065b <start(void*)+0x65b>	1000065b: R_386_PC32	GDO::addChild(GDO*)
1000065f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
10000666:	e8 fc ff ff ff       	call   10000667 <start(void*)+0x667>	10000667: R_386_PC32	getLegacyFont(LegacyFontType)
1000066b:	89 c5                	mov    ebp,eax
1000066d:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000674:	e8 fc ff ff ff       	call   10000675 <start(void*)+0x675>	10000675: R_386_PC32	operator new(unsigned long)
10000679:	89 c7                	mov    edi,eax
1000067b:	83 c4 0c             	add    esp,0xc
1000067e:	53                   	push   ebx
1000067f:	6a 00                	push   0x0
10000681:	68 c2 01 00 00       	push   0x1c2
10000686:	68 5e 01 00 00       	push   0x15e
1000068b:	68 8f 2e 00 10       	push   0x10002e8f	1000068c: R_386_32	.text
10000690:	55                   	push   ebp
10000691:	50                   	push   eax
10000692:	e8 fc ff ff ff       	call   10000693 <start(void*)+0x693>	10000693: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
10000697:	83 c4 18             	add    esp,0x18
1000069a:	57                   	push   edi
1000069b:	56                   	push   esi
1000069c:	e8 fc ff ff ff       	call   1000069d <start(void*)+0x69d>	1000069d: R_386_PC32	GDO::addChild(GDO*)
100006a1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
100006a8:	e8 fc ff ff ff       	call   100006a9 <start(void*)+0x6a9>	100006a9: R_386_PC32	getLegacyFont(LegacyFontType)
100006ad:	89 c5                	mov    ebp,eax
100006af:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100006b6:	e8 fc ff ff ff       	call   100006b7 <start(void*)+0x6b7>	100006b7: R_386_PC32	operator new(unsigned long)
100006bb:	89 c7                	mov    edi,eax
100006bd:	83 c4 0c             	add    esp,0xc
100006c0:	53                   	push   ebx
100006c1:	6a 00                	push   0x0
100006c3:	68 c2 01 00 00       	push   0x1c2
100006c8:	68 c2 01 00 00       	push   0x1c2
100006cd:	68 a5 2e 00 10       	push   0x10002ea5	100006ce: R_386_32	.text
100006d2:	55                   	push   ebp
100006d3:	50                   	push   eax
100006d4:	e8 fc ff ff ff       	call   100006d5 <start(void*)+0x6d5>	100006d5: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
100006d9:	83 c4 18             	add    esp,0x18
100006dc:	57                   	push   edi
100006dd:	56                   	push   esi
100006de:	e8 fc ff ff ff       	call   100006df <start(void*)+0x6df>	100006df: R_386_PC32	GDO::addChild(GDO*)
100006e3:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
100006ea:	e8 fc ff ff ff       	call   100006eb <start(void*)+0x6eb>	100006eb: R_386_PC32	getLegacyFont(LegacyFontType)
100006ef:	89 c5                	mov    ebp,eax
100006f1:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100006f8:	e8 fc ff ff ff       	call   100006f9 <start(void*)+0x6f9>	100006f9: R_386_PC32	operator new(unsigned long)
100006fd:	89 c7                	mov    edi,eax
100006ff:	83 c4 0c             	add    esp,0xc
10000702:	53                   	push   ebx
10000703:	6a 00                	push   0x0
10000705:	68 d1 01 00 00       	push   0x1d1
1000070a:	68 5e 01 00 00       	push   0x15e
1000070f:	68 c0 2e 00 10       	push   0x10002ec0	10000710: R_386_32	.text
10000714:	55                   	push   ebp
10000715:	50                   	push   eax
10000716:	e8 fc ff ff ff       	call   10000717 <start(void*)+0x717>	10000717: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
1000071b:	83 c4 18             	add    esp,0x18
1000071e:	57                   	push   edi
1000071f:	56                   	push   esi
10000720:	e8 fc ff ff ff       	call   10000721 <start(void*)+0x721>	10000721: R_386_PC32	GDO::addChild(GDO*)
10000725:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000072c:	e8 fc ff ff ff       	call   1000072d <start(void*)+0x72d>	1000072d: R_386_PC32	operator new(unsigned long)
10000731:	89 c7                	mov    edi,eax
10000733:	59                   	pop    ecx
10000734:	5d                   	pop    ebp
10000735:	53                   	push   ebx
10000736:	68 c8 00 00 00       	push   0xc8
1000073b:	68 2c 01 00 00       	push   0x12c
10000740:	68 82 00 00 00       	push   0x82
10000745:	68 aa 00 00 00       	push   0xaa
1000074a:	50                   	push   eax
1000074b:	e8 fc ff ff ff       	call   1000074c <start(void*)+0x74c>	1000074c: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000750:	89 77 08             	mov    DWORD PTR [edi+0x8],esi
10000753:	83 c4 14             	add    esp,0x14
10000756:	6a 58                	push   0x58
10000758:	e8 fc ff ff ff       	call   10000759 <start(void*)+0x759>	10000759: R_386_PC32	operator new(unsigned long)
1000075d:	89 c5                	mov    ebp,eax
1000075f:	83 c4 0c             	add    esp,0xc
10000762:	53                   	push   ebx
10000763:	68 aa aa aa 00       	push   0xaaaaaa
10000768:	68 c8 00 00 00       	push   0xc8
1000076d:	68 2c 01 00 00       	push   0x12c
10000772:	6a 00                	push   0x0
10000774:	6a 00                	push   0x0
10000776:	50                   	push   eax
10000777:	e8 fc ff ff ff       	call   10000778 <start(void*)+0x778>	10000778: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
1000077c:	83 c4 18             	add    esp,0x18
1000077f:	55                   	push   ebp
10000780:	57                   	push   edi
10000781:	e8 fc ff ff ff       	call   10000782 <start(void*)+0x782>	10000782: R_386_PC32	GDO::addChild(GDO*)
10000786:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000078d:	e8 fc ff ff ff       	call   1000078e <start(void*)+0x78e>	1000078e: R_386_PC32	operator new(unsigned long)
10000792:	89 c5                	mov    ebp,eax
10000794:	83 c4 0c             	add    esp,0xc
10000797:	53                   	push   ebx
10000798:	68 ff 00 00 00       	push   0xff
1000079d:	6a 14                	push   0x14
1000079f:	68 2c 01 00 00       	push   0x12c
100007a4:	6a 00                	push   0x0
100007a6:	6a 00                	push   0x0
100007a8:	50                   	push   eax
100007a9:	e8 fc ff ff ff       	call   100007aa <start(void*)+0x7aa>	100007aa: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
100007ae:	83 c4 18             	add    esp,0x18
100007b1:	55                   	push   ebp
100007b2:	57                   	push   edi
100007b3:	e8 fc ff ff ff       	call   100007b4 <start(void*)+0x7b4>	100007b4: R_386_PC32	GDO::addChild(GDO*)
100007b8:	58                   	pop    eax
100007b9:	5a                   	pop    edx
100007ba:	57                   	push   edi
100007bb:	56                   	push   esi
100007bc:	e8 fc ff ff ff       	call   100007bd <start(void*)+0x7bd>	100007bd: R_386_PC32	GDO::addChild(GDO*)
100007c1:	83 c4 0c             	add    esp,0xc
100007c4:	6a 01                	push   0x1
100007c6:	6a 00                	push   0x0
100007c8:	56                   	push   esi
100007c9:	e8 fc ff ff ff       	call   100007ca <start(void*)+0x7ca>	100007ca: R_386_PC32	GDO::update(List<CRect*>*, bool)
100007ce:	83 c4 0c             	add    esp,0xc
100007d1:	6a 01                	push   0x1
100007d3:	6a 00                	push   0x0
100007d5:	57                   	push   edi
100007d6:	e8 fc ff ff ff       	call   100007d7 <start(void*)+0x7d7>	100007d7: R_386_PC32	GDO::update(List<CRect*>*, bool)
100007db:	e8 fc ff ff ff       	call   100007dc <start(void*)+0x7dc>	100007dc: R_386_PC32	startMouse()
100007e0:	83 c4 0c             	add    esp,0xc
100007e3:	6a 00                	push   0x0
100007e5:	68 c8 00 00 00       	push   0xc8
100007ea:	68 2c 01 00 00       	push   0x12c
100007ef:	e8 fc ff ff ff       	call   100007f0 <start(void*)+0x7f0>	100007f0: R_386_PC32	processMouse(int, int, int)
100007f4:	83 c4 10             	add    esp,0x10
100007f7:	83 ec 0c             	sub    esp,0xc
100007fa:	6a 02                	push   0x2
100007fc:	e8 fc ff ff ff       	call   100007fd <start(void*)+0x7fd>	100007fd: R_386_PC32	blockTask(TaskState)
10000801:	eb f1                	jmp    100007f4 <start(void*)+0x7f4>

10000803 <begin(void*)>:
10000803:	83 ec 18             	sub    esp,0x18
10000806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000080a:	e8 fc ff ff ff       	call   1000080b <begin(void*)+0x8>	1000080b: R_386_PC32	start(void*)
1000080f:	90                   	nop

10000810 <Brush::Brush(unsigned int, unsigned int)>:
10000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000814:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000818:	89 10                	mov    DWORD PTR [eax],edx
1000081a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
1000081e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000821:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
10000828:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
1000082f:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
10000836:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
1000083d:	c3                   	ret    

1000083e <Brush::Brush(BrushType)>:
1000083e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000842:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000848:	c7 40 04 ff ff ff ff 	mov    DWORD PTR [eax+0x4],0xffffffff
1000084f:	c6 40 10 ff          	mov    BYTE PTR [eax+0x10],0xff
10000853:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
1000085a:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
10000861:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10000868:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
1000086f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10000873:	8d 51 ff             	lea    edx,[ecx-0x1]
10000876:	83 fa 0e             	cmp    edx,0xe
10000879:	0f 87 ae 00 00 00    	ja     1000092d <Brush::Brush(BrushType)+0xef>
1000087f:	ff 24 95 ec 2e 00 10 	jmp    DWORD PTR [edx*4+0x10002eec]	10000882: R_386_32	.text
10000886:	c7 00 aa aa aa 00    	mov    DWORD PTR [eax],0xaaaaaa
1000088c:	c3                   	ret    
1000088d:	c7 00 80 80 80 00    	mov    DWORD PTR [eax],0x808080
10000893:	c3                   	ret    
10000894:	c7 00 55 55 55 00    	mov    DWORD PTR [eax],0x555555
1000089a:	c3                   	ret    
1000089b:	c7 00 ff ff ff 00    	mov    DWORD PTR [eax],0xffffff
100008a1:	c3                   	ret    
100008a2:	c6 40 10 00          	mov    BYTE PTR [eax+0x10],0x0
100008a6:	c3                   	ret    
100008a7:	c7 40 10 01 08 04 02 	mov    DWORD PTR [eax+0x10],0x2040801
100008ae:	eb 6f                	jmp    1000091f <Brush::Brush(BrushType)+0xe1>
100008b0:	c7 40 10 01 02 04 08 	mov    DWORD PTR [eax+0x10],0x8040201
100008b7:	eb 66                	jmp    1000091f <Brush::Brush(BrushType)+0xe1>
100008b9:	c7 40 10 01 01 01 0f 	mov    DWORD PTR [eax+0x10],0xf010101
100008c0:	eb 5d                	jmp    1000091f <Brush::Brush(BrushType)+0xe1>
100008c2:	c7 40 10 08 14 22 01 	mov    DWORD PTR [eax+0x10],0x1221408
100008c9:	66 c7 40 14 22 14    	mov    WORD PTR [eax+0x14],0x1422
100008cf:	c7 40 18 06 00 00 00 	mov    DWORD PTR [eax+0x18],0x6
100008d6:	c7 40 1c 06 00 00 00 	mov    DWORD PTR [eax+0x1c],0x6
100008dd:	c3                   	ret    
100008de:	c7 40 10 00 00 00 01 	mov    DWORD PTR [eax+0x10],0x1000000
100008e5:	eb 3f                	jmp    10000926 <Brush::Brush(BrushType)+0xe8>
100008e7:	c6 40 10 02          	mov    BYTE PTR [eax+0x10],0x2
100008eb:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
100008f2:	c3                   	ret    
100008f3:	66 c7 40 10 02 01    	mov    WORD PTR [eax+0x10],0x102
100008f9:	eb 0e                	jmp    10000909 <Brush::Brush(BrushType)+0xcb>
100008fb:	66 c7 40 10 02 00    	mov    WORD PTR [eax+0x10],0x2
10000901:	eb 06                	jmp    10000909 <Brush::Brush(BrushType)+0xcb>
10000903:	66 c7 40 10 03 02    	mov    WORD PTR [eax+0x10],0x203
10000909:	c7 40 18 02 00 00 00 	mov    DWORD PTR [eax+0x18],0x2
10000910:	c7 40 1c 02 00 00 00 	mov    DWORD PTR [eax+0x1c],0x2
10000917:	c3                   	ret    
10000918:	c7 40 10 0c 0c 03 03 	mov    DWORD PTR [eax+0x10],0x3030c0c
1000091f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
10000926:	c7 40 1c 04 00 00 00 	mov    DWORD PTR [eax+0x1c],0x4
1000092d:	c3                   	ret    

1000092e <List<CRect*>::length() [clone .isra.0]>:
1000092e:	31 d2                	xor    edx,edx
10000930:	85 c0                	test   eax,eax
10000932:	74 06                	je     1000093a <List<CRect*>::length() [clone .isra.0]+0xc>
10000934:	42                   	inc    edx
10000935:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000938:	eb f6                	jmp    10000930 <List<CRect*>::length() [clone .isra.0]+0x2>
1000093a:	89 d0                	mov    eax,edx
1000093c:	c3                   	ret    
1000093d:	90                   	nop

1000093e <List<CRect*>::getDesiredElement(int) [clone .isra.1]>:
1000093e:	53                   	push   ebx
1000093f:	89 c1                	mov    ecx,eax
10000941:	89 d3                	mov    ebx,edx
10000943:	e8 e6 ff ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
10000948:	39 d8                	cmp    eax,ebx
1000094a:	7c 0a                	jl     10000956 <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0x18>
1000094c:	85 db                	test   ebx,ebx
1000094e:	74 06                	je     10000956 <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0x18>
10000950:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10000953:	4b                   	dec    ebx
10000954:	eb f6                	jmp    1000094c <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0xe>
10000956:	89 c8                	mov    eax,ecx
10000958:	5b                   	pop    ebx
10000959:	c3                   	ret    

1000095a <CRect::CRect()>:
1000095a:	c3                   	ret    
1000095b:	90                   	nop

1000095c <CRect::CRect(int, int, int, int)>:
1000095c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000960:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000964:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10000967:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
1000096b:	89 10                	mov    DWORD PTR [eax],edx
1000096d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000971:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10000974:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000978:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000097b:	c3                   	ret    

1000097c <CRect::intersect(CRect*)>:
1000097c:	55                   	push   ebp
1000097d:	57                   	push   edi
1000097e:	56                   	push   esi
1000097f:	53                   	push   ebx
10000980:	83 ec 1c             	sub    esp,0x1c
10000983:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000987:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
1000098b:	8b 0f                	mov    ecx,DWORD PTR [edi]
1000098d:	8b 75 04             	mov    esi,DWORD PTR [ebp+0x4]
10000990:	31 c0                	xor    eax,eax
10000992:	39 f1                	cmp    ecx,esi
10000994:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10000998:	7f 7f                	jg     10000a19 <CRect::intersect(CRect*)+0x9d>
1000099a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
1000099d:	89 04 24             	mov    DWORD PTR [esp],eax
100009a0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
100009a3:	31 c0                	xor    eax,eax
100009a5:	39 14 24             	cmp    DWORD PTR [esp],edx
100009a8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
100009ac:	7c 6b                	jl     10000a19 <CRect::intersect(CRect*)+0x9d>
100009ae:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
100009b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100009b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
100009b8:	31 c0                	xor    eax,eax
100009ba:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
100009be:	7f 59                	jg     10000a19 <CRect::intersect(CRect*)+0x9d>
100009c0:	8b 7f 0c             	mov    edi,DWORD PTR [edi+0xc]
100009c3:	8b 6d 08             	mov    ebp,DWORD PTR [ebp+0x8]
100009c6:	39 ef                	cmp    edi,ebp
100009c8:	7c 4f                	jl     10000a19 <CRect::intersect(CRect*)+0x9d>
100009ca:	83 ec 0c             	sub    esp,0xc
100009cd:	6a 10                	push   0x10
100009cf:	e8 fc ff ff ff       	call   100009d0 <CRect::intersect(CRect*)+0x54>	100009d0: R_386_PC32	malloc
100009d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100009d8:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
100009db:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100009df:	89 08                	mov    DWORD PTR [eax],ecx
100009e1:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
100009e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100009e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100009eb:	83 c4 10             	add    esp,0x10
100009ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100009f2:	39 d1                	cmp    ecx,edx
100009f4:	7f 02                	jg     100009f8 <CRect::intersect(CRect*)+0x7c>
100009f6:	89 10                	mov    DWORD PTR [eax],edx
100009f8:	39 6c 24 04          	cmp    DWORD PTR [esp+0x4],ebp
100009fc:	7f 03                	jg     10000a01 <CRect::intersect(CRect*)+0x85>
100009fe:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
10000a01:	3b 30                	cmp    esi,DWORD PTR [eax]
10000a03:	7c 08                	jl     10000a0d <CRect::intersect(CRect*)+0x91>
10000a05:	3b 34 24             	cmp    esi,DWORD PTR [esp]
10000a08:	7f 03                	jg     10000a0d <CRect::intersect(CRect*)+0x91>
10000a0a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
10000a0d:	3b 58 08             	cmp    ebx,DWORD PTR [eax+0x8]
10000a10:	7c 07                	jl     10000a19 <CRect::intersect(CRect*)+0x9d>
10000a12:	39 fb                	cmp    ebx,edi
10000a14:	7f 03                	jg     10000a19 <CRect::intersect(CRect*)+0x9d>
10000a16:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
10000a19:	83 c4 1c             	add    esp,0x1c
10000a1c:	5b                   	pop    ebx
10000a1d:	5e                   	pop    esi
10000a1e:	5f                   	pop    edi
10000a1f:	5d                   	pop    ebp
10000a20:	c3                   	ret    
10000a21:	90                   	nop

10000a22 <Context::Context(Video*)>:
10000a22:	53                   	push   ebx
10000a23:	83 ec 14             	sub    esp,0x14
10000a26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000a2e:	89 03                	mov    DWORD PTR [ebx],eax
10000a30:	50                   	push   eax
10000a31:	e8 fc ff ff ff       	call   10000a32 <Context::Context(Video*)+0x10>	10000a32: R_386_PC32	Video::getWidth()
10000a36:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10000a39:	58                   	pop    eax
10000a3a:	ff 33                	push   DWORD PTR [ebx]
10000a3c:	e8 fc ff ff ff       	call   10000a3d <Context::Context(Video*)+0x1b>	10000a3d: R_386_PC32	Video::getHeight()
10000a41:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10000a44:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
10000a4b:	e8 fc ff ff ff       	call   10000a4c <Context::Context(Video*)+0x2a>	10000a4c: R_386_PC32	malloc
10000a50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000a57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000a5d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
10000a60:	c6 43 14 00          	mov    BYTE PTR [ebx+0x14],0x0
10000a64:	83 c4 18             	add    esp,0x18
10000a67:	5b                   	pop    ebx
10000a68:	c3                   	ret    
10000a69:	90                   	nop

10000a6a <Context::clippedRect(int, int, int, int, CRect*, Brush*)>:
10000a6a:	55                   	push   ebp
10000a6b:	57                   	push   edi
10000a6c:	56                   	push   esi
10000a6d:	53                   	push   ebx
10000a6e:	83 ec 2c             	sub    esp,0x2c
10000a71:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10000a75:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000a79:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
10000a7d:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
10000a81:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
10000a85:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10000a89:	01 f9                	add    ecx,edi
10000a8b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10000a8f:	01 f0                	add    eax,esi
10000a91:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
10000a94:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10000a98:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
10000a9b:	01 fe                	add    esi,edi
10000a9d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
10000aa1:	03 4d 0c             	add    ecx,DWORD PTR [ebp+0xc]
10000aa4:	01 f8                	add    eax,edi
10000aa6:	8b 32                	mov    esi,DWORD PTR [edx]
10000aa8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10000aac:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
10000ab0:	7d 08                	jge    10000aba <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x50>
10000ab2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10000ab6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10000aba:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
10000abd:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
10000ac1:	7d 04                	jge    10000ac7 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x5d>
10000ac3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10000ac7:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
10000aca:	47                   	inc    edi
10000acb:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10000acf:	39 cf                	cmp    edi,ecx
10000ad1:	7e 04                	jle    10000ad7 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x6d>
10000ad3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10000ad7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
10000ada:	8d 4a 01             	lea    ecx,[edx+0x1]
10000add:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
10000ae1:	39 c1                	cmp    ecx,eax
10000ae3:	7e 04                	jle    10000ae9 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x7f>
10000ae5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000ae9:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
10000aed:	7d 62                	jge    10000b51 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe7>
10000aef:	89 f0                	mov    eax,esi
10000af1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000af5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
10000af8:	99                   	cdq    
10000af9:	f7 7b 1c             	idiv   DWORD PTR [ebx+0x1c]
10000afc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000b00:	0f b6 44 13 10       	movzx  eax,BYTE PTR [ebx+edx*1+0x10]
10000b05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000b09:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
10000b0d:	7d 3f                	jge    10000b4e <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe4>
10000b0f:	89 f8                	mov    eax,edi
10000b11:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000b15:	03 43 08             	add    eax,DWORD PTR [ebx+0x8]
10000b18:	99                   	cdq    
10000b19:	f7 7b 18             	idiv   DWORD PTR [ebx+0x18]
10000b1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000b20:	0f a3 d0             	bt     eax,edx
10000b23:	73 0f                	jae    10000b34 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xca>
10000b25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000b28:	8b 10                	mov    edx,DWORD PTR [eax]
10000b2a:	ff 33                	push   DWORD PTR [ebx]
10000b2c:	56                   	push   esi
10000b2d:	57                   	push   edi
10000b2e:	50                   	push   eax
10000b2f:	ff 52 24             	call   DWORD PTR [edx+0x24]
10000b32:	eb 14                	jmp    10000b48 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xde>
10000b34:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10000b37:	83 fa ff             	cmp    edx,0xffffffff
10000b3a:	74 0f                	je     10000b4b <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe1>
10000b3c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000b3f:	8b 08                	mov    ecx,DWORD PTR [eax]
10000b41:	52                   	push   edx
10000b42:	56                   	push   esi
10000b43:	57                   	push   edi
10000b44:	50                   	push   eax
10000b45:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10000b48:	83 c4 10             	add    esp,0x10
10000b4b:	47                   	inc    edi
10000b4c:	eb bb                	jmp    10000b09 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x9f>
10000b4e:	46                   	inc    esi
10000b4f:	eb 98                	jmp    10000ae9 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x7f>
10000b51:	83 c4 2c             	add    esp,0x2c
10000b54:	5b                   	pop    ebx
10000b55:	5e                   	pop    esi
10000b56:	5f                   	pop    edi
10000b57:	5d                   	pop    ebp
10000b58:	c3                   	ret    
10000b59:	90                   	nop

10000b5a <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)>:
10000b5a:	55                   	push   ebp
10000b5b:	57                   	push   edi
10000b5c:	56                   	push   esi
10000b5d:	53                   	push   ebx
10000b5e:	83 ec 1c             	sub    esp,0x1c
10000b61:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
10000b65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000b69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000b6c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000b70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000b74:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10000b77:	39 c2                	cmp    edx,eax
10000b79:	0f 8c c9 00 00 00    	jl     10000c48 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b7f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10000b83:	01 c5                	add    ebp,eax
10000b85:	8b 19                	mov    ebx,DWORD PTR [ecx]
10000b87:	39 dd                	cmp    ebp,ebx
10000b89:	0f 8e b9 00 00 00    	jle    10000c48 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b8f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10000b93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000b97:	03 70 10             	add    esi,DWORD PTR [eax+0x10]
10000b9a:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
10000b9d:	39 f0                	cmp    eax,esi
10000b9f:	0f 8c a3 00 00 00    	jl     10000c48 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000ba5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000ba9:	01 f7                	add    edi,esi
10000bab:	8b 49 08             	mov    ecx,DWORD PTR [ecx+0x8]
10000bae:	39 cf                	cmp    edi,ecx
10000bb0:	0f 8e 92 00 00 00    	jle    10000c48 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000bb6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000bbe:	3b 5c 24 04          	cmp    ebx,DWORD PTR [esp+0x4]
10000bc2:	7e 08                	jle    10000bcc <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x72>
10000bc4:	2b 5c 24 04          	sub    ebx,DWORD PTR [esp+0x4]
10000bc8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000bcc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10000bd0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
10000bd4:	39 ea                	cmp    edx,ebp
10000bd6:	7d 09                	jge    10000be1 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x87>
10000bd8:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
10000bdc:	42                   	inc    edx
10000bdd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000be1:	31 db                	xor    ebx,ebx
10000be3:	39 f1                	cmp    ecx,esi
10000be5:	7e 04                	jle    10000beb <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x91>
10000be7:	29 f1                	sub    ecx,esi
10000be9:	89 cb                	mov    ebx,ecx
10000beb:	39 f8                	cmp    eax,edi
10000bed:	7d 07                	jge    10000bf6 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x9c>
10000bef:	29 f0                	sub    eax,esi
10000bf1:	40                   	inc    eax
10000bf2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10000bf6:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
10000bf9:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
10000bfe:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
10000c02:	89 e8                	mov    eax,ebp
10000c04:	29 f0                	sub    eax,esi
10000c06:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
10000c0a:	7e 3c                	jle    10000c48 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000c0c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10000c10:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
10000c14:	7e 2b                	jle    10000c41 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xe7>
10000c16:	0f b6 04 3b          	movzx  eax,BYTE PTR [ebx+edi*1]
10000c1a:	8b 14 85 00 00 00 00 	mov    edx,DWORD PTR [eax*4+0x0]	10000c1d: R_386_32	palette256
10000c21:	83 fa ff             	cmp    edx,0xffffffff
10000c24:	74 18                	je     10000c3e <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xe4>
10000c26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000c2a:	8b 00                	mov    eax,DWORD PTR [eax]
10000c2c:	8b 08                	mov    ecx,DWORD PTR [eax]
10000c2e:	52                   	push   edx
10000c2f:	55                   	push   ebp
10000c30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000c34:	01 fa                	add    edx,edi
10000c36:	52                   	push   edx
10000c37:	50                   	push   eax
10000c38:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10000c3b:	83 c4 10             	add    esp,0x10
10000c3e:	47                   	inc    edi
10000c3f:	eb cf                	jmp    10000c10 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xb6>
10000c41:	45                   	inc    ebp
10000c42:	03 5c 24 40          	add    ebx,DWORD PTR [esp+0x40]
10000c46:	eb ba                	jmp    10000c02 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xa8>
10000c48:	83 c4 1c             	add    esp,0x1c
10000c4b:	5b                   	pop    ebx
10000c4c:	5e                   	pop    esi
10000c4d:	5f                   	pop    edi
10000c4e:	5d                   	pop    ebp
10000c4f:	c3                   	ret    

10000c50 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)>:
10000c50:	55                   	push   ebp
10000c51:	57                   	push   edi
10000c52:	56                   	push   esi
10000c53:	53                   	push   ebx
10000c54:	83 ec 1c             	sub    esp,0x1c
10000c57:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
10000c5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000c5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000c62:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000c66:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
10000c69:	39 c1                	cmp    ecx,eax
10000c6b:	0f 8c c1 00 00 00    	jl     10000d32 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c71:	89 c5                	mov    ebp,eax
10000c73:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10000c77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000c7b:	8b 1e                	mov    ebx,DWORD PTR [esi]
10000c7d:	39 d8                	cmp    eax,ebx
10000c7f:	0f 8e ad 00 00 00    	jle    10000d32 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c85:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10000c89:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
10000c8d:	03 42 10             	add    eax,DWORD PTR [edx+0x10]
10000c90:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
10000c93:	39 c2                	cmp    edx,eax
10000c95:	0f 8c 97 00 00 00    	jl     10000d32 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c9b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000c9f:	01 c7                	add    edi,eax
10000ca1:	8b 76 08             	mov    esi,DWORD PTR [esi+0x8]
10000ca4:	39 f7                	cmp    edi,esi
10000ca6:	0f 8e 86 00 00 00    	jle    10000d32 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000cac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000cb4:	39 eb                	cmp    ebx,ebp
10000cb6:	7e 06                	jle    10000cbe <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x6e>
10000cb8:	29 eb                	sub    ebx,ebp
10000cba:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000cbe:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
10000cc2:	7d 07                	jge    10000ccb <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x7b>
10000cc4:	29 e9                	sub    ecx,ebp
10000cc6:	41                   	inc    ecx
10000cc7:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10000ccb:	31 db                	xor    ebx,ebx
10000ccd:	39 c6                	cmp    esi,eax
10000ccf:	7e 04                	jle    10000cd5 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x85>
10000cd1:	89 f3                	mov    ebx,esi
10000cd3:	29 c3                	sub    ebx,eax
10000cd5:	39 fa                	cmp    edx,edi
10000cd7:	7d 07                	jge    10000ce0 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x90>
10000cd9:	29 c2                	sub    edx,eax
10000cdb:	42                   	inc    edx
10000cdc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
10000ce0:	01 d8                	add    eax,ebx
10000ce2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000ce6:	39 5c 24 44          	cmp    DWORD PTR [esp+0x44],ebx
10000cea:	7e 46                	jle    10000d32 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000cec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000cf0:	0f b6 34 18          	movzx  esi,BYTE PTR [eax+ebx*1]
10000cf4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
10000cf8:	d3 e6                	shl    esi,cl
10000cfa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10000cfe:	39 7c 24 40          	cmp    DWORD PTR [esp+0x40],edi
10000d02:	7e 27                	jle    10000d2b <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xdb>
10000d04:	89 f0                	mov    eax,esi
10000d06:	84 c0                	test   al,al
10000d08:	79 1c                	jns    10000d26 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xd6>
10000d0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000d0e:	8b 00                	mov    eax,DWORD PTR [eax]
10000d10:	8b 10                	mov    edx,DWORD PTR [eax]
10000d12:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d16:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10000d1a:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
10000d1e:	51                   	push   ecx
10000d1f:	50                   	push   eax
10000d20:	ff 52 24             	call   DWORD PTR [edx+0x24]
10000d23:	83 c4 10             	add    esp,0x10
10000d26:	d1 e6                	shl    esi,1
10000d28:	47                   	inc    edi
10000d29:	eb d3                	jmp    10000cfe <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xae>
10000d2b:	43                   	inc    ebx
10000d2c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
10000d30:	eb b4                	jmp    10000ce6 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x96>
10000d32:	83 c4 1c             	add    esp,0x1c
10000d35:	5b                   	pop    ebx
10000d36:	5e                   	pop    esi
10000d37:	5f                   	pop    edi
10000d38:	5d                   	pop    ebp
10000d39:	c3                   	ret    

10000d3a <Context::drawBitmap8(unsigned char*, int, int, int, int)>:
10000d3a:	55                   	push   ebp
10000d3b:	57                   	push   edi
10000d3c:	56                   	push   esi
10000d3d:	53                   	push   ebx
10000d3e:	83 ec 1c             	sub    esp,0x1c
10000d41:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10000d45:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
10000d49:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
10000d4d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000d50:	8b 00                	mov    eax,DWORD PTR [eax]
10000d52:	e8 d7 fb ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
10000d57:	85 c0                	test   eax,eax
10000d59:	74 38                	je     10000d93 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x59>
10000d5b:	31 f6                	xor    esi,esi
10000d5d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000d60:	8b 08                	mov    ecx,DWORD PTR [eax]
10000d62:	89 c8                	mov    eax,ecx
10000d64:	e8 c5 fb ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
10000d69:	39 f0                	cmp    eax,esi
10000d6b:	7e 68                	jle    10000dd5 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x9b>
10000d6d:	89 f2                	mov    edx,esi
10000d6f:	89 c8                	mov    eax,ecx
10000d71:	e8 c8 fb ff ff       	call   1000093e <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000d76:	52                   	push   edx
10000d77:	ff 30                	push   DWORD PTR [eax]
10000d79:	55                   	push   ebp
10000d7a:	57                   	push   edi
10000d7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d87:	53                   	push   ebx
10000d88:	e8 fc ff ff ff       	call   10000d89 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x4f>	10000d89: R_386_PC32	Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)
10000d8d:	46                   	inc    esi
10000d8e:	83 c4 20             	add    esp,0x20
10000d91:	eb ca                	jmp    10000d5d <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x23>
10000d93:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10000d97:	75 3c                	jne    10000dd5 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x9b>
10000d99:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000da1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000da8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10000dab:	48                   	dec    eax
10000dac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000db0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000db3:	48                   	dec    eax
10000db4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000db8:	50                   	push   eax
10000db9:	8d 44 24 04          	lea    eax,[esp+0x4]
10000dbd:	50                   	push   eax
10000dbe:	55                   	push   ebp
10000dbf:	57                   	push   edi
10000dc0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dc4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dc8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dcc:	53                   	push   ebx
10000dcd:	e8 fc ff ff ff       	call   10000dce <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x94>	10000dce: R_386_PC32	Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)
10000dd2:	83 c4 20             	add    esp,0x20
10000dd5:	83 c4 1c             	add    esp,0x1c
10000dd8:	5b                   	pop    ebx
10000dd9:	5e                   	pop    esi
10000dda:	5f                   	pop    edi
10000ddb:	5d                   	pop    ebp
10000ddc:	c3                   	ret    
10000ddd:	90                   	nop

10000dde <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)>:
10000dde:	55                   	push   ebp
10000ddf:	57                   	push   edi
10000de0:	56                   	push   esi
10000de1:	53                   	push   ebx
10000de2:	83 ec 1c             	sub    esp,0x1c
10000de5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10000de9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000ded:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
10000df1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000df4:	8b 00                	mov    eax,DWORD PTR [eax]
10000df6:	e8 33 fb ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
10000dfb:	85 c0                	test   eax,eax
10000dfd:	74 3b                	je     10000e3a <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x5c>
10000dff:	31 f6                	xor    esi,esi
10000e01:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000e04:	8b 08                	mov    ecx,DWORD PTR [eax]
10000e06:	89 c8                	mov    eax,ecx
10000e08:	e8 21 fb ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
10000e0d:	39 f0                	cmp    eax,esi
10000e0f:	7e 6e                	jle    10000e7f <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0xa1>
10000e11:	89 f2                	mov    edx,esi
10000e13:	89 c8                	mov    eax,ecx
10000e15:	e8 24 fb ff ff       	call   1000093e <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000e1a:	55                   	push   ebp
10000e1b:	ff 30                	push   DWORD PTR [eax]
10000e1d:	57                   	push   edi
10000e1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e26:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e2a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e2e:	53                   	push   ebx
10000e2f:	e8 fc ff ff ff       	call   10000e30 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x52>	10000e30: R_386_PC32	Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)
10000e34:	46                   	inc    esi
10000e35:	83 c4 20             	add    esp,0x20
10000e38:	eb c7                	jmp    10000e01 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x23>
10000e3a:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10000e3e:	75 3f                	jne    10000e7f <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0xa1>
10000e40:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000e48:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000e4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10000e52:	48                   	dec    eax
10000e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000e57:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000e5a:	48                   	dec    eax
10000e5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000e5f:	55                   	push   ebp
10000e60:	8d 44 24 04          	lea    eax,[esp+0x4]
10000e64:	50                   	push   eax
10000e65:	57                   	push   edi
10000e66:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e6a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e6e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e72:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e76:	53                   	push   ebx
10000e77:	e8 fc ff ff ff       	call   10000e78 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x9a>	10000e78: R_386_PC32	Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)
10000e7c:	83 c4 20             	add    esp,0x20
10000e7f:	83 c4 1c             	add    esp,0x1c
10000e82:	5b                   	pop    ebx
10000e83:	5e                   	pop    esi
10000e84:	5f                   	pop    edi
10000e85:	5d                   	pop    ebp
10000e86:	c3                   	ret    

10000e87 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)>:
10000e87:	55                   	push   ebp
10000e88:	57                   	push   edi
10000e89:	56                   	push   esi
10000e8a:	53                   	push   ebx
10000e8b:	83 ec 3c             	sub    esp,0x3c
10000e8e:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
10000e93:	75 10                	jne    10000ea5 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x1e>
10000e95:	83 ec 0c             	sub    esp,0xc
10000e98:	68 28 2f 00 10       	push   0x10002f28	10000e99: R_386_32	.text
10000e9d:	e8 fc ff ff ff       	call   10000e9e <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x17>	10000e9e: R_386_PC32	KePanic(char const*)
10000ea2:	83 c4 10             	add    esp,0x10
10000ea5:	51                   	push   ecx
10000ea6:	6a ff                	push   0xffffffff
10000ea8:	6a 00                	push   0x0
10000eaa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10000eae:	50                   	push   eax
10000eaf:	e8 fc ff ff ff       	call   10000eb0 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x29>	10000eb0: R_386_PC32	Brush::Brush(unsigned int, unsigned int)
10000eb4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10000eb8:	0f af c0             	imul   eax,eax
10000ebb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000ebf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10000ec3:	0f af c0             	imul   eax,eax
10000ec6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000eca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000ece:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10000ed3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000ed7:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
10000edb:	f7 db                	neg    ebx
10000edd:	83 c4 10             	add    esp,0x10
10000ee0:	3b 5c 24 58          	cmp    ebx,DWORD PTR [esp+0x58]
10000ee4:	0f 8f a5 00 00 00    	jg     10000f8f <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x108>
10000eea:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000eee:	f7 d8                	neg    eax
10000ef0:	89 dd                	mov    ebp,ebx
10000ef2:	0f af eb             	imul   ebp,ebx
10000ef5:	0f af 6c 24 08       	imul   ebp,DWORD PTR [esp+0x8]
10000efa:	31 d2                	xor    edx,edx
10000efc:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10000f00:	7f 42                	jg     10000f44 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xbd>
10000f02:	89 c1                	mov    ecx,eax
10000f04:	0f af c8             	imul   ecx,eax
10000f07:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
10000f0c:	01 e9                	add    ecx,ebp
10000f0e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
10000f12:	7f 1a                	jg     10000f2e <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xa7>
10000f14:	8d 7c 24 10          	lea    edi,[esp+0x10]
10000f18:	b9 08 00 00 00       	mov    ecx,0x8
10000f1d:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10000f21:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f23:	84 d2                	test   dl,dl
10000f25:	75 1a                	jne    10000f41 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xba>
10000f27:	89 04 24             	mov    DWORD PTR [esp],eax
10000f2a:	b2 01                	mov    dl,0x1
10000f2c:	eb 13                	jmp    10000f41 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xba>
10000f2e:	80 fa 01             	cmp    dl,0x1
10000f31:	75 0e                	jne    10000f41 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xba>
10000f33:	52                   	push   edx
10000f34:	8d 54 24 14          	lea    edx,[esp+0x14]
10000f38:	52                   	push   edx
10000f39:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
10000f3d:	6a 01                	push   0x1
10000f3f:	eb 27                	jmp    10000f68 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xe1>
10000f41:	40                   	inc    eax
10000f42:	eb b8                	jmp    10000efc <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x75>
10000f44:	fe ca                	dec    dl
10000f46:	75 41                	jne    10000f89 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x102>
10000f48:	8d 7c 24 10          	lea    edi,[esp+0x10]
10000f4c:	b9 08 00 00 00       	mov    ecx,0x8
10000f51:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10000f55:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f57:	50                   	push   eax
10000f58:	8d 44 24 14          	lea    eax,[esp+0x14]
10000f5c:	50                   	push   eax
10000f5d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
10000f61:	6a 01                	push   0x1
10000f63:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10000f67:	40                   	inc    eax
10000f68:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
10000f6c:	50                   	push   eax
10000f6d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
10000f71:	01 d8                	add    eax,ebx
10000f73:	50                   	push   eax
10000f74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10000f78:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
10000f7c:	50                   	push   eax
10000f7d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
10000f81:	e8 fc ff ff ff       	call   10000f82 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xfb>	10000f82: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
10000f86:	83 c4 20             	add    esp,0x20
10000f89:	43                   	inc    ebx
10000f8a:	e9 51 ff ff ff       	jmp    10000ee0 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x59>
10000f8f:	83 c4 3c             	add    esp,0x3c
10000f92:	5b                   	pop    ebx
10000f93:	5e                   	pop    esi
10000f94:	5f                   	pop    edi
10000f95:	5d                   	pop    ebp
10000f96:	c3                   	ret    
10000f97:	90                   	nop

10000f98 <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)>:
10000f98:	55                   	push   ebp
10000f99:	57                   	push   edi
10000f9a:	56                   	push   esi
10000f9b:	53                   	push   ebx
10000f9c:	83 ec 1c             	sub    esp,0x1c
10000f9f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000fa3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10000fa7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000fab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10000faf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000fb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10000fb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000fbb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10000fbf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
10000fc3:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
10000fc7:	85 f6                	test   esi,esi
10000fc9:	75 10                	jne    10000fdb <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)+0x43>
10000fcb:	83 ec 0c             	sub    esp,0xc
10000fce:	68 3e 2f 00 10       	push   0x10002f3e	10000fcf: R_386_32	.text
10000fd3:	e8 fc ff ff ff       	call   10000fd4 <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)+0x3c>	10000fd4: R_386_PC32	KePanic(char const*)
10000fd8:	83 c4 10             	add    esp,0x10
10000fdb:	b9 02 00 00 00       	mov    ecx,0x2
10000fe0:	89 d8                	mov    eax,ebx
10000fe2:	99                   	cdq    
10000fe3:	f7 f9                	idiv   ecx
10000fe5:	89 c3                	mov    ebx,eax
10000fe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000feb:	99                   	cdq    
10000fec:	f7 f9                	idiv   ecx
10000fee:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
10000ff6:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
10000ffa:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
10000ffe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10001002:	01 da                	add    edx,ebx
10001004:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10001008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
1000100c:	01 c2                	add    edx,eax
1000100e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
10001012:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001016:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000101a:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
1000101e:	83 c4 1c             	add    esp,0x1c
10001021:	5b                   	pop    ebx
10001022:	5e                   	pop    esi
10001023:	5f                   	pop    edi
10001024:	5d                   	pop    ebp
10001025:	e9 5d fe ff ff       	jmp    10000e87 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)>

1000102a <Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)>:
1000102a:	55                   	push   ebp
1000102b:	57                   	push   edi
1000102c:	56                   	push   esi
1000102d:	53                   	push   ebx
1000102e:	83 ec 1c             	sub    esp,0x1c
10001031:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10001035:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001039:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000103d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001041:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001045:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10001049:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000104d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10001051:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
10001055:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
10001059:	85 f6                	test   esi,esi
1000105b:	75 10                	jne    1000106d <Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)+0x43>
1000105d:	83 ec 0c             	sub    esp,0xc
10001060:	68 56 2f 00 10       	push   0x10002f56	10001061: R_386_32	.text
10001065:	e8 fc ff ff ff       	call   10001066 <Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)+0x3c>	10001066: R_386_PC32	KePanic(char const*)
1000106a:	83 c4 10             	add    esp,0x10
1000106d:	b9 02 00 00 00       	mov    ecx,0x2
10001072:	89 d8                	mov    eax,ebx
10001074:	99                   	cdq    
10001075:	f7 f9                	idiv   ecx
10001077:	89 c3                	mov    ebx,eax
10001079:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000107d:	99                   	cdq    
1000107e:	f7 f9                	idiv   ecx
10001080:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
10001084:	c7 44 24 48 ff ff ff 00 	mov    DWORD PTR [esp+0x48],0xffffff
1000108c:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
10001090:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10001094:	01 da                	add    edx,ebx
10001096:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
1000109a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
1000109e:	01 c2                	add    edx,eax
100010a0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
100010a4:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
100010a8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100010ac:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
100010b0:	83 c4 1c             	add    esp,0x1c
100010b3:	5b                   	pop    ebx
100010b4:	5e                   	pop    esi
100010b5:	5f                   	pop    edi
100010b6:	5d                   	pop    ebp
100010b7:	e9 cb fd ff ff       	jmp    10000e87 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)>

100010bc <Context::clippedRect(int, int, int, int, CRect*, unsigned int)>:
100010bc:	55                   	push   ebp
100010bd:	57                   	push   edi
100010be:	56                   	push   esi
100010bf:	53                   	push   ebx
100010c0:	83 ec 1c             	sub    esp,0x1c
100010c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
100010c7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
100010cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100010cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
100010d3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100010d7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
100010db:	01 ca                	add    edx,ecx
100010dd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
100010e1:	01 fe                	add    esi,edi
100010e3:	03 4d 0c             	add    ecx,DWORD PTR [ebp+0xc]
100010e6:	03 7d 10             	add    edi,DWORD PTR [ebp+0x10]
100010e9:	03 55 0c             	add    edx,DWORD PTR [ebp+0xc]
100010ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100010f0:	03 75 10             	add    esi,DWORD PTR [ebp+0x10]
100010f3:	8b 13                	mov    edx,DWORD PTR [ebx]
100010f5:	39 ca                	cmp    edx,ecx
100010f7:	7d 02                	jge    100010fb <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x3f>
100010f9:	89 ca                	mov    edx,ecx
100010fb:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
100010fe:	39 f9                	cmp    ecx,edi
10001100:	7d 02                	jge    10001104 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x48>
10001102:	89 f9                	mov    ecx,edi
10001104:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10001107:	8b 2f                	mov    ebp,DWORD PTR [edi]
10001109:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000110d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10001110:	40                   	inc    eax
10001111:	39 f0                	cmp    eax,esi
10001113:	7e 02                	jle    10001117 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x5b>
10001115:	89 f0                	mov    eax,esi
10001117:	29 c8                	sub    eax,ecx
10001119:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
1000111d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10001120:	40                   	inc    eax
10001121:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10001125:	7e 04                	jle    1000112b <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x6f>
10001127:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000112b:	29 d0                	sub    eax,edx
1000112d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10001131:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
10001135:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10001139:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
1000113d:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
10001140:	83 c4 1c             	add    esp,0x1c
10001143:	5b                   	pop    ebx
10001144:	5e                   	pop    esi
10001145:	5f                   	pop    edi
10001146:	5d                   	pop    ebp
10001147:	ff e0                	jmp    eax

10001149 <plot(Context*, int, int, CRect*, unsigned int, Brush*)>:
10001149:	56                   	push   esi
1000114a:	53                   	push   ebx
1000114b:	50                   	push   eax
1000114c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001150:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10001154:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10001158:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
1000115c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10001160:	85 f6                	test   esi,esi
10001162:	74 13                	je     10001177 <plot(Context*, int, int, CRect*, unsigned int, Brush*)+0x2e>
10001164:	83 ec 04             	sub    esp,0x4
10001167:	56                   	push   esi
10001168:	53                   	push   ebx
10001169:	6a 01                	push   0x1
1000116b:	6a 01                	push   0x1
1000116d:	51                   	push   ecx
1000116e:	52                   	push   edx
1000116f:	50                   	push   eax
10001170:	e8 fc ff ff ff       	call   10001171 <plot(Context*, int, int, CRect*, unsigned int, Brush*)+0x28>	10001171: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
10001175:	eb 12                	jmp    10001189 <plot(Context*, int, int, CRect*, unsigned int, Brush*)+0x40>
10001177:	56                   	push   esi
10001178:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
1000117c:	53                   	push   ebx
1000117d:	6a 01                	push   0x1
1000117f:	6a 01                	push   0x1
10001181:	51                   	push   ecx
10001182:	52                   	push   edx
10001183:	50                   	push   eax
10001184:	e8 fc ff ff ff       	call   10001185 <plot(Context*, int, int, CRect*, unsigned int, Brush*)+0x3c>	10001185: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
10001189:	83 c4 20             	add    esp,0x20
1000118c:	58                   	pop    eax
1000118d:	5b                   	pop    ebx
1000118e:	5e                   	pop    esi
1000118f:	c3                   	ret    

10001190 <plotrow(Context*, int, int, int, CRect*, unsigned int, Brush*)>:
10001190:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001194:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001198:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
1000119d:	74 11                	je     100011b0 <plotrow(Context*, int, int, int, CRect*, unsigned int, Brush*)+0x20>
1000119f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100011a3:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
100011ab:	e9 ba f8 ff ff       	jmp    10000a6a <Context::clippedRect(int, int, int, int, CRect*, Brush*)>
100011b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
100011b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100011b8:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
100011c0:	e9 f7 fe ff ff       	jmp    100010bc <Context::clippedRect(int, int, int, int, CRect*, unsigned int)>
100011c5:	90                   	nop

100011c6 <Context::fillRect(int, int, int, int, Brush*)>:
100011c6:	55                   	push   ebp
100011c7:	57                   	push   edi
100011c8:	56                   	push   esi
100011c9:	53                   	push   ebx
100011ca:	83 ec 2c             	sub    esp,0x2c
100011cd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
100011d1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
100011d5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
100011d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100011dd:	01 d8                	add    eax,ebx
100011df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100011e3:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
100011e7:	01 fa                	add    edx,edi
100011e9:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
100011ec:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
100011ef:	85 db                	test   ebx,ebx
100011f1:	79 02                	jns    100011f5 <Context::fillRect(int, int, int, int, Brush*)+0x2f>
100011f3:	31 db                	xor    ebx,ebx
100011f5:	85 ff                	test   edi,edi
100011f7:	79 02                	jns    100011fb <Context::fillRect(int, int, int, int, Brush*)+0x35>
100011f9:	31 ff                	xor    edi,edi
100011fb:	89 e8                	mov    eax,ebp
100011fd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
10001201:	7e 04                	jle    10001207 <Context::fillRect(int, int, int, int, Brush*)+0x41>
10001203:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10001207:	29 d8                	sub    eax,ebx
10001209:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000120d:	89 c8                	mov    eax,ecx
1000120f:	39 d1                	cmp    ecx,edx
10001211:	7e 02                	jle    10001215 <Context::fillRect(int, int, int, int, Brush*)+0x4f>
10001213:	89 d0                	mov    eax,edx
10001215:	29 f8                	sub    eax,edi
10001217:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000121b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
1000121e:	8b 00                	mov    eax,DWORD PTR [eax]
10001220:	e8 09 f7 ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
10001225:	85 c0                	test   eax,eax
10001227:	74 38                	je     10001261 <Context::fillRect(int, int, int, int, Brush*)+0x9b>
10001229:	31 ed                	xor    ebp,ebp
1000122b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
1000122e:	8b 08                	mov    ecx,DWORD PTR [eax]
10001230:	89 c8                	mov    eax,ecx
10001232:	e8 f7 f6 ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
10001237:	39 e8                	cmp    eax,ebp
10001239:	7e 65                	jle    100012a0 <Context::fillRect(int, int, int, int, Brush*)+0xda>
1000123b:	89 ea                	mov    edx,ebp
1000123d:	89 c8                	mov    eax,ecx
1000123f:	e8 fa f6 ff ff       	call   1000093e <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001244:	52                   	push   edx
10001245:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001249:	ff 30                	push   DWORD PTR [eax]
1000124b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000124f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001253:	57                   	push   edi
10001254:	53                   	push   ebx
10001255:	56                   	push   esi
10001256:	e8 fc ff ff ff       	call   10001257 <Context::fillRect(int, int, int, int, Brush*)+0x91>	10001257: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
1000125b:	45                   	inc    ebp
1000125c:	83 c4 20             	add    esp,0x20
1000125f:	eb ca                	jmp    1000122b <Context::fillRect(int, int, int, int, Brush*)+0x65>
10001261:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
10001265:	75 39                	jne    100012a0 <Context::fillRect(int, int, int, int, Brush*)+0xda>
10001267:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
1000126f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10001277:	49                   	dec    ecx
10001278:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000127c:	8d 45 ff             	lea    eax,[ebp-0x1]
1000127f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001283:	50                   	push   eax
10001284:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001288:	8d 44 24 18          	lea    eax,[esp+0x18]
1000128c:	50                   	push   eax
1000128d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001291:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001295:	57                   	push   edi
10001296:	53                   	push   ebx
10001297:	56                   	push   esi
10001298:	e8 fc ff ff ff       	call   10001299 <Context::fillRect(int, int, int, int, Brush*)+0xd3>	10001299: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
1000129d:	83 c4 20             	add    esp,0x20
100012a0:	83 c4 2c             	add    esp,0x2c
100012a3:	5b                   	pop    ebx
100012a4:	5e                   	pop    esi
100012a5:	5f                   	pop    edi
100012a6:	5d                   	pop    ebp
100012a7:	c3                   	ret    

100012a8 <Context::fillRect(int, int, int, int, unsigned int)>:
100012a8:	55                   	push   ebp
100012a9:	57                   	push   edi
100012aa:	56                   	push   esi
100012ab:	53                   	push   ebx
100012ac:	83 ec 2c             	sub    esp,0x2c
100012af:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
100012b3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
100012b7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
100012bb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100012bf:	01 d8                	add    eax,ebx
100012c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100012c5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
100012c9:	01 fa                	add    edx,edi
100012cb:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
100012ce:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
100012d1:	85 db                	test   ebx,ebx
100012d3:	79 02                	jns    100012d7 <Context::fillRect(int, int, int, int, unsigned int)+0x2f>
100012d5:	31 db                	xor    ebx,ebx
100012d7:	85 ff                	test   edi,edi
100012d9:	79 02                	jns    100012dd <Context::fillRect(int, int, int, int, unsigned int)+0x35>
100012db:	31 ff                	xor    edi,edi
100012dd:	89 e8                	mov    eax,ebp
100012df:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
100012e3:	7e 04                	jle    100012e9 <Context::fillRect(int, int, int, int, unsigned int)+0x41>
100012e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100012e9:	29 d8                	sub    eax,ebx
100012eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100012ef:	89 c8                	mov    eax,ecx
100012f1:	39 d1                	cmp    ecx,edx
100012f3:	7e 02                	jle    100012f7 <Context::fillRect(int, int, int, int, unsigned int)+0x4f>
100012f5:	89 d0                	mov    eax,edx
100012f7:	29 f8                	sub    eax,edi
100012f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100012fd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001300:	8b 00                	mov    eax,DWORD PTR [eax]
10001302:	e8 27 f6 ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
10001307:	85 c0                	test   eax,eax
10001309:	74 38                	je     10001343 <Context::fillRect(int, int, int, int, unsigned int)+0x9b>
1000130b:	31 ed                	xor    ebp,ebp
1000130d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001310:	8b 08                	mov    ecx,DWORD PTR [eax]
10001312:	89 c8                	mov    eax,ecx
10001314:	e8 15 f6 ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
10001319:	39 e8                	cmp    eax,ebp
1000131b:	7e 65                	jle    10001382 <Context::fillRect(int, int, int, int, unsigned int)+0xda>
1000131d:	89 ea                	mov    edx,ebp
1000131f:	89 c8                	mov    eax,ecx
10001321:	e8 18 f6 ff ff       	call   1000093e <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001326:	52                   	push   edx
10001327:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
1000132b:	ff 30                	push   DWORD PTR [eax]
1000132d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001331:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001335:	57                   	push   edi
10001336:	53                   	push   ebx
10001337:	56                   	push   esi
10001338:	e8 fc ff ff ff       	call   10001339 <Context::fillRect(int, int, int, int, unsigned int)+0x91>	10001339: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
1000133d:	45                   	inc    ebp
1000133e:	83 c4 20             	add    esp,0x20
10001341:	eb ca                	jmp    1000130d <Context::fillRect(int, int, int, int, unsigned int)+0x65>
10001343:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
10001347:	75 39                	jne    10001382 <Context::fillRect(int, int, int, int, unsigned int)+0xda>
10001349:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
10001351:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10001359:	49                   	dec    ecx
1000135a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000135e:	8d 45 ff             	lea    eax,[ebp-0x1]
10001361:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001365:	50                   	push   eax
10001366:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
1000136a:	8d 44 24 18          	lea    eax,[esp+0x18]
1000136e:	50                   	push   eax
1000136f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001373:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001377:	57                   	push   edi
10001378:	53                   	push   ebx
10001379:	56                   	push   esi
1000137a:	e8 fc ff ff ff       	call   1000137b <Context::fillRect(int, int, int, int, unsigned int)+0xd3>	1000137b: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
1000137f:	83 c4 20             	add    esp,0x20
10001382:	83 c4 2c             	add    esp,0x2c
10001385:	5b                   	pop    ebx
10001386:	5e                   	pop    esi
10001387:	5f                   	pop    edi
10001388:	5d                   	pop    ebp
10001389:	c3                   	ret    

1000138a <Context::drawHorizontalLine(int, int, int, unsigned int)>:
1000138a:	83 ec 14             	sub    esp,0x14
1000138d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10001391:	6a 01                	push   0x1
10001393:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000139b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000139f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100013a3:	e8 fc ff ff ff       	call   100013a4 <Context::drawHorizontalLine(int, int, int, unsigned int)+0x1a>	100013a4: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
100013a8:	83 c4 2c             	add    esp,0x2c
100013ab:	c3                   	ret    

100013ac <Context::drawVerticalLine(int, int, int, unsigned int)>:
100013ac:	83 ec 14             	sub    esp,0x14
100013af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100013b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100013b7:	6a 01                	push   0x1
100013b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100013bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100013c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100013c5:	e8 fc ff ff ff       	call   100013c6 <Context::drawVerticalLine(int, int, int, unsigned int)+0x1a>	100013c6: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
100013ca:	83 c4 2c             	add    esp,0x2c
100013cd:	c3                   	ret    

100013ce <Context::drawRect(int, int, int, int, unsigned int)>:
100013ce:	55                   	push   ebp
100013cf:	57                   	push   edi
100013d0:	56                   	push   esi
100013d1:	53                   	push   ebx
100013d2:	83 ec 28             	sub    esp,0x28
100013d5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
100013d9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
100013dd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
100013e1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
100013e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100013e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100013ed:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
100013f1:	57                   	push   edi
100013f2:	55                   	push   ebp
100013f3:	52                   	push   edx
100013f4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
100013f8:	56                   	push   esi
100013f9:	53                   	push   ebx
100013fa:	e8 fc ff ff ff       	call   100013fb <Context::drawRect(int, int, int, int, unsigned int)+0x2d>	100013fb: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
100013ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001403:	8d 48 fe             	lea    ecx,[eax-0x2]
10001406:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
1000140a:	8d 42 01             	lea    eax,[edx+0x1]
1000140d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
10001411:	83 c4 14             	add    esp,0x14
10001414:	57                   	push   edi
10001415:	51                   	push   ecx
10001416:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000141a:	50                   	push   eax
1000141b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000141f:	56                   	push   esi
10001420:	53                   	push   ebx
10001421:	e8 fc ff ff ff       	call   10001422 <Context::drawRect(int, int, int, int, unsigned int)+0x54>	10001422: R_386_PC32	Context::drawVerticalLine(int, int, int, unsigned int)
10001426:	83 c4 14             	add    esp,0x14
10001429:	57                   	push   edi
1000142a:	55                   	push   ebp
1000142b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000142f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001433:	8d 54 02 ff          	lea    edx,[edx+eax*1-0x1]
10001437:	52                   	push   edx
10001438:	56                   	push   esi
10001439:	53                   	push   ebx
1000143a:	e8 fc ff ff ff       	call   1000143b <Context::drawRect(int, int, int, int, unsigned int)+0x6d>	1000143b: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
1000143f:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
10001443:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
10001447:	89 4c 24 5c          	mov    DWORD PTR [esp+0x5c],ecx
1000144b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
1000144f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001453:	8d 44 2e ff          	lea    eax,[esi+ebp*1-0x1]
10001457:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
1000145b:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
1000145f:	83 c4 3c             	add    esp,0x3c
10001462:	5b                   	pop    ebx
10001463:	5e                   	pop    esi
10001464:	5f                   	pop    edi
10001465:	5d                   	pop    ebp
10001466:	e9 41 ff ff ff       	jmp    100013ac <Context::drawVerticalLine(int, int, int, unsigned int)>
1000146b:	90                   	nop

1000146c <Context::ellipse(bool, int, int, int, int, unsigned int)>:
1000146c:	55                   	push   ebp
1000146d:	57                   	push   edi
1000146e:	56                   	push   esi
1000146f:	53                   	push   ebx
10001470:	83 ec 2c             	sub    esp,0x2c
10001473:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10001477:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000147b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000147f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
10001483:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
10001487:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
1000148b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
1000148f:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001493:	01 f2                	add    edx,esi
10001495:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10001499:	01 f8                	add    eax,edi
1000149b:	89 04 24             	mov    DWORD PTR [esp],eax
1000149e:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
100014a1:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
100014a4:	85 f6                	test   esi,esi
100014a6:	79 02                	jns    100014aa <Context::ellipse(bool, int, int, int, int, unsigned int)+0x3e>
100014a8:	31 f6                	xor    esi,esi
100014aa:	85 ff                	test   edi,edi
100014ac:	79 02                	jns    100014b0 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x44>
100014ae:	31 ff                	xor    edi,edi
100014b0:	89 c8                	mov    eax,ecx
100014b2:	39 d1                	cmp    ecx,edx
100014b4:	7e 02                	jle    100014b8 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x4c>
100014b6:	89 d0                	mov    eax,edx
100014b8:	29 f0                	sub    eax,esi
100014ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100014be:	89 e8                	mov    eax,ebp
100014c0:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
100014c3:	7e 03                	jle    100014c8 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x5c>
100014c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
100014c8:	29 f8                	sub    eax,edi
100014ca:	89 04 24             	mov    DWORD PTR [esp],eax
100014cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
100014d0:	8b 00                	mov    eax,DWORD PTR [eax]
100014d2:	e8 57 f4 ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
100014d7:	85 c0                	test   eax,eax
100014d9:	74 44                	je     1000151f <Context::ellipse(bool, int, int, int, int, unsigned int)+0xb3>
100014db:	31 ed                	xor    ebp,ebp
100014dd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
100014e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100014e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
100014e9:	8b 08                	mov    ecx,DWORD PTR [eax]
100014eb:	89 c8                	mov    eax,ecx
100014ed:	e8 3c f4 ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
100014f2:	39 e8                	cmp    eax,ebp
100014f4:	7e 6b                	jle    10001561 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xf5>
100014f6:	89 ea                	mov    edx,ebp
100014f8:	89 c8                	mov    eax,ecx
100014fa:	e8 3f f4 ff ff       	call   1000093e <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
100014ff:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001503:	ff 30                	push   DWORD PTR [eax]
10001505:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10001509:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000150d:	57                   	push   edi
1000150e:	56                   	push   esi
1000150f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10001513:	53                   	push   ebx
10001514:	e8 fc ff ff ff       	call   10001515 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xa9>	10001515: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
10001519:	45                   	inc    ebp
1000151a:	83 c4 20             	add    esp,0x20
1000151d:	eb c7                	jmp    100014e6 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x7a>
1000151f:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10001523:	75 3c                	jne    10001561 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xf5>
10001525:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
1000152d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10001535:	4d                   	dec    ebp
10001536:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
1000153a:	49                   	dec    ecx
1000153b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
1000153f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001543:	8d 44 24 14          	lea    eax,[esp+0x14]
10001547:	50                   	push   eax
10001548:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
1000154c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001550:	57                   	push   edi
10001551:	56                   	push   esi
10001552:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
10001557:	50                   	push   eax
10001558:	53                   	push   ebx
10001559:	e8 fc ff ff ff       	call   1000155a <Context::ellipse(bool, int, int, int, int, unsigned int)+0xee>	1000155a: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
1000155e:	83 c4 20             	add    esp,0x20
10001561:	83 c4 2c             	add    esp,0x2c
10001564:	5b                   	pop    ebx
10001565:	5e                   	pop    esi
10001566:	5f                   	pop    edi
10001567:	5d                   	pop    ebp
10001568:	c3                   	ret    
10001569:	90                   	nop

1000156a <Context::ellipse(bool, int, int, int, int, Brush*)>:
1000156a:	55                   	push   ebp
1000156b:	57                   	push   edi
1000156c:	56                   	push   esi
1000156d:	53                   	push   ebx
1000156e:	83 ec 2c             	sub    esp,0x2c
10001571:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10001575:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000157d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
10001581:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
10001585:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
10001589:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
1000158d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001591:	01 f2                	add    edx,esi
10001593:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10001597:	01 f8                	add    eax,edi
10001599:	89 04 24             	mov    DWORD PTR [esp],eax
1000159c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
1000159f:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
100015a2:	85 f6                	test   esi,esi
100015a4:	79 02                	jns    100015a8 <Context::ellipse(bool, int, int, int, int, Brush*)+0x3e>
100015a6:	31 f6                	xor    esi,esi
100015a8:	85 ff                	test   edi,edi
100015aa:	79 02                	jns    100015ae <Context::ellipse(bool, int, int, int, int, Brush*)+0x44>
100015ac:	31 ff                	xor    edi,edi
100015ae:	89 c8                	mov    eax,ecx
100015b0:	39 d1                	cmp    ecx,edx
100015b2:	7e 02                	jle    100015b6 <Context::ellipse(bool, int, int, int, int, Brush*)+0x4c>
100015b4:	89 d0                	mov    eax,edx
100015b6:	29 f0                	sub    eax,esi
100015b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100015bc:	89 e8                	mov    eax,ebp
100015be:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
100015c1:	7e 03                	jle    100015c6 <Context::ellipse(bool, int, int, int, int, Brush*)+0x5c>
100015c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
100015c6:	29 f8                	sub    eax,edi
100015c8:	89 04 24             	mov    DWORD PTR [esp],eax
100015cb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
100015ce:	8b 00                	mov    eax,DWORD PTR [eax]
100015d0:	e8 59 f3 ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
100015d5:	85 c0                	test   eax,eax
100015d7:	74 44                	je     1000161d <Context::ellipse(bool, int, int, int, int, Brush*)+0xb3>
100015d9:	31 ed                	xor    ebp,ebp
100015db:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
100015e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100015e4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
100015e7:	8b 08                	mov    ecx,DWORD PTR [eax]
100015e9:	89 c8                	mov    eax,ecx
100015eb:	e8 3e f3 ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
100015f0:	39 e8                	cmp    eax,ebp
100015f2:	7e 6b                	jle    1000165f <Context::ellipse(bool, int, int, int, int, Brush*)+0xf5>
100015f4:	89 ea                	mov    edx,ebp
100015f6:	89 c8                	mov    eax,ecx
100015f8:	e8 41 f3 ff ff       	call   1000093e <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
100015fd:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001601:	ff 30                	push   DWORD PTR [eax]
10001603:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10001607:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000160b:	57                   	push   edi
1000160c:	56                   	push   esi
1000160d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10001611:	53                   	push   ebx
10001612:	e8 fc ff ff ff       	call   10001613 <Context::ellipse(bool, int, int, int, int, Brush*)+0xa9>	10001613: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)
10001617:	45                   	inc    ebp
10001618:	83 c4 20             	add    esp,0x20
1000161b:	eb c7                	jmp    100015e4 <Context::ellipse(bool, int, int, int, int, Brush*)+0x7a>
1000161d:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10001621:	75 3c                	jne    1000165f <Context::ellipse(bool, int, int, int, int, Brush*)+0xf5>
10001623:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
1000162b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10001633:	4d                   	dec    ebp
10001634:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
10001638:	49                   	dec    ecx
10001639:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
1000163d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001641:	8d 44 24 14          	lea    eax,[esp+0x14]
10001645:	50                   	push   eax
10001646:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
1000164a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000164e:	57                   	push   edi
1000164f:	56                   	push   esi
10001650:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
10001655:	50                   	push   eax
10001656:	53                   	push   ebx
10001657:	e8 fc ff ff ff       	call   10001658 <Context::ellipse(bool, int, int, int, int, Brush*)+0xee>	10001658: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)
1000165c:	83 c4 20             	add    esp,0x20
1000165f:	83 c4 2c             	add    esp,0x2c
10001662:	5b                   	pop    ebx
10001663:	5e                   	pop    esi
10001664:	5f                   	pop    edi
10001665:	5d                   	pop    ebp
10001666:	c3                   	ret    
10001667:	90                   	nop

10001668 <CRect::split(CRect*)>:
10001668:	55                   	push   ebp
10001669:	57                   	push   edi
1000166a:	56                   	push   esi
1000166b:	53                   	push   ebx
1000166c:	83 ec 28             	sub    esp,0x28
1000166f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10001673:	6a 08                	push   0x8
10001675:	e8 fc ff ff ff       	call   10001676 <CRect::split(CRect*)+0xe>	10001676: R_386_PC32	malloc
1000167a:	89 c3                	mov    ebx,eax
1000167c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001683:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10001689:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
1000168d:	8b 6a 08             	mov    ebp,DWORD PTR [edx+0x8]
10001690:	8b 3a                	mov    edi,DWORD PTR [edx]
10001692:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
10001695:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001699:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
1000169c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100016a0:	8b 16                	mov    edx,DWORD PTR [esi]
100016a2:	83 c4 10             	add    esp,0x10
100016a5:	39 d7                	cmp    edi,edx
100016a7:	7f 36                	jg     100016df <CRect::split(CRect*)+0x77>
100016a9:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
100016ad:	7c 30                	jl     100016df <CRect::split(CRect*)+0x77>
100016af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100016b3:	83 ec 0c             	sub    esp,0xc
100016b6:	6a 10                	push   0x10
100016b8:	e8 fc ff ff ff       	call   100016b9 <CRect::split(CRect*)+0x51>	100016b9: R_386_PC32	malloc
100016bd:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
100016c0:	89 38                	mov    DWORD PTR [eax],edi
100016c2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100016c6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
100016c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100016cd:	4a                   	dec    edx
100016ce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100016d1:	59                   	pop    ecx
100016d2:	5f                   	pop    edi
100016d3:	50                   	push   eax
100016d4:	53                   	push   ebx
100016d5:	e8 fc ff ff ff       	call   100016d6 <CRect::split(CRect*)+0x6e>	100016d6: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100016da:	8b 3e                	mov    edi,DWORD PTR [esi]
100016dc:	83 c4 10             	add    esp,0x10
100016df:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
100016e2:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
100016e6:	7c 35                	jl     1000171d <CRect::split(CRect*)+0xb5>
100016e8:	39 d5                	cmp    ebp,edx
100016ea:	7f 31                	jg     1000171d <CRect::split(CRect*)+0xb5>
100016ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100016f0:	83 ec 0c             	sub    esp,0xc
100016f3:	6a 10                	push   0x10
100016f5:	e8 fc ff ff ff       	call   100016f6 <CRect::split(CRect*)+0x8e>	100016f6: R_386_PC32	malloc
100016fa:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
100016fd:	89 38                	mov    DWORD PTR [eax],edi
100016ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10001703:	4a                   	dec    edx
10001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10001707:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
1000170b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
1000170e:	5d                   	pop    ebp
1000170f:	5a                   	pop    edx
10001710:	50                   	push   eax
10001711:	53                   	push   ebx
10001712:	e8 fc ff ff ff       	call   10001713 <CRect::split(CRect*)+0xab>	10001713: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001717:	8b 6e 08             	mov    ebp,DWORD PTR [esi+0x8]
1000171a:	83 c4 10             	add    esp,0x10
1000171d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
10001720:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
10001724:	7c 3d                	jl     10001763 <CRect::split(CRect*)+0xfb>
10001726:	39 fa                	cmp    edx,edi
10001728:	7c 39                	jl     10001763 <CRect::split(CRect*)+0xfb>
1000172a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000172e:	83 ec 0c             	sub    esp,0xc
10001731:	6a 10                	push   0x10
10001733:	e8 fc ff ff ff       	call   10001734 <CRect::split(CRect*)+0xcc>	10001734: R_386_PC32	malloc
10001738:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
1000173b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
1000173f:	42                   	inc    edx
10001740:	89 10                	mov    DWORD PTR [eax],edx
10001742:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10001746:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
10001749:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
1000174d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10001750:	5a                   	pop    edx
10001751:	59                   	pop    ecx
10001752:	50                   	push   eax
10001753:	53                   	push   ebx
10001754:	e8 fc ff ff ff       	call   10001755 <CRect::split(CRect*)+0xed>	10001755: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001759:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
1000175c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001760:	83 c4 10             	add    esp,0x10
10001763:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
10001766:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
1000176a:	7c 2e                	jl     1000179a <CRect::split(CRect*)+0x132>
1000176c:	39 ee                	cmp    esi,ebp
1000176e:	7c 2a                	jl     1000179a <CRect::split(CRect*)+0x132>
10001770:	83 ec 0c             	sub    esp,0xc
10001773:	6a 10                	push   0x10
10001775:	e8 fc ff ff ff       	call   10001776 <CRect::split(CRect*)+0x10e>	10001776: R_386_PC32	malloc
1000177a:	46                   	inc    esi
1000177b:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
1000177e:	89 38                	mov    DWORD PTR [eax],edi
10001780:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10001784:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
10001787:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
1000178b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
1000178e:	5a                   	pop    edx
1000178f:	59                   	pop    ecx
10001790:	50                   	push   eax
10001791:	53                   	push   ebx
10001792:	e8 fc ff ff ff       	call   10001793 <CRect::split(CRect*)+0x12b>	10001793: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001797:	83 c4 10             	add    esp,0x10
1000179a:	89 d8                	mov    eax,ebx
1000179c:	83 c4 1c             	add    esp,0x1c
1000179f:	5b                   	pop    ebx
100017a0:	5e                   	pop    esi
100017a1:	5f                   	pop    edi
100017a2:	5d                   	pop    ebp
100017a3:	c3                   	ret    

100017a4 <Context::clearClipRects()>:
100017a4:	53                   	push   ebx
100017a5:	83 ec 08             	sub    esp,0x8
100017a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100017ac:	c6 43 14 00          	mov    BYTE PTR [ebx+0x14],0x0
100017b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
100017b3:	8b 08                	mov    ecx,DWORD PTR [eax]
100017b5:	89 c8                	mov    eax,ecx
100017b7:	e8 72 f1 ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
100017bc:	85 c0                	test   eax,eax
100017be:	74 19                	je     100017d9 <Context::clearClipRects()+0x35>
100017c0:	50                   	push   eax
100017c1:	50                   	push   eax
100017c2:	6a 10                	push   0x10
100017c4:	ff 31                	push   DWORD PTR [ecx]
100017c6:	e8 fc ff ff ff       	call   100017c7 <Context::clearClipRects()+0x23>	100017c7: R_386_PC32	operator delete(void*, unsigned long)
100017cb:	58                   	pop    eax
100017cc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
100017cf:	e8 fc ff ff ff       	call   100017d0 <Context::clearClipRects()+0x2c>	100017d0: R_386_PC32	List<CRect*>::deleteHead()
100017d4:	83 c4 10             	add    esp,0x10
100017d7:	eb d7                	jmp    100017b0 <Context::clearClipRects()+0xc>
100017d9:	83 c4 08             	add    esp,0x8
100017dc:	5b                   	pop    ebx
100017dd:	c3                   	ret    

100017de <Context::subClipRect(CRect*)>:
100017de:	55                   	push   ebp
100017df:	57                   	push   edi
100017e0:	56                   	push   esi
100017e1:	53                   	push   ebx
100017e2:	83 ec 1c             	sub    esp,0x1c
100017e5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100017e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100017ed:	c6 40 14 01          	mov    BYTE PTR [eax+0x14],0x1
100017f1:	31 db                	xor    ebx,ebx
100017f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100017f7:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
100017fa:	8b 29                	mov    ebp,DWORD PTR [ecx]
100017fc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10001800:	89 e8                	mov    eax,ebp
10001802:	e8 27 f1 ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
10001807:	39 d8                	cmp    eax,ebx
10001809:	0f 8e d4 00 00 00    	jle    100018e3 <Context::subClipRect(CRect*)+0x105>
1000180f:	89 da                	mov    edx,ebx
10001811:	89 e8                	mov    eax,ebp
10001813:	e8 26 f1 ff ff       	call   1000093e <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001818:	8b 38                	mov    edi,DWORD PTR [eax]
1000181a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
1000181d:	39 17                	cmp    DWORD PTR [edi],edx
1000181f:	7f 1b                	jg     1000183c <Context::subClipRect(CRect*)+0x5e>
10001821:	8b 16                	mov    edx,DWORD PTR [esi]
10001823:	39 57 04             	cmp    DWORD PTR [edi+0x4],edx
10001826:	7c 14                	jl     1000183c <Context::subClipRect(CRect*)+0x5e>
10001828:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
1000182b:	39 57 08             	cmp    DWORD PTR [edi+0x8],edx
1000182e:	7f 0c                	jg     1000183c <Context::subClipRect(CRect*)+0x5e>
10001830:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
10001833:	39 57 0c             	cmp    DWORD PTR [edi+0xc],edx
10001836:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000183a:	7d 03                	jge    1000183f <Context::subClipRect(CRect*)+0x61>
1000183c:	43                   	inc    ebx
1000183d:	eb b4                	jmp    100017f3 <Context::subClipRect(CRect*)+0x15>
1000183f:	39 e8                	cmp    eax,ebp
10001841:	75 07                	jne    1000184a <Context::subClipRect(CRect*)+0x6c>
10001843:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10001846:	89 19                	mov    DWORD PTR [ecx],ebx
10001848:	eb 19                	jmp    10001863 <Context::subClipRect(CRect*)+0x85>
1000184a:	3b 41 04             	cmp    eax,DWORD PTR [ecx+0x4]
1000184d:	75 08                	jne    10001857 <Context::subClipRect(CRect*)+0x79>
1000184f:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
10001852:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
10001855:	eb 0c                	jmp    10001863 <Context::subClipRect(CRect*)+0x85>
10001857:	8b 68 08             	mov    ebp,DWORD PTR [eax+0x8]
1000185a:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
1000185d:	89 5d 04             	mov    DWORD PTR [ebp+0x4],ebx
10001860:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
10001863:	8b 19                	mov    ebx,DWORD PTR [ecx]
10001865:	85 db                	test   ebx,ebx
10001867:	74 0a                	je     10001873 <Context::subClipRect(CRect*)+0x95>
10001869:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10001870:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10001873:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
1000187a:	55                   	push   ebp
1000187b:	55                   	push   ebp
1000187c:	6a 0c                	push   0xc
1000187e:	50                   	push   eax
1000187f:	e8 fc ff ff ff       	call   10001880 <Context::subClipRect(CRect*)+0xa2>	10001880: R_386_PC32	operator delete(void*, unsigned long)
10001884:	58                   	pop    eax
10001885:	5a                   	pop    edx
10001886:	56                   	push   esi
10001887:	57                   	push   edi
10001888:	e8 fc ff ff ff       	call   10001889 <Context::subClipRect(CRect*)+0xab>	10001889: R_386_PC32	CRect::split(CRect*)
1000188d:	89 c5                	mov    ebp,eax
1000188f:	59                   	pop    ecx
10001890:	5b                   	pop    ebx
10001891:	6a 10                	push   0x10
10001893:	57                   	push   edi
10001894:	e8 fc ff ff ff       	call   10001895 <Context::subClipRect(CRect*)+0xb7>	10001895: R_386_PC32	operator delete(void*, unsigned long)
10001899:	83 c4 10             	add    esp,0x10
1000189c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
1000189f:	89 c8                	mov    eax,ecx
100018a1:	e8 88 f0 ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
100018a6:	89 c3                	mov    ebx,eax
100018a8:	85 c0                	test   eax,eax
100018aa:	74 1c                	je     100018c8 <Context::subClipRect(CRect*)+0xea>
100018ac:	8b 19                	mov    ebx,DWORD PTR [ecx]
100018ae:	83 ec 0c             	sub    esp,0xc
100018b1:	55                   	push   ebp
100018b2:	e8 fc ff ff ff       	call   100018b3 <Context::subClipRect(CRect*)+0xd5>	100018b3: R_386_PC32	List<CRect*>::deleteHead()
100018b7:	59                   	pop    ecx
100018b8:	5f                   	pop    edi
100018b9:	53                   	push   ebx
100018ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100018be:	ff 70 18             	push   DWORD PTR [eax+0x18]
100018c1:	e8 fc ff ff ff       	call   100018c2 <Context::subClipRect(CRect*)+0xe4>	100018c2: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100018c6:	eb d1                	jmp    10001899 <Context::subClipRect(CRect*)+0xbb>
100018c8:	83 ec 0c             	sub    esp,0xc
100018cb:	55                   	push   ebp
100018cc:	e8 fc ff ff ff       	call   100018cd <Context::subClipRect(CRect*)+0xef>	100018cd: R_386_PC32	List<CRect*>::~List()
100018d1:	58                   	pop    eax
100018d2:	5a                   	pop    edx
100018d3:	6a 08                	push   0x8
100018d5:	55                   	push   ebp
100018d6:	e8 fc ff ff ff       	call   100018d7 <Context::subClipRect(CRect*)+0xf9>	100018d7: R_386_PC32	operator delete(void*, unsigned long)
100018db:	83 c4 10             	add    esp,0x10
100018de:	e9 10 ff ff ff       	jmp    100017f3 <Context::subClipRect(CRect*)+0x15>
100018e3:	83 c4 1c             	add    esp,0x1c
100018e6:	5b                   	pop    ebx
100018e7:	5e                   	pop    esi
100018e8:	5f                   	pop    edi
100018e9:	5d                   	pop    ebp
100018ea:	c3                   	ret    
100018eb:	90                   	nop

100018ec <Context::addClipRect(CRect*)>:
100018ec:	56                   	push   esi
100018ed:	53                   	push   ebx
100018ee:	83 ec 0c             	sub    esp,0xc
100018f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100018f5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
100018f9:	56                   	push   esi
100018fa:	53                   	push   ebx
100018fb:	e8 fc ff ff ff       	call   100018fc <Context::addClipRect(CRect*)+0x10>	100018fc: R_386_PC32	Context::subClipRect(CRect*)
10001900:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
10001904:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10001907:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000190b:	83 c4 14             	add    esp,0x14
1000190e:	5b                   	pop    ebx
1000190f:	5e                   	pop    esi
10001910:	e9 fc ff ff ff       	jmp    10001911 <Context::addClipRect(CRect*)+0x25>	10001911: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001915:	90                   	nop

10001916 <Context::intersectClipRect(CRect*)>:
10001916:	55                   	push   ebp
10001917:	57                   	push   edi
10001918:	56                   	push   esi
10001919:	53                   	push   ebx
1000191a:	83 ec 28             	sub    esp,0x28
1000191d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001921:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10001925:	c6 46 14 01          	mov    BYTE PTR [esi+0x14],0x1
10001929:	6a 08                	push   0x8
1000192b:	e8 fc ff ff ff       	call   1000192c <Context::intersectClipRect(CRect*)+0x16>	1000192c: R_386_PC32	malloc
10001930:	89 c7                	mov    edi,eax
10001932:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001939:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000193f:	83 c4 10             	add    esp,0x10
10001942:	31 db                	xor    ebx,ebx
10001944:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001947:	8b 08                	mov    ecx,DWORD PTR [eax]
10001949:	89 c8                	mov    eax,ecx
1000194b:	e8 de ef ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
10001950:	39 d8                	cmp    eax,ebx
10001952:	7e 59                	jle    100019ad <Context::intersectClipRect(CRect*)+0x97>
10001954:	89 da                	mov    edx,ebx
10001956:	89 c8                	mov    eax,ecx
10001958:	e8 e1 ef ff ff       	call   1000093e <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
1000195d:	51                   	push   ecx
1000195e:	51                   	push   ecx
1000195f:	55                   	push   ebp
10001960:	ff 30                	push   DWORD PTR [eax]
10001962:	e8 fc ff ff ff       	call   10001963 <Context::intersectClipRect(CRect*)+0x4d>	10001963: R_386_PC32	CRect::intersect(CRect*)
10001967:	83 c4 10             	add    esp,0x10
1000196a:	85 c0                	test   eax,eax
1000196c:	74 0c                	je     1000197a <Context::intersectClipRect(CRect*)+0x64>
1000196e:	52                   	push   edx
1000196f:	52                   	push   edx
10001970:	50                   	push   eax
10001971:	57                   	push   edi
10001972:	e8 fc ff ff ff       	call   10001973 <Context::intersectClipRect(CRect*)+0x5d>	10001973: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001977:	83 c4 10             	add    esp,0x10
1000197a:	43                   	inc    ebx
1000197b:	eb c7                	jmp    10001944 <Context::intersectClipRect(CRect*)+0x2e>
1000197d:	85 c0                	test   eax,eax
1000197f:	74 43                	je     100019c4 <Context::intersectClipRect(CRect*)+0xae>
10001981:	85 c9                	test   ecx,ecx
10001983:	74 f8                	je     1000197d <Context::intersectClipRect(CRect*)+0x67>
10001985:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10001988:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
1000198b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000198f:	51                   	push   ecx
10001990:	51                   	push   ecx
10001991:	6a 0c                	push   0xc
10001993:	52                   	push   edx
10001994:	e8 fc ff ff ff       	call   10001995 <Context::intersectClipRect(CRect*)+0x7f>	10001995: R_386_PC32	operator delete(void*, unsigned long)
10001999:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000199d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100019a0:	83 c4 10             	add    esp,0x10
100019a3:	85 c0                	test   eax,eax
100019a5:	75 14                	jne    100019bb <Context::intersectClipRect(CRect*)+0xa5>
100019a7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
100019ad:	8b 5e 18             	mov    ebx,DWORD PTR [esi+0x18]
100019b0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100019b2:	89 c8                	mov    eax,ecx
100019b4:	e8 75 ef ff ff       	call   1000092e <List<CRect*>::length() [clone .isra.0]>
100019b9:	eb c2                	jmp    1000197d <Context::intersectClipRect(CRect*)+0x67>
100019bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100019c2:	eb e9                	jmp    100019ad <Context::intersectClipRect(CRect*)+0x97>
100019c4:	83 ec 0c             	sub    esp,0xc
100019c7:	53                   	push   ebx
100019c8:	e8 fc ff ff ff       	call   100019c9 <Context::intersectClipRect(CRect*)+0xb3>	100019c9: R_386_PC32	List<CRect*>::~List()
100019cd:	58                   	pop    eax
100019ce:	5a                   	pop    edx
100019cf:	6a 08                	push   0x8
100019d1:	53                   	push   ebx
100019d2:	e8 fc ff ff ff       	call   100019d3 <Context::intersectClipRect(CRect*)+0xbd>	100019d3: R_386_PC32	operator delete(void*, unsigned long)
100019d7:	89 7e 18             	mov    DWORD PTR [esi+0x18],edi
100019da:	c7 44 24 44 10 00 00 00 	mov    DWORD PTR [esp+0x44],0x10
100019e2:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
100019e6:	83 c4 2c             	add    esp,0x2c
100019e9:	5b                   	pop    ebx
100019ea:	5e                   	pop    esi
100019eb:	5f                   	pop    edi
100019ec:	5d                   	pop    ebp
100019ed:	e9 fc ff ff ff       	jmp    100019ee <Context::intersectClipRect(CRect*)+0xd8>	100019ee: R_386_PC32	operator delete(void*, unsigned long)

100019f2 <startMouse()>:
100019f2:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100019f4: R_386_32	guiMouseHandler
	100019f8: R_386_32	handleMouse
100019fc:	c3                   	ret    

100019fd <setupCursor()>:
100019fd:	55                   	push   ebp
100019fe:	57                   	push   edi
100019ff:	56                   	push   esi
10001a00:	53                   	push   ebx
10001a01:	83 ec 38             	sub    esp,0x38
10001a04:	c7 05 00 00 00 00 2c 01 00 00 	mov    DWORD PTR ds:0x0,0x12c	10001a06: R_386_32	krnlMouseX
10001a0e:	c7 05 00 00 00 00 c8 00 00 00 	mov    DWORD PTR ds:0x0,0xc8	10001a10: R_386_32	krnlMouseY
10001a18:	c7 05 04 00 00 00 2c 01 00 00 	mov    DWORD PTR ds:0x4,0x12c	10001a1a: R_386_32	rootRgn
10001a22:	c7 05 08 00 00 00 c8 00 00 00 	mov    DWORD PTR ds:0x8,0xc8	10001a24: R_386_32	rootRgn
10001a2c:	c7 05 0c 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xc,0x0	10001a2e: R_386_32	rootRgn
10001a36:	68 14 01 00 00       	push   0x114
10001a3b:	e8 fc ff ff ff       	call   10001a3c <setupCursor()+0x3f>	10001a3c: R_386_PC32	malloc
10001a40:	89 c5                	mov    ebp,eax
10001a42:	83 c4 0c             	add    esp,0xc
10001a45:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001a47: R_386_32	kernelProcess
10001a4b:	68 6f 2f 00 10       	push   0x10002f6f	10001a4c: R_386_32	.text
10001a50:	50                   	push   eax
10001a51:	e8 fc ff ff ff       	call   10001a52 <setupCursor()+0x55>	10001a52: R_386_PC32	File::File(char const*, Process*)
10001a56:	58                   	pop    eax
10001a57:	5a                   	pop    edx
10001a58:	6a 01                	push   0x1
10001a5a:	55                   	push   ebp
10001a5b:	e8 fc ff ff ff       	call   10001a5c <setupCursor()+0x5f>	10001a5c: R_386_PC32	File::open(FileOpenMode)
10001a60:	83 c4 10             	add    esp,0x10
10001a63:	85 c0                	test   eax,eax
10001a65:	74 0a                	je     10001a71 <setupCursor()+0x74>
10001a67:	83 ec 0c             	sub    esp,0xc
10001a6a:	68 8e 2f 00 10       	push   0x10002f8e	10001a6b: R_386_32	.text
10001a6f:	eb 4c                	jmp    10001abd <setupCursor()+0xc0>
10001a71:	53                   	push   ebx
10001a72:	8d 44 24 17          	lea    eax,[esp+0x17]
10001a76:	50                   	push   eax
10001a77:	8d 44 24 20          	lea    eax,[esp+0x20]
10001a7b:	50                   	push   eax
10001a7c:	55                   	push   ebp
10001a7d:	e8 fc ff ff ff       	call   10001a7e <setupCursor()+0x81>	10001a7e: R_386_PC32	File::stat(unsigned long long*, bool*)
10001a82:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10001a86:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10001a8a:	89 34 24             	mov    DWORD PTR [esp],esi
10001a8d:	e8 fc ff ff ff       	call   10001a8e <setupCursor()+0x91>	10001a8e: R_386_PC32	malloc
10001a92:	89 c3                	mov    ebx,eax
10001a94:	58                   	pop    eax
10001a95:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10001a98:	8d 54 24 20          	lea    edx,[esp+0x20]
10001a9c:	52                   	push   edx
10001a9d:	53                   	push   ebx
10001a9e:	57                   	push   edi
10001a9f:	56                   	push   esi
10001aa0:	55                   	push   ebp
10001aa1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10001aa4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001aa8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10001aac:	83 c4 20             	add    esp,0x20
10001aaf:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10001ab3:	74 12                	je     10001ac7 <setupCursor()+0xca>
10001ab5:	83 ec 0c             	sub    esp,0xc
10001ab8:	68 a2 2f 00 10       	push   0x10002fa2	10001ab9: R_386_32	.text
10001abd:	e8 fc ff ff ff       	call   10001abe <setupCursor()+0xc1>	10001abe: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ac2:	e9 3d 01 00 00       	jmp    10001c04 <setupCursor()+0x207>
10001ac7:	6a 00                	push   0x0
10001ac9:	68 04 01 00 00       	push   0x104
10001ace:	52                   	push   edx
10001acf:	50                   	push   eax
10001ad0:	e8 fc ff ff ff       	call   10001ad1 <setupCursor()+0xd4>	10001ad1: R_386_PC32	__udivdi3
10001ad5:	5a                   	pop    edx
10001ad6:	59                   	pop    ecx
10001ad7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001adb:	50                   	push   eax
10001adc:	68 b6 2f 00 10       	push   0x10002fb6	10001add: R_386_32	.text
10001ae1:	e8 fc ff ff ff       	call   10001ae2 <setupCursor()+0xe5>	10001ae2: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ae6:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001ae9:	e8 fc ff ff ff       	call   10001aea <setupCursor()+0xed>	10001aea: R_386_PC32	Dbg::kprintf(char const*, ...)
10001aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001af2:	8d 04 83             	lea    eax,[ebx+eax*4]
10001af5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001af9:	83 c4 10             	add    esp,0x10
10001afc:	31 ed                	xor    ebp,ebp
10001afe:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
10001b02:	0f 8d f3 00 00 00    	jge    10001bfb <setupCursor()+0x1fe>
10001b08:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10001b0b:	50                   	push   eax
10001b0c:	6a 04                	push   0x4
10001b0e:	68 c3 2f 00 10       	push   0x10002fc3	10001b0f: R_386_32	.text
10001b13:	56                   	push   esi
10001b14:	e8 fc ff ff ff       	call   10001b15 <setupCursor()+0x118>	10001b15: R_386_PC32	memcmp
10001b19:	83 c4 10             	add    esp,0x10
10001b1c:	85 c0                	test   eax,eax
10001b1e:	0f 84 b8 00 00 00    	je     10001bdc <setupCursor()+0x1df>
10001b24:	50                   	push   eax
10001b25:	6a 04                	push   0x4
10001b27:	68 c8 2f 00 10       	push   0x10002fc8	10001b28: R_386_32	.text
10001b2c:	56                   	push   esi
10001b2d:	e8 fc ff ff ff       	call   10001b2e <setupCursor()+0x131>	10001b2e: R_386_PC32	memcmp
10001b32:	83 c4 10             	add    esp,0x10
10001b35:	85 c0                	test   eax,eax
10001b37:	74 7b                	je     10001bb4 <setupCursor()+0x1b7>
10001b39:	50                   	push   eax
10001b3a:	6a 04                	push   0x4
10001b3c:	68 cd 2f 00 10       	push   0x10002fcd	10001b3d: R_386_32	.text
10001b41:	56                   	push   esi
10001b42:	e8 fc ff ff ff       	call   10001b43 <setupCursor()+0x146>	10001b43: R_386_PC32	memcmp
10001b47:	83 c4 10             	add    esp,0x10
10001b4a:	85 c0                	test   eax,eax
10001b4c:	74 6d                	je     10001bbb <setupCursor()+0x1be>
10001b4e:	57                   	push   edi
10001b4f:	6a 04                	push   0x4
10001b51:	68 d2 2f 00 10       	push   0x10002fd2	10001b52: R_386_32	.text
10001b56:	56                   	push   esi
10001b57:	e8 fc ff ff ff       	call   10001b58 <setupCursor()+0x15b>	10001b58: R_386_PC32	memcmp
10001b5c:	83 c4 10             	add    esp,0x10
10001b5f:	85 c0                	test   eax,eax
10001b61:	74 5f                	je     10001bc2 <setupCursor()+0x1c5>
10001b63:	51                   	push   ecx
10001b64:	6a 04                	push   0x4
10001b66:	68 d7 2f 00 10       	push   0x10002fd7	10001b67: R_386_32	.text
10001b6b:	56                   	push   esi
10001b6c:	e8 fc ff ff ff       	call   10001b6d <setupCursor()+0x170>	10001b6d: R_386_PC32	memcmp
10001b71:	83 c4 10             	add    esp,0x10
10001b74:	85 c0                	test   eax,eax
10001b76:	74 51                	je     10001bc9 <setupCursor()+0x1cc>
10001b78:	52                   	push   edx
10001b79:	6a 04                	push   0x4
10001b7b:	68 dc 2f 00 10       	push   0x10002fdc	10001b7c: R_386_32	.text
10001b80:	56                   	push   esi
10001b81:	e8 fc ff ff ff       	call   10001b82 <setupCursor()+0x185>	10001b82: R_386_PC32	memcmp
10001b86:	83 c4 10             	add    esp,0x10
10001b89:	85 c0                	test   eax,eax
10001b8b:	74 43                	je     10001bd0 <setupCursor()+0x1d3>
10001b8d:	50                   	push   eax
10001b8e:	6a 04                	push   0x4
10001b90:	68 e1 2f 00 10       	push   0x10002fe1	10001b91: R_386_32	.text
10001b95:	56                   	push   esi
10001b96:	e8 fc ff ff ff       	call   10001b97 <setupCursor()+0x19a>	10001b97: R_386_PC32	memcmp
10001b9b:	83 c4 10             	add    esp,0x10
10001b9e:	85 c0                	test   eax,eax
10001ba0:	74 35                	je     10001bd7 <setupCursor()+0x1da>
10001ba2:	83 ec 0c             	sub    esp,0xc
10001ba5:	68 e6 2f 00 10       	push   0x10002fe6	10001ba6: R_386_32	.text
10001baa:	e8 fc ff ff ff       	call   10001bab <setupCursor()+0x1ae>	10001bab: R_386_PC32	Dbg::kprintf(char const*, ...)
10001baf:	83 c4 10             	add    esp,0x10
10001bb2:	eb 47                	jmp    10001bfb <setupCursor()+0x1fe>
10001bb4:	b8 00 02 00 00       	mov    eax,0x200
10001bb9:	eb 21                	jmp    10001bdc <setupCursor()+0x1df>
10001bbb:	b8 00 03 00 00       	mov    eax,0x300
10001bc0:	eb 1a                	jmp    10001bdc <setupCursor()+0x1df>
10001bc2:	b8 00 01 00 00       	mov    eax,0x100
10001bc7:	eb 13                	jmp    10001bdc <setupCursor()+0x1df>
10001bc9:	b8 00 04 00 00       	mov    eax,0x400
10001bce:	eb 0c                	jmp    10001bdc <setupCursor()+0x1df>
10001bd0:	b8 00 05 00 00       	mov    eax,0x500
10001bd5:	eb 05                	jmp    10001bdc <setupCursor()+0x1df>
10001bd7:	b8 00 06 00 00       	mov    eax,0x600
10001bdc:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10001bde: R_386_32	mouse_data
10001be2:	b9 00 01 00 00       	mov    ecx,0x100
10001be7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10001beb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001bed:	45                   	inc    ebp
10001bee:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10001bf6:	e9 03 ff ff ff       	jmp    10001afe <setupCursor()+0x101>
10001bfb:	83 ec 0c             	sub    esp,0xc
10001bfe:	53                   	push   ebx
10001bff:	e8 fc ff ff ff       	call   10001c00 <setupCursor()+0x203>	10001c00: R_386_PC32	free
10001c04:	83 c4 10             	add    esp,0x10
10001c07:	83 c4 2c             	add    esp,0x2c
10001c0a:	5b                   	pop    ebx
10001c0b:	5e                   	pop    esi
10001c0c:	5f                   	pop    edi
10001c0d:	5d                   	pop    ebp
10001c0e:	c3                   	ret    

10001c0f <processMouse(int, int, int)>:
10001c0f:	55                   	push   ebp
10001c10:	57                   	push   edi
10001c11:	56                   	push   esi
10001c12:	53                   	push   ebx
10001c13:	83 ec 0c             	sub    esp,0xc
10001c16:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10001c1a:	e8 fc ff ff ff       	call   10001c1b <processMouse(int, int, int)+0xc>	10001c1b: R_386_PC32	Krnl::userIOReceived()
10001c1f:	83 ec 0c             	sub    esp,0xc
10001c22:	6a 08                	push   0x8
10001c24:	e8 fc ff ff ff       	call   10001c25 <processMouse(int, int, int)+0x16>	10001c25: R_386_PC32	malloc
10001c29:	89 c6                	mov    esi,eax
10001c2b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001c32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10001c38:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10001c3f:	e8 fc ff ff ff       	call   10001c40 <processMouse(int, int, int)+0x31>	10001c40: R_386_PC32	malloc
10001c44:	89 c3                	mov    ebx,eax
10001c46:	8b 0d 04 00 00 00    	mov    ecx,DWORD PTR ds:0x4	10001c48: R_386_32	rootRgn
10001c4c:	a1 08 00 00 00       	mov    eax,ds:0x8	10001c4d: R_386_32	rootRgn
10001c51:	8d 69 1f             	lea    ebp,[ecx+0x1f]
10001c54:	89 2c 24             	mov    DWORD PTR [esp],ebp
10001c57:	8d 68 1f             	lea    ebp,[eax+0x1f]
10001c5a:	55                   	push   ebp
10001c5b:	51                   	push   ecx
10001c5c:	50                   	push   eax
10001c5d:	53                   	push   ebx
10001c5e:	e8 fc ff ff ff       	call   10001c5f <processMouse(int, int, int)+0x50>	10001c5f: R_386_PC32	CRect::CRect(int, int, int, int)
10001c63:	83 c4 14             	add    esp,0x14
10001c66:	6a 0c                	push   0xc
10001c68:	e8 fc ff ff ff       	call   10001c69 <processMouse(int, int, int)+0x5a>	10001c69: R_386_PC32	malloc
10001c6d:	89 18                	mov    DWORD PTR [eax],ebx
10001c6f:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
10001c72:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
10001c75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001c7c:	83 c4 10             	add    esp,0x10
10001c7f:	85 c9                	test   ecx,ecx
10001c81:	74 05                	je     10001c88 <processMouse(int, int, int)+0x79>
10001c83:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
10001c86:	eb 02                	jmp    10001c8a <processMouse(int, int, int)+0x7b>
10001c88:	89 06                	mov    DWORD PTR [esi],eax
10001c8a:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
10001c8d:	55                   	push   ebp
10001c8e:	6a 01                	push   0x1
10001c90:	56                   	push   esi
10001c91:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001c93: R_386_32	rootRgn
10001c97:	e8 fc ff ff ff       	call   10001c98 <processMouse(int, int, int)+0x89>	10001c98: R_386_PC32	GDO::update(List<CRect*>*, bool)
10001c9c:	8b 06                	mov    eax,DWORD PTR [esi]
10001c9e:	83 c4 10             	add    esp,0x10
10001ca1:	85 c0                	test   eax,eax
10001ca3:	74 26                	je     10001ccb <processMouse(int, int, int)+0xbc>
10001ca5:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10001ca8:	51                   	push   ecx
10001ca9:	51                   	push   ecx
10001caa:	6a 0c                	push   0xc
10001cac:	50                   	push   eax
10001cad:	e8 fc ff ff ff       	call   10001cae <processMouse(int, int, int)+0x9f>	10001cae: R_386_PC32	operator delete(void*, unsigned long)
10001cb2:	89 2e                	mov    DWORD PTR [esi],ebp
10001cb4:	83 c4 10             	add    esp,0x10
10001cb7:	85 ed                	test   ebp,ebp
10001cb9:	75 09                	jne    10001cc4 <processMouse(int, int, int)+0xb5>
10001cbb:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10001cc2:	eb 07                	jmp    10001ccb <processMouse(int, int, int)+0xbc>
10001cc4:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
10001ccb:	8b 06                	mov    eax,DWORD PTR [esi]
10001ccd:	85 c0                	test   eax,eax
10001ccf:	74 14                	je     10001ce5 <processMouse(int, int, int)+0xd6>
10001cd1:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10001cd4:	52                   	push   edx
10001cd5:	52                   	push   edx
10001cd6:	6a 0c                	push   0xc
10001cd8:	50                   	push   eax
10001cd9:	e8 fc ff ff ff       	call   10001cda <processMouse(int, int, int)+0xcb>	10001cda: R_386_PC32	operator delete(void*, unsigned long)
10001cde:	89 e8                	mov    eax,ebp
10001ce0:	83 c4 10             	add    esp,0x10
10001ce3:	eb e8                	jmp    10001ccd <processMouse(int, int, int)+0xbe>
10001ce5:	50                   	push   eax
10001ce6:	50                   	push   eax
10001ce7:	6a 08                	push   0x8
10001ce9:	56                   	push   esi
10001cea:	e8 fc ff ff ff       	call   10001ceb <processMouse(int, int, int)+0xdc>	10001ceb: R_386_PC32	operator delete(void*, unsigned long)
10001cef:	5a                   	pop    edx
10001cf0:	59                   	pop    ecx
10001cf1:	6a 10                	push   0x10
10001cf3:	53                   	push   ebx
10001cf4:	e8 fc ff ff ff       	call   10001cf5 <processMouse(int, int, int)+0xe6>	10001cf5: R_386_PC32	operator delete(void*, unsigned long)
10001cf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001cfd:	a3 04 00 00 00       	mov    ds:0x4,eax	10001cfe: R_386_32	rootRgn
10001d02:	89 3d 08 00 00 00    	mov    DWORD PTR ds:0x8,edi	10001d04: R_386_32	rootRgn
10001d08:	a1 00 00 00 00       	mov    eax,ds:0x0	10001d09: R_386_32	rootRgn
10001d0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10001d10:	8b 10                	mov    edx,DWORD PTR [eax]
10001d12:	8b 0a                	mov    ecx,DWORD PTR [edx]
10001d14:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10001d1b:	a1 0c 00 00 00       	mov    eax,ds:0xc	10001d1c: R_386_32	rootRgn
10001d20:	05 00 00 00 00       	add    eax,0x0	10001d21: R_386_32	mouse_data
10001d25:	50                   	push   eax
10001d26:	57                   	push   edi
10001d27:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
10001d2b:	52                   	push   edx
10001d2c:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10001d2f:	83 c4 2c             	add    esp,0x2c
10001d32:	5b                   	pop    ebx
10001d33:	5e                   	pop    esi
10001d34:	5f                   	pop    edi
10001d35:	5d                   	pop    ebp
10001d36:	c3                   	ret    

10001d37 <handleMouse>:
10001d37:	53                   	push   ebx
10001d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001d3c:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10001d3e: R_386_32	krnlMouseX
10001d42:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
10001d46:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	10001d48: R_386_32	krnlMouseX
10001d4c:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10001d4e: R_386_32	krnlMouseY
10001d52:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
10001d56:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001d58: R_386_32	krnlMouseY
10001d5c:	85 c9                	test   ecx,ecx
10001d5e:	7f 0a                	jg     10001d6a <handleMouse+0x33>
10001d60:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10001d62: R_386_32	krnlMouseX
10001d6a:	85 d2                	test   edx,edx
10001d6c:	7f 0a                	jg     10001d78 <handleMouse+0x41>
10001d6e:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10001d70: R_386_32	krnlMouseY
10001d78:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10001d7a: R_386_32	rootRgn
10001d7e:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
10001d81:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10001d84:	8d 5a ff             	lea    ebx,[edx-0x1]
10001d87:	3b 1d 00 00 00 00    	cmp    ebx,DWORD PTR ds:0x0	10001d89: R_386_32	krnlMouseX
10001d8d:	7f 09                	jg     10001d98 <handleMouse+0x61>
10001d8f:	83 ea 02             	sub    edx,0x2
10001d92:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001d94: R_386_32	krnlMouseX
10001d98:	8b 51 08             	mov    edx,DWORD PTR [ecx+0x8]
10001d9b:	8d 4a ff             	lea    ecx,[edx-0x1]
10001d9e:	3b 0d 00 00 00 00    	cmp    ecx,DWORD PTR ds:0x0	10001da0: R_386_32	krnlMouseY
10001da4:	7f 09                	jg     10001daf <handleMouse+0x78>
10001da6:	83 ea 02             	sub    edx,0x2
10001da9:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001dab: R_386_32	krnlMouseY
10001daf:	83 e0 01             	and    eax,0x1
10001db2:	a3 00 00 00 00       	mov    ds:0x0,eax	10001db3: R_386_32	krnlButtons
10001db7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001dbb:	a1 00 00 00 00       	mov    eax,ds:0x0	10001dbc: R_386_32	krnlMouseY
10001dc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001dc4:	a1 00 00 00 00       	mov    eax,ds:0x0	10001dc5: R_386_32	krnlMouseX
10001dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001dcd:	5b                   	pop    ebx
10001dce:	e9 3c fe ff ff       	jmp    10001c0f <processMouse(int, int, int)>
10001dd3:	90                   	nop

10001dd4 <elpsDrawFunc(GDO*)>:
10001dd4:	83 ec 10             	sub    esp,0x10
10001dd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001ddb:	ff 70 50             	push   DWORD PTR [eax+0x50]
10001dde:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10001de1:	ff 70 48             	push   DWORD PTR [eax+0x48]
10001de4:	ff 70 44             	push   DWORD PTR [eax+0x44]
10001de7:	ff 70 40             	push   DWORD PTR [eax+0x40]
10001dea:	6a 01                	push   0x1
10001dec:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001def:	e8 fc ff ff ff       	call   10001df0 <elpsDrawFunc(GDO*)+0x1c>	10001df0: R_386_PC32	Context::ellipse(bool, int, int, int, int, unsigned int)
10001df4:	83 c4 2c             	add    esp,0x2c
10001df7:	c3                   	ret    

10001df8 <elpsPtnDrawFunc(GDO*)>:
10001df8:	83 ec 10             	sub    esp,0x10
10001dfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001dff:	ff 70 50             	push   DWORD PTR [eax+0x50]
10001e02:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10001e05:	ff 70 48             	push   DWORD PTR [eax+0x48]
10001e08:	ff 70 44             	push   DWORD PTR [eax+0x44]
10001e0b:	ff 70 40             	push   DWORD PTR [eax+0x40]
10001e0e:	6a 01                	push   0x1
10001e10:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001e13:	e8 fc ff ff ff       	call   10001e14 <elpsPtnDrawFunc(GDO*)+0x1c>	10001e14: R_386_PC32	Context::ellipse(bool, int, int, int, int, Brush*)
10001e18:	83 c4 2c             	add    esp,0x2c
10001e1b:	c3                   	ret    

10001e1c <Ellipse::Ellipse(int, int, int, int, Brush*, Context*)>:
10001e1c:	53                   	push   ebx
10001e1d:	83 ec 0c             	sub    esp,0xc
10001e20:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001e24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001e28:	6a 03                	push   0x3
10001e2a:	53                   	push   ebx
10001e2b:	e8 fc ff ff ff       	call   10001e2c <Ellipse::Ellipse(int, int, int, int, Brush*, Context*)+0x10>	10001e2c: R_386_PC32	GDO::GDO(GDOType, Context*)
10001e30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001e34:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10001e37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001e3b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10001e3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001e42:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10001e45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001e49:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10001e4c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001e50:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10001e53:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10001e56: R_386_32	elpsPtnDrawFunc(GDO*)
10001e5a:	83 c4 18             	add    esp,0x18
10001e5d:	5b                   	pop    ebx
10001e5e:	c3                   	ret    
10001e5f:	90                   	nop

10001e60 <Ellipse::Ellipse(int, int, int, int, unsigned int, Context*)>:
10001e60:	53                   	push   ebx
10001e61:	83 ec 0c             	sub    esp,0xc
10001e64:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001e68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001e6c:	6a 01                	push   0x1
10001e6e:	53                   	push   ebx
10001e6f:	e8 fc ff ff ff       	call   10001e70 <Ellipse::Ellipse(int, int, int, int, unsigned int, Context*)+0x10>	10001e70: R_386_PC32	GDO::GDO(GDOType, Context*)
10001e74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001e78:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10001e7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001e7f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10001e82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001e86:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10001e89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001e8d:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10001e90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001e94:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10001e97:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10001e9a: R_386_32	elpsDrawFunc(GDO*)
10001e9e:	83 c4 18             	add    esp,0x18
10001ea1:	5b                   	pop    ebx
10001ea2:	c3                   	ret    
10001ea3:	90                   	nop

10001ea4 <GDO::resetNext()>:
10001ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001ea8:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
10001eaf:	c3                   	ret    

10001eb0 <GDO::GDO(GDOType, Context*)>:
10001eb0:	53                   	push   ebx
10001eb1:	83 ec 08             	sub    esp,0x8
10001eb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001eb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001ebc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001ec0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
10001ec3:	88 03                	mov    BYTE PTR [ebx],al
10001ec5:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
10001ecc:	84 c0                	test   al,al
10001ece:	75 45                	jne    10001f15 <GDO::GDO(GDOType, Context*)+0x65>
10001ed0:	83 ec 0c             	sub    esp,0xc
10001ed3:	68 fa 2f 00 10       	push   0x10002ffa	10001ed4: R_386_32	.text
10001ed8:	e8 fc ff ff ff       	call   10001ed9 <GDO::GDO(GDOType, Context*)+0x29>	10001ed9: R_386_PC32	Dbg::kprintf(char const*, ...)
10001edd:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001ee4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10001eeb:	e8 fc ff ff ff       	call   10001eec <GDO::GDO(GDOType, Context*)+0x3c>	10001eec: R_386_PC32	malloc
10001ef0:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10001ef3:	59                   	pop    ecx
10001ef4:	5a                   	pop    edx
10001ef5:	50                   	push   eax
10001ef6:	68 15 30 00 10       	push   0x10003015	10001ef7: R_386_32	.text
10001efb:	e8 fc ff ff ff       	call   10001efc <GDO::GDO(GDOType, Context*)+0x4c>	10001efc: R_386_PC32	Dbg::kprintf(char const*, ...)
10001f00:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10001f03:	83 c4 10             	add    esp,0x10
10001f06:	31 c0                	xor    eax,eax
10001f08:	c7 04 82 00 00 00 00 	mov    DWORD PTR [edx+eax*4],0x0
10001f0f:	40                   	inc    eax
10001f10:	83 f8 10             	cmp    eax,0x10
10001f13:	75 f3                	jne    10001f08 <GDO::GDO(GDOType, Context*)+0x58>
10001f15:	83 c4 08             	add    esp,0x8
10001f18:	5b                   	pop    ebx
10001f19:	c3                   	ret    

10001f1a <GDO::~GDO()>:
10001f1a:	c3                   	ret    
10001f1b:	90                   	nop

10001f1c <GDO::getChild(int)>:
10001f1c:	56                   	push   esi
10001f1d:	53                   	push   ebx
10001f1e:	51                   	push   ecx
10001f1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001f23:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001f27:	81 fb ff 00 00 00    	cmp    ebx,0xff
10001f2d:	7e 04                	jle    10001f33 <GDO::getChild(int)+0x17>
10001f2f:	31 c0                	xor    eax,eax
10001f31:	eb 2b                	jmp    10001f5e <GDO::getChild(int)+0x42>
10001f33:	83 7e 0c 00          	cmp    DWORD PTR [esi+0xc],0x0
10001f37:	75 10                	jne    10001f49 <GDO::getChild(int)+0x2d>
10001f39:	83 ec 0c             	sub    esp,0xc
10001f3c:	68 26 30 00 10       	push   0x10003026	10001f3d: R_386_32	.text
10001f41:	e8 fc ff ff ff       	call   10001f42 <GDO::getChild(int)+0x26>	10001f42: R_386_PC32	KePanic(char const*)
10001f46:	83 c4 10             	add    esp,0x10
10001f49:	89 da                	mov    edx,ebx
10001f4b:	c1 ea 04             	shr    edx,0x4
10001f4e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
10001f51:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10001f54:	85 c0                	test   eax,eax
10001f56:	74 d7                	je     10001f2f <GDO::getChild(int)+0x13>
10001f58:	83 e3 0f             	and    ebx,0xf
10001f5b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10001f5e:	5a                   	pop    edx
10001f5f:	5b                   	pop    ebx
10001f60:	5e                   	pop    esi
10001f61:	c3                   	ret    

10001f62 <GDO::hasNext()>:
10001f62:	56                   	push   esi
10001f63:	53                   	push   ebx
10001f64:	53                   	push   ebx
10001f65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001f69:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
10001f6c:	3d ff 00 00 00       	cmp    eax,0xff
10001f71:	7f 1b                	jg     10001f8e <GDO::hasNext()+0x2c>
10001f73:	8d 70 01             	lea    esi,[eax+0x1]
10001f76:	51                   	push   ecx
10001f77:	51                   	push   ecx
10001f78:	50                   	push   eax
10001f79:	53                   	push   ebx
10001f7a:	e8 fc ff ff ff       	call   10001f7b <GDO::hasNext()+0x19>	10001f7b: R_386_PC32	GDO::getChild(int)
10001f7f:	83 c4 10             	add    esp,0x10
10001f82:	85 c0                	test   eax,eax
10001f84:	75 04                	jne    10001f8a <GDO::hasNext()+0x28>
10001f86:	89 f0                	mov    eax,esi
10001f88:	eb e2                	jmp    10001f6c <GDO::hasNext()+0xa>
10001f8a:	b0 01                	mov    al,0x1
10001f8c:	eb 02                	jmp    10001f90 <GDO::hasNext()+0x2e>
10001f8e:	31 c0                	xor    eax,eax
10001f90:	5a                   	pop    edx
10001f91:	5b                   	pop    ebx
10001f92:	5e                   	pop    esi
10001f93:	c3                   	ret    

10001f94 <GDO::getNext()>:
10001f94:	53                   	push   ebx
10001f95:	83 ec 08             	sub    esp,0x8
10001f98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001f9c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
10001f9f:	3d ff 00 00 00       	cmp    eax,0xff
10001fa4:	7f 18                	jg     10001fbe <GDO::getNext()+0x2a>
10001fa6:	8d 50 01             	lea    edx,[eax+0x1]
10001fa9:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
10001fac:	52                   	push   edx
10001fad:	52                   	push   edx
10001fae:	50                   	push   eax
10001faf:	53                   	push   ebx
10001fb0:	e8 fc ff ff ff       	call   10001fb1 <GDO::getNext()+0x1d>	10001fb1: R_386_PC32	GDO::getChild(int)
10001fb5:	83 c4 10             	add    esp,0x10
10001fb8:	85 c0                	test   eax,eax
10001fba:	74 e0                	je     10001f9c <GDO::getNext()+0x8>
10001fbc:	eb 02                	jmp    10001fc0 <GDO::getNext()+0x2c>
10001fbe:	31 c0                	xor    eax,eax
10001fc0:	83 c4 08             	add    esp,0x8
10001fc3:	5b                   	pop    ebx
10001fc4:	c3                   	ret    
10001fc5:	90                   	nop

10001fc6 <GDO::indexOf(GDO*)>:
10001fc6:	56                   	push   esi
10001fc7:	53                   	push   ebx
10001fc8:	53                   	push   ebx
10001fc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001fcd:	31 db                	xor    ebx,ebx
10001fcf:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
10001fd2:	8d 50 01             	lea    edx,[eax+0x1]
10001fd5:	89 56 3c             	mov    DWORD PTR [esi+0x3c],edx
10001fd8:	51                   	push   ecx
10001fd9:	51                   	push   ecx
10001fda:	50                   	push   eax
10001fdb:	56                   	push   esi
10001fdc:	e8 fc ff ff ff       	call   10001fdd <GDO::indexOf(GDO*)+0x17>	10001fdd: R_386_PC32	GDO::getChild(int)
10001fe1:	83 c4 10             	add    esp,0x10
10001fe4:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10001fe8:	74 0c                	je     10001ff6 <GDO::indexOf(GDO*)+0x30>
10001fea:	43                   	inc    ebx
10001feb:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001ff1:	75 dc                	jne    10001fcf <GDO::indexOf(GDO*)+0x9>
10001ff3:	83 cb ff             	or     ebx,0xffffffff
10001ff6:	89 d8                	mov    eax,ebx
10001ff8:	5a                   	pop    edx
10001ff9:	5b                   	pop    ebx
10001ffa:	5e                   	pop    esi
10001ffb:	c3                   	ret    

10001ffc <GDO::screenX()>:
10001ffc:	56                   	push   esi
10001ffd:	53                   	push   ebx
10001ffe:	51                   	push   ecx
10001fff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002003:	31 f6                	xor    esi,esi
10002005:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10002008:	74 10                	je     1000201a <GDO::screenX()+0x1e>
1000200a:	83 ec 0c             	sub    esp,0xc
1000200d:	68 3f 30 00 10       	push   0x1000303f	1000200e: R_386_32	.text
10002012:	e8 fc ff ff ff       	call   10002013 <GDO::screenX()+0x17>	10002013: R_386_PC32	Dbg::kprintf(char const*, ...)
10002017:	83 c4 10             	add    esp,0x10
1000201a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
1000201d:	85 c0                	test   eax,eax
1000201f:	74 1f                	je     10002040 <GDO::screenX()+0x44>
10002021:	80 38 00             	cmp    BYTE PTR [eax],0x0
10002024:	74 10                	je     10002036 <GDO::screenX()+0x3a>
10002026:	83 ec 0c             	sub    esp,0xc
10002029:	68 33 30 00 10       	push   0x10003033	1000202a: R_386_32	.text
1000202e:	e8 fc ff ff ff       	call   1000202f <GDO::screenX()+0x33>	1000202f: R_386_PC32	KePanic(char const*)
10002033:	83 c4 10             	add    esp,0x10
10002036:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
10002039:	8b 5b 08             	mov    ebx,DWORD PTR [ebx+0x8]
1000203c:	01 c6                	add    esi,eax
1000203e:	eb c5                	jmp    10002005 <GDO::screenX()+0x9>
10002040:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
10002043:	01 f0                	add    eax,esi
10002045:	5a                   	pop    edx
10002046:	5b                   	pop    ebx
10002047:	5e                   	pop    esi
10002048:	c3                   	ret    
10002049:	90                   	nop

1000204a <GDO::screenY()>:
1000204a:	56                   	push   esi
1000204b:	53                   	push   ebx
1000204c:	51                   	push   ecx
1000204d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002051:	31 f6                	xor    esi,esi
10002053:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10002056:	74 10                	je     10002068 <GDO::screenY()+0x1e>
10002058:	83 ec 0c             	sub    esp,0xc
1000205b:	68 66 30 00 10       	push   0x10003066	1000205c: R_386_32	.text
10002060:	e8 fc ff ff ff       	call   10002061 <GDO::screenY()+0x17>	10002061: R_386_PC32	Dbg::kprintf(char const*, ...)
10002065:	83 c4 10             	add    esp,0x10
10002068:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
1000206b:	85 c0                	test   eax,eax
1000206d:	74 1f                	je     1000208e <GDO::screenY()+0x44>
1000206f:	80 38 00             	cmp    BYTE PTR [eax],0x0
10002072:	74 10                	je     10002084 <GDO::screenY()+0x3a>
10002074:	83 ec 0c             	sub    esp,0xc
10002077:	68 5a 30 00 10       	push   0x1000305a	10002078: R_386_32	.text
1000207c:	e8 fc ff ff ff       	call   1000207d <GDO::screenY()+0x33>	1000207d: R_386_PC32	KePanic(char const*)
10002081:	83 c4 10             	add    esp,0x10
10002084:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
10002087:	8b 5b 08             	mov    ebx,DWORD PTR [ebx+0x8]
1000208a:	01 c6                	add    esi,eax
1000208c:	eb c5                	jmp    10002053 <GDO::screenY()+0x9>
1000208e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
10002091:	01 f0                	add    eax,esi
10002093:	5a                   	pop    edx
10002094:	5b                   	pop    ebx
10002095:	5e                   	pop    esi
10002096:	c3                   	ret    
10002097:	90                   	nop

10002098 <GDO::update(List<CRect*>*, bool)>:
10002098:	55                   	push   ebp
10002099:	57                   	push   edi
1000209a:	56                   	push   esi
1000209b:	53                   	push   ebx
1000209c:	83 ec 2c             	sub    esp,0x2c
1000209f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
100020a3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100020a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100020ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100020af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100020b3:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
100020b6:	74 14                	je     100020cc <GDO::update(List<CRect*>*, bool)+0x34>
100020b8:	c7 44 24 40 81 30 00 10 	mov    DWORD PTR [esp+0x40],0x10003081	100020bc: R_386_32	.text
100020c0:	83 c4 2c             	add    esp,0x2c
100020c3:	5b                   	pop    ebx
100020c4:	5e                   	pop    esi
100020c5:	5f                   	pop    edi
100020c6:	5d                   	pop    ebp
100020c7:	e9 fc ff ff ff       	jmp    100020c8 <GDO::update(List<CRect*>*, bool)+0x30>	100020c8: R_386_PC32	KePanic(char const*)
100020cc:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
100020d0:	0f 84 02 02 00 00    	je     100022d8 <GDO::update(List<CRect*>*, bool)+0x240>
100020d6:	56                   	push   esi
100020d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100020db:	6a 00                	push   0x0
100020dd:	53                   	push   ebx
100020de:	e8 fc ff ff ff       	call   100020df <GDO::update(List<CRect*>*, bool)+0x47>	100020df: R_386_PC32	Region::applyBoundClipping(int, List<CRect*>*)
100020e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
100020e6:	e8 fc ff ff ff       	call   100020e7 <GDO::update(List<CRect*>*, bool)+0x4f>	100020e7: R_386_PC32	GDO::screenX()
100020eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100020ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
100020f2:	e8 fc ff ff ff       	call   100020f3 <GDO::update(List<CRect*>*, bool)+0x5b>	100020f3: R_386_PC32	GDO::screenY()
100020f7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100020fb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100020fe:	c6 40 14 00          	mov    BYTE PTR [eax+0x14],0x0
10002102:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10002109:	83 c4 10             	add    esp,0x10
1000210c:	83 ec 0c             	sub    esp,0xc
1000210f:	53                   	push   ebx
10002110:	e8 fc ff ff ff       	call   10002111 <GDO::update(List<CRect*>*, bool)+0x79>	10002111: R_386_PC32	GDO::hasNext()
10002115:	83 c4 10             	add    esp,0x10
10002118:	84 c0                	test   al,al
1000211a:	74 6c                	je     10002188 <GDO::update(List<CRect*>*, bool)+0xf0>
1000211c:	83 ec 0c             	sub    esp,0xc
1000211f:	53                   	push   ebx
10002120:	e8 fc ff ff ff       	call   10002121 <GDO::update(List<CRect*>*, bool)+0x89>	10002121: R_386_PC32	GDO::getNext()
10002125:	89 c6                	mov    esi,eax
10002127:	83 c4 10             	add    esp,0x10
1000212a:	80 38 00             	cmp    BYTE PTR [eax],0x0
1000212d:	75 dd                	jne    1000210c <GDO::update(List<CRect*>*, bool)+0x74>
1000212f:	83 ec 0c             	sub    esp,0xc
10002132:	50                   	push   eax
10002133:	e8 fc ff ff ff       	call   10002134 <GDO::update(List<CRect*>*, bool)+0x9c>	10002134: R_386_PC32	GDO::screenX()
10002138:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000213c:	89 34 24             	mov    DWORD PTR [esp],esi
1000213f:	e8 fc ff ff ff       	call   10002140 <GDO::update(List<CRect*>*, bool)+0xa8>	10002140: R_386_PC32	GDO::screenY()
10002144:	89 c5                	mov    ebp,eax
10002146:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
1000214d:	e8 fc ff ff ff       	call   1000214e <GDO::update(List<CRect*>*, bool)+0xb6>	1000214e: R_386_PC32	malloc
10002152:	89 c7                	mov    edi,eax
10002154:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
10002158:	8b 46 34             	mov    eax,DWORD PTR [esi+0x34]
1000215b:	01 d0                	add    eax,edx
1000215d:	48                   	dec    eax
1000215e:	89 04 24             	mov    DWORD PTR [esp],eax
10002161:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
10002164:	01 e8                	add    eax,ebp
10002166:	48                   	dec    eax
10002167:	50                   	push   eax
10002168:	52                   	push   edx
10002169:	55                   	push   ebp
1000216a:	57                   	push   edi
1000216b:	e8 fc ff ff ff       	call   1000216c <GDO::update(List<CRect*>*, bool)+0xd4>	1000216c: R_386_PC32	CRect::CRect(int, int, int, int)
10002170:	83 c4 18             	add    esp,0x18
10002173:	57                   	push   edi
10002174:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002177:	e8 fc ff ff ff       	call   10002178 <GDO::update(List<CRect*>*, bool)+0xe0>	10002178: R_386_PC32	Context::subClipRect(CRect*)
1000217c:	5a                   	pop    edx
1000217d:	59                   	pop    ecx
1000217e:	6a 10                	push   0x10
10002180:	57                   	push   edi
10002181:	e8 fc ff ff ff       	call   10002182 <GDO::update(List<CRect*>*, bool)+0xea>	10002182: R_386_PC32	operator delete(void*, unsigned long)
10002186:	eb 81                	jmp    10002109 <GDO::update(List<CRect*>*, bool)+0x71>
10002188:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000218b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
1000218f:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
10002192:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10002196:	89 78 10             	mov    DWORD PTR [eax+0x10],edi
10002199:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
100021a0:	83 ec 0c             	sub    esp,0xc
100021a3:	53                   	push   ebx
100021a4:	e8 fc ff ff ff       	call   100021a5 <GDO::update(List<CRect*>*, bool)+0x10d>	100021a5: R_386_PC32	GDO::hasNext()
100021a9:	83 c4 10             	add    esp,0x10
100021ac:	84 c0                	test   al,al
100021ae:	74 23                	je     100021d3 <GDO::update(List<CRect*>*, bool)+0x13b>
100021b0:	83 ec 0c             	sub    esp,0xc
100021b3:	53                   	push   ebx
100021b4:	e8 fc ff ff ff       	call   100021b5 <GDO::update(List<CRect*>*, bool)+0x11d>	100021b5: R_386_PC32	GDO::getNext()
100021b9:	83 c4 10             	add    esp,0x10
100021bc:	80 38 00             	cmp    BYTE PTR [eax],0x0
100021bf:	74 df                	je     100021a0 <GDO::update(List<CRect*>*, bool)+0x108>
100021c1:	8b 50 54             	mov    edx,DWORD PTR [eax+0x54]
100021c4:	85 d2                	test   edx,edx
100021c6:	74 d8                	je     100021a0 <GDO::update(List<CRect*>*, bool)+0x108>
100021c8:	83 ec 0c             	sub    esp,0xc
100021cb:	50                   	push   eax
100021cc:	ff d2                	call   edx
100021ce:	83 c4 10             	add    esp,0x10
100021d1:	eb cd                	jmp    100021a0 <GDO::update(List<CRect*>*, bool)+0x108>
100021d3:	83 ec 0c             	sub    esp,0xc
100021d6:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100021d9:	e8 fc ff ff ff       	call   100021da <GDO::update(List<CRect*>*, bool)+0x142>	100021da: R_386_PC32	Context::clearClipRects()
100021de:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100021e1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
100021e8:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
100021ef:	83 c4 10             	add    esp,0x10
100021f2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
100021f7:	0f 84 db 00 00 00    	je     100022d8 <GDO::update(List<CRect*>*, bool)+0x240>
100021fd:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10002204:	83 ec 0c             	sub    esp,0xc
10002207:	53                   	push   ebx
10002208:	e8 fc ff ff ff       	call   10002209 <GDO::update(List<CRect*>*, bool)+0x171>	10002209: R_386_PC32	GDO::hasNext()
1000220d:	83 c4 10             	add    esp,0x10
10002210:	84 c0                	test   al,al
10002212:	0f 84 c0 00 00 00    	je     100022d8 <GDO::update(List<CRect*>*, bool)+0x240>
10002218:	83 ec 0c             	sub    esp,0xc
1000221b:	53                   	push   ebx
1000221c:	e8 fc ff ff ff       	call   1000221d <GDO::update(List<CRect*>*, bool)+0x185>	1000221d: R_386_PC32	GDO::getNext()
10002221:	89 c7                	mov    edi,eax
10002223:	83 c4 10             	add    esp,0x10
10002226:	80 38 00             	cmp    BYTE PTR [eax],0x0
10002229:	75 d9                	jne    10002204 <GDO::update(List<CRect*>*, bool)+0x16c>
1000222b:	31 f6                	xor    esi,esi
1000222d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10002232:	75 3b                	jne    1000226f <GDO::update(List<CRect*>*, bool)+0x1d7>
10002234:	50                   	push   eax
10002235:	6a 01                	push   0x1
10002237:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000223b:	57                   	push   edi
1000223c:	e8 fc ff ff ff       	call   1000223d <GDO::update(List<CRect*>*, bool)+0x1a5>	1000223d: R_386_PC32	GDO::update(List<CRect*>*, bool)
10002241:	83 c4 10             	add    esp,0x10
10002244:	eb be                	jmp    10002204 <GDO::update(List<CRect*>*, bool)+0x16c>
10002246:	8b 28                	mov    ebp,DWORD PTR [eax]
10002248:	83 ec 0c             	sub    esp,0xc
1000224b:	57                   	push   edi
1000224c:	e8 fc ff ff ff       	call   1000224d <GDO::update(List<CRect*>*, bool)+0x1b5>	1000224d: R_386_PC32	GDO::screenX()
10002251:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002255:	89 3c 24             	mov    DWORD PTR [esp],edi
10002258:	e8 fc ff ff ff       	call   10002259 <GDO::update(List<CRect*>*, bool)+0x1c1>	10002259: R_386_PC32	GDO::screenY()
1000225d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10002261:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
10002264:	01 d1                	add    ecx,edx
10002266:	83 c4 10             	add    esp,0x10
10002269:	3b 4d 00             	cmp    ecx,DWORD PTR [ebp+0x0]
1000226c:	7f 37                	jg     100022a5 <GDO::update(List<CRect*>*, bool)+0x20d>
1000226e:	46                   	inc    esi
1000226f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002273:	8b 00                	mov    eax,DWORD PTR [eax]
10002275:	89 c1                	mov    ecx,eax
10002277:	31 d2                	xor    edx,edx
10002279:	85 c9                	test   ecx,ecx
1000227b:	74 06                	je     10002283 <GDO::update(List<CRect*>*, bool)+0x1eb>
1000227d:	42                   	inc    edx
1000227e:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10002281:	eb f6                	jmp    10002279 <GDO::update(List<CRect*>*, bool)+0x1e1>
10002283:	39 d6                	cmp    esi,edx
10002285:	7d 32                	jge    100022b9 <GDO::update(List<CRect*>*, bool)+0x221>
10002287:	89 c1                	mov    ecx,eax
10002289:	31 d2                	xor    edx,edx
1000228b:	85 c9                	test   ecx,ecx
1000228d:	74 06                	je     10002295 <GDO::update(List<CRect*>*, bool)+0x1fd>
1000228f:	42                   	inc    edx
10002290:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10002293:	eb f6                	jmp    1000228b <GDO::update(List<CRect*>*, bool)+0x1f3>
10002295:	39 d6                	cmp    esi,edx
10002297:	7f ad                	jg     10002246 <GDO::update(List<CRect*>*, bool)+0x1ae>
10002299:	89 f2                	mov    edx,esi
1000229b:	85 d2                	test   edx,edx
1000229d:	74 a7                	je     10002246 <GDO::update(List<CRect*>*, bool)+0x1ae>
1000229f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100022a2:	4a                   	dec    edx
100022a3:	eb f6                	jmp    1000229b <GDO::update(List<CRect*>*, bool)+0x203>
100022a5:	39 55 04             	cmp    DWORD PTR [ebp+0x4],edx
100022a8:	7c c4                	jl     1000226e <GDO::update(List<CRect*>*, bool)+0x1d6>
100022aa:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
100022ad:	01 c2                	add    edx,eax
100022af:	3b 55 08             	cmp    edx,DWORD PTR [ebp+0x8]
100022b2:	7e ba                	jle    1000226e <GDO::update(List<CRect*>*, bool)+0x1d6>
100022b4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100022b7:	7c b5                	jl     1000226e <GDO::update(List<CRect*>*, bool)+0x1d6>
100022b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100022bd:	8b 10                	mov    edx,DWORD PTR [eax]
100022bf:	31 c0                	xor    eax,eax
100022c1:	85 d2                	test   edx,edx
100022c3:	74 06                	je     100022cb <GDO::update(List<CRect*>*, bool)+0x233>
100022c5:	40                   	inc    eax
100022c6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
100022c9:	eb f6                	jmp    100022c1 <GDO::update(List<CRect*>*, bool)+0x229>
100022cb:	39 c6                	cmp    esi,eax
100022cd:	0f 85 61 ff ff ff    	jne    10002234 <GDO::update(List<CRect*>*, bool)+0x19c>
100022d3:	e9 2c ff ff ff       	jmp    10002204 <GDO::update(List<CRect*>*, bool)+0x16c>
100022d8:	83 c4 2c             	add    esp,0x2c
100022db:	5b                   	pop    ebx
100022dc:	5e                   	pop    esi
100022dd:	5f                   	pop    edi
100022de:	5d                   	pop    ebp
100022df:	c3                   	ret    

100022e0 <GDO::addChild(GDO*)>:
100022e0:	55                   	push   ebp
100022e1:	57                   	push   edi
100022e2:	56                   	push   esi
100022e3:	53                   	push   ebx
100022e4:	83 ec 1c             	sub    esp,0x1c
100022e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
100022eb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
100022ef:	80 3e 00             	cmp    BYTE PTR [esi],0x0
100022f2:	74 17                	je     1000230b <GDO::addChild(GDO*)+0x2b>
100022f4:	83 ec 0c             	sub    esp,0xc
100022f7:	68 9d 30 00 10       	push   0x1000309d	100022f8: R_386_32	.text
100022fc:	e8 fc ff ff ff       	call   100022fd <GDO::addChild(GDO*)+0x1d>	100022fd: R_386_PC32	KePanic(char const*)
10002301:	83 c4 10             	add    esp,0x10
10002304:	31 db                	xor    ebx,ebx
10002306:	e9 9f 00 00 00       	jmp    100023aa <GDO::addChild(GDO*)+0xca>
1000230b:	89 75 08             	mov    DWORD PTR [ebp+0x8],esi
1000230e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
10002311:	31 c9                	xor    ecx,ecx
10002313:	83 cb ff             	or     ebx,0xffffffff
10002316:	8b 04 8a             	mov    eax,DWORD PTR [edx+ecx*4]
10002319:	85 c0                	test   eax,eax
1000231b:	74 1c                	je     10002339 <GDO::addChild(GDO*)+0x59>
1000231d:	31 ff                	xor    edi,edi
1000231f:	83 38 00             	cmp    DWORD PTR [eax],0x0
10002322:	75 0a                	jne    1000232e <GDO::addChild(GDO*)+0x4e>
10002324:	89 28                	mov    DWORD PTR [eax],ebp
10002326:	c1 e1 04             	shl    ecx,0x4
10002329:	8d 1c 39             	lea    ebx,[ecx+edi*1]
1000232c:	eb 7c                	jmp    100023aa <GDO::addChild(GDO*)+0xca>
1000232e:	47                   	inc    edi
1000232f:	83 c0 04             	add    eax,0x4
10002332:	83 ff 10             	cmp    edi,0x10
10002335:	75 e8                	jne    1000231f <GDO::addChild(GDO*)+0x3f>
10002337:	eb 07                	jmp    10002340 <GDO::addChild(GDO*)+0x60>
10002339:	83 fb ff             	cmp    ebx,0xffffffff
1000233c:	75 02                	jne    10002340 <GDO::addChild(GDO*)+0x60>
1000233e:	89 cb                	mov    ebx,ecx
10002340:	41                   	inc    ecx
10002341:	83 f9 10             	cmp    ecx,0x10
10002344:	75 d0                	jne    10002316 <GDO::addChild(GDO*)+0x36>
10002346:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000234a:	83 fb ff             	cmp    ebx,0xffffffff
1000234d:	74 4b                	je     1000239a <GDO::addChild(GDO*)+0xba>
1000234f:	50                   	push   eax
10002350:	50                   	push   eax
10002351:	53                   	push   ebx
10002352:	68 b9 30 00 10       	push   0x100030b9	10002353: R_386_32	.text
10002357:	e8 fc ff ff ff       	call   10002358 <GDO::addChild(GDO*)+0x78>	10002358: R_386_PC32	Dbg::kprintf(char const*, ...)
1000235c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
1000235f:	8d 3c 98             	lea    edi,[eax+ebx*4]
10002362:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10002369:	e8 fc ff ff ff       	call   1000236a <GDO::addChild(GDO*)+0x8a>	1000236a: R_386_PC32	malloc
1000236e:	89 07                	mov    DWORD PTR [edi],eax
10002370:	5a                   	pop    edx
10002371:	59                   	pop    ecx
10002372:	50                   	push   eax
10002373:	68 d3 30 00 10       	push   0x100030d3	10002374: R_386_32	.text
10002378:	e8 fc ff ff ff       	call   10002379 <GDO::addChild(GDO*)+0x99>	10002379: R_386_PC32	Dbg::kprintf(char const*, ...)
1000237d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
10002380:	8b 14 98             	mov    edx,DWORD PTR [eax+ebx*4]
10002383:	31 c0                	xor    eax,eax
10002385:	89 d7                	mov    edi,edx
10002387:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000238b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000238d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
10002390:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10002393:	89 28                	mov    DWORD PTR [eax],ebp
10002395:	c1 e3 04             	shl    ebx,0x4
10002398:	eb 0d                	jmp    100023a7 <GDO::addChild(GDO*)+0xc7>
1000239a:	83 ec 0c             	sub    esp,0xc
1000239d:	68 ec 30 00 10       	push   0x100030ec	1000239e: R_386_32	.text
100023a2:	e8 fc ff ff ff       	call   100023a3 <GDO::addChild(GDO*)+0xc3>	100023a3: R_386_PC32	KePanic(char const*)
100023a7:	83 c4 10             	add    esp,0x10
100023aa:	89 d8                	mov    eax,ebx
100023ac:	83 c4 1c             	add    esp,0x1c
100023af:	5b                   	pop    ebx
100023b0:	5e                   	pop    esi
100023b1:	5f                   	pop    edi
100023b2:	5d                   	pop    ebp
100023b3:	c3                   	ret    

100023b4 <GDO::removeChild(int)>:
100023b4:	53                   	push   ebx
100023b5:	83 ec 08             	sub    esp,0x8
100023b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100023bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100023c0:	80 39 00             	cmp    BYTE PTR [ecx],0x0
100023c3:	74 14                	je     100023d9 <GDO::removeChild(int)+0x25>
100023c5:	83 ec 0c             	sub    esp,0xc
100023c8:	68 0e 31 00 10       	push   0x1000310e	100023c9: R_386_32	.text
100023cd:	e8 fc ff ff ff       	call   100023ce <GDO::removeChild(int)+0x1a>	100023ce: R_386_PC32	KePanic(char const*)
100023d2:	83 c4 10             	add    esp,0x10
100023d5:	31 c0                	xor    eax,eax
100023d7:	eb 2d                	jmp    10002406 <GDO::removeChild(int)+0x52>
100023d9:	31 c0                	xor    eax,eax
100023db:	81 fa ff 00 00 00    	cmp    edx,0xff
100023e1:	7f 23                	jg     10002406 <GDO::removeChild(int)+0x52>
100023e3:	89 d3                	mov    ebx,edx
100023e5:	c1 eb 04             	shr    ebx,0x4
100023e8:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
100023eb:	8b 0c 98             	mov    ecx,DWORD PTR [eax+ebx*4]
100023ee:	31 c0                	xor    eax,eax
100023f0:	85 c9                	test   ecx,ecx
100023f2:	74 12                	je     10002406 <GDO::removeChild(int)+0x52>
100023f4:	83 e2 0f             	and    edx,0xf
100023f7:	8d 14 91             	lea    edx,[ecx+edx*4]
100023fa:	83 3a 00             	cmp    DWORD PTR [edx],0x0
100023fd:	0f 95 c0             	setne  al
10002400:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
10002406:	83 c4 08             	add    esp,0x8
10002409:	5b                   	pop    ebx
1000240a:	c3                   	ret    
1000240b:	90                   	nop

1000240c <GDO::removeChild(GDO*)>:
1000240c:	53                   	push   ebx
1000240d:	83 ec 10             	sub    esp,0x10
10002410:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10002414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10002418:	53                   	push   ebx
10002419:	e8 fc ff ff ff       	call   1000241a <GDO::removeChild(GDO*)+0xe>	1000241a: R_386_PC32	GDO::indexOf(GDO*)
1000241e:	83 c4 10             	add    esp,0x10
10002421:	83 f8 ff             	cmp    eax,0xffffffff
10002424:	74 0e                	je     10002434 <GDO::removeChild(GDO*)+0x28>
10002426:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000242a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
1000242e:	83 c4 08             	add    esp,0x8
10002431:	5b                   	pop    ebx
10002432:	eb 80                	jmp    100023b4 <GDO::removeChild(int)>
10002434:	31 c0                	xor    eax,eax
10002436:	83 c4 08             	add    esp,0x8
10002439:	5b                   	pop    ebx
1000243a:	c3                   	ret    
1000243b:	90                   	nop

1000243c <legacyDraw(GDO*)>:
1000243c:	55                   	push   ebp
1000243d:	57                   	push   edi
1000243e:	56                   	push   esi
1000243f:	53                   	push   ebx
10002440:	83 ec 1c             	sub    esp,0x1c
10002443:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002447:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
1000244a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
1000244d:	31 f6                	xor    esi,esi
1000244f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10002452:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
10002456:	84 c0                	test   al,al
10002458:	74 45                	je     1000249f <legacyDraw(GDO*)+0x63>
1000245a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
1000245d:	69 ca ff 00 00 00    	imul   ecx,edx,0xff
10002463:	0f b6 8c 08 00 00 00 00 	movzx  ecx,BYTE PTR [eax+ecx*1+0x0]	10002467: R_386_32	FontWidths
1000246b:	83 ec 04             	sub    esp,0x4
1000246e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10002471:	6a 0e                	push   0xe
10002473:	51                   	push   ecx
10002474:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10002478:	55                   	push   ebp
10002479:	57                   	push   edi
1000247a:	6b c0 0e             	imul   eax,eax,0xe
1000247d:	69 d2 f2 0d 00 00    	imul   edx,edx,0xdf2
10002483:	8d 84 10 00 00 00 00 	lea    eax,[eax+edx*1+0x0]	10002486: R_386_32	Fonts
1000248a:	50                   	push   eax
1000248b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000248e:	e8 fc ff ff ff       	call   1000248f <legacyDraw(GDO*)+0x53>	1000248f: R_386_PC32	Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)
10002493:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
10002497:	01 cf                	add    edi,ecx
10002499:	46                   	inc    esi
1000249a:	83 c4 20             	add    esp,0x20
1000249d:	eb b0                	jmp    1000244f <legacyDraw(GDO*)+0x13>
1000249f:	83 c4 1c             	add    esp,0x1c
100024a2:	5b                   	pop    ebx
100024a3:	5e                   	pop    esi
100024a4:	5f                   	pop    edi
100024a5:	5d                   	pop    ebp
100024a6:	c3                   	ret    

100024a7 <reverse(unsigned char)>:
100024a7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
100024ab:	c3                   	ret    

100024ac <loadFontWithName(char*)>:
100024ac:	55                   	push   ebp
100024ad:	57                   	push   edi
100024ae:	56                   	push   esi
100024af:	53                   	push   ebx
100024b0:	83 ec 34             	sub    esp,0x34
100024b3:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
100024b7:	53                   	push   ebx
100024b8:	68 2d 31 00 10       	push   0x1000312d	100024b9: R_386_32	.text
100024bd:	e8 fc ff ff ff       	call   100024be <loadFontWithName(char*)+0x12>	100024be: R_386_PC32	Dbg::kprintf(char const*, ...)
100024c2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100024c9:	e8 fc ff ff ff       	call   100024ca <loadFontWithName(char*)+0x1e>	100024ca: R_386_PC32	malloc
100024ce:	89 c6                	mov    esi,eax
100024d0:	83 c4 0c             	add    esp,0xc
100024d3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100024d5: R_386_32	kernelProcess
100024d9:	53                   	push   ebx
100024da:	50                   	push   eax
100024db:	e8 fc ff ff ff       	call   100024dc <loadFontWithName(char*)+0x30>	100024dc: R_386_PC32	File::File(char const*, Process*)
100024e0:	59                   	pop    ecx
100024e1:	5f                   	pop    edi
100024e2:	6a 01                	push   0x1
100024e4:	56                   	push   esi
100024e5:	e8 fc ff ff ff       	call   100024e6 <loadFontWithName(char*)+0x3a>	100024e6: R_386_PC32	File::open(FileOpenMode)
100024ea:	83 c4 10             	add    esp,0x10
100024ed:	85 c0                	test   eax,eax
100024ef:	74 10                	je     10002501 <loadFontWithName(char*)+0x55>
100024f1:	83 ec 0c             	sub    esp,0xc
100024f4:	68 51 31 00 10       	push   0x10003151	100024f5: R_386_32	.text
100024f9:	e8 fc ff ff ff       	call   100024fa <loadFontWithName(char*)+0x4e>	100024fa: R_386_PC32	Krnl::panic(char const*)
100024fe:	83 c4 10             	add    esp,0x10
10002501:	83 ec 0c             	sub    esp,0xc
10002504:	8b 06                	mov    eax,DWORD PTR [esi]
10002506:	8d 54 24 28          	lea    edx,[esp+0x28]
1000250a:	52                   	push   edx
1000250b:	68 00 00 00 00       	push   0x0	1000250c: R_386_32	FONT
10002510:	6a 00                	push   0x0
10002512:	68 10 10 00 00       	push   0x1010
10002517:	56                   	push   esi
10002518:	ff 50 0c             	call   DWORD PTR [eax+0xc]
1000251b:	83 c4 14             	add    esp,0x14
1000251e:	56                   	push   esi
1000251f:	e8 fc ff ff ff       	call   10002520 <loadFontWithName(char*)+0x74>	10002520: R_386_PC32	File::close()
10002524:	8b 06                	mov    eax,DWORD PTR [esi]
10002526:	89 34 24             	mov    DWORD PTR [esp],esi
10002529:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000252c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000252d: R_386_32	nextfont_
10002531:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002535:	69 f8 f2 0d 00 00    	imul   edi,eax,0xdf2
1000253b:	83 c4 10             	add    esp,0x10
1000253e:	b8 00 02 00 00       	mov    eax,0x200
10002543:	69 74 24 0c ff 00 00 00 	imul   esi,DWORD PTR [esp+0xc],0xff
1000254b:	81 c6 00 00 00 00    	add    esi,0x0	1000254d: R_386_32	FontWidths
10002551:	0f be 90 10 00 00 00 	movsx  edx,BYTE PTR [eax+0x10]	10002554: R_386_32	FONT
10002558:	8a 88 1f 00 00 00    	mov    cl,BYTE PTR [eax+0x1f]	1000255a: R_386_32	FONT
1000255e:	88 0c 16             	mov    BYTE PTR [esi+edx*1],cl
10002561:	6b d2 0e             	imul   edx,edx,0xe
10002564:	01 fa                	add    edx,edi
10002566:	31 ed                	xor    ebp,ebp
10002568:	8a 8c 28 11 00 00 00 	mov    cl,BYTE PTR [eax+ebp*1+0x11]	1000256b: R_386_32	FONT
1000256f:	88 8c 2a 00 00 00 00 	mov    BYTE PTR [edx+ebp*1+0x0],cl	10002572: R_386_32	Fonts
10002576:	45                   	inc    ebp
10002577:	83 fd 0e             	cmp    ebp,0xe
1000257a:	75 ec                	jne    10002568 <loadFontWithName(char*)+0xbc>
1000257c:	83 c0 10             	add    eax,0x10
1000257f:	3d 00 08 00 00       	cmp    eax,0x800
10002584:	75 cb                	jne    10002551 <loadFontWithName(char*)+0xa5>
10002586:	43                   	inc    ebx
10002587:	80 7b ff 00          	cmp    BYTE PTR [ebx-0x1],0x0
1000258b:	75 f9                	jne    10002586 <loadFontWithName(char*)+0xda>
1000258d:	8a 03                	mov    al,BYTE PTR [ebx]
1000258f:	3c 2f                	cmp    al,0x2f
10002591:	74 07                	je     1000259a <loadFontWithName(char*)+0xee>
10002593:	3c 5c                	cmp    al,0x5c
10002595:	74 03                	je     1000259a <loadFontWithName(char*)+0xee>
10002597:	4b                   	dec    ebx
10002598:	eb f3                	jmp    1000258d <loadFontWithName(char*)+0xe1>
1000259a:	31 d2                	xor    edx,edx
1000259c:	69 7c 24 0c ff 00 00 00 	imul   edi,DWORD PTR [esp+0xc],0xff
100025a4:	81 c7 00 00 00 00    	add    edi,0x0	100025a6: R_386_32	FontNames
100025aa:	8a 44 13 01          	mov    al,BYTE PTR [ebx+edx*1+0x1]
100025ae:	3c 2e                	cmp    al,0x2e
100025b0:	0f b7 f2             	movzx  esi,dx
100025b3:	74 13                	je     100025c8 <loadFontWithName(char*)+0x11c>
100025b5:	8d 68 9f             	lea    ebp,[eax-0x61]
100025b8:	89 e9                	mov    ecx,ebp
100025ba:	80 f9 19             	cmp    cl,0x19
100025bd:	77 03                	ja     100025c2 <loadFontWithName(char*)+0x116>
100025bf:	83 e8 20             	sub    eax,0x20
100025c2:	88 04 37             	mov    BYTE PTR [edi+esi*1],al
100025c5:	42                   	inc    edx
100025c6:	eb e2                	jmp    100025aa <loadFontWithName(char*)+0xfe>
100025c8:	69 44 24 0c ff 00 00 00 	imul   eax,DWORD PTR [esp+0xc],0xff
100025d0:	c6 84 30 00 00 00 00 00 	mov    BYTE PTR [eax+esi*1+0x0],0x0	100025d3: R_386_32	FontNames
100025d8:	05 00 00 00 00       	add    eax,0x0	100025d9: R_386_32	FontNames
100025dd:	52                   	push   edx
100025de:	50                   	push   eax
100025df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100025e3:	68 63 31 00 10       	push   0x10003163	100025e4: R_386_32	.text
100025e8:	e8 fc ff ff ff       	call   100025e9 <loadFontWithName(char*)+0x13d>	100025e9: R_386_PC32	Dbg::kprintf(char const*, ...)
100025ed:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100025ef: R_386_32	nextfont_
100025f3:	83 c4 3c             	add    esp,0x3c
100025f6:	5b                   	pop    ebx
100025f7:	5e                   	pop    esi
100025f8:	5f                   	pop    edi
100025f9:	5d                   	pop    ebp
100025fa:	c3                   	ret    

100025fb <loadbuiltinfonts()>:
100025fb:	56                   	push   esi
100025fc:	53                   	push   ebx
100025fd:	52                   	push   edx
100025fe:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002600: R_386_32	nextfont_
10002608:	bb 00 00 00 00       	mov    ebx,0x0	10002609: R_386_32	FontWidths
1000260d:	ba f2 0d 00 00       	mov    edx,0xdf2
10002612:	8d 82 0e f2 ff ff    	lea    eax,[edx-0xdf2]
10002618:	89 de                	mov    esi,ebx
1000261a:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000261c: R_386_32	Fonts
10002621:	b9 01 00 00 00       	mov    ecx,0x1
10002626:	c6 84 08 00 00 00 00 66 	mov    BYTE PTR [eax+ecx*1+0x0],0x66	10002629: R_386_32	Fonts
1000262e:	41                   	inc    ecx
1000262f:	83 f9 0d             	cmp    ecx,0xd
10002632:	75 f2                	jne    10002626 <loadbuiltinfonts()+0x2b>
10002634:	c6 80 0d 00 00 00 00 	mov    BYTE PTR [eax+0xd],0x0	10002636: R_386_32	Fonts
1000263b:	c6 06 08             	mov    BYTE PTR [esi],0x8
1000263e:	46                   	inc    esi
1000263f:	83 c0 0e             	add    eax,0xe
10002642:	39 d0                	cmp    eax,edx
10002644:	75 d4                	jne    1000261a <loadbuiltinfonts()+0x1f>
10002646:	8d 90 f2 0d 00 00    	lea    edx,[eax+0xdf2]
1000264c:	81 c3 ff 00 00 00    	add    ebx,0xff
10002652:	81 fa 90 6f 00 00    	cmp    edx,0x6f90
10002658:	75 b8                	jne    10002612 <loadbuiltinfonts()+0x17>
1000265a:	b8 00 02 00 00       	mov    eax,0x200
1000265f:	0f be 90 10 00 00 00 	movsx  edx,BYTE PTR [eax+0x10]	10002662: R_386_32	FONT
10002666:	8a 88 1f 00 00 00    	mov    cl,BYTE PTR [eax+0x1f]	10002668: R_386_32	FONT
1000266c:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	1000266e: R_386_32	FontWidths
10002672:	6b ca 0e             	imul   ecx,edx,0xe
10002675:	31 d2                	xor    edx,edx
10002677:	8a 9c 10 11 00 00 00 	mov    bl,BYTE PTR [eax+edx*1+0x11]	1000267a: R_386_32	FONT
1000267e:	88 9c 11 00 00 00 00 	mov    BYTE PTR [ecx+edx*1+0x0],bl	10002681: R_386_32	Fonts
10002685:	42                   	inc    edx
10002686:	83 fa 0e             	cmp    edx,0xe
10002689:	75 ec                	jne    10002677 <loadbuiltinfonts()+0x7c>
1000268b:	83 c0 10             	add    eax,0x10
1000268e:	3d 00 08 00 00       	cmp    eax,0x800
10002693:	75 ca                	jne    1000265f <loadbuiltinfonts()+0x64>
10002695:	50                   	push   eax
10002696:	50                   	push   eax
10002697:	68 77 31 00 10       	push   0x10003177	10002698: R_386_32	.text
1000269c:	68 00 00 00 00       	push   0x0	1000269d: R_386_32	FontNames
100026a1:	e8 fc ff ff ff       	call   100026a2 <loadbuiltinfonts()+0xa7>	100026a2: R_386_PC32	strcpy
100026a6:	83 c4 0c             	add    esp,0xc
100026a9:	68 00 00 00 00       	push   0x0	100026aa: R_386_32	FontNames
100026ae:	6a 00                	push   0x0
100026b0:	68 63 31 00 10       	push   0x10003163	100026b1: R_386_32	.text
100026b5:	e8 fc ff ff ff       	call   100026b6 <loadbuiltinfonts()+0xbb>	100026b6: R_386_PC32	Dbg::kprintf(char const*, ...)
100026ba:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100026bc: R_386_32	nextfont_
100026c4:	83 c4 14             	add    esp,0x14
100026c7:	5b                   	pop    ebx
100026c8:	5e                   	pop    esi
100026c9:	c3                   	ret    

100026ca <loadfonts()>:
100026ca:	57                   	push   edi
100026cb:	56                   	push   esi
100026cc:	53                   	push   ebx
100026cd:	81 ec 1c 02 00 00    	sub    esp,0x21c
100026d3:	68 14 01 00 00       	push   0x114
100026d8:	e8 fc ff ff ff       	call   100026d9 <loadfonts()+0xf>	100026d9: R_386_PC32	malloc
100026dd:	89 c3                	mov    ebx,eax
100026df:	83 c4 0c             	add    esp,0xc
100026e2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100026e4: R_386_32	kernelProcess
100026e8:	68 7e 31 00 10       	push   0x1000317e	100026e9: R_386_32	.text
100026ed:	50                   	push   eax
100026ee:	e8 fc ff ff ff       	call   100026ef <loadfonts()+0x25>	100026ef: R_386_PC32	Directory::Directory(char const*, Process*)
100026f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
100026f6:	e8 fc ff ff ff       	call   100026f7 <loadfonts()+0x2d>	100026f7: R_386_PC32	Directory::open()
100026fb:	83 c4 10             	add    esp,0x10
100026fe:	51                   	push   ecx
100026ff:	51                   	push   ecx
10002700:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
10002707:	50                   	push   eax
10002708:	53                   	push   ebx
10002709:	e8 fc ff ff ff       	call   1000270a <loadfonts()+0x40>	1000270a: R_386_PC32	Directory::read(dirent*)
1000270e:	89 c6                	mov    esi,eax
10002710:	5f                   	pop    edi
10002711:	58                   	pop    eax
10002712:	56                   	push   esi
10002713:	68 95 31 00 10       	push   0x10003195	10002714: R_386_32	.text
10002718:	e8 fc ff ff ff       	call   10002719 <loadfonts()+0x4f>	10002719: R_386_PC32	Dbg::kprintf(char const*, ...)
1000271d:	83 c4 10             	add    esp,0x10
10002720:	85 f6                	test   esi,esi
10002722:	75 4c                	jne    10002770 <loadfonts()+0xa6>
10002724:	80 bc 24 10 01 00 00 00 	cmp    BYTE PTR [esp+0x110],0x0
1000272c:	74 42                	je     10002770 <loadfonts()+0xa6>
1000272e:	f6 84 24 0c 01 00 00 02 	test   BYTE PTR [esp+0x10c],0x2
10002736:	75 c6                	jne    100026fe <loadfonts()+0x34>
10002738:	50                   	push   eax
10002739:	50                   	push   eax
1000273a:	68 a9 31 00 10       	push   0x100031a9	1000273b: R_386_32	.text
1000273f:	8d 74 24 0c          	lea    esi,[esp+0xc]
10002743:	56                   	push   esi
10002744:	e8 fc ff ff ff       	call   10002745 <loadfonts()+0x7b>	10002745: R_386_PC32	strcpy
10002749:	5a                   	pop    edx
1000274a:	59                   	pop    ecx
1000274b:	8d bc 24 18 01 00 00 	lea    edi,[esp+0x118]
10002752:	57                   	push   edi
10002753:	56                   	push   esi
10002754:	e8 fc ff ff ff       	call   10002755 <loadfonts()+0x8b>	10002755: R_386_PC32	strcat
10002759:	58                   	pop    eax
1000275a:	5a                   	pop    edx
1000275b:	57                   	push   edi
1000275c:	68 c1 31 00 10       	push   0x100031c1	1000275d: R_386_32	.text
10002761:	e8 fc ff ff ff       	call   10002762 <loadfonts()+0x98>	10002762: R_386_PC32	Dbg::kprintf(char const*, ...)
10002766:	89 34 24             	mov    DWORD PTR [esp],esi
10002769:	e8 fc ff ff ff       	call   1000276a <loadfonts()+0xa0>	1000276a: R_386_PC32	loadFontWithName(char*)
1000276e:	eb 8b                	jmp    100026fb <loadfonts()+0x31>
10002770:	83 ec 0c             	sub    esp,0xc
10002773:	53                   	push   ebx
10002774:	e8 fc ff ff ff       	call   10002775 <loadfonts()+0xab>	10002775: R_386_PC32	Directory::close()
10002779:	83 c4 10             	add    esp,0x10
1000277c:	85 db                	test   ebx,ebx
1000277e:	74 0c                	je     1000278c <loadfonts()+0xc2>
10002780:	83 ec 0c             	sub    esp,0xc
10002783:	8b 03                	mov    eax,DWORD PTR [ebx]
10002785:	53                   	push   ebx
10002786:	ff 50 08             	call   DWORD PTR [eax+0x8]
10002789:	83 c4 10             	add    esp,0x10
1000278c:	81 c4 10 02 00 00    	add    esp,0x210
10002792:	5b                   	pop    ebx
10002793:	5e                   	pop    esi
10002794:	5f                   	pop    edi
10002795:	c3                   	ret    

10002796 <getLegacyFont(char const*)>:
10002796:	57                   	push   edi
10002797:	56                   	push   esi
10002798:	53                   	push   ebx
10002799:	81 ec 08 01 00 00    	sub    esp,0x108
1000279f:	8b b4 24 18 01 00 00 	mov    esi,DWORD PTR [esp+0x118]
100027a6:	68 cf 31 00 10       	push   0x100031cf	100027a7: R_386_32	.text
100027ab:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
100027af:	53                   	push   ebx
100027b0:	e8 fc ff ff ff       	call   100027b1 <getLegacyFont(char const*)+0x1b>	100027b1: R_386_PC32	strcpy
100027b5:	59                   	pop    ecx
100027b6:	5f                   	pop    edi
100027b7:	56                   	push   esi
100027b8:	53                   	push   ebx
100027b9:	e8 fc ff ff ff       	call   100027ba <getLegacyFont(char const*)+0x24>	100027ba: R_386_PC32	strcat
100027be:	58                   	pop    eax
100027bf:	5a                   	pop    edx
100027c0:	68 e7 31 00 10       	push   0x100031e7	100027c1: R_386_32	.text
100027c5:	53                   	push   ebx
100027c6:	e8 fc ff ff ff       	call   100027c7 <getLegacyFont(char const*)+0x31>	100027c7: R_386_PC32	strcat
100027cb:	83 c4 10             	add    esp,0x10
100027ce:	31 db                	xor    ebx,ebx
100027d0:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	100027d2: R_386_32	nextfont_
100027d6:	39 df                	cmp    edi,ebx
100027d8:	7e 3b                	jle    10002815 <getLegacyFont(char const*)+0x7f>
100027da:	69 fb ff 00 00 00    	imul   edi,ebx,0xff
100027e0:	81 c7 00 00 00 00    	add    edi,0x0	100027e2: R_386_32	FontNames
100027e6:	50                   	push   eax
100027e7:	56                   	push   esi
100027e8:	57                   	push   edi
100027e9:	68 ec 31 00 10       	push   0x100031ec	100027ea: R_386_32	.text
100027ee:	e8 fc ff ff ff       	call   100027ef <getLegacyFont(char const*)+0x59>	100027ef: R_386_PC32	Dbg::kprintf(char const*, ...)
100027f3:	58                   	pop    eax
100027f4:	5a                   	pop    edx
100027f5:	56                   	push   esi
100027f6:	57                   	push   edi
100027f7:	e8 fc ff ff ff       	call   100027f8 <getLegacyFont(char const*)+0x62>	100027f8: R_386_PC32	strcmp
100027fc:	83 c4 10             	add    esp,0x10
100027ff:	85 c0                	test   eax,eax
10002801:	75 0f                	jne    10002812 <getLegacyFont(char const*)+0x7c>
10002803:	51                   	push   ecx
10002804:	53                   	push   ebx
10002805:	56                   	push   esi
10002806:	68 f7 31 00 10       	push   0x100031f7	10002807: R_386_32	.text
1000280b:	e8 fc ff ff ff       	call   1000280c <getLegacyFont(char const*)+0x76>	1000280c: R_386_PC32	Dbg::kprintf(char const*, ...)
10002810:	eb 43                	jmp    10002855 <getLegacyFont(char const*)+0xbf>
10002812:	43                   	inc    ebx
10002813:	eb bb                	jmp    100027d0 <getLegacyFont(char const*)+0x3a>
10002815:	83 ec 0c             	sub    esp,0xc
10002818:	56                   	push   esi
10002819:	e8 fc ff ff ff       	call   1000281a <getLegacyFont(char const*)+0x84>	1000281a: R_386_PC32	loadFontWithName(char*)
1000281e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000281f: R_386_32	nextfont_
10002823:	83 c4 10             	add    esp,0x10
10002826:	39 c7                	cmp    edi,eax
10002828:	75 15                	jne    1000283f <getLegacyFont(char const*)+0xa9>
1000282a:	83 ec 0c             	sub    esp,0xc
1000282d:	68 1b 32 00 10       	push   0x1000321b	1000282e: R_386_32	.text
10002832:	e8 fc ff ff ff       	call   10002833 <getLegacyFont(char const*)+0x9d>	10002833: R_386_PC32	Dbg::kprintf(char const*, ...)
10002837:	83 c4 10             	add    esp,0x10
1000283a:	83 cb ff             	or     ebx,0xffffffff
1000283d:	eb 19                	jmp    10002858 <getLegacyFont(char const*)+0xc2>
1000283f:	52                   	push   edx
10002840:	48                   	dec    eax
10002841:	50                   	push   eax
10002842:	56                   	push   esi
10002843:	68 38 32 00 10       	push   0x10003238	10002844: R_386_32	.text
10002848:	e8 fc ff ff ff       	call   10002849 <getLegacyFont(char const*)+0xb3>	10002849: R_386_PC32	Dbg::kprintf(char const*, ...)
1000284d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000284e: R_386_32	nextfont_
10002852:	8d 58 ff             	lea    ebx,[eax-0x1]
10002855:	83 c4 10             	add    esp,0x10
10002858:	89 d8                	mov    eax,ebx
1000285a:	81 c4 00 01 00 00    	add    esp,0x100
10002860:	5b                   	pop    ebx
10002861:	5e                   	pop    esi
10002862:	5f                   	pop    edi
10002863:	c3                   	ret    

10002864 <getLegacyFont(LegacyFontType)>:
10002864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002868:	83 f8 05             	cmp    eax,0x5
1000286b:	77 46                	ja     100028b3 <getLegacyFont(LegacyFontType)+0x4f>
1000286d:	ff 24 85 84 32 00 10 	jmp    DWORD PTR [eax*4+0x10003284]	10002870: R_386_32	.text
10002874:	c7 44 24 04 77 31 00 10 	mov    DWORD PTR [esp+0x4],0x10003177	10002878: R_386_32	.text
1000287c:	eb 30                	jmp    100028ae <getLegacyFont(LegacyFontType)+0x4a>
1000287e:	c7 44 24 04 59 32 00 10 	mov    DWORD PTR [esp+0x4],0x10003259	10002882: R_386_32	.text
10002886:	eb 26                	jmp    100028ae <getLegacyFont(LegacyFontType)+0x4a>
10002888:	c7 44 24 04 61 32 00 10 	mov    DWORD PTR [esp+0x4],0x10003261	1000288c: R_386_32	.text
10002890:	eb 1c                	jmp    100028ae <getLegacyFont(LegacyFontType)+0x4a>
10002892:	c7 44 24 04 6a 32 00 10 	mov    DWORD PTR [esp+0x4],0x1000326a	10002896: R_386_32	.text
1000289a:	eb 12                	jmp    100028ae <getLegacyFont(LegacyFontType)+0x4a>
1000289c:	c7 44 24 04 72 32 00 10 	mov    DWORD PTR [esp+0x4],0x10003272	100028a0: R_386_32	.text
100028a4:	eb 08                	jmp    100028ae <getLegacyFont(LegacyFontType)+0x4a>
100028a6:	c7 44 24 04 78 32 00 10 	mov    DWORD PTR [esp+0x4],0x10003278	100028aa: R_386_32	.text
100028ae:	e9 e3 fe ff ff       	jmp    10002796 <getLegacyFont(char const*)>
100028b3:	83 c8 ff             	or     eax,0xffffffff
100028b6:	c3                   	ret    
100028b7:	90                   	nop

100028b8 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)>:
100028b8:	57                   	push   edi
100028b9:	53                   	push   ebx
100028ba:	83 ec 08             	sub    esp,0x8
100028bd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100028c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100028c5:	6a 02                	push   0x2
100028c7:	53                   	push   ebx
100028c8:	e8 fc ff ff ff       	call   100028c9 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x11>	100028c9: R_386_PC32	GDO::GDO(GDOType, Context*)
100028cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100028d1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100028d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100028d8:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
100028db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100028df:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
100028e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100028e3: R_386_32	System
100028e7:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
100028ea:	83 c9 ff             	or     ecx,0xffffffff
100028ed:	31 c0                	xor    eax,eax
100028ef:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
100028f3:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
100028f5:	89 ca                	mov    edx,ecx
100028f7:	f7 d2                	not    edx
100028f9:	89 14 24             	mov    DWORD PTR [esp],edx
100028fc:	e8 fc ff ff ff       	call   100028fd <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x45>	100028fd: R_386_PC32	malloc
10002901:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
10002904:	5a                   	pop    edx
10002905:	59                   	pop    ecx
10002906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000290a:	50                   	push   eax
1000290b:	e8 fc ff ff ff       	call   1000290c <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x54>	1000290c: R_386_PC32	strcpy
10002910:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002913: R_386_32	legacyDraw(GDO*)
10002917:	83 c4 14             	add    esp,0x14
1000291a:	5b                   	pop    ebx
1000291b:	5f                   	pop    edi
1000291c:	c3                   	ret    
1000291d:	90                   	nop

1000291e <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)>:
1000291e:	57                   	push   edi
1000291f:	53                   	push   ebx
10002920:	83 ec 08             	sub    esp,0x8
10002923:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002927:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000292b:	6a 02                	push   0x2
1000292d:	53                   	push   ebx
1000292e:	e8 fc ff ff ff       	call   1000292f <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x11>	1000292f: R_386_PC32	GDO::GDO(GDOType, Context*)
10002933:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002937:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000293a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000293e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10002941:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002945:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
10002948:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
1000294c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
1000294f:	83 c9 ff             	or     ecx,0xffffffff
10002952:	31 c0                	xor    eax,eax
10002954:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
10002958:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
1000295a:	89 ca                	mov    edx,ecx
1000295c:	f7 d2                	not    edx
1000295e:	89 14 24             	mov    DWORD PTR [esp],edx
10002961:	e8 fc ff ff ff       	call   10002962 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x44>	10002962: R_386_PC32	malloc
10002966:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
10002969:	5a                   	pop    edx
1000296a:	59                   	pop    ecx
1000296b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000296f:	50                   	push   eax
10002970:	e8 fc ff ff ff       	call   10002971 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x53>	10002971: R_386_PC32	strcpy
10002975:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002978: R_386_32	legacyDraw(GDO*)
1000297c:	83 c4 14             	add    esp,0x14
1000297f:	5b                   	pop    ebx
10002980:	5f                   	pop    edi
10002981:	c3                   	ret    

10002982 <legacyFontInit()>:
10002982:	83 ec 0c             	sub    esp,0xc
10002985:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002987: R_386_32	nextfont_
1000298f:	e8 fc ff ff ff       	call   10002990 <legacyFontInit()+0xe>	10002990: R_386_PC32	loadbuiltinfonts()
10002994:	e8 fc ff ff ff       	call   10002995 <legacyFontInit()+0x13>	10002995: R_386_PC32	loadfonts()
10002999:	83 ec 0c             	sub    esp,0xc
1000299c:	68 77 31 00 10       	push   0x10003177	1000299d: R_386_32	.text
100029a1:	e8 fc ff ff ff       	call   100029a2 <legacyFontInit()+0x20>	100029a2: R_386_PC32	getLegacyFont(char const*)
100029a6:	a3 00 00 00 00       	mov    ds:0x0,eax	100029a7: R_386_32	System
100029ab:	83 c4 1c             	add    esp,0x1c
100029ae:	c3                   	ret    
100029af:	90                   	nop

100029b0 <rectDrawFunc(GDO*)>:
100029b0:	83 ec 14             	sub    esp,0x14
100029b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100029b7:	ff 70 50             	push   DWORD PTR [eax+0x50]
100029ba:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
100029bd:	ff 70 48             	push   DWORD PTR [eax+0x48]
100029c0:	ff 70 44             	push   DWORD PTR [eax+0x44]
100029c3:	ff 70 40             	push   DWORD PTR [eax+0x40]
100029c6:	ff 70 04             	push   DWORD PTR [eax+0x4]
100029c9:	e8 fc ff ff ff       	call   100029ca <rectDrawFunc(GDO*)+0x1a>	100029ca: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
100029ce:	83 c4 2c             	add    esp,0x2c
100029d1:	c3                   	ret    

100029d2 <rectPtnDrawFunc(GDO*)>:
100029d2:	83 ec 14             	sub    esp,0x14
100029d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100029d9:	ff 70 50             	push   DWORD PTR [eax+0x50]
100029dc:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
100029df:	ff 70 48             	push   DWORD PTR [eax+0x48]
100029e2:	ff 70 44             	push   DWORD PTR [eax+0x44]
100029e5:	ff 70 40             	push   DWORD PTR [eax+0x40]
100029e8:	ff 70 04             	push   DWORD PTR [eax+0x4]
100029eb:	e8 fc ff ff ff       	call   100029ec <rectPtnDrawFunc(GDO*)+0x1a>	100029ec: R_386_PC32	Context::fillRect(int, int, int, int, Brush*)
100029f0:	83 c4 2c             	add    esp,0x2c
100029f3:	c3                   	ret    

100029f4 <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)>:
100029f4:	53                   	push   ebx
100029f5:	83 ec 0c             	sub    esp,0xc
100029f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100029fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002a00:	6a 01                	push   0x1
10002a02:	53                   	push   ebx
10002a03:	e8 fc ff ff ff       	call   10002a04 <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)+0x10>	10002a04: R_386_PC32	GDO::GDO(GDOType, Context*)
10002a08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002a0c:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10002a0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002a13:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10002a16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002a1a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10002a1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002a21:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10002a24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002a28:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10002a2b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002a2e: R_386_32	rectPtnDrawFunc(GDO*)
10002a32:	83 c4 18             	add    esp,0x18
10002a35:	5b                   	pop    ebx
10002a36:	c3                   	ret    
10002a37:	90                   	nop

10002a38 <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)>:
10002a38:	53                   	push   ebx
10002a39:	83 ec 0c             	sub    esp,0xc
10002a3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002a40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002a44:	6a 01                	push   0x1
10002a46:	53                   	push   ebx
10002a47:	e8 fc ff ff ff       	call   10002a48 <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)+0x10>	10002a48: R_386_PC32	GDO::GDO(GDOType, Context*)
10002a4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002a50:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10002a53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002a57:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10002a5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002a5e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10002a61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002a65:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10002a68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002a6c:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10002a6f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002a72: R_386_32	rectDrawFunc(GDO*)
10002a76:	83 c4 18             	add    esp,0x18
10002a79:	5b                   	pop    ebx
10002a7a:	c3                   	ret    
10002a7b:	90                   	nop

10002a7c <regnDrawFunc(GDO*)>:
10002a7c:	c3                   	ret    
10002a7d:	90                   	nop

10002a7e <Region::Region(int, int, int, int, Context*)>:
10002a7e:	53                   	push   ebx
10002a7f:	83 ec 0c             	sub    esp,0xc
10002a82:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002a86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10002a8a:	6a 00                	push   0x0
10002a8c:	53                   	push   ebx
10002a8d:	e8 fc ff ff ff       	call   10002a8e <Region::Region(int, int, int, int, Context*)+0x10>	10002a8e: R_386_PC32	GDO::GDO(GDOType, Context*)
10002a92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002a96:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
10002a99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002a9d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
10002aa0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002aa4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
10002aa7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002aab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
10002aae:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002ab1: R_386_32	regnDrawFunc(GDO*)
10002ab5:	83 c4 18             	add    esp,0x18
10002ab8:	5b                   	pop    ebx
10002ab9:	c3                   	ret    

10002aba <Region::getRegionsAbove(Region*)>:
10002aba:	55                   	push   ebp
10002abb:	57                   	push   edi
10002abc:	56                   	push   esi
10002abd:	53                   	push   ebx
10002abe:	83 ec 28             	sub    esp,0x28
10002ac1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10002ac5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10002ac9:	6a 08                	push   0x8
10002acb:	e8 fc ff ff ff       	call   10002acc <Region::getRegionsAbove(Region*)+0x12>	10002acc: R_386_PC32	malloc
10002ad0:	89 c3                	mov    ebx,eax
10002ad2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10002ad9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10002adf:	89 3c 24             	mov    DWORD PTR [esp],edi
10002ae2:	e8 fc ff ff ff       	call   10002ae3 <Region::getRegionsAbove(Region*)+0x29>	10002ae3: R_386_PC32	GDO::resetNext()
10002ae7:	83 c4 10             	add    esp,0x10
10002aea:	83 ec 0c             	sub    esp,0xc
10002aed:	57                   	push   edi
10002aee:	e8 fc ff ff ff       	call   10002aef <Region::getRegionsAbove(Region*)+0x35>	10002aef: R_386_PC32	GDO::hasNext()
10002af3:	83 c4 10             	add    esp,0x10
10002af6:	84 c0                	test   al,al
10002af8:	74 10                	je     10002b0a <Region::getRegionsAbove(Region*)+0x50>
10002afa:	83 ec 0c             	sub    esp,0xc
10002afd:	57                   	push   edi
10002afe:	e8 fc ff ff ff       	call   10002aff <Region::getRegionsAbove(Region*)+0x45>	10002aff: R_386_PC32	GDO::getNext()
10002b03:	83 c4 10             	add    esp,0x10
10002b06:	39 e8                	cmp    eax,ebp
10002b08:	75 e0                	jne    10002aea <Region::getRegionsAbove(Region*)+0x30>
10002b0a:	83 ec 0c             	sub    esp,0xc
10002b0d:	57                   	push   edi
10002b0e:	e8 fc ff ff ff       	call   10002b0f <Region::getRegionsAbove(Region*)+0x55>	10002b0f: R_386_PC32	GDO::hasNext()
10002b13:	83 c4 10             	add    esp,0x10
10002b16:	84 c0                	test   al,al
10002b18:	74 7b                	je     10002b95 <Region::getRegionsAbove(Region*)+0xdb>
10002b1a:	83 ec 0c             	sub    esp,0xc
10002b1d:	57                   	push   edi
10002b1e:	e8 fc ff ff ff       	call   10002b1f <Region::getRegionsAbove(Region*)+0x65>	10002b1f: R_386_PC32	GDO::getNext()
10002b23:	89 c6                	mov    esi,eax
10002b25:	83 c4 10             	add    esp,0x10
10002b28:	85 c0                	test   eax,eax
10002b2a:	74 de                	je     10002b0a <Region::getRegionsAbove(Region*)+0x50>
10002b2c:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
10002b2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10002b33:	8b 56 2c             	mov    edx,DWORD PTR [esi+0x2c]
10002b36:	03 45 34             	add    eax,DWORD PTR [ebp+0x34]
10002b39:	39 d0                	cmp    eax,edx
10002b3b:	7e cd                	jle    10002b0a <Region::getRegionsAbove(Region*)+0x50>
10002b3d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
10002b40:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
10002b43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002b47:	8b 45 38             	mov    eax,DWORD PTR [ebp+0x38]
10002b4a:	01 c8                	add    eax,ecx
10002b4c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10002b50:	7e b8                	jle    10002b0a <Region::getRegionsAbove(Region*)+0x50>
10002b52:	03 56 34             	add    edx,DWORD PTR [esi+0x34]
10002b55:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
10002b59:	7d af                	jge    10002b0a <Region::getRegionsAbove(Region*)+0x50>
10002b5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002b5f:	03 46 38             	add    eax,DWORD PTR [esi+0x38]
10002b62:	39 c1                	cmp    ecx,eax
10002b64:	7d a4                	jge    10002b0a <Region::getRegionsAbove(Region*)+0x50>
10002b66:	83 ec 0c             	sub    esp,0xc
10002b69:	6a 0c                	push   0xc
10002b6b:	e8 fc ff ff ff       	call   10002b6c <Region::getRegionsAbove(Region*)+0xb2>	10002b6c: R_386_PC32	malloc
10002b70:	89 30                	mov    DWORD PTR [eax],esi
10002b72:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10002b75:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10002b78:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10002b7f:	83 c4 10             	add    esp,0x10
10002b82:	85 d2                	test   edx,edx
10002b84:	74 05                	je     10002b8b <Region::getRegionsAbove(Region*)+0xd1>
10002b86:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
10002b89:	eb 02                	jmp    10002b8d <Region::getRegionsAbove(Region*)+0xd3>
10002b8b:	89 03                	mov    DWORD PTR [ebx],eax
10002b8d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10002b90:	e9 75 ff ff ff       	jmp    10002b0a <Region::getRegionsAbove(Region*)+0x50>
10002b95:	89 d8                	mov    eax,ebx
10002b97:	83 c4 1c             	add    esp,0x1c
10002b9a:	5b                   	pop    ebx
10002b9b:	5e                   	pop    esi
10002b9c:	5f                   	pop    edi
10002b9d:	5d                   	pop    ebp
10002b9e:	c3                   	ret    
10002b9f:	90                   	nop

10002ba0 <Region::applyBoundClipping(int, List<CRect*>*)>:
10002ba0:	55                   	push   ebp
10002ba1:	57                   	push   edi
10002ba2:	56                   	push   esi
10002ba3:	53                   	push   ebx
10002ba4:	83 ec 1c             	sub    esp,0x1c
10002ba7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002bab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
10002baf:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10002bb3:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10002bb7:	0f 84 ef 01 00 00    	je     10002dac <Region::applyBoundClipping(int, List<CRect*>*)+0x20c>
10002bbd:	83 ec 0c             	sub    esp,0xc
10002bc0:	53                   	push   ebx
10002bc1:	e8 fc ff ff ff       	call   10002bc2 <Region::applyBoundClipping(int, List<CRect*>*)+0x22>	10002bc2: R_386_PC32	GDO::screenX()
10002bc6:	89 c5                	mov    ebp,eax
10002bc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
10002bcb:	e8 fc ff ff ff       	call   10002bcc <Region::applyBoundClipping(int, List<CRect*>*)+0x2c>	10002bcc: R_386_PC32	GDO::screenY()
10002bd0:	89 c6                	mov    esi,eax
10002bd2:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10002bd9:	e8 fc ff ff ff       	call   10002bda <Region::applyBoundClipping(int, List<CRect*>*)+0x3a>	10002bda: R_386_PC32	malloc
10002bde:	89 c7                	mov    edi,eax
10002be0:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
10002be3:	01 e8                	add    eax,ebp
10002be5:	48                   	dec    eax
10002be6:	89 04 24             	mov    DWORD PTR [esp],eax
10002be9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10002bec:	01 f0                	add    eax,esi
10002bee:	48                   	dec    eax
10002bef:	50                   	push   eax
10002bf0:	55                   	push   ebp
10002bf1:	56                   	push   esi
10002bf2:	57                   	push   edi
10002bf3:	e8 fc ff ff ff       	call   10002bf4 <Region::applyBoundClipping(int, List<CRect*>*)+0x54>	10002bf4: R_386_PC32	CRect::CRect(int, int, int, int)
10002bf8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10002bfb:	83 c4 20             	add    esp,0x20
10002bfe:	85 c0                	test   eax,eax
10002c00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10002c04:	0f 85 ab 00 00 00    	jne    10002cb5 <Region::applyBoundClipping(int, List<CRect*>*)+0x115>
10002c0a:	85 d2                	test   edx,edx
10002c0c:	0f 84 8c 00 00 00    	je     10002c9e <Region::applyBoundClipping(int, List<CRect*>*)+0xfe>
10002c12:	31 f6                	xor    esi,esi
10002c14:	8b 02                	mov    eax,DWORD PTR [edx]
10002c16:	89 c5                	mov    ebp,eax
10002c18:	31 c9                	xor    ecx,ecx
10002c1a:	85 ed                	test   ebp,ebp
10002c1c:	74 06                	je     10002c24 <Region::applyBoundClipping(int, List<CRect*>*)+0x84>
10002c1e:	41                   	inc    ecx
10002c1f:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10002c22:	eb f6                	jmp    10002c1a <Region::applyBoundClipping(int, List<CRect*>*)+0x7a>
10002c24:	39 ce                	cmp    esi,ecx
10002c26:	7d 5f                	jge    10002c87 <Region::applyBoundClipping(int, List<CRect*>*)+0xe7>
10002c28:	89 c5                	mov    ebp,eax
10002c2a:	31 c9                	xor    ecx,ecx
10002c2c:	85 ed                	test   ebp,ebp
10002c2e:	74 06                	je     10002c36 <Region::applyBoundClipping(int, List<CRect*>*)+0x96>
10002c30:	41                   	inc    ecx
10002c31:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10002c34:	eb f6                	jmp    10002c2c <Region::applyBoundClipping(int, List<CRect*>*)+0x8c>
10002c36:	39 ce                	cmp    esi,ecx
10002c38:	7f 0c                	jg     10002c46 <Region::applyBoundClipping(int, List<CRect*>*)+0xa6>
10002c3a:	89 f1                	mov    ecx,esi
10002c3c:	85 c9                	test   ecx,ecx
10002c3e:	74 06                	je     10002c46 <Region::applyBoundClipping(int, List<CRect*>*)+0xa6>
10002c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10002c43:	49                   	dec    ecx
10002c44:	eb f6                	jmp    10002c3c <Region::applyBoundClipping(int, List<CRect*>*)+0x9c>
10002c46:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10002c4a:	8b 28                	mov    ebp,DWORD PTR [eax]
10002c4c:	83 ec 0c             	sub    esp,0xc
10002c4f:	6a 10                	push   0x10
10002c51:	e8 fc ff ff ff       	call   10002c52 <Region::applyBoundClipping(int, List<CRect*>*)+0xb2>	10002c52: R_386_PC32	malloc
10002c56:	59                   	pop    ecx
10002c57:	ff 75 04             	push   DWORD PTR [ebp+0x4]
10002c5a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10002c5d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
10002c60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002c63:	50                   	push   eax
10002c64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002c68:	e8 fc ff ff ff       	call   10002c69 <Region::applyBoundClipping(int, List<CRect*>*)+0xc9>	10002c69: R_386_PC32	CRect::CRect(int, int, int, int)
10002c6d:	83 c4 18             	add    esp,0x18
10002c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002c74:	50                   	push   eax
10002c75:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002c78:	e8 fc ff ff ff       	call   10002c79 <Region::applyBoundClipping(int, List<CRect*>*)+0xd9>	10002c79: R_386_PC32	Context::addClipRect(CRect*)
10002c7d:	46                   	inc    esi
10002c7e:	83 c4 10             	add    esp,0x10
10002c81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002c85:	eb 8d                	jmp    10002c14 <Region::applyBoundClipping(int, List<CRect*>*)+0x74>
10002c87:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002c8b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10002c8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002c92:	83 c4 1c             	add    esp,0x1c
10002c95:	5b                   	pop    ebx
10002c96:	5e                   	pop    esi
10002c97:	5f                   	pop    edi
10002c98:	5d                   	pop    ebp
10002c99:	e9 fc ff ff ff       	jmp    10002c9a <Region::applyBoundClipping(int, List<CRect*>*)+0xfa>	10002c9a: R_386_PC32	Context::intersectClipRect(CRect*)
10002c9e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002ca2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10002ca5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002ca9:	83 c4 1c             	add    esp,0x1c
10002cac:	5b                   	pop    ebx
10002cad:	5e                   	pop    esi
10002cae:	5f                   	pop    edi
10002caf:	5d                   	pop    ebp
10002cb0:	e9 fc ff ff ff       	jmp    10002cb1 <Region::applyBoundClipping(int, List<CRect*>*)+0x111>	10002cb1: R_386_PC32	Context::addClipRect(CRect*)
10002cb5:	51                   	push   ecx
10002cb6:	52                   	push   edx
10002cb7:	6a 01                	push   0x1
10002cb9:	50                   	push   eax
10002cba:	e8 fc ff ff ff       	call   10002cbb <Region::applyBoundClipping(int, List<CRect*>*)+0x11b>	10002cbb: R_386_PC32	Region::applyBoundClipping(int, List<CRect*>*)
10002cbf:	5e                   	pop    esi
10002cc0:	5d                   	pop    ebp
10002cc1:	57                   	push   edi
10002cc2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002cc5:	e8 fc ff ff ff       	call   10002cc6 <Region::applyBoundClipping(int, List<CRect*>*)+0x126>	10002cc6: R_386_PC32	Context::intersectClipRect(CRect*)
10002cca:	58                   	pop    eax
10002ccb:	5a                   	pop    edx
10002ccc:	53                   	push   ebx
10002ccd:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10002cd0:	e8 fc ff ff ff       	call   10002cd1 <Region::applyBoundClipping(int, List<CRect*>*)+0x131>	10002cd1: R_386_PC32	Region::getRegionsAbove(Region*)
10002cd5:	89 c6                	mov    esi,eax
10002cd7:	83 c4 10             	add    esp,0x10
10002cda:	8b 06                	mov    eax,DWORD PTR [esi]
10002cdc:	89 c1                	mov    ecx,eax
10002cde:	31 d2                	xor    edx,edx
10002ce0:	85 c9                	test   ecx,ecx
10002ce2:	74 06                	je     10002cea <Region::applyBoundClipping(int, List<CRect*>*)+0x14a>
10002ce4:	42                   	inc    edx
10002ce5:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10002ce8:	eb f6                	jmp    10002ce0 <Region::applyBoundClipping(int, List<CRect*>*)+0x140>
10002cea:	85 d2                	test   edx,edx
10002cec:	0f 84 8a 00 00 00    	je     10002d7c <Region::applyBoundClipping(int, List<CRect*>*)+0x1dc>
10002cf2:	8b 38                	mov    edi,DWORD PTR [eax]
10002cf4:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10002cf7:	52                   	push   edx
10002cf8:	52                   	push   edx
10002cf9:	6a 0c                	push   0xc
10002cfb:	50                   	push   eax
10002cfc:	e8 fc ff ff ff       	call   10002cfd <Region::applyBoundClipping(int, List<CRect*>*)+0x15d>	10002cfd: R_386_PC32	operator delete(void*, unsigned long)
10002d01:	89 2e                	mov    DWORD PTR [esi],ebp
10002d03:	83 c4 10             	add    esp,0x10
10002d06:	85 ed                	test   ebp,ebp
10002d08:	75 09                	jne    10002d13 <Region::applyBoundClipping(int, List<CRect*>*)+0x173>
10002d0a:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10002d11:	eb 07                	jmp    10002d1a <Region::applyBoundClipping(int, List<CRect*>*)+0x17a>
10002d13:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
10002d1a:	83 ec 0c             	sub    esp,0xc
10002d1d:	57                   	push   edi
10002d1e:	e8 fc ff ff ff       	call   10002d1f <Region::applyBoundClipping(int, List<CRect*>*)+0x17f>	10002d1f: R_386_PC32	GDO::screenX()
10002d23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002d27:	89 3c 24             	mov    DWORD PTR [esp],edi
10002d2a:	e8 fc ff ff ff       	call   10002d2b <Region::applyBoundClipping(int, List<CRect*>*)+0x18b>	10002d2b: R_386_PC32	GDO::screenY()
10002d2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002d33:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10002d3a:	e8 fc ff ff ff       	call   10002d3b <Region::applyBoundClipping(int, List<CRect*>*)+0x19b>	10002d3b: R_386_PC32	malloc
10002d3f:	89 c5                	mov    ebp,eax
10002d41:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10002d45:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
10002d48:	01 c8                	add    eax,ecx
10002d4a:	48                   	dec    eax
10002d4b:	89 04 24             	mov    DWORD PTR [esp],eax
10002d4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10002d52:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
10002d55:	01 d0                	add    eax,edx
10002d57:	48                   	dec    eax
10002d58:	50                   	push   eax
10002d59:	51                   	push   ecx
10002d5a:	52                   	push   edx
10002d5b:	55                   	push   ebp
10002d5c:	e8 fc ff ff ff       	call   10002d5d <Region::applyBoundClipping(int, List<CRect*>*)+0x1bd>	10002d5d: R_386_PC32	CRect::CRect(int, int, int, int)
10002d61:	83 c4 18             	add    esp,0x18
10002d64:	55                   	push   ebp
10002d65:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002d68:	e8 fc ff ff ff       	call   10002d69 <Region::applyBoundClipping(int, List<CRect*>*)+0x1c9>	10002d69: R_386_PC32	Context::subClipRect(CRect*)
10002d6d:	59                   	pop    ecx
10002d6e:	5f                   	pop    edi
10002d6f:	6a 10                	push   0x10
10002d71:	55                   	push   ebp
10002d72:	e8 fc ff ff ff       	call   10002d73 <Region::applyBoundClipping(int, List<CRect*>*)+0x1d3>	10002d73: R_386_PC32	operator delete(void*, unsigned long)
10002d77:	e9 5b ff ff ff       	jmp    10002cd7 <Region::applyBoundClipping(int, List<CRect*>*)+0x137>
10002d7c:	85 c0                	test   eax,eax
10002d7e:	74 14                	je     10002d94 <Region::applyBoundClipping(int, List<CRect*>*)+0x1f4>
10002d80:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002d83:	52                   	push   edx
10002d84:	52                   	push   edx
10002d85:	6a 0c                	push   0xc
10002d87:	50                   	push   eax
10002d88:	e8 fc ff ff ff       	call   10002d89 <Region::applyBoundClipping(int, List<CRect*>*)+0x1e9>	10002d89: R_386_PC32	operator delete(void*, unsigned long)
10002d8d:	89 d8                	mov    eax,ebx
10002d8f:	83 c4 10             	add    esp,0x10
10002d92:	eb e8                	jmp    10002d7c <Region::applyBoundClipping(int, List<CRect*>*)+0x1dc>
10002d94:	c7 44 24 34 08 00 00 00 	mov    DWORD PTR [esp+0x34],0x8
10002d9c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
10002da0:	83 c4 1c             	add    esp,0x1c
10002da3:	5b                   	pop    ebx
10002da4:	5e                   	pop    esi
10002da5:	5f                   	pop    edi
10002da6:	5d                   	pop    ebp
10002da7:	e9 fc ff ff ff       	jmp    10002da8 <Region::applyBoundClipping(int, List<CRect*>*)+0x208>	10002da8: R_386_PC32	operator delete(void*, unsigned long)
10002dac:	83 c4 1c             	add    esp,0x1c
10002daf:	5b                   	pop    ebx
10002db0:	5e                   	pop    esi
10002db1:	5f                   	pop    edi
10002db2:	5d                   	pop    ebp
10002db3:	c3                   	ret    

10002db4 <List<CRect*>::insertAtTail(CRect*)>:
10002db4:	53                   	push   ebx
10002db5:	83 ec 14             	sub    esp,0x14
10002db8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10002dbc:	6a 0c                	push   0xc
10002dbe:	e8 fc ff ff ff       	call   10002dbf <List<CRect*>::insertAtTail(CRect*)+0xb>	10002dbf: R_386_PC32	malloc
10002dc3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10002dc7:	89 10                	mov    DWORD PTR [eax],edx
10002dc9:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10002dcc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10002dcf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10002dd6:	83 c4 10             	add    esp,0x10
10002dd9:	85 d2                	test   edx,edx
10002ddb:	74 05                	je     10002de2 <List<CRect*>::insertAtTail(CRect*)+0x2e>
10002ddd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
10002de0:	eb 02                	jmp    10002de4 <List<CRect*>::insertAtTail(CRect*)+0x30>
10002de2:	89 03                	mov    DWORD PTR [ebx],eax
10002de4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10002de7:	83 c4 08             	add    esp,0x8
10002dea:	5b                   	pop    ebx
10002deb:	c3                   	ret    

10002dec <List<CRect*>::deleteHead()>:
10002dec:	56                   	push   esi
10002ded:	53                   	push   ebx
10002dee:	51                   	push   ecx
10002def:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002df3:	8b 06                	mov    eax,DWORD PTR [esi]
10002df5:	85 c0                	test   eax,eax
10002df7:	74 26                	je     10002e1f <List<CRect*>::deleteHead()+0x33>
10002df9:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002dfc:	52                   	push   edx
10002dfd:	52                   	push   edx
10002dfe:	6a 0c                	push   0xc
10002e00:	50                   	push   eax
10002e01:	e8 fc ff ff ff       	call   10002e02 <List<CRect*>::deleteHead()+0x16>	10002e02: R_386_PC32	operator delete(void*, unsigned long)
10002e06:	89 1e                	mov    DWORD PTR [esi],ebx
10002e08:	83 c4 10             	add    esp,0x10
10002e0b:	85 db                	test   ebx,ebx
10002e0d:	75 09                	jne    10002e18 <List<CRect*>::deleteHead()+0x2c>
10002e0f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10002e16:	eb 07                	jmp    10002e1f <List<CRect*>::deleteHead()+0x33>
10002e18:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10002e1f:	58                   	pop    eax
10002e20:	5b                   	pop    ebx
10002e21:	5e                   	pop    esi
10002e22:	c3                   	ret    
10002e23:	90                   	nop

10002e24 <List<CRect*>::~List()>:
10002e24:	53                   	push   ebx
10002e25:	83 ec 08             	sub    esp,0x8
10002e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002e2c:	8b 00                	mov    eax,DWORD PTR [eax]
10002e2e:	85 c0                	test   eax,eax
10002e30:	74 14                	je     10002e46 <List<CRect*>::~List()+0x22>
10002e32:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002e35:	51                   	push   ecx
10002e36:	51                   	push   ecx
10002e37:	6a 0c                	push   0xc
10002e39:	50                   	push   eax
10002e3a:	e8 fc ff ff ff       	call   10002e3b <List<CRect*>::~List()+0x17>	10002e3b: R_386_PC32	operator delete(void*, unsigned long)
10002e3f:	89 d8                	mov    eax,ebx
10002e41:	83 c4 10             	add    esp,0x10
10002e44:	eb e8                	jmp    10002e2e <List<CRect*>::~List()+0xa>
10002e46:	83 c4 08             	add    esp,0x8
10002e49:	5b                   	pop    ebx
10002e4a:	c3                   	ret    
10002e4b:	43                   	inc    ebx
10002e4c:	4c                   	dec    esp
10002e4d:	49                   	dec    ecx
10002e4e:	50                   	push   eax
10002e4f:	44                   	inc    esp
10002e50:	52                   	push   edx
10002e51:	41                   	inc    ecx
10002e52:	57                   	push   edi
10002e53:	20 53 54             	and    BYTE PTR [ebx+0x54],dl
10002e56:	41                   	inc    ecx
10002e57:	52                   	push   edx
10002e58:	54                   	push   esp
10002e59:	45                   	inc    ebp
10002e5a:	44                   	inc    esp
10002e5b:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002e5e:	54                   	push   esp
10002e5f:	68 65 20 53 79       	push   0x79532065
10002e64:	73 74                	jae    10002eda <List<CRect*>::~List()+0xb6>
10002e66:	65 6d                	gs ins DWORD PTR es:[edi],dx
10002e68:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10002e6b:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e6c:	74 21                	je     10002e8f <List<CRect*>::~List()+0x6b>
10002e6e:	00 54 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dl
10002e72:	65 73 20             	gs jae 10002e95 <List<CRect*>::~List()+0x71>
10002e75:	4e                   	dec    esi
10002e76:	65 77 20             	gs ja  10002e99 <List<CRect*>::~List()+0x75>
10002e79:	52                   	push   edx
10002e7a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002e7b:	6d                   	ins    DWORD PTR es:[edi],dx
10002e7c:	61                   	popa   
10002e7d:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e7e:	21 00                	and    DWORD PTR [eax],eax
10002e80:	43                   	inc    ebx
10002e81:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002e82:	6d                   	ins    DWORD PTR es:[edi],dx
10002e83:	69 63 20 53 61 6e 73 	imul   esp,DWORD PTR [ebx+0x20],0x736e6153
10002e8a:	21 20                	and    DWORD PTR [eax],esp
10002e8c:	3a 29                	cmp    ch,BYTE PTR [ecx]
10002e8e:	00 41 72             	add    BYTE PTR [ecx+0x72],al
10002e91:	69 61 6c 20 69 73 20 	imul   esp,DWORD PTR [ecx+0x6c],0x20736920
10002e98:	73 6f                	jae    10002f09 <List<CRect*>::~List()+0xe5>
10002e9a:	20 62 6f             	and    BYTE PTR [edx+0x6f],ah
10002e9d:	72 69                	jb     10002f08 <List<CRect*>::~List()+0xe4>
10002e9f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002ea0:	67 2e 2e 2e 00 43 6f 	cs cs add BYTE PTR cs:[bp+di+0x6f],al
10002ea7:	75 72                	jne    10002f1b <List<CRect*>::~List()+0xf7>
10002ea9:	69 65 72 20 66 6f 72 	imul   esp,DWORD PTR [ebp+0x72],0x726f6620
10002eb0:	20 70 72             	and    BYTE PTR [eax+0x72],dh
10002eb3:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002eb4:	67 72 61             	addr16 jb 10002f18 <List<CRect*>::~List()+0xf4>
10002eb7:	6d                   	ins    DWORD PTR es:[edi],dx
10002eb8:	6d                   	ins    DWORD PTR es:[edi],dx
10002eb9:	69 6e 67 2e 2e 2e 00 	imul   ebp,DWORD PTR [esi+0x67],0x2e2e2e
10002ec0:	50                   	push   eax
10002ec1:	55                   	push   ebp
10002ec2:	54                   	push   esp
10002ec3:	20 4d 4f             	and    BYTE PTR [ebp+0x4f],cl
10002ec6:	55                   	push   ebp
10002ec7:	53                   	push   ebx
10002ec8:	45                   	inc    ebp
10002ec9:	20 49 4e             	and    BYTE PTR [ecx+0x4e],cl
10002ecc:	20 54 4f 50          	and    BYTE PTR [edi+ecx*2+0x50],dl
10002ed0:	20 52 49             	and    BYTE PTR [edx+0x49],dl
10002ed3:	47                   	inc    edi
10002ed4:	48                   	dec    eax
10002ed5:	54                   	push   esp
10002ed6:	20 43 4f             	and    BYTE PTR [ebx+0x4f],al
10002ed9:	52                   	push   edx
10002eda:	4e                   	dec    esi
10002edb:	45                   	inc    ebp
10002edc:	52                   	push   edx
10002edd:	20 54 4f 20          	and    BYTE PTR [edi+ecx*2+0x20],dl
10002ee1:	54                   	push   esp
10002ee2:	45                   	inc    ebp
10002ee3:	53                   	push   ebx
10002ee4:	54                   	push   esp
10002ee5:	20 42 53             	and    BYTE PTR [edx+0x53],al
10002ee8:	4f                   	dec    edi
10002ee9:	44                   	inc    esp
10002eea:	00 90 86 08 00 10    	add    BYTE PTR [eax+0x10000886],dl	10002eec: R_386_32	.text
10002ef0:	8d 08                	lea    ecx,[eax]	10002ef0: R_386_32	.text
10002ef2:	00 10                	add    BYTE PTR [eax],dl
10002ef4:	94                   	xchg   esp,eax	10002ef4: R_386_32	.text
10002ef5:	08 00                	or     BYTE PTR [eax],al
10002ef7:	10 9b 08 00 10 a2    	adc    BYTE PTR [ebx-0x5deffff8],bl	10002ef8: R_386_32	.text
	10002efc: R_386_32	.text
10002efd:	08 00                	or     BYTE PTR [eax],al
10002eff:	10 a7 08 00 10 b0    	adc    BYTE PTR [edi-0x4feffff8],ah	10002f00: R_386_32	.text
	10002f04: R_386_32	.text
10002f05:	08 00                	or     BYTE PTR [eax],al
10002f07:	10 b9 08 00 10 c2    	adc    BYTE PTR [ecx-0x3deffff8],bh	10002f08: R_386_32	.text
	10002f0c: R_386_32	.text
10002f0d:	08 00                	or     BYTE PTR [eax],al
10002f0f:	10 de                	adc    dh,bl	10002f10: R_386_32	.text
10002f11:	08 00                	or     BYTE PTR [eax],al
10002f13:	10 e7                	adc    bh,ah	10002f14: R_386_32	.text
10002f15:	08 00                	or     BYTE PTR [eax],al
10002f17:	10 f3                	adc    bl,dh	10002f18: R_386_32	.text
10002f19:	08 00                	or     BYTE PTR [eax],al
10002f1b:	10 fb                	adc    bl,bh	10002f1c: R_386_32	.text
10002f1d:	08 00                	or     BYTE PTR [eax],al
10002f1f:	10 03                	adc    BYTE PTR [ebx],al	10002f20: R_386_32	.text
10002f21:	09 00                	or     DWORD PTR [eax],eax
10002f23:	10 18                	adc    BYTE PTR [eax],bl	10002f24: R_386_32	.text
10002f25:	09 00                	or     DWORD PTR [eax],eax
10002f27:	10 6d 69             	adc    BYTE PTR [ebp+0x69],ch
10002f2a:	64 70 74             	fs jo  10002fa1 <List<CRect*>::~List()+0x17d>
10002f2d:	65 6c                	gs ins BYTE PTR es:[edi],dx
10002f2f:	6c                   	ins    BYTE PTR es:[edi],dx
10002f30:	69 70 73 65 20 47 4f 	imul   esi,DWORD PTR [eax+0x73],0x4f472065
10002f37:	54                   	push   esp
10002f38:	20 4e 55             	and    BYTE PTR [esi+0x55],cl
10002f3b:	4c                   	dec    esp
10002f3c:	4c                   	dec    esp
10002f3d:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
10002f40:	69 70 70 65 64 45 6c 	imul   esi,DWORD PTR [eax+0x70],0x6c456465
10002f47:	6c                   	ins    BYTE PTR es:[edi],dx
10002f48:	69 70 73 65 20 47 4f 	imul   esi,DWORD PTR [eax+0x73],0x4f472065
10002f4f:	54                   	push   esp
10002f50:	20 4e 55             	and    BYTE PTR [esi+0x55],cl
10002f53:	4c                   	dec    esp
10002f54:	4c                   	dec    esp
10002f55:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
10002f58:	69 70 70 65 64 45 6c 	imul   esi,DWORD PTR [eax+0x70],0x6c456465
10002f5f:	6c                   	ins    BYTE PTR es:[edi],dx
10002f60:	69 70 73 65 58 20 47 	imul   esi,DWORD PTR [eax+0x73],0x47205865
10002f67:	4f                   	dec    edi
10002f68:	54                   	push   esp
10002f69:	20 4e 55             	and    BYTE PTR [esi+0x55],cl
10002f6c:	4c                   	dec    esp
10002f6d:	4c                   	dec    esp
10002f6e:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10002f71:	2f                   	das    
10002f72:	42                   	inc    edx
10002f73:	61                   	popa   
10002f74:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002f75:	61                   	popa   
10002f76:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002f77:	61                   	popa   
10002f78:	2f                   	das    
10002f79:	43                   	inc    ebx
10002f7a:	75 72                	jne    10002fee <List<CRect*>::~List()+0x1ca>
10002f7c:	73 6f                	jae    10002fed <List<CRect*>::~List()+0x1c9>
10002f7e:	72 73                	jb     10002ff3 <List<CRect*>::~List()+0x1cf>
10002f80:	2f                   	das    
10002f81:	53                   	push   ebx
10002f82:	54                   	push   esp
10002f83:	41                   	inc    ecx
10002f84:	4e                   	dec    esi
10002f85:	44                   	inc    esp
10002f86:	41                   	inc    ecx
10002f87:	52                   	push   edx
10002f88:	44                   	inc    esp
10002f89:	2e 43                	cs inc ebx
10002f8b:	55                   	push   ebp
10002f8c:	52                   	push   edx
10002f8d:	00 43 55             	add    BYTE PTR [ebx+0x55],al
10002f90:	52                   	push   edx
10002f91:	53                   	push   ebx
10002f92:	4f                   	dec    edi
10002f93:	52                   	push   edx
10002f94:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002f98:	44                   	inc    esp
10002f99:	3a 20                	cmp    ah,BYTE PTR [eax]
10002f9b:	42                   	inc    edx
10002f9c:	41                   	inc    ecx
10002f9d:	44                   	inc    esp
10002f9e:	20 31                	and    BYTE PTR [ecx],dh
10002fa0:	0a 00                	or     al,BYTE PTR [eax]
10002fa2:	43                   	inc    ebx
10002fa3:	55                   	push   ebp
10002fa4:	52                   	push   edx
10002fa5:	53                   	push   ebx
10002fa6:	4f                   	dec    edi
10002fa7:	52                   	push   edx
10002fa8:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002fac:	44                   	inc    esp
10002fad:	3a 20                	cmp    ah,BYTE PTR [eax]
10002faf:	42                   	inc    edx
10002fb0:	41                   	inc    ecx
10002fb1:	44                   	inc    esp
10002fb2:	20 32                	and    BYTE PTR [edx],dh
10002fb4:	0a 00                	or     al,BYTE PTR [eax]
10002fb6:	43                   	inc    ebx
10002fb7:	55                   	push   ebp
10002fb8:	52                   	push   edx
10002fb9:	53                   	push   ebx
10002fba:	4f                   	dec    edi
10002fbb:	52                   	push   edx
10002fbc:	53                   	push   ebx
10002fbd:	3a 20                	cmp    ah,BYTE PTR [eax]
10002fbf:	25 64 0a 00 4e       	and    eax,0x4e000a64
10002fc4:	52                   	push   edx
10002fc5:	4d                   	dec    ebp
10002fc6:	4c                   	dec    esp
10002fc7:	00 57 41             	add    BYTE PTR [edi+0x41],dl
10002fca:	49                   	dec    ecx
10002fcb:	54                   	push   esp
10002fcc:	00 54 4c 44          	add    BYTE PTR [esp+ecx*2+0x44],dl
10002fd0:	52                   	push   edx
10002fd1:	00 54 45 58          	add    BYTE PTR [ebp+eax*2+0x58],dl
10002fd5:	54                   	push   esp
10002fd6:	00 56 45             	add    BYTE PTR [esi+0x45],dl
10002fd9:	52                   	push   edx
10002fda:	54                   	push   esp
10002fdb:	00 48 4f             	add    BYTE PTR [eax+0x4f],cl
10002fde:	52                   	push   edx
10002fdf:	5a                   	pop    edx
10002fe0:	00 48 41             	add    BYTE PTR [eax+0x41],cl
10002fe3:	4e                   	dec    esi
10002fe4:	44                   	inc    esp
10002fe5:	00 43 55             	add    BYTE PTR [ebx+0x55],al
10002fe8:	52                   	push   edx
10002fe9:	53                   	push   ebx
10002fea:	4f                   	dec    edi
10002feb:	52                   	push   edx
10002fec:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002ff0:	44                   	inc    esp
10002ff1:	3a 20                	cmp    ah,BYTE PTR [eax]
10002ff3:	42                   	inc    edx
10002ff4:	41                   	inc    ecx
10002ff5:	44                   	inc    esp
10002ff6:	20 33                	and    BYTE PTR [ebx],dh
10002ff8:	0a 00                	or     al,BYTE PTR [eax]
10002ffa:	61                   	popa   
10002ffb:	6c                   	ins    BYTE PTR es:[edi],dx
10002ffc:	6c                   	ins    BYTE PTR es:[edi],dx
10002ffd:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002ffe:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
10003001:	69 6e 67 20 74 68 65 	imul   ebp,DWORD PTR [esi+0x67],0x65687420
10003008:	20 63 68             	and    BYTE PTR [ebx+0x68],ah
1000300b:	69 6c 64 20 64 69 6d 2e 	imul   ebp,DWORD PTR [esp+eiz*2+0x20],0x2e6d6964
10003013:	0a 00                	or     al,BYTE PTR [eax]
10003015:	63 68 69             	arpl   WORD PTR [eax+0x69],bp
10003018:	6c                   	ins    BYTE PTR es:[edi],dx
10003019:	64 44                	fs inc esp
1000301b:	69 6d 20 3d 20 30 78 	imul   ebp,DWORD PTR [ebp+0x20],0x7830203d
10003022:	25 58 0a 00 4e       	and    eax,0x4e000a58
10003027:	4f                   	dec    edi
10003028:	20 43 48             	and    BYTE PTR [ebx+0x48],al
1000302b:	49                   	dec    ecx
1000302c:	4c                   	dec    esp
1000302d:	44                   	inc    esp
1000302e:	20 44 49 4d          	and    BYTE PTR [ecx+ecx*2+0x4d],al
10003032:	00 70 72             	add    BYTE PTR [eax+0x72],dh
10003035:	65 2d 65 6d 70 74    	gs sub eax,0x74706d65
1000303b:	69 76 65 20 47 44 4f 	imul   esi,DWORD PTR [esi+0x65],0x4f444720
10003042:	3a 3a                	cmp    bh,BYTE PTR [edx]
10003044:	73 63                	jae    100030a9 <List<CRect*>::~List()+0x285>
10003046:	72 65                	jb     100030ad <List<CRect*>::~List()+0x289>
10003048:	65 6e                	outs   dx,BYTE PTR gs:[esi]
1000304a:	58                   	pop    eax
1000304b:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
1000304e:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10003051:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003052:	2d 72 65 67 69       	sub    eax,0x69676572
10003057:	6f                   	outs   dx,DWORD PTR ds:[esi]
10003058:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003059:	00 70 72             	add    BYTE PTR [eax+0x72],dh
1000305c:	65 2d 65 6d 70 74    	gs sub eax,0x74706d65
10003062:	69 76 65 20 47 44 4f 	imul   esi,DWORD PTR [esi+0x65],0x4f444720
10003069:	3a 3a                	cmp    bh,BYTE PTR [edx]
1000306b:	73 63                	jae    100030d0 <List<CRect*>::~List()+0x2ac>
1000306d:	72 65                	jb     100030d4 <List<CRect*>::~List()+0x2b0>
1000306f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10003071:	59                   	pop    ecx
10003072:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
10003075:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10003078:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003079:	2d 72 65 67 69       	sub    eax,0x69676572
1000307e:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000307f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003080:	00 55 50             	add    BYTE PTR [ebp+0x50],dl
10003083:	44                   	inc    esp
10003084:	41                   	inc    ecx
10003085:	54                   	push   esp
10003086:	45                   	inc    ebp
10003087:	20 43 41             	and    BYTE PTR [ebx+0x41],al
1000308a:	4c                   	dec    esp
1000308b:	4c                   	dec    esp
1000308c:	45                   	inc    ebp
1000308d:	44                   	inc    esp
1000308e:	20 4f 4e             	and    BYTE PTR [edi+0x4e],cl
10003091:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10003094:	4e                   	dec    esi
10003095:	2d 52 45 47 49       	sub    eax,0x49474552
1000309a:	4f                   	dec    edi
1000309b:	4e                   	dec    esi
1000309c:	00 47 44             	add    BYTE PTR [edi+0x44],al
1000309f:	4f                   	dec    edi
100030a0:	3a 3a                	cmp    bh,BYTE PTR [edx]
100030a2:	61                   	popa   
100030a3:	64 64 43             	fs fs inc ebx
100030a6:	68 69 6c 64 20       	push   0x20646c69
100030ab:	6f                   	outs   dx,DWORD PTR ds:[esi]
100030ac:	6e                   	outs   dx,BYTE PTR ds:[esi]
100030ad:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
100030b0:	6e                   	outs   dx,BYTE PTR ds:[esi]
100030b1:	2d 72 65 67 69       	sub    eax,0x69676572
100030b6:	6f                   	outs   dx,DWORD PTR ds:[esi]
100030b7:	6e                   	outs   dx,BYTE PTR ds:[esi]
100030b8:	00 43 52             	add    BYTE PTR [ebx+0x52],al
100030bb:	45                   	inc    ebp
100030bc:	41                   	inc    ecx
100030bd:	54                   	push   esp
100030be:	49                   	dec    ecx
100030bf:	4e                   	dec    esi
100030c0:	47                   	inc    edi
100030c1:	20 41 20             	and    BYTE PTR [ecx+0x20],al
100030c4:	4e                   	dec    esi
100030c5:	45                   	inc    ebp
100030c6:	57                   	push   edi
100030c7:	20 44 49 4d          	and    BYTE PTR [ecx+ecx*2+0x4d],al
100030cb:	20 41 54             	and    BYTE PTR [ecx+0x54],al
100030ce:	20 25 64 0a 00 63    	and    BYTE PTR ds:0x63000a64,ah
100030d4:	68 69 6c 64 44       	push   0x44646c69
100030d9:	69 6d 5b 6e 6f 74 44 	imul   ebp,DWORD PTR [ebp+0x5b],0x44746f6e
100030e0:	69 6d 5d 20 3d 20 30 	imul   ebp,DWORD PTR [ebp+0x5d],0x30203d20
100030e7:	78 25                	js     1000310e <List<CRect*>::~List()+0x2ea>
100030e9:	58                   	pop    eax
100030ea:	0a 00                	or     al,BYTE PTR [eax]
100030ec:	47                   	inc    edi
100030ed:	44                   	inc    esp
100030ee:	4f                   	dec    edi
100030ef:	3a 3a                	cmp    bh,BYTE PTR [edx]
100030f1:	61                   	popa   
100030f2:	64 64 43             	fs fs inc ebx
100030f5:	68 69 6c 64 20       	push   0x20646c69
100030fa:	6e                   	outs   dx,BYTE PTR ds:[esi]
100030fb:	6f                   	outs   dx,DWORD PTR ds:[esi]
100030fc:	20 6d 6f             	and    BYTE PTR [ebp+0x6f],ch
100030ff:	72 65                	jb     10003166 <List<CRect*>::~List()+0x342>
10003101:	20 73 6c             	and    BYTE PTR [ebx+0x6c],dh
10003104:	6f                   	outs   dx,DWORD PTR ds:[esi]
10003105:	74 73                	je     1000317a <List<CRect*>::~List()+0x356>
10003107:	20 6c 65 66          	and    BYTE PTR [ebp+eiz*2+0x66],ch
1000310b:	74 21                	je     1000312e <List<CRect*>::~List()+0x30a>
1000310d:	00 47 44             	add    BYTE PTR [edi+0x44],al
10003110:	4f                   	dec    edi
10003111:	3a 3a                	cmp    bh,BYTE PTR [edx]
10003113:	72 65                	jb     1000317a <List<CRect*>::~List()+0x356>
10003115:	6d                   	ins    DWORD PTR es:[edi],dx
10003116:	6f                   	outs   dx,DWORD PTR ds:[esi]
10003117:	76 65                	jbe    1000317e <List<CRect*>::~List()+0x35a>
10003119:	43                   	inc    ebx
1000311a:	68 69 6c 64 20       	push   0x20646c69
1000311f:	6f                   	outs   dx,DWORD PTR ds:[esi]
10003120:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003121:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10003124:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003125:	2d 72 65 67 69       	sub    eax,0x69676572
1000312a:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000312b:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000312c:	00 4c 4f 41          	add    BYTE PTR [edi+ecx*2+0x41],cl
10003130:	44                   	inc    esp
10003131:	49                   	dec    ecx
10003132:	4e                   	dec    esi
10003133:	47                   	inc    edi
10003134:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10003138:	41                   	inc    ecx
10003139:	43                   	inc    ebx
1000313a:	59                   	pop    ecx
1000313b:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
1000313e:	4e                   	dec    esi
1000313f:	54                   	push   esp
10003140:	20 57 49             	and    BYTE PTR [edi+0x49],dl
10003143:	54                   	push   esp
10003144:	48                   	dec    eax
10003145:	20 4e 41             	and    BYTE PTR [esi+0x41],cl
10003148:	4d                   	dec    ebp
10003149:	45                   	inc    ebp
1000314a:	20 27                	and    BYTE PTR [edi],ah
1000314c:	25 73 27 0a 00       	and    eax,0xa2773
10003151:	43                   	inc    ebx
10003152:	41                   	inc    ecx
10003153:	4e                   	dec    esi
10003154:	4e                   	dec    esi
10003155:	4f                   	dec    edi
10003156:	54                   	push   esp
10003157:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
1000315b:	44                   	inc    esp
1000315c:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
1000315f:	4e                   	dec    esi
10003160:	54                   	push   esp
10003161:	53                   	push   ebx
10003162:	00 46 6f             	add    BYTE PTR [esi+0x6f],al
10003165:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003166:	74 4e                	je     100031b6 <List<CRect*>::~List()+0x392>
10003168:	61                   	popa   
10003169:	6d                   	ins    DWORD PTR es:[edi],dx
1000316a:	65 73 5b             	gs jae 100031c8 <List<CRect*>::~List()+0x3a4>
1000316d:	25 64 5d 20 3d       	and    eax,0x3d205d64
10003172:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10003178:	59                   	pop    ecx
10003179:	53                   	push   ebx
1000317a:	54                   	push   esp
1000317b:	45                   	inc    ebp
1000317c:	4d                   	dec    ebp
1000317d:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10003180:	2f                   	das    
10003181:	42                   	inc    edx
10003182:	41                   	inc    ecx
10003183:	4e                   	dec    esi
10003184:	41                   	inc    ecx
10003185:	4e                   	dec    esi
10003186:	41                   	inc    ecx
10003187:	2f                   	das    
10003188:	46                   	inc    esi
10003189:	4f                   	dec    edi
1000318a:	4e                   	dec    esi
1000318b:	54                   	push   esp
1000318c:	53                   	push   ebx
1000318d:	2f                   	das    
1000318e:	4c                   	dec    esp
1000318f:	45                   	inc    ebp
10003190:	47                   	inc    edi
10003191:	41                   	inc    ecx
10003192:	43                   	inc    ebx
10003193:	59                   	pop    ecx
10003194:	00 64 69 72          	add    BYTE PTR [ecx+ebp*2+0x72],ah
10003198:	2d 3e 72 65 61       	sub    eax,0x6165723e
1000319d:	64 2e 20 73 74       	fs and BYTE PTR cs:[ebx+0x74],dh
100031a2:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
100031a8:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
100031ab:	2f                   	das    
100031ac:	42                   	inc    edx
100031ad:	41                   	inc    ecx
100031ae:	4e                   	dec    esi
100031af:	41                   	inc    ecx
100031b0:	4e                   	dec    esi
100031b1:	41                   	inc    ecx
100031b2:	2f                   	das    
100031b3:	46                   	inc    esi
100031b4:	4f                   	dec    edi
100031b5:	4e                   	dec    esi
100031b6:	54                   	push   esp
100031b7:	53                   	push   ebx
100031b8:	2f                   	das    
100031b9:	4c                   	dec    esp
100031ba:	45                   	inc    ebp
100031bb:	47                   	inc    edi
100031bc:	41                   	inc    ecx
100031bd:	43                   	inc    ebx
100031be:	59                   	pop    ecx
100031bf:	2f                   	das    
100031c0:	00 64 70 20          	add    BYTE PTR [eax+esi*2+0x20],ah
100031c4:	6e                   	outs   dx,BYTE PTR ds:[esi]
100031c5:	61                   	popa   
100031c6:	6d                   	ins    DWORD PTR es:[edi],dx
100031c7:	65 20 3d 20 25 73 0a 	and    BYTE PTR gs:0xa732520,bh
100031ce:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
100031d1:	2f                   	das    
100031d2:	42                   	inc    edx
100031d3:	61                   	popa   
100031d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
100031d5:	61                   	popa   
100031d6:	6e                   	outs   dx,BYTE PTR ds:[esi]
100031d7:	61                   	popa   
100031d8:	2f                   	das    
100031d9:	46                   	inc    esi
100031da:	6f                   	outs   dx,DWORD PTR ds:[esi]
100031db:	6e                   	outs   dx,BYTE PTR ds:[esi]
100031dc:	74 73                	je     10003251 <List<CRect*>::~List()+0x42d>
100031de:	2f                   	das    
100031df:	4c                   	dec    esp
100031e0:	65 67 61             	gs addr16 popa 
100031e3:	63 79 2f             	arpl   WORD PTR [ecx+0x2f],di
100031e6:	00 2e                	add    BYTE PTR [esi],ch
100031e8:	46                   	inc    esi
100031e9:	4e                   	dec    esi
100031ea:	54                   	push   esp
100031eb:	00 25 73 20 76 73    	add    BYTE PTR ds:0x73762073,ah
100031f1:	2e 20 25 73 0a 00 46 	and    BYTE PTR cs:0x46000a73,ah
100031f8:	4f                   	dec    edi
100031f9:	55                   	push   ebp
100031fa:	4e                   	dec    esi
100031fb:	44                   	inc    esp
100031fc:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10003200:	41                   	inc    ecx
10003201:	43                   	inc    ebx
10003202:	59                   	pop    ecx
10003203:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10003206:	4e                   	dec    esi
10003207:	54                   	push   esp
10003208:	20 27                	and    BYTE PTR [edi],ah
1000320a:	25 73 27 20 57       	and    eax,0x57202773
1000320f:	49                   	dec    ecx
10003210:	54                   	push   esp
10003211:	48                   	dec    eax
10003212:	20 49 44             	and    BYTE PTR [ecx+0x44],cl
10003215:	20 25 64 2e 0a 00    	and    BYTE PTR ds:0xa2e64,ah
1000321b:	43                   	inc    ebx
1000321c:	4f                   	dec    edi
1000321d:	55                   	push   ebp
1000321e:	4c                   	dec    esp
1000321f:	44                   	inc    esp
10003220:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10003223:	54                   	push   esp
10003224:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10003228:	44                   	inc    esp
10003229:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
1000322d:	41                   	inc    ecx
1000322e:	43                   	inc    ebx
1000322f:	59                   	pop    ecx
10003230:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10003233:	4e                   	dec    esi
10003234:	54                   	push   esp
10003235:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10003238:	4c                   	dec    esp
10003239:	4f                   	dec    edi
1000323a:	41                   	inc    ecx
1000323b:	44                   	inc    esp
1000323c:	45                   	inc    ebp
1000323d:	44                   	inc    esp
1000323e:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10003242:	41                   	inc    ecx
10003243:	43                   	inc    ebx
10003244:	59                   	pop    ecx
10003245:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10003248:	4e                   	dec    esi
10003249:	54                   	push   esp
1000324a:	20 25 73 20 54 4f    	and    BYTE PTR ds:0x4f542073,ah
10003250:	20 49 44             	and    BYTE PTR [ecx+0x44],cl
10003253:	20 25 64 2e 0a 00    	and    BYTE PTR ds:0xa2e64,ah
10003259:	43                   	inc    ebx
1000325a:	4f                   	dec    edi
1000325b:	55                   	push   ebp
1000325c:	52                   	push   edx
1000325d:	49                   	dec    ecx
1000325e:	45                   	inc    ebp
1000325f:	52                   	push   edx
10003260:	00 43 4f             	add    BYTE PTR [ebx+0x4f],al
10003263:	55                   	push   ebp
10003264:	52                   	push   edx
10003265:	49                   	dec    ecx
10003266:	45                   	inc    ebp
10003267:	52                   	push   edx
10003268:	58                   	pop    eax
10003269:	00 54 49 4d          	add    BYTE PTR [ecx+ecx*2+0x4d],dl
1000326d:	45                   	inc    ebp
1000326e:	53                   	push   ebx
1000326f:	4e                   	dec    esi
10003270:	52                   	push   edx
10003271:	00 41 52             	add    BYTE PTR [ecx+0x52],al
10003274:	49                   	dec    ecx
10003275:	41                   	inc    ecx
10003276:	4c                   	dec    esp
10003277:	00 43 4f             	add    BYTE PTR [ebx+0x4f],al
1000327a:	4d                   	dec    ebp
1000327b:	49                   	dec    ecx
1000327c:	43                   	inc    ebx
1000327d:	53                   	push   ebx
1000327e:	41                   	inc    ecx
1000327f:	4e                   	dec    esi
10003280:	00 66 90             	add    BYTE PTR [esi-0x70],ah
10003283:	90                   	nop
10003284:	74 28                	je     100032ae <mouse_data+0xe>	10003284: R_386_32	.text
10003286:	00 10                	add    BYTE PTR [eax],dl
10003288:	7e 28                	jle    100032b2 <mouse_data+0x12>	10003288: R_386_32	.text
1000328a:	00 10                	add    BYTE PTR [eax],dl
1000328c:	88 28                	mov    BYTE PTR [eax],ch	1000328c: R_386_32	.text
1000328e:	00 10                	add    BYTE PTR [eax],dl
10003290:	92                   	xchg   edx,eax	10003290: R_386_32	.text
10003291:	28 00                	sub    BYTE PTR [eax],al
10003293:	10 9c 28 00 10 a6 28 	adc    BYTE PTR [eax+ebp*1+0x28a61000],bl	10003294: R_386_32	.text
	10003298: R_386_32	.text
1000329a:	00 10                	add    BYTE PTR [eax],dl
