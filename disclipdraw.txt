
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 0c             	sub    esp,0xc
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	6a 18                	push   0x18
10000069:	e8 fc ff ff ff       	call   1000006a <NiMain(void*)+0x6a>	1000006a: R_386_PC32	malloc
1000006e:	89 c6                	mov    esi,eax
10000070:	58                   	pop    eax
10000071:	5a                   	pop    edx
10000072:	53                   	push   ebx
10000073:	56                   	push   esi
10000074:	e8 fc ff ff ff       	call   10000075 <NiMain(void*)+0x75>	10000075: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
10000079:	68 80 00 00 00       	push   0x80
1000007e:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000080: R_386_32	desktop
10000084:	6a 00                	push   0x0
10000086:	68 00 00 00 00       	push   0x0	10000087: R_386_32	NiDisplayRAM(void*)
1000008b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000008d: R_386_32	kernelProcess
10000091:	e8 fc ff ff ff       	call   10000092 <NiMain(void*)+0x92>	10000092: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000096:	83 c4 14             	add    esp,0x14
10000099:	68 2c 02 00 00       	push   0x22c
1000009e:	e8 fc ff ff ff       	call   1000009f <NiMain(void*)+0x9f>	1000009f: R_386_PC32	malloc
100000a3:	59                   	pop    ecx
100000a4:	89 c3                	mov    ebx,eax
100000a6:	5e                   	pop    esi
100000a7:	6a 01                	push   0x1
100000a9:	6a 01                	push   0x1
100000ab:	6a 00                	push   0x0
100000ad:	6a 00                	push   0x0
100000af:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000b1: R_386_32	ctxt
100000b5:	50                   	push   eax
100000b6:	e8 fc ff ff ff       	call   100000b7 <NiMain(void*)+0xb7>	100000b7: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000bb:	83 c4 18             	add    esp,0x18
100000be:	53                   	push   ebx
100000bf:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000c1: R_386_32	desktop
100000c5:	e8 fc ff ff ff       	call   100000c6 <NiMain(void*)+0xc6>	100000c6: R_386_PC32	NIDesktop::addWindow(NIWindow*)
100000ca:	5f                   	pop    edi
100000cb:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000cd: R_386_32	desktop
100000d1:	e8 fc ff ff ff       	call   100000d2 <NiMain(void*)+0xd2>	100000d2: R_386_PC32	NIDesktop::completeRefresh()
100000d6:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
100000dd:	e8 fc ff ff ff       	call   100000de <NiMain(void*)+0xde>	100000de: R_386_PC32	malloc
100000e2:	6a 00                	push   0x0
100000e4:	89 c3                	mov    ebx,eax
100000e6:	6a 00                	push   0x0
100000e8:	68 89 5c 00 10       	push   0x10005c89	100000e9: R_386_32	.text
100000ed:	50                   	push   eax
100000ee:	e8 fc ff ff ff       	call   100000ef <NiMain(void*)+0xef>	100000ef: R_386_PC32	Process::Process(char const*, Process*, char**)
100000f3:	83 c4 14             	add    esp,0x14
100000f6:	53                   	push   ebx
100000f7:	e8 fc ff ff ff       	call   100000f8 <NiMain(void*)+0xf8>	100000f8: R_386_PC32	Process::createUserThread()
100000fc:	83 c4 10             	add    esp,0x10
100000ff:	83 ec 0c             	sub    esp,0xc
10000102:	6a 02                	push   0x2
10000104:	e8 fc ff ff ff       	call   10000105 <NiMain(void*)+0x105>	10000105: R_386_PC32	blockTask(TaskState)
10000109:	eb f1                	jmp    100000fc <NiMain(void*)+0xfc>
1000010b:	90                   	nop

1000010c <NiBegin(void*)>:
1000010c:	83 ec 18             	sub    esp,0x18
1000010f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000113:	e8 fc ff ff ff       	call   10000114 <NiBegin(void*)+0x8>	10000114: R_386_PC32	NiMain(void*)

10000118 <_ssfn__bitreverse16>:
10000118:	89 c2                	mov    edx,eax
1000011a:	01 c0                	add    eax,eax
1000011c:	d1 fa                	sar    edx,1
1000011e:	25 aa aa 00 00       	and    eax,0xaaaa
10000123:	81 e2 55 55 00 00    	and    edx,0x5555
10000129:	09 c2                	or     edx,eax
1000012b:	89 d0                	mov    eax,edx
1000012d:	c1 e2 02             	shl    edx,0x2
10000130:	c1 f8 02             	sar    eax,0x2
10000133:	81 e2 cc cc 00 00    	and    edx,0xcccc
10000139:	25 33 33 00 00       	and    eax,0x3333
1000013e:	09 d0                	or     eax,edx
10000140:	89 c2                	mov    edx,eax
10000142:	c1 e0 04             	shl    eax,0x4
10000145:	c1 fa 04             	sar    edx,0x4
10000148:	25 f0 f0 00 00       	and    eax,0xf0f0
1000014d:	81 e2 0f 0f 00 00    	and    edx,0xf0f
10000153:	09 c2                	or     edx,eax
10000155:	89 d1                	mov    ecx,edx
10000157:	c1 e2 08             	shl    edx,0x8
1000015a:	c1 f9 08             	sar    ecx,0x8
1000015d:	0f b7 c2             	movzx  eax,dx
10000160:	09 c8                	or     eax,ecx
10000162:	c3                   	ret    

10000163 <_ssfn__zhuffman_decode>:
10000163:	55                   	push   ebp
10000164:	57                   	push   edi
10000165:	56                   	push   esi
10000166:	53                   	push   ebx
10000167:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
1000016b:	7f 1d                	jg     1000018a <_ssfn__zhuffman_decode+0x27>
1000016d:	8b 18                	mov    ebx,DWORD PTR [eax]
1000016f:	8d 4b 01             	lea    ecx,[ebx+0x1]
10000172:	89 08                	mov    DWORD PTR [eax],ecx
10000174:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000177:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
1000017a:	d3 e3                	shl    ebx,cl
1000017c:	83 c1 08             	add    ecx,0x8
1000017f:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
10000182:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000185:	83 f9 18             	cmp    ecx,0x18
10000188:	eb e1                	jmp    1000016b <_ssfn__zhuffman_decode+0x8>
1000018a:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
1000018d:	89 f9                	mov    ecx,edi
1000018f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
10000195:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
10000199:	89 cb                	mov    ebx,ecx
1000019b:	85 c9                	test   ecx,ecx
1000019d:	74 15                	je     100001b4 <_ssfn__zhuffman_decode+0x51>
1000019f:	c1 f9 09             	sar    ecx,0x9
100001a2:	89 da                	mov    edx,ebx
100001a4:	d3 ef                	shr    edi,cl
100001a6:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
100001a9:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
100001ac:	81 e2 ff 01 00 00    	and    edx,0x1ff
100001b2:	eb 58                	jmp    1000020c <_ssfn__zhuffman_decode+0xa9>
100001b4:	89 d5                	mov    ebp,edx
100001b6:	89 c3                	mov    ebx,eax
100001b8:	be 0a 00 00 00       	mov    esi,0xa
100001bd:	89 f8                	mov    eax,edi
100001bf:	e8 54 ff ff ff       	call   10000118 <_ssfn__bitreverse16>
100001c4:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
100001cb:	7c 03                	jl     100001d0 <_ssfn__zhuffman_decode+0x6d>
100001cd:	46                   	inc    esi
100001ce:	eb f4                	jmp    100001c4 <_ssfn__zhuffman_decode+0x61>
100001d0:	83 ca ff             	or     edx,0xffffffff
100001d3:	83 fe 10             	cmp    esi,0x10
100001d6:	74 34                	je     1000020c <_ssfn__zhuffman_decode+0xa9>
100001d8:	8d 14 36             	lea    edx,[esi+esi*1]
100001db:	b9 10 00 00 00       	mov    ecx,0x10
100001e0:	01 ea                	add    edx,ebp
100001e2:	29 f1                	sub    ecx,esi
100001e4:	d3 f8                	sar    eax,cl
100001e6:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
100001ed:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
100001f4:	29 c8                	sub    eax,ecx
100001f6:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
100001f9:	89 f1                	mov    ecx,esi
100001fb:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
10000202:	d3 ef                	shr    edi,cl
10000204:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
10000207:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
1000020c:	5b                   	pop    ebx
1000020d:	89 d0                	mov    eax,edx
1000020f:	5e                   	pop    esi
10000210:	5f                   	pop    edi
10000211:	5d                   	pop    ebp
10000212:	c3                   	ret    

10000213 <_ssfn__zexpand>:
10000213:	55                   	push   ebp
10000214:	57                   	push   edi
10000215:	56                   	push   esi
10000216:	53                   	push   ebx
10000217:	83 ec 0c             	sub    esp,0xc
1000021a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
1000021d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
10000220:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
10000223:	29 f9                	sub    ecx,edi
10000225:	83 f9 08             	cmp    ecx,0x8
10000228:	74 04                	je     1000022e <_ssfn__zexpand+0x1b>
1000022a:	31 c0                	xor    eax,eax
1000022c:	eb 3c                	jmp    1000026a <_ssfn__zexpand+0x57>
1000022e:	80 3f 53             	cmp    BYTE PTR [edi],0x53
10000231:	75 f7                	jne    1000022a <_ssfn__zexpand+0x17>
10000233:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
10000237:	75 f1                	jne    1000022a <_ssfn__zexpand+0x17>
10000239:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
1000023d:	75 eb                	jne    1000022a <_ssfn__zexpand+0x17>
1000023f:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
10000242:	89 c3                	mov    ebx,eax
10000244:	89 d6                	mov    esi,edx
10000246:	50                   	push   eax
10000247:	50                   	push   eax
10000248:	55                   	push   ebp
10000249:	57                   	push   edi
1000024a:	e8 fc ff ff ff       	call   1000024b <_ssfn__zexpand+0x38>	1000024b: R_386_PC32	realloc
1000024f:	83 c4 10             	add    esp,0x10
10000252:	85 c0                	test   eax,eax
10000254:	74 d4                	je     1000022a <_ssfn__zexpand+0x17>
10000256:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000259:	29 fe                	sub    esi,edi
1000025b:	01 c6                	add    esi,eax
1000025d:	01 e8                	add    eax,ebp
1000025f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
10000262:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10000265:	b8 01 00 00 00       	mov    eax,0x1
1000026a:	83 c4 0c             	add    esp,0xc
1000026d:	5b                   	pop    ebx
1000026e:	5e                   	pop    esi
1000026f:	5f                   	pop    edi
10000270:	5d                   	pop    ebp
10000271:	c3                   	ret    

10000272 <_ssfn__zbuild_huffman>:
10000272:	55                   	push   ebp
10000273:	57                   	push   edi
10000274:	56                   	push   esi
10000275:	53                   	push   ebx
10000276:	89 c3                	mov    ebx,eax
10000278:	81 ec a0 00 00 00    	sub    esp,0xa0
1000027e:	31 c0                	xor    eax,eax
10000280:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000283:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
10000287:	b9 11 00 00 00       	mov    ecx,0x11
1000028c:	89 ef                	mov    edi,ebp
1000028e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
10000292:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000294:	b9 00 01 00 00       	mov    ecx,0x100
10000299:	89 df                	mov    edi,ebx
1000029b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000029d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
100002a0:	7d 0f                	jge    100002b1 <_ssfn__zbuild_huffman+0x3f>
100002a2:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
100002a6:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
100002aa:	40                   	inc    eax
100002ab:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
100002af:	eb ec                	jmp    1000029d <_ssfn__zbuild_huffman+0x2b>
100002b1:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
100002b9:	b9 01 00 00 00       	mov    ecx,0x1
100002be:	b8 01 00 00 00       	mov    eax,0x1
100002c3:	89 c7                	mov    edi,eax
100002c5:	d3 e7                	shl    edi,cl
100002c7:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
100002cb:	0f 8f 10 01 00 00    	jg     100003e1 <_ssfn__zbuild_huffman+0x16f>
100002d1:	41                   	inc    ecx
100002d2:	83 f9 10             	cmp    ecx,0x10
100002d5:	75 ec                	jne    100002c3 <_ssfn__zbuild_huffman+0x51>
100002d7:	31 ff                	xor    edi,edi
100002d9:	31 f6                	xor    esi,esi
100002db:	b8 01 00 00 00       	mov    eax,0x1
100002e0:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
100002e4:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
100002e8:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
100002f0:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
100002f8:	01 ef                	add    edi,ebp
100002fa:	85 ed                	test   ebp,ebp
100002fc:	74 11                	je     1000030f <_ssfn__zbuild_huffman+0x9d>
100002fe:	ba 01 00 00 00       	mov    edx,0x1
10000303:	88 c1                	mov    cl,al
10000305:	d3 e2                	shl    edx,cl
10000307:	39 fa                	cmp    edx,edi
10000309:	0f 8c d2 00 00 00    	jl     100003e1 <_ssfn__zbuild_huffman+0x16f>
1000030f:	89 fa                	mov    edx,edi
10000311:	b9 10 00 00 00       	mov    ecx,0x10
10000316:	01 ff                	add    edi,edi
10000318:	29 c1                	sub    ecx,eax
1000031a:	01 ee                	add    esi,ebp
1000031c:	d3 e2                	shl    edx,cl
1000031e:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
10000325:	40                   	inc    eax
10000326:	83 f8 10             	cmp    eax,0x10
10000329:	75 b5                	jne    100002e0 <_ssfn__zbuild_huffman+0x6e>
1000032b:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000032e:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
10000338:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000033c:	31 ff                	xor    edi,edi
1000033e:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
10000342:	0f 8d 9d 00 00 00    	jge    100003e5 <_ssfn__zbuild_huffman+0x173>
10000348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000034c:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
10000350:	89 f2                	mov    edx,esi
10000352:	85 f6                	test   esi,esi
10000354:	0f 84 81 00 00 00    	je     100003db <_ssfn__zbuild_huffman+0x169>
1000035a:	8d 0c 36             	lea    ecx,[esi+esi*1]
1000035d:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
10000361:	8d 04 19             	lea    eax,[ecx+ebx*1]
10000364:	89 e9                	mov    ecx,ebp
10000366:	89 04 24             	mov    DWORD PTR [esp],eax
10000369:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
10000370:	29 c1                	sub    ecx,eax
10000372:	89 c8                	mov    eax,ecx
10000374:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000377:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
1000037e:	01 c8                	add    eax,ecx
10000380:	83 fe 09             	cmp    esi,0x9
10000383:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
1000038a:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
10000392:	7f 42                	jg     100003d6 <_ssfn__zbuild_huffman+0x164>
10000394:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10000398:	89 e8                	mov    eax,ebp
1000039a:	e8 79 fd ff ff       	call   10000118 <_ssfn__bitreverse16>
1000039f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
100003a3:	b9 10 00 00 00       	mov    ecx,0x10
100003a8:	29 f1                	sub    ecx,esi
100003aa:	d3 f8                	sar    eax,cl
100003ac:	88 d1                	mov    cl,dl
100003ae:	89 04 24             	mov    DWORD PTR [esp],eax
100003b1:	89 f2                	mov    edx,esi
100003b3:	b8 01 00 00 00       	mov    eax,0x1
100003b8:	c1 e2 09             	shl    edx,0x9
100003bb:	d3 e0                	shl    eax,cl
100003bd:	09 fa                	or     edx,edi
100003bf:	89 c1                	mov    ecx,eax
100003c1:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
100003c8:	7f 0c                	jg     100003d6 <_ssfn__zbuild_huffman+0x164>
100003ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
100003cd:	01 0c 24             	add    DWORD PTR [esp],ecx
100003d0:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
100003d4:	eb eb                	jmp    100003c1 <_ssfn__zbuild_huffman+0x14f>
100003d6:	45                   	inc    ebp
100003d7:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
100003db:	47                   	inc    edi
100003dc:	e9 5d ff ff ff       	jmp    1000033e <_ssfn__zbuild_huffman+0xcc>
100003e1:	31 c0                	xor    eax,eax
100003e3:	eb 05                	jmp    100003ea <_ssfn__zbuild_huffman+0x178>
100003e5:	b8 01 00 00 00       	mov    eax,0x1
100003ea:	81 c4 a0 00 00 00    	add    esp,0xa0
100003f0:	5b                   	pop    ebx
100003f1:	5e                   	pop    esi
100003f2:	5f                   	pop    edi
100003f3:	5d                   	pop    ebp
100003f4:	c3                   	ret    

100003f5 <_ssfn_fc.part.1>:
100003f5:	55                   	push   ebp
100003f6:	57                   	push   edi
100003f7:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
100003fd:	56                   	push   esi
100003fe:	53                   	push   ebx
100003ff:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
10000405:	83 ec 0c             	sub    esp,0xc
10000408:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
1000040b:	74 5d                	je     1000046a <_ssfn_fc.part.1+0x75>
1000040d:	31 f6                	xor    esi,esi
1000040f:	8b 03                	mov    eax,DWORD PTR [ebx]
10000411:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
10000415:	74 35                	je     1000044c <_ssfn_fc.part.1+0x57>
10000417:	31 ed                	xor    ebp,ebp
10000419:	8b 03                	mov    eax,DWORD PTR [ebx]
1000041b:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
1000041e:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
10000421:	85 c0                	test   eax,eax
10000423:	74 0c                	je     10000431 <_ssfn_fc.part.1+0x3c>
10000425:	83 ec 0c             	sub    esp,0xc
10000428:	50                   	push   eax
10000429:	e8 fc ff ff ff       	call   1000042a <_ssfn_fc.part.1+0x35>	1000042a: R_386_PC32	free
1000042e:	83 c4 10             	add    esp,0x10
10000431:	83 c5 04             	add    ebp,0x4
10000434:	81 fd 00 04 00 00    	cmp    ebp,0x400
1000043a:	75 dd                	jne    10000419 <_ssfn_fc.part.1+0x24>
1000043c:	83 ec 0c             	sub    esp,0xc
1000043f:	8b 03                	mov    eax,DWORD PTR [ebx]
10000441:	ff 34 30             	push   DWORD PTR [eax+esi*1]
10000444:	e8 fc ff ff ff       	call   10000445 <_ssfn_fc.part.1+0x50>	10000445: R_386_PC32	free
10000449:	83 c4 10             	add    esp,0x10
1000044c:	83 c6 04             	add    esi,0x4
1000044f:	81 fe 00 04 00 00    	cmp    esi,0x400
10000455:	75 b8                	jne    1000040f <_ssfn_fc.part.1+0x1a>
10000457:	83 ec 0c             	sub    esp,0xc
1000045a:	ff 33                	push   DWORD PTR [ebx]
1000045c:	e8 fc ff ff ff       	call   1000045d <_ssfn_fc.part.1+0x68>	1000045d: R_386_PC32	free
10000461:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
10000467:	83 c4 10             	add    esp,0x10
1000046a:	83 c3 04             	add    ebx,0x4
1000046d:	39 fb                	cmp    ebx,edi
1000046f:	75 97                	jne    10000408 <_ssfn_fc.part.1+0x13>
10000471:	83 c4 0c             	add    esp,0xc
10000474:	5b                   	pop    ebx
10000475:	5e                   	pop    esi
10000476:	5f                   	pop    edi
10000477:	5d                   	pop    ebp
10000478:	c3                   	ret    

10000479 <_ssfn_l>:
10000479:	57                   	push   edi
1000047a:	56                   	push   esi
1000047b:	53                   	push   ebx
1000047c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000480:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000484:	39 ce                	cmp    esi,ecx
10000486:	89 f3                	mov    ebx,esi
10000488:	0f 9d c1             	setge  cl
1000048b:	c1 eb 1f             	shr    ebx,0x1f
1000048e:	09 d9                	or     ecx,ebx
10000490:	89 fb                	mov    ebx,edi
10000492:	c1 eb 1f             	shr    ebx,0x1f
10000495:	08 d9                	or     cl,bl
10000497:	0f 85 e9 00 00 00    	jne    10000586 <_ssfn_l+0x10d>
1000049d:	39 d7                	cmp    edi,edx
1000049f:	0f 8d e1 00 00 00    	jge    10000586 <_ssfn_l+0x10d>
100004a5:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
100004ab:	8d 51 08             	lea    edx,[ecx+0x8]
100004ae:	8d 4f 08             	lea    ecx,[edi+0x8]
100004b1:	c1 fa 04             	sar    edx,0x4
100004b4:	c1 f9 04             	sar    ecx,0x4
100004b7:	39 ca                	cmp    edx,ecx
100004b9:	75 1a                	jne    100004d5 <_ssfn_l+0x5c>
100004bb:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
100004c1:	8d 4e 08             	lea    ecx,[esi+0x8]
100004c4:	83 c2 08             	add    edx,0x8
100004c7:	c1 f9 04             	sar    ecx,0x4
100004ca:	c1 fa 04             	sar    edx,0x4
100004cd:	39 ca                	cmp    edx,ecx
100004cf:	0f 84 b1 00 00 00    	je     10000586 <_ssfn_l+0x10d>
100004d5:	89 c3                	mov    ebx,eax
100004d7:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
100004dd:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
100004e3:	7f 3e                	jg     10000523 <_ssfn_l+0xaa>
100004e5:	05 00 02 00 00       	add    eax,0x200
100004ea:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
100004f0:	52                   	push   edx
100004f1:	01 c0                	add    eax,eax
100004f3:	52                   	push   edx
100004f4:	50                   	push   eax
100004f5:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
100004fb:	e8 fc ff ff ff       	call   100004fc <_ssfn_l+0x83>	100004fc: R_386_PC32	realloc
10000500:	83 c4 10             	add    esp,0x10
10000503:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
10000509:	85 c0                	test   eax,eax
1000050b:	75 16                	jne    10000523 <_ssfn_l+0xaa>
1000050d:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
10000517:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
10000521:	eb 63                	jmp    10000586 <_ssfn_l+0x10d>
10000523:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
1000052a:	75 26                	jne    10000552 <_ssfn_l+0xd9>
1000052c:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000532:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
10000538:	66 89 10             	mov    WORD PTR [eax],dx
1000053b:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000541:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
10000547:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
1000054b:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000552:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000558:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000055e:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
10000562:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000568:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000056e:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
10000573:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10000579:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000580:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
10000586:	5b                   	pop    ebx
10000587:	5e                   	pop    esi
10000588:	5f                   	pop    edi
10000589:	c3                   	ret    

1000058a <_ssfn_b>:
1000058a:	55                   	push   ebp
1000058b:	57                   	push   edi
1000058c:	56                   	push   esi
1000058d:	53                   	push   ebx
1000058e:	83 ec 4c             	sub    esp,0x4c
10000591:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10000595:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10000599:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000059d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
100005a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100005a5:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
100005a9:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100005ad:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
100005b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100005b5:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
100005b9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100005bd:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
100005c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100005c5:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100005c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100005cd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100005d4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100005d8:	83 f8 04             	cmp    eax,0x4
100005db:	75 28                	jne    10000605 <_ssfn_b+0x7b>
100005dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100005e1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100005e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100005e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
100005ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100005f1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
100005f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100005f9:	83 c4 4c             	add    esp,0x4c
100005fc:	5b                   	pop    ebx
100005fd:	5e                   	pop    esi
100005fe:	5f                   	pop    edi
100005ff:	5d                   	pop    ebp
10000600:	e9 74 fe ff ff       	jmp    10000479 <_ssfn_l>
10000605:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000609:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
1000060d:	75 0e                	jne    1000061d <_ssfn_b+0x93>
1000060f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000613:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
10000617:	0f 84 19 01 00 00    	je     10000736 <_ssfn_b+0x1ac>
1000061d:	be 02 00 00 00       	mov    esi,0x2
10000622:	89 d8                	mov    eax,ebx
10000624:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000628:	99                   	cdq    
10000629:	f7 fe                	idiv   esi
1000062b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
1000062f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000633:	89 e8                	mov    eax,ebp
10000635:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000639:	99                   	cdq    
1000063a:	f7 fe                	idiv   esi
1000063c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
10000640:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000644:	89 f8                	mov    eax,edi
10000646:	29 d8                	sub    eax,ebx
10000648:	99                   	cdq    
10000649:	f7 fe                	idiv   esi
1000064b:	01 c3                	add    ebx,eax
1000064d:	89 c8                	mov    eax,ecx
1000064f:	29 e8                	sub    eax,ebp
10000651:	99                   	cdq    
10000652:	f7 fe                	idiv   esi
10000654:	01 e8                	add    eax,ebp
10000656:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000065a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000065e:	29 f8                	sub    eax,edi
10000660:	99                   	cdq    
10000661:	f7 fe                	idiv   esi
10000663:	01 f8                	add    eax,edi
10000665:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000669:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000066d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000671:	29 c8                	sub    eax,ecx
10000673:	99                   	cdq    
10000674:	f7 fe                	idiv   esi
10000676:	01 c8                	add    eax,ecx
10000678:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000067c:	89 d8                	mov    eax,ebx
1000067e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
10000682:	99                   	cdq    
10000683:	f7 fe                	idiv   esi
10000685:	8d 0c 38             	lea    ecx,[eax+edi*1]
10000688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000068c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10000690:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10000694:	99                   	cdq    
10000695:	f7 fe                	idiv   esi
10000697:	8d 2c 38             	lea    ebp,[eax+edi*1]
1000069a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000069e:	29 d8                	sub    eax,ebx
100006a0:	99                   	cdq    
100006a1:	f7 fe                	idiv   esi
100006a3:	83 ec 0c             	sub    esp,0xc
100006a6:	01 d8                	add    eax,ebx
100006a8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100006ac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100006b0:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
100006b4:	99                   	cdq    
100006b5:	f7 fe                	idiv   esi
100006b7:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
100006bb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100006bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100006c3:	29 c8                	sub    eax,ecx
100006c5:	99                   	cdq    
100006c6:	f7 fe                	idiv   esi
100006c8:	8d 1c 08             	lea    ebx,[eax+ecx*1]
100006cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100006cf:	29 e8                	sub    eax,ebp
100006d1:	99                   	cdq    
100006d2:	f7 fe                	idiv   esi
100006d4:	8d 34 28             	lea    esi,[eax+ebp*1]
100006d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100006db:	8d 78 01             	lea    edi,[eax+0x1]
100006de:	57                   	push   edi
100006df:	56                   	push   esi
100006e0:	53                   	push   ebx
100006e1:	55                   	push   ebp
100006e2:	51                   	push   ecx
100006e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100006e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100006eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100006ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100006f3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100006f7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100006fb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100006ff:	e8 86 fe ff ff       	call   1000058a <_ssfn_b>
10000704:	83 c4 24             	add    esp,0x24
10000707:	57                   	push   edi
10000708:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
1000070c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000710:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000714:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000718:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
1000071c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
10000720:	56                   	push   esi
10000721:	53                   	push   ebx
10000722:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10000726:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
1000072a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000072e:	e8 57 fe ff ff       	call   1000058a <_ssfn_b>
10000733:	83 c4 30             	add    esp,0x30
10000736:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
1000073b:	0f 85 9c fe ff ff    	jne    100005dd <_ssfn_b+0x53>
10000741:	83 c4 4c             	add    esp,0x4c
10000744:	5b                   	pop    ebx
10000745:	5e                   	pop    esi
10000746:	5f                   	pop    edi
10000747:	5d                   	pop    ebp
10000748:	c3                   	ret    

10000749 <_ssfn__zreceive>:
10000749:	56                   	push   esi
1000074a:	53                   	push   ebx
1000074b:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
1000074e:	7d 1d                	jge    1000076d <_ssfn__zreceive+0x24>
10000750:	8b 18                	mov    ebx,DWORD PTR [eax]
10000752:	8d 4b 01             	lea    ecx,[ebx+0x1]
10000755:	89 08                	mov    DWORD PTR [eax],ecx
10000757:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
1000075a:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
1000075d:	d3 e3                	shl    ebx,cl
1000075f:	83 c1 08             	add    ecx,0x8
10000762:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
10000765:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000768:	83 f9 18             	cmp    ecx,0x18
1000076b:	7e e3                	jle    10000750 <_ssfn__zreceive+0x7>
1000076d:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
10000770:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
10000773:	89 f3                	mov    ebx,esi
10000775:	88 d1                	mov    cl,dl
10000777:	d3 eb                	shr    ebx,cl
10000779:	88 d1                	mov    cl,dl
1000077b:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
1000077e:	bb 01 00 00 00       	mov    ebx,0x1
10000783:	d3 e3                	shl    ebx,cl
10000785:	8d 43 ff             	lea    eax,[ebx-0x1]
10000788:	5b                   	pop    ebx
10000789:	21 f0                	and    eax,esi
1000078b:	5e                   	pop    esi
1000078c:	c3                   	ret    

1000078d <ssfn_utf8>:
1000078d:	56                   	push   esi
1000078e:	53                   	push   ebx
1000078f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10000793:	8b 11                	mov    edx,DWORD PTR [ecx]
10000795:	0f b6 32             	movzx  esi,BYTE PTR [edx]
10000798:	89 f0                	mov    eax,esi
1000079a:	84 c0                	test   al,al
1000079c:	0f be d8             	movsx  ebx,al
1000079f:	78 04                	js     100007a5 <ssfn_utf8+0x18>
100007a1:	89 d8                	mov    eax,ebx
100007a3:	eb 7d                	jmp    10000822 <ssfn_utf8+0x95>
100007a5:	f7 c6 20 00 00 00    	test   esi,0x20
100007ab:	75 14                	jne    100007c1 <ssfn_utf8+0x34>
100007ad:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
100007b0:	c1 e3 06             	shl    ebx,0x6
100007b3:	83 e0 3f             	and    eax,0x3f
100007b6:	81 e3 c0 07 00 00    	and    ebx,0x7c0
100007bc:	42                   	inc    edx
100007bd:	09 d8                	or     eax,ebx
100007bf:	eb 5f                	jmp    10000820 <ssfn_utf8+0x93>
100007c1:	f7 c6 10 00 00 00    	test   esi,0x10
100007c7:	75 20                	jne    100007e9 <ssfn_utf8+0x5c>
100007c9:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100007cd:	c1 e3 0c             	shl    ebx,0xc
100007d0:	c1 e0 06             	shl    eax,0x6
100007d3:	0f b7 db             	movzx  ebx,bx
100007d6:	25 c0 0f 00 00       	and    eax,0xfc0
100007db:	83 c2 02             	add    edx,0x2
100007de:	09 d8                	or     eax,ebx
100007e0:	8a 1a                	mov    bl,BYTE PTR [edx]
100007e2:	83 e3 3f             	and    ebx,0x3f
100007e5:	09 d8                	or     eax,ebx
100007e7:	eb 37                	jmp    10000820 <ssfn_utf8+0x93>
100007e9:	31 c0                	xor    eax,eax
100007eb:	83 e6 08             	and    esi,0x8
100007ee:	75 32                	jne    10000822 <ssfn_utf8+0x95>
100007f0:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100007f4:	c1 e3 12             	shl    ebx,0x12
100007f7:	c1 e0 0c             	shl    eax,0xc
100007fa:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
10000800:	25 00 f0 03 00       	and    eax,0x3f000
10000805:	83 c2 03             	add    edx,0x3
10000808:	09 d8                	or     eax,ebx
1000080a:	8a 1a                	mov    bl,BYTE PTR [edx]
1000080c:	83 e3 3f             	and    ebx,0x3f
1000080f:	09 d8                	or     eax,ebx
10000811:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
10000815:	c1 e3 06             	shl    ebx,0x6
10000818:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
1000081e:	09 d8                	or     eax,ebx
10000820:	89 11                	mov    DWORD PTR [ecx],edx
10000822:	ff 01                	inc    DWORD PTR [ecx]
10000824:	5b                   	pop    ebx
10000825:	5e                   	pop    esi
10000826:	c3                   	ret    

10000827 <_ssfn_c>:
10000827:	55                   	push   ebp
10000828:	57                   	push   edi
10000829:	56                   	push   esi
1000082a:	53                   	push   ebx
1000082b:	83 ec 14             	sub    esp,0x14
1000082e:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
10000834:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000838:	85 c0                	test   eax,eax
1000083a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
10000840:	0f 84 e6 00 00 00    	je     1000092c <_ssfn_c+0x105>
10000846:	31 ff                	xor    edi,edi
10000848:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
1000084c:	0f 84 f3 00 00 00    	je     10000945 <_ssfn_c+0x11e>
10000852:	85 d2                	test   edx,edx
10000854:	0f 84 eb 00 00 00    	je     10000945 <_ssfn_c+0x11e>
1000085a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
1000085d:	0f 84 e2 00 00 00    	je     10000945 <_ssfn_c+0x11e>
10000863:	89 d6                	mov    esi,edx
10000865:	89 cd                	mov    ebp,ecx
10000867:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
1000086a:	89 c3                	mov    ebx,eax
1000086c:	85 d2                	test   edx,edx
1000086e:	74 38                	je     100008a8 <_ssfn_c+0x81>
10000870:	8d 0c 13             	lea    ecx,[ebx+edx*1]
10000873:	31 c0                	xor    eax,eax
10000875:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000878:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000087b:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
1000087f:	66 85 d2             	test   dx,dx
10000882:	74 24                	je     100008a8 <_ssfn_c+0x81>
10000884:	01 da                	add    edx,ebx
10000886:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
1000088a:	8a 0a                	mov    cl,BYTE PTR [edx]
1000088c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000890:	84 c9                	test   cl,cl
10000892:	0f 84 9e 00 00 00    	je     10000936 <_ssfn_c+0x10f>
10000898:	3a 0f                	cmp    cl,BYTE PTR [edi]
1000089a:	0f 85 90 00 00 00    	jne    10000930 <_ssfn_c+0x109>
100008a0:	47                   	inc    edi
100008a1:	42                   	inc    edx
100008a2:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
100008a6:	eb e2                	jmp    1000088a <_ssfn_c+0x63>
100008a8:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
100008ac:	8d 44 24 10          	lea    eax,[esp+0x10]
100008b0:	50                   	push   eax
100008b1:	e8 fc ff ff ff       	call   100008b2 <_ssfn_c+0x8b>	100008b2: R_386_PC32	ssfn_utf8
100008b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100008ba:	29 f2                	sub    edx,esi
100008bc:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
100008bf:	5a                   	pop    edx
100008c0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100008c4:	89 06                	mov    DWORD PTR [esi],eax
100008c6:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
100008c9:	89 df                	mov    edi,ebx
100008cb:	31 db                	xor    ebx,ebx
100008cd:	8a 17                	mov    dl,BYTE PTR [edi]
100008cf:	80 fa ff             	cmp    dl,0xff
100008d2:	75 08                	jne    100008dc <_ssfn_c+0xb5>
100008d4:	81 c3 ff ff 00 00    	add    ebx,0xffff
100008da:	eb 2a                	jmp    10000906 <_ssfn_c+0xdf>
100008dc:	88 d1                	mov    cl,dl
100008de:	83 e1 c0             	and    ecx,0xffffffc0
100008e1:	80 f9 c0             	cmp    cl,0xc0
100008e4:	75 16                	jne    100008fc <_ssfn_c+0xd5>
100008e6:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100008ea:	c1 e2 08             	shl    edx,0x8
100008ed:	83 c7 02             	add    edi,0x2
100008f0:	81 e2 00 3f 00 00    	and    edx,0x3f00
100008f6:	09 ca                	or     edx,ecx
100008f8:	01 d3                	add    ebx,edx
100008fa:	eb 27                	jmp    10000923 <_ssfn_c+0xfc>
100008fc:	80 f9 80             	cmp    cl,0x80
100008ff:	75 08                	jne    10000909 <_ssfn_c+0xe2>
10000901:	83 e2 3f             	and    edx,0x3f
10000904:	01 d3                	add    ebx,edx
10000906:	47                   	inc    edi
10000907:	eb 1a                	jmp    10000923 <_ssfn_c+0xfc>
10000909:	39 d8                	cmp    eax,ebx
1000090b:	74 38                	je     10000945 <_ssfn_c+0x11e>
1000090d:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000911:	83 e2 40             	and    edx,0x40
10000914:	80 fa 01             	cmp    dl,0x1
10000917:	19 d2                	sbb    edx,edx
10000919:	83 c2 06             	add    edx,0x6
1000091c:	0f af d1             	imul   edx,ecx
1000091f:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
10000923:	43                   	inc    ebx
10000924:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
1000092a:	76 a1                	jbe    100008cd <_ssfn_c+0xa6>
1000092c:	31 ff                	xor    edi,edi
1000092e:	eb 15                	jmp    10000945 <_ssfn_c+0x11e>
10000930:	40                   	inc    eax
10000931:	e9 42 ff ff ff       	jmp    10000878 <_ssfn_c+0x51>
10000936:	29 f7                	sub    edi,esi
10000938:	05 00 f0 00 00       	add    eax,0xf000
1000093d:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
10000940:	e9 7b ff ff ff       	jmp    100008c0 <_ssfn_c+0x99>
10000945:	83 c4 14             	add    esp,0x14
10000948:	89 f8                	mov    eax,edi
1000094a:	5b                   	pop    ebx
1000094b:	5e                   	pop    esi
1000094c:	5f                   	pop    edi
1000094d:	5d                   	pop    ebp
1000094e:	c3                   	ret    

1000094f <_ssfn_zlib_decode>:
1000094f:	55                   	push   ebp
10000950:	57                   	push   edi
10000951:	56                   	push   esi
10000952:	53                   	push   ebx
10000953:	81 ec c8 19 00 00    	sub    esp,0x19c8
10000959:	6a 08                	push   0x8
1000095b:	e8 fc ff ff ff       	call   1000095c <_ssfn_zlib_decode+0xd>	1000095c: R_386_PC32	malloc
10000960:	83 c4 10             	add    esp,0x10
10000963:	89 c2                	mov    edx,eax
10000965:	85 c0                	test   eax,eax
10000967:	0f 84 eb 04 00 00    	je     10000e58 <_ssfn_zlib_decode+0x509>
1000096d:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
10000974:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
1000097b:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
10000982:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
10000989:	31 c0                	xor    eax,eax
1000098b:	83 c2 08             	add    edx,0x8
1000098e:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
10000995:	c6 80 20 62 03 10 08 	mov    BYTE PTR [eax+0x10036220],0x8	10000997: R_386_32	.bss
1000099c:	40                   	inc    eax
1000099d:	3d 90 00 00 00       	cmp    eax,0x90
100009a2:	75 f1                	jne    10000995 <_ssfn_zlib_decode+0x46>
100009a4:	c6 80 20 62 03 10 09 	mov    BYTE PTR [eax+0x10036220],0x9	100009a6: R_386_32	.bss
100009ab:	40                   	inc    eax
100009ac:	3d 00 01 00 00       	cmp    eax,0x100
100009b1:	75 f1                	jne    100009a4 <_ssfn_zlib_decode+0x55>
100009b3:	c6 80 20 62 03 10 07 	mov    BYTE PTR [eax+0x10036220],0x7	100009b5: R_386_32	.bss
100009ba:	40                   	inc    eax
100009bb:	3d 18 01 00 00       	cmp    eax,0x118
100009c0:	75 f1                	jne    100009b3 <_ssfn_zlib_decode+0x64>
100009c2:	c7 05 38 63 03 10 08 08 08 08 	mov    DWORD PTR ds:0x10036338,0x8080808	100009c4: R_386_32	.bss
100009cc:	c7 05 3c 63 03 10 08 08 08 08 	mov    DWORD PTR ds:0x1003633c,0x8080808	100009ce: R_386_32	.bss
100009d6:	31 c0                	xor    eax,eax
100009d8:	c6 80 00 62 03 10 05 	mov    BYTE PTR [eax+0x10036200],0x5	100009da: R_386_32	.bss
100009df:	40                   	inc    eax
100009e0:	83 f8 20             	cmp    eax,0x20
100009e3:	75 f3                	jne    100009d8 <_ssfn_zlib_decode+0x89>
100009e5:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
100009f0:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
100009fb:	ba 01 00 00 00       	mov    edx,0x1
10000a00:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a07:	e8 3d fd ff ff       	call   10000749 <_ssfn__zreceive>
10000a0c:	ba 02 00 00 00       	mov    edx,0x2
10000a11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000a15:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a1c:	e8 28 fd ff ff       	call   10000749 <_ssfn__zreceive>
10000a21:	89 c6                	mov    esi,eax
10000a23:	85 c0                	test   eax,eax
10000a25:	0f 85 09 01 00 00    	jne    10000b34 <_ssfn_zlib_decode+0x1e5>
10000a2b:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000a32:	83 e2 07             	and    edx,0x7
10000a35:	74 0c                	je     10000a43 <_ssfn_zlib_decode+0xf4>
10000a37:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a3e:	e8 06 fd ff ff       	call   10000749 <_ssfn__zreceive>
10000a43:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000a4a:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000a51:	31 c0                	xor    eax,eax
10000a53:	31 db                	xor    ebx,ebx
10000a55:	85 d2                	test   edx,edx
10000a57:	7f 14                	jg     10000a6d <_ssfn_zlib_decode+0x11e>
10000a59:	84 db                	test   bl,bl
10000a5b:	74 22                	je     10000a7f <_ssfn_zlib_decode+0x130>
10000a5d:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000a64:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000a6b:	eb 12                	jmp    10000a7f <_ssfn_zlib_decode+0x130>
10000a6d:	40                   	inc    eax
10000a6e:	83 ea 08             	sub    edx,0x8
10000a71:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000a78:	b3 01                	mov    bl,0x1
10000a7a:	c1 e9 08             	shr    ecx,0x8
10000a7d:	eb d6                	jmp    10000a55 <_ssfn_zlib_decode+0x106>
10000a7f:	83 f8 04             	cmp    eax,0x4
10000a82:	74 1d                	je     10000aa1 <_ssfn_zlib_decode+0x152>
10000a84:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000a8b:	40                   	inc    eax
10000a8c:	8d 4a 01             	lea    ecx,[edx+0x1]
10000a8f:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000a96:	8a 12                	mov    dl,BYTE PTR [edx]
10000a98:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000a9f:	eb de                	jmp    10000a7f <_ssfn_zlib_decode+0x130>
10000aa1:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000aa9:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000ab1:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000ab9:	c1 e3 08             	shl    ebx,0x8
10000abc:	01 c3                	add    ebx,eax
10000abe:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000ac6:	c1 e0 08             	shl    eax,0x8
10000ac9:	01 d0                	add    eax,edx
10000acb:	89 da                	mov    edx,ebx
10000acd:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000ad3:	39 d0                	cmp    eax,edx
10000ad5:	0f 85 69 03 00 00    	jne    10000e44 <_ssfn_zlib_decode+0x4f5>
10000adb:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000ae2:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000ae5:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000aec:	73 14                	jae    10000b02 <_ssfn_zlib_decode+0x1b3>
10000aee:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000af5:	e8 19 f7 ff ff       	call   10000213 <_ssfn__zexpand>
10000afa:	85 c0                	test   eax,eax
10000afc:	0f 84 42 03 00 00    	je     10000e44 <_ssfn_zlib_decode+0x4f5>
10000b02:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000b09:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000b10:	39 f3                	cmp    ebx,esi
10000b12:	74 09                	je     10000b1d <_ssfn_zlib_decode+0x1ce>
10000b14:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000b17:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000b1a:	46                   	inc    esi
10000b1b:	eb e5                	jmp    10000b02 <_ssfn_zlib_decode+0x1b3>
10000b1d:	01 da                	add    edx,ebx
10000b1f:	01 c3                	add    ebx,eax
10000b21:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000b28:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000b2f:	e9 fc 02 00 00       	jmp    10000e30 <_ssfn_zlib_decode+0x4e1>
10000b34:	83 f8 03             	cmp    eax,0x3
10000b37:	0f 84 07 03 00 00    	je     10000e44 <_ssfn_zlib_decode+0x4f5>
10000b3d:	4e                   	dec    esi
10000b3e:	75 2d                	jne    10000b6d <_ssfn_zlib_decode+0x21e>
10000b40:	b9 20 01 00 00       	mov    ecx,0x120
10000b45:	ba 20 62 03 10       	mov    edx,0x10036220	10000b46: R_386_32	.bss
10000b4a:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000b51:	e8 1c f7 ff ff       	call   10000272 <_ssfn__zbuild_huffman>
10000b56:	85 c0                	test   eax,eax
10000b58:	0f 84 e6 02 00 00    	je     10000e44 <_ssfn_zlib_decode+0x4f5>
10000b5e:	b9 20 00 00 00       	mov    ecx,0x20
10000b63:	ba 00 62 03 10       	mov    edx,0x10036200	10000b64: R_386_32	.bss
10000b68:	e9 78 01 00 00       	jmp    10000ce5 <_ssfn_zlib_decode+0x396>
10000b6d:	ba 05 00 00 00       	mov    edx,0x5
10000b72:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b79:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000b7d:	e8 c7 fb ff ff       	call   10000749 <_ssfn__zreceive>
10000b82:	89 df                	mov    edi,ebx
10000b84:	ba 05 00 00 00       	mov    edx,0x5
10000b89:	89 c5                	mov    ebp,eax
10000b8b:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b92:	e8 b2 fb ff ff       	call   10000749 <_ssfn__zreceive>
10000b97:	ba 04 00 00 00       	mov    edx,0x4
10000b9c:	89 c6                	mov    esi,eax
10000b9e:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ba5:	e8 9f fb ff ff       	call   10000749 <_ssfn__zreceive>
10000baa:	b9 13 00 00 00       	mov    ecx,0x13
10000baf:	83 c0 04             	add    eax,0x4
10000bb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000bb6:	31 c0                	xor    eax,eax
10000bb8:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000bba:	31 ff                	xor    edi,edi
10000bbc:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000bc0:	7e 1f                	jle    10000be1 <_ssfn_zlib_decode+0x292>
10000bc2:	ba 03 00 00 00       	mov    edx,0x3
10000bc7:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000bce:	47                   	inc    edi
10000bcf:	e8 75 fb ff ff       	call   10000749 <_ssfn__zreceive>
10000bd4:	0f b6 97 bf 5d 00 10 	movzx  edx,BYTE PTR [edi+0x10005dbf]	10000bd7: R_386_32	.text
10000bdb:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000bdf:	eb db                	jmp    10000bbc <_ssfn_zlib_decode+0x26d>
10000be1:	b9 13 00 00 00       	mov    ecx,0x13
10000be6:	89 da                	mov    edx,ebx
10000be8:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000bef:	e8 7e f6 ff ff       	call   10000272 <_ssfn__zbuild_huffman>
10000bf4:	85 c0                	test   eax,eax
10000bf6:	0f 84 48 02 00 00    	je     10000e44 <_ssfn_zlib_decode+0x4f5>
10000bfc:	8d 46 01             	lea    eax,[esi+0x1]
10000bff:	81 c5 01 01 00 00    	add    ebp,0x101
10000c05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000c09:	31 f6                	xor    esi,esi
10000c0b:	01 e8                	add    eax,ebp
10000c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000c11:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000c15:	0f 8e 9f 00 00 00    	jle    10000cba <_ssfn_zlib_decode+0x36b>
10000c1b:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000c22:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c29:	e8 35 f5 ff ff       	call   10000163 <_ssfn__zhuffman_decode>
10000c2e:	83 f8 12             	cmp    eax,0x12
10000c31:	0f 87 0d 02 00 00    	ja     10000e44 <_ssfn_zlib_decode+0x4f5>
10000c37:	83 f8 0f             	cmp    eax,0xf
10000c3a:	7f 07                	jg     10000c43 <_ssfn_zlib_decode+0x2f4>
10000c3c:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000c40:	46                   	inc    esi
10000c41:	eb ce                	jmp    10000c11 <_ssfn_zlib_decode+0x2c2>
10000c43:	83 f8 10             	cmp    eax,0x10
10000c46:	75 22                	jne    10000c6a <_ssfn_zlib_decode+0x31b>
10000c48:	ba 02 00 00 00       	mov    edx,0x2
10000c4d:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c54:	e8 f0 fa ff ff       	call   10000749 <_ssfn__zreceive>
10000c59:	85 f6                	test   esi,esi
10000c5b:	8d 58 03             	lea    ebx,[eax+0x3]
10000c5e:	0f 84 e0 01 00 00    	je     10000e44 <_ssfn_zlib_decode+0x4f5>
10000c64:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000c68:	eb 31                	jmp    10000c9b <_ssfn_zlib_decode+0x34c>
10000c6a:	83 f8 11             	cmp    eax,0x11
10000c6d:	75 16                	jne    10000c85 <_ssfn_zlib_decode+0x336>
10000c6f:	ba 03 00 00 00       	mov    edx,0x3
10000c74:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c7b:	e8 c9 fa ff ff       	call   10000749 <_ssfn__zreceive>
10000c80:	8d 58 03             	lea    ebx,[eax+0x3]
10000c83:	eb 14                	jmp    10000c99 <_ssfn_zlib_decode+0x34a>
10000c85:	ba 07 00 00 00       	mov    edx,0x7
10000c8a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c91:	e8 b3 fa ff ff       	call   10000749 <_ssfn__zreceive>
10000c96:	8d 58 0b             	lea    ebx,[eax+0xb]
10000c99:	31 c0                	xor    eax,eax
10000c9b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000c9f:	29 f2                	sub    edx,esi
10000ca1:	39 da                	cmp    edx,ebx
10000ca3:	0f 8c 9b 01 00 00    	jl     10000e44 <_ssfn_zlib_decode+0x4f5>
10000ca9:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000cad:	89 d9                	mov    ecx,ebx
10000caf:	89 d7                	mov    edi,edx
10000cb1:	01 de                	add    esi,ebx
10000cb3:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000cb5:	e9 57 ff ff ff       	jmp    10000c11 <_ssfn_zlib_decode+0x2c2>
10000cba:	0f 85 84 01 00 00    	jne    10000e44 <_ssfn_zlib_decode+0x4f5>
10000cc0:	89 e9                	mov    ecx,ebp
10000cc2:	8d 54 24 25          	lea    edx,[esp+0x25]
10000cc6:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000ccd:	e8 a0 f5 ff ff       	call   10000272 <_ssfn__zbuild_huffman>
10000cd2:	85 c0                	test   eax,eax
10000cd4:	0f 84 6a 01 00 00    	je     10000e44 <_ssfn_zlib_decode+0x4f5>
10000cda:	8d 44 24 25          	lea    eax,[esp+0x25]
10000cde:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000ce2:	8d 14 28             	lea    edx,[eax+ebp*1]
10000ce5:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000cec:	e8 81 f5 ff ff       	call   10000272 <_ssfn__zbuild_huffman>
10000cf1:	85 c0                	test   eax,eax
10000cf3:	0f 84 4b 01 00 00    	je     10000e44 <_ssfn_zlib_decode+0x4f5>
10000cf9:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000d00:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000d07:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d0e:	e8 50 f4 ff ff       	call   10000163 <_ssfn__zhuffman_decode>
10000d13:	89 c3                	mov    ebx,eax
10000d15:	3d ff 00 00 00       	cmp    eax,0xff
10000d1a:	7f 34                	jg     10000d50 <_ssfn_zlib_decode+0x401>
10000d1c:	85 c0                	test   eax,eax
10000d1e:	0f 88 20 01 00 00    	js     10000e44 <_ssfn_zlib_decode+0x4f5>
10000d24:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000d2b:	77 1d                	ja     10000d4a <_ssfn_zlib_decode+0x3fb>
10000d2d:	89 ea                	mov    edx,ebp
10000d2f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d36:	e8 d8 f4 ff ff       	call   10000213 <_ssfn__zexpand>
10000d3b:	85 c0                	test   eax,eax
10000d3d:	0f 84 01 01 00 00    	je     10000e44 <_ssfn_zlib_decode+0x4f5>
10000d43:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000d4a:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000d4d:	45                   	inc    ebp
10000d4e:	eb b0                	jmp    10000d00 <_ssfn_zlib_decode+0x3b1>
10000d50:	3d 00 01 00 00       	cmp    eax,0x100
10000d55:	75 0c                	jne    10000d63 <_ssfn_zlib_decode+0x414>
10000d57:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000d5e:	e9 cd 00 00 00       	jmp    10000e30 <_ssfn_zlib_decode+0x4e1>
10000d63:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000d69:	8b 14 85 e0 5e 00 10 	mov    edx,DWORD PTR [eax*4+0x10005ee0]	10000d6c: R_386_32	.text
10000d70:	8b 1c 85 60 5f 00 10 	mov    ebx,DWORD PTR [eax*4+0x10005f60]	10000d73: R_386_32	.text
10000d77:	85 d2                	test   edx,edx
10000d79:	74 0e                	je     10000d89 <_ssfn_zlib_decode+0x43a>
10000d7b:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d82:	e8 c2 f9 ff ff       	call   10000749 <_ssfn__zreceive>
10000d87:	01 c3                	add    ebx,eax
10000d89:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000d90:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d97:	e8 c7 f3 ff ff       	call   10000163 <_ssfn__zhuffman_decode>
10000d9c:	85 c0                	test   eax,eax
10000d9e:	0f 88 a0 00 00 00    	js     10000e44 <_ssfn_zlib_decode+0x4f5>
10000da4:	8b 14 85 e0 5d 00 10 	mov    edx,DWORD PTR [eax*4+0x10005de0]	10000da7: R_386_32	.text
10000dab:	8b 3c 85 60 5e 00 10 	mov    edi,DWORD PTR [eax*4+0x10005e60]	10000dae: R_386_32	.text
10000db2:	85 d2                	test   edx,edx
10000db4:	74 0e                	je     10000dc4 <_ssfn_zlib_decode+0x475>
10000db6:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dbd:	e8 87 f9 ff ff       	call   10000749 <_ssfn__zreceive>
10000dc2:	01 c7                	add    edi,eax
10000dc4:	89 e8                	mov    eax,ebp
10000dc6:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000dcd:	39 f8                	cmp    eax,edi
10000dcf:	7c 73                	jl     10000e44 <_ssfn_zlib_decode+0x4f5>
10000dd1:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000dd5:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000ddc:	73 19                	jae    10000df7 <_ssfn_zlib_decode+0x4a8>
10000dde:	89 ea                	mov    edx,ebp
10000de0:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000de7:	e8 27 f4 ff ff       	call   10000213 <_ssfn__zexpand>
10000dec:	85 c0                	test   eax,eax
10000dee:	74 54                	je     10000e44 <_ssfn_zlib_decode+0x4f5>
10000df0:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000df7:	89 ee                	mov    esi,ebp
10000df9:	29 fe                	sub    esi,edi
10000dfb:	4f                   	dec    edi
10000dfc:	75 19                	jne    10000e17 <_ssfn_zlib_decode+0x4c8>
10000dfe:	85 db                	test   ebx,ebx
10000e00:	0f 84 fa fe ff ff    	je     10000d00 <_ssfn_zlib_decode+0x3b1>
10000e06:	8a 06                	mov    al,BYTE PTR [esi]
10000e08:	01 eb                	add    ebx,ebp
10000e0a:	45                   	inc    ebp
10000e0b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000e0e:	39 dd                	cmp    ebp,ebx
10000e10:	75 f8                	jne    10000e0a <_ssfn_zlib_decode+0x4bb>
10000e12:	e9 e9 fe ff ff       	jmp    10000d00 <_ssfn_zlib_decode+0x3b1>
10000e17:	85 db                	test   ebx,ebx
10000e19:	0f 84 e1 fe ff ff    	je     10000d00 <_ssfn_zlib_decode+0x3b1>
10000e1f:	8d 04 1e             	lea    eax,[esi+ebx*1]
10000e22:	89 ef                	mov    edi,ebp
10000e24:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000e25:	39 f0                	cmp    eax,esi
10000e27:	75 fb                	jne    10000e24 <_ssfn_zlib_decode+0x4d5>
10000e29:	01 dd                	add    ebp,ebx
10000e2b:	e9 d0 fe ff ff       	jmp    10000d00 <_ssfn_zlib_decode+0x3b1>
10000e30:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10000e35:	0f 84 c0 fb ff ff    	je     100009fb <_ssfn_zlib_decode+0xac>
10000e3b:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
10000e42:	eb 14                	jmp    10000e58 <_ssfn_zlib_decode+0x509>
10000e44:	83 ec 0c             	sub    esp,0xc
10000e47:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10000e4e:	e8 fc ff ff ff       	call   10000e4f <_ssfn_zlib_decode+0x500>	10000e4f: R_386_PC32	free
10000e53:	83 c4 10             	add    esp,0x10
10000e56:	31 c0                	xor    eax,eax
10000e58:	81 c4 bc 19 00 00    	add    esp,0x19bc
10000e5e:	5b                   	pop    ebx
10000e5f:	5e                   	pop    esi
10000e60:	5f                   	pop    edi
10000e61:	5d                   	pop    ebp
10000e62:	c3                   	ret    

10000e63 <ssfn_load>:
10000e63:	55                   	push   ebp
10000e64:	57                   	push   edi
10000e65:	56                   	push   esi
10000e66:	53                   	push   ebx
10000e67:	83 ec 1c             	sub    esp,0x1c
10000e6a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000e6e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000e72:	85 ff                	test   edi,edi
10000e74:	0f 84 d0 01 00 00    	je     1000104a <ssfn_load+0x1e7>
10000e7a:	85 f6                	test   esi,esi
10000e7c:	0f 84 c8 01 00 00    	je     1000104a <ssfn_load+0x1e7>
10000e82:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
10000e85:	0f 85 a8 00 00 00    	jne    10000f33 <ssfn_load+0xd0>
10000e8b:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10000e8f:	0f 85 9e 00 00 00    	jne    10000f33 <ssfn_load+0xd0>
10000e95:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10000e99:	74 0a                	je     10000ea5 <ssfn_load+0x42>
10000e9b:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10000ea0:	e9 aa 01 00 00       	jmp    1000104f <ssfn_load+0x1ec>
10000ea5:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
10000ea8:	a8 04                	test   al,0x4
10000eaa:	75 05                	jne    10000eb1 <ssfn_load+0x4e>
10000eac:	83 c6 0a             	add    esi,0xa
10000eaf:	eb 08                	jmp    10000eb9 <ssfn_load+0x56>
10000eb1:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
10000eb5:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10000eb9:	a8 08                	test   al,0x8
10000ebb:	74 07                	je     10000ec4 <ssfn_load+0x61>
10000ebd:	46                   	inc    esi
10000ebe:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000ec2:	eb f7                	jmp    10000ebb <ssfn_load+0x58>
10000ec4:	a8 10                	test   al,0x10
10000ec6:	74 07                	je     10000ecf <ssfn_load+0x6c>
10000ec8:	46                   	inc    esi
10000ec9:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000ecd:	eb f7                	jmp    10000ec6 <ssfn_load+0x63>
10000ecf:	83 ec 0c             	sub    esp,0xc
10000ed2:	56                   	push   esi
10000ed3:	e8 fc ff ff ff       	call   10000ed4 <ssfn_load+0x71>	10000ed4: R_386_PC32	_ssfn_zlib_decode
10000ed8:	83 c4 10             	add    esp,0x10
10000edb:	89 c6                	mov    esi,eax
10000edd:	85 c0                	test   eax,eax
10000edf:	74 ba                	je     10000e9b <ssfn_load+0x38>
10000ee1:	50                   	push   eax
10000ee2:	50                   	push   eax
10000ee3:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10000ee9:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10000ef0:	50                   	push   eax
10000ef1:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
10000ef7:	e8 fc ff ff ff       	call   10000ef8 <ssfn_load+0x95>	10000ef8: R_386_PC32	realloc
10000efc:	83 c4 10             	add    esp,0x10
10000eff:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
10000f05:	85 c0                	test   eax,eax
10000f07:	75 0f                	jne    10000f18 <ssfn_load+0xb5>
10000f09:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10000f13:	e9 1a 01 00 00       	jmp    10001032 <ssfn_load+0x1cf>
10000f18:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10000f1e:	8d 4a 01             	lea    ecx,[edx+0x1]
10000f21:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
10000f27:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10000f2a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000f2d:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10000f33:	50                   	push   eax
10000f34:	6a 04                	push   0x4
10000f36:	68 a5 5c 00 10       	push   0x10005ca5	10000f37: R_386_32	.text
10000f3b:	56                   	push   esi
10000f3c:	e8 fc ff ff ff       	call   10000f3d <ssfn_load+0xda>	10000f3d: R_386_PC32	memcmp
10000f41:	83 c4 10             	add    esp,0x10
10000f44:	89 c5                	mov    ebp,eax
10000f46:	85 c0                	test   eax,eax
10000f48:	75 29                	jne    10000f73 <ssfn_load+0x110>
10000f4a:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10000f4d:	01 f3                	add    ebx,esi
10000f4f:	83 c6 08             	add    esi,0x8
10000f52:	39 de                	cmp    esi,ebx
10000f54:	0f 83 f5 00 00 00    	jae    1000104f <ssfn_load+0x1ec>
10000f5a:	50                   	push   eax
10000f5b:	50                   	push   eax
10000f5c:	56                   	push   esi
10000f5d:	57                   	push   edi
10000f5e:	e8 fc ff ff ff       	call   10000f5f <ssfn_load+0xfc>	10000f5f: R_386_PC32	ssfn_load
10000f63:	83 c4 10             	add    esp,0x10
10000f66:	85 c0                	test   eax,eax
10000f68:	0f 85 e1 00 00 00    	jne    1000104f <ssfn_load+0x1ec>
10000f6e:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10000f71:	eb df                	jmp    10000f52 <ssfn_load+0xef>
10000f73:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10000f76:	83 e0 0f             	and    eax,0xf
10000f79:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000f7d:	53                   	push   ebx
10000f7e:	6a 04                	push   0x4
10000f80:	68 aa 5c 00 10       	push   0x10005caa	10000f81: R_386_32	.text
10000f85:	56                   	push   esi
10000f86:	e8 fc ff ff ff       	call   10000f87 <ssfn_load+0x124>	10000f87: R_386_PC32	memcmp
10000f8b:	83 c4 10             	add    esp,0x10
10000f8e:	89 c5                	mov    ebp,eax
10000f90:	85 c0                	test   eax,eax
10000f92:	0f 85 03 ff ff ff    	jne    10000e9b <ssfn_load+0x38>
10000f98:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10000f9b:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
10000f9f:	51                   	push   ecx
10000fa0:	6a 04                	push   0x4
10000fa2:	68 af 5c 00 10       	push   0x10005caf	10000fa3: R_386_32	.text
10000fa7:	50                   	push   eax
10000fa8:	e8 fc ff ff ff       	call   10000fa9 <ssfn_load+0x146>	10000fa9: R_386_PC32	memcmp
10000fad:	83 c4 10             	add    esp,0x10
10000fb0:	85 c0                	test   eax,eax
10000fb2:	0f 85 e3 fe ff ff    	jne    10000e9b <ssfn_load+0x38>
10000fb8:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
10000fbd:	0f 87 d8 fe ff ff    	ja     10000e9b <ssfn_load+0x38>
10000fc3:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
10000fc7:	39 cb                	cmp    ebx,ecx
10000fc9:	0f 86 cc fe ff ff    	jbe    10000e9b <ssfn_load+0x38>
10000fcf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
10000fd2:	39 c3                	cmp    ebx,eax
10000fd4:	0f 86 c1 fe ff ff    	jbe    10000e9b <ssfn_load+0x38>
10000fda:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
10000fdd:	0f 86 b8 fe ff ff    	jbe    10000e9b <ssfn_load+0x38>
10000fe3:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
10000fe6:	0f 86 af fe ff ff    	jbe    10000e9b <ssfn_load+0x38>
10000fec:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
10000fef:	0f 86 a6 fe ff ff    	jbe    10000e9b <ssfn_load+0x38>
10000ff5:	39 c1                	cmp    ecx,eax
10000ff7:	0f 83 9e fe ff ff    	jae    10000e9b <ssfn_load+0x38>
10000ffd:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
10001002:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
10001005:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
1000100b:	40                   	inc    eax
1000100c:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
10001012:	52                   	push   edx
10001013:	c1 e0 02             	shl    eax,0x2
10001016:	52                   	push   edx
10001017:	50                   	push   eax
10001018:	ff 33                	push   DWORD PTR [ebx]
1000101a:	e8 fc ff ff ff       	call   1000101b <ssfn_load+0x1b8>	1000101b: R_386_PC32	realloc
1000101f:	83 c4 10             	add    esp,0x10
10001022:	89 03                	mov    DWORD PTR [ebx],eax
10001024:	85 c0                	test   eax,eax
10001026:	75 0f                	jne    10001037 <ssfn_load+0x1d4>
10001028:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
10001032:	83 cd ff             	or     ebp,0xffffffff
10001035:	eb 18                	jmp    1000104f <ssfn_load+0x1ec>
10001037:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
1000103d:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
10001041:	89 f8                	mov    eax,edi
10001043:	e8 ad f3 ff ff       	call   100003f5 <_ssfn_fc.part.1>
10001048:	eb 05                	jmp    1000104f <ssfn_load+0x1ec>
1000104a:	bd fc ff ff ff       	mov    ebp,0xfffffffc
1000104f:	83 c4 1c             	add    esp,0x1c
10001052:	89 e8                	mov    eax,ebp
10001054:	5b                   	pop    ebx
10001055:	5e                   	pop    esi
10001056:	5f                   	pop    edi
10001057:	5d                   	pop    ebp
10001058:	c3                   	ret    

10001059 <ssfn_free>:
10001059:	57                   	push   edi
1000105a:	56                   	push   esi
1000105b:	53                   	push   ebx
1000105c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001060:	85 db                	test   ebx,ebx
10001062:	74 7e                	je     100010e2 <ssfn_free+0x89>
10001064:	89 d8                	mov    eax,ebx
10001066:	e8 8a f3 ff ff       	call   100003f5 <_ssfn_fc.part.1>
1000106b:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
10001072:	74 32                	je     100010a6 <ssfn_free+0x4d>
10001074:	31 f6                	xor    esi,esi
10001076:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
1000107c:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
10001082:	7e 16                	jle    1000109a <ssfn_free+0x41>
10001084:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10001087:	85 c0                	test   eax,eax
10001089:	74 0c                	je     10001097 <ssfn_free+0x3e>
1000108b:	83 ec 0c             	sub    esp,0xc
1000108e:	50                   	push   eax
1000108f:	e8 fc ff ff ff       	call   10001090 <ssfn_free+0x37>	10001090: R_386_PC32	free
10001094:	83 c4 10             	add    esp,0x10
10001097:	46                   	inc    esi
10001098:	eb dc                	jmp    10001076 <ssfn_free+0x1d>
1000109a:	83 ec 0c             	sub    esp,0xc
1000109d:	50                   	push   eax
1000109e:	e8 fc ff ff ff       	call   1000109f <ssfn_free+0x46>	1000109f: R_386_PC32	free
100010a3:	83 c4 10             	add    esp,0x10
100010a6:	31 f6                	xor    esi,esi
100010a8:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
100010ab:	85 c0                	test   eax,eax
100010ad:	74 0c                	je     100010bb <ssfn_free+0x62>
100010af:	83 ec 0c             	sub    esp,0xc
100010b2:	50                   	push   eax
100010b3:	e8 fc ff ff ff       	call   100010b4 <ssfn_free+0x5b>	100010b4: R_386_PC32	free
100010b8:	83 c4 10             	add    esp,0x10
100010bb:	46                   	inc    esi
100010bc:	83 fe 05             	cmp    esi,0x5
100010bf:	75 e7                	jne    100010a8 <ssfn_free+0x4f>
100010c1:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100010c7:	85 c0                	test   eax,eax
100010c9:	74 0c                	je     100010d7 <ssfn_free+0x7e>
100010cb:	83 ec 0c             	sub    esp,0xc
100010ce:	50                   	push   eax
100010cf:	e8 fc ff ff ff       	call   100010d0 <ssfn_free+0x77>	100010d0: R_386_PC32	free
100010d4:	83 c4 10             	add    esp,0x10
100010d7:	b9 72 3d 00 00       	mov    ecx,0x3d72
100010dc:	31 c0                	xor    eax,eax
100010de:	89 df                	mov    edi,ebx
100010e0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100010e2:	5b                   	pop    ebx
100010e3:	5e                   	pop    esi
100010e4:	5f                   	pop    edi
100010e5:	c3                   	ret    

100010e6 <ssfn_mem>:
100010e6:	55                   	push   ebp
100010e7:	31 c0                	xor    eax,eax
100010e9:	57                   	push   edi
100010ea:	56                   	push   esi
100010eb:	53                   	push   ebx
100010ec:	83 ec 08             	sub    esp,0x8
100010ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100010f3:	85 d2                	test   edx,edx
100010f5:	0f 84 8e 00 00 00    	je     10001189 <ssfn_mem+0xa3>
100010fb:	b8 c8 f5 00 00       	mov    eax,0xf5c8
10001100:	31 c9                	xor    ecx,ecx
10001102:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
10001109:	41                   	inc    ecx
1000110a:	8d 04 98             	lea    eax,[eax+ebx*4]
1000110d:	83 f9 05             	cmp    ecx,0x5
10001110:	75 f0                	jne    10001102 <ssfn_mem+0x1c>
10001112:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
10001118:	31 c9                	xor    ecx,ecx
1000111a:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
10001121:	89 34 24             	mov    DWORD PTR [esp],esi
10001124:	85 f6                	test   esi,esi
10001126:	74 48                	je     10001170 <ssfn_mem+0x8a>
10001128:	31 db                	xor    ebx,ebx
1000112a:	8b 34 24             	mov    esi,DWORD PTR [esp]
1000112d:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
10001130:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
10001134:	85 ff                	test   edi,edi
10001136:	74 2a                	je     10001162 <ssfn_mem+0x7c>
10001138:	31 f6                	xor    esi,esi
1000113a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
1000113e:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10001141:	85 ed                	test   ebp,ebp
10001143:	74 0f                	je     10001154 <ssfn_mem+0x6e>
10001145:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
10001149:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
1000114d:	0f af fd             	imul   edi,ebp
10001150:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
10001154:	46                   	inc    esi
10001155:	81 fe 00 01 00 00    	cmp    esi,0x100
1000115b:	75 dd                	jne    1000113a <ssfn_mem+0x54>
1000115d:	05 00 04 00 00       	add    eax,0x400
10001162:	43                   	inc    ebx
10001163:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001169:	75 bf                	jne    1000112a <ssfn_mem+0x44>
1000116b:	05 00 04 00 00       	add    eax,0x400
10001170:	41                   	inc    ecx
10001171:	83 f9 11             	cmp    ecx,0x11
10001174:	75 a4                	jne    1000111a <ssfn_mem+0x34>
10001176:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
1000117d:	74 0a                	je     10001189 <ssfn_mem+0xa3>
1000117f:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
10001185:	01 d2                	add    edx,edx
10001187:	01 d0                	add    eax,edx
10001189:	83 c4 08             	add    esp,0x8
1000118c:	5b                   	pop    ebx
1000118d:	5e                   	pop    esi
1000118e:	5f                   	pop    edi
1000118f:	5d                   	pop    ebp
10001190:	c3                   	ret    

10001191 <ssfn_select>:
10001191:	55                   	push   ebp
10001192:	57                   	push   edi
10001193:	56                   	push   esi
10001194:	53                   	push   ebx
10001195:	83 ec 1c             	sub    esp,0x1c
10001198:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
1000119c:	85 db                	test   ebx,ebx
1000119e:	75 0a                	jne    100011aa <ssfn_select+0x19>
100011a0:	be fc ff ff ff       	mov    esi,0xfffffffc
100011a5:	e9 13 01 00 00       	jmp    100012bd <ssfn_select+0x12c>
100011aa:	89 d8                	mov    eax,ebx
100011ac:	e8 44 f2 ff ff       	call   100003f5 <_ssfn_fc.part.1>
100011b1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100011b5:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
100011bb:	0f 85 e9 00 00 00    	jne    100012aa <ssfn_select+0x119>
100011c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100011c5:	83 e8 08             	sub    eax,0x8
100011c8:	3d b8 00 00 00       	cmp    eax,0xb8
100011cd:	0f 87 de 00 00 00    	ja     100012b1 <ssfn_select+0x120>
100011d3:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
100011db:	75 76                	jne    10001253 <ssfn_select+0xc2>
100011dd:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
100011e2:	74 bc                	je     100011a0 <ssfn_select+0xf>
100011e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100011e8:	80 38 00             	cmp    BYTE PTR [eax],0x0
100011eb:	74 b3                	je     100011a0 <ssfn_select+0xf>
100011ed:	31 ed                	xor    ebp,ebp
100011ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100011f3:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
100011f7:	74 03                	je     100011fc <ssfn_select+0x6b>
100011f9:	45                   	inc    ebp
100011fa:	eb f3                	jmp    100011ef <ssfn_select+0x5e>
100011fc:	8d 43 14             	lea    eax,[ebx+0x14]
100011ff:	89 df                	mov    edi,ebx
10001201:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001205:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
1000120b:	31 d2                	xor    edx,edx
1000120d:	89 04 24             	mov    DWORD PTR [esp],eax
10001210:	39 14 24             	cmp    DWORD PTR [esp],edx
10001213:	7e 33                	jle    10001248 <ssfn_select+0xb7>
10001215:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10001219:	8b 07                	mov    eax,DWORD PTR [edi]
1000121b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
1000121e:	50                   	push   eax
1000121f:	8d 41 20             	lea    eax,[ecx+0x20]
10001222:	55                   	push   ebp
10001223:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10001227:	50                   	push   eax
10001228:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
1000122c:	e8 fc ff ff ff       	call   1000122d <ssfn_select+0x9c>	1000122d: R_386_PC32	memcmp
10001231:	83 c4 10             	add    esp,0x10
10001234:	85 c0                	test   eax,eax
10001236:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000123a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
1000123e:	75 05                	jne    10001245 <ssfn_select+0xb4>
10001240:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
10001243:	eb 34                	jmp    10001279 <ssfn_select+0xe8>
10001245:	42                   	inc    edx
10001246:	eb c8                	jmp    10001210 <ssfn_select+0x7f>
10001248:	83 c7 04             	add    edi,0x4
1000124b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
1000124f:	75 b4                	jne    10001205 <ssfn_select+0x74>
10001251:	eb 65                	jmp    100012b8 <ssfn_select+0x127>
10001253:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
1000125b:	74 15                	je     10001272 <ssfn_select+0xe1>
1000125d:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
10001262:	7f 54                	jg     100012b8 <ssfn_select+0x127>
10001264:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001268:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
10001270:	74 46                	je     100012b8 <ssfn_select+0x127>
10001272:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10001279:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000127d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
10001284:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
1000128a:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10001294:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001298:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
1000129e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100012a2:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
100012a8:	eb 13                	jmp    100012bd <ssfn_select+0x12c>
100012aa:	be fb ff ff ff       	mov    esi,0xfffffffb
100012af:	eb 0c                	jmp    100012bd <ssfn_select+0x12c>
100012b1:	be fa ff ff ff       	mov    esi,0xfffffffa
100012b6:	eb 05                	jmp    100012bd <ssfn_select+0x12c>
100012b8:	be fd ff ff ff       	mov    esi,0xfffffffd
100012bd:	83 c4 1c             	add    esp,0x1c
100012c0:	89 f0                	mov    eax,esi
100012c2:	5b                   	pop    ebx
100012c3:	5e                   	pop    esi
100012c4:	5f                   	pop    edi
100012c5:	5d                   	pop    ebp
100012c6:	c3                   	ret    

100012c7 <ssfn_render>:
100012c7:	55                   	push   ebp
100012c8:	57                   	push   edi
100012c9:	56                   	push   esi
100012ca:	53                   	push   ebx
100012cb:	81 ec dc 05 01 00    	sub    esp,0x105dc
100012d1:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
100012d8:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
100012e3:	85 ed                	test   ebp,ebp
100012e5:	0f 94 c2             	sete   dl
100012e8:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
100012f0:	0f 94 c0             	sete   al
100012f3:	08 c2                	or     dl,al
100012f5:	74 0a                	je     10001301 <ssfn_render+0x3a>
100012f7:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
100012fc:	e9 14 1e 00 00       	jmp    10003115 <ssfn_render+0x1e4e>
10001301:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
10001308:	31 c9                	xor    ecx,ecx
1000130a:	8a 00                	mov    al,BYTE PTR [eax]
1000130c:	84 c0                	test   al,al
1000130e:	0f 84 01 1e 00 00    	je     10003115 <ssfn_render+0x1e4e>
10001314:	3c 0d                	cmp    al,0xd
10001316:	75 0f                	jne    10001327 <ssfn_render+0x60>
10001318:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000131f:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10001325:	eb 31                	jmp    10001358 <ssfn_render+0x91>
10001327:	3c 0a                	cmp    al,0xa
10001329:	75 37                	jne    10001362 <ssfn_render+0x9b>
1000132b:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10001332:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10001338:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
1000133b:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
10001341:	85 c0                	test   eax,eax
10001343:	75 06                	jne    1000134b <ssfn_render+0x84>
10001345:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
1000134b:	01 d0                	add    eax,edx
1000134d:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10001354:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10001358:	b9 01 00 00 00       	mov    ecx,0x1
1000135d:	e9 b3 1d 00 00       	jmp    10003115 <ssfn_render+0x1e4e>
10001362:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001365:	85 c0                	test   eax,eax
10001367:	74 3e                	je     100013a7 <ssfn_render+0xe0>
10001369:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
1000136c:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
10001373:	56                   	push   esi
10001374:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000137b:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001382:	e8 a0 f4 ff ff       	call   10000827 <_ssfn_c>
10001387:	5b                   	pop    ebx
10001388:	85 c0                	test   eax,eax
1000138a:	0f 85 71 02 00 00    	jne    10001601 <ssfn_render+0x33a>
10001390:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
10001396:	81 e2 00 01 00 00    	and    edx,0x100
1000139c:	0f 84 fd 01 00 00    	je     1000159f <ssfn_render+0x2d8>
100013a2:	e9 1d 02 00 00       	jmp    100015c4 <ssfn_render+0x2fd>
100013a7:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
100013ad:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
100013b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100013b8:	3d fd 00 00 00       	cmp    eax,0xfd
100013bd:	7f 08                	jg     100013c7 <ssfn_render+0x100>
100013bf:	89 c3                	mov    ebx,eax
100013c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100013c5:	eb 3f                	jmp    10001406 <ssfn_render+0x13f>
100013c7:	31 db                	xor    ebx,ebx
100013c9:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100013d1:	eb 33                	jmp    10001406 <ssfn_render+0x13f>
100013d3:	85 c0                	test   eax,eax
100013d5:	0f 84 64 01 00 00    	je     1000153f <ssfn_render+0x278>
100013db:	43                   	inc    ebx
100013dc:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
100013e0:	7e 28                	jle    1000140a <ssfn_render+0x143>
100013e2:	85 c0                	test   eax,eax
100013e4:	0f 85 17 02 00 00    	jne    10001601 <ssfn_render+0x33a>
100013ea:	31 db                	xor    ebx,ebx
100013ec:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100013f4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
100013fc:	74 92                	je     10001390 <ssfn_render+0xc9>
100013fe:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
10001406:	31 c0                	xor    eax,eax
10001408:	eb d2                	jmp    100013dc <ssfn_render+0x115>
1000140a:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
1000140e:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
10001415:	74 bc                	je     100013d3 <ssfn_render+0x10c>
10001417:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001422:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001429:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
10001430:	7e 50                	jle    10001482 <ssfn_render+0x1bb>
10001432:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
10001435:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
10001439:	c1 fa 04             	sar    edx,0x4
1000143c:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
10001442:	80 e2 03             	and    dl,0x3
10001445:	75 32                	jne    10001479 <ssfn_render+0x1b2>
10001447:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
1000144b:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001451:	75 26                	jne    10001479 <ssfn_render+0x1b2>
10001453:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
1000145a:	50                   	push   eax
1000145b:	89 f8                	mov    eax,edi
1000145d:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001464:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000146b:	e8 b7 f3 ff ff       	call   10000827 <_ssfn_c>
10001470:	59                   	pop    ecx
10001471:	85 c0                	test   eax,eax
10001473:	0f 85 04 01 00 00    	jne    1000157d <ssfn_render+0x2b6>
10001479:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001480:	eb a0                	jmp    10001422 <ssfn_render+0x15b>
10001482:	85 c0                	test   eax,eax
10001484:	0f 85 51 ff ff ff    	jne    100013db <ssfn_render+0x114>
1000148a:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001495:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000149c:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100014a3:	0f 8e f9 1b 00 00    	jle    100030a2 <ssfn_render+0x1ddb>
100014a9:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100014ac:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
100014b0:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
100014b6:	74 09                	je     100014c1 <ssfn_render+0x1fa>
100014b8:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100014bf:	eb d4                	jmp    10001495 <ssfn_render+0x1ce>
100014c1:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100014c8:	57                   	push   edi
100014c9:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100014d0:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100014d7:	e8 4b f3 ff ff       	call   10000827 <_ssfn_c>
100014dc:	5a                   	pop    edx
100014dd:	85 c0                	test   eax,eax
100014df:	74 d7                	je     100014b8 <ssfn_render+0x1f1>
100014e1:	e9 97 00 00 00       	jmp    1000157d <ssfn_render+0x2b6>
100014e6:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100014e9:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
100014ed:	c1 fa 04             	sar    edx,0x4
100014f0:	31 ca                	xor    edx,ecx
100014f2:	80 e2 03             	and    dl,0x3
100014f5:	0f 84 b7 1b 00 00    	je     100030b2 <ssfn_render+0x1deb>
100014fb:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001502:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001509:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
1000150f:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001516:	7f ce                	jg     100014e6 <ssfn_render+0x21f>
10001518:	83 e1 03             	and    ecx,0x3
1000151b:	83 f9 03             	cmp    ecx,0x3
1000151e:	75 1f                	jne    1000153f <ssfn_render+0x278>
10001520:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000152b:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001532:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001539:	0f 8f 9c 1b 00 00    	jg     100030db <ssfn_render+0x1e14>
1000153f:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000154a:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001551:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001558:	7e 3e                	jle    10001598 <ssfn_render+0x2d1>
1000155a:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
1000155d:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001564:	57                   	push   edi
10001565:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000156c:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001573:	e8 af f2 ff ff       	call   10000827 <_ssfn_c>
10001578:	5a                   	pop    edx
10001579:	85 c0                	test   eax,eax
1000157b:	74 12                	je     1000158f <ssfn_render+0x2c8>
1000157d:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001584:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
10001587:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
1000158a:	e9 4c fe ff ff       	jmp    100013db <ssfn_render+0x114>
1000158f:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001596:	eb b2                	jmp    1000154a <ssfn_render+0x283>
10001598:	31 c0                	xor    eax,eax
1000159a:	e9 3c fe ff ff       	jmp    100013db <ssfn_render+0x114>
1000159f:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
100015a5:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
100015b0:	81 fb fd 00 00 00    	cmp    ebx,0xfd
100015b6:	7f 16                	jg     100015ce <ssfn_render+0x307>
100015b8:	89 da                	mov    edx,ebx
100015ba:	31 c0                	xor    eax,eax
100015bc:	39 da                	cmp    edx,ebx
100015be:	7e 15                	jle    100015d5 <ssfn_render+0x30e>
100015c0:	85 c0                	test   eax,eax
100015c2:	75 3d                	jne    10001601 <ssfn_render+0x33a>
100015c4:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
100015c9:	e9 47 1b 00 00       	jmp    10003115 <ssfn_render+0x1e4e>
100015ce:	bb 04 00 00 00       	mov    ebx,0x4
100015d3:	eb e5                	jmp    100015ba <ssfn_render+0x2f3>
100015d5:	85 c0                	test   eax,eax
100015d7:	75 28                	jne    10001601 <ssfn_render+0x33a>
100015d9:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
100015e1:	74 1b                	je     100015fe <ssfn_render+0x337>
100015e3:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
100015e7:	8b 09                	mov    ecx,DWORD PTR [ecx]
100015e9:	85 c9                	test   ecx,ecx
100015eb:	74 11                	je     100015fe <ssfn_render+0x337>
100015ed:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
100015f0:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
100015f4:	78 08                	js     100015fe <ssfn_render+0x337>
100015f6:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
100015f9:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
100015fc:	01 c8                	add    eax,ecx
100015fe:	42                   	inc    edx
100015ff:	eb bb                	jmp    100015bc <ssfn_render+0x2f5>
10001601:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001604:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
10001609:	85 d2                	test   edx,edx
1000160b:	0f 84 04 1b 00 00    	je     10003115 <ssfn_render+0x1e4e>
10001611:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
10001615:	0f 84 fa 1a 00 00    	je     10003115 <ssfn_render+0x1e4e>
1000161b:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
10001621:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001625:	85 ff                	test   edi,edi
10001627:	0f 84 e8 1a 00 00    	je     10003115 <ssfn_render+0x1e4e>
1000162d:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
10001634:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10001638:	c1 ef 10             	shr    edi,0x10
1000163b:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
1000163f:	83 ff 10             	cmp    edi,0x10
10001642:	0f 87 af fc ff ff    	ja     100012f7 <ssfn_render+0x30>
10001648:	8d 70 06             	lea    esi,[eax+0x6]
1000164b:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
10001651:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10001655:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
1000165b:	89 f7                	mov    edi,esi
1000165d:	81 e7 00 02 00 00    	and    edi,0x200
10001663:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10001667:	75 34                	jne    1000169d <ssfn_render+0x3d6>
10001669:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000166d:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
10001674:	85 c9                	test   ecx,ecx
10001676:	74 25                	je     1000169d <ssfn_render+0x3d6>
10001678:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000167c:	0f b6 ff             	movzx  edi,bh
1000167f:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
10001682:	85 c9                	test   ecx,ecx
10001684:	74 17                	je     1000169d <ssfn_render+0x3d6>
10001686:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
1000168b:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000168e:	85 c9                	test   ecx,ecx
10001690:	74 0b                	je     1000169d <ssfn_render+0x3d6>
10001692:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
10001698:	e9 25 0d 00 00       	jmp    100023c2 <ssfn_render+0x10fb>
1000169d:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
100016a1:	f7 c6 40 00 00 00    	test   esi,0x40
100016a7:	75 1a                	jne    100016c3 <ssfn_render+0x3fc>
100016a9:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
100016ad:	7e 10                	jle    100016bf <ssfn_render+0x3f8>
100016af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100016b3:	83 c7 04             	add    edi,0x4
100016b6:	83 e7 fc             	and    edi,0xfffffffc
100016b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100016bd:	eb 04                	jmp    100016c3 <ssfn_render+0x3fc>
100016bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100016c3:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
100016c8:	f7 c6 02 00 00 00    	test   esi,0x2
100016ce:	74 14                	je     100016e4 <ssfn_render+0x41d>
100016d0:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
100016d3:	c0 eb 05             	shr    bl,0x5
100016d6:	89 df                	mov    edi,ebx
100016d8:	83 f7 01             	xor    edi,0x1
100016db:	83 e7 01             	and    edi,0x1
100016de:	89 fb                	mov    ebx,edi
100016e0:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
100016e4:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
100016e9:	83 e6 01             	and    esi,0x1
100016ec:	74 10                	je     100016fe <ssfn_render+0x437>
100016ee:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
100016f2:	75 0a                	jne    100016fe <ssfn_render+0x437>
100016f4:	8d 51 40             	lea    edx,[ecx+0x40]
100016f7:	c1 fa 06             	sar    edx,0x6
100016fa:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
100016fe:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
10001702:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001707:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000170b:	99                   	cdq    
1000170c:	f7 f9                	idiv   ecx
1000170e:	89 c1                	mov    ecx,eax
10001710:	31 c0                	xor    eax,eax
10001712:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001717:	74 0c                	je     10001725 <ssfn_render+0x45e>
10001719:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000171d:	be 04 00 00 00       	mov    esi,0x4
10001722:	99                   	cdq    
10001723:	f7 fe                	idiv   esi
10001725:	01 c8                	add    eax,ecx
10001727:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
1000172c:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
10001731:	01 f0                	add    eax,esi
10001733:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
10001737:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000173b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000173f:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
10001744:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001748:	3d ff f4 00 00       	cmp    eax,0xf4ff
1000174d:	0f 8f c2 19 00 00    	jg     10003115 <ssfn_render+0x1e4e>
10001753:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
10001758:	0f 85 f0 00 00 00    	jne    1000184e <ssfn_render+0x587>
1000175e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001762:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
10001766:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
1000176d:	75 2f                	jne    1000179e <ssfn_render+0x4d7>
1000176f:	83 ec 0c             	sub    esp,0xc
10001772:	68 00 04 00 00       	push   0x400
10001777:	e8 fc ff ff ff       	call   10001778 <ssfn_render+0x4b1>	10001778: R_386_PC32	malloc
1000177c:	83 c4 10             	add    esp,0x10
1000177f:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
10001785:	85 c0                	test   eax,eax
10001787:	75 08                	jne    10001791 <ssfn_render+0x4ca>
10001789:	83 c9 ff             	or     ecx,0xffffffff
1000178c:	e9 84 19 00 00       	jmp    10003115 <ssfn_render+0x1e4e>
10001791:	89 c7                	mov    edi,eax
10001793:	b9 00 01 00 00       	mov    ecx,0x100
10001798:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000179c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000179e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100017a2:	0f b6 dc             	movzx  ebx,ah
100017a5:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
100017ab:	8d 1c 98             	lea    ebx,[eax+ebx*4]
100017ae:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
100017b1:	75 3a                	jne    100017ed <ssfn_render+0x526>
100017b3:	83 ec 0c             	sub    esp,0xc
100017b6:	68 00 04 00 00       	push   0x400
100017bb:	e8 fc ff ff ff       	call   100017bc <ssfn_render+0x4f5>	100017bc: R_386_PC32	malloc
100017c0:	89 03                	mov    DWORD PTR [ebx],eax
100017c2:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
100017c9:	83 c4 10             	add    esp,0x10
100017cc:	89 c2                	mov    edx,eax
100017ce:	0f b6 c4             	movzx  eax,ah
100017d1:	c1 ea 10             	shr    edx,0x10
100017d4:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100017db:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
100017de:	85 d2                	test   edx,edx
100017e0:	74 a7                	je     10001789 <ssfn_render+0x4c2>
100017e2:	b9 00 01 00 00       	mov    ecx,0x100
100017e7:	31 c0                	xor    eax,eax
100017e9:	89 d7                	mov    edi,edx
100017eb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100017ed:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
100017f4:	83 ec 0c             	sub    esp,0xc
100017f7:	0f b6 cc             	movzx  ecx,ah
100017fa:	89 c2                	mov    edx,eax
100017fc:	0f b6 c0             	movzx  eax,al
100017ff:	c1 ea 10             	shr    edx,0x10
10001802:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001809:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
1000180c:	8d 1c 82             	lea    ebx,[edx+eax*4]
1000180f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001813:	83 c0 08             	add    eax,0x8
10001816:	50                   	push   eax
10001817:	e8 fc ff ff ff       	call   10001818 <ssfn_render+0x551>	10001818: R_386_PC32	malloc
1000181c:	89 03                	mov    DWORD PTR [ebx],eax
1000181e:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001824:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
1000182b:	83 c4 10             	add    esp,0x10
1000182e:	89 c2                	mov    edx,eax
10001830:	0f b6 cc             	movzx  ecx,ah
10001833:	c1 ea 10             	shr    edx,0x10
10001836:	0f b6 c0             	movzx  eax,al
10001839:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001840:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
10001843:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
10001847:	75 0e                	jne    10001857 <ssfn_render+0x590>
10001849:	e9 3b ff ff ff       	jmp    10001789 <ssfn_render+0x4c2>
1000184e:	8d 45 1c             	lea    eax,[ebp+0x1c]
10001851:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001857:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
1000185d:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10001861:	74 2a                	je     1000188d <ssfn_render+0x5c6>
10001863:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001868:	74 23                	je     1000188d <ssfn_render+0x5c6>
1000186a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000186d:	bb 04 00 00 00       	mov    ebx,0x4
10001872:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10001876:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
1000187a:	89 cf                	mov    edi,ecx
1000187c:	29 c7                	sub    edi,eax
1000187e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001882:	0f af c7             	imul   eax,edi
10001885:	99                   	cdq    
10001886:	f7 fb                	idiv   ebx
10001888:	99                   	cdq    
10001889:	f7 f9                	idiv   ecx
1000188b:	eb 02                	jmp    1000188f <ssfn_render+0x5c8>
1000188d:	31 c0                	xor    eax,eax
1000188f:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001895:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10001899:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000189d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
100018a5:	66 89 32             	mov    WORD PTR [edx],si
100018a8:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
100018ad:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018b3:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
100018b6:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
100018bc:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018c2:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
100018c5:	01 c3                	add    ebx,eax
100018c7:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
100018ca:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018d0:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
100018d6:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
100018d9:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
100018dc:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
100018e2:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100018e8:	8a 12                	mov    dl,BYTE PTR [edx]
100018ea:	83 e2 3f             	and    edx,0x3f
100018ed:	01 d0                	add    eax,edx
100018ef:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
100018f2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
100018f6:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100018fc:	8d 50 08             	lea    edx,[eax+0x8]
100018ff:	b0 ff                	mov    al,0xff
10001901:	89 d7                	mov    edi,edx
10001903:	f3 aa                	rep stos BYTE PTR es:[edi],al
10001905:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000190b:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
1000190f:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001915:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
10001919:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000191d:	c1 e0 04             	shl    eax,0x4
10001920:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10001924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001928:	c1 e0 04             	shl    eax,0x4
1000192b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
1000192f:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001935:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
10001939:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
1000193d:	0f 8e 4d 0a 00 00    	jle    10002390 <ssfn_render+0x10c9>
10001943:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001947:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000194b:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
1000194e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10001951:	8a 12                	mov    dl,BYTE PTR [edx]
10001953:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
10001957:	83 e2 40             	and    edx,0x40
1000195a:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
1000195e:	88 c2                	mov    dl,al
10001960:	21 ca                	and    edx,ecx
10001962:	fe c2                	inc    dl
10001964:	75 14                	jne    1000197a <ssfn_render+0x6b3>
10001966:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
1000196b:	19 c0                	sbb    eax,eax
1000196d:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
10001971:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001975:	e9 09 0a 00 00       	jmp    10002383 <ssfn_render+0x10bc>
1000197a:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
1000197e:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10001981:	c1 e0 04             	shl    eax,0x4
10001984:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
10001988:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000198d:	99                   	cdq    
1000198e:	f7 fe                	idiv   esi
10001990:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001994:	0f b6 c1             	movzx  eax,cl
10001997:	c1 e0 04             	shl    eax,0x4
1000199a:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000199f:	99                   	cdq    
100019a0:	f7 fe                	idiv   esi
100019a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100019a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100019aa:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
100019ae:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
100019b2:	c1 e2 10             	shl    edx,0x10
100019b5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
100019ba:	74 0e                	je     100019ca <ssfn_render+0x703>
100019bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100019c0:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
100019c5:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
100019c8:	eb 0c                	jmp    100019d6 <ssfn_render+0x70f>
100019ca:	c1 e0 08             	shl    eax,0x8
100019cd:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
100019d2:	09 d0                	or     eax,edx
100019d4:	09 c3                	or     ebx,eax
100019d6:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
100019d9:	8a 01                	mov    al,BYTE PTR [ecx]
100019db:	84 c0                	test   al,al
100019dd:	0f 88 17 05 00 00    	js     10001efa <ssfn_render+0xc33>
100019e3:	89 c7                	mov    edi,eax
100019e5:	83 e7 3f             	and    edi,0x3f
100019e8:	a8 40                	test   al,0x40
100019ea:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
100019ee:	74 10                	je     10001a00 <ssfn_render+0x739>
100019f0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
100019f4:	89 f8                	mov    eax,edi
100019f6:	41                   	inc    ecx
100019f7:	c1 e0 08             	shl    eax,0x8
100019fa:	09 c2                	or     edx,eax
100019fc:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
10001a00:	8d 41 01             	lea    eax,[ecx+0x1]
10001a03:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001a0d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001a11:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001a1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001a20:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001a24:	83 c0 04             	add    eax,0x4
10001a27:	c1 f8 02             	sar    eax,0x2
10001a2a:	01 c7                	add    edi,eax
10001a2c:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001a33:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001a37:	0f 8f d7 01 00 00    	jg     10001c14 <ssfn_render+0x94d>
10001a3d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001a40:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001a44:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001a48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001a4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001a50:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001a53:	c1 e0 04             	shl    eax,0x4
10001a56:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a5b:	99                   	cdq    
10001a5c:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001a60:	01 c6                	add    esi,eax
10001a62:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001a66:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001a6a:	c1 e0 04             	shl    eax,0x4
10001a6d:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a72:	99                   	cdq    
10001a73:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001a77:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001a7b:	01 c3                	add    ebx,eax
10001a7d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001a81:	89 c8                	mov    eax,ecx
10001a83:	01 c9                	add    ecx,ecx
10001a85:	c1 f8 02             	sar    eax,0x2
10001a88:	83 e1 06             	and    ecx,0x6
10001a8b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001a8f:	d3 f8                	sar    eax,cl
10001a91:	83 e0 03             	and    eax,0x3
10001a94:	89 c1                	mov    ecx,eax
10001a96:	83 f8 02             	cmp    eax,0x2
10001a99:	74 4a                	je     10001ae5 <ssfn_render+0x81e>
10001a9b:	83 f8 03             	cmp    eax,0x3
10001a9e:	0f 84 e4 00 00 00    	je     10001b88 <ssfn_render+0x8c1>
10001aa4:	49                   	dec    ecx
10001aa5:	74 20                	je     10001ac7 <ssfn_render+0x800>
10001aa7:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001aad:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001ab3:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001ab9:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001abf:	83 c7 02             	add    edi,0x2
10001ac2:	e9 41 01 00 00       	jmp    10001c08 <ssfn_render+0x941>
10001ac7:	83 c7 02             	add    edi,0x2
10001aca:	50                   	push   eax
10001acb:	50                   	push   eax
10001acc:	89 e8                	mov    eax,ebp
10001ace:	53                   	push   ebx
10001acf:	56                   	push   esi
10001ad0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001ad4:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001ad8:	e8 9c e9 ff ff       	call   10000479 <_ssfn_l>
10001add:	83 c4 10             	add    esp,0x10
10001ae0:	e9 23 01 00 00       	jmp    10001c08 <ssfn_render+0x941>
10001ae5:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001ae9:	83 c7 04             	add    edi,0x4
10001aec:	c1 e0 04             	shl    eax,0x4
10001aef:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001af4:	99                   	cdq    
10001af5:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001af9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001afd:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001b01:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001b05:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001b09:	c1 e0 04             	shl    eax,0x4
10001b0c:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b11:	99                   	cdq    
10001b12:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b16:	83 ec 0c             	sub    esp,0xc
10001b19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001b1d:	6a 00                	push   0x0
10001b1f:	53                   	push   ebx
10001b20:	56                   	push   esi
10001b21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001b25:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001b29:	99                   	cdq    
10001b2a:	f7 f9                	idiv   ecx
10001b2c:	01 d8                	add    eax,ebx
10001b2e:	50                   	push   eax
10001b2f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001b33:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001b37:	99                   	cdq    
10001b38:	f7 f9                	idiv   ecx
10001b3a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001b3e:	50                   	push   eax
10001b3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001b43:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001b47:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001b4d:	99                   	cdq    
10001b4e:	f7 f9                	idiv   ecx
10001b50:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001b56:	50                   	push   eax
10001b57:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001b5b:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001b61:	99                   	cdq    
10001b62:	f7 f9                	idiv   ecx
10001b64:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001b6a:	50                   	push   eax
10001b6b:	89 e8                	mov    eax,ebp
10001b6d:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001b73:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001b79:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001b7d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001b81:	e8 04 ea ff ff       	call   1000058a <_ssfn_b>
10001b86:	eb 7d                	jmp    10001c05 <ssfn_render+0x93e>
10001b88:	83 ec 0c             	sub    esp,0xc
10001b8b:	83 c7 06             	add    edi,0x6
10001b8e:	6a 00                	push   0x0
10001b90:	53                   	push   ebx
10001b91:	56                   	push   esi
10001b92:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001b96:	c1 e0 04             	shl    eax,0x4
10001b99:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001b9e:	99                   	cdq    
10001b9f:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001ba3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001ba7:	50                   	push   eax
10001ba8:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001bac:	c1 e0 04             	shl    eax,0x4
10001baf:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001bb4:	99                   	cdq    
10001bb5:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001bb9:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001bbd:	50                   	push   eax
10001bbe:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001bc2:	c1 e0 04             	shl    eax,0x4
10001bc5:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001bca:	99                   	cdq    
10001bcb:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001bcf:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001bd3:	50                   	push   eax
10001bd4:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001bd8:	c1 e0 04             	shl    eax,0x4
10001bdb:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001be0:	99                   	cdq    
10001be1:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001be5:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001be9:	50                   	push   eax
10001bea:	89 e8                	mov    eax,ebp
10001bec:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001bf2:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001bf8:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001bfc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001c00:	e8 85 e9 ff ff       	call   1000058a <_ssfn_b>
10001c05:	83 c4 30             	add    esp,0x30
10001c08:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001c0f:	e9 18 fe ff ff       	jmp    10001a2c <ssfn_render+0x765>
10001c14:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001c1a:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001c20:	75 0e                	jne    10001c30 <ssfn_render+0x969>
10001c22:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001c28:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001c2e:	74 2e                	je     10001c5e <ssfn_render+0x997>
10001c30:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001c36:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001c3c:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001c40:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001c46:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001c4c:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001c52:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001c57:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001c5e:	b3 fe                	mov    bl,0xfe
10001c60:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001c67:	0f 8e 16 07 00 00    	jle    10002383 <ssfn_render+0x10bc>
10001c6d:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001c75:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001c7d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001c85:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001c8d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001c95:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001c99:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001c9d:	0f 8d de 06 00 00    	jge    10002381 <ssfn_render+0x10ba>
10001ca3:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001ca9:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001cb4:	83 e8 03             	sub    eax,0x3
10001cb7:	31 f6                	xor    esi,esi
10001cb9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001cbd:	89 f8                	mov    eax,edi
10001cbf:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001cc3:	c1 f8 02             	sar    eax,0x2
10001cc6:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001cca:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001cd1:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001cd5:	0f 8e 16 01 00 00    	jle    10001df1 <ssfn_render+0xb2a>
10001cdb:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001ce1:	8d 47 01             	lea    eax,[edi+0x1]
10001ce4:	01 c0                	add    eax,eax
10001ce6:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001cea:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001cee:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001cf3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001cf7:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001cfb:	7d 0c                	jge    10001d09 <ssfn_render+0xa42>
10001cfd:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001d01:	0f 8f db 00 00 00    	jg     10001de2 <ssfn_render+0xb1b>
10001d07:	eb 0a                	jmp    10001d13 <ssfn_render+0xa4c>
10001d09:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001d0d:	0f 8e cf 00 00 00    	jle    10001de2 <ssfn_render+0xb1b>
10001d13:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001d18:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001d1c:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001d21:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001d25:	89 d8                	mov    eax,ebx
10001d27:	c1 fa 04             	sar    edx,0x4
10001d2a:	c1 f8 04             	sar    eax,0x4
10001d2d:	39 c2                	cmp    edx,eax
10001d2f:	75 0a                	jne    10001d3b <ssfn_render+0xa74>
10001d31:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001d35:	01 c8                	add    eax,ecx
10001d37:	d1 f8                	sar    eax,1
10001d39:	eb 1a                	jmp    10001d55 <ssfn_render+0xa8e>
10001d3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001d3f:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001d43:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001d47:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001d4b:	0f af c1             	imul   eax,ecx
10001d4e:	99                   	cdq    
10001d4f:	f7 fb                	idiv   ebx
10001d51:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001d55:	c1 f8 04             	sar    eax,0x4
10001d58:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001d5d:	74 04                	je     10001d63 <ssfn_render+0xa9c>
10001d5f:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001d63:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001d68:	75 3f                	jne    10001da9 <ssfn_render+0xae2>
10001d6a:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001d6f:	74 38                	je     10001da9 <ssfn_render+0xae2>
10001d71:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001d75:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001d7b:	f7 db                	neg    ebx
10001d7d:	01 c2                	add    edx,eax
10001d7f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001d83:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001d87:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001d8b:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001d8f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001d93:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001d97:	74 10                	je     10001da9 <ssfn_render+0xae2>
10001d99:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001d9d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001da1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001da5:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001da9:	31 d2                	xor    edx,edx
10001dab:	39 f2                	cmp    edx,esi
10001dad:	75 0b                	jne    10001dba <ssfn_render+0xaf3>
10001daf:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001db7:	46                   	inc    esi
10001db8:	eb 28                	jmp    10001de2 <ssfn_render+0xb1b>
10001dba:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001dc2:	39 c1                	cmp    ecx,eax
10001dc4:	7d 03                	jge    10001dc9 <ssfn_render+0xb02>
10001dc6:	42                   	inc    edx
10001dc7:	eb e2                	jmp    10001dab <ssfn_render+0xae4>
10001dc9:	89 f1                	mov    ecx,esi
10001dcb:	49                   	dec    ecx
10001dcc:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001dd4:	39 d1                	cmp    ecx,edx
10001dd6:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001dde:	7f eb                	jg     10001dcb <ssfn_render+0xb04>
10001de0:	eb cd                	jmp    10001daf <ssfn_render+0xae8>
10001de2:	8d 47 02             	lea    eax,[edi+0x2]
10001de5:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001dec:	e9 d9 fe ff ff       	jmp    10001cca <ssfn_render+0xa03>
10001df1:	83 fe 01             	cmp    esi,0x1
10001df4:	7e 1f                	jle    10001e15 <ssfn_render+0xb4e>
10001df6:	f7 c6 01 00 00 00    	test   esi,0x1
10001dfc:	74 24                	je     10001e22 <ssfn_render+0xb5b>
10001dfe:	8d 46 ff             	lea    eax,[esi-0x1]
10001e01:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10001e09:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10001e11:	89 c6                	mov    esi,eax
10001e13:	eb 0d                	jmp    10001e22 <ssfn_render+0xb5b>
10001e15:	85 f6                	test   esi,esi
10001e17:	0f 84 c7 00 00 00    	je     10001ee4 <ssfn_render+0xc1d>
10001e1d:	be 01 00 00 00       	mov    esi,0x1
10001e22:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001e28:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001e2c:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10001e30:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001e34:	39 d1                	cmp    ecx,edx
10001e36:	7d 0b                	jge    10001e43 <ssfn_render+0xb7c>
10001e38:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10001e3c:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001e40:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001e43:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001e4e:	31 c0                	xor    eax,eax
10001e50:	31 d2                	xor    edx,edx
10001e52:	8d 4e ff             	lea    ecx,[esi-0x1]
10001e55:	39 d1                	cmp    ecx,edx
10001e57:	7e 7d                	jle    10001ed6 <ssfn_render+0xc0f>
10001e59:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10001e61:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10001e69:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001e6d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001e71:	79 02                	jns    10001e75 <ssfn_render+0xbae>
10001e73:	31 c0                	xor    eax,eax
10001e75:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001e79:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10001e7d:	39 cf                	cmp    edi,ecx
10001e7f:	7e 04                	jle    10001e85 <ssfn_render+0xbbe>
10001e81:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001e85:	85 d2                	test   edx,edx
10001e87:	74 12                	je     10001e9b <ssfn_render+0xbd4>
10001e89:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10001e91:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001e95:	39 c8                	cmp    eax,ecx
10001e97:	7d 02                	jge    10001e9b <ssfn_render+0xbd4>
10001e99:	89 c8                	mov    eax,ecx
10001e9b:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10001e9f:	7d 2b                	jge    10001ecc <ssfn_render+0xc05>
10001ea1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001ea5:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10001eab:	8d 3c 01             	lea    edi,[ecx+eax*1]
10001eae:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10001eb2:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
10001eb6:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10001eba:	75 05                	jne    10001ec1 <ssfn_render+0xbfa>
10001ebc:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
10001ec1:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
10001ec5:	40                   	inc    eax
10001ec6:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10001eca:	eb cf                	jmp    10001e9b <ssfn_render+0xbd4>
10001ecc:	83 c2 02             	add    edx,0x2
10001ecf:	b0 01                	mov    al,0x1
10001ed1:	e9 7c ff ff ff       	jmp    10001e52 <ssfn_render+0xb8b>
10001ed6:	83 e6 fe             	and    esi,0xfffffffe
10001ed9:	84 c0                	test   al,al
10001edb:	74 07                	je     10001ee4 <ssfn_render+0xc1d>
10001edd:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10001ee4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001ee8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
10001eec:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
10001ef0:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
10001ef5:	e9 9b fd ff ff       	jmp    10001c95 <ssfn_render+0x9ce>
10001efa:	88 c2                	mov    dl,al
10001efc:	80 e2 60             	and    dl,0x60
10001eff:	0f 85 95 02 00 00    	jne    1000219a <ssfn_render+0xed3>
10001f05:	83 e0 1f             	and    eax,0x1f
10001f08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001f0c:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10001f13:	c1 fb 04             	sar    ebx,0x4
10001f16:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10001f1a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10001f1e:	40                   	inc    eax
10001f1f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001f23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001f27:	c1 f8 04             	sar    eax,0x4
10001f2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001f2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f32:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001f37:	99                   	cdq    
10001f38:	f7 fe                	idiv   esi
10001f3a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001f3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f42:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10001f47:	99                   	cdq    
10001f48:	f7 fe                	idiv   esi
10001f4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001f4e:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001f54:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001f58:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10001f5c:	8d 14 3b             	lea    edx,[ebx+edi*1]
10001f5f:	39 d6                	cmp    esi,edx
10001f61:	7d 0a                	jge    10001f6d <ssfn_render+0xca6>
10001f63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001f67:	8d 14 3b             	lea    edx,[ebx+edi*1]
10001f6a:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001f71:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001f79:	0f af c3             	imul   eax,ebx
10001f7c:	31 ff                	xor    edi,edi
10001f7e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001f82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001f86:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001f8a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001f8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f92:	29 d8                	sub    eax,ebx
10001f94:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10001f98:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
10001f9c:	0f 8d b1 00 00 00    	jge    10002053 <ssfn_render+0xd8c>
10001fa2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001fa6:	99                   	cdq    
10001fa7:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001fab:	89 c6                	mov    esi,eax
10001fad:	31 c0                	xor    eax,eax
10001faf:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001fb4:	74 0e                	je     10001fc4 <ssfn_render+0xcfd>
10001fb6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001fba:	bb 04 00 00 00       	mov    ebx,0x4
10001fbf:	29 f8                	sub    eax,edi
10001fc1:	99                   	cdq    
10001fc2:	f7 fb                	idiv   ebx
10001fc4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001fc8:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001fd3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001fd7:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
10001fdc:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001fe3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10001fe7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001feb:	39 d8                	cmp    eax,ebx
10001fed:	7d 4e                	jge    1000203d <ssfn_render+0xd76>
10001fef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001ff3:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
10001ff8:	99                   	cdq    
10001ff9:	f7 fb                	idiv   ebx
10001ffb:	8d 14 06             	lea    edx,[esi+eax*1]
10001ffe:	83 e0 07             	and    eax,0x7
10002001:	c1 fa 03             	sar    edx,0x3
10002004:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
10002009:	0f a3 c2             	bt     edx,eax
1000200c:	72 0e                	jb     1000201c <ssfn_render+0xd55>
1000200e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10002012:	43                   	inc    ebx
10002013:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
1000201a:	eb c0                	jmp    10001fdc <ssfn_render+0xd15>
1000201c:	31 c0                	xor    eax,eax
1000201e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10002022:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10002026:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
1000202c:	40                   	inc    eax
1000202d:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
10002031:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
10002035:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
10002039:	7d e3                	jge    1000201e <ssfn_render+0xd57>
1000203b:	eb d1                	jmp    1000200e <ssfn_render+0xd47>
1000203d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002041:	47                   	inc    edi
10002042:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10002046:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
1000204a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
1000204e:	e9 45 ff ff ff       	jmp    10001f98 <ssfn_render+0xcd1>
10002053:	b3 fe                	mov    bl,0xfe
10002055:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
1000205c:	0f 85 21 03 00 00    	jne    10002383 <ssfn_render+0x10bc>
10002062:	31 c0                	xor    eax,eax
10002064:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002068:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
1000206d:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10002071:	0f 95 c0             	setne  al
10002074:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002078:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000207c:	4f                   	dec    edi
1000207d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10002081:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
10002089:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
1000208d:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002094:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002098:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
1000209c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100020a0:	31 c0                	xor    eax,eax
100020a2:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100020a5:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100020a9:	83 c1 04             	add    ecx,0x4
100020ac:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
100020b0:	0f 8d c0 02 00 00    	jge    10002376 <ssfn_render+0x10af>
100020b6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100020ba:	8d 77 01             	lea    esi,[edi+0x1]
100020bd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100020c1:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
100020c5:	4f                   	dec    edi
100020c6:	be 01 00 00 00       	mov    esi,0x1
100020cb:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100020cf:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
100020d3:	7e 63                	jle    10002138 <ssfn_render+0xe71>
100020d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100020d9:	b9 01 00 00 00       	mov    ecx,0x1
100020de:	89 ca                	mov    edx,ecx
100020e0:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
100020e4:	7e 45                	jle    1000212b <ssfn_render+0xe64>
100020e6:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100020ec:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
100020f1:	75 34                	jne    10002127 <ssfn_render+0xe60>
100020f3:	89 c7                	mov    edi,eax
100020f5:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100020f9:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
100020fd:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
10002101:	74 0c                	je     1000210f <ssfn_render+0xe48>
10002103:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10002107:	01 d7                	add    edi,edx
10002109:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
1000210d:	75 18                	jne    10002127 <ssfn_render+0xe60>
1000210f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10002113:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
10002117:	74 06                	je     1000211f <ssfn_render+0xe58>
10002119:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
1000211d:	75 08                	jne    10002127 <ssfn_render+0xe60>
1000211f:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
10002123:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
10002127:	41                   	inc    ecx
10002128:	40                   	inc    eax
10002129:	eb b3                	jmp    100020de <ssfn_render+0xe17>
1000212b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000212f:	46                   	inc    esi
10002130:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
10002134:	b0 01                	mov    al,0x1
10002136:	eb 97                	jmp    100020cf <ssfn_render+0xe08>
10002138:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
1000213c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10002140:	bb 01 00 00 00       	mov    ebx,0x1
10002145:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002149:	7e 3d                	jle    10002188 <ssfn_render+0xec1>
1000214b:	b8 01 00 00 00       	mov    eax,0x1
10002150:	89 c2                	mov    edx,eax
10002152:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
10002156:	7e 23                	jle    1000217b <ssfn_render+0xeb4>
10002158:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
1000215c:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
10002162:	8d 14 07             	lea    edx,[edi+eax*1]
10002165:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
1000216a:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
1000216e:	75 08                	jne    10002178 <ssfn_render+0xeb1>
10002170:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10002174:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10002178:	40                   	inc    eax
10002179:	eb d5                	jmp    10002150 <ssfn_render+0xe89>
1000217b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000217f:	43                   	inc    ebx
10002180:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
10002184:	b0 01                	mov    al,0x1
10002186:	eb bd                	jmp    10002145 <ssfn_render+0xe7e>
10002188:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
1000218b:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
1000218f:	01 c9                	add    ecx,ecx
10002191:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
10002195:	e9 08 ff ff ff       	jmp    100020a2 <ssfn_render+0xddb>
1000219a:	b3 fe                	mov    bl,0xfe
1000219c:	80 fa 20             	cmp    dl,0x20
1000219f:	0f 85 de 01 00 00    	jne    10002383 <ssfn_render+0x10bc>
100021a5:	89 c3                	mov    ebx,eax
100021a7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
100021ab:	c1 e3 08             	shl    ebx,0x8
100021ae:	81 e3 00 1f 00 00    	and    ebx,0x1f00
100021b4:	09 c3                	or     ebx,eax
100021b6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
100021ba:	43                   	inc    ebx
100021bb:	40                   	inc    eax
100021bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100021c0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
100021c4:	40                   	inc    eax
100021c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100021c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100021cd:	c1 f8 04             	sar    eax,0x4
100021d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100021d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100021d8:	c1 f8 04             	sar    eax,0x4
100021db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100021df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100021e3:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
100021e8:	99                   	cdq    
100021e9:	f7 fe                	idiv   esi
100021eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100021ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100021f3:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
100021f8:	99                   	cdq    
100021f9:	f7 fe                	idiv   esi
100021fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100021ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002203:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002209:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
1000220d:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002211:	39 d6                	cmp    esi,edx
10002213:	7d 0b                	jge    10002220 <ssfn_render+0xf59>
10002215:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
10002219:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
1000221d:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002220:	83 c1 04             	add    ecx,0x4
10002223:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000222e:	8d 04 19             	lea    eax,[ecx+ebx*1]
10002231:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002235:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
10002239:	72 35                	jb     10002270 <ssfn_render+0xfa9>
1000223b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000223f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10002243:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002248:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
1000224c:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
10002250:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10002257:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
1000225b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10002263:	31 d2                	xor    edx,edx
10002265:	31 ff                	xor    edi,edi
10002267:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
1000226b:	e9 cc 00 00 00       	jmp    1000233c <ssfn_render+0x1075>
10002270:	8a 11                	mov    dl,BYTE PTR [ecx]
10002272:	89 d0                	mov    eax,edx
10002274:	83 e0 7f             	and    eax,0x7f
10002277:	84 d2                	test   dl,dl
10002279:	8d 78 01             	lea    edi,[eax+0x1]
1000227c:	78 09                	js     10002287 <ssfn_render+0xfc0>
1000227e:	41                   	inc    ecx
1000227f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002283:	89 ca                	mov    edx,ecx
10002285:	eb 3d                	jmp    100022c4 <ssfn_render+0xffd>
10002287:	48                   	dec    eax
10002288:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000228f:	83 f8 fe             	cmp    eax,0xfffffffe
10002292:	74 16                	je     100022aa <ssfn_render+0xfe3>
10002294:	8d 5a 01             	lea    ebx,[edx+0x1]
10002297:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
1000229e:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
100022a1:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
100022a8:	eb dd                	jmp    10002287 <ssfn_render+0xfc0>
100022aa:	83 c1 02             	add    ecx,0x2
100022ad:	eb 86                	jmp    10002235 <ssfn_render+0xf6e>
100022af:	42                   	inc    edx
100022b0:	8d 73 01             	lea    esi,[ebx+0x1]
100022b3:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
100022ba:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
100022bd:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
100022c4:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
100022c8:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
100022cf:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
100022d4:	75 d9                	jne    100022af <ssfn_render+0xfe8>
100022d6:	01 f9                	add    ecx,edi
100022d8:	e9 58 ff ff ff       	jmp    10002235 <ssfn_render+0xf6e>
100022dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100022e1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100022e5:	99                   	cdq    
100022e6:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100022ea:	0f af c8             	imul   ecx,eax
100022ed:	31 c0                	xor    eax,eax
100022ef:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100022f4:	74 0e                	je     10002304 <ssfn_render+0x103d>
100022f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100022fa:	bb 04 00 00 00       	mov    ebx,0x4
100022ff:	29 f8                	sub    eax,edi
10002301:	99                   	cdq    
10002302:	f7 fb                	idiv   ebx
10002304:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002308:	31 db                	xor    ebx,ebx
1000230a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000230e:	31 f6                	xor    esi,esi
10002310:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
10002317:	01 c1                	add    ecx,eax
10002319:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
1000231d:	7f 30                	jg     1000234f <ssfn_render+0x1088>
1000231f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002323:	85 c0                	test   eax,eax
10002325:	79 02                	jns    10002329 <ssfn_render+0x1062>
10002327:	31 c0                	xor    eax,eax
10002329:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000232d:	47                   	inc    edi
1000232e:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
10002332:	b2 01                	mov    dl,0x1
10002334:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
10002338:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
1000233c:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002340:	7c 9b                	jl     100022dd <ssfn_render+0x1016>
10002342:	84 d2                	test   dl,dl
10002344:	74 3b                	je     10002381 <ssfn_render+0x10ba>
10002346:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
1000234d:	eb 32                	jmp    10002381 <ssfn_render+0x10ba>
1000234f:	89 d8                	mov    eax,ebx
10002351:	99                   	cdq    
10002352:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002356:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
1000235d:	3c ff                	cmp    al,0xff
1000235f:	74 0e                	je     1000236f <ssfn_render+0x10a8>
10002361:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10002365:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
1000236b:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
1000236f:	46                   	inc    esi
10002370:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
10002374:	eb a3                	jmp    10002319 <ssfn_render+0x1052>
10002376:	84 c0                	test   al,al
10002378:	74 07                	je     10002381 <ssfn_render+0x10ba>
1000237a:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
10002381:	b3 fe                	mov    bl,0xfe
10002383:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
10002387:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
1000238b:	e9 9f f5 ff ff       	jmp    1000192f <ssfn_render+0x668>
10002390:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002396:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10002399:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
1000239c:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
1000239f:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100023a5:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
100023a9:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
100023ad:	89 f0                	mov    eax,esi
100023af:	89 d9                	mov    ecx,ebx
100023b1:	43                   	inc    ebx
100023b2:	39 de                	cmp    esi,ebx
100023b4:	7e 08                	jle    100023be <ssfn_render+0x10f7>
100023b6:	48                   	dec    eax
100023b7:	29 c8                	sub    eax,ecx
100023b9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
100023bc:	eb 04                	jmp    100023c2 <ssfn_render+0x10fb>
100023be:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
100023c2:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
100023ca:	0f 84 c9 0c 00 00    	je     10003099 <ssfn_render+0x1dd2>
100023d0:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
100023d6:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100023dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100023e0:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100023e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100023e7:	0f ba e0 0c          	bt     eax,0xc
100023eb:	72 22                	jb     1000240f <ssfn_render+0x1148>
100023ed:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
100023f0:	83 e0 0f             	and    eax,0xf
100023f3:	3c 03                	cmp    al,0x3
100023f5:	74 18                	je     1000240f <ssfn_render+0x1148>
100023f7:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
100023fb:	84 c9                	test   cl,cl
100023fd:	74 10                	je     1000240f <ssfn_render+0x1148>
100023ff:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
10002403:	0f af d7             	imul   edx,edi
10002406:	89 d0                	mov    eax,edx
10002408:	99                   	cdq    
10002409:	f7 f9                	idiv   ecx
1000240b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000240f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002413:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
10002419:	7d 06                	jge    10002421 <ssfn_render+0x115a>
1000241b:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
10002421:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10002427:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
1000242b:	0f b7 13             	movzx  edx,WORD PTR [ebx]
1000242e:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
10002433:	89 d0                	mov    eax,edx
10002435:	99                   	cdq    
10002436:	f7 f9                	idiv   ecx
10002438:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
1000243c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002440:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
10002443:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
10002447:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
1000244b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000244f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
10002454:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002458:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000245d:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002461:	99                   	cdq    
10002462:	f7 f9                	idiv   ecx
10002464:	31 d2                	xor    edx,edx
10002466:	83 ff 10             	cmp    edi,0x10
10002469:	0f 9f c2             	setg   dl
1000246c:	42                   	inc    edx
1000246d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10002471:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
10002475:	7d 08                	jge    1000247f <ssfn_render+0x11b8>
10002477:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000247b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
1000247f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
10002483:	39 c2                	cmp    edx,eax
10002485:	7d 04                	jge    1000248b <ssfn_render+0x11c4>
10002487:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000248b:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10002490:	74 4c                	je     100024de <ssfn_render+0x1217>
10002492:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002496:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000249b:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000249f:	99                   	cdq    
100024a0:	f7 f9                	idiv   ecx
100024a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100024a6:	81 e2 00 08 00 00    	and    edx,0x800
100024ac:	74 04                	je     100024b2 <ssfn_render+0x11eb>
100024ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100024b2:	01 d0                	add    eax,edx
100024b4:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100024ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100024be:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
100024c2:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
100024c6:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100024cb:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100024cf:	99                   	cdq    
100024d0:	f7 f9                	idiv   ecx
100024d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100024d6:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
100024dc:	eb 22                	jmp    10002500 <ssfn_render+0x1239>
100024de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100024e2:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
100024ec:	d1 f8                	sar    eax,1
100024ee:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
100024f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100024fa:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
10002500:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002507:	8b 18                	mov    ebx,DWORD PTR [eax]
10002509:	85 db                	test   ebx,ebx
1000250b:	0f 84 2e 09 00 00    	je     10002e3f <ssfn_render+0x1b78>
10002511:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
10002515:	89 d1                	mov    ecx,edx
10002517:	89 d0                	mov    eax,edx
10002519:	66 c1 f9 0b          	sar    cx,0xb
1000251d:	c1 f8 1f             	sar    eax,0x1f
10002520:	31 c2                	xor    edx,eax
10002522:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
10002526:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
1000252a:	88 c8                	mov    al,cl
1000252c:	83 e0 10             	and    eax,0x10
1000252f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
10002533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002537:	83 c0 40             	add    eax,0x40
1000253a:	c1 f8 06             	sar    eax,0x6
1000253d:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
10002544:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002548:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
1000254c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
10002550:	7d 08                	jge    1000255a <ssfn_render+0x1293>
10002552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002556:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
1000255a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000255d:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
10002565:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002569:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10002571:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
10002575:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000257a:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000257e:	99                   	cdq    
1000257f:	f7 f9                	idiv   ecx
10002581:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10002585:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000258c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000258f:	0f b6 f4             	movzx  esi,ah
10002592:	89 c2                	mov    edx,eax
10002594:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
10002598:	c1 ea 10             	shr    edx,0x10
1000259b:	0f b6 fa             	movzx  edi,dl
1000259e:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
100025a2:	0f b6 f8             	movzx  edi,al
100025a5:	c1 e8 18             	shr    eax,0x18
100025a8:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
100025ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100025b0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025b7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
100025ba:	0f b6 fc             	movzx  edi,ah
100025bd:	89 c2                	mov    edx,eax
100025bf:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
100025c6:	c1 ea 10             	shr    edx,0x10
100025c9:	0f b6 c0             	movzx  eax,al
100025cc:	0f b6 f2             	movzx  esi,dl
100025cf:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100025d6:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100025dd:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
100025e1:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025e8:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100025ef:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
100025f3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
100025f7:	0f af c2             	imul   eax,edx
100025fa:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
100025fe:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002602:	8d 04 90             	lea    eax,[eax+edx*4]
10002605:	01 d8                	add    eax,ebx
10002607:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
1000260e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10002612:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
10002619:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
1000261e:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
10002625:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10002629:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
1000262d:	0f 8d e2 04 00 00    	jge    10002b15 <ssfn_render+0x184e>
10002633:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000263a:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002641:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002645:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
10002649:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
1000264d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002651:	39 d0                	cmp    eax,edx
10002653:	0f 8d bc 04 00 00    	jge    10002b15 <ssfn_render+0x184e>
10002659:	85 c0                	test   eax,eax
1000265b:	0f 88 94 04 00 00    	js     10002af5 <ssfn_render+0x182e>
10002661:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002667:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
1000266b:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000266f:	c1 e1 08             	shl    ecx,0x8
10002672:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
1000267a:	89 c8                	mov    eax,ecx
1000267c:	0f af c3             	imul   eax,ebx
1000267f:	99                   	cdq    
10002680:	f7 fe                	idiv   esi
10002682:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002689:	c1 f8 08             	sar    eax,0x8
1000268c:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
10002693:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002699:	0f af c3             	imul   eax,ebx
1000269c:	99                   	cdq    
1000269d:	f7 fe                	idiv   esi
1000269f:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
100026a3:	c1 f8 08             	sar    eax,0x8
100026a6:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
100026ad:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
100026b1:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
100026b8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
100026bf:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026c6:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
100026ca:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
100026ce:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100026d2:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100026d6:	0f 8d 19 04 00 00    	jge    10002af5 <ssfn_render+0x182e>
100026dc:	85 c0                	test   eax,eax
100026de:	0f 88 ff 03 00 00    	js     10002ae3 <ssfn_render+0x181c>
100026e4:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026eb:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
100026ef:	75 42                	jne    10002733 <ssfn_render+0x146c>
100026f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100026f5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100026fc:	b9 10 00 00 00       	mov    ecx,0x10
10002701:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10002704:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
1000270b:	89 c2                	mov    edx,eax
1000270d:	0f b6 fc             	movzx  edi,ah
10002710:	d3 ea                	shr    edx,cl
10002712:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10002719:	0f b6 f2             	movzx  esi,dl
1000271c:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002720:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
10002727:	d3 e8                	shr    eax,cl
10002729:	0f b6 c0             	movzx  eax,al
1000272c:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
10002733:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002739:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
1000273d:	0f b7 18             	movzx  ebx,WORD PTR [eax]
10002740:	c1 e1 08             	shl    ecx,0x8
10002743:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
10002747:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
1000274f:	89 c8                	mov    eax,ecx
10002751:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
10002759:	0f af c3             	imul   eax,ebx
1000275c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
10002764:	99                   	cdq    
10002765:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
1000276d:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002771:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10002779:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
10002780:	c1 f8 08             	sar    eax,0x8
10002783:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
1000278a:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002790:	0f af c3             	imul   eax,ebx
10002793:	99                   	cdq    
10002794:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002798:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
1000279c:	c1 f8 08             	sar    eax,0x8
1000279f:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
100027a6:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
100027ad:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100027b1:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
100027b5:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
100027b9:	0f 8d 3b 02 00 00    	jge    100029fa <ssfn_render+0x1733>
100027bf:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
100027c3:	c1 fa 08             	sar    edx,0x8
100027c6:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
100027cd:	75 25                	jne    100027f4 <ssfn_render+0x152d>
100027cf:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
100027d4:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
100027db:	b8 00 01 00 00       	mov    eax,0x100
100027e0:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
100027e8:	29 c8                	sub    eax,ecx
100027ea:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100027ee:	39 c7                	cmp    edi,eax
100027f0:	7e 1c                	jle    1000280e <ssfn_render+0x1547>
100027f2:	eb 16                	jmp    1000280a <ssfn_render+0x1543>
100027f4:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
100027fc:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
10002803:	75 09                	jne    1000280e <ssfn_render+0x1547>
10002805:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
1000280a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000280e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
10002812:	0f b7 00             	movzx  eax,WORD PTR [eax]
10002815:	0f af c2             	imul   eax,edx
10002818:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
1000281f:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
10002824:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10002829:	c1 f8 08             	sar    eax,0x8
1000282c:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
10002833:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
1000283a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000283e:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10002842:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
10002846:	0f 8d a1 01 00 00    	jge    100029ed <ssfn_render+0x1726>
1000284c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002850:	c1 f8 08             	sar    eax,0x8
10002853:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
1000285a:	75 3b                	jne    10002897 <ssfn_render+0x15d0>
1000285c:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
10002861:	ba 00 01 00 00       	mov    edx,0x100
10002866:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
1000286e:	29 ca                	sub    edx,ecx
10002870:	89 f1                	mov    ecx,esi
10002872:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
10002879:	39 d1                	cmp    ecx,edx
1000287b:	7c 0e                	jl     1000288b <ssfn_render+0x15c4>
1000287d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002881:	81 fa 00 01 00 00    	cmp    edx,0x100
10002887:	74 22                	je     100028ab <ssfn_render+0x15e4>
10002889:	89 d1                	mov    ecx,edx
1000288b:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
10002890:	89 cf                	mov    edi,ecx
10002892:	c1 ff 08             	sar    edi,0x8
10002895:	eb 14                	jmp    100028ab <ssfn_render+0x15e4>
10002897:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
1000289e:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
100028a5:	74 04                	je     100028ab <ssfn_render+0x15e4>
100028a7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100028ab:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
100028af:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
100028b3:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
100028ba:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
100028bf:	81 fa ff 00 00 00    	cmp    edx,0xff
100028c5:	75 37                	jne    100028fe <ssfn_render+0x1637>
100028c7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
100028ce:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
100028d6:	0f af c7             	imul   eax,edi
100028d9:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
100028dd:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
100028e4:	0f af c7             	imul   eax,edi
100028e7:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
100028eb:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
100028f2:	0f af c7             	imul   eax,edi
100028f5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
100028f9:	e9 e2 00 00 00       	jmp    100029e0 <ssfn_render+0x1719>
100028fe:	81 fa fe 00 00 00    	cmp    edx,0xfe
10002904:	74 2d                	je     10002933 <ssfn_render+0x166c>
10002906:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002909:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
1000290c:	85 c9                	test   ecx,ecx
1000290e:	74 23                	je     10002933 <ssfn_render+0x166c>
10002910:	01 c8                	add    eax,ecx
10002912:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
10002915:	89 d9                	mov    ecx,ebx
10002917:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
1000291e:	c1 e9 10             	shr    ecx,0x10
10002921:	0f b6 f7             	movzx  esi,bh
10002924:	0f b6 c1             	movzx  eax,cl
10002927:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
1000292b:	0f b6 c3             	movzx  eax,bl
1000292e:	c1 eb 18             	shr    ebx,0x18
10002931:	eb 14                	jmp    10002947 <ssfn_render+0x1680>
10002933:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002937:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000293b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
1000293f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
10002943:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002947:	81 fb ff 00 00 00    	cmp    ebx,0xff
1000294d:	75 25                	jne    10002974 <ssfn_render+0x16ad>
1000294f:	0f af c7             	imul   eax,edi
10002952:	0f af f7             	imul   esi,edi
10002955:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002959:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
1000295d:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
10002963:	0f af cf             	imul   ecx,edi
10002966:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
1000296a:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
1000296e:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
10002972:	eb 6c                	jmp    100029e0 <ssfn_render+0x1719>
10002974:	0f af f3             	imul   esi,ebx
10002977:	0f af c3             	imul   eax,ebx
1000297a:	b9 ff 00 00 00       	mov    ecx,0xff
1000297f:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
10002986:	29 d9                	sub    ecx,ebx
10002988:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
1000298c:	0f af d1             	imul   edx,ecx
1000298f:	b9 ff 00 00 00       	mov    ecx,0xff
10002994:	01 d0                	add    eax,edx
10002996:	0f af c7             	imul   eax,edi
10002999:	99                   	cdq    
1000299a:	f7 f9                	idiv   ecx
1000299c:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
100029a0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100029a4:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
100029ac:	01 f0                	add    eax,esi
100029ae:	89 ce                	mov    esi,ecx
100029b0:	0f af c7             	imul   eax,edi
100029b3:	99                   	cdq    
100029b4:	f7 f9                	idiv   ecx
100029b6:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
100029ba:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
100029be:	0f af cb             	imul   ecx,ebx
100029c1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100029c5:	0f af df             	imul   ebx,edi
100029c8:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
100029d0:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
100029d4:	01 c8                	add    eax,ecx
100029d6:	0f af c7             	imul   eax,edi
100029d9:	99                   	cdq    
100029da:	f7 fe                	idiv   esi
100029dc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
100029e0:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
100029e8:	e9 51 fe ff ff       	jmp    1000283e <ssfn_render+0x1577>
100029ed:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
100029f5:	e9 b7 fd ff ff       	jmp    100027b1 <ssfn_render+0x14ea>
100029fa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
100029ff:	74 30                	je     10002a31 <ssfn_render+0x176a>
10002a01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002a05:	31 d2                	xor    edx,edx
10002a07:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a0b:	31 d2                	xor    edx,edx
10002a0d:	89 c1                	mov    ecx,eax
10002a0f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002a13:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a17:	31 d2                	xor    edx,edx
10002a19:	89 c6                	mov    esi,eax
10002a1b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002a1f:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a23:	31 d2                	xor    edx,edx
10002a25:	89 c3                	mov    ebx,eax
10002a27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002a2b:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a2f:	eb 1c                	jmp    10002a4d <ssfn_render+0x1786>
10002a31:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002a35:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002a39:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002a3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002a41:	c1 e9 08             	shr    ecx,0x8
10002a44:	c1 ee 08             	shr    esi,0x8
10002a47:	c1 eb 08             	shr    ebx,0x8
10002a4a:	c1 e8 08             	shr    eax,0x8
10002a4d:	83 f8 0f             	cmp    eax,0xf
10002a50:	0f 86 8d 00 00 00    	jbe    10002ae3 <ssfn_render+0x181c>
10002a56:	89 ca                	mov    edx,ecx
10002a58:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002a5e:	76 05                	jbe    10002a65 <ssfn_render+0x179e>
10002a60:	ba ff 00 00 00       	mov    edx,0xff
10002a65:	b9 10 00 00 00       	mov    ecx,0x10
10002a6a:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002a71:	d3 e2                	shl    edx,cl
10002a73:	3d ff 00 00 00       	cmp    eax,0xff
10002a78:	89 d1                	mov    ecx,edx
10002a7a:	76 05                	jbe    10002a81 <ssfn_render+0x17ba>
10002a7c:	b8 ff 00 00 00       	mov    eax,0xff
10002a81:	c1 e0 18             	shl    eax,0x18
10002a84:	09 c8                	or     eax,ecx
10002a86:	81 fe ff 00 00 00    	cmp    esi,0xff
10002a8c:	76 05                	jbe    10002a93 <ssfn_render+0x17cc>
10002a8e:	be ff 00 00 00       	mov    esi,0xff
10002a93:	c1 e6 08             	shl    esi,0x8
10002a96:	09 f0                	or     eax,esi
10002a98:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002a9e:	76 05                	jbe    10002aa5 <ssfn_render+0x17de>
10002aa0:	bb ff 00 00 00       	mov    ebx,0xff
10002aa5:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002aa9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002aad:	d3 e3                	shl    ebx,cl
10002aaf:	09 c3                	or     ebx,eax
10002ab1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002ab8:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002abb:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002abf:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002ac3:	75 1e                	jne    10002ae3 <ssfn_render+0x181c>
10002ac5:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002acc:	7e 07                	jle    10002ad5 <ssfn_render+0x180e>
10002ace:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002ad5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002ad9:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002add:	7d 04                	jge    10002ae3 <ssfn_render+0x181c>
10002adf:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002ae3:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002aeb:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002aef:	0f 85 ca fb ff ff    	jne    100026bf <ssfn_render+0x13f8>
10002af5:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002afc:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002b00:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002b04:	25 fc ff 00 00       	and    eax,0xfffc
10002b09:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002b10:	e9 10 fb ff ff       	jmp    10002625 <ssfn_render+0x135e>
10002b15:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002b1c:	0f 84 90 01 00 00    	je     10002cb2 <ssfn_render+0x19eb>
10002b22:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002b2a:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002b35:	40                   	inc    eax
10002b36:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002b3a:	29 c7                	sub    edi,eax
10002b3c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002b40:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002b44:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002b48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002b4c:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002b50:	7e 09                	jle    10002b5b <ssfn_render+0x1894>
10002b52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002b56:	40                   	inc    eax
10002b57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002b5b:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002b62:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002b69:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002b6d:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002b71:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002b75:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002b79:	0f af c2             	imul   eax,edx
10002b7c:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002b80:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002b84:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002b88:	03 07                	add    eax,DWORD PTR [edi]
10002b8a:	89 c7                	mov    edi,eax
10002b8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002b90:	c1 e0 18             	shl    eax,0x18
10002b93:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002b97:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002b9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002b9f:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002ba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002ba8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002bac:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002bb0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002bb4:	0f 8e f8 00 00 00    	jle    10002cb2 <ssfn_render+0x19eb>
10002bba:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bc1:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002bc8:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002bcc:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002bd0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002bd4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002bd8:	39 d0                	cmp    eax,edx
10002bda:	0f 8d d2 00 00 00    	jge    10002cb2 <ssfn_render+0x19eb>
10002be0:	31 db                	xor    ebx,ebx
10002be2:	85 c0                	test   eax,eax
10002be4:	79 23                	jns    10002c09 <ssfn_render+0x1942>
10002be6:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bed:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002bf1:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002bf5:	25 fc ff 00 00       	and    eax,0xfffc
10002bfa:	01 c7                	add    edi,eax
10002bfc:	eb aa                	jmp    10002ba8 <ssfn_render+0x18e1>
10002bfe:	85 c0                	test   eax,eax
10002c00:	79 20                	jns    10002c22 <ssfn_render+0x195b>
10002c02:	43                   	inc    ebx
10002c03:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002c07:	7c dd                	jl     10002be6 <ssfn_render+0x191f>
10002c09:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c10:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002c14:	01 d8                	add    eax,ebx
10002c16:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002c1a:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002c1e:	7c de                	jl     10002bfe <ssfn_render+0x1937>
10002c20:	eb c4                	jmp    10002be6 <ssfn_render+0x191f>
10002c22:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002c26:	7e 06                	jle    10002c2e <ssfn_render+0x1967>
10002c28:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002c2c:	7f d4                	jg     10002c02 <ssfn_render+0x193b>
10002c2e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002c31:	b8 10 00 00 00       	mov    eax,0x10
10002c36:	0f b6 f6             	movzx  esi,dh
10002c39:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002c3d:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002c41:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002c45:	89 d0                	mov    eax,edx
10002c47:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002c4b:	d3 e8                	shr    eax,cl
10002c4d:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002c51:	0f b6 c0             	movzx  eax,al
10002c54:	d3 ea                	shr    edx,cl
10002c56:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002c5a:	0f b6 f2             	movzx  esi,dl
10002c5d:	29 c1                	sub    ecx,eax
10002c5f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002c63:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002c68:	29 f2                	sub    edx,esi
10002c6a:	c1 f9 08             	sar    ecx,0x8
10002c6d:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002c72:	01 c8                	add    eax,ecx
10002c74:	c1 fa 08             	sar    edx,0x8
10002c77:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002c7b:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002c7f:	d3 e0                	shl    eax,cl
10002c81:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002c85:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002c89:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002c8d:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002c91:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002c96:	d3 e6                	shl    esi,cl
10002c98:	c1 fa 08             	sar    edx,0x8
10002c9b:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002c9f:	c1 e2 08             	shl    edx,0x8
10002ca2:	09 d0                	or     eax,edx
10002ca4:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002ca8:	09 c6                	or     esi,eax
10002caa:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002cad:	e9 50 ff ff ff       	jmp    10002c02 <ssfn_render+0x193b>
10002cb2:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002cb9:	0f 84 80 01 00 00    	je     10002e3f <ssfn_render+0x1b78>
10002cbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002cc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002cc7:	d1 fa                	sar    edx,1
10002cc9:	40                   	inc    eax
10002cca:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002cce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002cd2:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002cd6:	7e 09                	jle    10002ce1 <ssfn_render+0x1a1a>
10002cd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002cdc:	40                   	inc    eax
10002cdd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002ce1:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002ce8:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002cef:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002cf3:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002cf7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002cfb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002cff:	01 d0                	add    eax,edx
10002d01:	0f af c1             	imul   eax,ecx
10002d04:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002d08:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002d0c:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002d10:	03 03                	add    eax,DWORD PTR [ebx]
10002d12:	89 c7                	mov    edi,eax
10002d14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002d18:	c1 e0 18             	shl    eax,0x18
10002d1b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002d1f:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002d27:	01 d0                	add    eax,edx
10002d29:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002d2d:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002d32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002d36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002d3a:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002d3e:	0f 8e fb 00 00 00    	jle    10002e3f <ssfn_render+0x1b78>
10002d44:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d4b:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002d4f:	01 d8                	add    eax,ebx
10002d51:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002d58:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002d5c:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002d60:	39 d0                	cmp    eax,edx
10002d62:	0f 8d d7 00 00 00    	jge    10002e3f <ssfn_render+0x1b78>
10002d68:	31 f6                	xor    esi,esi
10002d6a:	85 c0                	test   eax,eax
10002d6c:	0f 89 ad 00 00 00    	jns    10002e1f <ssfn_render+0x1b58>
10002d72:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d79:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002d7d:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002d81:	25 fc ff 00 00       	and    eax,0xfffc
10002d86:	01 c7                	add    edi,eax
10002d88:	eb ac                	jmp    10002d36 <ssfn_render+0x1a6f>
10002d8a:	85 c0                	test   eax,eax
10002d8c:	0f 88 82 00 00 00    	js     10002e14 <ssfn_render+0x1b4d>
10002d92:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002d95:	b8 10 00 00 00       	mov    eax,0x10
10002d9a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002d9e:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002da2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002da6:	89 d8                	mov    eax,ebx
10002da8:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002dac:	d3 e8                	shr    eax,cl
10002dae:	0f b6 cf             	movzx  ecx,bh
10002db1:	0f b6 c0             	movzx  eax,al
10002db4:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002db8:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002dbc:	d3 eb                	shr    ebx,cl
10002dbe:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002dc2:	0f b6 db             	movzx  ebx,bl
10002dc5:	29 c1                	sub    ecx,eax
10002dc7:	29 da                	sub    edx,ebx
10002dc9:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002dce:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002dd3:	c1 f9 08             	sar    ecx,0x8
10002dd6:	c1 fa 08             	sar    edx,0x8
10002dd9:	01 c8                	add    eax,ecx
10002ddb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002ddf:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002de3:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002de7:	d3 e0                	shl    eax,cl
10002de9:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002ded:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002df1:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002df6:	c1 fa 08             	sar    edx,0x8
10002df9:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10002dfd:	c1 e2 08             	shl    edx,0x8
10002e00:	09 d0                	or     eax,edx
10002e02:	8d 14 19             	lea    edx,[ecx+ebx*1]
10002e05:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10002e09:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e0d:	d3 e2                	shl    edx,cl
10002e0f:	09 c2                	or     edx,eax
10002e11:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10002e14:	46                   	inc    esi
10002e15:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002e19:	0f 8c 53 ff ff ff    	jl     10002d72 <ssfn_render+0x1aab>
10002e1f:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e26:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002e2a:	01 f0                	add    eax,esi
10002e2c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002e30:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002e34:	0f 8c 50 ff ff ff    	jl     10002d8a <ssfn_render+0x1ac3>
10002e3a:	e9 33 ff ff ff       	jmp    10002d72 <ssfn_render+0x1aab>
10002e3f:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10002e46:	74 04                	je     10002e4c <ssfn_render+0x1b85>
10002e48:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10002e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002e50:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002e54:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10002e5a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e61:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10002e65:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002e6c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002e6f:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002e73:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002e79:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10002e7d:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002e82:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002e86:	99                   	cdq    
10002e87:	f7 f9                	idiv   ecx
10002e89:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10002e8d:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002e93:	25 80 00 00 00       	and    eax,0x80
10002e98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002e9c:	0f 85 f7 01 00 00    	jne    10003099 <ssfn_render+0x1dd2>
10002ea2:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002ea5:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10002ea9:	0f 84 ea 01 00 00    	je     10003099 <ssfn_render+0x1dd2>
10002eaf:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
10002eb6:	83 ec 0c             	sub    esp,0xc
10002eb9:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
10002ec0:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10002ec7:	51                   	push   ecx
10002ec8:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
10002ecf:	e8 53 d9 ff ff       	call   10000827 <_ssfn_c>
10002ed4:	83 c4 10             	add    esp,0x10
10002ed7:	85 c0                	test   eax,eax
10002ed9:	0f 84 ba 01 00 00    	je     10003099 <ssfn_render+0x1dd2>
10002edf:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
10002ee7:	0f 86 ac 01 00 00    	jbe    10003099 <ssfn_render+0x1dd2>
10002eed:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002ef3:	8d 48 06             	lea    ecx,[eax+0x6]
10002ef6:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002efc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10002f00:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10002f04:	0f 8e 8f 01 00 00    	jle    10003099 <ssfn_render+0x1dd2>
10002f0a:	8a 19                	mov    bl,BYTE PTR [ecx]
10002f0c:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10002f10:	8a 18                	mov    bl,BYTE PTR [eax]
10002f12:	83 e3 40             	and    ebx,0x40
10002f15:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10002f1a:	75 14                	jne    10002f30 <ssfn_render+0x1c69>
10002f1c:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10002f20:	75 0e                	jne    10002f30 <ssfn_render+0x1c69>
10002f22:	80 fb 01             	cmp    bl,0x1
10002f25:	19 c0                	sbb    eax,eax
10002f27:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10002f2b:	e9 60 01 00 00       	jmp    10003090 <ssfn_render+0x1dc9>
10002f30:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10002f34:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10002f38:	c1 e6 10             	shl    esi,0x10
10002f3b:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10002f3f:	84 db                	test   bl,bl
10002f41:	74 08                	je     10002f4b <ssfn_render+0x1c84>
10002f43:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10002f46:	83 c1 06             	add    ecx,0x6
10002f49:	eb 0c                	jmp    10002f57 <ssfn_render+0x1c90>
10002f4b:	c1 e2 08             	shl    edx,0x8
10002f4e:	83 c1 05             	add    ecx,0x5
10002f51:	89 d0                	mov    eax,edx
10002f53:	09 f0                	or     eax,esi
10002f55:	09 c7                	or     edi,eax
10002f57:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002f5e:	01 f8                	add    eax,edi
10002f60:	8a 10                	mov    dl,BYTE PTR [eax]
10002f62:	88 d3                	mov    bl,dl
10002f64:	83 e3 e0             	and    ebx,0xffffffe0
10002f67:	80 fb c0             	cmp    bl,0xc0
10002f6a:	0f 85 20 01 00 00    	jne    10003090 <ssfn_render+0x1dc9>
10002f70:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
10002f74:	c1 e2 08             	shl    edx,0x8
10002f77:	83 c0 02             	add    eax,0x2
10002f7a:	81 e2 00 1f 00 00    	and    edx,0x1f00
10002f80:	09 da                	or     edx,ebx
10002f82:	8d 72 01             	lea    esi,[edx+0x1]
10002f85:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10002f89:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
10002f90:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
10002f94:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10002f99:	0f 84 f1 00 00 00    	je     10003090 <ssfn_render+0x1dc9>
10002f9f:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10002fa3:	0f b7 10             	movzx  edx,WORD PTR [eax]
10002fa6:	c1 e3 10             	shl    ebx,0x10
10002fa9:	81 e3 00 00 0f 00    	and    ebx,0xf0000
10002faf:	09 d3                	or     ebx,edx
10002fb1:	39 de                	cmp    esi,ebx
10002fb3:	0f 82 cf 00 00 00    	jb     10003088 <ssfn_render+0x1dc1>
10002fb9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
10002fbc:	89 d7                	mov    edi,edx
10002fbe:	c1 e7 10             	shl    edi,0x10
10002fc1:	81 e7 00 00 0f 00    	and    edi,0xf0000
10002fc7:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10002fcb:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
10002fcf:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
10002fd3:	39 fe                	cmp    esi,edi
10002fd5:	0f 87 ad 00 00 00    	ja     10003088 <ssfn_render+0x1dc1>
10002fdb:	29 de                	sub    esi,ebx
10002fdd:	c0 ea 04             	shr    dl,0x4
10002fe0:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
10002fe7:	0f b6 d2             	movzx  edx,dl
10002fea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002fee:	89 d3                	mov    ebx,edx
10002ff0:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
10002ff4:	c1 e3 10             	shl    ebx,0x10
10002ff7:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002ffa:	09 da                	or     edx,ebx
10002ffc:	c0 e8 04             	shr    al,0x4
10002fff:	c1 e0 18             	shl    eax,0x18
10003002:	09 c2                	or     edx,eax
10003004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003008:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
1000300b:	01 c2                	add    edx,eax
1000300d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003010:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
10003014:	39 d7                	cmp    edi,edx
10003016:	76 78                	jbe    10003090 <ssfn_render+0x1dc9>
10003018:	8a 1a                	mov    bl,BYTE PTR [edx]
1000301a:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
10003021:	89 de                	mov    esi,ebx
10003023:	83 e6 7f             	and    esi,0x7f
10003026:	39 c6                	cmp    esi,eax
10003028:	73 1d                	jae    10003047 <ssfn_render+0x1d80>
1000302a:	48                   	dec    eax
1000302b:	bb 02 00 00 00       	mov    ebx,0x2
10003030:	29 f0                	sub    eax,esi
10003032:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
10003039:	0f b6 02             	movzx  eax,BYTE PTR [edx]
1000303c:	84 c0                	test   al,al
1000303e:	78 03                	js     10003043 <ssfn_render+0x1d7c>
10003040:	8d 58 02             	lea    ebx,[eax+0x2]
10003043:	01 da                	add    edx,ebx
10003045:	eb cd                	jmp    10003014 <ssfn_render+0x1d4d>
10003047:	be 01 00 00 00       	mov    esi,0x1
1000304c:	84 db                	test   bl,bl
1000304e:	78 03                	js     10003053 <ssfn_render+0x1d8c>
10003050:	8d 70 01             	lea    esi,[eax+0x1]
10003053:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
10003057:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000305b:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10003060:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
10003064:	99                   	cdq    
10003065:	f7 fb                	idiv   ebx
10003067:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
1000306c:	74 0d                	je     1000307b <ssfn_render+0x1db4>
1000306e:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10003075:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10003079:	eb 15                	jmp    10003090 <ssfn_render+0x1dc9>
1000307b:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10003082:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
10003086:	eb 08                	jmp    10003090 <ssfn_render+0x1dc9>
10003088:	83 c0 08             	add    eax,0x8
1000308b:	e9 00 ff ff ff       	jmp    10002f90 <ssfn_render+0x1cc9>
10003090:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
10003094:	e9 5d fe ff ff       	jmp    10002ef6 <ssfn_render+0x1c2f>
10003099:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
100030a0:	eb 73                	jmp    10003115 <ssfn_render+0x1e4e>
100030a2:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100030ad:	e9 50 e4 ff ff       	jmp    10001502 <ssfn_render+0x23b>
100030b2:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100030b9:	57                   	push   edi
100030ba:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100030c1:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100030c8:	e8 5a d7 ff ff       	call   10000827 <_ssfn_c>
100030cd:	5f                   	pop    edi
100030ce:	85 c0                	test   eax,eax
100030d0:	0f 84 25 e4 ff ff    	je     100014fb <ssfn_render+0x234>
100030d6:	e9 a2 e4 ff ff       	jmp    1000157d <ssfn_render+0x2b6>
100030db:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100030de:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
100030e2:	75 0c                	jne    100030f0 <ssfn_render+0x1e29>
100030e4:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100030eb:	e9 3b e4 ff ff       	jmp    1000152b <ssfn_render+0x264>
100030f0:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100030f7:	57                   	push   edi
100030f8:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100030ff:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10003106:	e8 1c d7 ff ff       	call   10000827 <_ssfn_c>
1000310b:	59                   	pop    ecx
1000310c:	85 c0                	test   eax,eax
1000310e:	74 d4                	je     100030e4 <ssfn_render+0x1e1d>
10003110:	e9 68 e4 ff ff       	jmp    1000157d <ssfn_render+0x2b6>
10003115:	81 c4 dc 05 01 00    	add    esp,0x105dc
1000311b:	89 c8                	mov    eax,ecx
1000311d:	5b                   	pop    ebx
1000311e:	5e                   	pop    esi
1000311f:	5f                   	pop    edi
10003120:	5d                   	pop    ebp
10003121:	c3                   	ret    

10003122 <ssfn_bbox>:
10003122:	55                   	push   ebp
10003123:	57                   	push   edi
10003124:	56                   	push   esi
10003125:	53                   	push   ebx
10003126:	83 ec 3c             	sub    esp,0x3c
10003129:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
1000312e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
10003132:	0f 94 c0             	sete   al
10003135:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
1000313a:	0f 94 c2             	sete   dl
1000313d:	09 d0                	or     eax,edx
1000313f:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
10003144:	0f 94 c2             	sete   dl
10003147:	09 d0                	or     eax,edx
10003149:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
1000314e:	0f 94 c2             	sete   dl
10003151:	09 d0                	or     eax,edx
10003153:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003158:	0f 94 c2             	sete   dl
1000315b:	08 d0                	or     al,dl
1000315d:	0f 85 7c 01 00 00    	jne    100032df <ssfn_bbox+0x1bd>
10003163:	85 db                	test   ebx,ebx
10003165:	0f 84 74 01 00 00    	je     100032df <ssfn_bbox+0x1bd>
1000316b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000316f:	31 f6                	xor    esi,esi
10003171:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003177:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000317b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003181:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003185:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000318b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000318f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003195:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10003199:	80 38 00             	cmp    BYTE PTR [eax],0x0
1000319c:	0f 84 42 01 00 00    	je     100032e4 <ssfn_bbox+0x1c2>
100031a2:	8d 54 24 18          	lea    edx,[esp+0x18]
100031a6:	b9 06 00 00 00       	mov    ecx,0x6
100031ab:	89 d7                	mov    edi,edx
100031ad:	89 f0                	mov    eax,esi
100031af:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100031b9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100031bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100031c3:	31 ff                	xor    edi,edi
100031c5:	bd 01 00 00 00       	mov    ebp,0x1
100031ca:	50                   	push   eax
100031cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100031cf:	8d 44 24 20          	lea    eax,[esp+0x20]
100031d3:	50                   	push   eax
100031d4:	53                   	push   ebx
100031d5:	e8 fc ff ff ff       	call   100031d6 <ssfn_bbox+0xb4>	100031d6: R_386_PC32	ssfn_render
100031da:	83 c4 10             	add    esp,0x10
100031dd:	89 c6                	mov    esi,eax
100031df:	85 c0                	test   eax,eax
100031e1:	74 6f                	je     10003252 <ssfn_bbox+0x130>
100031e3:	0f 88 fb 00 00 00    	js     100032e4 <ssfn_bbox+0x1c2>
100031e9:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100031ef:	85 c0                	test   eax,eax
100031f1:	0f 84 ed 00 00 00    	je     100032e4 <ssfn_bbox+0x1c2>
100031f7:	85 ed                	test   ebp,ebp
100031f9:	74 0b                	je     10003206 <ssfn_bbox+0xe4>
100031fb:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
10003201:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
10003206:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
1000320a:	74 12                	je     1000321e <ssfn_bbox+0xfc>
1000320c:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
10003212:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10003216:	7d 2f                	jge    10003247 <ssfn_bbox+0x125>
10003218:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000321c:	eb 29                	jmp    10003247 <ssfn_bbox+0x125>
1000321e:	0f b7 08             	movzx  ecx,WORD PTR [eax]
10003221:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
10003226:	39 cd                	cmp    ebp,ecx
10003228:	7d 05                	jge    1000322f <ssfn_bbox+0x10d>
1000322a:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
1000322f:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
10003233:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
10003238:	84 d2                	test   dl,dl
1000323a:	75 04                	jne    10003240 <ssfn_bbox+0x11e>
1000323c:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
10003240:	01 ca                	add    edx,ecx
10003242:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
10003247:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
1000324b:	31 ed                	xor    ebp,ebp
1000324d:	e9 78 ff ff ff       	jmp    100031ca <ssfn_bbox+0xa8>
10003252:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10003259:	74 23                	je     1000327e <ssfn_bbox+0x15c>
1000325b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000325e:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
10003262:	75 1a                	jne    1000327e <ssfn_bbox+0x15c>
10003264:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
1000326a:	b9 04 00 00 00       	mov    ecx,0x4
1000326f:	99                   	cdq    
10003270:	f7 f9                	idiv   ecx
10003272:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
10003277:	29 f8                	sub    eax,edi
10003279:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
1000327e:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
10003284:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003288:	74 29                	je     100032b3 <ssfn_bbox+0x191>
1000328a:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000328f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10003293:	89 01                	mov    DWORD PTR [ecx],eax
10003295:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003299:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
1000329f:	89 01                	mov    DWORD PTR [ecx],eax
100032a1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100032a5:	89 38                	mov    DWORD PTR [eax],edi
100032a7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100032ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100032af:	89 38                	mov    DWORD PTR [eax],edi
100032b1:	eb 31                	jmp    100032e4 <ssfn_bbox+0x1c2>
100032b3:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
100032b8:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
100032bc:	89 07                	mov    DWORD PTR [edi],eax
100032be:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
100032c3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
100032c7:	89 07                	mov    DWORD PTR [edi],eax
100032c9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100032cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100032d3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100032d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100032dd:	eb 05                	jmp    100032e4 <ssfn_bbox+0x1c2>
100032df:	be fc ff ff ff       	mov    esi,0xfffffffc
100032e4:	83 c4 3c             	add    esp,0x3c
100032e7:	89 f0                	mov    eax,esi
100032e9:	5b                   	pop    ebx
100032ea:	5e                   	pop    esi
100032eb:	5f                   	pop    edi
100032ec:	5d                   	pop    ebp
100032ed:	c3                   	ret    

100032ee <ssfn_text>:
100032ee:	55                   	push   ebp
100032ef:	57                   	push   edi
100032f0:	56                   	push   esi
100032f1:	53                   	push   ebx
100032f2:	83 ec 1c             	sub    esp,0x1c
100032f5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100032f9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
100032fd:	85 f6                	test   esi,esi
100032ff:	0f 84 b2 00 00 00    	je     100033b7 <ssfn_text+0xc9>
10003305:	85 ed                	test   ebp,ebp
10003307:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
1000330c:	0f 84 a5 00 00 00    	je     100033b7 <ssfn_text+0xc9>
10003312:	83 ec 0c             	sub    esp,0xc
10003315:	6a 18                	push   0x18
10003317:	e8 fc ff ff ff       	call   10003318 <ssfn_text+0x2a>	10003318: R_386_PC32	malloc
1000331c:	83 c4 10             	add    esp,0x10
1000331f:	89 c3                	mov    ebx,eax
10003321:	85 c0                	test   eax,eax
10003323:	0f 84 8e 00 00 00    	je     100033b7 <ssfn_text+0xc9>
10003329:	31 c0                	xor    eax,eax
1000332b:	b9 06 00 00 00       	mov    ecx,0x6
10003330:	89 df                	mov    edi,ebx
10003332:	80 3e 00             	cmp    BYTE PTR [esi],0x0
10003335:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003337:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000333b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000333e:	74 79                	je     100033b9 <ssfn_text+0xcb>
10003340:	8d 43 0c             	lea    eax,[ebx+0xc]
10003343:	52                   	push   edx
10003344:	52                   	push   edx
10003345:	50                   	push   eax
10003346:	8d 43 0a             	lea    eax,[ebx+0xa]
10003349:	50                   	push   eax
1000334a:	8d 43 06             	lea    eax,[ebx+0x6]
1000334d:	50                   	push   eax
1000334e:	8d 43 04             	lea    eax,[ebx+0x4]
10003351:	50                   	push   eax
10003352:	56                   	push   esi
10003353:	55                   	push   ebp
10003354:	e8 fc ff ff ff       	call   10003355 <ssfn_text+0x67>	10003355: R_386_PC32	ssfn_bbox
10003359:	83 c4 20             	add    esp,0x20
1000335c:	85 c0                	test   eax,eax
1000335e:	75 59                	jne    100033b9 <ssfn_text+0xcb>
10003360:	83 ec 0c             	sub    esp,0xc
10003363:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
10003367:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
1000336b:	0f af c8             	imul   ecx,eax
1000336e:	c1 e1 02             	shl    ecx,0x2
10003371:	51                   	push   ecx
10003372:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10003376:	e8 fc ff ff ff       	call   10003377 <ssfn_text+0x89>	10003377: R_386_PC32	malloc
1000337b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000337f:	89 c7                	mov    edi,eax
10003381:	89 03                	mov    DWORD PTR [ebx],eax
10003383:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
10003387:	83 c4 10             	add    esp,0x10
1000338a:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000338c:	50                   	push   eax
1000338d:	56                   	push   esi
1000338e:	53                   	push   ebx
1000338f:	55                   	push   ebp
10003390:	e8 fc ff ff ff       	call   10003391 <ssfn_text+0xa3>	10003391: R_386_PC32	ssfn_render
10003395:	83 c4 10             	add    esp,0x10
10003398:	85 c0                	test   eax,eax
1000339a:	7e 04                	jle    100033a0 <ssfn_text+0xb2>
1000339c:	01 c6                	add    esi,eax
1000339e:	eb ec                	jmp    1000338c <ssfn_text+0x9e>
100033a0:	74 17                	je     100033b9 <ssfn_text+0xcb>
100033a2:	83 ec 0c             	sub    esp,0xc
100033a5:	ff 33                	push   DWORD PTR [ebx]
100033a7:	e8 fc ff ff ff       	call   100033a8 <ssfn_text+0xba>	100033a8: R_386_PC32	free
100033ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
100033af:	e8 fc ff ff ff       	call   100033b0 <ssfn_text+0xc2>	100033b0: R_386_PC32	free
100033b4:	83 c4 10             	add    esp,0x10
100033b7:	31 db                	xor    ebx,ebx
100033b9:	83 c4 1c             	add    esp,0x1c
100033bc:	89 d8                	mov    eax,ebx
100033be:	5b                   	pop    ebx
100033bf:	5e                   	pop    esi
100033c0:	5f                   	pop    edi
100033c1:	5d                   	pop    ebp
100033c2:	c3                   	ret    
100033c3:	90                   	nop

100033c4 <NIContext::drvPutpixel4(int, int, unsigned int)>:
100033c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100033c8:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100033ce:	8b 10                	mov    edx,DWORD PTR [eax]
100033d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100033d4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
100033d7:	90                   	nop

100033d8 <NIContext::drvDarken4(int, int, int)>:
100033d8:	55                   	push   ebp
100033d9:	57                   	push   edi
100033da:	56                   	push   esi
100033db:	53                   	push   ebx
100033dc:	83 ec 20             	sub    esp,0x20
100033df:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
100033e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100033e7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100033eb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
100033ef:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
100033f5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100033f9:	8b 10                	mov    edx,DWORD PTR [eax]
100033fb:	56                   	push   esi
100033fc:	53                   	push   ebx
100033fd:	50                   	push   eax
100033fe:	ff 52 34             	call   DWORD PTR [edx+0x34]
10003401:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003405:	89 c2                	mov    edx,eax
10003407:	0f b6 ec             	movzx  ebp,ah
1000340a:	c1 ea 10             	shr    edx,0x10
1000340d:	0f af e9             	imul   ebp,ecx
10003410:	0f b6 d2             	movzx  edx,dl
10003413:	0f b6 c0             	movzx  eax,al
10003416:	0f af d1             	imul   edx,ecx
10003419:	0f af c1             	imul   eax,ecx
1000341c:	c1 ea 07             	shr    edx,0x7
1000341f:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
10003425:	c1 e8 07             	shr    eax,0x7
10003428:	8b 39                	mov    edi,DWORD PTR [ecx]
1000342a:	c1 e2 10             	shl    edx,0x10
1000342d:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
10003431:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
10003435:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10003439:	c1 ed 07             	shr    ebp,0x7
1000343c:	c1 e5 08             	shl    ebp,0x8
1000343f:	09 ea                	or     edx,ebp
10003441:	09 c2                	or     edx,eax
10003443:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
10003447:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
1000344a:	83 c4 2c             	add    esp,0x2c
1000344d:	5b                   	pop    ebx
1000344e:	5e                   	pop    esi
1000344f:	5f                   	pop    edi
10003450:	5d                   	pop    ebp
10003451:	ff e0                	jmp    eax
10003453:	90                   	nop

10003454 <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
10003454:	55                   	push   ebp
10003455:	b9 00 40 00 00       	mov    ecx,0x4000
1000345a:	57                   	push   edi
1000345b:	b0 ff                	mov    al,0xff
1000345d:	56                   	push   esi
1000345e:	53                   	push   ebx
1000345f:	83 ec 3c             	sub    esp,0x3c
10003462:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10003466:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
1000346a:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
1000346d:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
10003471:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003473:	85 db                	test   ebx,ebx
10003475:	75 10                	jne    10003487 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
10003477:	83 ec 0c             	sub    esp,0xc
1000347a:	68 b4 5c 00 10       	push   0x10005cb4	1000347b: R_386_32	.text
1000347f:	e8 fc ff ff ff       	call   10003480 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	10003480: R_386_PC32	KePanic(char const*)
10003484:	83 c4 10             	add    esp,0x10
10003487:	50                   	push   eax
10003488:	50                   	push   eax
10003489:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000348d:	50                   	push   eax
1000348e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003492:	50                   	push   eax
10003493:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003497:	50                   	push   eax
10003498:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000349c:	50                   	push   eax
1000349d:	56                   	push   esi
1000349e:	68 00 00 00 00       	push   0x0	1000349f: R_386_32	ssfn_ctx
100034a3:	e8 fc ff ff ff       	call   100034a4 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	100034a4: R_386_PC32	ssfn_bbox
100034a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100034ab:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
100034b3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100034b7:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
100034bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100034c3:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
100034c8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100034cc:	0d 00 00 00 ff       	or     eax,0xff000000
100034d1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100034d5:	83 c4 1c             	add    esp,0x1c
100034d8:	56                   	push   esi
100034d9:	8d 44 24 20          	lea    eax,[esp+0x20]
100034dd:	50                   	push   eax
100034de:	68 00 00 00 00       	push   0x0	100034df: R_386_32	ssfn_ctx
100034e3:	e8 fc ff ff ff       	call   100034e4 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	100034e4: R_386_PC32	ssfn_render
100034e8:	83 c4 10             	add    esp,0x10
100034eb:	89 03                	mov    DWORD PTR [ebx],eax
100034ed:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
100034f1:	31 db                	xor    ebx,ebx
100034f3:	89 f0                	mov    eax,esi
100034f5:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
100034f9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100034fd:	7e 3f                	jle    1000353e <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
100034ff:	31 ff                	xor    edi,edi
10003501:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003506:	39 f8                	cmp    eax,edi
10003508:	7e 2c                	jle    10003536 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
1000350a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000350d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10003510:	83 f8 ff             	cmp    eax,0xffffffff
10003513:	74 1d                	je     10003532 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
10003515:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
1000351b:	25 ff ff ff 00       	and    eax,0xffffff
10003520:	8b 0a                	mov    ecx,DWORD PTR [edx]
10003522:	50                   	push   eax
10003523:	56                   	push   esi
10003524:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003528:	01 f8                	add    eax,edi
1000352a:	50                   	push   eax
1000352b:	52                   	push   edx
1000352c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
1000352f:	83 c4 10             	add    esp,0x10
10003532:	43                   	inc    ebx
10003533:	47                   	inc    edi
10003534:	eb cb                	jmp    10003501 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
10003536:	29 c3                	sub    ebx,eax
10003538:	46                   	inc    esi
10003539:	83 c3 40             	add    ebx,0x40
1000353c:	eb b5                	jmp    100034f3 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
1000353e:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003543:	83 c4 3c             	add    esp,0x3c
10003546:	5b                   	pop    ebx
10003547:	5e                   	pop    esi
10003548:	5f                   	pop    edi
10003549:	5d                   	pop    ebp
1000354a:	c3                   	ret    
1000354b:	90                   	nop

1000354c <NIContext::~NIContext()>:
1000354c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10003550: R_386_32	ssfn_ctx
10003554:	e9 00 db ff ff       	jmp    10001059 <ssfn_free>
10003559:	90                   	nop

1000355a <NIContext::NIContext(Video*, int, int, int, int)>:
1000355a:	55                   	push   ebp
1000355b:	ba 00 00 00 00       	mov    edx,0x0	1000355c: R_386_32	ssfn_ctx
10003560:	57                   	push   edi
10003561:	b9 72 3d 00 00       	mov    ecx,0x3d72
10003566:	56                   	push   esi
10003567:	89 d7                	mov    edi,edx
10003569:	53                   	push   ebx
1000356a:	81 ec 48 02 00 00    	sub    esp,0x248
10003570:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
10003577:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
1000357e:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
10003584:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
1000358b:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
10003591:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
10003598:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
1000359e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
100035a5:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
100035ab:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
100035b2:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
100035b8:	31 c0                	xor    eax,eax
100035ba:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100035bc:	68 00 40 00 00       	push   0x4000
100035c1:	e8 fc ff ff ff       	call   100035c2 <NIContext::NIContext(Video*, int, int, int, int)+0x68>	100035c2: R_386_PC32	malloc
100035c6:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
100035d0:	89 03                	mov    DWORD PTR [ebx],eax
100035d2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100035d9:	e8 fc ff ff ff       	call   100035da <NIContext::NIContext(Video*, int, int, int, int)+0x80>	100035da: R_386_PC32	malloc
100035de:	83 c4 0c             	add    esp,0xc
100035e1:	89 c6                	mov    esi,eax
100035e3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100035e5: R_386_32	kernelProcess
100035e9:	68 cd 5c 00 10       	push   0x10005ccd	100035ea: R_386_32	.text
100035ee:	50                   	push   eax
100035ef:	e8 fc ff ff ff       	call   100035f0 <NIContext::NIContext(Video*, int, int, int, int)+0x96>	100035f0: R_386_PC32	Directory::Directory(char const*, Process*)
100035f4:	83 c4 10             	add    esp,0x10
100035f7:	85 f6                	test   esi,esi
100035f9:	75 10                	jne    1000360b <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
100035fb:	83 ec 0c             	sub    esp,0xc
100035fe:	68 e1 5c 00 10       	push   0x10005ce1	100035ff: R_386_32	.text
10003603:	e8 fc ff ff ff       	call   10003604 <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	10003604: R_386_PC32	KePanic(char const*)
10003608:	83 c4 10             	add    esp,0x10
1000360b:	83 ec 0c             	sub    esp,0xc
1000360e:	56                   	push   esi
1000360f:	e8 fc ff ff ff       	call   10003610 <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	10003610: R_386_PC32	Directory::open()
10003614:	83 c4 10             	add    esp,0x10
10003617:	85 c0                	test   eax,eax
10003619:	75 e0                	jne    100035fb <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
1000361b:	83 ec 0c             	sub    esp,0xc
1000361e:	8b 06                	mov    eax,DWORD PTR [esi]
10003620:	8d 4c 24 20          	lea    ecx,[esp+0x20]
10003624:	51                   	push   ecx
10003625:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
1000362c:	52                   	push   edx
1000362d:	6a 00                	push   0x0
1000362f:	68 10 01 00 00       	push   0x110
10003634:	56                   	push   esi
10003635:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003638:	83 c4 20             	add    esp,0x20
1000363b:	85 c0                	test   eax,eax
1000363d:	0f 85 a0 01 00 00    	jne    100037e3 <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003643:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
1000364b:	0f 85 92 01 00 00    	jne    100037e3 <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003651:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
10003658:	83 c9 ff             	or     ecx,0xffffffff
1000365b:	83 ec 0c             	sub    esp,0xc
1000365e:	89 ef                	mov    edi,ebp
10003660:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
10003662:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
10003668:	89 ca                	mov    edx,ecx
1000366a:	f7 d2                	not    edx
1000366c:	52                   	push   edx
1000366d:	e8 fc ff ff ff       	call   1000366e <NIContext::NIContext(Video*, int, int, int, int)+0x114>	1000366e: R_386_PC32	malloc
10003672:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
10003676:	47                   	inc    edi
10003677:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
1000367d:	5a                   	pop    edx
1000367e:	59                   	pop    ecx
1000367f:	55                   	push   ebp
10003680:	50                   	push   eax
10003681:	e8 fc ff ff ff       	call   10003682 <NIContext::NIContext(Video*, int, int, int, int)+0x128>	10003682: R_386_PC32	strcpy
10003686:	5f                   	pop    edi
10003687:	58                   	pop    eax
10003688:	68 fc 5c 00 10       	push   0x10005cfc	10003689: R_386_32	.text
1000368d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
10003691:	57                   	push   edi
10003692:	e8 fc ff ff ff       	call   10003693 <NIContext::NIContext(Video*, int, int, int, int)+0x139>	10003693: R_386_PC32	strcpy
10003697:	58                   	pop    eax
10003698:	5a                   	pop    edx
10003699:	55                   	push   ebp
1000369a:	57                   	push   edi
1000369b:	e8 fc ff ff ff       	call   1000369c <NIContext::NIContext(Video*, int, int, int, int)+0x142>	1000369c: R_386_PC32	strcat
100036a0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100036a7:	e8 fc ff ff ff       	call   100036a8 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	100036a8: R_386_PC32	malloc
100036ac:	83 c4 0c             	add    esp,0xc
100036af:	89 c5                	mov    ebp,eax
100036b1:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100036b3: R_386_32	kernelProcess
100036b7:	57                   	push   edi
100036b8:	50                   	push   eax
100036b9:	e8 fc ff ff ff       	call   100036ba <NIContext::NIContext(Video*, int, int, int, int)+0x160>	100036ba: R_386_PC32	File::File(char const*, Process*)
100036be:	83 c4 10             	add    esp,0x10
100036c1:	85 ed                	test   ebp,ebp
100036c3:	0f 84 52 ff ff ff    	je     1000361b <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
100036c9:	50                   	push   eax
100036ca:	50                   	push   eax
100036cb:	6a 01                	push   0x1
100036cd:	55                   	push   ebp
100036ce:	e8 fc ff ff ff       	call   100036cf <NIContext::NIContext(Video*, int, int, int, int)+0x175>	100036cf: R_386_PC32	File::open(FileOpenMode)
100036d3:	83 c4 10             	add    esp,0x10
100036d6:	85 c0                	test   eax,eax
100036d8:	74 0c                	je     100036e6 <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
100036da:	83 ec 0c             	sub    esp,0xc
100036dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100036e0:	55                   	push   ebp
100036e1:	e9 b4 00 00 00       	jmp    1000379a <NIContext::NIContext(Video*, int, int, int, int)+0x240>
100036e6:	50                   	push   eax
100036e7:	8d 44 24 17          	lea    eax,[esp+0x17]
100036eb:	50                   	push   eax
100036ec:	8d 44 24 20          	lea    eax,[esp+0x20]
100036f0:	50                   	push   eax
100036f1:	55                   	push   ebp
100036f2:	e8 fc ff ff ff       	call   100036f3 <NIContext::NIContext(Video*, int, int, int, int)+0x199>	100036f3: R_386_PC32	File::stat(unsigned long long*, bool*)
100036f7:	83 c4 10             	add    esp,0x10
100036fa:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
100036ff:	74 0e                	je     1000370f <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
10003701:	83 ec 0c             	sub    esp,0xc
10003704:	55                   	push   ebp
10003705:	e8 fc ff ff ff       	call   10003706 <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	10003706: R_386_PC32	File::close()
1000370a:	e9 85 00 00 00       	jmp    10003794 <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
1000370f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10003713:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10003717:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000371b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000371f:	83 ec 0c             	sub    esp,0xc
10003722:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10003726:	e8 fc ff ff ff       	call   10003727 <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	10003727: R_386_PC32	malloc
1000372b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000372f:	58                   	pop    eax
10003730:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003733:	8d 54 24 20          	lea    edx,[esp+0x20]
10003737:	52                   	push   edx
10003738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000373c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003740:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003744:	55                   	push   ebp
10003745:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003748:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000374c:	83 c4 1c             	add    esp,0x1c
1000374f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003753:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003757:	68 11 5d 00 10       	push   0x10005d11	10003758: R_386_32	.text
1000375c:	e8 fc ff ff ff       	call   1000375d <NIContext::NIContext(Video*, int, int, int, int)+0x203>	1000375d: R_386_PC32	Dbg::kprintf(char const*, ...)
10003761:	83 c4 10             	add    esp,0x10
10003764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003768:	85 c0                	test   eax,eax
1000376a:	75 15                	jne    10003781 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
1000376c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003770:	89 c1                	mov    ecx,eax
10003772:	c1 f9 1f             	sar    ecx,0x1f
10003775:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10003779:	75 06                	jne    10003781 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
1000377b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
1000377f:	74 24                	je     100037a5 <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
10003781:	83 ec 0c             	sub    esp,0xc
10003784:	55                   	push   ebp
10003785:	e8 fc ff ff ff       	call   10003786 <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	10003786: R_386_PC32	File::close()
1000378a:	58                   	pop    eax
1000378b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000378f:	e8 fc ff ff ff       	call   10003790 <NIContext::NIContext(Video*, int, int, int, int)+0x236>	10003790: R_386_PC32	free
10003794:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003797:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000379a:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000379d:	83 c4 10             	add    esp,0x10
100037a0:	e9 76 fe ff ff       	jmp    1000361b <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
100037a5:	50                   	push   eax
100037a6:	50                   	push   eax
100037a7:	57                   	push   edi
100037a8:	68 25 5d 00 10       	push   0x10005d25	100037a9: R_386_32	.text
100037ad:	e8 fc ff ff ff       	call   100037ae <NIContext::NIContext(Video*, int, int, int, int)+0x254>	100037ae: R_386_PC32	Dbg::kprintf(char const*, ...)
100037b2:	5a                   	pop    edx
100037b3:	59                   	pop    ecx
100037b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
100037b8:	68 00 00 00 00       	push   0x0	100037b9: R_386_32	ssfn_ctx
100037bd:	e8 fc ff ff ff       	call   100037be <NIContext::NIContext(Video*, int, int, int, int)+0x264>	100037be: R_386_PC32	ssfn_load
100037c2:	5b                   	pop    ebx
100037c3:	5f                   	pop    edi
100037c4:	50                   	push   eax
100037c5:	68 36 5d 00 10       	push   0x10005d36	100037c6: R_386_32	.text
100037ca:	e8 fc ff ff ff       	call   100037cb <NIContext::NIContext(Video*, int, int, int, int)+0x271>	100037cb: R_386_PC32	Dbg::kprintf(char const*, ...)
100037cf:	89 2c 24             	mov    DWORD PTR [esp],ebp
100037d2:	e8 fc ff ff ff       	call   100037d3 <NIContext::NIContext(Video*, int, int, int, int)+0x279>	100037d3: R_386_PC32	File::close()
100037d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037da:	89 2c 24             	mov    DWORD PTR [esp],ebp
100037dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
100037e0:	83 c4 10             	add    esp,0x10
100037e3:	83 ec 0c             	sub    esp,0xc
100037e6:	56                   	push   esi
100037e7:	e8 fc ff ff ff       	call   100037e8 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	100037e8: R_386_PC32	Directory::close()
100037ec:	8b 06                	mov    eax,DWORD PTR [esi]
100037ee:	89 34 24             	mov    DWORD PTR [esp],esi
100037f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
100037f4:	b8 00 00 00 00       	mov    eax,0x0	100037f5: R_386_32	ssfn_ctx
100037f9:	e8 f7 cb ff ff       	call   100003f5 <_ssfn_fc.part.1>
100037fe:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	10003800: R_386_32	ssfn_ctx
10003808:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	1000380a: R_386_32	ssfn_ctx
10003812:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	10003814: R_386_32	ssfn_ctx
1000381c:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	1000381e: R_386_32	ssfn_ctx
10003826:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	10003828: R_386_32	ssfn_ctx
10003830:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	10003832: R_386_32	ssfn_ctx
1000383a:	81 c4 4c 02 00 00    	add    esp,0x24c
10003840:	5b                   	pop    ebx
10003841:	5e                   	pop    esi
10003842:	5f                   	pop    edi
10003843:	5d                   	pop    ebp
10003844:	c3                   	ret    
10003845:	90                   	nop

10003846 <NiCreateEvent(NIWindow*, int, bool)>:
10003846:	53                   	push   ebx
10003847:	83 ec 10             	sub    esp,0x10
1000384a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000384e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003852:	25 ff ff 1f 00       	and    eax,0x1fffff
10003857:	c1 e0 0a             	shl    eax,0xa
1000385a:	89 c2                	mov    edx,eax
1000385c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000385f:	25 ff 03 00 80       	and    eax,0x800003ff
10003864:	09 d0                	or     eax,edx
10003866:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003869:	8a 54 24 24          	mov    dl,BYTE PTR [esp+0x24]
1000386d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
10003870:	c1 e2 07             	shl    edx,0x7
10003873:	83 e0 7f             	and    eax,0x7f
10003876:	09 d0                	or     eax,edx
10003878:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
1000387b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000387f:	89 03                	mov    DWORD PTR [ebx],eax
10003881:	a1 00 00 00 00       	mov    eax,ds:0x0	10003882: R_386_32	mouseDesktop
10003886:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
10003889:	66 89 53 08          	mov    WORD PTR [ebx+0x8],dx
1000388d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
10003890:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10003893:	66 89 53 0a          	mov    WORD PTR [ebx+0xa],dx
10003897:	c1 e0 06             	shl    eax,0x6
1000389a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000389d:	66 c1 f8 06          	sar    ax,0x6
100038a1:	66 81 e2 00 fc       	and    dx,0xfc00
100038a6:	89 c1                	mov    ecx,eax
100038a8:	98                   	cwde   
100038a9:	66 81 e1 ff 03       	and    cx,0x3ff
100038ae:	09 ca                	or     edx,ecx
100038b0:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
100038b4:	50                   	push   eax
100038b5:	68 dc 5f 00 10       	push   0x10005fdc	100038b6: R_386_32	.text
100038ba:	e8 fc ff ff ff       	call   100038bb <NiCreateEvent(NIWindow*, int, bool)+0x75>	100038bb: R_386_PC32	Dbg::kprintf(char const*, ...)
100038bf:	89 d8                	mov    eax,ebx
100038c1:	83 c4 18             	add    esp,0x18
100038c4:	5b                   	pop    ebx
100038c5:	c2 04 00             	ret    0x4

100038c8 <NiLoadCursors()>:
100038c8:	55                   	push   ebp
100038c9:	57                   	push   edi
100038ca:	56                   	push   esi
100038cb:	53                   	push   ebx
100038cc:	83 ec 38             	sub    esp,0x38
100038cf:	68 14 01 00 00       	push   0x114
100038d4:	e8 fc ff ff ff       	call   100038d5 <NiLoadCursors()+0xd>	100038d5: R_386_PC32	malloc
100038d9:	83 c4 0c             	add    esp,0xc
100038dc:	89 c5                	mov    ebp,eax
100038de:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100038e0: R_386_32	kernelProcess
100038e4:	68 ef 5f 00 10       	push   0x10005fef	100038e5: R_386_32	.text
100038e9:	50                   	push   eax
100038ea:	e8 fc ff ff ff       	call   100038eb <NiLoadCursors()+0x23>	100038eb: R_386_PC32	File::File(char const*, Process*)
100038ef:	58                   	pop    eax
100038f0:	5a                   	pop    edx
100038f1:	6a 01                	push   0x1
100038f3:	55                   	push   ebp
100038f4:	e8 fc ff ff ff       	call   100038f5 <NiLoadCursors()+0x2d>	100038f5: R_386_PC32	File::open(FileOpenMode)
100038f9:	83 c4 10             	add    esp,0x10
100038fc:	85 c0                	test   eax,eax
100038fe:	74 0a                	je     1000390a <NiLoadCursors()+0x42>
10003900:	83 ec 0c             	sub    esp,0xc
10003903:	68 0e 60 00 10       	push   0x1000600e	10003904: R_386_32	.text
10003908:	eb 4c                	jmp    10003956 <NiLoadCursors()+0x8e>
1000390a:	53                   	push   ebx
1000390b:	8d 44 24 17          	lea    eax,[esp+0x17]
1000390f:	50                   	push   eax
10003910:	8d 44 24 20          	lea    eax,[esp+0x20]
10003914:	50                   	push   eax
10003915:	55                   	push   ebp
10003916:	e8 fc ff ff ff       	call   10003917 <NiLoadCursors()+0x4f>	10003917: R_386_PC32	File::stat(unsigned long long*, bool*)
1000391b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
1000391f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10003923:	89 34 24             	mov    DWORD PTR [esp],esi
10003926:	e8 fc ff ff ff       	call   10003927 <NiLoadCursors()+0x5f>	10003927: R_386_PC32	malloc
1000392b:	89 c3                	mov    ebx,eax
1000392d:	58                   	pop    eax
1000392e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003931:	8d 54 24 20          	lea    edx,[esp+0x20]
10003935:	52                   	push   edx
10003936:	53                   	push   ebx
10003937:	57                   	push   edi
10003938:	56                   	push   esi
10003939:	55                   	push   ebp
1000393a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
1000393d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003941:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10003945:	83 c4 20             	add    esp,0x20
10003948:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
1000394c:	74 12                	je     10003960 <NiLoadCursors()+0x98>
1000394e:	83 ec 0c             	sub    esp,0xc
10003951:	68 22 60 00 10       	push   0x10006022	10003952: R_386_32	.text
10003956:	e8 fc ff ff ff       	call   10003957 <NiLoadCursors()+0x8f>	10003957: R_386_PC32	Dbg::kprintf(char const*, ...)
1000395b:	e9 3d 01 00 00       	jmp    10003a9d <NiLoadCursors()+0x1d5>
10003960:	6a 00                	push   0x0
10003962:	31 ed                	xor    ebp,ebp
10003964:	68 04 01 00 00       	push   0x104
10003969:	52                   	push   edx
1000396a:	50                   	push   eax
1000396b:	e8 fc ff ff ff       	call   1000396c <NiLoadCursors()+0xa4>	1000396c: R_386_PC32	__udivdi3
10003970:	5a                   	pop    edx
10003971:	59                   	pop    ecx
10003972:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003976:	50                   	push   eax
10003977:	68 36 60 00 10       	push   0x10006036	10003978: R_386_32	.text
1000397c:	e8 fc ff ff ff       	call   1000397d <NiLoadCursors()+0xb5>	1000397d: R_386_PC32	Dbg::kprintf(char const*, ...)
10003981:	89 1c 24             	mov    DWORD PTR [esp],ebx
10003984:	e8 fc ff ff ff       	call   10003985 <NiLoadCursors()+0xbd>	10003985: R_386_PC32	Dbg::kprintf(char const*, ...)
10003989:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000398d:	8d 04 83             	lea    eax,[ebx+eax*4]
10003990:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003994:	83 c4 10             	add    esp,0x10
10003997:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
1000399b:	0f 8d f3 00 00 00    	jge    10003a94 <NiLoadCursors()+0x1cc>
100039a1:	8d 34 ab             	lea    esi,[ebx+ebp*4]
100039a4:	50                   	push   eax
100039a5:	6a 04                	push   0x4
100039a7:	68 43 60 00 10       	push   0x10006043	100039a8: R_386_32	.text
100039ac:	56                   	push   esi
100039ad:	e8 fc ff ff ff       	call   100039ae <NiLoadCursors()+0xe6>	100039ae: R_386_PC32	memcmp
100039b2:	83 c4 10             	add    esp,0x10
100039b5:	85 c0                	test   eax,eax
100039b7:	0f 84 b8 00 00 00    	je     10003a75 <NiLoadCursors()+0x1ad>
100039bd:	50                   	push   eax
100039be:	6a 04                	push   0x4
100039c0:	68 48 60 00 10       	push   0x10006048	100039c1: R_386_32	.text
100039c5:	56                   	push   esi
100039c6:	e8 fc ff ff ff       	call   100039c7 <NiLoadCursors()+0xff>	100039c7: R_386_PC32	memcmp
100039cb:	83 c4 10             	add    esp,0x10
100039ce:	85 c0                	test   eax,eax
100039d0:	74 7b                	je     10003a4d <NiLoadCursors()+0x185>
100039d2:	50                   	push   eax
100039d3:	6a 04                	push   0x4
100039d5:	68 4d 60 00 10       	push   0x1000604d	100039d6: R_386_32	.text
100039da:	56                   	push   esi
100039db:	e8 fc ff ff ff       	call   100039dc <NiLoadCursors()+0x114>	100039dc: R_386_PC32	memcmp
100039e0:	83 c4 10             	add    esp,0x10
100039e3:	85 c0                	test   eax,eax
100039e5:	74 6d                	je     10003a54 <NiLoadCursors()+0x18c>
100039e7:	57                   	push   edi
100039e8:	6a 04                	push   0x4
100039ea:	68 52 60 00 10       	push   0x10006052	100039eb: R_386_32	.text
100039ef:	56                   	push   esi
100039f0:	e8 fc ff ff ff       	call   100039f1 <NiLoadCursors()+0x129>	100039f1: R_386_PC32	memcmp
100039f5:	83 c4 10             	add    esp,0x10
100039f8:	85 c0                	test   eax,eax
100039fa:	74 5f                	je     10003a5b <NiLoadCursors()+0x193>
100039fc:	51                   	push   ecx
100039fd:	6a 04                	push   0x4
100039ff:	68 57 60 00 10       	push   0x10006057	10003a00: R_386_32	.text
10003a04:	56                   	push   esi
10003a05:	e8 fc ff ff ff       	call   10003a06 <NiLoadCursors()+0x13e>	10003a06: R_386_PC32	memcmp
10003a0a:	83 c4 10             	add    esp,0x10
10003a0d:	85 c0                	test   eax,eax
10003a0f:	74 51                	je     10003a62 <NiLoadCursors()+0x19a>
10003a11:	52                   	push   edx
10003a12:	6a 04                	push   0x4
10003a14:	68 5c 60 00 10       	push   0x1000605c	10003a15: R_386_32	.text
10003a19:	56                   	push   esi
10003a1a:	e8 fc ff ff ff       	call   10003a1b <NiLoadCursors()+0x153>	10003a1b: R_386_PC32	memcmp
10003a1f:	83 c4 10             	add    esp,0x10
10003a22:	85 c0                	test   eax,eax
10003a24:	74 43                	je     10003a69 <NiLoadCursors()+0x1a1>
10003a26:	50                   	push   eax
10003a27:	6a 04                	push   0x4
10003a29:	68 61 60 00 10       	push   0x10006061	10003a2a: R_386_32	.text
10003a2e:	56                   	push   esi
10003a2f:	e8 fc ff ff ff       	call   10003a30 <NiLoadCursors()+0x168>	10003a30: R_386_PC32	memcmp
10003a34:	83 c4 10             	add    esp,0x10
10003a37:	85 c0                	test   eax,eax
10003a39:	74 35                	je     10003a70 <NiLoadCursors()+0x1a8>
10003a3b:	83 ec 0c             	sub    esp,0xc
10003a3e:	68 66 60 00 10       	push   0x10006066	10003a3f: R_386_32	.text
10003a43:	e8 fc ff ff ff       	call   10003a44 <NiLoadCursors()+0x17c>	10003a44: R_386_PC32	Dbg::kprintf(char const*, ...)
10003a48:	83 c4 10             	add    esp,0x10
10003a4b:	eb 47                	jmp    10003a94 <NiLoadCursors()+0x1cc>
10003a4d:	b8 00 02 00 00       	mov    eax,0x200
10003a52:	eb 21                	jmp    10003a75 <NiLoadCursors()+0x1ad>
10003a54:	b8 00 03 00 00       	mov    eax,0x300
10003a59:	eb 1a                	jmp    10003a75 <NiLoadCursors()+0x1ad>
10003a5b:	b8 00 01 00 00       	mov    eax,0x100
10003a60:	eb 13                	jmp    10003a75 <NiLoadCursors()+0x1ad>
10003a62:	b8 00 04 00 00       	mov    eax,0x400
10003a67:	eb 0c                	jmp    10003a75 <NiLoadCursors()+0x1ad>
10003a69:	b8 00 05 00 00       	mov    eax,0x500
10003a6e:	eb 05                	jmp    10003a75 <NiLoadCursors()+0x1ad>
10003a70:	b8 00 06 00 00       	mov    eax,0x600
10003a75:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003a77: R_386_32	___mouse_data
10003a7b:	b9 00 01 00 00       	mov    ecx,0x100
10003a80:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003a84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003a86:	45                   	inc    ebp
10003a87:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003a8f:	e9 03 ff ff ff       	jmp    10003997 <NiLoadCursors()+0xcf>
10003a94:	83 ec 0c             	sub    esp,0xc
10003a97:	53                   	push   ebx
10003a98:	e8 fc ff ff ff       	call   10003a99 <NiLoadCursors()+0x1d1>	10003a99: R_386_PC32	free
10003a9d:	83 c4 10             	add    esp,0x10
10003aa0:	83 c4 2c             	add    esp,0x2c
10003aa3:	5b                   	pop    ebx
10003aa4:	5e                   	pop    esi
10003aa5:	5f                   	pop    edi
10003aa6:	5d                   	pop    ebp
10003aa7:	c3                   	ret    

10003aa8 <NIDesktop::NIDesktop(NIContext*)>:
10003aa8:	53                   	push   ebx
10003aa9:	83 ec 14             	sub    esp,0x14
10003aac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10003ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003ab4:	c7 43 08 1e 00 00 00 	mov    DWORD PTR [ebx+0x8],0x1e
10003abb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003abe:	c7 43 0c 1e 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1e
10003ac5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10003acc:	6a 08                	push   0x8
10003ace:	e8 fc ff ff ff       	call   10003acf <NIDesktop::NIDesktop(NIContext*)+0x27>	10003acf: R_386_PC32	malloc
10003ad3:	89 03                	mov    DWORD PTR [ebx],eax
10003ad5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003adc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003ae2:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10003ae4: R_386_32	mouseDesktop
10003ae8:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003aea: R_386_32	guiMouseHandler
	10003aee: R_386_32	NiHandleMouse(int, int, int, int)
10003af2:	83 c4 18             	add    esp,0x18
10003af5:	5b                   	pop    ebx
10003af6:	c3                   	ret    
10003af7:	90                   	nop

10003af8 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003af8:	55                   	push   ebp
10003af9:	57                   	push   edi
10003afa:	56                   	push   esi
10003afb:	53                   	push   ebx
10003afc:	83 ec 2c             	sub    esp,0x2c
10003aff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003b03:	8b 00                	mov    eax,DWORD PTR [eax]
10003b05:	8b 28                	mov    ebp,DWORD PTR [eax]
10003b07:	83 7d 04 00          	cmp    DWORD PTR [ebp+0x4],0x0
10003b0b:	74 3f                	je     10003b4c <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x54>
10003b0d:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
10003b10:	85 db                	test   ebx,ebx
10003b12:	74 33                	je     10003b47 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x4f>
10003b14:	3b 5c 24 44          	cmp    ebx,DWORD PTR [esp+0x44]
10003b18:	74 2d                	je     10003b47 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x4f>
10003b1a:	83 ec 0c             	sub    esp,0xc
10003b1d:	53                   	push   ebx
10003b1e:	e8 fc ff ff ff       	call   10003b1f <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x27>	10003b1f: R_386_PC32	NIWindow::invalidate()
10003b23:	8d 74 24 1c          	lea    esi,[esp+0x1c]
10003b27:	6a 01                	push   0x1
10003b29:	6a 03                	push   0x3
10003b2b:	53                   	push   ebx
10003b2c:	56                   	push   esi
10003b2d:	e8 fc ff ff ff       	call   10003b2e <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x36>	10003b2e: R_386_PC32	NiCreateEvent(NIWindow*, int, bool)
10003b32:	b9 05 00 00 00       	mov    ecx,0x5
10003b37:	83 ec 10             	sub    esp,0x10
10003b3a:	89 e7                	mov    edi,esp
10003b3c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10003b3e:	53                   	push   ebx
10003b3f:	e8 fc ff ff ff       	call   10003b40 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x48>	10003b40: R_386_PC32	NIWindow::postEvent(NiEvent)
10003b44:	83 c4 30             	add    esp,0x30
10003b47:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10003b4a:	eb bb                	jmp    10003b07 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xf>
10003b4c:	83 c4 2c             	add    esp,0x2c
10003b4f:	5b                   	pop    ebx
10003b50:	5e                   	pop    esi
10003b51:	5f                   	pop    edi
10003b52:	5d                   	pop    ebp
10003b53:	c3                   	ret    

10003b54 <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003b54:	57                   	push   edi
10003b55:	56                   	push   esi
10003b56:	53                   	push   ebx
10003b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003b5b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003b5f:	8b 00                	mov    eax,DWORD PTR [eax]
10003b61:	8b 00                	mov    eax,DWORD PTR [eax]
10003b63:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003b66:	85 db                	test   ebx,ebx
10003b68:	74 52                	je     10003bbc <NIDesktop::getTopmostWindowAtPixel(int, int)+0x68>
10003b6a:	8b 00                	mov    eax,DWORD PTR [eax]
10003b6c:	85 c0                	test   eax,eax
10003b6e:	74 4e                	je     10003bbe <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6a>
10003b70:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
10003b76:	39 ca                	cmp    edx,ecx
10003b78:	7e 04                	jle    10003b7e <NIDesktop::getTopmostWindowAtPixel(int, int)+0x2a>
10003b7a:	89 d8                	mov    eax,ebx
10003b7c:	eb e5                	jmp    10003b63 <NIDesktop::getTopmostWindowAtPixel(int, int)+0xf>
10003b7e:	8b b0 10 02 00 00    	mov    esi,DWORD PTR [eax+0x210]
10003b84:	01 d6                	add    esi,edx
10003b86:	39 ce                	cmp    esi,ecx
10003b88:	7e f0                	jle    10003b7a <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10003b8a:	89 ce                	mov    esi,ecx
10003b8c:	29 d6                	sub    esi,edx
10003b8e:	8b 90 00 02 00 00    	mov    edx,DWORD PTR [eax+0x200]
10003b94:	8d 34 b2             	lea    esi,[edx+esi*4]
10003b97:	8b 90 04 02 00 00    	mov    edx,DWORD PTR [eax+0x204]
10003b9d:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003ba0:	01 d7                	add    edi,edx
10003ba2:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003ba6:	7f d2                	jg     10003b7a <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10003ba8:	03 90 0c 02 00 00    	add    edx,DWORD PTR [eax+0x20c]
10003bae:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003bb2:	29 f2                	sub    edx,esi
10003bb4:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003bb8:	7e c0                	jle    10003b7a <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10003bba:	eb 02                	jmp    10003bbe <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6a>
10003bbc:	31 c0                	xor    eax,eax
10003bbe:	5b                   	pop    ebx
10003bbf:	5e                   	pop    esi
10003bc0:	5f                   	pop    edi
10003bc1:	c3                   	ret    

10003bc2 <NIDesktop::renderScanline(int, int, int)>:
10003bc2:	55                   	push   ebp
10003bc3:	57                   	push   edi
10003bc4:	56                   	push   esi
10003bc5:	53                   	push   ebx
10003bc6:	83 ec 2c             	sub    esp,0x2c
10003bc9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10003bcd:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
10003bd2:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10003bd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003bda:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003bde:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10003be2:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003be4: R_386_32	render
10003be8:	31 c0                	xor    eax,eax
10003bea:	89 d7                	mov    edi,edx
10003bec:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003bee:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003bf2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10003bf6:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003bf8: R_386_32	shadow
10003bfc:	b0 80                	mov    al,0x80
10003bfe:	89 d7                	mov    edi,edx
10003c00:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003c02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003c06:	8b 00                	mov    eax,DWORD PTR [eax]
10003c08:	8b 00                	mov    eax,DWORD PTR [eax]
10003c0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003c0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003c16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003c1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003c1d:	85 c0                	test   eax,eax
10003c1f:	0f 84 1a 04 00 00    	je     1000403f <NIDesktop::renderScanline(int, int, int)+0x47d>
10003c25:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
10003c29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
10003c2b:	85 db                	test   ebx,ebx
10003c2d:	0f 84 0c 04 00 00    	je     1000403f <NIDesktop::renderScanline(int, int, int)+0x47d>
10003c33:	39 1d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebx	10003c35: R_386_32	movingWin
10003c39:	75 06                	jne    10003c41 <NIDesktop::renderScanline(int, int, int)+0x7f>
10003c3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003c3f:	eb d5                	jmp    10003c16 <NIDesktop::renderScanline(int, int, int)+0x54>
10003c41:	8b 93 28 02 00 00    	mov    edx,DWORD PTR [ebx+0x228]
10003c47:	89 d1                	mov    ecx,edx
10003c49:	83 e1 12             	and    ecx,0x12
10003c4c:	83 f9 12             	cmp    ecx,0x12
10003c4f:	74 ea                	je     10003c3b <NIDesktop::renderScanline(int, int, int)+0x79>
10003c51:	0f ba e2 09          	bt     edx,0x9
10003c55:	72 e4                	jb     10003c3b <NIDesktop::renderScanline(int, int, int)+0x79>
10003c57:	83 ec 0c             	sub    esp,0xc
10003c5a:	53                   	push   ebx
10003c5b:	e8 fc ff ff ff       	call   10003c5c <NIDesktop::renderScanline(int, int, int)+0x9a>	10003c5c: R_386_PC32	NIWindow::request()
10003c60:	8b 83 08 02 00 00    	mov    eax,DWORD PTR [ebx+0x208]
10003c66:	8b 93 10 02 00 00    	mov    edx,DWORD PTR [ebx+0x210]
10003c6c:	83 c4 10             	add    esp,0x10
10003c6f:	01 c2                	add    edx,eax
10003c71:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003c75:	0f 8e 08 01 00 00    	jle    10003d83 <NIDesktop::renderScanline(int, int, int)+0x1c1>
10003c7b:	80 bb 14 02 00 00 00 	cmp    BYTE PTR [ebx+0x214],0x0
10003c82:	0f 85 fb 00 00 00    	jne    10003d83 <NIDesktop::renderScanline(int, int, int)+0x1c1>
10003c88:	f6 83 28 02 00 00 40 	test   BYTE PTR [ebx+0x228],0x40
10003c8f:	0f 85 03 02 00 00    	jne    10003e98 <NIDesktop::renderScanline(int, int, int)+0x2d6>
10003c95:	8b 83 04 02 00 00    	mov    eax,DWORD PTR [ebx+0x204]
10003c9b:	8b b3 04 02 00 00    	mov    esi,DWORD PTR [ebx+0x204]
10003ca1:	8b bb 0c 02 00 00    	mov    edi,DWORD PTR [ebx+0x20c]
10003ca7:	01 f7                	add    edi,esi
10003ca9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10003cad:	39 c7                	cmp    edi,eax
10003caf:	0f 8e e3 01 00 00    	jle    10003e98 <NIDesktop::renderScanline(int, int, int)+0x2d6>
10003cb5:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003cb9:	0f 8c be 00 00 00    	jl     10003d7d <NIDesktop::renderScanline(int, int, int)+0x1bb>
10003cbf:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003cc3:	0f 8f cf 01 00 00    	jg     10003e98 <NIDesktop::renderScanline(int, int, int)+0x2d6>
10003cc9:	8b bb 28 02 00 00    	mov    edi,DWORD PTR [ebx+0x228]
10003ccf:	89 c5                	mov    ebp,eax
10003cd1:	81 e7 00 01 00 00    	and    edi,0x100
10003cd7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003cdb:	83 ff 01             	cmp    edi,0x1
10003cde:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10003ce2:	19 c9                	sbb    ecx,ecx
10003ce4:	8b bb 08 02 00 00    	mov    edi,DWORD PTR [ebx+0x208]
10003cea:	83 e1 03             	and    ecx,0x3
10003ced:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003cf1:	29 f5                	sub    ebp,esi
10003cf3:	83 c1 02             	add    ecx,0x2
10003cf6:	6b ff fc             	imul   edi,edi,0xfffffffc
10003cf9:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
10003cfd:	39 54 24 18          	cmp    DWORD PTR [esp+0x18],edx
10003d01:	7f 20                	jg     10003d23 <NIDesktop::renderScanline(int, int, int)+0x161>
10003d03:	8d 34 97             	lea    esi,[edi+edx*4]
10003d06:	03 b3 00 02 00 00    	add    esi,DWORD PTR [ebx+0x200]
10003d0c:	0f b7 2e             	movzx  ebp,WORD PTR [esi]
10003d0f:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
10003d13:	7f 0e                	jg     10003d23 <NIDesktop::renderScanline(int, int, int)+0x161>
10003d15:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003d19:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
10003d1d:	29 f5                	sub    ebp,esi
10003d1f:	39 c5                	cmp    ebp,eax
10003d21:	7d 0b                	jge    10003d2e <NIDesktop::renderScanline(int, int, int)+0x16c>
10003d23:	42                   	inc    edx
10003d24:	89 d6                	mov    esi,edx
10003d26:	2b 74 24 44          	sub    esi,DWORD PTR [esp+0x44]
10003d2a:	39 f1                	cmp    ecx,esi
10003d2c:	7d cf                	jge    10003cfd <NIDesktop::renderScanline(int, int, int)+0x13b>
10003d2e:	89 d6                	mov    esi,edx
10003d30:	2b 74 24 44          	sub    esi,DWORD PTR [esp+0x44]
10003d34:	39 f1                	cmp    ecx,esi
10003d36:	0f 9f c1             	setg   cl
10003d39:	85 f6                	test   esi,esi
10003d3b:	0f 9f c2             	setg   dl
10003d3e:	20 d1                	and    cl,dl
10003d40:	74 3b                	je     10003d7d <NIDesktop::renderScanline(int, int, int)+0x1bb>
10003d42:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003d44: R_386_32	render
10003d49:	75 32                	jne    10003d7d <NIDesktop::renderScanline(int, int, int)+0x1bb>
10003d4b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
10003d50:	74 09                	je     10003d5b <NIDesktop::renderScanline(int, int, int)+0x199>
10003d52:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003d54: R_386_32	shadow
10003d59:	eb 1e                	jmp    10003d79 <NIDesktop::renderScanline(int, int, int)+0x1b7>
10003d5b:	8d 34 f5 5d 00 00 00 	lea    esi,[esi*8+0x5d]
10003d62:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10003d65: R_386_32	shadow
10003d69:	0f af d6             	imul   edx,esi
10003d6c:	d1 fe                	sar    esi,1
10003d6e:	c1 fa 08             	sar    edx,0x8
10003d71:	01 f2                	add    edx,esi
10003d73:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	10003d75: R_386_32	shadow
10003d79:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
10003d7d:	40                   	inc    eax
10003d7e:	e9 18 ff ff ff       	jmp    10003c9b <NIDesktop::renderScanline(int, int, int)+0xd9>
10003d83:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003d87:	0f 8d 0b 01 00 00    	jge    10003e98 <NIDesktop::renderScanline(int, int, int)+0x2d6>
10003d8d:	80 bb 14 02 00 00 00 	cmp    BYTE PTR [ebx+0x214],0x0
10003d94:	0f 85 fe 00 00 00    	jne    10003e98 <NIDesktop::renderScanline(int, int, int)+0x2d6>
10003d9a:	f6 83 28 02 00 00 40 	test   BYTE PTR [ebx+0x228],0x40
10003da1:	0f 85 f1 00 00 00    	jne    10003e98 <NIDesktop::renderScanline(int, int, int)+0x2d6>
10003da7:	8b 83 04 02 00 00    	mov    eax,DWORD PTR [ebx+0x204]
10003dad:	8b b3 04 02 00 00    	mov    esi,DWORD PTR [ebx+0x204]
10003db3:	8b bb 0c 02 00 00    	mov    edi,DWORD PTR [ebx+0x20c]
10003db9:	01 f7                	add    edi,esi
10003dbb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10003dbf:	39 c7                	cmp    edi,eax
10003dc1:	0f 8e d1 00 00 00    	jle    10003e98 <NIDesktop::renderScanline(int, int, int)+0x2d6>
10003dc7:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003dcb:	0f 8c c1 00 00 00    	jl     10003e92 <NIDesktop::renderScanline(int, int, int)+0x2d0>
10003dd1:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003dd5:	0f 8f bd 00 00 00    	jg     10003e98 <NIDesktop::renderScanline(int, int, int)+0x2d6>
10003ddb:	8b bb 28 02 00 00    	mov    edi,DWORD PTR [ebx+0x228]
10003de1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10003de5:	81 e7 00 01 00 00    	and    edi,0x100
10003deb:	83 ff 01             	cmp    edi,0x1
10003dee:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003df2:	19 d2                	sbb    edx,edx
10003df4:	89 c7                	mov    edi,eax
10003df6:	83 e2 03             	and    edx,0x3
10003df9:	29 f7                	sub    edi,esi
10003dfb:	83 c2 02             	add    edx,0x2
10003dfe:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10003e02:	49                   	dec    ecx
10003e03:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10003e07:	29 cf                	sub    edi,ecx
10003e09:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10003e0d:	39 fa                	cmp    edx,edi
10003e0f:	7c 3b                	jl     10003e4c <NIDesktop::renderScanline(int, int, int)+0x28a>
10003e11:	8b bb 08 02 00 00    	mov    edi,DWORD PTR [ebx+0x208]
10003e17:	8b b3 10 02 00 00    	mov    esi,DWORD PTR [ebx+0x210]
10003e1d:	8d 2c 37             	lea    ebp,[edi+esi*1]
10003e20:	39 cd                	cmp    ebp,ecx
10003e22:	7e de                	jle    10003e02 <NIDesktop::renderScanline(int, int, int)+0x240>
10003e24:	89 cd                	mov    ebp,ecx
10003e26:	29 fd                	sub    ebp,edi
10003e28:	39 ee                	cmp    esi,ebp
10003e2a:	7e 20                	jle    10003e4c <NIDesktop::renderScanline(int, int, int)+0x28a>
10003e2c:	8b b3 00 02 00 00    	mov    esi,DWORD PTR [ebx+0x200]
10003e32:	8d 34 ae             	lea    esi,[esi+ebp*4]
10003e35:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003e38:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
10003e3c:	7f c4                	jg     10003e02 <NIDesktop::renderScanline(int, int, int)+0x240>
10003e3e:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003e42:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10003e46:	29 f7                	sub    edi,esi
10003e48:	39 c7                	cmp    edi,eax
10003e4a:	7c b6                	jl     10003e02 <NIDesktop::renderScanline(int, int, int)+0x240>
10003e4c:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
10003e50:	76 40                	jbe    10003e92 <NIDesktop::renderScanline(int, int, int)+0x2d0>
10003e52:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003e54: R_386_32	render
10003e59:	75 37                	jne    10003e92 <NIDesktop::renderScanline(int, int, int)+0x2d0>
10003e5b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
10003e60:	74 09                	je     10003e6b <NIDesktop::renderScanline(int, int, int)+0x2a9>
10003e62:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003e64: R_386_32	shadow
10003e69:	eb 22                	jmp    10003e8d <NIDesktop::renderScanline(int, int, int)+0x2cb>
10003e6b:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10003e6e: R_386_32	shadow
10003e72:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10003e76:	8d 0c fd 5d 00 00 00 	lea    ecx,[edi*8+0x5d]
10003e7d:	0f af d1             	imul   edx,ecx
10003e80:	d1 f9                	sar    ecx,1
10003e82:	c1 fa 08             	sar    edx,0x8
10003e85:	01 d1                	add    ecx,edx
10003e87:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	10003e89: R_386_32	shadow
10003e8d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
10003e92:	40                   	inc    eax
10003e93:	e9 15 ff ff ff       	jmp    10003dad <NIDesktop::renderScanline(int, int, int)+0x1eb>
10003e98:	8b 83 08 02 00 00    	mov    eax,DWORD PTR [ebx+0x208]
10003e9e:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003ea2:	0f 8f 82 01 00 00    	jg     1000402a <NIDesktop::renderScanline(int, int, int)+0x468>
10003ea8:	8b 93 10 02 00 00    	mov    edx,DWORD PTR [ebx+0x210]
10003eae:	01 c2                	add    edx,eax
10003eb0:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003eb4:	0f 8e 70 01 00 00    	jle    1000402a <NIDesktop::renderScanline(int, int, int)+0x468>
10003eba:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003ebe:	29 c2                	sub    edx,eax
10003ec0:	8b 83 00 02 00 00    	mov    eax,DWORD PTR [ebx+0x200]
10003ec6:	80 bb 14 02 00 00 00 	cmp    BYTE PTR [ebx+0x214],0x0
10003ecd:	8d 04 90             	lea    eax,[eax+edx*4]
10003ed0:	0f b7 08             	movzx  ecx,WORD PTR [eax]
10003ed3:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
10003ed7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10003edb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003edf:	0f 85 d8 00 00 00    	jne    10003fbd <NIDesktop::renderScanline(int, int, int)+0x3fb>
10003ee5:	8b 83 28 02 00 00    	mov    eax,DWORD PTR [ebx+0x228]
10003eeb:	a8 40                	test   al,0x40
10003eed:	0f 85 ca 00 00 00    	jne    10003fbd <NIDesktop::renderScanline(int, int, int)+0x3fb>
10003ef3:	25 00 01 00 00       	and    eax,0x100
10003ef8:	83 f8 01             	cmp    eax,0x1
10003efb:	19 c9                	sbb    ecx,ecx
10003efd:	83 e1 fe             	and    ecx,0xfffffffe
10003f00:	83 c1 03             	add    ecx,0x3
10003f03:	8b 83 04 02 00 00    	mov    eax,DWORD PTR [ebx+0x204]
10003f09:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10003f0d:	8b bb 28 02 00 00    	mov    edi,DWORD PTR [ebx+0x228]
10003f13:	8d 74 30 fc          	lea    esi,[eax+esi*1-0x4]
10003f17:	81 e7 00 01 00 00    	and    edi,0x100
10003f1d:	01 ce                	add    esi,ecx
10003f1f:	03 83 0c 02 00 00    	add    eax,DWORD PTR [ebx+0x20c]
10003f25:	89 fa                	mov    edx,edi
10003f27:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
10003f2b:	01 c8                	add    eax,ecx
10003f2d:	83 ff 01             	cmp    edi,0x1
10003f30:	19 ff                	sbb    edi,edi
10003f32:	f7 d7                	not    edi
10003f34:	83 e7 03             	and    edi,0x3
10003f37:	29 f8                	sub    eax,edi
10003f39:	80 be 00 00 00 00 00 	cmp    BYTE PTR [esi+0x0],0x0	10003f3b: R_386_32	render
10003f40:	75 31                	jne    10003f73 <NIDesktop::renderScanline(int, int, int)+0x3b1>
10003f42:	85 d2                	test   edx,edx
10003f44:	74 09                	je     10003f4f <NIDesktop::renderScanline(int, int, int)+0x38d>
10003f46:	c6 86 00 00 00 00 00 	mov    BYTE PTR [esi+0x0],0x0	10003f48: R_386_32	shadow
10003f4d:	eb 1f                	jmp    10003f6e <NIDesktop::renderScanline(int, int, int)+0x3ac>
10003f4f:	0f b6 be 00 00 00 00 	movzx  edi,BYTE PTR [esi+0x0]	10003f52: R_386_32	shadow
10003f56:	6b e9 f8             	imul   ebp,ecx,0xfffffff8
10003f59:	83 c5 7d             	add    ebp,0x7d
10003f5c:	0f af fd             	imul   edi,ebp
10003f5f:	d1 fd                	sar    ebp,1
10003f61:	c1 ff 08             	sar    edi,0x8
10003f64:	01 fd                	add    ebp,edi
10003f66:	89 ea                	mov    edx,ebp
10003f68:	88 96 00 00 00 00    	mov    BYTE PTR [esi+0x0],dl	10003f6a: R_386_32	shadow
10003f6e:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
10003f73:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003f75: R_386_32	render
10003f7a:	75 37                	jne    10003fb3 <NIDesktop::renderScanline(int, int, int)+0x3f1>
10003f7c:	f6 83 29 02 00 00 01 	test   BYTE PTR [ebx+0x229],0x1
10003f83:	74 09                	je     10003f8e <NIDesktop::renderScanline(int, int, int)+0x3cc>
10003f85:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003f87: R_386_32	shadow
10003f8c:	eb 20                	jmp    10003fae <NIDesktop::renderScanline(int, int, int)+0x3ec>
10003f8e:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
10003f95:	0f b6 b0 00 00 00 00 	movzx  esi,BYTE PTR [eax+0x0]	10003f98: R_386_32	shadow
10003f9c:	0f af f7             	imul   esi,edi
10003f9f:	d1 ff                	sar    edi,1
10003fa1:	c1 fe 08             	sar    esi,0x8
10003fa4:	01 f7                	add    edi,esi
10003fa6:	89 fa                	mov    edx,edi
10003fa8:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	10003faa: R_386_32	shadow
10003fae:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
10003fb3:	41                   	inc    ecx
10003fb4:	83 f9 04             	cmp    ecx,0x4
10003fb7:	0f 85 46 ff ff ff    	jne    10003f03 <NIDesktop::renderScanline(int, int, int)+0x341>
10003fbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10003fc1:	03 93 04 02 00 00    	add    edx,DWORD PTR [ebx+0x204]
10003fc7:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10003fcd:	03 83 04 02 00 00    	add    eax,DWORD PTR [ebx+0x204]
10003fd3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
10003fd7:	39 d0                	cmp    eax,edx
10003fd9:	7e 4f                	jle    1000402a <NIDesktop::renderScanline(int, int, int)+0x468>
10003fdb:	3b 54 24 48          	cmp    edx,DWORD PTR [esp+0x48]
10003fdf:	7c 46                	jl     10004027 <NIDesktop::renderScanline(int, int, int)+0x465>
10003fe1:	3b 54 24 4c          	cmp    edx,DWORD PTR [esp+0x4c]
10003fe5:	7f 43                	jg     1000402a <NIDesktop::renderScanline(int, int, int)+0x468>
10003fe7:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003fe9: R_386_32	render
10003fee:	75 37                	jne    10004027 <NIDesktop::renderScanline(int, int, int)+0x465>
10003ff0:	c6 82 00 00 00 00 01 	mov    BYTE PTR [edx+0x0],0x1	10003ff2: R_386_32	render
10003ff7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003ffb:	2b 83 08 02 00 00    	sub    eax,DWORD PTR [ebx+0x208]
10004001:	0f af 83 0c 02 00 00 	imul   eax,DWORD PTR [ebx+0x20c]
10004008:	89 c1                	mov    ecx,eax
1000400a:	89 d0                	mov    eax,edx
1000400c:	2b 83 04 02 00 00    	sub    eax,DWORD PTR [ebx+0x204]
10004012:	01 c8                	add    eax,ecx
10004014:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10004017:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
1000401b:	8b 04 81             	mov    eax,DWORD PTR [ecx+eax*4]
1000401e:	89 04 95 00 00 00 00 	mov    DWORD PTR [edx*4+0x0],eax	10004021: R_386_32	renderData
10004025:	74 64                	je     1000408b <NIDesktop::renderScanline(int, int, int)+0x4c9>
10004027:	42                   	inc    edx
10004028:	eb 9d                	jmp    10003fc7 <NIDesktop::renderScanline(int, int, int)+0x405>
1000402a:	80 bb 14 02 00 00 00 	cmp    BYTE PTR [ebx+0x214],0x0
10004031:	75 0c                	jne    1000403f <NIDesktop::renderScanline(int, int, int)+0x47d>
10004033:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004037:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000403a:	e9 fc fb ff ff       	jmp    10003c3b <NIDesktop::renderScanline(int, int, int)+0x79>
1000403f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
10004043:	3b 54 24 4c          	cmp    edx,DWORD PTR [esp+0x4c]
10004047:	7d 42                	jge    1000408b <NIDesktop::renderScanline(int, int, int)+0x4c9>
10004049:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	1000404b: R_386_32	render
10004050:	75 36                	jne    10004088 <NIDesktop::renderScanline(int, int, int)+0x4c6>
10004052:	c6 82 00 00 00 00 01 	mov    BYTE PTR [edx+0x0],0x1	10004054: R_386_32	render
10004059:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000405d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10004060:	81 b8 0c 04 00 00 80 02 00 00 	cmp    DWORD PTR [eax+0x40c],0x280
1000406a:	0f 9f c0             	setg   al
1000406d:	0f b6 c0             	movzx  eax,al
10004070:	48                   	dec    eax
10004071:	25 ab fa aa ff       	and    eax,0xffaafaab
10004076:	05 ff af 55 00       	add    eax,0x55afff
1000407b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
1000407f:	89 04 95 00 00 00 00 	mov    DWORD PTR [edx*4+0x0],eax	10004082: R_386_32	renderData
10004086:	74 03                	je     1000408b <NIDesktop::renderScanline(int, int, int)+0x4c9>
10004088:	42                   	inc    edx
10004089:	eb b8                	jmp    10004043 <NIDesktop::renderScanline(int, int, int)+0x481>
1000408b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000408f:	8b 00                	mov    eax,DWORD PTR [eax]
10004091:	8b 00                	mov    eax,DWORD PTR [eax]
10004093:	85 c0                	test   eax,eax
10004095:	74 69                	je     10004100 <NIDesktop::renderScanline(int, int, int)+0x53e>
10004097:	8b 00                	mov    eax,DWORD PTR [eax]
10004099:	85 c0                	test   eax,eax
1000409b:	74 63                	je     10004100 <NIDesktop::renderScanline(int, int, int)+0x53e>
1000409d:	80 b8 14 02 00 00 01 	cmp    BYTE PTR [eax+0x214],0x1
100040a4:	74 5a                	je     10004100 <NIDesktop::renderScanline(int, int, int)+0x53e>
100040a6:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
100040aa:	84 c0                	test   al,al
100040ac:	74 52                	je     10004100 <NIDesktop::renderScanline(int, int, int)+0x53e>
100040ae:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
100040b2:	3b 5c 24 4c          	cmp    ebx,DWORD PTR [esp+0x4c]
100040b6:	7d 48                	jge    10004100 <NIDesktop::renderScanline(int, int, int)+0x53e>
100040b8:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	100040ba: R_386_32	shadow
100040be:	3c 80                	cmp    al,0x80
100040c0:	74 3b                	je     100040fd <NIDesktop::renderScanline(int, int, int)+0x53b>
100040c2:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	100040c5: R_386_32	renderData
100040c9:	0f b6 f0             	movzx  esi,al
100040cc:	89 d1                	mov    ecx,edx
100040ce:	0f b6 c6             	movzx  eax,dh
100040d1:	c1 e9 10             	shr    ecx,0x10
100040d4:	0f af c6             	imul   eax,esi
100040d7:	0f b6 c9             	movzx  ecx,cl
100040da:	0f b6 d2             	movzx  edx,dl
100040dd:	0f af ce             	imul   ecx,esi
100040e0:	0f af d6             	imul   edx,esi
100040e3:	c1 e9 07             	shr    ecx,0x7
100040e6:	c1 e8 07             	shr    eax,0x7
100040e9:	c1 e1 10             	shl    ecx,0x10
100040ec:	c1 e0 08             	shl    eax,0x8
100040ef:	c1 ea 07             	shr    edx,0x7
100040f2:	09 c1                	or     ecx,eax
100040f4:	09 ca                	or     edx,ecx
100040f6:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	100040f9: R_386_32	renderData
100040fd:	43                   	inc    ebx
100040fe:	eb b2                	jmp    100040b2 <NIDesktop::renderScanline(int, int, int)+0x4f0>
10004100:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10004104:	83 ec 0c             	sub    esp,0xc
10004107:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000410a:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004110:	8b 10                	mov    edx,DWORD PTR [eax]
10004112:	68 00 00 00 00       	push   0x0	10004113: R_386_32	renderData
10004117:	6a 00                	push   0x0
10004119:	6a 01                	push   0x1
1000411b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000411f:	6a 00                	push   0x0
10004121:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10004125:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10004129:	ff 74 24 70          	push   DWORD PTR [esp+0x70]
1000412d:	50                   	push   eax
1000412e:	ff 52 38             	call   DWORD PTR [edx+0x38]
10004131:	83 c4 5c             	add    esp,0x5c
10004134:	5b                   	pop    ebx
10004135:	5e                   	pop    esi
10004136:	5f                   	pop    edi
10004137:	5d                   	pop    ebp
10004138:	c3                   	ret    
10004139:	90                   	nop

1000413a <NIDesktop::rangeRefresh(int, int, int, int)>:
1000413a:	53                   	push   ebx
1000413b:	83 ec 08             	sub    esp,0x8
1000413e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10004142:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
10004146:	7d 18                	jge    10004160 <NIDesktop::rangeRefresh(int, int, int, int)+0x26>
10004148:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000414c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10004150:	53                   	push   ebx
10004151:	43                   	inc    ebx
10004152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004156:	e8 fc ff ff ff       	call   10004157 <NIDesktop::rangeRefresh(int, int, int, int)+0x1d>	10004157: R_386_PC32	NIDesktop::renderScanline(int, int, int)
1000415b:	83 c4 10             	add    esp,0x10
1000415e:	eb e2                	jmp    10004142 <NIDesktop::rangeRefresh(int, int, int, int)+0x8>
10004160:	83 c4 08             	add    esp,0x8
10004163:	5b                   	pop    ebx
10004164:	c3                   	ret    
10004165:	90                   	nop

10004166 <NIDesktop::refreshWindowBounds(NIWindow*, int, int)>:
10004166:	55                   	push   ebp
10004167:	57                   	push   edi
10004168:	56                   	push   esi
10004169:	53                   	push   ebx
1000416a:	83 ec 28             	sub    esp,0x28
1000416d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10004171:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10004175:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004178:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000417b:	8d 4a 20             	lea    ecx,[edx+0x20]
1000417e:	51                   	push   ecx
1000417f:	52                   	push   edx
10004180:	8d 50 20             	lea    edx,[eax+0x20]
10004183:	52                   	push   edx
10004184:	50                   	push   eax
10004185:	53                   	push   ebx
10004186:	e8 fc ff ff ff       	call   10004187 <NIDesktop::refreshWindowBounds(NIWindow*, int, int)+0x21>	10004187: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000418b:	8b 86 08 02 00 00    	mov    eax,DWORD PTR [esi+0x208]
10004191:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
10004194:	8b 96 10 02 00 00    	mov    edx,DWORD PTR [esi+0x210]
1000419a:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
100041a0:	01 c2                	add    edx,eax
100041a2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
100041a6:	83 e9 05             	sub    ecx,0x5
100041a9:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
100041ad:	83 c4 20             	add    esp,0x20
100041b0:	8d 4a 05             	lea    ecx,[edx+0x5]
100041b3:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
100041b7:	7f 05                	jg     100041be <NIDesktop::refreshWindowBounds(NIWindow*, int, int)+0x58>
100041b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
100041bd:	49                   	dec    ecx
100041be:	8b 96 04 02 00 00    	mov    edx,DWORD PTR [esi+0x204]
100041c4:	89 d5                	mov    ebp,edx
100041c6:	83 fa 05             	cmp    edx,0x5
100041c9:	7d 05                	jge    100041d0 <NIDesktop::refreshWindowBounds(NIWindow*, int, int)+0x6a>
100041cb:	bd 05 00 00 00       	mov    ebp,0x5
100041d0:	03 96 0c 02 00 00    	add    edx,DWORD PTR [esi+0x20c]
100041d6:	83 ed 05             	sub    ebp,0x5
100041d9:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
100041df:	8d 77 fb             	lea    esi,[edi-0x5]
100041e2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
100041e6:	8d 72 05             	lea    esi,[edx+0x5]
100041e9:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
100041ed:	7f 03                	jg     100041f2 <NIDesktop::refreshWindowBounds(NIWindow*, int, int)+0x8c>
100041ef:	8d 77 ff             	lea    esi,[edi-0x1]
100041f2:	89 c2                	mov    edx,eax
100041f4:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
100041f9:	75 05                	jne    10004200 <NIDesktop::refreshWindowBounds(NIWindow*, int, int)+0x9a>
100041fb:	83 f8 05             	cmp    eax,0x5
100041fe:	eb 07                	jmp    10004207 <NIDesktop::refreshWindowBounds(NIWindow*, int, int)+0xa1>
10004200:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
10004204:	83 fa 05             	cmp    edx,0x5
10004207:	7d 05                	jge    1000420e <NIDesktop::refreshWindowBounds(NIWindow*, int, int)+0xa8>
10004209:	ba 05 00 00 00       	mov    edx,0x5
1000420e:	83 ea 05             	sub    edx,0x5
10004211:	83 7c 24 3c ff       	cmp    DWORD PTR [esp+0x3c],0xffffffff
10004216:	74 12                	je     1000422a <NIDesktop::refreshWindowBounds(NIWindow*, int, int)+0xc4>
10004218:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
1000421c:	8d 48 05             	lea    ecx,[eax+0x5]
1000421f:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
10004223:	7f 05                	jg     1000422a <NIDesktop::refreshWindowBounds(NIWindow*, int, int)+0xc4>
10004225:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10004229:	49                   	dec    ecx
1000422a:	83 ec 0c             	sub    esp,0xc
1000422d:	56                   	push   esi
1000422e:	55                   	push   ebp
1000422f:	51                   	push   ecx
10004230:	52                   	push   edx
10004231:	53                   	push   ebx
10004232:	e8 fc ff ff ff       	call   10004233 <NIDesktop::refreshWindowBounds(NIWindow*, int, int)+0xcd>	10004233: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004237:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000423a:	83 c4 14             	add    esp,0x14
1000423d:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004243:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004245:	6a 00                	push   0x0
10004247:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
1000424a:	05 00 00 00 00       	add    eax,0x0	1000424b: R_386_32	___mouse_data
1000424f:	50                   	push   eax
10004250:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004253:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004256:	52                   	push   edx
10004257:	ff 51 30             	call   DWORD PTR [ecx+0x30]
1000425a:	83 c4 3c             	add    esp,0x3c
1000425d:	5b                   	pop    ebx
1000425e:	5e                   	pop    esi
1000425f:	5f                   	pop    edi
10004260:	5d                   	pop    ebp
10004261:	c3                   	ret    

10004262 <NIDesktop::completeRefresh()>:
10004262:	56                   	push   esi
10004263:	31 f6                	xor    esi,esi
10004265:	53                   	push   ebx
10004266:	83 ec 10             	sub    esp,0x10
10004269:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
1000426d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004270:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004273:	8d 4a 20             	lea    ecx,[edx+0x20]
10004276:	51                   	push   ecx
10004277:	52                   	push   edx
10004278:	8d 50 20             	lea    edx,[eax+0x20]
1000427b:	52                   	push   edx
1000427c:	50                   	push   eax
1000427d:	53                   	push   ebx
1000427e:	e8 fc ff ff ff       	call   1000427f <NIDesktop::completeRefresh()+0x1d>	1000427f: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004283:	83 c4 20             	add    esp,0x20
10004286:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004289:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
1000428f:	7e 15                	jle    100042a6 <NIDesktop::completeRefresh()+0x44>
10004291:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
10004297:	6a 00                	push   0x0
10004299:	56                   	push   esi
1000429a:	46                   	inc    esi
1000429b:	53                   	push   ebx
1000429c:	e8 fc ff ff ff       	call   1000429d <NIDesktop::completeRefresh()+0x3b>	1000429d: R_386_PC32	NIDesktop::renderScanline(int, int, int)
100042a1:	83 c4 10             	add    esp,0x10
100042a4:	eb e0                	jmp    10004286 <NIDesktop::completeRefresh()+0x24>
100042a6:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
100042ac:	83 ec 0c             	sub    esp,0xc
100042af:	8b 0a                	mov    ecx,DWORD PTR [edx]
100042b1:	6a 00                	push   0x0
100042b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
100042b6:	05 00 00 00 00       	add    eax,0x0	100042b7: R_386_32	___mouse_data
100042bb:	50                   	push   eax
100042bc:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100042bf:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100042c2:	52                   	push   edx
100042c3:	ff 51 30             	call   DWORD PTR [ecx+0x30]
100042c6:	83 c4 24             	add    esp,0x24
100042c9:	5b                   	pop    ebx
100042ca:	5e                   	pop    esi
100042cb:	c3                   	ret    

100042cc <NIDesktop::addWindow(NIWindow*)>:
100042cc:	56                   	push   esi
100042cd:	53                   	push   ebx
100042ce:	83 ec 0c             	sub    esp,0xc
100042d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100042d5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
100042d9:	56                   	push   esi
100042da:	ff 33                	push   DWORD PTR [ebx]
100042dc:	e8 fc ff ff ff       	call   100042dd <NIDesktop::addWindow(NIWindow*)+0x11>	100042dd: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100042e1:	6a ff                	push   0xffffffff
100042e3:	6a ff                	push   0xffffffff
100042e5:	56                   	push   esi
100042e6:	53                   	push   ebx
100042e7:	e8 fc ff ff ff       	call   100042e8 <NIDesktop::addWindow(NIWindow*)+0x1c>	100042e8: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int)
100042ec:	83 c4 24             	add    esp,0x24
100042ef:	5b                   	pop    ebx
100042f0:	5e                   	pop    esi
100042f1:	c3                   	ret    

100042f2 <NIDesktop::raiseWindow(NIWindow*)>:
100042f2:	53                   	push   ebx
100042f3:	83 ec 10             	sub    esp,0x10
100042f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100042fa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100042fe:	50                   	push   eax
100042ff:	ff 33                	push   DWORD PTR [ebx]
10004301:	e8 fc ff ff ff       	call   10004302 <NIDesktop::raiseWindow(NIWindow*)+0x10>	10004302: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
10004306:	58                   	pop    eax
10004307:	5a                   	pop    edx
10004308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000430c:	ff 33                	push   DWORD PTR [ebx]
1000430e:	e8 fc ff ff ff       	call   1000430f <NIDesktop::raiseWindow(NIWindow*)+0x1d>	1000430f: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
10004313:	6a ff                	push   0xffffffff
10004315:	6a ff                	push   0xffffffff
10004317:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000431b:	53                   	push   ebx
1000431c:	e8 fc ff ff ff       	call   1000431d <NIDesktop::raiseWindow(NIWindow*)+0x2b>	1000431d: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int)
10004321:	83 c4 28             	add    esp,0x28
10004324:	5b                   	pop    ebx
10004325:	c3                   	ret    

10004326 <NIDesktop::deleteWindow(NIWindow*)>:
10004326:	53                   	push   ebx
10004327:	83 ec 10             	sub    esp,0x10
1000432a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000432e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10004332:	50                   	push   eax
10004333:	ff 33                	push   DWORD PTR [ebx]
10004335:	e8 fc ff ff ff       	call   10004336 <NIDesktop::deleteWindow(NIWindow*)+0x10>	10004336: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
1000433a:	6a ff                	push   0xffffffff
1000433c:	6a ff                	push   0xffffffff
1000433e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10004342:	53                   	push   ebx
10004343:	e8 fc ff ff ff       	call   10004344 <NIDesktop::deleteWindow(NIWindow*)+0x1e>	10004344: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int)
10004348:	83 c4 28             	add    esp,0x28
1000434b:	5b                   	pop    ebx
1000434c:	c3                   	ret    
1000434d:	90                   	nop

1000434e <NIDesktop::handleMouse(int, int, int, int)>:
1000434e:	55                   	push   ebp
1000434f:	57                   	push   edi
10004350:	56                   	push   esi
10004351:	53                   	push   ebx
10004352:	81 ec 98 00 00 00    	sub    esp,0x98
10004358:	8b 9c 24 ac 00 00 00 	mov    ebx,DWORD PTR [esp+0xac]
1000435f:	8b bc 24 b0 00 00 00 	mov    edi,DWORD PTR [esp+0xb0]
10004366:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004369:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000436c:	8d 4a 20             	lea    ecx,[edx+0x20]
1000436f:	51                   	push   ecx
10004370:	52                   	push   edx
10004371:	8d 50 20             	lea    edx,[eax+0x20]
10004374:	52                   	push   edx
10004375:	50                   	push   eax
10004376:	53                   	push   ebx
10004377:	e8 fc ff ff ff       	call   10004378 <NIDesktop::handleMouse(int, int, int, int)+0x2a>	10004378: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000437c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
1000437f:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10004386:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000438a:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
1000438d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004390:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
10004393:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004397:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000439b:	8d 14 38             	lea    edx,[eax+edi*1]
1000439e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100043a2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
100043a5:	03 84 24 c8 00 00 00 	add    eax,DWORD PTR [esp+0xc8]
100043ac:	83 c4 20             	add    esp,0x20
100043af:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
100043b2:	85 d2                	test   edx,edx
100043b4:	79 07                	jns    100043bd <NIDesktop::handleMouse(int, int, int, int)+0x6f>
100043b6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
100043bd:	85 c0                	test   eax,eax
100043bf:	79 07                	jns    100043c8 <NIDesktop::handleMouse(int, int, int, int)+0x7a>
100043c1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
100043c8:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100043cb:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
100043d1:	3b 43 08             	cmp    eax,DWORD PTR [ebx+0x8]
100043d4:	7f 04                	jg     100043da <NIDesktop::handleMouse(int, int, int, int)+0x8c>
100043d6:	48                   	dec    eax
100043d7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
100043da:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
100043e0:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
100043e3:	7f 04                	jg     100043e9 <NIDesktop::handleMouse(int, int, int, int)+0x9b>
100043e5:	48                   	dec    eax
100043e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
100043e9:	52                   	push   edx
100043ea:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100043ed:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100043f0:	53                   	push   ebx
100043f1:	e8 fc ff ff ff       	call   100043f2 <NIDesktop::handleMouse(int, int, int, int)+0xa4>	100043f2: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
100043f6:	83 c4 10             	add    esp,0x10
100043f9:	89 c5                	mov    ebp,eax
100043fb:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
10004402:	83 e0 01             	and    eax,0x1
10004405:	85 ed                	test   ebp,ebp
10004407:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000440b:	74 5a                	je     10004467 <NIDesktop::handleMouse(int, int, int, int)+0x119>
1000440d:	0b bc 24 a8 00 00 00 	or     edi,DWORD PTR [esp+0xa8]
10004414:	74 11                	je     10004427 <NIDesktop::handleMouse(int, int, int, int)+0xd9>
10004416:	83 f8 01             	cmp    eax,0x1
10004419:	8d 74 24 44          	lea    esi,[esp+0x44]
1000441d:	19 d2                	sbb    edx,edx
1000441f:	6a 00                	push   0x0
10004421:	83 c2 05             	add    edx,0x5
10004424:	52                   	push   edx
10004425:	eb 24                	jmp    1000444b <NIDesktop::handleMouse(int, int, int, int)+0xfd>
10004427:	83 e6 01             	and    esi,0x1
1000442a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000442f:	74 0e                	je     1000443f <NIDesktop::handleMouse(int, int, int, int)+0xf1>
10004431:	85 f6                	test   esi,esi
10004433:	75 32                	jne    10004467 <NIDesktop::handleMouse(int, int, int, int)+0x119>
10004435:	8d 74 24 58          	lea    esi,[esp+0x58]
10004439:	6a 00                	push   0x0
1000443b:	6a 06                	push   0x6
1000443d:	eb 0c                	jmp    1000444b <NIDesktop::handleMouse(int, int, int, int)+0xfd>
1000443f:	85 f6                	test   esi,esi
10004441:	74 24                	je     10004467 <NIDesktop::handleMouse(int, int, int, int)+0x119>
10004443:	8d 74 24 6c          	lea    esi,[esp+0x6c]
10004447:	6a 00                	push   0x0
10004449:	6a 07                	push   0x7
1000444b:	55                   	push   ebp
1000444c:	56                   	push   esi
1000444d:	e8 fc ff ff ff       	call   1000444e <NIDesktop::handleMouse(int, int, int, int)+0x100>	1000444e: R_386_PC32	NiCreateEvent(NIWindow*, int, bool)
10004452:	b9 05 00 00 00       	mov    ecx,0x5
10004457:	83 ec 20             	sub    esp,0x20
1000445a:	89 e7                	mov    edi,esp
1000445c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000445e:	55                   	push   ebp
1000445f:	e8 fc ff ff ff       	call   10004460 <NIDesktop::handleMouse(int, int, int, int)+0x112>	10004460: R_386_PC32	NIWindow::postEvent(NiEvent)
10004464:	83 c4 30             	add    esp,0x30
10004467:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004469: R_386_32	movingWin
1000446e:	0f 84 10 02 00 00    	je     10004684 <NIDesktop::handleMouse(int, int, int, int)+0x336>
10004474:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	10004476: R_386_32	movingType
1000447b:	0f 85 03 02 00 00    	jne    10004684 <NIDesktop::handleMouse(int, int, int, int)+0x336>
10004481:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
10004486:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000448b:	75 0c                	jne    10004499 <NIDesktop::handleMouse(int, int, int, int)+0x14b>
1000448d:	a0 78 93 03 10       	mov    al,ds:0x10039378	1000448e: R_386_32	.bss
10004492:	83 e0 01             	and    eax,0x1
10004495:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
10004499:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
100044a1:	a1 00 00 00 00       	mov    eax,ds:0x0	100044a2: R_386_32	movingWin
100044a6:	8b b8 10 02 00 00    	mov    edi,DWORD PTR [eax+0x210]
100044ac:	8d 57 ff             	lea    edx,[edi-0x1]
100044af:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
100044b3:	0f 8e b6 00 00 00    	jle    1000456f <NIDesktop::handleMouse(int, int, int, int)+0x221>
100044b9:	be 01 00 00 00       	mov    esi,0x1
100044be:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100044c0: R_386_32	movingWin
100044c4:	8b 92 0c 02 00 00    	mov    edx,DWORD PTR [edx+0x20c]
100044ca:	4a                   	dec    edx
100044cb:	39 f2                	cmp    edx,esi
100044cd:	0f 8e 93 00 00 00    	jle    10004566 <NIDesktop::handleMouse(int, int, int, int)+0x218>
100044d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100044d7:	8d 14 30             	lea    edx,[eax+esi*1]
100044da:	89 c1                	mov    ecx,eax
100044dc:	83 e2 1f             	and    edx,0x1f
100044df:	83 e1 03             	and    ecx,0x3
100044e2:	09 ca                	or     edx,ecx
100044e4:	75 7a                	jne    10004560 <NIDesktop::handleMouse(int, int, int, int)+0x212>
100044e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100044ea:	2b 15 74 93 03 10    	sub    edx,DWORD PTR ds:0x10039374	100044ec: R_386_32	.bss
100044f0:	01 f2                	add    edx,esi
100044f2:	78 2d                	js     10004521 <NIDesktop::handleMouse(int, int, int, int)+0x1d3>
100044f4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
100044f7:	3b 91 0c 04 00 00    	cmp    edx,DWORD PTR [ecx+0x40c]
100044fd:	7d 22                	jge    10004521 <NIDesktop::handleMouse(int, int, int, int)+0x1d3>
100044ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004503:	8d 7a 01             	lea    edi,[edx+0x1]
10004506:	83 ec 0c             	sub    esp,0xc
10004509:	2b 0d 70 93 03 10    	sub    ecx,DWORD PTR ds:0x10039370	1000450b: R_386_32	.bss
1000450f:	57                   	push   edi
10004510:	01 c1                	add    ecx,eax
10004512:	52                   	push   edx
10004513:	8d 51 01             	lea    edx,[ecx+0x1]
10004516:	52                   	push   edx
10004517:	51                   	push   ecx
10004518:	53                   	push   ebx
10004519:	e8 fc ff ff ff       	call   1000451a <NIDesktop::handleMouse(int, int, int, int)+0x1cc>	1000451a: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000451e:	83 c4 20             	add    esp,0x20
10004521:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
10004526:	75 38                	jne    10004560 <NIDesktop::handleMouse(int, int, int, int)+0x212>
10004528:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000452b:	01 f2                	add    edx,esi
1000452d:	2b 15 74 93 03 10    	sub    edx,DWORD PTR ds:0x10039374	1000452f: R_386_32	.bss
10004533:	78 2b                	js     10004560 <NIDesktop::handleMouse(int, int, int, int)+0x212>
10004535:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
10004538:	3b 91 0c 04 00 00    	cmp    edx,DWORD PTR [ecx+0x40c]
1000453e:	7d 20                	jge    10004560 <NIDesktop::handleMouse(int, int, int, int)+0x212>
10004540:	8b b9 08 04 00 00    	mov    edi,DWORD PTR [ecx+0x408]
10004546:	8b 07                	mov    eax,DWORD PTR [edi]
10004548:	6a 00                	push   0x0
1000454a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
1000454e:	03 4b 0c             	add    ecx,DWORD PTR [ebx+0xc]
10004551:	2b 0d 70 93 03 10    	sub    ecx,DWORD PTR ds:0x10039370	10004553: R_386_32	.bss
10004557:	51                   	push   ecx
10004558:	52                   	push   edx
10004559:	57                   	push   edi
1000455a:	ff 50 24             	call   DWORD PTR [eax+0x24]
1000455d:	83 c4 10             	add    esp,0x10
10004560:	46                   	inc    esi
10004561:	e9 58 ff ff ff       	jmp    100044be <NIDesktop::handleMouse(int, int, int, int)+0x170>
10004566:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
1000456a:	e9 32 ff ff ff       	jmp    100044a1 <NIDesktop::handleMouse(int, int, int, int)+0x153>
1000456f:	8b 0d 74 93 03 10    	mov    ecx,DWORD PTR ds:0x10039374	10004571: R_386_32	.bss
10004575:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
10004578:	29 ce                	sub    esi,ecx
1000457a:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
1000457f:	0f 85 b7 07 00 00    	jne    10004d3c <NIDesktop::handleMouse(int, int, int, int)+0x9ee>
10004585:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
10004589:	85 f6                	test   esi,esi
1000458b:	79 08                	jns    10004595 <NIDesktop::handleMouse(int, int, int, int)+0x247>
1000458d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
10004595:	8b b8 0c 02 00 00    	mov    edi,DWORD PTR [eax+0x20c]
1000459b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000459e:	01 fe                	add    esi,edi
100045a0:	8b 92 0c 04 00 00    	mov    edx,DWORD PTR [edx+0x40c]
100045a6:	39 d6                	cmp    esi,edx
100045a8:	7d 06                	jge    100045b0 <NIDesktop::handleMouse(int, int, int, int)+0x262>
100045aa:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
100045ae:	eb 0c                	jmp    100045bc <NIDesktop::handleMouse(int, int, int, int)+0x26e>
100045b0:	89 d6                	mov    esi,edx
100045b2:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
100045b6:	0f 88 c8 00 00 00    	js     10004684 <NIDesktop::handleMouse(int, int, int, int)+0x336>
100045bc:	85 f6                	test   esi,esi
100045be:	0f 84 c0 00 00 00    	je     10004684 <NIDesktop::handleMouse(int, int, int, int)+0x336>
100045c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100045c8:	29 c8                	sub    eax,ecx
100045ca:	89 c1                	mov    ecx,eax
100045cc:	79 02                	jns    100045d0 <NIDesktop::handleMouse(int, int, int, int)+0x282>
100045ce:	31 c0                	xor    eax,eax
100045d0:	01 cf                	add    edi,ecx
100045d2:	39 fa                	cmp    edx,edi
100045d4:	7e 04                	jle    100045da <NIDesktop::handleMouse(int, int, int, int)+0x28c>
100045d6:	29 c7                	sub    edi,eax
100045d8:	eb 08                	jmp    100045e2 <NIDesktop::handleMouse(int, int, int, int)+0x294>
100045da:	89 d7                	mov    edi,edx
100045dc:	29 c7                	sub    edi,eax
100045de:	79 02                	jns    100045e2 <NIDesktop::handleMouse(int, int, int, int)+0x294>
100045e0:	31 ff                	xor    edi,edi
100045e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100045e6:	01 c7                	add    edi,eax
100045e8:	83 ec 0c             	sub    esp,0xc
100045eb:	2b 15 70 93 03 10    	sub    edx,DWORD PTR ds:0x10039370	100045ed: R_386_32	.bss
100045f1:	57                   	push   edi
100045f2:	8d 4a 01             	lea    ecx,[edx+0x1]
100045f5:	50                   	push   eax
100045f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100045fa:	51                   	push   ecx
100045fb:	52                   	push   edx
100045fc:	53                   	push   ebx
100045fd:	e8 fc ff ff ff       	call   100045fe <NIDesktop::handleMouse(int, int, int, int)+0x2b0>	100045fe: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004602:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
10004606:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004608: R_386_32	movingWin
1000460c:	83 c4 14             	add    esp,0x14
1000460f:	2b 15 70 93 03 10    	sub    edx,DWORD PTR ds:0x10039370	10004611: R_386_32	.bss
10004615:	03 91 10 02 00 00    	add    edx,DWORD PTR [ecx+0x210]
1000461b:	57                   	push   edi
1000461c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10004620:	50                   	push   eax
10004621:	52                   	push   edx
10004622:	4a                   	dec    edx
10004623:	52                   	push   edx
10004624:	53                   	push   ebx
10004625:	e8 fc ff ff ff       	call   10004626 <NIDesktop::handleMouse(int, int, int, int)+0x2d8>	10004626: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000462a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000462d:	83 c4 18             	add    esp,0x18
10004630:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10004636:	8b 39                	mov    edi,DWORD PTR [ecx]
10004638:	6a 00                	push   0x0
1000463a:	6a 01                	push   0x1
1000463c:	56                   	push   esi
1000463d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004640:	2b 15 70 93 03 10    	sub    edx,DWORD PTR ds:0x10039370	10004642: R_386_32	.bss
10004646:	52                   	push   edx
10004647:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
1000464b:	51                   	push   ecx
1000464c:	ff 57 28             	call   DWORD PTR [edi+0x28]
1000464f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004652:	83 c4 18             	add    esp,0x18
10004655:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
1000465b:	8b 39                	mov    edi,DWORD PTR [ecx]
1000465d:	6a 00                	push   0x0
1000465f:	6a 01                	push   0x1
10004661:	56                   	push   esi
10004662:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10004664: R_386_32	movingWin
10004668:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
1000466b:	2b 15 70 93 03 10    	sub    edx,DWORD PTR ds:0x10039370	1000466d: R_386_32	.bss
10004671:	03 96 10 02 00 00    	add    edx,DWORD PTR [esi+0x210]
10004677:	4a                   	dec    edx
10004678:	52                   	push   edx
10004679:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
1000467d:	51                   	push   ecx
1000467e:	ff 57 28             	call   DWORD PTR [edi+0x28]
10004681:	83 c4 20             	add    esp,0x20
10004684:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004686: R_386_32	movingWin
1000468a:	85 d2                	test   edx,edx
1000468c:	0f 84 3f 03 00 00    	je     100049d1 <NIDesktop::handleMouse(int, int, int, int)+0x683>
10004692:	a1 00 00 00 00       	mov    eax,ds:0x0	10004693: R_386_32	movingType
10004697:	8d 48 fe             	lea    ecx,[eax-0x2]
1000469a:	83 f9 02             	cmp    ecx,0x2
1000469d:	0f 87 2e 03 00 00    	ja     100049d1 <NIDesktop::handleMouse(int, int, int, int)+0x683>
100046a3:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
100046a8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
100046ad:	75 0d                	jne    100046bc <NIDesktop::handleMouse(int, int, int, int)+0x36e>
100046af:	8a 0d 78 93 03 10    	mov    cl,BYTE PTR ds:0x10039378	100046b1: R_386_32	.bss
100046b5:	83 e1 01             	and    ecx,0x1
100046b8:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
100046bc:	8b b2 0c 02 00 00    	mov    esi,DWORD PTR [edx+0x20c]
100046c2:	8b ba 10 02 00 00    	mov    edi,DWORD PTR [edx+0x210]
100046c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100046cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100046d0:	01 f1                	add    ecx,esi
100046d2:	01 fa                	add    edx,edi
100046d4:	2b 0d 74 93 03 10    	sub    ecx,DWORD PTR ds:0x10039374	100046d6: R_386_32	.bss
100046da:	2b 15 70 93 03 10    	sub    edx,DWORD PTR ds:0x10039370	100046dc: R_386_32	.bss
100046e0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
100046e4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
100046e8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
100046eb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100046ee:	01 f1                	add    ecx,esi
100046f0:	01 fa                	add    edx,edi
100046f2:	2b 0d 74 93 03 10    	sub    ecx,DWORD PTR ds:0x10039374	100046f4: R_386_32	.bss
100046f8:	2b 15 70 93 03 10    	sub    edx,DWORD PTR ds:0x10039370	100046fa: R_386_32	.bss
100046fe:	83 f8 03             	cmp    eax,0x3
10004701:	74 0d                	je     10004710 <NIDesktop::handleMouse(int, int, int, int)+0x3c2>
10004703:	83 f8 04             	cmp    eax,0x4
10004706:	75 0e                	jne    10004716 <NIDesktop::handleMouse(int, int, int, int)+0x3c8>
10004708:	89 fa                	mov    edx,edi
1000470a:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
1000470e:	eb 06                	jmp    10004716 <NIDesktop::handleMouse(int, int, int, int)+0x3c8>
10004710:	89 f1                	mov    ecx,esi
10004712:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10004716:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000471a:	83 f9 32             	cmp    ecx,0x32
1000471d:	7d 08                	jge    10004727 <NIDesktop::handleMouse(int, int, int, int)+0x3d9>
1000471f:	c7 44 24 0c 32 00 00 00 	mov    DWORD PTR [esp+0xc],0x32
10004727:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
1000472b:	83 fa 32             	cmp    edx,0x32
1000472e:	7d 08                	jge    10004738 <NIDesktop::handleMouse(int, int, int, int)+0x3ea>
10004730:	c7 44 24 14 32 00 00 00 	mov    DWORD PTR [esp+0x14],0x32
10004738:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000473c:	83 f8 32             	cmp    eax,0x32
1000473f:	7d 08                	jge    10004749 <NIDesktop::handleMouse(int, int, int, int)+0x3fb>
10004741:	c7 44 24 18 32 00 00 00 	mov    DWORD PTR [esp+0x18],0x32
10004749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000474d:	83 f8 32             	cmp    eax,0x32
10004750:	7d 08                	jge    1000475a <NIDesktop::handleMouse(int, int, int, int)+0x40c>
10004752:	c7 44 24 10 32 00 00 00 	mov    DWORD PTR [esp+0x10],0x32
1000475a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000475e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10004762:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10004766:	7d 08                	jge    10004770 <NIDesktop::handleMouse(int, int, int, int)+0x422>
10004768:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000476c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10004770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004774:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10004778:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
1000477c:	7d 08                	jge    10004786 <NIDesktop::handleMouse(int, int, int, int)+0x438>
1000477e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004782:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10004786:	be 01 00 00 00       	mov    esi,0x1
1000478b:	b8 01 00 00 00       	mov    eax,0x1
10004790:	8d 14 06             	lea    edx,[esi+eax*1]
10004793:	89 f1                	mov    ecx,esi
10004795:	83 e2 1f             	and    edx,0x1f
10004798:	83 e1 03             	and    ecx,0x3
1000479b:	09 ca                	or     edx,ecx
1000479d:	0f 85 a9 00 00 00    	jne    1000484c <NIDesktop::handleMouse(int, int, int, int)+0x4fe>
100047a3:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	100047a5: R_386_32	movingWin
100047a9:	8b 8f 04 02 00 00    	mov    ecx,DWORD PTR [edi+0x204]
100047af:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
100047b3:	01 c1                	add    ecx,eax
100047b5:	78 37                	js     100047ee <NIDesktop::handleMouse(int, int, int, int)+0x4a0>
100047b7:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100047ba:	3b 8a 0c 04 00 00    	cmp    ecx,DWORD PTR [edx+0x40c]
100047c0:	7d 2c                	jge    100047ee <NIDesktop::handleMouse(int, int, int, int)+0x4a0>
100047c2:	83 ec 0c             	sub    esp,0xc
100047c5:	8b bf 08 02 00 00    	mov    edi,DWORD PTR [edi+0x208]
100047cb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
100047cf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100047d3:	8d 54 02 01          	lea    edx,[edx+eax*1+0x1]
100047d7:	52                   	push   edx
100047d8:	8d 54 37 01          	lea    edx,[edi+esi*1+0x1]
100047dc:	51                   	push   ecx
100047dd:	01 f7                	add    edi,esi
100047df:	52                   	push   edx
100047e0:	57                   	push   edi
100047e1:	53                   	push   ebx
100047e2:	e8 fc ff ff ff       	call   100047e3 <NIDesktop::handleMouse(int, int, int, int)+0x495>	100047e3: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100047e7:	83 c4 20             	add    esp,0x20
100047ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100047ee:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
100047f2:	83 f1 01             	xor    ecx,0x1
100047f5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
100047f9:	0f 9f c2             	setg   dl
100047fc:	84 d1                	test   cl,dl
100047fe:	74 4c                	je     1000484c <NIDesktop::handleMouse(int, int, int, int)+0x4fe>
10004800:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10004804:	7e 46                	jle    1000484c <NIDesktop::handleMouse(int, int, int, int)+0x4fe>
10004806:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004808: R_386_32	movingWin
1000480c:	89 c7                	mov    edi,eax
1000480e:	03 ba 04 02 00 00    	add    edi,DWORD PTR [edx+0x204]
10004814:	78 36                	js     1000484c <NIDesktop::handleMouse(int, int, int, int)+0x4fe>
10004816:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
10004819:	3b b9 0c 04 00 00    	cmp    edi,DWORD PTR [ecx+0x40c]
1000481f:	7d 2b                	jge    1000484c <NIDesktop::handleMouse(int, int, int, int)+0x4fe>
10004821:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10004825:	8b 89 08 04 00 00    	mov    ecx,DWORD PTR [ecx+0x408]
1000482b:	8b 01                	mov    eax,DWORD PTR [ecx]
1000482d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10004831:	6a 00                	push   0x0
10004833:	8b 82 08 02 00 00    	mov    eax,DWORD PTR [edx+0x208]
10004839:	01 f0                	add    eax,esi
1000483b:	50                   	push   eax
1000483c:	57                   	push   edi
1000483d:	51                   	push   ecx
1000483e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004842:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004845:	83 c4 10             	add    esp,0x10
10004848:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000484c:	40                   	inc    eax
1000484d:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
10004851:	0f 85 39 ff ff ff    	jne    10004790 <NIDesktop::handleMouse(int, int, int, int)+0x442>
10004857:	46                   	inc    esi
10004858:	3b 74 24 24          	cmp    esi,DWORD PTR [esp+0x24]
1000485c:	0f 85 29 ff ff ff    	jne    1000478b <NIDesktop::handleMouse(int, int, int, int)+0x43d>
10004862:	a1 00 00 00 00       	mov    eax,ds:0x0	10004863: R_386_32	movingWin
10004867:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
1000486c:	0f 85 47 04 00 00    	jne    10004cb9 <NIDesktop::handleMouse(int, int, int, int)+0x96b>
10004872:	8b 88 04 02 00 00    	mov    ecx,DWORD PTR [eax+0x204]
10004878:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
1000487c:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
10004882:	8d 34 39             	lea    esi,[ecx+edi*1]
10004885:	85 c9                	test   ecx,ecx
10004887:	8d 7a 01             	lea    edi,[edx+0x1]
1000488a:	0f 89 a3 00 00 00    	jns    10004933 <NIDesktop::handleMouse(int, int, int, int)+0x5e5>
10004890:	83 ec 0c             	sub    esp,0xc
10004893:	56                   	push   esi
10004894:	6a 00                	push   0x0
10004896:	57                   	push   edi
10004897:	52                   	push   edx
10004898:	53                   	push   ebx
10004899:	e8 fc ff ff ff       	call   1000489a <NIDesktop::handleMouse(int, int, int, int)+0x54c>	1000489a: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000489e:	83 c4 18             	add    esp,0x18
100048a1:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100048a4:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100048a6: R_386_32	movingWin
100048aa:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
100048b0:	8b 32                	mov    esi,DWORD PTR [edx]
100048b2:	6a 00                	push   0x0
100048b4:	6a 01                	push   0x1
100048b6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100048ba:	03 b9 04 02 00 00    	add    edi,DWORD PTR [ecx+0x204]
100048c0:	57                   	push   edi
100048c1:	ff b1 08 02 00 00    	push   DWORD PTR [ecx+0x208]
100048c7:	6a 00                	push   0x0
100048c9:	52                   	push   edx
100048ca:	ff 56 28             	call   DWORD PTR [esi+0x28]
100048cd:	83 c4 14             	add    esp,0x14
100048d0:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100048d2: R_386_32	movingWin
100048d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100048da:	8b 8a 08 02 00 00    	mov    ecx,DWORD PTR [edx+0x208]
100048e0:	03 82 04 02 00 00    	add    eax,DWORD PTR [edx+0x204]
100048e6:	50                   	push   eax
100048e7:	6a 00                	push   0x0
100048e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100048ed:	8d 54 01 01          	lea    edx,[ecx+eax*1+0x1]
100048f1:	52                   	push   edx
100048f2:	03 4c 24 28          	add    ecx,DWORD PTR [esp+0x28]
100048f6:	51                   	push   ecx
100048f7:	53                   	push   ebx
100048f8:	e8 fc ff ff ff       	call   100048f9 <NIDesktop::handleMouse(int, int, int, int)+0x5ab>	100048f9: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100048fd:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004900:	83 c4 18             	add    esp,0x18
10004903:	8b b2 08 04 00 00    	mov    esi,DWORD PTR [edx+0x408]
10004909:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000490b: R_386_32	movingWin
1000490f:	8b 3e                	mov    edi,DWORD PTR [esi]
10004911:	6a 00                	push   0x0
10004913:	6a 01                	push   0x1
10004915:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10004919:	03 8a 04 02 00 00    	add    ecx,DWORD PTR [edx+0x204]
1000491f:	51                   	push   ecx
10004920:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004924:	03 82 08 02 00 00    	add    eax,DWORD PTR [edx+0x208]
1000492a:	50                   	push   eax
1000492b:	6a 00                	push   0x0
1000492d:	56                   	push   esi
1000492e:	e9 98 00 00 00       	jmp    100049cb <NIDesktop::handleMouse(int, int, int, int)+0x67d>
10004933:	83 ec 0c             	sub    esp,0xc
10004936:	56                   	push   esi
10004937:	51                   	push   ecx
10004938:	57                   	push   edi
10004939:	52                   	push   edx
1000493a:	53                   	push   ebx
1000493b:	e8 fc ff ff ff       	call   1000493c <NIDesktop::handleMouse(int, int, int, int)+0x5ee>	1000493c: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004940:	83 c4 18             	add    esp,0x18
10004943:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004946:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004948: R_386_32	movingWin
1000494c:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
10004952:	8b 32                	mov    esi,DWORD PTR [edx]
10004954:	6a 00                	push   0x0
10004956:	6a 01                	push   0x1
10004958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000495c:	ff b1 08 02 00 00    	push   DWORD PTR [ecx+0x208]
10004962:	ff b1 04 02 00 00    	push   DWORD PTR [ecx+0x204]
10004968:	52                   	push   edx
10004969:	ff 56 28             	call   DWORD PTR [esi+0x28]
1000496c:	83 c4 14             	add    esp,0x14
1000496f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004971: R_386_32	movingWin
10004975:	8b b2 04 02 00 00    	mov    esi,DWORD PTR [edx+0x204]
1000497b:	8b 8a 08 02 00 00    	mov    ecx,DWORD PTR [edx+0x208]
10004981:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10004985:	01 f2                	add    edx,esi
10004987:	52                   	push   edx
10004988:	56                   	push   esi
10004989:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
1000498d:	8d 54 01 01          	lea    edx,[ecx+eax*1+0x1]
10004991:	52                   	push   edx
10004992:	03 4c 24 28          	add    ecx,DWORD PTR [esp+0x28]
10004996:	51                   	push   ecx
10004997:	53                   	push   ebx
10004998:	e8 fc ff ff ff       	call   10004999 <NIDesktop::handleMouse(int, int, int, int)+0x64b>	10004999: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000499d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100049a0:	83 c4 18             	add    esp,0x18
100049a3:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
100049a9:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	100049ab: R_386_32	movingWin
100049af:	8b 39                	mov    edi,DWORD PTR [ecx]
100049b1:	6a 00                	push   0x0
100049b3:	6a 01                	push   0x1
100049b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100049b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
100049bd:	03 96 08 02 00 00    	add    edx,DWORD PTR [esi+0x208]
100049c3:	52                   	push   edx
100049c4:	ff b6 04 02 00 00    	push   DWORD PTR [esi+0x204]
100049ca:	51                   	push   ecx
100049cb:	ff 57 28             	call   DWORD PTR [edi+0x28]
100049ce:	83 c4 20             	add    esp,0x20
100049d1:	85 ed                	test   ebp,ebp
100049d3:	0f 84 a6 02 00 00    	je     10004c7f <NIDesktop::handleMouse(int, int, int, int)+0x931>
100049d9:	f6 84 24 ac 00 00 00 01 	test   BYTE PTR [esp+0xac],0x1
100049e1:	0f 84 98 02 00 00    	je     10004c7f <NIDesktop::handleMouse(int, int, int, int)+0x931>
100049e7:	8b 15 78 93 03 10    	mov    edx,DWORD PTR ds:0x10039378	100049e9: R_386_32	.bss
100049ed:	83 e2 01             	and    edx,0x1
100049f0:	0f 85 55 01 00 00    	jne    10004b4b <NIDesktop::handleMouse(int, int, int, int)+0x7fd>
100049f6:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	100049f8: R_386_32	milliTenthsSinceBoot
100049fc:	8b 3d 04 00 00 00    	mov    edi,DWORD PTR ds:0x4	100049fe: R_386_32	milliTenthsSinceBoot
10004a02:	2b 35 68 93 03 10    	sub    esi,DWORD PTR ds:0x10039368	10004a04: R_386_32	.bss
10004a08:	b9 b7 0b 00 00       	mov    ecx,0xbb7
10004a0d:	1b 3d 6c 93 03 10    	sbb    edi,DWORD PTR ds:0x1003936c	10004a0f: R_386_32	.bss
10004a13:	39 f1                	cmp    ecx,esi
10004a15:	19 fa                	sbb    edx,edi
10004a17:	0f 82 ff 00 00 00    	jb     10004b1c <NIDesktop::handleMouse(int, int, int, int)+0x7ce>
10004a1d:	8b 8d 08 02 00 00    	mov    ecx,DWORD PTR [ebp+0x208]
10004a23:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004a26:	29 ca                	sub    edx,ecx
10004a28:	83 fa 18             	cmp    edx,0x18
10004a2b:	0f 8f eb 00 00 00    	jg     10004b1c <NIDesktop::handleMouse(int, int, int, int)+0x7ce>
10004a31:	f6 85 28 02 00 00 01 	test   BYTE PTR [ebp+0x228],0x1
10004a38:	0f 85 de 00 00 00    	jne    10004b1c <NIDesktop::handleMouse(int, int, int, int)+0x7ce>
10004a3e:	80 bd 14 02 00 00 00 	cmp    BYTE PTR [ebp+0x214],0x0
10004a45:	74 3e                	je     10004a85 <NIDesktop::handleMouse(int, int, int, int)+0x737>
10004a47:	8b 95 18 02 00 00    	mov    edx,DWORD PTR [ebp+0x218]
10004a4d:	89 95 04 02 00 00    	mov    DWORD PTR [ebp+0x204],edx
10004a53:	8b 95 1c 02 00 00    	mov    edx,DWORD PTR [ebp+0x21c]
10004a59:	89 95 08 02 00 00    	mov    DWORD PTR [ebp+0x208],edx
10004a5f:	8b 95 20 02 00 00    	mov    edx,DWORD PTR [ebp+0x220]
10004a65:	89 95 0c 02 00 00    	mov    DWORD PTR [ebp+0x20c],edx
10004a6b:	8b 95 24 02 00 00    	mov    edx,DWORD PTR [ebp+0x224]
10004a71:	89 95 10 02 00 00    	mov    DWORD PTR [ebp+0x210],edx
10004a77:	50                   	push   eax
10004a78:	50                   	push   eax
10004a79:	55                   	push   ebp
10004a7a:	53                   	push   ebx
10004a7b:	e8 fc ff ff ff       	call   10004a7c <NIDesktop::handleMouse(int, int, int, int)+0x72e>	10004a7c: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
10004a80:	83 c4 10             	add    esp,0x10
10004a83:	eb 5c                	jmp    10004ae1 <NIDesktop::handleMouse(int, int, int, int)+0x793>
10004a85:	89 8d 1c 02 00 00    	mov    DWORD PTR [ebp+0x21c],ecx
10004a8b:	c7 85 08 02 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x208],0x0
10004a95:	8b 95 04 02 00 00    	mov    edx,DWORD PTR [ebp+0x204]
10004a9b:	c7 85 04 02 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x204],0x0
10004aa5:	89 95 18 02 00 00    	mov    DWORD PTR [ebp+0x218],edx
10004aab:	8b 95 0c 02 00 00    	mov    edx,DWORD PTR [ebp+0x20c]
10004ab1:	89 95 20 02 00 00    	mov    DWORD PTR [ebp+0x220],edx
10004ab7:	8b 95 10 02 00 00    	mov    edx,DWORD PTR [ebp+0x210]
10004abd:	89 95 24 02 00 00    	mov    DWORD PTR [ebp+0x224],edx
10004ac3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004ac6:	8b 92 0c 04 00 00    	mov    edx,DWORD PTR [edx+0x40c]
10004acc:	89 95 0c 02 00 00    	mov    DWORD PTR [ebp+0x20c],edx
10004ad2:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004ad5:	8b 92 10 04 00 00    	mov    edx,DWORD PTR [edx+0x410]
10004adb:	89 95 10 02 00 00    	mov    DWORD PTR [ebp+0x210],edx
10004ae1:	80 b5 14 02 00 00 01 	xor    BYTE PTR [ebp+0x214],0x1
10004ae8:	8d 74 24 30          	lea    esi,[esp+0x30]
10004aec:	6a 01                	push   0x1
10004aee:	6a 01                	push   0x1
10004af0:	55                   	push   ebp
10004af1:	56                   	push   esi
10004af2:	e8 fc ff ff ff       	call   10004af3 <NIDesktop::handleMouse(int, int, int, int)+0x7a5>	10004af3: R_386_PC32	NiCreateEvent(NIWindow*, int, bool)
10004af7:	b9 05 00 00 00       	mov    ecx,0x5
10004afc:	83 ec 20             	sub    esp,0x20
10004aff:	89 e7                	mov    edi,esp
10004b01:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004b03:	55                   	push   ebp
10004b04:	e8 fc ff ff ff       	call   10004b05 <NIDesktop::handleMouse(int, int, int, int)+0x7b7>	10004b05: R_386_PC32	NIWindow::postEvent(NiEvent)
10004b09:	83 c4 24             	add    esp,0x24
10004b0c:	55                   	push   ebp
10004b0d:	e8 fc ff ff ff       	call   10004b0e <NIDesktop::handleMouse(int, int, int, int)+0x7c0>	10004b0e: R_386_PC32	NIWindow::rerender()
10004b12:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004b15:	e8 fc ff ff ff       	call   10004b16 <NIDesktop::handleMouse(int, int, int, int)+0x7c8>	10004b16: R_386_PC32	NIDesktop::completeRefresh()
10004b1a:	eb 11                	jmp    10004b2d <NIDesktop::handleMouse(int, int, int, int)+0x7df>
10004b1c:	8b 13                	mov    edx,DWORD PTR [ebx]
10004b1e:	8b 12                	mov    edx,DWORD PTR [edx]
10004b20:	39 2a                	cmp    DWORD PTR [edx],ebp
10004b22:	74 0c                	je     10004b30 <NIDesktop::handleMouse(int, int, int, int)+0x7e2>
10004b24:	50                   	push   eax
10004b25:	50                   	push   eax
10004b26:	55                   	push   ebp
10004b27:	53                   	push   ebx
10004b28:	e8 fc ff ff ff       	call   10004b29 <NIDesktop::handleMouse(int, int, int, int)+0x7db>	10004b29: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
10004b2d:	83 c4 10             	add    esp,0x10
10004b30:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b31: R_386_32	milliTenthsSinceBoot
10004b35:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10004b37: R_386_32	milliTenthsSinceBoot
10004b3b:	a3 68 93 03 10       	mov    ds:0x10039368,eax	10004b3c: R_386_32	.bss
10004b40:	89 15 6c 93 03 10    	mov    DWORD PTR ds:0x1003936c,edx	10004b42: R_386_32	.bss
10004b46:	e9 34 01 00 00       	jmp    10004c7f <NIDesktop::handleMouse(int, int, int, int)+0x931>
10004b4b:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004b4d: R_386_32	movingWin
10004b52:	0f 85 27 01 00 00    	jne    10004c7f <NIDesktop::handleMouse(int, int, int, int)+0x931>
10004b58:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
10004b5b:	8b 85 10 02 00 00    	mov    eax,DWORD PTR [ebp+0x210]
10004b61:	89 ce                	mov    esi,ecx
10004b63:	8d 50 f2             	lea    edx,[eax-0xe]
10004b66:	2b b5 08 02 00 00    	sub    esi,DWORD PTR [ebp+0x208]
10004b6c:	39 f2                	cmp    edx,esi
10004b6e:	7f 44                	jg     10004bb4 <NIDesktop::handleMouse(int, int, int, int)+0x866>
10004b70:	80 bd 14 02 00 00 00 	cmp    BYTE PTR [ebp+0x214],0x0
10004b77:	75 3b                	jne    10004bb4 <NIDesktop::handleMouse(int, int, int, int)+0x866>
10004b79:	f6 85 28 02 00 00 01 	test   BYTE PTR [ebp+0x228],0x1
10004b80:	75 32                	jne    10004bb4 <NIDesktop::handleMouse(int, int, int, int)+0x866>
10004b82:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004b85:	c7 43 14 00 04 00 00 	mov    DWORD PTR [ebx+0x14],0x400
10004b8c:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10004b8e: R_386_32	movingWin
10004b92:	50                   	push   eax
10004b93:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	10004b95: R_386_32	movingType
10004b9d:	50                   	push   eax
10004b9e:	89 15 74 93 03 10    	mov    DWORD PTR ds:0x10039374,edx	10004ba0: R_386_32	.bss
10004ba4:	55                   	push   ebp
10004ba5:	89 0d 70 93 03 10    	mov    DWORD PTR ds:0x10039370,ecx	10004ba7: R_386_32	.bss
10004bab:	53                   	push   ebx
10004bac:	e8 fc ff ff ff       	call   10004bad <NIDesktop::handleMouse(int, int, int, int)+0x85f>	10004bad: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004bb1:	83 c4 10             	add    esp,0x10
10004bb4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10004bb7:	8b 85 0c 02 00 00    	mov    eax,DWORD PTR [ebp+0x20c]
10004bbd:	89 ce                	mov    esi,ecx
10004bbf:	8d 50 f2             	lea    edx,[eax-0xe]
10004bc2:	2b b5 04 02 00 00    	sub    esi,DWORD PTR [ebp+0x204]
10004bc8:	39 f2                	cmp    edx,esi
10004bca:	7f 62                	jg     10004c2e <NIDesktop::handleMouse(int, int, int, int)+0x8e0>
10004bcc:	80 bd 14 02 00 00 00 	cmp    BYTE PTR [ebp+0x214],0x0
10004bd3:	75 59                	jne    10004c2e <NIDesktop::handleMouse(int, int, int, int)+0x8e0>
10004bd5:	f6 85 28 02 00 00 01 	test   BYTE PTR [ebp+0x228],0x1
10004bdc:	75 50                	jne    10004c2e <NIDesktop::handleMouse(int, int, int, int)+0x8e0>
10004bde:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004be0: R_386_32	movingWin
10004be5:	75 34                	jne    10004c1b <NIDesktop::handleMouse(int, int, int, int)+0x8cd>
10004be7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004bea:	c7 43 14 00 05 00 00 	mov    DWORD PTR [ebx+0x14],0x500
10004bf1:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10004bf3: R_386_32	movingWin
10004bf7:	50                   	push   eax
10004bf8:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	10004bfa: R_386_32	movingType
10004c02:	50                   	push   eax
10004c03:	89 0d 74 93 03 10    	mov    DWORD PTR ds:0x10039374,ecx	10004c05: R_386_32	.bss
10004c09:	55                   	push   ebp
10004c0a:	89 15 70 93 03 10    	mov    DWORD PTR ds:0x10039370,edx	10004c0c: R_386_32	.bss
10004c10:	53                   	push   ebx
10004c11:	e8 fc ff ff ff       	call   10004c12 <NIDesktop::handleMouse(int, int, int, int)+0x8c4>	10004c12: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004c16:	83 c4 10             	add    esp,0x10
10004c19:	eb 13                	jmp    10004c2e <NIDesktop::handleMouse(int, int, int, int)+0x8e0>
10004c1b:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	10004c1d: R_386_32	movingType
10004c25:	c7 43 14 00 03 00 00 	mov    DWORD PTR [ebx+0x14],0x300
10004c2c:	eb 51                	jmp    10004c7f <NIDesktop::handleMouse(int, int, int, int)+0x931>
10004c2e:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004c30: R_386_32	movingWin
10004c35:	75 48                	jne    10004c7f <NIDesktop::handleMouse(int, int, int, int)+0x931>
10004c37:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004c3a:	2b 95 08 02 00 00    	sub    edx,DWORD PTR [ebp+0x208]
10004c40:	83 fa 18             	cmp    edx,0x18
10004c43:	7f 3a                	jg     10004c7f <NIDesktop::handleMouse(int, int, int, int)+0x931>
10004c45:	80 bd 14 02 00 00 00 	cmp    BYTE PTR [ebp+0x214],0x0
10004c4c:	75 31                	jne    10004c7f <NIDesktop::handleMouse(int, int, int, int)+0x931>
10004c4e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10004c51:	2b 8d 04 02 00 00    	sub    ecx,DWORD PTR [ebp+0x204]
10004c57:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10004c59: R_386_32	movingWin
10004c5d:	50                   	push   eax
10004c5e:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10004c60: R_386_32	movingType
10004c68:	50                   	push   eax
10004c69:	89 0d 74 93 03 10    	mov    DWORD PTR ds:0x10039374,ecx	10004c6b: R_386_32	.bss
10004c6f:	55                   	push   ebp
10004c70:	89 15 70 93 03 10    	mov    DWORD PTR ds:0x10039370,edx	10004c72: R_386_32	.bss
10004c76:	53                   	push   ebx
10004c77:	e8 fc ff ff ff       	call   10004c78 <NIDesktop::handleMouse(int, int, int, int)+0x92a>	10004c78: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004c7c:	83 c4 10             	add    esp,0x10
10004c7f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004c82:	83 ec 0c             	sub    esp,0xc
10004c85:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004c8b:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004c8d:	6a 00                	push   0x0
10004c8f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10004c92:	05 00 00 00 00       	add    eax,0x0	10004c93: R_386_32	___mouse_data
10004c97:	50                   	push   eax
10004c98:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004c9b:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004c9e:	52                   	push   edx
10004c9f:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10004ca2:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10004ca9:	a3 78 93 03 10       	mov    ds:0x10039378,eax	10004caa: R_386_32	.bss
10004cae:	81 c4 ac 00 00 00    	add    esp,0xac
10004cb4:	5b                   	pop    ebx
10004cb5:	5e                   	pop    esi
10004cb6:	5f                   	pop    edi
10004cb7:	5d                   	pop    ebp
10004cb8:	c3                   	ret    
10004cb9:	8d 74 24 30          	lea    esi,[esp+0x30]
10004cbd:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004cbf: R_386_32	movingWin
10004cc7:	6a 01                	push   0x1
10004cc9:	6a 01                	push   0x1
10004ccb:	50                   	push   eax
10004ccc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004cd0:	56                   	push   esi
10004cd1:	e8 fc ff ff ff       	call   10004cd2 <NIDesktop::handleMouse(int, int, int, int)+0x984>	10004cd2: R_386_PC32	NiCreateEvent(NIWindow*, int, bool)
10004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004cda:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10004cde:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
10004ce4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10004ce8:	89 b8 10 02 00 00    	mov    DWORD PTR [eax+0x210],edi
10004cee:	50                   	push   eax
10004cef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004cf3:	e8 fc ff ff ff       	call   10004cf4 <NIDesktop::handleMouse(int, int, int, int)+0x9a6>	10004cf4: R_386_PC32	NIWindow::rerender()
10004cf8:	59                   	pop    ecx
10004cf9:	5f                   	pop    edi
10004cfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004cfe:	50                   	push   eax
10004cff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004d03:	53                   	push   ebx
10004d04:	e8 fc ff ff ff       	call   10004d05 <NIDesktop::handleMouse(int, int, int, int)+0x9b7>	10004d05: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004d09:	6a ff                	push   0xffffffff
10004d0b:	6a ff                	push   0xffffffff
10004d0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004d11:	50                   	push   eax
10004d12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10004d16:	53                   	push   ebx
10004d17:	e8 fc ff ff ff       	call   10004d18 <NIDesktop::handleMouse(int, int, int, int)+0x9ca>	10004d18: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int)
10004d1c:	58                   	pop    eax
10004d1d:	b9 05 00 00 00       	mov    ecx,0x5
10004d22:	89 e7                	mov    edi,esp
10004d24:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004d26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004d2a:	50                   	push   eax
10004d2b:	e8 fc ff ff ff       	call   10004d2c <NIDesktop::handleMouse(int, int, int, int)+0x9de>	10004d2c: R_386_PC32	NIWindow::postEvent(NiEvent)
10004d30:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10004d37:	e9 92 fc ff ff       	jmp    100049ce <NIDesktop::handleMouse(int, int, int, int)+0x680>
10004d3c:	89 b0 04 02 00 00    	mov    DWORD PTR [eax+0x204],esi
10004d42:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004d44: R_386_32	movingWin
10004d4c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004d4f:	2b 15 70 93 03 10    	sub    edx,DWORD PTR ds:0x10039370	10004d51: R_386_32	.bss
10004d55:	89 90 08 02 00 00    	mov    DWORD PTR [eax+0x208],edx
10004d5b:	52                   	push   edx
10004d5c:	52                   	push   edx
10004d5d:	50                   	push   eax
10004d5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004d62:	53                   	push   ebx
10004d63:	e8 fc ff ff ff       	call   10004d64 <NIDesktop::handleMouse(int, int, int, int)+0xa16>	10004d64: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004d68:	8d 74 24 40          	lea    esi,[esp+0x40]
10004d6c:	6a 01                	push   0x1
10004d6e:	6a 02                	push   0x2
10004d70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004d74:	50                   	push   eax
10004d75:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10004d79:	56                   	push   esi
10004d7a:	e8 fc ff ff ff       	call   10004d7b <NIDesktop::handleMouse(int, int, int, int)+0xa2d>	10004d7b: R_386_PC32	NiCreateEvent(NIWindow*, int, bool)
10004d7f:	b9 05 00 00 00       	mov    ecx,0x5
10004d84:	83 ec 10             	sub    esp,0x10
10004d87:	89 e7                	mov    edi,esp
10004d89:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004d8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10004d8f:	50                   	push   eax
10004d90:	e8 fc ff ff ff       	call   10004d91 <NIDesktop::handleMouse(int, int, int, int)+0xa43>	10004d91: R_386_PC32	NIWindow::postEvent(NiEvent)
10004d95:	83 c4 30             	add    esp,0x30
10004d98:	e9 e7 f8 ff ff       	jmp    10004684 <NIDesktop::handleMouse(int, int, int, int)+0x336>

10004d9d <NiHandleMouse(int, int, int, int)>:
10004d9d:	83 ec 18             	sub    esp,0x18
10004da0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004da4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004da8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004dac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004db0:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004db2: R_386_32	mouseDesktop
10004db6:	e8 fc ff ff ff       	call   10004db7 <NiHandleMouse(int, int, int, int)+0x1a>	10004db7: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
10004dbb:	83 c4 2c             	add    esp,0x2c
10004dbe:	c3                   	ret    

10004dbf <drawVGAChar(int, int, int)>:
10004dbf:	55                   	push   ebp
10004dc0:	57                   	push   edi
10004dc1:	56                   	push   esi
10004dc2:	53                   	push   ebx
10004dc3:	31 db                	xor    ebx,ebx
10004dc5:	83 ec 1c             	sub    esp,0x1c
10004dc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10004dcc:	c1 e0 04             	shl    eax,0x4
10004dcf:	89 04 24             	mov    DWORD PTR [esp],eax
10004dd2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10004dd6:	c1 e0 04             	shl    eax,0x4
10004dd9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10004ddd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004de1:	c1 e0 03             	shl    eax,0x3
10004de4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004de8:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004deb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10004def:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	10004df2: R_386_32	cp
10004df6:	8d 3c 19             	lea    edi,[ecx+ebx*1]
10004df9:	31 f6                	xor    esi,esi
10004dfb:	84 c0                	test   al,al
10004dfd:	79 22                	jns    10004e21 <drawVGAChar(int, int, int)+0x62>
10004dff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10004e03:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004e05: R_386_32	screen
10004e09:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004e0b:	6a 00                	push   0x0
10004e0d:	57                   	push   edi
10004e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004e12:	8d 2c 06             	lea    ebp,[esi+eax*1]
10004e15:	55                   	push   ebp
10004e16:	52                   	push   edx
10004e17:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10004e1a:	83 c4 10             	add    esp,0x10
10004e1d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
10004e21:	d1 e0                	shl    eax,1
10004e23:	46                   	inc    esi
10004e24:	83 fe 08             	cmp    esi,0x8
10004e27:	75 d2                	jne    10004dfb <drawVGAChar(int, int, int)+0x3c>
10004e29:	43                   	inc    ebx
10004e2a:	83 fb 10             	cmp    ebx,0x10
10004e2d:	75 b9                	jne    10004de8 <drawVGAChar(int, int, int)+0x29>
10004e2f:	83 c4 1c             	add    esp,0x1c
10004e32:	5b                   	pop    ebx
10004e33:	5e                   	pop    esi
10004e34:	5f                   	pop    edi
10004e35:	5d                   	pop    ebp
10004e36:	c3                   	ret    

10004e37 <NiDisplayRAM(void*)>:
10004e37:	56                   	push   esi
10004e38:	53                   	push   ebx
10004e39:	83 ec 14             	sub    esp,0x14
10004e3c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e3d: R_386_32	irqDisableCounter
10004e41:	48                   	dec    eax
10004e42:	a3 00 00 00 00       	mov    ds:0x0,eax	10004e43: R_386_32	irqDisableCounter
10004e47:	75 01                	jne    10004e4a <NiDisplayRAM(void*)+0x13>
10004e49:	fb                   	sti    
10004e4a:	6b 05 00 00 00 00 64 	imul   eax,DWORD PTR ds:0x0,0x64	10004e4c: R_386_32	Phys::usedPages
10004e51:	31 db                	xor    ebx,ebx
10004e53:	99                   	cdq    
10004e54:	f7 3d 00 00 00 00    	idiv   DWORD PTR ds:0x0	10004e56: R_386_32	Phys::usablePages
10004e5a:	31 f6                	xor    esi,esi
10004e5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004e60:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004e62: R_386_32	screen
10004e66:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004e68:	68 ff ff ff 00       	push   0xffffff
10004e6d:	53                   	push   ebx
10004e6e:	56                   	push   esi
10004e6f:	46                   	inc    esi
10004e70:	52                   	push   edx
10004e71:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10004e74:	83 c4 10             	add    esp,0x10
10004e77:	83 fe 60             	cmp    esi,0x60
10004e7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004e7e:	75 dc                	jne    10004e5c <NiDisplayRAM(void*)+0x25>
10004e80:	43                   	inc    ebx
10004e81:	83 fb 10             	cmp    ebx,0x10
10004e84:	75 d4                	jne    10004e5a <NiDisplayRAM(void*)+0x23>
10004e86:	b9 0a 00 00 00       	mov    ecx,0xa
10004e8b:	52                   	push   edx
10004e8c:	99                   	cdq    
10004e8d:	f7 f9                	idiv   ecx
10004e8f:	89 d3                	mov    ebx,edx
10004e91:	83 c0 30             	add    eax,0x30
10004e94:	50                   	push   eax
10004e95:	6a 00                	push   0x0
10004e97:	6a 00                	push   0x0
10004e99:	e8 fc ff ff ff       	call   10004e9a <NiDisplayRAM(void*)+0x63>	10004e9a: R_386_PC32	drawVGAChar(int, int, int)
10004e9e:	8d 43 30             	lea    eax,[ebx+0x30]
10004ea1:	83 c4 0c             	add    esp,0xc
10004ea4:	50                   	push   eax
10004ea5:	6a 00                	push   0x0
10004ea7:	6a 01                	push   0x1
10004ea9:	e8 fc ff ff ff       	call   10004eaa <NiDisplayRAM(void*)+0x73>	10004eaa: R_386_PC32	drawVGAChar(int, int, int)
10004eae:	83 c4 0c             	add    esp,0xc
10004eb1:	6a 25                	push   0x25
10004eb3:	6a 00                	push   0x0
10004eb5:	6a 02                	push   0x2
10004eb7:	e8 fc ff ff ff       	call   10004eb8 <NiDisplayRAM(void*)+0x81>	10004eb8: R_386_PC32	drawVGAChar(int, int, int)
10004ebc:	83 c4 0c             	add    esp,0xc
10004ebf:	6a 20                	push   0x20
10004ec1:	6a 00                	push   0x0
10004ec3:	6a 03                	push   0x3
10004ec5:	e8 fc ff ff ff       	call   10004ec6 <NiDisplayRAM(void*)+0x8f>	10004ec6: R_386_PC32	drawVGAChar(int, int, int)
10004eca:	83 c4 0c             	add    esp,0xc
10004ecd:	6a 52                	push   0x52
10004ecf:	6a 00                	push   0x0
10004ed1:	6a 04                	push   0x4
10004ed3:	e8 fc ff ff ff       	call   10004ed4 <NiDisplayRAM(void*)+0x9d>	10004ed4: R_386_PC32	drawVGAChar(int, int, int)
10004ed8:	83 c4 0c             	add    esp,0xc
10004edb:	6a 41                	push   0x41
10004edd:	6a 00                	push   0x0
10004edf:	6a 05                	push   0x5
10004ee1:	e8 fc ff ff ff       	call   10004ee2 <NiDisplayRAM(void*)+0xab>	10004ee2: R_386_PC32	drawVGAChar(int, int, int)
10004ee6:	83 c4 0c             	add    esp,0xc
10004ee9:	6a 4d                	push   0x4d
10004eeb:	6a 00                	push   0x0
10004eed:	6a 06                	push   0x6
10004eef:	e8 fc ff ff ff       	call   10004ef0 <NiDisplayRAM(void*)+0xb9>	10004ef0: R_386_PC32	drawVGAChar(int, int, int)
10004ef4:	83 c4 0c             	add    esp,0xc
10004ef7:	6a 20                	push   0x20
10004ef9:	6a 00                	push   0x0
10004efb:	6a 07                	push   0x7
10004efd:	e8 fc ff ff ff       	call   10004efe <NiDisplayRAM(void*)+0xc7>	10004efe: R_386_PC32	drawVGAChar(int, int, int)
10004f02:	83 c4 0c             	add    esp,0xc
10004f05:	6a 75                	push   0x75
10004f07:	6a 00                	push   0x0
10004f09:	6a 08                	push   0x8
10004f0b:	e8 fc ff ff ff       	call   10004f0c <NiDisplayRAM(void*)+0xd5>	10004f0c: R_386_PC32	drawVGAChar(int, int, int)
10004f10:	83 c4 0c             	add    esp,0xc
10004f13:	6a 73                	push   0x73
10004f15:	6a 00                	push   0x0
10004f17:	6a 09                	push   0x9
10004f19:	e8 fc ff ff ff       	call   10004f1a <NiDisplayRAM(void*)+0xe3>	10004f1a: R_386_PC32	drawVGAChar(int, int, int)
10004f1e:	83 c4 0c             	add    esp,0xc
10004f21:	6a 65                	push   0x65
10004f23:	6a 00                	push   0x0
10004f25:	6a 0a                	push   0xa
10004f27:	e8 fc ff ff ff       	call   10004f28 <NiDisplayRAM(void*)+0xf1>	10004f28: R_386_PC32	drawVGAChar(int, int, int)
10004f2c:	83 c4 0c             	add    esp,0xc
10004f2f:	6a 64                	push   0x64
10004f31:	6a 00                	push   0x0
10004f33:	6a 0b                	push   0xb
10004f35:	e8 fc ff ff ff       	call   10004f36 <NiDisplayRAM(void*)+0xff>	10004f36: R_386_PC32	drawVGAChar(int, int, int)
10004f3a:	c7 04 24 4c 1d 00 00 	mov    DWORD PTR [esp],0x1d4c
10004f41:	e8 fc ff ff ff       	call   10004f42 <NiDisplayRAM(void*)+0x10b>	10004f42: R_386_PC32	milliTenthSleep(unsigned int)
10004f46:	83 c4 10             	add    esp,0x10
10004f49:	e9 fc fe ff ff       	jmp    10004e4a <NiDisplayRAM(void*)+0x13>

10004f4e <monikaBsod(char*)>:
10004f4e:	55                   	push   ebp
10004f4f:	57                   	push   edi
10004f50:	31 ff                	xor    edi,edi
10004f52:	56                   	push   esi
10004f53:	53                   	push   ebx
10004f54:	31 db                	xor    ebx,ebx
10004f56:	83 ec 24             	sub    esp,0x24
10004f59:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f5a: R_386_32	screen
10004f5e:	8b 10                	mov    edx,DWORD PTR [eax]
10004f60:	68 ff ff ff 00       	push   0xffffff
10004f65:	50                   	push   eax
10004f66:	ff 52 40             	call   DWORD PTR [edx+0x40]
10004f69:	83 c4 10             	add    esp,0x10
10004f6c:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	10004f6e: R_386_32	justMonika
10004f72:	8d 43 01             	lea    eax,[ebx+0x1]
10004f75:	84 c9                	test   cl,cl
10004f77:	79 0e                	jns    10004f87 <monikaBsod(char*)+0x39>
10004f79:	8d 51 80             	lea    edx,[ecx-0x80]
10004f7c:	83 c3 02             	add    ebx,0x2
10004f7f:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	10004f81: R_386_32	justMonika
10004f85:	eb 04                	jmp    10004f8b <monikaBsod(char*)+0x3d>
10004f87:	89 c3                	mov    ebx,eax
10004f89:	b2 01                	mov    dl,0x1
10004f8b:	0f b6 c1             	movzx  eax,cl
10004f8e:	83 e1 03             	and    ecx,0x3
10004f91:	89 c6                	mov    esi,eax
10004f93:	6b c9 55             	imul   ecx,ecx,0x55
10004f96:	c1 fe 05             	sar    esi,0x5
10004f99:	c1 f8 02             	sar    eax,0x2
10004f9c:	83 e6 03             	and    esi,0x3
10004f9f:	83 e0 07             	and    eax,0x7
10004fa2:	6b f6 55             	imul   esi,esi,0x55
10004fa5:	6b c0 24             	imul   eax,eax,0x24
10004fa8:	c1 e6 10             	shl    esi,0x10
10004fab:	c1 e0 08             	shl    eax,0x8
10004fae:	09 f0                	or     eax,esi
10004fb0:	31 f6                	xor    esi,esi
10004fb2:	09 c8                	or     eax,ecx
10004fb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004fb8:	0f b6 c2             	movzx  eax,dl
10004fbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004fbf:	8d 04 37             	lea    eax,[edi+esi*1]
10004fc2:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10004fc6:	7f 10                	jg     10004fd8 <monikaBsod(char*)+0x8a>
10004fc8:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
10004fcc:	81 ff ff af 04 00    	cmp    edi,0x4afff
10004fd2:	7e 98                	jle    10004f6c <monikaBsod(char*)+0x1e>
10004fd4:	31 db                	xor    ebx,ebx
10004fd6:	eb 25                	jmp    10004ffd <monikaBsod(char*)+0xaf>
10004fd8:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004fda: R_386_32	screen
10004fde:	b9 80 02 00 00       	mov    ecx,0x280
10004fe3:	8b 2a                	mov    ebp,DWORD PTR [edx]
10004fe5:	46                   	inc    esi
10004fe6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10004fea:	99                   	cdq    
10004feb:	f7 f9                	idiv   ecx
10004fed:	50                   	push   eax
10004fee:	52                   	push   edx
10004fef:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004ff1: R_386_32	screen
10004ff5:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10004ff8:	83 c4 10             	add    esp,0x10
10004ffb:	eb c2                	jmp    10004fbf <monikaBsod(char*)+0x71>
10004ffd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10005001:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
10005005:	84 c0                	test   al,al
10005007:	74 1d                	je     10005026 <monikaBsod(char*)+0xd8>
10005009:	b9 19 00 00 00       	mov    ecx,0x19
1000500e:	52                   	push   edx
1000500f:	50                   	push   eax
10005010:	89 d8                	mov    eax,ebx
10005012:	43                   	inc    ebx
10005013:	99                   	cdq    
10005014:	f7 f9                	idiv   ecx
10005016:	83 c0 0a             	add    eax,0xa
10005019:	42                   	inc    edx
1000501a:	50                   	push   eax
1000501b:	52                   	push   edx
1000501c:	e8 fc ff ff ff       	call   1000501d <monikaBsod(char*)+0xcf>	1000501d: R_386_PC32	drawVGAChar(int, int, int)
10005021:	83 c4 10             	add    esp,0x10
10005024:	eb d7                	jmp    10004ffd <monikaBsod(char*)+0xaf>
10005026:	f4                   	hlt    
10005027:	eb fd                	jmp    10005026 <monikaBsod(char*)+0xd8>

10005029 <NiInstallSysHooks()>:
10005029:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000502b: R_386_32	guiPanicHandler
	1000502f: R_386_32	monikaBsod(char*)
10005033:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10005035: R_386_32	systemCallHandlers
	10005039: R_386_32	NiSystemCallHandler(regs*)
1000503d:	c3                   	ret    

1000503e <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
1000503e:	56                   	push   esi
1000503f:	53                   	push   ebx
10005040:	83 ec 10             	sub    esp,0x10
10005043:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10005047:	68 2c 02 00 00       	push   0x22c
1000504c:	e8 fc ff ff ff       	call   1000504d <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	1000504d: R_386_PC32	malloc
10005051:	89 c6                	mov    esi,eax
10005053:	58                   	pop    eax
10005054:	5a                   	pop    edx
10005055:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
1000505b:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10005061:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10005067:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
1000506d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000506f: R_386_32	ctxt
10005073:	56                   	push   esi
10005074:	e8 fc ff ff ff       	call   10005075 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x37>	10005075: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10005079:	8b 83 b4 00 00 00    	mov    eax,DWORD PTR [ebx+0xb4]
1000507f:	83 c4 18             	add    esp,0x18
10005082:	89 86 28 02 00 00    	mov    DWORD PTR [esi+0x228],eax
10005088:	56                   	push   esi
10005089:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000508b: R_386_32	desktop
1000508f:	e8 fc ff ff ff       	call   10005090 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x52>	10005090: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10005094:	59                   	pop    ecx
10005095:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005097: R_386_32	desktop
1000509b:	e8 fc ff ff ff       	call   1000509c <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	1000509c: R_386_PC32	NIDesktop::completeRefresh()
100050a0:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
100050a6:	31 c0                	xor    eax,eax
100050a8:	83 c4 14             	add    esp,0x14
100050ab:	31 d2                	xor    edx,edx
100050ad:	5b                   	pop    ebx
100050ae:	5e                   	pop    esi
100050af:	c3                   	ret    

100050b0 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)>:
100050b0:	53                   	push   ebx
100050b1:	83 ec 14             	sub    esp,0x14
100050b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100050b8:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
100050be:	53                   	push   ebx
100050bf:	e8 fc ff ff ff       	call   100050c0 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x10>	100050c0: R_386_PC32	NIWindow::rerender()
100050c4:	8b 83 28 02 00 00    	mov    eax,DWORD PTR [ebx+0x228]
100050ca:	83 c4 10             	add    esp,0x10
100050cd:	89 c2                	mov    edx,eax
100050cf:	83 e2 ef             	and    edx,0xffffffef
100050d2:	a8 20                	test   al,0x20
100050d4:	89 93 28 02 00 00    	mov    DWORD PTR [ebx+0x228],edx
100050da:	74 0c                	je     100050e8 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x38>
100050dc:	83 ec 0c             	sub    esp,0xc
100050df:	53                   	push   ebx
100050e0:	e8 fc ff ff ff       	call   100050e1 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x31>	100050e1: R_386_PC32	NIWindow::drawResizeMarker()
100050e5:	83 c4 10             	add    esp,0x10
100050e8:	6a ff                	push   0xffffffff
100050ea:	6a ff                	push   0xffffffff
100050ec:	53                   	push   ebx
100050ed:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100050ef: R_386_32	desktop
100050f3:	e8 fc ff ff ff       	call   100050f4 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x44>	100050f4: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int)
100050f8:	31 c0                	xor    eax,eax
100050fa:	31 d2                	xor    edx,edx
100050fc:	83 c4 18             	add    esp,0x18
100050ff:	5b                   	pop    ebx
10005100:	c3                   	ret    

10005101 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)>:
10005101:	55                   	push   ebp
10005102:	57                   	push   edi
10005103:	56                   	push   esi
10005104:	53                   	push   ebx
10005105:	83 ec 1c             	sub    esp,0x1c
10005108:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000510c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10005110:	0f b7 f0             	movzx  esi,ax
10005113:	8b 99 a0 00 00 00    	mov    ebx,DWORD PTR [ecx+0xa0]
10005119:	89 c5                	mov    ebp,eax
1000511b:	c1 ed 10             	shr    ebp,0x10
1000511e:	55                   	push   ebp
1000511f:	89 ef                	mov    edi,ebp
10005121:	56                   	push   esi
10005122:	50                   	push   eax
10005123:	68 7a 60 00 10       	push   0x1000607a	10005124: R_386_32	.text
10005128:	e8 fc ff ff ff       	call   10005129 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)+0x28>	10005129: R_386_PC32	Dbg::kprintf(char const*, ...)
1000512d:	83 c4 10             	add    esp,0x10
10005130:	81 fe ff ff 00 00    	cmp    esi,0xffff
10005136:	75 02                	jne    1000513a <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)+0x39>
10005138:	31 f6                	xor    esi,esi
1000513a:	81 fd ff ff 00 00    	cmp    ebp,0xffff
10005140:	75 06                	jne    10005148 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)+0x47>
10005142:	8b bb 10 02 00 00    	mov    edi,DWORD PTR [ebx+0x210]
10005148:	89 f5                	mov    ebp,esi
1000514a:	50                   	push   eax
1000514b:	57                   	push   edi
1000514c:	56                   	push   esi
1000514d:	68 ab 60 00 10       	push   0x100060ab	1000514e: R_386_32	.text
10005152:	e8 fc ff ff ff       	call   10005153 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)+0x52>	10005153: R_386_PC32	Dbg::kprintf(char const*, ...)
10005157:	8b 93 0c 02 00 00    	mov    edx,DWORD PTR [ebx+0x20c]
1000515d:	83 c4 10             	add    esp,0x10
10005160:	0f af d6             	imul   edx,esi
10005163:	39 ef                	cmp    edi,ebp
10005165:	7e 3f                	jle    100051a6 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)+0xa5>
10005167:	31 c0                	xor    eax,eax
10005169:	39 83 0c 02 00 00    	cmp    DWORD PTR [ebx+0x20c],eax
1000516f:	7e 32                	jle    100051a3 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)+0xa2>
10005171:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10005175:	8b 89 b8 00 00 00    	mov    ecx,DWORD PTR [ecx+0xb8]
1000517b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
1000517e:	83 f9 ff             	cmp    ecx,0xffffffff
10005181:	74 1c                	je     1000519f <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)+0x9e>
10005183:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10005187:	51                   	push   ecx
10005188:	55                   	push   ebp
10005189:	50                   	push   eax
1000518a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000518e:	53                   	push   ebx
1000518f:	e8 fc ff ff ff       	call   10005190 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)+0x8f>	10005190: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005194:	83 c4 10             	add    esp,0x10
10005197:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
1000519b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000519f:	42                   	inc    edx
100051a0:	40                   	inc    eax
100051a1:	eb c6                	jmp    10005169 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)+0x68>
100051a3:	45                   	inc    ebp
100051a4:	eb bd                	jmp    10005163 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)+0x62>
100051a6:	8b 83 28 02 00 00    	mov    eax,DWORD PTR [ebx+0x228]
100051ac:	89 c2                	mov    edx,eax
100051ae:	83 e2 ef             	and    edx,0xffffffef
100051b1:	a8 20                	test   al,0x20
100051b3:	89 93 28 02 00 00    	mov    DWORD PTR [ebx+0x228],edx
100051b9:	74 0c                	je     100051c7 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)+0xc6>
100051bb:	83 ec 0c             	sub    esp,0xc
100051be:	53                   	push   ebx
100051bf:	e8 fc ff ff ff       	call   100051c0 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)+0xbf>	100051c0: R_386_PC32	NIWindow::drawResizeMarker()
100051c4:	83 c4 10             	add    esp,0x10
100051c7:	57                   	push   edi
100051c8:	56                   	push   esi
100051c9:	53                   	push   ebx
100051ca:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100051cc: R_386_32	desktop
100051d0:	e8 fc ff ff ff       	call   100051d1 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)+0xd0>	100051d1: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int)
100051d5:	83 c4 2c             	add    esp,0x2c
100051d8:	31 c0                	xor    eax,eax
100051da:	5b                   	pop    ebx
100051db:	31 d2                	xor    edx,edx
100051dd:	5e                   	pop    esi
100051de:	5f                   	pop    edi
100051df:	5d                   	pop    ebp
100051e0:	c3                   	ret    

100051e1 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
100051e1:	55                   	push   ebp
100051e2:	31 ed                	xor    ebp,ebp
100051e4:	57                   	push   edi
100051e5:	56                   	push   esi
100051e6:	31 f6                	xor    esi,esi
100051e8:	53                   	push   ebx
100051e9:	83 ec 0c             	sub    esp,0xc
100051ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100051f0:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
100051f6:	39 b3 10 02 00 00    	cmp    DWORD PTR [ebx+0x210],esi
100051fc:	7e 33                	jle    10005231 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x50>
100051fe:	31 ff                	xor    edi,edi
10005200:	39 bb 0c 02 00 00    	cmp    DWORD PTR [ebx+0x20c],edi
10005206:	7e 26                	jle    1000522e <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x4d>
10005208:	8b 90 b8 00 00 00    	mov    edx,DWORD PTR [eax+0xb8]
1000520e:	8b 14 aa             	mov    edx,DWORD PTR [edx+ebp*4]
10005211:	83 fa ff             	cmp    edx,0xffffffff
10005214:	74 14                	je     1000522a <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x49>
10005216:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000521a:	52                   	push   edx
1000521b:	56                   	push   esi
1000521c:	57                   	push   edi
1000521d:	53                   	push   ebx
1000521e:	e8 fc ff ff ff       	call   1000521f <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x3e>	1000521f: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005223:	83 c4 10             	add    esp,0x10
10005226:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
1000522a:	45                   	inc    ebp
1000522b:	47                   	inc    edi
1000522c:	eb d2                	jmp    10005200 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x1f>
1000522e:	46                   	inc    esi
1000522f:	eb c5                	jmp    100051f6 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x15>
10005231:	8b 83 28 02 00 00    	mov    eax,DWORD PTR [ebx+0x228]
10005237:	89 c2                	mov    edx,eax
10005239:	83 e2 ef             	and    edx,0xffffffef
1000523c:	a8 20                	test   al,0x20
1000523e:	89 93 28 02 00 00    	mov    DWORD PTR [ebx+0x228],edx
10005244:	74 0c                	je     10005252 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x71>
10005246:	83 ec 0c             	sub    esp,0xc
10005249:	53                   	push   ebx
1000524a:	e8 fc ff ff ff       	call   1000524b <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x6a>	1000524b: R_386_PC32	NIWindow::drawResizeMarker()
1000524f:	83 c4 10             	add    esp,0x10
10005252:	6a ff                	push   0xffffffff
10005254:	6a ff                	push   0xffffffff
10005256:	53                   	push   ebx
10005257:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005259: R_386_32	desktop
1000525d:	e8 fc ff ff ff       	call   1000525e <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x7d>	1000525e: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int)
10005262:	83 c4 1c             	add    esp,0x1c
10005265:	31 c0                	xor    eax,eax
10005267:	5b                   	pop    ebx
10005268:	31 d2                	xor    edx,edx
1000526a:	5e                   	pop    esi
1000526b:	5f                   	pop    edi
1000526c:	5d                   	pop    ebp
1000526d:	c3                   	ret    

1000526e <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
1000526e:	53                   	push   ebx
1000526f:	83 ec 14             	sub    esp,0x14
10005272:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10005276:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
1000527c:	53                   	push   ebx
1000527d:	e8 fc ff ff ff       	call   1000527e <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x10>	1000527e: R_386_PC32	NIWindow::request()
10005282:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005285:	e8 fc ff ff ff       	call   10005286 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x18>	10005286: R_386_PC32	NIWindow::drawBasicWindow()
1000528a:	31 c0                	xor    eax,eax
1000528c:	31 d2                	xor    edx,edx
1000528e:	83 c4 18             	add    esp,0x18
10005291:	5b                   	pop    ebx
10005292:	c3                   	ret    

10005293 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)>:
10005293:	55                   	push   ebp
10005294:	57                   	push   edi
10005295:	56                   	push   esi
10005296:	53                   	push   ebx
10005297:	83 ec 38             	sub    esp,0x38
1000529a:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
1000529e:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
100052a4:	53                   	push   ebx
100052a5:	e8 fc ff ff ff       	call   100052a6 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x13>	100052a6: R_386_PC32	NIWindow::getEventCount()
100052aa:	83 c4 10             	add    esp,0x10
100052ad:	85 c0                	test   eax,eax
100052af:	74 54                	je     10005305 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x72>
100052b1:	89 e6                	mov    esi,esp
100052b3:	8d bd bc 00 00 00    	lea    edi,[ebp+0xbc]
100052b9:	50                   	push   eax
100052ba:	50                   	push   eax
100052bb:	53                   	push   ebx
100052bc:	56                   	push   esi
100052bd:	e8 fc ff ff ff       	call   100052be <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x2b>	100052be: R_386_PC32	NIWindow::grabEvent()
100052c2:	b9 05 00 00 00       	mov    ecx,0x5
100052c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100052c9:	8b 83 04 02 00 00    	mov    eax,DWORD PTR [ebx+0x204]
100052cf:	89 85 a4 00 00 00    	mov    DWORD PTR [ebp+0xa4],eax
100052d5:	8b 83 08 02 00 00    	mov    eax,DWORD PTR [ebx+0x208]
100052db:	89 85 a8 00 00 00    	mov    DWORD PTR [ebp+0xa8],eax
100052e1:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
100052e7:	89 85 ac 00 00 00    	mov    DWORD PTR [ebp+0xac],eax
100052ed:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
100052f3:	89 85 b0 00 00 00    	mov    DWORD PTR [ebp+0xb0],eax
100052f9:	53                   	push   ebx
100052fa:	e8 fc ff ff ff       	call   100052fb <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x68>	100052fb: R_386_PC32	NIWindow::getEventCount()
100052ff:	83 c4 10             	add    esp,0x10
10005302:	99                   	cdq    
10005303:	eb 05                	jmp    1000530a <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x77>
10005305:	83 c8 ff             	or     eax,0xffffffff
10005308:	89 c2                	mov    edx,eax
1000530a:	83 c4 2c             	add    esp,0x2c
1000530d:	5b                   	pop    ebx
1000530e:	5e                   	pop    esi
1000530f:	5f                   	pop    edi
10005310:	5d                   	pop    ebp
10005311:	c3                   	ret    

10005312 <NiLinkCommandReadFlags(unsigned long, NiLinkWindowStruct*)>:
10005312:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10005316:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
1000531c:	8b 8a 28 02 00 00    	mov    ecx,DWORD PTR [edx+0x228]
10005322:	89 88 b4 00 00 00    	mov    DWORD PTR [eax+0xb4],ecx
10005328:	8b 8a 04 02 00 00    	mov    ecx,DWORD PTR [edx+0x204]
1000532e:	89 88 a4 00 00 00    	mov    DWORD PTR [eax+0xa4],ecx
10005334:	8b 8a 08 02 00 00    	mov    ecx,DWORD PTR [edx+0x208]
1000533a:	89 88 a8 00 00 00    	mov    DWORD PTR [eax+0xa8],ecx
10005340:	8b 8a 0c 02 00 00    	mov    ecx,DWORD PTR [edx+0x20c]
10005346:	89 88 ac 00 00 00    	mov    DWORD PTR [eax+0xac],ecx
1000534c:	8b 92 10 02 00 00    	mov    edx,DWORD PTR [edx+0x210]
10005352:	89 90 b0 00 00 00    	mov    DWORD PTR [eax+0xb0],edx
10005358:	31 c0                	xor    eax,eax
1000535a:	31 d2                	xor    edx,edx
1000535c:	c3                   	ret    

1000535d <NiSystemCallHandler(regs*)>:
1000535d:	53                   	push   ebx
1000535e:	83 ec 08             	sub    esp,0x8
10005361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10005365:	fa                   	cli    
10005366:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	10005368: R_386_32	irqDisableCounter
1000536c:	83 78 20 0a          	cmp    DWORD PTR [eax+0x20],0xa
10005370:	0f 87 a4 00 00 00    	ja     1000541a <NiSystemCallHandler(regs*)+0xbd>
10005376:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
10005379:	ff 24 95 b8 60 00 10 	jmp    DWORD PTR [edx*4+0x100060b8]	1000537c: R_386_32	.text
10005380:	53                   	push   ebx
10005381:	53                   	push   ebx
10005382:	ff 70 24             	push   DWORD PTR [eax+0x24]
10005385:	ff 70 28             	push   DWORD PTR [eax+0x28]
10005388:	e8 fc ff ff ff       	call   10005389 <NiSystemCallHandler(regs*)+0x2c>	10005389: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
1000538d:	e9 83 00 00 00       	jmp    10005415 <NiSystemCallHandler(regs*)+0xb8>
10005392:	51                   	push   ecx
10005393:	51                   	push   ecx
10005394:	ff 70 24             	push   DWORD PTR [eax+0x24]
10005397:	ff 70 28             	push   DWORD PTR [eax+0x28]
1000539a:	e8 fc ff ff ff       	call   1000539b <NiSystemCallHandler(regs*)+0x3e>	1000539b: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
1000539f:	eb 74                	jmp    10005415 <NiSystemCallHandler(regs*)+0xb8>
100053a1:	83 ec 0c             	sub    esp,0xc
100053a4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
100053a7:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
100053ad:	53                   	push   ebx
100053ae:	e8 fc ff ff ff       	call   100053af <NiSystemCallHandler(regs*)+0x52>	100053af: R_386_PC32	NIWindow::request()
100053b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
100053b6:	e8 fc ff ff ff       	call   100053b7 <NiSystemCallHandler(regs*)+0x5a>	100053b7: R_386_PC32	NIWindow::drawBasicWindow()
100053bb:	83 c4 10             	add    esp,0x10
100053be:	eb 24                	jmp    100053e4 <NiSystemCallHandler(regs*)+0x87>
100053c0:	52                   	push   edx
100053c1:	52                   	push   edx
100053c2:	ff 70 24             	push   DWORD PTR [eax+0x24]
100053c5:	ff 70 28             	push   DWORD PTR [eax+0x28]
100053c8:	e8 fc ff ff ff       	call   100053c9 <NiSystemCallHandler(regs*)+0x6c>	100053c9: R_386_PC32	NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)
100053cd:	eb 46                	jmp    10005415 <NiSystemCallHandler(regs*)+0xb8>
100053cf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
100053d2:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
100053d8:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [eax+0xb4]
100053de:	89 82 28 02 00 00    	mov    DWORD PTR [edx+0x228],eax
100053e4:	31 c0                	xor    eax,eax
100053e6:	31 d2                	xor    edx,edx
100053e8:	eb 35                	jmp    1000541f <NiSystemCallHandler(regs*)+0xc2>
100053ea:	53                   	push   ebx
100053eb:	53                   	push   ebx
100053ec:	ff 70 24             	push   DWORD PTR [eax+0x24]
100053ef:	ff 70 28             	push   DWORD PTR [eax+0x28]
100053f2:	e8 fc ff ff ff       	call   100053f3 <NiSystemCallHandler(regs*)+0x96>	100053f3: R_386_PC32	NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)
100053f7:	eb 1c                	jmp    10005415 <NiSystemCallHandler(regs*)+0xb8>
100053f9:	51                   	push   ecx
100053fa:	51                   	push   ecx
100053fb:	ff 70 24             	push   DWORD PTR [eax+0x24]
100053fe:	ff 70 28             	push   DWORD PTR [eax+0x28]
10005401:	e8 fc ff ff ff       	call   10005402 <NiSystemCallHandler(regs*)+0xa5>	10005402: R_386_PC32	NiLinkCommandReadFlags(unsigned long, NiLinkWindowStruct*)
10005406:	eb 0d                	jmp    10005415 <NiSystemCallHandler(regs*)+0xb8>
10005408:	52                   	push   edx
10005409:	52                   	push   edx
1000540a:	ff 70 24             	push   DWORD PTR [eax+0x24]
1000540d:	ff 70 28             	push   DWORD PTR [eax+0x28]
10005410:	e8 fc ff ff ff       	call   10005411 <NiSystemCallHandler(regs*)+0xb4>	10005411: R_386_PC32	NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*)
10005415:	83 c4 10             	add    esp,0x10
10005418:	eb 05                	jmp    1000541f <NiSystemCallHandler(regs*)+0xc2>
1000541a:	83 c8 ff             	or     eax,0xffffffff
1000541d:	89 c2                	mov    edx,eax
1000541f:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10005421: R_386_32	irqDisableCounter
10005425:	49                   	dec    ecx
10005426:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	10005428: R_386_32	irqDisableCounter
1000542c:	75 01                	jne    1000542f <NiSystemCallHandler(regs*)+0xd2>
1000542e:	fb                   	sti    
1000542f:	83 c4 08             	add    esp,0x8
10005432:	5b                   	pop    ebx
10005433:	c3                   	ret    

10005434 <NiLinkCommandUpdateFlags(unsigned long, NiLinkWindowStruct*)>:
10005434:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10005438:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
1000543e:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [eax+0xb4]
10005444:	89 82 28 02 00 00    	mov    DWORD PTR [edx+0x228],eax
1000544a:	31 c0                	xor    eax,eax
1000544c:	31 d2                	xor    edx,edx
1000544e:	c3                   	ret    
1000544f:	90                   	nop

10005450 <NIWindow::postEvent(NiEvent)>:
10005450:	57                   	push   edi
10005451:	b9 05 00 00 00       	mov    ecx,0x5
10005456:	56                   	push   esi
10005457:	53                   	push   ebx
10005458:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000545c:	8d 74 24 14          	lea    esi,[esp+0x14]
10005460:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
10005463:	6b d0 14             	imul   edx,eax,0x14
10005466:	40                   	inc    eax
10005467:	8d 7c 13 18          	lea    edi,[ebx+edx*1+0x18]
1000546b:	99                   	cdq    
1000546c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000546e:	b9 18 00 00 00       	mov    ecx,0x18
10005473:	ff 43 0c             	inc    DWORD PTR [ebx+0xc]
10005476:	f7 f9                	idiv   ecx
10005478:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
1000547b:	5b                   	pop    ebx
1000547c:	5e                   	pop    esi
1000547d:	5f                   	pop    edi
1000547e:	c3                   	ret    
1000547f:	90                   	nop

10005480 <NIWindow::getEventCount()>:
10005480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10005484:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10005487:	c3                   	ret    

10005488 <NIWindow::grabEvent()>:
10005488:	57                   	push   edi
10005489:	b9 05 00 00 00       	mov    ecx,0x5
1000548e:	56                   	push   esi
1000548f:	53                   	push   ebx
10005490:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10005494:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10005498:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
1000549b:	6b c2 14             	imul   eax,edx,0x14
1000549e:	01 d8                	add    eax,ebx
100054a0:	8d 70 18             	lea    esi,[eax+0x18]
100054a3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100054a5:	b9 18 00 00 00       	mov    ecx,0x18
100054aa:	81 60 1c ff 03 00 80 	and    DWORD PTR [eax+0x1c],0x800003ff
100054b1:	8d 42 01             	lea    eax,[edx+0x1]
100054b4:	ff 4b 0c             	dec    DWORD PTR [ebx+0xc]
100054b7:	99                   	cdq    
100054b8:	f7 f9                	idiv   ecx
100054ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100054be:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
100054c1:	5b                   	pop    ebx
100054c2:	5e                   	pop    esi
100054c3:	5f                   	pop    edi
100054c4:	c2 04 00             	ret    0x4
100054c7:	90                   	nop

100054c8 <NIWindow::invalidate()>:
100054c8:	53                   	push   ebx
100054c9:	83 ec 08             	sub    esp,0x8
100054cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100054d0:	80 bb f8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1f8],0x0
100054d7:	74 28                	je     10005501 <NIWindow::invalidate()+0x39>
100054d9:	83 bb 00 02 00 00 00 	cmp    DWORD PTR [ebx+0x200],0x0
100054e0:	74 1f                	je     10005501 <NIWindow::invalidate()+0x39>
100054e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
100054e5:	85 c0                	test   eax,eax
100054e7:	74 18                	je     10005501 <NIWindow::invalidate()+0x39>
100054e9:	83 ec 0c             	sub    esp,0xc
100054ec:	50                   	push   eax
100054ed:	e8 fc ff ff ff       	call   100054ee <NIWindow::invalidate()+0x26>	100054ee: R_386_PC32	free
100054f2:	59                   	pop    ecx
100054f3:	ff b3 00 02 00 00    	push   DWORD PTR [ebx+0x200]
100054f9:	e8 fc ff ff ff       	call   100054fa <NIWindow::invalidate()+0x32>	100054fa: R_386_PC32	free
100054fe:	83 c4 10             	add    esp,0x10
10005501:	c7 83 00 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x200],0x0
1000550b:	c7 83 fc 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x1fc],0x0
10005515:	c6 83 f8 01 00 00 00 	mov    BYTE PTR [ebx+0x1f8],0x0
1000551c:	83 8b 28 02 00 00 10 	or     DWORD PTR [ebx+0x228],0x10
10005523:	83 c4 08             	add    esp,0x8
10005526:	5b                   	pop    ebx
10005527:	c3                   	ret    

10005528 <NIWindow::putpixel(int, int, unsigned int)>:
10005528:	56                   	push   esi
10005529:	53                   	push   ebx
1000552a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
1000552e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10005532:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
10005535:	0f af 83 0c 02 00 00 	imul   eax,DWORD PTR [ebx+0x20c]
1000553c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10005540:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10005544:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005547:	83 fe 04             	cmp    esi,0x4
1000554a:	75 05                	jne    10005551 <NIWindow::putpixel(int, int, unsigned int)+0x29>
1000554c:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
1000554f:	eb 0e                	jmp    1000555f <NIWindow::putpixel(int, int, unsigned int)+0x37>
10005551:	83 fe 02             	cmp    esi,0x2
10005554:	75 06                	jne    1000555c <NIWindow::putpixel(int, int, unsigned int)+0x34>
10005556:	66 89 0c 42          	mov    WORD PTR [edx+eax*2],cx
1000555a:	eb 03                	jmp    1000555f <NIWindow::putpixel(int, int, unsigned int)+0x37>
1000555c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
1000555f:	5b                   	pop    ebx
10005560:	5e                   	pop    esi
10005561:	c3                   	ret    

10005562 <NIWindow::drawBasicWindow()>:
10005562:	55                   	push   ebp
10005563:	57                   	push   edi
10005564:	56                   	push   esi
10005565:	31 f6                	xor    esi,esi
10005567:	53                   	push   ebx
10005568:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
1000556c:	39 b5 10 02 00 00    	cmp    DWORD PTR [ebp+0x210],esi
10005572:	7e 31                	jle    100055a5 <NIWindow::drawBasicWindow()+0x43>
10005574:	31 db                	xor    ebx,ebx
10005576:	83 fe 19             	cmp    esi,0x19
10005579:	0f 9e c3             	setle  bl
1000557c:	31 ff                	xor    edi,edi
1000557e:	4b                   	dec    ebx
1000557f:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
10005585:	81 c3 ff ff ff 00    	add    ebx,0xffffff
1000558b:	39 bd 0c 02 00 00    	cmp    DWORD PTR [ebp+0x20c],edi
10005591:	7e 0f                	jle    100055a2 <NIWindow::drawBasicWindow()+0x40>
10005593:	53                   	push   ebx
10005594:	56                   	push   esi
10005595:	57                   	push   edi
10005596:	47                   	inc    edi
10005597:	55                   	push   ebp
10005598:	e8 fc ff ff ff       	call   10005599 <NIWindow::drawBasicWindow()+0x37>	10005599: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000559d:	83 c4 10             	add    esp,0x10
100055a0:	eb e9                	jmp    1000558b <NIWindow::drawBasicWindow()+0x29>
100055a2:	46                   	inc    esi
100055a3:	eb c7                	jmp    1000556c <NIWindow::drawBasicWindow()+0xa>
100055a5:	5b                   	pop    ebx
100055a6:	5e                   	pop    esi
100055a7:	5f                   	pop    edi
100055a8:	5d                   	pop    ebp
100055a9:	c3                   	ret    

100055aa <NIWindow::rerender()>:
100055aa:	57                   	push   edi
100055ab:	56                   	push   esi
100055ac:	53                   	push   ebx
100055ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100055b1:	80 bb f8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1f8],0x0
100055b8:	74 0c                	je     100055c6 <NIWindow::rerender()+0x1c>
100055ba:	83 ec 0c             	sub    esp,0xc
100055bd:	53                   	push   ebx
100055be:	e8 fc ff ff ff       	call   100055bf <NIWindow::rerender()+0x15>	100055bf: R_386_PC32	NIWindow::invalidate()
100055c3:	83 c4 10             	add    esp,0x10
100055c6:	8b b3 10 02 00 00    	mov    esi,DWORD PTR [ebx+0x210]
100055cc:	83 ec 0c             	sub    esp,0xc
100055cf:	89 b3 fc 01 00 00    	mov    DWORD PTR [ebx+0x1fc],esi
100055d5:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
100055dc:	50                   	push   eax
100055dd:	e8 fc ff ff ff       	call   100055de <NIWindow::rerender()+0x34>	100055de: R_386_PC32	malloc
100055e2:	0f af b3 0c 02 00 00 	imul   esi,DWORD PTR [ebx+0x20c]
100055e9:	89 83 00 02 00 00    	mov    DWORD PTR [ebx+0x200],eax
100055ef:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
100055f3:	89 34 24             	mov    DWORD PTR [esp],esi
100055f6:	e8 fc ff ff ff       	call   100055f7 <NIWindow::rerender()+0x4d>	100055f7: R_386_PC32	malloc
100055fb:	83 c4 10             	add    esp,0x10
100055fe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10005601:	31 c0                	xor    eax,eax
10005603:	39 83 fc 01 00 00    	cmp    DWORD PTR [ebx+0x1fc],eax
10005609:	0f 8e 91 00 00 00    	jle    100056a0 <NIWindow::rerender()+0xf6>
1000560f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10005616:	8b 8b 00 02 00 00    	mov    ecx,DWORD PTR [ebx+0x200]
1000561c:	01 d1                	add    ecx,edx
1000561e:	80 bb 14 02 00 00 00 	cmp    BYTE PTR [ebx+0x214],0x0
10005625:	75 61                	jne    10005688 <NIWindow::rerender()+0xde>
10005627:	f6 83 28 02 00 00 80 	test   BYTE PTR [ebx+0x228],0x80
1000562e:	75 58                	jne    10005688 <NIWindow::rerender()+0xde>
10005630:	83 f8 06             	cmp    eax,0x6
10005633:	7f 1e                	jg     10005653 <NIWindow::rerender()+0xa9>
10005635:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10005638: R_386_32	curveLookup7
1000563c:	66 89 31             	mov    WORD PTR [ecx],si
1000563f:	8b 8b 00 02 00 00    	mov    ecx,DWORD PTR [ebx+0x200]
10005645:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10005648: R_386_32	curveLookup7
1000564c:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
10005651:	eb 47                	jmp    1000569a <NIWindow::rerender()+0xf0>
10005653:	8b b3 10 02 00 00    	mov    esi,DWORD PTR [ebx+0x210]
10005659:	8d 7e fa             	lea    edi,[esi-0x6]
1000565c:	39 c7                	cmp    edi,eax
1000565e:	7f 28                	jg     10005688 <NIWindow::rerender()+0xde>
10005660:	29 c6                	sub    esi,eax
10005662:	8b 34 b5 00 00 00 00 	mov    esi,DWORD PTR [esi*4+0x0]	10005665: R_386_32	curveLookup7
10005669:	66 89 31             	mov    WORD PTR [ecx],si
1000566c:	8b 8b 10 02 00 00    	mov    ecx,DWORD PTR [ebx+0x210]
10005672:	8b b3 00 02 00 00    	mov    esi,DWORD PTR [ebx+0x200]
10005678:	29 c1                	sub    ecx,eax
1000567a:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	1000567d: R_386_32	curveLookup7
10005681:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
10005686:	eb 12                	jmp    1000569a <NIWindow::rerender()+0xf0>
10005688:	66 c7 01 00 00       	mov    WORD PTR [ecx],0x0
1000568d:	8b 8b 00 02 00 00    	mov    ecx,DWORD PTR [ebx+0x200]
10005693:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
1000569a:	40                   	inc    eax
1000569b:	e9 63 ff ff ff       	jmp    10005603 <NIWindow::rerender()+0x59>
100056a0:	8b 83 28 02 00 00    	mov    eax,DWORD PTR [ebx+0x228]
100056a6:	c6 83 f8 01 00 00 01 	mov    BYTE PTR [ebx+0x1f8],0x1
100056ad:	a8 02                	test   al,0x2
100056af:	75 31                	jne    100056e2 <NIWindow::rerender()+0x138>
100056b1:	a8 04                	test   al,0x4
100056b3:	74 18                	je     100056cd <NIWindow::rerender()+0x123>
100056b5:	8b 8b 10 02 00 00    	mov    ecx,DWORD PTR [ebx+0x210]
100056bb:	31 c0                	xor    eax,eax
100056bd:	0f af 8b 0c 02 00 00 	imul   ecx,DWORD PTR [ebx+0x20c]
100056c4:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
100056c7:	0f af 4b 04          	imul   ecx,DWORD PTR [ebx+0x4]
100056cb:	f3 aa                	rep stos BYTE PTR es:[edi],al
100056cd:	f6 83 28 02 00 00 08 	test   BYTE PTR [ebx+0x228],0x8
100056d4:	74 0c                	je     100056e2 <NIWindow::rerender()+0x138>
100056d6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
100056da:	5b                   	pop    ebx
100056db:	5e                   	pop    esi
100056dc:	5f                   	pop    edi
100056dd:	e9 80 fe ff ff       	jmp    10005562 <NIWindow::drawBasicWindow()>
100056e2:	5b                   	pop    ebx
100056e3:	5e                   	pop    esi
100056e4:	5f                   	pop    edi
100056e5:	c3                   	ret    

100056e6 <NIWindow::changeContext(NIContext*, int, int)>:
100056e6:	55                   	push   ebp
100056e7:	57                   	push   edi
100056e8:	56                   	push   esi
100056e9:	53                   	push   ebx
100056ea:	83 ec 18             	sub    esp,0x18
100056ed:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100056f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
100056f5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
100056f9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100056fd:	53                   	push   ebx
100056fe:	e8 fc ff ff ff       	call   100056ff <NIWindow::changeContext(NIContext*, int, int)+0x19>	100056ff: R_386_PC32	NIWindow::invalidate()
10005703:	89 33                	mov    DWORD PTR [ebx],esi
10005705:	89 ab 04 02 00 00    	mov    DWORD PTR [ebx+0x204],ebp
1000570b:	89 bb 08 02 00 00    	mov    DWORD PTR [ebx+0x208],edi
10005711:	83 c4 10             	add    esp,0x10
10005714:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
1000571a:	83 f8 08             	cmp    eax,0x8
1000571d:	7f 09                	jg     10005728 <NIWindow::changeContext(NIContext*, int, int)+0x42>
1000571f:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
10005726:	eb 15                	jmp    1000573d <NIWindow::changeContext(NIContext*, int, int)+0x57>
10005728:	83 f8 10             	cmp    eax,0x10
1000572b:	7f 09                	jg     10005736 <NIWindow::changeContext(NIContext*, int, int)+0x50>
1000572d:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
10005734:	eb 07                	jmp    1000573d <NIWindow::changeContext(NIContext*, int, int)+0x57>
10005736:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
1000573d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10005741:	83 c4 0c             	add    esp,0xc
10005744:	5b                   	pop    ebx
10005745:	5e                   	pop    esi
10005746:	5f                   	pop    edi
10005747:	5d                   	pop    ebp
10005748:	e9 5d fe ff ff       	jmp    100055aa <NIWindow::rerender()>
1000574d:	90                   	nop

1000574e <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
1000574e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10005752:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10005756:	c6 80 14 02 00 00 00 	mov    BYTE PTR [eax+0x214],0x0
1000575d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
10005763:	c7 80 28 02 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x228],0x200
1000576d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10005771:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
10005778:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
1000577e:	c7 80 00 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x200],0x0
10005788:	c7 80 fc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1fc],0x0
10005792:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10005799:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
100057a0:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
100057a7:	e9 3a ff ff ff       	jmp    100056e6 <NIWindow::changeContext(NIContext*, int, int)>

100057ac <NIWindow::request()>:
100057ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100057b0:	80 b8 f8 01 00 00 00 	cmp    BYTE PTR [eax+0x1f8],0x0
100057b7:	75 05                	jne    100057be <NIWindow::request()+0x12>
100057b9:	e9 ec fd ff ff       	jmp    100055aa <NIWindow::rerender()>
100057be:	c3                   	ret    
100057bf:	90                   	nop

100057c0 <NIWindow::SHADOW_TEST()>:
100057c0:	55                   	push   ebp
100057c1:	57                   	push   edi
100057c2:	56                   	push   esi
100057c3:	53                   	push   ebx
100057c4:	83 ec 28             	sub    esp,0x28
100057c7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
100057cb:	53                   	push   ebx
100057cc:	e8 fc ff ff ff       	call   100057cd <NIWindow::SHADOW_TEST()+0xd>	100057cd: R_386_PC32	NIWindow::request()
100057d1:	83 c4 10             	add    esp,0x10
100057d4:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
100057da:	39 83 fc 01 00 00    	cmp    DWORD PTR [ebx+0x1fc],eax
100057e0:	74 10                	je     100057f2 <NIWindow::SHADOW_TEST()+0x32>
100057e2:	83 ec 0c             	sub    esp,0xc
100057e5:	68 e4 60 00 10       	push   0x100060e4	100057e6: R_386_32	.text
100057ea:	e8 fc ff ff ff       	call   100057eb <NIWindow::SHADOW_TEST()+0x2b>	100057eb: R_386_PC32	KePanic(char const*)
100057ef:	83 c4 10             	add    esp,0x10
100057f2:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
100057f6:	0f 85 3a 01 00 00    	jne    10005936 <NIWindow::SHADOW_TEST()+0x176>
100057fc:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
10005804:	31 ff                	xor    edi,edi
10005806:	39 bb 10 02 00 00    	cmp    DWORD PTR [ebx+0x210],edi
1000580c:	0f 8e 24 01 00 00    	jle    10005936 <NIWindow::SHADOW_TEST()+0x176>
10005812:	8b 83 00 02 00 00    	mov    eax,DWORD PTR [ebx+0x200]
10005818:	8d 04 b8             	lea    eax,[eax+edi*4]
1000581b:	0f b7 30             	movzx  esi,WORD PTR [eax]
1000581e:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
10005822:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
10005826:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000582a:	89 34 24             	mov    DWORD PTR [esp],esi
1000582d:	8b ab 0c 02 00 00    	mov    ebp,DWORD PTR [ebx+0x20c]
10005833:	8b 8b 10 02 00 00    	mov    ecx,DWORD PTR [ebx+0x210]
10005839:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
1000583d:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
10005840:	0f 8e da 00 00 00    	jle    10005920 <NIWindow::SHADOW_TEST()+0x160>
10005846:	83 ff 05             	cmp    edi,0x5
10005849:	7e 1f                	jle    1000586a <NIWindow::SHADOW_TEST()+0xaa>
1000584b:	8d 41 fb             	lea    eax,[ecx-0x5]
1000584e:	39 f8                	cmp    eax,edi
10005850:	7e 18                	jle    1000586a <NIWindow::SHADOW_TEST()+0xaa>
10005852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10005856:	83 c0 05             	add    eax,0x5
10005859:	3b 04 24             	cmp    eax,DWORD PTR [esp]
1000585c:	7d 0c                	jge    1000586a <NIWindow::SHADOW_TEST()+0xaa>
1000585e:	8d 45 fb             	lea    eax,[ebp-0x5]
10005861:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10005864:	0f 8f ae 00 00 00    	jg     10005918 <NIWindow::SHADOW_TEST()+0x158>
1000586a:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
1000586e:	be ea 01 00 00       	mov    esi,0x1ea
10005873:	29 f9                	sub    ecx,edi
10005875:	89 f0                	mov    eax,esi
10005877:	83 c1 04             	add    ecx,0x4
1000587a:	99                   	cdq    
1000587b:	f7 f9                	idiv   ecx
1000587d:	89 c1                	mov    ecx,eax
1000587f:	89 f0                	mov    eax,esi
10005881:	99                   	cdq    
10005882:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10005886:	83 f8 0a             	cmp    eax,0xa
10005889:	7d 05                	jge    10005890 <NIWindow::SHADOW_TEST()+0xd0>
1000588b:	b8 0a 00 00 00       	mov    eax,0xa
10005890:	39 c1                	cmp    ecx,eax
10005892:	7d 02                	jge    10005896 <NIWindow::SHADOW_TEST()+0xd6>
10005894:	89 c1                	mov    ecx,eax
10005896:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
10005899:	b8 ea 01 00 00       	mov    eax,0x1ea
1000589e:	83 c5 04             	add    ebp,0x4
100058a1:	99                   	cdq    
100058a2:	f7 fd                	idiv   ebp
100058a4:	89 c6                	mov    esi,eax
100058a6:	83 f8 0a             	cmp    eax,0xa
100058a9:	7d 05                	jge    100058b0 <NIWindow::SHADOW_TEST()+0xf0>
100058ab:	be 0a 00 00 00       	mov    esi,0xa
100058b0:	8b 04 24             	mov    eax,DWORD PTR [esp]
100058b3:	8d 68 05             	lea    ebp,[eax+0x5]
100058b6:	b8 ea 01 00 00       	mov    eax,0x1ea
100058bb:	99                   	cdq    
100058bc:	f7 fd                	idiv   ebp
100058be:	39 c6                	cmp    esi,eax
100058c0:	7d 02                	jge    100058c4 <NIWindow::SHADOW_TEST()+0x104>
100058c2:	89 c6                	mov    esi,eax
100058c4:	89 f0                	mov    eax,esi
100058c6:	89 ca                	mov    edx,ecx
100058c8:	0f af c6             	imul   eax,esi
100058cb:	0f af d1             	imul   edx,ecx
100058ce:	0f af f1             	imul   esi,ecx
100058d1:	01 d0                	add    eax,edx
100058d3:	8d 04 c6             	lea    eax,[esi+eax*8]
100058d6:	c1 f8 08             	sar    eax,0x8
100058d9:	83 f8 66             	cmp    eax,0x66
100058dc:	7e 4c                	jle    1000592a <NIWindow::SHADOW_TEST()+0x16a>
100058de:	8d 50 9a             	lea    edx,[eax-0x66]
100058e1:	d1 fa                	sar    edx,1
100058e3:	8d 42 66             	lea    eax,[edx+0x66]
100058e6:	83 f8 73             	cmp    eax,0x73
100058e9:	7e 3f                	jle    1000592a <NIWindow::SHADOW_TEST()+0x16a>
100058eb:	83 ea 0d             	sub    edx,0xd
100058ee:	c1 fa 02             	sar    edx,0x2
100058f1:	8d 42 73             	lea    eax,[edx+0x73]
100058f4:	83 f8 7f             	cmp    eax,0x7f
100058f7:	7f 1f                	jg     10005918 <NIWindow::SHADOW_TEST()+0x158>
100058f9:	50                   	push   eax
100058fa:	8b 83 08 02 00 00    	mov    eax,DWORD PTR [ebx+0x208]
10005900:	01 f8                	add    eax,edi
10005902:	50                   	push   eax
10005903:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10005907:	03 83 04 02 00 00    	add    eax,DWORD PTR [ebx+0x204]
1000590d:	50                   	push   eax
1000590e:	ff 33                	push   DWORD PTR [ebx]
10005910:	e8 fc ff ff ff       	call   10005911 <NIWindow::SHADOW_TEST()+0x151>	10005911: R_386_PC32	NIContext::drvDarken4(int, int, int)
10005915:	83 c4 10             	add    esp,0x10
10005918:	ff 04 24             	inc    DWORD PTR [esp]
1000591b:	e9 0d ff ff ff       	jmp    1000582d <NIWindow::SHADOW_TEST()+0x6d>
10005920:	47                   	inc    edi
10005921:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
10005925:	e9 dc fe ff ff       	jmp    10005806 <NIWindow::SHADOW_TEST()+0x46>
1000592a:	83 f8 0a             	cmp    eax,0xa
1000592d:	7d ca                	jge    100058f9 <NIWindow::SHADOW_TEST()+0x139>
1000592f:	b8 0a 00 00 00       	mov    eax,0xa
10005934:	eb c3                	jmp    100058f9 <NIWindow::SHADOW_TEST()+0x139>
10005936:	83 c4 1c             	add    esp,0x1c
10005939:	5b                   	pop    ebx
1000593a:	5e                   	pop    esi
1000593b:	5f                   	pop    edi
1000593c:	5d                   	pop    ebp
1000593d:	c3                   	ret    

1000593e <NIWindow::realdraw()>:
1000593e:	55                   	push   ebp
1000593f:	57                   	push   edi
10005940:	56                   	push   esi
10005941:	53                   	push   ebx
10005942:	83 ec 18             	sub    esp,0x18
10005945:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10005949:	53                   	push   ebx
1000594a:	e8 fc ff ff ff       	call   1000594b <NIWindow::realdraw()+0xd>	1000594b: R_386_PC32	NIWindow::request()
1000594f:	83 c4 10             	add    esp,0x10
10005952:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005958:	39 83 fc 01 00 00    	cmp    DWORD PTR [ebx+0x1fc],eax
1000595e:	74 10                	je     10005970 <NIWindow::realdraw()+0x32>
10005960:	83 ec 0c             	sub    esp,0xc
10005963:	68 e4 60 00 10       	push   0x100060e4	10005964: R_386_32	.text
10005968:	e8 fc ff ff ff       	call   10005969 <NIWindow::realdraw()+0x2b>	10005969: R_386_PC32	KePanic(char const*)
1000596d:	83 c4 10             	add    esp,0x10
10005970:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10005974:	75 55                	jne    100059cb <NIWindow::realdraw()+0x8d>
10005976:	31 f6                	xor    esi,esi
10005978:	39 b3 10 02 00 00    	cmp    DWORD PTR [ebx+0x210],esi
1000597e:	7e 4b                	jle    100059cb <NIWindow::realdraw()+0x8d>
10005980:	8b 83 00 02 00 00    	mov    eax,DWORD PTR [ebx+0x200]
10005986:	8d 04 b0             	lea    eax,[eax+esi*4]
10005989:	0f b7 28             	movzx  ebp,WORD PTR [eax]
1000598c:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
10005990:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005996:	89 c2                	mov    edx,eax
10005998:	29 fa                	sub    edx,edi
1000599a:	39 ea                	cmp    edx,ebp
1000599c:	7e 2a                	jle    100059c8 <NIWindow::realdraw()+0x8a>
1000599e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
100059a1:	0f af c6             	imul   eax,esi
100059a4:	01 e8                	add    eax,ebp
100059a6:	ff 34 82             	push   DWORD PTR [edx+eax*4]
100059a9:	8b 83 08 02 00 00    	mov    eax,DWORD PTR [ebx+0x208]
100059af:	01 f0                	add    eax,esi
100059b1:	50                   	push   eax
100059b2:	8b 83 04 02 00 00    	mov    eax,DWORD PTR [ebx+0x204]
100059b8:	01 e8                	add    eax,ebp
100059ba:	45                   	inc    ebp
100059bb:	50                   	push   eax
100059bc:	ff 33                	push   DWORD PTR [ebx]
100059be:	e8 fc ff ff ff       	call   100059bf <NIWindow::realdraw()+0x81>	100059bf: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
100059c3:	83 c4 10             	add    esp,0x10
100059c6:	eb c8                	jmp    10005990 <NIWindow::realdraw()+0x52>
100059c8:	46                   	inc    esi
100059c9:	eb ad                	jmp    10005978 <NIWindow::realdraw()+0x3a>
100059cb:	83 c4 0c             	add    esp,0xc
100059ce:	5b                   	pop    ebx
100059cf:	5e                   	pop    esi
100059d0:	5f                   	pop    edi
100059d1:	5d                   	pop    ebp
100059d2:	c3                   	ret    
100059d3:	90                   	nop

100059d4 <NIWindow::drawResizeMarker()>:
100059d4:	53                   	push   ebx
100059d5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
100059d9:	f6 83 28 02 00 00 01 	test   BYTE PTR [ebx+0x228],0x1
100059e0:	0f 85 f6 01 00 00    	jne    10005bdc <NIWindow::drawResizeMarker()+0x208>
100059e6:	80 bb 14 02 00 00 00 	cmp    BYTE PTR [ebx+0x214],0x0
100059ed:	0f 85 e9 01 00 00    	jne    10005bdc <NIWindow::drawResizeMarker()+0x208>
100059f3:	68 55 55 55 00       	push   0x555555
100059f8:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
100059fe:	83 e8 05             	sub    eax,0x5
10005a01:	50                   	push   eax
10005a02:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005a08:	83 e8 0d             	sub    eax,0xd
10005a0b:	50                   	push   eax
10005a0c:	53                   	push   ebx
10005a0d:	e8 fc ff ff ff       	call   10005a0e <NIWindow::drawResizeMarker()+0x3a>	10005a0e: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005a12:	68 55 55 55 00       	push   0x555555
10005a17:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005a1d:	83 e8 05             	sub    eax,0x5
10005a20:	50                   	push   eax
10005a21:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005a27:	83 e8 0b             	sub    eax,0xb
10005a2a:	50                   	push   eax
10005a2b:	53                   	push   ebx
10005a2c:	e8 fc ff ff ff       	call   10005a2d <NIWindow::drawResizeMarker()+0x59>	10005a2d: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005a31:	83 c4 20             	add    esp,0x20
10005a34:	68 55 55 55 00       	push   0x555555
10005a39:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005a3f:	83 e8 05             	sub    eax,0x5
10005a42:	50                   	push   eax
10005a43:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005a49:	83 e8 09             	sub    eax,0x9
10005a4c:	50                   	push   eax
10005a4d:	53                   	push   ebx
10005a4e:	e8 fc ff ff ff       	call   10005a4f <NIWindow::drawResizeMarker()+0x7b>	10005a4f: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005a53:	68 55 55 55 00       	push   0x555555
10005a58:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005a5e:	83 e8 05             	sub    eax,0x5
10005a61:	50                   	push   eax
10005a62:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005a68:	83 e8 07             	sub    eax,0x7
10005a6b:	50                   	push   eax
10005a6c:	53                   	push   ebx
10005a6d:	e8 fc ff ff ff       	call   10005a6e <NIWindow::drawResizeMarker()+0x9a>	10005a6e: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005a72:	83 c4 20             	add    esp,0x20
10005a75:	68 55 55 55 00       	push   0x555555
10005a7a:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005a80:	83 e8 05             	sub    eax,0x5
10005a83:	50                   	push   eax
10005a84:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005a8a:	83 e8 05             	sub    eax,0x5
10005a8d:	50                   	push   eax
10005a8e:	53                   	push   ebx
10005a8f:	e8 fc ff ff ff       	call   10005a90 <NIWindow::drawResizeMarker()+0xbc>	10005a90: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005a94:	68 55 55 55 00       	push   0x555555
10005a99:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005a9f:	83 e8 07             	sub    eax,0x7
10005aa2:	50                   	push   eax
10005aa3:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005aa9:	83 e8 0b             	sub    eax,0xb
10005aac:	50                   	push   eax
10005aad:	53                   	push   ebx
10005aae:	e8 fc ff ff ff       	call   10005aaf <NIWindow::drawResizeMarker()+0xdb>	10005aaf: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005ab3:	83 c4 20             	add    esp,0x20
10005ab6:	68 55 55 55 00       	push   0x555555
10005abb:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005ac1:	83 e8 07             	sub    eax,0x7
10005ac4:	50                   	push   eax
10005ac5:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005acb:	83 e8 09             	sub    eax,0x9
10005ace:	50                   	push   eax
10005acf:	53                   	push   ebx
10005ad0:	e8 fc ff ff ff       	call   10005ad1 <NIWindow::drawResizeMarker()+0xfd>	10005ad1: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005ad5:	68 55 55 55 00       	push   0x555555
10005ada:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005ae0:	83 e8 07             	sub    eax,0x7
10005ae3:	50                   	push   eax
10005ae4:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005aea:	83 e8 07             	sub    eax,0x7
10005aed:	50                   	push   eax
10005aee:	53                   	push   ebx
10005aef:	e8 fc ff ff ff       	call   10005af0 <NIWindow::drawResizeMarker()+0x11c>	10005af0: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005af4:	83 c4 20             	add    esp,0x20
10005af7:	68 55 55 55 00       	push   0x555555
10005afc:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005b02:	83 e8 07             	sub    eax,0x7
10005b05:	50                   	push   eax
10005b06:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005b0c:	83 e8 05             	sub    eax,0x5
10005b0f:	50                   	push   eax
10005b10:	53                   	push   ebx
10005b11:	e8 fc ff ff ff       	call   10005b12 <NIWindow::drawResizeMarker()+0x13e>	10005b12: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005b16:	68 55 55 55 00       	push   0x555555
10005b1b:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005b21:	83 e8 09             	sub    eax,0x9
10005b24:	50                   	push   eax
10005b25:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005b2b:	83 e8 09             	sub    eax,0x9
10005b2e:	50                   	push   eax
10005b2f:	53                   	push   ebx
10005b30:	e8 fc ff ff ff       	call   10005b31 <NIWindow::drawResizeMarker()+0x15d>	10005b31: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005b35:	83 c4 20             	add    esp,0x20
10005b38:	68 55 55 55 00       	push   0x555555
10005b3d:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005b43:	83 e8 09             	sub    eax,0x9
10005b46:	50                   	push   eax
10005b47:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005b4d:	83 e8 07             	sub    eax,0x7
10005b50:	50                   	push   eax
10005b51:	53                   	push   ebx
10005b52:	e8 fc ff ff ff       	call   10005b53 <NIWindow::drawResizeMarker()+0x17f>	10005b53: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005b57:	68 55 55 55 00       	push   0x555555
10005b5c:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005b62:	83 e8 09             	sub    eax,0x9
10005b65:	50                   	push   eax
10005b66:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005b6c:	83 e8 05             	sub    eax,0x5
10005b6f:	50                   	push   eax
10005b70:	53                   	push   ebx
10005b71:	e8 fc ff ff ff       	call   10005b72 <NIWindow::drawResizeMarker()+0x19e>	10005b72: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005b76:	83 c4 20             	add    esp,0x20
10005b79:	68 55 55 55 00       	push   0x555555
10005b7e:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005b84:	83 e8 0b             	sub    eax,0xb
10005b87:	50                   	push   eax
10005b88:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005b8e:	83 e8 07             	sub    eax,0x7
10005b91:	50                   	push   eax
10005b92:	53                   	push   ebx
10005b93:	e8 fc ff ff ff       	call   10005b94 <NIWindow::drawResizeMarker()+0x1c0>	10005b94: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005b98:	68 55 55 55 00       	push   0x555555
10005b9d:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005ba3:	83 e8 0b             	sub    eax,0xb
10005ba6:	50                   	push   eax
10005ba7:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005bad:	83 e8 05             	sub    eax,0x5
10005bb0:	50                   	push   eax
10005bb1:	53                   	push   ebx
10005bb2:	e8 fc ff ff ff       	call   10005bb3 <NIWindow::drawResizeMarker()+0x1df>	10005bb3: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005bb7:	83 c4 20             	add    esp,0x20
10005bba:	68 55 55 55 00       	push   0x555555
10005bbf:	8b 83 10 02 00 00    	mov    eax,DWORD PTR [ebx+0x210]
10005bc5:	83 e8 0d             	sub    eax,0xd
10005bc8:	50                   	push   eax
10005bc9:	8b 83 0c 02 00 00    	mov    eax,DWORD PTR [ebx+0x20c]
10005bcf:	83 e8 05             	sub    eax,0x5
10005bd2:	50                   	push   eax
10005bd3:	53                   	push   ebx
10005bd4:	e8 fc ff ff ff       	call   10005bd5 <NIWindow::drawResizeMarker()+0x201>	10005bd5: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005bd9:	83 c4 10             	add    esp,0x10
10005bdc:	5b                   	pop    ebx
10005bdd:	c3                   	ret    

10005bde <List<NIWindow*>::insertAtHead(NIWindow*)>:
10005bde:	53                   	push   ebx
10005bdf:	83 ec 14             	sub    esp,0x14
10005be2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10005be6:	6a 0c                	push   0xc
10005be8:	e8 fc ff ff ff       	call   10005be9 <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	10005be9: R_386_PC32	malloc
10005bed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10005bf1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10005bf8:	89 10                	mov    DWORD PTR [eax],edx
10005bfa:	83 c4 10             	add    esp,0x10
10005bfd:	8b 13                	mov    edx,DWORD PTR [ebx]
10005bff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10005c02:	85 d2                	test   edx,edx
10005c04:	74 05                	je     10005c0b <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
10005c06:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10005c09:	eb 03                	jmp    10005c0e <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
10005c0b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10005c0e:	89 03                	mov    DWORD PTR [ebx],eax
10005c10:	83 c4 08             	add    esp,0x8
10005c13:	5b                   	pop    ebx
10005c14:	c3                   	ret    
10005c15:	90                   	nop

10005c16 <List<NIWindow*>::deleteElement(NIWindow*&)>:
10005c16:	57                   	push   edi
10005c17:	56                   	push   esi
10005c18:	53                   	push   ebx
10005c19:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10005c1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10005c21:	8b 19                	mov    ebx,DWORD PTR [ecx]
10005c23:	85 db                	test   ebx,ebx
10005c25:	74 5e                	je     10005c85 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10005c27:	8b 30                	mov    esi,DWORD PTR [eax]
10005c29:	89 da                	mov    edx,ebx
10005c2b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
10005c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
10005c30:	85 c0                	test   eax,eax
10005c32:	74 08                	je     10005c3c <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10005c34:	39 f7                	cmp    edi,esi
10005c36:	73 04                	jae    10005c3c <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10005c38:	89 c2                	mov    edx,eax
10005c3a:	eb ef                	jmp    10005c2b <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
10005c3c:	39 f7                	cmp    edi,esi
10005c3e:	75 45                	jne    10005c85 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10005c40:	39 d3                	cmp    ebx,edx
10005c42:	75 18                	jne    10005c5c <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
10005c44:	89 01                	mov    DWORD PTR [ecx],eax
10005c46:	85 c0                	test   eax,eax
10005c48:	75 09                	jne    10005c53 <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
10005c4a:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
10005c51:	eb 1e                	jmp    10005c71 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10005c53:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10005c5a:	eb 15                	jmp    10005c71 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10005c5c:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10005c5f:	85 c0                	test   eax,eax
10005c61:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10005c64:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10005c67:	74 05                	je     10005c6e <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
10005c69:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10005c6c:	eb 03                	jmp    10005c71 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10005c6e:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
10005c71:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
10005c79:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10005c7d:	5b                   	pop    ebx
10005c7e:	5e                   	pop    esi
10005c7f:	5f                   	pop    edi
10005c80:	e9 fc ff ff ff       	jmp    10005c81 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	10005c81: R_386_PC32	operator delete(void*, unsigned long)
10005c85:	5b                   	pop    ebx
10005c86:	5e                   	pop    esi
10005c87:	5f                   	pop    edi
10005c88:	c3                   	ret    
10005c89:	43                   	inc    ebx
10005c8a:	3a 2f                	cmp    ch,BYTE PTR [edi]
10005c8c:	42                   	inc    edx
10005c8d:	61                   	popa   
10005c8e:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005c8f:	61                   	popa   
10005c90:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005c91:	61                   	popa   
10005c92:	2f                   	das    
10005c93:	53                   	push   ebx
10005c94:	79 73                	jns    10005d09 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005c96:	74 65                	je     10005cfd <List<NIWindow*>::deleteElement(NIWindow*&)+0xe7>
10005c98:	6d                   	ins    DWORD PTR es:[edi],dx
10005c99:	2f                   	das    
10005c9a:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005c9b:	65 77 67             	gs ja  10005d05 <List<NIWindow*>::deleteElement(NIWindow*&)+0xef>
10005c9e:	75 69                	jne    10005d09 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005ca0:	2e 65 78 65          	cs gs js 10005d09 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005ca4:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10005ca7:	4e                   	dec    esi
10005ca8:	43                   	inc    ebx
10005ca9:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10005cac:	4e                   	dec    esi
10005cad:	32 00                	xor    al,BYTE PTR [eax]
10005caf:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
10005cb2:	53                   	push   ebx
10005cb3:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
10005cb6:	43                   	inc    ebx
10005cb7:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005cb8:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005cb9:	74 65                	je     10005d20 <List<NIWindow*>::deleteElement(NIWindow*&)+0x10a>
10005cbb:	78 74                	js     10005d31 <List<NIWindow*>::deleteElement(NIWindow*&)+0x11b>
10005cbd:	3a 3a                	cmp    bh,BYTE PTR [edx]
10005cbf:	64 72 76             	fs jb  10005d38 <List<NIWindow*>::deleteElement(NIWindow*&)+0x122>
10005cc2:	52                   	push   edx
10005cc3:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10005cc5:	64 65 72 54          	fs gs jb 10005d1d <List<NIWindow*>::deleteElement(NIWindow*&)+0x107>
10005cc9:	54                   	push   esp
10005cca:	46                   	inc    esi
10005ccb:	34 00                	xor    al,0x0
10005ccd:	43                   	inc    ebx
10005cce:	3a 2f                	cmp    ch,BYTE PTR [edi]
10005cd0:	42                   	inc    edx
10005cd1:	61                   	popa   
10005cd2:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005cd3:	61                   	popa   
10005cd4:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005cd5:	61                   	popa   
10005cd6:	2f                   	das    
10005cd7:	46                   	inc    esi
10005cd8:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005cd9:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005cda:	74 73                	je     10005d4f <List<NIWindow*>::deleteElement(NIWindow*&)+0x139>
10005cdc:	2f                   	das    
10005cdd:	53                   	push   ebx
10005cde:	46                   	inc    esi
10005cdf:	4e                   	dec    esi
10005ce0:	00 43 41             	add    BYTE PTR [ebx+0x41],al
10005ce3:	4e                   	dec    esi
10005ce4:	4e                   	dec    esi
10005ce5:	4f                   	dec    edi
10005ce6:	54                   	push   esp
10005ce7:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10005ceb:	44                   	inc    esp
10005cec:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10005cef:	4e                   	dec    esi
10005cf0:	54                   	push   esp
10005cf1:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
10005cf5:	45                   	inc    ebp
10005cf6:	43                   	inc    ebx
10005cf7:	54                   	push   esp
10005cf8:	4f                   	dec    edi
10005cf9:	52                   	push   edx
10005cfa:	59                   	pop    ecx
10005cfb:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005cfe:	2f                   	das    
10005cff:	42                   	inc    edx
10005d00:	61                   	popa   
10005d01:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005d02:	61                   	popa   
10005d03:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005d04:	61                   	popa   
10005d05:	2f                   	das    
10005d06:	46                   	inc    esi
10005d07:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005d08:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005d09:	74 73                	je     10005d7e <List<NIWindow*>::deleteElement(NIWindow*&)+0x168>
10005d0b:	2f                   	das    
10005d0c:	53                   	push   ebx
10005d0d:	46                   	inc    esi
10005d0e:	4e                   	dec    esi
10005d0f:	2f                   	das    
10005d10:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
10005d13:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005d14:	74 20                	je     10005d36 <List<NIWindow*>::deleteElement(NIWindow*&)+0x120>
10005d16:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
10005d1d:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
10005d24:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
10005d28:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
10005d2e:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005d2f:	74 3a                	je     10005d6b <List<NIWindow*>::deleteElement(NIWindow*&)+0x155>
10005d31:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10005d37:	53                   	push   ebx
10005d38:	46                   	inc    esi
10005d39:	4e                   	dec    esi
10005d3a:	5f                   	pop    edi
10005d3b:	52                   	push   edx
10005d3c:	45                   	inc    ebp
10005d3d:	53                   	push   ebx
10005d3e:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10005d44:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
10005d47:	6d                   	ins    DWORD PTR es:[edi],dx
10005d48:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005d49:	72 79                	jb     10005dc4 <_ssfn__compute_huffman_codes::length_dezigzag+0x4>
10005d4b:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
10005d4e:	6c                   	ins    BYTE PTR es:[edi],dx
10005d4f:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005d50:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
10005d53:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
10005d5a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005d5b:	72 00                	jb     10005d5d <List<NIWindow*>::deleteElement(NIWindow*&)+0x147>
10005d5d:	42                   	inc    edx
10005d5e:	61                   	popa   
10005d5f:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
10005d63:	6c                   	ins    BYTE PTR es:[edi],dx
10005d64:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
10005d68:	72 6d                	jb     10005dd7 <_ssfn__compute_huffman_codes::length_dezigzag+0x17>
10005d6a:	61                   	popa   
10005d6b:	74 00                	je     10005d6d <List<NIWindow*>::deleteElement(NIWindow*&)+0x157>
10005d6d:	4e                   	dec    esi
10005d6e:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005d6f:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10005d72:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005d73:	74 20                	je     10005d95 <List<NIWindow*>::deleteElement(NIWindow*&)+0x17f>
10005d75:	66 61                	popaw  
10005d77:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
10005d7a:	66 6f                	outs   dx,WORD PTR ds:[esi]
10005d7c:	75 6e                	jne    10005dec <_ssfn__zdist_extra+0xc>
10005d7e:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
10005d82:	76 61                	jbe    10005de5 <_ssfn__zdist_extra+0x5>
10005d84:	6c                   	ins    BYTE PTR es:[edi],dx
10005d85:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
10005d8d:	20 76 61             	and    BYTE PTR [esi+0x61],dh
10005d90:	6c                   	ins    BYTE PTR es:[edi],dx
10005d91:	75 65                	jne    10005df8 <_ssfn__zdist_extra+0x18>
10005d93:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005d96:	76 61                	jbe    10005df9 <_ssfn__zdist_extra+0x19>
10005d98:	6c                   	ins    BYTE PTR es:[edi],dx
10005d99:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
10005da1:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005da4:	76 61                	jbe    10005e07 <_ssfn__zdist_extra+0x27>
10005da6:	6c                   	ins    BYTE PTR es:[edi],dx
10005da7:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
10005daf:	47                   	inc    edi
10005db0:	6c                   	ins    BYTE PTR es:[edi],dx
10005db1:	79 70                	jns    10005e23 <_ssfn__zdist_extra+0x43>
10005db3:	68 20 6e 6f 74       	push   0x746f6e20
10005db8:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10005dbb:	75 6e                	jne    10005e2b <_ssfn__zdist_extra+0x4b>
10005dbd:	64                   	fs
10005dbe:	00                   	.byte 0x0
10005dbf:	90                   	nop

10005dc0 <_ssfn__compute_huffman_codes::length_dezigzag>:
10005dc0:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10005dd0:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

10005de0 <_ssfn__zdist_extra>:
	...
10005df0:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
10005e00:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
10005e10:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
10005e20:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
10005e30:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
10005e40:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
10005e50:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

10005e60 <_ssfn__zdist_base>:
10005e60:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
10005e70:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
10005e80:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
10005e90:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
10005ea0:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
10005eb0:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10005ec0:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10005ed0:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

10005ee0 <_ssfn__zlength_extra>:
	...
10005f00:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
10005f10:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
10005f20:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
10005f30:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
10005f40:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

10005f60 <_ssfn__zlength_base>:
10005f60:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
10005f70:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
10005f80:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
10005f90:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
10005fa0:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
10005fb0:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10005fc0:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10005fd0:	02 01 00 00 00 00 00 00 00 00 00 00 4d 4f 55 53     ............MOUS
10005fe0:	45 20 42 55 54 54 4f 4e 53 3a 20 25 64 0a 00 43     E BUTTONS: %d..C
10005ff0:	3a 2f 42 61 6e 61 6e 61 2f 43 75 72 73 6f 72 73     :/Banana/Cursors
10006000:	2f 53 54 41 4e 44 41 52 44 2e 43 55 52 00 43 55     /STANDARD.CUR.CU
10006010:	52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20 31     RSOR LOAD: BAD 1
10006020:	0a 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a 20 42     ..CURSOR LOAD: B
10006030:	41 44 20 32 0a 00 43 55 52 53 4f 52 53 3a 20 25     AD 2..CURSORS: %
10006040:	64 0a 00 4e 52 4d 4c 00 57 41 49 54 00 54 4c 44     d..NRML.WAIT.TLD
10006050:	52 00 54 45 58 54 00 56 45 52 54 00 48 4f 52 5a     R.TEXT.VERT.HORZ
10006060:	00 48 41 4e 44 00 43 55 52 53 4f 52 20 4c 4f 41     .HAND.CURSOR LOA
10006070:	44 3a 20 42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b     D: BAD 3..NiLink
10006080:	43 6f 6d 6d 61 6e 64 52 65 73 75 70 70 6c 79 53     CommandResupplyS
10006090:	63 61 6e 6c 69 6e 65 3a 20 30 78 25 58 20 28 25     canline: 0x%X (%
100060a0:	64 2c 20 25 64 29 20 2d 3e 20 00 28 25 64 2c 20     d, %d) -> .(%d, 
100060b0:	25 64 29 0a 00 66 90 90 80 53 00 10 1a 54 00 10     %d)..f...S...T..	100060b8: R_386_32	.text
	100060bc: R_386_32	.text
100060c0:	1a 54 00 10 1a 54 00 10 92 53 00 10 a1 53 00 10     .T...T...S...S..	100060c0: R_386_32	.text
	100060c4: R_386_32	.text
	100060c8: R_386_32	.text
	100060cc: R_386_32	.text
100060d0:	c0 53 00 10 cf 53 00 10 ea 53 00 10 f9 53 00 10     .S...S...S...S..	100060d0: R_386_32	.text
	100060d4: R_386_32	.text
	100060d8: R_386_32	.text
	100060dc: R_386_32	.text
100060e0:	08 54 00 10 41 53 53 45 52 54 49 4f 4e 20 46 41     .T..ASSERTION FA	100060e0: R_386_32	.text
100060f0:	49 4c 55 52 45 20 28 41 29 2e 00                    ILURE (A)..
