
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 48             	sub    esp,0x48
10000007:	68 41 2d 00 10       	push   0x10002d41	10000008: R_386_32	.text
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000011:	e8 fc ff ff ff       	call   10000012 <start(void*)+0x12>	10000012: R_386_PC32	legacyFontInit()
10000016:	e8 fc ff ff ff       	call   10000017 <start(void*)+0x17>	10000017: R_386_PC32	setupCursor()
1000001b:	c7 04 24 1c 00 00 00 	mov    DWORD PTR [esp],0x1c
10000022:	e8 fc ff ff ff       	call   10000023 <start(void*)+0x23>	10000023: R_386_PC32	operator new(unsigned long)
10000027:	89 c3                	mov    ebx,eax
10000029:	58                   	pop    eax
1000002a:	5a                   	pop    edx
1000002b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000002d: R_386_32	screen
10000031:	53                   	push   ebx
10000032:	e8 fc ff ff ff       	call   10000033 <start(void*)+0x33>	10000033: R_386_PC32	Context::Context(Video*)
10000037:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000003e:	e8 fc ff ff ff       	call   1000003f <start(void*)+0x3f>	1000003f: R_386_PC32	operator new(unsigned long)
10000043:	89 c6                	mov    esi,eax
10000045:	59                   	pop    ecx
10000046:	5f                   	pop    edi
10000047:	53                   	push   ebx
10000048:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000004b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000004e:	6a 00                	push   0x0
10000050:	6a 00                	push   0x0
10000052:	50                   	push   eax
10000053:	e8 fc ff ff ff       	call   10000054 <start(void*)+0x54>	10000054: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000058:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
1000005f:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000061: R_386_32	rootRgn
10000065:	83 c4 14             	add    esp,0x14
10000068:	6a 58                	push   0x58
1000006a:	e8 fc ff ff ff       	call   1000006b <start(void*)+0x6b>	1000006b: R_386_PC32	operator new(unsigned long)
1000006f:	89 c7                	mov    edi,eax
10000071:	83 c4 0c             	add    esp,0xc
10000074:	53                   	push   ebx
10000075:	68 aa aa 00 00       	push   0xaaaa
1000007a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000007d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10000080:	6a 00                	push   0x0
10000082:	6a 00                	push   0x0
10000084:	50                   	push   eax
10000085:	e8 fc ff ff ff       	call   10000086 <start(void*)+0x86>	10000086: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
1000008a:	83 c4 18             	add    esp,0x18
1000008d:	57                   	push   edi
1000008e:	56                   	push   esi
1000008f:	e8 fc ff ff ff       	call   10000090 <start(void*)+0x90>	10000090: R_386_PC32	GDO::addChild(GDO*)
10000094:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000009b:	e8 fc ff ff ff       	call   1000009c <start(void*)+0x9c>	1000009c: R_386_PC32	operator new(unsigned long)
100000a0:	89 c1                	mov    ecx,eax
100000a2:	5d                   	pop    ebp
100000a3:	58                   	pop    eax
100000a4:	6a 06                	push   0x6
100000a6:	51                   	push   ecx
100000a7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
100000ab:	e8 fc ff ff ff       	call   100000ac <start(void*)+0xac>	100000ac: R_386_PC32	Brush::Brush(BrushType)
100000b0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000b7:	e8 fc ff ff ff       	call   100000b8 <start(void*)+0xb8>	100000b8: R_386_PC32	operator new(unsigned long)
100000bc:	89 c2                	mov    edx,eax
100000be:	58                   	pop    eax
100000bf:	59                   	pop    ecx
100000c0:	6a 07                	push   0x7
100000c2:	52                   	push   edx
100000c3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
100000c7:	e8 fc ff ff ff       	call   100000c8 <start(void*)+0xc8>	100000c8: R_386_PC32	Brush::Brush(BrushType)
100000cc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000d3:	e8 fc ff ff ff       	call   100000d4 <start(void*)+0xd4>	100000d4: R_386_PC32	operator new(unsigned long)
100000d8:	89 c5                	mov    ebp,eax
100000da:	5f                   	pop    edi
100000db:	58                   	pop    eax
100000dc:	6a 08                	push   0x8
100000de:	55                   	push   ebp
100000df:	e8 fc ff ff ff       	call   100000e0 <start(void*)+0xe0>	100000e0: R_386_PC32	Brush::Brush(BrushType)
100000e4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000eb:	e8 fc ff ff ff       	call   100000ec <start(void*)+0xec>	100000ec: R_386_PC32	operator new(unsigned long)
100000f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100000f4:	58                   	pop    eax
100000f5:	5a                   	pop    edx
100000f6:	6a 0a                	push   0xa
100000f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100000fc:	e8 fc ff ff ff       	call   100000fd <start(void*)+0xfd>	100000fd: R_386_PC32	Brush::Brush(BrushType)
10000101:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000108:	e8 fc ff ff ff       	call   10000109 <start(void*)+0x109>	10000109: R_386_PC32	operator new(unsigned long)
1000010d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000111:	59                   	pop    ecx
10000112:	5f                   	pop    edi
10000113:	6a 09                	push   0x9
10000115:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000119:	e8 fc ff ff ff       	call   1000011a <start(void*)+0x11a>	1000011a: R_386_PC32	Brush::Brush(BrushType)
1000011e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000125:	e8 fc ff ff ff       	call   10000126 <start(void*)+0x126>	10000126: R_386_PC32	operator new(unsigned long)
1000012a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000012e:	58                   	pop    eax
1000012f:	5a                   	pop    edx
10000130:	6a 0b                	push   0xb
10000132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000136:	e8 fc ff ff ff       	call   10000137 <start(void*)+0x137>	10000137: R_386_PC32	Brush::Brush(BrushType)
1000013b:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000142:	e8 fc ff ff ff       	call   10000143 <start(void*)+0x143>	10000143: R_386_PC32	operator new(unsigned long)
10000147:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000014b:	59                   	pop    ecx
1000014c:	5f                   	pop    edi
1000014d:	6a 0c                	push   0xc
1000014f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10000153:	e8 fc ff ff ff       	call   10000154 <start(void*)+0x154>	10000154: R_386_PC32	Brush::Brush(BrushType)
10000158:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000015f:	e8 fc ff ff ff       	call   10000160 <start(void*)+0x160>	10000160: R_386_PC32	operator new(unsigned long)
10000164:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10000168:	58                   	pop    eax
10000169:	5a                   	pop    edx
1000016a:	6a 0d                	push   0xd
1000016c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000170:	e8 fc ff ff ff       	call   10000171 <start(void*)+0x171>	10000171: R_386_PC32	Brush::Brush(BrushType)
10000175:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000017c:	e8 fc ff ff ff       	call   1000017d <start(void*)+0x17d>	1000017d: R_386_PC32	operator new(unsigned long)
10000181:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10000185:	59                   	pop    ecx
10000186:	5f                   	pop    edi
10000187:	6a 0e                	push   0xe
10000189:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000018d:	e8 fc ff ff ff       	call   1000018e <start(void*)+0x18e>	1000018e: R_386_PC32	Brush::Brush(BrushType)
10000192:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000199:	e8 fc ff ff ff       	call   1000019a <start(void*)+0x19a>	1000019a: R_386_PC32	operator new(unsigned long)
1000019e:	89 c7                	mov    edi,eax
100001a0:	58                   	pop    eax
100001a1:	5a                   	pop    edx
100001a2:	6a 00                	push   0x0
100001a4:	57                   	push   edi
100001a5:	e8 fc ff ff ff       	call   100001a6 <start(void*)+0x1a6>	100001a6: R_386_PC32	Brush::Brush(BrushType)
100001aa:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001b1:	e8 fc ff ff ff       	call   100001b2 <start(void*)+0x1b2>	100001b2: R_386_PC32	operator new(unsigned long)
100001b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100001ba:	59                   	pop    ecx
100001bb:	58                   	pop    eax
100001bc:	6a 04                	push   0x4
100001be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100001c2:	e8 fc ff ff ff       	call   100001c3 <start(void*)+0x1c3>	100001c3: R_386_PC32	Brush::Brush(BrushType)
100001c7:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001ce:	e8 fc ff ff ff       	call   100001cf <start(void*)+0x1cf>	100001cf: R_386_PC32	operator new(unsigned long)
100001d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100001d7:	58                   	pop    eax
100001d8:	5a                   	pop    edx
100001d9:	6a 0f                	push   0xf
100001db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
100001df:	e8 fc ff ff ff       	call   100001e0 <start(void*)+0x1e0>	100001e0: R_386_PC32	Brush::Brush(BrushType)
100001e4:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100001eb:	e8 fc ff ff ff       	call   100001ec <start(void*)+0x1ec>	100001ec: R_386_PC32	operator new(unsigned long)
100001f0:	83 c4 0c             	add    esp,0xc
100001f3:	53                   	push   ebx
100001f4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100001f8:	51                   	push   ecx
100001f9:	6a 64                	push   0x64
100001fb:	6a 64                	push   0x64
100001fd:	6a 32                	push   0x32
100001ff:	6a 32                	push   0x32
10000201:	50                   	push   eax
10000202:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000206:	e8 fc ff ff ff       	call   10000207 <start(void*)+0x207>	10000207: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000020b:	83 c4 18             	add    esp,0x18
1000020e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000212:	50                   	push   eax
10000213:	56                   	push   esi
10000214:	e8 fc ff ff ff       	call   10000215 <start(void*)+0x215>	10000215: R_386_PC32	GDO::addChild(GDO*)
10000219:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000220:	e8 fc ff ff ff       	call   10000221 <start(void*)+0x221>	10000221: R_386_PC32	operator new(unsigned long)
10000225:	83 c4 0c             	add    esp,0xc
10000228:	53                   	push   ebx
10000229:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
1000022d:	52                   	push   edx
1000022e:	6a 64                	push   0x64
10000230:	6a 64                	push   0x64
10000232:	6a 32                	push   0x32
10000234:	68 c8 00 00 00       	push   0xc8
10000239:	50                   	push   eax
1000023a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000023e:	e8 fc ff ff ff       	call   1000023f <start(void*)+0x23f>	1000023f: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000243:	83 c4 18             	add    esp,0x18
10000246:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000024a:	50                   	push   eax
1000024b:	56                   	push   esi
1000024c:	e8 fc ff ff ff       	call   1000024d <start(void*)+0x24d>	1000024d: R_386_PC32	GDO::addChild(GDO*)
10000251:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000258:	e8 fc ff ff ff       	call   10000259 <start(void*)+0x259>	10000259: R_386_PC32	operator new(unsigned long)
1000025d:	83 c4 0c             	add    esp,0xc
10000260:	53                   	push   ebx
10000261:	55                   	push   ebp
10000262:	6a 64                	push   0x64
10000264:	6a 64                	push   0x64
10000266:	6a 32                	push   0x32
10000268:	68 5e 01 00 00       	push   0x15e
1000026d:	50                   	push   eax
1000026e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000272:	e8 fc ff ff ff       	call   10000273 <start(void*)+0x273>	10000273: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000277:	83 c4 18             	add    esp,0x18
1000027a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000027e:	50                   	push   eax
1000027f:	56                   	push   esi
10000280:	e8 fc ff ff ff       	call   10000281 <start(void*)+0x281>	10000281: R_386_PC32	GDO::addChild(GDO*)
10000285:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000028c:	e8 fc ff ff ff       	call   1000028d <start(void*)+0x28d>	1000028d: R_386_PC32	operator new(unsigned long)
10000291:	89 c5                	mov    ebp,eax
10000293:	83 c4 0c             	add    esp,0xc
10000296:	53                   	push   ebx
10000297:	57                   	push   edi
10000298:	6a 64                	push   0x64
1000029a:	6a 64                	push   0x64
1000029c:	6a 32                	push   0x32
1000029e:	68 f4 01 00 00       	push   0x1f4
100002a3:	50                   	push   eax
100002a4:	e8 fc ff ff ff       	call   100002a5 <start(void*)+0x2a5>	100002a5: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100002a9:	83 c4 18             	add    esp,0x18
100002ac:	55                   	push   ebp
100002ad:	56                   	push   esi
100002ae:	e8 fc ff ff ff       	call   100002af <start(void*)+0x2af>	100002af: R_386_PC32	GDO::addChild(GDO*)
100002b3:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100002ba:	e8 fc ff ff ff       	call   100002bb <start(void*)+0x2bb>	100002bb: R_386_PC32	operator new(unsigned long)
100002bf:	89 c7                	mov    edi,eax
100002c1:	83 c4 0c             	add    esp,0xc
100002c4:	53                   	push   ebx
100002c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100002c9:	6a 64                	push   0x64
100002cb:	6a 64                	push   0x64
100002cd:	68 c8 00 00 00       	push   0xc8
100002d2:	6a 32                	push   0x32
100002d4:	50                   	push   eax
100002d5:	e8 fc ff ff ff       	call   100002d6 <start(void*)+0x2d6>	100002d6: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100002da:	83 c4 18             	add    esp,0x18
100002dd:	57                   	push   edi
100002de:	56                   	push   esi
100002df:	e8 fc ff ff ff       	call   100002e0 <start(void*)+0x2e0>	100002e0: R_386_PC32	GDO::addChild(GDO*)
100002e4:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100002eb:	e8 fc ff ff ff       	call   100002ec <start(void*)+0x2ec>	100002ec: R_386_PC32	operator new(unsigned long)
100002f0:	89 c7                	mov    edi,eax
100002f2:	83 c4 0c             	add    esp,0xc
100002f5:	53                   	push   ebx
100002f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100002fa:	6a 64                	push   0x64
100002fc:	6a 64                	push   0x64
100002fe:	68 c8 00 00 00       	push   0xc8
10000303:	68 c8 00 00 00       	push   0xc8
10000308:	50                   	push   eax
10000309:	e8 fc ff ff ff       	call   1000030a <start(void*)+0x30a>	1000030a: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000030e:	83 c4 18             	add    esp,0x18
10000311:	57                   	push   edi
10000312:	56                   	push   esi
10000313:	e8 fc ff ff ff       	call   10000314 <start(void*)+0x314>	10000314: R_386_PC32	GDO::addChild(GDO*)
10000318:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000031f:	e8 fc ff ff ff       	call   10000320 <start(void*)+0x320>	10000320: R_386_PC32	operator new(unsigned long)
10000324:	89 c7                	mov    edi,eax
10000326:	83 c4 0c             	add    esp,0xc
10000329:	53                   	push   ebx
1000032a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000032e:	6a 64                	push   0x64
10000330:	6a 64                	push   0x64
10000332:	68 c8 00 00 00       	push   0xc8
10000337:	68 5e 01 00 00       	push   0x15e
1000033c:	50                   	push   eax
1000033d:	e8 fc ff ff ff       	call   1000033e <start(void*)+0x33e>	1000033e: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000342:	83 c4 18             	add    esp,0x18
10000345:	57                   	push   edi
10000346:	56                   	push   esi
10000347:	e8 fc ff ff ff       	call   10000348 <start(void*)+0x348>	10000348: R_386_PC32	GDO::addChild(GDO*)
1000034c:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000353:	e8 fc ff ff ff       	call   10000354 <start(void*)+0x354>	10000354: R_386_PC32	operator new(unsigned long)
10000358:	89 c7                	mov    edi,eax
1000035a:	83 c4 0c             	add    esp,0xc
1000035d:	53                   	push   ebx
1000035e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000362:	6a 64                	push   0x64
10000364:	6a 64                	push   0x64
10000366:	68 c8 00 00 00       	push   0xc8
1000036b:	68 f4 01 00 00       	push   0x1f4
10000370:	50                   	push   eax
10000371:	e8 fc ff ff ff       	call   10000372 <start(void*)+0x372>	10000372: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000376:	83 c4 18             	add    esp,0x18
10000379:	57                   	push   edi
1000037a:	56                   	push   esi
1000037b:	e8 fc ff ff ff       	call   1000037c <start(void*)+0x37c>	1000037c: R_386_PC32	GDO::addChild(GDO*)
10000380:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000387:	e8 fc ff ff ff       	call   10000388 <start(void*)+0x388>	10000388: R_386_PC32	operator new(unsigned long)
1000038c:	89 c7                	mov    edi,eax
1000038e:	83 c4 0c             	add    esp,0xc
10000391:	53                   	push   ebx
10000392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000396:	6a 64                	push   0x64
10000398:	6a 64                	push   0x64
1000039a:	68 5e 01 00 00       	push   0x15e
1000039f:	6a 32                	push   0x32
100003a1:	50                   	push   eax
100003a2:	e8 fc ff ff ff       	call   100003a3 <start(void*)+0x3a3>	100003a3: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100003a7:	83 c4 18             	add    esp,0x18
100003aa:	57                   	push   edi
100003ab:	56                   	push   esi
100003ac:	e8 fc ff ff ff       	call   100003ad <start(void*)+0x3ad>	100003ad: R_386_PC32	GDO::addChild(GDO*)
100003b1:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100003b8:	e8 fc ff ff ff       	call   100003b9 <start(void*)+0x3b9>	100003b9: R_386_PC32	operator new(unsigned long)
100003bd:	89 c7                	mov    edi,eax
100003bf:	83 c4 0c             	add    esp,0xc
100003c2:	53                   	push   ebx
100003c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100003c7:	6a 64                	push   0x64
100003c9:	6a 64                	push   0x64
100003cb:	68 5e 01 00 00       	push   0x15e
100003d0:	68 c8 00 00 00       	push   0xc8
100003d5:	50                   	push   eax
100003d6:	e8 fc ff ff ff       	call   100003d7 <start(void*)+0x3d7>	100003d7: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100003db:	83 c4 18             	add    esp,0x18
100003de:	57                   	push   edi
100003df:	56                   	push   esi
100003e0:	e8 fc ff ff ff       	call   100003e1 <start(void*)+0x3e1>	100003e1: R_386_PC32	GDO::addChild(GDO*)
100003e5:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100003ec:	e8 fc ff ff ff       	call   100003ed <start(void*)+0x3ed>	100003ed: R_386_PC32	operator new(unsigned long)
100003f1:	89 c7                	mov    edi,eax
100003f3:	83 c4 0c             	add    esp,0xc
100003f6:	53                   	push   ebx
100003f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100003fb:	6a 64                	push   0x64
100003fd:	6a 64                	push   0x64
100003ff:	68 5e 01 00 00       	push   0x15e
10000404:	68 5e 01 00 00       	push   0x15e
10000409:	50                   	push   eax
1000040a:	e8 fc ff ff ff       	call   1000040b <start(void*)+0x40b>	1000040b: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000040f:	83 c4 18             	add    esp,0x18
10000412:	57                   	push   edi
10000413:	56                   	push   esi
10000414:	e8 fc ff ff ff       	call   10000415 <start(void*)+0x415>	10000415: R_386_PC32	GDO::addChild(GDO*)
10000419:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000420:	e8 fc ff ff ff       	call   10000421 <start(void*)+0x421>	10000421: R_386_PC32	operator new(unsigned long)
10000425:	89 c7                	mov    edi,eax
10000427:	83 c4 0c             	add    esp,0xc
1000042a:	53                   	push   ebx
1000042b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000042f:	6a 64                	push   0x64
10000431:	6a 64                	push   0x64
10000433:	68 5e 01 00 00       	push   0x15e
10000438:	68 f4 01 00 00       	push   0x1f4
1000043d:	50                   	push   eax
1000043e:	e8 fc ff ff ff       	call   1000043f <start(void*)+0x43f>	1000043f: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000443:	83 c4 18             	add    esp,0x18
10000446:	57                   	push   edi
10000447:	56                   	push   esi
10000448:	e8 fc ff ff ff       	call   10000449 <start(void*)+0x449>	10000449: R_386_PC32	GDO::addChild(GDO*)
1000044d:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000454:	e8 fc ff ff ff       	call   10000455 <start(void*)+0x455>	10000455: R_386_PC32	operator new(unsigned long)
10000459:	89 c5                	mov    ebp,eax
1000045b:	59                   	pop    ecx
1000045c:	5f                   	pop    edi
1000045d:	53                   	push   ebx
1000045e:	68 c8 00 00 00       	push   0xc8
10000463:	68 2c 01 00 00       	push   0x12c
10000468:	6a 0a                	push   0xa
1000046a:	6a 0a                	push   0xa
1000046c:	50                   	push   eax
1000046d:	e8 fc ff ff ff       	call   1000046e <start(void*)+0x46e>	1000046e: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000472:	83 c4 18             	add    esp,0x18
10000475:	55                   	push   ebp
10000476:	56                   	push   esi
10000477:	e8 fc ff ff ff       	call   10000478 <start(void*)+0x478>	10000478: R_386_PC32	GDO::addChild(GDO*)
1000047c:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000483:	e8 fc ff ff ff       	call   10000484 <start(void*)+0x484>	10000484: R_386_PC32	operator new(unsigned long)
10000488:	89 c7                	mov    edi,eax
1000048a:	83 c4 0c             	add    esp,0xc
1000048d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
10000490:	68 ff 00 00 00       	push   0xff
10000495:	68 c8 00 00 00       	push   0xc8
1000049a:	68 2c 01 00 00       	push   0x12c
1000049f:	6a 00                	push   0x0
100004a1:	6a 00                	push   0x0
100004a3:	50                   	push   eax
100004a4:	e8 fc ff ff ff       	call   100004a5 <start(void*)+0x4a5>	100004a5: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
100004a9:	83 c4 18             	add    esp,0x18
100004ac:	57                   	push   edi
100004ad:	55                   	push   ebp
100004ae:	e8 fc ff ff ff       	call   100004af <start(void*)+0x4af>	100004af: R_386_PC32	GDO::addChild(GDO*)
100004b3:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100004ba:	e8 fc ff ff ff       	call   100004bb <start(void*)+0x4bb>	100004bb: R_386_PC32	operator new(unsigned long)
100004bf:	89 c1                	mov    ecx,eax
100004c1:	58                   	pop    eax
100004c2:	5a                   	pop    edx
100004c3:	6a 09                	push   0x9
100004c5:	51                   	push   ecx
100004c6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
100004ca:	e8 fc ff ff ff       	call   100004cb <start(void*)+0x4cb>	100004cb: R_386_PC32	Brush::Brush(BrushType)
100004cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100004d3:	c7 41 04 00 ff 00 00 	mov    DWORD PTR [ecx+0x4],0xff00
100004da:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100004de:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100004e5:	e8 fc ff ff ff       	call   100004e6 <start(void*)+0x4e6>	100004e6: R_386_PC32	operator new(unsigned long)
100004ea:	59                   	pop    ecx
100004eb:	5f                   	pop    edi
100004ec:	6a 07                	push   0x7
100004ee:	50                   	push   eax
100004ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100004f3:	e8 fc ff ff ff       	call   100004f4 <start(void*)+0x4f4>	100004f4: R_386_PC32	Brush::Brush(BrushType)
100004f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100004fc:	c7 42 04 00 88 ff 00 	mov    DWORD PTR [edx+0x4],0xff8800
10000503:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000050a:	e8 fc ff ff ff       	call   1000050b <start(void*)+0x50b>	1000050b: R_386_PC32	operator new(unsigned long)
1000050f:	89 c7                	mov    edi,eax
10000511:	58                   	pop    eax
10000512:	5a                   	pop    edx
10000513:	ff 75 04             	push   DWORD PTR [ebp+0x4]
10000516:	6a 78                	push   0x78
10000518:	68 c8 00 00 00       	push   0xc8
1000051d:	6a 32                	push   0x32
1000051f:	6a 32                	push   0x32
10000521:	57                   	push   edi
10000522:	e8 fc ff ff ff       	call   10000523 <start(void*)+0x523>	10000523: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000527:	83 c4 18             	add    esp,0x18
1000052a:	57                   	push   edi
1000052b:	55                   	push   ebp
1000052c:	e8 fc ff ff ff       	call   1000052d <start(void*)+0x52d>	1000052d: R_386_PC32	GDO::addChild(GDO*)
10000531:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000538:	e8 fc ff ff ff       	call   10000539 <start(void*)+0x539>	10000539: R_386_PC32	operator new(unsigned long)
1000053d:	89 c5                	mov    ebp,eax
1000053f:	83 c4 0c             	add    esp,0xc
10000542:	ff 77 04             	push   DWORD PTR [edi+0x4]
10000545:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10000549:	51                   	push   ecx
1000054a:	6a 46                	push   0x46
1000054c:	6a 46                	push   0x46
1000054e:	6a 00                	push   0x0
10000550:	6a 00                	push   0x0
10000552:	50                   	push   eax
10000553:	e8 fc ff ff ff       	call   10000554 <start(void*)+0x554>	10000554: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000558:	83 c4 18             	add    esp,0x18
1000055b:	55                   	push   ebp
1000055c:	57                   	push   edi
1000055d:	e8 fc ff ff ff       	call   1000055e <start(void*)+0x55e>	1000055e: R_386_PC32	GDO::addChild(GDO*)
10000562:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000569:	e8 fc ff ff ff       	call   1000056a <start(void*)+0x56a>	1000056a: R_386_PC32	operator new(unsigned long)
1000056e:	89 c5                	mov    ebp,eax
10000570:	83 c4 0c             	add    esp,0xc
10000573:	ff 77 04             	push   DWORD PTR [edi+0x4]
10000576:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000057a:	52                   	push   edx
1000057b:	6a 46                	push   0x46
1000057d:	6a 55                	push   0x55
1000057f:	6a 14                	push   0x14
10000581:	6a 64                	push   0x64
10000583:	50                   	push   eax
10000584:	e8 fc ff ff ff       	call   10000585 <start(void*)+0x585>	10000585: R_386_PC32	Ellipse::Ellipse(int, int, int, int, Brush*, Context*)
10000589:	83 c4 18             	add    esp,0x18
1000058c:	55                   	push   ebp
1000058d:	57                   	push   edi
1000058e:	e8 fc ff ff ff       	call   1000058f <start(void*)+0x58f>	1000058f: R_386_PC32	GDO::addChild(GDO*)
10000593:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
1000059a:	e8 fc ff ff ff       	call   1000059b <start(void*)+0x59b>	1000059b: R_386_PC32	getLegacyFont(LegacyFontType)
1000059f:	89 c5                	mov    ebp,eax
100005a1:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100005a8:	e8 fc ff ff ff       	call   100005a9 <start(void*)+0x5a9>	100005a9: R_386_PC32	operator new(unsigned long)
100005ad:	89 c7                	mov    edi,eax
100005af:	83 c4 0c             	add    esp,0xc
100005b2:	53                   	push   ebx
100005b3:	6a 00                	push   0x0
100005b5:	68 c2 01 00 00       	push   0x1c2
100005ba:	6a 32                	push   0x32
100005bc:	68 54 2d 00 10       	push   0x10002d54	100005bd: R_386_32	.text
100005c1:	55                   	push   ebp
100005c2:	50                   	push   eax
100005c3:	e8 fc ff ff ff       	call   100005c4 <start(void*)+0x5c4>	100005c4: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
100005c8:	83 c4 18             	add    esp,0x18
100005cb:	57                   	push   edi
100005cc:	56                   	push   esi
100005cd:	e8 fc ff ff ff       	call   100005ce <start(void*)+0x5ce>	100005ce: R_386_PC32	GDO::addChild(GDO*)
100005d2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
100005d9:	e8 fc ff ff ff       	call   100005da <start(void*)+0x5da>	100005da: R_386_PC32	getLegacyFont(LegacyFontType)
100005de:	89 c5                	mov    ebp,eax
100005e0:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100005e7:	e8 fc ff ff ff       	call   100005e8 <start(void*)+0x5e8>	100005e8: R_386_PC32	operator new(unsigned long)
100005ec:	89 c7                	mov    edi,eax
100005ee:	83 c4 0c             	add    esp,0xc
100005f1:	53                   	push   ebx
100005f2:	6a 00                	push   0x0
100005f4:	68 c2 01 00 00       	push   0x1c2
100005f9:	68 96 00 00 00       	push   0x96
100005fe:	68 65 2d 00 10       	push   0x10002d65	100005ff: R_386_32	.text
10000603:	55                   	push   ebp
10000604:	50                   	push   eax
10000605:	e8 fc ff ff ff       	call   10000606 <start(void*)+0x606>	10000606: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
1000060a:	83 c4 18             	add    esp,0x18
1000060d:	57                   	push   edi
1000060e:	56                   	push   esi
1000060f:	e8 fc ff ff ff       	call   10000610 <start(void*)+0x610>	10000610: R_386_PC32	GDO::addChild(GDO*)
10000614:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
1000061b:	e8 fc ff ff ff       	call   1000061c <start(void*)+0x61c>	1000061c: R_386_PC32	getLegacyFont(LegacyFontType)
10000620:	89 c5                	mov    ebp,eax
10000622:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000629:	e8 fc ff ff ff       	call   1000062a <start(void*)+0x62a>	1000062a: R_386_PC32	operator new(unsigned long)
1000062e:	89 c7                	mov    edi,eax
10000630:	83 c4 0c             	add    esp,0xc
10000633:	53                   	push   ebx
10000634:	6a 00                	push   0x0
10000636:	68 c2 01 00 00       	push   0x1c2
1000063b:	68 04 01 00 00       	push   0x104
10000640:	68 76 2d 00 10       	push   0x10002d76	10000641: R_386_32	.text
10000645:	55                   	push   ebp
10000646:	50                   	push   eax
10000647:	e8 fc ff ff ff       	call   10000648 <start(void*)+0x648>	10000648: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
1000064c:	83 c4 18             	add    esp,0x18
1000064f:	57                   	push   edi
10000650:	56                   	push   esi
10000651:	e8 fc ff ff ff       	call   10000652 <start(void*)+0x652>	10000652: R_386_PC32	GDO::addChild(GDO*)
10000656:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
1000065d:	e8 fc ff ff ff       	call   1000065e <start(void*)+0x65e>	1000065e: R_386_PC32	getLegacyFont(LegacyFontType)
10000662:	89 c5                	mov    ebp,eax
10000664:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000066b:	e8 fc ff ff ff       	call   1000066c <start(void*)+0x66c>	1000066c: R_386_PC32	operator new(unsigned long)
10000670:	89 c7                	mov    edi,eax
10000672:	83 c4 0c             	add    esp,0xc
10000675:	53                   	push   ebx
10000676:	6a 00                	push   0x0
10000678:	68 c2 01 00 00       	push   0x1c2
1000067d:	68 5e 01 00 00       	push   0x15e
10000682:	68 85 2d 00 10       	push   0x10002d85	10000683: R_386_32	.text
10000687:	55                   	push   ebp
10000688:	50                   	push   eax
10000689:	e8 fc ff ff ff       	call   1000068a <start(void*)+0x68a>	1000068a: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
1000068e:	83 c4 18             	add    esp,0x18
10000691:	57                   	push   edi
10000692:	56                   	push   esi
10000693:	e8 fc ff ff ff       	call   10000694 <start(void*)+0x694>	10000694: R_386_PC32	GDO::addChild(GDO*)
10000698:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
1000069f:	e8 fc ff ff ff       	call   100006a0 <start(void*)+0x6a0>	100006a0: R_386_PC32	getLegacyFont(LegacyFontType)
100006a4:	89 c5                	mov    ebp,eax
100006a6:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100006ad:	e8 fc ff ff ff       	call   100006ae <start(void*)+0x6ae>	100006ae: R_386_PC32	operator new(unsigned long)
100006b2:	89 c7                	mov    edi,eax
100006b4:	83 c4 0c             	add    esp,0xc
100006b7:	53                   	push   ebx
100006b8:	6a 00                	push   0x0
100006ba:	68 c2 01 00 00       	push   0x1c2
100006bf:	68 c2 01 00 00       	push   0x1c2
100006c4:	68 9b 2d 00 10       	push   0x10002d9b	100006c5: R_386_32	.text
100006c9:	55                   	push   ebp
100006ca:	50                   	push   eax
100006cb:	e8 fc ff ff ff       	call   100006cc <start(void*)+0x6cc>	100006cc: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
100006d0:	83 c4 18             	add    esp,0x18
100006d3:	57                   	push   edi
100006d4:	56                   	push   esi
100006d5:	e8 fc ff ff ff       	call   100006d6 <start(void*)+0x6d6>	100006d6: R_386_PC32	GDO::addChild(GDO*)
100006da:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
100006e1:	e8 fc ff ff ff       	call   100006e2 <start(void*)+0x6e2>	100006e2: R_386_PC32	getLegacyFont(LegacyFontType)
100006e6:	89 c5                	mov    ebp,eax
100006e8:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100006ef:	e8 fc ff ff ff       	call   100006f0 <start(void*)+0x6f0>	100006f0: R_386_PC32	operator new(unsigned long)
100006f4:	89 c7                	mov    edi,eax
100006f6:	83 c4 0c             	add    esp,0xc
100006f9:	53                   	push   ebx
100006fa:	6a 00                	push   0x0
100006fc:	68 d1 01 00 00       	push   0x1d1
10000701:	68 5e 01 00 00       	push   0x15e
10000706:	68 b6 2d 00 10       	push   0x10002db6	10000707: R_386_32	.text
1000070b:	55                   	push   ebp
1000070c:	50                   	push   eax
1000070d:	e8 fc ff ff ff       	call   1000070e <start(void*)+0x70e>	1000070e: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
10000712:	83 c4 18             	add    esp,0x18
10000715:	57                   	push   edi
10000716:	56                   	push   esi
10000717:	e8 fc ff ff ff       	call   10000718 <start(void*)+0x718>	10000718: R_386_PC32	GDO::addChild(GDO*)
1000071c:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000723:	e8 fc ff ff ff       	call   10000724 <start(void*)+0x724>	10000724: R_386_PC32	operator new(unsigned long)
10000728:	89 c7                	mov    edi,eax
1000072a:	59                   	pop    ecx
1000072b:	5d                   	pop    ebp
1000072c:	53                   	push   ebx
1000072d:	68 c8 00 00 00       	push   0xc8
10000732:	68 2c 01 00 00       	push   0x12c
10000737:	68 82 00 00 00       	push   0x82
1000073c:	68 aa 00 00 00       	push   0xaa
10000741:	50                   	push   eax
10000742:	e8 fc ff ff ff       	call   10000743 <start(void*)+0x743>	10000743: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000747:	89 77 08             	mov    DWORD PTR [edi+0x8],esi
1000074a:	83 c4 14             	add    esp,0x14
1000074d:	6a 58                	push   0x58
1000074f:	e8 fc ff ff ff       	call   10000750 <start(void*)+0x750>	10000750: R_386_PC32	operator new(unsigned long)
10000754:	89 c5                	mov    ebp,eax
10000756:	83 c4 0c             	add    esp,0xc
10000759:	53                   	push   ebx
1000075a:	68 aa aa aa 00       	push   0xaaaaaa
1000075f:	68 c8 00 00 00       	push   0xc8
10000764:	68 2c 01 00 00       	push   0x12c
10000769:	6a 00                	push   0x0
1000076b:	6a 00                	push   0x0
1000076d:	50                   	push   eax
1000076e:	e8 fc ff ff ff       	call   1000076f <start(void*)+0x76f>	1000076f: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
10000773:	83 c4 18             	add    esp,0x18
10000776:	55                   	push   ebp
10000777:	57                   	push   edi
10000778:	e8 fc ff ff ff       	call   10000779 <start(void*)+0x779>	10000779: R_386_PC32	GDO::addChild(GDO*)
1000077d:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000784:	e8 fc ff ff ff       	call   10000785 <start(void*)+0x785>	10000785: R_386_PC32	operator new(unsigned long)
10000789:	89 c5                	mov    ebp,eax
1000078b:	83 c4 0c             	add    esp,0xc
1000078e:	53                   	push   ebx
1000078f:	68 ff 00 00 00       	push   0xff
10000794:	6a 14                	push   0x14
10000796:	68 2c 01 00 00       	push   0x12c
1000079b:	6a 00                	push   0x0
1000079d:	6a 00                	push   0x0
1000079f:	50                   	push   eax
100007a0:	e8 fc ff ff ff       	call   100007a1 <start(void*)+0x7a1>	100007a1: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
100007a5:	83 c4 18             	add    esp,0x18
100007a8:	55                   	push   ebp
100007a9:	57                   	push   edi
100007aa:	e8 fc ff ff ff       	call   100007ab <start(void*)+0x7ab>	100007ab: R_386_PC32	GDO::addChild(GDO*)
100007af:	58                   	pop    eax
100007b0:	5a                   	pop    edx
100007b1:	57                   	push   edi
100007b2:	56                   	push   esi
100007b3:	e8 fc ff ff ff       	call   100007b4 <start(void*)+0x7b4>	100007b4: R_386_PC32	GDO::addChild(GDO*)
100007b8:	83 c4 0c             	add    esp,0xc
100007bb:	6a 01                	push   0x1
100007bd:	6a 00                	push   0x0
100007bf:	56                   	push   esi
100007c0:	e8 fc ff ff ff       	call   100007c1 <start(void*)+0x7c1>	100007c1: R_386_PC32	GDO::update(List<CRect*>*, bool)
100007c5:	83 c4 0c             	add    esp,0xc
100007c8:	6a 01                	push   0x1
100007ca:	6a 00                	push   0x0
100007cc:	57                   	push   edi
100007cd:	e8 fc ff ff ff       	call   100007ce <start(void*)+0x7ce>	100007ce: R_386_PC32	GDO::update(List<CRect*>*, bool)
100007d2:	e8 fc ff ff ff       	call   100007d3 <start(void*)+0x7d3>	100007d3: R_386_PC32	startMouse()
100007d7:	83 c4 0c             	add    esp,0xc
100007da:	6a 00                	push   0x0
100007dc:	68 c8 00 00 00       	push   0xc8
100007e1:	68 2c 01 00 00       	push   0x12c
100007e6:	e8 fc ff ff ff       	call   100007e7 <start(void*)+0x7e7>	100007e7: R_386_PC32	processMouse(int, int, int)
100007eb:	83 c4 10             	add    esp,0x10
100007ee:	83 ec 0c             	sub    esp,0xc
100007f1:	6a 02                	push   0x2
100007f3:	e8 fc ff ff ff       	call   100007f4 <start(void*)+0x7f4>	100007f4: R_386_PC32	blockTask(TaskState)
100007f8:	eb f1                	jmp    100007eb <start(void*)+0x7eb>

100007fa <begin(void*)>:
100007fa:	83 ec 18             	sub    esp,0x18
100007fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000801:	e8 fc ff ff ff       	call   10000802 <begin(void*)+0x8>	10000802: R_386_PC32	start(void*)

10000806 <Brush::Brush(unsigned int, unsigned int)>:
10000806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000080a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
1000080e:	89 10                	mov    DWORD PTR [eax],edx
10000810:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000814:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000817:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
1000081e:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
10000825:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
1000082c:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
10000833:	c3                   	ret    

10000834 <Brush::Brush(BrushType)>:
10000834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000838:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000083e:	c7 40 04 ff ff ff ff 	mov    DWORD PTR [eax+0x4],0xffffffff
10000845:	c6 40 10 ff          	mov    BYTE PTR [eax+0x10],0xff
10000849:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
10000850:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
10000857:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
1000085e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10000865:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10000869:	8d 51 ff             	lea    edx,[ecx-0x1]
1000086c:	83 fa 0e             	cmp    edx,0xe
1000086f:	0f 87 ae 00 00 00    	ja     10000923 <Brush::Brush(BrushType)+0xef>
10000875:	ff 24 95 e4 2d 00 10 	jmp    DWORD PTR [edx*4+0x10002de4]	10000878: R_386_32	.text
1000087c:	c7 00 aa aa aa 00    	mov    DWORD PTR [eax],0xaaaaaa
10000882:	c3                   	ret    
10000883:	c7 00 80 80 80 00    	mov    DWORD PTR [eax],0x808080
10000889:	c3                   	ret    
1000088a:	c7 00 55 55 55 00    	mov    DWORD PTR [eax],0x555555
10000890:	c3                   	ret    
10000891:	c7 00 ff ff ff 00    	mov    DWORD PTR [eax],0xffffff
10000897:	c3                   	ret    
10000898:	c6 40 10 00          	mov    BYTE PTR [eax+0x10],0x0
1000089c:	c3                   	ret    
1000089d:	c7 40 10 01 08 04 02 	mov    DWORD PTR [eax+0x10],0x2040801
100008a4:	eb 6f                	jmp    10000915 <Brush::Brush(BrushType)+0xe1>
100008a6:	c7 40 10 01 02 04 08 	mov    DWORD PTR [eax+0x10],0x8040201
100008ad:	eb 66                	jmp    10000915 <Brush::Brush(BrushType)+0xe1>
100008af:	c7 40 10 01 01 01 0f 	mov    DWORD PTR [eax+0x10],0xf010101
100008b6:	eb 5d                	jmp    10000915 <Brush::Brush(BrushType)+0xe1>
100008b8:	c7 40 10 08 14 22 01 	mov    DWORD PTR [eax+0x10],0x1221408
100008bf:	66 c7 40 14 22 14    	mov    WORD PTR [eax+0x14],0x1422
100008c5:	c7 40 18 06 00 00 00 	mov    DWORD PTR [eax+0x18],0x6
100008cc:	c7 40 1c 06 00 00 00 	mov    DWORD PTR [eax+0x1c],0x6
100008d3:	c3                   	ret    
100008d4:	c7 40 10 00 00 00 01 	mov    DWORD PTR [eax+0x10],0x1000000
100008db:	eb 3f                	jmp    1000091c <Brush::Brush(BrushType)+0xe8>
100008dd:	c6 40 10 02          	mov    BYTE PTR [eax+0x10],0x2
100008e1:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
100008e8:	c3                   	ret    
100008e9:	66 c7 40 10 02 01    	mov    WORD PTR [eax+0x10],0x102
100008ef:	eb 0e                	jmp    100008ff <Brush::Brush(BrushType)+0xcb>
100008f1:	66 c7 40 10 02 00    	mov    WORD PTR [eax+0x10],0x2
100008f7:	eb 06                	jmp    100008ff <Brush::Brush(BrushType)+0xcb>
100008f9:	66 c7 40 10 03 02    	mov    WORD PTR [eax+0x10],0x203
100008ff:	c7 40 18 02 00 00 00 	mov    DWORD PTR [eax+0x18],0x2
10000906:	c7 40 1c 02 00 00 00 	mov    DWORD PTR [eax+0x1c],0x2
1000090d:	c3                   	ret    
1000090e:	c7 40 10 0c 0c 03 03 	mov    DWORD PTR [eax+0x10],0x3030c0c
10000915:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
1000091c:	c7 40 1c 04 00 00 00 	mov    DWORD PTR [eax+0x1c],0x4
10000923:	c3                   	ret    

10000924 <List<CRect*>::length() [clone .isra.0]>:
10000924:	31 d2                	xor    edx,edx
10000926:	85 c0                	test   eax,eax
10000928:	74 06                	je     10000930 <List<CRect*>::length() [clone .isra.0]+0xc>
1000092a:	42                   	inc    edx
1000092b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000092e:	eb f6                	jmp    10000926 <List<CRect*>::length() [clone .isra.0]+0x2>
10000930:	89 d0                	mov    eax,edx
10000932:	c3                   	ret    
10000933:	90                   	nop

10000934 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>:
10000934:	53                   	push   ebx
10000935:	89 c1                	mov    ecx,eax
10000937:	89 d3                	mov    ebx,edx
10000939:	e8 e6 ff ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
1000093e:	39 d8                	cmp    eax,ebx
10000940:	7c 0a                	jl     1000094c <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0x18>
10000942:	85 db                	test   ebx,ebx
10000944:	74 06                	je     1000094c <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0x18>
10000946:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10000949:	4b                   	dec    ebx
1000094a:	eb f6                	jmp    10000942 <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0xe>
1000094c:	89 c8                	mov    eax,ecx
1000094e:	5b                   	pop    ebx
1000094f:	c3                   	ret    

10000950 <CRect::CRect()>:
10000950:	c3                   	ret    
10000951:	90                   	nop

10000952 <CRect::CRect(int, int, int, int)>:
10000952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000956:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
1000095a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
1000095d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000961:	89 10                	mov    DWORD PTR [eax],edx
10000963:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000967:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
1000096a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000096e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000971:	c3                   	ret    

10000972 <CRect::intersect(CRect*)>:
10000972:	55                   	push   ebp
10000973:	57                   	push   edi
10000974:	56                   	push   esi
10000975:	53                   	push   ebx
10000976:	83 ec 1c             	sub    esp,0x1c
10000979:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
1000097d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10000981:	8b 0f                	mov    ecx,DWORD PTR [edi]
10000983:	8b 75 04             	mov    esi,DWORD PTR [ebp+0x4]
10000986:	31 c0                	xor    eax,eax
10000988:	39 f1                	cmp    ecx,esi
1000098a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000098e:	7f 7f                	jg     10000a0f <CRect::intersect(CRect*)+0x9d>
10000990:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
10000993:	89 04 24             	mov    DWORD PTR [esp],eax
10000996:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
10000999:	31 c0                	xor    eax,eax
1000099b:	39 14 24             	cmp    DWORD PTR [esp],edx
1000099e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
100009a2:	7c 6b                	jl     10000a0f <CRect::intersect(CRect*)+0x9d>
100009a4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
100009a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100009ab:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
100009ae:	31 c0                	xor    eax,eax
100009b0:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
100009b4:	7f 59                	jg     10000a0f <CRect::intersect(CRect*)+0x9d>
100009b6:	8b 7f 0c             	mov    edi,DWORD PTR [edi+0xc]
100009b9:	8b 6d 08             	mov    ebp,DWORD PTR [ebp+0x8]
100009bc:	39 ef                	cmp    edi,ebp
100009be:	7c 4f                	jl     10000a0f <CRect::intersect(CRect*)+0x9d>
100009c0:	83 ec 0c             	sub    esp,0xc
100009c3:	6a 10                	push   0x10
100009c5:	e8 fc ff ff ff       	call   100009c6 <CRect::intersect(CRect*)+0x54>	100009c6: R_386_PC32	malloc
100009ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100009ce:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
100009d1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100009d5:	89 08                	mov    DWORD PTR [eax],ecx
100009d7:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
100009da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100009de:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100009e1:	83 c4 10             	add    esp,0x10
100009e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100009e8:	39 d1                	cmp    ecx,edx
100009ea:	7f 02                	jg     100009ee <CRect::intersect(CRect*)+0x7c>
100009ec:	89 10                	mov    DWORD PTR [eax],edx
100009ee:	39 6c 24 04          	cmp    DWORD PTR [esp+0x4],ebp
100009f2:	7f 03                	jg     100009f7 <CRect::intersect(CRect*)+0x85>
100009f4:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
100009f7:	3b 30                	cmp    esi,DWORD PTR [eax]
100009f9:	7c 08                	jl     10000a03 <CRect::intersect(CRect*)+0x91>
100009fb:	3b 34 24             	cmp    esi,DWORD PTR [esp]
100009fe:	7f 03                	jg     10000a03 <CRect::intersect(CRect*)+0x91>
10000a00:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
10000a03:	3b 58 08             	cmp    ebx,DWORD PTR [eax+0x8]
10000a06:	7c 07                	jl     10000a0f <CRect::intersect(CRect*)+0x9d>
10000a08:	39 fb                	cmp    ebx,edi
10000a0a:	7f 03                	jg     10000a0f <CRect::intersect(CRect*)+0x9d>
10000a0c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
10000a0f:	83 c4 1c             	add    esp,0x1c
10000a12:	5b                   	pop    ebx
10000a13:	5e                   	pop    esi
10000a14:	5f                   	pop    edi
10000a15:	5d                   	pop    ebp
10000a16:	c3                   	ret    
10000a17:	90                   	nop

10000a18 <Context::Context(Video*)>:
10000a18:	53                   	push   ebx
10000a19:	83 ec 14             	sub    esp,0x14
10000a1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000a20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000a24:	89 03                	mov    DWORD PTR [ebx],eax
10000a26:	50                   	push   eax
10000a27:	e8 fc ff ff ff       	call   10000a28 <Context::Context(Video*)+0x10>	10000a28: R_386_PC32	Video::getWidth()
10000a2c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10000a2f:	58                   	pop    eax
10000a30:	ff 33                	push   DWORD PTR [ebx]
10000a32:	e8 fc ff ff ff       	call   10000a33 <Context::Context(Video*)+0x1b>	10000a33: R_386_PC32	Video::getHeight()
10000a37:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10000a3a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
10000a41:	e8 fc ff ff ff       	call   10000a42 <Context::Context(Video*)+0x2a>	10000a42: R_386_PC32	malloc
10000a46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000a4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000a53:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
10000a56:	c6 43 14 00          	mov    BYTE PTR [ebx+0x14],0x0
10000a5a:	83 c4 18             	add    esp,0x18
10000a5d:	5b                   	pop    ebx
10000a5e:	c3                   	ret    
10000a5f:	90                   	nop

10000a60 <Context::clippedRect(int, int, int, int, CRect*, Brush*)>:
10000a60:	55                   	push   ebp
10000a61:	57                   	push   edi
10000a62:	56                   	push   esi
10000a63:	53                   	push   ebx
10000a64:	83 ec 2c             	sub    esp,0x2c
10000a67:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10000a6b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000a6f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
10000a73:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
10000a77:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
10000a7b:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10000a7f:	01 f9                	add    ecx,edi
10000a81:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10000a85:	01 f0                	add    eax,esi
10000a87:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
10000a8a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10000a8e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
10000a91:	01 fe                	add    esi,edi
10000a93:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
10000a97:	03 4d 0c             	add    ecx,DWORD PTR [ebp+0xc]
10000a9a:	01 f8                	add    eax,edi
10000a9c:	8b 32                	mov    esi,DWORD PTR [edx]
10000a9e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10000aa2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
10000aa6:	7d 08                	jge    10000ab0 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x50>
10000aa8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10000aac:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10000ab0:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
10000ab3:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
10000ab7:	7d 04                	jge    10000abd <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x5d>
10000ab9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10000abd:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
10000ac0:	47                   	inc    edi
10000ac1:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10000ac5:	39 cf                	cmp    edi,ecx
10000ac7:	7e 04                	jle    10000acd <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x6d>
10000ac9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10000acd:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
10000ad0:	8d 4a 01             	lea    ecx,[edx+0x1]
10000ad3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
10000ad7:	39 c1                	cmp    ecx,eax
10000ad9:	7e 04                	jle    10000adf <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x7f>
10000adb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000adf:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
10000ae3:	7d 62                	jge    10000b47 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe7>
10000ae5:	89 f0                	mov    eax,esi
10000ae7:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000aeb:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
10000aee:	99                   	cdq    
10000aef:	f7 7b 1c             	idiv   DWORD PTR [ebx+0x1c]
10000af2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000af6:	0f b6 44 13 10       	movzx  eax,BYTE PTR [ebx+edx*1+0x10]
10000afb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000aff:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
10000b03:	7d 3f                	jge    10000b44 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe4>
10000b05:	89 f8                	mov    eax,edi
10000b07:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000b0b:	03 43 08             	add    eax,DWORD PTR [ebx+0x8]
10000b0e:	99                   	cdq    
10000b0f:	f7 7b 18             	idiv   DWORD PTR [ebx+0x18]
10000b12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000b16:	0f a3 d0             	bt     eax,edx
10000b19:	73 0f                	jae    10000b2a <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xca>
10000b1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000b1e:	8b 10                	mov    edx,DWORD PTR [eax]
10000b20:	ff 33                	push   DWORD PTR [ebx]
10000b22:	56                   	push   esi
10000b23:	57                   	push   edi
10000b24:	50                   	push   eax
10000b25:	ff 52 24             	call   DWORD PTR [edx+0x24]
10000b28:	eb 14                	jmp    10000b3e <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xde>
10000b2a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10000b2d:	83 fa ff             	cmp    edx,0xffffffff
10000b30:	74 0f                	je     10000b41 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe1>
10000b32:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000b35:	8b 08                	mov    ecx,DWORD PTR [eax]
10000b37:	52                   	push   edx
10000b38:	56                   	push   esi
10000b39:	57                   	push   edi
10000b3a:	50                   	push   eax
10000b3b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10000b3e:	83 c4 10             	add    esp,0x10
10000b41:	47                   	inc    edi
10000b42:	eb bb                	jmp    10000aff <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x9f>
10000b44:	46                   	inc    esi
10000b45:	eb 98                	jmp    10000adf <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x7f>
10000b47:	83 c4 2c             	add    esp,0x2c
10000b4a:	5b                   	pop    ebx
10000b4b:	5e                   	pop    esi
10000b4c:	5f                   	pop    edi
10000b4d:	5d                   	pop    ebp
10000b4e:	c3                   	ret    
10000b4f:	90                   	nop

10000b50 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)>:
10000b50:	55                   	push   ebp
10000b51:	57                   	push   edi
10000b52:	56                   	push   esi
10000b53:	53                   	push   ebx
10000b54:	83 ec 1c             	sub    esp,0x1c
10000b57:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
10000b5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000b5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000b62:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000b66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000b6a:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10000b6d:	39 c2                	cmp    edx,eax
10000b6f:	0f 8c c9 00 00 00    	jl     10000c3e <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b75:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10000b79:	01 c5                	add    ebp,eax
10000b7b:	8b 19                	mov    ebx,DWORD PTR [ecx]
10000b7d:	39 dd                	cmp    ebp,ebx
10000b7f:	0f 8e b9 00 00 00    	jle    10000c3e <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b85:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10000b89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000b8d:	03 70 10             	add    esi,DWORD PTR [eax+0x10]
10000b90:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
10000b93:	39 f0                	cmp    eax,esi
10000b95:	0f 8c a3 00 00 00    	jl     10000c3e <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b9b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000b9f:	01 f7                	add    edi,esi
10000ba1:	8b 49 08             	mov    ecx,DWORD PTR [ecx+0x8]
10000ba4:	39 cf                	cmp    edi,ecx
10000ba6:	0f 8e 92 00 00 00    	jle    10000c3e <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000bac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000bb4:	3b 5c 24 04          	cmp    ebx,DWORD PTR [esp+0x4]
10000bb8:	7e 08                	jle    10000bc2 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x72>
10000bba:	2b 5c 24 04          	sub    ebx,DWORD PTR [esp+0x4]
10000bbe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000bc2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10000bc6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
10000bca:	39 ea                	cmp    edx,ebp
10000bcc:	7d 09                	jge    10000bd7 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x87>
10000bce:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
10000bd2:	42                   	inc    edx
10000bd3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000bd7:	31 db                	xor    ebx,ebx
10000bd9:	39 f1                	cmp    ecx,esi
10000bdb:	7e 04                	jle    10000be1 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x91>
10000bdd:	29 f1                	sub    ecx,esi
10000bdf:	89 cb                	mov    ebx,ecx
10000be1:	39 f8                	cmp    eax,edi
10000be3:	7d 07                	jge    10000bec <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x9c>
10000be5:	29 f0                	sub    eax,esi
10000be7:	40                   	inc    eax
10000be8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10000bec:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
10000bef:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
10000bf4:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
10000bf8:	89 e8                	mov    eax,ebp
10000bfa:	29 f0                	sub    eax,esi
10000bfc:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
10000c00:	7e 3c                	jle    10000c3e <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000c02:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10000c06:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
10000c0a:	7e 2b                	jle    10000c37 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xe7>
10000c0c:	0f b6 04 3b          	movzx  eax,BYTE PTR [ebx+edi*1]
10000c10:	8b 14 85 00 00 00 00 	mov    edx,DWORD PTR [eax*4+0x0]	10000c13: R_386_32	palette256
10000c17:	83 fa ff             	cmp    edx,0xffffffff
10000c1a:	74 18                	je     10000c34 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xe4>
10000c1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000c20:	8b 00                	mov    eax,DWORD PTR [eax]
10000c22:	8b 08                	mov    ecx,DWORD PTR [eax]
10000c24:	52                   	push   edx
10000c25:	55                   	push   ebp
10000c26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000c2a:	01 fa                	add    edx,edi
10000c2c:	52                   	push   edx
10000c2d:	50                   	push   eax
10000c2e:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10000c31:	83 c4 10             	add    esp,0x10
10000c34:	47                   	inc    edi
10000c35:	eb cf                	jmp    10000c06 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xb6>
10000c37:	45                   	inc    ebp
10000c38:	03 5c 24 40          	add    ebx,DWORD PTR [esp+0x40]
10000c3c:	eb ba                	jmp    10000bf8 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xa8>
10000c3e:	83 c4 1c             	add    esp,0x1c
10000c41:	5b                   	pop    ebx
10000c42:	5e                   	pop    esi
10000c43:	5f                   	pop    edi
10000c44:	5d                   	pop    ebp
10000c45:	c3                   	ret    

10000c46 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)>:
10000c46:	55                   	push   ebp
10000c47:	57                   	push   edi
10000c48:	56                   	push   esi
10000c49:	53                   	push   ebx
10000c4a:	83 ec 1c             	sub    esp,0x1c
10000c4d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
10000c51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000c55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000c58:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000c5c:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
10000c5f:	39 c1                	cmp    ecx,eax
10000c61:	0f 8c c1 00 00 00    	jl     10000d28 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c67:	89 c5                	mov    ebp,eax
10000c69:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10000c6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000c71:	8b 1e                	mov    ebx,DWORD PTR [esi]
10000c73:	39 d8                	cmp    eax,ebx
10000c75:	0f 8e ad 00 00 00    	jle    10000d28 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10000c7f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
10000c83:	03 42 10             	add    eax,DWORD PTR [edx+0x10]
10000c86:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
10000c89:	39 c2                	cmp    edx,eax
10000c8b:	0f 8c 97 00 00 00    	jl     10000d28 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c91:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000c95:	01 c7                	add    edi,eax
10000c97:	8b 76 08             	mov    esi,DWORD PTR [esi+0x8]
10000c9a:	39 f7                	cmp    edi,esi
10000c9c:	0f 8e 86 00 00 00    	jle    10000d28 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000ca2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000caa:	39 eb                	cmp    ebx,ebp
10000cac:	7e 06                	jle    10000cb4 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x6e>
10000cae:	29 eb                	sub    ebx,ebp
10000cb0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000cb4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
10000cb8:	7d 07                	jge    10000cc1 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x7b>
10000cba:	29 e9                	sub    ecx,ebp
10000cbc:	41                   	inc    ecx
10000cbd:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10000cc1:	31 db                	xor    ebx,ebx
10000cc3:	39 c6                	cmp    esi,eax
10000cc5:	7e 04                	jle    10000ccb <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x85>
10000cc7:	89 f3                	mov    ebx,esi
10000cc9:	29 c3                	sub    ebx,eax
10000ccb:	39 fa                	cmp    edx,edi
10000ccd:	7d 07                	jge    10000cd6 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x90>
10000ccf:	29 c2                	sub    edx,eax
10000cd1:	42                   	inc    edx
10000cd2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
10000cd6:	01 d8                	add    eax,ebx
10000cd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000cdc:	39 5c 24 44          	cmp    DWORD PTR [esp+0x44],ebx
10000ce0:	7e 46                	jle    10000d28 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000ce2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000ce6:	0f b6 34 18          	movzx  esi,BYTE PTR [eax+ebx*1]
10000cea:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
10000cee:	d3 e6                	shl    esi,cl
10000cf0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10000cf4:	39 7c 24 40          	cmp    DWORD PTR [esp+0x40],edi
10000cf8:	7e 27                	jle    10000d21 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xdb>
10000cfa:	89 f0                	mov    eax,esi
10000cfc:	84 c0                	test   al,al
10000cfe:	79 1c                	jns    10000d1c <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xd6>
10000d00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000d04:	8b 00                	mov    eax,DWORD PTR [eax]
10000d06:	8b 10                	mov    edx,DWORD PTR [eax]
10000d08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d0c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10000d10:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
10000d14:	51                   	push   ecx
10000d15:	50                   	push   eax
10000d16:	ff 52 24             	call   DWORD PTR [edx+0x24]
10000d19:	83 c4 10             	add    esp,0x10
10000d1c:	d1 e6                	shl    esi,1
10000d1e:	47                   	inc    edi
10000d1f:	eb d3                	jmp    10000cf4 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xae>
10000d21:	43                   	inc    ebx
10000d22:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
10000d26:	eb b4                	jmp    10000cdc <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x96>
10000d28:	83 c4 1c             	add    esp,0x1c
10000d2b:	5b                   	pop    ebx
10000d2c:	5e                   	pop    esi
10000d2d:	5f                   	pop    edi
10000d2e:	5d                   	pop    ebp
10000d2f:	c3                   	ret    

10000d30 <Context::drawBitmap8(unsigned char*, int, int, int, int)>:
10000d30:	55                   	push   ebp
10000d31:	57                   	push   edi
10000d32:	56                   	push   esi
10000d33:	53                   	push   ebx
10000d34:	83 ec 1c             	sub    esp,0x1c
10000d37:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10000d3b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
10000d3f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
10000d43:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000d46:	8b 00                	mov    eax,DWORD PTR [eax]
10000d48:	e8 d7 fb ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
10000d4d:	85 c0                	test   eax,eax
10000d4f:	74 38                	je     10000d89 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x59>
10000d51:	31 f6                	xor    esi,esi
10000d53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000d56:	8b 08                	mov    ecx,DWORD PTR [eax]
10000d58:	89 c8                	mov    eax,ecx
10000d5a:	e8 c5 fb ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
10000d5f:	39 f0                	cmp    eax,esi
10000d61:	7e 68                	jle    10000dcb <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x9b>
10000d63:	89 f2                	mov    edx,esi
10000d65:	89 c8                	mov    eax,ecx
10000d67:	e8 c8 fb ff ff       	call   10000934 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000d6c:	52                   	push   edx
10000d6d:	ff 30                	push   DWORD PTR [eax]
10000d6f:	55                   	push   ebp
10000d70:	57                   	push   edi
10000d71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d7d:	53                   	push   ebx
10000d7e:	e8 fc ff ff ff       	call   10000d7f <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x4f>	10000d7f: R_386_PC32	Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)
10000d83:	46                   	inc    esi
10000d84:	83 c4 20             	add    esp,0x20
10000d87:	eb ca                	jmp    10000d53 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x23>
10000d89:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10000d8d:	75 3c                	jne    10000dcb <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x9b>
10000d8f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000d97:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000d9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10000da1:	48                   	dec    eax
10000da2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000da6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000da9:	48                   	dec    eax
10000daa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000dae:	50                   	push   eax
10000daf:	8d 44 24 04          	lea    eax,[esp+0x4]
10000db3:	50                   	push   eax
10000db4:	55                   	push   ebp
10000db5:	57                   	push   edi
10000db6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dbe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dc2:	53                   	push   ebx
10000dc3:	e8 fc ff ff ff       	call   10000dc4 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x94>	10000dc4: R_386_PC32	Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)
10000dc8:	83 c4 20             	add    esp,0x20
10000dcb:	83 c4 1c             	add    esp,0x1c
10000dce:	5b                   	pop    ebx
10000dcf:	5e                   	pop    esi
10000dd0:	5f                   	pop    edi
10000dd1:	5d                   	pop    ebp
10000dd2:	c3                   	ret    
10000dd3:	90                   	nop

10000dd4 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)>:
10000dd4:	55                   	push   ebp
10000dd5:	57                   	push   edi
10000dd6:	56                   	push   esi
10000dd7:	53                   	push   ebx
10000dd8:	83 ec 1c             	sub    esp,0x1c
10000ddb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10000ddf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000de3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
10000de7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000dea:	8b 00                	mov    eax,DWORD PTR [eax]
10000dec:	e8 33 fb ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
10000df1:	85 c0                	test   eax,eax
10000df3:	74 3b                	je     10000e30 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x5c>
10000df5:	31 f6                	xor    esi,esi
10000df7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000dfa:	8b 08                	mov    ecx,DWORD PTR [eax]
10000dfc:	89 c8                	mov    eax,ecx
10000dfe:	e8 21 fb ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
10000e03:	39 f0                	cmp    eax,esi
10000e05:	7e 6e                	jle    10000e75 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0xa1>
10000e07:	89 f2                	mov    edx,esi
10000e09:	89 c8                	mov    eax,ecx
10000e0b:	e8 24 fb ff ff       	call   10000934 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000e10:	55                   	push   ebp
10000e11:	ff 30                	push   DWORD PTR [eax]
10000e13:	57                   	push   edi
10000e14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e18:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e24:	53                   	push   ebx
10000e25:	e8 fc ff ff ff       	call   10000e26 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x52>	10000e26: R_386_PC32	Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)
10000e2a:	46                   	inc    esi
10000e2b:	83 c4 20             	add    esp,0x20
10000e2e:	eb c7                	jmp    10000df7 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x23>
10000e30:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10000e34:	75 3f                	jne    10000e75 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0xa1>
10000e36:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000e3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000e45:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10000e48:	48                   	dec    eax
10000e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000e4d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000e50:	48                   	dec    eax
10000e51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000e55:	55                   	push   ebp
10000e56:	8d 44 24 04          	lea    eax,[esp+0x4]
10000e5a:	50                   	push   eax
10000e5b:	57                   	push   edi
10000e5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e6c:	53                   	push   ebx
10000e6d:	e8 fc ff ff ff       	call   10000e6e <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x9a>	10000e6e: R_386_PC32	Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)
10000e72:	83 c4 20             	add    esp,0x20
10000e75:	83 c4 1c             	add    esp,0x1c
10000e78:	5b                   	pop    ebx
10000e79:	5e                   	pop    esi
10000e7a:	5f                   	pop    edi
10000e7b:	5d                   	pop    ebp
10000e7c:	c3                   	ret    

10000e7d <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)>:
10000e7d:	55                   	push   ebp
10000e7e:	57                   	push   edi
10000e7f:	56                   	push   esi
10000e80:	53                   	push   ebx
10000e81:	83 ec 40             	sub    esp,0x40
10000e84:	6a ff                	push   0xffffffff
10000e86:	6a 00                	push   0x0
10000e88:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10000e8c:	50                   	push   eax
10000e8d:	e8 fc ff ff ff       	call   10000e8e <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x11>	10000e8e: R_386_PC32	Brush::Brush(unsigned int, unsigned int)
10000e92:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10000e96:	0f af c0             	imul   eax,eax
10000e99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000e9d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10000ea1:	0f af c0             	imul   eax,eax
10000ea4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000ea8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000eac:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10000eb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000eb5:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
10000eb9:	f7 db                	neg    ebx
10000ebb:	83 c4 10             	add    esp,0x10
10000ebe:	3b 5c 24 58          	cmp    ebx,DWORD PTR [esp+0x58]
10000ec2:	0f 8f a5 00 00 00    	jg     10000f6d <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xf0>
10000ec8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000ecc:	f7 d8                	neg    eax
10000ece:	89 dd                	mov    ebp,ebx
10000ed0:	0f af eb             	imul   ebp,ebx
10000ed3:	0f af 6c 24 08       	imul   ebp,DWORD PTR [esp+0x8]
10000ed8:	31 d2                	xor    edx,edx
10000eda:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10000ede:	7f 42                	jg     10000f22 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xa5>
10000ee0:	89 c1                	mov    ecx,eax
10000ee2:	0f af c8             	imul   ecx,eax
10000ee5:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
10000eea:	01 e9                	add    ecx,ebp
10000eec:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
10000ef0:	7f 1a                	jg     10000f0c <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x8f>
10000ef2:	8d 7c 24 10          	lea    edi,[esp+0x10]
10000ef6:	b9 08 00 00 00       	mov    ecx,0x8
10000efb:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10000eff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f01:	84 d2                	test   dl,dl
10000f03:	75 1a                	jne    10000f1f <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xa2>
10000f05:	89 04 24             	mov    DWORD PTR [esp],eax
10000f08:	b2 01                	mov    dl,0x1
10000f0a:	eb 13                	jmp    10000f1f <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xa2>
10000f0c:	80 fa 01             	cmp    dl,0x1
10000f0f:	75 0e                	jne    10000f1f <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xa2>
10000f11:	52                   	push   edx
10000f12:	8d 54 24 14          	lea    edx,[esp+0x14]
10000f16:	52                   	push   edx
10000f17:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
10000f1b:	6a 01                	push   0x1
10000f1d:	eb 27                	jmp    10000f46 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xc9>
10000f1f:	40                   	inc    eax
10000f20:	eb b8                	jmp    10000eda <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x5d>
10000f22:	fe ca                	dec    dl
10000f24:	75 41                	jne    10000f67 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xea>
10000f26:	8d 7c 24 10          	lea    edi,[esp+0x10]
10000f2a:	b9 08 00 00 00       	mov    ecx,0x8
10000f2f:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10000f33:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f35:	50                   	push   eax
10000f36:	8d 44 24 14          	lea    eax,[esp+0x14]
10000f3a:	50                   	push   eax
10000f3b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
10000f3f:	6a 01                	push   0x1
10000f41:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10000f45:	40                   	inc    eax
10000f46:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
10000f4a:	50                   	push   eax
10000f4b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
10000f4f:	01 d8                	add    eax,ebx
10000f51:	50                   	push   eax
10000f52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10000f56:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
10000f5a:	50                   	push   eax
10000f5b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
10000f5f:	e8 fc ff ff ff       	call   10000f60 <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0xe3>	10000f60: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
10000f64:	83 c4 20             	add    esp,0x20
10000f67:	43                   	inc    ebx
10000f68:	e9 51 ff ff ff       	jmp    10000ebe <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)+0x41>
10000f6d:	83 c4 3c             	add    esp,0x3c
10000f70:	5b                   	pop    ebx
10000f71:	5e                   	pop    esi
10000f72:	5f                   	pop    edi
10000f73:	5d                   	pop    ebp
10000f74:	c3                   	ret    
10000f75:	90                   	nop

10000f76 <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)>:
10000f76:	56                   	push   esi
10000f77:	53                   	push   ebx
10000f78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000f7c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10000f80:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
10000f84:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
10000f88:	b9 02 00 00 00       	mov    ecx,0x2
10000f8d:	99                   	cdq    
10000f8e:	f7 f9                	idiv   ecx
10000f90:	89 c3                	mov    ebx,eax
10000f92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000f96:	99                   	cdq    
10000f97:	f7 f9                	idiv   ecx
10000f99:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
10000fa1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
10000fa5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10000fa9:	01 da                	add    edx,ebx
10000fab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
10000faf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000fb3:	01 c2                	add    edx,eax
10000fb5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10000fb9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
10000fbd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000fc1:	5b                   	pop    ebx
10000fc2:	5e                   	pop    esi
10000fc3:	e9 b5 fe ff ff       	jmp    10000e7d <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)>

10000fc8 <Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)>:
10000fc8:	56                   	push   esi
10000fc9:	53                   	push   ebx
10000fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000fce:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10000fd2:	b9 02 00 00 00       	mov    ecx,0x2
10000fd7:	99                   	cdq    
10000fd8:	f7 f9                	idiv   ecx
10000fda:	89 c3                	mov    ebx,eax
10000fdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000fe0:	99                   	cdq    
10000fe1:	f7 f9                	idiv   ecx
10000fe3:	c7 44 24 24 ff ff ff 00 	mov    DWORD PTR [esp+0x24],0xffffff
10000feb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
10000fef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10000ff3:	01 da                	add    edx,ebx
10000ff5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
10000ff9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000ffd:	01 c2                	add    edx,eax
10000fff:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10001003:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
10001007:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000100b:	5b                   	pop    ebx
1000100c:	5e                   	pop    esi
1000100d:	e9 6b fe ff ff       	jmp    10000e7d <midptellipse(Context*, int, int, int, int, CRect*, unsigned int, Brush*)>

10001012 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)>:
10001012:	55                   	push   ebp
10001013:	57                   	push   edi
10001014:	56                   	push   esi
10001015:	53                   	push   ebx
10001016:	83 ec 1c             	sub    esp,0x1c
10001019:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
1000101d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001021:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10001025:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10001029:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000102d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10001031:	01 ca                	add    edx,ecx
10001033:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10001037:	01 fe                	add    esi,edi
10001039:	03 4d 0c             	add    ecx,DWORD PTR [ebp+0xc]
1000103c:	03 7d 10             	add    edi,DWORD PTR [ebp+0x10]
1000103f:	03 55 0c             	add    edx,DWORD PTR [ebp+0xc]
10001042:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10001046:	03 75 10             	add    esi,DWORD PTR [ebp+0x10]
10001049:	8b 13                	mov    edx,DWORD PTR [ebx]
1000104b:	39 ca                	cmp    edx,ecx
1000104d:	7d 02                	jge    10001051 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x3f>
1000104f:	89 ca                	mov    edx,ecx
10001051:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10001054:	39 f9                	cmp    ecx,edi
10001056:	7d 02                	jge    1000105a <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x48>
10001058:	89 f9                	mov    ecx,edi
1000105a:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
1000105d:	8b 2f                	mov    ebp,DWORD PTR [edi]
1000105f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001063:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10001066:	40                   	inc    eax
10001067:	39 f0                	cmp    eax,esi
10001069:	7e 02                	jle    1000106d <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x5b>
1000106b:	89 f0                	mov    eax,esi
1000106d:	29 c8                	sub    eax,ecx
1000106f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10001073:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10001076:	40                   	inc    eax
10001077:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
1000107b:	7e 04                	jle    10001081 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x6f>
1000107d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001081:	29 d0                	sub    eax,edx
10001083:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10001087:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
1000108b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
1000108f:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10001093:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
10001096:	83 c4 1c             	add    esp,0x1c
10001099:	5b                   	pop    ebx
1000109a:	5e                   	pop    esi
1000109b:	5f                   	pop    edi
1000109c:	5d                   	pop    ebp
1000109d:	ff e0                	jmp    eax

1000109f <plot(Context*, int, int, CRect*, unsigned int, Brush*)>:
1000109f:	56                   	push   esi
100010a0:	53                   	push   ebx
100010a1:	50                   	push   eax
100010a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100010a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100010aa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100010ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100010b2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
100010b6:	85 f6                	test   esi,esi
100010b8:	74 13                	je     100010cd <plot(Context*, int, int, CRect*, unsigned int, Brush*)+0x2e>
100010ba:	83 ec 04             	sub    esp,0x4
100010bd:	56                   	push   esi
100010be:	53                   	push   ebx
100010bf:	6a 01                	push   0x1
100010c1:	6a 01                	push   0x1
100010c3:	51                   	push   ecx
100010c4:	52                   	push   edx
100010c5:	50                   	push   eax
100010c6:	e8 fc ff ff ff       	call   100010c7 <plot(Context*, int, int, CRect*, unsigned int, Brush*)+0x28>	100010c7: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
100010cb:	eb 12                	jmp    100010df <plot(Context*, int, int, CRect*, unsigned int, Brush*)+0x40>
100010cd:	56                   	push   esi
100010ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100010d2:	53                   	push   ebx
100010d3:	6a 01                	push   0x1
100010d5:	6a 01                	push   0x1
100010d7:	51                   	push   ecx
100010d8:	52                   	push   edx
100010d9:	50                   	push   eax
100010da:	e8 fc ff ff ff       	call   100010db <plot(Context*, int, int, CRect*, unsigned int, Brush*)+0x3c>	100010db: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
100010df:	83 c4 20             	add    esp,0x20
100010e2:	58                   	pop    eax
100010e3:	5b                   	pop    ebx
100010e4:	5e                   	pop    esi
100010e5:	c3                   	ret    

100010e6 <plotrow(Context*, int, int, int, CRect*, unsigned int, Brush*)>:
100010e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100010ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100010ee:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
100010f3:	74 11                	je     10001106 <plotrow(Context*, int, int, int, CRect*, unsigned int, Brush*)+0x20>
100010f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100010f9:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
10001101:	e9 5a f9 ff ff       	jmp    10000a60 <Context::clippedRect(int, int, int, int, CRect*, Brush*)>
10001106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
1000110a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000110e:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
10001116:	e9 f7 fe ff ff       	jmp    10001012 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)>
1000111b:	90                   	nop

1000111c <Context::fillRect(int, int, int, int, Brush*)>:
1000111c:	55                   	push   ebp
1000111d:	57                   	push   edi
1000111e:	56                   	push   esi
1000111f:	53                   	push   ebx
10001120:	83 ec 2c             	sub    esp,0x2c
10001123:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10001127:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
1000112b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
1000112f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001133:	01 d8                	add    eax,ebx
10001135:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001139:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
1000113d:	01 fa                	add    edx,edi
1000113f:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
10001142:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
10001145:	85 db                	test   ebx,ebx
10001147:	79 02                	jns    1000114b <Context::fillRect(int, int, int, int, Brush*)+0x2f>
10001149:	31 db                	xor    ebx,ebx
1000114b:	85 ff                	test   edi,edi
1000114d:	79 02                	jns    10001151 <Context::fillRect(int, int, int, int, Brush*)+0x35>
1000114f:	31 ff                	xor    edi,edi
10001151:	89 e8                	mov    eax,ebp
10001153:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
10001157:	7e 04                	jle    1000115d <Context::fillRect(int, int, int, int, Brush*)+0x41>
10001159:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000115d:	29 d8                	sub    eax,ebx
1000115f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001163:	89 c8                	mov    eax,ecx
10001165:	39 d1                	cmp    ecx,edx
10001167:	7e 02                	jle    1000116b <Context::fillRect(int, int, int, int, Brush*)+0x4f>
10001169:	89 d0                	mov    eax,edx
1000116b:	29 f8                	sub    eax,edi
1000116d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001171:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001174:	8b 00                	mov    eax,DWORD PTR [eax]
10001176:	e8 a9 f7 ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
1000117b:	85 c0                	test   eax,eax
1000117d:	74 38                	je     100011b7 <Context::fillRect(int, int, int, int, Brush*)+0x9b>
1000117f:	31 ed                	xor    ebp,ebp
10001181:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001184:	8b 08                	mov    ecx,DWORD PTR [eax]
10001186:	89 c8                	mov    eax,ecx
10001188:	e8 97 f7 ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
1000118d:	39 e8                	cmp    eax,ebp
1000118f:	7e 65                	jle    100011f6 <Context::fillRect(int, int, int, int, Brush*)+0xda>
10001191:	89 ea                	mov    edx,ebp
10001193:	89 c8                	mov    eax,ecx
10001195:	e8 9a f7 ff ff       	call   10000934 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
1000119a:	52                   	push   edx
1000119b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
1000119f:	ff 30                	push   DWORD PTR [eax]
100011a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100011a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100011a9:	57                   	push   edi
100011aa:	53                   	push   ebx
100011ab:	56                   	push   esi
100011ac:	e8 fc ff ff ff       	call   100011ad <Context::fillRect(int, int, int, int, Brush*)+0x91>	100011ad: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
100011b1:	45                   	inc    ebp
100011b2:	83 c4 20             	add    esp,0x20
100011b5:	eb ca                	jmp    10001181 <Context::fillRect(int, int, int, int, Brush*)+0x65>
100011b7:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
100011bb:	75 39                	jne    100011f6 <Context::fillRect(int, int, int, int, Brush*)+0xda>
100011bd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
100011c5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
100011cd:	49                   	dec    ecx
100011ce:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100011d2:	8d 45 ff             	lea    eax,[ebp-0x1]
100011d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100011d9:	50                   	push   eax
100011da:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100011de:	8d 44 24 18          	lea    eax,[esp+0x18]
100011e2:	50                   	push   eax
100011e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100011e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100011eb:	57                   	push   edi
100011ec:	53                   	push   ebx
100011ed:	56                   	push   esi
100011ee:	e8 fc ff ff ff       	call   100011ef <Context::fillRect(int, int, int, int, Brush*)+0xd3>	100011ef: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
100011f3:	83 c4 20             	add    esp,0x20
100011f6:	83 c4 2c             	add    esp,0x2c
100011f9:	5b                   	pop    ebx
100011fa:	5e                   	pop    esi
100011fb:	5f                   	pop    edi
100011fc:	5d                   	pop    ebp
100011fd:	c3                   	ret    

100011fe <Context::fillRect(int, int, int, int, unsigned int)>:
100011fe:	55                   	push   ebp
100011ff:	57                   	push   edi
10001200:	56                   	push   esi
10001201:	53                   	push   ebx
10001202:	83 ec 2c             	sub    esp,0x2c
10001205:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10001209:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
1000120d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
10001211:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001215:	01 d8                	add    eax,ebx
10001217:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000121b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
1000121f:	01 fa                	add    edx,edi
10001221:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
10001224:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
10001227:	85 db                	test   ebx,ebx
10001229:	79 02                	jns    1000122d <Context::fillRect(int, int, int, int, unsigned int)+0x2f>
1000122b:	31 db                	xor    ebx,ebx
1000122d:	85 ff                	test   edi,edi
1000122f:	79 02                	jns    10001233 <Context::fillRect(int, int, int, int, unsigned int)+0x35>
10001231:	31 ff                	xor    edi,edi
10001233:	89 e8                	mov    eax,ebp
10001235:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
10001239:	7e 04                	jle    1000123f <Context::fillRect(int, int, int, int, unsigned int)+0x41>
1000123b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000123f:	29 d8                	sub    eax,ebx
10001241:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001245:	89 c8                	mov    eax,ecx
10001247:	39 d1                	cmp    ecx,edx
10001249:	7e 02                	jle    1000124d <Context::fillRect(int, int, int, int, unsigned int)+0x4f>
1000124b:	89 d0                	mov    eax,edx
1000124d:	29 f8                	sub    eax,edi
1000124f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001253:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001256:	8b 00                	mov    eax,DWORD PTR [eax]
10001258:	e8 c7 f6 ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
1000125d:	85 c0                	test   eax,eax
1000125f:	74 38                	je     10001299 <Context::fillRect(int, int, int, int, unsigned int)+0x9b>
10001261:	31 ed                	xor    ebp,ebp
10001263:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001266:	8b 08                	mov    ecx,DWORD PTR [eax]
10001268:	89 c8                	mov    eax,ecx
1000126a:	e8 b5 f6 ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
1000126f:	39 e8                	cmp    eax,ebp
10001271:	7e 65                	jle    100012d8 <Context::fillRect(int, int, int, int, unsigned int)+0xda>
10001273:	89 ea                	mov    edx,ebp
10001275:	89 c8                	mov    eax,ecx
10001277:	e8 b8 f6 ff ff       	call   10000934 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
1000127c:	52                   	push   edx
1000127d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001281:	ff 30                	push   DWORD PTR [eax]
10001283:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001287:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000128b:	57                   	push   edi
1000128c:	53                   	push   ebx
1000128d:	56                   	push   esi
1000128e:	e8 fc ff ff ff       	call   1000128f <Context::fillRect(int, int, int, int, unsigned int)+0x91>	1000128f: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
10001293:	45                   	inc    ebp
10001294:	83 c4 20             	add    esp,0x20
10001297:	eb ca                	jmp    10001263 <Context::fillRect(int, int, int, int, unsigned int)+0x65>
10001299:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
1000129d:	75 39                	jne    100012d8 <Context::fillRect(int, int, int, int, unsigned int)+0xda>
1000129f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
100012a7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
100012af:	49                   	dec    ecx
100012b0:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100012b4:	8d 45 ff             	lea    eax,[ebp-0x1]
100012b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100012bb:	50                   	push   eax
100012bc:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100012c0:	8d 44 24 18          	lea    eax,[esp+0x18]
100012c4:	50                   	push   eax
100012c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100012c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100012cd:	57                   	push   edi
100012ce:	53                   	push   ebx
100012cf:	56                   	push   esi
100012d0:	e8 fc ff ff ff       	call   100012d1 <Context::fillRect(int, int, int, int, unsigned int)+0xd3>	100012d1: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
100012d5:	83 c4 20             	add    esp,0x20
100012d8:	83 c4 2c             	add    esp,0x2c
100012db:	5b                   	pop    ebx
100012dc:	5e                   	pop    esi
100012dd:	5f                   	pop    edi
100012de:	5d                   	pop    ebp
100012df:	c3                   	ret    

100012e0 <Context::drawHorizontalLine(int, int, int, unsigned int)>:
100012e0:	83 ec 14             	sub    esp,0x14
100012e3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100012e7:	6a 01                	push   0x1
100012e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100012ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100012f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100012f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100012f9:	e8 fc ff ff ff       	call   100012fa <Context::drawHorizontalLine(int, int, int, unsigned int)+0x1a>	100012fa: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
100012fe:	83 c4 2c             	add    esp,0x2c
10001301:	c3                   	ret    

10001302 <Context::drawVerticalLine(int, int, int, unsigned int)>:
10001302:	83 ec 14             	sub    esp,0x14
10001305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10001309:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000130d:	6a 01                	push   0x1
1000130f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001313:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001317:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000131b:	e8 fc ff ff ff       	call   1000131c <Context::drawVerticalLine(int, int, int, unsigned int)+0x1a>	1000131c: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10001320:	83 c4 2c             	add    esp,0x2c
10001323:	c3                   	ret    

10001324 <Context::drawRect(int, int, int, int, unsigned int)>:
10001324:	55                   	push   ebp
10001325:	57                   	push   edi
10001326:	56                   	push   esi
10001327:	53                   	push   ebx
10001328:	83 ec 28             	sub    esp,0x28
1000132b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
1000132f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10001333:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10001337:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
1000133b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
1000133f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001343:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
10001347:	57                   	push   edi
10001348:	55                   	push   ebp
10001349:	52                   	push   edx
1000134a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
1000134e:	56                   	push   esi
1000134f:	53                   	push   ebx
10001350:	e8 fc ff ff ff       	call   10001351 <Context::drawRect(int, int, int, int, unsigned int)+0x2d>	10001351: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
10001355:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001359:	8d 48 fe             	lea    ecx,[eax-0x2]
1000135c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10001360:	8d 42 01             	lea    eax,[edx+0x1]
10001363:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
10001367:	83 c4 14             	add    esp,0x14
1000136a:	57                   	push   edi
1000136b:	51                   	push   ecx
1000136c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10001370:	50                   	push   eax
10001371:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001375:	56                   	push   esi
10001376:	53                   	push   ebx
10001377:	e8 fc ff ff ff       	call   10001378 <Context::drawRect(int, int, int, int, unsigned int)+0x54>	10001378: R_386_PC32	Context::drawVerticalLine(int, int, int, unsigned int)
1000137c:	83 c4 14             	add    esp,0x14
1000137f:	57                   	push   edi
10001380:	55                   	push   ebp
10001381:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001385:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001389:	8d 54 02 ff          	lea    edx,[edx+eax*1-0x1]
1000138d:	52                   	push   edx
1000138e:	56                   	push   esi
1000138f:	53                   	push   ebx
10001390:	e8 fc ff ff ff       	call   10001391 <Context::drawRect(int, int, int, int, unsigned int)+0x6d>	10001391: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
10001395:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
10001399:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
1000139d:	89 4c 24 5c          	mov    DWORD PTR [esp+0x5c],ecx
100013a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100013a5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
100013a9:	8d 44 2e ff          	lea    eax,[esi+ebp*1-0x1]
100013ad:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100013b1:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
100013b5:	83 c4 3c             	add    esp,0x3c
100013b8:	5b                   	pop    ebx
100013b9:	5e                   	pop    esi
100013ba:	5f                   	pop    edi
100013bb:	5d                   	pop    ebp
100013bc:	e9 41 ff ff ff       	jmp    10001302 <Context::drawVerticalLine(int, int, int, unsigned int)>
100013c1:	90                   	nop

100013c2 <Context::ellipse(bool, int, int, int, int, unsigned int)>:
100013c2:	55                   	push   ebp
100013c3:	57                   	push   edi
100013c4:	56                   	push   esi
100013c5:	53                   	push   ebx
100013c6:	83 ec 1c             	sub    esp,0x1c
100013c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
100013cd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
100013d1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100013d5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
100013d9:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
100013dd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100013e1:	01 dd                	add    ebp,ebx
100013e3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
100013e7:	01 fa                	add    edx,edi
100013e9:	85 db                	test   ebx,ebx
100013eb:	79 02                	jns    100013ef <Context::ellipse(bool, int, int, int, int, unsigned int)+0x2d>
100013ed:	31 db                	xor    ebx,ebx
100013ef:	85 ff                	test   edi,edi
100013f1:	79 02                	jns    100013f5 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x33>
100013f3:	31 ff                	xor    edi,edi
100013f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
100013f8:	39 e8                	cmp    eax,ebp
100013fa:	7e 02                	jle    100013fe <Context::ellipse(bool, int, int, int, int, unsigned int)+0x3c>
100013fc:	89 e8                	mov    eax,ebp
100013fe:	29 d8                	sub    eax,ebx
10001400:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001404:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
10001407:	39 d0                	cmp    eax,edx
10001409:	7e 02                	jle    1000140d <Context::ellipse(bool, int, int, int, int, unsigned int)+0x4b>
1000140b:	89 d0                	mov    eax,edx
1000140d:	29 f8                	sub    eax,edi
1000140f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001413:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001416:	8b 00                	mov    eax,DWORD PTR [eax]
10001418:	e8 07 f5 ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
1000141d:	85 c0                	test   eax,eax
1000141f:	74 44                	je     10001465 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xa3>
10001421:	31 ed                	xor    ebp,ebp
10001423:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10001428:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000142c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
1000142f:	8b 08                	mov    ecx,DWORD PTR [eax]
10001431:	89 c8                	mov    eax,ecx
10001433:	e8 ec f4 ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
10001438:	39 e8                	cmp    eax,ebp
1000143a:	7e 4c                	jle    10001488 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xc6>
1000143c:	89 ea                	mov    edx,ebp
1000143e:	89 c8                	mov    eax,ecx
10001440:	e8 ef f4 ff ff       	call   10000934 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001445:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10001449:	ff 30                	push   DWORD PTR [eax]
1000144b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000144f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001453:	57                   	push   edi
10001454:	53                   	push   ebx
10001455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10001459:	56                   	push   esi
1000145a:	e8 fc ff ff ff       	call   1000145b <Context::ellipse(bool, int, int, int, int, unsigned int)+0x99>	1000145b: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
1000145f:	45                   	inc    ebp
10001460:	83 c4 20             	add    esp,0x20
10001463:	eb c7                	jmp    1000142c <Context::ellipse(bool, int, int, int, int, unsigned int)+0x6a>
10001465:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
10001469:	75 1d                	jne    10001488 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xc6>
1000146b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
1000146f:	6a 00                	push   0x0
10001471:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001475:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001479:	57                   	push   edi
1000147a:	53                   	push   ebx
1000147b:	0f b6 c9             	movzx  ecx,cl
1000147e:	51                   	push   ecx
1000147f:	56                   	push   esi
10001480:	e8 fc ff ff ff       	call   10001481 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xbf>	10001481: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
10001485:	83 c4 20             	add    esp,0x20
10001488:	83 c4 1c             	add    esp,0x1c
1000148b:	5b                   	pop    ebx
1000148c:	5e                   	pop    esi
1000148d:	5f                   	pop    edi
1000148e:	5d                   	pop    ebp
1000148f:	c3                   	ret    

10001490 <Context::ellipse(bool, int, int, int, int, Brush*)>:
10001490:	55                   	push   ebp
10001491:	57                   	push   edi
10001492:	56                   	push   esi
10001493:	53                   	push   ebx
10001494:	83 ec 1c             	sub    esp,0x1c
10001497:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
1000149b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
1000149f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100014a3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
100014a7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
100014ab:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100014af:	01 dd                	add    ebp,ebx
100014b1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
100014b5:	01 fa                	add    edx,edi
100014b7:	85 db                	test   ebx,ebx
100014b9:	79 02                	jns    100014bd <Context::ellipse(bool, int, int, int, int, Brush*)+0x2d>
100014bb:	31 db                	xor    ebx,ebx
100014bd:	85 ff                	test   edi,edi
100014bf:	79 02                	jns    100014c3 <Context::ellipse(bool, int, int, int, int, Brush*)+0x33>
100014c1:	31 ff                	xor    edi,edi
100014c3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
100014c6:	39 e8                	cmp    eax,ebp
100014c8:	7e 02                	jle    100014cc <Context::ellipse(bool, int, int, int, int, Brush*)+0x3c>
100014ca:	89 e8                	mov    eax,ebp
100014cc:	29 d8                	sub    eax,ebx
100014ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100014d2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
100014d5:	39 d0                	cmp    eax,edx
100014d7:	7e 02                	jle    100014db <Context::ellipse(bool, int, int, int, int, Brush*)+0x4b>
100014d9:	89 d0                	mov    eax,edx
100014db:	29 f8                	sub    eax,edi
100014dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100014e1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
100014e4:	8b 00                	mov    eax,DWORD PTR [eax]
100014e6:	e8 39 f4 ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
100014eb:	85 c0                	test   eax,eax
100014ed:	74 44                	je     10001533 <Context::ellipse(bool, int, int, int, int, Brush*)+0xa3>
100014ef:	31 ed                	xor    ebp,ebp
100014f1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
100014f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100014fa:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
100014fd:	8b 08                	mov    ecx,DWORD PTR [eax]
100014ff:	89 c8                	mov    eax,ecx
10001501:	e8 1e f4 ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
10001506:	39 e8                	cmp    eax,ebp
10001508:	7e 4c                	jle    10001556 <Context::ellipse(bool, int, int, int, int, Brush*)+0xc6>
1000150a:	89 ea                	mov    edx,ebp
1000150c:	89 c8                	mov    eax,ecx
1000150e:	e8 21 f4 ff ff       	call   10000934 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001513:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10001517:	ff 30                	push   DWORD PTR [eax]
10001519:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000151d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001521:	57                   	push   edi
10001522:	53                   	push   ebx
10001523:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10001527:	56                   	push   esi
10001528:	e8 fc ff ff ff       	call   10001529 <Context::ellipse(bool, int, int, int, int, Brush*)+0x99>	10001529: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)
1000152d:	45                   	inc    ebp
1000152e:	83 c4 20             	add    esp,0x20
10001531:	eb c7                	jmp    100014fa <Context::ellipse(bool, int, int, int, int, Brush*)+0x6a>
10001533:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
10001537:	75 1d                	jne    10001556 <Context::ellipse(bool, int, int, int, int, Brush*)+0xc6>
10001539:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
1000153d:	6a 00                	push   0x0
1000153f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001543:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001547:	57                   	push   edi
10001548:	53                   	push   ebx
10001549:	0f b6 c9             	movzx  ecx,cl
1000154c:	51                   	push   ecx
1000154d:	56                   	push   esi
1000154e:	e8 fc ff ff ff       	call   1000154f <Context::ellipse(bool, int, int, int, int, Brush*)+0xbf>	1000154f: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)
10001553:	83 c4 20             	add    esp,0x20
10001556:	83 c4 1c             	add    esp,0x1c
10001559:	5b                   	pop    ebx
1000155a:	5e                   	pop    esi
1000155b:	5f                   	pop    edi
1000155c:	5d                   	pop    ebp
1000155d:	c3                   	ret    

1000155e <CRect::split(CRect*)>:
1000155e:	55                   	push   ebp
1000155f:	57                   	push   edi
10001560:	56                   	push   esi
10001561:	53                   	push   ebx
10001562:	83 ec 28             	sub    esp,0x28
10001565:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10001569:	6a 08                	push   0x8
1000156b:	e8 fc ff ff ff       	call   1000156c <CRect::split(CRect*)+0xe>	1000156c: R_386_PC32	malloc
10001570:	89 c3                	mov    ebx,eax
10001572:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001579:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000157f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
10001583:	8b 6a 08             	mov    ebp,DWORD PTR [edx+0x8]
10001586:	8b 3a                	mov    edi,DWORD PTR [edx]
10001588:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
1000158b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000158f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
10001592:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001596:	8b 16                	mov    edx,DWORD PTR [esi]
10001598:	83 c4 10             	add    esp,0x10
1000159b:	39 d7                	cmp    edi,edx
1000159d:	7f 36                	jg     100015d5 <CRect::split(CRect*)+0x77>
1000159f:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
100015a3:	7c 30                	jl     100015d5 <CRect::split(CRect*)+0x77>
100015a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100015a9:	83 ec 0c             	sub    esp,0xc
100015ac:	6a 10                	push   0x10
100015ae:	e8 fc ff ff ff       	call   100015af <CRect::split(CRect*)+0x51>	100015af: R_386_PC32	malloc
100015b3:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
100015b6:	89 38                	mov    DWORD PTR [eax],edi
100015b8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100015bc:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
100015bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100015c3:	4a                   	dec    edx
100015c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100015c7:	59                   	pop    ecx
100015c8:	5f                   	pop    edi
100015c9:	50                   	push   eax
100015ca:	53                   	push   ebx
100015cb:	e8 fc ff ff ff       	call   100015cc <CRect::split(CRect*)+0x6e>	100015cc: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100015d0:	8b 3e                	mov    edi,DWORD PTR [esi]
100015d2:	83 c4 10             	add    esp,0x10
100015d5:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
100015d8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
100015dc:	7c 35                	jl     10001613 <CRect::split(CRect*)+0xb5>
100015de:	39 d5                	cmp    ebp,edx
100015e0:	7f 31                	jg     10001613 <CRect::split(CRect*)+0xb5>
100015e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100015e6:	83 ec 0c             	sub    esp,0xc
100015e9:	6a 10                	push   0x10
100015eb:	e8 fc ff ff ff       	call   100015ec <CRect::split(CRect*)+0x8e>	100015ec: R_386_PC32	malloc
100015f0:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
100015f3:	89 38                	mov    DWORD PTR [eax],edi
100015f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100015f9:	4a                   	dec    edx
100015fa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100015fd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10001601:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10001604:	5d                   	pop    ebp
10001605:	5a                   	pop    edx
10001606:	50                   	push   eax
10001607:	53                   	push   ebx
10001608:	e8 fc ff ff ff       	call   10001609 <CRect::split(CRect*)+0xab>	10001609: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000160d:	8b 6e 08             	mov    ebp,DWORD PTR [esi+0x8]
10001610:	83 c4 10             	add    esp,0x10
10001613:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
10001616:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
1000161a:	7c 3d                	jl     10001659 <CRect::split(CRect*)+0xfb>
1000161c:	39 fa                	cmp    edx,edi
1000161e:	7c 39                	jl     10001659 <CRect::split(CRect*)+0xfb>
10001620:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10001624:	83 ec 0c             	sub    esp,0xc
10001627:	6a 10                	push   0x10
10001629:	e8 fc ff ff ff       	call   1000162a <CRect::split(CRect*)+0xcc>	1000162a: R_386_PC32	malloc
1000162e:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
10001631:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10001635:	42                   	inc    edx
10001636:	89 10                	mov    DWORD PTR [eax],edx
10001638:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
1000163c:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
1000163f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10001643:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10001646:	5a                   	pop    edx
10001647:	59                   	pop    ecx
10001648:	50                   	push   eax
10001649:	53                   	push   ebx
1000164a:	e8 fc ff ff ff       	call   1000164b <CRect::split(CRect*)+0xed>	1000164b: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000164f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10001652:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001656:	83 c4 10             	add    esp,0x10
10001659:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
1000165c:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10001660:	7c 2e                	jl     10001690 <CRect::split(CRect*)+0x132>
10001662:	39 ee                	cmp    esi,ebp
10001664:	7c 2a                	jl     10001690 <CRect::split(CRect*)+0x132>
10001666:	83 ec 0c             	sub    esp,0xc
10001669:	6a 10                	push   0x10
1000166b:	e8 fc ff ff ff       	call   1000166c <CRect::split(CRect*)+0x10e>	1000166c: R_386_PC32	malloc
10001670:	46                   	inc    esi
10001671:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
10001674:	89 38                	mov    DWORD PTR [eax],edi
10001676:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
1000167a:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
1000167d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10001681:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10001684:	5a                   	pop    edx
10001685:	59                   	pop    ecx
10001686:	50                   	push   eax
10001687:	53                   	push   ebx
10001688:	e8 fc ff ff ff       	call   10001689 <CRect::split(CRect*)+0x12b>	10001689: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000168d:	83 c4 10             	add    esp,0x10
10001690:	89 d8                	mov    eax,ebx
10001692:	83 c4 1c             	add    esp,0x1c
10001695:	5b                   	pop    ebx
10001696:	5e                   	pop    esi
10001697:	5f                   	pop    edi
10001698:	5d                   	pop    ebp
10001699:	c3                   	ret    

1000169a <Context::clearClipRects()>:
1000169a:	53                   	push   ebx
1000169b:	83 ec 08             	sub    esp,0x8
1000169e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100016a2:	c6 43 14 00          	mov    BYTE PTR [ebx+0x14],0x0
100016a6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
100016a9:	8b 08                	mov    ecx,DWORD PTR [eax]
100016ab:	89 c8                	mov    eax,ecx
100016ad:	e8 72 f2 ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
100016b2:	85 c0                	test   eax,eax
100016b4:	74 19                	je     100016cf <Context::clearClipRects()+0x35>
100016b6:	50                   	push   eax
100016b7:	50                   	push   eax
100016b8:	6a 10                	push   0x10
100016ba:	ff 31                	push   DWORD PTR [ecx]
100016bc:	e8 fc ff ff ff       	call   100016bd <Context::clearClipRects()+0x23>	100016bd: R_386_PC32	operator delete(void*, unsigned long)
100016c1:	58                   	pop    eax
100016c2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
100016c5:	e8 fc ff ff ff       	call   100016c6 <Context::clearClipRects()+0x2c>	100016c6: R_386_PC32	List<CRect*>::deleteHead()
100016ca:	83 c4 10             	add    esp,0x10
100016cd:	eb d7                	jmp    100016a6 <Context::clearClipRects()+0xc>
100016cf:	83 c4 08             	add    esp,0x8
100016d2:	5b                   	pop    ebx
100016d3:	c3                   	ret    

100016d4 <Context::subClipRect(CRect*)>:
100016d4:	55                   	push   ebp
100016d5:	57                   	push   edi
100016d6:	56                   	push   esi
100016d7:	53                   	push   ebx
100016d8:	83 ec 1c             	sub    esp,0x1c
100016db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100016df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100016e3:	c6 40 14 01          	mov    BYTE PTR [eax+0x14],0x1
100016e7:	31 db                	xor    ebx,ebx
100016e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100016ed:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
100016f0:	8b 29                	mov    ebp,DWORD PTR [ecx]
100016f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100016f6:	89 e8                	mov    eax,ebp
100016f8:	e8 27 f2 ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
100016fd:	39 d8                	cmp    eax,ebx
100016ff:	0f 8e d4 00 00 00    	jle    100017d9 <Context::subClipRect(CRect*)+0x105>
10001705:	89 da                	mov    edx,ebx
10001707:	89 e8                	mov    eax,ebp
10001709:	e8 26 f2 ff ff       	call   10000934 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
1000170e:	8b 38                	mov    edi,DWORD PTR [eax]
10001710:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
10001713:	39 17                	cmp    DWORD PTR [edi],edx
10001715:	7f 1b                	jg     10001732 <Context::subClipRect(CRect*)+0x5e>
10001717:	8b 16                	mov    edx,DWORD PTR [esi]
10001719:	39 57 04             	cmp    DWORD PTR [edi+0x4],edx
1000171c:	7c 14                	jl     10001732 <Context::subClipRect(CRect*)+0x5e>
1000171e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
10001721:	39 57 08             	cmp    DWORD PTR [edi+0x8],edx
10001724:	7f 0c                	jg     10001732 <Context::subClipRect(CRect*)+0x5e>
10001726:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
10001729:	39 57 0c             	cmp    DWORD PTR [edi+0xc],edx
1000172c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10001730:	7d 03                	jge    10001735 <Context::subClipRect(CRect*)+0x61>
10001732:	43                   	inc    ebx
10001733:	eb b4                	jmp    100016e9 <Context::subClipRect(CRect*)+0x15>
10001735:	39 e8                	cmp    eax,ebp
10001737:	75 07                	jne    10001740 <Context::subClipRect(CRect*)+0x6c>
10001739:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
1000173c:	89 19                	mov    DWORD PTR [ecx],ebx
1000173e:	eb 19                	jmp    10001759 <Context::subClipRect(CRect*)+0x85>
10001740:	3b 41 04             	cmp    eax,DWORD PTR [ecx+0x4]
10001743:	75 08                	jne    1000174d <Context::subClipRect(CRect*)+0x79>
10001745:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
10001748:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
1000174b:	eb 0c                	jmp    10001759 <Context::subClipRect(CRect*)+0x85>
1000174d:	8b 68 08             	mov    ebp,DWORD PTR [eax+0x8]
10001750:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10001753:	89 5d 04             	mov    DWORD PTR [ebp+0x4],ebx
10001756:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
10001759:	8b 19                	mov    ebx,DWORD PTR [ecx]
1000175b:	85 db                	test   ebx,ebx
1000175d:	74 0a                	je     10001769 <Context::subClipRect(CRect*)+0x95>
1000175f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10001766:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10001769:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
10001770:	55                   	push   ebp
10001771:	55                   	push   ebp
10001772:	6a 0c                	push   0xc
10001774:	50                   	push   eax
10001775:	e8 fc ff ff ff       	call   10001776 <Context::subClipRect(CRect*)+0xa2>	10001776: R_386_PC32	operator delete(void*, unsigned long)
1000177a:	58                   	pop    eax
1000177b:	5a                   	pop    edx
1000177c:	56                   	push   esi
1000177d:	57                   	push   edi
1000177e:	e8 fc ff ff ff       	call   1000177f <Context::subClipRect(CRect*)+0xab>	1000177f: R_386_PC32	CRect::split(CRect*)
10001783:	89 c5                	mov    ebp,eax
10001785:	59                   	pop    ecx
10001786:	5b                   	pop    ebx
10001787:	6a 10                	push   0x10
10001789:	57                   	push   edi
1000178a:	e8 fc ff ff ff       	call   1000178b <Context::subClipRect(CRect*)+0xb7>	1000178b: R_386_PC32	operator delete(void*, unsigned long)
1000178f:	83 c4 10             	add    esp,0x10
10001792:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
10001795:	89 c8                	mov    eax,ecx
10001797:	e8 88 f1 ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
1000179c:	89 c3                	mov    ebx,eax
1000179e:	85 c0                	test   eax,eax
100017a0:	74 1c                	je     100017be <Context::subClipRect(CRect*)+0xea>
100017a2:	8b 19                	mov    ebx,DWORD PTR [ecx]
100017a4:	83 ec 0c             	sub    esp,0xc
100017a7:	55                   	push   ebp
100017a8:	e8 fc ff ff ff       	call   100017a9 <Context::subClipRect(CRect*)+0xd5>	100017a9: R_386_PC32	List<CRect*>::deleteHead()
100017ad:	59                   	pop    ecx
100017ae:	5f                   	pop    edi
100017af:	53                   	push   ebx
100017b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100017b4:	ff 70 18             	push   DWORD PTR [eax+0x18]
100017b7:	e8 fc ff ff ff       	call   100017b8 <Context::subClipRect(CRect*)+0xe4>	100017b8: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100017bc:	eb d1                	jmp    1000178f <Context::subClipRect(CRect*)+0xbb>
100017be:	83 ec 0c             	sub    esp,0xc
100017c1:	55                   	push   ebp
100017c2:	e8 fc ff ff ff       	call   100017c3 <Context::subClipRect(CRect*)+0xef>	100017c3: R_386_PC32	List<CRect*>::~List()
100017c7:	58                   	pop    eax
100017c8:	5a                   	pop    edx
100017c9:	6a 08                	push   0x8
100017cb:	55                   	push   ebp
100017cc:	e8 fc ff ff ff       	call   100017cd <Context::subClipRect(CRect*)+0xf9>	100017cd: R_386_PC32	operator delete(void*, unsigned long)
100017d1:	83 c4 10             	add    esp,0x10
100017d4:	e9 10 ff ff ff       	jmp    100016e9 <Context::subClipRect(CRect*)+0x15>
100017d9:	83 c4 1c             	add    esp,0x1c
100017dc:	5b                   	pop    ebx
100017dd:	5e                   	pop    esi
100017de:	5f                   	pop    edi
100017df:	5d                   	pop    ebp
100017e0:	c3                   	ret    
100017e1:	90                   	nop

100017e2 <Context::addClipRect(CRect*)>:
100017e2:	56                   	push   esi
100017e3:	53                   	push   ebx
100017e4:	83 ec 0c             	sub    esp,0xc
100017e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100017eb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
100017ef:	56                   	push   esi
100017f0:	53                   	push   ebx
100017f1:	e8 fc ff ff ff       	call   100017f2 <Context::addClipRect(CRect*)+0x10>	100017f2: R_386_PC32	Context::subClipRect(CRect*)
100017f6:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100017fa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
100017fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001801:	83 c4 14             	add    esp,0x14
10001804:	5b                   	pop    ebx
10001805:	5e                   	pop    esi
10001806:	e9 fc ff ff ff       	jmp    10001807 <Context::addClipRect(CRect*)+0x25>	10001807: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000180b:	90                   	nop

1000180c <Context::intersectClipRect(CRect*)>:
1000180c:	55                   	push   ebp
1000180d:	57                   	push   edi
1000180e:	56                   	push   esi
1000180f:	53                   	push   ebx
10001810:	83 ec 28             	sub    esp,0x28
10001813:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001817:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
1000181b:	c6 46 14 01          	mov    BYTE PTR [esi+0x14],0x1
1000181f:	6a 08                	push   0x8
10001821:	e8 fc ff ff ff       	call   10001822 <Context::intersectClipRect(CRect*)+0x16>	10001822: R_386_PC32	malloc
10001826:	89 c7                	mov    edi,eax
10001828:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000182f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10001835:	83 c4 10             	add    esp,0x10
10001838:	31 db                	xor    ebx,ebx
1000183a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
1000183d:	8b 08                	mov    ecx,DWORD PTR [eax]
1000183f:	89 c8                	mov    eax,ecx
10001841:	e8 de f0 ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
10001846:	39 d8                	cmp    eax,ebx
10001848:	7e 59                	jle    100018a3 <Context::intersectClipRect(CRect*)+0x97>
1000184a:	89 da                	mov    edx,ebx
1000184c:	89 c8                	mov    eax,ecx
1000184e:	e8 e1 f0 ff ff       	call   10000934 <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001853:	51                   	push   ecx
10001854:	51                   	push   ecx
10001855:	55                   	push   ebp
10001856:	ff 30                	push   DWORD PTR [eax]
10001858:	e8 fc ff ff ff       	call   10001859 <Context::intersectClipRect(CRect*)+0x4d>	10001859: R_386_PC32	CRect::intersect(CRect*)
1000185d:	83 c4 10             	add    esp,0x10
10001860:	85 c0                	test   eax,eax
10001862:	74 0c                	je     10001870 <Context::intersectClipRect(CRect*)+0x64>
10001864:	52                   	push   edx
10001865:	52                   	push   edx
10001866:	50                   	push   eax
10001867:	57                   	push   edi
10001868:	e8 fc ff ff ff       	call   10001869 <Context::intersectClipRect(CRect*)+0x5d>	10001869: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000186d:	83 c4 10             	add    esp,0x10
10001870:	43                   	inc    ebx
10001871:	eb c7                	jmp    1000183a <Context::intersectClipRect(CRect*)+0x2e>
10001873:	85 c0                	test   eax,eax
10001875:	74 43                	je     100018ba <Context::intersectClipRect(CRect*)+0xae>
10001877:	85 c9                	test   ecx,ecx
10001879:	74 f8                	je     10001873 <Context::intersectClipRect(CRect*)+0x67>
1000187b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000187e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
10001881:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001885:	51                   	push   ecx
10001886:	51                   	push   ecx
10001887:	6a 0c                	push   0xc
10001889:	52                   	push   edx
1000188a:	e8 fc ff ff ff       	call   1000188b <Context::intersectClipRect(CRect*)+0x7f>	1000188b: R_386_PC32	operator delete(void*, unsigned long)
1000188f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10001896:	83 c4 10             	add    esp,0x10
10001899:	85 c0                	test   eax,eax
1000189b:	75 14                	jne    100018b1 <Context::intersectClipRect(CRect*)+0xa5>
1000189d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
100018a3:	8b 5e 18             	mov    ebx,DWORD PTR [esi+0x18]
100018a6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100018a8:	89 c8                	mov    eax,ecx
100018aa:	e8 75 f0 ff ff       	call   10000924 <List<CRect*>::length() [clone .isra.0]>
100018af:	eb c2                	jmp    10001873 <Context::intersectClipRect(CRect*)+0x67>
100018b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100018b8:	eb e9                	jmp    100018a3 <Context::intersectClipRect(CRect*)+0x97>
100018ba:	83 ec 0c             	sub    esp,0xc
100018bd:	53                   	push   ebx
100018be:	e8 fc ff ff ff       	call   100018bf <Context::intersectClipRect(CRect*)+0xb3>	100018bf: R_386_PC32	List<CRect*>::~List()
100018c3:	58                   	pop    eax
100018c4:	5a                   	pop    edx
100018c5:	6a 08                	push   0x8
100018c7:	53                   	push   ebx
100018c8:	e8 fc ff ff ff       	call   100018c9 <Context::intersectClipRect(CRect*)+0xbd>	100018c9: R_386_PC32	operator delete(void*, unsigned long)
100018cd:	89 7e 18             	mov    DWORD PTR [esi+0x18],edi
100018d0:	c7 44 24 44 10 00 00 00 	mov    DWORD PTR [esp+0x44],0x10
100018d8:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
100018dc:	83 c4 2c             	add    esp,0x2c
100018df:	5b                   	pop    ebx
100018e0:	5e                   	pop    esi
100018e1:	5f                   	pop    edi
100018e2:	5d                   	pop    ebp
100018e3:	e9 fc ff ff ff       	jmp    100018e4 <Context::intersectClipRect(CRect*)+0xd8>	100018e4: R_386_PC32	operator delete(void*, unsigned long)

100018e8 <startMouse()>:
100018e8:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100018ea: R_386_32	guiMouseHandler
	100018ee: R_386_32	handleMouse
100018f2:	c3                   	ret    

100018f3 <setupCursor()>:
100018f3:	55                   	push   ebp
100018f4:	57                   	push   edi
100018f5:	56                   	push   esi
100018f6:	53                   	push   ebx
100018f7:	83 ec 38             	sub    esp,0x38
100018fa:	c7 05 00 00 00 00 2c 01 00 00 	mov    DWORD PTR ds:0x0,0x12c	100018fc: R_386_32	krnlMouseX
10001904:	c7 05 00 00 00 00 c8 00 00 00 	mov    DWORD PTR ds:0x0,0xc8	10001906: R_386_32	krnlMouseY
1000190e:	c7 05 04 00 00 00 2c 01 00 00 	mov    DWORD PTR ds:0x4,0x12c	10001910: R_386_32	rootRgn
10001918:	c7 05 08 00 00 00 c8 00 00 00 	mov    DWORD PTR ds:0x8,0xc8	1000191a: R_386_32	rootRgn
10001922:	c7 05 0c 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xc,0x0	10001924: R_386_32	rootRgn
1000192c:	68 14 01 00 00       	push   0x114
10001931:	e8 fc ff ff ff       	call   10001932 <setupCursor()+0x3f>	10001932: R_386_PC32	malloc
10001936:	89 c5                	mov    ebp,eax
10001938:	83 c4 0c             	add    esp,0xc
1000193b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000193d: R_386_32	kernelProcess
10001941:	68 20 2e 00 10       	push   0x10002e20	10001942: R_386_32	.text
10001946:	50                   	push   eax
10001947:	e8 fc ff ff ff       	call   10001948 <setupCursor()+0x55>	10001948: R_386_PC32	File::File(char const*, Process*)
1000194c:	58                   	pop    eax
1000194d:	5a                   	pop    edx
1000194e:	6a 01                	push   0x1
10001950:	55                   	push   ebp
10001951:	e8 fc ff ff ff       	call   10001952 <setupCursor()+0x5f>	10001952: R_386_PC32	File::open(FileOpenMode)
10001956:	83 c4 10             	add    esp,0x10
10001959:	85 c0                	test   eax,eax
1000195b:	74 0a                	je     10001967 <setupCursor()+0x74>
1000195d:	83 ec 0c             	sub    esp,0xc
10001960:	68 3f 2e 00 10       	push   0x10002e3f	10001961: R_386_32	.text
10001965:	eb 4c                	jmp    100019b3 <setupCursor()+0xc0>
10001967:	53                   	push   ebx
10001968:	8d 44 24 17          	lea    eax,[esp+0x17]
1000196c:	50                   	push   eax
1000196d:	8d 44 24 20          	lea    eax,[esp+0x20]
10001971:	50                   	push   eax
10001972:	55                   	push   ebp
10001973:	e8 fc ff ff ff       	call   10001974 <setupCursor()+0x81>	10001974: R_386_PC32	File::stat(unsigned long long*, bool*)
10001978:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
1000197c:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10001980:	89 34 24             	mov    DWORD PTR [esp],esi
10001983:	e8 fc ff ff ff       	call   10001984 <setupCursor()+0x91>	10001984: R_386_PC32	malloc
10001988:	89 c3                	mov    ebx,eax
1000198a:	58                   	pop    eax
1000198b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000198e:	8d 54 24 20          	lea    edx,[esp+0x20]
10001992:	52                   	push   edx
10001993:	53                   	push   ebx
10001994:	57                   	push   edi
10001995:	56                   	push   esi
10001996:	55                   	push   ebp
10001997:	ff 50 0c             	call   DWORD PTR [eax+0xc]
1000199a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000199e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
100019a2:	83 c4 20             	add    esp,0x20
100019a5:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
100019a9:	74 12                	je     100019bd <setupCursor()+0xca>
100019ab:	83 ec 0c             	sub    esp,0xc
100019ae:	68 53 2e 00 10       	push   0x10002e53	100019af: R_386_32	.text
100019b3:	e8 fc ff ff ff       	call   100019b4 <setupCursor()+0xc1>	100019b4: R_386_PC32	Dbg::kprintf(char const*, ...)
100019b8:	e9 3d 01 00 00       	jmp    10001afa <setupCursor()+0x207>
100019bd:	6a 00                	push   0x0
100019bf:	68 04 01 00 00       	push   0x104
100019c4:	52                   	push   edx
100019c5:	50                   	push   eax
100019c6:	e8 fc ff ff ff       	call   100019c7 <setupCursor()+0xd4>	100019c7: R_386_PC32	__udivdi3
100019cb:	5a                   	pop    edx
100019cc:	59                   	pop    ecx
100019cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100019d1:	50                   	push   eax
100019d2:	68 67 2e 00 10       	push   0x10002e67	100019d3: R_386_32	.text
100019d7:	e8 fc ff ff ff       	call   100019d8 <setupCursor()+0xe5>	100019d8: R_386_PC32	Dbg::kprintf(char const*, ...)
100019dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
100019df:	e8 fc ff ff ff       	call   100019e0 <setupCursor()+0xed>	100019e0: R_386_PC32	Dbg::kprintf(char const*, ...)
100019e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100019e8:	8d 04 83             	lea    eax,[ebx+eax*4]
100019eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100019ef:	83 c4 10             	add    esp,0x10
100019f2:	31 ed                	xor    ebp,ebp
100019f4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
100019f8:	0f 8d f3 00 00 00    	jge    10001af1 <setupCursor()+0x1fe>
100019fe:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10001a01:	50                   	push   eax
10001a02:	6a 04                	push   0x4
10001a04:	68 74 2e 00 10       	push   0x10002e74	10001a05: R_386_32	.text
10001a09:	56                   	push   esi
10001a0a:	e8 fc ff ff ff       	call   10001a0b <setupCursor()+0x118>	10001a0b: R_386_PC32	memcmp
10001a0f:	83 c4 10             	add    esp,0x10
10001a12:	85 c0                	test   eax,eax
10001a14:	0f 84 b8 00 00 00    	je     10001ad2 <setupCursor()+0x1df>
10001a1a:	50                   	push   eax
10001a1b:	6a 04                	push   0x4
10001a1d:	68 79 2e 00 10       	push   0x10002e79	10001a1e: R_386_32	.text
10001a22:	56                   	push   esi
10001a23:	e8 fc ff ff ff       	call   10001a24 <setupCursor()+0x131>	10001a24: R_386_PC32	memcmp
10001a28:	83 c4 10             	add    esp,0x10
10001a2b:	85 c0                	test   eax,eax
10001a2d:	74 7b                	je     10001aaa <setupCursor()+0x1b7>
10001a2f:	50                   	push   eax
10001a30:	6a 04                	push   0x4
10001a32:	68 7e 2e 00 10       	push   0x10002e7e	10001a33: R_386_32	.text
10001a37:	56                   	push   esi
10001a38:	e8 fc ff ff ff       	call   10001a39 <setupCursor()+0x146>	10001a39: R_386_PC32	memcmp
10001a3d:	83 c4 10             	add    esp,0x10
10001a40:	85 c0                	test   eax,eax
10001a42:	74 6d                	je     10001ab1 <setupCursor()+0x1be>
10001a44:	57                   	push   edi
10001a45:	6a 04                	push   0x4
10001a47:	68 83 2e 00 10       	push   0x10002e83	10001a48: R_386_32	.text
10001a4c:	56                   	push   esi
10001a4d:	e8 fc ff ff ff       	call   10001a4e <setupCursor()+0x15b>	10001a4e: R_386_PC32	memcmp
10001a52:	83 c4 10             	add    esp,0x10
10001a55:	85 c0                	test   eax,eax
10001a57:	74 5f                	je     10001ab8 <setupCursor()+0x1c5>
10001a59:	51                   	push   ecx
10001a5a:	6a 04                	push   0x4
10001a5c:	68 88 2e 00 10       	push   0x10002e88	10001a5d: R_386_32	.text
10001a61:	56                   	push   esi
10001a62:	e8 fc ff ff ff       	call   10001a63 <setupCursor()+0x170>	10001a63: R_386_PC32	memcmp
10001a67:	83 c4 10             	add    esp,0x10
10001a6a:	85 c0                	test   eax,eax
10001a6c:	74 51                	je     10001abf <setupCursor()+0x1cc>
10001a6e:	52                   	push   edx
10001a6f:	6a 04                	push   0x4
10001a71:	68 8d 2e 00 10       	push   0x10002e8d	10001a72: R_386_32	.text
10001a76:	56                   	push   esi
10001a77:	e8 fc ff ff ff       	call   10001a78 <setupCursor()+0x185>	10001a78: R_386_PC32	memcmp
10001a7c:	83 c4 10             	add    esp,0x10
10001a7f:	85 c0                	test   eax,eax
10001a81:	74 43                	je     10001ac6 <setupCursor()+0x1d3>
10001a83:	50                   	push   eax
10001a84:	6a 04                	push   0x4
10001a86:	68 92 2e 00 10       	push   0x10002e92	10001a87: R_386_32	.text
10001a8b:	56                   	push   esi
10001a8c:	e8 fc ff ff ff       	call   10001a8d <setupCursor()+0x19a>	10001a8d: R_386_PC32	memcmp
10001a91:	83 c4 10             	add    esp,0x10
10001a94:	85 c0                	test   eax,eax
10001a96:	74 35                	je     10001acd <setupCursor()+0x1da>
10001a98:	83 ec 0c             	sub    esp,0xc
10001a9b:	68 97 2e 00 10       	push   0x10002e97	10001a9c: R_386_32	.text
10001aa0:	e8 fc ff ff ff       	call   10001aa1 <setupCursor()+0x1ae>	10001aa1: R_386_PC32	Dbg::kprintf(char const*, ...)
10001aa5:	83 c4 10             	add    esp,0x10
10001aa8:	eb 47                	jmp    10001af1 <setupCursor()+0x1fe>
10001aaa:	b8 00 02 00 00       	mov    eax,0x200
10001aaf:	eb 21                	jmp    10001ad2 <setupCursor()+0x1df>
10001ab1:	b8 00 03 00 00       	mov    eax,0x300
10001ab6:	eb 1a                	jmp    10001ad2 <setupCursor()+0x1df>
10001ab8:	b8 00 01 00 00       	mov    eax,0x100
10001abd:	eb 13                	jmp    10001ad2 <setupCursor()+0x1df>
10001abf:	b8 00 04 00 00       	mov    eax,0x400
10001ac4:	eb 0c                	jmp    10001ad2 <setupCursor()+0x1df>
10001ac6:	b8 00 05 00 00       	mov    eax,0x500
10001acb:	eb 05                	jmp    10001ad2 <setupCursor()+0x1df>
10001acd:	b8 00 06 00 00       	mov    eax,0x600
10001ad2:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10001ad4: R_386_32	mouse_data
10001ad8:	b9 00 01 00 00       	mov    ecx,0x100
10001add:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10001ae1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001ae3:	45                   	inc    ebp
10001ae4:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10001aec:	e9 03 ff ff ff       	jmp    100019f4 <setupCursor()+0x101>
10001af1:	83 ec 0c             	sub    esp,0xc
10001af4:	53                   	push   ebx
10001af5:	e8 fc ff ff ff       	call   10001af6 <setupCursor()+0x203>	10001af6: R_386_PC32	free
10001afa:	83 c4 10             	add    esp,0x10
10001afd:	83 c4 2c             	add    esp,0x2c
10001b00:	5b                   	pop    ebx
10001b01:	5e                   	pop    esi
10001b02:	5f                   	pop    edi
10001b03:	5d                   	pop    ebp
10001b04:	c3                   	ret    

10001b05 <processMouse(int, int, int)>:
10001b05:	55                   	push   ebp
10001b06:	57                   	push   edi
10001b07:	56                   	push   esi
10001b08:	53                   	push   ebx
10001b09:	83 ec 0c             	sub    esp,0xc
10001b0c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10001b10:	e8 fc ff ff ff       	call   10001b11 <processMouse(int, int, int)+0xc>	10001b11: R_386_PC32	Krnl::userIOReceived()
10001b15:	83 ec 0c             	sub    esp,0xc
10001b18:	6a 08                	push   0x8
10001b1a:	e8 fc ff ff ff       	call   10001b1b <processMouse(int, int, int)+0x16>	10001b1b: R_386_PC32	malloc
10001b1f:	89 c6                	mov    esi,eax
10001b21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001b28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10001b2e:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10001b35:	e8 fc ff ff ff       	call   10001b36 <processMouse(int, int, int)+0x31>	10001b36: R_386_PC32	malloc
10001b3a:	89 c3                	mov    ebx,eax
10001b3c:	8b 0d 04 00 00 00    	mov    ecx,DWORD PTR ds:0x4	10001b3e: R_386_32	rootRgn
10001b42:	a1 08 00 00 00       	mov    eax,ds:0x8	10001b43: R_386_32	rootRgn
10001b47:	8d 69 1f             	lea    ebp,[ecx+0x1f]
10001b4a:	89 2c 24             	mov    DWORD PTR [esp],ebp
10001b4d:	8d 68 1f             	lea    ebp,[eax+0x1f]
10001b50:	55                   	push   ebp
10001b51:	51                   	push   ecx
10001b52:	50                   	push   eax
10001b53:	53                   	push   ebx
10001b54:	e8 fc ff ff ff       	call   10001b55 <processMouse(int, int, int)+0x50>	10001b55: R_386_PC32	CRect::CRect(int, int, int, int)
10001b59:	83 c4 14             	add    esp,0x14
10001b5c:	6a 0c                	push   0xc
10001b5e:	e8 fc ff ff ff       	call   10001b5f <processMouse(int, int, int)+0x5a>	10001b5f: R_386_PC32	malloc
10001b63:	89 18                	mov    DWORD PTR [eax],ebx
10001b65:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
10001b68:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
10001b6b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001b72:	83 c4 10             	add    esp,0x10
10001b75:	85 c9                	test   ecx,ecx
10001b77:	74 05                	je     10001b7e <processMouse(int, int, int)+0x79>
10001b79:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
10001b7c:	eb 02                	jmp    10001b80 <processMouse(int, int, int)+0x7b>
10001b7e:	89 06                	mov    DWORD PTR [esi],eax
10001b80:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
10001b83:	55                   	push   ebp
10001b84:	6a 01                	push   0x1
10001b86:	56                   	push   esi
10001b87:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001b89: R_386_32	rootRgn
10001b8d:	e8 fc ff ff ff       	call   10001b8e <processMouse(int, int, int)+0x89>	10001b8e: R_386_PC32	GDO::update(List<CRect*>*, bool)
10001b92:	8b 06                	mov    eax,DWORD PTR [esi]
10001b94:	83 c4 10             	add    esp,0x10
10001b97:	85 c0                	test   eax,eax
10001b99:	74 26                	je     10001bc1 <processMouse(int, int, int)+0xbc>
10001b9b:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10001b9e:	51                   	push   ecx
10001b9f:	51                   	push   ecx
10001ba0:	6a 0c                	push   0xc
10001ba2:	50                   	push   eax
10001ba3:	e8 fc ff ff ff       	call   10001ba4 <processMouse(int, int, int)+0x9f>	10001ba4: R_386_PC32	operator delete(void*, unsigned long)
10001ba8:	89 2e                	mov    DWORD PTR [esi],ebp
10001baa:	83 c4 10             	add    esp,0x10
10001bad:	85 ed                	test   ebp,ebp
10001baf:	75 09                	jne    10001bba <processMouse(int, int, int)+0xb5>
10001bb1:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10001bb8:	eb 07                	jmp    10001bc1 <processMouse(int, int, int)+0xbc>
10001bba:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
10001bc1:	8b 06                	mov    eax,DWORD PTR [esi]
10001bc3:	85 c0                	test   eax,eax
10001bc5:	74 14                	je     10001bdb <processMouse(int, int, int)+0xd6>
10001bc7:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10001bca:	52                   	push   edx
10001bcb:	52                   	push   edx
10001bcc:	6a 0c                	push   0xc
10001bce:	50                   	push   eax
10001bcf:	e8 fc ff ff ff       	call   10001bd0 <processMouse(int, int, int)+0xcb>	10001bd0: R_386_PC32	operator delete(void*, unsigned long)
10001bd4:	89 e8                	mov    eax,ebp
10001bd6:	83 c4 10             	add    esp,0x10
10001bd9:	eb e8                	jmp    10001bc3 <processMouse(int, int, int)+0xbe>
10001bdb:	50                   	push   eax
10001bdc:	50                   	push   eax
10001bdd:	6a 08                	push   0x8
10001bdf:	56                   	push   esi
10001be0:	e8 fc ff ff ff       	call   10001be1 <processMouse(int, int, int)+0xdc>	10001be1: R_386_PC32	operator delete(void*, unsigned long)
10001be5:	5a                   	pop    edx
10001be6:	59                   	pop    ecx
10001be7:	6a 10                	push   0x10
10001be9:	53                   	push   ebx
10001bea:	e8 fc ff ff ff       	call   10001beb <processMouse(int, int, int)+0xe6>	10001beb: R_386_PC32	operator delete(void*, unsigned long)
10001bef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001bf3:	a3 04 00 00 00       	mov    ds:0x4,eax	10001bf4: R_386_32	rootRgn
10001bf8:	89 3d 08 00 00 00    	mov    DWORD PTR ds:0x8,edi	10001bfa: R_386_32	rootRgn
10001bfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10001bff: R_386_32	rootRgn
10001c03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10001c06:	8b 10                	mov    edx,DWORD PTR [eax]
10001c08:	8b 0a                	mov    ecx,DWORD PTR [edx]
10001c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10001c11:	a1 0c 00 00 00       	mov    eax,ds:0xc	10001c12: R_386_32	rootRgn
10001c16:	05 00 00 00 00       	add    eax,0x0	10001c17: R_386_32	mouse_data
10001c1b:	50                   	push   eax
10001c1c:	57                   	push   edi
10001c1d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
10001c21:	52                   	push   edx
10001c22:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10001c25:	83 c4 2c             	add    esp,0x2c
10001c28:	5b                   	pop    ebx
10001c29:	5e                   	pop    esi
10001c2a:	5f                   	pop    edi
10001c2b:	5d                   	pop    ebp
10001c2c:	c3                   	ret    

10001c2d <handleMouse>:
10001c2d:	53                   	push   ebx
10001c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001c32:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10001c34: R_386_32	krnlMouseX
10001c38:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
10001c3c:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	10001c3e: R_386_32	krnlMouseX
10001c42:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10001c44: R_386_32	krnlMouseY
10001c48:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
10001c4c:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001c4e: R_386_32	krnlMouseY
10001c52:	85 c9                	test   ecx,ecx
10001c54:	7f 0a                	jg     10001c60 <handleMouse+0x33>
10001c56:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10001c58: R_386_32	krnlMouseX
10001c60:	85 d2                	test   edx,edx
10001c62:	7f 0a                	jg     10001c6e <handleMouse+0x41>
10001c64:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10001c66: R_386_32	krnlMouseY
10001c6e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10001c70: R_386_32	rootRgn
10001c74:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
10001c77:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10001c7a:	8d 5a ff             	lea    ebx,[edx-0x1]
10001c7d:	3b 1d 00 00 00 00    	cmp    ebx,DWORD PTR ds:0x0	10001c7f: R_386_32	krnlMouseX
10001c83:	7f 09                	jg     10001c8e <handleMouse+0x61>
10001c85:	83 ea 02             	sub    edx,0x2
10001c88:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001c8a: R_386_32	krnlMouseX
10001c8e:	8b 51 08             	mov    edx,DWORD PTR [ecx+0x8]
10001c91:	8d 4a ff             	lea    ecx,[edx-0x1]
10001c94:	3b 0d 00 00 00 00    	cmp    ecx,DWORD PTR ds:0x0	10001c96: R_386_32	krnlMouseY
10001c9a:	7f 09                	jg     10001ca5 <handleMouse+0x78>
10001c9c:	83 ea 02             	sub    edx,0x2
10001c9f:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001ca1: R_386_32	krnlMouseY
10001ca5:	83 e0 01             	and    eax,0x1
10001ca8:	a3 00 00 00 00       	mov    ds:0x0,eax	10001ca9: R_386_32	krnlButtons
10001cad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001cb1:	a1 00 00 00 00       	mov    eax,ds:0x0	10001cb2: R_386_32	krnlMouseY
10001cb6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001cba:	a1 00 00 00 00       	mov    eax,ds:0x0	10001cbb: R_386_32	krnlMouseX
10001cbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001cc3:	5b                   	pop    ebx
10001cc4:	e9 3c fe ff ff       	jmp    10001b05 <processMouse(int, int, int)>
10001cc9:	90                   	nop

10001cca <elpsDrawFunc(GDO*)>:
10001cca:	83 ec 10             	sub    esp,0x10
10001ccd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001cd1:	ff 70 50             	push   DWORD PTR [eax+0x50]
10001cd4:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10001cd7:	ff 70 48             	push   DWORD PTR [eax+0x48]
10001cda:	ff 70 44             	push   DWORD PTR [eax+0x44]
10001cdd:	ff 70 40             	push   DWORD PTR [eax+0x40]
10001ce0:	6a 01                	push   0x1
10001ce2:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001ce5:	e8 fc ff ff ff       	call   10001ce6 <elpsDrawFunc(GDO*)+0x1c>	10001ce6: R_386_PC32	Context::ellipse(bool, int, int, int, int, unsigned int)
10001cea:	83 c4 2c             	add    esp,0x2c
10001ced:	c3                   	ret    

10001cee <elpsPtnDrawFunc(GDO*)>:
10001cee:	83 ec 10             	sub    esp,0x10
10001cf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001cf5:	ff 70 50             	push   DWORD PTR [eax+0x50]
10001cf8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10001cfb:	ff 70 48             	push   DWORD PTR [eax+0x48]
10001cfe:	ff 70 44             	push   DWORD PTR [eax+0x44]
10001d01:	ff 70 40             	push   DWORD PTR [eax+0x40]
10001d04:	6a 01                	push   0x1
10001d06:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001d09:	e8 fc ff ff ff       	call   10001d0a <elpsPtnDrawFunc(GDO*)+0x1c>	10001d0a: R_386_PC32	Context::ellipse(bool, int, int, int, int, Brush*)
10001d0e:	83 c4 2c             	add    esp,0x2c
10001d11:	c3                   	ret    

10001d12 <Ellipse::Ellipse(int, int, int, int, Brush*, Context*)>:
10001d12:	53                   	push   ebx
10001d13:	83 ec 0c             	sub    esp,0xc
10001d16:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001d1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001d1e:	6a 03                	push   0x3
10001d20:	53                   	push   ebx
10001d21:	e8 fc ff ff ff       	call   10001d22 <Ellipse::Ellipse(int, int, int, int, Brush*, Context*)+0x10>	10001d22: R_386_PC32	GDO::GDO(GDOType, Context*)
10001d26:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001d2a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10001d2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001d31:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10001d34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001d38:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10001d3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001d3f:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10001d42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001d46:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10001d49:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10001d4c: R_386_32	elpsPtnDrawFunc(GDO*)
10001d50:	83 c4 18             	add    esp,0x18
10001d53:	5b                   	pop    ebx
10001d54:	c3                   	ret    
10001d55:	90                   	nop

10001d56 <Ellipse::Ellipse(int, int, int, int, unsigned int, Context*)>:
10001d56:	53                   	push   ebx
10001d57:	83 ec 0c             	sub    esp,0xc
10001d5a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001d5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001d62:	6a 01                	push   0x1
10001d64:	53                   	push   ebx
10001d65:	e8 fc ff ff ff       	call   10001d66 <Ellipse::Ellipse(int, int, int, int, unsigned int, Context*)+0x10>	10001d66: R_386_PC32	GDO::GDO(GDOType, Context*)
10001d6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001d6e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10001d71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001d75:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10001d78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001d7c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10001d7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001d83:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10001d86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001d8a:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10001d8d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10001d90: R_386_32	elpsDrawFunc(GDO*)
10001d94:	83 c4 18             	add    esp,0x18
10001d97:	5b                   	pop    ebx
10001d98:	c3                   	ret    
10001d99:	90                   	nop

10001d9a <GDO::resetNext()>:
10001d9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001d9e:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
10001da5:	c3                   	ret    

10001da6 <GDO::GDO(GDOType, Context*)>:
10001da6:	53                   	push   ebx
10001da7:	83 ec 08             	sub    esp,0x8
10001daa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001dae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001db2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001db6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
10001db9:	88 03                	mov    BYTE PTR [ebx],al
10001dbb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
10001dc2:	84 c0                	test   al,al
10001dc4:	75 45                	jne    10001e0b <GDO::GDO(GDOType, Context*)+0x65>
10001dc6:	83 ec 0c             	sub    esp,0xc
10001dc9:	68 ab 2e 00 10       	push   0x10002eab	10001dca: R_386_32	.text
10001dce:	e8 fc ff ff ff       	call   10001dcf <GDO::GDO(GDOType, Context*)+0x29>	10001dcf: R_386_PC32	Dbg::kprintf(char const*, ...)
10001dd3:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001dda:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10001de1:	e8 fc ff ff ff       	call   10001de2 <GDO::GDO(GDOType, Context*)+0x3c>	10001de2: R_386_PC32	malloc
10001de6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10001de9:	59                   	pop    ecx
10001dea:	5a                   	pop    edx
10001deb:	50                   	push   eax
10001dec:	68 c6 2e 00 10       	push   0x10002ec6	10001ded: R_386_32	.text
10001df1:	e8 fc ff ff ff       	call   10001df2 <GDO::GDO(GDOType, Context*)+0x4c>	10001df2: R_386_PC32	Dbg::kprintf(char const*, ...)
10001df6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10001df9:	83 c4 10             	add    esp,0x10
10001dfc:	31 c0                	xor    eax,eax
10001dfe:	c7 04 82 00 00 00 00 	mov    DWORD PTR [edx+eax*4],0x0
10001e05:	40                   	inc    eax
10001e06:	83 f8 10             	cmp    eax,0x10
10001e09:	75 f3                	jne    10001dfe <GDO::GDO(GDOType, Context*)+0x58>
10001e0b:	83 c4 08             	add    esp,0x8
10001e0e:	5b                   	pop    ebx
10001e0f:	c3                   	ret    

10001e10 <GDO::~GDO()>:
10001e10:	c3                   	ret    
10001e11:	90                   	nop

10001e12 <GDO::getChild(int)>:
10001e12:	56                   	push   esi
10001e13:	53                   	push   ebx
10001e14:	51                   	push   ecx
10001e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001e19:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001e1d:	81 fb ff 00 00 00    	cmp    ebx,0xff
10001e23:	7e 04                	jle    10001e29 <GDO::getChild(int)+0x17>
10001e25:	31 c0                	xor    eax,eax
10001e27:	eb 2b                	jmp    10001e54 <GDO::getChild(int)+0x42>
10001e29:	83 7e 0c 00          	cmp    DWORD PTR [esi+0xc],0x0
10001e2d:	75 10                	jne    10001e3f <GDO::getChild(int)+0x2d>
10001e2f:	83 ec 0c             	sub    esp,0xc
10001e32:	68 d7 2e 00 10       	push   0x10002ed7	10001e33: R_386_32	.text
10001e37:	e8 fc ff ff ff       	call   10001e38 <GDO::getChild(int)+0x26>	10001e38: R_386_PC32	KePanic(char const*)
10001e3c:	83 c4 10             	add    esp,0x10
10001e3f:	89 da                	mov    edx,ebx
10001e41:	c1 ea 04             	shr    edx,0x4
10001e44:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
10001e47:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10001e4a:	85 c0                	test   eax,eax
10001e4c:	74 d7                	je     10001e25 <GDO::getChild(int)+0x13>
10001e4e:	83 e3 0f             	and    ebx,0xf
10001e51:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10001e54:	5a                   	pop    edx
10001e55:	5b                   	pop    ebx
10001e56:	5e                   	pop    esi
10001e57:	c3                   	ret    

10001e58 <GDO::hasNext()>:
10001e58:	56                   	push   esi
10001e59:	53                   	push   ebx
10001e5a:	53                   	push   ebx
10001e5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001e5f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
10001e62:	3d ff 00 00 00       	cmp    eax,0xff
10001e67:	7f 1b                	jg     10001e84 <GDO::hasNext()+0x2c>
10001e69:	8d 70 01             	lea    esi,[eax+0x1]
10001e6c:	51                   	push   ecx
10001e6d:	51                   	push   ecx
10001e6e:	50                   	push   eax
10001e6f:	53                   	push   ebx
10001e70:	e8 fc ff ff ff       	call   10001e71 <GDO::hasNext()+0x19>	10001e71: R_386_PC32	GDO::getChild(int)
10001e75:	83 c4 10             	add    esp,0x10
10001e78:	85 c0                	test   eax,eax
10001e7a:	75 04                	jne    10001e80 <GDO::hasNext()+0x28>
10001e7c:	89 f0                	mov    eax,esi
10001e7e:	eb e2                	jmp    10001e62 <GDO::hasNext()+0xa>
10001e80:	b0 01                	mov    al,0x1
10001e82:	eb 02                	jmp    10001e86 <GDO::hasNext()+0x2e>
10001e84:	31 c0                	xor    eax,eax
10001e86:	5a                   	pop    edx
10001e87:	5b                   	pop    ebx
10001e88:	5e                   	pop    esi
10001e89:	c3                   	ret    

10001e8a <GDO::getNext()>:
10001e8a:	53                   	push   ebx
10001e8b:	83 ec 08             	sub    esp,0x8
10001e8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001e92:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
10001e95:	3d ff 00 00 00       	cmp    eax,0xff
10001e9a:	7f 18                	jg     10001eb4 <GDO::getNext()+0x2a>
10001e9c:	8d 50 01             	lea    edx,[eax+0x1]
10001e9f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
10001ea2:	52                   	push   edx
10001ea3:	52                   	push   edx
10001ea4:	50                   	push   eax
10001ea5:	53                   	push   ebx
10001ea6:	e8 fc ff ff ff       	call   10001ea7 <GDO::getNext()+0x1d>	10001ea7: R_386_PC32	GDO::getChild(int)
10001eab:	83 c4 10             	add    esp,0x10
10001eae:	85 c0                	test   eax,eax
10001eb0:	74 e0                	je     10001e92 <GDO::getNext()+0x8>
10001eb2:	eb 02                	jmp    10001eb6 <GDO::getNext()+0x2c>
10001eb4:	31 c0                	xor    eax,eax
10001eb6:	83 c4 08             	add    esp,0x8
10001eb9:	5b                   	pop    ebx
10001eba:	c3                   	ret    
10001ebb:	90                   	nop

10001ebc <GDO::indexOf(GDO*)>:
10001ebc:	56                   	push   esi
10001ebd:	53                   	push   ebx
10001ebe:	53                   	push   ebx
10001ebf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001ec3:	31 db                	xor    ebx,ebx
10001ec5:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
10001ec8:	8d 50 01             	lea    edx,[eax+0x1]
10001ecb:	89 56 3c             	mov    DWORD PTR [esi+0x3c],edx
10001ece:	51                   	push   ecx
10001ecf:	51                   	push   ecx
10001ed0:	50                   	push   eax
10001ed1:	56                   	push   esi
10001ed2:	e8 fc ff ff ff       	call   10001ed3 <GDO::indexOf(GDO*)+0x17>	10001ed3: R_386_PC32	GDO::getChild(int)
10001ed7:	83 c4 10             	add    esp,0x10
10001eda:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10001ede:	74 0c                	je     10001eec <GDO::indexOf(GDO*)+0x30>
10001ee0:	43                   	inc    ebx
10001ee1:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001ee7:	75 dc                	jne    10001ec5 <GDO::indexOf(GDO*)+0x9>
10001ee9:	83 cb ff             	or     ebx,0xffffffff
10001eec:	89 d8                	mov    eax,ebx
10001eee:	5a                   	pop    edx
10001eef:	5b                   	pop    ebx
10001ef0:	5e                   	pop    esi
10001ef1:	c3                   	ret    

10001ef2 <GDO::screenX()>:
10001ef2:	56                   	push   esi
10001ef3:	53                   	push   ebx
10001ef4:	51                   	push   ecx
10001ef5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001ef9:	31 f6                	xor    esi,esi
10001efb:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10001efe:	74 10                	je     10001f10 <GDO::screenX()+0x1e>
10001f00:	83 ec 0c             	sub    esp,0xc
10001f03:	68 f0 2e 00 10       	push   0x10002ef0	10001f04: R_386_32	.text
10001f08:	e8 fc ff ff ff       	call   10001f09 <GDO::screenX()+0x17>	10001f09: R_386_PC32	Dbg::kprintf(char const*, ...)
10001f0d:	83 c4 10             	add    esp,0x10
10001f10:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10001f13:	85 c0                	test   eax,eax
10001f15:	74 1f                	je     10001f36 <GDO::screenX()+0x44>
10001f17:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001f1a:	74 10                	je     10001f2c <GDO::screenX()+0x3a>
10001f1c:	83 ec 0c             	sub    esp,0xc
10001f1f:	68 e4 2e 00 10       	push   0x10002ee4	10001f20: R_386_32	.text
10001f24:	e8 fc ff ff ff       	call   10001f25 <GDO::screenX()+0x33>	10001f25: R_386_PC32	KePanic(char const*)
10001f29:	83 c4 10             	add    esp,0x10
10001f2c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
10001f2f:	8b 5b 08             	mov    ebx,DWORD PTR [ebx+0x8]
10001f32:	01 c6                	add    esi,eax
10001f34:	eb c5                	jmp    10001efb <GDO::screenX()+0x9>
10001f36:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
10001f39:	01 f0                	add    eax,esi
10001f3b:	5a                   	pop    edx
10001f3c:	5b                   	pop    ebx
10001f3d:	5e                   	pop    esi
10001f3e:	c3                   	ret    
10001f3f:	90                   	nop

10001f40 <GDO::screenY()>:
10001f40:	56                   	push   esi
10001f41:	53                   	push   ebx
10001f42:	51                   	push   ecx
10001f43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001f47:	31 f6                	xor    esi,esi
10001f49:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10001f4c:	74 10                	je     10001f5e <GDO::screenY()+0x1e>
10001f4e:	83 ec 0c             	sub    esp,0xc
10001f51:	68 17 2f 00 10       	push   0x10002f17	10001f52: R_386_32	.text
10001f56:	e8 fc ff ff ff       	call   10001f57 <GDO::screenY()+0x17>	10001f57: R_386_PC32	Dbg::kprintf(char const*, ...)
10001f5b:	83 c4 10             	add    esp,0x10
10001f5e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10001f61:	85 c0                	test   eax,eax
10001f63:	74 1f                	je     10001f84 <GDO::screenY()+0x44>
10001f65:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001f68:	74 10                	je     10001f7a <GDO::screenY()+0x3a>
10001f6a:	83 ec 0c             	sub    esp,0xc
10001f6d:	68 0b 2f 00 10       	push   0x10002f0b	10001f6e: R_386_32	.text
10001f72:	e8 fc ff ff ff       	call   10001f73 <GDO::screenY()+0x33>	10001f73: R_386_PC32	KePanic(char const*)
10001f77:	83 c4 10             	add    esp,0x10
10001f7a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
10001f7d:	8b 5b 08             	mov    ebx,DWORD PTR [ebx+0x8]
10001f80:	01 c6                	add    esi,eax
10001f82:	eb c5                	jmp    10001f49 <GDO::screenY()+0x9>
10001f84:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
10001f87:	01 f0                	add    eax,esi
10001f89:	5a                   	pop    edx
10001f8a:	5b                   	pop    ebx
10001f8b:	5e                   	pop    esi
10001f8c:	c3                   	ret    
10001f8d:	90                   	nop

10001f8e <GDO::update(List<CRect*>*, bool)>:
10001f8e:	55                   	push   ebp
10001f8f:	57                   	push   edi
10001f90:	56                   	push   esi
10001f91:	53                   	push   ebx
10001f92:	83 ec 2c             	sub    esp,0x2c
10001f95:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10001f99:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001f9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001fa1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10001fa5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001fa9:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10001fac:	74 14                	je     10001fc2 <GDO::update(List<CRect*>*, bool)+0x34>
10001fae:	c7 44 24 40 32 2f 00 10 	mov    DWORD PTR [esp+0x40],0x10002f32	10001fb2: R_386_32	.text
10001fb6:	83 c4 2c             	add    esp,0x2c
10001fb9:	5b                   	pop    ebx
10001fba:	5e                   	pop    esi
10001fbb:	5f                   	pop    edi
10001fbc:	5d                   	pop    ebp
10001fbd:	e9 fc ff ff ff       	jmp    10001fbe <GDO::update(List<CRect*>*, bool)+0x30>	10001fbe: R_386_PC32	KePanic(char const*)
10001fc2:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10001fc6:	0f 84 02 02 00 00    	je     100021ce <GDO::update(List<CRect*>*, bool)+0x240>
10001fcc:	56                   	push   esi
10001fcd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001fd1:	6a 00                	push   0x0
10001fd3:	53                   	push   ebx
10001fd4:	e8 fc ff ff ff       	call   10001fd5 <GDO::update(List<CRect*>*, bool)+0x47>	10001fd5: R_386_PC32	Region::applyBoundClipping(int, List<CRect*>*)
10001fd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001fdc:	e8 fc ff ff ff       	call   10001fdd <GDO::update(List<CRect*>*, bool)+0x4f>	10001fdd: R_386_PC32	GDO::screenX()
10001fe1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001fe5:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001fe8:	e8 fc ff ff ff       	call   10001fe9 <GDO::update(List<CRect*>*, bool)+0x5b>	10001fe9: R_386_PC32	GDO::screenY()
10001fed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10001ff1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10001ff4:	c6 40 14 00          	mov    BYTE PTR [eax+0x14],0x0
10001ff8:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001fff:	83 c4 10             	add    esp,0x10
10002002:	83 ec 0c             	sub    esp,0xc
10002005:	53                   	push   ebx
10002006:	e8 fc ff ff ff       	call   10002007 <GDO::update(List<CRect*>*, bool)+0x79>	10002007: R_386_PC32	GDO::hasNext()
1000200b:	83 c4 10             	add    esp,0x10
1000200e:	84 c0                	test   al,al
10002010:	74 6c                	je     1000207e <GDO::update(List<CRect*>*, bool)+0xf0>
10002012:	83 ec 0c             	sub    esp,0xc
10002015:	53                   	push   ebx
10002016:	e8 fc ff ff ff       	call   10002017 <GDO::update(List<CRect*>*, bool)+0x89>	10002017: R_386_PC32	GDO::getNext()
1000201b:	89 c6                	mov    esi,eax
1000201d:	83 c4 10             	add    esp,0x10
10002020:	80 38 00             	cmp    BYTE PTR [eax],0x0
10002023:	75 dd                	jne    10002002 <GDO::update(List<CRect*>*, bool)+0x74>
10002025:	83 ec 0c             	sub    esp,0xc
10002028:	50                   	push   eax
10002029:	e8 fc ff ff ff       	call   1000202a <GDO::update(List<CRect*>*, bool)+0x9c>	1000202a: R_386_PC32	GDO::screenX()
1000202e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002032:	89 34 24             	mov    DWORD PTR [esp],esi
10002035:	e8 fc ff ff ff       	call   10002036 <GDO::update(List<CRect*>*, bool)+0xa8>	10002036: R_386_PC32	GDO::screenY()
1000203a:	89 c5                	mov    ebp,eax
1000203c:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10002043:	e8 fc ff ff ff       	call   10002044 <GDO::update(List<CRect*>*, bool)+0xb6>	10002044: R_386_PC32	malloc
10002048:	89 c7                	mov    edi,eax
1000204a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
1000204e:	8b 46 34             	mov    eax,DWORD PTR [esi+0x34]
10002051:	01 d0                	add    eax,edx
10002053:	48                   	dec    eax
10002054:	89 04 24             	mov    DWORD PTR [esp],eax
10002057:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
1000205a:	01 e8                	add    eax,ebp
1000205c:	48                   	dec    eax
1000205d:	50                   	push   eax
1000205e:	52                   	push   edx
1000205f:	55                   	push   ebp
10002060:	57                   	push   edi
10002061:	e8 fc ff ff ff       	call   10002062 <GDO::update(List<CRect*>*, bool)+0xd4>	10002062: R_386_PC32	CRect::CRect(int, int, int, int)
10002066:	83 c4 18             	add    esp,0x18
10002069:	57                   	push   edi
1000206a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000206d:	e8 fc ff ff ff       	call   1000206e <GDO::update(List<CRect*>*, bool)+0xe0>	1000206e: R_386_PC32	Context::subClipRect(CRect*)
10002072:	5a                   	pop    edx
10002073:	59                   	pop    ecx
10002074:	6a 10                	push   0x10
10002076:	57                   	push   edi
10002077:	e8 fc ff ff ff       	call   10002078 <GDO::update(List<CRect*>*, bool)+0xea>	10002078: R_386_PC32	operator delete(void*, unsigned long)
1000207c:	eb 81                	jmp    10001fff <GDO::update(List<CRect*>*, bool)+0x71>
1000207e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10002081:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10002085:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
10002088:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
1000208c:	89 78 10             	mov    DWORD PTR [eax+0x10],edi
1000208f:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10002096:	83 ec 0c             	sub    esp,0xc
10002099:	53                   	push   ebx
1000209a:	e8 fc ff ff ff       	call   1000209b <GDO::update(List<CRect*>*, bool)+0x10d>	1000209b: R_386_PC32	GDO::hasNext()
1000209f:	83 c4 10             	add    esp,0x10
100020a2:	84 c0                	test   al,al
100020a4:	74 23                	je     100020c9 <GDO::update(List<CRect*>*, bool)+0x13b>
100020a6:	83 ec 0c             	sub    esp,0xc
100020a9:	53                   	push   ebx
100020aa:	e8 fc ff ff ff       	call   100020ab <GDO::update(List<CRect*>*, bool)+0x11d>	100020ab: R_386_PC32	GDO::getNext()
100020af:	83 c4 10             	add    esp,0x10
100020b2:	80 38 00             	cmp    BYTE PTR [eax],0x0
100020b5:	74 df                	je     10002096 <GDO::update(List<CRect*>*, bool)+0x108>
100020b7:	8b 50 54             	mov    edx,DWORD PTR [eax+0x54]
100020ba:	85 d2                	test   edx,edx
100020bc:	74 d8                	je     10002096 <GDO::update(List<CRect*>*, bool)+0x108>
100020be:	83 ec 0c             	sub    esp,0xc
100020c1:	50                   	push   eax
100020c2:	ff d2                	call   edx
100020c4:	83 c4 10             	add    esp,0x10
100020c7:	eb cd                	jmp    10002096 <GDO::update(List<CRect*>*, bool)+0x108>
100020c9:	83 ec 0c             	sub    esp,0xc
100020cc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100020cf:	e8 fc ff ff ff       	call   100020d0 <GDO::update(List<CRect*>*, bool)+0x142>	100020d0: R_386_PC32	Context::clearClipRects()
100020d4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100020d7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
100020de:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
100020e5:	83 c4 10             	add    esp,0x10
100020e8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
100020ed:	0f 84 db 00 00 00    	je     100021ce <GDO::update(List<CRect*>*, bool)+0x240>
100020f3:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
100020fa:	83 ec 0c             	sub    esp,0xc
100020fd:	53                   	push   ebx
100020fe:	e8 fc ff ff ff       	call   100020ff <GDO::update(List<CRect*>*, bool)+0x171>	100020ff: R_386_PC32	GDO::hasNext()
10002103:	83 c4 10             	add    esp,0x10
10002106:	84 c0                	test   al,al
10002108:	0f 84 c0 00 00 00    	je     100021ce <GDO::update(List<CRect*>*, bool)+0x240>
1000210e:	83 ec 0c             	sub    esp,0xc
10002111:	53                   	push   ebx
10002112:	e8 fc ff ff ff       	call   10002113 <GDO::update(List<CRect*>*, bool)+0x185>	10002113: R_386_PC32	GDO::getNext()
10002117:	89 c7                	mov    edi,eax
10002119:	83 c4 10             	add    esp,0x10
1000211c:	80 38 00             	cmp    BYTE PTR [eax],0x0
1000211f:	75 d9                	jne    100020fa <GDO::update(List<CRect*>*, bool)+0x16c>
10002121:	31 f6                	xor    esi,esi
10002123:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10002128:	75 3b                	jne    10002165 <GDO::update(List<CRect*>*, bool)+0x1d7>
1000212a:	50                   	push   eax
1000212b:	6a 01                	push   0x1
1000212d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10002131:	57                   	push   edi
10002132:	e8 fc ff ff ff       	call   10002133 <GDO::update(List<CRect*>*, bool)+0x1a5>	10002133: R_386_PC32	GDO::update(List<CRect*>*, bool)
10002137:	83 c4 10             	add    esp,0x10
1000213a:	eb be                	jmp    100020fa <GDO::update(List<CRect*>*, bool)+0x16c>
1000213c:	8b 28                	mov    ebp,DWORD PTR [eax]
1000213e:	83 ec 0c             	sub    esp,0xc
10002141:	57                   	push   edi
10002142:	e8 fc ff ff ff       	call   10002143 <GDO::update(List<CRect*>*, bool)+0x1b5>	10002143: R_386_PC32	GDO::screenX()
10002147:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000214b:	89 3c 24             	mov    DWORD PTR [esp],edi
1000214e:	e8 fc ff ff ff       	call   1000214f <GDO::update(List<CRect*>*, bool)+0x1c1>	1000214f: R_386_PC32	GDO::screenY()
10002153:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10002157:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
1000215a:	01 d1                	add    ecx,edx
1000215c:	83 c4 10             	add    esp,0x10
1000215f:	3b 4d 00             	cmp    ecx,DWORD PTR [ebp+0x0]
10002162:	7f 37                	jg     1000219b <GDO::update(List<CRect*>*, bool)+0x20d>
10002164:	46                   	inc    esi
10002165:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002169:	8b 00                	mov    eax,DWORD PTR [eax]
1000216b:	89 c1                	mov    ecx,eax
1000216d:	31 d2                	xor    edx,edx
1000216f:	85 c9                	test   ecx,ecx
10002171:	74 06                	je     10002179 <GDO::update(List<CRect*>*, bool)+0x1eb>
10002173:	42                   	inc    edx
10002174:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10002177:	eb f6                	jmp    1000216f <GDO::update(List<CRect*>*, bool)+0x1e1>
10002179:	39 d6                	cmp    esi,edx
1000217b:	7d 32                	jge    100021af <GDO::update(List<CRect*>*, bool)+0x221>
1000217d:	89 c1                	mov    ecx,eax
1000217f:	31 d2                	xor    edx,edx
10002181:	85 c9                	test   ecx,ecx
10002183:	74 06                	je     1000218b <GDO::update(List<CRect*>*, bool)+0x1fd>
10002185:	42                   	inc    edx
10002186:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10002189:	eb f6                	jmp    10002181 <GDO::update(List<CRect*>*, bool)+0x1f3>
1000218b:	39 d6                	cmp    esi,edx
1000218d:	7f ad                	jg     1000213c <GDO::update(List<CRect*>*, bool)+0x1ae>
1000218f:	89 f2                	mov    edx,esi
10002191:	85 d2                	test   edx,edx
10002193:	74 a7                	je     1000213c <GDO::update(List<CRect*>*, bool)+0x1ae>
10002195:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10002198:	4a                   	dec    edx
10002199:	eb f6                	jmp    10002191 <GDO::update(List<CRect*>*, bool)+0x203>
1000219b:	39 55 04             	cmp    DWORD PTR [ebp+0x4],edx
1000219e:	7c c4                	jl     10002164 <GDO::update(List<CRect*>*, bool)+0x1d6>
100021a0:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
100021a3:	01 c2                	add    edx,eax
100021a5:	3b 55 08             	cmp    edx,DWORD PTR [ebp+0x8]
100021a8:	7e ba                	jle    10002164 <GDO::update(List<CRect*>*, bool)+0x1d6>
100021aa:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100021ad:	7c b5                	jl     10002164 <GDO::update(List<CRect*>*, bool)+0x1d6>
100021af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100021b3:	8b 10                	mov    edx,DWORD PTR [eax]
100021b5:	31 c0                	xor    eax,eax
100021b7:	85 d2                	test   edx,edx
100021b9:	74 06                	je     100021c1 <GDO::update(List<CRect*>*, bool)+0x233>
100021bb:	40                   	inc    eax
100021bc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
100021bf:	eb f6                	jmp    100021b7 <GDO::update(List<CRect*>*, bool)+0x229>
100021c1:	39 c6                	cmp    esi,eax
100021c3:	0f 85 61 ff ff ff    	jne    1000212a <GDO::update(List<CRect*>*, bool)+0x19c>
100021c9:	e9 2c ff ff ff       	jmp    100020fa <GDO::update(List<CRect*>*, bool)+0x16c>
100021ce:	83 c4 2c             	add    esp,0x2c
100021d1:	5b                   	pop    ebx
100021d2:	5e                   	pop    esi
100021d3:	5f                   	pop    edi
100021d4:	5d                   	pop    ebp
100021d5:	c3                   	ret    

100021d6 <GDO::addChild(GDO*)>:
100021d6:	55                   	push   ebp
100021d7:	57                   	push   edi
100021d8:	56                   	push   esi
100021d9:	53                   	push   ebx
100021da:	83 ec 1c             	sub    esp,0x1c
100021dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
100021e1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
100021e5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
100021e8:	74 17                	je     10002201 <GDO::addChild(GDO*)+0x2b>
100021ea:	83 ec 0c             	sub    esp,0xc
100021ed:	68 4e 2f 00 10       	push   0x10002f4e	100021ee: R_386_32	.text
100021f2:	e8 fc ff ff ff       	call   100021f3 <GDO::addChild(GDO*)+0x1d>	100021f3: R_386_PC32	KePanic(char const*)
100021f7:	83 c4 10             	add    esp,0x10
100021fa:	31 db                	xor    ebx,ebx
100021fc:	e9 9f 00 00 00       	jmp    100022a0 <GDO::addChild(GDO*)+0xca>
10002201:	89 75 08             	mov    DWORD PTR [ebp+0x8],esi
10002204:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
10002207:	31 c9                	xor    ecx,ecx
10002209:	83 cb ff             	or     ebx,0xffffffff
1000220c:	8b 04 8a             	mov    eax,DWORD PTR [edx+ecx*4]
1000220f:	85 c0                	test   eax,eax
10002211:	74 1c                	je     1000222f <GDO::addChild(GDO*)+0x59>
10002213:	31 ff                	xor    edi,edi
10002215:	83 38 00             	cmp    DWORD PTR [eax],0x0
10002218:	75 0a                	jne    10002224 <GDO::addChild(GDO*)+0x4e>
1000221a:	89 28                	mov    DWORD PTR [eax],ebp
1000221c:	c1 e1 04             	shl    ecx,0x4
1000221f:	8d 1c 39             	lea    ebx,[ecx+edi*1]
10002222:	eb 7c                	jmp    100022a0 <GDO::addChild(GDO*)+0xca>
10002224:	47                   	inc    edi
10002225:	83 c0 04             	add    eax,0x4
10002228:	83 ff 10             	cmp    edi,0x10
1000222b:	75 e8                	jne    10002215 <GDO::addChild(GDO*)+0x3f>
1000222d:	eb 07                	jmp    10002236 <GDO::addChild(GDO*)+0x60>
1000222f:	83 fb ff             	cmp    ebx,0xffffffff
10002232:	75 02                	jne    10002236 <GDO::addChild(GDO*)+0x60>
10002234:	89 cb                	mov    ebx,ecx
10002236:	41                   	inc    ecx
10002237:	83 f9 10             	cmp    ecx,0x10
1000223a:	75 d0                	jne    1000220c <GDO::addChild(GDO*)+0x36>
1000223c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10002240:	83 fb ff             	cmp    ebx,0xffffffff
10002243:	74 4b                	je     10002290 <GDO::addChild(GDO*)+0xba>
10002245:	50                   	push   eax
10002246:	50                   	push   eax
10002247:	53                   	push   ebx
10002248:	68 6a 2f 00 10       	push   0x10002f6a	10002249: R_386_32	.text
1000224d:	e8 fc ff ff ff       	call   1000224e <GDO::addChild(GDO*)+0x78>	1000224e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002252:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
10002255:	8d 3c 98             	lea    edi,[eax+ebx*4]
10002258:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
1000225f:	e8 fc ff ff ff       	call   10002260 <GDO::addChild(GDO*)+0x8a>	10002260: R_386_PC32	malloc
10002264:	89 07                	mov    DWORD PTR [edi],eax
10002266:	5a                   	pop    edx
10002267:	59                   	pop    ecx
10002268:	50                   	push   eax
10002269:	68 84 2f 00 10       	push   0x10002f84	1000226a: R_386_32	.text
1000226e:	e8 fc ff ff ff       	call   1000226f <GDO::addChild(GDO*)+0x99>	1000226f: R_386_PC32	Dbg::kprintf(char const*, ...)
10002273:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
10002276:	8b 14 98             	mov    edx,DWORD PTR [eax+ebx*4]
10002279:	31 c0                	xor    eax,eax
1000227b:	89 d7                	mov    edi,edx
1000227d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10002281:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10002283:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
10002286:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10002289:	89 28                	mov    DWORD PTR [eax],ebp
1000228b:	c1 e3 04             	shl    ebx,0x4
1000228e:	eb 0d                	jmp    1000229d <GDO::addChild(GDO*)+0xc7>
10002290:	83 ec 0c             	sub    esp,0xc
10002293:	68 9d 2f 00 10       	push   0x10002f9d	10002294: R_386_32	.text
10002298:	e8 fc ff ff ff       	call   10002299 <GDO::addChild(GDO*)+0xc3>	10002299: R_386_PC32	KePanic(char const*)
1000229d:	83 c4 10             	add    esp,0x10
100022a0:	89 d8                	mov    eax,ebx
100022a2:	83 c4 1c             	add    esp,0x1c
100022a5:	5b                   	pop    ebx
100022a6:	5e                   	pop    esi
100022a7:	5f                   	pop    edi
100022a8:	5d                   	pop    ebp
100022a9:	c3                   	ret    

100022aa <GDO::removeChild(int)>:
100022aa:	53                   	push   ebx
100022ab:	83 ec 08             	sub    esp,0x8
100022ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100022b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100022b6:	80 39 00             	cmp    BYTE PTR [ecx],0x0
100022b9:	74 14                	je     100022cf <GDO::removeChild(int)+0x25>
100022bb:	83 ec 0c             	sub    esp,0xc
100022be:	68 bf 2f 00 10       	push   0x10002fbf	100022bf: R_386_32	.text
100022c3:	e8 fc ff ff ff       	call   100022c4 <GDO::removeChild(int)+0x1a>	100022c4: R_386_PC32	KePanic(char const*)
100022c8:	83 c4 10             	add    esp,0x10
100022cb:	31 c0                	xor    eax,eax
100022cd:	eb 2d                	jmp    100022fc <GDO::removeChild(int)+0x52>
100022cf:	31 c0                	xor    eax,eax
100022d1:	81 fa ff 00 00 00    	cmp    edx,0xff
100022d7:	7f 23                	jg     100022fc <GDO::removeChild(int)+0x52>
100022d9:	89 d3                	mov    ebx,edx
100022db:	c1 eb 04             	shr    ebx,0x4
100022de:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
100022e1:	8b 0c 98             	mov    ecx,DWORD PTR [eax+ebx*4]
100022e4:	31 c0                	xor    eax,eax
100022e6:	85 c9                	test   ecx,ecx
100022e8:	74 12                	je     100022fc <GDO::removeChild(int)+0x52>
100022ea:	83 e2 0f             	and    edx,0xf
100022ed:	8d 14 91             	lea    edx,[ecx+edx*4]
100022f0:	83 3a 00             	cmp    DWORD PTR [edx],0x0
100022f3:	0f 95 c0             	setne  al
100022f6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
100022fc:	83 c4 08             	add    esp,0x8
100022ff:	5b                   	pop    ebx
10002300:	c3                   	ret    
10002301:	90                   	nop

10002302 <GDO::removeChild(GDO*)>:
10002302:	53                   	push   ebx
10002303:	83 ec 10             	sub    esp,0x10
10002306:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000230a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000230e:	53                   	push   ebx
1000230f:	e8 fc ff ff ff       	call   10002310 <GDO::removeChild(GDO*)+0xe>	10002310: R_386_PC32	GDO::indexOf(GDO*)
10002314:	83 c4 10             	add    esp,0x10
10002317:	83 f8 ff             	cmp    eax,0xffffffff
1000231a:	74 0e                	je     1000232a <GDO::removeChild(GDO*)+0x28>
1000231c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002320:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10002324:	83 c4 08             	add    esp,0x8
10002327:	5b                   	pop    ebx
10002328:	eb 80                	jmp    100022aa <GDO::removeChild(int)>
1000232a:	31 c0                	xor    eax,eax
1000232c:	83 c4 08             	add    esp,0x8
1000232f:	5b                   	pop    ebx
10002330:	c3                   	ret    
10002331:	90                   	nop

10002332 <legacyDraw(GDO*)>:
10002332:	55                   	push   ebp
10002333:	57                   	push   edi
10002334:	56                   	push   esi
10002335:	53                   	push   ebx
10002336:	83 ec 1c             	sub    esp,0x1c
10002339:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
1000233d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
10002340:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
10002343:	31 f6                	xor    esi,esi
10002345:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10002348:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
1000234c:	84 c0                	test   al,al
1000234e:	74 45                	je     10002395 <legacyDraw(GDO*)+0x63>
10002350:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
10002353:	69 ca ff 00 00 00    	imul   ecx,edx,0xff
10002359:	0f b6 8c 08 00 00 00 00 	movzx  ecx,BYTE PTR [eax+ecx*1+0x0]	1000235d: R_386_32	FontWidths
10002361:	83 ec 04             	sub    esp,0x4
10002364:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10002367:	6a 0e                	push   0xe
10002369:	51                   	push   ecx
1000236a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000236e:	55                   	push   ebp
1000236f:	57                   	push   edi
10002370:	6b c0 0e             	imul   eax,eax,0xe
10002373:	69 d2 f2 0d 00 00    	imul   edx,edx,0xdf2
10002379:	8d 84 10 00 00 00 00 	lea    eax,[eax+edx*1+0x0]	1000237c: R_386_32	Fonts
10002380:	50                   	push   eax
10002381:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002384:	e8 fc ff ff ff       	call   10002385 <legacyDraw(GDO*)+0x53>	10002385: R_386_PC32	Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)
10002389:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
1000238d:	01 cf                	add    edi,ecx
1000238f:	46                   	inc    esi
10002390:	83 c4 20             	add    esp,0x20
10002393:	eb b0                	jmp    10002345 <legacyDraw(GDO*)+0x13>
10002395:	83 c4 1c             	add    esp,0x1c
10002398:	5b                   	pop    ebx
10002399:	5e                   	pop    esi
1000239a:	5f                   	pop    edi
1000239b:	5d                   	pop    ebp
1000239c:	c3                   	ret    

1000239d <reverse(unsigned char)>:
1000239d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
100023a1:	c3                   	ret    

100023a2 <loadFontWithName(char*)>:
100023a2:	55                   	push   ebp
100023a3:	57                   	push   edi
100023a4:	56                   	push   esi
100023a5:	53                   	push   ebx
100023a6:	83 ec 34             	sub    esp,0x34
100023a9:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
100023ad:	53                   	push   ebx
100023ae:	68 de 2f 00 10       	push   0x10002fde	100023af: R_386_32	.text
100023b3:	e8 fc ff ff ff       	call   100023b4 <loadFontWithName(char*)+0x12>	100023b4: R_386_PC32	Dbg::kprintf(char const*, ...)
100023b8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100023bf:	e8 fc ff ff ff       	call   100023c0 <loadFontWithName(char*)+0x1e>	100023c0: R_386_PC32	malloc
100023c4:	89 c6                	mov    esi,eax
100023c6:	83 c4 0c             	add    esp,0xc
100023c9:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100023cb: R_386_32	kernelProcess
100023cf:	53                   	push   ebx
100023d0:	50                   	push   eax
100023d1:	e8 fc ff ff ff       	call   100023d2 <loadFontWithName(char*)+0x30>	100023d2: R_386_PC32	File::File(char const*, Process*)
100023d6:	59                   	pop    ecx
100023d7:	5f                   	pop    edi
100023d8:	6a 01                	push   0x1
100023da:	56                   	push   esi
100023db:	e8 fc ff ff ff       	call   100023dc <loadFontWithName(char*)+0x3a>	100023dc: R_386_PC32	File::open(FileOpenMode)
100023e0:	83 c4 10             	add    esp,0x10
100023e3:	85 c0                	test   eax,eax
100023e5:	74 10                	je     100023f7 <loadFontWithName(char*)+0x55>
100023e7:	83 ec 0c             	sub    esp,0xc
100023ea:	68 02 30 00 10       	push   0x10003002	100023eb: R_386_32	.text
100023ef:	e8 fc ff ff ff       	call   100023f0 <loadFontWithName(char*)+0x4e>	100023f0: R_386_PC32	Krnl::panic(char const*)
100023f4:	83 c4 10             	add    esp,0x10
100023f7:	83 ec 0c             	sub    esp,0xc
100023fa:	8b 06                	mov    eax,DWORD PTR [esi]
100023fc:	8d 54 24 28          	lea    edx,[esp+0x28]
10002400:	52                   	push   edx
10002401:	68 00 00 00 00       	push   0x0	10002402: R_386_32	FONT
10002406:	6a 00                	push   0x0
10002408:	68 10 10 00 00       	push   0x1010
1000240d:	56                   	push   esi
1000240e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10002411:	83 c4 14             	add    esp,0x14
10002414:	56                   	push   esi
10002415:	e8 fc ff ff ff       	call   10002416 <loadFontWithName(char*)+0x74>	10002416: R_386_PC32	File::close()
1000241a:	8b 06                	mov    eax,DWORD PTR [esi]
1000241c:	89 34 24             	mov    DWORD PTR [esp],esi
1000241f:	ff 50 08             	call   DWORD PTR [eax+0x8]
10002422:	a1 00 00 00 00       	mov    eax,ds:0x0	10002423: R_386_32	nextfont_
10002427:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000242b:	69 f8 f2 0d 00 00    	imul   edi,eax,0xdf2
10002431:	83 c4 10             	add    esp,0x10
10002434:	b8 00 02 00 00       	mov    eax,0x200
10002439:	69 74 24 0c ff 00 00 00 	imul   esi,DWORD PTR [esp+0xc],0xff
10002441:	81 c6 00 00 00 00    	add    esi,0x0	10002443: R_386_32	FontWidths
10002447:	0f be 90 10 00 00 00 	movsx  edx,BYTE PTR [eax+0x10]	1000244a: R_386_32	FONT
1000244e:	8a 88 1f 00 00 00    	mov    cl,BYTE PTR [eax+0x1f]	10002450: R_386_32	FONT
10002454:	88 0c 16             	mov    BYTE PTR [esi+edx*1],cl
10002457:	6b d2 0e             	imul   edx,edx,0xe
1000245a:	01 fa                	add    edx,edi
1000245c:	31 ed                	xor    ebp,ebp
1000245e:	8a 8c 28 11 00 00 00 	mov    cl,BYTE PTR [eax+ebp*1+0x11]	10002461: R_386_32	FONT
10002465:	88 8c 2a 00 00 00 00 	mov    BYTE PTR [edx+ebp*1+0x0],cl	10002468: R_386_32	Fonts
1000246c:	45                   	inc    ebp
1000246d:	83 fd 0e             	cmp    ebp,0xe
10002470:	75 ec                	jne    1000245e <loadFontWithName(char*)+0xbc>
10002472:	83 c0 10             	add    eax,0x10
10002475:	3d 00 08 00 00       	cmp    eax,0x800
1000247a:	75 cb                	jne    10002447 <loadFontWithName(char*)+0xa5>
1000247c:	43                   	inc    ebx
1000247d:	80 7b ff 00          	cmp    BYTE PTR [ebx-0x1],0x0
10002481:	75 f9                	jne    1000247c <loadFontWithName(char*)+0xda>
10002483:	8a 03                	mov    al,BYTE PTR [ebx]
10002485:	3c 2f                	cmp    al,0x2f
10002487:	74 07                	je     10002490 <loadFontWithName(char*)+0xee>
10002489:	3c 5c                	cmp    al,0x5c
1000248b:	74 03                	je     10002490 <loadFontWithName(char*)+0xee>
1000248d:	4b                   	dec    ebx
1000248e:	eb f3                	jmp    10002483 <loadFontWithName(char*)+0xe1>
10002490:	31 d2                	xor    edx,edx
10002492:	69 7c 24 0c ff 00 00 00 	imul   edi,DWORD PTR [esp+0xc],0xff
1000249a:	81 c7 00 00 00 00    	add    edi,0x0	1000249c: R_386_32	FontNames
100024a0:	8a 44 13 01          	mov    al,BYTE PTR [ebx+edx*1+0x1]
100024a4:	3c 2e                	cmp    al,0x2e
100024a6:	0f b7 f2             	movzx  esi,dx
100024a9:	74 13                	je     100024be <loadFontWithName(char*)+0x11c>
100024ab:	8d 68 9f             	lea    ebp,[eax-0x61]
100024ae:	89 e9                	mov    ecx,ebp
100024b0:	80 f9 19             	cmp    cl,0x19
100024b3:	77 03                	ja     100024b8 <loadFontWithName(char*)+0x116>
100024b5:	83 e8 20             	sub    eax,0x20
100024b8:	88 04 37             	mov    BYTE PTR [edi+esi*1],al
100024bb:	42                   	inc    edx
100024bc:	eb e2                	jmp    100024a0 <loadFontWithName(char*)+0xfe>
100024be:	69 44 24 0c ff 00 00 00 	imul   eax,DWORD PTR [esp+0xc],0xff
100024c6:	c6 84 30 00 00 00 00 00 	mov    BYTE PTR [eax+esi*1+0x0],0x0	100024c9: R_386_32	FontNames
100024ce:	05 00 00 00 00       	add    eax,0x0	100024cf: R_386_32	FontNames
100024d3:	52                   	push   edx
100024d4:	50                   	push   eax
100024d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100024d9:	68 14 30 00 10       	push   0x10003014	100024da: R_386_32	.text
100024de:	e8 fc ff ff ff       	call   100024df <loadFontWithName(char*)+0x13d>	100024df: R_386_PC32	Dbg::kprintf(char const*, ...)
100024e3:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100024e5: R_386_32	nextfont_
100024e9:	83 c4 3c             	add    esp,0x3c
100024ec:	5b                   	pop    ebx
100024ed:	5e                   	pop    esi
100024ee:	5f                   	pop    edi
100024ef:	5d                   	pop    ebp
100024f0:	c3                   	ret    

100024f1 <loadbuiltinfonts()>:
100024f1:	56                   	push   esi
100024f2:	53                   	push   ebx
100024f3:	52                   	push   edx
100024f4:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100024f6: R_386_32	nextfont_
100024fe:	bb 00 00 00 00       	mov    ebx,0x0	100024ff: R_386_32	FontWidths
10002503:	ba f2 0d 00 00       	mov    edx,0xdf2
10002508:	8d 82 0e f2 ff ff    	lea    eax,[edx-0xdf2]
1000250e:	89 de                	mov    esi,ebx
10002510:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10002512: R_386_32	Fonts
10002517:	b9 01 00 00 00       	mov    ecx,0x1
1000251c:	c6 84 08 00 00 00 00 66 	mov    BYTE PTR [eax+ecx*1+0x0],0x66	1000251f: R_386_32	Fonts
10002524:	41                   	inc    ecx
10002525:	83 f9 0d             	cmp    ecx,0xd
10002528:	75 f2                	jne    1000251c <loadbuiltinfonts()+0x2b>
1000252a:	c6 80 0d 00 00 00 00 	mov    BYTE PTR [eax+0xd],0x0	1000252c: R_386_32	Fonts
10002531:	c6 06 08             	mov    BYTE PTR [esi],0x8
10002534:	46                   	inc    esi
10002535:	83 c0 0e             	add    eax,0xe
10002538:	39 d0                	cmp    eax,edx
1000253a:	75 d4                	jne    10002510 <loadbuiltinfonts()+0x1f>
1000253c:	8d 90 f2 0d 00 00    	lea    edx,[eax+0xdf2]
10002542:	81 c3 ff 00 00 00    	add    ebx,0xff
10002548:	81 fa 90 6f 00 00    	cmp    edx,0x6f90
1000254e:	75 b8                	jne    10002508 <loadbuiltinfonts()+0x17>
10002550:	b8 00 02 00 00       	mov    eax,0x200
10002555:	0f be 90 10 00 00 00 	movsx  edx,BYTE PTR [eax+0x10]	10002558: R_386_32	FONT
1000255c:	8a 88 1f 00 00 00    	mov    cl,BYTE PTR [eax+0x1f]	1000255e: R_386_32	FONT
10002562:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	10002564: R_386_32	FontWidths
10002568:	6b ca 0e             	imul   ecx,edx,0xe
1000256b:	31 d2                	xor    edx,edx
1000256d:	8a 9c 10 11 00 00 00 	mov    bl,BYTE PTR [eax+edx*1+0x11]	10002570: R_386_32	FONT
10002574:	88 9c 11 00 00 00 00 	mov    BYTE PTR [ecx+edx*1+0x0],bl	10002577: R_386_32	Fonts
1000257b:	42                   	inc    edx
1000257c:	83 fa 0e             	cmp    edx,0xe
1000257f:	75 ec                	jne    1000256d <loadbuiltinfonts()+0x7c>
10002581:	83 c0 10             	add    eax,0x10
10002584:	3d 00 08 00 00       	cmp    eax,0x800
10002589:	75 ca                	jne    10002555 <loadbuiltinfonts()+0x64>
1000258b:	50                   	push   eax
1000258c:	50                   	push   eax
1000258d:	68 28 30 00 10       	push   0x10003028	1000258e: R_386_32	.text
10002592:	68 00 00 00 00       	push   0x0	10002593: R_386_32	FontNames
10002597:	e8 fc ff ff ff       	call   10002598 <loadbuiltinfonts()+0xa7>	10002598: R_386_PC32	strcpy
1000259c:	83 c4 0c             	add    esp,0xc
1000259f:	68 00 00 00 00       	push   0x0	100025a0: R_386_32	FontNames
100025a4:	6a 00                	push   0x0
100025a6:	68 14 30 00 10       	push   0x10003014	100025a7: R_386_32	.text
100025ab:	e8 fc ff ff ff       	call   100025ac <loadbuiltinfonts()+0xbb>	100025ac: R_386_PC32	Dbg::kprintf(char const*, ...)
100025b0:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100025b2: R_386_32	nextfont_
100025ba:	83 c4 14             	add    esp,0x14
100025bd:	5b                   	pop    ebx
100025be:	5e                   	pop    esi
100025bf:	c3                   	ret    

100025c0 <loadfonts()>:
100025c0:	57                   	push   edi
100025c1:	56                   	push   esi
100025c2:	53                   	push   ebx
100025c3:	81 ec 1c 02 00 00    	sub    esp,0x21c
100025c9:	68 14 01 00 00       	push   0x114
100025ce:	e8 fc ff ff ff       	call   100025cf <loadfonts()+0xf>	100025cf: R_386_PC32	malloc
100025d3:	89 c3                	mov    ebx,eax
100025d5:	83 c4 0c             	add    esp,0xc
100025d8:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100025da: R_386_32	kernelProcess
100025de:	68 2f 30 00 10       	push   0x1000302f	100025df: R_386_32	.text
100025e3:	50                   	push   eax
100025e4:	e8 fc ff ff ff       	call   100025e5 <loadfonts()+0x25>	100025e5: R_386_PC32	Directory::Directory(char const*, Process*)
100025e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
100025ec:	e8 fc ff ff ff       	call   100025ed <loadfonts()+0x2d>	100025ed: R_386_PC32	Directory::open()
100025f1:	83 c4 10             	add    esp,0x10
100025f4:	51                   	push   ecx
100025f5:	51                   	push   ecx
100025f6:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
100025fd:	50                   	push   eax
100025fe:	53                   	push   ebx
100025ff:	e8 fc ff ff ff       	call   10002600 <loadfonts()+0x40>	10002600: R_386_PC32	Directory::read(dirent*)
10002604:	89 c6                	mov    esi,eax
10002606:	5f                   	pop    edi
10002607:	58                   	pop    eax
10002608:	56                   	push   esi
10002609:	68 46 30 00 10       	push   0x10003046	1000260a: R_386_32	.text
1000260e:	e8 fc ff ff ff       	call   1000260f <loadfonts()+0x4f>	1000260f: R_386_PC32	Dbg::kprintf(char const*, ...)
10002613:	83 c4 10             	add    esp,0x10
10002616:	85 f6                	test   esi,esi
10002618:	75 4c                	jne    10002666 <loadfonts()+0xa6>
1000261a:	80 bc 24 10 01 00 00 00 	cmp    BYTE PTR [esp+0x110],0x0
10002622:	74 42                	je     10002666 <loadfonts()+0xa6>
10002624:	f6 84 24 0c 01 00 00 02 	test   BYTE PTR [esp+0x10c],0x2
1000262c:	75 c6                	jne    100025f4 <loadfonts()+0x34>
1000262e:	50                   	push   eax
1000262f:	50                   	push   eax
10002630:	68 5a 30 00 10       	push   0x1000305a	10002631: R_386_32	.text
10002635:	8d 74 24 0c          	lea    esi,[esp+0xc]
10002639:	56                   	push   esi
1000263a:	e8 fc ff ff ff       	call   1000263b <loadfonts()+0x7b>	1000263b: R_386_PC32	strcpy
1000263f:	5a                   	pop    edx
10002640:	59                   	pop    ecx
10002641:	8d bc 24 18 01 00 00 	lea    edi,[esp+0x118]
10002648:	57                   	push   edi
10002649:	56                   	push   esi
1000264a:	e8 fc ff ff ff       	call   1000264b <loadfonts()+0x8b>	1000264b: R_386_PC32	strcat
1000264f:	58                   	pop    eax
10002650:	5a                   	pop    edx
10002651:	57                   	push   edi
10002652:	68 72 30 00 10       	push   0x10003072	10002653: R_386_32	.text
10002657:	e8 fc ff ff ff       	call   10002658 <loadfonts()+0x98>	10002658: R_386_PC32	Dbg::kprintf(char const*, ...)
1000265c:	89 34 24             	mov    DWORD PTR [esp],esi
1000265f:	e8 fc ff ff ff       	call   10002660 <loadfonts()+0xa0>	10002660: R_386_PC32	loadFontWithName(char*)
10002664:	eb 8b                	jmp    100025f1 <loadfonts()+0x31>
10002666:	83 ec 0c             	sub    esp,0xc
10002669:	53                   	push   ebx
1000266a:	e8 fc ff ff ff       	call   1000266b <loadfonts()+0xab>	1000266b: R_386_PC32	Directory::close()
1000266f:	83 c4 10             	add    esp,0x10
10002672:	85 db                	test   ebx,ebx
10002674:	74 0c                	je     10002682 <loadfonts()+0xc2>
10002676:	83 ec 0c             	sub    esp,0xc
10002679:	8b 03                	mov    eax,DWORD PTR [ebx]
1000267b:	53                   	push   ebx
1000267c:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000267f:	83 c4 10             	add    esp,0x10
10002682:	81 c4 10 02 00 00    	add    esp,0x210
10002688:	5b                   	pop    ebx
10002689:	5e                   	pop    esi
1000268a:	5f                   	pop    edi
1000268b:	c3                   	ret    

1000268c <getLegacyFont(char const*)>:
1000268c:	57                   	push   edi
1000268d:	56                   	push   esi
1000268e:	53                   	push   ebx
1000268f:	81 ec 08 01 00 00    	sub    esp,0x108
10002695:	8b b4 24 18 01 00 00 	mov    esi,DWORD PTR [esp+0x118]
1000269c:	68 80 30 00 10       	push   0x10003080	1000269d: R_386_32	.text
100026a1:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
100026a5:	53                   	push   ebx
100026a6:	e8 fc ff ff ff       	call   100026a7 <getLegacyFont(char const*)+0x1b>	100026a7: R_386_PC32	strcpy
100026ab:	59                   	pop    ecx
100026ac:	5f                   	pop    edi
100026ad:	56                   	push   esi
100026ae:	53                   	push   ebx
100026af:	e8 fc ff ff ff       	call   100026b0 <getLegacyFont(char const*)+0x24>	100026b0: R_386_PC32	strcat
100026b4:	58                   	pop    eax
100026b5:	5a                   	pop    edx
100026b6:	68 98 30 00 10       	push   0x10003098	100026b7: R_386_32	.text
100026bb:	53                   	push   ebx
100026bc:	e8 fc ff ff ff       	call   100026bd <getLegacyFont(char const*)+0x31>	100026bd: R_386_PC32	strcat
100026c1:	83 c4 10             	add    esp,0x10
100026c4:	31 db                	xor    ebx,ebx
100026c6:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	100026c8: R_386_32	nextfont_
100026cc:	39 df                	cmp    edi,ebx
100026ce:	7e 3b                	jle    1000270b <getLegacyFont(char const*)+0x7f>
100026d0:	69 fb ff 00 00 00    	imul   edi,ebx,0xff
100026d6:	81 c7 00 00 00 00    	add    edi,0x0	100026d8: R_386_32	FontNames
100026dc:	50                   	push   eax
100026dd:	56                   	push   esi
100026de:	57                   	push   edi
100026df:	68 9d 30 00 10       	push   0x1000309d	100026e0: R_386_32	.text
100026e4:	e8 fc ff ff ff       	call   100026e5 <getLegacyFont(char const*)+0x59>	100026e5: R_386_PC32	Dbg::kprintf(char const*, ...)
100026e9:	58                   	pop    eax
100026ea:	5a                   	pop    edx
100026eb:	56                   	push   esi
100026ec:	57                   	push   edi
100026ed:	e8 fc ff ff ff       	call   100026ee <getLegacyFont(char const*)+0x62>	100026ee: R_386_PC32	strcmp
100026f2:	83 c4 10             	add    esp,0x10
100026f5:	85 c0                	test   eax,eax
100026f7:	75 0f                	jne    10002708 <getLegacyFont(char const*)+0x7c>
100026f9:	51                   	push   ecx
100026fa:	53                   	push   ebx
100026fb:	56                   	push   esi
100026fc:	68 a8 30 00 10       	push   0x100030a8	100026fd: R_386_32	.text
10002701:	e8 fc ff ff ff       	call   10002702 <getLegacyFont(char const*)+0x76>	10002702: R_386_PC32	Dbg::kprintf(char const*, ...)
10002706:	eb 43                	jmp    1000274b <getLegacyFont(char const*)+0xbf>
10002708:	43                   	inc    ebx
10002709:	eb bb                	jmp    100026c6 <getLegacyFont(char const*)+0x3a>
1000270b:	83 ec 0c             	sub    esp,0xc
1000270e:	56                   	push   esi
1000270f:	e8 fc ff ff ff       	call   10002710 <getLegacyFont(char const*)+0x84>	10002710: R_386_PC32	loadFontWithName(char*)
10002714:	a1 00 00 00 00       	mov    eax,ds:0x0	10002715: R_386_32	nextfont_
10002719:	83 c4 10             	add    esp,0x10
1000271c:	39 c7                	cmp    edi,eax
1000271e:	75 15                	jne    10002735 <getLegacyFont(char const*)+0xa9>
10002720:	83 ec 0c             	sub    esp,0xc
10002723:	68 cc 30 00 10       	push   0x100030cc	10002724: R_386_32	.text
10002728:	e8 fc ff ff ff       	call   10002729 <getLegacyFont(char const*)+0x9d>	10002729: R_386_PC32	Dbg::kprintf(char const*, ...)
1000272d:	83 c4 10             	add    esp,0x10
10002730:	83 cb ff             	or     ebx,0xffffffff
10002733:	eb 19                	jmp    1000274e <getLegacyFont(char const*)+0xc2>
10002735:	52                   	push   edx
10002736:	48                   	dec    eax
10002737:	50                   	push   eax
10002738:	56                   	push   esi
10002739:	68 e9 30 00 10       	push   0x100030e9	1000273a: R_386_32	.text
1000273e:	e8 fc ff ff ff       	call   1000273f <getLegacyFont(char const*)+0xb3>	1000273f: R_386_PC32	Dbg::kprintf(char const*, ...)
10002743:	a1 00 00 00 00       	mov    eax,ds:0x0	10002744: R_386_32	nextfont_
10002748:	8d 58 ff             	lea    ebx,[eax-0x1]
1000274b:	83 c4 10             	add    esp,0x10
1000274e:	89 d8                	mov    eax,ebx
10002750:	81 c4 00 01 00 00    	add    esp,0x100
10002756:	5b                   	pop    ebx
10002757:	5e                   	pop    esi
10002758:	5f                   	pop    edi
10002759:	c3                   	ret    

1000275a <getLegacyFont(LegacyFontType)>:
1000275a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000275e:	83 f8 05             	cmp    eax,0x5
10002761:	77 46                	ja     100027a9 <getLegacyFont(LegacyFontType)+0x4f>
10002763:	ff 24 85 34 31 00 10 	jmp    DWORD PTR [eax*4+0x10003134]	10002766: R_386_32	.text
1000276a:	c7 44 24 04 28 30 00 10 	mov    DWORD PTR [esp+0x4],0x10003028	1000276e: R_386_32	.text
10002772:	eb 30                	jmp    100027a4 <getLegacyFont(LegacyFontType)+0x4a>
10002774:	c7 44 24 04 0a 31 00 10 	mov    DWORD PTR [esp+0x4],0x1000310a	10002778: R_386_32	.text
1000277c:	eb 26                	jmp    100027a4 <getLegacyFont(LegacyFontType)+0x4a>
1000277e:	c7 44 24 04 12 31 00 10 	mov    DWORD PTR [esp+0x4],0x10003112	10002782: R_386_32	.text
10002786:	eb 1c                	jmp    100027a4 <getLegacyFont(LegacyFontType)+0x4a>
10002788:	c7 44 24 04 1b 31 00 10 	mov    DWORD PTR [esp+0x4],0x1000311b	1000278c: R_386_32	.text
10002790:	eb 12                	jmp    100027a4 <getLegacyFont(LegacyFontType)+0x4a>
10002792:	c7 44 24 04 23 31 00 10 	mov    DWORD PTR [esp+0x4],0x10003123	10002796: R_386_32	.text
1000279a:	eb 08                	jmp    100027a4 <getLegacyFont(LegacyFontType)+0x4a>
1000279c:	c7 44 24 04 29 31 00 10 	mov    DWORD PTR [esp+0x4],0x10003129	100027a0: R_386_32	.text
100027a4:	e9 e3 fe ff ff       	jmp    1000268c <getLegacyFont(char const*)>
100027a9:	83 c8 ff             	or     eax,0xffffffff
100027ac:	c3                   	ret    
100027ad:	90                   	nop

100027ae <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)>:
100027ae:	57                   	push   edi
100027af:	53                   	push   ebx
100027b0:	83 ec 08             	sub    esp,0x8
100027b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100027b7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100027bb:	6a 02                	push   0x2
100027bd:	53                   	push   ebx
100027be:	e8 fc ff ff ff       	call   100027bf <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x11>	100027bf: R_386_PC32	GDO::GDO(GDOType, Context*)
100027c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100027c7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100027ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100027ce:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
100027d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100027d5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
100027d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100027d9: R_386_32	System
100027dd:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
100027e0:	83 c9 ff             	or     ecx,0xffffffff
100027e3:	31 c0                	xor    eax,eax
100027e5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
100027e9:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
100027eb:	89 ca                	mov    edx,ecx
100027ed:	f7 d2                	not    edx
100027ef:	89 14 24             	mov    DWORD PTR [esp],edx
100027f2:	e8 fc ff ff ff       	call   100027f3 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x45>	100027f3: R_386_PC32	malloc
100027f7:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
100027fa:	5a                   	pop    edx
100027fb:	59                   	pop    ecx
100027fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10002800:	50                   	push   eax
10002801:	e8 fc ff ff ff       	call   10002802 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x54>	10002802: R_386_PC32	strcpy
10002806:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002809: R_386_32	legacyDraw(GDO*)
1000280d:	83 c4 14             	add    esp,0x14
10002810:	5b                   	pop    ebx
10002811:	5f                   	pop    edi
10002812:	c3                   	ret    
10002813:	90                   	nop

10002814 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)>:
10002814:	57                   	push   edi
10002815:	53                   	push   ebx
10002816:	83 ec 08             	sub    esp,0x8
10002819:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000281d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002821:	6a 02                	push   0x2
10002823:	53                   	push   ebx
10002824:	e8 fc ff ff ff       	call   10002825 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x11>	10002825: R_386_PC32	GDO::GDO(GDOType, Context*)
10002829:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000282d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10002830:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002834:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10002837:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000283b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
1000283e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002842:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
10002845:	83 c9 ff             	or     ecx,0xffffffff
10002848:	31 c0                	xor    eax,eax
1000284a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
1000284e:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
10002850:	89 ca                	mov    edx,ecx
10002852:	f7 d2                	not    edx
10002854:	89 14 24             	mov    DWORD PTR [esp],edx
10002857:	e8 fc ff ff ff       	call   10002858 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x44>	10002858: R_386_PC32	malloc
1000285c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
1000285f:	5a                   	pop    edx
10002860:	59                   	pop    ecx
10002861:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10002865:	50                   	push   eax
10002866:	e8 fc ff ff ff       	call   10002867 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x53>	10002867: R_386_PC32	strcpy
1000286b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	1000286e: R_386_32	legacyDraw(GDO*)
10002872:	83 c4 14             	add    esp,0x14
10002875:	5b                   	pop    ebx
10002876:	5f                   	pop    edi
10002877:	c3                   	ret    

10002878 <legacyFontInit()>:
10002878:	83 ec 0c             	sub    esp,0xc
1000287b:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000287d: R_386_32	nextfont_
10002885:	e8 fc ff ff ff       	call   10002886 <legacyFontInit()+0xe>	10002886: R_386_PC32	loadbuiltinfonts()
1000288a:	e8 fc ff ff ff       	call   1000288b <legacyFontInit()+0x13>	1000288b: R_386_PC32	loadfonts()
1000288f:	83 ec 0c             	sub    esp,0xc
10002892:	68 28 30 00 10       	push   0x10003028	10002893: R_386_32	.text
10002897:	e8 fc ff ff ff       	call   10002898 <legacyFontInit()+0x20>	10002898: R_386_PC32	getLegacyFont(char const*)
1000289c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000289d: R_386_32	System
100028a1:	83 c4 1c             	add    esp,0x1c
100028a4:	c3                   	ret    
100028a5:	90                   	nop

100028a6 <rectDrawFunc(GDO*)>:
100028a6:	83 ec 14             	sub    esp,0x14
100028a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100028ad:	ff 70 50             	push   DWORD PTR [eax+0x50]
100028b0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
100028b3:	ff 70 48             	push   DWORD PTR [eax+0x48]
100028b6:	ff 70 44             	push   DWORD PTR [eax+0x44]
100028b9:	ff 70 40             	push   DWORD PTR [eax+0x40]
100028bc:	ff 70 04             	push   DWORD PTR [eax+0x4]
100028bf:	e8 fc ff ff ff       	call   100028c0 <rectDrawFunc(GDO*)+0x1a>	100028c0: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
100028c4:	83 c4 2c             	add    esp,0x2c
100028c7:	c3                   	ret    

100028c8 <rectPtnDrawFunc(GDO*)>:
100028c8:	83 ec 14             	sub    esp,0x14
100028cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100028cf:	ff 70 50             	push   DWORD PTR [eax+0x50]
100028d2:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
100028d5:	ff 70 48             	push   DWORD PTR [eax+0x48]
100028d8:	ff 70 44             	push   DWORD PTR [eax+0x44]
100028db:	ff 70 40             	push   DWORD PTR [eax+0x40]
100028de:	ff 70 04             	push   DWORD PTR [eax+0x4]
100028e1:	e8 fc ff ff ff       	call   100028e2 <rectPtnDrawFunc(GDO*)+0x1a>	100028e2: R_386_PC32	Context::fillRect(int, int, int, int, Brush*)
100028e6:	83 c4 2c             	add    esp,0x2c
100028e9:	c3                   	ret    

100028ea <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)>:
100028ea:	53                   	push   ebx
100028eb:	83 ec 0c             	sub    esp,0xc
100028ee:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100028f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100028f6:	6a 01                	push   0x1
100028f8:	53                   	push   ebx
100028f9:	e8 fc ff ff ff       	call   100028fa <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)+0x10>	100028fa: R_386_PC32	GDO::GDO(GDOType, Context*)
100028fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002902:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10002905:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002909:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
1000290c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002910:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10002913:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002917:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
1000291a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000291e:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10002921:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002924: R_386_32	rectPtnDrawFunc(GDO*)
10002928:	83 c4 18             	add    esp,0x18
1000292b:	5b                   	pop    ebx
1000292c:	c3                   	ret    
1000292d:	90                   	nop

1000292e <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)>:
1000292e:	53                   	push   ebx
1000292f:	83 ec 0c             	sub    esp,0xc
10002932:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000293a:	6a 01                	push   0x1
1000293c:	53                   	push   ebx
1000293d:	e8 fc ff ff ff       	call   1000293e <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)+0x10>	1000293e: R_386_PC32	GDO::GDO(GDOType, Context*)
10002942:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002946:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10002949:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000294d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10002950:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002954:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10002957:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000295b:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
1000295e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002962:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10002965:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002968: R_386_32	rectDrawFunc(GDO*)
1000296c:	83 c4 18             	add    esp,0x18
1000296f:	5b                   	pop    ebx
10002970:	c3                   	ret    
10002971:	90                   	nop

10002972 <regnDrawFunc(GDO*)>:
10002972:	c3                   	ret    
10002973:	90                   	nop

10002974 <Region::Region(int, int, int, int, Context*)>:
10002974:	53                   	push   ebx
10002975:	83 ec 0c             	sub    esp,0xc
10002978:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000297c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10002980:	6a 00                	push   0x0
10002982:	53                   	push   ebx
10002983:	e8 fc ff ff ff       	call   10002984 <Region::Region(int, int, int, int, Context*)+0x10>	10002984: R_386_PC32	GDO::GDO(GDOType, Context*)
10002988:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
1000298c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
1000298f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002993:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
10002996:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000299a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
1000299d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100029a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
100029a4:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	100029a7: R_386_32	regnDrawFunc(GDO*)
100029ab:	83 c4 18             	add    esp,0x18
100029ae:	5b                   	pop    ebx
100029af:	c3                   	ret    

100029b0 <Region::getRegionsAbove(Region*)>:
100029b0:	55                   	push   ebp
100029b1:	57                   	push   edi
100029b2:	56                   	push   esi
100029b3:	53                   	push   ebx
100029b4:	83 ec 28             	sub    esp,0x28
100029b7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
100029bb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100029bf:	6a 08                	push   0x8
100029c1:	e8 fc ff ff ff       	call   100029c2 <Region::getRegionsAbove(Region*)+0x12>	100029c2: R_386_PC32	malloc
100029c6:	89 c3                	mov    ebx,eax
100029c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100029cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100029d5:	89 3c 24             	mov    DWORD PTR [esp],edi
100029d8:	e8 fc ff ff ff       	call   100029d9 <Region::getRegionsAbove(Region*)+0x29>	100029d9: R_386_PC32	GDO::resetNext()
100029dd:	83 c4 10             	add    esp,0x10
100029e0:	83 ec 0c             	sub    esp,0xc
100029e3:	57                   	push   edi
100029e4:	e8 fc ff ff ff       	call   100029e5 <Region::getRegionsAbove(Region*)+0x35>	100029e5: R_386_PC32	GDO::hasNext()
100029e9:	83 c4 10             	add    esp,0x10
100029ec:	84 c0                	test   al,al
100029ee:	74 10                	je     10002a00 <Region::getRegionsAbove(Region*)+0x50>
100029f0:	83 ec 0c             	sub    esp,0xc
100029f3:	57                   	push   edi
100029f4:	e8 fc ff ff ff       	call   100029f5 <Region::getRegionsAbove(Region*)+0x45>	100029f5: R_386_PC32	GDO::getNext()
100029f9:	83 c4 10             	add    esp,0x10
100029fc:	39 e8                	cmp    eax,ebp
100029fe:	75 e0                	jne    100029e0 <Region::getRegionsAbove(Region*)+0x30>
10002a00:	83 ec 0c             	sub    esp,0xc
10002a03:	57                   	push   edi
10002a04:	e8 fc ff ff ff       	call   10002a05 <Region::getRegionsAbove(Region*)+0x55>	10002a05: R_386_PC32	GDO::hasNext()
10002a09:	83 c4 10             	add    esp,0x10
10002a0c:	84 c0                	test   al,al
10002a0e:	74 7b                	je     10002a8b <Region::getRegionsAbove(Region*)+0xdb>
10002a10:	83 ec 0c             	sub    esp,0xc
10002a13:	57                   	push   edi
10002a14:	e8 fc ff ff ff       	call   10002a15 <Region::getRegionsAbove(Region*)+0x65>	10002a15: R_386_PC32	GDO::getNext()
10002a19:	89 c6                	mov    esi,eax
10002a1b:	83 c4 10             	add    esp,0x10
10002a1e:	85 c0                	test   eax,eax
10002a20:	74 de                	je     10002a00 <Region::getRegionsAbove(Region*)+0x50>
10002a22:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
10002a25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10002a29:	8b 56 2c             	mov    edx,DWORD PTR [esi+0x2c]
10002a2c:	03 45 34             	add    eax,DWORD PTR [ebp+0x34]
10002a2f:	39 d0                	cmp    eax,edx
10002a31:	7e cd                	jle    10002a00 <Region::getRegionsAbove(Region*)+0x50>
10002a33:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
10002a36:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
10002a39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002a3d:	8b 45 38             	mov    eax,DWORD PTR [ebp+0x38]
10002a40:	01 c8                	add    eax,ecx
10002a42:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10002a46:	7e b8                	jle    10002a00 <Region::getRegionsAbove(Region*)+0x50>
10002a48:	03 56 34             	add    edx,DWORD PTR [esi+0x34]
10002a4b:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
10002a4f:	7d af                	jge    10002a00 <Region::getRegionsAbove(Region*)+0x50>
10002a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002a55:	03 46 38             	add    eax,DWORD PTR [esi+0x38]
10002a58:	39 c1                	cmp    ecx,eax
10002a5a:	7d a4                	jge    10002a00 <Region::getRegionsAbove(Region*)+0x50>
10002a5c:	83 ec 0c             	sub    esp,0xc
10002a5f:	6a 0c                	push   0xc
10002a61:	e8 fc ff ff ff       	call   10002a62 <Region::getRegionsAbove(Region*)+0xb2>	10002a62: R_386_PC32	malloc
10002a66:	89 30                	mov    DWORD PTR [eax],esi
10002a68:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10002a6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10002a6e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10002a75:	83 c4 10             	add    esp,0x10
10002a78:	85 d2                	test   edx,edx
10002a7a:	74 05                	je     10002a81 <Region::getRegionsAbove(Region*)+0xd1>
10002a7c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
10002a7f:	eb 02                	jmp    10002a83 <Region::getRegionsAbove(Region*)+0xd3>
10002a81:	89 03                	mov    DWORD PTR [ebx],eax
10002a83:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10002a86:	e9 75 ff ff ff       	jmp    10002a00 <Region::getRegionsAbove(Region*)+0x50>
10002a8b:	89 d8                	mov    eax,ebx
10002a8d:	83 c4 1c             	add    esp,0x1c
10002a90:	5b                   	pop    ebx
10002a91:	5e                   	pop    esi
10002a92:	5f                   	pop    edi
10002a93:	5d                   	pop    ebp
10002a94:	c3                   	ret    
10002a95:	90                   	nop

10002a96 <Region::applyBoundClipping(int, List<CRect*>*)>:
10002a96:	55                   	push   ebp
10002a97:	57                   	push   edi
10002a98:	56                   	push   esi
10002a99:	53                   	push   ebx
10002a9a:	83 ec 1c             	sub    esp,0x1c
10002a9d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002aa1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
10002aa5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10002aa9:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10002aad:	0f 84 ef 01 00 00    	je     10002ca2 <Region::applyBoundClipping(int, List<CRect*>*)+0x20c>
10002ab3:	83 ec 0c             	sub    esp,0xc
10002ab6:	53                   	push   ebx
10002ab7:	e8 fc ff ff ff       	call   10002ab8 <Region::applyBoundClipping(int, List<CRect*>*)+0x22>	10002ab8: R_386_PC32	GDO::screenX()
10002abc:	89 c5                	mov    ebp,eax
10002abe:	89 1c 24             	mov    DWORD PTR [esp],ebx
10002ac1:	e8 fc ff ff ff       	call   10002ac2 <Region::applyBoundClipping(int, List<CRect*>*)+0x2c>	10002ac2: R_386_PC32	GDO::screenY()
10002ac6:	89 c6                	mov    esi,eax
10002ac8:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10002acf:	e8 fc ff ff ff       	call   10002ad0 <Region::applyBoundClipping(int, List<CRect*>*)+0x3a>	10002ad0: R_386_PC32	malloc
10002ad4:	89 c7                	mov    edi,eax
10002ad6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
10002ad9:	01 e8                	add    eax,ebp
10002adb:	48                   	dec    eax
10002adc:	89 04 24             	mov    DWORD PTR [esp],eax
10002adf:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10002ae2:	01 f0                	add    eax,esi
10002ae4:	48                   	dec    eax
10002ae5:	50                   	push   eax
10002ae6:	55                   	push   ebp
10002ae7:	56                   	push   esi
10002ae8:	57                   	push   edi
10002ae9:	e8 fc ff ff ff       	call   10002aea <Region::applyBoundClipping(int, List<CRect*>*)+0x54>	10002aea: R_386_PC32	CRect::CRect(int, int, int, int)
10002aee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10002af1:	83 c4 20             	add    esp,0x20
10002af4:	85 c0                	test   eax,eax
10002af6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10002afa:	0f 85 ab 00 00 00    	jne    10002bab <Region::applyBoundClipping(int, List<CRect*>*)+0x115>
10002b00:	85 d2                	test   edx,edx
10002b02:	0f 84 8c 00 00 00    	je     10002b94 <Region::applyBoundClipping(int, List<CRect*>*)+0xfe>
10002b08:	31 f6                	xor    esi,esi
10002b0a:	8b 02                	mov    eax,DWORD PTR [edx]
10002b0c:	89 c5                	mov    ebp,eax
10002b0e:	31 c9                	xor    ecx,ecx
10002b10:	85 ed                	test   ebp,ebp
10002b12:	74 06                	je     10002b1a <Region::applyBoundClipping(int, List<CRect*>*)+0x84>
10002b14:	41                   	inc    ecx
10002b15:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10002b18:	eb f6                	jmp    10002b10 <Region::applyBoundClipping(int, List<CRect*>*)+0x7a>
10002b1a:	39 ce                	cmp    esi,ecx
10002b1c:	7d 5f                	jge    10002b7d <Region::applyBoundClipping(int, List<CRect*>*)+0xe7>
10002b1e:	89 c5                	mov    ebp,eax
10002b20:	31 c9                	xor    ecx,ecx
10002b22:	85 ed                	test   ebp,ebp
10002b24:	74 06                	je     10002b2c <Region::applyBoundClipping(int, List<CRect*>*)+0x96>
10002b26:	41                   	inc    ecx
10002b27:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10002b2a:	eb f6                	jmp    10002b22 <Region::applyBoundClipping(int, List<CRect*>*)+0x8c>
10002b2c:	39 ce                	cmp    esi,ecx
10002b2e:	7f 0c                	jg     10002b3c <Region::applyBoundClipping(int, List<CRect*>*)+0xa6>
10002b30:	89 f1                	mov    ecx,esi
10002b32:	85 c9                	test   ecx,ecx
10002b34:	74 06                	je     10002b3c <Region::applyBoundClipping(int, List<CRect*>*)+0xa6>
10002b36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10002b39:	49                   	dec    ecx
10002b3a:	eb f6                	jmp    10002b32 <Region::applyBoundClipping(int, List<CRect*>*)+0x9c>
10002b3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10002b40:	8b 28                	mov    ebp,DWORD PTR [eax]
10002b42:	83 ec 0c             	sub    esp,0xc
10002b45:	6a 10                	push   0x10
10002b47:	e8 fc ff ff ff       	call   10002b48 <Region::applyBoundClipping(int, List<CRect*>*)+0xb2>	10002b48: R_386_PC32	malloc
10002b4c:	59                   	pop    ecx
10002b4d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
10002b50:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10002b53:	ff 75 00             	push   DWORD PTR [ebp+0x0]
10002b56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002b59:	50                   	push   eax
10002b5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002b5e:	e8 fc ff ff ff       	call   10002b5f <Region::applyBoundClipping(int, List<CRect*>*)+0xc9>	10002b5f: R_386_PC32	CRect::CRect(int, int, int, int)
10002b63:	83 c4 18             	add    esp,0x18
10002b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002b6a:	50                   	push   eax
10002b6b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002b6e:	e8 fc ff ff ff       	call   10002b6f <Region::applyBoundClipping(int, List<CRect*>*)+0xd9>	10002b6f: R_386_PC32	Context::addClipRect(CRect*)
10002b73:	46                   	inc    esi
10002b74:	83 c4 10             	add    esp,0x10
10002b77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002b7b:	eb 8d                	jmp    10002b0a <Region::applyBoundClipping(int, List<CRect*>*)+0x74>
10002b7d:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002b81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10002b84:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002b88:	83 c4 1c             	add    esp,0x1c
10002b8b:	5b                   	pop    ebx
10002b8c:	5e                   	pop    esi
10002b8d:	5f                   	pop    edi
10002b8e:	5d                   	pop    ebp
10002b8f:	e9 fc ff ff ff       	jmp    10002b90 <Region::applyBoundClipping(int, List<CRect*>*)+0xfa>	10002b90: R_386_PC32	Context::intersectClipRect(CRect*)
10002b94:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002b98:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10002b9b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002b9f:	83 c4 1c             	add    esp,0x1c
10002ba2:	5b                   	pop    ebx
10002ba3:	5e                   	pop    esi
10002ba4:	5f                   	pop    edi
10002ba5:	5d                   	pop    ebp
10002ba6:	e9 fc ff ff ff       	jmp    10002ba7 <Region::applyBoundClipping(int, List<CRect*>*)+0x111>	10002ba7: R_386_PC32	Context::addClipRect(CRect*)
10002bab:	51                   	push   ecx
10002bac:	52                   	push   edx
10002bad:	6a 01                	push   0x1
10002baf:	50                   	push   eax
10002bb0:	e8 fc ff ff ff       	call   10002bb1 <Region::applyBoundClipping(int, List<CRect*>*)+0x11b>	10002bb1: R_386_PC32	Region::applyBoundClipping(int, List<CRect*>*)
10002bb5:	5e                   	pop    esi
10002bb6:	5d                   	pop    ebp
10002bb7:	57                   	push   edi
10002bb8:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002bbb:	e8 fc ff ff ff       	call   10002bbc <Region::applyBoundClipping(int, List<CRect*>*)+0x126>	10002bbc: R_386_PC32	Context::intersectClipRect(CRect*)
10002bc0:	58                   	pop    eax
10002bc1:	5a                   	pop    edx
10002bc2:	53                   	push   ebx
10002bc3:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10002bc6:	e8 fc ff ff ff       	call   10002bc7 <Region::applyBoundClipping(int, List<CRect*>*)+0x131>	10002bc7: R_386_PC32	Region::getRegionsAbove(Region*)
10002bcb:	89 c6                	mov    esi,eax
10002bcd:	83 c4 10             	add    esp,0x10
10002bd0:	8b 06                	mov    eax,DWORD PTR [esi]
10002bd2:	89 c1                	mov    ecx,eax
10002bd4:	31 d2                	xor    edx,edx
10002bd6:	85 c9                	test   ecx,ecx
10002bd8:	74 06                	je     10002be0 <Region::applyBoundClipping(int, List<CRect*>*)+0x14a>
10002bda:	42                   	inc    edx
10002bdb:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10002bde:	eb f6                	jmp    10002bd6 <Region::applyBoundClipping(int, List<CRect*>*)+0x140>
10002be0:	85 d2                	test   edx,edx
10002be2:	0f 84 8a 00 00 00    	je     10002c72 <Region::applyBoundClipping(int, List<CRect*>*)+0x1dc>
10002be8:	8b 38                	mov    edi,DWORD PTR [eax]
10002bea:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
10002bed:	52                   	push   edx
10002bee:	52                   	push   edx
10002bef:	6a 0c                	push   0xc
10002bf1:	50                   	push   eax
10002bf2:	e8 fc ff ff ff       	call   10002bf3 <Region::applyBoundClipping(int, List<CRect*>*)+0x15d>	10002bf3: R_386_PC32	operator delete(void*, unsigned long)
10002bf7:	89 2e                	mov    DWORD PTR [esi],ebp
10002bf9:	83 c4 10             	add    esp,0x10
10002bfc:	85 ed                	test   ebp,ebp
10002bfe:	75 09                	jne    10002c09 <Region::applyBoundClipping(int, List<CRect*>*)+0x173>
10002c00:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10002c07:	eb 07                	jmp    10002c10 <Region::applyBoundClipping(int, List<CRect*>*)+0x17a>
10002c09:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
10002c10:	83 ec 0c             	sub    esp,0xc
10002c13:	57                   	push   edi
10002c14:	e8 fc ff ff ff       	call   10002c15 <Region::applyBoundClipping(int, List<CRect*>*)+0x17f>	10002c15: R_386_PC32	GDO::screenX()
10002c19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002c1d:	89 3c 24             	mov    DWORD PTR [esp],edi
10002c20:	e8 fc ff ff ff       	call   10002c21 <Region::applyBoundClipping(int, List<CRect*>*)+0x18b>	10002c21: R_386_PC32	GDO::screenY()
10002c25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002c29:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10002c30:	e8 fc ff ff ff       	call   10002c31 <Region::applyBoundClipping(int, List<CRect*>*)+0x19b>	10002c31: R_386_PC32	malloc
10002c35:	89 c5                	mov    ebp,eax
10002c37:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10002c3b:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
10002c3e:	01 c8                	add    eax,ecx
10002c40:	48                   	dec    eax
10002c41:	89 04 24             	mov    DWORD PTR [esp],eax
10002c44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10002c48:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
10002c4b:	01 d0                	add    eax,edx
10002c4d:	48                   	dec    eax
10002c4e:	50                   	push   eax
10002c4f:	51                   	push   ecx
10002c50:	52                   	push   edx
10002c51:	55                   	push   ebp
10002c52:	e8 fc ff ff ff       	call   10002c53 <Region::applyBoundClipping(int, List<CRect*>*)+0x1bd>	10002c53: R_386_PC32	CRect::CRect(int, int, int, int)
10002c57:	83 c4 18             	add    esp,0x18
10002c5a:	55                   	push   ebp
10002c5b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002c5e:	e8 fc ff ff ff       	call   10002c5f <Region::applyBoundClipping(int, List<CRect*>*)+0x1c9>	10002c5f: R_386_PC32	Context::subClipRect(CRect*)
10002c63:	59                   	pop    ecx
10002c64:	5f                   	pop    edi
10002c65:	6a 10                	push   0x10
10002c67:	55                   	push   ebp
10002c68:	e8 fc ff ff ff       	call   10002c69 <Region::applyBoundClipping(int, List<CRect*>*)+0x1d3>	10002c69: R_386_PC32	operator delete(void*, unsigned long)
10002c6d:	e9 5b ff ff ff       	jmp    10002bcd <Region::applyBoundClipping(int, List<CRect*>*)+0x137>
10002c72:	85 c0                	test   eax,eax
10002c74:	74 14                	je     10002c8a <Region::applyBoundClipping(int, List<CRect*>*)+0x1f4>
10002c76:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002c79:	52                   	push   edx
10002c7a:	52                   	push   edx
10002c7b:	6a 0c                	push   0xc
10002c7d:	50                   	push   eax
10002c7e:	e8 fc ff ff ff       	call   10002c7f <Region::applyBoundClipping(int, List<CRect*>*)+0x1e9>	10002c7f: R_386_PC32	operator delete(void*, unsigned long)
10002c83:	89 d8                	mov    eax,ebx
10002c85:	83 c4 10             	add    esp,0x10
10002c88:	eb e8                	jmp    10002c72 <Region::applyBoundClipping(int, List<CRect*>*)+0x1dc>
10002c8a:	c7 44 24 34 08 00 00 00 	mov    DWORD PTR [esp+0x34],0x8
10002c92:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
10002c96:	83 c4 1c             	add    esp,0x1c
10002c99:	5b                   	pop    ebx
10002c9a:	5e                   	pop    esi
10002c9b:	5f                   	pop    edi
10002c9c:	5d                   	pop    ebp
10002c9d:	e9 fc ff ff ff       	jmp    10002c9e <Region::applyBoundClipping(int, List<CRect*>*)+0x208>	10002c9e: R_386_PC32	operator delete(void*, unsigned long)
10002ca2:	83 c4 1c             	add    esp,0x1c
10002ca5:	5b                   	pop    ebx
10002ca6:	5e                   	pop    esi
10002ca7:	5f                   	pop    edi
10002ca8:	5d                   	pop    ebp
10002ca9:	c3                   	ret    

10002caa <List<CRect*>::insertAtTail(CRect*)>:
10002caa:	53                   	push   ebx
10002cab:	83 ec 14             	sub    esp,0x14
10002cae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10002cb2:	6a 0c                	push   0xc
10002cb4:	e8 fc ff ff ff       	call   10002cb5 <List<CRect*>::insertAtTail(CRect*)+0xb>	10002cb5: R_386_PC32	malloc
10002cb9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10002cbd:	89 10                	mov    DWORD PTR [eax],edx
10002cbf:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10002cc2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10002cc5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10002ccc:	83 c4 10             	add    esp,0x10
10002ccf:	85 d2                	test   edx,edx
10002cd1:	74 05                	je     10002cd8 <List<CRect*>::insertAtTail(CRect*)+0x2e>
10002cd3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
10002cd6:	eb 02                	jmp    10002cda <List<CRect*>::insertAtTail(CRect*)+0x30>
10002cd8:	89 03                	mov    DWORD PTR [ebx],eax
10002cda:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10002cdd:	83 c4 08             	add    esp,0x8
10002ce0:	5b                   	pop    ebx
10002ce1:	c3                   	ret    

10002ce2 <List<CRect*>::deleteHead()>:
10002ce2:	56                   	push   esi
10002ce3:	53                   	push   ebx
10002ce4:	51                   	push   ecx
10002ce5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002ce9:	8b 06                	mov    eax,DWORD PTR [esi]
10002ceb:	85 c0                	test   eax,eax
10002ced:	74 26                	je     10002d15 <List<CRect*>::deleteHead()+0x33>
10002cef:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002cf2:	52                   	push   edx
10002cf3:	52                   	push   edx
10002cf4:	6a 0c                	push   0xc
10002cf6:	50                   	push   eax
10002cf7:	e8 fc ff ff ff       	call   10002cf8 <List<CRect*>::deleteHead()+0x16>	10002cf8: R_386_PC32	operator delete(void*, unsigned long)
10002cfc:	89 1e                	mov    DWORD PTR [esi],ebx
10002cfe:	83 c4 10             	add    esp,0x10
10002d01:	85 db                	test   ebx,ebx
10002d03:	75 09                	jne    10002d0e <List<CRect*>::deleteHead()+0x2c>
10002d05:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10002d0c:	eb 07                	jmp    10002d15 <List<CRect*>::deleteHead()+0x33>
10002d0e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10002d15:	58                   	pop    eax
10002d16:	5b                   	pop    ebx
10002d17:	5e                   	pop    esi
10002d18:	c3                   	ret    
10002d19:	90                   	nop

10002d1a <List<CRect*>::~List()>:
10002d1a:	53                   	push   ebx
10002d1b:	83 ec 08             	sub    esp,0x8
10002d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002d22:	8b 00                	mov    eax,DWORD PTR [eax]
10002d24:	85 c0                	test   eax,eax
10002d26:	74 14                	je     10002d3c <List<CRect*>::~List()+0x22>
10002d28:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002d2b:	51                   	push   ecx
10002d2c:	51                   	push   ecx
10002d2d:	6a 0c                	push   0xc
10002d2f:	50                   	push   eax
10002d30:	e8 fc ff ff ff       	call   10002d31 <List<CRect*>::~List()+0x17>	10002d31: R_386_PC32	operator delete(void*, unsigned long)
10002d35:	89 d8                	mov    eax,ebx
10002d37:	83 c4 10             	add    esp,0x10
10002d3a:	eb e8                	jmp    10002d24 <List<CRect*>::~List()+0xa>
10002d3c:	83 c4 08             	add    esp,0x8
10002d3f:	5b                   	pop    ebx
10002d40:	c3                   	ret    
10002d41:	43                   	inc    ebx
10002d42:	4c                   	dec    esp
10002d43:	49                   	dec    ecx
10002d44:	50                   	push   eax
10002d45:	44                   	inc    esp
10002d46:	52                   	push   edx
10002d47:	41                   	inc    ecx
10002d48:	57                   	push   edi
10002d49:	20 53 54             	and    BYTE PTR [ebx+0x54],dl
10002d4c:	41                   	inc    ecx
10002d4d:	52                   	push   edx
10002d4e:	54                   	push   esp
10002d4f:	45                   	inc    ebp
10002d50:	44                   	inc    esp
10002d51:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002d54:	54                   	push   esp
10002d55:	68 65 20 53 79       	push   0x79532065
10002d5a:	73 74                	jae    10002dd0 <List<CRect*>::~List()+0xb6>
10002d5c:	65 6d                	gs ins DWORD PTR es:[edi],dx
10002d5e:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10002d61:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d62:	74 21                	je     10002d85 <List<CRect*>::~List()+0x6b>
10002d64:	00 54 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dl
10002d68:	65 73 20             	gs jae 10002d8b <List<CRect*>::~List()+0x71>
10002d6b:	4e                   	dec    esi
10002d6c:	65 77 20             	gs ja  10002d8f <List<CRect*>::~List()+0x75>
10002d6f:	52                   	push   edx
10002d70:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002d71:	6d                   	ins    DWORD PTR es:[edi],dx
10002d72:	61                   	popa   
10002d73:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d74:	21 00                	and    DWORD PTR [eax],eax
10002d76:	43                   	inc    ebx
10002d77:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002d78:	6d                   	ins    DWORD PTR es:[edi],dx
10002d79:	69 63 20 53 61 6e 73 	imul   esp,DWORD PTR [ebx+0x20],0x736e6153
10002d80:	21 20                	and    DWORD PTR [eax],esp
10002d82:	3a 29                	cmp    ch,BYTE PTR [ecx]
10002d84:	00 41 72             	add    BYTE PTR [ecx+0x72],al
10002d87:	69 61 6c 20 69 73 20 	imul   esp,DWORD PTR [ecx+0x6c],0x20736920
10002d8e:	73 6f                	jae    10002dff <List<CRect*>::~List()+0xe5>
10002d90:	20 62 6f             	and    BYTE PTR [edx+0x6f],ah
10002d93:	72 69                	jb     10002dfe <List<CRect*>::~List()+0xe4>
10002d95:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d96:	67 2e 2e 2e 00 43 6f 	cs cs add BYTE PTR cs:[bp+di+0x6f],al
10002d9d:	75 72                	jne    10002e11 <List<CRect*>::~List()+0xf7>
10002d9f:	69 65 72 20 66 6f 72 	imul   esp,DWORD PTR [ebp+0x72],0x726f6620
10002da6:	20 70 72             	and    BYTE PTR [eax+0x72],dh
10002da9:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002daa:	67 72 61             	addr16 jb 10002e0e <List<CRect*>::~List()+0xf4>
10002dad:	6d                   	ins    DWORD PTR es:[edi],dx
10002dae:	6d                   	ins    DWORD PTR es:[edi],dx
10002daf:	69 6e 67 2e 2e 2e 00 	imul   ebp,DWORD PTR [esi+0x67],0x2e2e2e
10002db6:	50                   	push   eax
10002db7:	55                   	push   ebp
10002db8:	54                   	push   esp
10002db9:	20 4d 4f             	and    BYTE PTR [ebp+0x4f],cl
10002dbc:	55                   	push   ebp
10002dbd:	53                   	push   ebx
10002dbe:	45                   	inc    ebp
10002dbf:	20 49 4e             	and    BYTE PTR [ecx+0x4e],cl
10002dc2:	20 54 4f 50          	and    BYTE PTR [edi+ecx*2+0x50],dl
10002dc6:	20 52 49             	and    BYTE PTR [edx+0x49],dl
10002dc9:	47                   	inc    edi
10002dca:	48                   	dec    eax
10002dcb:	54                   	push   esp
10002dcc:	20 43 4f             	and    BYTE PTR [ebx+0x4f],al
10002dcf:	52                   	push   edx
10002dd0:	4e                   	dec    esi
10002dd1:	45                   	inc    ebp
10002dd2:	52                   	push   edx
10002dd3:	20 54 4f 20          	and    BYTE PTR [edi+ecx*2+0x20],dl
10002dd7:	54                   	push   esp
10002dd8:	45                   	inc    ebp
10002dd9:	53                   	push   ebx
10002dda:	54                   	push   esp
10002ddb:	20 42 53             	and    BYTE PTR [edx+0x53],al
10002dde:	4f                   	dec    edi
10002ddf:	44                   	inc    esp
10002de0:	00 66 90             	add    BYTE PTR [esi-0x70],ah
10002de3:	90                   	nop
10002de4:	7c 08                	jl     10002dee <List<CRect*>::~List()+0xd4>	10002de4: R_386_32	.text
10002de6:	00 10                	add    BYTE PTR [eax],dl
10002de8:	83 08 00             	or     DWORD PTR [eax],0x0	10002de8: R_386_32	.text
10002deb:	10 8a 08 00 10 91    	adc    BYTE PTR [edx-0x6eeffff8],cl	10002dec: R_386_32	.text
	10002df0: R_386_32	.text
10002df1:	08 00                	or     BYTE PTR [eax],al
10002df3:	10 98 08 00 10 9d    	adc    BYTE PTR [eax-0x62effff8],bl	10002df4: R_386_32	.text
	10002df8: R_386_32	.text
10002df9:	08 00                	or     BYTE PTR [eax],al
10002dfb:	10 a6 08 00 10 af    	adc    BYTE PTR [esi-0x50effff8],ah	10002dfc: R_386_32	.text
	10002e00: R_386_32	.text
10002e01:	08 00                	or     BYTE PTR [eax],al
10002e03:	10 b8 08 00 10 d4    	adc    BYTE PTR [eax-0x2beffff8],bh	10002e04: R_386_32	.text
	10002e08: R_386_32	.text
10002e09:	08 00                	or     BYTE PTR [eax],al
10002e0b:	10 dd                	adc    ch,bl	10002e0c: R_386_32	.text
10002e0d:	08 00                	or     BYTE PTR [eax],al
10002e0f:	10 e9                	adc    cl,ch	10002e10: R_386_32	.text
10002e11:	08 00                	or     BYTE PTR [eax],al
10002e13:	10 f1                	adc    cl,dh	10002e14: R_386_32	.text
10002e15:	08 00                	or     BYTE PTR [eax],al
10002e17:	10 f9                	adc    cl,bh	10002e18: R_386_32	.text
10002e19:	08 00                	or     BYTE PTR [eax],al
10002e1b:	10 0e                	adc    BYTE PTR [esi],cl	10002e1c: R_386_32	.text
10002e1d:	09 00                	or     DWORD PTR [eax],eax
10002e1f:	10 43 3a             	adc    BYTE PTR [ebx+0x3a],al
10002e22:	2f                   	das    
10002e23:	42                   	inc    edx
10002e24:	61                   	popa   
10002e25:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e26:	61                   	popa   
10002e27:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e28:	61                   	popa   
10002e29:	2f                   	das    
10002e2a:	43                   	inc    ebx
10002e2b:	75 72                	jne    10002e9f <List<CRect*>::~List()+0x185>
10002e2d:	73 6f                	jae    10002e9e <List<CRect*>::~List()+0x184>
10002e2f:	72 73                	jb     10002ea4 <List<CRect*>::~List()+0x18a>
10002e31:	2f                   	das    
10002e32:	53                   	push   ebx
10002e33:	54                   	push   esp
10002e34:	41                   	inc    ecx
10002e35:	4e                   	dec    esi
10002e36:	44                   	inc    esp
10002e37:	41                   	inc    ecx
10002e38:	52                   	push   edx
10002e39:	44                   	inc    esp
10002e3a:	2e 43                	cs inc ebx
10002e3c:	55                   	push   ebp
10002e3d:	52                   	push   edx
10002e3e:	00 43 55             	add    BYTE PTR [ebx+0x55],al
10002e41:	52                   	push   edx
10002e42:	53                   	push   ebx
10002e43:	4f                   	dec    edi
10002e44:	52                   	push   edx
10002e45:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002e49:	44                   	inc    esp
10002e4a:	3a 20                	cmp    ah,BYTE PTR [eax]
10002e4c:	42                   	inc    edx
10002e4d:	41                   	inc    ecx
10002e4e:	44                   	inc    esp
10002e4f:	20 31                	and    BYTE PTR [ecx],dh
10002e51:	0a 00                	or     al,BYTE PTR [eax]
10002e53:	43                   	inc    ebx
10002e54:	55                   	push   ebp
10002e55:	52                   	push   edx
10002e56:	53                   	push   ebx
10002e57:	4f                   	dec    edi
10002e58:	52                   	push   edx
10002e59:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002e5d:	44                   	inc    esp
10002e5e:	3a 20                	cmp    ah,BYTE PTR [eax]
10002e60:	42                   	inc    edx
10002e61:	41                   	inc    ecx
10002e62:	44                   	inc    esp
10002e63:	20 32                	and    BYTE PTR [edx],dh
10002e65:	0a 00                	or     al,BYTE PTR [eax]
10002e67:	43                   	inc    ebx
10002e68:	55                   	push   ebp
10002e69:	52                   	push   edx
10002e6a:	53                   	push   ebx
10002e6b:	4f                   	dec    edi
10002e6c:	52                   	push   edx
10002e6d:	53                   	push   ebx
10002e6e:	3a 20                	cmp    ah,BYTE PTR [eax]
10002e70:	25 64 0a 00 4e       	and    eax,0x4e000a64
10002e75:	52                   	push   edx
10002e76:	4d                   	dec    ebp
10002e77:	4c                   	dec    esp
10002e78:	00 57 41             	add    BYTE PTR [edi+0x41],dl
10002e7b:	49                   	dec    ecx
10002e7c:	54                   	push   esp
10002e7d:	00 54 4c 44          	add    BYTE PTR [esp+ecx*2+0x44],dl
10002e81:	52                   	push   edx
10002e82:	00 54 45 58          	add    BYTE PTR [ebp+eax*2+0x58],dl
10002e86:	54                   	push   esp
10002e87:	00 56 45             	add    BYTE PTR [esi+0x45],dl
10002e8a:	52                   	push   edx
10002e8b:	54                   	push   esp
10002e8c:	00 48 4f             	add    BYTE PTR [eax+0x4f],cl
10002e8f:	52                   	push   edx
10002e90:	5a                   	pop    edx
10002e91:	00 48 41             	add    BYTE PTR [eax+0x41],cl
10002e94:	4e                   	dec    esi
10002e95:	44                   	inc    esp
10002e96:	00 43 55             	add    BYTE PTR [ebx+0x55],al
10002e99:	52                   	push   edx
10002e9a:	53                   	push   ebx
10002e9b:	4f                   	dec    edi
10002e9c:	52                   	push   edx
10002e9d:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002ea1:	44                   	inc    esp
10002ea2:	3a 20                	cmp    ah,BYTE PTR [eax]
10002ea4:	42                   	inc    edx
10002ea5:	41                   	inc    ecx
10002ea6:	44                   	inc    esp
10002ea7:	20 33                	and    BYTE PTR [ebx],dh
10002ea9:	0a 00                	or     al,BYTE PTR [eax]
10002eab:	61                   	popa   
10002eac:	6c                   	ins    BYTE PTR es:[edi],dx
10002ead:	6c                   	ins    BYTE PTR es:[edi],dx
10002eae:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002eaf:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
10002eb2:	69 6e 67 20 74 68 65 	imul   ebp,DWORD PTR [esi+0x67],0x65687420
10002eb9:	20 63 68             	and    BYTE PTR [ebx+0x68],ah
10002ebc:	69 6c 64 20 64 69 6d 2e 	imul   ebp,DWORD PTR [esp+eiz*2+0x20],0x2e6d6964
10002ec4:	0a 00                	or     al,BYTE PTR [eax]
10002ec6:	63 68 69             	arpl   WORD PTR [eax+0x69],bp
10002ec9:	6c                   	ins    BYTE PTR es:[edi],dx
10002eca:	64 44                	fs inc esp
10002ecc:	69 6d 20 3d 20 30 78 	imul   ebp,DWORD PTR [ebp+0x20],0x7830203d
10002ed3:	25 58 0a 00 4e       	and    eax,0x4e000a58
10002ed8:	4f                   	dec    edi
10002ed9:	20 43 48             	and    BYTE PTR [ebx+0x48],al
10002edc:	49                   	dec    ecx
10002edd:	4c                   	dec    esp
10002ede:	44                   	inc    esp
10002edf:	20 44 49 4d          	and    BYTE PTR [ecx+ecx*2+0x4d],al
10002ee3:	00 70 72             	add    BYTE PTR [eax+0x72],dh
10002ee6:	65 2d 65 6d 70 74    	gs sub eax,0x74706d65
10002eec:	69 76 65 20 47 44 4f 	imul   esi,DWORD PTR [esi+0x65],0x4f444720
10002ef3:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002ef5:	73 63                	jae    10002f5a <List<CRect*>::~List()+0x240>
10002ef7:	72 65                	jb     10002f5e <List<CRect*>::~List()+0x244>
10002ef9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10002efb:	58                   	pop    eax
10002efc:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
10002eff:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002f02:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002f03:	2d 72 65 67 69       	sub    eax,0x69676572
10002f08:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002f09:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002f0a:	00 70 72             	add    BYTE PTR [eax+0x72],dh
10002f0d:	65 2d 65 6d 70 74    	gs sub eax,0x74706d65
10002f13:	69 76 65 20 47 44 4f 	imul   esi,DWORD PTR [esi+0x65],0x4f444720
10002f1a:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002f1c:	73 63                	jae    10002f81 <List<CRect*>::~List()+0x267>
10002f1e:	72 65                	jb     10002f85 <List<CRect*>::~List()+0x26b>
10002f20:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10002f22:	59                   	pop    ecx
10002f23:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
10002f26:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002f29:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002f2a:	2d 72 65 67 69       	sub    eax,0x69676572
10002f2f:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002f30:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002f31:	00 55 50             	add    BYTE PTR [ebp+0x50],dl
10002f34:	44                   	inc    esp
10002f35:	41                   	inc    ecx
10002f36:	54                   	push   esp
10002f37:	45                   	inc    ebp
10002f38:	20 43 41             	and    BYTE PTR [ebx+0x41],al
10002f3b:	4c                   	dec    esp
10002f3c:	4c                   	dec    esp
10002f3d:	45                   	inc    ebp
10002f3e:	44                   	inc    esp
10002f3f:	20 4f 4e             	and    BYTE PTR [edi+0x4e],cl
10002f42:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10002f45:	4e                   	dec    esi
10002f46:	2d 52 45 47 49       	sub    eax,0x49474552
10002f4b:	4f                   	dec    edi
10002f4c:	4e                   	dec    esi
10002f4d:	00 47 44             	add    BYTE PTR [edi+0x44],al
10002f50:	4f                   	dec    edi
10002f51:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002f53:	61                   	popa   
10002f54:	64 64 43             	fs fs inc ebx
10002f57:	68 69 6c 64 20       	push   0x20646c69
10002f5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002f5d:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002f5e:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002f61:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002f62:	2d 72 65 67 69       	sub    eax,0x69676572
10002f67:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002f68:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002f69:	00 43 52             	add    BYTE PTR [ebx+0x52],al
10002f6c:	45                   	inc    ebp
10002f6d:	41                   	inc    ecx
10002f6e:	54                   	push   esp
10002f6f:	49                   	dec    ecx
10002f70:	4e                   	dec    esi
10002f71:	47                   	inc    edi
10002f72:	20 41 20             	and    BYTE PTR [ecx+0x20],al
10002f75:	4e                   	dec    esi
10002f76:	45                   	inc    ebp
10002f77:	57                   	push   edi
10002f78:	20 44 49 4d          	and    BYTE PTR [ecx+ecx*2+0x4d],al
10002f7c:	20 41 54             	and    BYTE PTR [ecx+0x54],al
10002f7f:	20 25 64 0a 00 63    	and    BYTE PTR ds:0x63000a64,ah
10002f85:	68 69 6c 64 44       	push   0x44646c69
10002f8a:	69 6d 5b 6e 6f 74 44 	imul   ebp,DWORD PTR [ebp+0x5b],0x44746f6e
10002f91:	69 6d 5d 20 3d 20 30 	imul   ebp,DWORD PTR [ebp+0x5d],0x30203d20
10002f98:	78 25                	js     10002fbf <List<CRect*>::~List()+0x2a5>
10002f9a:	58                   	pop    eax
10002f9b:	0a 00                	or     al,BYTE PTR [eax]
10002f9d:	47                   	inc    edi
10002f9e:	44                   	inc    esp
10002f9f:	4f                   	dec    edi
10002fa0:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002fa2:	61                   	popa   
10002fa3:	64 64 43             	fs fs inc ebx
10002fa6:	68 69 6c 64 20       	push   0x20646c69
10002fab:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002fac:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002fad:	20 6d 6f             	and    BYTE PTR [ebp+0x6f],ch
10002fb0:	72 65                	jb     10003017 <List<CRect*>::~List()+0x2fd>
10002fb2:	20 73 6c             	and    BYTE PTR [ebx+0x6c],dh
10002fb5:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002fb6:	74 73                	je     1000302b <List<CRect*>::~List()+0x311>
10002fb8:	20 6c 65 66          	and    BYTE PTR [ebp+eiz*2+0x66],ch
10002fbc:	74 21                	je     10002fdf <List<CRect*>::~List()+0x2c5>
10002fbe:	00 47 44             	add    BYTE PTR [edi+0x44],al
10002fc1:	4f                   	dec    edi
10002fc2:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002fc4:	72 65                	jb     1000302b <List<CRect*>::~List()+0x311>
10002fc6:	6d                   	ins    DWORD PTR es:[edi],dx
10002fc7:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002fc8:	76 65                	jbe    1000302f <List<CRect*>::~List()+0x315>
10002fca:	43                   	inc    ebx
10002fcb:	68 69 6c 64 20       	push   0x20646c69
10002fd0:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002fd1:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002fd2:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002fd5:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002fd6:	2d 72 65 67 69       	sub    eax,0x69676572
10002fdb:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002fdc:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002fdd:	00 4c 4f 41          	add    BYTE PTR [edi+ecx*2+0x41],cl
10002fe1:	44                   	inc    esp
10002fe2:	49                   	dec    ecx
10002fe3:	4e                   	dec    esi
10002fe4:	47                   	inc    edi
10002fe5:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10002fe9:	41                   	inc    ecx
10002fea:	43                   	inc    ebx
10002feb:	59                   	pop    ecx
10002fec:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002fef:	4e                   	dec    esi
10002ff0:	54                   	push   esp
10002ff1:	20 57 49             	and    BYTE PTR [edi+0x49],dl
10002ff4:	54                   	push   esp
10002ff5:	48                   	dec    eax
10002ff6:	20 4e 41             	and    BYTE PTR [esi+0x41],cl
10002ff9:	4d                   	dec    ebp
10002ffa:	45                   	inc    ebp
10002ffb:	20 27                	and    BYTE PTR [edi],ah
10002ffd:	25 73 27 0a 00       	and    eax,0xa2773
10003002:	43                   	inc    ebx
10003003:	41                   	inc    ecx
10003004:	4e                   	dec    esi
10003005:	4e                   	dec    esi
10003006:	4f                   	dec    edi
10003007:	54                   	push   esp
10003008:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
1000300c:	44                   	inc    esp
1000300d:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10003010:	4e                   	dec    esi
10003011:	54                   	push   esp
10003012:	53                   	push   ebx
10003013:	00 46 6f             	add    BYTE PTR [esi+0x6f],al
10003016:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003017:	74 4e                	je     10003067 <List<CRect*>::~List()+0x34d>
10003019:	61                   	popa   
1000301a:	6d                   	ins    DWORD PTR es:[edi],dx
1000301b:	65 73 5b             	gs jae 10003079 <List<CRect*>::~List()+0x35f>
1000301e:	25 64 5d 20 3d       	and    eax,0x3d205d64
10003023:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10003029:	59                   	pop    ecx
1000302a:	53                   	push   ebx
1000302b:	54                   	push   esp
1000302c:	45                   	inc    ebp
1000302d:	4d                   	dec    ebp
1000302e:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10003031:	2f                   	das    
10003032:	42                   	inc    edx
10003033:	41                   	inc    ecx
10003034:	4e                   	dec    esi
10003035:	41                   	inc    ecx
10003036:	4e                   	dec    esi
10003037:	41                   	inc    ecx
10003038:	2f                   	das    
10003039:	46                   	inc    esi
1000303a:	4f                   	dec    edi
1000303b:	4e                   	dec    esi
1000303c:	54                   	push   esp
1000303d:	53                   	push   ebx
1000303e:	2f                   	das    
1000303f:	4c                   	dec    esp
10003040:	45                   	inc    ebp
10003041:	47                   	inc    edi
10003042:	41                   	inc    ecx
10003043:	43                   	inc    ebx
10003044:	59                   	pop    ecx
10003045:	00 64 69 72          	add    BYTE PTR [ecx+ebp*2+0x72],ah
10003049:	2d 3e 72 65 61       	sub    eax,0x6165723e
1000304e:	64 2e 20 73 74       	fs and BYTE PTR cs:[ebx+0x74],dh
10003053:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10003059:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
1000305c:	2f                   	das    
1000305d:	42                   	inc    edx
1000305e:	41                   	inc    ecx
1000305f:	4e                   	dec    esi
10003060:	41                   	inc    ecx
10003061:	4e                   	dec    esi
10003062:	41                   	inc    ecx
10003063:	2f                   	das    
10003064:	46                   	inc    esi
10003065:	4f                   	dec    edi
10003066:	4e                   	dec    esi
10003067:	54                   	push   esp
10003068:	53                   	push   ebx
10003069:	2f                   	das    
1000306a:	4c                   	dec    esp
1000306b:	45                   	inc    ebp
1000306c:	47                   	inc    edi
1000306d:	41                   	inc    ecx
1000306e:	43                   	inc    ebx
1000306f:	59                   	pop    ecx
10003070:	2f                   	das    
10003071:	00 64 70 20          	add    BYTE PTR [eax+esi*2+0x20],ah
10003075:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003076:	61                   	popa   
10003077:	6d                   	ins    DWORD PTR es:[edi],dx
10003078:	65 20 3d 20 25 73 0a 	and    BYTE PTR gs:0xa732520,bh
1000307f:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10003082:	2f                   	das    
10003083:	42                   	inc    edx
10003084:	61                   	popa   
10003085:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003086:	61                   	popa   
10003087:	6e                   	outs   dx,BYTE PTR ds:[esi]
10003088:	61                   	popa   
10003089:	2f                   	das    
1000308a:	46                   	inc    esi
1000308b:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000308c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000308d:	74 73                	je     10003102 <List<CRect*>::~List()+0x3e8>
1000308f:	2f                   	das    
10003090:	4c                   	dec    esp
10003091:	65 67 61             	gs addr16 popa 
10003094:	63 79 2f             	arpl   WORD PTR [ecx+0x2f],di
10003097:	00 2e                	add    BYTE PTR [esi],ch
10003099:	46                   	inc    esi
1000309a:	4e                   	dec    esi
1000309b:	54                   	push   esp
1000309c:	00 25 73 20 76 73    	add    BYTE PTR ds:0x73762073,ah
100030a2:	2e 20 25 73 0a 00 46 	and    BYTE PTR cs:0x46000a73,ah
100030a9:	4f                   	dec    edi
100030aa:	55                   	push   ebp
100030ab:	4e                   	dec    esi
100030ac:	44                   	inc    esp
100030ad:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
100030b1:	41                   	inc    ecx
100030b2:	43                   	inc    ebx
100030b3:	59                   	pop    ecx
100030b4:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
100030b7:	4e                   	dec    esi
100030b8:	54                   	push   esp
100030b9:	20 27                	and    BYTE PTR [edi],ah
100030bb:	25 73 27 20 57       	and    eax,0x57202773
100030c0:	49                   	dec    ecx
100030c1:	54                   	push   esp
100030c2:	48                   	dec    eax
100030c3:	20 49 44             	and    BYTE PTR [ecx+0x44],cl
100030c6:	20 25 64 2e 0a 00    	and    BYTE PTR ds:0xa2e64,ah
100030cc:	43                   	inc    ebx
100030cd:	4f                   	dec    edi
100030ce:	55                   	push   ebp
100030cf:	4c                   	dec    esp
100030d0:	44                   	inc    esp
100030d1:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
100030d4:	54                   	push   esp
100030d5:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
100030d9:	44                   	inc    esp
100030da:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
100030de:	41                   	inc    ecx
100030df:	43                   	inc    ebx
100030e0:	59                   	pop    ecx
100030e1:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
100030e4:	4e                   	dec    esi
100030e5:	54                   	push   esp
100030e6:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
100030e9:	4c                   	dec    esp
100030ea:	4f                   	dec    edi
100030eb:	41                   	inc    ecx
100030ec:	44                   	inc    esp
100030ed:	45                   	inc    ebp
100030ee:	44                   	inc    esp
100030ef:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
100030f3:	41                   	inc    ecx
100030f4:	43                   	inc    ebx
100030f5:	59                   	pop    ecx
100030f6:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
100030f9:	4e                   	dec    esi
100030fa:	54                   	push   esp
100030fb:	20 25 73 20 54 4f    	and    BYTE PTR ds:0x4f542073,ah
10003101:	20 49 44             	and    BYTE PTR [ecx+0x44],cl
10003104:	20 25 64 2e 0a 00    	and    BYTE PTR ds:0xa2e64,ah
1000310a:	43                   	inc    ebx
1000310b:	4f                   	dec    edi
1000310c:	55                   	push   ebp
1000310d:	52                   	push   edx
1000310e:	49                   	dec    ecx
1000310f:	45                   	inc    ebp
10003110:	52                   	push   edx
10003111:	00 43 4f             	add    BYTE PTR [ebx+0x4f],al
10003114:	55                   	push   ebp
10003115:	52                   	push   edx
10003116:	49                   	dec    ecx
10003117:	45                   	inc    ebp
10003118:	52                   	push   edx
10003119:	58                   	pop    eax
1000311a:	00 54 49 4d          	add    BYTE PTR [ecx+ecx*2+0x4d],dl
1000311e:	45                   	inc    ebp
1000311f:	53                   	push   ebx
10003120:	4e                   	dec    esi
10003121:	52                   	push   edx
10003122:	00 41 52             	add    BYTE PTR [ecx+0x52],al
10003125:	49                   	dec    ecx
10003126:	41                   	inc    ecx
10003127:	4c                   	dec    esp
10003128:	00 43 4f             	add    BYTE PTR [ebx+0x4f],al
1000312b:	4d                   	dec    ebp
1000312c:	49                   	dec    ecx
1000312d:	43                   	inc    ebx
1000312e:	53                   	push   ebx
1000312f:	41                   	inc    ecx
10003130:	4e                   	dec    esi
10003131:	00 66 90             	add    BYTE PTR [esi-0x70],ah
10003134:	6a 27                	push   0x27	10003134: R_386_32	.text
10003136:	00 10                	add    BYTE PTR [eax],dl
10003138:	74 27                	je     10003161 <mouse_data+0x1>	10003138: R_386_32	.text
1000313a:	00 10                	add    BYTE PTR [eax],dl
1000313c:	7e 27                	jle    10003165 <mouse_data+0x5>	1000313c: R_386_32	.text
1000313e:	00 10                	add    BYTE PTR [eax],dl
10003140:	88 27                	mov    BYTE PTR [edi],ah	10003140: R_386_32	.text
10003142:	00 10                	add    BYTE PTR [eax],dl
10003144:	92                   	xchg   edx,eax	10003144: R_386_32	.text
10003145:	27                   	daa    
10003146:	00 10                	add    BYTE PTR [eax],dl
10003148:	9c                   	pushf  	10003148: R_386_32	.text
10003149:	27                   	daa    
1000314a:	00 10                	add    BYTE PTR [eax],dl
