
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	57                   	push   edi
10000001:	56                   	push   esi
10000002:	53                   	push   ebx
10000003:	83 ec 0c             	sub    esp,0xc
10000006:	68 f3 0d 00 10       	push   0x10000df3	10000007: R_386_32	.text
1000000b:	e8 fc ff ff ff       	call   1000000c <start(void*)+0xc>	1000000c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000010:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10000017:	e8 fc ff ff ff       	call   10000018 <start(void*)+0x18>	10000018: R_386_PC32	operator new(unsigned long)
1000001c:	89 c3                	mov    ebx,eax
1000001e:	58                   	pop    eax
1000001f:	5a                   	pop    edx
10000020:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000022: R_386_32	screen
10000026:	53                   	push   ebx
10000027:	e8 fc ff ff ff       	call   10000028 <start(void*)+0x28>	10000028: R_386_PC32	Context::Context(Video*)
1000002c:	c7 04 24 24 00 00 00 	mov    DWORD PTR [esp],0x24
10000033:	e8 fc ff ff ff       	call   10000034 <start(void*)+0x34>	10000034: R_386_PC32	operator new(unsigned long)
10000038:	89 c6                	mov    esi,eax
1000003a:	59                   	pop    ecx
1000003b:	5f                   	pop    edi
1000003c:	53                   	push   ebx
1000003d:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10000040:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10000043:	6a 00                	push   0x0
10000045:	6a 00                	push   0x0
10000047:	50                   	push   eax
10000048:	e8 fc ff ff ff       	call   10000049 <start(void*)+0x49>	10000049: R_386_PC32	Region::Region(int, int, int, int, Context*)
1000004d:	83 c4 14             	add    esp,0x14
10000050:	6a 20                	push   0x20
10000052:	e8 fc ff ff ff       	call   10000053 <start(void*)+0x53>	10000053: R_386_PC32	operator new(unsigned long)
10000057:	5a                   	pop    edx
10000058:	59                   	pop    ecx
10000059:	6a 06                	push   0x6
1000005b:	50                   	push   eax
1000005c:	e8 fc ff ff ff       	call   1000005d <start(void*)+0x5d>	1000005d: R_386_PC32	Brush::Brush(BrushType)
10000061:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000068:	e8 fc ff ff ff       	call   10000069 <start(void*)+0x69>	10000069: R_386_PC32	operator new(unsigned long)
1000006d:	5f                   	pop    edi
1000006e:	5a                   	pop    edx
1000006f:	6a 07                	push   0x7
10000071:	50                   	push   eax
10000072:	e8 fc ff ff ff       	call   10000073 <start(void*)+0x73>	10000073: R_386_PC32	Brush::Brush(BrushType)
10000077:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000007e:	e8 fc ff ff ff       	call   1000007f <start(void*)+0x7f>	1000007f: R_386_PC32	operator new(unsigned long)
10000083:	59                   	pop    ecx
10000084:	5f                   	pop    edi
10000085:	6a 08                	push   0x8
10000087:	50                   	push   eax
10000088:	e8 fc ff ff ff       	call   10000089 <start(void*)+0x89>	10000089: R_386_PC32	Brush::Brush(BrushType)
1000008d:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000094:	e8 fc ff ff ff       	call   10000095 <start(void*)+0x95>	10000095: R_386_PC32	operator new(unsigned long)
10000099:	5a                   	pop    edx
1000009a:	59                   	pop    ecx
1000009b:	6a 0a                	push   0xa
1000009d:	50                   	push   eax
1000009e:	e8 fc ff ff ff       	call   1000009f <start(void*)+0x9f>	1000009f: R_386_PC32	Brush::Brush(BrushType)
100000a3:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000aa:	e8 fc ff ff ff       	call   100000ab <start(void*)+0xab>	100000ab: R_386_PC32	operator new(unsigned long)
100000af:	5f                   	pop    edi
100000b0:	5a                   	pop    edx
100000b1:	6a 09                	push   0x9
100000b3:	50                   	push   eax
100000b4:	e8 fc ff ff ff       	call   100000b5 <start(void*)+0xb5>	100000b5: R_386_PC32	Brush::Brush(BrushType)
100000b9:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000c0:	e8 fc ff ff ff       	call   100000c1 <start(void*)+0xc1>	100000c1: R_386_PC32	operator new(unsigned long)
100000c5:	59                   	pop    ecx
100000c6:	5f                   	pop    edi
100000c7:	6a 0b                	push   0xb
100000c9:	50                   	push   eax
100000ca:	e8 fc ff ff ff       	call   100000cb <start(void*)+0xcb>	100000cb: R_386_PC32	Brush::Brush(BrushType)
100000cf:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000d6:	e8 fc ff ff ff       	call   100000d7 <start(void*)+0xd7>	100000d7: R_386_PC32	operator new(unsigned long)
100000db:	5a                   	pop    edx
100000dc:	59                   	pop    ecx
100000dd:	6a 0c                	push   0xc
100000df:	50                   	push   eax
100000e0:	e8 fc ff ff ff       	call   100000e1 <start(void*)+0xe1>	100000e1: R_386_PC32	Brush::Brush(BrushType)
100000e5:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000ec:	e8 fc ff ff ff       	call   100000ed <start(void*)+0xed>	100000ed: R_386_PC32	operator new(unsigned long)
100000f1:	5f                   	pop    edi
100000f2:	5a                   	pop    edx
100000f3:	6a 0d                	push   0xd
100000f5:	50                   	push   eax
100000f6:	e8 fc ff ff ff       	call   100000f7 <start(void*)+0xf7>	100000f7: R_386_PC32	Brush::Brush(BrushType)
100000fb:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000102:	e8 fc ff ff ff       	call   10000103 <start(void*)+0x103>	10000103: R_386_PC32	operator new(unsigned long)
10000107:	59                   	pop    ecx
10000108:	5f                   	pop    edi
10000109:	6a 0e                	push   0xe
1000010b:	50                   	push   eax
1000010c:	e8 fc ff ff ff       	call   1000010d <start(void*)+0x10d>	1000010d: R_386_PC32	Brush::Brush(BrushType)
10000111:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000118:	e8 fc ff ff ff       	call   10000119 <start(void*)+0x119>	10000119: R_386_PC32	operator new(unsigned long)
1000011d:	5a                   	pop    edx
1000011e:	59                   	pop    ecx
1000011f:	6a 00                	push   0x0
10000121:	50                   	push   eax
10000122:	e8 fc ff ff ff       	call   10000123 <start(void*)+0x123>	10000123: R_386_PC32	Brush::Brush(BrushType)
10000127:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000012e:	e8 fc ff ff ff       	call   1000012f <start(void*)+0x12f>	1000012f: R_386_PC32	operator new(unsigned long)
10000133:	5f                   	pop    edi
10000134:	5a                   	pop    edx
10000135:	6a 04                	push   0x4
10000137:	50                   	push   eax
10000138:	e8 fc ff ff ff       	call   10000139 <start(void*)+0x139>	10000139: R_386_PC32	Brush::Brush(BrushType)
1000013d:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000144:	e8 fc ff ff ff       	call   10000145 <start(void*)+0x145>	10000145: R_386_PC32	operator new(unsigned long)
10000149:	59                   	pop    ecx
1000014a:	5f                   	pop    edi
1000014b:	6a 0f                	push   0xf
1000014d:	50                   	push   eax
1000014e:	e8 fc ff ff ff       	call   1000014f <start(void*)+0x14f>	1000014f: R_386_PC32	Brush::Brush(BrushType)
10000153:	c7 04 24 24 00 00 00 	mov    DWORD PTR [esp],0x24
1000015a:	e8 fc ff ff ff       	call   1000015b <start(void*)+0x15b>	1000015b: R_386_PC32	operator new(unsigned long)
1000015f:	89 c7                	mov    edi,eax
10000161:	58                   	pop    eax
10000162:	5a                   	pop    edx
10000163:	53                   	push   ebx
10000164:	68 c8 00 00 00       	push   0xc8
10000169:	68 2c 01 00 00       	push   0x12c
1000016e:	6a 0a                	push   0xa
10000170:	6a 0a                	push   0xa
10000172:	57                   	push   edi
10000173:	e8 fc ff ff ff       	call   10000174 <start(void*)+0x174>	10000174: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000178:	83 c4 18             	add    esp,0x18
1000017b:	57                   	push   edi
1000017c:	56                   	push   esi
1000017d:	e8 fc ff ff ff       	call   1000017e <start(void*)+0x17e>	1000017e: R_386_PC32	GDO::addChild(GDO*)
10000182:	c7 04 24 24 00 00 00 	mov    DWORD PTR [esp],0x24
10000189:	e8 fc ff ff ff       	call   1000018a <start(void*)+0x18a>	1000018a: R_386_PC32	operator new(unsigned long)
1000018e:	89 c7                	mov    edi,eax
10000190:	59                   	pop    ecx
10000191:	58                   	pop    eax
10000192:	53                   	push   ebx
10000193:	68 2c 01 00 00       	push   0x12c
10000198:	68 c8 00 00 00       	push   0xc8
1000019d:	6a 64                	push   0x64
1000019f:	68 c8 00 00 00       	push   0xc8
100001a4:	57                   	push   edi
100001a5:	e8 fc ff ff ff       	call   100001a6 <start(void*)+0x1a6>	100001a6: R_386_PC32	Region::Region(int, int, int, int, Context*)
100001aa:	83 c4 18             	add    esp,0x18
100001ad:	57                   	push   edi
100001ae:	56                   	push   esi
100001af:	e8 fc ff ff ff       	call   100001b0 <start(void*)+0x1b0>	100001b0: R_386_PC32	GDO::addChild(GDO*)
100001b4:	89 34 24             	mov    DWORD PTR [esp],esi
100001b7:	e8 fc ff ff ff       	call   100001b8 <start(void*)+0x1b8>	100001b8: R_386_PC32	GDO::update()
100001bc:	83 c4 10             	add    esp,0x10
100001bf:	83 ec 0c             	sub    esp,0xc
100001c2:	6a 02                	push   0x2
100001c4:	e8 fc ff ff ff       	call   100001c5 <start(void*)+0x1c5>	100001c5: R_386_PC32	blockTask(TaskState)
100001c9:	eb f1                	jmp    100001bc <start(void*)+0x1bc>

100001cb <begin(void*)>:
100001cb:	83 ec 18             	sub    esp,0x18
100001ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100001d2:	e8 fc ff ff ff       	call   100001d3 <begin(void*)+0x8>	100001d3: R_386_PC32	start(void*)
100001d7:	90                   	nop

100001d8 <Brush::Brush(unsigned int, unsigned int)>:
100001d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100001dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100001e0:	89 10                	mov    DWORD PTR [eax],edx
100001e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100001e6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100001e9:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
100001f0:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
100001f7:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
100001fe:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
10000205:	c3                   	ret    

10000206 <Brush::Brush(BrushType)>:
10000206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000020a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000210:	c7 40 04 ff ff ff ff 	mov    DWORD PTR [eax+0x4],0xffffffff
10000217:	c6 40 10 ff          	mov    BYTE PTR [eax+0x10],0xff
1000021b:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
10000222:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
10000229:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10000230:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10000237:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000023b:	8d 51 ff             	lea    edx,[ecx-0x1]
1000023e:	83 fa 0e             	cmp    edx,0xe
10000241:	0f 87 ae 00 00 00    	ja     100002f5 <Brush::Brush(BrushType)+0xef>
10000247:	ff 24 95 08 0e 00 10 	jmp    DWORD PTR [edx*4+0x10000e08]	1000024a: R_386_32	.text
1000024e:	c7 00 aa aa aa 00    	mov    DWORD PTR [eax],0xaaaaaa
10000254:	c3                   	ret    
10000255:	c7 00 80 80 80 00    	mov    DWORD PTR [eax],0x808080
1000025b:	c3                   	ret    
1000025c:	c7 00 55 55 55 00    	mov    DWORD PTR [eax],0x555555
10000262:	c3                   	ret    
10000263:	c7 00 ff ff ff 00    	mov    DWORD PTR [eax],0xffffff
10000269:	c3                   	ret    
1000026a:	c6 40 10 00          	mov    BYTE PTR [eax+0x10],0x0
1000026e:	c3                   	ret    
1000026f:	c7 40 10 01 08 04 02 	mov    DWORD PTR [eax+0x10],0x2040801
10000276:	eb 6f                	jmp    100002e7 <Brush::Brush(BrushType)+0xe1>
10000278:	c7 40 10 01 02 04 08 	mov    DWORD PTR [eax+0x10],0x8040201
1000027f:	eb 66                	jmp    100002e7 <Brush::Brush(BrushType)+0xe1>
10000281:	c7 40 10 01 01 01 0f 	mov    DWORD PTR [eax+0x10],0xf010101
10000288:	eb 5d                	jmp    100002e7 <Brush::Brush(BrushType)+0xe1>
1000028a:	c7 40 10 08 14 22 01 	mov    DWORD PTR [eax+0x10],0x1221408
10000291:	66 c7 40 14 22 14    	mov    WORD PTR [eax+0x14],0x1422
10000297:	c7 40 18 06 00 00 00 	mov    DWORD PTR [eax+0x18],0x6
1000029e:	c7 40 1c 06 00 00 00 	mov    DWORD PTR [eax+0x1c],0x6
100002a5:	c3                   	ret    
100002a6:	c7 40 10 00 00 00 01 	mov    DWORD PTR [eax+0x10],0x1000000
100002ad:	eb 3f                	jmp    100002ee <Brush::Brush(BrushType)+0xe8>
100002af:	c6 40 10 02          	mov    BYTE PTR [eax+0x10],0x2
100002b3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
100002ba:	c3                   	ret    
100002bb:	66 c7 40 10 02 01    	mov    WORD PTR [eax+0x10],0x102
100002c1:	eb 0e                	jmp    100002d1 <Brush::Brush(BrushType)+0xcb>
100002c3:	66 c7 40 10 02 00    	mov    WORD PTR [eax+0x10],0x2
100002c9:	eb 06                	jmp    100002d1 <Brush::Brush(BrushType)+0xcb>
100002cb:	66 c7 40 10 03 02    	mov    WORD PTR [eax+0x10],0x203
100002d1:	c7 40 18 02 00 00 00 	mov    DWORD PTR [eax+0x18],0x2
100002d8:	c7 40 1c 02 00 00 00 	mov    DWORD PTR [eax+0x1c],0x2
100002df:	c3                   	ret    
100002e0:	c7 40 10 0c 0c 03 03 	mov    DWORD PTR [eax+0x10],0x3030c0c
100002e7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
100002ee:	c7 40 1c 04 00 00 00 	mov    DWORD PTR [eax+0x1c],0x4
100002f5:	c3                   	ret    

100002f6 <CRect::CRect()>:
100002f6:	c3                   	ret    
100002f7:	90                   	nop

100002f8 <CRect::CRect(int, int, int, int)>:
100002f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100002fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000300:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10000303:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000307:	89 10                	mov    DWORD PTR [eax],edx
10000309:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000030d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10000310:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000314:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000317:	c3                   	ret    

10000318 <Context::Context(Video*)>:
10000318:	53                   	push   ebx
10000319:	83 ec 14             	sub    esp,0x14
1000031c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000324:	89 03                	mov    DWORD PTR [ebx],eax
10000326:	50                   	push   eax
10000327:	e8 fc ff ff ff       	call   10000328 <Context::Context(Video*)+0x10>	10000328: R_386_PC32	Video::getWidth()
1000032c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000032f:	58                   	pop    eax
10000330:	ff 33                	push   DWORD PTR [ebx]
10000332:	e8 fc ff ff ff       	call   10000333 <Context::Context(Video*)+0x1b>	10000333: R_386_PC32	Video::getHeight()
10000337:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
1000033a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
10000341:	e8 fc ff ff ff       	call   10000342 <Context::Context(Video*)+0x2a>	10000342: R_386_PC32	malloc
10000346:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000034d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000353:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10000356:	83 c4 18             	add    esp,0x18
10000359:	5b                   	pop    ebx
1000035a:	c3                   	ret    
1000035b:	90                   	nop

1000035c <Context::clippedRect(int, int, int, int, CRect*, Brush*)>:
1000035c:	c3                   	ret    
1000035d:	90                   	nop

1000035e <Context::clippedRect(int, int, int, int, CRect*, unsigned int)>:
1000035e:	55                   	push   ebp
1000035f:	57                   	push   edi
10000360:	56                   	push   esi
10000361:	53                   	push   ebx
10000362:	83 ec 1c             	sub    esp,0x1c
10000365:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10000369:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
1000036d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10000371:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10000375:	01 c8                	add    eax,ecx
10000377:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000037b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
1000037f:	01 df                	add    edi,ebx
10000381:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000385:	8b 30                	mov    esi,DWORD PTR [eax]
10000387:	8b 2e                	mov    ebp,DWORD PTR [esi]
10000389:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000038d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10000391:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
10000394:	40                   	inc    eax
10000395:	39 f8                	cmp    eax,edi
10000397:	7e 02                	jle    1000039b <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x3d>
10000399:	89 f8                	mov    eax,edi
1000039b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
1000039f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
100003a2:	40                   	inc    eax
100003a3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
100003a7:	7e 04                	jle    100003ad <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x4f>
100003a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100003ad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
100003b1:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
100003b4:	39 d8                	cmp    eax,ebx
100003b6:	7d 02                	jge    100003ba <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x5c>
100003b8:	89 d8                	mov    eax,ebx
100003ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100003be:	8b 02                	mov    eax,DWORD PTR [edx]
100003c0:	39 c8                	cmp    eax,ecx
100003c2:	7d 02                	jge    100003c6 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x68>
100003c4:	89 c8                	mov    eax,ecx
100003c6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100003ca:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
100003ce:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
100003d1:	83 c4 1c             	add    esp,0x1c
100003d4:	5b                   	pop    ebx
100003d5:	5e                   	pop    esi
100003d6:	5f                   	pop    edi
100003d7:	5d                   	pop    ebp
100003d8:	ff e0                	jmp    eax

100003da <Context::fillRect(int, int, int, int, Brush*)>:
100003da:	c3                   	ret    
100003db:	90                   	nop

100003dc <Context::fillRect(int, int, int, int, unsigned int)>:
100003dc:	55                   	push   ebp
100003dd:	57                   	push   edi
100003de:	56                   	push   esi
100003df:	53                   	push   ebx
100003e0:	83 ec 2c             	sub    esp,0x2c
100003e3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
100003e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
100003eb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
100003ef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100003f3:	01 d8                	add    eax,ebx
100003f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100003f9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
100003fd:	01 fa                	add    edx,edi
100003ff:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
10000402:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
10000405:	85 db                	test   ebx,ebx
10000407:	79 02                	jns    1000040b <Context::fillRect(int, int, int, int, unsigned int)+0x2f>
10000409:	31 db                	xor    ebx,ebx
1000040b:	85 ff                	test   edi,edi
1000040d:	79 02                	jns    10000411 <Context::fillRect(int, int, int, int, unsigned int)+0x35>
1000040f:	31 ff                	xor    edi,edi
10000411:	89 e9                	mov    ecx,ebp
10000413:	3b 6c 24 04          	cmp    ebp,DWORD PTR [esp+0x4]
10000417:	7e 04                	jle    1000041d <Context::fillRect(int, int, int, int, unsigned int)+0x41>
10000419:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
1000041d:	29 d9                	sub    ecx,ebx
1000041f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
10000423:	89 c1                	mov    ecx,eax
10000425:	39 d0                	cmp    eax,edx
10000427:	7e 02                	jle    1000042b <Context::fillRect(int, int, int, int, unsigned int)+0x4f>
10000429:	89 d1                	mov    ecx,edx
1000042b:	29 f9                	sub    ecx,edi
1000042d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
10000431:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
10000434:	8b 0a                	mov    ecx,DWORD PTR [edx]
10000436:	31 d2                	xor    edx,edx
10000438:	85 c9                	test   ecx,ecx
1000043a:	74 06                	je     10000442 <Context::fillRect(int, int, int, int, unsigned int)+0x66>
1000043c:	42                   	inc    edx
1000043d:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10000440:	eb f6                	jmp    10000438 <Context::fillRect(int, int, int, int, unsigned int)+0x5c>
10000442:	85 d2                	test   edx,edx
10000444:	0f 84 91 00 00 00    	je     100004db <Context::fillRect(int, int, int, int, unsigned int)+0xff>
1000044a:	31 ed                	xor    ebp,ebp
1000044c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
1000044f:	8b 10                	mov    edx,DWORD PTR [eax]
10000451:	31 c0                	xor    eax,eax
10000453:	85 d2                	test   edx,edx
10000455:	74 06                	je     1000045d <Context::fillRect(int, int, int, int, unsigned int)+0x81>
10000457:	40                   	inc    eax
10000458:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
1000045b:	eb f6                	jmp    10000453 <Context::fillRect(int, int, int, int, unsigned int)+0x77>
1000045d:	39 c5                	cmp    ebp,eax
1000045f:	0f 8d af 00 00 00    	jge    10000514 <Context::fillRect(int, int, int, int, unsigned int)+0x138>
10000465:	52                   	push   edx
10000466:	52                   	push   edx
10000467:	55                   	push   ebp
10000468:	68 44 0e 00 10       	push   0x10000e44	10000469: R_386_32	.text
1000046d:	e8 fc ff ff ff       	call   1000046e <Context::fillRect(int, int, int, int, unsigned int)+0x92>	1000046e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000472:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
10000475:	8b 00                	mov    eax,DWORD PTR [eax]
10000477:	83 c4 10             	add    esp,0x10
1000047a:	89 c1                	mov    ecx,eax
1000047c:	31 d2                	xor    edx,edx
1000047e:	85 c9                	test   ecx,ecx
10000480:	74 06                	je     10000488 <Context::fillRect(int, int, int, int, unsigned int)+0xac>
10000482:	42                   	inc    edx
10000483:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10000486:	eb f6                	jmp    1000047e <Context::fillRect(int, int, int, int, unsigned int)+0xa2>
10000488:	39 d5                	cmp    ebp,edx
1000048a:	7f 0c                	jg     10000498 <Context::fillRect(int, int, int, int, unsigned int)+0xbc>
1000048c:	89 ea                	mov    edx,ebp
1000048e:	85 d2                	test   edx,edx
10000490:	74 06                	je     10000498 <Context::fillRect(int, int, int, int, unsigned int)+0xbc>
10000492:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000495:	4a                   	dec    edx
10000496:	eb f6                	jmp    1000048e <Context::fillRect(int, int, int, int, unsigned int)+0xb2>
10000498:	8b 00                	mov    eax,DWORD PTR [eax]
1000049a:	83 ec 0c             	sub    esp,0xc
1000049d:	ff 70 04             	push   DWORD PTR [eax+0x4]
100004a0:	ff 30                	push   DWORD PTR [eax]
100004a2:	ff 70 0c             	push   DWORD PTR [eax+0xc]
100004a5:	ff 70 08             	push   DWORD PTR [eax+0x8]
100004a8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100004ac:	68 61 0e 00 10       	push   0x10000e61	100004ad: R_386_32	.text
100004b1:	e8 fc ff ff ff       	call   100004b2 <Context::fillRect(int, int, int, int, unsigned int)+0xd6>	100004b2: R_386_PC32	Dbg::kprintf(char const*, ...)
100004b6:	83 c4 1c             	add    esp,0x1c
100004b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100004bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100004c1:	50                   	push   eax
100004c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100004c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100004ca:	57                   	push   edi
100004cb:	53                   	push   ebx
100004cc:	56                   	push   esi
100004cd:	e8 fc ff ff ff       	call   100004ce <Context::fillRect(int, int, int, int, unsigned int)+0xf2>	100004ce: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
100004d2:	45                   	inc    ebp
100004d3:	83 c4 20             	add    esp,0x20
100004d6:	e9 71 ff ff ff       	jmp    1000044c <Context::fillRect(int, int, int, int, unsigned int)+0x70>
100004db:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
100004e3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
100004eb:	48                   	dec    eax
100004ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100004f0:	8d 45 ff             	lea    eax,[ebp-0x1]
100004f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100004f7:	50                   	push   eax
100004f8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100004fc:	8d 44 24 18          	lea    eax,[esp+0x18]
10000500:	50                   	push   eax
10000501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10000505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10000509:	57                   	push   edi
1000050a:	53                   	push   ebx
1000050b:	56                   	push   esi
1000050c:	e8 fc ff ff ff       	call   1000050d <Context::fillRect(int, int, int, int, unsigned int)+0x131>	1000050d: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
10000511:	83 c4 20             	add    esp,0x20
10000514:	83 ec 0c             	sub    esp,0xc
10000517:	68 75 0e 00 10       	push   0x10000e75	10000518: R_386_32	.text
1000051c:	e8 fc ff ff ff       	call   1000051d <Context::fillRect(int, int, int, int, unsigned int)+0x141>	1000051d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000521:	83 c4 3c             	add    esp,0x3c
10000524:	5b                   	pop    ebx
10000525:	5e                   	pop    esi
10000526:	5f                   	pop    edi
10000527:	5d                   	pop    ebp
10000528:	c3                   	ret    
10000529:	90                   	nop

1000052a <Context::drawHorizontalLine(int, int, int, unsigned int)>:
1000052a:	83 ec 14             	sub    esp,0x14
1000052d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000531:	6a 01                	push   0x1
10000533:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000537:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000053b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000053f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000543:	e8 fc ff ff ff       	call   10000544 <Context::drawHorizontalLine(int, int, int, unsigned int)+0x1a>	10000544: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10000548:	83 c4 2c             	add    esp,0x2c
1000054b:	c3                   	ret    

1000054c <Context::drawVerticalLine(int, int, int, unsigned int)>:
1000054c:	83 ec 14             	sub    esp,0x14
1000054f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000553:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000557:	6a 01                	push   0x1
10000559:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000055d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000561:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000565:	e8 fc ff ff ff       	call   10000566 <Context::drawVerticalLine(int, int, int, unsigned int)+0x1a>	10000566: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
1000056a:	83 c4 2c             	add    esp,0x2c
1000056d:	c3                   	ret    

1000056e <Context::drawRect(int, int, int, int, unsigned int)>:
1000056e:	55                   	push   ebp
1000056f:	57                   	push   edi
10000570:	56                   	push   esi
10000571:	53                   	push   ebx
10000572:	83 ec 28             	sub    esp,0x28
10000575:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10000579:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
1000057d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10000581:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
10000585:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10000589:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000058d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
10000591:	57                   	push   edi
10000592:	55                   	push   ebp
10000593:	52                   	push   edx
10000594:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
10000598:	56                   	push   esi
10000599:	53                   	push   ebx
1000059a:	e8 fc ff ff ff       	call   1000059b <Context::drawRect(int, int, int, int, unsigned int)+0x2d>	1000059b: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
1000059f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100005a3:	8d 48 fe             	lea    ecx,[eax-0x2]
100005a6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
100005aa:	8d 42 01             	lea    eax,[edx+0x1]
100005ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
100005b1:	83 c4 14             	add    esp,0x14
100005b4:	57                   	push   edi
100005b5:	51                   	push   ecx
100005b6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100005ba:	50                   	push   eax
100005bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100005bf:	56                   	push   esi
100005c0:	53                   	push   ebx
100005c1:	e8 fc ff ff ff       	call   100005c2 <Context::drawRect(int, int, int, int, unsigned int)+0x54>	100005c2: R_386_PC32	Context::drawVerticalLine(int, int, int, unsigned int)
100005c6:	83 c4 14             	add    esp,0x14
100005c9:	57                   	push   edi
100005ca:	55                   	push   ebp
100005cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100005cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100005d3:	8d 54 02 ff          	lea    edx,[edx+eax*1-0x1]
100005d7:	52                   	push   edx
100005d8:	56                   	push   esi
100005d9:	53                   	push   ebx
100005da:	e8 fc ff ff ff       	call   100005db <Context::drawRect(int, int, int, int, unsigned int)+0x6d>	100005db: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
100005df:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
100005e3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
100005e7:	89 4c 24 5c          	mov    DWORD PTR [esp+0x5c],ecx
100005eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100005ef:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
100005f3:	8d 44 2e ff          	lea    eax,[esi+ebp*1-0x1]
100005f7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100005fb:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
100005ff:	83 c4 3c             	add    esp,0x3c
10000602:	5b                   	pop    ebx
10000603:	5e                   	pop    esi
10000604:	5f                   	pop    edi
10000605:	5d                   	pop    ebp
10000606:	e9 41 ff ff ff       	jmp    1000054c <Context::drawVerticalLine(int, int, int, unsigned int)>
1000060b:	90                   	nop

1000060c <CRect::split(CRect*)>:
1000060c:	55                   	push   ebp
1000060d:	57                   	push   edi
1000060e:	56                   	push   esi
1000060f:	53                   	push   ebx
10000610:	83 ec 28             	sub    esp,0x28
10000613:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10000617:	6a 08                	push   0x8
10000619:	e8 fc ff ff ff       	call   1000061a <CRect::split(CRect*)+0xe>	1000061a: R_386_PC32	malloc
1000061e:	89 c3                	mov    ebx,eax
10000620:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000627:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000062d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
10000631:	8b 6a 08             	mov    ebp,DWORD PTR [edx+0x8]
10000634:	8b 3a                	mov    edi,DWORD PTR [edx]
10000636:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
10000639:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000063d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
10000640:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000644:	8b 16                	mov    edx,DWORD PTR [esi]
10000646:	83 c4 10             	add    esp,0x10
10000649:	39 d7                	cmp    edi,edx
1000064b:	7f 36                	jg     10000683 <CRect::split(CRect*)+0x77>
1000064d:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
10000651:	7c 30                	jl     10000683 <CRect::split(CRect*)+0x77>
10000653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000657:	83 ec 0c             	sub    esp,0xc
1000065a:	6a 10                	push   0x10
1000065c:	e8 fc ff ff ff       	call   1000065d <CRect::split(CRect*)+0x51>	1000065d: R_386_PC32	malloc
10000661:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
10000664:	89 38                	mov    DWORD PTR [eax],edi
10000666:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
1000066a:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
1000066d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10000671:	4a                   	dec    edx
10000672:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000675:	59                   	pop    ecx
10000676:	5f                   	pop    edi
10000677:	50                   	push   eax
10000678:	53                   	push   ebx
10000679:	e8 fc ff ff ff       	call   1000067a <CRect::split(CRect*)+0x6e>	1000067a: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000067e:	8b 3e                	mov    edi,DWORD PTR [esi]
10000680:	83 c4 10             	add    esp,0x10
10000683:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
10000686:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
1000068a:	7c 35                	jl     100006c1 <CRect::split(CRect*)+0xb5>
1000068c:	39 d5                	cmp    ebp,edx
1000068e:	7f 31                	jg     100006c1 <CRect::split(CRect*)+0xb5>
10000690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000694:	83 ec 0c             	sub    esp,0xc
10000697:	6a 10                	push   0x10
10000699:	e8 fc ff ff ff       	call   1000069a <CRect::split(CRect*)+0x8e>	1000069a: R_386_PC32	malloc
1000069e:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
100006a1:	89 38                	mov    DWORD PTR [eax],edi
100006a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100006a7:	4a                   	dec    edx
100006a8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100006ab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100006af:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
100006b2:	5d                   	pop    ebp
100006b3:	5a                   	pop    edx
100006b4:	50                   	push   eax
100006b5:	53                   	push   ebx
100006b6:	e8 fc ff ff ff       	call   100006b7 <CRect::split(CRect*)+0xab>	100006b7: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100006bb:	8b 6e 08             	mov    ebp,DWORD PTR [esi+0x8]
100006be:	83 c4 10             	add    esp,0x10
100006c1:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
100006c4:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
100006c8:	7c 3d                	jl     10000707 <CRect::split(CRect*)+0xfb>
100006ca:	39 fa                	cmp    edx,edi
100006cc:	7c 39                	jl     10000707 <CRect::split(CRect*)+0xfb>
100006ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100006d2:	83 ec 0c             	sub    esp,0xc
100006d5:	6a 10                	push   0x10
100006d7:	e8 fc ff ff ff       	call   100006d8 <CRect::split(CRect*)+0xcc>	100006d8: R_386_PC32	malloc
100006dc:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
100006df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100006e3:	42                   	inc    edx
100006e4:	89 10                	mov    DWORD PTR [eax],edx
100006e6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100006ea:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
100006ed:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100006f1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
100006f4:	5a                   	pop    edx
100006f5:	59                   	pop    ecx
100006f6:	50                   	push   eax
100006f7:	53                   	push   ebx
100006f8:	e8 fc ff ff ff       	call   100006f9 <CRect::split(CRect*)+0xed>	100006f9: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100006fd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000700:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000704:	83 c4 10             	add    esp,0x10
10000707:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
1000070a:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
1000070e:	7c 2e                	jl     1000073e <CRect::split(CRect*)+0x132>
10000710:	39 ee                	cmp    esi,ebp
10000712:	7c 2a                	jl     1000073e <CRect::split(CRect*)+0x132>
10000714:	83 ec 0c             	sub    esp,0xc
10000717:	6a 10                	push   0x10
10000719:	e8 fc ff ff ff       	call   1000071a <CRect::split(CRect*)+0x10e>	1000071a: R_386_PC32	malloc
1000071e:	46                   	inc    esi
1000071f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
10000722:	89 38                	mov    DWORD PTR [eax],edi
10000724:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000728:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
1000072b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
1000072f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000732:	5a                   	pop    edx
10000733:	59                   	pop    ecx
10000734:	50                   	push   eax
10000735:	53                   	push   ebx
10000736:	e8 fc ff ff ff       	call   10000737 <CRect::split(CRect*)+0x12b>	10000737: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000073b:	83 c4 10             	add    esp,0x10
1000073e:	89 d8                	mov    eax,ebx
10000740:	83 c4 1c             	add    esp,0x1c
10000743:	5b                   	pop    ebx
10000744:	5e                   	pop    esi
10000745:	5f                   	pop    edi
10000746:	5d                   	pop    ebp
10000747:	c3                   	ret    

10000748 <Context::clearClipRects()>:
10000748:	53                   	push   ebx
10000749:	83 ec 14             	sub    esp,0x14
1000074c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000750:	68 7b 0e 00 10       	push   0x10000e7b	10000751: R_386_32	.text
10000755:	e8 fc ff ff ff       	call   10000756 <Context::clearClipRects()+0xe>	10000756: R_386_PC32	Dbg::kprintf(char const*, ...)
1000075a:	83 c4 10             	add    esp,0x10
1000075d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10000760:	8b 08                	mov    ecx,DWORD PTR [eax]
10000762:	89 ca                	mov    edx,ecx
10000764:	31 c0                	xor    eax,eax
10000766:	85 d2                	test   edx,edx
10000768:	74 06                	je     10000770 <Context::clearClipRects()+0x28>
1000076a:	40                   	inc    eax
1000076b:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
1000076e:	eb f6                	jmp    10000766 <Context::clearClipRects()+0x1e>
10000770:	85 c0                	test   eax,eax
10000772:	74 16                	je     1000078a <Context::clearClipRects()+0x42>
10000774:	52                   	push   edx
10000775:	52                   	push   edx
10000776:	6a 10                	push   0x10
10000778:	ff 31                	push   DWORD PTR [ecx]
1000077a:	e8 fc ff ff ff       	call   1000077b <Context::clearClipRects()+0x33>	1000077b: R_386_PC32	operator delete(void*, unsigned long)
1000077f:	59                   	pop    ecx
10000780:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10000783:	e8 fc ff ff ff       	call   10000784 <Context::clearClipRects()+0x3c>	10000784: R_386_PC32	List<CRect*>::deleteHead()
10000788:	eb d0                	jmp    1000075a <Context::clearClipRects()+0x12>
1000078a:	50                   	push   eax
1000078b:	50                   	push   eax
1000078c:	6a 00                	push   0x0
1000078e:	68 91 0e 00 10       	push   0x10000e91	1000078f: R_386_32	.text
10000793:	e8 fc ff ff ff       	call   10000794 <Context::clearClipRects()+0x4c>	10000794: R_386_PC32	Dbg::kprintf(char const*, ...)
10000798:	83 c4 18             	add    esp,0x18
1000079b:	5b                   	pop    ebx
1000079c:	c3                   	ret    
1000079d:	90                   	nop

1000079e <Context::subClipRect(CRect*)>:
1000079e:	55                   	push   ebp
1000079f:	57                   	push   edi
100007a0:	56                   	push   esi
100007a1:	53                   	push   ebx
100007a2:	83 ec 0c             	sub    esp,0xc
100007a5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100007a9:	31 ff                	xor    edi,edi
100007ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100007af:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
100007b2:	8b 31                	mov    esi,DWORD PTR [ecx]
100007b4:	89 f5                	mov    ebp,esi
100007b6:	31 c0                	xor    eax,eax
100007b8:	85 ed                	test   ebp,ebp
100007ba:	74 06                	je     100007c2 <Context::subClipRect(CRect*)+0x24>
100007bc:	40                   	inc    eax
100007bd:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
100007c0:	eb f6                	jmp    100007b8 <Context::subClipRect(CRect*)+0x1a>
100007c2:	39 c7                	cmp    edi,eax
100007c4:	0f 8d 04 01 00 00    	jge    100008ce <Context::subClipRect(CRect*)+0x130>
100007ca:	89 f0                	mov    eax,esi
100007cc:	31 ed                	xor    ebp,ebp
100007ce:	85 c0                	test   eax,eax
100007d0:	74 06                	je     100007d8 <Context::subClipRect(CRect*)+0x3a>
100007d2:	45                   	inc    ebp
100007d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100007d6:	eb f6                	jmp    100007ce <Context::subClipRect(CRect*)+0x30>
100007d8:	89 f0                	mov    eax,esi
100007da:	39 ef                	cmp    edi,ebp
100007dc:	7f 0c                	jg     100007ea <Context::subClipRect(CRect*)+0x4c>
100007de:	89 fd                	mov    ebp,edi
100007e0:	85 ed                	test   ebp,ebp
100007e2:	74 06                	je     100007ea <Context::subClipRect(CRect*)+0x4c>
100007e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100007e7:	4d                   	dec    ebp
100007e8:	eb f6                	jmp    100007e0 <Context::subClipRect(CRect*)+0x42>
100007ea:	8b 28                	mov    ebp,DWORD PTR [eax]
100007ec:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100007ef:	39 55 00             	cmp    DWORD PTR [ebp+0x0],edx
100007f2:	7f 17                	jg     1000080b <Context::subClipRect(CRect*)+0x6d>
100007f4:	8b 13                	mov    edx,DWORD PTR [ebx]
100007f6:	39 55 04             	cmp    DWORD PTR [ebp+0x4],edx
100007f9:	7c 10                	jl     1000080b <Context::subClipRect(CRect*)+0x6d>
100007fb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100007fe:	39 55 08             	cmp    DWORD PTR [ebp+0x8],edx
10000801:	7f 08                	jg     1000080b <Context::subClipRect(CRect*)+0x6d>
10000803:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10000806:	39 55 0c             	cmp    DWORD PTR [ebp+0xc],edx
10000809:	7d 03                	jge    1000080e <Context::subClipRect(CRect*)+0x70>
1000080b:	47                   	inc    edi
1000080c:	eb 9d                	jmp    100007ab <Context::subClipRect(CRect*)+0xd>
1000080e:	39 c6                	cmp    esi,eax
10000810:	75 07                	jne    10000819 <Context::subClipRect(CRect*)+0x7b>
10000812:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10000815:	89 11                	mov    DWORD PTR [ecx],edx
10000817:	eb 19                	jmp    10000832 <Context::subClipRect(CRect*)+0x94>
10000819:	3b 41 04             	cmp    eax,DWORD PTR [ecx+0x4]
1000081c:	75 08                	jne    10000826 <Context::subClipRect(CRect*)+0x88>
1000081e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
10000821:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
10000824:	eb 0c                	jmp    10000832 <Context::subClipRect(CRect*)+0x94>
10000826:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
10000829:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
1000082c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
1000082f:	89 72 08             	mov    DWORD PTR [edx+0x8],esi
10000832:	8b 11                	mov    edx,DWORD PTR [ecx]
10000834:	85 d2                	test   edx,edx
10000836:	74 13                	je     1000084b <Context::subClipRect(CRect*)+0xad>
10000838:	c7 42 08 00 00 00 00 	mov    DWORD PTR [edx+0x8],0x0
1000083f:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10000842:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
10000849:	eb 07                	jmp    10000852 <Context::subClipRect(CRect*)+0xb4>
1000084b:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
10000852:	52                   	push   edx
10000853:	52                   	push   edx
10000854:	6a 0c                	push   0xc
10000856:	50                   	push   eax
10000857:	e8 fc ff ff ff       	call   10000858 <Context::subClipRect(CRect*)+0xba>	10000858: R_386_PC32	operator delete(void*, unsigned long)
1000085c:	59                   	pop    ecx
1000085d:	5e                   	pop    esi
1000085e:	53                   	push   ebx
1000085f:	55                   	push   ebp
10000860:	e8 fc ff ff ff       	call   10000861 <Context::subClipRect(CRect*)+0xc3>	10000861: R_386_PC32	CRect::split(CRect*)
10000865:	89 c6                	mov    esi,eax
10000867:	5f                   	pop    edi
10000868:	58                   	pop    eax
10000869:	6a 10                	push   0x10
1000086b:	55                   	push   ebp
1000086c:	e8 fc ff ff ff       	call   1000086d <Context::subClipRect(CRect*)+0xcf>	1000086d: R_386_PC32	operator delete(void*, unsigned long)
10000871:	83 c4 10             	add    esp,0x10
10000874:	8b 06                	mov    eax,DWORD PTR [esi]
10000876:	89 c1                	mov    ecx,eax
10000878:	31 ff                	xor    edi,edi
1000087a:	85 c9                	test   ecx,ecx
1000087c:	74 06                	je     10000884 <Context::subClipRect(CRect*)+0xe6>
1000087e:	47                   	inc    edi
1000087f:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10000882:	eb f6                	jmp    1000087a <Context::subClipRect(CRect*)+0xdc>
10000884:	85 ff                	test   edi,edi
10000886:	74 1c                	je     100008a4 <Context::subClipRect(CRect*)+0x106>
10000888:	8b 28                	mov    ebp,DWORD PTR [eax]
1000088a:	83 ec 0c             	sub    esp,0xc
1000088d:	56                   	push   esi
1000088e:	e8 fc ff ff ff       	call   1000088f <Context::subClipRect(CRect*)+0xf1>	1000088f: R_386_PC32	List<CRect*>::deleteHead()
10000893:	59                   	pop    ecx
10000894:	5f                   	pop    edi
10000895:	55                   	push   ebp
10000896:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000089a:	ff 70 0c             	push   DWORD PTR [eax+0xc]
1000089d:	e8 fc ff ff ff       	call   1000089e <Context::subClipRect(CRect*)+0x100>	1000089e: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100008a2:	eb cd                	jmp    10000871 <Context::subClipRect(CRect*)+0xd3>
100008a4:	85 c0                	test   eax,eax
100008a6:	74 14                	je     100008bc <Context::subClipRect(CRect*)+0x11e>
100008a8:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
100008ab:	52                   	push   edx
100008ac:	52                   	push   edx
100008ad:	6a 0c                	push   0xc
100008af:	50                   	push   eax
100008b0:	e8 fc ff ff ff       	call   100008b1 <Context::subClipRect(CRect*)+0x113>	100008b1: R_386_PC32	operator delete(void*, unsigned long)
100008b5:	89 e8                	mov    eax,ebp
100008b7:	83 c4 10             	add    esp,0x10
100008ba:	eb e8                	jmp    100008a4 <Context::subClipRect(CRect*)+0x106>
100008bc:	50                   	push   eax
100008bd:	50                   	push   eax
100008be:	6a 08                	push   0x8
100008c0:	56                   	push   esi
100008c1:	e8 fc ff ff ff       	call   100008c2 <Context::subClipRect(CRect*)+0x124>	100008c2: R_386_PC32	operator delete(void*, unsigned long)
100008c6:	83 c4 10             	add    esp,0x10
100008c9:	e9 dd fe ff ff       	jmp    100007ab <Context::subClipRect(CRect*)+0xd>
100008ce:	83 c4 0c             	add    esp,0xc
100008d1:	5b                   	pop    ebx
100008d2:	5e                   	pop    esi
100008d3:	5f                   	pop    edi
100008d4:	5d                   	pop    ebp
100008d5:	c3                   	ret    

100008d6 <Context::addClipRect(CRect*)>:
100008d6:	56                   	push   esi
100008d7:	53                   	push   ebx
100008d8:	83 ec 0c             	sub    esp,0xc
100008db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100008df:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
100008e3:	56                   	push   esi
100008e4:	53                   	push   ebx
100008e5:	e8 fc ff ff ff       	call   100008e6 <Context::addClipRect(CRect*)+0x10>	100008e6: R_386_PC32	Context::subClipRect(CRect*)
100008ea:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100008ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
100008f1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100008f5:	83 c4 14             	add    esp,0x14
100008f8:	5b                   	pop    ebx
100008f9:	5e                   	pop    esi
100008fa:	e9 fc ff ff ff       	jmp    100008fb <Context::addClipRect(CRect*)+0x25>	100008fb: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100008ff:	90                   	nop

10000900 <GDO::resetNext()>:
10000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000904:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
1000090b:	c3                   	ret    

1000090c <GDO::GDO(GDOType, Context*)>:
1000090c:	53                   	push   ebx
1000090d:	83 ec 08             	sub    esp,0x8
10000910:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10000914:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000918:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000091c:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
1000091f:	88 03                	mov    BYTE PTR [ebx],al
10000921:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
10000928:	84 c0                	test   al,al
1000092a:	75 26                	jne    10000952 <GDO::GDO(GDOType, Context*)+0x46>
1000092c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
10000933:	83 ec 0c             	sub    esp,0xc
10000936:	6a 40                	push   0x40
10000938:	e8 fc ff ff ff       	call   10000939 <GDO::GDO(GDOType, Context*)+0x2d>	10000939: R_386_PC32	malloc
1000093d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
10000940:	83 c4 10             	add    esp,0x10
10000943:	31 d2                	xor    edx,edx
10000945:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
1000094c:	42                   	inc    edx
1000094d:	83 fa 10             	cmp    edx,0x10
10000950:	75 f3                	jne    10000945 <GDO::GDO(GDOType, Context*)+0x39>
10000952:	83 c4 08             	add    esp,0x8
10000955:	5b                   	pop    ebx
10000956:	c3                   	ret    
10000957:	90                   	nop

10000958 <GDO::~GDO()>:
10000958:	c3                   	ret    
10000959:	90                   	nop

1000095a <GDO::getChild(int)>:
1000095a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
1000095e:	31 c0                	xor    eax,eax
10000960:	81 fa ff 00 00 00    	cmp    edx,0xff
10000966:	7f 1b                	jg     10000983 <GDO::getChild(int)+0x29>
10000968:	89 d1                	mov    ecx,edx
1000096a:	c1 e9 04             	shr    ecx,0x4
1000096d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000971:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10000974:	8b 0c 88             	mov    ecx,DWORD PTR [eax+ecx*4]
10000977:	31 c0                	xor    eax,eax
10000979:	85 c9                	test   ecx,ecx
1000097b:	74 06                	je     10000983 <GDO::getChild(int)+0x29>
1000097d:	83 e2 0f             	and    edx,0xf
10000980:	8b 04 91             	mov    eax,DWORD PTR [ecx+edx*4]
10000983:	c3                   	ret    

10000984 <GDO::hasNext()>:
10000984:	56                   	push   esi
10000985:	53                   	push   ebx
10000986:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
1000098a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
1000098d:	3d ff 00 00 00       	cmp    eax,0xff
10000992:	7f 18                	jg     100009ac <GDO::hasNext()+0x28>
10000994:	8d 70 01             	lea    esi,[eax+0x1]
10000997:	50                   	push   eax
10000998:	53                   	push   ebx
10000999:	e8 fc ff ff ff       	call   1000099a <GDO::hasNext()+0x16>	1000099a: R_386_PC32	GDO::getChild(int)
1000099e:	5a                   	pop    edx
1000099f:	59                   	pop    ecx
100009a0:	85 c0                	test   eax,eax
100009a2:	75 04                	jne    100009a8 <GDO::hasNext()+0x24>
100009a4:	89 f0                	mov    eax,esi
100009a6:	eb e5                	jmp    1000098d <GDO::hasNext()+0x9>
100009a8:	b0 01                	mov    al,0x1
100009aa:	eb 02                	jmp    100009ae <GDO::hasNext()+0x2a>
100009ac:	31 c0                	xor    eax,eax
100009ae:	5b                   	pop    ebx
100009af:	5e                   	pop    esi
100009b0:	c3                   	ret    
100009b1:	90                   	nop

100009b2 <GDO::getNext()>:
100009b2:	53                   	push   ebx
100009b3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
100009b7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
100009ba:	3d ff 00 00 00       	cmp    eax,0xff
100009bf:	7f 15                	jg     100009d6 <GDO::getNext()+0x24>
100009c1:	8d 50 01             	lea    edx,[eax+0x1]
100009c4:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
100009c7:	50                   	push   eax
100009c8:	53                   	push   ebx
100009c9:	e8 fc ff ff ff       	call   100009ca <GDO::getNext()+0x18>	100009ca: R_386_PC32	GDO::getChild(int)
100009ce:	5a                   	pop    edx
100009cf:	59                   	pop    ecx
100009d0:	85 c0                	test   eax,eax
100009d2:	74 e3                	je     100009b7 <GDO::getNext()+0x5>
100009d4:	eb 02                	jmp    100009d8 <GDO::getNext()+0x26>
100009d6:	31 c0                	xor    eax,eax
100009d8:	5b                   	pop    ebx
100009d9:	c3                   	ret    

100009da <GDO::update()>:
100009da:	55                   	push   ebp
100009db:	57                   	push   edi
100009dc:	56                   	push   esi
100009dd:	53                   	push   ebx
100009de:	83 ec 0c             	sub    esp,0xc
100009e1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100009e5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
100009e8:	74 14                	je     100009fe <GDO::update()+0x24>
100009ea:	c7 44 24 20 bb 0e 00 10 	mov    DWORD PTR [esp+0x20],0x10000ebb	100009ee: R_386_32	.text
100009f2:	83 c4 0c             	add    esp,0xc
100009f5:	5b                   	pop    ebx
100009f6:	5e                   	pop    esi
100009f7:	5f                   	pop    edi
100009f8:	5d                   	pop    ebp
100009f9:	e9 fc ff ff ff       	jmp    100009fa <GDO::update()+0x20>	100009fa: R_386_PC32	Krnl::panic(char const*)
100009fe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000a01:	52                   	push   edx
10000a02:	52                   	push   edx
10000a03:	68 fe 67 22 00       	push   0x2267fe
10000a08:	ff 70 08             	push   DWORD PTR [eax+0x8]
10000a0b:	ff 70 04             	push   DWORD PTR [eax+0x4]
10000a0e:	6a 00                	push   0x0
10000a10:	6a 00                	push   0x0
10000a12:	50                   	push   eax
10000a13:	e8 fc ff ff ff       	call   10000a14 <GDO::update()+0x3a>	10000a14: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10000a18:	83 c4 14             	add    esp,0x14
10000a1b:	ff 76 04             	push   DWORD PTR [esi+0x4]
10000a1e:	e8 fc ff ff ff       	call   10000a1f <GDO::update()+0x45>	10000a1f: R_386_PC32	Context::clearClipRects()
10000a23:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
10000a2a:	83 c4 10             	add    esp,0x10
10000a2d:	83 ec 0c             	sub    esp,0xc
10000a30:	56                   	push   esi
10000a31:	e8 fc ff ff ff       	call   10000a32 <GDO::update()+0x58>	10000a32: R_386_PC32	GDO::hasNext()
10000a36:	83 c4 10             	add    esp,0x10
10000a39:	84 c0                	test   al,al
10000a3b:	74 76                	je     10000ab3 <GDO::update()+0xd9>
10000a3d:	83 ec 0c             	sub    esp,0xc
10000a40:	56                   	push   esi
10000a41:	e8 fc ff ff ff       	call   10000a42 <GDO::update()+0x68>	10000a42: R_386_PC32	GDO::getNext()
10000a46:	89 c3                	mov    ebx,eax
10000a48:	83 c4 10             	add    esp,0x10
10000a4b:	85 c0                	test   eax,eax
10000a4d:	74 de                	je     10000a2d <GDO::update()+0x53>
10000a4f:	80 38 00             	cmp    BYTE PTR [eax],0x0
10000a52:	75 d9                	jne    10000a2d <GDO::update()+0x53>
10000a54:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
10000a57:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
10000a5a:	83 ec 0c             	sub    esp,0xc
10000a5d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10000a60:	01 c8                	add    eax,ecx
10000a62:	48                   	dec    eax
10000a63:	50                   	push   eax
10000a64:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10000a67:	01 d0                	add    eax,edx
10000a69:	48                   	dec    eax
10000a6a:	50                   	push   eax
10000a6b:	51                   	push   ecx
10000a6c:	52                   	push   edx
10000a6d:	68 d5 0e 00 10       	push   0x10000ed5	10000a6e: R_386_32	.text
10000a72:	e8 fc ff ff ff       	call   10000a73 <GDO::update()+0x99>	10000a73: R_386_PC32	Dbg::kprintf(char const*, ...)
10000a77:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
10000a7a:	83 c4 14             	add    esp,0x14
10000a7d:	6a 10                	push   0x10
10000a7f:	e8 fc ff ff ff       	call   10000a80 <GDO::update()+0xa6>	10000a80: R_386_PC32	malloc
10000a84:	89 c7                	mov    edi,eax
10000a86:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10000a89:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10000a8c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
10000a8f:	01 ca                	add    edx,ecx
10000a91:	4a                   	dec    edx
10000a92:	89 14 24             	mov    DWORD PTR [esp],edx
10000a95:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
10000a98:	01 c2                	add    edx,eax
10000a9a:	4a                   	dec    edx
10000a9b:	52                   	push   edx
10000a9c:	51                   	push   ecx
10000a9d:	50                   	push   eax
10000a9e:	57                   	push   edi
10000a9f:	e8 fc ff ff ff       	call   10000aa0 <GDO::update()+0xc6>	10000aa0: R_386_PC32	CRect::CRect(int, int, int, int)
10000aa4:	83 c4 18             	add    esp,0x18
10000aa7:	57                   	push   edi
10000aa8:	55                   	push   ebp
10000aa9:	e8 fc ff ff ff       	call   10000aaa <GDO::update()+0xd0>	10000aaa: R_386_PC32	Context::addClipRect(CRect*)
10000aae:	e9 77 ff ff ff       	jmp    10000a2a <GDO::update()+0x50>
10000ab3:	31 ff                	xor    edi,edi
10000ab5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000ab8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000abb:	8b 00                	mov    eax,DWORD PTR [eax]
10000abd:	89 c1                	mov    ecx,eax
10000abf:	31 d2                	xor    edx,edx
10000ac1:	85 c9                	test   ecx,ecx
10000ac3:	74 06                	je     10000acb <GDO::update()+0xf1>
10000ac5:	42                   	inc    edx
10000ac6:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10000ac9:	eb f6                	jmp    10000ac1 <GDO::update()+0xe7>
10000acb:	39 d7                	cmp    edi,edx
10000acd:	7d 72                	jge    10000b41 <GDO::update()+0x167>
10000acf:	89 c1                	mov    ecx,eax
10000ad1:	31 d2                	xor    edx,edx
10000ad3:	85 c9                	test   ecx,ecx
10000ad5:	74 06                	je     10000add <GDO::update()+0x103>
10000ad7:	42                   	inc    edx
10000ad8:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10000adb:	eb f6                	jmp    10000ad3 <GDO::update()+0xf9>
10000add:	39 d7                	cmp    edi,edx
10000adf:	7f 0c                	jg     10000aed <GDO::update()+0x113>
10000ae1:	89 fa                	mov    edx,edi
10000ae3:	85 d2                	test   edx,edx
10000ae5:	74 06                	je     10000aed <GDO::update()+0x113>
10000ae7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000aea:	4a                   	dec    edx
10000aeb:	eb f6                	jmp    10000ae3 <GDO::update()+0x109>
10000aed:	8b 18                	mov    ebx,DWORD PTR [eax]
10000aef:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10000af2:	8b 13                	mov    edx,DWORD PTR [ebx]
10000af4:	83 ec 0c             	sub    esp,0xc
10000af7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10000afa:	29 c8                	sub    eax,ecx
10000afc:	40                   	inc    eax
10000afd:	50                   	push   eax
10000afe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000b01:	29 d0                	sub    eax,edx
10000b03:	40                   	inc    eax
10000b04:	50                   	push   eax
10000b05:	51                   	push   ecx
10000b06:	52                   	push   edx
10000b07:	68 eb 0e 00 10       	push   0x10000eeb	10000b08: R_386_32	.text
10000b0c:	e8 fc ff ff ff       	call   10000b0d <GDO::update()+0x133>	10000b0d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b11:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10000b14:	8b 13                	mov    edx,DWORD PTR [ebx]
10000b16:	83 c4 18             	add    esp,0x18
10000b19:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
10000b1f:	50                   	push   eax
10000b20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10000b23:	29 c8                	sub    eax,ecx
10000b25:	40                   	inc    eax
10000b26:	50                   	push   eax
10000b27:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000b2a:	29 d0                	sub    eax,edx
10000b2c:	40                   	inc    eax
10000b2d:	50                   	push   eax
10000b2e:	51                   	push   ecx
10000b2f:	52                   	push   edx
10000b30:	ff 76 04             	push   DWORD PTR [esi+0x4]
10000b33:	e8 fc ff ff ff       	call   10000b34 <GDO::update()+0x15a>	10000b34: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10000b38:	47                   	inc    edi
10000b39:	83 c4 20             	add    esp,0x20
10000b3c:	e9 74 ff ff ff       	jmp    10000ab5 <GDO::update()+0xdb>
10000b41:	83 c4 0c             	add    esp,0xc
10000b44:	5b                   	pop    ebx
10000b45:	5e                   	pop    esi
10000b46:	5f                   	pop    edi
10000b47:	5d                   	pop    ebp
10000b48:	c3                   	ret    
10000b49:	90                   	nop

10000b4a <GDO::indexOf(GDO*)>:
10000b4a:	56                   	push   esi
10000b4b:	53                   	push   ebx
10000b4c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10000b50:	31 db                	xor    ebx,ebx
10000b52:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
10000b55:	8d 50 01             	lea    edx,[eax+0x1]
10000b58:	89 56 1c             	mov    DWORD PTR [esi+0x1c],edx
10000b5b:	50                   	push   eax
10000b5c:	56                   	push   esi
10000b5d:	e8 fc ff ff ff       	call   10000b5e <GDO::indexOf(GDO*)+0x14>	10000b5e: R_386_PC32	GDO::getChild(int)
10000b62:	5a                   	pop    edx
10000b63:	59                   	pop    ecx
10000b64:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10000b68:	74 0c                	je     10000b76 <GDO::indexOf(GDO*)+0x2c>
10000b6a:	43                   	inc    ebx
10000b6b:	81 fb 00 01 00 00    	cmp    ebx,0x100
10000b71:	75 df                	jne    10000b52 <GDO::indexOf(GDO*)+0x8>
10000b73:	83 cb ff             	or     ebx,0xffffffff
10000b76:	89 d8                	mov    eax,ebx
10000b78:	5b                   	pop    ebx
10000b79:	5e                   	pop    esi
10000b7a:	c3                   	ret    
10000b7b:	90                   	nop

10000b7c <GDO::addChild(GDO*)>:
10000b7c:	55                   	push   ebp
10000b7d:	57                   	push   edi
10000b7e:	56                   	push   esi
10000b7f:	53                   	push   ebx
10000b80:	83 ec 1c             	sub    esp,0x1c
10000b83:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000b87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000b8b:	8b 68 18             	mov    ebp,DWORD PTR [eax+0x18]
10000b8e:	31 c9                	xor    ecx,ecx
10000b90:	83 cb ff             	or     ebx,0xffffffff
10000b93:	8b 54 8d 00          	mov    edx,DWORD PTR [ebp+ecx*4+0x0]
10000b97:	85 d2                	test   edx,edx
10000b99:	74 1b                	je     10000bb6 <GDO::addChild(GDO*)+0x3a>
10000b9b:	31 c0                	xor    eax,eax
10000b9d:	83 3a 00             	cmp    DWORD PTR [edx],0x0
10000ba0:	75 09                	jne    10000bab <GDO::addChild(GDO*)+0x2f>
10000ba2:	89 32                	mov    DWORD PTR [edx],esi
10000ba4:	c1 e1 04             	shl    ecx,0x4
10000ba7:	01 c8                	add    eax,ecx
10000ba9:	eb 5a                	jmp    10000c05 <GDO::addChild(GDO*)+0x89>
10000bab:	40                   	inc    eax
10000bac:	83 c2 04             	add    edx,0x4
10000baf:	83 f8 10             	cmp    eax,0x10
10000bb2:	75 e9                	jne    10000b9d <GDO::addChild(GDO*)+0x21>
10000bb4:	eb 02                	jmp    10000bb8 <GDO::addChild(GDO*)+0x3c>
10000bb6:	89 cb                	mov    ebx,ecx
10000bb8:	41                   	inc    ecx
10000bb9:	83 f9 10             	cmp    ecx,0x10
10000bbc:	75 d5                	jne    10000b93 <GDO::addChild(GDO*)+0x17>
10000bbe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10000bc2:	85 db                	test   ebx,ebx
10000bc4:	74 2c                	je     10000bf2 <GDO::addChild(GDO*)+0x76>
10000bc6:	8d 6c 9d 00          	lea    ebp,[ebp+ebx*4+0x0]
10000bca:	83 ec 0c             	sub    esp,0xc
10000bcd:	6a 40                	push   0x40
10000bcf:	e8 fc ff ff ff       	call   10000bd0 <GDO::addChild(GDO*)+0x54>	10000bd0: R_386_PC32	malloc
10000bd4:	89 c2                	mov    edx,eax
10000bd6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
10000bd9:	31 c0                	xor    eax,eax
10000bdb:	89 d7                	mov    edi,edx
10000bdd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10000be1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000be3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000be6:	89 30                	mov    DWORD PTR [eax],esi
10000be8:	89 d8                	mov    eax,ebx
10000bea:	c1 e0 04             	shl    eax,0x4
10000bed:	83 c4 10             	add    esp,0x10
10000bf0:	eb 13                	jmp    10000c05 <GDO::addChild(GDO*)+0x89>
10000bf2:	83 ec 0c             	sub    esp,0xc
10000bf5:	68 01 0f 00 10       	push   0x10000f01	10000bf6: R_386_32	.text
10000bfa:	e8 fc ff ff ff       	call   10000bfb <GDO::addChild(GDO*)+0x7f>	10000bfb: R_386_PC32	Krnl::panic(char const*)
10000bff:	83 c4 10             	add    esp,0x10
10000c02:	83 c8 ff             	or     eax,0xffffffff
10000c05:	83 c4 1c             	add    esp,0x1c
10000c08:	5b                   	pop    ebx
10000c09:	5e                   	pop    esi
10000c0a:	5f                   	pop    edi
10000c0b:	5d                   	pop    ebp
10000c0c:	c3                   	ret    
10000c0d:	90                   	nop

10000c0e <GDO::removeChild(int)>:
10000c0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000c12:	31 c0                	xor    eax,eax
10000c14:	81 fa ff 00 00 00    	cmp    edx,0xff
10000c1a:	7f 27                	jg     10000c43 <GDO::removeChild(int)+0x35>
10000c1c:	89 d1                	mov    ecx,edx
10000c1e:	c1 e9 04             	shr    ecx,0x4
10000c21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000c25:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10000c28:	8b 0c 88             	mov    ecx,DWORD PTR [eax+ecx*4]
10000c2b:	31 c0                	xor    eax,eax
10000c2d:	85 c9                	test   ecx,ecx
10000c2f:	74 12                	je     10000c43 <GDO::removeChild(int)+0x35>
10000c31:	83 e2 0f             	and    edx,0xf
10000c34:	8d 14 91             	lea    edx,[ecx+edx*4]
10000c37:	83 3a 00             	cmp    DWORD PTR [edx],0x0
10000c3a:	0f 95 c0             	setne  al
10000c3d:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
10000c43:	c3                   	ret    

10000c44 <GDO::removeChild(GDO*)>:
10000c44:	53                   	push   ebx
10000c45:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
10000c49:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10000c4d:	53                   	push   ebx
10000c4e:	e8 fc ff ff ff       	call   10000c4f <GDO::removeChild(GDO*)+0xb>	10000c4f: R_386_PC32	GDO::indexOf(GDO*)
10000c53:	5a                   	pop    edx
10000c54:	59                   	pop    ecx
10000c55:	83 f8 ff             	cmp    eax,0xffffffff
10000c58:	74 0b                	je     10000c65 <GDO::removeChild(GDO*)+0x21>
10000c5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000c5e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000c62:	5b                   	pop    ebx
10000c63:	eb a9                	jmp    10000c0e <GDO::removeChild(int)>
10000c65:	31 c0                	xor    eax,eax
10000c67:	5b                   	pop    ebx
10000c68:	c3                   	ret    
10000c69:	90                   	nop

10000c6a <rectDrawFunc(GDO*)>:
10000c6a:	83 ec 14             	sub    esp,0x14
10000c6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10000c71:	ff 70 18             	push   DWORD PTR [eax+0x18]
10000c74:	ff 70 14             	push   DWORD PTR [eax+0x14]
10000c77:	ff 70 10             	push   DWORD PTR [eax+0x10]
10000c7a:	ff 70 0c             	push   DWORD PTR [eax+0xc]
10000c7d:	ff 70 08             	push   DWORD PTR [eax+0x8]
10000c80:	ff 70 04             	push   DWORD PTR [eax+0x4]
10000c83:	e8 fc ff ff ff       	call   10000c84 <rectDrawFunc(GDO*)+0x1a>	10000c84: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10000c88:	83 c4 2c             	add    esp,0x2c
10000c8b:	c3                   	ret    

10000c8c <rectPtnDrawFunc(GDO*)>:
10000c8c:	83 ec 14             	sub    esp,0x14
10000c8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10000c93:	ff 70 18             	push   DWORD PTR [eax+0x18]
10000c96:	ff 70 14             	push   DWORD PTR [eax+0x14]
10000c99:	ff 70 10             	push   DWORD PTR [eax+0x10]
10000c9c:	ff 70 0c             	push   DWORD PTR [eax+0xc]
10000c9f:	ff 70 08             	push   DWORD PTR [eax+0x8]
10000ca2:	ff 70 04             	push   DWORD PTR [eax+0x4]
10000ca5:	e8 fc ff ff ff       	call   10000ca6 <rectPtnDrawFunc(GDO*)+0x1a>	10000ca6: R_386_PC32	Context::fillRect(int, int, int, int, Brush*)
10000caa:	83 c4 2c             	add    esp,0x2c
10000cad:	c3                   	ret    

10000cae <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)>:
10000cae:	53                   	push   ebx
10000caf:	83 ec 0c             	sub    esp,0xc
10000cb2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10000cb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000cba:	6a 01                	push   0x1
10000cbc:	53                   	push   ebx
10000cbd:	e8 fc ff ff ff       	call   10000cbe <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)+0x10>	10000cbe: R_386_PC32	GDO::GDO(GDOType, Context*)
10000cc2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10000cc6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10000cc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000ccd:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10000cd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10000cd4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000cd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000cdb:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10000cde:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000ce2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
10000ce5:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0	10000ce8: R_386_32	rectPtnDrawFunc(GDO*)
10000cec:	83 c4 18             	add    esp,0x18
10000cef:	5b                   	pop    ebx
10000cf0:	c3                   	ret    
10000cf1:	90                   	nop

10000cf2 <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)>:
10000cf2:	53                   	push   ebx
10000cf3:	83 ec 0c             	sub    esp,0xc
10000cf6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10000cfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000cfe:	6a 01                	push   0x1
10000d00:	53                   	push   ebx
10000d01:	e8 fc ff ff ff       	call   10000d02 <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)+0x10>	10000d02: R_386_PC32	GDO::GDO(GDOType, Context*)
10000d06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10000d0a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10000d0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000d11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10000d14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10000d18:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000d1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000d1f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10000d22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000d26:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
10000d29:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0	10000d2c: R_386_32	rectDrawFunc(GDO*)
10000d30:	83 c4 18             	add    esp,0x18
10000d33:	5b                   	pop    ebx
10000d34:	c3                   	ret    
10000d35:	90                   	nop

10000d36 <regnDrawFunc(GDO*)>:
10000d36:	c3                   	ret    
10000d37:	90                   	nop

10000d38 <Region::Region(int, int, int, int, Context*)>:
10000d38:	53                   	push   ebx
10000d39:	83 ec 0c             	sub    esp,0xc
10000d3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10000d40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000d44:	6a 00                	push   0x0
10000d46:	53                   	push   ebx
10000d47:	e8 fc ff ff ff       	call   10000d48 <Region::Region(int, int, int, int, Context*)+0x10>	10000d48: R_386_PC32	GDO::GDO(GDOType, Context*)
10000d4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10000d50:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10000d53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000d57:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10000d5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10000d5e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000d61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000d65:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10000d68:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0	10000d6b: R_386_32	regnDrawFunc(GDO*)
10000d6f:	83 c4 18             	add    esp,0x18
10000d72:	5b                   	pop    ebx
10000d73:	c3                   	ret    

10000d74 <List<CRect*>::insertAtTail(CRect*)>:
10000d74:	53                   	push   ebx
10000d75:	83 ec 14             	sub    esp,0x14
10000d78:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000d7c:	68 a7 0e 00 10       	push   0x10000ea7	10000d7d: R_386_32	.text
10000d81:	e8 fc ff ff ff       	call   10000d82 <List<CRect*>::insertAtTail(CRect*)+0xe>	10000d82: R_386_PC32	Dbg::kprintf(char const*, ...)
10000d86:	c7 04 24 0c 00 00 00 	mov    DWORD PTR [esp],0xc
10000d8d:	e8 fc ff ff ff       	call   10000d8e <List<CRect*>::insertAtTail(CRect*)+0x1a>	10000d8e: R_386_PC32	malloc
10000d92:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10000d96:	89 10                	mov    DWORD PTR [eax],edx
10000d98:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10000d9b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10000d9e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000da5:	83 c4 10             	add    esp,0x10
10000da8:	85 d2                	test   edx,edx
10000daa:	74 05                	je     10000db1 <List<CRect*>::insertAtTail(CRect*)+0x3d>
10000dac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
10000daf:	eb 02                	jmp    10000db3 <List<CRect*>::insertAtTail(CRect*)+0x3f>
10000db1:	89 03                	mov    DWORD PTR [ebx],eax
10000db3:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10000db6:	83 c4 08             	add    esp,0x8
10000db9:	5b                   	pop    ebx
10000dba:	c3                   	ret    
10000dbb:	90                   	nop

10000dbc <List<CRect*>::deleteHead()>:
10000dbc:	56                   	push   esi
10000dbd:	53                   	push   ebx
10000dbe:	51                   	push   ecx
10000dbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10000dc3:	8b 06                	mov    eax,DWORD PTR [esi]
10000dc5:	85 c0                	test   eax,eax
10000dc7:	74 26                	je     10000def <List<CRect*>::deleteHead()+0x33>
10000dc9:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10000dcc:	52                   	push   edx
10000dcd:	52                   	push   edx
10000dce:	6a 0c                	push   0xc
10000dd0:	50                   	push   eax
10000dd1:	e8 fc ff ff ff       	call   10000dd2 <List<CRect*>::deleteHead()+0x16>	10000dd2: R_386_PC32	operator delete(void*, unsigned long)
10000dd6:	89 1e                	mov    DWORD PTR [esi],ebx
10000dd8:	83 c4 10             	add    esp,0x10
10000ddb:	85 db                	test   ebx,ebx
10000ddd:	75 09                	jne    10000de8 <List<CRect*>::deleteHead()+0x2c>
10000ddf:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10000de6:	eb 07                	jmp    10000def <List<CRect*>::deleteHead()+0x33>
10000de8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10000def:	58                   	pop    eax
10000df0:	5b                   	pop    ebx
10000df1:	5e                   	pop    esi
10000df2:	c3                   	ret    
10000df3:	43                   	inc    ebx
10000df4:	4c                   	dec    esp
10000df5:	49                   	dec    ecx
10000df6:	50                   	push   eax
10000df7:	44                   	inc    esp
10000df8:	52                   	push   edx
10000df9:	41                   	inc    ecx
10000dfa:	57                   	push   edi
10000dfb:	20 53 54             	and    BYTE PTR [ebx+0x54],dl
10000dfe:	41                   	inc    ecx
10000dff:	52                   	push   edx
10000e00:	54                   	push   esp
10000e01:	45                   	inc    ebp
10000e02:	44                   	inc    esp
10000e03:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000e06:	66 90                	xchg   ax,ax
10000e08:	4e                   	dec    esi	10000e08: R_386_32	.text
10000e09:	02 00                	add    al,BYTE PTR [eax]
10000e0b:	10 55 02             	adc    BYTE PTR [ebp+0x2],dl	10000e0c: R_386_32	.text
10000e0e:	00 10                	add    BYTE PTR [eax],dl
10000e10:	5c                   	pop    esp	10000e10: R_386_32	.text
10000e11:	02 00                	add    al,BYTE PTR [eax]
10000e13:	10 63 02             	adc    BYTE PTR [ebx+0x2],ah	10000e14: R_386_32	.text
10000e16:	00 10                	add    BYTE PTR [eax],dl
10000e18:	6a 02                	push   0x2	10000e18: R_386_32	.text
10000e1a:	00 10                	add    BYTE PTR [eax],dl
10000e1c:	6f                   	outs   dx,DWORD PTR ds:[esi]	10000e1c: R_386_32	.text
10000e1d:	02 00                	add    al,BYTE PTR [eax]
10000e1f:	10 78 02             	adc    BYTE PTR [eax+0x2],bh	10000e20: R_386_32	.text
10000e22:	00 10                	add    BYTE PTR [eax],dl
10000e24:	81 02 00 10 8a 02    	add    DWORD PTR [edx],0x28a1000	10000e24: R_386_32	.text
	10000e28: R_386_32	.text
10000e2a:	00 10                	add    BYTE PTR [eax],dl
10000e2c:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]	10000e2c: R_386_32	.text
10000e2d:	02 00                	add    al,BYTE PTR [eax]
10000e2f:	10 af 02 00 10 bb    	adc    BYTE PTR [edi-0x44effffe],ch	10000e30: R_386_32	.text
	10000e34: R_386_32	.text
10000e35:	02 00                	add    al,BYTE PTR [eax]
10000e37:	10 c3                	adc    bl,al	10000e38: R_386_32	.text
10000e39:	02 00                	add    al,BYTE PTR [eax]
10000e3b:	10 cb                	adc    bl,cl	10000e3c: R_386_32	.text
10000e3d:	02 00                	add    al,BYTE PTR [eax]
10000e3f:	10 e0                	adc    al,ah	10000e40: R_386_32	.text
10000e41:	02 00                	add    al,BYTE PTR [eax]
10000e43:	10 66 69             	adc    BYTE PTR [esi+0x69],ah
10000e46:	6c                   	ins    BYTE PTR es:[edi],dx
10000e47:	6c                   	ins    BYTE PTR es:[edi],dx
10000e48:	72 65                	jb     10000eaf <List<CRect*>::deleteHead()+0xf3>
10000e4a:	63 74 20 66          	arpl   WORD PTR [eax+eiz*1+0x66],si
10000e4e:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e4f:	75 6e                	jne    10000ebf <List<CRect*>::deleteHead()+0x103>
10000e51:	64 20 63 6c          	and    BYTE PTR fs:[ebx+0x6c],ah
10000e55:	69 70 72 65 63 74 2e 	imul   esi,DWORD PTR [eax+0x72],0x2e746365
10000e5c:	20 25 64 0a 00 2d    	and    BYTE PTR ds:0x2d000a64,ah
10000e62:	2d 3e 20 25 64       	sub    eax,0x6425203e
10000e67:	2c 20                	sub    al,0x20
10000e69:	25 64 2c 20 25       	and    eax,0x25202c64
10000e6e:	64 2c 20             	fs sub al,0x20
10000e71:	25 64 0a 00 2e       	and    eax,0x2e000a64
10000e76:	2e 2e 0a 0a          	cs or  cl,BYTE PTR cs:[edx]
10000e7a:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
10000e7d:	65 61                	gs popa 
10000e7f:	72 69                	jb     10000eea <List<CRect*>::deleteHead()+0x12e>
10000e81:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e82:	67 20 63 6c          	and    BYTE PTR [bp+di+0x6c],ah
10000e86:	69 70 20 72 65 63 74 	imul   esi,DWORD PTR [eax+0x20],0x74636572
10000e8d:	73 2e                	jae    10000ebd <List<CRect*>::deleteHead()+0x101>
10000e8f:	0a 00                	or     al,BYTE PTR [eax]
10000e91:	43                   	inc    ebx
10000e92:	6c                   	ins    BYTE PTR es:[edi],dx
10000e93:	65 61                	gs popa 
10000e95:	72 65                	jb     10000efc <List<CRect*>::deleteHead()+0x140>
10000e97:	64 2e 20 6c 65 6e    	fs and BYTE PTR cs:[ebp+eiz*2+0x6e],ch
10000e9d:	67 74 68             	addr16 je 10000f08 <List<CRect*>::deleteHead()+0x14c>
10000ea0:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10000ea6:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
10000ea9:	73 65                	jae    10000f10 <List<CRect*>::deleteHead()+0x154>
10000eab:	72 74                	jb     10000f21 <List<CRect*>::deleteHead()+0x165>
10000ead:	69 6e 67 20 61 74 20 	imul   ebp,DWORD PTR [esi+0x67],0x20746120
10000eb4:	74 61                	je     10000f17 <List<CRect*>::deleteHead()+0x15b>
10000eb6:	69 6c 2e 0a 00 47 44 4f 	imul   ebp,DWORD PTR [esi+ebp*1+0xa],0x4f444700
10000ebe:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000ec0:	75 70                	jne    10000f32 <_DYNAMIC+0xa>
10000ec2:	64 61                	fs popa 
10000ec4:	74 65                	je     10000f2b <_DYNAMIC+0x3>
10000ec6:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
10000ec9:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10000ecc:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000ecd:	2d 72 65 67 69       	sub    eax,0x69676572
10000ed2:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000ed3:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000ed4:	00 52 52             	add    BYTE PTR [edx+0x52],dl
10000ed7:	52                   	push   edx
10000ed8:	52                   	push   edx
10000ed9:	3a 20                	cmp    ah,BYTE PTR [eax]
10000edb:	25 64 2c 20 25       	and    eax,0x25202c64
10000ee0:	64 2c 20             	fs sub al,0x20
10000ee3:	25 64 2c 20 25       	and    eax,0x25202c64
10000ee8:	64 0a 00             	or     al,BYTE PTR fs:[eax]
10000eeb:	52                   	push   edx
10000eec:	45                   	inc    ebp
10000eed:	43                   	inc    ebx
10000eee:	54                   	push   esp
10000eef:	3a 20                	cmp    ah,BYTE PTR [eax]
10000ef1:	25 64 2c 20 25       	and    eax,0x25202c64
10000ef6:	64 2c 20             	fs sub al,0x20
10000ef9:	25 64 2c 20 25       	and    eax,0x25202c64
10000efe:	64 0a 00             	or     al,BYTE PTR fs:[eax]
10000f01:	47                   	inc    edi
10000f02:	44                   	inc    esp
10000f03:	4f                   	dec    edi
10000f04:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000f06:	61                   	popa   
10000f07:	64 64 43             	fs fs inc ebx
10000f0a:	68 69 6c 64 20       	push   0x20646c69
10000f0f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000f10:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000f11:	20 6d 6f             	and    BYTE PTR [ebp+0x6f],ch
10000f14:	72 65                	jb     10000f7b <_DYNAMIC+0x53>
10000f16:	20 73 6c             	and    BYTE PTR [ebx+0x6c],dh
10000f19:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000f1a:	74 73                	je     10000f8f <_DYNAMIC+0x67>
10000f1c:	20 6c 65 66          	and    BYTE PTR [ebp+eiz*2+0x66],ch
10000f20:	74 21                	je     10000f43 <_DYNAMIC+0x1b>
	...
