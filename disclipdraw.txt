
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 0c             	sub    esp,0xc
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	6a 14                	push   0x14
10000069:	e8 fc ff ff ff       	call   1000006a <NiMain(void*)+0x6a>	1000006a: R_386_PC32	malloc
1000006e:	89 c6                	mov    esi,eax
10000070:	58                   	pop    eax
10000071:	5a                   	pop    edx
10000072:	53                   	push   ebx
10000073:	56                   	push   esi
10000074:	e8 fc ff ff ff       	call   10000075 <NiMain(void*)+0x75>	10000075: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
10000079:	68 80 00 00 00       	push   0x80
1000007e:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000080: R_386_32	desktop
10000084:	6a 00                	push   0x0
10000086:	68 00 00 00 00       	push   0x0	10000087: R_386_32	NiDisplayRAM(void*)
1000008b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000008d: R_386_32	kernelProcess
10000091:	e8 fc ff ff ff       	call   10000092 <NiMain(void*)+0x92>	10000092: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000096:	83 c4 14             	add    esp,0x14
10000099:	6a 40                	push   0x40
1000009b:	e8 fc ff ff ff       	call   1000009c <NiMain(void*)+0x9c>	1000009c: R_386_PC32	malloc
100000a0:	59                   	pop    ecx
100000a1:	89 c5                	mov    ebp,eax
100000a3:	5b                   	pop    ebx
100000a4:	6a 01                	push   0x1
100000a6:	6a 01                	push   0x1
100000a8:	6a 00                	push   0x0
100000aa:	6a 00                	push   0x0
100000ac:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000ae: R_386_32	ctxt
100000b2:	50                   	push   eax
100000b3:	e8 fc ff ff ff       	call   100000b4 <NiMain(void*)+0xb4>	100000b4: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000b8:	83 c4 14             	add    esp,0x14
100000bb:	6a 40                	push   0x40
100000bd:	e8 fc ff ff ff       	call   100000be <NiMain(void*)+0xbe>	100000be: R_386_PC32	malloc
100000c2:	5e                   	pop    esi
100000c3:	89 c7                	mov    edi,eax
100000c5:	58                   	pop    eax
100000c6:	68 40 01 00 00       	push   0x140
100000cb:	68 90 01 00 00       	push   0x190
100000d0:	6a 32                	push   0x32
100000d2:	6a 32                	push   0x32
100000d4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000d6: R_386_32	ctxt
100000da:	57                   	push   edi
100000db:	e8 fc ff ff ff       	call   100000dc <NiMain(void*)+0xdc>	100000dc: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000e0:	83 c4 14             	add    esp,0x14
100000e3:	6a 40                	push   0x40
100000e5:	e8 fc ff ff ff       	call   100000e6 <NiMain(void*)+0xe6>	100000e6: R_386_PC32	malloc
100000ea:	89 c6                	mov    esi,eax
100000ec:	58                   	pop    eax
100000ed:	5a                   	pop    edx
100000ee:	68 7c 01 00 00       	push   0x17c
100000f3:	68 f4 01 00 00       	push   0x1f4
100000f8:	68 96 00 00 00       	push   0x96
100000fd:	68 c8 00 00 00       	push   0xc8
10000102:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000104: R_386_32	ctxt
10000108:	56                   	push   esi
10000109:	e8 fc ff ff ff       	call   1000010a <NiMain(void*)+0x10a>	1000010a: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
1000010e:	83 c4 14             	add    esp,0x14
10000111:	6a 40                	push   0x40
10000113:	e8 fc ff ff ff       	call   10000114 <NiMain(void*)+0x114>	10000114: R_386_PC32	malloc
10000118:	59                   	pop    ecx
10000119:	89 c3                	mov    ebx,eax
1000011b:	58                   	pop    eax
1000011c:	68 af 00 00 00       	push   0xaf
10000121:	68 0e 01 00 00       	push   0x10e
10000126:	68 90 01 00 00       	push   0x190
1000012b:	6a 7d                	push   0x7d
1000012d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000012f: R_386_32	ctxt
10000133:	53                   	push   ebx
10000134:	e8 fc ff ff ff       	call   10000135 <NiMain(void*)+0x135>	10000135: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10000139:	83 c4 18             	add    esp,0x18
1000013c:	83 4b 3c 01          	or     DWORD PTR [ebx+0x3c],0x1
10000140:	55                   	push   ebp
10000141:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000143: R_386_32	desktop
10000147:	e8 fc ff ff ff       	call   10000148 <NiMain(void*)+0x148>	10000148: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000014c:	58                   	pop    eax
1000014d:	5a                   	pop    edx
1000014e:	57                   	push   edi
1000014f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000151: R_386_32	desktop
10000155:	e8 fc ff ff ff       	call   10000156 <NiMain(void*)+0x156>	10000156: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000015a:	59                   	pop    ecx
1000015b:	5f                   	pop    edi
1000015c:	56                   	push   esi
1000015d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000015f: R_386_32	desktop
10000163:	e8 fc ff ff ff       	call   10000164 <NiMain(void*)+0x164>	10000164: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000168:	5d                   	pop    ebp
10000169:	58                   	pop    eax
1000016a:	53                   	push   ebx
1000016b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000016d: R_386_32	desktop
10000171:	e8 fc ff ff ff       	call   10000172 <NiMain(void*)+0x172>	10000172: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000176:	58                   	pop    eax
10000177:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000179: R_386_32	desktop
1000017d:	e8 fc ff ff ff       	call   1000017e <NiMain(void*)+0x17e>	1000017e: R_386_PC32	NIDesktop::completeRefresh()
10000182:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
10000189:	e8 fc ff ff ff       	call   1000018a <NiMain(void*)+0x18a>	1000018a: R_386_PC32	malloc
1000018e:	6a 00                	push   0x0
10000190:	89 c3                	mov    ebx,eax
10000192:	6a 00                	push   0x0
10000194:	68 f5 50 00 10       	push   0x100050f5	10000195: R_386_32	.text
10000199:	50                   	push   eax
1000019a:	e8 fc ff ff ff       	call   1000019b <NiMain(void*)+0x19b>	1000019b: R_386_PC32	Process::Process(char const*, Process*, char**)
1000019f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
100001a3:	83 c4 2c             	add    esp,0x2c
100001a6:	5b                   	pop    ebx
100001a7:	5e                   	pop    esi
100001a8:	5f                   	pop    edi
100001a9:	5d                   	pop    ebp
100001aa:	e9 fc ff ff ff       	jmp    100001ab <NiMain(void*)+0x1ab>	100001ab: R_386_PC32	Process::createUserThread()
100001af:	90                   	nop

100001b0 <NiBegin(void*)>:
100001b0:	83 ec 18             	sub    esp,0x18
100001b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100001b7:	e8 fc ff ff ff       	call   100001b8 <NiBegin(void*)+0x8>	100001b8: R_386_PC32	NiMain(void*)
100001bc:	83 c4 1c             	add    esp,0x1c
100001bf:	c3                   	ret    

100001c0 <_ssfn__bitreverse16>:
100001c0:	89 c2                	mov    edx,eax
100001c2:	01 c0                	add    eax,eax
100001c4:	d1 fa                	sar    edx,1
100001c6:	25 aa aa 00 00       	and    eax,0xaaaa
100001cb:	81 e2 55 55 00 00    	and    edx,0x5555
100001d1:	09 c2                	or     edx,eax
100001d3:	89 d0                	mov    eax,edx
100001d5:	c1 e2 02             	shl    edx,0x2
100001d8:	c1 f8 02             	sar    eax,0x2
100001db:	81 e2 cc cc 00 00    	and    edx,0xcccc
100001e1:	25 33 33 00 00       	and    eax,0x3333
100001e6:	09 d0                	or     eax,edx
100001e8:	89 c2                	mov    edx,eax
100001ea:	c1 e0 04             	shl    eax,0x4
100001ed:	c1 fa 04             	sar    edx,0x4
100001f0:	25 f0 f0 00 00       	and    eax,0xf0f0
100001f5:	81 e2 0f 0f 00 00    	and    edx,0xf0f
100001fb:	09 c2                	or     edx,eax
100001fd:	89 d1                	mov    ecx,edx
100001ff:	c1 e2 08             	shl    edx,0x8
10000202:	c1 f9 08             	sar    ecx,0x8
10000205:	0f b7 c2             	movzx  eax,dx
10000208:	09 c8                	or     eax,ecx
1000020a:	c3                   	ret    

1000020b <_ssfn__zhuffman_decode>:
1000020b:	55                   	push   ebp
1000020c:	57                   	push   edi
1000020d:	56                   	push   esi
1000020e:	53                   	push   ebx
1000020f:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
10000213:	7f 1d                	jg     10000232 <_ssfn__zhuffman_decode+0x27>
10000215:	8b 18                	mov    ebx,DWORD PTR [eax]
10000217:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000021a:	89 08                	mov    DWORD PTR [eax],ecx
1000021c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
1000021f:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000222:	d3 e3                	shl    ebx,cl
10000224:	83 c1 08             	add    ecx,0x8
10000227:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000022a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
1000022d:	83 f9 18             	cmp    ecx,0x18
10000230:	eb e1                	jmp    10000213 <_ssfn__zhuffman_decode+0x8>
10000232:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
10000235:	89 f9                	mov    ecx,edi
10000237:	81 e1 ff 01 00 00    	and    ecx,0x1ff
1000023d:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
10000241:	89 cb                	mov    ebx,ecx
10000243:	85 c9                	test   ecx,ecx
10000245:	74 15                	je     1000025c <_ssfn__zhuffman_decode+0x51>
10000247:	c1 f9 09             	sar    ecx,0x9
1000024a:	89 da                	mov    edx,ebx
1000024c:	d3 ef                	shr    edi,cl
1000024e:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
10000251:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10000254:	81 e2 ff 01 00 00    	and    edx,0x1ff
1000025a:	eb 58                	jmp    100002b4 <_ssfn__zhuffman_decode+0xa9>
1000025c:	89 d5                	mov    ebp,edx
1000025e:	89 c3                	mov    ebx,eax
10000260:	be 0a 00 00 00       	mov    esi,0xa
10000265:	89 f8                	mov    eax,edi
10000267:	e8 54 ff ff ff       	call   100001c0 <_ssfn__bitreverse16>
1000026c:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
10000273:	7c 03                	jl     10000278 <_ssfn__zhuffman_decode+0x6d>
10000275:	46                   	inc    esi
10000276:	eb f4                	jmp    1000026c <_ssfn__zhuffman_decode+0x61>
10000278:	83 ca ff             	or     edx,0xffffffff
1000027b:	83 fe 10             	cmp    esi,0x10
1000027e:	74 34                	je     100002b4 <_ssfn__zhuffman_decode+0xa9>
10000280:	8d 14 36             	lea    edx,[esi+esi*1]
10000283:	b9 10 00 00 00       	mov    ecx,0x10
10000288:	01 ea                	add    edx,ebp
1000028a:	29 f1                	sub    ecx,esi
1000028c:	d3 f8                	sar    eax,cl
1000028e:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
10000295:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
1000029c:	29 c8                	sub    eax,ecx
1000029e:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
100002a1:	89 f1                	mov    ecx,esi
100002a3:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
100002aa:	d3 ef                	shr    edi,cl
100002ac:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
100002af:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
100002b4:	5b                   	pop    ebx
100002b5:	89 d0                	mov    eax,edx
100002b7:	5e                   	pop    esi
100002b8:	5f                   	pop    edi
100002b9:	5d                   	pop    ebp
100002ba:	c3                   	ret    

100002bb <_ssfn__zexpand>:
100002bb:	55                   	push   ebp
100002bc:	57                   	push   edi
100002bd:	56                   	push   esi
100002be:	53                   	push   ebx
100002bf:	83 ec 0c             	sub    esp,0xc
100002c2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100002c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
100002c8:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
100002cb:	29 f9                	sub    ecx,edi
100002cd:	83 f9 08             	cmp    ecx,0x8
100002d0:	74 04                	je     100002d6 <_ssfn__zexpand+0x1b>
100002d2:	31 c0                	xor    eax,eax
100002d4:	eb 3c                	jmp    10000312 <_ssfn__zexpand+0x57>
100002d6:	80 3f 53             	cmp    BYTE PTR [edi],0x53
100002d9:	75 f7                	jne    100002d2 <_ssfn__zexpand+0x17>
100002db:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
100002df:	75 f1                	jne    100002d2 <_ssfn__zexpand+0x17>
100002e1:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
100002e5:	75 eb                	jne    100002d2 <_ssfn__zexpand+0x17>
100002e7:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
100002ea:	89 c3                	mov    ebx,eax
100002ec:	89 d6                	mov    esi,edx
100002ee:	50                   	push   eax
100002ef:	50                   	push   eax
100002f0:	55                   	push   ebp
100002f1:	57                   	push   edi
100002f2:	e8 fc ff ff ff       	call   100002f3 <_ssfn__zexpand+0x38>	100002f3: R_386_PC32	realloc
100002f7:	83 c4 10             	add    esp,0x10
100002fa:	85 c0                	test   eax,eax
100002fc:	74 d4                	je     100002d2 <_ssfn__zexpand+0x17>
100002fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000301:	29 fe                	sub    esi,edi
10000303:	01 c6                	add    esi,eax
10000305:	01 e8                	add    eax,ebp
10000307:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
1000030a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
1000030d:	b8 01 00 00 00       	mov    eax,0x1
10000312:	83 c4 0c             	add    esp,0xc
10000315:	5b                   	pop    ebx
10000316:	5e                   	pop    esi
10000317:	5f                   	pop    edi
10000318:	5d                   	pop    ebp
10000319:	c3                   	ret    

1000031a <_ssfn__zbuild_huffman>:
1000031a:	55                   	push   ebp
1000031b:	57                   	push   edi
1000031c:	56                   	push   esi
1000031d:	53                   	push   ebx
1000031e:	89 c3                	mov    ebx,eax
10000320:	81 ec a0 00 00 00    	sub    esp,0xa0
10000326:	31 c0                	xor    eax,eax
10000328:	89 0c 24             	mov    DWORD PTR [esp],ecx
1000032b:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
1000032f:	b9 11 00 00 00       	mov    ecx,0x11
10000334:	89 ef                	mov    edi,ebp
10000336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
1000033a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000033c:	b9 00 01 00 00       	mov    ecx,0x100
10000341:	89 df                	mov    edi,ebx
10000343:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000345:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10000348:	7d 0f                	jge    10000359 <_ssfn__zbuild_huffman+0x3f>
1000034a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
1000034e:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
10000352:	40                   	inc    eax
10000353:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
10000357:	eb ec                	jmp    10000345 <_ssfn__zbuild_huffman+0x2b>
10000359:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
10000361:	b9 01 00 00 00       	mov    ecx,0x1
10000366:	b8 01 00 00 00       	mov    eax,0x1
1000036b:	89 c7                	mov    edi,eax
1000036d:	d3 e7                	shl    edi,cl
1000036f:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
10000373:	0f 8f 10 01 00 00    	jg     10000489 <_ssfn__zbuild_huffman+0x16f>
10000379:	41                   	inc    ecx
1000037a:	83 f9 10             	cmp    ecx,0x10
1000037d:	75 ec                	jne    1000036b <_ssfn__zbuild_huffman+0x51>
1000037f:	31 ff                	xor    edi,edi
10000381:	31 f6                	xor    esi,esi
10000383:	b8 01 00 00 00       	mov    eax,0x1
10000388:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
1000038c:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
10000390:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
10000398:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
100003a0:	01 ef                	add    edi,ebp
100003a2:	85 ed                	test   ebp,ebp
100003a4:	74 11                	je     100003b7 <_ssfn__zbuild_huffman+0x9d>
100003a6:	ba 01 00 00 00       	mov    edx,0x1
100003ab:	88 c1                	mov    cl,al
100003ad:	d3 e2                	shl    edx,cl
100003af:	39 fa                	cmp    edx,edi
100003b1:	0f 8c d2 00 00 00    	jl     10000489 <_ssfn__zbuild_huffman+0x16f>
100003b7:	89 fa                	mov    edx,edi
100003b9:	b9 10 00 00 00       	mov    ecx,0x10
100003be:	01 ff                	add    edi,edi
100003c0:	29 c1                	sub    ecx,eax
100003c2:	01 ee                	add    esi,ebp
100003c4:	d3 e2                	shl    edx,cl
100003c6:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
100003cd:	40                   	inc    eax
100003ce:	83 f8 10             	cmp    eax,0x10
100003d1:	75 b5                	jne    10000388 <_ssfn__zbuild_huffman+0x6e>
100003d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
100003d6:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
100003e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100003e4:	31 ff                	xor    edi,edi
100003e6:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
100003ea:	0f 8d 9d 00 00 00    	jge    1000048d <_ssfn__zbuild_huffman+0x173>
100003f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100003f4:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
100003f8:	89 f2                	mov    edx,esi
100003fa:	85 f6                	test   esi,esi
100003fc:	0f 84 81 00 00 00    	je     10000483 <_ssfn__zbuild_huffman+0x169>
10000402:	8d 0c 36             	lea    ecx,[esi+esi*1]
10000405:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
10000409:	8d 04 19             	lea    eax,[ecx+ebx*1]
1000040c:	89 e9                	mov    ecx,ebp
1000040e:	89 04 24             	mov    DWORD PTR [esp],eax
10000411:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
10000418:	29 c1                	sub    ecx,eax
1000041a:	89 c8                	mov    eax,ecx
1000041c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000041f:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
10000426:	01 c8                	add    eax,ecx
10000428:	83 fe 09             	cmp    esi,0x9
1000042b:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
10000432:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
1000043a:	7f 42                	jg     1000047e <_ssfn__zbuild_huffman+0x164>
1000043c:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10000440:	89 e8                	mov    eax,ebp
10000442:	e8 79 fd ff ff       	call   100001c0 <_ssfn__bitreverse16>
10000447:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
1000044b:	b9 10 00 00 00       	mov    ecx,0x10
10000450:	29 f1                	sub    ecx,esi
10000452:	d3 f8                	sar    eax,cl
10000454:	88 d1                	mov    cl,dl
10000456:	89 04 24             	mov    DWORD PTR [esp],eax
10000459:	89 f2                	mov    edx,esi
1000045b:	b8 01 00 00 00       	mov    eax,0x1
10000460:	c1 e2 09             	shl    edx,0x9
10000463:	d3 e0                	shl    eax,cl
10000465:	09 fa                	or     edx,edi
10000467:	89 c1                	mov    ecx,eax
10000469:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
10000470:	7f 0c                	jg     1000047e <_ssfn__zbuild_huffman+0x164>
10000472:	8b 04 24             	mov    eax,DWORD PTR [esp]
10000475:	01 0c 24             	add    DWORD PTR [esp],ecx
10000478:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
1000047c:	eb eb                	jmp    10000469 <_ssfn__zbuild_huffman+0x14f>
1000047e:	45                   	inc    ebp
1000047f:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
10000483:	47                   	inc    edi
10000484:	e9 5d ff ff ff       	jmp    100003e6 <_ssfn__zbuild_huffman+0xcc>
10000489:	31 c0                	xor    eax,eax
1000048b:	eb 05                	jmp    10000492 <_ssfn__zbuild_huffman+0x178>
1000048d:	b8 01 00 00 00       	mov    eax,0x1
10000492:	81 c4 a0 00 00 00    	add    esp,0xa0
10000498:	5b                   	pop    ebx
10000499:	5e                   	pop    esi
1000049a:	5f                   	pop    edi
1000049b:	5d                   	pop    ebp
1000049c:	c3                   	ret    

1000049d <_ssfn_fc.part.1>:
1000049d:	55                   	push   ebp
1000049e:	57                   	push   edi
1000049f:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
100004a5:	56                   	push   esi
100004a6:	53                   	push   ebx
100004a7:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
100004ad:	83 ec 0c             	sub    esp,0xc
100004b0:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
100004b3:	74 5d                	je     10000512 <_ssfn_fc.part.1+0x75>
100004b5:	31 f6                	xor    esi,esi
100004b7:	8b 03                	mov    eax,DWORD PTR [ebx]
100004b9:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
100004bd:	74 35                	je     100004f4 <_ssfn_fc.part.1+0x57>
100004bf:	31 ed                	xor    ebp,ebp
100004c1:	8b 03                	mov    eax,DWORD PTR [ebx]
100004c3:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
100004c6:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
100004c9:	85 c0                	test   eax,eax
100004cb:	74 0c                	je     100004d9 <_ssfn_fc.part.1+0x3c>
100004cd:	83 ec 0c             	sub    esp,0xc
100004d0:	50                   	push   eax
100004d1:	e8 fc ff ff ff       	call   100004d2 <_ssfn_fc.part.1+0x35>	100004d2: R_386_PC32	free
100004d6:	83 c4 10             	add    esp,0x10
100004d9:	83 c5 04             	add    ebp,0x4
100004dc:	81 fd 00 04 00 00    	cmp    ebp,0x400
100004e2:	75 dd                	jne    100004c1 <_ssfn_fc.part.1+0x24>
100004e4:	83 ec 0c             	sub    esp,0xc
100004e7:	8b 03                	mov    eax,DWORD PTR [ebx]
100004e9:	ff 34 30             	push   DWORD PTR [eax+esi*1]
100004ec:	e8 fc ff ff ff       	call   100004ed <_ssfn_fc.part.1+0x50>	100004ed: R_386_PC32	free
100004f1:	83 c4 10             	add    esp,0x10
100004f4:	83 c6 04             	add    esi,0x4
100004f7:	81 fe 00 04 00 00    	cmp    esi,0x400
100004fd:	75 b8                	jne    100004b7 <_ssfn_fc.part.1+0x1a>
100004ff:	83 ec 0c             	sub    esp,0xc
10000502:	ff 33                	push   DWORD PTR [ebx]
10000504:	e8 fc ff ff ff       	call   10000505 <_ssfn_fc.part.1+0x68>	10000505: R_386_PC32	free
10000509:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
1000050f:	83 c4 10             	add    esp,0x10
10000512:	83 c3 04             	add    ebx,0x4
10000515:	39 fb                	cmp    ebx,edi
10000517:	75 97                	jne    100004b0 <_ssfn_fc.part.1+0x13>
10000519:	83 c4 0c             	add    esp,0xc
1000051c:	5b                   	pop    ebx
1000051d:	5e                   	pop    esi
1000051e:	5f                   	pop    edi
1000051f:	5d                   	pop    ebp
10000520:	c3                   	ret    

10000521 <_ssfn_l>:
10000521:	57                   	push   edi
10000522:	56                   	push   esi
10000523:	53                   	push   ebx
10000524:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000528:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000052c:	39 ce                	cmp    esi,ecx
1000052e:	89 f3                	mov    ebx,esi
10000530:	0f 9d c1             	setge  cl
10000533:	c1 eb 1f             	shr    ebx,0x1f
10000536:	09 d9                	or     ecx,ebx
10000538:	89 fb                	mov    ebx,edi
1000053a:	c1 eb 1f             	shr    ebx,0x1f
1000053d:	08 d9                	or     cl,bl
1000053f:	0f 85 e9 00 00 00    	jne    1000062e <_ssfn_l+0x10d>
10000545:	39 d7                	cmp    edi,edx
10000547:	0f 8d e1 00 00 00    	jge    1000062e <_ssfn_l+0x10d>
1000054d:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
10000553:	8d 51 08             	lea    edx,[ecx+0x8]
10000556:	8d 4f 08             	lea    ecx,[edi+0x8]
10000559:	c1 fa 04             	sar    edx,0x4
1000055c:	c1 f9 04             	sar    ecx,0x4
1000055f:	39 ca                	cmp    edx,ecx
10000561:	75 1a                	jne    1000057d <_ssfn_l+0x5c>
10000563:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
10000569:	8d 4e 08             	lea    ecx,[esi+0x8]
1000056c:	83 c2 08             	add    edx,0x8
1000056f:	c1 f9 04             	sar    ecx,0x4
10000572:	c1 fa 04             	sar    edx,0x4
10000575:	39 ca                	cmp    edx,ecx
10000577:	0f 84 b1 00 00 00    	je     1000062e <_ssfn_l+0x10d>
1000057d:	89 c3                	mov    ebx,eax
1000057f:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
10000585:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
1000058b:	7f 3e                	jg     100005cb <_ssfn_l+0xaa>
1000058d:	05 00 02 00 00       	add    eax,0x200
10000592:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
10000598:	52                   	push   edx
10000599:	01 c0                	add    eax,eax
1000059b:	52                   	push   edx
1000059c:	50                   	push   eax
1000059d:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
100005a3:	e8 fc ff ff ff       	call   100005a4 <_ssfn_l+0x83>	100005a4: R_386_PC32	realloc
100005a8:	83 c4 10             	add    esp,0x10
100005ab:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
100005b1:	85 c0                	test   eax,eax
100005b3:	75 16                	jne    100005cb <_ssfn_l+0xaa>
100005b5:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
100005bf:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
100005c9:	eb 63                	jmp    1000062e <_ssfn_l+0x10d>
100005cb:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
100005d2:	75 26                	jne    100005fa <_ssfn_l+0xd9>
100005d4:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005da:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
100005e0:	66 89 10             	mov    WORD PTR [eax],dx
100005e3:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005e9:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
100005ef:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
100005f3:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
100005fa:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000600:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000606:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
1000060a:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000610:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000616:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
1000061b:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10000621:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000628:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
1000062e:	5b                   	pop    ebx
1000062f:	5e                   	pop    esi
10000630:	5f                   	pop    edi
10000631:	c3                   	ret    

10000632 <_ssfn_b>:
10000632:	55                   	push   ebp
10000633:	57                   	push   edi
10000634:	56                   	push   esi
10000635:	53                   	push   ebx
10000636:	83 ec 4c             	sub    esp,0x4c
10000639:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000063d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10000641:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10000645:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10000649:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000064d:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
10000651:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10000655:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
10000659:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000065d:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
10000661:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10000665:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
10000669:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000066d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10000671:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000675:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
1000067c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10000680:	83 f8 04             	cmp    eax,0x4
10000683:	75 28                	jne    100006ad <_ssfn_b+0x7b>
10000685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000689:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
1000068d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10000691:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10000695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000699:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
1000069d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100006a1:	83 c4 4c             	add    esp,0x4c
100006a4:	5b                   	pop    ebx
100006a5:	5e                   	pop    esi
100006a6:	5f                   	pop    edi
100006a7:	5d                   	pop    ebp
100006a8:	e9 74 fe ff ff       	jmp    10000521 <_ssfn_l>
100006ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100006b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
100006b5:	75 0e                	jne    100006c5 <_ssfn_b+0x93>
100006b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
100006bb:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
100006bf:	0f 84 19 01 00 00    	je     100007de <_ssfn_b+0x1ac>
100006c5:	be 02 00 00 00       	mov    esi,0x2
100006ca:	89 d8                	mov    eax,ebx
100006cc:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
100006d0:	99                   	cdq    
100006d1:	f7 fe                	idiv   esi
100006d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
100006d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100006db:	89 e8                	mov    eax,ebp
100006dd:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
100006e1:	99                   	cdq    
100006e2:	f7 fe                	idiv   esi
100006e4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
100006e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100006ec:	89 f8                	mov    eax,edi
100006ee:	29 d8                	sub    eax,ebx
100006f0:	99                   	cdq    
100006f1:	f7 fe                	idiv   esi
100006f3:	01 c3                	add    ebx,eax
100006f5:	89 c8                	mov    eax,ecx
100006f7:	29 e8                	sub    eax,ebp
100006f9:	99                   	cdq    
100006fa:	f7 fe                	idiv   esi
100006fc:	01 e8                	add    eax,ebp
100006fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000706:	29 f8                	sub    eax,edi
10000708:	99                   	cdq    
10000709:	f7 fe                	idiv   esi
1000070b:	01 f8                	add    eax,edi
1000070d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10000715:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000719:	29 c8                	sub    eax,ecx
1000071b:	99                   	cdq    
1000071c:	f7 fe                	idiv   esi
1000071e:	01 c8                	add    eax,ecx
10000720:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10000724:	89 d8                	mov    eax,ebx
10000726:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
1000072a:	99                   	cdq    
1000072b:	f7 fe                	idiv   esi
1000072d:	8d 0c 38             	lea    ecx,[eax+edi*1]
10000730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000734:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10000738:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
1000073c:	99                   	cdq    
1000073d:	f7 fe                	idiv   esi
1000073f:	8d 2c 38             	lea    ebp,[eax+edi*1]
10000742:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000746:	29 d8                	sub    eax,ebx
10000748:	99                   	cdq    
10000749:	f7 fe                	idiv   esi
1000074b:	83 ec 0c             	sub    esp,0xc
1000074e:	01 d8                	add    eax,ebx
10000750:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000754:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10000758:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
1000075c:	99                   	cdq    
1000075d:	f7 fe                	idiv   esi
1000075f:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10000763:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10000767:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000076b:	29 c8                	sub    eax,ecx
1000076d:	99                   	cdq    
1000076e:	f7 fe                	idiv   esi
10000770:	8d 1c 08             	lea    ebx,[eax+ecx*1]
10000773:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10000777:	29 e8                	sub    eax,ebp
10000779:	99                   	cdq    
1000077a:	f7 fe                	idiv   esi
1000077c:	8d 34 28             	lea    esi,[eax+ebp*1]
1000077f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10000783:	8d 78 01             	lea    edi,[eax+0x1]
10000786:	57                   	push   edi
10000787:	56                   	push   esi
10000788:	53                   	push   ebx
10000789:	55                   	push   ebp
1000078a:	51                   	push   ecx
1000078b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
1000078f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000793:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
10000797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000079b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
1000079f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100007a3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100007a7:	e8 86 fe ff ff       	call   10000632 <_ssfn_b>
100007ac:	83 c4 24             	add    esp,0x24
100007af:	57                   	push   edi
100007b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100007b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100007b8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100007bc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100007c0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
100007c4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
100007c8:	56                   	push   esi
100007c9:	53                   	push   ebx
100007ca:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100007ce:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100007d2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100007d6:	e8 57 fe ff ff       	call   10000632 <_ssfn_b>
100007db:	83 c4 30             	add    esp,0x30
100007de:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
100007e3:	0f 85 9c fe ff ff    	jne    10000685 <_ssfn_b+0x53>
100007e9:	83 c4 4c             	add    esp,0x4c
100007ec:	5b                   	pop    ebx
100007ed:	5e                   	pop    esi
100007ee:	5f                   	pop    edi
100007ef:	5d                   	pop    ebp
100007f0:	c3                   	ret    

100007f1 <_ssfn__zreceive>:
100007f1:	56                   	push   esi
100007f2:	53                   	push   ebx
100007f3:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
100007f6:	7d 1d                	jge    10000815 <_ssfn__zreceive+0x24>
100007f8:	8b 18                	mov    ebx,DWORD PTR [eax]
100007fa:	8d 4b 01             	lea    ecx,[ebx+0x1]
100007fd:	89 08                	mov    DWORD PTR [eax],ecx
100007ff:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000802:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000805:	d3 e3                	shl    ebx,cl
10000807:	83 c1 08             	add    ecx,0x8
1000080a:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000080d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000810:	83 f9 18             	cmp    ecx,0x18
10000813:	7e e3                	jle    100007f8 <_ssfn__zreceive+0x7>
10000815:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
10000818:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
1000081b:	89 f3                	mov    ebx,esi
1000081d:	88 d1                	mov    cl,dl
1000081f:	d3 eb                	shr    ebx,cl
10000821:	88 d1                	mov    cl,dl
10000823:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10000826:	bb 01 00 00 00       	mov    ebx,0x1
1000082b:	d3 e3                	shl    ebx,cl
1000082d:	8d 43 ff             	lea    eax,[ebx-0x1]
10000830:	5b                   	pop    ebx
10000831:	21 f0                	and    eax,esi
10000833:	5e                   	pop    esi
10000834:	c3                   	ret    

10000835 <ssfn_utf8>:
10000835:	56                   	push   esi
10000836:	53                   	push   ebx
10000837:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000083b:	8b 11                	mov    edx,DWORD PTR [ecx]
1000083d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
10000840:	89 f0                	mov    eax,esi
10000842:	84 c0                	test   al,al
10000844:	0f be d8             	movsx  ebx,al
10000847:	78 04                	js     1000084d <ssfn_utf8+0x18>
10000849:	89 d8                	mov    eax,ebx
1000084b:	eb 7d                	jmp    100008ca <ssfn_utf8+0x95>
1000084d:	f7 c6 20 00 00 00    	test   esi,0x20
10000853:	75 14                	jne    10000869 <ssfn_utf8+0x34>
10000855:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
10000858:	c1 e3 06             	shl    ebx,0x6
1000085b:	83 e0 3f             	and    eax,0x3f
1000085e:	81 e3 c0 07 00 00    	and    ebx,0x7c0
10000864:	42                   	inc    edx
10000865:	09 d8                	or     eax,ebx
10000867:	eb 5f                	jmp    100008c8 <ssfn_utf8+0x93>
10000869:	f7 c6 10 00 00 00    	test   esi,0x10
1000086f:	75 20                	jne    10000891 <ssfn_utf8+0x5c>
10000871:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10000875:	c1 e3 0c             	shl    ebx,0xc
10000878:	c1 e0 06             	shl    eax,0x6
1000087b:	0f b7 db             	movzx  ebx,bx
1000087e:	25 c0 0f 00 00       	and    eax,0xfc0
10000883:	83 c2 02             	add    edx,0x2
10000886:	09 d8                	or     eax,ebx
10000888:	8a 1a                	mov    bl,BYTE PTR [edx]
1000088a:	83 e3 3f             	and    ebx,0x3f
1000088d:	09 d8                	or     eax,ebx
1000088f:	eb 37                	jmp    100008c8 <ssfn_utf8+0x93>
10000891:	31 c0                	xor    eax,eax
10000893:	83 e6 08             	and    esi,0x8
10000896:	75 32                	jne    100008ca <ssfn_utf8+0x95>
10000898:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
1000089c:	c1 e3 12             	shl    ebx,0x12
1000089f:	c1 e0 0c             	shl    eax,0xc
100008a2:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
100008a8:	25 00 f0 03 00       	and    eax,0x3f000
100008ad:	83 c2 03             	add    edx,0x3
100008b0:	09 d8                	or     eax,ebx
100008b2:	8a 1a                	mov    bl,BYTE PTR [edx]
100008b4:	83 e3 3f             	and    ebx,0x3f
100008b7:	09 d8                	or     eax,ebx
100008b9:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
100008bd:	c1 e3 06             	shl    ebx,0x6
100008c0:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
100008c6:	09 d8                	or     eax,ebx
100008c8:	89 11                	mov    DWORD PTR [ecx],edx
100008ca:	ff 01                	inc    DWORD PTR [ecx]
100008cc:	5b                   	pop    ebx
100008cd:	5e                   	pop    esi
100008ce:	c3                   	ret    

100008cf <_ssfn_c>:
100008cf:	55                   	push   ebp
100008d0:	57                   	push   edi
100008d1:	56                   	push   esi
100008d2:	53                   	push   ebx
100008d3:	83 ec 14             	sub    esp,0x14
100008d6:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
100008dc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100008e0:	85 c0                	test   eax,eax
100008e2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
100008e8:	0f 84 e6 00 00 00    	je     100009d4 <_ssfn_c+0x105>
100008ee:	31 ff                	xor    edi,edi
100008f0:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
100008f4:	0f 84 f3 00 00 00    	je     100009ed <_ssfn_c+0x11e>
100008fa:	85 d2                	test   edx,edx
100008fc:	0f 84 eb 00 00 00    	je     100009ed <_ssfn_c+0x11e>
10000902:	80 3a 00             	cmp    BYTE PTR [edx],0x0
10000905:	0f 84 e2 00 00 00    	je     100009ed <_ssfn_c+0x11e>
1000090b:	89 d6                	mov    esi,edx
1000090d:	89 cd                	mov    ebp,ecx
1000090f:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000912:	89 c3                	mov    ebx,eax
10000914:	85 d2                	test   edx,edx
10000916:	74 38                	je     10000950 <_ssfn_c+0x81>
10000918:	8d 0c 13             	lea    ecx,[ebx+edx*1]
1000091b:	31 c0                	xor    eax,eax
1000091d:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000920:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000923:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
10000927:	66 85 d2             	test   dx,dx
1000092a:	74 24                	je     10000950 <_ssfn_c+0x81>
1000092c:	01 da                	add    edx,ebx
1000092e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000932:	8a 0a                	mov    cl,BYTE PTR [edx]
10000934:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000938:	84 c9                	test   cl,cl
1000093a:	0f 84 9e 00 00 00    	je     100009de <_ssfn_c+0x10f>
10000940:	3a 0f                	cmp    cl,BYTE PTR [edi]
10000942:	0f 85 90 00 00 00    	jne    100009d8 <_ssfn_c+0x109>
10000948:	47                   	inc    edi
10000949:	42                   	inc    edx
1000094a:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
1000094e:	eb e2                	jmp    10000932 <_ssfn_c+0x63>
10000950:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000954:	8d 44 24 10          	lea    eax,[esp+0x10]
10000958:	50                   	push   eax
10000959:	e8 fc ff ff ff       	call   1000095a <_ssfn_c+0x8b>	1000095a: R_386_PC32	ssfn_utf8
1000095e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000962:	29 f2                	sub    edx,esi
10000964:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
10000967:	5a                   	pop    edx
10000968:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
1000096c:	89 06                	mov    DWORD PTR [esi],eax
1000096e:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
10000971:	89 df                	mov    edi,ebx
10000973:	31 db                	xor    ebx,ebx
10000975:	8a 17                	mov    dl,BYTE PTR [edi]
10000977:	80 fa ff             	cmp    dl,0xff
1000097a:	75 08                	jne    10000984 <_ssfn_c+0xb5>
1000097c:	81 c3 ff ff 00 00    	add    ebx,0xffff
10000982:	eb 2a                	jmp    100009ae <_ssfn_c+0xdf>
10000984:	88 d1                	mov    cl,dl
10000986:	83 e1 c0             	and    ecx,0xffffffc0
10000989:	80 f9 c0             	cmp    cl,0xc0
1000098c:	75 16                	jne    100009a4 <_ssfn_c+0xd5>
1000098e:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000992:	c1 e2 08             	shl    edx,0x8
10000995:	83 c7 02             	add    edi,0x2
10000998:	81 e2 00 3f 00 00    	and    edx,0x3f00
1000099e:	09 ca                	or     edx,ecx
100009a0:	01 d3                	add    ebx,edx
100009a2:	eb 27                	jmp    100009cb <_ssfn_c+0xfc>
100009a4:	80 f9 80             	cmp    cl,0x80
100009a7:	75 08                	jne    100009b1 <_ssfn_c+0xe2>
100009a9:	83 e2 3f             	and    edx,0x3f
100009ac:	01 d3                	add    ebx,edx
100009ae:	47                   	inc    edi
100009af:	eb 1a                	jmp    100009cb <_ssfn_c+0xfc>
100009b1:	39 d8                	cmp    eax,ebx
100009b3:	74 38                	je     100009ed <_ssfn_c+0x11e>
100009b5:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100009b9:	83 e2 40             	and    edx,0x40
100009bc:	80 fa 01             	cmp    dl,0x1
100009bf:	19 d2                	sbb    edx,edx
100009c1:	83 c2 06             	add    edx,0x6
100009c4:	0f af d1             	imul   edx,ecx
100009c7:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
100009cb:	43                   	inc    ebx
100009cc:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
100009d2:	76 a1                	jbe    10000975 <_ssfn_c+0xa6>
100009d4:	31 ff                	xor    edi,edi
100009d6:	eb 15                	jmp    100009ed <_ssfn_c+0x11e>
100009d8:	40                   	inc    eax
100009d9:	e9 42 ff ff ff       	jmp    10000920 <_ssfn_c+0x51>
100009de:	29 f7                	sub    edi,esi
100009e0:	05 00 f0 00 00       	add    eax,0xf000
100009e5:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
100009e8:	e9 7b ff ff ff       	jmp    10000968 <_ssfn_c+0x99>
100009ed:	83 c4 14             	add    esp,0x14
100009f0:	89 f8                	mov    eax,edi
100009f2:	5b                   	pop    ebx
100009f3:	5e                   	pop    esi
100009f4:	5f                   	pop    edi
100009f5:	5d                   	pop    ebp
100009f6:	c3                   	ret    

100009f7 <_ssfn_zlib_decode>:
100009f7:	55                   	push   ebp
100009f8:	57                   	push   edi
100009f9:	56                   	push   esi
100009fa:	53                   	push   ebx
100009fb:	81 ec c8 19 00 00    	sub    esp,0x19c8
10000a01:	6a 08                	push   0x8
10000a03:	e8 fc ff ff ff       	call   10000a04 <_ssfn_zlib_decode+0xd>	10000a04: R_386_PC32	malloc
10000a08:	83 c4 10             	add    esp,0x10
10000a0b:	89 c2                	mov    edx,eax
10000a0d:	85 c0                	test   eax,eax
10000a0f:	0f 84 eb 04 00 00    	je     10000f00 <_ssfn_zlib_decode+0x509>
10000a15:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
10000a1c:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
10000a23:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
10000a2a:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
10000a31:	31 c0                	xor    eax,eax
10000a33:	83 c2 08             	add    edx,0x8
10000a36:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
10000a3d:	c6 80 c0 56 03 10 08 	mov    BYTE PTR [eax+0x100356c0],0x8	10000a3f: R_386_32	.bss
10000a44:	40                   	inc    eax
10000a45:	3d 90 00 00 00       	cmp    eax,0x90
10000a4a:	75 f1                	jne    10000a3d <_ssfn_zlib_decode+0x46>
10000a4c:	c6 80 c0 56 03 10 09 	mov    BYTE PTR [eax+0x100356c0],0x9	10000a4e: R_386_32	.bss
10000a53:	40                   	inc    eax
10000a54:	3d 00 01 00 00       	cmp    eax,0x100
10000a59:	75 f1                	jne    10000a4c <_ssfn_zlib_decode+0x55>
10000a5b:	c6 80 c0 56 03 10 07 	mov    BYTE PTR [eax+0x100356c0],0x7	10000a5d: R_386_32	.bss
10000a62:	40                   	inc    eax
10000a63:	3d 18 01 00 00       	cmp    eax,0x118
10000a68:	75 f1                	jne    10000a5b <_ssfn_zlib_decode+0x64>
10000a6a:	c7 05 d8 57 03 10 08 08 08 08 	mov    DWORD PTR ds:0x100357d8,0x8080808	10000a6c: R_386_32	.bss
10000a74:	c7 05 dc 57 03 10 08 08 08 08 	mov    DWORD PTR ds:0x100357dc,0x8080808	10000a76: R_386_32	.bss
10000a7e:	31 c0                	xor    eax,eax
10000a80:	c6 80 a0 56 03 10 05 	mov    BYTE PTR [eax+0x100356a0],0x5	10000a82: R_386_32	.bss
10000a87:	40                   	inc    eax
10000a88:	83 f8 20             	cmp    eax,0x20
10000a8b:	75 f3                	jne    10000a80 <_ssfn_zlib_decode+0x89>
10000a8d:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
10000a98:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
10000aa3:	ba 01 00 00 00       	mov    edx,0x1
10000aa8:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000aaf:	e8 3d fd ff ff       	call   100007f1 <_ssfn__zreceive>
10000ab4:	ba 02 00 00 00       	mov    edx,0x2
10000ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000abd:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ac4:	e8 28 fd ff ff       	call   100007f1 <_ssfn__zreceive>
10000ac9:	89 c6                	mov    esi,eax
10000acb:	85 c0                	test   eax,eax
10000acd:	0f 85 09 01 00 00    	jne    10000bdc <_ssfn_zlib_decode+0x1e5>
10000ad3:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000ada:	83 e2 07             	and    edx,0x7
10000add:	74 0c                	je     10000aeb <_ssfn_zlib_decode+0xf4>
10000adf:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ae6:	e8 06 fd ff ff       	call   100007f1 <_ssfn__zreceive>
10000aeb:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000af2:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000af9:	31 c0                	xor    eax,eax
10000afb:	31 db                	xor    ebx,ebx
10000afd:	85 d2                	test   edx,edx
10000aff:	7f 14                	jg     10000b15 <_ssfn_zlib_decode+0x11e>
10000b01:	84 db                	test   bl,bl
10000b03:	74 22                	je     10000b27 <_ssfn_zlib_decode+0x130>
10000b05:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000b0c:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000b13:	eb 12                	jmp    10000b27 <_ssfn_zlib_decode+0x130>
10000b15:	40                   	inc    eax
10000b16:	83 ea 08             	sub    edx,0x8
10000b19:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000b20:	b3 01                	mov    bl,0x1
10000b22:	c1 e9 08             	shr    ecx,0x8
10000b25:	eb d6                	jmp    10000afd <_ssfn_zlib_decode+0x106>
10000b27:	83 f8 04             	cmp    eax,0x4
10000b2a:	74 1d                	je     10000b49 <_ssfn_zlib_decode+0x152>
10000b2c:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000b33:	40                   	inc    eax
10000b34:	8d 4a 01             	lea    ecx,[edx+0x1]
10000b37:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000b3e:	8a 12                	mov    dl,BYTE PTR [edx]
10000b40:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000b47:	eb de                	jmp    10000b27 <_ssfn_zlib_decode+0x130>
10000b49:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000b51:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000b59:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000b61:	c1 e3 08             	shl    ebx,0x8
10000b64:	01 c3                	add    ebx,eax
10000b66:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000b6e:	c1 e0 08             	shl    eax,0x8
10000b71:	01 d0                	add    eax,edx
10000b73:	89 da                	mov    edx,ebx
10000b75:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000b7b:	39 d0                	cmp    eax,edx
10000b7d:	0f 85 69 03 00 00    	jne    10000eec <_ssfn_zlib_decode+0x4f5>
10000b83:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000b8a:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000b8d:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000b94:	73 14                	jae    10000baa <_ssfn_zlib_decode+0x1b3>
10000b96:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b9d:	e8 19 f7 ff ff       	call   100002bb <_ssfn__zexpand>
10000ba2:	85 c0                	test   eax,eax
10000ba4:	0f 84 42 03 00 00    	je     10000eec <_ssfn_zlib_decode+0x4f5>
10000baa:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000bb1:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000bb8:	39 f3                	cmp    ebx,esi
10000bba:	74 09                	je     10000bc5 <_ssfn_zlib_decode+0x1ce>
10000bbc:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000bbf:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000bc2:	46                   	inc    esi
10000bc3:	eb e5                	jmp    10000baa <_ssfn_zlib_decode+0x1b3>
10000bc5:	01 da                	add    edx,ebx
10000bc7:	01 c3                	add    ebx,eax
10000bc9:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000bd0:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000bd7:	e9 fc 02 00 00       	jmp    10000ed8 <_ssfn_zlib_decode+0x4e1>
10000bdc:	83 f8 03             	cmp    eax,0x3
10000bdf:	0f 84 07 03 00 00    	je     10000eec <_ssfn_zlib_decode+0x4f5>
10000be5:	4e                   	dec    esi
10000be6:	75 2d                	jne    10000c15 <_ssfn_zlib_decode+0x21e>
10000be8:	b9 20 01 00 00       	mov    ecx,0x120
10000bed:	ba c0 56 03 10       	mov    edx,0x100356c0	10000bee: R_386_32	.bss
10000bf2:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000bf9:	e8 1c f7 ff ff       	call   1000031a <_ssfn__zbuild_huffman>
10000bfe:	85 c0                	test   eax,eax
10000c00:	0f 84 e6 02 00 00    	je     10000eec <_ssfn_zlib_decode+0x4f5>
10000c06:	b9 20 00 00 00       	mov    ecx,0x20
10000c0b:	ba a0 56 03 10       	mov    edx,0x100356a0	10000c0c: R_386_32	.bss
10000c10:	e9 78 01 00 00       	jmp    10000d8d <_ssfn_zlib_decode+0x396>
10000c15:	ba 05 00 00 00       	mov    edx,0x5
10000c1a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c21:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000c25:	e8 c7 fb ff ff       	call   100007f1 <_ssfn__zreceive>
10000c2a:	89 df                	mov    edi,ebx
10000c2c:	ba 05 00 00 00       	mov    edx,0x5
10000c31:	89 c5                	mov    ebp,eax
10000c33:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c3a:	e8 b2 fb ff ff       	call   100007f1 <_ssfn__zreceive>
10000c3f:	ba 04 00 00 00       	mov    edx,0x4
10000c44:	89 c6                	mov    esi,eax
10000c46:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c4d:	e8 9f fb ff ff       	call   100007f1 <_ssfn__zreceive>
10000c52:	b9 13 00 00 00       	mov    ecx,0x13
10000c57:	83 c0 04             	add    eax,0x4
10000c5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000c5e:	31 c0                	xor    eax,eax
10000c60:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000c62:	31 ff                	xor    edi,edi
10000c64:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000c68:	7e 1f                	jle    10000c89 <_ssfn_zlib_decode+0x292>
10000c6a:	ba 03 00 00 00       	mov    edx,0x3
10000c6f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c76:	47                   	inc    edi
10000c77:	e8 75 fb ff ff       	call   100007f1 <_ssfn__zreceive>
10000c7c:	0f b6 97 3f 52 00 10 	movzx  edx,BYTE PTR [edi+0x1000523f]	10000c7f: R_386_32	.text
10000c83:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000c87:	eb db                	jmp    10000c64 <_ssfn_zlib_decode+0x26d>
10000c89:	b9 13 00 00 00       	mov    ecx,0x13
10000c8e:	89 da                	mov    edx,ebx
10000c90:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000c97:	e8 7e f6 ff ff       	call   1000031a <_ssfn__zbuild_huffman>
10000c9c:	85 c0                	test   eax,eax
10000c9e:	0f 84 48 02 00 00    	je     10000eec <_ssfn_zlib_decode+0x4f5>
10000ca4:	8d 46 01             	lea    eax,[esi+0x1]
10000ca7:	81 c5 01 01 00 00    	add    ebp,0x101
10000cad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000cb1:	31 f6                	xor    esi,esi
10000cb3:	01 e8                	add    eax,ebp
10000cb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000cb9:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000cbd:	0f 8e 9f 00 00 00    	jle    10000d62 <_ssfn_zlib_decode+0x36b>
10000cc3:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000cca:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000cd1:	e8 35 f5 ff ff       	call   1000020b <_ssfn__zhuffman_decode>
10000cd6:	83 f8 12             	cmp    eax,0x12
10000cd9:	0f 87 0d 02 00 00    	ja     10000eec <_ssfn_zlib_decode+0x4f5>
10000cdf:	83 f8 0f             	cmp    eax,0xf
10000ce2:	7f 07                	jg     10000ceb <_ssfn_zlib_decode+0x2f4>
10000ce4:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000ce8:	46                   	inc    esi
10000ce9:	eb ce                	jmp    10000cb9 <_ssfn_zlib_decode+0x2c2>
10000ceb:	83 f8 10             	cmp    eax,0x10
10000cee:	75 22                	jne    10000d12 <_ssfn_zlib_decode+0x31b>
10000cf0:	ba 02 00 00 00       	mov    edx,0x2
10000cf5:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000cfc:	e8 f0 fa ff ff       	call   100007f1 <_ssfn__zreceive>
10000d01:	85 f6                	test   esi,esi
10000d03:	8d 58 03             	lea    ebx,[eax+0x3]
10000d06:	0f 84 e0 01 00 00    	je     10000eec <_ssfn_zlib_decode+0x4f5>
10000d0c:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000d10:	eb 31                	jmp    10000d43 <_ssfn_zlib_decode+0x34c>
10000d12:	83 f8 11             	cmp    eax,0x11
10000d15:	75 16                	jne    10000d2d <_ssfn_zlib_decode+0x336>
10000d17:	ba 03 00 00 00       	mov    edx,0x3
10000d1c:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d23:	e8 c9 fa ff ff       	call   100007f1 <_ssfn__zreceive>
10000d28:	8d 58 03             	lea    ebx,[eax+0x3]
10000d2b:	eb 14                	jmp    10000d41 <_ssfn_zlib_decode+0x34a>
10000d2d:	ba 07 00 00 00       	mov    edx,0x7
10000d32:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d39:	e8 b3 fa ff ff       	call   100007f1 <_ssfn__zreceive>
10000d3e:	8d 58 0b             	lea    ebx,[eax+0xb]
10000d41:	31 c0                	xor    eax,eax
10000d43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000d47:	29 f2                	sub    edx,esi
10000d49:	39 da                	cmp    edx,ebx
10000d4b:	0f 8c 9b 01 00 00    	jl     10000eec <_ssfn_zlib_decode+0x4f5>
10000d51:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000d55:	89 d9                	mov    ecx,ebx
10000d57:	89 d7                	mov    edi,edx
10000d59:	01 de                	add    esi,ebx
10000d5b:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000d5d:	e9 57 ff ff ff       	jmp    10000cb9 <_ssfn_zlib_decode+0x2c2>
10000d62:	0f 85 84 01 00 00    	jne    10000eec <_ssfn_zlib_decode+0x4f5>
10000d68:	89 e9                	mov    ecx,ebp
10000d6a:	8d 54 24 25          	lea    edx,[esp+0x25]
10000d6e:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000d75:	e8 a0 f5 ff ff       	call   1000031a <_ssfn__zbuild_huffman>
10000d7a:	85 c0                	test   eax,eax
10000d7c:	0f 84 6a 01 00 00    	je     10000eec <_ssfn_zlib_decode+0x4f5>
10000d82:	8d 44 24 25          	lea    eax,[esp+0x25]
10000d86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000d8a:	8d 14 28             	lea    edx,[eax+ebp*1]
10000d8d:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000d94:	e8 81 f5 ff ff       	call   1000031a <_ssfn__zbuild_huffman>
10000d99:	85 c0                	test   eax,eax
10000d9b:	0f 84 4b 01 00 00    	je     10000eec <_ssfn_zlib_decode+0x4f5>
10000da1:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000da8:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000daf:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000db6:	e8 50 f4 ff ff       	call   1000020b <_ssfn__zhuffman_decode>
10000dbb:	89 c3                	mov    ebx,eax
10000dbd:	3d ff 00 00 00       	cmp    eax,0xff
10000dc2:	7f 34                	jg     10000df8 <_ssfn_zlib_decode+0x401>
10000dc4:	85 c0                	test   eax,eax
10000dc6:	0f 88 20 01 00 00    	js     10000eec <_ssfn_zlib_decode+0x4f5>
10000dcc:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000dd3:	77 1d                	ja     10000df2 <_ssfn_zlib_decode+0x3fb>
10000dd5:	89 ea                	mov    edx,ebp
10000dd7:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dde:	e8 d8 f4 ff ff       	call   100002bb <_ssfn__zexpand>
10000de3:	85 c0                	test   eax,eax
10000de5:	0f 84 01 01 00 00    	je     10000eec <_ssfn_zlib_decode+0x4f5>
10000deb:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000df2:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000df5:	45                   	inc    ebp
10000df6:	eb b0                	jmp    10000da8 <_ssfn_zlib_decode+0x3b1>
10000df8:	3d 00 01 00 00       	cmp    eax,0x100
10000dfd:	75 0c                	jne    10000e0b <_ssfn_zlib_decode+0x414>
10000dff:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000e06:	e9 cd 00 00 00       	jmp    10000ed8 <_ssfn_zlib_decode+0x4e1>
10000e0b:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000e11:	8b 14 85 60 53 00 10 	mov    edx,DWORD PTR [eax*4+0x10005360]	10000e14: R_386_32	.text
10000e18:	8b 1c 85 e0 53 00 10 	mov    ebx,DWORD PTR [eax*4+0x100053e0]	10000e1b: R_386_32	.text
10000e1f:	85 d2                	test   edx,edx
10000e21:	74 0e                	je     10000e31 <_ssfn_zlib_decode+0x43a>
10000e23:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e2a:	e8 c2 f9 ff ff       	call   100007f1 <_ssfn__zreceive>
10000e2f:	01 c3                	add    ebx,eax
10000e31:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000e38:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e3f:	e8 c7 f3 ff ff       	call   1000020b <_ssfn__zhuffman_decode>
10000e44:	85 c0                	test   eax,eax
10000e46:	0f 88 a0 00 00 00    	js     10000eec <_ssfn_zlib_decode+0x4f5>
10000e4c:	8b 14 85 60 52 00 10 	mov    edx,DWORD PTR [eax*4+0x10005260]	10000e4f: R_386_32	.text
10000e53:	8b 3c 85 e0 52 00 10 	mov    edi,DWORD PTR [eax*4+0x100052e0]	10000e56: R_386_32	.text
10000e5a:	85 d2                	test   edx,edx
10000e5c:	74 0e                	je     10000e6c <_ssfn_zlib_decode+0x475>
10000e5e:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e65:	e8 87 f9 ff ff       	call   100007f1 <_ssfn__zreceive>
10000e6a:	01 c7                	add    edi,eax
10000e6c:	89 e8                	mov    eax,ebp
10000e6e:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000e75:	39 f8                	cmp    eax,edi
10000e77:	7c 73                	jl     10000eec <_ssfn_zlib_decode+0x4f5>
10000e79:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000e7d:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000e84:	73 19                	jae    10000e9f <_ssfn_zlib_decode+0x4a8>
10000e86:	89 ea                	mov    edx,ebp
10000e88:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e8f:	e8 27 f4 ff ff       	call   100002bb <_ssfn__zexpand>
10000e94:	85 c0                	test   eax,eax
10000e96:	74 54                	je     10000eec <_ssfn_zlib_decode+0x4f5>
10000e98:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000e9f:	89 ee                	mov    esi,ebp
10000ea1:	29 fe                	sub    esi,edi
10000ea3:	4f                   	dec    edi
10000ea4:	75 19                	jne    10000ebf <_ssfn_zlib_decode+0x4c8>
10000ea6:	85 db                	test   ebx,ebx
10000ea8:	0f 84 fa fe ff ff    	je     10000da8 <_ssfn_zlib_decode+0x3b1>
10000eae:	8a 06                	mov    al,BYTE PTR [esi]
10000eb0:	01 eb                	add    ebx,ebp
10000eb2:	45                   	inc    ebp
10000eb3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000eb6:	39 dd                	cmp    ebp,ebx
10000eb8:	75 f8                	jne    10000eb2 <_ssfn_zlib_decode+0x4bb>
10000eba:	e9 e9 fe ff ff       	jmp    10000da8 <_ssfn_zlib_decode+0x3b1>
10000ebf:	85 db                	test   ebx,ebx
10000ec1:	0f 84 e1 fe ff ff    	je     10000da8 <_ssfn_zlib_decode+0x3b1>
10000ec7:	8d 04 1e             	lea    eax,[esi+ebx*1]
10000eca:	89 ef                	mov    edi,ebp
10000ecc:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000ecd:	39 f0                	cmp    eax,esi
10000ecf:	75 fb                	jne    10000ecc <_ssfn_zlib_decode+0x4d5>
10000ed1:	01 dd                	add    ebp,ebx
10000ed3:	e9 d0 fe ff ff       	jmp    10000da8 <_ssfn_zlib_decode+0x3b1>
10000ed8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10000edd:	0f 84 c0 fb ff ff    	je     10000aa3 <_ssfn_zlib_decode+0xac>
10000ee3:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
10000eea:	eb 14                	jmp    10000f00 <_ssfn_zlib_decode+0x509>
10000eec:	83 ec 0c             	sub    esp,0xc
10000eef:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10000ef6:	e8 fc ff ff ff       	call   10000ef7 <_ssfn_zlib_decode+0x500>	10000ef7: R_386_PC32	free
10000efb:	83 c4 10             	add    esp,0x10
10000efe:	31 c0                	xor    eax,eax
10000f00:	81 c4 bc 19 00 00    	add    esp,0x19bc
10000f06:	5b                   	pop    ebx
10000f07:	5e                   	pop    esi
10000f08:	5f                   	pop    edi
10000f09:	5d                   	pop    ebp
10000f0a:	c3                   	ret    

10000f0b <ssfn_load>:
10000f0b:	55                   	push   ebp
10000f0c:	57                   	push   edi
10000f0d:	56                   	push   esi
10000f0e:	53                   	push   ebx
10000f0f:	83 ec 1c             	sub    esp,0x1c
10000f12:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000f16:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000f1a:	85 ff                	test   edi,edi
10000f1c:	0f 84 d0 01 00 00    	je     100010f2 <ssfn_load+0x1e7>
10000f22:	85 f6                	test   esi,esi
10000f24:	0f 84 c8 01 00 00    	je     100010f2 <ssfn_load+0x1e7>
10000f2a:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
10000f2d:	0f 85 a8 00 00 00    	jne    10000fdb <ssfn_load+0xd0>
10000f33:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10000f37:	0f 85 9e 00 00 00    	jne    10000fdb <ssfn_load+0xd0>
10000f3d:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10000f41:	74 0a                	je     10000f4d <ssfn_load+0x42>
10000f43:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10000f48:	e9 aa 01 00 00       	jmp    100010f7 <ssfn_load+0x1ec>
10000f4d:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
10000f50:	a8 04                	test   al,0x4
10000f52:	75 05                	jne    10000f59 <ssfn_load+0x4e>
10000f54:	83 c6 0a             	add    esi,0xa
10000f57:	eb 08                	jmp    10000f61 <ssfn_load+0x56>
10000f59:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
10000f5d:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10000f61:	a8 08                	test   al,0x8
10000f63:	74 07                	je     10000f6c <ssfn_load+0x61>
10000f65:	46                   	inc    esi
10000f66:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f6a:	eb f7                	jmp    10000f63 <ssfn_load+0x58>
10000f6c:	a8 10                	test   al,0x10
10000f6e:	74 07                	je     10000f77 <ssfn_load+0x6c>
10000f70:	46                   	inc    esi
10000f71:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f75:	eb f7                	jmp    10000f6e <ssfn_load+0x63>
10000f77:	83 ec 0c             	sub    esp,0xc
10000f7a:	56                   	push   esi
10000f7b:	e8 fc ff ff ff       	call   10000f7c <ssfn_load+0x71>	10000f7c: R_386_PC32	_ssfn_zlib_decode
10000f80:	83 c4 10             	add    esp,0x10
10000f83:	89 c6                	mov    esi,eax
10000f85:	85 c0                	test   eax,eax
10000f87:	74 ba                	je     10000f43 <ssfn_load+0x38>
10000f89:	50                   	push   eax
10000f8a:	50                   	push   eax
10000f8b:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10000f91:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10000f98:	50                   	push   eax
10000f99:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
10000f9f:	e8 fc ff ff ff       	call   10000fa0 <ssfn_load+0x95>	10000fa0: R_386_PC32	realloc
10000fa4:	83 c4 10             	add    esp,0x10
10000fa7:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
10000fad:	85 c0                	test   eax,eax
10000faf:	75 0f                	jne    10000fc0 <ssfn_load+0xb5>
10000fb1:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10000fbb:	e9 1a 01 00 00       	jmp    100010da <ssfn_load+0x1cf>
10000fc0:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10000fc6:	8d 4a 01             	lea    ecx,[edx+0x1]
10000fc9:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
10000fcf:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10000fd2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000fd5:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10000fdb:	50                   	push   eax
10000fdc:	6a 04                	push   0x4
10000fde:	68 11 51 00 10       	push   0x10005111	10000fdf: R_386_32	.text
10000fe3:	56                   	push   esi
10000fe4:	e8 fc ff ff ff       	call   10000fe5 <ssfn_load+0xda>	10000fe5: R_386_PC32	memcmp
10000fe9:	83 c4 10             	add    esp,0x10
10000fec:	89 c5                	mov    ebp,eax
10000fee:	85 c0                	test   eax,eax
10000ff0:	75 29                	jne    1000101b <ssfn_load+0x110>
10000ff2:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10000ff5:	01 f3                	add    ebx,esi
10000ff7:	83 c6 08             	add    esi,0x8
10000ffa:	39 de                	cmp    esi,ebx
10000ffc:	0f 83 f5 00 00 00    	jae    100010f7 <ssfn_load+0x1ec>
10001002:	50                   	push   eax
10001003:	50                   	push   eax
10001004:	56                   	push   esi
10001005:	57                   	push   edi
10001006:	e8 fc ff ff ff       	call   10001007 <ssfn_load+0xfc>	10001007: R_386_PC32	ssfn_load
1000100b:	83 c4 10             	add    esp,0x10
1000100e:	85 c0                	test   eax,eax
10001010:	0f 85 e1 00 00 00    	jne    100010f7 <ssfn_load+0x1ec>
10001016:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10001019:	eb df                	jmp    10000ffa <ssfn_load+0xef>
1000101b:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
1000101e:	83 e0 0f             	and    eax,0xf
10001021:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10001025:	53                   	push   ebx
10001026:	6a 04                	push   0x4
10001028:	68 16 51 00 10       	push   0x10005116	10001029: R_386_32	.text
1000102d:	56                   	push   esi
1000102e:	e8 fc ff ff ff       	call   1000102f <ssfn_load+0x124>	1000102f: R_386_PC32	memcmp
10001033:	83 c4 10             	add    esp,0x10
10001036:	89 c5                	mov    ebp,eax
10001038:	85 c0                	test   eax,eax
1000103a:	0f 85 03 ff ff ff    	jne    10000f43 <ssfn_load+0x38>
10001040:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10001043:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
10001047:	51                   	push   ecx
10001048:	6a 04                	push   0x4
1000104a:	68 1b 51 00 10       	push   0x1000511b	1000104b: R_386_32	.text
1000104f:	50                   	push   eax
10001050:	e8 fc ff ff ff       	call   10001051 <ssfn_load+0x146>	10001051: R_386_PC32	memcmp
10001055:	83 c4 10             	add    esp,0x10
10001058:	85 c0                	test   eax,eax
1000105a:	0f 85 e3 fe ff ff    	jne    10000f43 <ssfn_load+0x38>
10001060:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
10001065:	0f 87 d8 fe ff ff    	ja     10000f43 <ssfn_load+0x38>
1000106b:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
1000106f:	39 cb                	cmp    ebx,ecx
10001071:	0f 86 cc fe ff ff    	jbe    10000f43 <ssfn_load+0x38>
10001077:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
1000107a:	39 c3                	cmp    ebx,eax
1000107c:	0f 86 c1 fe ff ff    	jbe    10000f43 <ssfn_load+0x38>
10001082:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
10001085:	0f 86 b8 fe ff ff    	jbe    10000f43 <ssfn_load+0x38>
1000108b:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
1000108e:	0f 86 af fe ff ff    	jbe    10000f43 <ssfn_load+0x38>
10001094:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
10001097:	0f 86 a6 fe ff ff    	jbe    10000f43 <ssfn_load+0x38>
1000109d:	39 c1                	cmp    ecx,eax
1000109f:	0f 83 9e fe ff ff    	jae    10000f43 <ssfn_load+0x38>
100010a5:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
100010aa:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
100010ad:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
100010b3:	40                   	inc    eax
100010b4:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
100010ba:	52                   	push   edx
100010bb:	c1 e0 02             	shl    eax,0x2
100010be:	52                   	push   edx
100010bf:	50                   	push   eax
100010c0:	ff 33                	push   DWORD PTR [ebx]
100010c2:	e8 fc ff ff ff       	call   100010c3 <ssfn_load+0x1b8>	100010c3: R_386_PC32	realloc
100010c7:	83 c4 10             	add    esp,0x10
100010ca:	89 03                	mov    DWORD PTR [ebx],eax
100010cc:	85 c0                	test   eax,eax
100010ce:	75 0f                	jne    100010df <ssfn_load+0x1d4>
100010d0:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
100010da:	83 cd ff             	or     ebp,0xffffffff
100010dd:	eb 18                	jmp    100010f7 <ssfn_load+0x1ec>
100010df:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
100010e5:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
100010e9:	89 f8                	mov    eax,edi
100010eb:	e8 ad f3 ff ff       	call   1000049d <_ssfn_fc.part.1>
100010f0:	eb 05                	jmp    100010f7 <ssfn_load+0x1ec>
100010f2:	bd fc ff ff ff       	mov    ebp,0xfffffffc
100010f7:	83 c4 1c             	add    esp,0x1c
100010fa:	89 e8                	mov    eax,ebp
100010fc:	5b                   	pop    ebx
100010fd:	5e                   	pop    esi
100010fe:	5f                   	pop    edi
100010ff:	5d                   	pop    ebp
10001100:	c3                   	ret    

10001101 <ssfn_free>:
10001101:	57                   	push   edi
10001102:	56                   	push   esi
10001103:	53                   	push   ebx
10001104:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001108:	85 db                	test   ebx,ebx
1000110a:	74 7e                	je     1000118a <ssfn_free+0x89>
1000110c:	89 d8                	mov    eax,ebx
1000110e:	e8 8a f3 ff ff       	call   1000049d <_ssfn_fc.part.1>
10001113:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
1000111a:	74 32                	je     1000114e <ssfn_free+0x4d>
1000111c:	31 f6                	xor    esi,esi
1000111e:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
10001124:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
1000112a:	7e 16                	jle    10001142 <ssfn_free+0x41>
1000112c:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
1000112f:	85 c0                	test   eax,eax
10001131:	74 0c                	je     1000113f <ssfn_free+0x3e>
10001133:	83 ec 0c             	sub    esp,0xc
10001136:	50                   	push   eax
10001137:	e8 fc ff ff ff       	call   10001138 <ssfn_free+0x37>	10001138: R_386_PC32	free
1000113c:	83 c4 10             	add    esp,0x10
1000113f:	46                   	inc    esi
10001140:	eb dc                	jmp    1000111e <ssfn_free+0x1d>
10001142:	83 ec 0c             	sub    esp,0xc
10001145:	50                   	push   eax
10001146:	e8 fc ff ff ff       	call   10001147 <ssfn_free+0x46>	10001147: R_386_PC32	free
1000114b:	83 c4 10             	add    esp,0x10
1000114e:	31 f6                	xor    esi,esi
10001150:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
10001153:	85 c0                	test   eax,eax
10001155:	74 0c                	je     10001163 <ssfn_free+0x62>
10001157:	83 ec 0c             	sub    esp,0xc
1000115a:	50                   	push   eax
1000115b:	e8 fc ff ff ff       	call   1000115c <ssfn_free+0x5b>	1000115c: R_386_PC32	free
10001160:	83 c4 10             	add    esp,0x10
10001163:	46                   	inc    esi
10001164:	83 fe 05             	cmp    esi,0x5
10001167:	75 e7                	jne    10001150 <ssfn_free+0x4f>
10001169:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000116f:	85 c0                	test   eax,eax
10001171:	74 0c                	je     1000117f <ssfn_free+0x7e>
10001173:	83 ec 0c             	sub    esp,0xc
10001176:	50                   	push   eax
10001177:	e8 fc ff ff ff       	call   10001178 <ssfn_free+0x77>	10001178: R_386_PC32	free
1000117c:	83 c4 10             	add    esp,0x10
1000117f:	b9 72 3d 00 00       	mov    ecx,0x3d72
10001184:	31 c0                	xor    eax,eax
10001186:	89 df                	mov    edi,ebx
10001188:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000118a:	5b                   	pop    ebx
1000118b:	5e                   	pop    esi
1000118c:	5f                   	pop    edi
1000118d:	c3                   	ret    

1000118e <ssfn_mem>:
1000118e:	55                   	push   ebp
1000118f:	31 c0                	xor    eax,eax
10001191:	57                   	push   edi
10001192:	56                   	push   esi
10001193:	53                   	push   ebx
10001194:	83 ec 08             	sub    esp,0x8
10001197:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
1000119b:	85 d2                	test   edx,edx
1000119d:	0f 84 8e 00 00 00    	je     10001231 <ssfn_mem+0xa3>
100011a3:	b8 c8 f5 00 00       	mov    eax,0xf5c8
100011a8:	31 c9                	xor    ecx,ecx
100011aa:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
100011b1:	41                   	inc    ecx
100011b2:	8d 04 98             	lea    eax,[eax+ebx*4]
100011b5:	83 f9 05             	cmp    ecx,0x5
100011b8:	75 f0                	jne    100011aa <ssfn_mem+0x1c>
100011ba:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
100011c0:	31 c9                	xor    ecx,ecx
100011c2:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
100011c9:	89 34 24             	mov    DWORD PTR [esp],esi
100011cc:	85 f6                	test   esi,esi
100011ce:	74 48                	je     10001218 <ssfn_mem+0x8a>
100011d0:	31 db                	xor    ebx,ebx
100011d2:	8b 34 24             	mov    esi,DWORD PTR [esp]
100011d5:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
100011d8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
100011dc:	85 ff                	test   edi,edi
100011de:	74 2a                	je     1000120a <ssfn_mem+0x7c>
100011e0:	31 f6                	xor    esi,esi
100011e2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
100011e6:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
100011e9:	85 ed                	test   ebp,ebp
100011eb:	74 0f                	je     100011fc <ssfn_mem+0x6e>
100011ed:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
100011f1:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
100011f5:	0f af fd             	imul   edi,ebp
100011f8:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
100011fc:	46                   	inc    esi
100011fd:	81 fe 00 01 00 00    	cmp    esi,0x100
10001203:	75 dd                	jne    100011e2 <ssfn_mem+0x54>
10001205:	05 00 04 00 00       	add    eax,0x400
1000120a:	43                   	inc    ebx
1000120b:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001211:	75 bf                	jne    100011d2 <ssfn_mem+0x44>
10001213:	05 00 04 00 00       	add    eax,0x400
10001218:	41                   	inc    ecx
10001219:	83 f9 11             	cmp    ecx,0x11
1000121c:	75 a4                	jne    100011c2 <ssfn_mem+0x34>
1000121e:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
10001225:	74 0a                	je     10001231 <ssfn_mem+0xa3>
10001227:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
1000122d:	01 d2                	add    edx,edx
1000122f:	01 d0                	add    eax,edx
10001231:	83 c4 08             	add    esp,0x8
10001234:	5b                   	pop    ebx
10001235:	5e                   	pop    esi
10001236:	5f                   	pop    edi
10001237:	5d                   	pop    ebp
10001238:	c3                   	ret    

10001239 <ssfn_select>:
10001239:	55                   	push   ebp
1000123a:	57                   	push   edi
1000123b:	56                   	push   esi
1000123c:	53                   	push   ebx
1000123d:	83 ec 1c             	sub    esp,0x1c
10001240:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10001244:	85 db                	test   ebx,ebx
10001246:	75 0a                	jne    10001252 <ssfn_select+0x19>
10001248:	be fc ff ff ff       	mov    esi,0xfffffffc
1000124d:	e9 13 01 00 00       	jmp    10001365 <ssfn_select+0x12c>
10001252:	89 d8                	mov    eax,ebx
10001254:	e8 44 f2 ff ff       	call   1000049d <_ssfn_fc.part.1>
10001259:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
1000125d:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
10001263:	0f 85 e9 00 00 00    	jne    10001352 <ssfn_select+0x119>
10001269:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000126d:	83 e8 08             	sub    eax,0x8
10001270:	3d b8 00 00 00       	cmp    eax,0xb8
10001275:	0f 87 de 00 00 00    	ja     10001359 <ssfn_select+0x120>
1000127b:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
10001283:	75 76                	jne    100012fb <ssfn_select+0xc2>
10001285:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
1000128a:	74 bc                	je     10001248 <ssfn_select+0xf>
1000128c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001290:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001293:	74 b3                	je     10001248 <ssfn_select+0xf>
10001295:	31 ed                	xor    ebp,ebp
10001297:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000129b:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
1000129f:	74 03                	je     100012a4 <ssfn_select+0x6b>
100012a1:	45                   	inc    ebp
100012a2:	eb f3                	jmp    10001297 <ssfn_select+0x5e>
100012a4:	8d 43 14             	lea    eax,[ebx+0x14]
100012a7:	89 df                	mov    edi,ebx
100012a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100012ad:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
100012b3:	31 d2                	xor    edx,edx
100012b5:	89 04 24             	mov    DWORD PTR [esp],eax
100012b8:	39 14 24             	cmp    DWORD PTR [esp],edx
100012bb:	7e 33                	jle    100012f0 <ssfn_select+0xb7>
100012bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100012c1:	8b 07                	mov    eax,DWORD PTR [edi]
100012c3:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
100012c6:	50                   	push   eax
100012c7:	8d 41 20             	lea    eax,[ecx+0x20]
100012ca:	55                   	push   ebp
100012cb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100012cf:	50                   	push   eax
100012d0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
100012d4:	e8 fc ff ff ff       	call   100012d5 <ssfn_select+0x9c>	100012d5: R_386_PC32	memcmp
100012d9:	83 c4 10             	add    esp,0x10
100012dc:	85 c0                	test   eax,eax
100012de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100012e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100012e6:	75 05                	jne    100012ed <ssfn_select+0xb4>
100012e8:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
100012eb:	eb 34                	jmp    10001321 <ssfn_select+0xe8>
100012ed:	42                   	inc    edx
100012ee:	eb c8                	jmp    100012b8 <ssfn_select+0x7f>
100012f0:	83 c7 04             	add    edi,0x4
100012f3:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
100012f7:	75 b4                	jne    100012ad <ssfn_select+0x74>
100012f9:	eb 65                	jmp    10001360 <ssfn_select+0x127>
100012fb:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
10001303:	74 15                	je     1000131a <ssfn_select+0xe1>
10001305:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
1000130a:	7f 54                	jg     10001360 <ssfn_select+0x127>
1000130c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001310:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
10001318:	74 46                	je     10001360 <ssfn_select+0x127>
1000131a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10001321:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001325:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
1000132c:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
10001332:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
1000133c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001340:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
10001346:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000134a:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
10001350:	eb 13                	jmp    10001365 <ssfn_select+0x12c>
10001352:	be fb ff ff ff       	mov    esi,0xfffffffb
10001357:	eb 0c                	jmp    10001365 <ssfn_select+0x12c>
10001359:	be fa ff ff ff       	mov    esi,0xfffffffa
1000135e:	eb 05                	jmp    10001365 <ssfn_select+0x12c>
10001360:	be fd ff ff ff       	mov    esi,0xfffffffd
10001365:	83 c4 1c             	add    esp,0x1c
10001368:	89 f0                	mov    eax,esi
1000136a:	5b                   	pop    ebx
1000136b:	5e                   	pop    esi
1000136c:	5f                   	pop    edi
1000136d:	5d                   	pop    ebp
1000136e:	c3                   	ret    

1000136f <ssfn_render>:
1000136f:	55                   	push   ebp
10001370:	57                   	push   edi
10001371:	56                   	push   esi
10001372:	53                   	push   ebx
10001373:	81 ec dc 05 01 00    	sub    esp,0x105dc
10001379:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
10001380:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
1000138b:	85 ed                	test   ebp,ebp
1000138d:	0f 94 c2             	sete   dl
10001390:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
10001398:	0f 94 c0             	sete   al
1000139b:	08 c2                	or     dl,al
1000139d:	74 0a                	je     100013a9 <ssfn_render+0x3a>
1000139f:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
100013a4:	e9 14 1e 00 00       	jmp    100031bd <ssfn_render+0x1e4e>
100013a9:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
100013b0:	31 c9                	xor    ecx,ecx
100013b2:	8a 00                	mov    al,BYTE PTR [eax]
100013b4:	84 c0                	test   al,al
100013b6:	0f 84 01 1e 00 00    	je     100031bd <ssfn_render+0x1e4e>
100013bc:	3c 0d                	cmp    al,0xd
100013be:	75 0f                	jne    100013cf <ssfn_render+0x60>
100013c0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100013c7:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100013cd:	eb 31                	jmp    10001400 <ssfn_render+0x91>
100013cf:	3c 0a                	cmp    al,0xa
100013d1:	75 37                	jne    1000140a <ssfn_render+0x9b>
100013d3:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100013da:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100013e0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
100013e3:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
100013e9:	85 c0                	test   eax,eax
100013eb:	75 06                	jne    100013f3 <ssfn_render+0x84>
100013ed:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
100013f3:	01 d0                	add    eax,edx
100013f5:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100013fc:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10001400:	b9 01 00 00 00       	mov    ecx,0x1
10001405:	e9 b3 1d 00 00       	jmp    100031bd <ssfn_render+0x1e4e>
1000140a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000140d:	85 c0                	test   eax,eax
1000140f:	74 3e                	je     1000144f <ssfn_render+0xe0>
10001411:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10001414:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
1000141b:	56                   	push   esi
1000141c:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001423:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000142a:	e8 a0 f4 ff ff       	call   100008cf <_ssfn_c>
1000142f:	5b                   	pop    ebx
10001430:	85 c0                	test   eax,eax
10001432:	0f 85 71 02 00 00    	jne    100016a9 <ssfn_render+0x33a>
10001438:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
1000143e:	81 e2 00 01 00 00    	and    edx,0x100
10001444:	0f 84 fd 01 00 00    	je     10001647 <ssfn_render+0x2d8>
1000144a:	e9 1d 02 00 00       	jmp    1000166c <ssfn_render+0x2fd>
1000144f:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
10001455:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
1000145c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001460:	3d fd 00 00 00       	cmp    eax,0xfd
10001465:	7f 08                	jg     1000146f <ssfn_render+0x100>
10001467:	89 c3                	mov    ebx,eax
10001469:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000146d:	eb 3f                	jmp    100014ae <ssfn_render+0x13f>
1000146f:	31 db                	xor    ebx,ebx
10001471:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
10001479:	eb 33                	jmp    100014ae <ssfn_render+0x13f>
1000147b:	85 c0                	test   eax,eax
1000147d:	0f 84 64 01 00 00    	je     100015e7 <ssfn_render+0x278>
10001483:	43                   	inc    ebx
10001484:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
10001488:	7e 28                	jle    100014b2 <ssfn_render+0x143>
1000148a:	85 c0                	test   eax,eax
1000148c:	0f 85 17 02 00 00    	jne    100016a9 <ssfn_render+0x33a>
10001492:	31 db                	xor    ebx,ebx
10001494:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
1000149c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
100014a4:	74 92                	je     10001438 <ssfn_render+0xc9>
100014a6:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
100014ae:	31 c0                	xor    eax,eax
100014b0:	eb d2                	jmp    10001484 <ssfn_render+0x115>
100014b2:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
100014b6:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
100014bd:	74 bc                	je     1000147b <ssfn_render+0x10c>
100014bf:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100014ca:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
100014d1:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
100014d8:	7e 50                	jle    1000152a <ssfn_render+0x1bb>
100014da:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
100014dd:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
100014e1:	c1 fa 04             	sar    edx,0x4
100014e4:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
100014ea:	80 e2 03             	and    dl,0x3
100014ed:	75 32                	jne    10001521 <ssfn_render+0x1b2>
100014ef:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
100014f3:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
100014f9:	75 26                	jne    10001521 <ssfn_render+0x1b2>
100014fb:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
10001502:	50                   	push   eax
10001503:	89 f8                	mov    eax,edi
10001505:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000150c:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001513:	e8 b7 f3 ff ff       	call   100008cf <_ssfn_c>
10001518:	59                   	pop    ecx
10001519:	85 c0                	test   eax,eax
1000151b:	0f 85 04 01 00 00    	jne    10001625 <ssfn_render+0x2b6>
10001521:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001528:	eb a0                	jmp    100014ca <ssfn_render+0x15b>
1000152a:	85 c0                	test   eax,eax
1000152c:	0f 85 51 ff ff ff    	jne    10001483 <ssfn_render+0x114>
10001532:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000153d:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001544:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
1000154b:	0f 8e f9 1b 00 00    	jle    1000314a <ssfn_render+0x1ddb>
10001551:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001554:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
10001558:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
1000155e:	74 09                	je     10001569 <ssfn_render+0x1fa>
10001560:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001567:	eb d4                	jmp    1000153d <ssfn_render+0x1ce>
10001569:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001570:	57                   	push   edi
10001571:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001578:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000157f:	e8 4b f3 ff ff       	call   100008cf <_ssfn_c>
10001584:	5a                   	pop    edx
10001585:	85 c0                	test   eax,eax
10001587:	74 d7                	je     10001560 <ssfn_render+0x1f1>
10001589:	e9 97 00 00 00       	jmp    10001625 <ssfn_render+0x2b6>
1000158e:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001591:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
10001595:	c1 fa 04             	sar    edx,0x4
10001598:	31 ca                	xor    edx,ecx
1000159a:	80 e2 03             	and    dl,0x3
1000159d:	0f 84 b7 1b 00 00    	je     1000315a <ssfn_render+0x1deb>
100015a3:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100015aa:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015b1:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
100015b7:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015be:	7f ce                	jg     1000158e <ssfn_render+0x21f>
100015c0:	83 e1 03             	and    ecx,0x3
100015c3:	83 f9 03             	cmp    ecx,0x3
100015c6:	75 1f                	jne    100015e7 <ssfn_render+0x278>
100015c8:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100015d3:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015da:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015e1:	0f 8f 9c 1b 00 00    	jg     10003183 <ssfn_render+0x1e14>
100015e7:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100015f2:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015f9:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001600:	7e 3e                	jle    10001640 <ssfn_render+0x2d1>
10001602:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001605:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
1000160c:	57                   	push   edi
1000160d:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001614:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000161b:	e8 af f2 ff ff       	call   100008cf <_ssfn_c>
10001620:	5a                   	pop    edx
10001621:	85 c0                	test   eax,eax
10001623:	74 12                	je     10001637 <ssfn_render+0x2c8>
10001625:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000162c:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
1000162f:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
10001632:	e9 4c fe ff ff       	jmp    10001483 <ssfn_render+0x114>
10001637:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000163e:	eb b2                	jmp    100015f2 <ssfn_render+0x283>
10001640:	31 c0                	xor    eax,eax
10001642:	e9 3c fe ff ff       	jmp    10001483 <ssfn_render+0x114>
10001647:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
1000164d:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
10001658:	81 fb fd 00 00 00    	cmp    ebx,0xfd
1000165e:	7f 16                	jg     10001676 <ssfn_render+0x307>
10001660:	89 da                	mov    edx,ebx
10001662:	31 c0                	xor    eax,eax
10001664:	39 da                	cmp    edx,ebx
10001666:	7e 15                	jle    1000167d <ssfn_render+0x30e>
10001668:	85 c0                	test   eax,eax
1000166a:	75 3d                	jne    100016a9 <ssfn_render+0x33a>
1000166c:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
10001671:	e9 47 1b 00 00       	jmp    100031bd <ssfn_render+0x1e4e>
10001676:	bb 04 00 00 00       	mov    ebx,0x4
1000167b:	eb e5                	jmp    10001662 <ssfn_render+0x2f3>
1000167d:	85 c0                	test   eax,eax
1000167f:	75 28                	jne    100016a9 <ssfn_render+0x33a>
10001681:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
10001689:	74 1b                	je     100016a6 <ssfn_render+0x337>
1000168b:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
1000168f:	8b 09                	mov    ecx,DWORD PTR [ecx]
10001691:	85 c9                	test   ecx,ecx
10001693:	74 11                	je     100016a6 <ssfn_render+0x337>
10001695:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
10001698:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
1000169c:	78 08                	js     100016a6 <ssfn_render+0x337>
1000169e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
100016a1:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
100016a4:	01 c8                	add    eax,ecx
100016a6:	42                   	inc    edx
100016a7:	eb bb                	jmp    10001664 <ssfn_render+0x2f5>
100016a9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
100016ac:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
100016b1:	85 d2                	test   edx,edx
100016b3:	0f 84 04 1b 00 00    	je     100031bd <ssfn_render+0x1e4e>
100016b9:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
100016bd:	0f 84 fa 1a 00 00    	je     100031bd <ssfn_render+0x1e4e>
100016c3:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100016c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100016cd:	85 ff                	test   edi,edi
100016cf:	0f 84 e8 1a 00 00    	je     100031bd <ssfn_render+0x1e4e>
100016d5:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
100016dc:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
100016e0:	c1 ef 10             	shr    edi,0x10
100016e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
100016e7:	83 ff 10             	cmp    edi,0x10
100016ea:	0f 87 af fc ff ff    	ja     1000139f <ssfn_render+0x30>
100016f0:	8d 70 06             	lea    esi,[eax+0x6]
100016f3:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
100016f9:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
100016fd:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
10001703:	89 f7                	mov    edi,esi
10001705:	81 e7 00 02 00 00    	and    edi,0x200
1000170b:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
1000170f:	75 34                	jne    10001745 <ssfn_render+0x3d6>
10001711:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001715:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
1000171c:	85 c9                	test   ecx,ecx
1000171e:	74 25                	je     10001745 <ssfn_render+0x3d6>
10001720:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001724:	0f b6 ff             	movzx  edi,bh
10001727:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000172a:	85 c9                	test   ecx,ecx
1000172c:	74 17                	je     10001745 <ssfn_render+0x3d6>
1000172e:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
10001733:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
10001736:	85 c9                	test   ecx,ecx
10001738:	74 0b                	je     10001745 <ssfn_render+0x3d6>
1000173a:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
10001740:	e9 25 0d 00 00       	jmp    1000246a <ssfn_render+0x10fb>
10001745:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
10001749:	f7 c6 40 00 00 00    	test   esi,0x40
1000174f:	75 1a                	jne    1000176b <ssfn_render+0x3fc>
10001751:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
10001755:	7e 10                	jle    10001767 <ssfn_render+0x3f8>
10001757:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000175b:	83 c7 04             	add    edi,0x4
1000175e:	83 e7 fc             	and    edi,0xfffffffc
10001761:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001765:	eb 04                	jmp    1000176b <ssfn_render+0x3fc>
10001767:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000176b:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
10001770:	f7 c6 02 00 00 00    	test   esi,0x2
10001776:	74 14                	je     1000178c <ssfn_render+0x41d>
10001778:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
1000177b:	c0 eb 05             	shr    bl,0x5
1000177e:	89 df                	mov    edi,ebx
10001780:	83 f7 01             	xor    edi,0x1
10001783:	83 e7 01             	and    edi,0x1
10001786:	89 fb                	mov    ebx,edi
10001788:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
1000178c:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
10001791:	83 e6 01             	and    esi,0x1
10001794:	74 10                	je     100017a6 <ssfn_render+0x437>
10001796:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
1000179a:	75 0a                	jne    100017a6 <ssfn_render+0x437>
1000179c:	8d 51 40             	lea    edx,[ecx+0x40]
1000179f:	c1 fa 06             	sar    edx,0x6
100017a2:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
100017a6:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
100017aa:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100017af:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100017b3:	99                   	cdq    
100017b4:	f7 f9                	idiv   ecx
100017b6:	89 c1                	mov    ecx,eax
100017b8:	31 c0                	xor    eax,eax
100017ba:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100017bf:	74 0c                	je     100017cd <ssfn_render+0x45e>
100017c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100017c5:	be 04 00 00 00       	mov    esi,0x4
100017ca:	99                   	cdq    
100017cb:	f7 fe                	idiv   esi
100017cd:	01 c8                	add    eax,ecx
100017cf:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
100017d4:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
100017d9:	01 f0                	add    eax,esi
100017db:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100017df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100017e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100017e7:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
100017ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100017f0:	3d ff f4 00 00       	cmp    eax,0xf4ff
100017f5:	0f 8f c2 19 00 00    	jg     100031bd <ssfn_render+0x1e4e>
100017fb:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
10001800:	0f 85 f0 00 00 00    	jne    100018f6 <ssfn_render+0x587>
10001806:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000180a:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
1000180e:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
10001815:	75 2f                	jne    10001846 <ssfn_render+0x4d7>
10001817:	83 ec 0c             	sub    esp,0xc
1000181a:	68 00 04 00 00       	push   0x400
1000181f:	e8 fc ff ff ff       	call   10001820 <ssfn_render+0x4b1>	10001820: R_386_PC32	malloc
10001824:	83 c4 10             	add    esp,0x10
10001827:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
1000182d:	85 c0                	test   eax,eax
1000182f:	75 08                	jne    10001839 <ssfn_render+0x4ca>
10001831:	83 c9 ff             	or     ecx,0xffffffff
10001834:	e9 84 19 00 00       	jmp    100031bd <ssfn_render+0x1e4e>
10001839:	89 c7                	mov    edi,eax
1000183b:	b9 00 01 00 00       	mov    ecx,0x100
10001840:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001844:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10001846:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000184a:	0f b6 dc             	movzx  ebx,ah
1000184d:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
10001853:	8d 1c 98             	lea    ebx,[eax+ebx*4]
10001856:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10001859:	75 3a                	jne    10001895 <ssfn_render+0x526>
1000185b:	83 ec 0c             	sub    esp,0xc
1000185e:	68 00 04 00 00       	push   0x400
10001863:	e8 fc ff ff ff       	call   10001864 <ssfn_render+0x4f5>	10001864: R_386_PC32	malloc
10001868:	89 03                	mov    DWORD PTR [ebx],eax
1000186a:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10001871:	83 c4 10             	add    esp,0x10
10001874:	89 c2                	mov    edx,eax
10001876:	0f b6 c4             	movzx  eax,ah
10001879:	c1 ea 10             	shr    edx,0x10
1000187c:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001883:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
10001886:	85 d2                	test   edx,edx
10001888:	74 a7                	je     10001831 <ssfn_render+0x4c2>
1000188a:	b9 00 01 00 00       	mov    ecx,0x100
1000188f:	31 c0                	xor    eax,eax
10001891:	89 d7                	mov    edi,edx
10001893:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10001895:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
1000189c:	83 ec 0c             	sub    esp,0xc
1000189f:	0f b6 cc             	movzx  ecx,ah
100018a2:	89 c2                	mov    edx,eax
100018a4:	0f b6 c0             	movzx  eax,al
100018a7:	c1 ea 10             	shr    edx,0x10
100018aa:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100018b1:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
100018b4:	8d 1c 82             	lea    ebx,[edx+eax*4]
100018b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100018bb:	83 c0 08             	add    eax,0x8
100018be:	50                   	push   eax
100018bf:	e8 fc ff ff ff       	call   100018c0 <ssfn_render+0x551>	100018c0: R_386_PC32	malloc
100018c4:	89 03                	mov    DWORD PTR [ebx],eax
100018c6:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
100018cc:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
100018d3:	83 c4 10             	add    esp,0x10
100018d6:	89 c2                	mov    edx,eax
100018d8:	0f b6 cc             	movzx  ecx,ah
100018db:	c1 ea 10             	shr    edx,0x10
100018de:	0f b6 c0             	movzx  eax,al
100018e1:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100018e8:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
100018eb:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
100018ef:	75 0e                	jne    100018ff <ssfn_render+0x590>
100018f1:	e9 3b ff ff ff       	jmp    10001831 <ssfn_render+0x4c2>
100018f6:	8d 45 1c             	lea    eax,[ebp+0x1c]
100018f9:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
100018ff:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10001905:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10001909:	74 2a                	je     10001935 <ssfn_render+0x5c6>
1000190b:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001910:	74 23                	je     10001935 <ssfn_render+0x5c6>
10001912:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001915:	bb 04 00 00 00       	mov    ebx,0x4
1000191a:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
1000191e:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10001922:	89 cf                	mov    edi,ecx
10001924:	29 c7                	sub    edi,eax
10001926:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000192a:	0f af c7             	imul   eax,edi
1000192d:	99                   	cdq    
1000192e:	f7 fb                	idiv   ebx
10001930:	99                   	cdq    
10001931:	f7 f9                	idiv   ecx
10001933:	eb 02                	jmp    10001937 <ssfn_render+0x5c8>
10001935:	31 c0                	xor    eax,eax
10001937:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000193d:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10001941:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001945:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
1000194d:	66 89 32             	mov    WORD PTR [edx],si
10001950:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
10001955:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000195b:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
1000195e:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001964:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000196a:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
1000196d:	01 c3                	add    ebx,eax
1000196f:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
10001972:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001978:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
1000197e:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
10001981:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
10001984:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
1000198a:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001990:	8a 12                	mov    dl,BYTE PTR [edx]
10001992:	83 e2 3f             	and    edx,0x3f
10001995:	01 d0                	add    eax,edx
10001997:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
1000199a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
1000199e:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019a4:	8d 50 08             	lea    edx,[eax+0x8]
100019a7:	b0 ff                	mov    al,0xff
100019a9:	89 d7                	mov    edi,edx
100019ab:	f3 aa                	rep stos BYTE PTR es:[edi],al
100019ad:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019b3:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
100019b7:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019bd:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
100019c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100019c5:	c1 e0 04             	shl    eax,0x4
100019c8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
100019cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100019d0:	c1 e0 04             	shl    eax,0x4
100019d3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
100019d7:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100019dd:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
100019e1:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
100019e5:	0f 8e 4d 0a 00 00    	jle    10002438 <ssfn_render+0x10c9>
100019eb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
100019ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100019f3:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
100019f6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
100019f9:	8a 12                	mov    dl,BYTE PTR [edx]
100019fb:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
100019ff:	83 e2 40             	and    edx,0x40
10001a02:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
10001a06:	88 c2                	mov    dl,al
10001a08:	21 ca                	and    edx,ecx
10001a0a:	fe c2                	inc    dl
10001a0c:	75 14                	jne    10001a22 <ssfn_render+0x6b3>
10001a0e:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
10001a13:	19 c0                	sbb    eax,eax
10001a15:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
10001a19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001a1d:	e9 09 0a 00 00       	jmp    1000242b <ssfn_render+0x10bc>
10001a22:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10001a26:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10001a29:	c1 e0 04             	shl    eax,0x4
10001a2c:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
10001a30:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a35:	99                   	cdq    
10001a36:	f7 fe                	idiv   esi
10001a38:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001a3c:	0f b6 c1             	movzx  eax,cl
10001a3f:	c1 e0 04             	shl    eax,0x4
10001a42:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a47:	99                   	cdq    
10001a48:	f7 fe                	idiv   esi
10001a4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001a4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a52:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
10001a56:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10001a5a:	c1 e2 10             	shl    edx,0x10
10001a5d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
10001a62:	74 0e                	je     10001a72 <ssfn_render+0x703>
10001a64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a68:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
10001a6d:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
10001a70:	eb 0c                	jmp    10001a7e <ssfn_render+0x70f>
10001a72:	c1 e0 08             	shl    eax,0x8
10001a75:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
10001a7a:	09 d0                	or     eax,edx
10001a7c:	09 c3                	or     ebx,eax
10001a7e:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
10001a81:	8a 01                	mov    al,BYTE PTR [ecx]
10001a83:	84 c0                	test   al,al
10001a85:	0f 88 17 05 00 00    	js     10001fa2 <ssfn_render+0xc33>
10001a8b:	89 c7                	mov    edi,eax
10001a8d:	83 e7 3f             	and    edi,0x3f
10001a90:	a8 40                	test   al,0x40
10001a92:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10001a96:	74 10                	je     10001aa8 <ssfn_render+0x739>
10001a98:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10001a9c:	89 f8                	mov    eax,edi
10001a9e:	41                   	inc    ecx
10001a9f:	c1 e0 08             	shl    eax,0x8
10001aa2:	09 c2                	or     edx,eax
10001aa4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
10001aa8:	8d 41 01             	lea    eax,[ecx+0x1]
10001aab:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001ab5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001ab9:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001ac4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001ac8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001acc:	83 c0 04             	add    eax,0x4
10001acf:	c1 f8 02             	sar    eax,0x2
10001ad2:	01 c7                	add    edi,eax
10001ad4:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001adb:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001adf:	0f 8f d7 01 00 00    	jg     10001cbc <ssfn_render+0x94d>
10001ae5:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001ae8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001aec:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001af0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001af4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001af8:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001afb:	c1 e0 04             	shl    eax,0x4
10001afe:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b03:	99                   	cdq    
10001b04:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b08:	01 c6                	add    esi,eax
10001b0a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001b0e:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001b12:	c1 e0 04             	shl    eax,0x4
10001b15:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b1a:	99                   	cdq    
10001b1b:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b1f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001b23:	01 c3                	add    ebx,eax
10001b25:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001b29:	89 c8                	mov    eax,ecx
10001b2b:	01 c9                	add    ecx,ecx
10001b2d:	c1 f8 02             	sar    eax,0x2
10001b30:	83 e1 06             	and    ecx,0x6
10001b33:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001b37:	d3 f8                	sar    eax,cl
10001b39:	83 e0 03             	and    eax,0x3
10001b3c:	89 c1                	mov    ecx,eax
10001b3e:	83 f8 02             	cmp    eax,0x2
10001b41:	74 4a                	je     10001b8d <ssfn_render+0x81e>
10001b43:	83 f8 03             	cmp    eax,0x3
10001b46:	0f 84 e4 00 00 00    	je     10001c30 <ssfn_render+0x8c1>
10001b4c:	49                   	dec    ecx
10001b4d:	74 20                	je     10001b6f <ssfn_render+0x800>
10001b4f:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001b55:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001b5b:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001b61:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001b67:	83 c7 02             	add    edi,0x2
10001b6a:	e9 41 01 00 00       	jmp    10001cb0 <ssfn_render+0x941>
10001b6f:	83 c7 02             	add    edi,0x2
10001b72:	50                   	push   eax
10001b73:	50                   	push   eax
10001b74:	89 e8                	mov    eax,ebp
10001b76:	53                   	push   ebx
10001b77:	56                   	push   esi
10001b78:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001b7c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001b80:	e8 9c e9 ff ff       	call   10000521 <_ssfn_l>
10001b85:	83 c4 10             	add    esp,0x10
10001b88:	e9 23 01 00 00       	jmp    10001cb0 <ssfn_render+0x941>
10001b8d:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001b91:	83 c7 04             	add    edi,0x4
10001b94:	c1 e0 04             	shl    eax,0x4
10001b97:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b9c:	99                   	cdq    
10001b9d:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001ba1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001ba5:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001ba9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001bad:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001bb1:	c1 e0 04             	shl    eax,0x4
10001bb4:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001bb9:	99                   	cdq    
10001bba:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001bbe:	83 ec 0c             	sub    esp,0xc
10001bc1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001bc5:	6a 00                	push   0x0
10001bc7:	53                   	push   ebx
10001bc8:	56                   	push   esi
10001bc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001bcd:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001bd1:	99                   	cdq    
10001bd2:	f7 f9                	idiv   ecx
10001bd4:	01 d8                	add    eax,ebx
10001bd6:	50                   	push   eax
10001bd7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001bdb:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001bdf:	99                   	cdq    
10001be0:	f7 f9                	idiv   ecx
10001be2:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001be6:	50                   	push   eax
10001be7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001beb:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001bef:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001bf5:	99                   	cdq    
10001bf6:	f7 f9                	idiv   ecx
10001bf8:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001bfe:	50                   	push   eax
10001bff:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001c03:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001c09:	99                   	cdq    
10001c0a:	f7 f9                	idiv   ecx
10001c0c:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001c12:	50                   	push   eax
10001c13:	89 e8                	mov    eax,ebp
10001c15:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001c1b:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001c21:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001c25:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001c29:	e8 04 ea ff ff       	call   10000632 <_ssfn_b>
10001c2e:	eb 7d                	jmp    10001cad <ssfn_render+0x93e>
10001c30:	83 ec 0c             	sub    esp,0xc
10001c33:	83 c7 06             	add    edi,0x6
10001c36:	6a 00                	push   0x0
10001c38:	53                   	push   ebx
10001c39:	56                   	push   esi
10001c3a:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001c3e:	c1 e0 04             	shl    eax,0x4
10001c41:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001c46:	99                   	cdq    
10001c47:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001c4b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001c4f:	50                   	push   eax
10001c50:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001c54:	c1 e0 04             	shl    eax,0x4
10001c57:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001c5c:	99                   	cdq    
10001c5d:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001c61:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001c65:	50                   	push   eax
10001c66:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001c6a:	c1 e0 04             	shl    eax,0x4
10001c6d:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001c72:	99                   	cdq    
10001c73:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001c77:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001c7b:	50                   	push   eax
10001c7c:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001c80:	c1 e0 04             	shl    eax,0x4
10001c83:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001c88:	99                   	cdq    
10001c89:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001c8d:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001c91:	50                   	push   eax
10001c92:	89 e8                	mov    eax,ebp
10001c94:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001c9a:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001ca0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001ca4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001ca8:	e8 85 e9 ff ff       	call   10000632 <_ssfn_b>
10001cad:	83 c4 30             	add    esp,0x30
10001cb0:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001cb7:	e9 18 fe ff ff       	jmp    10001ad4 <ssfn_render+0x765>
10001cbc:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001cc2:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001cc8:	75 0e                	jne    10001cd8 <ssfn_render+0x969>
10001cca:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001cd0:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001cd6:	74 2e                	je     10001d06 <ssfn_render+0x997>
10001cd8:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001cde:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001ce4:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001ce8:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001cee:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001cf4:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001cfa:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001cff:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001d06:	b3 fe                	mov    bl,0xfe
10001d08:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001d0f:	0f 8e 16 07 00 00    	jle    1000242b <ssfn_render+0x10bc>
10001d15:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001d1d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001d25:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001d2d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001d35:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001d3d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001d41:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001d45:	0f 8d de 06 00 00    	jge    10002429 <ssfn_render+0x10ba>
10001d4b:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001d51:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001d5c:	83 e8 03             	sub    eax,0x3
10001d5f:	31 f6                	xor    esi,esi
10001d61:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001d65:	89 f8                	mov    eax,edi
10001d67:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001d6b:	c1 f8 02             	sar    eax,0x2
10001d6e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001d72:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001d79:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001d7d:	0f 8e 16 01 00 00    	jle    10001e99 <ssfn_render+0xb2a>
10001d83:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001d89:	8d 47 01             	lea    eax,[edi+0x1]
10001d8c:	01 c0                	add    eax,eax
10001d8e:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001d92:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001d96:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001d9b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001d9f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001da3:	7d 0c                	jge    10001db1 <ssfn_render+0xa42>
10001da5:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001da9:	0f 8f db 00 00 00    	jg     10001e8a <ssfn_render+0xb1b>
10001daf:	eb 0a                	jmp    10001dbb <ssfn_render+0xa4c>
10001db1:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001db5:	0f 8e cf 00 00 00    	jle    10001e8a <ssfn_render+0xb1b>
10001dbb:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001dc0:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001dc4:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001dc9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001dcd:	89 d8                	mov    eax,ebx
10001dcf:	c1 fa 04             	sar    edx,0x4
10001dd2:	c1 f8 04             	sar    eax,0x4
10001dd5:	39 c2                	cmp    edx,eax
10001dd7:	75 0a                	jne    10001de3 <ssfn_render+0xa74>
10001dd9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001ddd:	01 c8                	add    eax,ecx
10001ddf:	d1 f8                	sar    eax,1
10001de1:	eb 1a                	jmp    10001dfd <ssfn_render+0xa8e>
10001de3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001de7:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001deb:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001def:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001df3:	0f af c1             	imul   eax,ecx
10001df6:	99                   	cdq    
10001df7:	f7 fb                	idiv   ebx
10001df9:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001dfd:	c1 f8 04             	sar    eax,0x4
10001e00:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001e05:	74 04                	je     10001e0b <ssfn_render+0xa9c>
10001e07:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001e0b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001e10:	75 3f                	jne    10001e51 <ssfn_render+0xae2>
10001e12:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001e17:	74 38                	je     10001e51 <ssfn_render+0xae2>
10001e19:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e1d:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001e23:	f7 db                	neg    ebx
10001e25:	01 c2                	add    edx,eax
10001e27:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001e2b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001e2f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e33:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001e37:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001e3b:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001e3f:	74 10                	je     10001e51 <ssfn_render+0xae2>
10001e41:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001e45:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001e49:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e4d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001e51:	31 d2                	xor    edx,edx
10001e53:	39 f2                	cmp    edx,esi
10001e55:	75 0b                	jne    10001e62 <ssfn_render+0xaf3>
10001e57:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001e5f:	46                   	inc    esi
10001e60:	eb 28                	jmp    10001e8a <ssfn_render+0xb1b>
10001e62:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001e6a:	39 c1                	cmp    ecx,eax
10001e6c:	7d 03                	jge    10001e71 <ssfn_render+0xb02>
10001e6e:	42                   	inc    edx
10001e6f:	eb e2                	jmp    10001e53 <ssfn_render+0xae4>
10001e71:	89 f1                	mov    ecx,esi
10001e73:	49                   	dec    ecx
10001e74:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001e7c:	39 d1                	cmp    ecx,edx
10001e7e:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001e86:	7f eb                	jg     10001e73 <ssfn_render+0xb04>
10001e88:	eb cd                	jmp    10001e57 <ssfn_render+0xae8>
10001e8a:	8d 47 02             	lea    eax,[edi+0x2]
10001e8d:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001e94:	e9 d9 fe ff ff       	jmp    10001d72 <ssfn_render+0xa03>
10001e99:	83 fe 01             	cmp    esi,0x1
10001e9c:	7e 1f                	jle    10001ebd <ssfn_render+0xb4e>
10001e9e:	f7 c6 01 00 00 00    	test   esi,0x1
10001ea4:	74 24                	je     10001eca <ssfn_render+0xb5b>
10001ea6:	8d 46 ff             	lea    eax,[esi-0x1]
10001ea9:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10001eb1:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10001eb9:	89 c6                	mov    esi,eax
10001ebb:	eb 0d                	jmp    10001eca <ssfn_render+0xb5b>
10001ebd:	85 f6                	test   esi,esi
10001ebf:	0f 84 c7 00 00 00    	je     10001f8c <ssfn_render+0xc1d>
10001ec5:	be 01 00 00 00       	mov    esi,0x1
10001eca:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001ed0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001ed4:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10001ed8:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001edc:	39 d1                	cmp    ecx,edx
10001ede:	7d 0b                	jge    10001eeb <ssfn_render+0xb7c>
10001ee0:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10001ee4:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001ee8:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001eeb:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001ef6:	31 c0                	xor    eax,eax
10001ef8:	31 d2                	xor    edx,edx
10001efa:	8d 4e ff             	lea    ecx,[esi-0x1]
10001efd:	39 d1                	cmp    ecx,edx
10001eff:	7e 7d                	jle    10001f7e <ssfn_render+0xc0f>
10001f01:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10001f09:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10001f11:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001f15:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001f19:	79 02                	jns    10001f1d <ssfn_render+0xbae>
10001f1b:	31 c0                	xor    eax,eax
10001f1d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001f21:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10001f25:	39 cf                	cmp    edi,ecx
10001f27:	7e 04                	jle    10001f2d <ssfn_render+0xbbe>
10001f29:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001f2d:	85 d2                	test   edx,edx
10001f2f:	74 12                	je     10001f43 <ssfn_render+0xbd4>
10001f31:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10001f39:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001f3d:	39 c8                	cmp    eax,ecx
10001f3f:	7d 02                	jge    10001f43 <ssfn_render+0xbd4>
10001f41:	89 c8                	mov    eax,ecx
10001f43:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10001f47:	7d 2b                	jge    10001f74 <ssfn_render+0xc05>
10001f49:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001f4d:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10001f53:	8d 3c 01             	lea    edi,[ecx+eax*1]
10001f56:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10001f5a:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
10001f5e:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10001f62:	75 05                	jne    10001f69 <ssfn_render+0xbfa>
10001f64:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
10001f69:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
10001f6d:	40                   	inc    eax
10001f6e:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10001f72:	eb cf                	jmp    10001f43 <ssfn_render+0xbd4>
10001f74:	83 c2 02             	add    edx,0x2
10001f77:	b0 01                	mov    al,0x1
10001f79:	e9 7c ff ff ff       	jmp    10001efa <ssfn_render+0xb8b>
10001f7e:	83 e6 fe             	and    esi,0xfffffffe
10001f81:	84 c0                	test   al,al
10001f83:	74 07                	je     10001f8c <ssfn_render+0xc1d>
10001f85:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10001f8c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001f90:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
10001f94:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
10001f98:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
10001f9d:	e9 9b fd ff ff       	jmp    10001d3d <ssfn_render+0x9ce>
10001fa2:	88 c2                	mov    dl,al
10001fa4:	80 e2 60             	and    dl,0x60
10001fa7:	0f 85 95 02 00 00    	jne    10002242 <ssfn_render+0xed3>
10001fad:	83 e0 1f             	and    eax,0x1f
10001fb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001fb4:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10001fbb:	c1 fb 04             	sar    ebx,0x4
10001fbe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10001fc2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10001fc6:	40                   	inc    eax
10001fc7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001fcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001fcf:	c1 f8 04             	sar    eax,0x4
10001fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001fd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001fda:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001fdf:	99                   	cdq    
10001fe0:	f7 fe                	idiv   esi
10001fe2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001fea:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10001fef:	99                   	cdq    
10001ff0:	f7 fe                	idiv   esi
10001ff2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001ff6:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001ffc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002000:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002004:	8d 14 3b             	lea    edx,[ebx+edi*1]
10002007:	39 d6                	cmp    esi,edx
10002009:	7d 0a                	jge    10002015 <ssfn_render+0xca6>
1000200b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000200f:	8d 14 3b             	lea    edx,[ebx+edi*1]
10002012:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002019:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10002021:	0f af c3             	imul   eax,ebx
10002024:	31 ff                	xor    edi,edi
10002026:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
1000202a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000202e:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002032:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10002036:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000203a:	29 d8                	sub    eax,ebx
1000203c:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10002040:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
10002044:	0f 8d b1 00 00 00    	jge    100020fb <ssfn_render+0xd8c>
1000204a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000204e:	99                   	cdq    
1000204f:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002053:	89 c6                	mov    esi,eax
10002055:	31 c0                	xor    eax,eax
10002057:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
1000205c:	74 0e                	je     1000206c <ssfn_render+0xcfd>
1000205e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10002062:	bb 04 00 00 00       	mov    ebx,0x4
10002067:	29 f8                	sub    eax,edi
10002069:	99                   	cdq    
1000206a:	f7 fb                	idiv   ebx
1000206c:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10002070:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000207b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
1000207f:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
10002084:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000208b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
1000208f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002093:	39 d8                	cmp    eax,ebx
10002095:	7d 4e                	jge    100020e5 <ssfn_render+0xd76>
10002097:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000209b:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
100020a0:	99                   	cdq    
100020a1:	f7 fb                	idiv   ebx
100020a3:	8d 14 06             	lea    edx,[esi+eax*1]
100020a6:	83 e0 07             	and    eax,0x7
100020a9:	c1 fa 03             	sar    edx,0x3
100020ac:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
100020b1:	0f a3 c2             	bt     edx,eax
100020b4:	72 0e                	jb     100020c4 <ssfn_render+0xd55>
100020b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100020ba:	43                   	inc    ebx
100020bb:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
100020c2:	eb c0                	jmp    10002084 <ssfn_render+0xd15>
100020c4:	31 c0                	xor    eax,eax
100020c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100020ca:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100020ce:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
100020d4:	40                   	inc    eax
100020d5:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
100020d9:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
100020dd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
100020e1:	7d e3                	jge    100020c6 <ssfn_render+0xd57>
100020e3:	eb d1                	jmp    100020b6 <ssfn_render+0xd47>
100020e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100020e9:	47                   	inc    edi
100020ea:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
100020ee:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100020f2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
100020f6:	e9 45 ff ff ff       	jmp    10002040 <ssfn_render+0xcd1>
100020fb:	b3 fe                	mov    bl,0xfe
100020fd:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
10002104:	0f 85 21 03 00 00    	jne    1000242b <ssfn_render+0x10bc>
1000210a:	31 c0                	xor    eax,eax
1000210c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002110:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
10002115:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10002119:	0f 95 c0             	setne  al
1000211c:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002124:	4f                   	dec    edi
10002125:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10002129:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
10002131:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002135:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000213c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002140:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
10002144:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002148:	31 c0                	xor    eax,eax
1000214a:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
1000214d:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002151:	83 c1 04             	add    ecx,0x4
10002154:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10002158:	0f 8d c0 02 00 00    	jge    1000241e <ssfn_render+0x10af>
1000215e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10002162:	8d 77 01             	lea    esi,[edi+0x1]
10002165:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002169:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
1000216d:	4f                   	dec    edi
1000216e:	be 01 00 00 00       	mov    esi,0x1
10002173:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10002177:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
1000217b:	7e 63                	jle    100021e0 <ssfn_render+0xe71>
1000217d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002181:	b9 01 00 00 00       	mov    ecx,0x1
10002186:	89 ca                	mov    edx,ecx
10002188:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
1000218c:	7e 45                	jle    100021d3 <ssfn_render+0xe64>
1000218e:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10002194:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
10002199:	75 34                	jne    100021cf <ssfn_render+0xe60>
1000219b:	89 c7                	mov    edi,eax
1000219d:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100021a1:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
100021a5:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
100021a9:	74 0c                	je     100021b7 <ssfn_render+0xe48>
100021ab:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100021af:	01 d7                	add    edi,edx
100021b1:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
100021b5:	75 18                	jne    100021cf <ssfn_render+0xe60>
100021b7:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100021bb:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
100021bf:	74 06                	je     100021c7 <ssfn_render+0xe58>
100021c1:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
100021c5:	75 08                	jne    100021cf <ssfn_render+0xe60>
100021c7:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
100021cb:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
100021cf:	41                   	inc    ecx
100021d0:	40                   	inc    eax
100021d1:	eb b3                	jmp    10002186 <ssfn_render+0xe17>
100021d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100021d7:	46                   	inc    esi
100021d8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
100021dc:	b0 01                	mov    al,0x1
100021de:	eb 97                	jmp    10002177 <ssfn_render+0xe08>
100021e0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100021e4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
100021e8:	bb 01 00 00 00       	mov    ebx,0x1
100021ed:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
100021f1:	7e 3d                	jle    10002230 <ssfn_render+0xec1>
100021f3:	b8 01 00 00 00       	mov    eax,0x1
100021f8:	89 c2                	mov    edx,eax
100021fa:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
100021fe:	7e 23                	jle    10002223 <ssfn_render+0xeb4>
10002200:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10002204:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
1000220a:	8d 14 07             	lea    edx,[edi+eax*1]
1000220d:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
10002212:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002216:	75 08                	jne    10002220 <ssfn_render+0xeb1>
10002218:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
1000221c:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10002220:	40                   	inc    eax
10002221:	eb d5                	jmp    100021f8 <ssfn_render+0xe89>
10002223:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002227:	43                   	inc    ebx
10002228:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
1000222c:	b0 01                	mov    al,0x1
1000222e:	eb bd                	jmp    100021ed <ssfn_render+0xe7e>
10002230:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
10002233:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002237:	01 c9                	add    ecx,ecx
10002239:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
1000223d:	e9 08 ff ff ff       	jmp    1000214a <ssfn_render+0xddb>
10002242:	b3 fe                	mov    bl,0xfe
10002244:	80 fa 20             	cmp    dl,0x20
10002247:	0f 85 de 01 00 00    	jne    1000242b <ssfn_render+0x10bc>
1000224d:	89 c3                	mov    ebx,eax
1000224f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10002253:	c1 e3 08             	shl    ebx,0x8
10002256:	81 e3 00 1f 00 00    	and    ebx,0x1f00
1000225c:	09 c3                	or     ebx,eax
1000225e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
10002262:	43                   	inc    ebx
10002263:	40                   	inc    eax
10002264:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002268:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
1000226c:	40                   	inc    eax
1000226d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10002271:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002275:	c1 f8 04             	sar    eax,0x4
10002278:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000227c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002280:	c1 f8 04             	sar    eax,0x4
10002283:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002287:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000228b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10002290:	99                   	cdq    
10002291:	f7 fe                	idiv   esi
10002293:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002297:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000229b:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
100022a0:	99                   	cdq    
100022a1:	f7 fe                	idiv   esi
100022a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100022a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100022ab:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100022b1:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100022b5:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
100022b9:	39 d6                	cmp    esi,edx
100022bb:	7d 0b                	jge    100022c8 <ssfn_render+0xf59>
100022bd:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
100022c1:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100022c5:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
100022c8:	83 c1 04             	add    ecx,0x4
100022cb:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100022d6:	8d 04 19             	lea    eax,[ecx+ebx*1]
100022d9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100022dd:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
100022e1:	72 35                	jb     10002318 <ssfn_render+0xfa9>
100022e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100022e7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100022eb:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
100022f0:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
100022f4:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
100022f8:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100022ff:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
10002303:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
1000230b:	31 d2                	xor    edx,edx
1000230d:	31 ff                	xor    edi,edi
1000230f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
10002313:	e9 cc 00 00 00       	jmp    100023e4 <ssfn_render+0x1075>
10002318:	8a 11                	mov    dl,BYTE PTR [ecx]
1000231a:	89 d0                	mov    eax,edx
1000231c:	83 e0 7f             	and    eax,0x7f
1000231f:	84 d2                	test   dl,dl
10002321:	8d 78 01             	lea    edi,[eax+0x1]
10002324:	78 09                	js     1000232f <ssfn_render+0xfc0>
10002326:	41                   	inc    ecx
10002327:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000232b:	89 ca                	mov    edx,ecx
1000232d:	eb 3d                	jmp    1000236c <ssfn_render+0xffd>
1000232f:	48                   	dec    eax
10002330:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002337:	83 f8 fe             	cmp    eax,0xfffffffe
1000233a:	74 16                	je     10002352 <ssfn_render+0xfe3>
1000233c:	8d 5a 01             	lea    ebx,[edx+0x1]
1000233f:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
10002346:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
10002349:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
10002350:	eb dd                	jmp    1000232f <ssfn_render+0xfc0>
10002352:	83 c1 02             	add    ecx,0x2
10002355:	eb 86                	jmp    100022dd <ssfn_render+0xf6e>
10002357:	42                   	inc    edx
10002358:	8d 73 01             	lea    esi,[ebx+0x1]
1000235b:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10002362:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
10002365:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
1000236c:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
10002370:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
10002377:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
1000237c:	75 d9                	jne    10002357 <ssfn_render+0xfe8>
1000237e:	01 f9                	add    ecx,edi
10002380:	e9 58 ff ff ff       	jmp    100022dd <ssfn_render+0xf6e>
10002385:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002389:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
1000238d:	99                   	cdq    
1000238e:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
10002392:	0f af c8             	imul   ecx,eax
10002395:	31 c0                	xor    eax,eax
10002397:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
1000239c:	74 0e                	je     100023ac <ssfn_render+0x103d>
1000239e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100023a2:	bb 04 00 00 00       	mov    ebx,0x4
100023a7:	29 f8                	sub    eax,edi
100023a9:	99                   	cdq    
100023aa:	f7 fb                	idiv   ebx
100023ac:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
100023b0:	31 db                	xor    ebx,ebx
100023b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100023b6:	31 f6                	xor    esi,esi
100023b8:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
100023bf:	01 c1                	add    ecx,eax
100023c1:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
100023c5:	7f 30                	jg     100023f7 <ssfn_render+0x1088>
100023c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100023cb:	85 c0                	test   eax,eax
100023cd:	79 02                	jns    100023d1 <ssfn_render+0x1062>
100023cf:	31 c0                	xor    eax,eax
100023d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100023d5:	47                   	inc    edi
100023d6:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
100023da:	b2 01                	mov    dl,0x1
100023dc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
100023e0:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
100023e4:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
100023e8:	7c 9b                	jl     10002385 <ssfn_render+0x1016>
100023ea:	84 d2                	test   dl,dl
100023ec:	74 3b                	je     10002429 <ssfn_render+0x10ba>
100023ee:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
100023f5:	eb 32                	jmp    10002429 <ssfn_render+0x10ba>
100023f7:	89 d8                	mov    eax,ebx
100023f9:	99                   	cdq    
100023fa:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
100023fe:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
10002405:	3c ff                	cmp    al,0xff
10002407:	74 0e                	je     10002417 <ssfn_render+0x10a8>
10002409:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000240d:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002413:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
10002417:	46                   	inc    esi
10002418:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
1000241c:	eb a3                	jmp    100023c1 <ssfn_render+0x1052>
1000241e:	84 c0                	test   al,al
10002420:	74 07                	je     10002429 <ssfn_render+0x10ba>
10002422:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
10002429:	b3 fe                	mov    bl,0xfe
1000242b:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
1000242f:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
10002433:	e9 9f f5 ff ff       	jmp    100019d7 <ssfn_render+0x668>
10002438:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000243e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10002441:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
10002444:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
10002447:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000244d:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
10002451:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
10002455:	89 f0                	mov    eax,esi
10002457:	89 d9                	mov    ecx,ebx
10002459:	43                   	inc    ebx
1000245a:	39 de                	cmp    esi,ebx
1000245c:	7e 08                	jle    10002466 <ssfn_render+0x10f7>
1000245e:	48                   	dec    eax
1000245f:	29 c8                	sub    eax,ecx
10002461:	88 42 07             	mov    BYTE PTR [edx+0x7],al
10002464:	eb 04                	jmp    1000246a <ssfn_render+0x10fb>
10002466:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
1000246a:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
10002472:	0f 84 c9 0c 00 00    	je     10003141 <ssfn_render+0x1dd2>
10002478:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
1000247e:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
10002484:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002488:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
1000248b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
1000248f:	0f ba e0 0c          	bt     eax,0xc
10002493:	72 22                	jb     100024b7 <ssfn_render+0x1148>
10002495:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10002498:	83 e0 0f             	and    eax,0xf
1000249b:	3c 03                	cmp    al,0x3
1000249d:	74 18                	je     100024b7 <ssfn_render+0x1148>
1000249f:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
100024a3:	84 c9                	test   cl,cl
100024a5:	74 10                	je     100024b7 <ssfn_render+0x1148>
100024a7:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
100024ab:	0f af d7             	imul   edx,edi
100024ae:	89 d0                	mov    eax,edx
100024b0:	99                   	cdq    
100024b1:	f7 f9                	idiv   ecx
100024b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100024b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100024bb:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
100024c1:	7d 06                	jge    100024c9 <ssfn_render+0x115a>
100024c3:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
100024c9:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
100024cf:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
100024d3:	0f b7 13             	movzx  edx,WORD PTR [ebx]
100024d6:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
100024db:	89 d0                	mov    eax,edx
100024dd:	99                   	cdq    
100024de:	f7 f9                	idiv   ecx
100024e0:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
100024e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100024e8:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
100024eb:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
100024ef:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
100024f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100024f7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
100024fc:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002500:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002505:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002509:	99                   	cdq    
1000250a:	f7 f9                	idiv   ecx
1000250c:	31 d2                	xor    edx,edx
1000250e:	83 ff 10             	cmp    edi,0x10
10002511:	0f 9f c2             	setg   dl
10002514:	42                   	inc    edx
10002515:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10002519:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
1000251d:	7d 08                	jge    10002527 <ssfn_render+0x11b8>
1000251f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002523:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10002527:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
1000252b:	39 c2                	cmp    edx,eax
1000252d:	7d 04                	jge    10002533 <ssfn_render+0x11c4>
1000252f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002533:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10002538:	74 4c                	je     10002586 <ssfn_render+0x1217>
1000253a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000253e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002543:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002547:	99                   	cdq    
10002548:	f7 f9                	idiv   ecx
1000254a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000254e:	81 e2 00 08 00 00    	and    edx,0x800
10002554:	74 04                	je     1000255a <ssfn_render+0x11eb>
10002556:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000255a:	01 d0                	add    eax,edx
1000255c:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
10002562:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002566:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
1000256a:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
1000256e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002573:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002577:	99                   	cdq    
10002578:	f7 f9                	idiv   ecx
1000257a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000257e:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
10002584:	eb 22                	jmp    100025a8 <ssfn_render+0x1239>
10002586:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000258a:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
10002594:	d1 f8                	sar    eax,1
10002596:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
1000259e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100025a2:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100025a8:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025af:	8b 18                	mov    ebx,DWORD PTR [eax]
100025b1:	85 db                	test   ebx,ebx
100025b3:	0f 84 2e 09 00 00    	je     10002ee7 <ssfn_render+0x1b78>
100025b9:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
100025bd:	89 d1                	mov    ecx,edx
100025bf:	89 d0                	mov    eax,edx
100025c1:	66 c1 f9 0b          	sar    cx,0xb
100025c5:	c1 f8 1f             	sar    eax,0x1f
100025c8:	31 c2                	xor    edx,eax
100025ca:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
100025ce:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
100025d2:	88 c8                	mov    al,cl
100025d4:	83 e0 10             	and    eax,0x10
100025d7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
100025db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100025df:	83 c0 40             	add    eax,0x40
100025e2:	c1 f8 06             	sar    eax,0x6
100025e5:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
100025ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100025f0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
100025f4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
100025f8:	7d 08                	jge    10002602 <ssfn_render+0x1293>
100025fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100025fe:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002602:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002605:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
1000260d:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002611:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10002619:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
1000261d:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002622:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002626:	99                   	cdq    
10002627:	f7 f9                	idiv   ecx
10002629:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
1000262d:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002634:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10002637:	0f b6 f4             	movzx  esi,ah
1000263a:	89 c2                	mov    edx,eax
1000263c:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
10002640:	c1 ea 10             	shr    edx,0x10
10002643:	0f b6 fa             	movzx  edi,dl
10002646:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
1000264a:	0f b6 f8             	movzx  edi,al
1000264d:	c1 e8 18             	shr    eax,0x18
10002650:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
10002654:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002658:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000265f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10002662:	0f b6 fc             	movzx  edi,ah
10002665:	89 c2                	mov    edx,eax
10002667:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
1000266e:	c1 ea 10             	shr    edx,0x10
10002671:	0f b6 c0             	movzx  eax,al
10002674:	0f b6 f2             	movzx  esi,dl
10002677:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000267e:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
10002685:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002689:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002690:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
10002697:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
1000269b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
1000269f:	0f af c2             	imul   eax,edx
100026a2:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
100026a6:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
100026aa:	8d 04 90             	lea    eax,[eax+edx*4]
100026ad:	01 d8                	add    eax,ebx
100026af:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
100026b6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
100026ba:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
100026c1:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
100026c6:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
100026cd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100026d1:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
100026d5:	0f 8d e2 04 00 00    	jge    10002bbd <ssfn_render+0x184e>
100026db:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026e2:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100026e9:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
100026ed:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
100026f1:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
100026f5:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
100026f9:	39 d0                	cmp    eax,edx
100026fb:	0f 8d bc 04 00 00    	jge    10002bbd <ssfn_render+0x184e>
10002701:	85 c0                	test   eax,eax
10002703:	0f 88 94 04 00 00    	js     10002b9d <ssfn_render+0x182e>
10002709:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000270f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10002713:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10002717:	c1 e1 08             	shl    ecx,0x8
1000271a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10002722:	89 c8                	mov    eax,ecx
10002724:	0f af c3             	imul   eax,ebx
10002727:	99                   	cdq    
10002728:	f7 fe                	idiv   esi
1000272a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002731:	c1 f8 08             	sar    eax,0x8
10002734:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
1000273b:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002741:	0f af c3             	imul   eax,ebx
10002744:	99                   	cdq    
10002745:	f7 fe                	idiv   esi
10002747:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
1000274b:	c1 f8 08             	sar    eax,0x8
1000274e:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
10002755:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002759:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
10002760:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
10002767:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000276e:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002772:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002776:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
1000277a:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
1000277e:	0f 8d 19 04 00 00    	jge    10002b9d <ssfn_render+0x182e>
10002784:	85 c0                	test   eax,eax
10002786:	0f 88 ff 03 00 00    	js     10002b8b <ssfn_render+0x181c>
1000278c:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002793:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
10002797:	75 42                	jne    100027db <ssfn_render+0x146c>
10002799:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000279d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100027a4:	b9 10 00 00 00       	mov    ecx,0x10
100027a9:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100027ac:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
100027b3:	89 c2                	mov    edx,eax
100027b5:	0f b6 fc             	movzx  edi,ah
100027b8:	d3 ea                	shr    edx,cl
100027ba:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
100027c1:	0f b6 f2             	movzx  esi,dl
100027c4:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
100027c8:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100027cf:	d3 e8                	shr    eax,cl
100027d1:	0f b6 c0             	movzx  eax,al
100027d4:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100027db:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100027e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100027e5:	0f b7 18             	movzx  ebx,WORD PTR [eax]
100027e8:	c1 e1 08             	shl    ecx,0x8
100027eb:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
100027ef:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
100027f7:	89 c8                	mov    eax,ecx
100027f9:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
10002801:	0f af c3             	imul   eax,ebx
10002804:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
1000280c:	99                   	cdq    
1000280d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10002815:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002819:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10002821:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
10002828:	c1 f8 08             	sar    eax,0x8
1000282b:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10002832:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002838:	0f af c3             	imul   eax,ebx
1000283b:	99                   	cdq    
1000283c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002840:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002844:	c1 f8 08             	sar    eax,0x8
10002847:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
1000284e:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
10002855:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002859:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
1000285d:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
10002861:	0f 8d 3b 02 00 00    	jge    10002aa2 <ssfn_render+0x1733>
10002867:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
1000286b:	c1 fa 08             	sar    edx,0x8
1000286e:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
10002875:	75 25                	jne    1000289c <ssfn_render+0x152d>
10002877:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
1000287c:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
10002883:	b8 00 01 00 00       	mov    eax,0x100
10002888:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
10002890:	29 c8                	sub    eax,ecx
10002892:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10002896:	39 c7                	cmp    edi,eax
10002898:	7e 1c                	jle    100028b6 <ssfn_render+0x1547>
1000289a:	eb 16                	jmp    100028b2 <ssfn_render+0x1543>
1000289c:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
100028a4:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
100028ab:	75 09                	jne    100028b6 <ssfn_render+0x1547>
100028ad:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
100028b2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100028b6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
100028ba:	0f b7 00             	movzx  eax,WORD PTR [eax]
100028bd:	0f af c2             	imul   eax,edx
100028c0:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
100028c7:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
100028cc:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
100028d1:	c1 f8 08             	sar    eax,0x8
100028d4:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
100028db:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
100028e2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100028e6:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
100028ea:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
100028ee:	0f 8d a1 01 00 00    	jge    10002a95 <ssfn_render+0x1726>
100028f4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100028f8:	c1 f8 08             	sar    eax,0x8
100028fb:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
10002902:	75 3b                	jne    1000293f <ssfn_render+0x15d0>
10002904:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
10002909:	ba 00 01 00 00       	mov    edx,0x100
1000290e:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
10002916:	29 ca                	sub    edx,ecx
10002918:	89 f1                	mov    ecx,esi
1000291a:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
10002921:	39 d1                	cmp    ecx,edx
10002923:	7c 0e                	jl     10002933 <ssfn_render+0x15c4>
10002925:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002929:	81 fa 00 01 00 00    	cmp    edx,0x100
1000292f:	74 22                	je     10002953 <ssfn_render+0x15e4>
10002931:	89 d1                	mov    ecx,edx
10002933:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
10002938:	89 cf                	mov    edi,ecx
1000293a:	c1 ff 08             	sar    edi,0x8
1000293d:	eb 14                	jmp    10002953 <ssfn_render+0x15e4>
1000293f:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
10002946:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
1000294d:	74 04                	je     10002953 <ssfn_render+0x15e4>
1000294f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002953:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
10002957:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
1000295b:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
10002962:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
10002967:	81 fa ff 00 00 00    	cmp    edx,0xff
1000296d:	75 37                	jne    100029a6 <ssfn_render+0x1637>
1000296f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10002976:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
1000297e:	0f af c7             	imul   eax,edi
10002981:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002985:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
1000298c:	0f af c7             	imul   eax,edi
1000298f:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002993:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
1000299a:	0f af c7             	imul   eax,edi
1000299d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
100029a1:	e9 e2 00 00 00       	jmp    10002a88 <ssfn_render+0x1719>
100029a6:	81 fa fe 00 00 00    	cmp    edx,0xfe
100029ac:	74 2d                	je     100029db <ssfn_render+0x166c>
100029ae:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100029b1:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
100029b4:	85 c9                	test   ecx,ecx
100029b6:	74 23                	je     100029db <ssfn_render+0x166c>
100029b8:	01 c8                	add    eax,ecx
100029ba:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
100029bd:	89 d9                	mov    ecx,ebx
100029bf:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
100029c6:	c1 e9 10             	shr    ecx,0x10
100029c9:	0f b6 f7             	movzx  esi,bh
100029cc:	0f b6 c1             	movzx  eax,cl
100029cf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100029d3:	0f b6 c3             	movzx  eax,bl
100029d6:	c1 eb 18             	shr    ebx,0x18
100029d9:	eb 14                	jmp    100029ef <ssfn_render+0x1680>
100029db:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100029df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100029e3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100029e7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
100029eb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100029ef:	81 fb ff 00 00 00    	cmp    ebx,0xff
100029f5:	75 25                	jne    10002a1c <ssfn_render+0x16ad>
100029f7:	0f af c7             	imul   eax,edi
100029fa:	0f af f7             	imul   esi,edi
100029fd:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002a01:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002a05:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
10002a0b:	0f af cf             	imul   ecx,edi
10002a0e:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
10002a12:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
10002a16:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
10002a1a:	eb 6c                	jmp    10002a88 <ssfn_render+0x1719>
10002a1c:	0f af f3             	imul   esi,ebx
10002a1f:	0f af c3             	imul   eax,ebx
10002a22:	b9 ff 00 00 00       	mov    ecx,0xff
10002a27:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
10002a2e:	29 d9                	sub    ecx,ebx
10002a30:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
10002a34:	0f af d1             	imul   edx,ecx
10002a37:	b9 ff 00 00 00       	mov    ecx,0xff
10002a3c:	01 d0                	add    eax,edx
10002a3e:	0f af c7             	imul   eax,edi
10002a41:	99                   	cdq    
10002a42:	f7 f9                	idiv   ecx
10002a44:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002a48:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a4c:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
10002a54:	01 f0                	add    eax,esi
10002a56:	89 ce                	mov    esi,ecx
10002a58:	0f af c7             	imul   eax,edi
10002a5b:	99                   	cdq    
10002a5c:	f7 f9                	idiv   ecx
10002a5e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002a62:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002a66:	0f af cb             	imul   ecx,ebx
10002a69:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a6d:	0f af df             	imul   ebx,edi
10002a70:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
10002a78:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
10002a7c:	01 c8                	add    eax,ecx
10002a7e:	0f af c7             	imul   eax,edi
10002a81:	99                   	cdq    
10002a82:	f7 fe                	idiv   esi
10002a84:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002a88:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
10002a90:	e9 51 fe ff ff       	jmp    100028e6 <ssfn_render+0x1577>
10002a95:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
10002a9d:	e9 b7 fd ff ff       	jmp    10002859 <ssfn_render+0x14ea>
10002aa2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002aa7:	74 30                	je     10002ad9 <ssfn_render+0x176a>
10002aa9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002aad:	31 d2                	xor    edx,edx
10002aaf:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002ab3:	31 d2                	xor    edx,edx
10002ab5:	89 c1                	mov    ecx,eax
10002ab7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002abb:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002abf:	31 d2                	xor    edx,edx
10002ac1:	89 c6                	mov    esi,eax
10002ac3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002ac7:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002acb:	31 d2                	xor    edx,edx
10002acd:	89 c3                	mov    ebx,eax
10002acf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002ad3:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002ad7:	eb 1c                	jmp    10002af5 <ssfn_render+0x1786>
10002ad9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002add:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002ae1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002ae5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002ae9:	c1 e9 08             	shr    ecx,0x8
10002aec:	c1 ee 08             	shr    esi,0x8
10002aef:	c1 eb 08             	shr    ebx,0x8
10002af2:	c1 e8 08             	shr    eax,0x8
10002af5:	83 f8 0f             	cmp    eax,0xf
10002af8:	0f 86 8d 00 00 00    	jbe    10002b8b <ssfn_render+0x181c>
10002afe:	89 ca                	mov    edx,ecx
10002b00:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002b06:	76 05                	jbe    10002b0d <ssfn_render+0x179e>
10002b08:	ba ff 00 00 00       	mov    edx,0xff
10002b0d:	b9 10 00 00 00       	mov    ecx,0x10
10002b12:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002b19:	d3 e2                	shl    edx,cl
10002b1b:	3d ff 00 00 00       	cmp    eax,0xff
10002b20:	89 d1                	mov    ecx,edx
10002b22:	76 05                	jbe    10002b29 <ssfn_render+0x17ba>
10002b24:	b8 ff 00 00 00       	mov    eax,0xff
10002b29:	c1 e0 18             	shl    eax,0x18
10002b2c:	09 c8                	or     eax,ecx
10002b2e:	81 fe ff 00 00 00    	cmp    esi,0xff
10002b34:	76 05                	jbe    10002b3b <ssfn_render+0x17cc>
10002b36:	be ff 00 00 00       	mov    esi,0xff
10002b3b:	c1 e6 08             	shl    esi,0x8
10002b3e:	09 f0                	or     eax,esi
10002b40:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002b46:	76 05                	jbe    10002b4d <ssfn_render+0x17de>
10002b48:	bb ff 00 00 00       	mov    ebx,0xff
10002b4d:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002b51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002b55:	d3 e3                	shl    ebx,cl
10002b57:	09 c3                	or     ebx,eax
10002b59:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002b60:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002b63:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002b67:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002b6b:	75 1e                	jne    10002b8b <ssfn_render+0x181c>
10002b6d:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002b74:	7e 07                	jle    10002b7d <ssfn_render+0x180e>
10002b76:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002b7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002b81:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002b85:	7d 04                	jge    10002b8b <ssfn_render+0x181c>
10002b87:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002b8b:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002b93:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002b97:	0f 85 ca fb ff ff    	jne    10002767 <ssfn_render+0x13f8>
10002b9d:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ba4:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002ba8:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002bac:	25 fc ff 00 00       	and    eax,0xfffc
10002bb1:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002bb8:	e9 10 fb ff ff       	jmp    100026cd <ssfn_render+0x135e>
10002bbd:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002bc4:	0f 84 90 01 00 00    	je     10002d5a <ssfn_render+0x19eb>
10002bca:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002bd2:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002bd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002bdd:	40                   	inc    eax
10002bde:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002be2:	29 c7                	sub    edi,eax
10002be4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002be8:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002bec:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002bf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002bf4:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002bf8:	7e 09                	jle    10002c03 <ssfn_render+0x1894>
10002bfa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002bfe:	40                   	inc    eax
10002bff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002c03:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002c0a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c11:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002c15:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002c19:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002c1d:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002c21:	0f af c2             	imul   eax,edx
10002c24:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002c28:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002c2c:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002c30:	03 07                	add    eax,DWORD PTR [edi]
10002c32:	89 c7                	mov    edi,eax
10002c34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002c38:	c1 e0 18             	shl    eax,0x18
10002c3b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002c3f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002c43:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002c47:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002c4c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002c50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002c54:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002c58:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002c5c:	0f 8e f8 00 00 00    	jle    10002d5a <ssfn_render+0x19eb>
10002c62:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c69:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002c70:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002c74:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002c78:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002c7c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002c80:	39 d0                	cmp    eax,edx
10002c82:	0f 8d d2 00 00 00    	jge    10002d5a <ssfn_render+0x19eb>
10002c88:	31 db                	xor    ebx,ebx
10002c8a:	85 c0                	test   eax,eax
10002c8c:	79 23                	jns    10002cb1 <ssfn_render+0x1942>
10002c8e:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c95:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002c99:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002c9d:	25 fc ff 00 00       	and    eax,0xfffc
10002ca2:	01 c7                	add    edi,eax
10002ca4:	eb aa                	jmp    10002c50 <ssfn_render+0x18e1>
10002ca6:	85 c0                	test   eax,eax
10002ca8:	79 20                	jns    10002cca <ssfn_render+0x195b>
10002caa:	43                   	inc    ebx
10002cab:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002caf:	7c dd                	jl     10002c8e <ssfn_render+0x191f>
10002cb1:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002cb8:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002cbc:	01 d8                	add    eax,ebx
10002cbe:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002cc2:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002cc6:	7c de                	jl     10002ca6 <ssfn_render+0x1937>
10002cc8:	eb c4                	jmp    10002c8e <ssfn_render+0x191f>
10002cca:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002cce:	7e 06                	jle    10002cd6 <ssfn_render+0x1967>
10002cd0:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002cd4:	7f d4                	jg     10002caa <ssfn_render+0x193b>
10002cd6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002cd9:	b8 10 00 00 00       	mov    eax,0x10
10002cde:	0f b6 f6             	movzx  esi,dh
10002ce1:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002ce5:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002ce9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002ced:	89 d0                	mov    eax,edx
10002cef:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002cf3:	d3 e8                	shr    eax,cl
10002cf5:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002cf9:	0f b6 c0             	movzx  eax,al
10002cfc:	d3 ea                	shr    edx,cl
10002cfe:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002d02:	0f b6 f2             	movzx  esi,dl
10002d05:	29 c1                	sub    ecx,eax
10002d07:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002d0b:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002d10:	29 f2                	sub    edx,esi
10002d12:	c1 f9 08             	sar    ecx,0x8
10002d15:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002d1a:	01 c8                	add    eax,ecx
10002d1c:	c1 fa 08             	sar    edx,0x8
10002d1f:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002d23:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002d27:	d3 e0                	shl    eax,cl
10002d29:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002d2d:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002d31:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002d35:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002d39:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002d3e:	d3 e6                	shl    esi,cl
10002d40:	c1 fa 08             	sar    edx,0x8
10002d43:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002d47:	c1 e2 08             	shl    edx,0x8
10002d4a:	09 d0                	or     eax,edx
10002d4c:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002d50:	09 c6                	or     esi,eax
10002d52:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002d55:	e9 50 ff ff ff       	jmp    10002caa <ssfn_render+0x193b>
10002d5a:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002d61:	0f 84 80 01 00 00    	je     10002ee7 <ssfn_render+0x1b78>
10002d67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002d6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002d6f:	d1 fa                	sar    edx,1
10002d71:	40                   	inc    eax
10002d72:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002d76:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d7a:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002d7e:	7e 09                	jle    10002d89 <ssfn_render+0x1a1a>
10002d80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002d84:	40                   	inc    eax
10002d85:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d89:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002d90:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d97:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002d9b:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002d9f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002da3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002da7:	01 d0                	add    eax,edx
10002da9:	0f af c1             	imul   eax,ecx
10002dac:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002db0:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002db4:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002db8:	03 03                	add    eax,DWORD PTR [ebx]
10002dba:	89 c7                	mov    edi,eax
10002dbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002dc0:	c1 e0 18             	shl    eax,0x18
10002dc3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002dc7:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002dcf:	01 d0                	add    eax,edx
10002dd1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002dd5:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002dda:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002dde:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002de2:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002de6:	0f 8e fb 00 00 00    	jle    10002ee7 <ssfn_render+0x1b78>
10002dec:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002df3:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002df7:	01 d8                	add    eax,ebx
10002df9:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002e00:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002e04:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002e08:	39 d0                	cmp    eax,edx
10002e0a:	0f 8d d7 00 00 00    	jge    10002ee7 <ssfn_render+0x1b78>
10002e10:	31 f6                	xor    esi,esi
10002e12:	85 c0                	test   eax,eax
10002e14:	0f 89 ad 00 00 00    	jns    10002ec7 <ssfn_render+0x1b58>
10002e1a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e21:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002e25:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002e29:	25 fc ff 00 00       	and    eax,0xfffc
10002e2e:	01 c7                	add    edi,eax
10002e30:	eb ac                	jmp    10002dde <ssfn_render+0x1a6f>
10002e32:	85 c0                	test   eax,eax
10002e34:	0f 88 82 00 00 00    	js     10002ebc <ssfn_render+0x1b4d>
10002e3a:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002e3d:	b8 10 00 00 00       	mov    eax,0x10
10002e42:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002e46:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002e4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002e4e:	89 d8                	mov    eax,ebx
10002e50:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002e54:	d3 e8                	shr    eax,cl
10002e56:	0f b6 cf             	movzx  ecx,bh
10002e59:	0f b6 c0             	movzx  eax,al
10002e5c:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002e60:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e64:	d3 eb                	shr    ebx,cl
10002e66:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002e6a:	0f b6 db             	movzx  ebx,bl
10002e6d:	29 c1                	sub    ecx,eax
10002e6f:	29 da                	sub    edx,ebx
10002e71:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002e76:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e7b:	c1 f9 08             	sar    ecx,0x8
10002e7e:	c1 fa 08             	sar    edx,0x8
10002e81:	01 c8                	add    eax,ecx
10002e83:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002e87:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002e8b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002e8f:	d3 e0                	shl    eax,cl
10002e91:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002e95:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002e99:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e9e:	c1 fa 08             	sar    edx,0x8
10002ea1:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10002ea5:	c1 e2 08             	shl    edx,0x8
10002ea8:	09 d0                	or     eax,edx
10002eaa:	8d 14 19             	lea    edx,[ecx+ebx*1]
10002ead:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10002eb1:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002eb5:	d3 e2                	shl    edx,cl
10002eb7:	09 c2                	or     edx,eax
10002eb9:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10002ebc:	46                   	inc    esi
10002ebd:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002ec1:	0f 8c 53 ff ff ff    	jl     10002e1a <ssfn_render+0x1aab>
10002ec7:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ece:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002ed2:	01 f0                	add    eax,esi
10002ed4:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002ed8:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002edc:	0f 8c 50 ff ff ff    	jl     10002e32 <ssfn_render+0x1ac3>
10002ee2:	e9 33 ff ff ff       	jmp    10002e1a <ssfn_render+0x1aab>
10002ee7:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10002eee:	74 04                	je     10002ef4 <ssfn_render+0x1b85>
10002ef0:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10002ef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002ef8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002efc:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10002f02:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002f09:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10002f0d:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002f14:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f17:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002f1b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002f21:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10002f25:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002f2a:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002f2e:	99                   	cdq    
10002f2f:	f7 f9                	idiv   ecx
10002f31:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10002f35:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002f3b:	25 80 00 00 00       	and    eax,0x80
10002f40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002f44:	0f 85 f7 01 00 00    	jne    10003141 <ssfn_render+0x1dd2>
10002f4a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f4d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10002f51:	0f 84 ea 01 00 00    	je     10003141 <ssfn_render+0x1dd2>
10002f57:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
10002f5e:	83 ec 0c             	sub    esp,0xc
10002f61:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
10002f68:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10002f6f:	51                   	push   ecx
10002f70:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
10002f77:	e8 53 d9 ff ff       	call   100008cf <_ssfn_c>
10002f7c:	83 c4 10             	add    esp,0x10
10002f7f:	85 c0                	test   eax,eax
10002f81:	0f 84 ba 01 00 00    	je     10003141 <ssfn_render+0x1dd2>
10002f87:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
10002f8f:	0f 86 ac 01 00 00    	jbe    10003141 <ssfn_render+0x1dd2>
10002f95:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002f9b:	8d 48 06             	lea    ecx,[eax+0x6]
10002f9e:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002fa4:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10002fa8:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10002fac:	0f 8e 8f 01 00 00    	jle    10003141 <ssfn_render+0x1dd2>
10002fb2:	8a 19                	mov    bl,BYTE PTR [ecx]
10002fb4:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10002fb8:	8a 18                	mov    bl,BYTE PTR [eax]
10002fba:	83 e3 40             	and    ebx,0x40
10002fbd:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10002fc2:	75 14                	jne    10002fd8 <ssfn_render+0x1c69>
10002fc4:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10002fc8:	75 0e                	jne    10002fd8 <ssfn_render+0x1c69>
10002fca:	80 fb 01             	cmp    bl,0x1
10002fcd:	19 c0                	sbb    eax,eax
10002fcf:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10002fd3:	e9 60 01 00 00       	jmp    10003138 <ssfn_render+0x1dc9>
10002fd8:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10002fdc:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10002fe0:	c1 e6 10             	shl    esi,0x10
10002fe3:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10002fe7:	84 db                	test   bl,bl
10002fe9:	74 08                	je     10002ff3 <ssfn_render+0x1c84>
10002feb:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10002fee:	83 c1 06             	add    ecx,0x6
10002ff1:	eb 0c                	jmp    10002fff <ssfn_render+0x1c90>
10002ff3:	c1 e2 08             	shl    edx,0x8
10002ff6:	83 c1 05             	add    ecx,0x5
10002ff9:	89 d0                	mov    eax,edx
10002ffb:	09 f0                	or     eax,esi
10002ffd:	09 c7                	or     edi,eax
10002fff:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003002:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003006:	01 f8                	add    eax,edi
10003008:	8a 10                	mov    dl,BYTE PTR [eax]
1000300a:	88 d3                	mov    bl,dl
1000300c:	83 e3 e0             	and    ebx,0xffffffe0
1000300f:	80 fb c0             	cmp    bl,0xc0
10003012:	0f 85 20 01 00 00    	jne    10003138 <ssfn_render+0x1dc9>
10003018:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
1000301c:	c1 e2 08             	shl    edx,0x8
1000301f:	83 c0 02             	add    eax,0x2
10003022:	81 e2 00 1f 00 00    	and    edx,0x1f00
10003028:	09 da                	or     edx,ebx
1000302a:	8d 72 01             	lea    esi,[edx+0x1]
1000302d:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003031:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
10003038:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
1000303c:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10003041:	0f 84 f1 00 00 00    	je     10003138 <ssfn_render+0x1dc9>
10003047:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000304b:	0f b7 10             	movzx  edx,WORD PTR [eax]
1000304e:	c1 e3 10             	shl    ebx,0x10
10003051:	81 e3 00 00 0f 00    	and    ebx,0xf0000
10003057:	09 d3                	or     ebx,edx
10003059:	39 de                	cmp    esi,ebx
1000305b:	0f 82 cf 00 00 00    	jb     10003130 <ssfn_render+0x1dc1>
10003061:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
10003064:	89 d7                	mov    edi,edx
10003066:	c1 e7 10             	shl    edi,0x10
10003069:	81 e7 00 00 0f 00    	and    edi,0xf0000
1000306f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10003073:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
10003077:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
1000307b:	39 fe                	cmp    esi,edi
1000307d:	0f 87 ad 00 00 00    	ja     10003130 <ssfn_render+0x1dc1>
10003083:	29 de                	sub    esi,ebx
10003085:	c0 ea 04             	shr    dl,0x4
10003088:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
1000308f:	0f b6 d2             	movzx  edx,dl
10003092:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10003096:	89 d3                	mov    ebx,edx
10003098:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
1000309c:	c1 e3 10             	shl    ebx,0x10
1000309f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100030a2:	09 da                	or     edx,ebx
100030a4:	c0 e8 04             	shr    al,0x4
100030a7:	c1 e0 18             	shl    eax,0x18
100030aa:	09 c2                	or     edx,eax
100030ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100030b0:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
100030b3:	01 c2                	add    edx,eax
100030b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100030b8:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
100030bc:	39 d7                	cmp    edi,edx
100030be:	76 78                	jbe    10003138 <ssfn_render+0x1dc9>
100030c0:	8a 1a                	mov    bl,BYTE PTR [edx]
100030c2:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
100030c9:	89 de                	mov    esi,ebx
100030cb:	83 e6 7f             	and    esi,0x7f
100030ce:	39 c6                	cmp    esi,eax
100030d0:	73 1d                	jae    100030ef <ssfn_render+0x1d80>
100030d2:	48                   	dec    eax
100030d3:	bb 02 00 00 00       	mov    ebx,0x2
100030d8:	29 f0                	sub    eax,esi
100030da:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
100030e1:	0f b6 02             	movzx  eax,BYTE PTR [edx]
100030e4:	84 c0                	test   al,al
100030e6:	78 03                	js     100030eb <ssfn_render+0x1d7c>
100030e8:	8d 58 02             	lea    ebx,[eax+0x2]
100030eb:	01 da                	add    edx,ebx
100030ed:	eb cd                	jmp    100030bc <ssfn_render+0x1d4d>
100030ef:	be 01 00 00 00       	mov    esi,0x1
100030f4:	84 db                	test   bl,bl
100030f6:	78 03                	js     100030fb <ssfn_render+0x1d8c>
100030f8:	8d 70 01             	lea    esi,[eax+0x1]
100030fb:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
100030ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003103:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10003108:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
1000310c:	99                   	cdq    
1000310d:	f7 fb                	idiv   ebx
1000310f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10003114:	74 0d                	je     10003123 <ssfn_render+0x1db4>
10003116:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000311d:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10003121:	eb 15                	jmp    10003138 <ssfn_render+0x1dc9>
10003123:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
1000312a:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
1000312e:	eb 08                	jmp    10003138 <ssfn_render+0x1dc9>
10003130:	83 c0 08             	add    eax,0x8
10003133:	e9 00 ff ff ff       	jmp    10003038 <ssfn_render+0x1cc9>
10003138:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
1000313c:	e9 5d fe ff ff       	jmp    10002f9e <ssfn_render+0x1c2f>
10003141:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
10003148:	eb 73                	jmp    100031bd <ssfn_render+0x1e4e>
1000314a:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10003155:	e9 50 e4 ff ff       	jmp    100015aa <ssfn_render+0x23b>
1000315a:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10003161:	57                   	push   edi
10003162:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10003169:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10003170:	e8 5a d7 ff ff       	call   100008cf <_ssfn_c>
10003175:	5f                   	pop    edi
10003176:	85 c0                	test   eax,eax
10003178:	0f 84 25 e4 ff ff    	je     100015a3 <ssfn_render+0x234>
1000317e:	e9 a2 e4 ff ff       	jmp    10001625 <ssfn_render+0x2b6>
10003183:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10003186:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
1000318a:	75 0c                	jne    10003198 <ssfn_render+0x1e29>
1000318c:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10003193:	e9 3b e4 ff ff       	jmp    100015d3 <ssfn_render+0x264>
10003198:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
1000319f:	57                   	push   edi
100031a0:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100031a7:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100031ae:	e8 1c d7 ff ff       	call   100008cf <_ssfn_c>
100031b3:	59                   	pop    ecx
100031b4:	85 c0                	test   eax,eax
100031b6:	74 d4                	je     1000318c <ssfn_render+0x1e1d>
100031b8:	e9 68 e4 ff ff       	jmp    10001625 <ssfn_render+0x2b6>
100031bd:	81 c4 dc 05 01 00    	add    esp,0x105dc
100031c3:	89 c8                	mov    eax,ecx
100031c5:	5b                   	pop    ebx
100031c6:	5e                   	pop    esi
100031c7:	5f                   	pop    edi
100031c8:	5d                   	pop    ebp
100031c9:	c3                   	ret    

100031ca <ssfn_bbox>:
100031ca:	55                   	push   ebp
100031cb:	57                   	push   edi
100031cc:	56                   	push   esi
100031cd:	53                   	push   ebx
100031ce:	83 ec 3c             	sub    esp,0x3c
100031d1:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
100031d6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
100031da:	0f 94 c0             	sete   al
100031dd:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
100031e2:	0f 94 c2             	sete   dl
100031e5:	09 d0                	or     eax,edx
100031e7:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
100031ec:	0f 94 c2             	sete   dl
100031ef:	09 d0                	or     eax,edx
100031f1:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
100031f6:	0f 94 c2             	sete   dl
100031f9:	09 d0                	or     eax,edx
100031fb:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003200:	0f 94 c2             	sete   dl
10003203:	08 d0                	or     al,dl
10003205:	0f 85 7c 01 00 00    	jne    10003387 <ssfn_bbox+0x1bd>
1000320b:	85 db                	test   ebx,ebx
1000320d:	0f 84 74 01 00 00    	je     10003387 <ssfn_bbox+0x1bd>
10003213:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003217:	31 f6                	xor    esi,esi
10003219:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000321f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003223:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003229:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
1000322d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003233:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003237:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000323d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10003241:	80 38 00             	cmp    BYTE PTR [eax],0x0
10003244:	0f 84 42 01 00 00    	je     1000338c <ssfn_bbox+0x1c2>
1000324a:	8d 54 24 18          	lea    edx,[esp+0x18]
1000324e:	b9 06 00 00 00       	mov    ecx,0x6
10003253:	89 d7                	mov    edi,edx
10003255:	89 f0                	mov    eax,esi
10003257:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10003261:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003263:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
1000326b:	31 ff                	xor    edi,edi
1000326d:	bd 01 00 00 00       	mov    ebp,0x1
10003272:	50                   	push   eax
10003273:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10003277:	8d 44 24 20          	lea    eax,[esp+0x20]
1000327b:	50                   	push   eax
1000327c:	53                   	push   ebx
1000327d:	e8 fc ff ff ff       	call   1000327e <ssfn_bbox+0xb4>	1000327e: R_386_PC32	ssfn_render
10003282:	83 c4 10             	add    esp,0x10
10003285:	89 c6                	mov    esi,eax
10003287:	85 c0                	test   eax,eax
10003289:	74 6f                	je     100032fa <ssfn_bbox+0x130>
1000328b:	0f 88 fb 00 00 00    	js     1000338c <ssfn_bbox+0x1c2>
10003291:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
10003297:	85 c0                	test   eax,eax
10003299:	0f 84 ed 00 00 00    	je     1000338c <ssfn_bbox+0x1c2>
1000329f:	85 ed                	test   ebp,ebp
100032a1:	74 0b                	je     100032ae <ssfn_bbox+0xe4>
100032a3:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
100032a9:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
100032ae:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100032b2:	74 12                	je     100032c6 <ssfn_bbox+0xfc>
100032b4:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
100032ba:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100032be:	7d 2f                	jge    100032ef <ssfn_bbox+0x125>
100032c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100032c4:	eb 29                	jmp    100032ef <ssfn_bbox+0x125>
100032c6:	0f b7 08             	movzx  ecx,WORD PTR [eax]
100032c9:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
100032ce:	39 cd                	cmp    ebp,ecx
100032d0:	7d 05                	jge    100032d7 <ssfn_bbox+0x10d>
100032d2:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
100032d7:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
100032db:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
100032e0:	84 d2                	test   dl,dl
100032e2:	75 04                	jne    100032e8 <ssfn_bbox+0x11e>
100032e4:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
100032e8:	01 ca                	add    edx,ecx
100032ea:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
100032ef:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
100032f3:	31 ed                	xor    ebp,ebp
100032f5:	e9 78 ff ff ff       	jmp    10003272 <ssfn_bbox+0xa8>
100032fa:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10003301:	74 23                	je     10003326 <ssfn_bbox+0x15c>
10003303:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003306:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
1000330a:	75 1a                	jne    10003326 <ssfn_bbox+0x15c>
1000330c:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
10003312:	b9 04 00 00 00       	mov    ecx,0x4
10003317:	99                   	cdq    
10003318:	f7 f9                	idiv   ecx
1000331a:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
1000331f:	29 f8                	sub    eax,edi
10003321:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
10003326:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
1000332c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003330:	74 29                	je     1000335b <ssfn_bbox+0x191>
10003332:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003337:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000333b:	89 01                	mov    DWORD PTR [ecx],eax
1000333d:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003341:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
10003347:	89 01                	mov    DWORD PTR [ecx],eax
10003349:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000334d:	89 38                	mov    DWORD PTR [eax],edi
1000334f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003353:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10003357:	89 38                	mov    DWORD PTR [eax],edi
10003359:	eb 31                	jmp    1000338c <ssfn_bbox+0x1c2>
1000335b:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
10003360:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
10003364:	89 07                	mov    DWORD PTR [edi],eax
10003366:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
1000336b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
1000336f:	89 07                	mov    DWORD PTR [edi],eax
10003371:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003375:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000337b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000337f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003385:	eb 05                	jmp    1000338c <ssfn_bbox+0x1c2>
10003387:	be fc ff ff ff       	mov    esi,0xfffffffc
1000338c:	83 c4 3c             	add    esp,0x3c
1000338f:	89 f0                	mov    eax,esi
10003391:	5b                   	pop    ebx
10003392:	5e                   	pop    esi
10003393:	5f                   	pop    edi
10003394:	5d                   	pop    ebp
10003395:	c3                   	ret    

10003396 <ssfn_text>:
10003396:	55                   	push   ebp
10003397:	57                   	push   edi
10003398:	56                   	push   esi
10003399:	53                   	push   ebx
1000339a:	83 ec 1c             	sub    esp,0x1c
1000339d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100033a1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
100033a5:	85 f6                	test   esi,esi
100033a7:	0f 84 b2 00 00 00    	je     1000345f <ssfn_text+0xc9>
100033ad:	85 ed                	test   ebp,ebp
100033af:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
100033b4:	0f 84 a5 00 00 00    	je     1000345f <ssfn_text+0xc9>
100033ba:	83 ec 0c             	sub    esp,0xc
100033bd:	6a 18                	push   0x18
100033bf:	e8 fc ff ff ff       	call   100033c0 <ssfn_text+0x2a>	100033c0: R_386_PC32	malloc
100033c4:	83 c4 10             	add    esp,0x10
100033c7:	89 c3                	mov    ebx,eax
100033c9:	85 c0                	test   eax,eax
100033cb:	0f 84 8e 00 00 00    	je     1000345f <ssfn_text+0xc9>
100033d1:	31 c0                	xor    eax,eax
100033d3:	b9 06 00 00 00       	mov    ecx,0x6
100033d8:	89 df                	mov    edi,ebx
100033da:	80 3e 00             	cmp    BYTE PTR [esi],0x0
100033dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100033df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100033e3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100033e6:	74 79                	je     10003461 <ssfn_text+0xcb>
100033e8:	8d 43 0c             	lea    eax,[ebx+0xc]
100033eb:	52                   	push   edx
100033ec:	52                   	push   edx
100033ed:	50                   	push   eax
100033ee:	8d 43 0a             	lea    eax,[ebx+0xa]
100033f1:	50                   	push   eax
100033f2:	8d 43 06             	lea    eax,[ebx+0x6]
100033f5:	50                   	push   eax
100033f6:	8d 43 04             	lea    eax,[ebx+0x4]
100033f9:	50                   	push   eax
100033fa:	56                   	push   esi
100033fb:	55                   	push   ebp
100033fc:	e8 fc ff ff ff       	call   100033fd <ssfn_text+0x67>	100033fd: R_386_PC32	ssfn_bbox
10003401:	83 c4 20             	add    esp,0x20
10003404:	85 c0                	test   eax,eax
10003406:	75 59                	jne    10003461 <ssfn_text+0xcb>
10003408:	83 ec 0c             	sub    esp,0xc
1000340b:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
1000340f:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10003413:	0f af c8             	imul   ecx,eax
10003416:	c1 e1 02             	shl    ecx,0x2
10003419:	51                   	push   ecx
1000341a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000341e:	e8 fc ff ff ff       	call   1000341f <ssfn_text+0x89>	1000341f: R_386_PC32	malloc
10003423:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003427:	89 c7                	mov    edi,eax
10003429:	89 03                	mov    DWORD PTR [ebx],eax
1000342b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
1000342f:	83 c4 10             	add    esp,0x10
10003432:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003434:	50                   	push   eax
10003435:	56                   	push   esi
10003436:	53                   	push   ebx
10003437:	55                   	push   ebp
10003438:	e8 fc ff ff ff       	call   10003439 <ssfn_text+0xa3>	10003439: R_386_PC32	ssfn_render
1000343d:	83 c4 10             	add    esp,0x10
10003440:	85 c0                	test   eax,eax
10003442:	7e 04                	jle    10003448 <ssfn_text+0xb2>
10003444:	01 c6                	add    esi,eax
10003446:	eb ec                	jmp    10003434 <ssfn_text+0x9e>
10003448:	74 17                	je     10003461 <ssfn_text+0xcb>
1000344a:	83 ec 0c             	sub    esp,0xc
1000344d:	ff 33                	push   DWORD PTR [ebx]
1000344f:	e8 fc ff ff ff       	call   10003450 <ssfn_text+0xba>	10003450: R_386_PC32	free
10003454:	89 1c 24             	mov    DWORD PTR [esp],ebx
10003457:	e8 fc ff ff ff       	call   10003458 <ssfn_text+0xc2>	10003458: R_386_PC32	free
1000345c:	83 c4 10             	add    esp,0x10
1000345f:	31 db                	xor    ebx,ebx
10003461:	83 c4 1c             	add    esp,0x1c
10003464:	89 d8                	mov    eax,ebx
10003466:	5b                   	pop    ebx
10003467:	5e                   	pop    esi
10003468:	5f                   	pop    edi
10003469:	5d                   	pop    ebp
1000346a:	c3                   	ret    
1000346b:	90                   	nop

1000346c <NIContext::drvPutpixel4(int, int, unsigned int)>:
1000346c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003470:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003476:	8b 10                	mov    edx,DWORD PTR [eax]
10003478:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000347c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
1000347f:	90                   	nop

10003480 <NIContext::drvDarken4(int, int, int)>:
10003480:	55                   	push   ebp
10003481:	57                   	push   edi
10003482:	56                   	push   esi
10003483:	53                   	push   ebx
10003484:	83 ec 20             	sub    esp,0x20
10003487:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
1000348b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
1000348f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10003493:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
10003497:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
1000349d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100034a1:	8b 10                	mov    edx,DWORD PTR [eax]
100034a3:	56                   	push   esi
100034a4:	53                   	push   ebx
100034a5:	50                   	push   eax
100034a6:	ff 52 34             	call   DWORD PTR [edx+0x34]
100034a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100034ad:	89 c2                	mov    edx,eax
100034af:	0f b6 ec             	movzx  ebp,ah
100034b2:	c1 ea 10             	shr    edx,0x10
100034b5:	0f af e9             	imul   ebp,ecx
100034b8:	0f b6 d2             	movzx  edx,dl
100034bb:	0f b6 c0             	movzx  eax,al
100034be:	0f af d1             	imul   edx,ecx
100034c1:	0f af c1             	imul   eax,ecx
100034c4:	c1 ea 07             	shr    edx,0x7
100034c7:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
100034cd:	c1 e8 07             	shr    eax,0x7
100034d0:	8b 39                	mov    edi,DWORD PTR [ecx]
100034d2:	c1 e2 10             	shl    edx,0x10
100034d5:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
100034d9:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
100034dd:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
100034e1:	c1 ed 07             	shr    ebp,0x7
100034e4:	c1 e5 08             	shl    ebp,0x8
100034e7:	09 ea                	or     edx,ebp
100034e9:	09 c2                	or     edx,eax
100034eb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
100034ef:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
100034f2:	83 c4 2c             	add    esp,0x2c
100034f5:	5b                   	pop    ebx
100034f6:	5e                   	pop    esi
100034f7:	5f                   	pop    edi
100034f8:	5d                   	pop    ebp
100034f9:	ff e0                	jmp    eax
100034fb:	90                   	nop

100034fc <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
100034fc:	55                   	push   ebp
100034fd:	b9 00 40 00 00       	mov    ecx,0x4000
10003502:	57                   	push   edi
10003503:	b0 ff                	mov    al,0xff
10003505:	56                   	push   esi
10003506:	53                   	push   ebx
10003507:	83 ec 3c             	sub    esp,0x3c
1000350a:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
1000350e:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10003512:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10003515:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
10003519:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000351b:	85 db                	test   ebx,ebx
1000351d:	75 10                	jne    1000352f <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
1000351f:	83 ec 0c             	sub    esp,0xc
10003522:	68 20 51 00 10       	push   0x10005120	10003523: R_386_32	.text
10003527:	e8 fc ff ff ff       	call   10003528 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	10003528: R_386_PC32	KePanic(char const*)
1000352c:	83 c4 10             	add    esp,0x10
1000352f:	50                   	push   eax
10003530:	50                   	push   eax
10003531:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003535:	50                   	push   eax
10003536:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000353a:	50                   	push   eax
1000353b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000353f:	50                   	push   eax
10003540:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003544:	50                   	push   eax
10003545:	56                   	push   esi
10003546:	68 00 00 00 00       	push   0x0	10003547: R_386_32	ssfn_ctx
1000354b:	e8 fc ff ff ff       	call   1000354c <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	1000354c: R_386_PC32	ssfn_bbox
10003550:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003553:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
1000355b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000355f:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
10003567:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000356b:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
10003570:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10003574:	0d 00 00 00 ff       	or     eax,0xff000000
10003579:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000357d:	83 c4 1c             	add    esp,0x1c
10003580:	56                   	push   esi
10003581:	8d 44 24 20          	lea    eax,[esp+0x20]
10003585:	50                   	push   eax
10003586:	68 00 00 00 00       	push   0x0	10003587: R_386_32	ssfn_ctx
1000358b:	e8 fc ff ff ff       	call   1000358c <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	1000358c: R_386_PC32	ssfn_render
10003590:	83 c4 10             	add    esp,0x10
10003593:	89 03                	mov    DWORD PTR [ebx],eax
10003595:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
10003599:	31 db                	xor    ebx,ebx
1000359b:	89 f0                	mov    eax,esi
1000359d:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
100035a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100035a5:	7e 3f                	jle    100035e6 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
100035a7:	31 ff                	xor    edi,edi
100035a9:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100035ae:	39 f8                	cmp    eax,edi
100035b0:	7e 2c                	jle    100035de <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
100035b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100035b5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
100035b8:	83 f8 ff             	cmp    eax,0xffffffff
100035bb:	74 1d                	je     100035da <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
100035bd:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
100035c3:	25 ff ff ff 00       	and    eax,0xffffff
100035c8:	8b 0a                	mov    ecx,DWORD PTR [edx]
100035ca:	50                   	push   eax
100035cb:	56                   	push   esi
100035cc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
100035d0:	01 f8                	add    eax,edi
100035d2:	50                   	push   eax
100035d3:	52                   	push   edx
100035d4:	ff 51 24             	call   DWORD PTR [ecx+0x24]
100035d7:	83 c4 10             	add    esp,0x10
100035da:	43                   	inc    ebx
100035db:	47                   	inc    edi
100035dc:	eb cb                	jmp    100035a9 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
100035de:	29 c3                	sub    ebx,eax
100035e0:	46                   	inc    esi
100035e1:	83 c3 40             	add    ebx,0x40
100035e4:	eb b5                	jmp    1000359b <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
100035e6:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100035eb:	83 c4 3c             	add    esp,0x3c
100035ee:	5b                   	pop    ebx
100035ef:	5e                   	pop    esi
100035f0:	5f                   	pop    edi
100035f1:	5d                   	pop    ebp
100035f2:	c3                   	ret    
100035f3:	90                   	nop

100035f4 <NIContext::~NIContext()>:
100035f4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	100035f8: R_386_32	ssfn_ctx
100035fc:	e9 00 db ff ff       	jmp    10001101 <ssfn_free>
10003601:	90                   	nop

10003602 <NIContext::NIContext(Video*, int, int, int, int)>:
10003602:	55                   	push   ebp
10003603:	ba 00 00 00 00       	mov    edx,0x0	10003604: R_386_32	ssfn_ctx
10003608:	57                   	push   edi
10003609:	b9 72 3d 00 00       	mov    ecx,0x3d72
1000360e:	56                   	push   esi
1000360f:	89 d7                	mov    edi,edx
10003611:	53                   	push   ebx
10003612:	81 ec 48 02 00 00    	sub    esp,0x248
10003618:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
1000361f:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
10003626:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
1000362c:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
10003633:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
10003639:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
10003640:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
10003646:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
1000364d:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
10003653:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
1000365a:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
10003660:	31 c0                	xor    eax,eax
10003662:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003664:	68 00 40 00 00       	push   0x4000
10003669:	e8 fc ff ff ff       	call   1000366a <NIContext::NIContext(Video*, int, int, int, int)+0x68>	1000366a: R_386_PC32	malloc
1000366e:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
10003678:	89 03                	mov    DWORD PTR [ebx],eax
1000367a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10003681:	e8 fc ff ff ff       	call   10003682 <NIContext::NIContext(Video*, int, int, int, int)+0x80>	10003682: R_386_PC32	malloc
10003686:	83 c4 0c             	add    esp,0xc
10003689:	89 c6                	mov    esi,eax
1000368b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000368d: R_386_32	kernelProcess
10003691:	68 39 51 00 10       	push   0x10005139	10003692: R_386_32	.text
10003696:	50                   	push   eax
10003697:	e8 fc ff ff ff       	call   10003698 <NIContext::NIContext(Video*, int, int, int, int)+0x96>	10003698: R_386_PC32	Directory::Directory(char const*, Process*)
1000369c:	83 c4 10             	add    esp,0x10
1000369f:	85 f6                	test   esi,esi
100036a1:	75 10                	jne    100036b3 <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
100036a3:	83 ec 0c             	sub    esp,0xc
100036a6:	68 4d 51 00 10       	push   0x1000514d	100036a7: R_386_32	.text
100036ab:	e8 fc ff ff ff       	call   100036ac <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	100036ac: R_386_PC32	KePanic(char const*)
100036b0:	83 c4 10             	add    esp,0x10
100036b3:	83 ec 0c             	sub    esp,0xc
100036b6:	56                   	push   esi
100036b7:	e8 fc ff ff ff       	call   100036b8 <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	100036b8: R_386_PC32	Directory::open()
100036bc:	83 c4 10             	add    esp,0x10
100036bf:	85 c0                	test   eax,eax
100036c1:	75 e0                	jne    100036a3 <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
100036c3:	83 ec 0c             	sub    esp,0xc
100036c6:	8b 06                	mov    eax,DWORD PTR [esi]
100036c8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
100036cc:	51                   	push   ecx
100036cd:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
100036d4:	52                   	push   edx
100036d5:	6a 00                	push   0x0
100036d7:	68 10 01 00 00       	push   0x110
100036dc:	56                   	push   esi
100036dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100036e0:	83 c4 20             	add    esp,0x20
100036e3:	85 c0                	test   eax,eax
100036e5:	0f 85 a0 01 00 00    	jne    1000388b <NIContext::NIContext(Video*, int, int, int, int)+0x289>
100036eb:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
100036f3:	0f 85 92 01 00 00    	jne    1000388b <NIContext::NIContext(Video*, int, int, int, int)+0x289>
100036f9:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
10003700:	83 c9 ff             	or     ecx,0xffffffff
10003703:	83 ec 0c             	sub    esp,0xc
10003706:	89 ef                	mov    edi,ebp
10003708:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
1000370a:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
10003710:	89 ca                	mov    edx,ecx
10003712:	f7 d2                	not    edx
10003714:	52                   	push   edx
10003715:	e8 fc ff ff ff       	call   10003716 <NIContext::NIContext(Video*, int, int, int, int)+0x114>	10003716: R_386_PC32	malloc
1000371a:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
1000371e:	47                   	inc    edi
1000371f:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
10003725:	5a                   	pop    edx
10003726:	59                   	pop    ecx
10003727:	55                   	push   ebp
10003728:	50                   	push   eax
10003729:	e8 fc ff ff ff       	call   1000372a <NIContext::NIContext(Video*, int, int, int, int)+0x128>	1000372a: R_386_PC32	strcpy
1000372e:	5f                   	pop    edi
1000372f:	58                   	pop    eax
10003730:	68 68 51 00 10       	push   0x10005168	10003731: R_386_32	.text
10003735:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
10003739:	57                   	push   edi
1000373a:	e8 fc ff ff ff       	call   1000373b <NIContext::NIContext(Video*, int, int, int, int)+0x139>	1000373b: R_386_PC32	strcpy
1000373f:	58                   	pop    eax
10003740:	5a                   	pop    edx
10003741:	55                   	push   ebp
10003742:	57                   	push   edi
10003743:	e8 fc ff ff ff       	call   10003744 <NIContext::NIContext(Video*, int, int, int, int)+0x142>	10003744: R_386_PC32	strcat
10003748:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
1000374f:	e8 fc ff ff ff       	call   10003750 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	10003750: R_386_PC32	malloc
10003754:	83 c4 0c             	add    esp,0xc
10003757:	89 c5                	mov    ebp,eax
10003759:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000375b: R_386_32	kernelProcess
1000375f:	57                   	push   edi
10003760:	50                   	push   eax
10003761:	e8 fc ff ff ff       	call   10003762 <NIContext::NIContext(Video*, int, int, int, int)+0x160>	10003762: R_386_PC32	File::File(char const*, Process*)
10003766:	83 c4 10             	add    esp,0x10
10003769:	85 ed                	test   ebp,ebp
1000376b:	0f 84 52 ff ff ff    	je     100036c3 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
10003771:	50                   	push   eax
10003772:	50                   	push   eax
10003773:	6a 01                	push   0x1
10003775:	55                   	push   ebp
10003776:	e8 fc ff ff ff       	call   10003777 <NIContext::NIContext(Video*, int, int, int, int)+0x175>	10003777: R_386_PC32	File::open(FileOpenMode)
1000377b:	83 c4 10             	add    esp,0x10
1000377e:	85 c0                	test   eax,eax
10003780:	74 0c                	je     1000378e <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
10003782:	83 ec 0c             	sub    esp,0xc
10003785:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003788:	55                   	push   ebp
10003789:	e9 b4 00 00 00       	jmp    10003842 <NIContext::NIContext(Video*, int, int, int, int)+0x240>
1000378e:	50                   	push   eax
1000378f:	8d 44 24 17          	lea    eax,[esp+0x17]
10003793:	50                   	push   eax
10003794:	8d 44 24 20          	lea    eax,[esp+0x20]
10003798:	50                   	push   eax
10003799:	55                   	push   ebp
1000379a:	e8 fc ff ff ff       	call   1000379b <NIContext::NIContext(Video*, int, int, int, int)+0x199>	1000379b: R_386_PC32	File::stat(unsigned long long*, bool*)
1000379f:	83 c4 10             	add    esp,0x10
100037a2:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
100037a7:	74 0e                	je     100037b7 <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
100037a9:	83 ec 0c             	sub    esp,0xc
100037ac:	55                   	push   ebp
100037ad:	e8 fc ff ff ff       	call   100037ae <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	100037ae: R_386_PC32	File::close()
100037b2:	e9 85 00 00 00       	jmp    1000383c <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
100037b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100037bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100037bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100037c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100037c7:	83 ec 0c             	sub    esp,0xc
100037ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100037ce:	e8 fc ff ff ff       	call   100037cf <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	100037cf: R_386_PC32	malloc
100037d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100037d7:	58                   	pop    eax
100037d8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037db:	8d 54 24 20          	lea    edx,[esp+0x20]
100037df:	52                   	push   edx
100037e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100037e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037ec:	55                   	push   ebp
100037ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100037f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100037f4:	83 c4 1c             	add    esp,0x1c
100037f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037ff:	68 7d 51 00 10       	push   0x1000517d	10003800: R_386_32	.text
10003804:	e8 fc ff ff ff       	call   10003805 <NIContext::NIContext(Video*, int, int, int, int)+0x203>	10003805: R_386_PC32	Dbg::kprintf(char const*, ...)
10003809:	83 c4 10             	add    esp,0x10
1000380c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003810:	85 c0                	test   eax,eax
10003812:	75 15                	jne    10003829 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003814:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003818:	89 c1                	mov    ecx,eax
1000381a:	c1 f9 1f             	sar    ecx,0x1f
1000381d:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10003821:	75 06                	jne    10003829 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003823:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10003827:	74 24                	je     1000384d <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
10003829:	83 ec 0c             	sub    esp,0xc
1000382c:	55                   	push   ebp
1000382d:	e8 fc ff ff ff       	call   1000382e <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	1000382e: R_386_PC32	File::close()
10003832:	58                   	pop    eax
10003833:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10003837:	e8 fc ff ff ff       	call   10003838 <NIContext::NIContext(Video*, int, int, int, int)+0x236>	10003838: R_386_PC32	free
1000383c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000383f:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003842:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003845:	83 c4 10             	add    esp,0x10
10003848:	e9 76 fe ff ff       	jmp    100036c3 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
1000384d:	50                   	push   eax
1000384e:	50                   	push   eax
1000384f:	57                   	push   edi
10003850:	68 91 51 00 10       	push   0x10005191	10003851: R_386_32	.text
10003855:	e8 fc ff ff ff       	call   10003856 <NIContext::NIContext(Video*, int, int, int, int)+0x254>	10003856: R_386_PC32	Dbg::kprintf(char const*, ...)
1000385a:	5a                   	pop    edx
1000385b:	59                   	pop    ecx
1000385c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10003860:	68 00 00 00 00       	push   0x0	10003861: R_386_32	ssfn_ctx
10003865:	e8 fc ff ff ff       	call   10003866 <NIContext::NIContext(Video*, int, int, int, int)+0x264>	10003866: R_386_PC32	ssfn_load
1000386a:	5b                   	pop    ebx
1000386b:	5f                   	pop    edi
1000386c:	50                   	push   eax
1000386d:	68 a2 51 00 10       	push   0x100051a2	1000386e: R_386_32	.text
10003872:	e8 fc ff ff ff       	call   10003873 <NIContext::NIContext(Video*, int, int, int, int)+0x271>	10003873: R_386_PC32	Dbg::kprintf(char const*, ...)
10003877:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000387a:	e8 fc ff ff ff       	call   1000387b <NIContext::NIContext(Video*, int, int, int, int)+0x279>	1000387b: R_386_PC32	File::close()
1000387f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003882:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003885:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003888:	83 c4 10             	add    esp,0x10
1000388b:	83 ec 0c             	sub    esp,0xc
1000388e:	56                   	push   esi
1000388f:	e8 fc ff ff ff       	call   10003890 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	10003890: R_386_PC32	Directory::close()
10003894:	8b 06                	mov    eax,DWORD PTR [esi]
10003896:	89 34 24             	mov    DWORD PTR [esp],esi
10003899:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000389c:	b8 00 00 00 00       	mov    eax,0x0	1000389d: R_386_32	ssfn_ctx
100038a1:	e8 f7 cb ff ff       	call   1000049d <_ssfn_fc.part.1>
100038a6:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	100038a8: R_386_32	ssfn_ctx
100038b0:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	100038b2: R_386_32	ssfn_ctx
100038ba:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	100038bc: R_386_32	ssfn_ctx
100038c4:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	100038c6: R_386_32	ssfn_ctx
100038ce:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	100038d0: R_386_32	ssfn_ctx
100038d8:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	100038da: R_386_32	ssfn_ctx
100038e2:	81 c4 4c 02 00 00    	add    esp,0x24c
100038e8:	5b                   	pop    ebx
100038e9:	5e                   	pop    esi
100038ea:	5f                   	pop    edi
100038eb:	5d                   	pop    ebp
100038ec:	c3                   	ret    
100038ed:	90                   	nop

100038ee <NiLoadCursors()>:
100038ee:	55                   	push   ebp
100038ef:	57                   	push   edi
100038f0:	56                   	push   esi
100038f1:	53                   	push   ebx
100038f2:	83 ec 38             	sub    esp,0x38
100038f5:	68 14 01 00 00       	push   0x114
100038fa:	e8 fc ff ff ff       	call   100038fb <NiLoadCursors()+0xd>	100038fb: R_386_PC32	malloc
100038ff:	83 c4 0c             	add    esp,0xc
10003902:	89 c5                	mov    ebp,eax
10003904:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10003906: R_386_32	kernelProcess
1000390a:	68 5c 54 00 10       	push   0x1000545c	1000390b: R_386_32	.text
1000390f:	50                   	push   eax
10003910:	e8 fc ff ff ff       	call   10003911 <NiLoadCursors()+0x23>	10003911: R_386_PC32	File::File(char const*, Process*)
10003915:	58                   	pop    eax
10003916:	5a                   	pop    edx
10003917:	6a 01                	push   0x1
10003919:	55                   	push   ebp
1000391a:	e8 fc ff ff ff       	call   1000391b <NiLoadCursors()+0x2d>	1000391b: R_386_PC32	File::open(FileOpenMode)
1000391f:	83 c4 10             	add    esp,0x10
10003922:	85 c0                	test   eax,eax
10003924:	74 0a                	je     10003930 <NiLoadCursors()+0x42>
10003926:	83 ec 0c             	sub    esp,0xc
10003929:	68 7b 54 00 10       	push   0x1000547b	1000392a: R_386_32	.text
1000392e:	eb 4c                	jmp    1000397c <NiLoadCursors()+0x8e>
10003930:	53                   	push   ebx
10003931:	8d 44 24 17          	lea    eax,[esp+0x17]
10003935:	50                   	push   eax
10003936:	8d 44 24 20          	lea    eax,[esp+0x20]
1000393a:	50                   	push   eax
1000393b:	55                   	push   ebp
1000393c:	e8 fc ff ff ff       	call   1000393d <NiLoadCursors()+0x4f>	1000393d: R_386_PC32	File::stat(unsigned long long*, bool*)
10003941:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10003945:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10003949:	89 34 24             	mov    DWORD PTR [esp],esi
1000394c:	e8 fc ff ff ff       	call   1000394d <NiLoadCursors()+0x5f>	1000394d: R_386_PC32	malloc
10003951:	89 c3                	mov    ebx,eax
10003953:	58                   	pop    eax
10003954:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003957:	8d 54 24 20          	lea    edx,[esp+0x20]
1000395b:	52                   	push   edx
1000395c:	53                   	push   ebx
1000395d:	57                   	push   edi
1000395e:	56                   	push   esi
1000395f:	55                   	push   ebp
10003960:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003963:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003967:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
1000396b:	83 c4 20             	add    esp,0x20
1000396e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10003972:	74 12                	je     10003986 <NiLoadCursors()+0x98>
10003974:	83 ec 0c             	sub    esp,0xc
10003977:	68 8f 54 00 10       	push   0x1000548f	10003978: R_386_32	.text
1000397c:	e8 fc ff ff ff       	call   1000397d <NiLoadCursors()+0x8f>	1000397d: R_386_PC32	Dbg::kprintf(char const*, ...)
10003981:	e9 3d 01 00 00       	jmp    10003ac3 <NiLoadCursors()+0x1d5>
10003986:	6a 00                	push   0x0
10003988:	31 ed                	xor    ebp,ebp
1000398a:	68 04 01 00 00       	push   0x104
1000398f:	52                   	push   edx
10003990:	50                   	push   eax
10003991:	e8 fc ff ff ff       	call   10003992 <NiLoadCursors()+0xa4>	10003992: R_386_PC32	__udivdi3
10003996:	5a                   	pop    edx
10003997:	59                   	pop    ecx
10003998:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000399c:	50                   	push   eax
1000399d:	68 a3 54 00 10       	push   0x100054a3	1000399e: R_386_32	.text
100039a2:	e8 fc ff ff ff       	call   100039a3 <NiLoadCursors()+0xb5>	100039a3: R_386_PC32	Dbg::kprintf(char const*, ...)
100039a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
100039aa:	e8 fc ff ff ff       	call   100039ab <NiLoadCursors()+0xbd>	100039ab: R_386_PC32	Dbg::kprintf(char const*, ...)
100039af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100039b3:	8d 04 83             	lea    eax,[ebx+eax*4]
100039b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100039ba:	83 c4 10             	add    esp,0x10
100039bd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
100039c1:	0f 8d f3 00 00 00    	jge    10003aba <NiLoadCursors()+0x1cc>
100039c7:	8d 34 ab             	lea    esi,[ebx+ebp*4]
100039ca:	50                   	push   eax
100039cb:	6a 04                	push   0x4
100039cd:	68 b0 54 00 10       	push   0x100054b0	100039ce: R_386_32	.text
100039d2:	56                   	push   esi
100039d3:	e8 fc ff ff ff       	call   100039d4 <NiLoadCursors()+0xe6>	100039d4: R_386_PC32	memcmp
100039d8:	83 c4 10             	add    esp,0x10
100039db:	85 c0                	test   eax,eax
100039dd:	0f 84 b8 00 00 00    	je     10003a9b <NiLoadCursors()+0x1ad>
100039e3:	50                   	push   eax
100039e4:	6a 04                	push   0x4
100039e6:	68 b5 54 00 10       	push   0x100054b5	100039e7: R_386_32	.text
100039eb:	56                   	push   esi
100039ec:	e8 fc ff ff ff       	call   100039ed <NiLoadCursors()+0xff>	100039ed: R_386_PC32	memcmp
100039f1:	83 c4 10             	add    esp,0x10
100039f4:	85 c0                	test   eax,eax
100039f6:	74 7b                	je     10003a73 <NiLoadCursors()+0x185>
100039f8:	50                   	push   eax
100039f9:	6a 04                	push   0x4
100039fb:	68 ba 54 00 10       	push   0x100054ba	100039fc: R_386_32	.text
10003a00:	56                   	push   esi
10003a01:	e8 fc ff ff ff       	call   10003a02 <NiLoadCursors()+0x114>	10003a02: R_386_PC32	memcmp
10003a06:	83 c4 10             	add    esp,0x10
10003a09:	85 c0                	test   eax,eax
10003a0b:	74 6d                	je     10003a7a <NiLoadCursors()+0x18c>
10003a0d:	57                   	push   edi
10003a0e:	6a 04                	push   0x4
10003a10:	68 bf 54 00 10       	push   0x100054bf	10003a11: R_386_32	.text
10003a15:	56                   	push   esi
10003a16:	e8 fc ff ff ff       	call   10003a17 <NiLoadCursors()+0x129>	10003a17: R_386_PC32	memcmp
10003a1b:	83 c4 10             	add    esp,0x10
10003a1e:	85 c0                	test   eax,eax
10003a20:	74 5f                	je     10003a81 <NiLoadCursors()+0x193>
10003a22:	51                   	push   ecx
10003a23:	6a 04                	push   0x4
10003a25:	68 c4 54 00 10       	push   0x100054c4	10003a26: R_386_32	.text
10003a2a:	56                   	push   esi
10003a2b:	e8 fc ff ff ff       	call   10003a2c <NiLoadCursors()+0x13e>	10003a2c: R_386_PC32	memcmp
10003a30:	83 c4 10             	add    esp,0x10
10003a33:	85 c0                	test   eax,eax
10003a35:	74 51                	je     10003a88 <NiLoadCursors()+0x19a>
10003a37:	52                   	push   edx
10003a38:	6a 04                	push   0x4
10003a3a:	68 c9 54 00 10       	push   0x100054c9	10003a3b: R_386_32	.text
10003a3f:	56                   	push   esi
10003a40:	e8 fc ff ff ff       	call   10003a41 <NiLoadCursors()+0x153>	10003a41: R_386_PC32	memcmp
10003a45:	83 c4 10             	add    esp,0x10
10003a48:	85 c0                	test   eax,eax
10003a4a:	74 43                	je     10003a8f <NiLoadCursors()+0x1a1>
10003a4c:	50                   	push   eax
10003a4d:	6a 04                	push   0x4
10003a4f:	68 ce 54 00 10       	push   0x100054ce	10003a50: R_386_32	.text
10003a54:	56                   	push   esi
10003a55:	e8 fc ff ff ff       	call   10003a56 <NiLoadCursors()+0x168>	10003a56: R_386_PC32	memcmp
10003a5a:	83 c4 10             	add    esp,0x10
10003a5d:	85 c0                	test   eax,eax
10003a5f:	74 35                	je     10003a96 <NiLoadCursors()+0x1a8>
10003a61:	83 ec 0c             	sub    esp,0xc
10003a64:	68 d3 54 00 10       	push   0x100054d3	10003a65: R_386_32	.text
10003a69:	e8 fc ff ff ff       	call   10003a6a <NiLoadCursors()+0x17c>	10003a6a: R_386_PC32	Dbg::kprintf(char const*, ...)
10003a6e:	83 c4 10             	add    esp,0x10
10003a71:	eb 47                	jmp    10003aba <NiLoadCursors()+0x1cc>
10003a73:	b8 00 02 00 00       	mov    eax,0x200
10003a78:	eb 21                	jmp    10003a9b <NiLoadCursors()+0x1ad>
10003a7a:	b8 00 03 00 00       	mov    eax,0x300
10003a7f:	eb 1a                	jmp    10003a9b <NiLoadCursors()+0x1ad>
10003a81:	b8 00 01 00 00       	mov    eax,0x100
10003a86:	eb 13                	jmp    10003a9b <NiLoadCursors()+0x1ad>
10003a88:	b8 00 04 00 00       	mov    eax,0x400
10003a8d:	eb 0c                	jmp    10003a9b <NiLoadCursors()+0x1ad>
10003a8f:	b8 00 05 00 00       	mov    eax,0x500
10003a94:	eb 05                	jmp    10003a9b <NiLoadCursors()+0x1ad>
10003a96:	b8 00 06 00 00       	mov    eax,0x600
10003a9b:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003a9d: R_386_32	___mouse_data
10003aa1:	b9 00 01 00 00       	mov    ecx,0x100
10003aa6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003aaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003aac:	45                   	inc    ebp
10003aad:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003ab5:	e9 03 ff ff ff       	jmp    100039bd <NiLoadCursors()+0xcf>
10003aba:	83 ec 0c             	sub    esp,0xc
10003abd:	53                   	push   ebx
10003abe:	e8 fc ff ff ff       	call   10003abf <NiLoadCursors()+0x1d1>	10003abf: R_386_PC32	free
10003ac3:	83 c4 10             	add    esp,0x10
10003ac6:	83 c4 2c             	add    esp,0x2c
10003ac9:	5b                   	pop    ebx
10003aca:	5e                   	pop    esi
10003acb:	5f                   	pop    edi
10003acc:	5d                   	pop    ebp
10003acd:	c3                   	ret    

10003ace <NIDesktop::NIDesktop(NIContext*)>:
10003ace:	53                   	push   ebx
10003acf:	83 ec 14             	sub    esp,0x14
10003ad2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10003ad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003ada:	c7 43 08 1e 00 00 00 	mov    DWORD PTR [ebx+0x8],0x1e
10003ae1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003ae4:	c7 43 0c 1e 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1e
10003aeb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10003af2:	6a 08                	push   0x8
10003af4:	e8 fc ff ff ff       	call   10003af5 <NIDesktop::NIDesktop(NIContext*)+0x27>	10003af5: R_386_PC32	malloc
10003af9:	89 03                	mov    DWORD PTR [ebx],eax
10003afb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003b02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003b08:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10003b0a: R_386_32	mouseDesktop
10003b0e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003b10: R_386_32	guiMouseHandler
	10003b14: R_386_32	NiHandleMouse(int, int, int, int)
10003b18:	83 c4 18             	add    esp,0x18
10003b1b:	5b                   	pop    ebx
10003b1c:	c3                   	ret    
10003b1d:	90                   	nop

10003b1e <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003b1e:	53                   	push   ebx
10003b1f:	83 ec 08             	sub    esp,0x8
10003b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003b26:	8b 00                	mov    eax,DWORD PTR [eax]
10003b28:	8b 18                	mov    ebx,DWORD PTR [eax]
10003b2a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10003b2e:	74 1d                	je     10003b4d <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2f>
10003b30:	8b 03                	mov    eax,DWORD PTR [ebx]
10003b32:	85 c0                	test   eax,eax
10003b34:	74 12                	je     10003b48 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003b36:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10003b3a:	74 0c                	je     10003b48 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003b3c:	83 ec 0c             	sub    esp,0xc
10003b3f:	50                   	push   eax
10003b40:	e8 fc ff ff ff       	call   10003b41 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x23>	10003b41: R_386_PC32	NIWindow::invalidate()
10003b45:	83 c4 10             	add    esp,0x10
10003b48:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
10003b4b:	eb dd                	jmp    10003b2a <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xc>
10003b4d:	83 c4 08             	add    esp,0x8
10003b50:	5b                   	pop    ebx
10003b51:	c3                   	ret    

10003b52 <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003b52:	57                   	push   edi
10003b53:	56                   	push   esi
10003b54:	53                   	push   ebx
10003b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003b59:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003b5d:	8b 00                	mov    eax,DWORD PTR [eax]
10003b5f:	8b 00                	mov    eax,DWORD PTR [eax]
10003b61:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003b64:	85 db                	test   ebx,ebx
10003b66:	74 43                	je     10003bab <NIDesktop::getTopmostWindowAtPixel(int, int)+0x59>
10003b68:	8b 00                	mov    eax,DWORD PTR [eax]
10003b6a:	85 c0                	test   eax,eax
10003b6c:	74 3f                	je     10003bad <NIDesktop::getTopmostWindowAtPixel(int, int)+0x5b>
10003b6e:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10003b71:	39 ca                	cmp    edx,ecx
10003b73:	7e 04                	jle    10003b79 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003b75:	89 d8                	mov    eax,ebx
10003b77:	eb e8                	jmp    10003b61 <NIDesktop::getTopmostWindowAtPixel(int, int)+0xf>
10003b79:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
10003b7c:	01 d6                	add    esi,edx
10003b7e:	39 ce                	cmp    esi,ecx
10003b80:	7e f3                	jle    10003b75 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003b82:	89 ce                	mov    esi,ecx
10003b84:	29 d6                	sub    esi,edx
10003b86:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10003b89:	8d 34 b2             	lea    esi,[edx+esi*4]
10003b8c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
10003b8f:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003b92:	01 d7                	add    edi,edx
10003b94:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003b98:	7f db                	jg     10003b75 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003b9a:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
10003b9d:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003ba1:	29 f2                	sub    edx,esi
10003ba3:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003ba7:	7e cc                	jle    10003b75 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003ba9:	eb 02                	jmp    10003bad <NIDesktop::getTopmostWindowAtPixel(int, int)+0x5b>
10003bab:	31 c0                	xor    eax,eax
10003bad:	5b                   	pop    ebx
10003bae:	5e                   	pop    esi
10003baf:	5f                   	pop    edi
10003bb0:	c3                   	ret    
10003bb1:	90                   	nop

10003bb2 <NIDesktop::renderScanline(int, int, int)>:
10003bb2:	55                   	push   ebp
10003bb3:	57                   	push   edi
10003bb4:	56                   	push   esi
10003bb5:	53                   	push   ebx
10003bb6:	83 ec 2c             	sub    esp,0x2c
10003bb9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10003bbd:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10003bc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003bc5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003bc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003bcd:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003bcf: R_386_32	render
10003bd3:	31 c0                	xor    eax,eax
10003bd5:	89 d7                	mov    edi,edx
10003bd7:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003bd9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003bdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003be1:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003be3: R_386_32	shadow
10003be7:	b0 80                	mov    al,0x80
10003be9:	89 d7                	mov    edi,edx
10003beb:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003bed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10003bf3:	8b 00                	mov    eax,DWORD PTR [eax]
10003bf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003bf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003bfd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003c01:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003c03: R_386_32	movingWin
10003c07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003c0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003c0e:	85 c0                	test   eax,eax
10003c10:	75 09                	jne    10003c1b <NIDesktop::renderScanline(int, int, int)+0x69>
10003c12:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003c16:	e9 cf 02 00 00       	jmp    10003eea <NIDesktop::renderScanline(int, int, int)+0x338>
10003c1b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003c1f:	8b 1f                	mov    ebx,DWORD PTR [edi]
10003c21:	85 db                	test   ebx,ebx
10003c23:	74 ed                	je     10003c12 <NIDesktop::renderScanline(int, int, int)+0x60>
10003c25:	39 da                	cmp    edx,ebx
10003c27:	75 06                	jne    10003c2f <NIDesktop::renderScanline(int, int, int)+0x7d>
10003c29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003c2d:	eb d8                	jmp    10003c07 <NIDesktop::renderScanline(int, int, int)+0x55>
10003c2f:	83 ec 0c             	sub    esp,0xc
10003c32:	53                   	push   ebx
10003c33:	e8 fc ff ff ff       	call   10003c34 <NIDesktop::renderScanline(int, int, int)+0x82>	10003c34: R_386_PC32	NIWindow::request()
10003c38:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003c3b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
10003c3e:	83 c4 10             	add    esp,0x10
10003c41:	01 c2                	add    edx,eax
10003c43:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003c47:	0f 8e ad 00 00 00    	jle    10003cfa <NIDesktop::renderScanline(int, int, int)+0x148>
10003c4d:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003c51:	0f 85 a3 00 00 00    	jne    10003cfa <NIDesktop::renderScanline(int, int, int)+0x148>
10003c57:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003c5b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10003c5e:	83 c0 06             	add    eax,0x6
10003c61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003c65:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
10003c68:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10003c6b:	01 c8                	add    eax,ecx
10003c6d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003c71:	39 d0                	cmp    eax,edx
10003c73:	0f 8e 40 01 00 00    	jle    10003db9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003c79:	3b 54 24 48          	cmp    edx,DWORD PTR [esp+0x48]
10003c7d:	7c 75                	jl     10003cf4 <NIDesktop::renderScanline(int, int, int)+0x142>
10003c7f:	3b 54 24 4c          	cmp    edx,DWORD PTR [esp+0x4c]
10003c83:	0f 8f 30 01 00 00    	jg     10003db9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003c89:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
10003c8c:	89 d5                	mov    ebp,edx
10003c8e:	6b fe fc             	imul   edi,esi,0xfffffffc
10003c91:	29 cd                	sub    ebp,ecx
10003c93:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003c97:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
10003c9b:	39 f0                	cmp    eax,esi
10003c9d:	7c 1d                	jl     10003cbc <NIDesktop::renderScanline(int, int, int)+0x10a>
10003c9f:	8d 0c 87             	lea    ecx,[edi+eax*4]
10003ca2:	03 4b 14             	add    ecx,DWORD PTR [ebx+0x14]
10003ca5:	0f b7 29             	movzx  ebp,WORD PTR [ecx]
10003ca8:	3b 6c 24 18          	cmp    ebp,DWORD PTR [esp+0x18]
10003cac:	7f 0e                	jg     10003cbc <NIDesktop::renderScanline(int, int, int)+0x10a>
10003cae:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
10003cb2:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
10003cb6:	29 cd                	sub    ebp,ecx
10003cb8:	39 d5                	cmp    ebp,edx
10003cba:	7d 07                	jge    10003cc3 <NIDesktop::renderScanline(int, int, int)+0x111>
10003cbc:	40                   	inc    eax
10003cbd:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
10003cc1:	75 d8                	jne    10003c9b <NIDesktop::renderScanline(int, int, int)+0xe9>
10003cc3:	2b 44 24 44          	sub    eax,DWORD PTR [esp+0x44]
10003cc7:	48                   	dec    eax
10003cc8:	83 f8 03             	cmp    eax,0x3
10003ccb:	77 27                	ja     10003cf4 <NIDesktop::renderScanline(int, int, int)+0x142>
10003ccd:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003ccf: R_386_32	render
10003cd4:	75 1e                	jne    10003cf4 <NIDesktop::renderScanline(int, int, int)+0x142>
10003cd6:	8d 0c c5 65 00 00 00 	lea    ecx,[eax*8+0x65]
10003cdd:	0f b6 82 00 00 00 00 	movzx  eax,BYTE PTR [edx+0x0]	10003ce0: R_386_32	shadow
10003ce4:	0f af c1             	imul   eax,ecx
10003ce7:	d1 f9                	sar    ecx,1
10003ce9:	c1 f8 08             	sar    eax,0x8
10003cec:	01 c1                	add    ecx,eax
10003cee:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	10003cf0: R_386_32	shadow
10003cf4:	42                   	inc    edx
10003cf5:	e9 6b ff ff ff       	jmp    10003c65 <NIDesktop::renderScanline(int, int, int)+0xb3>
10003cfa:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003cfe:	0f 8d b5 00 00 00    	jge    10003db9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d04:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003d08:	0f 85 ab 00 00 00    	jne    10003db9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d0e:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10003d12:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003d15:	8d 77 fa             	lea    esi,[edi-0x6]
10003d18:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003d1c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
10003d1f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
10003d22:	01 ce                	add    esi,ecx
10003d24:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10003d28:	39 c6                	cmp    esi,eax
10003d2a:	0f 8e 89 00 00 00    	jle    10003db9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d30:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003d34:	7c 7d                	jl     10003db3 <NIDesktop::renderScanline(int, int, int)+0x201>
10003d36:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003d3a:	7f 7d                	jg     10003db9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d3c:	89 c7                	mov    edi,eax
10003d3e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003d42:	29 cf                	sub    edi,ecx
10003d44:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003d48:	4a                   	dec    edx
10003d49:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10003d4d:	29 d1                	sub    ecx,edx
10003d4f:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
10003d53:	74 32                	je     10003d87 <NIDesktop::renderScanline(int, int, int)+0x1d5>
10003d55:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
10003d58:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10003d5b:	8d 2c 37             	lea    ebp,[edi+esi*1]
10003d5e:	39 d5                	cmp    ebp,edx
10003d60:	7e e6                	jle    10003d48 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d62:	89 d5                	mov    ebp,edx
10003d64:	29 fd                	sub    ebp,edi
10003d66:	39 ee                	cmp    esi,ebp
10003d68:	7e 1d                	jle    10003d87 <NIDesktop::renderScanline(int, int, int)+0x1d5>
10003d6a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10003d6d:	8d 34 ae             	lea    esi,[esi+ebp*4]
10003d70:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003d73:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10003d77:	7f cf                	jg     10003d48 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d79:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003d7d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10003d81:	29 f7                	sub    edi,esi
10003d83:	39 c7                	cmp    edi,eax
10003d85:	7c c1                	jl     10003d48 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d87:	83 f9 04             	cmp    ecx,0x4
10003d8a:	77 27                	ja     10003db3 <NIDesktop::renderScanline(int, int, int)+0x201>
10003d8c:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003d8e: R_386_32	render
10003d93:	75 1e                	jne    10003db3 <NIDesktop::renderScanline(int, int, int)+0x201>
10003d95:	8d 0c cd 5d 00 00 00 	lea    ecx,[ecx*8+0x5d]
10003d9c:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10003d9f: R_386_32	shadow
10003da3:	0f af d1             	imul   edx,ecx
10003da6:	d1 f9                	sar    ecx,1
10003da8:	c1 fa 08             	sar    edx,0x8
10003dab:	01 d1                	add    ecx,edx
10003dad:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	10003daf: R_386_32	shadow
10003db3:	40                   	inc    eax
10003db4:	e9 63 ff ff ff       	jmp    10003d1c <NIDesktop::renderScanline(int, int, int)+0x16a>
10003db9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003dbc:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003dc0:	0f 8f 00 01 00 00    	jg     10003ec6 <NIDesktop::renderScanline(int, int, int)+0x314>
10003dc6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
10003dc9:	01 c2                	add    edx,eax
10003dcb:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003dcf:	0f 8e f1 00 00 00    	jle    10003ec6 <NIDesktop::renderScanline(int, int, int)+0x314>
10003dd5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003dd9:	29 c2                	sub    edx,eax
10003ddb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10003dde:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003de2:	8d 14 90             	lea    edx,[eax+edx*4]
10003de5:	0f b7 02             	movzx  eax,WORD PTR [edx]
10003de8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003dec:	0f b7 42 02          	movzx  eax,WORD PTR [edx+0x2]
10003df0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003df4:	74 09                	je     10003dff <NIDesktop::renderScanline(int, int, int)+0x24d>
10003df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003dfa:	03 43 18             	add    eax,DWORD PTR [ebx+0x18]
10003dfd:	eb 78                	jmp    10003e77 <NIDesktop::renderScanline(int, int, int)+0x2c5>
10003dff:	31 c9                	xor    ecx,ecx
10003e01:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10003e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003e08:	8d 6c 02 fc          	lea    ebp,[edx+eax*1-0x4]
10003e0c:	03 53 20             	add    edx,DWORD PTR [ebx+0x20]
10003e0f:	01 cd                	add    ebp,ecx
10003e11:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003e15:	01 ca                	add    edx,ecx
10003e17:	80 bd 00 00 00 00 00 	cmp    BYTE PTR [ebp+0x0],0x0	10003e19: R_386_32	render
10003e1e:	75 1f                	jne    10003e3f <NIDesktop::renderScanline(int, int, int)+0x28d>
10003e20:	0f b6 b5 00 00 00 00 	movzx  esi,BYTE PTR [ebp+0x0]	10003e23: R_386_32	shadow
10003e27:	6b f9 f8             	imul   edi,ecx,0xfffffff8
10003e2a:	83 c7 7d             	add    edi,0x7d
10003e2d:	0f af f7             	imul   esi,edi
10003e30:	d1 ff                	sar    edi,1
10003e32:	c1 fe 08             	sar    esi,0x8
10003e35:	01 f7                	add    edi,esi
10003e37:	89 f8                	mov    eax,edi
10003e39:	88 85 00 00 00 00    	mov    BYTE PTR [ebp+0x0],al	10003e3b: R_386_32	shadow
10003e3f:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003e41: R_386_32	render
10003e46:	75 20                	jne    10003e68 <NIDesktop::renderScanline(int, int, int)+0x2b6>
10003e48:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
10003e4f:	0f b6 b2 00 00 00 00 	movzx  esi,BYTE PTR [edx+0x0]	10003e52: R_386_32	shadow
10003e56:	0f af f7             	imul   esi,edi
10003e59:	d1 ff                	sar    edi,1
10003e5b:	c1 fe 08             	sar    esi,0x8
10003e5e:	01 f7                	add    edi,esi
10003e60:	89 f8                	mov    eax,edi
10003e62:	88 82 00 00 00 00    	mov    BYTE PTR [edx+0x0],al	10003e64: R_386_32	shadow
10003e68:	41                   	inc    ecx
10003e69:	83 f9 04             	cmp    ecx,0x4
10003e6c:	75 93                	jne    10003e01 <NIDesktop::renderScanline(int, int, int)+0x24f>
10003e6e:	eb 86                	jmp    10003df6 <NIDesktop::renderScanline(int, int, int)+0x244>
10003e70:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003e74:	7d 11                	jge    10003e87 <NIDesktop::renderScanline(int, int, int)+0x2d5>
10003e76:	40                   	inc    eax
10003e77:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
10003e7a:	03 53 18             	add    edx,DWORD PTR [ebx+0x18]
10003e7d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003e81:	39 c2                	cmp    edx,eax
10003e83:	7f eb                	jg     10003e70 <NIDesktop::renderScanline(int, int, int)+0x2be>
10003e85:	eb 3f                	jmp    10003ec6 <NIDesktop::renderScanline(int, int, int)+0x314>
10003e87:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003e8b:	7f 39                	jg     10003ec6 <NIDesktop::renderScanline(int, int, int)+0x314>
10003e8d:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003e8f: R_386_32	render
10003e94:	75 e0                	jne    10003e76 <NIDesktop::renderScanline(int, int, int)+0x2c4>
10003e96:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003e98: R_386_32	render
10003e9d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003ea1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
10003ea4:	2b 53 1c             	sub    edx,DWORD PTR [ebx+0x1c]
10003ea7:	0f af ca             	imul   ecx,edx
10003eaa:	89 c2                	mov    edx,eax
10003eac:	2b 53 18             	sub    edx,DWORD PTR [ebx+0x18]
10003eaf:	01 ca                	add    edx,ecx
10003eb1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10003eb4:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003eb8:	8b 14 91             	mov    edx,DWORD PTR [ecx+edx*4]
10003ebb:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	10003ebe: R_386_32	renderData
10003ec2:	75 b2                	jne    10003e76 <NIDesktop::renderScanline(int, int, int)+0x2c4>
10003ec4:	eb 44                	jmp    10003f0a <NIDesktop::renderScanline(int, int, int)+0x358>
10003ec6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003eca:	0f 85 42 fd ff ff    	jne    10003c12 <NIDesktop::renderScanline(int, int, int)+0x60>
10003ed0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003ed4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003ed7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003edb:	e9 21 fd ff ff       	jmp    10003c01 <NIDesktop::renderScanline(int, int, int)+0x4f>
10003ee0:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003ee2: R_386_32	render
10003ee7:	74 09                	je     10003ef2 <NIDesktop::renderScanline(int, int, int)+0x340>
10003ee9:	40                   	inc    eax
10003eea:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003eee:	7c f0                	jl     10003ee0 <NIDesktop::renderScanline(int, int, int)+0x32e>
10003ef0:	eb 18                	jmp    10003f0a <NIDesktop::renderScanline(int, int, int)+0x358>
10003ef2:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003ef4: R_386_32	render
10003ef9:	c7 04 85 00 00 00 00 ff 80 55 00 	mov    DWORD PTR [eax*4+0x0],0x5580ff	10003efc: R_386_32	renderData
10003f04:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003f08:	75 df                	jne    10003ee9 <NIDesktop::renderScanline(int, int, int)+0x337>
10003f0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003f0e:	8b 00                	mov    eax,DWORD PTR [eax]
10003f10:	8b 00                	mov    eax,DWORD PTR [eax]
10003f12:	85 c0                	test   eax,eax
10003f14:	74 5e                	je     10003f74 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f16:	8b 00                	mov    eax,DWORD PTR [eax]
10003f18:	85 c0                	test   eax,eax
10003f1a:	74 58                	je     10003f74 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f1c:	80 78 28 00          	cmp    BYTE PTR [eax+0x28],0x0
10003f20:	75 52                	jne    10003f74 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f22:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10003f26:	3b 5c 24 4c          	cmp    ebx,DWORD PTR [esp+0x4c]
10003f2a:	7d 48                	jge    10003f74 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f2c:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	10003f2e: R_386_32	shadow
10003f32:	3c 80                	cmp    al,0x80
10003f34:	74 3b                	je     10003f71 <NIDesktop::renderScanline(int, int, int)+0x3bf>
10003f36:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	10003f39: R_386_32	renderData
10003f3d:	0f b6 f0             	movzx  esi,al
10003f40:	89 d1                	mov    ecx,edx
10003f42:	0f b6 c6             	movzx  eax,dh
10003f45:	c1 e9 10             	shr    ecx,0x10
10003f48:	0f af c6             	imul   eax,esi
10003f4b:	0f b6 c9             	movzx  ecx,cl
10003f4e:	0f b6 d2             	movzx  edx,dl
10003f51:	0f af ce             	imul   ecx,esi
10003f54:	0f af d6             	imul   edx,esi
10003f57:	c1 e9 07             	shr    ecx,0x7
10003f5a:	c1 e8 07             	shr    eax,0x7
10003f5d:	c1 e1 10             	shl    ecx,0x10
10003f60:	c1 e0 08             	shl    eax,0x8
10003f63:	c1 ea 07             	shr    edx,0x7
10003f66:	09 c1                	or     ecx,eax
10003f68:	09 ca                	or     edx,ecx
10003f6a:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	10003f6d: R_386_32	renderData
10003f71:	43                   	inc    ebx
10003f72:	eb b2                	jmp    10003f26 <NIDesktop::renderScanline(int, int, int)+0x374>
10003f74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003f78:	83 ec 0c             	sub    esp,0xc
10003f7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003f7e:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003f84:	8b 10                	mov    edx,DWORD PTR [eax]
10003f86:	68 00 00 00 00       	push   0x0	10003f87: R_386_32	renderData
10003f8b:	6a 00                	push   0x0
10003f8d:	6a 01                	push   0x1
10003f8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10003f93:	6a 00                	push   0x0
10003f95:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10003f99:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10003f9d:	ff 74 24 70          	push   DWORD PTR [esp+0x70]
10003fa1:	50                   	push   eax
10003fa2:	ff 52 38             	call   DWORD PTR [edx+0x38]
10003fa5:	83 c4 5c             	add    esp,0x5c
10003fa8:	5b                   	pop    ebx
10003fa9:	5e                   	pop    esi
10003faa:	5f                   	pop    edi
10003fab:	5d                   	pop    ebp
10003fac:	c3                   	ret    
10003fad:	90                   	nop

10003fae <NIDesktop::rangeRefresh(int, int, int, int)>:
10003fae:	53                   	push   ebx
10003faf:	83 ec 08             	sub    esp,0x8
10003fb2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10003fb6:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
10003fba:	7d 18                	jge    10003fd4 <NIDesktop::rangeRefresh(int, int, int, int)+0x26>
10003fbc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003fc0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003fc4:	53                   	push   ebx
10003fc5:	43                   	inc    ebx
10003fc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003fca:	e8 fc ff ff ff       	call   10003fcb <NIDesktop::rangeRefresh(int, int, int, int)+0x1d>	10003fcb: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10003fcf:	83 c4 10             	add    esp,0x10
10003fd2:	eb e2                	jmp    10003fb6 <NIDesktop::rangeRefresh(int, int, int, int)+0x8>
10003fd4:	83 c4 08             	add    esp,0x8
10003fd7:	5b                   	pop    ebx
10003fd8:	c3                   	ret    
10003fd9:	90                   	nop

10003fda <NIDesktop::refreshWindowBounds(NIWindow*)>:
10003fda:	55                   	push   ebp
10003fdb:	ba 05 00 00 00       	mov    edx,0x5
10003fe0:	57                   	push   edi
10003fe1:	56                   	push   esi
10003fe2:	53                   	push   ebx
10003fe3:	83 ec 0c             	sub    esp,0xc
10003fe6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10003fea:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003fed:	83 f8 05             	cmp    eax,0x5
10003ff0:	7c 02                	jl     10003ff4 <NIDesktop::refreshWindowBounds(NIWindow*)+0x1a>
10003ff2:	89 c2                	mov    edx,eax
10003ff4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10003ff8:	03 43 24             	add    eax,DWORD PTR [ebx+0x24]
10003ffb:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
10003ffe:	83 ea 05             	sub    edx,0x5
10004001:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
10004007:	8d 70 05             	lea    esi,[eax+0x5]
1000400a:	8d 69 fb             	lea    ebp,[ecx-0x5]
1000400d:	39 c5                	cmp    ebp,eax
1000400f:	7f 03                	jg     10004014 <NIDesktop::refreshWindowBounds(NIWindow*)+0x3a>
10004011:	8d 71 ff             	lea    esi,[ecx-0x1]
10004014:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10004017:	89 c1                	mov    ecx,eax
10004019:	83 f8 05             	cmp    eax,0x5
1000401c:	7d 05                	jge    10004023 <NIDesktop::refreshWindowBounds(NIWindow*)+0x49>
1000401e:	b9 05 00 00 00       	mov    ecx,0x5
10004023:	03 43 20             	add    eax,DWORD PTR [ebx+0x20]
10004026:	83 e9 05             	sub    ecx,0x5
10004029:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
1000402f:	8d 58 05             	lea    ebx,[eax+0x5]
10004032:	8d 6f fb             	lea    ebp,[edi-0x5]
10004035:	39 c5                	cmp    ebp,eax
10004037:	7f 03                	jg     1000403c <NIDesktop::refreshWindowBounds(NIWindow*)+0x62>
10004039:	8d 5f ff             	lea    ebx,[edi-0x1]
1000403c:	83 ec 0c             	sub    esp,0xc
1000403f:	53                   	push   ebx
10004040:	51                   	push   ecx
10004041:	56                   	push   esi
10004042:	52                   	push   edx
10004043:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10004047:	e8 fc ff ff ff       	call   10004048 <NIDesktop::refreshWindowBounds(NIWindow*)+0x6e>	10004048: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000404c:	83 c4 2c             	add    esp,0x2c
1000404f:	5b                   	pop    ebx
10004050:	5e                   	pop    esi
10004051:	5f                   	pop    edi
10004052:	5d                   	pop    ebp
10004053:	c3                   	ret    

10004054 <NIDesktop::completeRefresh()>:
10004054:	56                   	push   esi
10004055:	53                   	push   ebx
10004056:	31 f6                	xor    esi,esi
10004058:	50                   	push   eax
10004059:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000405d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004060:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
10004066:	7e 15                	jle    1000407d <NIDesktop::completeRefresh()+0x29>
10004068:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
1000406e:	6a 00                	push   0x0
10004070:	56                   	push   esi
10004071:	46                   	inc    esi
10004072:	53                   	push   ebx
10004073:	e8 fc ff ff ff       	call   10004074 <NIDesktop::completeRefresh()+0x20>	10004074: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10004078:	83 c4 10             	add    esp,0x10
1000407b:	eb e0                	jmp    1000405d <NIDesktop::completeRefresh()+0x9>
1000407d:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004083:	83 ec 0c             	sub    esp,0xc
10004086:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004088:	6a 00                	push   0x0
1000408a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
1000408d:	05 00 00 00 00       	add    eax,0x0	1000408e: R_386_32	___mouse_data
10004092:	50                   	push   eax
10004093:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004096:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004099:	52                   	push   edx
1000409a:	ff 51 30             	call   DWORD PTR [ecx+0x30]
1000409d:	83 c4 24             	add    esp,0x24
100040a0:	5b                   	pop    ebx
100040a1:	5e                   	pop    esi
100040a2:	c3                   	ret    
100040a3:	90                   	nop

100040a4 <NIDesktop::addWindow(NIWindow*)>:
100040a4:	56                   	push   esi
100040a5:	53                   	push   ebx
100040a6:	83 ec 0c             	sub    esp,0xc
100040a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100040ad:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
100040b1:	56                   	push   esi
100040b2:	ff 33                	push   DWORD PTR [ebx]
100040b4:	e8 fc ff ff ff       	call   100040b5 <NIDesktop::addWindow(NIWindow*)+0x11>	100040b5: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100040b9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100040bd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100040c1:	83 c4 14             	add    esp,0x14
100040c4:	5b                   	pop    ebx
100040c5:	5e                   	pop    esi
100040c6:	e9 0f ff ff ff       	jmp    10003fda <NIDesktop::refreshWindowBounds(NIWindow*)>
100040cb:	90                   	nop

100040cc <NIDesktop::raiseWindow(NIWindow*)>:
100040cc:	53                   	push   ebx
100040cd:	83 ec 10             	sub    esp,0x10
100040d0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100040d4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100040d8:	50                   	push   eax
100040d9:	ff 33                	push   DWORD PTR [ebx]
100040db:	e8 fc ff ff ff       	call   100040dc <NIDesktop::raiseWindow(NIWindow*)+0x10>	100040dc: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100040e0:	58                   	pop    eax
100040e1:	5a                   	pop    edx
100040e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100040e6:	ff 33                	push   DWORD PTR [ebx]
100040e8:	e8 fc ff ff ff       	call   100040e9 <NIDesktop::raiseWindow(NIWindow*)+0x1d>	100040e9: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100040ed:	59                   	pop    ecx
100040ee:	58                   	pop    eax
100040ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100040f3:	53                   	push   ebx
100040f4:	e8 fc ff ff ff       	call   100040f5 <NIDesktop::raiseWindow(NIWindow*)+0x29>	100040f5: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
100040f9:	83 c4 18             	add    esp,0x18
100040fc:	5b                   	pop    ebx
100040fd:	c3                   	ret    

100040fe <NIDesktop::deleteWindow(NIWindow*)>:
100040fe:	53                   	push   ebx
100040ff:	83 ec 10             	sub    esp,0x10
10004102:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004106:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000410a:	50                   	push   eax
1000410b:	ff 33                	push   DWORD PTR [ebx]
1000410d:	e8 fc ff ff ff       	call   1000410e <NIDesktop::deleteWindow(NIWindow*)+0x10>	1000410e: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
10004112:	58                   	pop    eax
10004113:	5a                   	pop    edx
10004114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004118:	53                   	push   ebx
10004119:	e8 fc ff ff ff       	call   1000411a <NIDesktop::deleteWindow(NIWindow*)+0x1c>	1000411a: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
1000411e:	83 c4 18             	add    esp,0x18
10004121:	5b                   	pop    ebx
10004122:	c3                   	ret    
10004123:	90                   	nop

10004124 <NIDesktop::handleMouse(int, int, int, int)>:
10004124:	55                   	push   ebp
10004125:	57                   	push   edi
10004126:	56                   	push   esi
10004127:	53                   	push   ebx
10004128:	83 ec 38             	sub    esp,0x38
1000412b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000412f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004132:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004135:	8d 4a 20             	lea    ecx,[edx+0x20]
10004138:	51                   	push   ecx
10004139:	52                   	push   edx
1000413a:	8d 50 20             	lea    edx,[eax+0x20]
1000413d:	52                   	push   edx
1000413e:	50                   	push   eax
1000413f:	53                   	push   ebx
10004140:	e8 fc ff ff ff       	call   10004141 <NIDesktop::handleMouse(int, int, int, int)+0x1d>	10004141: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004145:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004148:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000414c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000414f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10004153:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10004157:	03 54 24 64          	add    edx,DWORD PTR [esp+0x64]
1000415b:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
1000415f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
10004162:	83 c4 20             	add    esp,0x20
10004165:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10004168:	85 d2                	test   edx,edx
1000416a:	79 07                	jns    10004173 <NIDesktop::handleMouse(int, int, int, int)+0x4f>
1000416c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10004173:	85 c0                	test   eax,eax
10004175:	79 07                	jns    1000417e <NIDesktop::handleMouse(int, int, int, int)+0x5a>
10004177:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
1000417e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004181:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
10004187:	3b 43 08             	cmp    eax,DWORD PTR [ebx+0x8]
1000418a:	7f 04                	jg     10004190 <NIDesktop::handleMouse(int, int, int, int)+0x6c>
1000418c:	48                   	dec    eax
1000418d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10004190:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
10004196:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
10004199:	7f 04                	jg     1000419f <NIDesktop::handleMouse(int, int, int, int)+0x7b>
1000419b:	48                   	dec    eax
1000419c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
1000419f:	50                   	push   eax
100041a0:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100041a3:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100041a6:	53                   	push   ebx
100041a7:	e8 fc ff ff ff       	call   100041a8 <NIDesktop::handleMouse(int, int, int, int)+0x84>	100041a8: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
100041ac:	83 c4 10             	add    esp,0x10
100041af:	89 c6                	mov    esi,eax
100041b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100041b5:	83 e0 01             	and    eax,0x1
100041b8:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100041ba: R_386_32	movingWin
100041bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100041c3:	0f 84 f0 01 00 00    	je     100043b9 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100041c9:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	100041cb: R_386_32	movingType
100041d0:	0f 85 e3 01 00 00    	jne    100043b9 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100041d6:	c6 04 24 00          	mov    BYTE PTR [esp],0x0
100041da:	85 c0                	test   eax,eax
100041dc:	75 0b                	jne    100041e9 <NIDesktop::handleMouse(int, int, int, int)+0xc5>
100041de:	a0 18 88 03 10       	mov    al,ds:0x10038818	100041df: R_386_32	.bss
100041e3:	83 e0 01             	and    eax,0x1
100041e6:	88 04 24             	mov    BYTE PTR [esp],al
100041e9:	bd 01 00 00 00       	mov    ebp,0x1
100041ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100041ef: R_386_32	movingWin
100041f3:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
100041f6:	8d 51 ff             	lea    edx,[ecx-0x1]
100041f9:	39 ea                	cmp    edx,ebp
100041fb:	0f 8e b1 00 00 00    	jle    100042b2 <NIDesktop::handleMouse(int, int, int, int)+0x18e>
10004201:	bf 01 00 00 00       	mov    edi,0x1
10004206:	a1 00 00 00 00       	mov    eax,ds:0x0	10004207: R_386_32	movingWin
1000420b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
1000420e:	48                   	dec    eax
1000420f:	39 f8                	cmp    eax,edi
10004211:	0f 8e 95 00 00 00    	jle    100042ac <NIDesktop::handleMouse(int, int, int, int)+0x188>
10004217:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
1000421b:	89 ea                	mov    edx,ebp
1000421d:	83 e0 1f             	and    eax,0x1f
10004220:	83 e2 03             	and    edx,0x3
10004223:	09 d0                	or     eax,edx
10004225:	75 7f                	jne    100042a6 <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000422b:	2b 05 14 88 03 10    	sub    eax,DWORD PTR ds:0x10038814	1000422d: R_386_32	.bss
10004231:	01 f8                	add    eax,edi
10004233:	78 2d                	js     10004262 <NIDesktop::handleMouse(int, int, int, int)+0x13e>
10004235:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004238:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
1000423e:	7d 22                	jge    10004262 <NIDesktop::handleMouse(int, int, int, int)+0x13e>
10004240:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10004244:	8d 48 01             	lea    ecx,[eax+0x1]
10004247:	83 ec 0c             	sub    esp,0xc
1000424a:	2b 15 10 88 03 10    	sub    edx,DWORD PTR ds:0x10038810	1000424c: R_386_32	.bss
10004250:	51                   	push   ecx
10004251:	01 ea                	add    edx,ebp
10004253:	50                   	push   eax
10004254:	8d 42 01             	lea    eax,[edx+0x1]
10004257:	50                   	push   eax
10004258:	52                   	push   edx
10004259:	53                   	push   ebx
1000425a:	e8 fc ff ff ff       	call   1000425b <NIDesktop::handleMouse(int, int, int, int)+0x137>	1000425b: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000425f:	83 c4 20             	add    esp,0x20
10004262:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
10004266:	75 3e                	jne    100042a6 <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004268:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
1000426b:	01 f8                	add    eax,edi
1000426d:	2b 05 14 88 03 10    	sub    eax,DWORD PTR ds:0x10038814	1000426f: R_386_32	.bss
10004273:	78 31                	js     100042a6 <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004275:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004278:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
1000427e:	7d 26                	jge    100042a6 <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004280:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10004286:	8b 11                	mov    edx,DWORD PTR [ecx]
10004288:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
1000428c:	6a 00                	push   0x0
1000428e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004291:	01 ea                	add    edx,ebp
10004293:	2b 15 10 88 03 10    	sub    edx,DWORD PTR ds:0x10038810	10004295: R_386_32	.bss
10004299:	52                   	push   edx
1000429a:	50                   	push   eax
1000429b:	51                   	push   ecx
1000429c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100042a0:	ff 50 24             	call   DWORD PTR [eax+0x24]
100042a3:	83 c4 10             	add    esp,0x10
100042a6:	47                   	inc    edi
100042a7:	e9 5a ff ff ff       	jmp    10004206 <NIDesktop::handleMouse(int, int, int, int)+0xe2>
100042ac:	45                   	inc    ebp
100042ad:	e9 3c ff ff ff       	jmp    100041ee <NIDesktop::handleMouse(int, int, int, int)+0xca>
100042b2:	8b 15 14 88 03 10    	mov    edx,DWORD PTR ds:0x10038814	100042b4: R_386_32	.bss
100042b8:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
100042bb:	29 d7                	sub    edi,edx
100042bd:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
100042c1:	0f 85 86 05 00 00    	jne    1000484d <NIDesktop::handleMouse(int, int, int, int)+0x729>
100042c7:	89 3c 24             	mov    DWORD PTR [esp],edi
100042ca:	85 ff                	test   edi,edi
100042cc:	79 07                	jns    100042d5 <NIDesktop::handleMouse(int, int, int, int)+0x1b1>
100042ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100042d5:	8b 68 20             	mov    ebp,DWORD PTR [eax+0x20]
100042d8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100042db:	01 ef                	add    edi,ebp
100042dd:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
100042e3:	39 c7                	cmp    edi,eax
100042e5:	7d 05                	jge    100042ec <NIDesktop::handleMouse(int, int, int, int)+0x1c8>
100042e7:	2b 3c 24             	sub    edi,DWORD PTR [esp]
100042ea:	eb 0b                	jmp    100042f7 <NIDesktop::handleMouse(int, int, int, int)+0x1d3>
100042ec:	89 c7                	mov    edi,eax
100042ee:	2b 3c 24             	sub    edi,DWORD PTR [esp]
100042f1:	0f 88 c2 00 00 00    	js     100043b9 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100042f7:	85 ff                	test   edi,edi
100042f9:	0f 84 ba 00 00 00    	je     100043b9 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100042ff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004303:	29 d1                	sub    ecx,edx
10004305:	89 ca                	mov    edx,ecx
10004307:	79 02                	jns    1000430b <NIDesktop::handleMouse(int, int, int, int)+0x1e7>
10004309:	31 d2                	xor    edx,edx
1000430b:	01 cd                	add    ebp,ecx
1000430d:	39 e8                	cmp    eax,ebp
1000430f:	7e 04                	jle    10004315 <NIDesktop::handleMouse(int, int, int, int)+0x1f1>
10004311:	29 d5                	sub    ebp,edx
10004313:	eb 08                	jmp    1000431d <NIDesktop::handleMouse(int, int, int, int)+0x1f9>
10004315:	29 d0                	sub    eax,edx
10004317:	89 c5                	mov    ebp,eax
10004319:	79 02                	jns    1000431d <NIDesktop::handleMouse(int, int, int, int)+0x1f9>
1000431b:	31 ed                	xor    ebp,ebp
1000431d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004321:	01 d5                	add    ebp,edx
10004323:	83 ec 0c             	sub    esp,0xc
10004326:	2b 05 10 88 03 10    	sub    eax,DWORD PTR ds:0x10038810	10004328: R_386_32	.bss
1000432c:	55                   	push   ebp
1000432d:	8d 48 01             	lea    ecx,[eax+0x1]
10004330:	52                   	push   edx
10004331:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
10004335:	51                   	push   ecx
10004336:	50                   	push   eax
10004337:	53                   	push   ebx
10004338:	e8 fc ff ff ff       	call   10004339 <NIDesktop::handleMouse(int, int, int, int)+0x215>	10004339: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000433d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004341:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004343: R_386_32	movingWin
10004347:	83 c4 14             	add    esp,0x14
1000434a:	2b 05 10 88 03 10    	sub    eax,DWORD PTR ds:0x10038810	1000434c: R_386_32	.bss
10004350:	03 41 24             	add    eax,DWORD PTR [ecx+0x24]
10004353:	55                   	push   ebp
10004354:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10004358:	52                   	push   edx
10004359:	50                   	push   eax
1000435a:	48                   	dec    eax
1000435b:	50                   	push   eax
1000435c:	53                   	push   ebx
1000435d:	e8 fc ff ff ff       	call   1000435e <NIDesktop::handleMouse(int, int, int, int)+0x23a>	1000435e: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004362:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004365:	83 c4 18             	add    esp,0x18
10004368:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
1000436e:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004370:	6a 00                	push   0x0
10004372:	6a 01                	push   0x1
10004374:	57                   	push   edi
10004375:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004378:	2b 05 10 88 03 10    	sub    eax,DWORD PTR ds:0x10038810	1000437a: R_386_32	.bss
1000437e:	50                   	push   eax
1000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10004383:	52                   	push   edx
10004384:	ff 51 28             	call   DWORD PTR [ecx+0x28]
10004387:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000438a:	83 c4 18             	add    esp,0x18
1000438d:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004393:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004395:	6a 00                	push   0x0
10004397:	6a 01                	push   0x1
10004399:	57                   	push   edi
1000439a:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	1000439c: R_386_32	movingWin
100043a0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
100043a3:	2b 05 10 88 03 10    	sub    eax,DWORD PTR ds:0x10038810	100043a5: R_386_32	.bss
100043a9:	03 47 24             	add    eax,DWORD PTR [edi+0x24]
100043ac:	48                   	dec    eax
100043ad:	50                   	push   eax
100043ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100043b2:	52                   	push   edx
100043b3:	ff 51 28             	call   DWORD PTR [ecx+0x28]
100043b6:	83 c4 20             	add    esp,0x20
100043b9:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100043bb: R_386_32	movingWin
100043bf:	85 d2                	test   edx,edx
100043c1:	0f 84 05 02 00 00    	je     100045cc <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
100043c7:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100043c9: R_386_32	movingType
100043cd:	8d 41 fe             	lea    eax,[ecx-0x2]
100043d0:	83 f8 02             	cmp    eax,0x2
100043d3:	0f 87 f3 01 00 00    	ja     100045cc <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
100043d9:	c6 44 24 10 00       	mov    BYTE PTR [esp+0x10],0x0
100043de:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100043e3:	75 0c                	jne    100043f1 <NIDesktop::handleMouse(int, int, int, int)+0x2cd>
100043e5:	a0 18 88 03 10       	mov    al,ds:0x10038818	100043e6: R_386_32	.bss
100043ea:	83 e0 01             	and    eax,0x1
100043ed:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
100043f1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
100043f4:	8b 2d 14 88 03 10    	mov    ebp,DWORD PTR ds:0x10038814	100043f6: R_386_32	.bss
100043fa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100043fe:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
10004401:	01 c7                	add    edi,eax
10004403:	29 ef                	sub    edi,ebp
10004405:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10004409:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
1000440d:	01 d7                	add    edi,edx
1000440f:	2b 3d 10 88 03 10    	sub    edi,DWORD PTR ds:0x10038810	10004411: R_386_32	.bss
10004415:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10004419:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
1000441c:	01 c7                	add    edi,eax
1000441e:	29 ef                	sub    edi,ebp
10004420:	89 fd                	mov    ebp,edi
10004422:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
10004425:	01 d7                	add    edi,edx
10004427:	2b 3d 10 88 03 10    	sub    edi,DWORD PTR ds:0x10038810	10004429: R_386_32	.bss
1000442d:	83 f9 03             	cmp    ecx,0x3
10004430:	89 3c 24             	mov    DWORD PTR [esp],edi
10004433:	74 0e                	je     10004443 <NIDesktop::handleMouse(int, int, int, int)+0x31f>
10004435:	83 f9 04             	cmp    ecx,0x4
10004438:	75 0f                	jne    10004449 <NIDesktop::handleMouse(int, int, int, int)+0x325>
1000443a:	89 14 24             	mov    DWORD PTR [esp],edx
1000443d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10004441:	eb 06                	jmp    10004449 <NIDesktop::handleMouse(int, int, int, int)+0x325>
10004443:	89 c5                	mov    ebp,eax
10004445:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004449:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000444d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004451:	39 e8                	cmp    eax,ebp
10004453:	7d 04                	jge    10004459 <NIDesktop::handleMouse(int, int, int, int)+0x335>
10004455:	89 6c 24 14          	mov    DWORD PTR [esp+0x14],ebp
10004459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000445d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004464:	7d 07                	jge    1000446d <NIDesktop::handleMouse(int, int, int, int)+0x349>
10004466:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004469:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000446d:	bf 01 00 00 00       	mov    edi,0x1
10004472:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10004476:	0f 8d ab 00 00 00    	jge    10004527 <NIDesktop::handleMouse(int, int, int, int)+0x403>
1000447c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
10004484:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10004488:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
1000448c:	0f 8d 8f 00 00 00    	jge    10004521 <NIDesktop::handleMouse(int, int, int, int)+0x3fd>
10004492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004496:	89 fa                	mov    edx,edi
10004498:	01 f8                	add    eax,edi
1000449a:	83 e2 03             	and    edx,0x3
1000449d:	83 e0 1f             	and    eax,0x1f
100044a0:	09 d0                	or     eax,edx
100044a2:	75 74                	jne    10004518 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
100044a4:	83 ec 0c             	sub    esp,0xc
100044a7:	a1 00 00 00 00       	mov    eax,ds:0x0	100044a8: R_386_32	movingWin
100044ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100044b0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
100044b3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
100044b6:	8d 4c 0a 01          	lea    ecx,[edx+ecx*1+0x1]
100044ba:	51                   	push   ecx
100044bb:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
100044bf:	52                   	push   edx
100044c0:	8d 54 38 01          	lea    edx,[eax+edi*1+0x1]
100044c4:	01 f8                	add    eax,edi
100044c6:	52                   	push   edx
100044c7:	50                   	push   eax
100044c8:	53                   	push   ebx
100044c9:	e8 fc ff ff ff       	call   100044ca <NIDesktop::handleMouse(int, int, int, int)+0x3a6>	100044ca: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100044ce:	8a 54 24 30          	mov    dl,BYTE PTR [esp+0x30]
100044d2:	83 c4 20             	add    esp,0x20
100044d5:	83 f2 01             	xor    edx,0x1
100044d8:	39 3c 24             	cmp    DWORD PTR [esp],edi
100044db:	0f 9f c0             	setg   al
100044de:	84 c2                	test   dl,al
100044e0:	74 36                	je     10004518 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
100044e2:	39 6c 24 04          	cmp    DWORD PTR [esp+0x4],ebp
100044e6:	7d 30                	jge    10004518 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
100044e8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100044eb:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100044f1:	8b 08                	mov    ecx,DWORD PTR [eax]
100044f3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100044f7:	6a 00                	push   0x0
100044f9:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100044fb: R_386_32	movingWin
100044ff:	8b 51 1c             	mov    edx,DWORD PTR [ecx+0x1c]
10004502:	01 fa                	add    edx,edi
10004504:	52                   	push   edx
10004505:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10004509:	03 51 18             	add    edx,DWORD PTR [ecx+0x18]
1000450c:	52                   	push   edx
1000450d:	50                   	push   eax
1000450e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10004512:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004515:	83 c4 10             	add    esp,0x10
10004518:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
1000451c:	e9 63 ff ff ff       	jmp    10004484 <NIDesktop::handleMouse(int, int, int, int)+0x360>
10004521:	47                   	inc    edi
10004522:	e9 4b ff ff ff       	jmp    10004472 <NIDesktop::handleMouse(int, int, int, int)+0x34e>
10004527:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	10004529: R_386_32	movingWin
1000452d:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
10004532:	0f 85 d8 02 00 00    	jne    10004810 <NIDesktop::handleMouse(int, int, int, int)+0x6ec>
10004538:	8b 57 18             	mov    edx,DWORD PTR [edi+0x18]
1000453b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
1000453e:	83 ec 0c             	sub    esp,0xc
10004541:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004545:	01 d1                	add    ecx,edx
10004547:	51                   	push   ecx
10004548:	52                   	push   edx
10004549:	8d 50 01             	lea    edx,[eax+0x1]
1000454c:	52                   	push   edx
1000454d:	50                   	push   eax
1000454e:	53                   	push   ebx
1000454f:	e8 fc ff ff ff       	call   10004550 <NIDesktop::handleMouse(int, int, int, int)+0x42c>	10004550: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004554:	83 c4 18             	add    esp,0x18
10004557:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000455a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000455c: R_386_32	movingWin
10004560:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004566:	8b 08                	mov    ecx,DWORD PTR [eax]
10004568:	6a 00                	push   0x0
1000456a:	6a 01                	push   0x1
1000456c:	55                   	push   ebp
1000456d:	ff 72 1c             	push   DWORD PTR [edx+0x1c]
10004570:	ff 72 18             	push   DWORD PTR [edx+0x18]
10004573:	50                   	push   eax
10004574:	ff 51 28             	call   DWORD PTR [ecx+0x28]
10004577:	83 c4 14             	add    esp,0x14
1000457a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000457b: R_386_32	movingWin
1000457f:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
10004582:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10004585:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10004589:	01 c8                	add    eax,ecx
1000458b:	50                   	push   eax
1000458c:	51                   	push   ecx
1000458d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004591:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
10004595:	50                   	push   eax
10004596:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
1000459a:	52                   	push   edx
1000459b:	53                   	push   ebx
1000459c:	e8 fc ff ff ff       	call   1000459d <NIDesktop::handleMouse(int, int, int, int)+0x479>	1000459d: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100045a1:	83 c4 18             	add    esp,0x18
100045a4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100045a7:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100045a9: R_386_32	movingWin
100045ad:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100045b3:	8b 08                	mov    ecx,DWORD PTR [eax]
100045b5:	6a 00                	push   0x0
100045b7:	6a 01                	push   0x1
100045b9:	55                   	push   ebp
100045ba:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
100045be:	03 7a 1c             	add    edi,DWORD PTR [edx+0x1c]
100045c1:	57                   	push   edi
100045c2:	ff 72 18             	push   DWORD PTR [edx+0x18]
100045c5:	50                   	push   eax
100045c6:	ff 51 28             	call   DWORD PTR [ecx+0x28]
100045c9:	83 c4 20             	add    esp,0x20
100045cc:	85 f6                	test   esi,esi
100045ce:	0f 84 08 02 00 00    	je     100047dc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100045d4:	f6 44 24 4c 01       	test   BYTE PTR [esp+0x4c],0x1
100045d9:	0f 84 fd 01 00 00    	je     100047dc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100045df:	8b 0d 18 88 03 10    	mov    ecx,DWORD PTR ds:0x10038818	100045e1: R_386_32	.bss
100045e5:	83 e1 01             	and    ecx,0x1
100045e8:	0f 85 ea 00 00 00    	jne    100046d8 <NIDesktop::handleMouse(int, int, int, int)+0x5b4>
100045ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100045ef: R_386_32	milliTenthsSinceBoot
100045f3:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	100045f5: R_386_32	milliTenthsSinceBoot
100045f9:	2b 05 08 88 03 10    	sub    eax,DWORD PTR ds:0x10038808	100045fb: R_386_32	.bss
100045ff:	bf b7 0b 00 00       	mov    edi,0xbb7
10004604:	1b 15 0c 88 03 10    	sbb    edx,DWORD PTR ds:0x1003880c	10004606: R_386_32	.bss
1000460a:	39 c7                	cmp    edi,eax
1000460c:	19 d1                	sbb    ecx,edx
1000460e:	0f 82 95 00 00 00    	jb     100046a9 <NIDesktop::handleMouse(int, int, int, int)+0x585>
10004614:	8b 56 1c             	mov    edx,DWORD PTR [esi+0x1c]
10004617:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000461a:	29 d0                	sub    eax,edx
1000461c:	83 f8 18             	cmp    eax,0x18
1000461f:	0f 8f 84 00 00 00    	jg     100046a9 <NIDesktop::handleMouse(int, int, int, int)+0x585>
10004625:	f6 46 3c 01          	test   BYTE PTR [esi+0x3c],0x1
10004629:	75 7e                	jne    100046a9 <NIDesktop::handleMouse(int, int, int, int)+0x585>
1000462b:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
1000462f:	74 26                	je     10004657 <NIDesktop::handleMouse(int, int, int, int)+0x533>
10004631:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
10004634:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
10004637:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
1000463a:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
1000463d:	8b 46 34             	mov    eax,DWORD PTR [esi+0x34]
10004640:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
10004643:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
10004646:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
10004649:	50                   	push   eax
1000464a:	50                   	push   eax
1000464b:	56                   	push   esi
1000464c:	53                   	push   ebx
1000464d:	e8 fc ff ff ff       	call   1000464e <NIDesktop::handleMouse(int, int, int, int)+0x52a>	1000464e: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
10004652:	83 c4 10             	add    esp,0x10
10004655:	eb 3b                	jmp    10004692 <NIDesktop::handleMouse(int, int, int, int)+0x56e>
10004657:	89 56 30             	mov    DWORD PTR [esi+0x30],edx
1000465a:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
10004661:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10004664:	c7 46 18 00 00 00 00 	mov    DWORD PTR [esi+0x18],0x0
1000466b:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
1000466e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
10004671:	89 46 34             	mov    DWORD PTR [esi+0x34],eax
10004674:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
10004677:	89 46 38             	mov    DWORD PTR [esi+0x38],eax
1000467a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000467d:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
10004683:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
10004686:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004689:	8b 80 10 04 00 00    	mov    eax,DWORD PTR [eax+0x410]
1000468f:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
10004692:	83 ec 0c             	sub    esp,0xc
10004695:	80 76 28 01          	xor    BYTE PTR [esi+0x28],0x1
10004699:	56                   	push   esi
1000469a:	e8 fc ff ff ff       	call   1000469b <NIDesktop::handleMouse(int, int, int, int)+0x577>	1000469b: R_386_PC32	NIWindow::rerender()
1000469f:	89 1c 24             	mov    DWORD PTR [esp],ebx
100046a2:	e8 fc ff ff ff       	call   100046a3 <NIDesktop::handleMouse(int, int, int, int)+0x57f>	100046a3: R_386_PC32	NIDesktop::completeRefresh()
100046a7:	eb 11                	jmp    100046ba <NIDesktop::handleMouse(int, int, int, int)+0x596>
100046a9:	8b 03                	mov    eax,DWORD PTR [ebx]
100046ab:	8b 00                	mov    eax,DWORD PTR [eax]
100046ad:	39 30                	cmp    DWORD PTR [eax],esi
100046af:	74 0c                	je     100046bd <NIDesktop::handleMouse(int, int, int, int)+0x599>
100046b1:	50                   	push   eax
100046b2:	50                   	push   eax
100046b3:	56                   	push   esi
100046b4:	53                   	push   ebx
100046b5:	e8 fc ff ff ff       	call   100046b6 <NIDesktop::handleMouse(int, int, int, int)+0x592>	100046b6: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
100046ba:	83 c4 10             	add    esp,0x10
100046bd:	a1 00 00 00 00       	mov    eax,ds:0x0	100046be: R_386_32	milliTenthsSinceBoot
100046c2:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	100046c4: R_386_32	milliTenthsSinceBoot
100046c8:	a3 08 88 03 10       	mov    ds:0x10038808,eax	100046c9: R_386_32	.bss
100046cd:	89 15 0c 88 03 10    	mov    DWORD PTR ds:0x1003880c,edx	100046cf: R_386_32	.bss
100046d3:	e9 04 01 00 00       	jmp    100047dc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100046d8:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100046da: R_386_32	movingWin
100046df:	0f 85 f7 00 00 00    	jne    100047dc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100046e5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100046e8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
100046eb:	89 d1                	mov    ecx,edx
100046ed:	83 e8 0e             	sub    eax,0xe
100046f0:	2b 4e 1c             	sub    ecx,DWORD PTR [esi+0x1c]
100046f3:	39 c8                	cmp    eax,ecx
100046f5:	7f 37                	jg     1000472e <NIDesktop::handleMouse(int, int, int, int)+0x60a>
100046f7:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
100046fb:	75 31                	jne    1000472e <NIDesktop::handleMouse(int, int, int, int)+0x60a>
100046fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004700:	c7 43 10 00 04 00 00 	mov    DWORD PTR [ebx+0x10],0x400
10004707:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10004709: R_386_32	movingWin
1000470d:	55                   	push   ebp
1000470e:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	10004710: R_386_32	movingType
10004718:	55                   	push   ebp
10004719:	a3 14 88 03 10       	mov    ds:0x10038814,eax	1000471a: R_386_32	.bss
1000471e:	56                   	push   esi
1000471f:	89 15 10 88 03 10    	mov    DWORD PTR ds:0x10038810,edx	10004721: R_386_32	.bss
10004725:	53                   	push   ebx
10004726:	e8 fc ff ff ff       	call   10004727 <NIDesktop::handleMouse(int, int, int, int)+0x603>	10004727: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
1000472b:	83 c4 10             	add    esp,0x10
1000472e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004731:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
10004734:	89 d1                	mov    ecx,edx
10004736:	83 e8 0e             	sub    eax,0xe
10004739:	2b 4e 18             	sub    ecx,DWORD PTR [esi+0x18]
1000473c:	39 c8                	cmp    eax,ecx
1000473e:	7f 55                	jg     10004795 <NIDesktop::handleMouse(int, int, int, int)+0x671>
10004740:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
10004744:	75 4f                	jne    10004795 <NIDesktop::handleMouse(int, int, int, int)+0x671>
10004746:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004748: R_386_32	movingWin
1000474d:	75 33                	jne    10004782 <NIDesktop::handleMouse(int, int, int, int)+0x65e>
1000474f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004752:	c7 43 10 00 05 00 00 	mov    DWORD PTR [ebx+0x10],0x500
10004759:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	1000475b: R_386_32	movingWin
1000475f:	57                   	push   edi
10004760:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	10004762: R_386_32	movingType
1000476a:	57                   	push   edi
1000476b:	89 15 14 88 03 10    	mov    DWORD PTR ds:0x10038814,edx	1000476d: R_386_32	.bss
10004771:	56                   	push   esi
10004772:	a3 10 88 03 10       	mov    ds:0x10038810,eax	10004773: R_386_32	.bss
10004777:	53                   	push   ebx
10004778:	e8 fc ff ff ff       	call   10004779 <NIDesktop::handleMouse(int, int, int, int)+0x655>	10004779: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
1000477d:	83 c4 10             	add    esp,0x10
10004780:	eb 13                	jmp    10004795 <NIDesktop::handleMouse(int, int, int, int)+0x671>
10004782:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	10004784: R_386_32	movingType
1000478c:	c7 43 10 00 03 00 00 	mov    DWORD PTR [ebx+0x10],0x300
10004793:	eb 47                	jmp    100047dc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
10004795:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004797: R_386_32	movingWin
1000479c:	75 3e                	jne    100047dc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
1000479e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
100047a1:	2b 46 1c             	sub    eax,DWORD PTR [esi+0x1c]
100047a4:	83 f8 18             	cmp    eax,0x18
100047a7:	7f 33                	jg     100047dc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047a9:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
100047ad:	75 2d                	jne    100047dc <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
100047af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
100047b2:	2b 56 18             	sub    edx,DWORD PTR [esi+0x18]
100047b5:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	100047b7: R_386_32	movingWin
100047bb:	51                   	push   ecx
100047bc:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	100047be: R_386_32	movingType
100047c6:	51                   	push   ecx
100047c7:	89 15 14 88 03 10    	mov    DWORD PTR ds:0x10038814,edx	100047c9: R_386_32	.bss
100047cd:	56                   	push   esi
100047ce:	a3 10 88 03 10       	mov    ds:0x10038810,eax	100047cf: R_386_32	.bss
100047d3:	53                   	push   ebx
100047d4:	e8 fc ff ff ff       	call   100047d5 <NIDesktop::handleMouse(int, int, int, int)+0x6b1>	100047d5: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
100047d9:	83 c4 10             	add    esp,0x10
100047dc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100047df:	83 ec 0c             	sub    esp,0xc
100047e2:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
100047e8:	8b 0a                	mov    ecx,DWORD PTR [edx]
100047ea:	6a 00                	push   0x0
100047ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
100047ef:	05 00 00 00 00       	add    eax,0x0	100047f0: R_386_32	___mouse_data
100047f4:	50                   	push   eax
100047f5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100047f8:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100047fb:	52                   	push   edx
100047fc:	ff 51 30             	call   DWORD PTR [ecx+0x30]
100047ff:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
10004803:	a3 18 88 03 10       	mov    ds:0x10038818,eax	10004804: R_386_32	.bss
10004808:	83 c4 4c             	add    esp,0x4c
1000480b:	5b                   	pop    ebx
1000480c:	5e                   	pop    esi
1000480d:	5f                   	pop    edi
1000480e:	5d                   	pop    ebp
1000480f:	c3                   	ret    
10004810:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004813:	89 6f 20             	mov    DWORD PTR [edi+0x20],ebp
10004816:	83 ec 0c             	sub    esp,0xc
10004819:	89 47 24             	mov    DWORD PTR [edi+0x24],eax
1000481c:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000481e: R_386_32	movingWin
10004826:	57                   	push   edi
10004827:	e8 fc ff ff ff       	call   10004828 <NIDesktop::handleMouse(int, int, int, int)+0x704>	10004828: R_386_PC32	NIWindow::rerender()
1000482c:	59                   	pop    ecx
1000482d:	5d                   	pop    ebp
1000482e:	57                   	push   edi
1000482f:	53                   	push   ebx
10004830:	e8 fc ff ff ff       	call   10004831 <NIDesktop::handleMouse(int, int, int, int)+0x70d>	10004831: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004835:	58                   	pop    eax
10004836:	5a                   	pop    edx
10004837:	57                   	push   edi
10004838:	53                   	push   ebx
10004839:	e8 fc ff ff ff       	call   1000483a <NIDesktop::handleMouse(int, int, int, int)+0x716>	1000483a: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
1000483e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10004845:	83 c4 10             	add    esp,0x10
10004848:	e9 7f fd ff ff       	jmp    100045cc <NIDesktop::handleMouse(int, int, int, int)+0x4a8>
1000484d:	89 78 18             	mov    DWORD PTR [eax+0x18],edi
10004850:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004852: R_386_32	movingWin
1000485a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
1000485d:	2b 15 10 88 03 10    	sub    edx,DWORD PTR ds:0x10038810	1000485f: R_386_32	.bss
10004863:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
10004866:	52                   	push   edx
10004867:	52                   	push   edx
10004868:	50                   	push   eax
10004869:	53                   	push   ebx
1000486a:	e8 fc ff ff ff       	call   1000486b <NIDesktop::handleMouse(int, int, int, int)+0x747>	1000486b: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000486f:	83 c4 10             	add    esp,0x10
10004872:	e9 42 fb ff ff       	jmp    100043b9 <NIDesktop::handleMouse(int, int, int, int)+0x295>

10004877 <NiHandleMouse(int, int, int, int)>:
10004877:	83 ec 18             	sub    esp,0x18
1000487a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000487e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004882:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004886:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000488a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000488c: R_386_32	mouseDesktop
10004890:	e8 fc ff ff ff       	call   10004891 <NiHandleMouse(int, int, int, int)+0x1a>	10004891: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
10004895:	83 c4 2c             	add    esp,0x2c
10004898:	c3                   	ret    

10004899 <drawVGAChar(int, int, int)>:
10004899:	55                   	push   ebp
1000489a:	57                   	push   edi
1000489b:	56                   	push   esi
1000489c:	53                   	push   ebx
1000489d:	31 db                	xor    ebx,ebx
1000489f:	83 ec 1c             	sub    esp,0x1c
100048a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100048a6:	c1 e0 04             	shl    eax,0x4
100048a9:	89 04 24             	mov    DWORD PTR [esp],eax
100048ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100048b0:	c1 e0 04             	shl    eax,0x4
100048b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100048b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100048bb:	c1 e0 03             	shl    eax,0x3
100048be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100048c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
100048c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
100048c9:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	100048cc: R_386_32	cp
100048d0:	8d 3c 19             	lea    edi,[ecx+ebx*1]
100048d3:	31 f6                	xor    esi,esi
100048d5:	84 c0                	test   al,al
100048d7:	79 22                	jns    100048fb <drawVGAChar(int, int, int)+0x62>
100048d9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100048dd:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100048df: R_386_32	screen
100048e3:	8b 0a                	mov    ecx,DWORD PTR [edx]
100048e5:	6a 00                	push   0x0
100048e7:	57                   	push   edi
100048e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100048ec:	8d 2c 06             	lea    ebp,[esi+eax*1]
100048ef:	55                   	push   ebp
100048f0:	52                   	push   edx
100048f1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
100048f4:	83 c4 10             	add    esp,0x10
100048f7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
100048fb:	d1 e0                	shl    eax,1
100048fd:	46                   	inc    esi
100048fe:	83 fe 08             	cmp    esi,0x8
10004901:	75 d2                	jne    100048d5 <drawVGAChar(int, int, int)+0x3c>
10004903:	43                   	inc    ebx
10004904:	83 fb 10             	cmp    ebx,0x10
10004907:	75 b9                	jne    100048c2 <drawVGAChar(int, int, int)+0x29>
10004909:	83 c4 1c             	add    esp,0x1c
1000490c:	5b                   	pop    ebx
1000490d:	5e                   	pop    esi
1000490e:	5f                   	pop    edi
1000490f:	5d                   	pop    ebp
10004910:	c3                   	ret    

10004911 <NiDisplayRAM(void*)>:
10004911:	83 ec 0c             	sub    esp,0xc
10004914:	a1 00 00 00 00       	mov    eax,ds:0x0	10004915: R_386_32	irqDisableCounter
10004919:	48                   	dec    eax
1000491a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000491b: R_386_32	irqDisableCounter
1000491f:	75 01                	jne    10004922 <NiDisplayRAM(void*)+0x11>
10004921:	fb                   	sti    
10004922:	50                   	push   eax
10004923:	6a 3f                	push   0x3f
10004925:	6a 00                	push   0x0
10004927:	6a 00                	push   0x0
10004929:	e8 fc ff ff ff       	call   1000492a <NiDisplayRAM(void*)+0x19>	1000492a: R_386_PC32	drawVGAChar(int, int, int)
1000492e:	83 c4 0c             	add    esp,0xc
10004931:	6a 3f                	push   0x3f
10004933:	6a 00                	push   0x0
10004935:	6a 01                	push   0x1
10004937:	e8 fc ff ff ff       	call   10004938 <NiDisplayRAM(void*)+0x27>	10004938: R_386_PC32	drawVGAChar(int, int, int)
1000493c:	83 c4 0c             	add    esp,0xc
1000493f:	6a 25                	push   0x25
10004941:	6a 00                	push   0x0
10004943:	6a 02                	push   0x2
10004945:	e8 fc ff ff ff       	call   10004946 <NiDisplayRAM(void*)+0x35>	10004946: R_386_PC32	drawVGAChar(int, int, int)
1000494a:	83 c4 0c             	add    esp,0xc
1000494d:	6a 20                	push   0x20
1000494f:	6a 00                	push   0x0
10004951:	6a 03                	push   0x3
10004953:	e8 fc ff ff ff       	call   10004954 <NiDisplayRAM(void*)+0x43>	10004954: R_386_PC32	drawVGAChar(int, int, int)
10004958:	83 c4 0c             	add    esp,0xc
1000495b:	6a 52                	push   0x52
1000495d:	6a 00                	push   0x0
1000495f:	6a 04                	push   0x4
10004961:	e8 fc ff ff ff       	call   10004962 <NiDisplayRAM(void*)+0x51>	10004962: R_386_PC32	drawVGAChar(int, int, int)
10004966:	83 c4 0c             	add    esp,0xc
10004969:	6a 41                	push   0x41
1000496b:	6a 00                	push   0x0
1000496d:	6a 05                	push   0x5
1000496f:	e8 fc ff ff ff       	call   10004970 <NiDisplayRAM(void*)+0x5f>	10004970: R_386_PC32	drawVGAChar(int, int, int)
10004974:	83 c4 0c             	add    esp,0xc
10004977:	6a 4d                	push   0x4d
10004979:	6a 00                	push   0x0
1000497b:	6a 06                	push   0x6
1000497d:	e8 fc ff ff ff       	call   1000497e <NiDisplayRAM(void*)+0x6d>	1000497e: R_386_PC32	drawVGAChar(int, int, int)
10004982:	83 c4 0c             	add    esp,0xc
10004985:	6a 20                	push   0x20
10004987:	6a 00                	push   0x0
10004989:	6a 07                	push   0x7
1000498b:	e8 fc ff ff ff       	call   1000498c <NiDisplayRAM(void*)+0x7b>	1000498c: R_386_PC32	drawVGAChar(int, int, int)
10004990:	83 c4 0c             	add    esp,0xc
10004993:	6a 75                	push   0x75
10004995:	6a 00                	push   0x0
10004997:	6a 08                	push   0x8
10004999:	e8 fc ff ff ff       	call   1000499a <NiDisplayRAM(void*)+0x89>	1000499a: R_386_PC32	drawVGAChar(int, int, int)
1000499e:	83 c4 0c             	add    esp,0xc
100049a1:	6a 73                	push   0x73
100049a3:	6a 00                	push   0x0
100049a5:	6a 09                	push   0x9
100049a7:	e8 fc ff ff ff       	call   100049a8 <NiDisplayRAM(void*)+0x97>	100049a8: R_386_PC32	drawVGAChar(int, int, int)
100049ac:	83 c4 0c             	add    esp,0xc
100049af:	6a 65                	push   0x65
100049b1:	6a 00                	push   0x0
100049b3:	6a 0a                	push   0xa
100049b5:	e8 fc ff ff ff       	call   100049b6 <NiDisplayRAM(void*)+0xa5>	100049b6: R_386_PC32	drawVGAChar(int, int, int)
100049ba:	83 c4 0c             	add    esp,0xc
100049bd:	6a 64                	push   0x64
100049bf:	6a 00                	push   0x0
100049c1:	6a 0b                	push   0xb
100049c3:	e8 fc ff ff ff       	call   100049c4 <NiDisplayRAM(void*)+0xb3>	100049c4: R_386_PC32	drawVGAChar(int, int, int)
100049c8:	83 c4 10             	add    esp,0x10
100049cb:	e9 52 ff ff ff       	jmp    10004922 <NiDisplayRAM(void*)+0x11>

100049d0 <monikaBsod(char*)>:
100049d0:	55                   	push   ebp
100049d1:	57                   	push   edi
100049d2:	31 ff                	xor    edi,edi
100049d4:	56                   	push   esi
100049d5:	53                   	push   ebx
100049d6:	31 db                	xor    ebx,ebx
100049d8:	83 ec 24             	sub    esp,0x24
100049db:	a1 00 00 00 00       	mov    eax,ds:0x0	100049dc: R_386_32	screen
100049e0:	8b 10                	mov    edx,DWORD PTR [eax]
100049e2:	68 ff ff ff 00       	push   0xffffff
100049e7:	50                   	push   eax
100049e8:	ff 52 40             	call   DWORD PTR [edx+0x40]
100049eb:	83 c4 10             	add    esp,0x10
100049ee:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	100049f0: R_386_32	justMonika
100049f4:	8d 43 01             	lea    eax,[ebx+0x1]
100049f7:	84 c9                	test   cl,cl
100049f9:	79 0e                	jns    10004a09 <monikaBsod(char*)+0x39>
100049fb:	8d 51 80             	lea    edx,[ecx-0x80]
100049fe:	83 c3 02             	add    ebx,0x2
10004a01:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	10004a03: R_386_32	justMonika
10004a07:	eb 04                	jmp    10004a0d <monikaBsod(char*)+0x3d>
10004a09:	89 c3                	mov    ebx,eax
10004a0b:	b2 01                	mov    dl,0x1
10004a0d:	0f b6 c1             	movzx  eax,cl
10004a10:	83 e1 03             	and    ecx,0x3
10004a13:	89 c6                	mov    esi,eax
10004a15:	6b c9 55             	imul   ecx,ecx,0x55
10004a18:	c1 fe 05             	sar    esi,0x5
10004a1b:	c1 f8 02             	sar    eax,0x2
10004a1e:	83 e6 03             	and    esi,0x3
10004a21:	83 e0 07             	and    eax,0x7
10004a24:	6b f6 55             	imul   esi,esi,0x55
10004a27:	6b c0 24             	imul   eax,eax,0x24
10004a2a:	c1 e6 10             	shl    esi,0x10
10004a2d:	c1 e0 08             	shl    eax,0x8
10004a30:	09 f0                	or     eax,esi
10004a32:	31 f6                	xor    esi,esi
10004a34:	09 c8                	or     eax,ecx
10004a36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004a3a:	0f b6 c2             	movzx  eax,dl
10004a3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004a41:	8d 04 37             	lea    eax,[edi+esi*1]
10004a44:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10004a48:	7f 10                	jg     10004a5a <monikaBsod(char*)+0x8a>
10004a4a:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
10004a4e:	81 ff ff af 04 00    	cmp    edi,0x4afff
10004a54:	7e 98                	jle    100049ee <monikaBsod(char*)+0x1e>
10004a56:	31 db                	xor    ebx,ebx
10004a58:	eb 25                	jmp    10004a7f <monikaBsod(char*)+0xaf>
10004a5a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004a5c: R_386_32	screen
10004a60:	b9 80 02 00 00       	mov    ecx,0x280
10004a65:	8b 2a                	mov    ebp,DWORD PTR [edx]
10004a67:	46                   	inc    esi
10004a68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10004a6c:	99                   	cdq    
10004a6d:	f7 f9                	idiv   ecx
10004a6f:	50                   	push   eax
10004a70:	52                   	push   edx
10004a71:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004a73: R_386_32	screen
10004a77:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10004a7a:	83 c4 10             	add    esp,0x10
10004a7d:	eb c2                	jmp    10004a41 <monikaBsod(char*)+0x71>
10004a7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004a83:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
10004a87:	84 c0                	test   al,al
10004a89:	74 1d                	je     10004aa8 <monikaBsod(char*)+0xd8>
10004a8b:	b9 19 00 00 00       	mov    ecx,0x19
10004a90:	52                   	push   edx
10004a91:	50                   	push   eax
10004a92:	89 d8                	mov    eax,ebx
10004a94:	43                   	inc    ebx
10004a95:	99                   	cdq    
10004a96:	f7 f9                	idiv   ecx
10004a98:	83 c0 0a             	add    eax,0xa
10004a9b:	42                   	inc    edx
10004a9c:	50                   	push   eax
10004a9d:	52                   	push   edx
10004a9e:	e8 fc ff ff ff       	call   10004a9f <monikaBsod(char*)+0xcf>	10004a9f: R_386_PC32	drawVGAChar(int, int, int)
10004aa3:	83 c4 10             	add    esp,0x10
10004aa6:	eb d7                	jmp    10004a7f <monikaBsod(char*)+0xaf>
10004aa8:	f4                   	hlt    
10004aa9:	eb fd                	jmp    10004aa8 <monikaBsod(char*)+0xd8>

10004aab <NiInstallSysHooks()>:
10004aab:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004aad: R_386_32	guiPanicHandler
	10004ab1: R_386_32	monikaBsod(char*)
10004ab5:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10004ab7: R_386_32	systemCallHandlers
	10004abb: R_386_32	NiSystemCallHandler(regs*)
10004abf:	c3                   	ret    

10004ac0 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
10004ac0:	56                   	push   esi
10004ac1:	53                   	push   ebx
10004ac2:	83 ec 10             	sub    esp,0x10
10004ac5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10004ac9:	68 e7 54 00 10       	push   0x100054e7	10004aca: R_386_32	.text
10004ace:	e8 fc ff ff ff       	call   10004acf <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	10004acf: R_386_PC32	Dbg::kprintf(char const*, ...)
10004ad3:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10004ada:	e8 fc ff ff ff       	call   10004adb <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x1b>	10004adb: R_386_PC32	malloc
10004adf:	89 c6                	mov    esi,eax
10004ae1:	58                   	pop    eax
10004ae2:	5a                   	pop    edx
10004ae3:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10004ae9:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10004aef:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10004af5:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10004afb:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004afd: R_386_32	ctxt
10004b01:	56                   	push   esi
10004b02:	e8 fc ff ff ff       	call   10004b03 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x43>	10004b03: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10004b07:	83 c4 18             	add    esp,0x18
10004b0a:	56                   	push   esi
10004b0b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b0d: R_386_32	desktop
10004b11:	e8 fc ff ff ff       	call   10004b12 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x52>	10004b12: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004b16:	59                   	pop    ecx
10004b17:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b19: R_386_32	desktop
10004b1d:	e8 fc ff ff ff       	call   10004b1e <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	10004b1e: R_386_PC32	NIDesktop::completeRefresh()
10004b22:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10004b28:	89 34 24             	mov    DWORD PTR [esp],esi
10004b2b:	e8 fc ff ff ff       	call   10004b2c <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x6c>	10004b2c: R_386_PC32	NIWindow::drawBasicWindow()
10004b30:	83 c4 14             	add    esp,0x14
10004b33:	31 c0                	xor    eax,eax
10004b35:	31 d2                	xor    edx,edx
10004b37:	5b                   	pop    ebx
10004b38:	5e                   	pop    esi
10004b39:	c3                   	ret    

10004b3a <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004b3a:	55                   	push   ebp
10004b3b:	57                   	push   edi
10004b3c:	56                   	push   esi
10004b3d:	31 f6                	xor    esi,esi
10004b3f:	53                   	push   ebx
10004b40:	83 ec 28             	sub    esp,0x28
10004b43:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10004b47:	68 02 55 00 10       	push   0x10005502	10004b48: R_386_32	.text
10004b4c:	e8 fc ff ff ff       	call   10004b4d <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x13>	10004b4d: R_386_PC32	Dbg::kprintf(char const*, ...)
10004b51:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10004b57:	83 c4 10             	add    esp,0x10
10004b5a:	31 c0                	xor    eax,eax
10004b5c:	39 73 24             	cmp    DWORD PTR [ebx+0x24],esi
10004b5f:	7e 30                	jle    10004b91 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x57>
10004b61:	31 ff                	xor    edi,edi
10004b63:	39 7b 20             	cmp    DWORD PTR [ebx+0x20],edi
10004b66:	7e 26                	jle    10004b8e <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x54>
10004b68:	8b 95 b8 00 00 00    	mov    edx,DWORD PTR [ebp+0xb8]
10004b6e:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
10004b71:	83 fa ff             	cmp    edx,0xffffffff
10004b74:	74 14                	je     10004b8a <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x50>
10004b76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004b7a:	52                   	push   edx
10004b7b:	56                   	push   esi
10004b7c:	57                   	push   edi
10004b7d:	53                   	push   ebx
10004b7e:	e8 fc ff ff ff       	call   10004b7f <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x45>	10004b7f: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004b83:	83 c4 10             	add    esp,0x10
10004b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004b8a:	40                   	inc    eax
10004b8b:	47                   	inc    edi
10004b8c:	eb d5                	jmp    10004b63 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x29>
10004b8e:	46                   	inc    esi
10004b8f:	eb cb                	jmp    10004b5c <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x22>
10004b91:	50                   	push   eax
10004b92:	50                   	push   eax
10004b93:	53                   	push   ebx
10004b94:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b96: R_386_32	desktop
10004b9a:	e8 fc ff ff ff       	call   10004b9b <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x61>	10004b9b: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004b9f:	83 c4 2c             	add    esp,0x2c
10004ba2:	31 c0                	xor    eax,eax
10004ba4:	5b                   	pop    ebx
10004ba5:	31 d2                	xor    edx,edx
10004ba7:	5e                   	pop    esi
10004ba8:	5f                   	pop    edi
10004ba9:	5d                   	pop    ebp
10004baa:	c3                   	ret    

10004bab <NiSystemCallHandler(regs*)>:
10004bab:	53                   	push   ebx
10004bac:	83 ec 08             	sub    esp,0x8
10004baf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004bb3:	8b 59 20             	mov    ebx,DWORD PTR [ecx+0x20]
10004bb6:	83 fb 04             	cmp    ebx,0x4
10004bb9:	74 1d                	je     10004bd8 <NiSystemCallHandler(regs*)+0x2d>
10004bbb:	83 fb 05             	cmp    ebx,0x5
10004bbe:	74 2a                	je     10004bea <NiSystemCallHandler(regs*)+0x3f>
10004bc0:	83 c8 ff             	or     eax,0xffffffff
10004bc3:	85 db                	test   ebx,ebx
10004bc5:	89 c2                	mov    edx,eax
10004bc7:	75 44                	jne    10004c0d <NiSystemCallHandler(regs*)+0x62>
10004bc9:	50                   	push   eax
10004bca:	50                   	push   eax
10004bcb:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10004bce:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10004bd1:	e8 fc ff ff ff       	call   10004bd2 <NiSystemCallHandler(regs*)+0x27>	10004bd2: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
10004bd6:	eb 0d                	jmp    10004be5 <NiSystemCallHandler(regs*)+0x3a>
10004bd8:	50                   	push   eax
10004bd9:	50                   	push   eax
10004bda:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10004bdd:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10004be0:	e8 fc ff ff ff       	call   10004be1 <NiSystemCallHandler(regs*)+0x36>	10004be1: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
10004be5:	83 c4 10             	add    esp,0x10
10004be8:	eb 23                	jmp    10004c0d <NiSystemCallHandler(regs*)+0x62>
10004bea:	83 ec 0c             	sub    esp,0xc
10004bed:	8b 59 24             	mov    ebx,DWORD PTR [ecx+0x24]
10004bf0:	68 24 55 00 10       	push   0x10005524	10004bf1: R_386_32	.text
10004bf5:	e8 fc ff ff ff       	call   10004bf6 <NiSystemCallHandler(regs*)+0x4b>	10004bf6: R_386_PC32	Dbg::kprintf(char const*, ...)
10004bfa:	58                   	pop    eax
10004bfb:	ff b3 a0 00 00 00    	push   DWORD PTR [ebx+0xa0]
10004c01:	e8 fc ff ff ff       	call   10004c02 <NiSystemCallHandler(regs*)+0x57>	10004c02: R_386_PC32	NIWindow::drawBasicWindow()
10004c06:	83 c4 10             	add    esp,0x10
10004c09:	31 c0                	xor    eax,eax
10004c0b:	31 d2                	xor    edx,edx
10004c0d:	83 c4 08             	add    esp,0x8
10004c10:	5b                   	pop    ebx
10004c11:	c3                   	ret    

10004c12 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004c12:	83 ec 18             	sub    esp,0x18
10004c15:	68 24 55 00 10       	push   0x10005524	10004c16: R_386_32	.text
10004c1a:	e8 fc ff ff ff       	call   10004c1b <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x9>	10004c1b: R_386_PC32	Dbg::kprintf(char const*, ...)
10004c1f:	58                   	pop    eax
10004c20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004c24:	ff b0 a0 00 00 00    	push   DWORD PTR [eax+0xa0]
10004c2a:	e8 fc ff ff ff       	call   10004c2b <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x19>	10004c2b: R_386_PC32	NIWindow::drawBasicWindow()
10004c2f:	31 c0                	xor    eax,eax
10004c31:	31 d2                	xor    edx,edx
10004c33:	83 c4 1c             	add    esp,0x1c
10004c36:	c3                   	ret    
10004c37:	90                   	nop

10004c38 <NIWindow::invalidate()>:
10004c38:	53                   	push   ebx
10004c39:	83 ec 08             	sub    esp,0x8
10004c3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004c40:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
10004c44:	74 1d                	je     10004c63 <NIWindow::invalidate()+0x2b>
10004c46:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
10004c4a:	74 17                	je     10004c63 <NIWindow::invalidate()+0x2b>
10004c4c:	83 ec 0c             	sub    esp,0xc
10004c4f:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004c52:	e8 fc ff ff ff       	call   10004c53 <NIWindow::invalidate()+0x1b>	10004c53: R_386_PC32	free
10004c57:	59                   	pop    ecx
10004c58:	ff 73 14             	push   DWORD PTR [ebx+0x14]
10004c5b:	e8 fc ff ff ff       	call   10004c5c <NIWindow::invalidate()+0x24>	10004c5c: R_386_PC32	free
10004c60:	83 c4 10             	add    esp,0x10
10004c63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10004c6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10004c71:	c6 43 0c 00          	mov    BYTE PTR [ebx+0xc],0x0
10004c75:	83 c4 08             	add    esp,0x8
10004c78:	5b                   	pop    ebx
10004c79:	c3                   	ret    

10004c7a <NIWindow::putpixel(int, int, unsigned int)>:
10004c7a:	56                   	push   esi
10004c7b:	53                   	push   ebx
10004c7c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10004c80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004c84:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
10004c87:	0f af 43 20          	imul   eax,DWORD PTR [ebx+0x20]
10004c8b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004c8f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10004c93:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004c96:	83 fe 04             	cmp    esi,0x4
10004c99:	75 05                	jne    10004ca0 <NIWindow::putpixel(int, int, unsigned int)+0x26>
10004c9b:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
10004c9e:	eb 0e                	jmp    10004cae <NIWindow::putpixel(int, int, unsigned int)+0x34>
10004ca0:	83 fe 02             	cmp    esi,0x2
10004ca3:	75 06                	jne    10004cab <NIWindow::putpixel(int, int, unsigned int)+0x31>
10004ca5:	66 89 0c 42          	mov    WORD PTR [edx+eax*2],cx
10004ca9:	eb 03                	jmp    10004cae <NIWindow::putpixel(int, int, unsigned int)+0x34>
10004cab:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
10004cae:	5b                   	pop    ebx
10004caf:	5e                   	pop    esi
10004cb0:	c3                   	ret    
10004cb1:	90                   	nop

10004cb2 <NIWindow::drawBasicWindow()>:
10004cb2:	55                   	push   ebp
10004cb3:	57                   	push   edi
10004cb4:	56                   	push   esi
10004cb5:	31 f6                	xor    esi,esi
10004cb7:	53                   	push   ebx
10004cb8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
10004cbc:	39 75 24             	cmp    DWORD PTR [ebp+0x24],esi
10004cbf:	7e 2e                	jle    10004cef <NIWindow::drawBasicWindow()+0x3d>
10004cc1:	31 db                	xor    ebx,ebx
10004cc3:	83 fe 19             	cmp    esi,0x19
10004cc6:	0f 9e c3             	setle  bl
10004cc9:	31 ff                	xor    edi,edi
10004ccb:	4b                   	dec    ebx
10004ccc:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
10004cd2:	81 c3 ff ff ff 00    	add    ebx,0xffffff
10004cd8:	39 7d 20             	cmp    DWORD PTR [ebp+0x20],edi
10004cdb:	7e 0f                	jle    10004cec <NIWindow::drawBasicWindow()+0x3a>
10004cdd:	53                   	push   ebx
10004cde:	56                   	push   esi
10004cdf:	57                   	push   edi
10004ce0:	47                   	inc    edi
10004ce1:	55                   	push   ebp
10004ce2:	e8 fc ff ff ff       	call   10004ce3 <NIWindow::drawBasicWindow()+0x31>	10004ce3: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004ce7:	83 c4 10             	add    esp,0x10
10004cea:	eb ec                	jmp    10004cd8 <NIWindow::drawBasicWindow()+0x26>
10004cec:	46                   	inc    esi
10004ced:	eb cd                	jmp    10004cbc <NIWindow::drawBasicWindow()+0xa>
10004cef:	5b                   	pop    ebx
10004cf0:	5e                   	pop    esi
10004cf1:	5f                   	pop    edi
10004cf2:	5d                   	pop    ebp
10004cf3:	c3                   	ret    

10004cf4 <NIWindow::rerender()>:
10004cf4:	57                   	push   edi
10004cf5:	56                   	push   esi
10004cf6:	53                   	push   ebx
10004cf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004cfb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
10004cff:	74 0c                	je     10004d0d <NIWindow::rerender()+0x19>
10004d01:	83 ec 0c             	sub    esp,0xc
10004d04:	53                   	push   ebx
10004d05:	e8 fc ff ff ff       	call   10004d06 <NIWindow::rerender()+0x12>	10004d06: R_386_PC32	NIWindow::invalidate()
10004d0a:	83 c4 10             	add    esp,0x10
10004d0d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10004d10:	83 ec 0c             	sub    esp,0xc
10004d13:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
10004d16:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10004d1d:	50                   	push   eax
10004d1e:	e8 fc ff ff ff       	call   10004d1f <NIWindow::rerender()+0x2b>	10004d1f: R_386_PC32	malloc
10004d23:	0f af 73 20          	imul   esi,DWORD PTR [ebx+0x20]
10004d27:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10004d2a:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
10004d2e:	89 34 24             	mov    DWORD PTR [esp],esi
10004d31:	e8 fc ff ff ff       	call   10004d32 <NIWindow::rerender()+0x3e>	10004d32: R_386_PC32	malloc
10004d36:	83 c4 10             	add    esp,0x10
10004d39:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10004d3c:	31 c0                	xor    eax,eax
10004d3e:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004d41:	7e 6a                	jle    10004dad <NIWindow::rerender()+0xb9>
10004d43:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004d4a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10004d4d:	01 d6                	add    esi,edx
10004d4f:	83 f8 06             	cmp    eax,0x6
10004d52:	7f 1b                	jg     10004d6f <NIWindow::rerender()+0x7b>
10004d54:	8b 0c 85 00 00 00 00 	mov    ecx,DWORD PTR [eax*4+0x0]	10004d57: R_386_32	curveLookup7
10004d5b:	66 89 0e             	mov    WORD PTR [esi],cx
10004d5e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
10004d61:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10004d64: R_386_32	curveLookup7
10004d68:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
10004d6d:	eb 3b                	jmp    10004daa <NIWindow::rerender()+0xb6>
10004d6f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004d72:	8d 79 fa             	lea    edi,[ecx-0x6]
10004d75:	39 c7                	cmp    edi,eax
10004d77:	7f 22                	jg     10004d9b <NIWindow::rerender()+0xa7>
10004d79:	29 c1                	sub    ecx,eax
10004d7b:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10004d7e: R_386_32	curveLookup7
10004d82:	66 89 0e             	mov    WORD PTR [esi],cx
10004d85:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004d88:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10004d8b:	29 c1                	sub    ecx,eax
10004d8d:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10004d90: R_386_32	curveLookup7
10004d94:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
10004d99:	eb 0f                	jmp    10004daa <NIWindow::rerender()+0xb6>
10004d9b:	66 c7 06 00 00       	mov    WORD PTR [esi],0x0
10004da0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
10004da3:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
10004daa:	40                   	inc    eax
10004dab:	eb 91                	jmp    10004d3e <NIWindow::rerender()+0x4a>
10004dad:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
10004db1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10004db5:	5b                   	pop    ebx
10004db6:	5e                   	pop    esi
10004db7:	5f                   	pop    edi
10004db8:	e9 f5 fe ff ff       	jmp    10004cb2 <NIWindow::drawBasicWindow()>
10004dbd:	90                   	nop

10004dbe <NIWindow::changeContext(NIContext*, int, int)>:
10004dbe:	55                   	push   ebp
10004dbf:	57                   	push   edi
10004dc0:	56                   	push   esi
10004dc1:	53                   	push   ebx
10004dc2:	83 ec 18             	sub    esp,0x18
10004dc5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10004dc9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
10004dcd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10004dd1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10004dd5:	53                   	push   ebx
10004dd6:	e8 fc ff ff ff       	call   10004dd7 <NIWindow::changeContext(NIContext*, int, int)+0x19>	10004dd7: R_386_PC32	NIWindow::invalidate()
10004ddb:	89 33                	mov    DWORD PTR [ebx],esi
10004ddd:	89 6b 18             	mov    DWORD PTR [ebx+0x18],ebp
10004de0:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
10004de3:	83 c4 10             	add    esp,0x10
10004de6:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
10004dec:	83 f8 08             	cmp    eax,0x8
10004def:	7f 09                	jg     10004dfa <NIWindow::changeContext(NIContext*, int, int)+0x3c>
10004df1:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
10004df8:	eb 15                	jmp    10004e0f <NIWindow::changeContext(NIContext*, int, int)+0x51>
10004dfa:	83 f8 10             	cmp    eax,0x10
10004dfd:	7f 09                	jg     10004e08 <NIWindow::changeContext(NIContext*, int, int)+0x4a>
10004dff:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
10004e06:	eb 07                	jmp    10004e0f <NIWindow::changeContext(NIContext*, int, int)+0x51>
10004e08:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
10004e0f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10004e13:	83 c4 0c             	add    esp,0xc
10004e16:	5b                   	pop    ebx
10004e17:	5e                   	pop    esi
10004e18:	5f                   	pop    edi
10004e19:	5d                   	pop    ebp
10004e1a:	e9 d5 fe ff ff       	jmp    10004cf4 <NIWindow::rerender()>
10004e1f:	90                   	nop

10004e20 <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
10004e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004e24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10004e28:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
10004e2c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
10004e2f:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
10004e36:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10004e3a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
10004e3e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
10004e41:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10004e48:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10004e4f:	e9 6a ff ff ff       	jmp    10004dbe <NIWindow::changeContext(NIContext*, int, int)>

10004e54 <NIWindow::request()>:
10004e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004e58:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
10004e5c:	75 05                	jne    10004e63 <NIWindow::request()+0xf>
10004e5e:	e9 91 fe ff ff       	jmp    10004cf4 <NIWindow::rerender()>
10004e63:	c3                   	ret    

10004e64 <NIWindow::SHADOW_TEST()>:
10004e64:	55                   	push   ebp
10004e65:	57                   	push   edi
10004e66:	56                   	push   esi
10004e67:	53                   	push   ebx
10004e68:	83 ec 28             	sub    esp,0x28
10004e6b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10004e6f:	53                   	push   ebx
10004e70:	e8 fc ff ff ff       	call   10004e71 <NIWindow::SHADOW_TEST()+0xd>	10004e71: R_386_PC32	NIWindow::request()
10004e75:	83 c4 10             	add    esp,0x10
10004e78:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
10004e7b:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004e7e:	74 10                	je     10004e90 <NIWindow::SHADOW_TEST()+0x2c>
10004e80:	83 ec 0c             	sub    esp,0xc
10004e83:	68 43 55 00 10       	push   0x10005543	10004e84: R_386_32	.text
10004e88:	e8 fc ff ff ff       	call   10004e89 <NIWindow::SHADOW_TEST()+0x25>	10004e89: R_386_PC32	KePanic(char const*)
10004e8d:	83 c4 10             	add    esp,0x10
10004e90:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10004e94:	0f 85 28 01 00 00    	jne    10004fc2 <NIWindow::SHADOW_TEST()+0x15e>
10004e9a:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
10004ea2:	31 ff                	xor    edi,edi
10004ea4:	39 7b 24             	cmp    DWORD PTR [ebx+0x24],edi
10004ea7:	0f 8e 15 01 00 00    	jle    10004fc2 <NIWindow::SHADOW_TEST()+0x15e>
10004ead:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10004eb0:	8d 04 b8             	lea    eax,[eax+edi*4]
10004eb3:	0f b7 30             	movzx  esi,WORD PTR [eax]
10004eb6:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
10004eba:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
10004ebe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004ec2:	89 34 24             	mov    DWORD PTR [esp],esi
10004ec5:	8b 6b 20             	mov    ebp,DWORD PTR [ebx+0x20]
10004ec8:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004ecb:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
10004ecf:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
10004ed2:	0f 8e d4 00 00 00    	jle    10004fac <NIWindow::SHADOW_TEST()+0x148>
10004ed8:	83 ff 05             	cmp    edi,0x5
10004edb:	7e 1f                	jle    10004efc <NIWindow::SHADOW_TEST()+0x98>
10004edd:	8d 41 fb             	lea    eax,[ecx-0x5]
10004ee0:	39 f8                	cmp    eax,edi
10004ee2:	7e 18                	jle    10004efc <NIWindow::SHADOW_TEST()+0x98>
10004ee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004ee8:	83 c0 05             	add    eax,0x5
10004eeb:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004eee:	7d 0c                	jge    10004efc <NIWindow::SHADOW_TEST()+0x98>
10004ef0:	8d 45 fb             	lea    eax,[ebp-0x5]
10004ef3:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004ef6:	0f 8f a8 00 00 00    	jg     10004fa4 <NIWindow::SHADOW_TEST()+0x140>
10004efc:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
10004f00:	be ea 01 00 00       	mov    esi,0x1ea
10004f05:	29 f9                	sub    ecx,edi
10004f07:	89 f0                	mov    eax,esi
10004f09:	83 c1 04             	add    ecx,0x4
10004f0c:	99                   	cdq    
10004f0d:	f7 f9                	idiv   ecx
10004f0f:	89 c1                	mov    ecx,eax
10004f11:	89 f0                	mov    eax,esi
10004f13:	99                   	cdq    
10004f14:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004f18:	83 f8 0a             	cmp    eax,0xa
10004f1b:	7d 05                	jge    10004f22 <NIWindow::SHADOW_TEST()+0xbe>
10004f1d:	b8 0a 00 00 00       	mov    eax,0xa
10004f22:	39 c1                	cmp    ecx,eax
10004f24:	7d 02                	jge    10004f28 <NIWindow::SHADOW_TEST()+0xc4>
10004f26:	89 c1                	mov    ecx,eax
10004f28:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
10004f2b:	b8 ea 01 00 00       	mov    eax,0x1ea
10004f30:	83 c5 04             	add    ebp,0x4
10004f33:	99                   	cdq    
10004f34:	f7 fd                	idiv   ebp
10004f36:	89 c6                	mov    esi,eax
10004f38:	83 f8 0a             	cmp    eax,0xa
10004f3b:	7d 05                	jge    10004f42 <NIWindow::SHADOW_TEST()+0xde>
10004f3d:	be 0a 00 00 00       	mov    esi,0xa
10004f42:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004f45:	8d 68 05             	lea    ebp,[eax+0x5]
10004f48:	b8 ea 01 00 00       	mov    eax,0x1ea
10004f4d:	99                   	cdq    
10004f4e:	f7 fd                	idiv   ebp
10004f50:	39 c6                	cmp    esi,eax
10004f52:	7d 02                	jge    10004f56 <NIWindow::SHADOW_TEST()+0xf2>
10004f54:	89 c6                	mov    esi,eax
10004f56:	89 f0                	mov    eax,esi
10004f58:	89 ca                	mov    edx,ecx
10004f5a:	0f af c6             	imul   eax,esi
10004f5d:	0f af d1             	imul   edx,ecx
10004f60:	0f af f1             	imul   esi,ecx
10004f63:	01 d0                	add    eax,edx
10004f65:	8d 04 c6             	lea    eax,[esi+eax*8]
10004f68:	c1 f8 08             	sar    eax,0x8
10004f6b:	83 f8 66             	cmp    eax,0x66
10004f6e:	7e 46                	jle    10004fb6 <NIWindow::SHADOW_TEST()+0x152>
10004f70:	8d 50 9a             	lea    edx,[eax-0x66]
10004f73:	d1 fa                	sar    edx,1
10004f75:	8d 42 66             	lea    eax,[edx+0x66]
10004f78:	83 f8 73             	cmp    eax,0x73
10004f7b:	7e 39                	jle    10004fb6 <NIWindow::SHADOW_TEST()+0x152>
10004f7d:	83 ea 0d             	sub    edx,0xd
10004f80:	c1 fa 02             	sar    edx,0x2
10004f83:	8d 42 73             	lea    eax,[edx+0x73]
10004f86:	83 f8 7f             	cmp    eax,0x7f
10004f89:	7f 19                	jg     10004fa4 <NIWindow::SHADOW_TEST()+0x140>
10004f8b:	50                   	push   eax
10004f8c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10004f8f:	01 f8                	add    eax,edi
10004f91:	50                   	push   eax
10004f92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004f96:	03 43 18             	add    eax,DWORD PTR [ebx+0x18]
10004f99:	50                   	push   eax
10004f9a:	ff 33                	push   DWORD PTR [ebx]
10004f9c:	e8 fc ff ff ff       	call   10004f9d <NIWindow::SHADOW_TEST()+0x139>	10004f9d: R_386_PC32	NIContext::drvDarken4(int, int, int)
10004fa1:	83 c4 10             	add    esp,0x10
10004fa4:	ff 04 24             	inc    DWORD PTR [esp]
10004fa7:	e9 19 ff ff ff       	jmp    10004ec5 <NIWindow::SHADOW_TEST()+0x61>
10004fac:	47                   	inc    edi
10004fad:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
10004fb1:	e9 ee fe ff ff       	jmp    10004ea4 <NIWindow::SHADOW_TEST()+0x40>
10004fb6:	83 f8 0a             	cmp    eax,0xa
10004fb9:	7d d0                	jge    10004f8b <NIWindow::SHADOW_TEST()+0x127>
10004fbb:	b8 0a 00 00 00       	mov    eax,0xa
10004fc0:	eb c9                	jmp    10004f8b <NIWindow::SHADOW_TEST()+0x127>
10004fc2:	83 c4 1c             	add    esp,0x1c
10004fc5:	5b                   	pop    ebx
10004fc6:	5e                   	pop    esi
10004fc7:	5f                   	pop    edi
10004fc8:	5d                   	pop    ebp
10004fc9:	c3                   	ret    

10004fca <NIWindow::realdraw()>:
10004fca:	55                   	push   ebp
10004fcb:	57                   	push   edi
10004fcc:	56                   	push   esi
10004fcd:	53                   	push   ebx
10004fce:	83 ec 18             	sub    esp,0x18
10004fd1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10004fd5:	53                   	push   ebx
10004fd6:	e8 fc ff ff ff       	call   10004fd7 <NIWindow::realdraw()+0xd>	10004fd7: R_386_PC32	NIWindow::request()
10004fdb:	83 c4 10             	add    esp,0x10
10004fde:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
10004fe1:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004fe4:	74 10                	je     10004ff6 <NIWindow::realdraw()+0x2c>
10004fe6:	83 ec 0c             	sub    esp,0xc
10004fe9:	68 43 55 00 10       	push   0x10005543	10004fea: R_386_32	.text
10004fee:	e8 fc ff ff ff       	call   10004fef <NIWindow::realdraw()+0x25>	10004fef: R_386_PC32	KePanic(char const*)
10004ff3:	83 c4 10             	add    esp,0x10
10004ff6:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10004ffa:	75 46                	jne    10005042 <NIWindow::realdraw()+0x78>
10004ffc:	31 f6                	xor    esi,esi
10004ffe:	39 73 24             	cmp    DWORD PTR [ebx+0x24],esi
10005001:	7e 3f                	jle    10005042 <NIWindow::realdraw()+0x78>
10005003:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10005006:	8d 04 b0             	lea    eax,[eax+esi*4]
10005009:	0f b7 28             	movzx  ebp,WORD PTR [eax]
1000500c:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
10005010:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10005013:	89 c2                	mov    edx,eax
10005015:	29 fa                	sub    edx,edi
10005017:	39 ea                	cmp    edx,ebp
10005019:	7e 24                	jle    1000503f <NIWindow::realdraw()+0x75>
1000501b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000501e:	0f af c6             	imul   eax,esi
10005021:	01 e8                	add    eax,ebp
10005023:	ff 34 82             	push   DWORD PTR [edx+eax*4]
10005026:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10005029:	01 f0                	add    eax,esi
1000502b:	50                   	push   eax
1000502c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000502f:	01 e8                	add    eax,ebp
10005031:	45                   	inc    ebp
10005032:	50                   	push   eax
10005033:	ff 33                	push   DWORD PTR [ebx]
10005035:	e8 fc ff ff ff       	call   10005036 <NIWindow::realdraw()+0x6c>	10005036: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
1000503a:	83 c4 10             	add    esp,0x10
1000503d:	eb d1                	jmp    10005010 <NIWindow::realdraw()+0x46>
1000503f:	46                   	inc    esi
10005040:	eb bc                	jmp    10004ffe <NIWindow::realdraw()+0x34>
10005042:	83 c4 0c             	add    esp,0xc
10005045:	5b                   	pop    ebx
10005046:	5e                   	pop    esi
10005047:	5f                   	pop    edi
10005048:	5d                   	pop    ebp
10005049:	c3                   	ret    

1000504a <List<NIWindow*>::insertAtHead(NIWindow*)>:
1000504a:	53                   	push   ebx
1000504b:	83 ec 14             	sub    esp,0x14
1000504e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10005052:	6a 0c                	push   0xc
10005054:	e8 fc ff ff ff       	call   10005055 <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	10005055: R_386_PC32	malloc
10005059:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
1000505d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10005064:	89 10                	mov    DWORD PTR [eax],edx
10005066:	83 c4 10             	add    esp,0x10
10005069:	8b 13                	mov    edx,DWORD PTR [ebx]
1000506b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000506e:	85 d2                	test   edx,edx
10005070:	74 05                	je     10005077 <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
10005072:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10005075:	eb 03                	jmp    1000507a <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
10005077:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000507a:	89 03                	mov    DWORD PTR [ebx],eax
1000507c:	83 c4 08             	add    esp,0x8
1000507f:	5b                   	pop    ebx
10005080:	c3                   	ret    
10005081:	90                   	nop

10005082 <List<NIWindow*>::deleteElement(NIWindow*&)>:
10005082:	57                   	push   edi
10005083:	56                   	push   esi
10005084:	53                   	push   ebx
10005085:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10005089:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000508d:	8b 19                	mov    ebx,DWORD PTR [ecx]
1000508f:	85 db                	test   ebx,ebx
10005091:	74 5e                	je     100050f1 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10005093:	8b 30                	mov    esi,DWORD PTR [eax]
10005095:	89 da                	mov    edx,ebx
10005097:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
1000509a:	8b 3a                	mov    edi,DWORD PTR [edx]
1000509c:	85 c0                	test   eax,eax
1000509e:	74 08                	je     100050a8 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
100050a0:	39 f7                	cmp    edi,esi
100050a2:	73 04                	jae    100050a8 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
100050a4:	89 c2                	mov    edx,eax
100050a6:	eb ef                	jmp    10005097 <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
100050a8:	39 f7                	cmp    edi,esi
100050aa:	75 45                	jne    100050f1 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
100050ac:	39 d3                	cmp    ebx,edx
100050ae:	75 18                	jne    100050c8 <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
100050b0:	89 01                	mov    DWORD PTR [ecx],eax
100050b2:	85 c0                	test   eax,eax
100050b4:	75 09                	jne    100050bf <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
100050b6:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
100050bd:	eb 1e                	jmp    100050dd <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100050bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100050c6:	eb 15                	jmp    100050dd <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100050c8:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
100050cb:	85 c0                	test   eax,eax
100050cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100050d0:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
100050d3:	74 05                	je     100050da <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
100050d5:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
100050d8:	eb 03                	jmp    100050dd <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100050da:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
100050dd:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
100050e5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
100050e9:	5b                   	pop    ebx
100050ea:	5e                   	pop    esi
100050eb:	5f                   	pop    edi
100050ec:	e9 fc ff ff ff       	jmp    100050ed <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	100050ed: R_386_PC32	operator delete(void*, unsigned long)
100050f1:	5b                   	pop    ebx
100050f2:	5e                   	pop    esi
100050f3:	5f                   	pop    edi
100050f4:	c3                   	ret    
100050f5:	43                   	inc    ebx
100050f6:	3a 2f                	cmp    ch,BYTE PTR [edi]
100050f8:	42                   	inc    edx
100050f9:	61                   	popa   
100050fa:	6e                   	outs   dx,BYTE PTR ds:[esi]
100050fb:	61                   	popa   
100050fc:	6e                   	outs   dx,BYTE PTR ds:[esi]
100050fd:	61                   	popa   
100050fe:	2f                   	das    
100050ff:	53                   	push   ebx
10005100:	79 73                	jns    10005175 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005102:	74 65                	je     10005169 <List<NIWindow*>::deleteElement(NIWindow*&)+0xe7>
10005104:	6d                   	ins    DWORD PTR es:[edi],dx
10005105:	2f                   	das    
10005106:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005107:	65 77 67             	gs ja  10005171 <List<NIWindow*>::deleteElement(NIWindow*&)+0xef>
1000510a:	75 69                	jne    10005175 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
1000510c:	2e 65 78 65          	cs gs js 10005175 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005110:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10005113:	4e                   	dec    esi
10005114:	43                   	inc    ebx
10005115:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10005118:	4e                   	dec    esi
10005119:	32 00                	xor    al,BYTE PTR [eax]
1000511b:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
1000511e:	53                   	push   ebx
1000511f:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
10005122:	43                   	inc    ebx
10005123:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005124:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005125:	74 65                	je     1000518c <List<NIWindow*>::deleteElement(NIWindow*&)+0x10a>
10005127:	78 74                	js     1000519d <List<NIWindow*>::deleteElement(NIWindow*&)+0x11b>
10005129:	3a 3a                	cmp    bh,BYTE PTR [edx]
1000512b:	64 72 76             	fs jb  100051a4 <List<NIWindow*>::deleteElement(NIWindow*&)+0x122>
1000512e:	52                   	push   edx
1000512f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10005131:	64 65 72 54          	fs gs jb 10005189 <List<NIWindow*>::deleteElement(NIWindow*&)+0x107>
10005135:	54                   	push   esp
10005136:	46                   	inc    esi
10005137:	34 00                	xor    al,0x0
10005139:	43                   	inc    ebx
1000513a:	3a 2f                	cmp    ch,BYTE PTR [edi]
1000513c:	42                   	inc    edx
1000513d:	61                   	popa   
1000513e:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000513f:	61                   	popa   
10005140:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005141:	61                   	popa   
10005142:	2f                   	das    
10005143:	46                   	inc    esi
10005144:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005145:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005146:	74 73                	je     100051bb <List<NIWindow*>::deleteElement(NIWindow*&)+0x139>
10005148:	2f                   	das    
10005149:	53                   	push   ebx
1000514a:	46                   	inc    esi
1000514b:	4e                   	dec    esi
1000514c:	00 43 41             	add    BYTE PTR [ebx+0x41],al
1000514f:	4e                   	dec    esi
10005150:	4e                   	dec    esi
10005151:	4f                   	dec    edi
10005152:	54                   	push   esp
10005153:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10005157:	44                   	inc    esp
10005158:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
1000515b:	4e                   	dec    esi
1000515c:	54                   	push   esp
1000515d:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
10005161:	45                   	inc    ebp
10005162:	43                   	inc    ebx
10005163:	54                   	push   esp
10005164:	4f                   	dec    edi
10005165:	52                   	push   edx
10005166:	59                   	pop    ecx
10005167:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
1000516a:	2f                   	das    
1000516b:	42                   	inc    edx
1000516c:	61                   	popa   
1000516d:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000516e:	61                   	popa   
1000516f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005170:	61                   	popa   
10005171:	2f                   	das    
10005172:	46                   	inc    esi
10005173:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005174:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005175:	74 73                	je     100051ea <List<NIWindow*>::deleteElement(NIWindow*&)+0x168>
10005177:	2f                   	das    
10005178:	53                   	push   ebx
10005179:	46                   	inc    esi
1000517a:	4e                   	dec    esi
1000517b:	2f                   	das    
1000517c:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
1000517f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005180:	74 20                	je     100051a2 <List<NIWindow*>::deleteElement(NIWindow*&)+0x120>
10005182:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
10005189:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
10005190:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
10005194:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
1000519a:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000519b:	74 3a                	je     100051d7 <List<NIWindow*>::deleteElement(NIWindow*&)+0x155>
1000519d:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
100051a3:	53                   	push   ebx
100051a4:	46                   	inc    esi
100051a5:	4e                   	dec    esi
100051a6:	5f                   	pop    edi
100051a7:	52                   	push   edx
100051a8:	45                   	inc    ebp
100051a9:	53                   	push   ebx
100051aa:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
100051b0:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
100051b3:	6d                   	ins    DWORD PTR es:[edi],dx
100051b4:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051b5:	72 79                	jb     10005230 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1ae>
100051b7:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
100051ba:	6c                   	ins    BYTE PTR es:[edi],dx
100051bb:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051bc:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
100051bf:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
100051c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051c7:	72 00                	jb     100051c9 <List<NIWindow*>::deleteElement(NIWindow*&)+0x147>
100051c9:	42                   	inc    edx
100051ca:	61                   	popa   
100051cb:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
100051cf:	6c                   	ins    BYTE PTR es:[edi],dx
100051d0:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
100051d4:	72 6d                	jb     10005243 <_ssfn__compute_huffman_codes::length_dezigzag+0x3>
100051d6:	61                   	popa   
100051d7:	74 00                	je     100051d9 <List<NIWindow*>::deleteElement(NIWindow*&)+0x157>
100051d9:	4e                   	dec    esi
100051da:	6f                   	outs   dx,DWORD PTR ds:[esi]
100051db:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
100051de:	6e                   	outs   dx,BYTE PTR ds:[esi]
100051df:	74 20                	je     10005201 <List<NIWindow*>::deleteElement(NIWindow*&)+0x17f>
100051e1:	66 61                	popaw  
100051e3:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
100051e6:	66 6f                	outs   dx,WORD PTR ds:[esi]
100051e8:	75 6e                	jne    10005258 <_ssfn__compute_huffman_codes::length_dezigzag+0x18>
100051ea:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
100051ee:	76 61                	jbe    10005251 <_ssfn__compute_huffman_codes::length_dezigzag+0x11>
100051f0:	6c                   	ins    BYTE PTR es:[edi],dx
100051f1:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
100051f9:	20 76 61             	and    BYTE PTR [esi+0x61],dh
100051fc:	6c                   	ins    BYTE PTR es:[edi],dx
100051fd:	75 65                	jne    10005264 <_ssfn__zdist_extra+0x4>
100051ff:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005202:	76 61                	jbe    10005265 <_ssfn__zdist_extra+0x5>
10005204:	6c                   	ins    BYTE PTR es:[edi],dx
10005205:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
1000520d:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005210:	76 61                	jbe    10005273 <_ssfn__zdist_extra+0x13>
10005212:	6c                   	ins    BYTE PTR es:[edi],dx
10005213:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
1000521b:	47                   	inc    edi
1000521c:	6c                   	ins    BYTE PTR es:[edi],dx
1000521d:	79 70                	jns    1000528f <_ssfn__zdist_extra+0x2f>
1000521f:	68 20 6e 6f 74       	push   0x746f6e20
10005224:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10005227:	75 6e                	jne    10005297 <_ssfn__zdist_extra+0x37>
10005229:	64 00 66 90          	add    BYTE PTR fs:[esi-0x70],ah
1000522d:	66 90                	xchg   ax,ax
1000522f:	66 90                	xchg   ax,ax
10005231:	66 90                	xchg   ax,ax
10005233:	66 90                	xchg   ax,ax
10005235:	66 90                	xchg   ax,ax
10005237:	66 90                	xchg   ax,ax
10005239:	66 90                	xchg   ax,ax
1000523b:	66 90                	xchg   ax,ax
1000523d:	66 90                	xchg   ax,ax
1000523f:	90                   	nop

10005240 <_ssfn__compute_huffman_codes::length_dezigzag>:
10005240:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10005250:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

10005260 <_ssfn__zdist_extra>:
	...
10005270:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
10005280:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
10005290:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
100052a0:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
100052b0:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
100052c0:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
100052d0:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

100052e0 <_ssfn__zdist_base>:
100052e0:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
100052f0:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
10005300:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
10005310:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
10005320:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
10005330:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10005340:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10005350:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

10005360 <_ssfn__zlength_extra>:
	...
10005380:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
10005390:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
100053a0:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
100053b0:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
100053c0:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

100053e0 <_ssfn__zlength_base>:
100053e0:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
100053f0:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
10005400:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
10005410:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
10005420:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
10005430:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10005440:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10005450:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
10005460:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
10005470:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
10005480:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
10005490:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
100054a0:	32 0a 00 43 55 52 53 4f 52 53 3a 20 25 64 0a 00     2..CURSORS: %d..
100054b0:	4e 52 4d 4c 00 57 41 49 54 00 54 4c 44 52 00 54     NRML.WAIT.TLDR.T
100054c0:	45 58 54 00 56 45 52 54 00 48 4f 52 5a 00 48 41     EXT.VERT.HORZ.HA
100054d0:	4e 44 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a 20     ND.CURSOR LOAD: 
100054e0:	42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b 43 6f 6d     BAD 3..NiLinkCom
100054f0:	6d 61 6e 64 43 72 65 61 74 65 57 69 6e 64 6f 77     mandCreateWindow
10005500:	0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e 64 52     ..NiLinkCommandR
10005510:	65 73 75 70 70 6c 79 46 72 61 6d 65 62 75 66 66     esupplyFramebuff
10005520:	65 72 0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e     er..NiLinkComman
10005530:	64 43 6c 65 61 72 46 72 61 6d 65 62 75 66 66 65     dClearFramebuffe
10005540:	72 0a 00 41 53 53 45 52 54 49 4f 4e 20 46 41 49     r..ASSERTION FAI
10005550:	4c 55 52 45 20 28 41 29 2e 00                       LURE (A)..
