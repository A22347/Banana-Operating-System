
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 2c             	sub    esp,0x2c
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	6a 14                	push   0x14
10000069:	e8 fc ff ff ff       	call   1000006a <NiMain(void*)+0x6a>	1000006a: R_386_PC32	malloc
1000006e:	89 c6                	mov    esi,eax
10000070:	58                   	pop    eax
10000071:	5a                   	pop    edx
10000072:	53                   	push   ebx
10000073:	56                   	push   esi
10000074:	e8 fc ff ff ff       	call   10000075 <NiMain(void*)+0x75>	10000075: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
10000079:	68 80 00 00 00       	push   0x80
1000007e:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000080: R_386_32	desktop
10000084:	6a 00                	push   0x0
10000086:	68 00 00 00 00       	push   0x0	10000087: R_386_32	NiDisplayRAM(void*)
1000008b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000008d: R_386_32	kernelProcess
10000091:	e8 fc ff ff ff       	call   10000092 <NiMain(void*)+0x92>	10000092: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000096:	83 c4 14             	add    esp,0x14
10000099:	68 8c 01 00 00       	push   0x18c
1000009e:	e8 fc ff ff ff       	call   1000009f <NiMain(void*)+0x9f>	1000009f: R_386_PC32	malloc
100000a3:	59                   	pop    ecx
100000a4:	89 c5                	mov    ebp,eax
100000a6:	5b                   	pop    ebx
100000a7:	6a 01                	push   0x1
100000a9:	6a 01                	push   0x1
100000ab:	6a 00                	push   0x0
100000ad:	6a 00                	push   0x0
100000af:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000b1: R_386_32	ctxt
100000b5:	50                   	push   eax
100000b6:	e8 fc ff ff ff       	call   100000b7 <NiMain(void*)+0xb7>	100000b7: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000bb:	83 c4 14             	add    esp,0x14
100000be:	68 8c 01 00 00       	push   0x18c
100000c3:	e8 fc ff ff ff       	call   100000c4 <NiMain(void*)+0xc4>	100000c4: R_386_PC32	malloc
100000c8:	5e                   	pop    esi
100000c9:	89 c3                	mov    ebx,eax
100000cb:	5f                   	pop    edi
100000cc:	68 40 01 00 00       	push   0x140
100000d1:	68 90 01 00 00       	push   0x190
100000d6:	6a 32                	push   0x32
100000d8:	6a 32                	push   0x32
100000da:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000dc: R_386_32	ctxt
100000e0:	50                   	push   eax
100000e1:	e8 fc ff ff ff       	call   100000e2 <NiMain(void*)+0xe2>	100000e2: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000e6:	83 c4 14             	add    esp,0x14
100000e9:	68 8c 01 00 00       	push   0x18c
100000ee:	e8 fc ff ff ff       	call   100000ef <NiMain(void*)+0xef>	100000ef: R_386_PC32	malloc
100000f3:	89 c7                	mov    edi,eax
100000f5:	58                   	pop    eax
100000f6:	5a                   	pop    edx
100000f7:	68 7c 01 00 00       	push   0x17c
100000fc:	68 f4 01 00 00       	push   0x1f4
10000101:	68 96 00 00 00       	push   0x96
10000106:	68 c8 00 00 00       	push   0xc8
1000010b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000010d: R_386_32	ctxt
10000111:	57                   	push   edi
10000112:	e8 fc ff ff ff       	call   10000113 <NiMain(void*)+0x113>	10000113: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10000117:	83 c4 14             	add    esp,0x14
1000011a:	68 8c 01 00 00       	push   0x18c
1000011f:	e8 fc ff ff ff       	call   10000120 <NiMain(void*)+0x120>	10000120: R_386_PC32	malloc
10000124:	59                   	pop    ecx
10000125:	89 c6                	mov    esi,eax
10000127:	58                   	pop    eax
10000128:	68 af 00 00 00       	push   0xaf
1000012d:	68 0e 01 00 00       	push   0x10e
10000132:	68 90 01 00 00       	push   0x190
10000137:	6a 7d                	push   0x7d
10000139:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000013b: R_386_32	ctxt
1000013f:	56                   	push   esi
10000140:	e8 fc ff ff ff       	call   10000141 <NiMain(void*)+0x141>	10000141: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10000145:	83 c4 18             	add    esp,0x18
10000148:	83 8e 88 01 00 00 01 	or     DWORD PTR [esi+0x188],0x1
1000014f:	55                   	push   ebp
10000150:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000152: R_386_32	desktop
10000156:	e8 fc ff ff ff       	call   10000157 <NiMain(void*)+0x157>	10000157: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000015b:	58                   	pop    eax
1000015c:	5a                   	pop    edx
1000015d:	53                   	push   ebx
1000015e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000160: R_386_32	desktop
10000164:	e8 fc ff ff ff       	call   10000165 <NiMain(void*)+0x165>	10000165: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000169:	59                   	pop    ecx
1000016a:	5d                   	pop    ebp
1000016b:	57                   	push   edi
1000016c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000016e: R_386_32	desktop
10000172:	e8 fc ff ff ff       	call   10000173 <NiMain(void*)+0x173>	10000173: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000177:	58                   	pop    eax
10000178:	5a                   	pop    edx
10000179:	56                   	push   esi
1000017a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000017c: R_386_32	desktop
10000180:	e8 fc ff ff ff       	call   10000181 <NiMain(void*)+0x181>	10000181: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000185:	59                   	pop    ecx
10000186:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000188: R_386_32	desktop
1000018c:	e8 fc ff ff ff       	call   1000018d <NiMain(void*)+0x18d>	1000018d: R_386_PC32	NIDesktop::completeRefresh()
10000191:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10000198:	e8 fc ff ff ff       	call   10000199 <NiMain(void*)+0x199>	10000199: R_386_PC32	malloc
1000019d:	83 c4 0c             	add    esp,0xc
100001a0:	89 c5                	mov    ebp,eax
100001a2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100001a4: R_386_32	kernelProcess
100001a8:	68 69 56 00 10       	push   0x10005669	100001a9: R_386_32	.text
100001ad:	50                   	push   eax
100001ae:	e8 fc ff ff ff       	call   100001af <NiMain(void*)+0x1af>	100001af: R_386_PC32	File::File(char const*, Process*)
100001b3:	5e                   	pop    esi
100001b4:	5f                   	pop    edi
100001b5:	6a 01                	push   0x1
100001b7:	55                   	push   ebp
100001b8:	e8 fc ff ff ff       	call   100001b9 <NiMain(void*)+0x1b9>	100001b9: R_386_PC32	File::open(FileOpenMode)
100001bd:	5a                   	pop    edx
100001be:	59                   	pop    ecx
100001bf:	50                   	push   eax
100001c0:	68 88 56 00 10       	push   0x10005688	100001c1: R_386_32	.text
100001c5:	e8 fc ff ff ff       	call   100001c6 <NiMain(void*)+0x1c6>	100001c6: R_386_PC32	Dbg::kprintf(char const*, ...)
100001ca:	83 c4 0c             	add    esp,0xc
100001cd:	8d 44 24 17          	lea    eax,[esp+0x17]
100001d1:	50                   	push   eax
100001d2:	8d 44 24 20          	lea    eax,[esp+0x20]
100001d6:	50                   	push   eax
100001d7:	55                   	push   ebp
100001d8:	e8 fc ff ff ff       	call   100001d9 <NiMain(void*)+0x1d9>	100001d9: R_386_PC32	File::stat(unsigned long long*, bool*)
100001dd:	5e                   	pop    esi
100001de:	5f                   	pop    edi
100001df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100001e3:	68 91 56 00 10       	push   0x10005691	100001e4: R_386_32	.text
100001e8:	e8 fc ff ff ff       	call   100001e9 <NiMain(void*)+0x1e9>	100001e9: R_386_PC32	Dbg::kprintf(char const*, ...)
100001ed:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100001f1:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100001f5:	89 34 24             	mov    DWORD PTR [esp],esi
100001f8:	e8 fc ff ff ff       	call   100001f9 <NiMain(void*)+0x1f9>	100001f9: R_386_PC32	malloc
100001fd:	89 c1                	mov    ecx,eax
100001ff:	58                   	pop    eax
10000200:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000203:	8d 54 24 20          	lea    edx,[esp+0x20]
10000207:	52                   	push   edx
10000208:	51                   	push   ecx
10000209:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
1000020d:	57                   	push   edi
1000020e:	56                   	push   esi
1000020f:	55                   	push   ebp
10000210:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10000213:	83 c4 1c             	add    esp,0x1c
10000216:	50                   	push   eax
10000217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000021b:	68 9e 56 00 10       	push   0x1000569e	1000021c: R_386_32	.text
10000220:	e8 fc ff ff ff       	call   10000221 <NiMain(void*)+0x221>	10000221: R_386_PC32	Dbg::kprintf(char const*, ...)
10000225:	5a                   	pop    edx
10000226:	a1 00 00 00 00       	mov    eax,ds:0x0	10000227: R_386_32	screen
1000022b:	8b 30                	mov    esi,DWORD PTR [eax]
1000022d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000231:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10000235:	51                   	push   ecx
10000236:	6a 4b                	push   0x4b
10000238:	6a 35                	push   0x35
1000023a:	50                   	push   eax
1000023b:	ff 56 2c             	call   DWORD PTR [esi+0x2c]
1000023e:	83 c4 14             	add    esp,0x14
10000241:	55                   	push   ebp
10000242:	e8 fc ff ff ff       	call   10000243 <NiMain(void*)+0x243>	10000243: R_386_PC32	File::close()
10000247:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000024a:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000024d:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000250:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10000257:	e8 fc ff ff ff       	call   10000258 <NiMain(void*)+0x258>	10000258: R_386_PC32	malloc
1000025c:	83 c4 0c             	add    esp,0xc
1000025f:	89 c5                	mov    ebp,eax
10000261:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000263: R_386_32	kernelProcess
10000267:	68 b0 56 00 10       	push   0x100056b0	10000268: R_386_32	.text
1000026c:	50                   	push   eax
1000026d:	e8 fc ff ff ff       	call   1000026e <NiMain(void*)+0x26e>	1000026e: R_386_PC32	File::File(char const*, Process*)
10000272:	59                   	pop    ecx
10000273:	5e                   	pop    esi
10000274:	6a 01                	push   0x1
10000276:	55                   	push   ebp
10000277:	e8 fc ff ff ff       	call   10000278 <NiMain(void*)+0x278>	10000278: R_386_PC32	File::open(FileOpenMode)
1000027c:	83 c4 0c             	add    esp,0xc
1000027f:	8d 44 24 17          	lea    eax,[esp+0x17]
10000283:	50                   	push   eax
10000284:	8d 44 24 20          	lea    eax,[esp+0x20]
10000288:	50                   	push   eax
10000289:	55                   	push   ebp
1000028a:	e8 fc ff ff ff       	call   1000028b <NiMain(void*)+0x28b>	1000028b: R_386_PC32	File::stat(unsigned long long*, bool*)
1000028f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000293:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10000297:	89 34 24             	mov    DWORD PTR [esp],esi
1000029a:	e8 fc ff ff ff       	call   1000029b <NiMain(void*)+0x29b>	1000029b: R_386_PC32	malloc
1000029f:	89 c1                	mov    ecx,eax
100002a1:	58                   	pop    eax
100002a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100002a5:	8d 54 24 20          	lea    edx,[esp+0x20]
100002a9:	52                   	push   edx
100002aa:	51                   	push   ecx
100002ab:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
100002af:	57                   	push   edi
100002b0:	56                   	push   esi
100002b1:	55                   	push   ebp
100002b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100002b5:	83 c4 14             	add    esp,0x14
100002b8:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	100002ba: R_386_32	screen
100002be:	8b 3e                	mov    edi,DWORD PTR [esi]
100002c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100002c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100002c8:	51                   	push   ecx
100002c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
100002cf:	83 c0 19             	add    eax,0x19
100002d2:	50                   	push   eax
100002d3:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
100002d9:	83 c0 13             	add    eax,0x13
100002dc:	50                   	push   eax
100002dd:	56                   	push   esi
100002de:	ff 57 2c             	call   DWORD PTR [edi+0x2c]
100002e1:	83 c4 14             	add    esp,0x14
100002e4:	55                   	push   ebp
100002e5:	e8 fc ff ff ff       	call   100002e6 <NiMain(void*)+0x2e6>	100002e6: R_386_PC32	File::close()
100002ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100002ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
100002f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
100002f3:	83 c4 10             	add    esp,0x10
100002f6:	83 ec 0c             	sub    esp,0xc
100002f9:	6a 02                	push   0x2
100002fb:	e8 fc ff ff ff       	call   100002fc <NiMain(void*)+0x2fc>	100002fc: R_386_PC32	blockTask(TaskState)
10000300:	eb f1                	jmp    100002f3 <NiMain(void*)+0x2f3>
10000302:	66 90                	xchg   ax,ax

10000304 <NiBegin(void*)>:
10000304:	83 ec 18             	sub    esp,0x18
10000307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000030b:	e8 fc ff ff ff       	call   1000030c <NiBegin(void*)+0x8>	1000030c: R_386_PC32	NiMain(void*)

10000310 <_ssfn__bitreverse16>:
10000310:	89 c2                	mov    edx,eax
10000312:	01 c0                	add    eax,eax
10000314:	d1 fa                	sar    edx,1
10000316:	25 aa aa 00 00       	and    eax,0xaaaa
1000031b:	81 e2 55 55 00 00    	and    edx,0x5555
10000321:	09 c2                	or     edx,eax
10000323:	89 d0                	mov    eax,edx
10000325:	c1 e2 02             	shl    edx,0x2
10000328:	c1 f8 02             	sar    eax,0x2
1000032b:	81 e2 cc cc 00 00    	and    edx,0xcccc
10000331:	25 33 33 00 00       	and    eax,0x3333
10000336:	09 d0                	or     eax,edx
10000338:	89 c2                	mov    edx,eax
1000033a:	c1 e0 04             	shl    eax,0x4
1000033d:	c1 fa 04             	sar    edx,0x4
10000340:	25 f0 f0 00 00       	and    eax,0xf0f0
10000345:	81 e2 0f 0f 00 00    	and    edx,0xf0f
1000034b:	09 c2                	or     edx,eax
1000034d:	89 d1                	mov    ecx,edx
1000034f:	c1 e2 08             	shl    edx,0x8
10000352:	c1 f9 08             	sar    ecx,0x8
10000355:	0f b7 c2             	movzx  eax,dx
10000358:	09 c8                	or     eax,ecx
1000035a:	c3                   	ret    

1000035b <_ssfn__zhuffman_decode>:
1000035b:	55                   	push   ebp
1000035c:	57                   	push   edi
1000035d:	56                   	push   esi
1000035e:	53                   	push   ebx
1000035f:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
10000363:	7f 1d                	jg     10000382 <_ssfn__zhuffman_decode+0x27>
10000365:	8b 18                	mov    ebx,DWORD PTR [eax]
10000367:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000036a:	89 08                	mov    DWORD PTR [eax],ecx
1000036c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
1000036f:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000372:	d3 e3                	shl    ebx,cl
10000374:	83 c1 08             	add    ecx,0x8
10000377:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000037a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
1000037d:	83 f9 18             	cmp    ecx,0x18
10000380:	eb e1                	jmp    10000363 <_ssfn__zhuffman_decode+0x8>
10000382:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
10000385:	89 f9                	mov    ecx,edi
10000387:	81 e1 ff 01 00 00    	and    ecx,0x1ff
1000038d:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
10000391:	89 cb                	mov    ebx,ecx
10000393:	85 c9                	test   ecx,ecx
10000395:	74 15                	je     100003ac <_ssfn__zhuffman_decode+0x51>
10000397:	c1 f9 09             	sar    ecx,0x9
1000039a:	89 da                	mov    edx,ebx
1000039c:	d3 ef                	shr    edi,cl
1000039e:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
100003a1:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
100003a4:	81 e2 ff 01 00 00    	and    edx,0x1ff
100003aa:	eb 58                	jmp    10000404 <_ssfn__zhuffman_decode+0xa9>
100003ac:	89 d5                	mov    ebp,edx
100003ae:	89 c3                	mov    ebx,eax
100003b0:	be 0a 00 00 00       	mov    esi,0xa
100003b5:	89 f8                	mov    eax,edi
100003b7:	e8 54 ff ff ff       	call   10000310 <_ssfn__bitreverse16>
100003bc:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
100003c3:	7c 03                	jl     100003c8 <_ssfn__zhuffman_decode+0x6d>
100003c5:	46                   	inc    esi
100003c6:	eb f4                	jmp    100003bc <_ssfn__zhuffman_decode+0x61>
100003c8:	83 ca ff             	or     edx,0xffffffff
100003cb:	83 fe 10             	cmp    esi,0x10
100003ce:	74 34                	je     10000404 <_ssfn__zhuffman_decode+0xa9>
100003d0:	8d 14 36             	lea    edx,[esi+esi*1]
100003d3:	b9 10 00 00 00       	mov    ecx,0x10
100003d8:	01 ea                	add    edx,ebp
100003da:	29 f1                	sub    ecx,esi
100003dc:	d3 f8                	sar    eax,cl
100003de:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
100003e5:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
100003ec:	29 c8                	sub    eax,ecx
100003ee:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
100003f1:	89 f1                	mov    ecx,esi
100003f3:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
100003fa:	d3 ef                	shr    edi,cl
100003fc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
100003ff:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
10000404:	5b                   	pop    ebx
10000405:	89 d0                	mov    eax,edx
10000407:	5e                   	pop    esi
10000408:	5f                   	pop    edi
10000409:	5d                   	pop    ebp
1000040a:	c3                   	ret    

1000040b <_ssfn__zexpand>:
1000040b:	55                   	push   ebp
1000040c:	57                   	push   edi
1000040d:	56                   	push   esi
1000040e:	53                   	push   ebx
1000040f:	83 ec 0c             	sub    esp,0xc
10000412:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10000415:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
10000418:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
1000041b:	29 f9                	sub    ecx,edi
1000041d:	83 f9 08             	cmp    ecx,0x8
10000420:	74 04                	je     10000426 <_ssfn__zexpand+0x1b>
10000422:	31 c0                	xor    eax,eax
10000424:	eb 3c                	jmp    10000462 <_ssfn__zexpand+0x57>
10000426:	80 3f 53             	cmp    BYTE PTR [edi],0x53
10000429:	75 f7                	jne    10000422 <_ssfn__zexpand+0x17>
1000042b:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
1000042f:	75 f1                	jne    10000422 <_ssfn__zexpand+0x17>
10000431:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
10000435:	75 eb                	jne    10000422 <_ssfn__zexpand+0x17>
10000437:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
1000043a:	89 c3                	mov    ebx,eax
1000043c:	89 d6                	mov    esi,edx
1000043e:	50                   	push   eax
1000043f:	50                   	push   eax
10000440:	55                   	push   ebp
10000441:	57                   	push   edi
10000442:	e8 fc ff ff ff       	call   10000443 <_ssfn__zexpand+0x38>	10000443: R_386_PC32	realloc
10000447:	83 c4 10             	add    esp,0x10
1000044a:	85 c0                	test   eax,eax
1000044c:	74 d4                	je     10000422 <_ssfn__zexpand+0x17>
1000044e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000451:	29 fe                	sub    esi,edi
10000453:	01 c6                	add    esi,eax
10000455:	01 e8                	add    eax,ebp
10000457:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
1000045a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
1000045d:	b8 01 00 00 00       	mov    eax,0x1
10000462:	83 c4 0c             	add    esp,0xc
10000465:	5b                   	pop    ebx
10000466:	5e                   	pop    esi
10000467:	5f                   	pop    edi
10000468:	5d                   	pop    ebp
10000469:	c3                   	ret    

1000046a <_ssfn__zbuild_huffman>:
1000046a:	55                   	push   ebp
1000046b:	57                   	push   edi
1000046c:	56                   	push   esi
1000046d:	53                   	push   ebx
1000046e:	89 c3                	mov    ebx,eax
10000470:	81 ec a0 00 00 00    	sub    esp,0xa0
10000476:	31 c0                	xor    eax,eax
10000478:	89 0c 24             	mov    DWORD PTR [esp],ecx
1000047b:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
1000047f:	b9 11 00 00 00       	mov    ecx,0x11
10000484:	89 ef                	mov    edi,ebp
10000486:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
1000048a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000048c:	b9 00 01 00 00       	mov    ecx,0x100
10000491:	89 df                	mov    edi,ebx
10000493:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000495:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10000498:	7d 0f                	jge    100004a9 <_ssfn__zbuild_huffman+0x3f>
1000049a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
1000049e:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
100004a2:	40                   	inc    eax
100004a3:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
100004a7:	eb ec                	jmp    10000495 <_ssfn__zbuild_huffman+0x2b>
100004a9:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
100004b1:	b9 01 00 00 00       	mov    ecx,0x1
100004b6:	b8 01 00 00 00       	mov    eax,0x1
100004bb:	89 c7                	mov    edi,eax
100004bd:	d3 e7                	shl    edi,cl
100004bf:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
100004c3:	0f 8f 10 01 00 00    	jg     100005d9 <_ssfn__zbuild_huffman+0x16f>
100004c9:	41                   	inc    ecx
100004ca:	83 f9 10             	cmp    ecx,0x10
100004cd:	75 ec                	jne    100004bb <_ssfn__zbuild_huffman+0x51>
100004cf:	31 ff                	xor    edi,edi
100004d1:	31 f6                	xor    esi,esi
100004d3:	b8 01 00 00 00       	mov    eax,0x1
100004d8:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
100004dc:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
100004e0:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
100004e8:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
100004f0:	01 ef                	add    edi,ebp
100004f2:	85 ed                	test   ebp,ebp
100004f4:	74 11                	je     10000507 <_ssfn__zbuild_huffman+0x9d>
100004f6:	ba 01 00 00 00       	mov    edx,0x1
100004fb:	88 c1                	mov    cl,al
100004fd:	d3 e2                	shl    edx,cl
100004ff:	39 fa                	cmp    edx,edi
10000501:	0f 8c d2 00 00 00    	jl     100005d9 <_ssfn__zbuild_huffman+0x16f>
10000507:	89 fa                	mov    edx,edi
10000509:	b9 10 00 00 00       	mov    ecx,0x10
1000050e:	01 ff                	add    edi,edi
10000510:	29 c1                	sub    ecx,eax
10000512:	01 ee                	add    esi,ebp
10000514:	d3 e2                	shl    edx,cl
10000516:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
1000051d:	40                   	inc    eax
1000051e:	83 f8 10             	cmp    eax,0x10
10000521:	75 b5                	jne    100004d8 <_ssfn__zbuild_huffman+0x6e>
10000523:	8b 04 24             	mov    eax,DWORD PTR [esp]
10000526:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
10000530:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000534:	31 ff                	xor    edi,edi
10000536:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
1000053a:	0f 8d 9d 00 00 00    	jge    100005dd <_ssfn__zbuild_huffman+0x173>
10000540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000544:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
10000548:	89 f2                	mov    edx,esi
1000054a:	85 f6                	test   esi,esi
1000054c:	0f 84 81 00 00 00    	je     100005d3 <_ssfn__zbuild_huffman+0x169>
10000552:	8d 0c 36             	lea    ecx,[esi+esi*1]
10000555:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
10000559:	8d 04 19             	lea    eax,[ecx+ebx*1]
1000055c:	89 e9                	mov    ecx,ebp
1000055e:	89 04 24             	mov    DWORD PTR [esp],eax
10000561:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
10000568:	29 c1                	sub    ecx,eax
1000056a:	89 c8                	mov    eax,ecx
1000056c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000056f:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
10000576:	01 c8                	add    eax,ecx
10000578:	83 fe 09             	cmp    esi,0x9
1000057b:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
10000582:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
1000058a:	7f 42                	jg     100005ce <_ssfn__zbuild_huffman+0x164>
1000058c:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10000590:	89 e8                	mov    eax,ebp
10000592:	e8 79 fd ff ff       	call   10000310 <_ssfn__bitreverse16>
10000597:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
1000059b:	b9 10 00 00 00       	mov    ecx,0x10
100005a0:	29 f1                	sub    ecx,esi
100005a2:	d3 f8                	sar    eax,cl
100005a4:	88 d1                	mov    cl,dl
100005a6:	89 04 24             	mov    DWORD PTR [esp],eax
100005a9:	89 f2                	mov    edx,esi
100005ab:	b8 01 00 00 00       	mov    eax,0x1
100005b0:	c1 e2 09             	shl    edx,0x9
100005b3:	d3 e0                	shl    eax,cl
100005b5:	09 fa                	or     edx,edi
100005b7:	89 c1                	mov    ecx,eax
100005b9:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
100005c0:	7f 0c                	jg     100005ce <_ssfn__zbuild_huffman+0x164>
100005c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
100005c5:	01 0c 24             	add    DWORD PTR [esp],ecx
100005c8:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
100005cc:	eb eb                	jmp    100005b9 <_ssfn__zbuild_huffman+0x14f>
100005ce:	45                   	inc    ebp
100005cf:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
100005d3:	47                   	inc    edi
100005d4:	e9 5d ff ff ff       	jmp    10000536 <_ssfn__zbuild_huffman+0xcc>
100005d9:	31 c0                	xor    eax,eax
100005db:	eb 05                	jmp    100005e2 <_ssfn__zbuild_huffman+0x178>
100005dd:	b8 01 00 00 00       	mov    eax,0x1
100005e2:	81 c4 a0 00 00 00    	add    esp,0xa0
100005e8:	5b                   	pop    ebx
100005e9:	5e                   	pop    esi
100005ea:	5f                   	pop    edi
100005eb:	5d                   	pop    ebp
100005ec:	c3                   	ret    

100005ed <_ssfn_fc.part.1>:
100005ed:	55                   	push   ebp
100005ee:	57                   	push   edi
100005ef:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
100005f5:	56                   	push   esi
100005f6:	53                   	push   ebx
100005f7:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
100005fd:	83 ec 0c             	sub    esp,0xc
10000600:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10000603:	74 5d                	je     10000662 <_ssfn_fc.part.1+0x75>
10000605:	31 f6                	xor    esi,esi
10000607:	8b 03                	mov    eax,DWORD PTR [ebx]
10000609:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
1000060d:	74 35                	je     10000644 <_ssfn_fc.part.1+0x57>
1000060f:	31 ed                	xor    ebp,ebp
10000611:	8b 03                	mov    eax,DWORD PTR [ebx]
10000613:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
10000616:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
10000619:	85 c0                	test   eax,eax
1000061b:	74 0c                	je     10000629 <_ssfn_fc.part.1+0x3c>
1000061d:	83 ec 0c             	sub    esp,0xc
10000620:	50                   	push   eax
10000621:	e8 fc ff ff ff       	call   10000622 <_ssfn_fc.part.1+0x35>	10000622: R_386_PC32	free
10000626:	83 c4 10             	add    esp,0x10
10000629:	83 c5 04             	add    ebp,0x4
1000062c:	81 fd 00 04 00 00    	cmp    ebp,0x400
10000632:	75 dd                	jne    10000611 <_ssfn_fc.part.1+0x24>
10000634:	83 ec 0c             	sub    esp,0xc
10000637:	8b 03                	mov    eax,DWORD PTR [ebx]
10000639:	ff 34 30             	push   DWORD PTR [eax+esi*1]
1000063c:	e8 fc ff ff ff       	call   1000063d <_ssfn_fc.part.1+0x50>	1000063d: R_386_PC32	free
10000641:	83 c4 10             	add    esp,0x10
10000644:	83 c6 04             	add    esi,0x4
10000647:	81 fe 00 04 00 00    	cmp    esi,0x400
1000064d:	75 b8                	jne    10000607 <_ssfn_fc.part.1+0x1a>
1000064f:	83 ec 0c             	sub    esp,0xc
10000652:	ff 33                	push   DWORD PTR [ebx]
10000654:	e8 fc ff ff ff       	call   10000655 <_ssfn_fc.part.1+0x68>	10000655: R_386_PC32	free
10000659:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
1000065f:	83 c4 10             	add    esp,0x10
10000662:	83 c3 04             	add    ebx,0x4
10000665:	39 fb                	cmp    ebx,edi
10000667:	75 97                	jne    10000600 <_ssfn_fc.part.1+0x13>
10000669:	83 c4 0c             	add    esp,0xc
1000066c:	5b                   	pop    ebx
1000066d:	5e                   	pop    esi
1000066e:	5f                   	pop    edi
1000066f:	5d                   	pop    ebp
10000670:	c3                   	ret    

10000671 <_ssfn_l>:
10000671:	57                   	push   edi
10000672:	56                   	push   esi
10000673:	53                   	push   ebx
10000674:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000678:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000067c:	39 ce                	cmp    esi,ecx
1000067e:	89 f3                	mov    ebx,esi
10000680:	0f 9d c1             	setge  cl
10000683:	c1 eb 1f             	shr    ebx,0x1f
10000686:	09 d9                	or     ecx,ebx
10000688:	89 fb                	mov    ebx,edi
1000068a:	c1 eb 1f             	shr    ebx,0x1f
1000068d:	08 d9                	or     cl,bl
1000068f:	0f 85 e9 00 00 00    	jne    1000077e <_ssfn_l+0x10d>
10000695:	39 d7                	cmp    edi,edx
10000697:	0f 8d e1 00 00 00    	jge    1000077e <_ssfn_l+0x10d>
1000069d:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
100006a3:	8d 51 08             	lea    edx,[ecx+0x8]
100006a6:	8d 4f 08             	lea    ecx,[edi+0x8]
100006a9:	c1 fa 04             	sar    edx,0x4
100006ac:	c1 f9 04             	sar    ecx,0x4
100006af:	39 ca                	cmp    edx,ecx
100006b1:	75 1a                	jne    100006cd <_ssfn_l+0x5c>
100006b3:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
100006b9:	8d 4e 08             	lea    ecx,[esi+0x8]
100006bc:	83 c2 08             	add    edx,0x8
100006bf:	c1 f9 04             	sar    ecx,0x4
100006c2:	c1 fa 04             	sar    edx,0x4
100006c5:	39 ca                	cmp    edx,ecx
100006c7:	0f 84 b1 00 00 00    	je     1000077e <_ssfn_l+0x10d>
100006cd:	89 c3                	mov    ebx,eax
100006cf:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
100006d5:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
100006db:	7f 3e                	jg     1000071b <_ssfn_l+0xaa>
100006dd:	05 00 02 00 00       	add    eax,0x200
100006e2:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
100006e8:	52                   	push   edx
100006e9:	01 c0                	add    eax,eax
100006eb:	52                   	push   edx
100006ec:	50                   	push   eax
100006ed:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
100006f3:	e8 fc ff ff ff       	call   100006f4 <_ssfn_l+0x83>	100006f4: R_386_PC32	realloc
100006f8:	83 c4 10             	add    esp,0x10
100006fb:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
10000701:	85 c0                	test   eax,eax
10000703:	75 16                	jne    1000071b <_ssfn_l+0xaa>
10000705:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
1000070f:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
10000719:	eb 63                	jmp    1000077e <_ssfn_l+0x10d>
1000071b:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
10000722:	75 26                	jne    1000074a <_ssfn_l+0xd9>
10000724:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000072a:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
10000730:	66 89 10             	mov    WORD PTR [eax],dx
10000733:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000739:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
1000073f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
10000743:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
1000074a:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000750:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000756:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
1000075a:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000760:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000766:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
1000076b:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10000771:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000778:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
1000077e:	5b                   	pop    ebx
1000077f:	5e                   	pop    esi
10000780:	5f                   	pop    edi
10000781:	c3                   	ret    

10000782 <_ssfn_b>:
10000782:	55                   	push   ebp
10000783:	57                   	push   edi
10000784:	56                   	push   esi
10000785:	53                   	push   ebx
10000786:	83 ec 4c             	sub    esp,0x4c
10000789:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000078d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10000791:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10000795:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10000799:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000079d:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
100007a1:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100007a5:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
100007a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100007ad:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
100007b1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100007b5:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
100007b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100007bd:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100007c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100007c5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100007cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100007d0:	83 f8 04             	cmp    eax,0x4
100007d3:	75 28                	jne    100007fd <_ssfn_b+0x7b>
100007d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100007d9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100007dd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100007e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
100007e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100007e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
100007ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100007f1:	83 c4 4c             	add    esp,0x4c
100007f4:	5b                   	pop    ebx
100007f5:	5e                   	pop    esi
100007f6:	5f                   	pop    edi
100007f7:	5d                   	pop    ebp
100007f8:	e9 74 fe ff ff       	jmp    10000671 <_ssfn_l>
100007fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000801:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
10000805:	75 0e                	jne    10000815 <_ssfn_b+0x93>
10000807:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
1000080b:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
1000080f:	0f 84 19 01 00 00    	je     1000092e <_ssfn_b+0x1ac>
10000815:	be 02 00 00 00       	mov    esi,0x2
1000081a:	89 d8                	mov    eax,ebx
1000081c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000820:	99                   	cdq    
10000821:	f7 fe                	idiv   esi
10000823:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10000827:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000082b:	89 e8                	mov    eax,ebp
1000082d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000831:	99                   	cdq    
10000832:	f7 fe                	idiv   esi
10000834:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
10000838:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000083c:	89 f8                	mov    eax,edi
1000083e:	29 d8                	sub    eax,ebx
10000840:	99                   	cdq    
10000841:	f7 fe                	idiv   esi
10000843:	01 c3                	add    ebx,eax
10000845:	89 c8                	mov    eax,ecx
10000847:	29 e8                	sub    eax,ebp
10000849:	99                   	cdq    
1000084a:	f7 fe                	idiv   esi
1000084c:	01 e8                	add    eax,ebp
1000084e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000856:	29 f8                	sub    eax,edi
10000858:	99                   	cdq    
10000859:	f7 fe                	idiv   esi
1000085b:	01 f8                	add    eax,edi
1000085d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000861:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10000865:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000869:	29 c8                	sub    eax,ecx
1000086b:	99                   	cdq    
1000086c:	f7 fe                	idiv   esi
1000086e:	01 c8                	add    eax,ecx
10000870:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10000874:	89 d8                	mov    eax,ebx
10000876:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
1000087a:	99                   	cdq    
1000087b:	f7 fe                	idiv   esi
1000087d:	8d 0c 38             	lea    ecx,[eax+edi*1]
10000880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000884:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10000888:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
1000088c:	99                   	cdq    
1000088d:	f7 fe                	idiv   esi
1000088f:	8d 2c 38             	lea    ebp,[eax+edi*1]
10000892:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000896:	29 d8                	sub    eax,ebx
10000898:	99                   	cdq    
10000899:	f7 fe                	idiv   esi
1000089b:	83 ec 0c             	sub    esp,0xc
1000089e:	01 d8                	add    eax,ebx
100008a0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100008a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100008a8:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
100008ac:	99                   	cdq    
100008ad:	f7 fe                	idiv   esi
100008af:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
100008b3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100008b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100008bb:	29 c8                	sub    eax,ecx
100008bd:	99                   	cdq    
100008be:	f7 fe                	idiv   esi
100008c0:	8d 1c 08             	lea    ebx,[eax+ecx*1]
100008c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100008c7:	29 e8                	sub    eax,ebp
100008c9:	99                   	cdq    
100008ca:	f7 fe                	idiv   esi
100008cc:	8d 34 28             	lea    esi,[eax+ebp*1]
100008cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100008d3:	8d 78 01             	lea    edi,[eax+0x1]
100008d6:	57                   	push   edi
100008d7:	56                   	push   esi
100008d8:	53                   	push   ebx
100008d9:	55                   	push   ebp
100008da:	51                   	push   ecx
100008db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100008df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100008e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100008e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100008eb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100008ef:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100008f3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100008f7:	e8 86 fe ff ff       	call   10000782 <_ssfn_b>
100008fc:	83 c4 24             	add    esp,0x24
100008ff:	57                   	push   edi
10000900:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000904:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000908:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
1000090c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000910:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
10000914:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
10000918:	56                   	push   esi
10000919:	53                   	push   ebx
1000091a:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
1000091e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
10000922:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000926:	e8 57 fe ff ff       	call   10000782 <_ssfn_b>
1000092b:	83 c4 30             	add    esp,0x30
1000092e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10000933:	0f 85 9c fe ff ff    	jne    100007d5 <_ssfn_b+0x53>
10000939:	83 c4 4c             	add    esp,0x4c
1000093c:	5b                   	pop    ebx
1000093d:	5e                   	pop    esi
1000093e:	5f                   	pop    edi
1000093f:	5d                   	pop    ebp
10000940:	c3                   	ret    

10000941 <_ssfn__zreceive>:
10000941:	56                   	push   esi
10000942:	53                   	push   ebx
10000943:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
10000946:	7d 1d                	jge    10000965 <_ssfn__zreceive+0x24>
10000948:	8b 18                	mov    ebx,DWORD PTR [eax]
1000094a:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000094d:	89 08                	mov    DWORD PTR [eax],ecx
1000094f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000952:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000955:	d3 e3                	shl    ebx,cl
10000957:	83 c1 08             	add    ecx,0x8
1000095a:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000095d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000960:	83 f9 18             	cmp    ecx,0x18
10000963:	7e e3                	jle    10000948 <_ssfn__zreceive+0x7>
10000965:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
10000968:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
1000096b:	89 f3                	mov    ebx,esi
1000096d:	88 d1                	mov    cl,dl
1000096f:	d3 eb                	shr    ebx,cl
10000971:	88 d1                	mov    cl,dl
10000973:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10000976:	bb 01 00 00 00       	mov    ebx,0x1
1000097b:	d3 e3                	shl    ebx,cl
1000097d:	8d 43 ff             	lea    eax,[ebx-0x1]
10000980:	5b                   	pop    ebx
10000981:	21 f0                	and    eax,esi
10000983:	5e                   	pop    esi
10000984:	c3                   	ret    

10000985 <ssfn_utf8>:
10000985:	56                   	push   esi
10000986:	53                   	push   ebx
10000987:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000098b:	8b 11                	mov    edx,DWORD PTR [ecx]
1000098d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
10000990:	89 f0                	mov    eax,esi
10000992:	84 c0                	test   al,al
10000994:	0f be d8             	movsx  ebx,al
10000997:	78 04                	js     1000099d <ssfn_utf8+0x18>
10000999:	89 d8                	mov    eax,ebx
1000099b:	eb 7d                	jmp    10000a1a <ssfn_utf8+0x95>
1000099d:	f7 c6 20 00 00 00    	test   esi,0x20
100009a3:	75 14                	jne    100009b9 <ssfn_utf8+0x34>
100009a5:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
100009a8:	c1 e3 06             	shl    ebx,0x6
100009ab:	83 e0 3f             	and    eax,0x3f
100009ae:	81 e3 c0 07 00 00    	and    ebx,0x7c0
100009b4:	42                   	inc    edx
100009b5:	09 d8                	or     eax,ebx
100009b7:	eb 5f                	jmp    10000a18 <ssfn_utf8+0x93>
100009b9:	f7 c6 10 00 00 00    	test   esi,0x10
100009bf:	75 20                	jne    100009e1 <ssfn_utf8+0x5c>
100009c1:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100009c5:	c1 e3 0c             	shl    ebx,0xc
100009c8:	c1 e0 06             	shl    eax,0x6
100009cb:	0f b7 db             	movzx  ebx,bx
100009ce:	25 c0 0f 00 00       	and    eax,0xfc0
100009d3:	83 c2 02             	add    edx,0x2
100009d6:	09 d8                	or     eax,ebx
100009d8:	8a 1a                	mov    bl,BYTE PTR [edx]
100009da:	83 e3 3f             	and    ebx,0x3f
100009dd:	09 d8                	or     eax,ebx
100009df:	eb 37                	jmp    10000a18 <ssfn_utf8+0x93>
100009e1:	31 c0                	xor    eax,eax
100009e3:	83 e6 08             	and    esi,0x8
100009e6:	75 32                	jne    10000a1a <ssfn_utf8+0x95>
100009e8:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100009ec:	c1 e3 12             	shl    ebx,0x12
100009ef:	c1 e0 0c             	shl    eax,0xc
100009f2:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
100009f8:	25 00 f0 03 00       	and    eax,0x3f000
100009fd:	83 c2 03             	add    edx,0x3
10000a00:	09 d8                	or     eax,ebx
10000a02:	8a 1a                	mov    bl,BYTE PTR [edx]
10000a04:	83 e3 3f             	and    ebx,0x3f
10000a07:	09 d8                	or     eax,ebx
10000a09:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
10000a0d:	c1 e3 06             	shl    ebx,0x6
10000a10:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
10000a16:	09 d8                	or     eax,ebx
10000a18:	89 11                	mov    DWORD PTR [ecx],edx
10000a1a:	ff 01                	inc    DWORD PTR [ecx]
10000a1c:	5b                   	pop    ebx
10000a1d:	5e                   	pop    esi
10000a1e:	c3                   	ret    

10000a1f <_ssfn_c>:
10000a1f:	55                   	push   ebp
10000a20:	57                   	push   edi
10000a21:	56                   	push   esi
10000a22:	53                   	push   ebx
10000a23:	83 ec 14             	sub    esp,0x14
10000a26:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
10000a2c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000a30:	85 c0                	test   eax,eax
10000a32:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
10000a38:	0f 84 e6 00 00 00    	je     10000b24 <_ssfn_c+0x105>
10000a3e:	31 ff                	xor    edi,edi
10000a40:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
10000a44:	0f 84 f3 00 00 00    	je     10000b3d <_ssfn_c+0x11e>
10000a4a:	85 d2                	test   edx,edx
10000a4c:	0f 84 eb 00 00 00    	je     10000b3d <_ssfn_c+0x11e>
10000a52:	80 3a 00             	cmp    BYTE PTR [edx],0x0
10000a55:	0f 84 e2 00 00 00    	je     10000b3d <_ssfn_c+0x11e>
10000a5b:	89 d6                	mov    esi,edx
10000a5d:	89 cd                	mov    ebp,ecx
10000a5f:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000a62:	89 c3                	mov    ebx,eax
10000a64:	85 d2                	test   edx,edx
10000a66:	74 38                	je     10000aa0 <_ssfn_c+0x81>
10000a68:	8d 0c 13             	lea    ecx,[ebx+edx*1]
10000a6b:	31 c0                	xor    eax,eax
10000a6d:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000a70:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000a73:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
10000a77:	66 85 d2             	test   dx,dx
10000a7a:	74 24                	je     10000aa0 <_ssfn_c+0x81>
10000a7c:	01 da                	add    edx,ebx
10000a7e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000a82:	8a 0a                	mov    cl,BYTE PTR [edx]
10000a84:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000a88:	84 c9                	test   cl,cl
10000a8a:	0f 84 9e 00 00 00    	je     10000b2e <_ssfn_c+0x10f>
10000a90:	3a 0f                	cmp    cl,BYTE PTR [edi]
10000a92:	0f 85 90 00 00 00    	jne    10000b28 <_ssfn_c+0x109>
10000a98:	47                   	inc    edi
10000a99:	42                   	inc    edx
10000a9a:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10000a9e:	eb e2                	jmp    10000a82 <_ssfn_c+0x63>
10000aa0:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000aa4:	8d 44 24 10          	lea    eax,[esp+0x10]
10000aa8:	50                   	push   eax
10000aa9:	e8 fc ff ff ff       	call   10000aaa <_ssfn_c+0x8b>	10000aaa: R_386_PC32	ssfn_utf8
10000aae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000ab2:	29 f2                	sub    edx,esi
10000ab4:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
10000ab7:	5a                   	pop    edx
10000ab8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000abc:	89 06                	mov    DWORD PTR [esi],eax
10000abe:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
10000ac1:	89 df                	mov    edi,ebx
10000ac3:	31 db                	xor    ebx,ebx
10000ac5:	8a 17                	mov    dl,BYTE PTR [edi]
10000ac7:	80 fa ff             	cmp    dl,0xff
10000aca:	75 08                	jne    10000ad4 <_ssfn_c+0xb5>
10000acc:	81 c3 ff ff 00 00    	add    ebx,0xffff
10000ad2:	eb 2a                	jmp    10000afe <_ssfn_c+0xdf>
10000ad4:	88 d1                	mov    cl,dl
10000ad6:	83 e1 c0             	and    ecx,0xffffffc0
10000ad9:	80 f9 c0             	cmp    cl,0xc0
10000adc:	75 16                	jne    10000af4 <_ssfn_c+0xd5>
10000ade:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000ae2:	c1 e2 08             	shl    edx,0x8
10000ae5:	83 c7 02             	add    edi,0x2
10000ae8:	81 e2 00 3f 00 00    	and    edx,0x3f00
10000aee:	09 ca                	or     edx,ecx
10000af0:	01 d3                	add    ebx,edx
10000af2:	eb 27                	jmp    10000b1b <_ssfn_c+0xfc>
10000af4:	80 f9 80             	cmp    cl,0x80
10000af7:	75 08                	jne    10000b01 <_ssfn_c+0xe2>
10000af9:	83 e2 3f             	and    edx,0x3f
10000afc:	01 d3                	add    ebx,edx
10000afe:	47                   	inc    edi
10000aff:	eb 1a                	jmp    10000b1b <_ssfn_c+0xfc>
10000b01:	39 d8                	cmp    eax,ebx
10000b03:	74 38                	je     10000b3d <_ssfn_c+0x11e>
10000b05:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000b09:	83 e2 40             	and    edx,0x40
10000b0c:	80 fa 01             	cmp    dl,0x1
10000b0f:	19 d2                	sbb    edx,edx
10000b11:	83 c2 06             	add    edx,0x6
10000b14:	0f af d1             	imul   edx,ecx
10000b17:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
10000b1b:	43                   	inc    ebx
10000b1c:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
10000b22:	76 a1                	jbe    10000ac5 <_ssfn_c+0xa6>
10000b24:	31 ff                	xor    edi,edi
10000b26:	eb 15                	jmp    10000b3d <_ssfn_c+0x11e>
10000b28:	40                   	inc    eax
10000b29:	e9 42 ff ff ff       	jmp    10000a70 <_ssfn_c+0x51>
10000b2e:	29 f7                	sub    edi,esi
10000b30:	05 00 f0 00 00       	add    eax,0xf000
10000b35:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
10000b38:	e9 7b ff ff ff       	jmp    10000ab8 <_ssfn_c+0x99>
10000b3d:	83 c4 14             	add    esp,0x14
10000b40:	89 f8                	mov    eax,edi
10000b42:	5b                   	pop    ebx
10000b43:	5e                   	pop    esi
10000b44:	5f                   	pop    edi
10000b45:	5d                   	pop    ebp
10000b46:	c3                   	ret    

10000b47 <_ssfn_zlib_decode>:
10000b47:	55                   	push   ebp
10000b48:	57                   	push   edi
10000b49:	56                   	push   esi
10000b4a:	53                   	push   ebx
10000b4b:	81 ec c8 19 00 00    	sub    esp,0x19c8
10000b51:	6a 08                	push   0x8
10000b53:	e8 fc ff ff ff       	call   10000b54 <_ssfn_zlib_decode+0xd>	10000b54: R_386_PC32	malloc
10000b58:	83 c4 10             	add    esp,0x10
10000b5b:	89 c2                	mov    edx,eax
10000b5d:	85 c0                	test   eax,eax
10000b5f:	0f 84 eb 04 00 00    	je     10001050 <_ssfn_zlib_decode+0x509>
10000b65:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
10000b6c:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
10000b73:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
10000b7a:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
10000b81:	31 c0                	xor    eax,eax
10000b83:	83 c2 08             	add    edx,0x8
10000b86:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
10000b8d:	c6 80 60 5c 03 10 08 	mov    BYTE PTR [eax+0x10035c60],0x8	10000b8f: R_386_32	.bss
10000b94:	40                   	inc    eax
10000b95:	3d 90 00 00 00       	cmp    eax,0x90
10000b9a:	75 f1                	jne    10000b8d <_ssfn_zlib_decode+0x46>
10000b9c:	c6 80 60 5c 03 10 09 	mov    BYTE PTR [eax+0x10035c60],0x9	10000b9e: R_386_32	.bss
10000ba3:	40                   	inc    eax
10000ba4:	3d 00 01 00 00       	cmp    eax,0x100
10000ba9:	75 f1                	jne    10000b9c <_ssfn_zlib_decode+0x55>
10000bab:	c6 80 60 5c 03 10 07 	mov    BYTE PTR [eax+0x10035c60],0x7	10000bad: R_386_32	.bss
10000bb2:	40                   	inc    eax
10000bb3:	3d 18 01 00 00       	cmp    eax,0x118
10000bb8:	75 f1                	jne    10000bab <_ssfn_zlib_decode+0x64>
10000bba:	c7 05 78 5d 03 10 08 08 08 08 	mov    DWORD PTR ds:0x10035d78,0x8080808	10000bbc: R_386_32	.bss
10000bc4:	c7 05 7c 5d 03 10 08 08 08 08 	mov    DWORD PTR ds:0x10035d7c,0x8080808	10000bc6: R_386_32	.bss
10000bce:	31 c0                	xor    eax,eax
10000bd0:	c6 80 40 5c 03 10 05 	mov    BYTE PTR [eax+0x10035c40],0x5	10000bd2: R_386_32	.bss
10000bd7:	40                   	inc    eax
10000bd8:	83 f8 20             	cmp    eax,0x20
10000bdb:	75 f3                	jne    10000bd0 <_ssfn_zlib_decode+0x89>
10000bdd:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
10000be8:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
10000bf3:	ba 01 00 00 00       	mov    edx,0x1
10000bf8:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000bff:	e8 3d fd ff ff       	call   10000941 <_ssfn__zreceive>
10000c04:	ba 02 00 00 00       	mov    edx,0x2
10000c09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000c0d:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c14:	e8 28 fd ff ff       	call   10000941 <_ssfn__zreceive>
10000c19:	89 c6                	mov    esi,eax
10000c1b:	85 c0                	test   eax,eax
10000c1d:	0f 85 09 01 00 00    	jne    10000d2c <_ssfn_zlib_decode+0x1e5>
10000c23:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000c2a:	83 e2 07             	and    edx,0x7
10000c2d:	74 0c                	je     10000c3b <_ssfn_zlib_decode+0xf4>
10000c2f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c36:	e8 06 fd ff ff       	call   10000941 <_ssfn__zreceive>
10000c3b:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000c42:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000c49:	31 c0                	xor    eax,eax
10000c4b:	31 db                	xor    ebx,ebx
10000c4d:	85 d2                	test   edx,edx
10000c4f:	7f 14                	jg     10000c65 <_ssfn_zlib_decode+0x11e>
10000c51:	84 db                	test   bl,bl
10000c53:	74 22                	je     10000c77 <_ssfn_zlib_decode+0x130>
10000c55:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000c5c:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000c63:	eb 12                	jmp    10000c77 <_ssfn_zlib_decode+0x130>
10000c65:	40                   	inc    eax
10000c66:	83 ea 08             	sub    edx,0x8
10000c69:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000c70:	b3 01                	mov    bl,0x1
10000c72:	c1 e9 08             	shr    ecx,0x8
10000c75:	eb d6                	jmp    10000c4d <_ssfn_zlib_decode+0x106>
10000c77:	83 f8 04             	cmp    eax,0x4
10000c7a:	74 1d                	je     10000c99 <_ssfn_zlib_decode+0x152>
10000c7c:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000c83:	40                   	inc    eax
10000c84:	8d 4a 01             	lea    ecx,[edx+0x1]
10000c87:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000c8e:	8a 12                	mov    dl,BYTE PTR [edx]
10000c90:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000c97:	eb de                	jmp    10000c77 <_ssfn_zlib_decode+0x130>
10000c99:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000ca1:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000ca9:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000cb1:	c1 e3 08             	shl    ebx,0x8
10000cb4:	01 c3                	add    ebx,eax
10000cb6:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000cbe:	c1 e0 08             	shl    eax,0x8
10000cc1:	01 d0                	add    eax,edx
10000cc3:	89 da                	mov    edx,ebx
10000cc5:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000ccb:	39 d0                	cmp    eax,edx
10000ccd:	0f 85 69 03 00 00    	jne    1000103c <_ssfn_zlib_decode+0x4f5>
10000cd3:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000cda:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000cdd:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000ce4:	73 14                	jae    10000cfa <_ssfn_zlib_decode+0x1b3>
10000ce6:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ced:	e8 19 f7 ff ff       	call   1000040b <_ssfn__zexpand>
10000cf2:	85 c0                	test   eax,eax
10000cf4:	0f 84 42 03 00 00    	je     1000103c <_ssfn_zlib_decode+0x4f5>
10000cfa:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000d01:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000d08:	39 f3                	cmp    ebx,esi
10000d0a:	74 09                	je     10000d15 <_ssfn_zlib_decode+0x1ce>
10000d0c:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000d0f:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000d12:	46                   	inc    esi
10000d13:	eb e5                	jmp    10000cfa <_ssfn_zlib_decode+0x1b3>
10000d15:	01 da                	add    edx,ebx
10000d17:	01 c3                	add    ebx,eax
10000d19:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000d20:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000d27:	e9 fc 02 00 00       	jmp    10001028 <_ssfn_zlib_decode+0x4e1>
10000d2c:	83 f8 03             	cmp    eax,0x3
10000d2f:	0f 84 07 03 00 00    	je     1000103c <_ssfn_zlib_decode+0x4f5>
10000d35:	4e                   	dec    esi
10000d36:	75 2d                	jne    10000d65 <_ssfn_zlib_decode+0x21e>
10000d38:	b9 20 01 00 00       	mov    ecx,0x120
10000d3d:	ba 60 5c 03 10       	mov    edx,0x10035c60	10000d3e: R_386_32	.bss
10000d42:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000d49:	e8 1c f7 ff ff       	call   1000046a <_ssfn__zbuild_huffman>
10000d4e:	85 c0                	test   eax,eax
10000d50:	0f 84 e6 02 00 00    	je     1000103c <_ssfn_zlib_decode+0x4f5>
10000d56:	b9 20 00 00 00       	mov    ecx,0x20
10000d5b:	ba 40 5c 03 10       	mov    edx,0x10035c40	10000d5c: R_386_32	.bss
10000d60:	e9 78 01 00 00       	jmp    10000edd <_ssfn_zlib_decode+0x396>
10000d65:	ba 05 00 00 00       	mov    edx,0x5
10000d6a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d71:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000d75:	e8 c7 fb ff ff       	call   10000941 <_ssfn__zreceive>
10000d7a:	89 df                	mov    edi,ebx
10000d7c:	ba 05 00 00 00       	mov    edx,0x5
10000d81:	89 c5                	mov    ebp,eax
10000d83:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d8a:	e8 b2 fb ff ff       	call   10000941 <_ssfn__zreceive>
10000d8f:	ba 04 00 00 00       	mov    edx,0x4
10000d94:	89 c6                	mov    esi,eax
10000d96:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d9d:	e8 9f fb ff ff       	call   10000941 <_ssfn__zreceive>
10000da2:	b9 13 00 00 00       	mov    ecx,0x13
10000da7:	83 c0 04             	add    eax,0x4
10000daa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000dae:	31 c0                	xor    eax,eax
10000db0:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000db2:	31 ff                	xor    edi,edi
10000db4:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000db8:	7e 1f                	jle    10000dd9 <_ssfn_zlib_decode+0x292>
10000dba:	ba 03 00 00 00       	mov    edx,0x3
10000dbf:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dc6:	47                   	inc    edi
10000dc7:	e8 75 fb ff ff       	call   10000941 <_ssfn__zreceive>
10000dcc:	0f b6 97 ff 57 00 10 	movzx  edx,BYTE PTR [edi+0x100057ff]	10000dcf: R_386_32	.text
10000dd3:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000dd7:	eb db                	jmp    10000db4 <_ssfn_zlib_decode+0x26d>
10000dd9:	b9 13 00 00 00       	mov    ecx,0x13
10000dde:	89 da                	mov    edx,ebx
10000de0:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000de7:	e8 7e f6 ff ff       	call   1000046a <_ssfn__zbuild_huffman>
10000dec:	85 c0                	test   eax,eax
10000dee:	0f 84 48 02 00 00    	je     1000103c <_ssfn_zlib_decode+0x4f5>
10000df4:	8d 46 01             	lea    eax,[esi+0x1]
10000df7:	81 c5 01 01 00 00    	add    ebp,0x101
10000dfd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000e01:	31 f6                	xor    esi,esi
10000e03:	01 e8                	add    eax,ebp
10000e05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000e09:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000e0d:	0f 8e 9f 00 00 00    	jle    10000eb2 <_ssfn_zlib_decode+0x36b>
10000e13:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000e1a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e21:	e8 35 f5 ff ff       	call   1000035b <_ssfn__zhuffman_decode>
10000e26:	83 f8 12             	cmp    eax,0x12
10000e29:	0f 87 0d 02 00 00    	ja     1000103c <_ssfn_zlib_decode+0x4f5>
10000e2f:	83 f8 0f             	cmp    eax,0xf
10000e32:	7f 07                	jg     10000e3b <_ssfn_zlib_decode+0x2f4>
10000e34:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000e38:	46                   	inc    esi
10000e39:	eb ce                	jmp    10000e09 <_ssfn_zlib_decode+0x2c2>
10000e3b:	83 f8 10             	cmp    eax,0x10
10000e3e:	75 22                	jne    10000e62 <_ssfn_zlib_decode+0x31b>
10000e40:	ba 02 00 00 00       	mov    edx,0x2
10000e45:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e4c:	e8 f0 fa ff ff       	call   10000941 <_ssfn__zreceive>
10000e51:	85 f6                	test   esi,esi
10000e53:	8d 58 03             	lea    ebx,[eax+0x3]
10000e56:	0f 84 e0 01 00 00    	je     1000103c <_ssfn_zlib_decode+0x4f5>
10000e5c:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000e60:	eb 31                	jmp    10000e93 <_ssfn_zlib_decode+0x34c>
10000e62:	83 f8 11             	cmp    eax,0x11
10000e65:	75 16                	jne    10000e7d <_ssfn_zlib_decode+0x336>
10000e67:	ba 03 00 00 00       	mov    edx,0x3
10000e6c:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e73:	e8 c9 fa ff ff       	call   10000941 <_ssfn__zreceive>
10000e78:	8d 58 03             	lea    ebx,[eax+0x3]
10000e7b:	eb 14                	jmp    10000e91 <_ssfn_zlib_decode+0x34a>
10000e7d:	ba 07 00 00 00       	mov    edx,0x7
10000e82:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e89:	e8 b3 fa ff ff       	call   10000941 <_ssfn__zreceive>
10000e8e:	8d 58 0b             	lea    ebx,[eax+0xb]
10000e91:	31 c0                	xor    eax,eax
10000e93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000e97:	29 f2                	sub    edx,esi
10000e99:	39 da                	cmp    edx,ebx
10000e9b:	0f 8c 9b 01 00 00    	jl     1000103c <_ssfn_zlib_decode+0x4f5>
10000ea1:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000ea5:	89 d9                	mov    ecx,ebx
10000ea7:	89 d7                	mov    edi,edx
10000ea9:	01 de                	add    esi,ebx
10000eab:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000ead:	e9 57 ff ff ff       	jmp    10000e09 <_ssfn_zlib_decode+0x2c2>
10000eb2:	0f 85 84 01 00 00    	jne    1000103c <_ssfn_zlib_decode+0x4f5>
10000eb8:	89 e9                	mov    ecx,ebp
10000eba:	8d 54 24 25          	lea    edx,[esp+0x25]
10000ebe:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000ec5:	e8 a0 f5 ff ff       	call   1000046a <_ssfn__zbuild_huffman>
10000eca:	85 c0                	test   eax,eax
10000ecc:	0f 84 6a 01 00 00    	je     1000103c <_ssfn_zlib_decode+0x4f5>
10000ed2:	8d 44 24 25          	lea    eax,[esp+0x25]
10000ed6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000eda:	8d 14 28             	lea    edx,[eax+ebp*1]
10000edd:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000ee4:	e8 81 f5 ff ff       	call   1000046a <_ssfn__zbuild_huffman>
10000ee9:	85 c0                	test   eax,eax
10000eeb:	0f 84 4b 01 00 00    	je     1000103c <_ssfn_zlib_decode+0x4f5>
10000ef1:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000ef8:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000eff:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000f06:	e8 50 f4 ff ff       	call   1000035b <_ssfn__zhuffman_decode>
10000f0b:	89 c3                	mov    ebx,eax
10000f0d:	3d ff 00 00 00       	cmp    eax,0xff
10000f12:	7f 34                	jg     10000f48 <_ssfn_zlib_decode+0x401>
10000f14:	85 c0                	test   eax,eax
10000f16:	0f 88 20 01 00 00    	js     1000103c <_ssfn_zlib_decode+0x4f5>
10000f1c:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000f23:	77 1d                	ja     10000f42 <_ssfn_zlib_decode+0x3fb>
10000f25:	89 ea                	mov    edx,ebp
10000f27:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000f2e:	e8 d8 f4 ff ff       	call   1000040b <_ssfn__zexpand>
10000f33:	85 c0                	test   eax,eax
10000f35:	0f 84 01 01 00 00    	je     1000103c <_ssfn_zlib_decode+0x4f5>
10000f3b:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000f42:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000f45:	45                   	inc    ebp
10000f46:	eb b0                	jmp    10000ef8 <_ssfn_zlib_decode+0x3b1>
10000f48:	3d 00 01 00 00       	cmp    eax,0x100
10000f4d:	75 0c                	jne    10000f5b <_ssfn_zlib_decode+0x414>
10000f4f:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000f56:	e9 cd 00 00 00       	jmp    10001028 <_ssfn_zlib_decode+0x4e1>
10000f5b:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000f61:	8b 14 85 20 59 00 10 	mov    edx,DWORD PTR [eax*4+0x10005920]	10000f64: R_386_32	.text
10000f68:	8b 1c 85 a0 59 00 10 	mov    ebx,DWORD PTR [eax*4+0x100059a0]	10000f6b: R_386_32	.text
10000f6f:	85 d2                	test   edx,edx
10000f71:	74 0e                	je     10000f81 <_ssfn_zlib_decode+0x43a>
10000f73:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000f7a:	e8 c2 f9 ff ff       	call   10000941 <_ssfn__zreceive>
10000f7f:	01 c3                	add    ebx,eax
10000f81:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000f88:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000f8f:	e8 c7 f3 ff ff       	call   1000035b <_ssfn__zhuffman_decode>
10000f94:	85 c0                	test   eax,eax
10000f96:	0f 88 a0 00 00 00    	js     1000103c <_ssfn_zlib_decode+0x4f5>
10000f9c:	8b 14 85 20 58 00 10 	mov    edx,DWORD PTR [eax*4+0x10005820]	10000f9f: R_386_32	.text
10000fa3:	8b 3c 85 a0 58 00 10 	mov    edi,DWORD PTR [eax*4+0x100058a0]	10000fa6: R_386_32	.text
10000faa:	85 d2                	test   edx,edx
10000fac:	74 0e                	je     10000fbc <_ssfn_zlib_decode+0x475>
10000fae:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000fb5:	e8 87 f9 ff ff       	call   10000941 <_ssfn__zreceive>
10000fba:	01 c7                	add    edi,eax
10000fbc:	89 e8                	mov    eax,ebp
10000fbe:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000fc5:	39 f8                	cmp    eax,edi
10000fc7:	7c 73                	jl     1000103c <_ssfn_zlib_decode+0x4f5>
10000fc9:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000fcd:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000fd4:	73 19                	jae    10000fef <_ssfn_zlib_decode+0x4a8>
10000fd6:	89 ea                	mov    edx,ebp
10000fd8:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000fdf:	e8 27 f4 ff ff       	call   1000040b <_ssfn__zexpand>
10000fe4:	85 c0                	test   eax,eax
10000fe6:	74 54                	je     1000103c <_ssfn_zlib_decode+0x4f5>
10000fe8:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000fef:	89 ee                	mov    esi,ebp
10000ff1:	29 fe                	sub    esi,edi
10000ff3:	4f                   	dec    edi
10000ff4:	75 19                	jne    1000100f <_ssfn_zlib_decode+0x4c8>
10000ff6:	85 db                	test   ebx,ebx
10000ff8:	0f 84 fa fe ff ff    	je     10000ef8 <_ssfn_zlib_decode+0x3b1>
10000ffe:	8a 06                	mov    al,BYTE PTR [esi]
10001000:	01 eb                	add    ebx,ebp
10001002:	45                   	inc    ebp
10001003:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10001006:	39 dd                	cmp    ebp,ebx
10001008:	75 f8                	jne    10001002 <_ssfn_zlib_decode+0x4bb>
1000100a:	e9 e9 fe ff ff       	jmp    10000ef8 <_ssfn_zlib_decode+0x3b1>
1000100f:	85 db                	test   ebx,ebx
10001011:	0f 84 e1 fe ff ff    	je     10000ef8 <_ssfn_zlib_decode+0x3b1>
10001017:	8d 04 1e             	lea    eax,[esi+ebx*1]
1000101a:	89 ef                	mov    edi,ebp
1000101c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000101d:	39 f0                	cmp    eax,esi
1000101f:	75 fb                	jne    1000101c <_ssfn_zlib_decode+0x4d5>
10001021:	01 dd                	add    ebp,ebx
10001023:	e9 d0 fe ff ff       	jmp    10000ef8 <_ssfn_zlib_decode+0x3b1>
10001028:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
1000102d:	0f 84 c0 fb ff ff    	je     10000bf3 <_ssfn_zlib_decode+0xac>
10001033:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
1000103a:	eb 14                	jmp    10001050 <_ssfn_zlib_decode+0x509>
1000103c:	83 ec 0c             	sub    esp,0xc
1000103f:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10001046:	e8 fc ff ff ff       	call   10001047 <_ssfn_zlib_decode+0x500>	10001047: R_386_PC32	free
1000104b:	83 c4 10             	add    esp,0x10
1000104e:	31 c0                	xor    eax,eax
10001050:	81 c4 bc 19 00 00    	add    esp,0x19bc
10001056:	5b                   	pop    ebx
10001057:	5e                   	pop    esi
10001058:	5f                   	pop    edi
10001059:	5d                   	pop    ebp
1000105a:	c3                   	ret    

1000105b <ssfn_load>:
1000105b:	55                   	push   ebp
1000105c:	57                   	push   edi
1000105d:	56                   	push   esi
1000105e:	53                   	push   ebx
1000105f:	83 ec 1c             	sub    esp,0x1c
10001062:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10001066:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
1000106a:	85 ff                	test   edi,edi
1000106c:	0f 84 d0 01 00 00    	je     10001242 <ssfn_load+0x1e7>
10001072:	85 f6                	test   esi,esi
10001074:	0f 84 c8 01 00 00    	je     10001242 <ssfn_load+0x1e7>
1000107a:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
1000107d:	0f 85 a8 00 00 00    	jne    1000112b <ssfn_load+0xd0>
10001083:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10001087:	0f 85 9e 00 00 00    	jne    1000112b <ssfn_load+0xd0>
1000108d:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10001091:	74 0a                	je     1000109d <ssfn_load+0x42>
10001093:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10001098:	e9 aa 01 00 00       	jmp    10001247 <ssfn_load+0x1ec>
1000109d:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
100010a0:	a8 04                	test   al,0x4
100010a2:	75 05                	jne    100010a9 <ssfn_load+0x4e>
100010a4:	83 c6 0a             	add    esi,0xa
100010a7:	eb 08                	jmp    100010b1 <ssfn_load+0x56>
100010a9:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
100010ad:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
100010b1:	a8 08                	test   al,0x8
100010b3:	74 07                	je     100010bc <ssfn_load+0x61>
100010b5:	46                   	inc    esi
100010b6:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
100010ba:	eb f7                	jmp    100010b3 <ssfn_load+0x58>
100010bc:	a8 10                	test   al,0x10
100010be:	74 07                	je     100010c7 <ssfn_load+0x6c>
100010c0:	46                   	inc    esi
100010c1:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
100010c5:	eb f7                	jmp    100010be <ssfn_load+0x63>
100010c7:	83 ec 0c             	sub    esp,0xc
100010ca:	56                   	push   esi
100010cb:	e8 fc ff ff ff       	call   100010cc <ssfn_load+0x71>	100010cc: R_386_PC32	_ssfn_zlib_decode
100010d0:	83 c4 10             	add    esp,0x10
100010d3:	89 c6                	mov    esi,eax
100010d5:	85 c0                	test   eax,eax
100010d7:	74 ba                	je     10001093 <ssfn_load+0x38>
100010d9:	50                   	push   eax
100010da:	50                   	push   eax
100010db:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
100010e1:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
100010e8:	50                   	push   eax
100010e9:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
100010ef:	e8 fc ff ff ff       	call   100010f0 <ssfn_load+0x95>	100010f0: R_386_PC32	realloc
100010f4:	83 c4 10             	add    esp,0x10
100010f7:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
100010fd:	85 c0                	test   eax,eax
100010ff:	75 0f                	jne    10001110 <ssfn_load+0xb5>
10001101:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
1000110b:	e9 1a 01 00 00       	jmp    1000122a <ssfn_load+0x1cf>
10001110:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10001116:	8d 4a 01             	lea    ecx,[edx+0x1]
10001119:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
1000111f:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10001122:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10001125:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
1000112b:	50                   	push   eax
1000112c:	6a 04                	push   0x4
1000112e:	68 d0 56 00 10       	push   0x100056d0	1000112f: R_386_32	.text
10001133:	56                   	push   esi
10001134:	e8 fc ff ff ff       	call   10001135 <ssfn_load+0xda>	10001135: R_386_PC32	memcmp
10001139:	83 c4 10             	add    esp,0x10
1000113c:	89 c5                	mov    ebp,eax
1000113e:	85 c0                	test   eax,eax
10001140:	75 29                	jne    1000116b <ssfn_load+0x110>
10001142:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10001145:	01 f3                	add    ebx,esi
10001147:	83 c6 08             	add    esi,0x8
1000114a:	39 de                	cmp    esi,ebx
1000114c:	0f 83 f5 00 00 00    	jae    10001247 <ssfn_load+0x1ec>
10001152:	50                   	push   eax
10001153:	50                   	push   eax
10001154:	56                   	push   esi
10001155:	57                   	push   edi
10001156:	e8 fc ff ff ff       	call   10001157 <ssfn_load+0xfc>	10001157: R_386_PC32	ssfn_load
1000115b:	83 c4 10             	add    esp,0x10
1000115e:	85 c0                	test   eax,eax
10001160:	0f 85 e1 00 00 00    	jne    10001247 <ssfn_load+0x1ec>
10001166:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10001169:	eb df                	jmp    1000114a <ssfn_load+0xef>
1000116b:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
1000116e:	83 e0 0f             	and    eax,0xf
10001171:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10001175:	53                   	push   ebx
10001176:	6a 04                	push   0x4
10001178:	68 d5 56 00 10       	push   0x100056d5	10001179: R_386_32	.text
1000117d:	56                   	push   esi
1000117e:	e8 fc ff ff ff       	call   1000117f <ssfn_load+0x124>	1000117f: R_386_PC32	memcmp
10001183:	83 c4 10             	add    esp,0x10
10001186:	89 c5                	mov    ebp,eax
10001188:	85 c0                	test   eax,eax
1000118a:	0f 85 03 ff ff ff    	jne    10001093 <ssfn_load+0x38>
10001190:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10001193:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
10001197:	51                   	push   ecx
10001198:	6a 04                	push   0x4
1000119a:	68 da 56 00 10       	push   0x100056da	1000119b: R_386_32	.text
1000119f:	50                   	push   eax
100011a0:	e8 fc ff ff ff       	call   100011a1 <ssfn_load+0x146>	100011a1: R_386_PC32	memcmp
100011a5:	83 c4 10             	add    esp,0x10
100011a8:	85 c0                	test   eax,eax
100011aa:	0f 85 e3 fe ff ff    	jne    10001093 <ssfn_load+0x38>
100011b0:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
100011b5:	0f 87 d8 fe ff ff    	ja     10001093 <ssfn_load+0x38>
100011bb:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
100011bf:	39 cb                	cmp    ebx,ecx
100011c1:	0f 86 cc fe ff ff    	jbe    10001093 <ssfn_load+0x38>
100011c7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
100011ca:	39 c3                	cmp    ebx,eax
100011cc:	0f 86 c1 fe ff ff    	jbe    10001093 <ssfn_load+0x38>
100011d2:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
100011d5:	0f 86 b8 fe ff ff    	jbe    10001093 <ssfn_load+0x38>
100011db:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
100011de:	0f 86 af fe ff ff    	jbe    10001093 <ssfn_load+0x38>
100011e4:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
100011e7:	0f 86 a6 fe ff ff    	jbe    10001093 <ssfn_load+0x38>
100011ed:	39 c1                	cmp    ecx,eax
100011ef:	0f 83 9e fe ff ff    	jae    10001093 <ssfn_load+0x38>
100011f5:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
100011fa:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
100011fd:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
10001203:	40                   	inc    eax
10001204:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
1000120a:	52                   	push   edx
1000120b:	c1 e0 02             	shl    eax,0x2
1000120e:	52                   	push   edx
1000120f:	50                   	push   eax
10001210:	ff 33                	push   DWORD PTR [ebx]
10001212:	e8 fc ff ff ff       	call   10001213 <ssfn_load+0x1b8>	10001213: R_386_PC32	realloc
10001217:	83 c4 10             	add    esp,0x10
1000121a:	89 03                	mov    DWORD PTR [ebx],eax
1000121c:	85 c0                	test   eax,eax
1000121e:	75 0f                	jne    1000122f <ssfn_load+0x1d4>
10001220:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
1000122a:	83 cd ff             	or     ebp,0xffffffff
1000122d:	eb 18                	jmp    10001247 <ssfn_load+0x1ec>
1000122f:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
10001235:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
10001239:	89 f8                	mov    eax,edi
1000123b:	e8 ad f3 ff ff       	call   100005ed <_ssfn_fc.part.1>
10001240:	eb 05                	jmp    10001247 <ssfn_load+0x1ec>
10001242:	bd fc ff ff ff       	mov    ebp,0xfffffffc
10001247:	83 c4 1c             	add    esp,0x1c
1000124a:	89 e8                	mov    eax,ebp
1000124c:	5b                   	pop    ebx
1000124d:	5e                   	pop    esi
1000124e:	5f                   	pop    edi
1000124f:	5d                   	pop    ebp
10001250:	c3                   	ret    

10001251 <ssfn_free>:
10001251:	57                   	push   edi
10001252:	56                   	push   esi
10001253:	53                   	push   ebx
10001254:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001258:	85 db                	test   ebx,ebx
1000125a:	74 7e                	je     100012da <ssfn_free+0x89>
1000125c:	89 d8                	mov    eax,ebx
1000125e:	e8 8a f3 ff ff       	call   100005ed <_ssfn_fc.part.1>
10001263:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
1000126a:	74 32                	je     1000129e <ssfn_free+0x4d>
1000126c:	31 f6                	xor    esi,esi
1000126e:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
10001274:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
1000127a:	7e 16                	jle    10001292 <ssfn_free+0x41>
1000127c:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
1000127f:	85 c0                	test   eax,eax
10001281:	74 0c                	je     1000128f <ssfn_free+0x3e>
10001283:	83 ec 0c             	sub    esp,0xc
10001286:	50                   	push   eax
10001287:	e8 fc ff ff ff       	call   10001288 <ssfn_free+0x37>	10001288: R_386_PC32	free
1000128c:	83 c4 10             	add    esp,0x10
1000128f:	46                   	inc    esi
10001290:	eb dc                	jmp    1000126e <ssfn_free+0x1d>
10001292:	83 ec 0c             	sub    esp,0xc
10001295:	50                   	push   eax
10001296:	e8 fc ff ff ff       	call   10001297 <ssfn_free+0x46>	10001297: R_386_PC32	free
1000129b:	83 c4 10             	add    esp,0x10
1000129e:	31 f6                	xor    esi,esi
100012a0:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
100012a3:	85 c0                	test   eax,eax
100012a5:	74 0c                	je     100012b3 <ssfn_free+0x62>
100012a7:	83 ec 0c             	sub    esp,0xc
100012aa:	50                   	push   eax
100012ab:	e8 fc ff ff ff       	call   100012ac <ssfn_free+0x5b>	100012ac: R_386_PC32	free
100012b0:	83 c4 10             	add    esp,0x10
100012b3:	46                   	inc    esi
100012b4:	83 fe 05             	cmp    esi,0x5
100012b7:	75 e7                	jne    100012a0 <ssfn_free+0x4f>
100012b9:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100012bf:	85 c0                	test   eax,eax
100012c1:	74 0c                	je     100012cf <ssfn_free+0x7e>
100012c3:	83 ec 0c             	sub    esp,0xc
100012c6:	50                   	push   eax
100012c7:	e8 fc ff ff ff       	call   100012c8 <ssfn_free+0x77>	100012c8: R_386_PC32	free
100012cc:	83 c4 10             	add    esp,0x10
100012cf:	b9 72 3d 00 00       	mov    ecx,0x3d72
100012d4:	31 c0                	xor    eax,eax
100012d6:	89 df                	mov    edi,ebx
100012d8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100012da:	5b                   	pop    ebx
100012db:	5e                   	pop    esi
100012dc:	5f                   	pop    edi
100012dd:	c3                   	ret    

100012de <ssfn_mem>:
100012de:	55                   	push   ebp
100012df:	31 c0                	xor    eax,eax
100012e1:	57                   	push   edi
100012e2:	56                   	push   esi
100012e3:	53                   	push   ebx
100012e4:	83 ec 08             	sub    esp,0x8
100012e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100012eb:	85 d2                	test   edx,edx
100012ed:	0f 84 8e 00 00 00    	je     10001381 <ssfn_mem+0xa3>
100012f3:	b8 c8 f5 00 00       	mov    eax,0xf5c8
100012f8:	31 c9                	xor    ecx,ecx
100012fa:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
10001301:	41                   	inc    ecx
10001302:	8d 04 98             	lea    eax,[eax+ebx*4]
10001305:	83 f9 05             	cmp    ecx,0x5
10001308:	75 f0                	jne    100012fa <ssfn_mem+0x1c>
1000130a:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
10001310:	31 c9                	xor    ecx,ecx
10001312:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
10001319:	89 34 24             	mov    DWORD PTR [esp],esi
1000131c:	85 f6                	test   esi,esi
1000131e:	74 48                	je     10001368 <ssfn_mem+0x8a>
10001320:	31 db                	xor    ebx,ebx
10001322:	8b 34 24             	mov    esi,DWORD PTR [esp]
10001325:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
10001328:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
1000132c:	85 ff                	test   edi,edi
1000132e:	74 2a                	je     1000135a <ssfn_mem+0x7c>
10001330:	31 f6                	xor    esi,esi
10001332:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
10001336:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10001339:	85 ed                	test   ebp,ebp
1000133b:	74 0f                	je     1000134c <ssfn_mem+0x6e>
1000133d:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
10001341:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
10001345:	0f af fd             	imul   edi,ebp
10001348:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
1000134c:	46                   	inc    esi
1000134d:	81 fe 00 01 00 00    	cmp    esi,0x100
10001353:	75 dd                	jne    10001332 <ssfn_mem+0x54>
10001355:	05 00 04 00 00       	add    eax,0x400
1000135a:	43                   	inc    ebx
1000135b:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001361:	75 bf                	jne    10001322 <ssfn_mem+0x44>
10001363:	05 00 04 00 00       	add    eax,0x400
10001368:	41                   	inc    ecx
10001369:	83 f9 11             	cmp    ecx,0x11
1000136c:	75 a4                	jne    10001312 <ssfn_mem+0x34>
1000136e:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
10001375:	74 0a                	je     10001381 <ssfn_mem+0xa3>
10001377:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
1000137d:	01 d2                	add    edx,edx
1000137f:	01 d0                	add    eax,edx
10001381:	83 c4 08             	add    esp,0x8
10001384:	5b                   	pop    ebx
10001385:	5e                   	pop    esi
10001386:	5f                   	pop    edi
10001387:	5d                   	pop    ebp
10001388:	c3                   	ret    

10001389 <ssfn_select>:
10001389:	55                   	push   ebp
1000138a:	57                   	push   edi
1000138b:	56                   	push   esi
1000138c:	53                   	push   ebx
1000138d:	83 ec 1c             	sub    esp,0x1c
10001390:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10001394:	85 db                	test   ebx,ebx
10001396:	75 0a                	jne    100013a2 <ssfn_select+0x19>
10001398:	be fc ff ff ff       	mov    esi,0xfffffffc
1000139d:	e9 13 01 00 00       	jmp    100014b5 <ssfn_select+0x12c>
100013a2:	89 d8                	mov    eax,ebx
100013a4:	e8 44 f2 ff ff       	call   100005ed <_ssfn_fc.part.1>
100013a9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100013ad:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
100013b3:	0f 85 e9 00 00 00    	jne    100014a2 <ssfn_select+0x119>
100013b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100013bd:	83 e8 08             	sub    eax,0x8
100013c0:	3d b8 00 00 00       	cmp    eax,0xb8
100013c5:	0f 87 de 00 00 00    	ja     100014a9 <ssfn_select+0x120>
100013cb:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
100013d3:	75 76                	jne    1000144b <ssfn_select+0xc2>
100013d5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
100013da:	74 bc                	je     10001398 <ssfn_select+0xf>
100013dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100013e0:	80 38 00             	cmp    BYTE PTR [eax],0x0
100013e3:	74 b3                	je     10001398 <ssfn_select+0xf>
100013e5:	31 ed                	xor    ebp,ebp
100013e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100013eb:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
100013ef:	74 03                	je     100013f4 <ssfn_select+0x6b>
100013f1:	45                   	inc    ebp
100013f2:	eb f3                	jmp    100013e7 <ssfn_select+0x5e>
100013f4:	8d 43 14             	lea    eax,[ebx+0x14]
100013f7:	89 df                	mov    edi,ebx
100013f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100013fd:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
10001403:	31 d2                	xor    edx,edx
10001405:	89 04 24             	mov    DWORD PTR [esp],eax
10001408:	39 14 24             	cmp    DWORD PTR [esp],edx
1000140b:	7e 33                	jle    10001440 <ssfn_select+0xb7>
1000140d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10001411:	8b 07                	mov    eax,DWORD PTR [edi]
10001413:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
10001416:	50                   	push   eax
10001417:	8d 41 20             	lea    eax,[ecx+0x20]
1000141a:	55                   	push   ebp
1000141b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
1000141f:	50                   	push   eax
10001420:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
10001424:	e8 fc ff ff ff       	call   10001425 <ssfn_select+0x9c>	10001425: R_386_PC32	memcmp
10001429:	83 c4 10             	add    esp,0x10
1000142c:	85 c0                	test   eax,eax
1000142e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10001432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10001436:	75 05                	jne    1000143d <ssfn_select+0xb4>
10001438:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
1000143b:	eb 34                	jmp    10001471 <ssfn_select+0xe8>
1000143d:	42                   	inc    edx
1000143e:	eb c8                	jmp    10001408 <ssfn_select+0x7f>
10001440:	83 c7 04             	add    edi,0x4
10001443:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10001447:	75 b4                	jne    100013fd <ssfn_select+0x74>
10001449:	eb 65                	jmp    100014b0 <ssfn_select+0x127>
1000144b:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
10001453:	74 15                	je     1000146a <ssfn_select+0xe1>
10001455:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
1000145a:	7f 54                	jg     100014b0 <ssfn_select+0x127>
1000145c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001460:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
10001468:	74 46                	je     100014b0 <ssfn_select+0x127>
1000146a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10001471:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001475:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
1000147c:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
10001482:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
1000148c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001490:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
10001496:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000149a:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
100014a0:	eb 13                	jmp    100014b5 <ssfn_select+0x12c>
100014a2:	be fb ff ff ff       	mov    esi,0xfffffffb
100014a7:	eb 0c                	jmp    100014b5 <ssfn_select+0x12c>
100014a9:	be fa ff ff ff       	mov    esi,0xfffffffa
100014ae:	eb 05                	jmp    100014b5 <ssfn_select+0x12c>
100014b0:	be fd ff ff ff       	mov    esi,0xfffffffd
100014b5:	83 c4 1c             	add    esp,0x1c
100014b8:	89 f0                	mov    eax,esi
100014ba:	5b                   	pop    ebx
100014bb:	5e                   	pop    esi
100014bc:	5f                   	pop    edi
100014bd:	5d                   	pop    ebp
100014be:	c3                   	ret    

100014bf <ssfn_render>:
100014bf:	55                   	push   ebp
100014c0:	57                   	push   edi
100014c1:	56                   	push   esi
100014c2:	53                   	push   ebx
100014c3:	81 ec dc 05 01 00    	sub    esp,0x105dc
100014c9:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
100014d0:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
100014db:	85 ed                	test   ebp,ebp
100014dd:	0f 94 c2             	sete   dl
100014e0:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
100014e8:	0f 94 c0             	sete   al
100014eb:	08 c2                	or     dl,al
100014ed:	74 0a                	je     100014f9 <ssfn_render+0x3a>
100014ef:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
100014f4:	e9 14 1e 00 00       	jmp    1000330d <ssfn_render+0x1e4e>
100014f9:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
10001500:	31 c9                	xor    ecx,ecx
10001502:	8a 00                	mov    al,BYTE PTR [eax]
10001504:	84 c0                	test   al,al
10001506:	0f 84 01 1e 00 00    	je     1000330d <ssfn_render+0x1e4e>
1000150c:	3c 0d                	cmp    al,0xd
1000150e:	75 0f                	jne    1000151f <ssfn_render+0x60>
10001510:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10001517:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
1000151d:	eb 31                	jmp    10001550 <ssfn_render+0x91>
1000151f:	3c 0a                	cmp    al,0xa
10001521:	75 37                	jne    1000155a <ssfn_render+0x9b>
10001523:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000152a:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10001530:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
10001533:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
10001539:	85 c0                	test   eax,eax
1000153b:	75 06                	jne    10001543 <ssfn_render+0x84>
1000153d:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
10001543:	01 d0                	add    eax,edx
10001545:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000154c:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10001550:	b9 01 00 00 00       	mov    ecx,0x1
10001555:	e9 b3 1d 00 00       	jmp    1000330d <ssfn_render+0x1e4e>
1000155a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000155d:	85 c0                	test   eax,eax
1000155f:	74 3e                	je     1000159f <ssfn_render+0xe0>
10001561:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10001564:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
1000156b:	56                   	push   esi
1000156c:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001573:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000157a:	e8 a0 f4 ff ff       	call   10000a1f <_ssfn_c>
1000157f:	5b                   	pop    ebx
10001580:	85 c0                	test   eax,eax
10001582:	0f 85 71 02 00 00    	jne    100017f9 <ssfn_render+0x33a>
10001588:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
1000158e:	81 e2 00 01 00 00    	and    edx,0x100
10001594:	0f 84 fd 01 00 00    	je     10001797 <ssfn_render+0x2d8>
1000159a:	e9 1d 02 00 00       	jmp    100017bc <ssfn_render+0x2fd>
1000159f:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
100015a5:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
100015ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100015b0:	3d fd 00 00 00       	cmp    eax,0xfd
100015b5:	7f 08                	jg     100015bf <ssfn_render+0x100>
100015b7:	89 c3                	mov    ebx,eax
100015b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100015bd:	eb 3f                	jmp    100015fe <ssfn_render+0x13f>
100015bf:	31 db                	xor    ebx,ebx
100015c1:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100015c9:	eb 33                	jmp    100015fe <ssfn_render+0x13f>
100015cb:	85 c0                	test   eax,eax
100015cd:	0f 84 64 01 00 00    	je     10001737 <ssfn_render+0x278>
100015d3:	43                   	inc    ebx
100015d4:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
100015d8:	7e 28                	jle    10001602 <ssfn_render+0x143>
100015da:	85 c0                	test   eax,eax
100015dc:	0f 85 17 02 00 00    	jne    100017f9 <ssfn_render+0x33a>
100015e2:	31 db                	xor    ebx,ebx
100015e4:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100015ec:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
100015f4:	74 92                	je     10001588 <ssfn_render+0xc9>
100015f6:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
100015fe:	31 c0                	xor    eax,eax
10001600:	eb d2                	jmp    100015d4 <ssfn_render+0x115>
10001602:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
10001606:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
1000160d:	74 bc                	je     100015cb <ssfn_render+0x10c>
1000160f:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000161a:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001621:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
10001628:	7e 50                	jle    1000167a <ssfn_render+0x1bb>
1000162a:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
1000162d:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
10001631:	c1 fa 04             	sar    edx,0x4
10001634:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
1000163a:	80 e2 03             	and    dl,0x3
1000163d:	75 32                	jne    10001671 <ssfn_render+0x1b2>
1000163f:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
10001643:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001649:	75 26                	jne    10001671 <ssfn_render+0x1b2>
1000164b:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
10001652:	50                   	push   eax
10001653:	89 f8                	mov    eax,edi
10001655:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000165c:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001663:	e8 b7 f3 ff ff       	call   10000a1f <_ssfn_c>
10001668:	59                   	pop    ecx
10001669:	85 c0                	test   eax,eax
1000166b:	0f 85 04 01 00 00    	jne    10001775 <ssfn_render+0x2b6>
10001671:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001678:	eb a0                	jmp    1000161a <ssfn_render+0x15b>
1000167a:	85 c0                	test   eax,eax
1000167c:	0f 85 51 ff ff ff    	jne    100015d3 <ssfn_render+0x114>
10001682:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000168d:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001694:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
1000169b:	0f 8e f9 1b 00 00    	jle    1000329a <ssfn_render+0x1ddb>
100016a1:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100016a4:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
100016a8:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
100016ae:	74 09                	je     100016b9 <ssfn_render+0x1fa>
100016b0:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100016b7:	eb d4                	jmp    1000168d <ssfn_render+0x1ce>
100016b9:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100016c0:	57                   	push   edi
100016c1:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100016c8:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100016cf:	e8 4b f3 ff ff       	call   10000a1f <_ssfn_c>
100016d4:	5a                   	pop    edx
100016d5:	85 c0                	test   eax,eax
100016d7:	74 d7                	je     100016b0 <ssfn_render+0x1f1>
100016d9:	e9 97 00 00 00       	jmp    10001775 <ssfn_render+0x2b6>
100016de:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100016e1:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
100016e5:	c1 fa 04             	sar    edx,0x4
100016e8:	31 ca                	xor    edx,ecx
100016ea:	80 e2 03             	and    dl,0x3
100016ed:	0f 84 b7 1b 00 00    	je     100032aa <ssfn_render+0x1deb>
100016f3:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100016fa:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001701:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
10001707:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
1000170e:	7f ce                	jg     100016de <ssfn_render+0x21f>
10001710:	83 e1 03             	and    ecx,0x3
10001713:	83 f9 03             	cmp    ecx,0x3
10001716:	75 1f                	jne    10001737 <ssfn_render+0x278>
10001718:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001723:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000172a:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001731:	0f 8f 9c 1b 00 00    	jg     100032d3 <ssfn_render+0x1e14>
10001737:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001742:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001749:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001750:	7e 3e                	jle    10001790 <ssfn_render+0x2d1>
10001752:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001755:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
1000175c:	57                   	push   edi
1000175d:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001764:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000176b:	e8 af f2 ff ff       	call   10000a1f <_ssfn_c>
10001770:	5a                   	pop    edx
10001771:	85 c0                	test   eax,eax
10001773:	74 12                	je     10001787 <ssfn_render+0x2c8>
10001775:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000177c:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
1000177f:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
10001782:	e9 4c fe ff ff       	jmp    100015d3 <ssfn_render+0x114>
10001787:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000178e:	eb b2                	jmp    10001742 <ssfn_render+0x283>
10001790:	31 c0                	xor    eax,eax
10001792:	e9 3c fe ff ff       	jmp    100015d3 <ssfn_render+0x114>
10001797:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
1000179d:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
100017a8:	81 fb fd 00 00 00    	cmp    ebx,0xfd
100017ae:	7f 16                	jg     100017c6 <ssfn_render+0x307>
100017b0:	89 da                	mov    edx,ebx
100017b2:	31 c0                	xor    eax,eax
100017b4:	39 da                	cmp    edx,ebx
100017b6:	7e 15                	jle    100017cd <ssfn_render+0x30e>
100017b8:	85 c0                	test   eax,eax
100017ba:	75 3d                	jne    100017f9 <ssfn_render+0x33a>
100017bc:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
100017c1:	e9 47 1b 00 00       	jmp    1000330d <ssfn_render+0x1e4e>
100017c6:	bb 04 00 00 00       	mov    ebx,0x4
100017cb:	eb e5                	jmp    100017b2 <ssfn_render+0x2f3>
100017cd:	85 c0                	test   eax,eax
100017cf:	75 28                	jne    100017f9 <ssfn_render+0x33a>
100017d1:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
100017d9:	74 1b                	je     100017f6 <ssfn_render+0x337>
100017db:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
100017df:	8b 09                	mov    ecx,DWORD PTR [ecx]
100017e1:	85 c9                	test   ecx,ecx
100017e3:	74 11                	je     100017f6 <ssfn_render+0x337>
100017e5:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
100017e8:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
100017ec:	78 08                	js     100017f6 <ssfn_render+0x337>
100017ee:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
100017f1:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
100017f4:	01 c8                	add    eax,ecx
100017f6:	42                   	inc    edx
100017f7:	eb bb                	jmp    100017b4 <ssfn_render+0x2f5>
100017f9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
100017fc:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
10001801:	85 d2                	test   edx,edx
10001803:	0f 84 04 1b 00 00    	je     1000330d <ssfn_render+0x1e4e>
10001809:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
1000180d:	0f 84 fa 1a 00 00    	je     1000330d <ssfn_render+0x1e4e>
10001813:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
10001819:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
1000181d:	85 ff                	test   edi,edi
1000181f:	0f 84 e8 1a 00 00    	je     1000330d <ssfn_render+0x1e4e>
10001825:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
1000182c:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10001830:	c1 ef 10             	shr    edi,0x10
10001833:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10001837:	83 ff 10             	cmp    edi,0x10
1000183a:	0f 87 af fc ff ff    	ja     100014ef <ssfn_render+0x30>
10001840:	8d 70 06             	lea    esi,[eax+0x6]
10001843:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
10001849:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
1000184d:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
10001853:	89 f7                	mov    edi,esi
10001855:	81 e7 00 02 00 00    	and    edi,0x200
1000185b:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
1000185f:	75 34                	jne    10001895 <ssfn_render+0x3d6>
10001861:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001865:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
1000186c:	85 c9                	test   ecx,ecx
1000186e:	74 25                	je     10001895 <ssfn_render+0x3d6>
10001870:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001874:	0f b6 ff             	movzx  edi,bh
10001877:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000187a:	85 c9                	test   ecx,ecx
1000187c:	74 17                	je     10001895 <ssfn_render+0x3d6>
1000187e:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
10001883:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
10001886:	85 c9                	test   ecx,ecx
10001888:	74 0b                	je     10001895 <ssfn_render+0x3d6>
1000188a:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
10001890:	e9 25 0d 00 00       	jmp    100025ba <ssfn_render+0x10fb>
10001895:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
10001899:	f7 c6 40 00 00 00    	test   esi,0x40
1000189f:	75 1a                	jne    100018bb <ssfn_render+0x3fc>
100018a1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
100018a5:	7e 10                	jle    100018b7 <ssfn_render+0x3f8>
100018a7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100018ab:	83 c7 04             	add    edi,0x4
100018ae:	83 e7 fc             	and    edi,0xfffffffc
100018b1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100018b5:	eb 04                	jmp    100018bb <ssfn_render+0x3fc>
100018b7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100018bb:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
100018c0:	f7 c6 02 00 00 00    	test   esi,0x2
100018c6:	74 14                	je     100018dc <ssfn_render+0x41d>
100018c8:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
100018cb:	c0 eb 05             	shr    bl,0x5
100018ce:	89 df                	mov    edi,ebx
100018d0:	83 f7 01             	xor    edi,0x1
100018d3:	83 e7 01             	and    edi,0x1
100018d6:	89 fb                	mov    ebx,edi
100018d8:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
100018dc:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
100018e1:	83 e6 01             	and    esi,0x1
100018e4:	74 10                	je     100018f6 <ssfn_render+0x437>
100018e6:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
100018ea:	75 0a                	jne    100018f6 <ssfn_render+0x437>
100018ec:	8d 51 40             	lea    edx,[ecx+0x40]
100018ef:	c1 fa 06             	sar    edx,0x6
100018f2:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
100018f6:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
100018fa:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100018ff:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10001903:	99                   	cdq    
10001904:	f7 f9                	idiv   ecx
10001906:	89 c1                	mov    ecx,eax
10001908:	31 c0                	xor    eax,eax
1000190a:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
1000190f:	74 0c                	je     1000191d <ssfn_render+0x45e>
10001911:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001915:	be 04 00 00 00       	mov    esi,0x4
1000191a:	99                   	cdq    
1000191b:	f7 fe                	idiv   esi
1000191d:	01 c8                	add    eax,ecx
1000191f:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
10001924:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
10001929:	01 f0                	add    eax,esi
1000192b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
1000192f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001933:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001937:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
1000193c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001940:	3d ff f4 00 00       	cmp    eax,0xf4ff
10001945:	0f 8f c2 19 00 00    	jg     1000330d <ssfn_render+0x1e4e>
1000194b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
10001950:	0f 85 f0 00 00 00    	jne    10001a46 <ssfn_render+0x587>
10001956:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000195a:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
1000195e:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
10001965:	75 2f                	jne    10001996 <ssfn_render+0x4d7>
10001967:	83 ec 0c             	sub    esp,0xc
1000196a:	68 00 04 00 00       	push   0x400
1000196f:	e8 fc ff ff ff       	call   10001970 <ssfn_render+0x4b1>	10001970: R_386_PC32	malloc
10001974:	83 c4 10             	add    esp,0x10
10001977:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
1000197d:	85 c0                	test   eax,eax
1000197f:	75 08                	jne    10001989 <ssfn_render+0x4ca>
10001981:	83 c9 ff             	or     ecx,0xffffffff
10001984:	e9 84 19 00 00       	jmp    1000330d <ssfn_render+0x1e4e>
10001989:	89 c7                	mov    edi,eax
1000198b:	b9 00 01 00 00       	mov    ecx,0x100
10001990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001994:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10001996:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000199a:	0f b6 dc             	movzx  ebx,ah
1000199d:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
100019a3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
100019a6:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
100019a9:	75 3a                	jne    100019e5 <ssfn_render+0x526>
100019ab:	83 ec 0c             	sub    esp,0xc
100019ae:	68 00 04 00 00       	push   0x400
100019b3:	e8 fc ff ff ff       	call   100019b4 <ssfn_render+0x4f5>	100019b4: R_386_PC32	malloc
100019b8:	89 03                	mov    DWORD PTR [ebx],eax
100019ba:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
100019c1:	83 c4 10             	add    esp,0x10
100019c4:	89 c2                	mov    edx,eax
100019c6:	0f b6 c4             	movzx  eax,ah
100019c9:	c1 ea 10             	shr    edx,0x10
100019cc:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100019d3:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
100019d6:	85 d2                	test   edx,edx
100019d8:	74 a7                	je     10001981 <ssfn_render+0x4c2>
100019da:	b9 00 01 00 00       	mov    ecx,0x100
100019df:	31 c0                	xor    eax,eax
100019e1:	89 d7                	mov    edi,edx
100019e3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100019e5:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
100019ec:	83 ec 0c             	sub    esp,0xc
100019ef:	0f b6 cc             	movzx  ecx,ah
100019f2:	89 c2                	mov    edx,eax
100019f4:	0f b6 c0             	movzx  eax,al
100019f7:	c1 ea 10             	shr    edx,0x10
100019fa:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001a01:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
10001a04:	8d 1c 82             	lea    ebx,[edx+eax*4]
10001a07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001a0b:	83 c0 08             	add    eax,0x8
10001a0e:	50                   	push   eax
10001a0f:	e8 fc ff ff ff       	call   10001a10 <ssfn_render+0x551>	10001a10: R_386_PC32	malloc
10001a14:	89 03                	mov    DWORD PTR [ebx],eax
10001a16:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001a1c:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10001a23:	83 c4 10             	add    esp,0x10
10001a26:	89 c2                	mov    edx,eax
10001a28:	0f b6 cc             	movzx  ecx,ah
10001a2b:	c1 ea 10             	shr    edx,0x10
10001a2e:	0f b6 c0             	movzx  eax,al
10001a31:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001a38:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
10001a3b:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
10001a3f:	75 0e                	jne    10001a4f <ssfn_render+0x590>
10001a41:	e9 3b ff ff ff       	jmp    10001981 <ssfn_render+0x4c2>
10001a46:	8d 45 1c             	lea    eax,[ebp+0x1c]
10001a49:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001a4f:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10001a55:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10001a59:	74 2a                	je     10001a85 <ssfn_render+0x5c6>
10001a5b:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001a60:	74 23                	je     10001a85 <ssfn_render+0x5c6>
10001a62:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001a65:	bb 04 00 00 00       	mov    ebx,0x4
10001a6a:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10001a6e:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10001a72:	89 cf                	mov    edi,ecx
10001a74:	29 c7                	sub    edi,eax
10001a76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001a7a:	0f af c7             	imul   eax,edi
10001a7d:	99                   	cdq    
10001a7e:	f7 fb                	idiv   ebx
10001a80:	99                   	cdq    
10001a81:	f7 f9                	idiv   ecx
10001a83:	eb 02                	jmp    10001a87 <ssfn_render+0x5c8>
10001a85:	31 c0                	xor    eax,eax
10001a87:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001a8d:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10001a91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001a95:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
10001a9d:	66 89 32             	mov    WORD PTR [edx],si
10001aa0:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
10001aa5:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001aab:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
10001aae:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001ab4:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001aba:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
10001abd:	01 c3                	add    ebx,eax
10001abf:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
10001ac2:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001ac8:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001ace:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
10001ad1:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
10001ad4:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
10001ada:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001ae0:	8a 12                	mov    dl,BYTE PTR [edx]
10001ae2:	83 e2 3f             	and    edx,0x3f
10001ae5:	01 d0                	add    eax,edx
10001ae7:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
10001aea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10001aee:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001af4:	8d 50 08             	lea    edx,[eax+0x8]
10001af7:	b0 ff                	mov    al,0xff
10001af9:	89 d7                	mov    edi,edx
10001afb:	f3 aa                	rep stos BYTE PTR es:[edi],al
10001afd:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001b03:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
10001b07:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001b0d:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
10001b11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001b15:	c1 e0 04             	shl    eax,0x4
10001b18:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10001b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001b20:	c1 e0 04             	shl    eax,0x4
10001b23:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10001b27:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001b2d:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
10001b31:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
10001b35:	0f 8e 4d 0a 00 00    	jle    10002588 <ssfn_render+0x10c9>
10001b3b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001b3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001b43:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
10001b46:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10001b49:	8a 12                	mov    dl,BYTE PTR [edx]
10001b4b:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
10001b4f:	83 e2 40             	and    edx,0x40
10001b52:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
10001b56:	88 c2                	mov    dl,al
10001b58:	21 ca                	and    edx,ecx
10001b5a:	fe c2                	inc    dl
10001b5c:	75 14                	jne    10001b72 <ssfn_render+0x6b3>
10001b5e:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
10001b63:	19 c0                	sbb    eax,eax
10001b65:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
10001b69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001b6d:	e9 09 0a 00 00       	jmp    1000257b <ssfn_render+0x10bc>
10001b72:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10001b76:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10001b79:	c1 e0 04             	shl    eax,0x4
10001b7c:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
10001b80:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b85:	99                   	cdq    
10001b86:	f7 fe                	idiv   esi
10001b88:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001b8c:	0f b6 c1             	movzx  eax,cl
10001b8f:	c1 e0 04             	shl    eax,0x4
10001b92:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b97:	99                   	cdq    
10001b98:	f7 fe                	idiv   esi
10001b9a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001b9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001ba2:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
10001ba6:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10001baa:	c1 e2 10             	shl    edx,0x10
10001bad:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
10001bb2:	74 0e                	je     10001bc2 <ssfn_render+0x703>
10001bb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001bb8:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
10001bbd:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
10001bc0:	eb 0c                	jmp    10001bce <ssfn_render+0x70f>
10001bc2:	c1 e0 08             	shl    eax,0x8
10001bc5:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
10001bca:	09 d0                	or     eax,edx
10001bcc:	09 c3                	or     ebx,eax
10001bce:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
10001bd1:	8a 01                	mov    al,BYTE PTR [ecx]
10001bd3:	84 c0                	test   al,al
10001bd5:	0f 88 17 05 00 00    	js     100020f2 <ssfn_render+0xc33>
10001bdb:	89 c7                	mov    edi,eax
10001bdd:	83 e7 3f             	and    edi,0x3f
10001be0:	a8 40                	test   al,0x40
10001be2:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10001be6:	74 10                	je     10001bf8 <ssfn_render+0x739>
10001be8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10001bec:	89 f8                	mov    eax,edi
10001bee:	41                   	inc    ecx
10001bef:	c1 e0 08             	shl    eax,0x8
10001bf2:	09 c2                	or     edx,eax
10001bf4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
10001bf8:	8d 41 01             	lea    eax,[ecx+0x1]
10001bfb:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001c05:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001c09:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001c14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001c18:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001c1c:	83 c0 04             	add    eax,0x4
10001c1f:	c1 f8 02             	sar    eax,0x2
10001c22:	01 c7                	add    edi,eax
10001c24:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001c2b:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001c2f:	0f 8f d7 01 00 00    	jg     10001e0c <ssfn_render+0x94d>
10001c35:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c38:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001c3c:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001c40:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001c44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001c48:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001c4b:	c1 e0 04             	shl    eax,0x4
10001c4e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001c53:	99                   	cdq    
10001c54:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001c58:	01 c6                	add    esi,eax
10001c5a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001c5e:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001c62:	c1 e0 04             	shl    eax,0x4
10001c65:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001c6a:	99                   	cdq    
10001c6b:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001c6f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001c73:	01 c3                	add    ebx,eax
10001c75:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001c79:	89 c8                	mov    eax,ecx
10001c7b:	01 c9                	add    ecx,ecx
10001c7d:	c1 f8 02             	sar    eax,0x2
10001c80:	83 e1 06             	and    ecx,0x6
10001c83:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001c87:	d3 f8                	sar    eax,cl
10001c89:	83 e0 03             	and    eax,0x3
10001c8c:	89 c1                	mov    ecx,eax
10001c8e:	83 f8 02             	cmp    eax,0x2
10001c91:	74 4a                	je     10001cdd <ssfn_render+0x81e>
10001c93:	83 f8 03             	cmp    eax,0x3
10001c96:	0f 84 e4 00 00 00    	je     10001d80 <ssfn_render+0x8c1>
10001c9c:	49                   	dec    ecx
10001c9d:	74 20                	je     10001cbf <ssfn_render+0x800>
10001c9f:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001ca5:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001cab:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001cb1:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001cb7:	83 c7 02             	add    edi,0x2
10001cba:	e9 41 01 00 00       	jmp    10001e00 <ssfn_render+0x941>
10001cbf:	83 c7 02             	add    edi,0x2
10001cc2:	50                   	push   eax
10001cc3:	50                   	push   eax
10001cc4:	89 e8                	mov    eax,ebp
10001cc6:	53                   	push   ebx
10001cc7:	56                   	push   esi
10001cc8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001ccc:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001cd0:	e8 9c e9 ff ff       	call   10000671 <_ssfn_l>
10001cd5:	83 c4 10             	add    esp,0x10
10001cd8:	e9 23 01 00 00       	jmp    10001e00 <ssfn_render+0x941>
10001cdd:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001ce1:	83 c7 04             	add    edi,0x4
10001ce4:	c1 e0 04             	shl    eax,0x4
10001ce7:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001cec:	99                   	cdq    
10001ced:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001cf1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001cf5:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001cf9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001cfd:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001d01:	c1 e0 04             	shl    eax,0x4
10001d04:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001d09:	99                   	cdq    
10001d0a:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001d0e:	83 ec 0c             	sub    esp,0xc
10001d11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001d15:	6a 00                	push   0x0
10001d17:	53                   	push   ebx
10001d18:	56                   	push   esi
10001d19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001d1d:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001d21:	99                   	cdq    
10001d22:	f7 f9                	idiv   ecx
10001d24:	01 d8                	add    eax,ebx
10001d26:	50                   	push   eax
10001d27:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001d2b:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001d2f:	99                   	cdq    
10001d30:	f7 f9                	idiv   ecx
10001d32:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001d36:	50                   	push   eax
10001d37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001d3b:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001d3f:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001d45:	99                   	cdq    
10001d46:	f7 f9                	idiv   ecx
10001d48:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001d4e:	50                   	push   eax
10001d4f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001d53:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001d59:	99                   	cdq    
10001d5a:	f7 f9                	idiv   ecx
10001d5c:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001d62:	50                   	push   eax
10001d63:	89 e8                	mov    eax,ebp
10001d65:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001d6b:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001d71:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001d75:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001d79:	e8 04 ea ff ff       	call   10000782 <_ssfn_b>
10001d7e:	eb 7d                	jmp    10001dfd <ssfn_render+0x93e>
10001d80:	83 ec 0c             	sub    esp,0xc
10001d83:	83 c7 06             	add    edi,0x6
10001d86:	6a 00                	push   0x0
10001d88:	53                   	push   ebx
10001d89:	56                   	push   esi
10001d8a:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001d8e:	c1 e0 04             	shl    eax,0x4
10001d91:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001d96:	99                   	cdq    
10001d97:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001d9b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001d9f:	50                   	push   eax
10001da0:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001da4:	c1 e0 04             	shl    eax,0x4
10001da7:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001dac:	99                   	cdq    
10001dad:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001db1:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001db5:	50                   	push   eax
10001db6:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001dba:	c1 e0 04             	shl    eax,0x4
10001dbd:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001dc2:	99                   	cdq    
10001dc3:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001dc7:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001dcb:	50                   	push   eax
10001dcc:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001dd0:	c1 e0 04             	shl    eax,0x4
10001dd3:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001dd8:	99                   	cdq    
10001dd9:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001ddd:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001de1:	50                   	push   eax
10001de2:	89 e8                	mov    eax,ebp
10001de4:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001dea:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001df0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001df4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001df8:	e8 85 e9 ff ff       	call   10000782 <_ssfn_b>
10001dfd:	83 c4 30             	add    esp,0x30
10001e00:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001e07:	e9 18 fe ff ff       	jmp    10001c24 <ssfn_render+0x765>
10001e0c:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001e12:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001e18:	75 0e                	jne    10001e28 <ssfn_render+0x969>
10001e1a:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001e20:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001e26:	74 2e                	je     10001e56 <ssfn_render+0x997>
10001e28:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001e2e:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001e34:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001e38:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001e3e:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001e44:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001e4a:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001e4f:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001e56:	b3 fe                	mov    bl,0xfe
10001e58:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001e5f:	0f 8e 16 07 00 00    	jle    1000257b <ssfn_render+0x10bc>
10001e65:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001e6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001e75:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001e7d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001e85:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001e8d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001e91:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001e95:	0f 8d de 06 00 00    	jge    10002579 <ssfn_render+0x10ba>
10001e9b:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001ea1:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001eac:	83 e8 03             	sub    eax,0x3
10001eaf:	31 f6                	xor    esi,esi
10001eb1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001eb5:	89 f8                	mov    eax,edi
10001eb7:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001ebb:	c1 f8 02             	sar    eax,0x2
10001ebe:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001ec2:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001ec9:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001ecd:	0f 8e 16 01 00 00    	jle    10001fe9 <ssfn_render+0xb2a>
10001ed3:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001ed9:	8d 47 01             	lea    eax,[edi+0x1]
10001edc:	01 c0                	add    eax,eax
10001ede:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001ee2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001ee6:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001eeb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001eef:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001ef3:	7d 0c                	jge    10001f01 <ssfn_render+0xa42>
10001ef5:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001ef9:	0f 8f db 00 00 00    	jg     10001fda <ssfn_render+0xb1b>
10001eff:	eb 0a                	jmp    10001f0b <ssfn_render+0xa4c>
10001f01:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001f05:	0f 8e cf 00 00 00    	jle    10001fda <ssfn_render+0xb1b>
10001f0b:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001f10:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001f14:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001f19:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001f1d:	89 d8                	mov    eax,ebx
10001f1f:	c1 fa 04             	sar    edx,0x4
10001f22:	c1 f8 04             	sar    eax,0x4
10001f25:	39 c2                	cmp    edx,eax
10001f27:	75 0a                	jne    10001f33 <ssfn_render+0xa74>
10001f29:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001f2d:	01 c8                	add    eax,ecx
10001f2f:	d1 f8                	sar    eax,1
10001f31:	eb 1a                	jmp    10001f4d <ssfn_render+0xa8e>
10001f33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001f37:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001f3b:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001f3f:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001f43:	0f af c1             	imul   eax,ecx
10001f46:	99                   	cdq    
10001f47:	f7 fb                	idiv   ebx
10001f49:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001f4d:	c1 f8 04             	sar    eax,0x4
10001f50:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001f55:	74 04                	je     10001f5b <ssfn_render+0xa9c>
10001f57:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001f5b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001f60:	75 3f                	jne    10001fa1 <ssfn_render+0xae2>
10001f62:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001f67:	74 38                	je     10001fa1 <ssfn_render+0xae2>
10001f69:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001f6d:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001f73:	f7 db                	neg    ebx
10001f75:	01 c2                	add    edx,eax
10001f77:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001f7b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001f7f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001f83:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001f87:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001f8b:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001f8f:	74 10                	je     10001fa1 <ssfn_render+0xae2>
10001f91:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001f95:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001f99:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001f9d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001fa1:	31 d2                	xor    edx,edx
10001fa3:	39 f2                	cmp    edx,esi
10001fa5:	75 0b                	jne    10001fb2 <ssfn_render+0xaf3>
10001fa7:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001faf:	46                   	inc    esi
10001fb0:	eb 28                	jmp    10001fda <ssfn_render+0xb1b>
10001fb2:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001fba:	39 c1                	cmp    ecx,eax
10001fbc:	7d 03                	jge    10001fc1 <ssfn_render+0xb02>
10001fbe:	42                   	inc    edx
10001fbf:	eb e2                	jmp    10001fa3 <ssfn_render+0xae4>
10001fc1:	89 f1                	mov    ecx,esi
10001fc3:	49                   	dec    ecx
10001fc4:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001fcc:	39 d1                	cmp    ecx,edx
10001fce:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001fd6:	7f eb                	jg     10001fc3 <ssfn_render+0xb04>
10001fd8:	eb cd                	jmp    10001fa7 <ssfn_render+0xae8>
10001fda:	8d 47 02             	lea    eax,[edi+0x2]
10001fdd:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001fe4:	e9 d9 fe ff ff       	jmp    10001ec2 <ssfn_render+0xa03>
10001fe9:	83 fe 01             	cmp    esi,0x1
10001fec:	7e 1f                	jle    1000200d <ssfn_render+0xb4e>
10001fee:	f7 c6 01 00 00 00    	test   esi,0x1
10001ff4:	74 24                	je     1000201a <ssfn_render+0xb5b>
10001ff6:	8d 46 ff             	lea    eax,[esi-0x1]
10001ff9:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10002001:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10002009:	89 c6                	mov    esi,eax
1000200b:	eb 0d                	jmp    1000201a <ssfn_render+0xb5b>
1000200d:	85 f6                	test   esi,esi
1000200f:	0f 84 c7 00 00 00    	je     100020dc <ssfn_render+0xc1d>
10002015:	be 01 00 00 00       	mov    esi,0x1
1000201a:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10002024:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10002028:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
1000202c:	39 d1                	cmp    ecx,edx
1000202e:	7d 0b                	jge    1000203b <ssfn_render+0xb7c>
10002030:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10002034:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10002038:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
1000203b:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10002046:	31 c0                	xor    eax,eax
10002048:	31 d2                	xor    edx,edx
1000204a:	8d 4e ff             	lea    ecx,[esi-0x1]
1000204d:	39 d1                	cmp    ecx,edx
1000204f:	7e 7d                	jle    100020ce <ssfn_render+0xc0f>
10002051:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10002059:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10002061:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10002065:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002069:	79 02                	jns    1000206d <ssfn_render+0xbae>
1000206b:	31 c0                	xor    eax,eax
1000206d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10002071:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10002075:	39 cf                	cmp    edi,ecx
10002077:	7e 04                	jle    1000207d <ssfn_render+0xbbe>
10002079:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
1000207d:	85 d2                	test   edx,edx
1000207f:	74 12                	je     10002093 <ssfn_render+0xbd4>
10002081:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10002089:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
1000208d:	39 c8                	cmp    eax,ecx
1000208f:	7d 02                	jge    10002093 <ssfn_render+0xbd4>
10002091:	89 c8                	mov    eax,ecx
10002093:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10002097:	7d 2b                	jge    100020c4 <ssfn_render+0xc05>
10002099:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
1000209d:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
100020a3:	8d 3c 01             	lea    edi,[ecx+eax*1]
100020a6:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
100020aa:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
100020ae:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
100020b2:	75 05                	jne    100020b9 <ssfn_render+0xbfa>
100020b4:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
100020b9:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
100020bd:	40                   	inc    eax
100020be:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
100020c2:	eb cf                	jmp    10002093 <ssfn_render+0xbd4>
100020c4:	83 c2 02             	add    edx,0x2
100020c7:	b0 01                	mov    al,0x1
100020c9:	e9 7c ff ff ff       	jmp    1000204a <ssfn_render+0xb8b>
100020ce:	83 e6 fe             	and    esi,0xfffffffe
100020d1:	84 c0                	test   al,al
100020d3:	74 07                	je     100020dc <ssfn_render+0xc1d>
100020d5:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
100020dc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100020e0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
100020e4:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
100020e8:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
100020ed:	e9 9b fd ff ff       	jmp    10001e8d <ssfn_render+0x9ce>
100020f2:	88 c2                	mov    dl,al
100020f4:	80 e2 60             	and    dl,0x60
100020f7:	0f 85 95 02 00 00    	jne    10002392 <ssfn_render+0xed3>
100020fd:	83 e0 1f             	and    eax,0x1f
10002100:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10002104:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
1000210b:	c1 fb 04             	sar    ebx,0x4
1000210e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002112:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10002116:	40                   	inc    eax
10002117:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000211b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000211f:	c1 f8 04             	sar    eax,0x4
10002122:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002126:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000212a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
1000212f:	99                   	cdq    
10002130:	f7 fe                	idiv   esi
10002132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002136:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000213a:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
1000213f:	99                   	cdq    
10002140:	f7 fe                	idiv   esi
10002142:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002146:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000214c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002150:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002154:	8d 14 3b             	lea    edx,[ebx+edi*1]
10002157:	39 d6                	cmp    esi,edx
10002159:	7d 0a                	jge    10002165 <ssfn_render+0xca6>
1000215b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000215f:	8d 14 3b             	lea    edx,[ebx+edi*1]
10002162:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002169:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10002171:	0f af c3             	imul   eax,ebx
10002174:	31 ff                	xor    edi,edi
10002176:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
1000217a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000217e:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002182:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10002186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000218a:	29 d8                	sub    eax,ebx
1000218c:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10002190:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
10002194:	0f 8d b1 00 00 00    	jge    1000224b <ssfn_render+0xd8c>
1000219a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000219e:	99                   	cdq    
1000219f:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
100021a3:	89 c6                	mov    esi,eax
100021a5:	31 c0                	xor    eax,eax
100021a7:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100021ac:	74 0e                	je     100021bc <ssfn_render+0xcfd>
100021ae:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
100021b2:	bb 04 00 00 00       	mov    ebx,0x4
100021b7:	29 f8                	sub    eax,edi
100021b9:	99                   	cdq    
100021ba:	f7 fb                	idiv   ebx
100021bc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
100021c0:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100021cb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
100021cf:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
100021d4:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100021db:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100021df:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100021e3:	39 d8                	cmp    eax,ebx
100021e5:	7d 4e                	jge    10002235 <ssfn_render+0xd76>
100021e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100021eb:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
100021f0:	99                   	cdq    
100021f1:	f7 fb                	idiv   ebx
100021f3:	8d 14 06             	lea    edx,[esi+eax*1]
100021f6:	83 e0 07             	and    eax,0x7
100021f9:	c1 fa 03             	sar    edx,0x3
100021fc:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
10002201:	0f a3 c2             	bt     edx,eax
10002204:	72 0e                	jb     10002214 <ssfn_render+0xd55>
10002206:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
1000220a:	43                   	inc    ebx
1000220b:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
10002212:	eb c0                	jmp    100021d4 <ssfn_render+0xd15>
10002214:	31 c0                	xor    eax,eax
10002216:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
1000221a:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
1000221e:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002224:	40                   	inc    eax
10002225:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
10002229:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
1000222d:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
10002231:	7d e3                	jge    10002216 <ssfn_render+0xd57>
10002233:	eb d1                	jmp    10002206 <ssfn_render+0xd47>
10002235:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002239:	47                   	inc    edi
1000223a:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
1000223e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10002242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
10002246:	e9 45 ff ff ff       	jmp    10002190 <ssfn_render+0xcd1>
1000224b:	b3 fe                	mov    bl,0xfe
1000224d:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
10002254:	0f 85 21 03 00 00    	jne    1000257b <ssfn_render+0x10bc>
1000225a:	31 c0                	xor    eax,eax
1000225c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002260:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
10002265:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10002269:	0f 95 c0             	setne  al
1000226c:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002270:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002274:	4f                   	dec    edi
10002275:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10002279:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
10002281:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002285:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000228c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002290:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
10002294:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002298:	31 c0                	xor    eax,eax
1000229a:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
1000229d:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100022a1:	83 c1 04             	add    ecx,0x4
100022a4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
100022a8:	0f 8d c0 02 00 00    	jge    1000256e <ssfn_render+0x10af>
100022ae:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100022b2:	8d 77 01             	lea    esi,[edi+0x1]
100022b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100022b9:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
100022bd:	4f                   	dec    edi
100022be:	be 01 00 00 00       	mov    esi,0x1
100022c3:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100022c7:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
100022cb:	7e 63                	jle    10002330 <ssfn_render+0xe71>
100022cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100022d1:	b9 01 00 00 00       	mov    ecx,0x1
100022d6:	89 ca                	mov    edx,ecx
100022d8:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
100022dc:	7e 45                	jle    10002323 <ssfn_render+0xe64>
100022de:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100022e4:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
100022e9:	75 34                	jne    1000231f <ssfn_render+0xe60>
100022eb:	89 c7                	mov    edi,eax
100022ed:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100022f1:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
100022f5:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
100022f9:	74 0c                	je     10002307 <ssfn_render+0xe48>
100022fb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100022ff:	01 d7                	add    edi,edx
10002301:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
10002305:	75 18                	jne    1000231f <ssfn_render+0xe60>
10002307:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
1000230b:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
1000230f:	74 06                	je     10002317 <ssfn_render+0xe58>
10002311:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
10002315:	75 08                	jne    1000231f <ssfn_render+0xe60>
10002317:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
1000231b:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
1000231f:	41                   	inc    ecx
10002320:	40                   	inc    eax
10002321:	eb b3                	jmp    100022d6 <ssfn_render+0xe17>
10002323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002327:	46                   	inc    esi
10002328:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
1000232c:	b0 01                	mov    al,0x1
1000232e:	eb 97                	jmp    100022c7 <ssfn_render+0xe08>
10002330:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
10002334:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10002338:	bb 01 00 00 00       	mov    ebx,0x1
1000233d:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002341:	7e 3d                	jle    10002380 <ssfn_render+0xec1>
10002343:	b8 01 00 00 00       	mov    eax,0x1
10002348:	89 c2                	mov    edx,eax
1000234a:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
1000234e:	7e 23                	jle    10002373 <ssfn_render+0xeb4>
10002350:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10002354:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
1000235a:	8d 14 07             	lea    edx,[edi+eax*1]
1000235d:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
10002362:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002366:	75 08                	jne    10002370 <ssfn_render+0xeb1>
10002368:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
1000236c:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10002370:	40                   	inc    eax
10002371:	eb d5                	jmp    10002348 <ssfn_render+0xe89>
10002373:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002377:	43                   	inc    ebx
10002378:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
1000237c:	b0 01                	mov    al,0x1
1000237e:	eb bd                	jmp    1000233d <ssfn_render+0xe7e>
10002380:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
10002383:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002387:	01 c9                	add    ecx,ecx
10002389:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
1000238d:	e9 08 ff ff ff       	jmp    1000229a <ssfn_render+0xddb>
10002392:	b3 fe                	mov    bl,0xfe
10002394:	80 fa 20             	cmp    dl,0x20
10002397:	0f 85 de 01 00 00    	jne    1000257b <ssfn_render+0x10bc>
1000239d:	89 c3                	mov    ebx,eax
1000239f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
100023a3:	c1 e3 08             	shl    ebx,0x8
100023a6:	81 e3 00 1f 00 00    	and    ebx,0x1f00
100023ac:	09 c3                	or     ebx,eax
100023ae:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
100023b2:	43                   	inc    ebx
100023b3:	40                   	inc    eax
100023b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100023b8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
100023bc:	40                   	inc    eax
100023bd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100023c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100023c5:	c1 f8 04             	sar    eax,0x4
100023c8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100023cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100023d0:	c1 f8 04             	sar    eax,0x4
100023d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100023d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100023db:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
100023e0:	99                   	cdq    
100023e1:	f7 fe                	idiv   esi
100023e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100023e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100023eb:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
100023f0:	99                   	cdq    
100023f1:	f7 fe                	idiv   esi
100023f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100023f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100023fb:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002401:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
10002405:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002409:	39 d6                	cmp    esi,edx
1000240b:	7d 0b                	jge    10002418 <ssfn_render+0xf59>
1000240d:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
10002411:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
10002415:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002418:	83 c1 04             	add    ecx,0x4
1000241b:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10002426:	8d 04 19             	lea    eax,[ecx+ebx*1]
10002429:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000242d:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
10002431:	72 35                	jb     10002468 <ssfn_render+0xfa9>
10002433:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10002437:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
1000243b:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002440:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
10002444:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
10002448:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000244f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
10002453:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
1000245b:	31 d2                	xor    edx,edx
1000245d:	31 ff                	xor    edi,edi
1000245f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
10002463:	e9 cc 00 00 00       	jmp    10002534 <ssfn_render+0x1075>
10002468:	8a 11                	mov    dl,BYTE PTR [ecx]
1000246a:	89 d0                	mov    eax,edx
1000246c:	83 e0 7f             	and    eax,0x7f
1000246f:	84 d2                	test   dl,dl
10002471:	8d 78 01             	lea    edi,[eax+0x1]
10002474:	78 09                	js     1000247f <ssfn_render+0xfc0>
10002476:	41                   	inc    ecx
10002477:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000247b:	89 ca                	mov    edx,ecx
1000247d:	eb 3d                	jmp    100024bc <ssfn_render+0xffd>
1000247f:	48                   	dec    eax
10002480:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002487:	83 f8 fe             	cmp    eax,0xfffffffe
1000248a:	74 16                	je     100024a2 <ssfn_render+0xfe3>
1000248c:	8d 5a 01             	lea    ebx,[edx+0x1]
1000248f:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
10002496:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
10002499:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
100024a0:	eb dd                	jmp    1000247f <ssfn_render+0xfc0>
100024a2:	83 c1 02             	add    ecx,0x2
100024a5:	eb 86                	jmp    1000242d <ssfn_render+0xf6e>
100024a7:	42                   	inc    edx
100024a8:	8d 73 01             	lea    esi,[ebx+0x1]
100024ab:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
100024b2:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
100024b5:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
100024bc:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
100024c0:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
100024c7:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
100024cc:	75 d9                	jne    100024a7 <ssfn_render+0xfe8>
100024ce:	01 f9                	add    ecx,edi
100024d0:	e9 58 ff ff ff       	jmp    1000242d <ssfn_render+0xf6e>
100024d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100024d9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100024dd:	99                   	cdq    
100024de:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100024e2:	0f af c8             	imul   ecx,eax
100024e5:	31 c0                	xor    eax,eax
100024e7:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100024ec:	74 0e                	je     100024fc <ssfn_render+0x103d>
100024ee:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100024f2:	bb 04 00 00 00       	mov    ebx,0x4
100024f7:	29 f8                	sub    eax,edi
100024f9:	99                   	cdq    
100024fa:	f7 fb                	idiv   ebx
100024fc:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002500:	31 db                	xor    ebx,ebx
10002502:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002506:	31 f6                	xor    esi,esi
10002508:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
1000250f:	01 c1                	add    ecx,eax
10002511:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
10002515:	7f 30                	jg     10002547 <ssfn_render+0x1088>
10002517:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000251b:	85 c0                	test   eax,eax
1000251d:	79 02                	jns    10002521 <ssfn_render+0x1062>
1000251f:	31 c0                	xor    eax,eax
10002521:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002525:	47                   	inc    edi
10002526:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
1000252a:	b2 01                	mov    dl,0x1
1000252c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
10002530:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
10002534:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002538:	7c 9b                	jl     100024d5 <ssfn_render+0x1016>
1000253a:	84 d2                	test   dl,dl
1000253c:	74 3b                	je     10002579 <ssfn_render+0x10ba>
1000253e:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10002545:	eb 32                	jmp    10002579 <ssfn_render+0x10ba>
10002547:	89 d8                	mov    eax,ebx
10002549:	99                   	cdq    
1000254a:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
1000254e:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
10002555:	3c ff                	cmp    al,0xff
10002557:	74 0e                	je     10002567 <ssfn_render+0x10a8>
10002559:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000255d:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002563:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
10002567:	46                   	inc    esi
10002568:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
1000256c:	eb a3                	jmp    10002511 <ssfn_render+0x1052>
1000256e:	84 c0                	test   al,al
10002570:	74 07                	je     10002579 <ssfn_render+0x10ba>
10002572:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
10002579:	b3 fe                	mov    bl,0xfe
1000257b:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
1000257f:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
10002583:	e9 9f f5 ff ff       	jmp    10001b27 <ssfn_render+0x668>
10002588:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000258e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10002591:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
10002594:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
10002597:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000259d:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
100025a1:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
100025a5:	89 f0                	mov    eax,esi
100025a7:	89 d9                	mov    ecx,ebx
100025a9:	43                   	inc    ebx
100025aa:	39 de                	cmp    esi,ebx
100025ac:	7e 08                	jle    100025b6 <ssfn_render+0x10f7>
100025ae:	48                   	dec    eax
100025af:	29 c8                	sub    eax,ecx
100025b1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
100025b4:	eb 04                	jmp    100025ba <ssfn_render+0x10fb>
100025b6:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
100025ba:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
100025c2:	0f 84 c9 0c 00 00    	je     10003291 <ssfn_render+0x1dd2>
100025c8:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
100025ce:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100025d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100025d8:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100025db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100025df:	0f ba e0 0c          	bt     eax,0xc
100025e3:	72 22                	jb     10002607 <ssfn_render+0x1148>
100025e5:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
100025e8:	83 e0 0f             	and    eax,0xf
100025eb:	3c 03                	cmp    al,0x3
100025ed:	74 18                	je     10002607 <ssfn_render+0x1148>
100025ef:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
100025f3:	84 c9                	test   cl,cl
100025f5:	74 10                	je     10002607 <ssfn_render+0x1148>
100025f7:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
100025fb:	0f af d7             	imul   edx,edi
100025fe:	89 d0                	mov    eax,edx
10002600:	99                   	cdq    
10002601:	f7 f9                	idiv   ecx
10002603:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002607:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000260b:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
10002611:	7d 06                	jge    10002619 <ssfn_render+0x115a>
10002613:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
10002619:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
1000261f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
10002623:	0f b7 13             	movzx  edx,WORD PTR [ebx]
10002626:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
1000262b:	89 d0                	mov    eax,edx
1000262d:	99                   	cdq    
1000262e:	f7 f9                	idiv   ecx
10002630:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
10002634:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002638:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
1000263b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
1000263f:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
10002643:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002647:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
1000264c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002650:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002655:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002659:	99                   	cdq    
1000265a:	f7 f9                	idiv   ecx
1000265c:	31 d2                	xor    edx,edx
1000265e:	83 ff 10             	cmp    edi,0x10
10002661:	0f 9f c2             	setg   dl
10002664:	42                   	inc    edx
10002665:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10002669:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
1000266d:	7d 08                	jge    10002677 <ssfn_render+0x11b8>
1000266f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002673:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10002677:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
1000267b:	39 c2                	cmp    edx,eax
1000267d:	7d 04                	jge    10002683 <ssfn_render+0x11c4>
1000267f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002683:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10002688:	74 4c                	je     100026d6 <ssfn_render+0x1217>
1000268a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000268e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002693:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002697:	99                   	cdq    
10002698:	f7 f9                	idiv   ecx
1000269a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000269e:	81 e2 00 08 00 00    	and    edx,0x800
100026a4:	74 04                	je     100026aa <ssfn_render+0x11eb>
100026a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100026aa:	01 d0                	add    eax,edx
100026ac:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100026b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100026b6:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
100026ba:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
100026be:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100026c3:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100026c7:	99                   	cdq    
100026c8:	f7 f9                	idiv   ecx
100026ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100026ce:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
100026d4:	eb 22                	jmp    100026f8 <ssfn_render+0x1239>
100026d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100026da:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
100026e4:	d1 f8                	sar    eax,1
100026e6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
100026ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100026f2:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100026f8:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026ff:	8b 18                	mov    ebx,DWORD PTR [eax]
10002701:	85 db                	test   ebx,ebx
10002703:	0f 84 2e 09 00 00    	je     10003037 <ssfn_render+0x1b78>
10002709:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
1000270d:	89 d1                	mov    ecx,edx
1000270f:	89 d0                	mov    eax,edx
10002711:	66 c1 f9 0b          	sar    cx,0xb
10002715:	c1 f8 1f             	sar    eax,0x1f
10002718:	31 c2                	xor    edx,eax
1000271a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
1000271e:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
10002722:	88 c8                	mov    al,cl
10002724:	83 e0 10             	and    eax,0x10
10002727:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
1000272b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000272f:	83 c0 40             	add    eax,0x40
10002732:	c1 f8 06             	sar    eax,0x6
10002735:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
1000273c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002740:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002744:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
10002748:	7d 08                	jge    10002752 <ssfn_render+0x1293>
1000274a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000274e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002752:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002755:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
1000275d:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002761:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10002769:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
1000276d:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002772:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002776:	99                   	cdq    
10002777:	f7 f9                	idiv   ecx
10002779:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
1000277d:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002784:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10002787:	0f b6 f4             	movzx  esi,ah
1000278a:	89 c2                	mov    edx,eax
1000278c:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
10002790:	c1 ea 10             	shr    edx,0x10
10002793:	0f b6 fa             	movzx  edi,dl
10002796:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
1000279a:	0f b6 f8             	movzx  edi,al
1000279d:	c1 e8 18             	shr    eax,0x18
100027a0:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
100027a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100027a8:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100027af:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
100027b2:	0f b6 fc             	movzx  edi,ah
100027b5:	89 c2                	mov    edx,eax
100027b7:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
100027be:	c1 ea 10             	shr    edx,0x10
100027c1:	0f b6 c0             	movzx  eax,al
100027c4:	0f b6 f2             	movzx  esi,dl
100027c7:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100027ce:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100027d5:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
100027d9:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100027e0:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100027e7:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
100027eb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
100027ef:	0f af c2             	imul   eax,edx
100027f2:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
100027f6:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
100027fa:	8d 04 90             	lea    eax,[eax+edx*4]
100027fd:	01 d8                	add    eax,ebx
100027ff:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
10002806:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
1000280a:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
10002811:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002816:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
1000281d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10002821:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
10002825:	0f 8d e2 04 00 00    	jge    10002d0d <ssfn_render+0x184e>
1000282b:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002832:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002839:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
1000283d:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
10002841:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002845:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002849:	39 d0                	cmp    eax,edx
1000284b:	0f 8d bc 04 00 00    	jge    10002d0d <ssfn_render+0x184e>
10002851:	85 c0                	test   eax,eax
10002853:	0f 88 94 04 00 00    	js     10002ced <ssfn_render+0x182e>
10002859:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000285f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10002863:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10002867:	c1 e1 08             	shl    ecx,0x8
1000286a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10002872:	89 c8                	mov    eax,ecx
10002874:	0f af c3             	imul   eax,ebx
10002877:	99                   	cdq    
10002878:	f7 fe                	idiv   esi
1000287a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002881:	c1 f8 08             	sar    eax,0x8
10002884:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
1000288b:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002891:	0f af c3             	imul   eax,ebx
10002894:	99                   	cdq    
10002895:	f7 fe                	idiv   esi
10002897:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
1000289b:	c1 f8 08             	sar    eax,0x8
1000289e:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
100028a5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
100028a9:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
100028b0:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
100028b7:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100028be:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
100028c2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
100028c6:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100028ca:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100028ce:	0f 8d 19 04 00 00    	jge    10002ced <ssfn_render+0x182e>
100028d4:	85 c0                	test   eax,eax
100028d6:	0f 88 ff 03 00 00    	js     10002cdb <ssfn_render+0x181c>
100028dc:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100028e3:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
100028e7:	75 42                	jne    1000292b <ssfn_render+0x146c>
100028e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100028ed:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100028f4:	b9 10 00 00 00       	mov    ecx,0x10
100028f9:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100028fc:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002903:	89 c2                	mov    edx,eax
10002905:	0f b6 fc             	movzx  edi,ah
10002908:	d3 ea                	shr    edx,cl
1000290a:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10002911:	0f b6 f2             	movzx  esi,dl
10002914:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002918:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
1000291f:	d3 e8                	shr    eax,cl
10002921:	0f b6 c0             	movzx  eax,al
10002924:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
1000292b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002931:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10002935:	0f b7 18             	movzx  ebx,WORD PTR [eax]
10002938:	c1 e1 08             	shl    ecx,0x8
1000293b:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
1000293f:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10002947:	89 c8                	mov    eax,ecx
10002949:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
10002951:	0f af c3             	imul   eax,ebx
10002954:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
1000295c:	99                   	cdq    
1000295d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10002965:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002969:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10002971:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
10002978:	c1 f8 08             	sar    eax,0x8
1000297b:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10002982:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002988:	0f af c3             	imul   eax,ebx
1000298b:	99                   	cdq    
1000298c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002990:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002994:	c1 f8 08             	sar    eax,0x8
10002997:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
1000299e:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
100029a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100029a9:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
100029ad:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
100029b1:	0f 8d 3b 02 00 00    	jge    10002bf2 <ssfn_render+0x1733>
100029b7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
100029bb:	c1 fa 08             	sar    edx,0x8
100029be:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
100029c5:	75 25                	jne    100029ec <ssfn_render+0x152d>
100029c7:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
100029cc:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
100029d3:	b8 00 01 00 00       	mov    eax,0x100
100029d8:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
100029e0:	29 c8                	sub    eax,ecx
100029e2:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100029e6:	39 c7                	cmp    edi,eax
100029e8:	7e 1c                	jle    10002a06 <ssfn_render+0x1547>
100029ea:	eb 16                	jmp    10002a02 <ssfn_render+0x1543>
100029ec:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
100029f4:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
100029fb:	75 09                	jne    10002a06 <ssfn_render+0x1547>
100029fd:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
10002a02:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002a06:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
10002a0a:	0f b7 00             	movzx  eax,WORD PTR [eax]
10002a0d:	0f af c2             	imul   eax,edx
10002a10:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
10002a17:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
10002a1c:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10002a21:	c1 f8 08             	sar    eax,0x8
10002a24:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
10002a2b:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
10002a32:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002a36:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10002a3a:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
10002a3e:	0f 8d a1 01 00 00    	jge    10002be5 <ssfn_render+0x1726>
10002a44:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002a48:	c1 f8 08             	sar    eax,0x8
10002a4b:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
10002a52:	75 3b                	jne    10002a8f <ssfn_render+0x15d0>
10002a54:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
10002a59:	ba 00 01 00 00       	mov    edx,0x100
10002a5e:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
10002a66:	29 ca                	sub    edx,ecx
10002a68:	89 f1                	mov    ecx,esi
10002a6a:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
10002a71:	39 d1                	cmp    ecx,edx
10002a73:	7c 0e                	jl     10002a83 <ssfn_render+0x15c4>
10002a75:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002a79:	81 fa 00 01 00 00    	cmp    edx,0x100
10002a7f:	74 22                	je     10002aa3 <ssfn_render+0x15e4>
10002a81:	89 d1                	mov    ecx,edx
10002a83:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
10002a88:	89 cf                	mov    edi,ecx
10002a8a:	c1 ff 08             	sar    edi,0x8
10002a8d:	eb 14                	jmp    10002aa3 <ssfn_render+0x15e4>
10002a8f:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
10002a96:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
10002a9d:	74 04                	je     10002aa3 <ssfn_render+0x15e4>
10002a9f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002aa3:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
10002aa7:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
10002aab:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
10002ab2:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
10002ab7:	81 fa ff 00 00 00    	cmp    edx,0xff
10002abd:	75 37                	jne    10002af6 <ssfn_render+0x1637>
10002abf:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10002ac6:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
10002ace:	0f af c7             	imul   eax,edi
10002ad1:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002ad5:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10002adc:	0f af c7             	imul   eax,edi
10002adf:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002ae3:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10002aea:	0f af c7             	imul   eax,edi
10002aed:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002af1:	e9 e2 00 00 00       	jmp    10002bd8 <ssfn_render+0x1719>
10002af6:	81 fa fe 00 00 00    	cmp    edx,0xfe
10002afc:	74 2d                	je     10002b2b <ssfn_render+0x166c>
10002afe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002b01:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
10002b04:	85 c9                	test   ecx,ecx
10002b06:	74 23                	je     10002b2b <ssfn_render+0x166c>
10002b08:	01 c8                	add    eax,ecx
10002b0a:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
10002b0d:	89 d9                	mov    ecx,ebx
10002b0f:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
10002b16:	c1 e9 10             	shr    ecx,0x10
10002b19:	0f b6 f7             	movzx  esi,bh
10002b1c:	0f b6 c1             	movzx  eax,cl
10002b1f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10002b23:	0f b6 c3             	movzx  eax,bl
10002b26:	c1 eb 18             	shr    ebx,0x18
10002b29:	eb 14                	jmp    10002b3f <ssfn_render+0x1680>
10002b2b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002b2f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002b33:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10002b37:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
10002b3b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002b3f:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002b45:	75 25                	jne    10002b6c <ssfn_render+0x16ad>
10002b47:	0f af c7             	imul   eax,edi
10002b4a:	0f af f7             	imul   esi,edi
10002b4d:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002b51:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002b55:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
10002b5b:	0f af cf             	imul   ecx,edi
10002b5e:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
10002b62:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
10002b66:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
10002b6a:	eb 6c                	jmp    10002bd8 <ssfn_render+0x1719>
10002b6c:	0f af f3             	imul   esi,ebx
10002b6f:	0f af c3             	imul   eax,ebx
10002b72:	b9 ff 00 00 00       	mov    ecx,0xff
10002b77:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
10002b7e:	29 d9                	sub    ecx,ebx
10002b80:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
10002b84:	0f af d1             	imul   edx,ecx
10002b87:	b9 ff 00 00 00       	mov    ecx,0xff
10002b8c:	01 d0                	add    eax,edx
10002b8e:	0f af c7             	imul   eax,edi
10002b91:	99                   	cdq    
10002b92:	f7 f9                	idiv   ecx
10002b94:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002b98:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002b9c:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
10002ba4:	01 f0                	add    eax,esi
10002ba6:	89 ce                	mov    esi,ecx
10002ba8:	0f af c7             	imul   eax,edi
10002bab:	99                   	cdq    
10002bac:	f7 f9                	idiv   ecx
10002bae:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002bb2:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002bb6:	0f af cb             	imul   ecx,ebx
10002bb9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002bbd:	0f af df             	imul   ebx,edi
10002bc0:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
10002bc8:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
10002bcc:	01 c8                	add    eax,ecx
10002bce:	0f af c7             	imul   eax,edi
10002bd1:	99                   	cdq    
10002bd2:	f7 fe                	idiv   esi
10002bd4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002bd8:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
10002be0:	e9 51 fe ff ff       	jmp    10002a36 <ssfn_render+0x1577>
10002be5:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
10002bed:	e9 b7 fd ff ff       	jmp    100029a9 <ssfn_render+0x14ea>
10002bf2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002bf7:	74 30                	je     10002c29 <ssfn_render+0x176a>
10002bf9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002bfd:	31 d2                	xor    edx,edx
10002bff:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002c03:	31 d2                	xor    edx,edx
10002c05:	89 c1                	mov    ecx,eax
10002c07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002c0b:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002c0f:	31 d2                	xor    edx,edx
10002c11:	89 c6                	mov    esi,eax
10002c13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002c17:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002c1b:	31 d2                	xor    edx,edx
10002c1d:	89 c3                	mov    ebx,eax
10002c1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002c23:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002c27:	eb 1c                	jmp    10002c45 <ssfn_render+0x1786>
10002c29:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002c2d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002c31:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002c35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002c39:	c1 e9 08             	shr    ecx,0x8
10002c3c:	c1 ee 08             	shr    esi,0x8
10002c3f:	c1 eb 08             	shr    ebx,0x8
10002c42:	c1 e8 08             	shr    eax,0x8
10002c45:	83 f8 0f             	cmp    eax,0xf
10002c48:	0f 86 8d 00 00 00    	jbe    10002cdb <ssfn_render+0x181c>
10002c4e:	89 ca                	mov    edx,ecx
10002c50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002c56:	76 05                	jbe    10002c5d <ssfn_render+0x179e>
10002c58:	ba ff 00 00 00       	mov    edx,0xff
10002c5d:	b9 10 00 00 00       	mov    ecx,0x10
10002c62:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002c69:	d3 e2                	shl    edx,cl
10002c6b:	3d ff 00 00 00       	cmp    eax,0xff
10002c70:	89 d1                	mov    ecx,edx
10002c72:	76 05                	jbe    10002c79 <ssfn_render+0x17ba>
10002c74:	b8 ff 00 00 00       	mov    eax,0xff
10002c79:	c1 e0 18             	shl    eax,0x18
10002c7c:	09 c8                	or     eax,ecx
10002c7e:	81 fe ff 00 00 00    	cmp    esi,0xff
10002c84:	76 05                	jbe    10002c8b <ssfn_render+0x17cc>
10002c86:	be ff 00 00 00       	mov    esi,0xff
10002c8b:	c1 e6 08             	shl    esi,0x8
10002c8e:	09 f0                	or     eax,esi
10002c90:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002c96:	76 05                	jbe    10002c9d <ssfn_render+0x17de>
10002c98:	bb ff 00 00 00       	mov    ebx,0xff
10002c9d:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002ca1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002ca5:	d3 e3                	shl    ebx,cl
10002ca7:	09 c3                	or     ebx,eax
10002ca9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002cb0:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002cb3:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002cb7:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002cbb:	75 1e                	jne    10002cdb <ssfn_render+0x181c>
10002cbd:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002cc4:	7e 07                	jle    10002ccd <ssfn_render+0x180e>
10002cc6:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002ccd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002cd1:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002cd5:	7d 04                	jge    10002cdb <ssfn_render+0x181c>
10002cd7:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002cdb:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002ce3:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002ce7:	0f 85 ca fb ff ff    	jne    100028b7 <ssfn_render+0x13f8>
10002ced:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002cf4:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002cf8:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002cfc:	25 fc ff 00 00       	and    eax,0xfffc
10002d01:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002d08:	e9 10 fb ff ff       	jmp    1000281d <ssfn_render+0x135e>
10002d0d:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002d14:	0f 84 90 01 00 00    	je     10002eaa <ssfn_render+0x19eb>
10002d1a:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002d22:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002d29:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002d2d:	40                   	inc    eax
10002d2e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002d32:	29 c7                	sub    edi,eax
10002d34:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002d38:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002d3c:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002d40:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d44:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002d48:	7e 09                	jle    10002d53 <ssfn_render+0x1894>
10002d4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002d4e:	40                   	inc    eax
10002d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d53:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002d5a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d61:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002d65:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002d69:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002d6d:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002d71:	0f af c2             	imul   eax,edx
10002d74:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002d78:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002d7c:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002d80:	03 07                	add    eax,DWORD PTR [edi]
10002d82:	89 c7                	mov    edi,eax
10002d84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002d88:	c1 e0 18             	shl    eax,0x18
10002d8b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002d8f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002d93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002d97:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002d9c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002da0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002da4:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002da8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002dac:	0f 8e f8 00 00 00    	jle    10002eaa <ssfn_render+0x19eb>
10002db2:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002db9:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002dc0:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002dc4:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002dc8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002dcc:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002dd0:	39 d0                	cmp    eax,edx
10002dd2:	0f 8d d2 00 00 00    	jge    10002eaa <ssfn_render+0x19eb>
10002dd8:	31 db                	xor    ebx,ebx
10002dda:	85 c0                	test   eax,eax
10002ddc:	79 23                	jns    10002e01 <ssfn_render+0x1942>
10002dde:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002de5:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002de9:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002ded:	25 fc ff 00 00       	and    eax,0xfffc
10002df2:	01 c7                	add    edi,eax
10002df4:	eb aa                	jmp    10002da0 <ssfn_render+0x18e1>
10002df6:	85 c0                	test   eax,eax
10002df8:	79 20                	jns    10002e1a <ssfn_render+0x195b>
10002dfa:	43                   	inc    ebx
10002dfb:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002dff:	7c dd                	jl     10002dde <ssfn_render+0x191f>
10002e01:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e08:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002e0c:	01 d8                	add    eax,ebx
10002e0e:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002e12:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002e16:	7c de                	jl     10002df6 <ssfn_render+0x1937>
10002e18:	eb c4                	jmp    10002dde <ssfn_render+0x191f>
10002e1a:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002e1e:	7e 06                	jle    10002e26 <ssfn_render+0x1967>
10002e20:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002e24:	7f d4                	jg     10002dfa <ssfn_render+0x193b>
10002e26:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002e29:	b8 10 00 00 00       	mov    eax,0x10
10002e2e:	0f b6 f6             	movzx  esi,dh
10002e31:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002e35:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002e39:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002e3d:	89 d0                	mov    eax,edx
10002e3f:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002e43:	d3 e8                	shr    eax,cl
10002e45:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e49:	0f b6 c0             	movzx  eax,al
10002e4c:	d3 ea                	shr    edx,cl
10002e4e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002e52:	0f b6 f2             	movzx  esi,dl
10002e55:	29 c1                	sub    ecx,eax
10002e57:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002e5b:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002e60:	29 f2                	sub    edx,esi
10002e62:	c1 f9 08             	sar    ecx,0x8
10002e65:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e6a:	01 c8                	add    eax,ecx
10002e6c:	c1 fa 08             	sar    edx,0x8
10002e6f:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002e73:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002e77:	d3 e0                	shl    eax,cl
10002e79:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002e7d:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002e81:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002e85:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e89:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e8e:	d3 e6                	shl    esi,cl
10002e90:	c1 fa 08             	sar    edx,0x8
10002e93:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002e97:	c1 e2 08             	shl    edx,0x8
10002e9a:	09 d0                	or     eax,edx
10002e9c:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002ea0:	09 c6                	or     esi,eax
10002ea2:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002ea5:	e9 50 ff ff ff       	jmp    10002dfa <ssfn_render+0x193b>
10002eaa:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002eb1:	0f 84 80 01 00 00    	je     10003037 <ssfn_render+0x1b78>
10002eb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002ebf:	d1 fa                	sar    edx,1
10002ec1:	40                   	inc    eax
10002ec2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002ec6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002eca:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002ece:	7e 09                	jle    10002ed9 <ssfn_render+0x1a1a>
10002ed0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002ed4:	40                   	inc    eax
10002ed5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002ed9:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002ee0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ee7:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002eeb:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002eef:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002ef3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002ef7:	01 d0                	add    eax,edx
10002ef9:	0f af c1             	imul   eax,ecx
10002efc:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002f00:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002f04:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002f08:	03 03                	add    eax,DWORD PTR [ebx]
10002f0a:	89 c7                	mov    edi,eax
10002f0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002f10:	c1 e0 18             	shl    eax,0x18
10002f13:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002f17:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002f1f:	01 d0                	add    eax,edx
10002f21:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002f25:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002f2a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002f2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002f32:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002f36:	0f 8e fb 00 00 00    	jle    10003037 <ssfn_render+0x1b78>
10002f3c:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002f43:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002f47:	01 d8                	add    eax,ebx
10002f49:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002f50:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002f54:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002f58:	39 d0                	cmp    eax,edx
10002f5a:	0f 8d d7 00 00 00    	jge    10003037 <ssfn_render+0x1b78>
10002f60:	31 f6                	xor    esi,esi
10002f62:	85 c0                	test   eax,eax
10002f64:	0f 89 ad 00 00 00    	jns    10003017 <ssfn_render+0x1b58>
10002f6a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002f71:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002f75:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002f79:	25 fc ff 00 00       	and    eax,0xfffc
10002f7e:	01 c7                	add    edi,eax
10002f80:	eb ac                	jmp    10002f2e <ssfn_render+0x1a6f>
10002f82:	85 c0                	test   eax,eax
10002f84:	0f 88 82 00 00 00    	js     1000300c <ssfn_render+0x1b4d>
10002f8a:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002f8d:	b8 10 00 00 00       	mov    eax,0x10
10002f92:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002f96:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002f9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002f9e:	89 d8                	mov    eax,ebx
10002fa0:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002fa4:	d3 e8                	shr    eax,cl
10002fa6:	0f b6 cf             	movzx  ecx,bh
10002fa9:	0f b6 c0             	movzx  eax,al
10002fac:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002fb0:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002fb4:	d3 eb                	shr    ebx,cl
10002fb6:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002fba:	0f b6 db             	movzx  ebx,bl
10002fbd:	29 c1                	sub    ecx,eax
10002fbf:	29 da                	sub    edx,ebx
10002fc1:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002fc6:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002fcb:	c1 f9 08             	sar    ecx,0x8
10002fce:	c1 fa 08             	sar    edx,0x8
10002fd1:	01 c8                	add    eax,ecx
10002fd3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002fd7:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002fdb:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002fdf:	d3 e0                	shl    eax,cl
10002fe1:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002fe5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002fe9:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002fee:	c1 fa 08             	sar    edx,0x8
10002ff1:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10002ff5:	c1 e2 08             	shl    edx,0x8
10002ff8:	09 d0                	or     eax,edx
10002ffa:	8d 14 19             	lea    edx,[ecx+ebx*1]
10002ffd:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10003001:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10003005:	d3 e2                	shl    edx,cl
10003007:	09 c2                	or     edx,eax
10003009:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
1000300c:	46                   	inc    esi
1000300d:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10003011:	0f 8c 53 ff ff ff    	jl     10002f6a <ssfn_render+0x1aab>
10003017:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000301e:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10003022:	01 f0                	add    eax,esi
10003024:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10003028:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
1000302c:	0f 8c 50 ff ff ff    	jl     10002f82 <ssfn_render+0x1ac3>
10003032:	e9 33 ff ff ff       	jmp    10002f6a <ssfn_render+0x1aab>
10003037:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
1000303e:	74 04                	je     10003044 <ssfn_render+0x1b85>
10003040:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10003044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003048:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000304c:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10003052:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10003059:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
1000305d:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10003064:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003067:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
1000306b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10003071:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10003075:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000307a:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000307e:	99                   	cdq    
1000307f:	f7 f9                	idiv   ecx
10003081:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10003085:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
1000308b:	25 80 00 00 00       	and    eax,0x80
10003090:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003094:	0f 85 f7 01 00 00    	jne    10003291 <ssfn_render+0x1dd2>
1000309a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000309d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
100030a1:	0f 84 ea 01 00 00    	je     10003291 <ssfn_render+0x1dd2>
100030a7:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
100030ae:	83 ec 0c             	sub    esp,0xc
100030b1:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
100030b8:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
100030bf:	51                   	push   ecx
100030c0:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
100030c7:	e8 53 d9 ff ff       	call   10000a1f <_ssfn_c>
100030cc:	83 c4 10             	add    esp,0x10
100030cf:	85 c0                	test   eax,eax
100030d1:	0f 84 ba 01 00 00    	je     10003291 <ssfn_render+0x1dd2>
100030d7:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
100030df:	0f 86 ac 01 00 00    	jbe    10003291 <ssfn_render+0x1dd2>
100030e5:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
100030eb:	8d 48 06             	lea    ecx,[eax+0x6]
100030ee:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
100030f4:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
100030f8:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
100030fc:	0f 8e 8f 01 00 00    	jle    10003291 <ssfn_render+0x1dd2>
10003102:	8a 19                	mov    bl,BYTE PTR [ecx]
10003104:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10003108:	8a 18                	mov    bl,BYTE PTR [eax]
1000310a:	83 e3 40             	and    ebx,0x40
1000310d:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10003112:	75 14                	jne    10003128 <ssfn_render+0x1c69>
10003114:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10003118:	75 0e                	jne    10003128 <ssfn_render+0x1c69>
1000311a:	80 fb 01             	cmp    bl,0x1
1000311d:	19 c0                	sbb    eax,eax
1000311f:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10003123:	e9 60 01 00 00       	jmp    10003288 <ssfn_render+0x1dc9>
10003128:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
1000312c:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10003130:	c1 e6 10             	shl    esi,0x10
10003133:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10003137:	84 db                	test   bl,bl
10003139:	74 08                	je     10003143 <ssfn_render+0x1c84>
1000313b:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
1000313e:	83 c1 06             	add    ecx,0x6
10003141:	eb 0c                	jmp    1000314f <ssfn_render+0x1c90>
10003143:	c1 e2 08             	shl    edx,0x8
10003146:	83 c1 05             	add    ecx,0x5
10003149:	89 d0                	mov    eax,edx
1000314b:	09 f0                	or     eax,esi
1000314d:	09 c7                	or     edi,eax
1000314f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003152:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003156:	01 f8                	add    eax,edi
10003158:	8a 10                	mov    dl,BYTE PTR [eax]
1000315a:	88 d3                	mov    bl,dl
1000315c:	83 e3 e0             	and    ebx,0xffffffe0
1000315f:	80 fb c0             	cmp    bl,0xc0
10003162:	0f 85 20 01 00 00    	jne    10003288 <ssfn_render+0x1dc9>
10003168:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
1000316c:	c1 e2 08             	shl    edx,0x8
1000316f:	83 c0 02             	add    eax,0x2
10003172:	81 e2 00 1f 00 00    	and    edx,0x1f00
10003178:	09 da                	or     edx,ebx
1000317a:	8d 72 01             	lea    esi,[edx+0x1]
1000317d:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003181:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
10003188:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
1000318c:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10003191:	0f 84 f1 00 00 00    	je     10003288 <ssfn_render+0x1dc9>
10003197:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000319b:	0f b7 10             	movzx  edx,WORD PTR [eax]
1000319e:	c1 e3 10             	shl    ebx,0x10
100031a1:	81 e3 00 00 0f 00    	and    ebx,0xf0000
100031a7:	09 d3                	or     ebx,edx
100031a9:	39 de                	cmp    esi,ebx
100031ab:	0f 82 cf 00 00 00    	jb     10003280 <ssfn_render+0x1dc1>
100031b1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
100031b4:	89 d7                	mov    edi,edx
100031b6:	c1 e7 10             	shl    edi,0x10
100031b9:	81 e7 00 00 0f 00    	and    edi,0xf0000
100031bf:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
100031c3:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
100031c7:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
100031cb:	39 fe                	cmp    esi,edi
100031cd:	0f 87 ad 00 00 00    	ja     10003280 <ssfn_render+0x1dc1>
100031d3:	29 de                	sub    esi,ebx
100031d5:	c0 ea 04             	shr    dl,0x4
100031d8:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
100031df:	0f b6 d2             	movzx  edx,dl
100031e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100031e6:	89 d3                	mov    ebx,edx
100031e8:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
100031ec:	c1 e3 10             	shl    ebx,0x10
100031ef:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100031f2:	09 da                	or     edx,ebx
100031f4:	c0 e8 04             	shr    al,0x4
100031f7:	c1 e0 18             	shl    eax,0x18
100031fa:	09 c2                	or     edx,eax
100031fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003200:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
10003203:	01 c2                	add    edx,eax
10003205:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003208:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
1000320c:	39 d7                	cmp    edi,edx
1000320e:	76 78                	jbe    10003288 <ssfn_render+0x1dc9>
10003210:	8a 1a                	mov    bl,BYTE PTR [edx]
10003212:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
10003219:	89 de                	mov    esi,ebx
1000321b:	83 e6 7f             	and    esi,0x7f
1000321e:	39 c6                	cmp    esi,eax
10003220:	73 1d                	jae    1000323f <ssfn_render+0x1d80>
10003222:	48                   	dec    eax
10003223:	bb 02 00 00 00       	mov    ebx,0x2
10003228:	29 f0                	sub    eax,esi
1000322a:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
10003231:	0f b6 02             	movzx  eax,BYTE PTR [edx]
10003234:	84 c0                	test   al,al
10003236:	78 03                	js     1000323b <ssfn_render+0x1d7c>
10003238:	8d 58 02             	lea    ebx,[eax+0x2]
1000323b:	01 da                	add    edx,ebx
1000323d:	eb cd                	jmp    1000320c <ssfn_render+0x1d4d>
1000323f:	be 01 00 00 00       	mov    esi,0x1
10003244:	84 db                	test   bl,bl
10003246:	78 03                	js     1000324b <ssfn_render+0x1d8c>
10003248:	8d 70 01             	lea    esi,[eax+0x1]
1000324b:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
1000324f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003253:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10003258:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
1000325c:	99                   	cdq    
1000325d:	f7 fb                	idiv   ebx
1000325f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10003264:	74 0d                	je     10003273 <ssfn_render+0x1db4>
10003266:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000326d:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10003271:	eb 15                	jmp    10003288 <ssfn_render+0x1dc9>
10003273:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
1000327a:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
1000327e:	eb 08                	jmp    10003288 <ssfn_render+0x1dc9>
10003280:	83 c0 08             	add    eax,0x8
10003283:	e9 00 ff ff ff       	jmp    10003188 <ssfn_render+0x1cc9>
10003288:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
1000328c:	e9 5d fe ff ff       	jmp    100030ee <ssfn_render+0x1c2f>
10003291:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
10003298:	eb 73                	jmp    1000330d <ssfn_render+0x1e4e>
1000329a:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100032a5:	e9 50 e4 ff ff       	jmp    100016fa <ssfn_render+0x23b>
100032aa:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100032b1:	57                   	push   edi
100032b2:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100032b9:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100032c0:	e8 5a d7 ff ff       	call   10000a1f <_ssfn_c>
100032c5:	5f                   	pop    edi
100032c6:	85 c0                	test   eax,eax
100032c8:	0f 84 25 e4 ff ff    	je     100016f3 <ssfn_render+0x234>
100032ce:	e9 a2 e4 ff ff       	jmp    10001775 <ssfn_render+0x2b6>
100032d3:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100032d6:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
100032da:	75 0c                	jne    100032e8 <ssfn_render+0x1e29>
100032dc:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100032e3:	e9 3b e4 ff ff       	jmp    10001723 <ssfn_render+0x264>
100032e8:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100032ef:	57                   	push   edi
100032f0:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100032f7:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100032fe:	e8 1c d7 ff ff       	call   10000a1f <_ssfn_c>
10003303:	59                   	pop    ecx
10003304:	85 c0                	test   eax,eax
10003306:	74 d4                	je     100032dc <ssfn_render+0x1e1d>
10003308:	e9 68 e4 ff ff       	jmp    10001775 <ssfn_render+0x2b6>
1000330d:	81 c4 dc 05 01 00    	add    esp,0x105dc
10003313:	89 c8                	mov    eax,ecx
10003315:	5b                   	pop    ebx
10003316:	5e                   	pop    esi
10003317:	5f                   	pop    edi
10003318:	5d                   	pop    ebp
10003319:	c3                   	ret    

1000331a <ssfn_bbox>:
1000331a:	55                   	push   ebp
1000331b:	57                   	push   edi
1000331c:	56                   	push   esi
1000331d:	53                   	push   ebx
1000331e:	83 ec 3c             	sub    esp,0x3c
10003321:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
10003326:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
1000332a:	0f 94 c0             	sete   al
1000332d:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
10003332:	0f 94 c2             	sete   dl
10003335:	09 d0                	or     eax,edx
10003337:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
1000333c:	0f 94 c2             	sete   dl
1000333f:	09 d0                	or     eax,edx
10003341:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
10003346:	0f 94 c2             	sete   dl
10003349:	09 d0                	or     eax,edx
1000334b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003350:	0f 94 c2             	sete   dl
10003353:	08 d0                	or     al,dl
10003355:	0f 85 7c 01 00 00    	jne    100034d7 <ssfn_bbox+0x1bd>
1000335b:	85 db                	test   ebx,ebx
1000335d:	0f 84 74 01 00 00    	je     100034d7 <ssfn_bbox+0x1bd>
10003363:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003367:	31 f6                	xor    esi,esi
10003369:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000336f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003373:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003379:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
1000337d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003383:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003387:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000338d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10003391:	80 38 00             	cmp    BYTE PTR [eax],0x0
10003394:	0f 84 42 01 00 00    	je     100034dc <ssfn_bbox+0x1c2>
1000339a:	8d 54 24 18          	lea    edx,[esp+0x18]
1000339e:	b9 06 00 00 00       	mov    ecx,0x6
100033a3:	89 d7                	mov    edi,edx
100033a5:	89 f0                	mov    eax,esi
100033a7:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100033b1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100033b3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100033bb:	31 ff                	xor    edi,edi
100033bd:	bd 01 00 00 00       	mov    ebp,0x1
100033c2:	50                   	push   eax
100033c3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100033c7:	8d 44 24 20          	lea    eax,[esp+0x20]
100033cb:	50                   	push   eax
100033cc:	53                   	push   ebx
100033cd:	e8 fc ff ff ff       	call   100033ce <ssfn_bbox+0xb4>	100033ce: R_386_PC32	ssfn_render
100033d2:	83 c4 10             	add    esp,0x10
100033d5:	89 c6                	mov    esi,eax
100033d7:	85 c0                	test   eax,eax
100033d9:	74 6f                	je     1000344a <ssfn_bbox+0x130>
100033db:	0f 88 fb 00 00 00    	js     100034dc <ssfn_bbox+0x1c2>
100033e1:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100033e7:	85 c0                	test   eax,eax
100033e9:	0f 84 ed 00 00 00    	je     100034dc <ssfn_bbox+0x1c2>
100033ef:	85 ed                	test   ebp,ebp
100033f1:	74 0b                	je     100033fe <ssfn_bbox+0xe4>
100033f3:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
100033f9:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
100033fe:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003402:	74 12                	je     10003416 <ssfn_bbox+0xfc>
10003404:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
1000340a:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
1000340e:	7d 2f                	jge    1000343f <ssfn_bbox+0x125>
10003410:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003414:	eb 29                	jmp    1000343f <ssfn_bbox+0x125>
10003416:	0f b7 08             	movzx  ecx,WORD PTR [eax]
10003419:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
1000341e:	39 cd                	cmp    ebp,ecx
10003420:	7d 05                	jge    10003427 <ssfn_bbox+0x10d>
10003422:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
10003427:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
1000342b:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
10003430:	84 d2                	test   dl,dl
10003432:	75 04                	jne    10003438 <ssfn_bbox+0x11e>
10003434:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
10003438:	01 ca                	add    edx,ecx
1000343a:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
1000343f:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10003443:	31 ed                	xor    ebp,ebp
10003445:	e9 78 ff ff ff       	jmp    100033c2 <ssfn_bbox+0xa8>
1000344a:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10003451:	74 23                	je     10003476 <ssfn_bbox+0x15c>
10003453:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003456:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
1000345a:	75 1a                	jne    10003476 <ssfn_bbox+0x15c>
1000345c:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
10003462:	b9 04 00 00 00       	mov    ecx,0x4
10003467:	99                   	cdq    
10003468:	f7 f9                	idiv   ecx
1000346a:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
1000346f:	29 f8                	sub    eax,edi
10003471:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
10003476:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
1000347c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003480:	74 29                	je     100034ab <ssfn_bbox+0x191>
10003482:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003487:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000348b:	89 01                	mov    DWORD PTR [ecx],eax
1000348d:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003491:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
10003497:	89 01                	mov    DWORD PTR [ecx],eax
10003499:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000349d:	89 38                	mov    DWORD PTR [eax],edi
1000349f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100034a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100034a7:	89 38                	mov    DWORD PTR [eax],edi
100034a9:	eb 31                	jmp    100034dc <ssfn_bbox+0x1c2>
100034ab:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
100034b0:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
100034b4:	89 07                	mov    DWORD PTR [edi],eax
100034b6:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
100034bb:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
100034bf:	89 07                	mov    DWORD PTR [edi],eax
100034c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100034c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100034cb:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100034cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100034d5:	eb 05                	jmp    100034dc <ssfn_bbox+0x1c2>
100034d7:	be fc ff ff ff       	mov    esi,0xfffffffc
100034dc:	83 c4 3c             	add    esp,0x3c
100034df:	89 f0                	mov    eax,esi
100034e1:	5b                   	pop    ebx
100034e2:	5e                   	pop    esi
100034e3:	5f                   	pop    edi
100034e4:	5d                   	pop    ebp
100034e5:	c3                   	ret    

100034e6 <ssfn_text>:
100034e6:	55                   	push   ebp
100034e7:	57                   	push   edi
100034e8:	56                   	push   esi
100034e9:	53                   	push   ebx
100034ea:	83 ec 1c             	sub    esp,0x1c
100034ed:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100034f1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
100034f5:	85 f6                	test   esi,esi
100034f7:	0f 84 b2 00 00 00    	je     100035af <ssfn_text+0xc9>
100034fd:	85 ed                	test   ebp,ebp
100034ff:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
10003504:	0f 84 a5 00 00 00    	je     100035af <ssfn_text+0xc9>
1000350a:	83 ec 0c             	sub    esp,0xc
1000350d:	6a 18                	push   0x18
1000350f:	e8 fc ff ff ff       	call   10003510 <ssfn_text+0x2a>	10003510: R_386_PC32	malloc
10003514:	83 c4 10             	add    esp,0x10
10003517:	89 c3                	mov    ebx,eax
10003519:	85 c0                	test   eax,eax
1000351b:	0f 84 8e 00 00 00    	je     100035af <ssfn_text+0xc9>
10003521:	31 c0                	xor    eax,eax
10003523:	b9 06 00 00 00       	mov    ecx,0x6
10003528:	89 df                	mov    edi,ebx
1000352a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
1000352d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000352f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003533:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10003536:	74 79                	je     100035b1 <ssfn_text+0xcb>
10003538:	8d 43 0c             	lea    eax,[ebx+0xc]
1000353b:	52                   	push   edx
1000353c:	52                   	push   edx
1000353d:	50                   	push   eax
1000353e:	8d 43 0a             	lea    eax,[ebx+0xa]
10003541:	50                   	push   eax
10003542:	8d 43 06             	lea    eax,[ebx+0x6]
10003545:	50                   	push   eax
10003546:	8d 43 04             	lea    eax,[ebx+0x4]
10003549:	50                   	push   eax
1000354a:	56                   	push   esi
1000354b:	55                   	push   ebp
1000354c:	e8 fc ff ff ff       	call   1000354d <ssfn_text+0x67>	1000354d: R_386_PC32	ssfn_bbox
10003551:	83 c4 20             	add    esp,0x20
10003554:	85 c0                	test   eax,eax
10003556:	75 59                	jne    100035b1 <ssfn_text+0xcb>
10003558:	83 ec 0c             	sub    esp,0xc
1000355b:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
1000355f:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10003563:	0f af c8             	imul   ecx,eax
10003566:	c1 e1 02             	shl    ecx,0x2
10003569:	51                   	push   ecx
1000356a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000356e:	e8 fc ff ff ff       	call   1000356f <ssfn_text+0x89>	1000356f: R_386_PC32	malloc
10003573:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003577:	89 c7                	mov    edi,eax
10003579:	89 03                	mov    DWORD PTR [ebx],eax
1000357b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
1000357f:	83 c4 10             	add    esp,0x10
10003582:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003584:	50                   	push   eax
10003585:	56                   	push   esi
10003586:	53                   	push   ebx
10003587:	55                   	push   ebp
10003588:	e8 fc ff ff ff       	call   10003589 <ssfn_text+0xa3>	10003589: R_386_PC32	ssfn_render
1000358d:	83 c4 10             	add    esp,0x10
10003590:	85 c0                	test   eax,eax
10003592:	7e 04                	jle    10003598 <ssfn_text+0xb2>
10003594:	01 c6                	add    esi,eax
10003596:	eb ec                	jmp    10003584 <ssfn_text+0x9e>
10003598:	74 17                	je     100035b1 <ssfn_text+0xcb>
1000359a:	83 ec 0c             	sub    esp,0xc
1000359d:	ff 33                	push   DWORD PTR [ebx]
1000359f:	e8 fc ff ff ff       	call   100035a0 <ssfn_text+0xba>	100035a0: R_386_PC32	free
100035a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
100035a7:	e8 fc ff ff ff       	call   100035a8 <ssfn_text+0xc2>	100035a8: R_386_PC32	free
100035ac:	83 c4 10             	add    esp,0x10
100035af:	31 db                	xor    ebx,ebx
100035b1:	83 c4 1c             	add    esp,0x1c
100035b4:	89 d8                	mov    eax,ebx
100035b6:	5b                   	pop    ebx
100035b7:	5e                   	pop    esi
100035b8:	5f                   	pop    edi
100035b9:	5d                   	pop    ebp
100035ba:	c3                   	ret    
100035bb:	90                   	nop

100035bc <NIContext::drvPutpixel4(int, int, unsigned int)>:
100035bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100035c0:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100035c6:	8b 10                	mov    edx,DWORD PTR [eax]
100035c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100035cc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
100035cf:	90                   	nop

100035d0 <NIContext::drvDarken4(int, int, int)>:
100035d0:	55                   	push   ebp
100035d1:	57                   	push   edi
100035d2:	56                   	push   esi
100035d3:	53                   	push   ebx
100035d4:	83 ec 20             	sub    esp,0x20
100035d7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
100035db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100035df:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100035e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
100035e7:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
100035ed:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100035f1:	8b 10                	mov    edx,DWORD PTR [eax]
100035f3:	56                   	push   esi
100035f4:	53                   	push   ebx
100035f5:	50                   	push   eax
100035f6:	ff 52 34             	call   DWORD PTR [edx+0x34]
100035f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100035fd:	89 c2                	mov    edx,eax
100035ff:	0f b6 ec             	movzx  ebp,ah
10003602:	c1 ea 10             	shr    edx,0x10
10003605:	0f af e9             	imul   ebp,ecx
10003608:	0f b6 d2             	movzx  edx,dl
1000360b:	0f b6 c0             	movzx  eax,al
1000360e:	0f af d1             	imul   edx,ecx
10003611:	0f af c1             	imul   eax,ecx
10003614:	c1 ea 07             	shr    edx,0x7
10003617:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
1000361d:	c1 e8 07             	shr    eax,0x7
10003620:	8b 39                	mov    edi,DWORD PTR [ecx]
10003622:	c1 e2 10             	shl    edx,0x10
10003625:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
10003629:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
1000362d:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10003631:	c1 ed 07             	shr    ebp,0x7
10003634:	c1 e5 08             	shl    ebp,0x8
10003637:	09 ea                	or     edx,ebp
10003639:	09 c2                	or     edx,eax
1000363b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
1000363f:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
10003642:	83 c4 2c             	add    esp,0x2c
10003645:	5b                   	pop    ebx
10003646:	5e                   	pop    esi
10003647:	5f                   	pop    edi
10003648:	5d                   	pop    ebp
10003649:	ff e0                	jmp    eax
1000364b:	90                   	nop

1000364c <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
1000364c:	55                   	push   ebp
1000364d:	b9 00 40 00 00       	mov    ecx,0x4000
10003652:	57                   	push   edi
10003653:	b0 ff                	mov    al,0xff
10003655:	56                   	push   esi
10003656:	53                   	push   ebx
10003657:	83 ec 3c             	sub    esp,0x3c
1000365a:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
1000365e:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10003662:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10003665:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
10003669:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000366b:	85 db                	test   ebx,ebx
1000366d:	75 10                	jne    1000367f <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
1000366f:	83 ec 0c             	sub    esp,0xc
10003672:	68 df 56 00 10       	push   0x100056df	10003673: R_386_32	.text
10003677:	e8 fc ff ff ff       	call   10003678 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	10003678: R_386_PC32	KePanic(char const*)
1000367c:	83 c4 10             	add    esp,0x10
1000367f:	50                   	push   eax
10003680:	50                   	push   eax
10003681:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003685:	50                   	push   eax
10003686:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000368a:	50                   	push   eax
1000368b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000368f:	50                   	push   eax
10003690:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003694:	50                   	push   eax
10003695:	56                   	push   esi
10003696:	68 00 00 00 00       	push   0x0	10003697: R_386_32	ssfn_ctx
1000369b:	e8 fc ff ff ff       	call   1000369c <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	1000369c: R_386_PC32	ssfn_bbox
100036a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100036a3:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
100036ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100036af:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
100036b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100036bb:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
100036c0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100036c4:	0d 00 00 00 ff       	or     eax,0xff000000
100036c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100036cd:	83 c4 1c             	add    esp,0x1c
100036d0:	56                   	push   esi
100036d1:	8d 44 24 20          	lea    eax,[esp+0x20]
100036d5:	50                   	push   eax
100036d6:	68 00 00 00 00       	push   0x0	100036d7: R_386_32	ssfn_ctx
100036db:	e8 fc ff ff ff       	call   100036dc <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	100036dc: R_386_PC32	ssfn_render
100036e0:	83 c4 10             	add    esp,0x10
100036e3:	89 03                	mov    DWORD PTR [ebx],eax
100036e5:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
100036e9:	31 db                	xor    ebx,ebx
100036eb:	89 f0                	mov    eax,esi
100036ed:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
100036f1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100036f5:	7e 3f                	jle    10003736 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
100036f7:	31 ff                	xor    edi,edi
100036f9:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100036fe:	39 f8                	cmp    eax,edi
10003700:	7e 2c                	jle    1000372e <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
10003702:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003705:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10003708:	83 f8 ff             	cmp    eax,0xffffffff
1000370b:	74 1d                	je     1000372a <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
1000370d:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
10003713:	25 ff ff ff 00       	and    eax,0xffffff
10003718:	8b 0a                	mov    ecx,DWORD PTR [edx]
1000371a:	50                   	push   eax
1000371b:	56                   	push   esi
1000371c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003720:	01 f8                	add    eax,edi
10003722:	50                   	push   eax
10003723:	52                   	push   edx
10003724:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10003727:	83 c4 10             	add    esp,0x10
1000372a:	43                   	inc    ebx
1000372b:	47                   	inc    edi
1000372c:	eb cb                	jmp    100036f9 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
1000372e:	29 c3                	sub    ebx,eax
10003730:	46                   	inc    esi
10003731:	83 c3 40             	add    ebx,0x40
10003734:	eb b5                	jmp    100036eb <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
10003736:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000373b:	83 c4 3c             	add    esp,0x3c
1000373e:	5b                   	pop    ebx
1000373f:	5e                   	pop    esi
10003740:	5f                   	pop    edi
10003741:	5d                   	pop    ebp
10003742:	c3                   	ret    
10003743:	90                   	nop

10003744 <NIContext::~NIContext()>:
10003744:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10003748: R_386_32	ssfn_ctx
1000374c:	e9 00 db ff ff       	jmp    10001251 <ssfn_free>
10003751:	90                   	nop

10003752 <NIContext::NIContext(Video*, int, int, int, int)>:
10003752:	55                   	push   ebp
10003753:	ba 00 00 00 00       	mov    edx,0x0	10003754: R_386_32	ssfn_ctx
10003758:	57                   	push   edi
10003759:	b9 72 3d 00 00       	mov    ecx,0x3d72
1000375e:	56                   	push   esi
1000375f:	89 d7                	mov    edi,edx
10003761:	53                   	push   ebx
10003762:	81 ec 48 02 00 00    	sub    esp,0x248
10003768:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
1000376f:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
10003776:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
1000377c:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
10003783:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
10003789:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
10003790:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
10003796:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
1000379d:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
100037a3:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
100037aa:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
100037b0:	31 c0                	xor    eax,eax
100037b2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100037b4:	68 00 40 00 00       	push   0x4000
100037b9:	e8 fc ff ff ff       	call   100037ba <NIContext::NIContext(Video*, int, int, int, int)+0x68>	100037ba: R_386_PC32	malloc
100037be:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
100037c8:	89 03                	mov    DWORD PTR [ebx],eax
100037ca:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100037d1:	e8 fc ff ff ff       	call   100037d2 <NIContext::NIContext(Video*, int, int, int, int)+0x80>	100037d2: R_386_PC32	malloc
100037d6:	83 c4 0c             	add    esp,0xc
100037d9:	89 c6                	mov    esi,eax
100037db:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100037dd: R_386_32	kernelProcess
100037e1:	68 f8 56 00 10       	push   0x100056f8	100037e2: R_386_32	.text
100037e6:	50                   	push   eax
100037e7:	e8 fc ff ff ff       	call   100037e8 <NIContext::NIContext(Video*, int, int, int, int)+0x96>	100037e8: R_386_PC32	Directory::Directory(char const*, Process*)
100037ec:	83 c4 10             	add    esp,0x10
100037ef:	85 f6                	test   esi,esi
100037f1:	75 10                	jne    10003803 <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
100037f3:	83 ec 0c             	sub    esp,0xc
100037f6:	68 0c 57 00 10       	push   0x1000570c	100037f7: R_386_32	.text
100037fb:	e8 fc ff ff ff       	call   100037fc <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	100037fc: R_386_PC32	KePanic(char const*)
10003800:	83 c4 10             	add    esp,0x10
10003803:	83 ec 0c             	sub    esp,0xc
10003806:	56                   	push   esi
10003807:	e8 fc ff ff ff       	call   10003808 <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	10003808: R_386_PC32	Directory::open()
1000380c:	83 c4 10             	add    esp,0x10
1000380f:	85 c0                	test   eax,eax
10003811:	75 e0                	jne    100037f3 <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
10003813:	83 ec 0c             	sub    esp,0xc
10003816:	8b 06                	mov    eax,DWORD PTR [esi]
10003818:	8d 4c 24 20          	lea    ecx,[esp+0x20]
1000381c:	51                   	push   ecx
1000381d:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
10003824:	52                   	push   edx
10003825:	6a 00                	push   0x0
10003827:	68 10 01 00 00       	push   0x110
1000382c:	56                   	push   esi
1000382d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003830:	83 c4 20             	add    esp,0x20
10003833:	85 c0                	test   eax,eax
10003835:	0f 85 a0 01 00 00    	jne    100039db <NIContext::NIContext(Video*, int, int, int, int)+0x289>
1000383b:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
10003843:	0f 85 92 01 00 00    	jne    100039db <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003849:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
10003850:	83 c9 ff             	or     ecx,0xffffffff
10003853:	83 ec 0c             	sub    esp,0xc
10003856:	89 ef                	mov    edi,ebp
10003858:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
1000385a:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
10003860:	89 ca                	mov    edx,ecx
10003862:	f7 d2                	not    edx
10003864:	52                   	push   edx
10003865:	e8 fc ff ff ff       	call   10003866 <NIContext::NIContext(Video*, int, int, int, int)+0x114>	10003866: R_386_PC32	malloc
1000386a:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
1000386e:	47                   	inc    edi
1000386f:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
10003875:	5a                   	pop    edx
10003876:	59                   	pop    ecx
10003877:	55                   	push   ebp
10003878:	50                   	push   eax
10003879:	e8 fc ff ff ff       	call   1000387a <NIContext::NIContext(Video*, int, int, int, int)+0x128>	1000387a: R_386_PC32	strcpy
1000387e:	5f                   	pop    edi
1000387f:	58                   	pop    eax
10003880:	68 27 57 00 10       	push   0x10005727	10003881: R_386_32	.text
10003885:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
10003889:	57                   	push   edi
1000388a:	e8 fc ff ff ff       	call   1000388b <NIContext::NIContext(Video*, int, int, int, int)+0x139>	1000388b: R_386_PC32	strcpy
1000388f:	58                   	pop    eax
10003890:	5a                   	pop    edx
10003891:	55                   	push   ebp
10003892:	57                   	push   edi
10003893:	e8 fc ff ff ff       	call   10003894 <NIContext::NIContext(Video*, int, int, int, int)+0x142>	10003894: R_386_PC32	strcat
10003898:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
1000389f:	e8 fc ff ff ff       	call   100038a0 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	100038a0: R_386_PC32	malloc
100038a4:	83 c4 0c             	add    esp,0xc
100038a7:	89 c5                	mov    ebp,eax
100038a9:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100038ab: R_386_32	kernelProcess
100038af:	57                   	push   edi
100038b0:	50                   	push   eax
100038b1:	e8 fc ff ff ff       	call   100038b2 <NIContext::NIContext(Video*, int, int, int, int)+0x160>	100038b2: R_386_PC32	File::File(char const*, Process*)
100038b6:	83 c4 10             	add    esp,0x10
100038b9:	85 ed                	test   ebp,ebp
100038bb:	0f 84 52 ff ff ff    	je     10003813 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
100038c1:	50                   	push   eax
100038c2:	50                   	push   eax
100038c3:	6a 01                	push   0x1
100038c5:	55                   	push   ebp
100038c6:	e8 fc ff ff ff       	call   100038c7 <NIContext::NIContext(Video*, int, int, int, int)+0x175>	100038c7: R_386_PC32	File::open(FileOpenMode)
100038cb:	83 c4 10             	add    esp,0x10
100038ce:	85 c0                	test   eax,eax
100038d0:	74 0c                	je     100038de <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
100038d2:	83 ec 0c             	sub    esp,0xc
100038d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100038d8:	55                   	push   ebp
100038d9:	e9 b4 00 00 00       	jmp    10003992 <NIContext::NIContext(Video*, int, int, int, int)+0x240>
100038de:	50                   	push   eax
100038df:	8d 44 24 17          	lea    eax,[esp+0x17]
100038e3:	50                   	push   eax
100038e4:	8d 44 24 20          	lea    eax,[esp+0x20]
100038e8:	50                   	push   eax
100038e9:	55                   	push   ebp
100038ea:	e8 fc ff ff ff       	call   100038eb <NIContext::NIContext(Video*, int, int, int, int)+0x199>	100038eb: R_386_PC32	File::stat(unsigned long long*, bool*)
100038ef:	83 c4 10             	add    esp,0x10
100038f2:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
100038f7:	74 0e                	je     10003907 <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
100038f9:	83 ec 0c             	sub    esp,0xc
100038fc:	55                   	push   ebp
100038fd:	e8 fc ff ff ff       	call   100038fe <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	100038fe: R_386_PC32	File::close()
10003902:	e9 85 00 00 00       	jmp    1000398c <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
10003907:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000390b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
1000390f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10003917:	83 ec 0c             	sub    esp,0xc
1000391a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000391e:	e8 fc ff ff ff       	call   1000391f <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	1000391f: R_386_PC32	malloc
10003923:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003927:	58                   	pop    eax
10003928:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000392b:	8d 54 24 20          	lea    edx,[esp+0x20]
1000392f:	52                   	push   edx
10003930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10003934:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003938:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000393c:	55                   	push   ebp
1000393d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003940:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003944:	83 c4 1c             	add    esp,0x1c
10003947:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000394b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000394f:	68 3c 57 00 10       	push   0x1000573c	10003950: R_386_32	.text
10003954:	e8 fc ff ff ff       	call   10003955 <NIContext::NIContext(Video*, int, int, int, int)+0x203>	10003955: R_386_PC32	Dbg::kprintf(char const*, ...)
10003959:	83 c4 10             	add    esp,0x10
1000395c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003960:	85 c0                	test   eax,eax
10003962:	75 15                	jne    10003979 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003964:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003968:	89 c1                	mov    ecx,eax
1000396a:	c1 f9 1f             	sar    ecx,0x1f
1000396d:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10003971:	75 06                	jne    10003979 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003973:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10003977:	74 24                	je     1000399d <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
10003979:	83 ec 0c             	sub    esp,0xc
1000397c:	55                   	push   ebp
1000397d:	e8 fc ff ff ff       	call   1000397e <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	1000397e: R_386_PC32	File::close()
10003982:	58                   	pop    eax
10003983:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10003987:	e8 fc ff ff ff       	call   10003988 <NIContext::NIContext(Video*, int, int, int, int)+0x236>	10003988: R_386_PC32	free
1000398c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000398f:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003992:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003995:	83 c4 10             	add    esp,0x10
10003998:	e9 76 fe ff ff       	jmp    10003813 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
1000399d:	50                   	push   eax
1000399e:	50                   	push   eax
1000399f:	57                   	push   edi
100039a0:	68 50 57 00 10       	push   0x10005750	100039a1: R_386_32	.text
100039a5:	e8 fc ff ff ff       	call   100039a6 <NIContext::NIContext(Video*, int, int, int, int)+0x254>	100039a6: R_386_PC32	Dbg::kprintf(char const*, ...)
100039aa:	5a                   	pop    edx
100039ab:	59                   	pop    ecx
100039ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
100039b0:	68 00 00 00 00       	push   0x0	100039b1: R_386_32	ssfn_ctx
100039b5:	e8 fc ff ff ff       	call   100039b6 <NIContext::NIContext(Video*, int, int, int, int)+0x264>	100039b6: R_386_PC32	ssfn_load
100039ba:	5b                   	pop    ebx
100039bb:	5f                   	pop    edi
100039bc:	50                   	push   eax
100039bd:	68 61 57 00 10       	push   0x10005761	100039be: R_386_32	.text
100039c2:	e8 fc ff ff ff       	call   100039c3 <NIContext::NIContext(Video*, int, int, int, int)+0x271>	100039c3: R_386_PC32	Dbg::kprintf(char const*, ...)
100039c7:	89 2c 24             	mov    DWORD PTR [esp],ebp
100039ca:	e8 fc ff ff ff       	call   100039cb <NIContext::NIContext(Video*, int, int, int, int)+0x279>	100039cb: R_386_PC32	File::close()
100039cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100039d2:	89 2c 24             	mov    DWORD PTR [esp],ebp
100039d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
100039d8:	83 c4 10             	add    esp,0x10
100039db:	83 ec 0c             	sub    esp,0xc
100039de:	56                   	push   esi
100039df:	e8 fc ff ff ff       	call   100039e0 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	100039e0: R_386_PC32	Directory::close()
100039e4:	8b 06                	mov    eax,DWORD PTR [esi]
100039e6:	89 34 24             	mov    DWORD PTR [esp],esi
100039e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
100039ec:	b8 00 00 00 00       	mov    eax,0x0	100039ed: R_386_32	ssfn_ctx
100039f1:	e8 f7 cb ff ff       	call   100005ed <_ssfn_fc.part.1>
100039f6:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	100039f8: R_386_32	ssfn_ctx
10003a00:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	10003a02: R_386_32	ssfn_ctx
10003a0a:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	10003a0c: R_386_32	ssfn_ctx
10003a14:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	10003a16: R_386_32	ssfn_ctx
10003a1e:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	10003a20: R_386_32	ssfn_ctx
10003a28:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	10003a2a: R_386_32	ssfn_ctx
10003a32:	81 c4 4c 02 00 00    	add    esp,0x24c
10003a38:	5b                   	pop    ebx
10003a39:	5e                   	pop    esi
10003a3a:	5f                   	pop    edi
10003a3b:	5d                   	pop    ebp
10003a3c:	c3                   	ret    
10003a3d:	90                   	nop

10003a3e <NiCreateEvent(NIWindow*, int, bool)>:
10003a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003a42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003a46:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10003a49:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
10003a4f:	81 e2 00 00 00 80    	and    edx,0x80000000
10003a55:	09 ca                	or     edx,ecx
10003a57:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10003a5b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10003a5e:	c1 e1 07             	shl    ecx,0x7
10003a61:	8a 50 07             	mov    dl,BYTE PTR [eax+0x7]
10003a64:	83 e2 7f             	and    edx,0x7f
10003a67:	09 ca                	or     edx,ecx
10003a69:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10003a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10003a70:	89 10                	mov    DWORD PTR [eax],edx
10003a72:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003a74: R_386_32	mouseDesktop
10003a78:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
10003a7b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
10003a7e:	66 89 48 08          	mov    WORD PTR [eax+0x8],cx
10003a82:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
10003a86:	c2 04 00             	ret    0x4

10003a89 <NiLoadCursors()>:
10003a89:	55                   	push   ebp
10003a8a:	57                   	push   edi
10003a8b:	56                   	push   esi
10003a8c:	53                   	push   ebx
10003a8d:	83 ec 38             	sub    esp,0x38
10003a90:	68 14 01 00 00       	push   0x114
10003a95:	e8 fc ff ff ff       	call   10003a96 <NiLoadCursors()+0xd>	10003a96: R_386_PC32	malloc
10003a9a:	83 c4 0c             	add    esp,0xc
10003a9d:	89 c5                	mov    ebp,eax
10003a9f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10003aa1: R_386_32	kernelProcess
10003aa5:	68 1c 5a 00 10       	push   0x10005a1c	10003aa6: R_386_32	.text
10003aaa:	50                   	push   eax
10003aab:	e8 fc ff ff ff       	call   10003aac <NiLoadCursors()+0x23>	10003aac: R_386_PC32	File::File(char const*, Process*)
10003ab0:	58                   	pop    eax
10003ab1:	5a                   	pop    edx
10003ab2:	6a 01                	push   0x1
10003ab4:	55                   	push   ebp
10003ab5:	e8 fc ff ff ff       	call   10003ab6 <NiLoadCursors()+0x2d>	10003ab6: R_386_PC32	File::open(FileOpenMode)
10003aba:	83 c4 10             	add    esp,0x10
10003abd:	85 c0                	test   eax,eax
10003abf:	74 0a                	je     10003acb <NiLoadCursors()+0x42>
10003ac1:	83 ec 0c             	sub    esp,0xc
10003ac4:	68 3b 5a 00 10       	push   0x10005a3b	10003ac5: R_386_32	.text
10003ac9:	eb 4c                	jmp    10003b17 <NiLoadCursors()+0x8e>
10003acb:	53                   	push   ebx
10003acc:	8d 44 24 17          	lea    eax,[esp+0x17]
10003ad0:	50                   	push   eax
10003ad1:	8d 44 24 20          	lea    eax,[esp+0x20]
10003ad5:	50                   	push   eax
10003ad6:	55                   	push   ebp
10003ad7:	e8 fc ff ff ff       	call   10003ad8 <NiLoadCursors()+0x4f>	10003ad8: R_386_PC32	File::stat(unsigned long long*, bool*)
10003adc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10003ae0:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10003ae4:	89 34 24             	mov    DWORD PTR [esp],esi
10003ae7:	e8 fc ff ff ff       	call   10003ae8 <NiLoadCursors()+0x5f>	10003ae8: R_386_PC32	malloc
10003aec:	89 c3                	mov    ebx,eax
10003aee:	58                   	pop    eax
10003aef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003af2:	8d 54 24 20          	lea    edx,[esp+0x20]
10003af6:	52                   	push   edx
10003af7:	53                   	push   ebx
10003af8:	57                   	push   edi
10003af9:	56                   	push   esi
10003afa:	55                   	push   ebp
10003afb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003afe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003b02:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10003b06:	83 c4 20             	add    esp,0x20
10003b09:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10003b0d:	74 12                	je     10003b21 <NiLoadCursors()+0x98>
10003b0f:	83 ec 0c             	sub    esp,0xc
10003b12:	68 4f 5a 00 10       	push   0x10005a4f	10003b13: R_386_32	.text
10003b17:	e8 fc ff ff ff       	call   10003b18 <NiLoadCursors()+0x8f>	10003b18: R_386_PC32	Dbg::kprintf(char const*, ...)
10003b1c:	e9 3d 01 00 00       	jmp    10003c5e <NiLoadCursors()+0x1d5>
10003b21:	6a 00                	push   0x0
10003b23:	31 ed                	xor    ebp,ebp
10003b25:	68 04 01 00 00       	push   0x104
10003b2a:	52                   	push   edx
10003b2b:	50                   	push   eax
10003b2c:	e8 fc ff ff ff       	call   10003b2d <NiLoadCursors()+0xa4>	10003b2d: R_386_PC32	__udivdi3
10003b31:	5a                   	pop    edx
10003b32:	59                   	pop    ecx
10003b33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003b37:	50                   	push   eax
10003b38:	68 63 5a 00 10       	push   0x10005a63	10003b39: R_386_32	.text
10003b3d:	e8 fc ff ff ff       	call   10003b3e <NiLoadCursors()+0xb5>	10003b3e: R_386_PC32	Dbg::kprintf(char const*, ...)
10003b42:	89 1c 24             	mov    DWORD PTR [esp],ebx
10003b45:	e8 fc ff ff ff       	call   10003b46 <NiLoadCursors()+0xbd>	10003b46: R_386_PC32	Dbg::kprintf(char const*, ...)
10003b4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10003b4e:	8d 04 83             	lea    eax,[ebx+eax*4]
10003b51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003b55:	83 c4 10             	add    esp,0x10
10003b58:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
10003b5c:	0f 8d f3 00 00 00    	jge    10003c55 <NiLoadCursors()+0x1cc>
10003b62:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10003b65:	50                   	push   eax
10003b66:	6a 04                	push   0x4
10003b68:	68 70 5a 00 10       	push   0x10005a70	10003b69: R_386_32	.text
10003b6d:	56                   	push   esi
10003b6e:	e8 fc ff ff ff       	call   10003b6f <NiLoadCursors()+0xe6>	10003b6f: R_386_PC32	memcmp
10003b73:	83 c4 10             	add    esp,0x10
10003b76:	85 c0                	test   eax,eax
10003b78:	0f 84 b8 00 00 00    	je     10003c36 <NiLoadCursors()+0x1ad>
10003b7e:	50                   	push   eax
10003b7f:	6a 04                	push   0x4
10003b81:	68 75 5a 00 10       	push   0x10005a75	10003b82: R_386_32	.text
10003b86:	56                   	push   esi
10003b87:	e8 fc ff ff ff       	call   10003b88 <NiLoadCursors()+0xff>	10003b88: R_386_PC32	memcmp
10003b8c:	83 c4 10             	add    esp,0x10
10003b8f:	85 c0                	test   eax,eax
10003b91:	74 7b                	je     10003c0e <NiLoadCursors()+0x185>
10003b93:	50                   	push   eax
10003b94:	6a 04                	push   0x4
10003b96:	68 7a 5a 00 10       	push   0x10005a7a	10003b97: R_386_32	.text
10003b9b:	56                   	push   esi
10003b9c:	e8 fc ff ff ff       	call   10003b9d <NiLoadCursors()+0x114>	10003b9d: R_386_PC32	memcmp
10003ba1:	83 c4 10             	add    esp,0x10
10003ba4:	85 c0                	test   eax,eax
10003ba6:	74 6d                	je     10003c15 <NiLoadCursors()+0x18c>
10003ba8:	57                   	push   edi
10003ba9:	6a 04                	push   0x4
10003bab:	68 7f 5a 00 10       	push   0x10005a7f	10003bac: R_386_32	.text
10003bb0:	56                   	push   esi
10003bb1:	e8 fc ff ff ff       	call   10003bb2 <NiLoadCursors()+0x129>	10003bb2: R_386_PC32	memcmp
10003bb6:	83 c4 10             	add    esp,0x10
10003bb9:	85 c0                	test   eax,eax
10003bbb:	74 5f                	je     10003c1c <NiLoadCursors()+0x193>
10003bbd:	51                   	push   ecx
10003bbe:	6a 04                	push   0x4
10003bc0:	68 84 5a 00 10       	push   0x10005a84	10003bc1: R_386_32	.text
10003bc5:	56                   	push   esi
10003bc6:	e8 fc ff ff ff       	call   10003bc7 <NiLoadCursors()+0x13e>	10003bc7: R_386_PC32	memcmp
10003bcb:	83 c4 10             	add    esp,0x10
10003bce:	85 c0                	test   eax,eax
10003bd0:	74 51                	je     10003c23 <NiLoadCursors()+0x19a>
10003bd2:	52                   	push   edx
10003bd3:	6a 04                	push   0x4
10003bd5:	68 89 5a 00 10       	push   0x10005a89	10003bd6: R_386_32	.text
10003bda:	56                   	push   esi
10003bdb:	e8 fc ff ff ff       	call   10003bdc <NiLoadCursors()+0x153>	10003bdc: R_386_PC32	memcmp
10003be0:	83 c4 10             	add    esp,0x10
10003be3:	85 c0                	test   eax,eax
10003be5:	74 43                	je     10003c2a <NiLoadCursors()+0x1a1>
10003be7:	50                   	push   eax
10003be8:	6a 04                	push   0x4
10003bea:	68 8e 5a 00 10       	push   0x10005a8e	10003beb: R_386_32	.text
10003bef:	56                   	push   esi
10003bf0:	e8 fc ff ff ff       	call   10003bf1 <NiLoadCursors()+0x168>	10003bf1: R_386_PC32	memcmp
10003bf5:	83 c4 10             	add    esp,0x10
10003bf8:	85 c0                	test   eax,eax
10003bfa:	74 35                	je     10003c31 <NiLoadCursors()+0x1a8>
10003bfc:	83 ec 0c             	sub    esp,0xc
10003bff:	68 93 5a 00 10       	push   0x10005a93	10003c00: R_386_32	.text
10003c04:	e8 fc ff ff ff       	call   10003c05 <NiLoadCursors()+0x17c>	10003c05: R_386_PC32	Dbg::kprintf(char const*, ...)
10003c09:	83 c4 10             	add    esp,0x10
10003c0c:	eb 47                	jmp    10003c55 <NiLoadCursors()+0x1cc>
10003c0e:	b8 00 02 00 00       	mov    eax,0x200
10003c13:	eb 21                	jmp    10003c36 <NiLoadCursors()+0x1ad>
10003c15:	b8 00 03 00 00       	mov    eax,0x300
10003c1a:	eb 1a                	jmp    10003c36 <NiLoadCursors()+0x1ad>
10003c1c:	b8 00 01 00 00       	mov    eax,0x100
10003c21:	eb 13                	jmp    10003c36 <NiLoadCursors()+0x1ad>
10003c23:	b8 00 04 00 00       	mov    eax,0x400
10003c28:	eb 0c                	jmp    10003c36 <NiLoadCursors()+0x1ad>
10003c2a:	b8 00 05 00 00       	mov    eax,0x500
10003c2f:	eb 05                	jmp    10003c36 <NiLoadCursors()+0x1ad>
10003c31:	b8 00 06 00 00       	mov    eax,0x600
10003c36:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003c38: R_386_32	___mouse_data
10003c3c:	b9 00 01 00 00       	mov    ecx,0x100
10003c41:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003c45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003c47:	45                   	inc    ebp
10003c48:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003c50:	e9 03 ff ff ff       	jmp    10003b58 <NiLoadCursors()+0xcf>
10003c55:	83 ec 0c             	sub    esp,0xc
10003c58:	53                   	push   ebx
10003c59:	e8 fc ff ff ff       	call   10003c5a <NiLoadCursors()+0x1d1>	10003c5a: R_386_PC32	free
10003c5e:	83 c4 10             	add    esp,0x10
10003c61:	83 c4 2c             	add    esp,0x2c
10003c64:	5b                   	pop    ebx
10003c65:	5e                   	pop    esi
10003c66:	5f                   	pop    edi
10003c67:	5d                   	pop    ebp
10003c68:	c3                   	ret    
10003c69:	90                   	nop

10003c6a <NIDesktop::NIDesktop(NIContext*)>:
10003c6a:	53                   	push   ebx
10003c6b:	83 ec 14             	sub    esp,0x14
10003c6e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10003c72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003c76:	c7 43 08 1e 00 00 00 	mov    DWORD PTR [ebx+0x8],0x1e
10003c7d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003c80:	c7 43 0c 1e 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1e
10003c87:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10003c8e:	6a 08                	push   0x8
10003c90:	e8 fc ff ff ff       	call   10003c91 <NIDesktop::NIDesktop(NIContext*)+0x27>	10003c91: R_386_PC32	malloc
10003c95:	89 03                	mov    DWORD PTR [ebx],eax
10003c97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003c9e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003ca4:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10003ca6: R_386_32	mouseDesktop
10003caa:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003cac: R_386_32	guiMouseHandler
	10003cb0: R_386_32	NiHandleMouse(int, int, int, int)
10003cb4:	83 c4 18             	add    esp,0x18
10003cb7:	5b                   	pop    ebx
10003cb8:	c3                   	ret    
10003cb9:	90                   	nop

10003cba <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003cba:	53                   	push   ebx
10003cbb:	83 ec 08             	sub    esp,0x8
10003cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003cc2:	8b 00                	mov    eax,DWORD PTR [eax]
10003cc4:	8b 18                	mov    ebx,DWORD PTR [eax]
10003cc6:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10003cca:	74 1d                	je     10003ce9 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2f>
10003ccc:	8b 03                	mov    eax,DWORD PTR [ebx]
10003cce:	85 c0                	test   eax,eax
10003cd0:	74 12                	je     10003ce4 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003cd2:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10003cd6:	74 0c                	je     10003ce4 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003cd8:	83 ec 0c             	sub    esp,0xc
10003cdb:	50                   	push   eax
10003cdc:	e8 fc ff ff ff       	call   10003cdd <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x23>	10003cdd: R_386_PC32	NIWindow::invalidate()
10003ce1:	83 c4 10             	add    esp,0x10
10003ce4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
10003ce7:	eb dd                	jmp    10003cc6 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xc>
10003ce9:	83 c4 08             	add    esp,0x8
10003cec:	5b                   	pop    ebx
10003ced:	c3                   	ret    

10003cee <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003cee:	57                   	push   edi
10003cef:	56                   	push   esi
10003cf0:	53                   	push   ebx
10003cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003cf5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003cf9:	8b 00                	mov    eax,DWORD PTR [eax]
10003cfb:	8b 00                	mov    eax,DWORD PTR [eax]
10003cfd:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003d00:	85 db                	test   ebx,ebx
10003d02:	74 52                	je     10003d56 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x68>
10003d04:	8b 00                	mov    eax,DWORD PTR [eax]
10003d06:	85 c0                	test   eax,eax
10003d08:	74 4e                	je     10003d58 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6a>
10003d0a:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
10003d10:	39 ca                	cmp    edx,ecx
10003d12:	7e 04                	jle    10003d18 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x2a>
10003d14:	89 d8                	mov    eax,ebx
10003d16:	eb e5                	jmp    10003cfd <NIDesktop::getTopmostWindowAtPixel(int, int)+0xf>
10003d18:	8b b0 70 01 00 00    	mov    esi,DWORD PTR [eax+0x170]
10003d1e:	01 d6                	add    esi,edx
10003d20:	39 ce                	cmp    esi,ecx
10003d22:	7e f0                	jle    10003d14 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10003d24:	89 ce                	mov    esi,ecx
10003d26:	29 d6                	sub    esi,edx
10003d28:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
10003d2e:	8d 34 b2             	lea    esi,[edx+esi*4]
10003d31:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
10003d37:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003d3a:	01 d7                	add    edi,edx
10003d3c:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003d40:	7f d2                	jg     10003d14 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10003d42:	03 90 6c 01 00 00    	add    edx,DWORD PTR [eax+0x16c]
10003d48:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003d4c:	29 f2                	sub    edx,esi
10003d4e:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003d52:	7e c0                	jle    10003d14 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10003d54:	eb 02                	jmp    10003d58 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6a>
10003d56:	31 c0                	xor    eax,eax
10003d58:	5b                   	pop    ebx
10003d59:	5e                   	pop    esi
10003d5a:	5f                   	pop    edi
10003d5b:	c3                   	ret    

10003d5c <NIDesktop::renderScanline(int, int, int)>:
10003d5c:	55                   	push   ebp
10003d5d:	57                   	push   edi
10003d5e:	56                   	push   esi
10003d5f:	53                   	push   ebx
10003d60:	83 ec 2c             	sub    esp,0x2c
10003d63:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10003d67:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10003d6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003d6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003d73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003d77:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003d79: R_386_32	render
10003d7d:	31 c0                	xor    eax,eax
10003d7f:	89 d7                	mov    edi,edx
10003d81:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003d83:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003d87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003d8b:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003d8d: R_386_32	shadow
10003d91:	b0 80                	mov    al,0x80
10003d93:	89 d7                	mov    edi,edx
10003d95:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003d97:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003d9b:	8b 00                	mov    eax,DWORD PTR [eax]
10003d9d:	8b 00                	mov    eax,DWORD PTR [eax]
10003d9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003da3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003da7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003dab:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003dad: R_386_32	movingWin
10003db1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003db5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003db8:	85 c0                	test   eax,eax
10003dba:	75 09                	jne    10003dc5 <NIDesktop::renderScanline(int, int, int)+0x69>
10003dbc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003dc0:	e9 31 03 00 00       	jmp    100040f6 <NIDesktop::renderScanline(int, int, int)+0x39a>
10003dc5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003dc9:	8b 1f                	mov    ebx,DWORD PTR [edi]
10003dcb:	85 db                	test   ebx,ebx
10003dcd:	74 ed                	je     10003dbc <NIDesktop::renderScanline(int, int, int)+0x60>
10003dcf:	39 da                	cmp    edx,ebx
10003dd1:	75 06                	jne    10003dd9 <NIDesktop::renderScanline(int, int, int)+0x7d>
10003dd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003dd7:	eb d8                	jmp    10003db1 <NIDesktop::renderScanline(int, int, int)+0x55>
10003dd9:	83 ec 0c             	sub    esp,0xc
10003ddc:	53                   	push   ebx
10003ddd:	e8 fc ff ff ff       	call   10003dde <NIDesktop::renderScanline(int, int, int)+0x82>	10003dde: R_386_PC32	NIWindow::request()
10003de2:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10003de8:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
10003dee:	83 c4 10             	add    esp,0x10
10003df1:	01 c2                	add    edx,eax
10003df3:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003df7:	0f 8e bf 00 00 00    	jle    10003ebc <NIDesktop::renderScanline(int, int, int)+0x160>
10003dfd:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
10003e04:	0f 85 b2 00 00 00    	jne    10003ebc <NIDesktop::renderScanline(int, int, int)+0x160>
10003e0a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003e0e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
10003e14:	83 c0 06             	add    eax,0x6
10003e17:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003e1b:	8b 8b 64 01 00 00    	mov    ecx,DWORD PTR [ebx+0x164]
10003e21:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
10003e27:	01 c8                	add    eax,ecx
10003e29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003e2d:	39 d0                	cmp    eax,edx
10003e2f:	0f 8e 63 01 00 00    	jle    10003f98 <NIDesktop::renderScanline(int, int, int)+0x23c>
10003e35:	3b 54 24 48          	cmp    edx,DWORD PTR [esp+0x48]
10003e39:	7c 7b                	jl     10003eb6 <NIDesktop::renderScanline(int, int, int)+0x15a>
10003e3b:	3b 54 24 4c          	cmp    edx,DWORD PTR [esp+0x4c]
10003e3f:	0f 8f 53 01 00 00    	jg     10003f98 <NIDesktop::renderScanline(int, int, int)+0x23c>
10003e45:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
10003e4b:	89 d5                	mov    ebp,edx
10003e4d:	6b fe fc             	imul   edi,esi,0xfffffffc
10003e50:	29 cd                	sub    ebp,ecx
10003e52:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003e56:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
10003e5a:	39 f0                	cmp    eax,esi
10003e5c:	7c 20                	jl     10003e7e <NIDesktop::renderScanline(int, int, int)+0x122>
10003e5e:	8d 0c 87             	lea    ecx,[edi+eax*4]
10003e61:	03 8b 60 01 00 00    	add    ecx,DWORD PTR [ebx+0x160]
10003e67:	0f b7 29             	movzx  ebp,WORD PTR [ecx]
10003e6a:	3b 6c 24 18          	cmp    ebp,DWORD PTR [esp+0x18]
10003e6e:	7f 0e                	jg     10003e7e <NIDesktop::renderScanline(int, int, int)+0x122>
10003e70:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
10003e74:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
10003e78:	29 cd                	sub    ebp,ecx
10003e7a:	39 d5                	cmp    ebp,edx
10003e7c:	7d 07                	jge    10003e85 <NIDesktop::renderScanline(int, int, int)+0x129>
10003e7e:	40                   	inc    eax
10003e7f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
10003e83:	75 d5                	jne    10003e5a <NIDesktop::renderScanline(int, int, int)+0xfe>
10003e85:	2b 44 24 44          	sub    eax,DWORD PTR [esp+0x44]
10003e89:	48                   	dec    eax
10003e8a:	83 f8 03             	cmp    eax,0x3
10003e8d:	77 27                	ja     10003eb6 <NIDesktop::renderScanline(int, int, int)+0x15a>
10003e8f:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003e91: R_386_32	render
10003e96:	75 1e                	jne    10003eb6 <NIDesktop::renderScanline(int, int, int)+0x15a>
10003e98:	8d 0c c5 65 00 00 00 	lea    ecx,[eax*8+0x65]
10003e9f:	0f b6 82 00 00 00 00 	movzx  eax,BYTE PTR [edx+0x0]	10003ea2: R_386_32	shadow
10003ea6:	0f af c1             	imul   eax,ecx
10003ea9:	d1 f9                	sar    ecx,1
10003eab:	c1 f8 08             	sar    eax,0x8
10003eae:	01 c1                	add    ecx,eax
10003eb0:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	10003eb2: R_386_32	shadow
10003eb6:	42                   	inc    edx
10003eb7:	e9 5f ff ff ff       	jmp    10003e1b <NIDesktop::renderScanline(int, int, int)+0xbf>
10003ebc:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003ec0:	0f 8d d2 00 00 00    	jge    10003f98 <NIDesktop::renderScanline(int, int, int)+0x23c>
10003ec6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
10003ecd:	0f 85 c5 00 00 00    	jne    10003f98 <NIDesktop::renderScanline(int, int, int)+0x23c>
10003ed3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10003ed7:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
10003edd:	8d 77 fa             	lea    esi,[edi-0x6]
10003ee0:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003ee4:	8b 8b 64 01 00 00    	mov    ecx,DWORD PTR [ebx+0x164]
10003eea:	8b b3 6c 01 00 00    	mov    esi,DWORD PTR [ebx+0x16c]
10003ef0:	01 ce                	add    esi,ecx
10003ef2:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10003ef6:	39 c6                	cmp    esi,eax
10003ef8:	0f 8e 9a 00 00 00    	jle    10003f98 <NIDesktop::renderScanline(int, int, int)+0x23c>
10003efe:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003f02:	0f 8c 8a 00 00 00    	jl     10003f92 <NIDesktop::renderScanline(int, int, int)+0x236>
10003f08:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003f0c:	0f 8f 86 00 00 00    	jg     10003f98 <NIDesktop::renderScanline(int, int, int)+0x23c>
10003f12:	89 c7                	mov    edi,eax
10003f14:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003f18:	29 cf                	sub    edi,ecx
10003f1a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003f1e:	4a                   	dec    edx
10003f1f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10003f23:	29 d1                	sub    ecx,edx
10003f25:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
10003f29:	74 3b                	je     10003f66 <NIDesktop::renderScanline(int, int, int)+0x20a>
10003f2b:	8b bb 68 01 00 00    	mov    edi,DWORD PTR [ebx+0x168]
10003f31:	8b b3 70 01 00 00    	mov    esi,DWORD PTR [ebx+0x170]
10003f37:	8d 2c 37             	lea    ebp,[edi+esi*1]
10003f3a:	39 d5                	cmp    ebp,edx
10003f3c:	7e e0                	jle    10003f1e <NIDesktop::renderScanline(int, int, int)+0x1c2>
10003f3e:	89 d5                	mov    ebp,edx
10003f40:	29 fd                	sub    ebp,edi
10003f42:	39 ee                	cmp    esi,ebp
10003f44:	7e 20                	jle    10003f66 <NIDesktop::renderScanline(int, int, int)+0x20a>
10003f46:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10003f4c:	8d 34 ae             	lea    esi,[esi+ebp*4]
10003f4f:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003f52:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10003f56:	7f c6                	jg     10003f1e <NIDesktop::renderScanline(int, int, int)+0x1c2>
10003f58:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003f5c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10003f60:	29 f7                	sub    edi,esi
10003f62:	39 c7                	cmp    edi,eax
10003f64:	7c b8                	jl     10003f1e <NIDesktop::renderScanline(int, int, int)+0x1c2>
10003f66:	83 f9 04             	cmp    ecx,0x4
10003f69:	77 27                	ja     10003f92 <NIDesktop::renderScanline(int, int, int)+0x236>
10003f6b:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003f6d: R_386_32	render
10003f72:	75 1e                	jne    10003f92 <NIDesktop::renderScanline(int, int, int)+0x236>
10003f74:	8d 0c cd 5d 00 00 00 	lea    ecx,[ecx*8+0x5d]
10003f7b:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10003f7e: R_386_32	shadow
10003f82:	0f af d1             	imul   edx,ecx
10003f85:	d1 f9                	sar    ecx,1
10003f87:	c1 fa 08             	sar    edx,0x8
10003f8a:	01 d1                	add    ecx,edx
10003f8c:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	10003f8e: R_386_32	shadow
10003f92:	40                   	inc    eax
10003f93:	e9 4c ff ff ff       	jmp    10003ee4 <NIDesktop::renderScanline(int, int, int)+0x188>
10003f98:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10003f9e:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003fa2:	0f 8f 27 01 00 00    	jg     100040cf <NIDesktop::renderScanline(int, int, int)+0x373>
10003fa8:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
10003fae:	01 c2                	add    edx,eax
10003fb0:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003fb4:	0f 8e 15 01 00 00    	jle    100040cf <NIDesktop::renderScanline(int, int, int)+0x373>
10003fba:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003fbe:	29 c2                	sub    edx,eax
10003fc0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
10003fc6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
10003fcd:	8d 14 90             	lea    edx,[eax+edx*4]
10003fd0:	0f b7 02             	movzx  eax,WORD PTR [edx]
10003fd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003fd7:	0f b7 42 02          	movzx  eax,WORD PTR [edx+0x2]
10003fdb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003fdf:	74 0f                	je     10003ff0 <NIDesktop::renderScanline(int, int, int)+0x294>
10003fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003fe5:	03 83 64 01 00 00    	add    eax,DWORD PTR [ebx+0x164]
10003feb:	e9 81 00 00 00       	jmp    10004071 <NIDesktop::renderScanline(int, int, int)+0x315>
10003ff0:	31 c9                	xor    ecx,ecx
10003ff2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
10003ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003ffc:	8d 6c 02 fc          	lea    ebp,[edx+eax*1-0x4]
10004000:	03 93 6c 01 00 00    	add    edx,DWORD PTR [ebx+0x16c]
10004006:	01 cd                	add    ebp,ecx
10004008:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
1000400c:	01 ca                	add    edx,ecx
1000400e:	80 bd 00 00 00 00 00 	cmp    BYTE PTR [ebp+0x0],0x0	10004010: R_386_32	render
10004015:	75 1f                	jne    10004036 <NIDesktop::renderScanline(int, int, int)+0x2da>
10004017:	0f b6 b5 00 00 00 00 	movzx  esi,BYTE PTR [ebp+0x0]	1000401a: R_386_32	shadow
1000401e:	6b f9 f8             	imul   edi,ecx,0xfffffff8
10004021:	83 c7 7d             	add    edi,0x7d
10004024:	0f af f7             	imul   esi,edi
10004027:	d1 ff                	sar    edi,1
10004029:	c1 fe 08             	sar    esi,0x8
1000402c:	01 f7                	add    edi,esi
1000402e:	89 f8                	mov    eax,edi
10004030:	88 85 00 00 00 00    	mov    BYTE PTR [ebp+0x0],al	10004032: R_386_32	shadow
10004036:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10004038: R_386_32	render
1000403d:	75 20                	jne    1000405f <NIDesktop::renderScanline(int, int, int)+0x303>
1000403f:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
10004046:	0f b6 b2 00 00 00 00 	movzx  esi,BYTE PTR [edx+0x0]	10004049: R_386_32	shadow
1000404d:	0f af f7             	imul   esi,edi
10004050:	d1 ff                	sar    edi,1
10004052:	c1 fe 08             	sar    esi,0x8
10004055:	01 f7                	add    edi,esi
10004057:	89 f8                	mov    eax,edi
10004059:	88 82 00 00 00 00    	mov    BYTE PTR [edx+0x0],al	1000405b: R_386_32	shadow
1000405f:	41                   	inc    ecx
10004060:	83 f9 04             	cmp    ecx,0x4
10004063:	75 8d                	jne    10003ff2 <NIDesktop::renderScanline(int, int, int)+0x296>
10004065:	e9 77 ff ff ff       	jmp    10003fe1 <NIDesktop::renderScanline(int, int, int)+0x285>
1000406a:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
1000406e:	7d 17                	jge    10004087 <NIDesktop::renderScanline(int, int, int)+0x32b>
10004070:	40                   	inc    eax
10004071:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10004077:	03 93 64 01 00 00    	add    edx,DWORD PTR [ebx+0x164]
1000407d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10004081:	39 c2                	cmp    edx,eax
10004083:	7f e5                	jg     1000406a <NIDesktop::renderScanline(int, int, int)+0x30e>
10004085:	eb 48                	jmp    100040cf <NIDesktop::renderScanline(int, int, int)+0x373>
10004087:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
1000408b:	7f 42                	jg     100040cf <NIDesktop::renderScanline(int, int, int)+0x373>
1000408d:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	1000408f: R_386_32	render
10004094:	75 da                	jne    10004070 <NIDesktop::renderScanline(int, int, int)+0x314>
10004096:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10004098: R_386_32	render
1000409d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
100040a1:	8b 8b 6c 01 00 00    	mov    ecx,DWORD PTR [ebx+0x16c]
100040a7:	2b 93 68 01 00 00    	sub    edx,DWORD PTR [ebx+0x168]
100040ad:	0f af ca             	imul   ecx,edx
100040b0:	89 c2                	mov    edx,eax
100040b2:	2b 93 64 01 00 00    	sub    edx,DWORD PTR [ebx+0x164]
100040b8:	01 ca                	add    edx,ecx
100040ba:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
100040bd:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
100040c1:	8b 14 91             	mov    edx,DWORD PTR [ecx+edx*4]
100040c4:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100040c7: R_386_32	renderData
100040cb:	75 a3                	jne    10004070 <NIDesktop::renderScanline(int, int, int)+0x314>
100040cd:	eb 47                	jmp    10004116 <NIDesktop::renderScanline(int, int, int)+0x3ba>
100040cf:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
100040d6:	0f 85 e0 fc ff ff    	jne    10003dbc <NIDesktop::renderScanline(int, int, int)+0x60>
100040dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100040e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100040e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100040e7:	e9 bf fc ff ff       	jmp    10003dab <NIDesktop::renderScanline(int, int, int)+0x4f>
100040ec:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	100040ee: R_386_32	render
100040f3:	74 09                	je     100040fe <NIDesktop::renderScanline(int, int, int)+0x3a2>
100040f5:	40                   	inc    eax
100040f6:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
100040fa:	7c f0                	jl     100040ec <NIDesktop::renderScanline(int, int, int)+0x390>
100040fc:	eb 18                	jmp    10004116 <NIDesktop::renderScanline(int, int, int)+0x3ba>
100040fe:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10004100: R_386_32	render
10004105:	c7 04 85 00 00 00 00 ff 80 55 00 	mov    DWORD PTR [eax*4+0x0],0x5580ff	10004108: R_386_32	renderData
10004110:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10004114:	75 df                	jne    100040f5 <NIDesktop::renderScanline(int, int, int)+0x399>
10004116:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000411a:	8b 00                	mov    eax,DWORD PTR [eax]
1000411c:	8b 00                	mov    eax,DWORD PTR [eax]
1000411e:	85 c0                	test   eax,eax
10004120:	74 61                	je     10004183 <NIDesktop::renderScanline(int, int, int)+0x427>
10004122:	8b 00                	mov    eax,DWORD PTR [eax]
10004124:	85 c0                	test   eax,eax
10004126:	74 5b                	je     10004183 <NIDesktop::renderScanline(int, int, int)+0x427>
10004128:	80 b8 74 01 00 00 00 	cmp    BYTE PTR [eax+0x174],0x0
1000412f:	75 52                	jne    10004183 <NIDesktop::renderScanline(int, int, int)+0x427>
10004131:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10004135:	3b 5c 24 4c          	cmp    ebx,DWORD PTR [esp+0x4c]
10004139:	7d 48                	jge    10004183 <NIDesktop::renderScanline(int, int, int)+0x427>
1000413b:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	1000413d: R_386_32	shadow
10004141:	3c 80                	cmp    al,0x80
10004143:	74 3b                	je     10004180 <NIDesktop::renderScanline(int, int, int)+0x424>
10004145:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	10004148: R_386_32	renderData
1000414c:	0f b6 f0             	movzx  esi,al
1000414f:	89 d1                	mov    ecx,edx
10004151:	0f b6 c6             	movzx  eax,dh
10004154:	c1 e9 10             	shr    ecx,0x10
10004157:	0f af c6             	imul   eax,esi
1000415a:	0f b6 c9             	movzx  ecx,cl
1000415d:	0f b6 d2             	movzx  edx,dl
10004160:	0f af ce             	imul   ecx,esi
10004163:	0f af d6             	imul   edx,esi
10004166:	c1 e9 07             	shr    ecx,0x7
10004169:	c1 e8 07             	shr    eax,0x7
1000416c:	c1 e1 10             	shl    ecx,0x10
1000416f:	c1 e0 08             	shl    eax,0x8
10004172:	c1 ea 07             	shr    edx,0x7
10004175:	09 c1                	or     ecx,eax
10004177:	09 ca                	or     edx,ecx
10004179:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	1000417c: R_386_32	renderData
10004180:	43                   	inc    ebx
10004181:	eb b2                	jmp    10004135 <NIDesktop::renderScanline(int, int, int)+0x3d9>
10004183:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10004187:	83 ec 0c             	sub    esp,0xc
1000418a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000418d:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004193:	8b 10                	mov    edx,DWORD PTR [eax]
10004195:	68 00 00 00 00       	push   0x0	10004196: R_386_32	renderData
1000419a:	6a 00                	push   0x0
1000419c:	6a 01                	push   0x1
1000419e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100041a2:	6a 00                	push   0x0
100041a4:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
100041a8:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
100041ac:	ff 74 24 70          	push   DWORD PTR [esp+0x70]
100041b0:	50                   	push   eax
100041b1:	ff 52 38             	call   DWORD PTR [edx+0x38]
100041b4:	83 c4 5c             	add    esp,0x5c
100041b7:	5b                   	pop    ebx
100041b8:	5e                   	pop    esi
100041b9:	5f                   	pop    edi
100041ba:	5d                   	pop    ebp
100041bb:	c3                   	ret    

100041bc <NIDesktop::rangeRefresh(int, int, int, int)>:
100041bc:	53                   	push   ebx
100041bd:	83 ec 08             	sub    esp,0x8
100041c0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100041c4:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
100041c8:	7d 18                	jge    100041e2 <NIDesktop::rangeRefresh(int, int, int, int)+0x26>
100041ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100041ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100041d2:	53                   	push   ebx
100041d3:	43                   	inc    ebx
100041d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100041d8:	e8 fc ff ff ff       	call   100041d9 <NIDesktop::rangeRefresh(int, int, int, int)+0x1d>	100041d9: R_386_PC32	NIDesktop::renderScanline(int, int, int)
100041dd:	83 c4 10             	add    esp,0x10
100041e0:	eb e2                	jmp    100041c4 <NIDesktop::rangeRefresh(int, int, int, int)+0x8>
100041e2:	83 c4 08             	add    esp,0x8
100041e5:	5b                   	pop    ebx
100041e6:	c3                   	ret    
100041e7:	90                   	nop

100041e8 <NIDesktop::refreshWindowBounds(NIWindow*)>:
100041e8:	55                   	push   ebp
100041e9:	ba 05 00 00 00       	mov    edx,0x5
100041ee:	57                   	push   edi
100041ef:	56                   	push   esi
100041f0:	53                   	push   ebx
100041f1:	83 ec 0c             	sub    esp,0xc
100041f4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100041f8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
100041fe:	83 f8 05             	cmp    eax,0x5
10004201:	7c 02                	jl     10004205 <NIDesktop::refreshWindowBounds(NIWindow*)+0x1d>
10004203:	89 c2                	mov    edx,eax
10004205:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10004209:	03 83 70 01 00 00    	add    eax,DWORD PTR [ebx+0x170]
1000420f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
10004212:	83 ea 05             	sub    edx,0x5
10004215:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
1000421b:	8d 70 05             	lea    esi,[eax+0x5]
1000421e:	8d 69 fb             	lea    ebp,[ecx-0x5]
10004221:	39 c5                	cmp    ebp,eax
10004223:	7f 03                	jg     10004228 <NIDesktop::refreshWindowBounds(NIWindow*)+0x40>
10004225:	8d 71 ff             	lea    esi,[ecx-0x1]
10004228:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
1000422e:	89 c1                	mov    ecx,eax
10004230:	83 f8 05             	cmp    eax,0x5
10004233:	7d 05                	jge    1000423a <NIDesktop::refreshWindowBounds(NIWindow*)+0x52>
10004235:	b9 05 00 00 00       	mov    ecx,0x5
1000423a:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
10004240:	83 e9 05             	sub    ecx,0x5
10004243:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
10004249:	8d 58 05             	lea    ebx,[eax+0x5]
1000424c:	8d 6f fb             	lea    ebp,[edi-0x5]
1000424f:	39 c5                	cmp    ebp,eax
10004251:	7f 03                	jg     10004256 <NIDesktop::refreshWindowBounds(NIWindow*)+0x6e>
10004253:	8d 5f ff             	lea    ebx,[edi-0x1]
10004256:	83 ec 0c             	sub    esp,0xc
10004259:	53                   	push   ebx
1000425a:	51                   	push   ecx
1000425b:	56                   	push   esi
1000425c:	52                   	push   edx
1000425d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10004261:	e8 fc ff ff ff       	call   10004262 <NIDesktop::refreshWindowBounds(NIWindow*)+0x7a>	10004262: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004266:	83 c4 2c             	add    esp,0x2c
10004269:	5b                   	pop    ebx
1000426a:	5e                   	pop    esi
1000426b:	5f                   	pop    edi
1000426c:	5d                   	pop    ebp
1000426d:	c3                   	ret    

1000426e <NIDesktop::completeRefresh()>:
1000426e:	56                   	push   esi
1000426f:	53                   	push   ebx
10004270:	31 f6                	xor    esi,esi
10004272:	50                   	push   eax
10004273:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004277:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000427a:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
10004280:	7e 15                	jle    10004297 <NIDesktop::completeRefresh()+0x29>
10004282:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
10004288:	6a 00                	push   0x0
1000428a:	56                   	push   esi
1000428b:	46                   	inc    esi
1000428c:	53                   	push   ebx
1000428d:	e8 fc ff ff ff       	call   1000428e <NIDesktop::completeRefresh()+0x20>	1000428e: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10004292:	83 c4 10             	add    esp,0x10
10004295:	eb e0                	jmp    10004277 <NIDesktop::completeRefresh()+0x9>
10004297:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
1000429d:	83 ec 0c             	sub    esp,0xc
100042a0:	8b 0a                	mov    ecx,DWORD PTR [edx]
100042a2:	6a 00                	push   0x0
100042a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
100042a7:	05 00 00 00 00       	add    eax,0x0	100042a8: R_386_32	___mouse_data
100042ac:	50                   	push   eax
100042ad:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100042b0:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100042b3:	52                   	push   edx
100042b4:	ff 51 30             	call   DWORD PTR [ecx+0x30]
100042b7:	83 c4 24             	add    esp,0x24
100042ba:	5b                   	pop    ebx
100042bb:	5e                   	pop    esi
100042bc:	c3                   	ret    
100042bd:	90                   	nop

100042be <NIDesktop::addWindow(NIWindow*)>:
100042be:	56                   	push   esi
100042bf:	53                   	push   ebx
100042c0:	83 ec 0c             	sub    esp,0xc
100042c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100042c7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
100042cb:	56                   	push   esi
100042cc:	ff 33                	push   DWORD PTR [ebx]
100042ce:	e8 fc ff ff ff       	call   100042cf <NIDesktop::addWindow(NIWindow*)+0x11>	100042cf: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100042d3:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100042d7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100042db:	83 c4 14             	add    esp,0x14
100042de:	5b                   	pop    ebx
100042df:	5e                   	pop    esi
100042e0:	e9 03 ff ff ff       	jmp    100041e8 <NIDesktop::refreshWindowBounds(NIWindow*)>
100042e5:	90                   	nop

100042e6 <NIDesktop::raiseWindow(NIWindow*)>:
100042e6:	53                   	push   ebx
100042e7:	83 ec 10             	sub    esp,0x10
100042ea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100042ee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100042f2:	50                   	push   eax
100042f3:	ff 33                	push   DWORD PTR [ebx]
100042f5:	e8 fc ff ff ff       	call   100042f6 <NIDesktop::raiseWindow(NIWindow*)+0x10>	100042f6: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100042fa:	58                   	pop    eax
100042fb:	5a                   	pop    edx
100042fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004300:	ff 33                	push   DWORD PTR [ebx]
10004302:	e8 fc ff ff ff       	call   10004303 <NIDesktop::raiseWindow(NIWindow*)+0x1d>	10004303: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
10004307:	59                   	pop    ecx
10004308:	58                   	pop    eax
10004309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000430d:	53                   	push   ebx
1000430e:	e8 fc ff ff ff       	call   1000430f <NIDesktop::raiseWindow(NIWindow*)+0x29>	1000430f: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004313:	83 c4 18             	add    esp,0x18
10004316:	5b                   	pop    ebx
10004317:	c3                   	ret    

10004318 <NIDesktop::deleteWindow(NIWindow*)>:
10004318:	53                   	push   ebx
10004319:	83 ec 10             	sub    esp,0x10
1000431c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004320:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10004324:	50                   	push   eax
10004325:	ff 33                	push   DWORD PTR [ebx]
10004327:	e8 fc ff ff ff       	call   10004328 <NIDesktop::deleteWindow(NIWindow*)+0x10>	10004328: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
1000432c:	58                   	pop    eax
1000432d:	5a                   	pop    edx
1000432e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004332:	53                   	push   ebx
10004333:	e8 fc ff ff ff       	call   10004334 <NIDesktop::deleteWindow(NIWindow*)+0x1c>	10004334: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004338:	83 c4 18             	add    esp,0x18
1000433b:	5b                   	pop    ebx
1000433c:	c3                   	ret    
1000433d:	90                   	nop

1000433e <NIDesktop::handleMouse(int, int, int, int)>:
1000433e:	55                   	push   ebp
1000433f:	57                   	push   edi
10004340:	56                   	push   esi
10004341:	53                   	push   ebx
10004342:	83 ec 68             	sub    esp,0x68
10004345:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
10004349:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000434c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000434f:	8d 4a 20             	lea    ecx,[edx+0x20]
10004352:	51                   	push   ecx
10004353:	52                   	push   edx
10004354:	8d 50 20             	lea    edx,[eax+0x20]
10004357:	52                   	push   edx
10004358:	50                   	push   eax
10004359:	53                   	push   ebx
1000435a:	e8 fc ff ff ff       	call   1000435b <NIDesktop::handleMouse(int, int, int, int)+0x1d>	1000435b: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000435f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004362:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10004366:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004369:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
1000436d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004371:	03 94 24 94 00 00 00 	add    edx,DWORD PTR [esp+0x94]
10004378:	03 84 24 98 00 00 00 	add    eax,DWORD PTR [esp+0x98]
1000437f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
10004382:	83 c4 20             	add    esp,0x20
10004385:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10004388:	85 d2                	test   edx,edx
1000438a:	79 07                	jns    10004393 <NIDesktop::handleMouse(int, int, int, int)+0x55>
1000438c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10004393:	85 c0                	test   eax,eax
10004395:	79 07                	jns    1000439e <NIDesktop::handleMouse(int, int, int, int)+0x60>
10004397:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
1000439e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100043a1:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
100043a7:	3b 43 08             	cmp    eax,DWORD PTR [ebx+0x8]
100043aa:	7f 04                	jg     100043b0 <NIDesktop::handleMouse(int, int, int, int)+0x72>
100043ac:	48                   	dec    eax
100043ad:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
100043b0:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
100043b6:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
100043b9:	7f 04                	jg     100043bf <NIDesktop::handleMouse(int, int, int, int)+0x81>
100043bb:	48                   	dec    eax
100043bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
100043bf:	50                   	push   eax
100043c0:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100043c3:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100043c6:	53                   	push   ebx
100043c7:	e8 fc ff ff ff       	call   100043c8 <NIDesktop::handleMouse(int, int, int, int)+0x8a>	100043c8: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
100043cc:	83 c4 10             	add    esp,0x10
100043cf:	89 c5                	mov    ebp,eax
100043d1:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100043d5:	83 e0 01             	and    eax,0x1
100043d8:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100043da: R_386_32	movingWin
100043df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100043e3:	0f 84 0e 02 00 00    	je     100045f7 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
100043e9:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	100043eb: R_386_32	movingType
100043f0:	0f 85 01 02 00 00    	jne    100045f7 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
100043f6:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
100043fb:	85 c0                	test   eax,eax
100043fd:	75 0c                	jne    1000440b <NIDesktop::handleMouse(int, int, int, int)+0xcd>
100043ff:	a0 b8 8d 03 10       	mov    al,ds:0x10038db8	10004400: R_386_32	.bss
10004404:	83 e0 01             	and    eax,0x1
10004407:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
1000440b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
10004413:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004415: R_386_32	movingWin
10004419:	8b 82 70 01 00 00    	mov    eax,DWORD PTR [edx+0x170]
1000441f:	8d 48 ff             	lea    ecx,[eax-0x1]
10004422:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
10004426:	0f 8e b6 00 00 00    	jle    100044e2 <NIDesktop::handleMouse(int, int, int, int)+0x1a4>
1000442c:	be 01 00 00 00       	mov    esi,0x1
10004431:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004433: R_386_32	movingWin
10004437:	8b 92 6c 01 00 00    	mov    edx,DWORD PTR [edx+0x16c]
1000443d:	4a                   	dec    edx
1000443e:	39 f2                	cmp    edx,esi
10004440:	0f 8e 93 00 00 00    	jle    100044d9 <NIDesktop::handleMouse(int, int, int, int)+0x19b>
10004446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000444a:	8d 14 30             	lea    edx,[eax+esi*1]
1000444d:	89 c1                	mov    ecx,eax
1000444f:	83 e2 1f             	and    edx,0x1f
10004452:	83 e1 03             	and    ecx,0x3
10004455:	09 ca                	or     edx,ecx
10004457:	75 7a                	jne    100044d3 <NIDesktop::handleMouse(int, int, int, int)+0x195>
10004459:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000445d:	2b 15 b4 8d 03 10    	sub    edx,DWORD PTR ds:0x10038db4	1000445f: R_386_32	.bss
10004463:	01 f2                	add    edx,esi
10004465:	78 2d                	js     10004494 <NIDesktop::handleMouse(int, int, int, int)+0x156>
10004467:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
1000446a:	3b 91 0c 04 00 00    	cmp    edx,DWORD PTR [ecx+0x40c]
10004470:	7d 22                	jge    10004494 <NIDesktop::handleMouse(int, int, int, int)+0x156>
10004472:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004476:	8d 7a 01             	lea    edi,[edx+0x1]
10004479:	83 ec 0c             	sub    esp,0xc
1000447c:	2b 0d b0 8d 03 10    	sub    ecx,DWORD PTR ds:0x10038db0	1000447e: R_386_32	.bss
10004482:	57                   	push   edi
10004483:	01 c1                	add    ecx,eax
10004485:	52                   	push   edx
10004486:	8d 51 01             	lea    edx,[ecx+0x1]
10004489:	52                   	push   edx
1000448a:	51                   	push   ecx
1000448b:	53                   	push   ebx
1000448c:	e8 fc ff ff ff       	call   1000448d <NIDesktop::handleMouse(int, int, int, int)+0x14f>	1000448d: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004491:	83 c4 20             	add    esp,0x20
10004494:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10004499:	75 38                	jne    100044d3 <NIDesktop::handleMouse(int, int, int, int)+0x195>
1000449b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000449e:	01 f2                	add    edx,esi
100044a0:	2b 15 b4 8d 03 10    	sub    edx,DWORD PTR ds:0x10038db4	100044a2: R_386_32	.bss
100044a6:	78 2b                	js     100044d3 <NIDesktop::handleMouse(int, int, int, int)+0x195>
100044a8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
100044ab:	3b 91 0c 04 00 00    	cmp    edx,DWORD PTR [ecx+0x40c]
100044b1:	7d 20                	jge    100044d3 <NIDesktop::handleMouse(int, int, int, int)+0x195>
100044b3:	8b b9 08 04 00 00    	mov    edi,DWORD PTR [ecx+0x408]
100044b9:	8b 07                	mov    eax,DWORD PTR [edi]
100044bb:	6a 00                	push   0x0
100044bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100044c1:	03 4b 0c             	add    ecx,DWORD PTR [ebx+0xc]
100044c4:	2b 0d b0 8d 03 10    	sub    ecx,DWORD PTR ds:0x10038db0	100044c6: R_386_32	.bss
100044ca:	51                   	push   ecx
100044cb:	52                   	push   edx
100044cc:	57                   	push   edi
100044cd:	ff 50 24             	call   DWORD PTR [eax+0x24]
100044d0:	83 c4 10             	add    esp,0x10
100044d3:	46                   	inc    esi
100044d4:	e9 58 ff ff ff       	jmp    10004431 <NIDesktop::handleMouse(int, int, int, int)+0xf3>
100044d9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
100044dd:	e9 31 ff ff ff       	jmp    10004413 <NIDesktop::handleMouse(int, int, int, int)+0xd5>
100044e2:	8b 0d b4 8d 03 10    	mov    ecx,DWORD PTR ds:0x10038db4	100044e4: R_386_32	.bss
100044e8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
100044eb:	29 ce                	sub    esi,ecx
100044ed:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
100044f2:	0f 85 a5 06 00 00    	jne    10004b9d <NIDesktop::handleMouse(int, int, int, int)+0x85f>
100044f8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
100044fc:	85 f6                	test   esi,esi
100044fe:	79 08                	jns    10004508 <NIDesktop::handleMouse(int, int, int, int)+0x1ca>
10004500:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
10004508:	8b ba 6c 01 00 00    	mov    edi,DWORD PTR [edx+0x16c]
1000450e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004511:	01 fe                	add    esi,edi
10004513:	8b 92 0c 04 00 00    	mov    edx,DWORD PTR [edx+0x40c]
10004519:	39 d6                	cmp    esi,edx
1000451b:	7d 06                	jge    10004523 <NIDesktop::handleMouse(int, int, int, int)+0x1e5>
1000451d:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
10004521:	eb 0c                	jmp    1000452f <NIDesktop::handleMouse(int, int, int, int)+0x1f1>
10004523:	89 d6                	mov    esi,edx
10004525:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
10004529:	0f 88 c8 00 00 00    	js     100045f7 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
1000452f:	85 f6                	test   esi,esi
10004531:	0f 84 c0 00 00 00    	je     100045f7 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
10004537:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000453b:	29 c8                	sub    eax,ecx
1000453d:	89 c1                	mov    ecx,eax
1000453f:	79 02                	jns    10004543 <NIDesktop::handleMouse(int, int, int, int)+0x205>
10004541:	31 c0                	xor    eax,eax
10004543:	01 cf                	add    edi,ecx
10004545:	39 fa                	cmp    edx,edi
10004547:	7e 04                	jle    1000454d <NIDesktop::handleMouse(int, int, int, int)+0x20f>
10004549:	29 c7                	sub    edi,eax
1000454b:	eb 08                	jmp    10004555 <NIDesktop::handleMouse(int, int, int, int)+0x217>
1000454d:	89 d7                	mov    edi,edx
1000454f:	29 c7                	sub    edi,eax
10004551:	79 02                	jns    10004555 <NIDesktop::handleMouse(int, int, int, int)+0x217>
10004553:	31 ff                	xor    edi,edi
10004555:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10004559:	01 c7                	add    edi,eax
1000455b:	83 ec 0c             	sub    esp,0xc
1000455e:	2b 15 b0 8d 03 10    	sub    edx,DWORD PTR ds:0x10038db0	10004560: R_386_32	.bss
10004564:	57                   	push   edi
10004565:	8d 4a 01             	lea    ecx,[edx+0x1]
10004568:	50                   	push   eax
10004569:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000456d:	51                   	push   ecx
1000456e:	52                   	push   edx
1000456f:	53                   	push   ebx
10004570:	e8 fc ff ff ff       	call   10004571 <NIDesktop::handleMouse(int, int, int, int)+0x233>	10004571: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004575:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
10004579:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000457b: R_386_32	movingWin
1000457f:	83 c4 14             	add    esp,0x14
10004582:	2b 15 b0 8d 03 10    	sub    edx,DWORD PTR ds:0x10038db0	10004584: R_386_32	.bss
10004588:	03 91 70 01 00 00    	add    edx,DWORD PTR [ecx+0x170]
1000458e:	57                   	push   edi
1000458f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004593:	50                   	push   eax
10004594:	52                   	push   edx
10004595:	4a                   	dec    edx
10004596:	52                   	push   edx
10004597:	53                   	push   ebx
10004598:	e8 fc ff ff ff       	call   10004599 <NIDesktop::handleMouse(int, int, int, int)+0x25b>	10004599: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000459d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100045a0:	83 c4 18             	add    esp,0x18
100045a3:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
100045a9:	8b 39                	mov    edi,DWORD PTR [ecx]
100045ab:	6a 00                	push   0x0
100045ad:	6a 01                	push   0x1
100045af:	56                   	push   esi
100045b0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100045b3:	2b 15 b0 8d 03 10    	sub    edx,DWORD PTR ds:0x10038db0	100045b5: R_386_32	.bss
100045b9:	52                   	push   edx
100045ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100045be:	51                   	push   ecx
100045bf:	ff 57 28             	call   DWORD PTR [edi+0x28]
100045c2:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100045c5:	83 c4 18             	add    esp,0x18
100045c8:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
100045ce:	8b 39                	mov    edi,DWORD PTR [ecx]
100045d0:	6a 00                	push   0x0
100045d2:	6a 01                	push   0x1
100045d4:	56                   	push   esi
100045d5:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	100045d7: R_386_32	movingWin
100045db:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100045de:	2b 15 b0 8d 03 10    	sub    edx,DWORD PTR ds:0x10038db0	100045e0: R_386_32	.bss
100045e4:	03 96 70 01 00 00    	add    edx,DWORD PTR [esi+0x170]
100045ea:	4a                   	dec    edx
100045eb:	52                   	push   edx
100045ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100045f0:	51                   	push   ecx
100045f1:	ff 57 28             	call   DWORD PTR [edi+0x28]
100045f4:	83 c4 20             	add    esp,0x20
100045f7:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100045f9: R_386_32	movingWin
100045fd:	85 c9                	test   ecx,ecx
100045ff:	0f 84 46 02 00 00    	je     1000484b <NIDesktop::handleMouse(int, int, int, int)+0x50d>
10004605:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10004607: R_386_32	movingType
1000460b:	8d 56 fe             	lea    edx,[esi-0x2]
1000460e:	83 fa 02             	cmp    edx,0x2
10004611:	0f 87 34 02 00 00    	ja     1000484b <NIDesktop::handleMouse(int, int, int, int)+0x50d>
10004617:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
1000461c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
10004621:	75 0c                	jne    1000462f <NIDesktop::handleMouse(int, int, int, int)+0x2f1>
10004623:	a0 b8 8d 03 10       	mov    al,ds:0x10038db8	10004624: R_386_32	.bss
10004628:	83 e0 01             	and    eax,0x1
1000462b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
1000462f:	8b 91 6c 01 00 00    	mov    edx,DWORD PTR [ecx+0x16c]
10004635:	a1 b4 8d 03 10       	mov    eax,ds:0x10038db4	10004636: R_386_32	.bss
1000463a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
1000463e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
10004644:	01 d7                	add    edi,edx
10004646:	29 c7                	sub    edi,eax
10004648:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
1000464c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10004650:	01 cf                	add    edi,ecx
10004652:	2b 3d b0 8d 03 10    	sub    edi,DWORD PTR ds:0x10038db0	10004654: R_386_32	.bss
10004658:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
1000465c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
1000465f:	01 d7                	add    edi,edx
10004661:	29 c7                	sub    edi,eax
10004663:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10004667:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
1000466a:	01 cf                	add    edi,ecx
1000466c:	2b 3d b0 8d 03 10    	sub    edi,DWORD PTR ds:0x10038db0	1000466e: R_386_32	.bss
10004672:	83 fe 03             	cmp    esi,0x3
10004675:	74 0d                	je     10004684 <NIDesktop::handleMouse(int, int, int, int)+0x346>
10004677:	83 fe 04             	cmp    esi,0x4
1000467a:	75 10                	jne    1000468c <NIDesktop::handleMouse(int, int, int, int)+0x34e>
1000467c:	89 cf                	mov    edi,ecx
1000467e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10004682:	eb 08                	jmp    1000468c <NIDesktop::handleMouse(int, int, int, int)+0x34e>
10004684:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10004688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
1000468c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004690:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10004694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10004698:	7d 08                	jge    100046a2 <NIDesktop::handleMouse(int, int, int, int)+0x364>
1000469a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000469e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100046a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100046a6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100046aa:	39 f8                	cmp    eax,edi
100046ac:	7d 04                	jge    100046b2 <NIDesktop::handleMouse(int, int, int, int)+0x374>
100046ae:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
100046b2:	b8 01 00 00 00       	mov    eax,0x1
100046b7:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
100046bb:	0f 8d c9 00 00 00    	jge    1000478a <NIDesktop::handleMouse(int, int, int, int)+0x44c>
100046c1:	be 01 00 00 00       	mov    esi,0x1
100046c6:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
100046ca:	0f 8d b4 00 00 00    	jge    10004784 <NIDesktop::handleMouse(int, int, int, int)+0x446>
100046d0:	8d 14 30             	lea    edx,[eax+esi*1]
100046d3:	89 c1                	mov    ecx,eax
100046d5:	83 e2 1f             	and    edx,0x1f
100046d8:	83 e1 03             	and    ecx,0x3
100046db:	09 ca                	or     edx,ecx
100046dd:	0f 85 9b 00 00 00    	jne    1000477e <NIDesktop::handleMouse(int, int, int, int)+0x440>
100046e3:	83 ec 0c             	sub    esp,0xc
100046e6:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100046e8: R_386_32	movingWin
100046ec:	8b 8a 64 01 00 00    	mov    ecx,DWORD PTR [edx+0x164]
100046f2:	8b 92 68 01 00 00    	mov    edx,DWORD PTR [edx+0x168]
100046f8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
100046fc:	8d 54 31 01          	lea    edx,[ecx+esi*1+0x1]
10004700:	01 f1                	add    ecx,esi
10004702:	52                   	push   edx
10004703:	51                   	push   ecx
10004704:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
10004708:	8d 4c 01 01          	lea    ecx,[ecx+eax*1+0x1]
1000470c:	51                   	push   ecx
1000470d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10004711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10004715:	01 c2                	add    edx,eax
10004717:	52                   	push   edx
10004718:	53                   	push   ebx
10004719:	e8 fc ff ff ff       	call   1000471a <NIDesktop::handleMouse(int, int, int, int)+0x3dc>	1000471a: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000471e:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10004722:	83 c4 20             	add    esp,0x20
10004725:	83 f1 01             	xor    ecx,0x1
10004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000472c:	39 c7                	cmp    edi,eax
1000472e:	0f 9f c2             	setg   dl
10004731:	84 d1                	test   cl,dl
10004733:	74 49                	je     1000477e <NIDesktop::handleMouse(int, int, int, int)+0x440>
10004735:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
10004739:	7d 43                	jge    1000477e <NIDesktop::handleMouse(int, int, int, int)+0x440>
1000473b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000473e:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10004744:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004746: R_386_32	movingWin
1000474a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000474e:	8b 09                	mov    ecx,DWORD PTR [ecx]
10004750:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
10004754:	6a 00                	push   0x0
10004756:	89 c1                	mov    ecx,eax
10004758:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000475c:	03 8a 68 01 00 00    	add    ecx,DWORD PTR [edx+0x168]
10004762:	51                   	push   ecx
10004763:	8b 8a 64 01 00 00    	mov    ecx,DWORD PTR [edx+0x164]
10004769:	01 f1                	add    ecx,esi
1000476b:	51                   	push   ecx
1000476c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004770:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10004774:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004777:	83 c4 10             	add    esp,0x10
1000477a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000477e:	46                   	inc    esi
1000477f:	e9 42 ff ff ff       	jmp    100046c6 <NIDesktop::handleMouse(int, int, int, int)+0x388>
10004784:	40                   	inc    eax
10004785:	e9 2d ff ff ff       	jmp    100046b7 <NIDesktop::handleMouse(int, int, int, int)+0x379>
1000478a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000478b: R_386_32	movingWin
1000478f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10004794:	0f 85 72 03 00 00    	jne    10004b0c <NIDesktop::handleMouse(int, int, int, int)+0x7ce>
1000479a:	8b 88 64 01 00 00    	mov    ecx,DWORD PTR [eax+0x164]
100047a0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
100047a6:	83 ec 0c             	sub    esp,0xc
100047a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100047ad:	8d 34 01             	lea    esi,[ecx+eax*1]
100047b0:	56                   	push   esi
100047b1:	51                   	push   ecx
100047b2:	8d 4a 01             	lea    ecx,[edx+0x1]
100047b5:	51                   	push   ecx
100047b6:	52                   	push   edx
100047b7:	53                   	push   ebx
100047b8:	e8 fc ff ff ff       	call   100047b9 <NIDesktop::handleMouse(int, int, int, int)+0x47b>	100047b9: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100047bd:	83 c4 18             	add    esp,0x18
100047c0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100047c3:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100047c5: R_386_32	movingWin
100047c9:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
100047cf:	8b 32                	mov    esi,DWORD PTR [edx]
100047d1:	6a 00                	push   0x0
100047d3:	6a 01                	push   0x1
100047d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100047d9:	ff b1 68 01 00 00    	push   DWORD PTR [ecx+0x168]
100047df:	ff b1 64 01 00 00    	push   DWORD PTR [ecx+0x164]
100047e5:	52                   	push   edx
100047e6:	ff 56 28             	call   DWORD PTR [esi+0x28]
100047e9:	83 c4 14             	add    esp,0x14
100047ec:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100047ee: R_386_32	movingWin
100047f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100047f6:	8b 8a 68 01 00 00    	mov    ecx,DWORD PTR [edx+0x168]
100047fc:	8b b2 64 01 00 00    	mov    esi,DWORD PTR [edx+0x164]
10004802:	8d 14 06             	lea    edx,[esi+eax*1]
10004805:	52                   	push   edx
10004806:	56                   	push   esi
10004807:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
1000480b:	8d 54 01 01          	lea    edx,[ecx+eax*1+0x1]
1000480f:	52                   	push   edx
10004810:	03 4c 24 28          	add    ecx,DWORD PTR [esp+0x28]
10004814:	51                   	push   ecx
10004815:	53                   	push   ebx
10004816:	e8 fc ff ff ff       	call   10004817 <NIDesktop::handleMouse(int, int, int, int)+0x4d9>	10004817: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000481b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000481e:	83 c4 18             	add    esp,0x18
10004821:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
10004827:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004829: R_386_32	movingWin
1000482d:	8b 32                	mov    esi,DWORD PTR [edx]
1000482f:	6a 00                	push   0x0
10004831:	6a 01                	push   0x1
10004833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004837:	03 b9 68 01 00 00    	add    edi,DWORD PTR [ecx+0x168]
1000483d:	57                   	push   edi
1000483e:	ff b1 64 01 00 00    	push   DWORD PTR [ecx+0x164]
10004844:	52                   	push   edx
10004845:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004848:	83 c4 20             	add    esp,0x20
1000484b:	85 ed                	test   ebp,ebp
1000484d:	0f 84 82 02 00 00    	je     10004ad5 <NIDesktop::handleMouse(int, int, int, int)+0x797>
10004853:	f6 44 24 7c 01       	test   BYTE PTR [esp+0x7c],0x1
10004858:	0f 84 77 02 00 00    	je     10004ad5 <NIDesktop::handleMouse(int, int, int, int)+0x797>
1000485e:	8b 15 b8 8d 03 10    	mov    edx,DWORD PTR ds:0x10038db8	10004860: R_386_32	.bss
10004864:	83 e2 01             	and    edx,0x1
10004867:	0f 85 34 01 00 00    	jne    100049a1 <NIDesktop::handleMouse(int, int, int, int)+0x663>
1000486d:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	1000486f: R_386_32	milliTenthsSinceBoot
10004873:	8b 3d 04 00 00 00    	mov    edi,DWORD PTR ds:0x4	10004875: R_386_32	milliTenthsSinceBoot
10004879:	2b 35 a8 8d 03 10    	sub    esi,DWORD PTR ds:0x10038da8	1000487b: R_386_32	.bss
1000487f:	b9 b7 0b 00 00       	mov    ecx,0xbb7
10004884:	1b 3d ac 8d 03 10    	sbb    edi,DWORD PTR ds:0x10038dac	10004886: R_386_32	.bss
1000488a:	39 f1                	cmp    ecx,esi
1000488c:	19 fa                	sbb    edx,edi
1000488e:	0f 82 de 00 00 00    	jb     10004972 <NIDesktop::handleMouse(int, int, int, int)+0x634>
10004894:	8b 8d 68 01 00 00    	mov    ecx,DWORD PTR [ebp+0x168]
1000489a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
1000489d:	29 ca                	sub    edx,ecx
1000489f:	83 fa 18             	cmp    edx,0x18
100048a2:	0f 8f ca 00 00 00    	jg     10004972 <NIDesktop::handleMouse(int, int, int, int)+0x634>
100048a8:	f6 85 88 01 00 00 01 	test   BYTE PTR [ebp+0x188],0x1
100048af:	0f 85 bd 00 00 00    	jne    10004972 <NIDesktop::handleMouse(int, int, int, int)+0x634>
100048b5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
100048bc:	74 3e                	je     100048fc <NIDesktop::handleMouse(int, int, int, int)+0x5be>
100048be:	8b 95 78 01 00 00    	mov    edx,DWORD PTR [ebp+0x178]
100048c4:	89 95 64 01 00 00    	mov    DWORD PTR [ebp+0x164],edx
100048ca:	8b 95 7c 01 00 00    	mov    edx,DWORD PTR [ebp+0x17c]
100048d0:	89 95 68 01 00 00    	mov    DWORD PTR [ebp+0x168],edx
100048d6:	8b 95 80 01 00 00    	mov    edx,DWORD PTR [ebp+0x180]
100048dc:	89 95 6c 01 00 00    	mov    DWORD PTR [ebp+0x16c],edx
100048e2:	8b 95 84 01 00 00    	mov    edx,DWORD PTR [ebp+0x184]
100048e8:	89 95 70 01 00 00    	mov    DWORD PTR [ebp+0x170],edx
100048ee:	50                   	push   eax
100048ef:	50                   	push   eax
100048f0:	55                   	push   ebp
100048f1:	53                   	push   ebx
100048f2:	e8 fc ff ff ff       	call   100048f3 <NIDesktop::handleMouse(int, int, int, int)+0x5b5>	100048f3: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
100048f7:	83 c4 10             	add    esp,0x10
100048fa:	eb 5c                	jmp    10004958 <NIDesktop::handleMouse(int, int, int, int)+0x61a>
100048fc:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
10004902:	c7 85 68 01 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x168],0x0
1000490c:	8b 95 64 01 00 00    	mov    edx,DWORD PTR [ebp+0x164]
10004912:	c7 85 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x164],0x0
1000491c:	89 95 78 01 00 00    	mov    DWORD PTR [ebp+0x178],edx
10004922:	8b 95 6c 01 00 00    	mov    edx,DWORD PTR [ebp+0x16c]
10004928:	89 95 80 01 00 00    	mov    DWORD PTR [ebp+0x180],edx
1000492e:	8b 95 70 01 00 00    	mov    edx,DWORD PTR [ebp+0x170]
10004934:	89 95 84 01 00 00    	mov    DWORD PTR [ebp+0x184],edx
1000493a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000493d:	8b 92 0c 04 00 00    	mov    edx,DWORD PTR [edx+0x40c]
10004943:	89 95 6c 01 00 00    	mov    DWORD PTR [ebp+0x16c],edx
10004949:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000494c:	8b 92 10 04 00 00    	mov    edx,DWORD PTR [edx+0x410]
10004952:	89 95 70 01 00 00    	mov    DWORD PTR [ebp+0x170],edx
10004958:	83 ec 0c             	sub    esp,0xc
1000495b:	80 b5 74 01 00 00 01 	xor    BYTE PTR [ebp+0x174],0x1
10004962:	55                   	push   ebp
10004963:	e8 fc ff ff ff       	call   10004964 <NIDesktop::handleMouse(int, int, int, int)+0x626>	10004964: R_386_PC32	NIWindow::rerender()
10004968:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000496b:	e8 fc ff ff ff       	call   1000496c <NIDesktop::handleMouse(int, int, int, int)+0x62e>	1000496c: R_386_PC32	NIDesktop::completeRefresh()
10004970:	eb 11                	jmp    10004983 <NIDesktop::handleMouse(int, int, int, int)+0x645>
10004972:	8b 13                	mov    edx,DWORD PTR [ebx]
10004974:	8b 12                	mov    edx,DWORD PTR [edx]
10004976:	39 2a                	cmp    DWORD PTR [edx],ebp
10004978:	74 0c                	je     10004986 <NIDesktop::handleMouse(int, int, int, int)+0x648>
1000497a:	50                   	push   eax
1000497b:	50                   	push   eax
1000497c:	55                   	push   ebp
1000497d:	53                   	push   ebx
1000497e:	e8 fc ff ff ff       	call   1000497f <NIDesktop::handleMouse(int, int, int, int)+0x641>	1000497f: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
10004983:	83 c4 10             	add    esp,0x10
10004986:	a1 00 00 00 00       	mov    eax,ds:0x0	10004987: R_386_32	milliTenthsSinceBoot
1000498b:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	1000498d: R_386_32	milliTenthsSinceBoot
10004991:	a3 a8 8d 03 10       	mov    ds:0x10038da8,eax	10004992: R_386_32	.bss
10004996:	89 15 ac 8d 03 10    	mov    DWORD PTR ds:0x10038dac,edx	10004998: R_386_32	.bss
1000499c:	e9 34 01 00 00       	jmp    10004ad5 <NIDesktop::handleMouse(int, int, int, int)+0x797>
100049a1:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100049a3: R_386_32	movingWin
100049a8:	0f 85 27 01 00 00    	jne    10004ad5 <NIDesktop::handleMouse(int, int, int, int)+0x797>
100049ae:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
100049b1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
100049b7:	89 ce                	mov    esi,ecx
100049b9:	8d 50 f2             	lea    edx,[eax-0xe]
100049bc:	2b b5 68 01 00 00    	sub    esi,DWORD PTR [ebp+0x168]
100049c2:	39 f2                	cmp    edx,esi
100049c4:	7f 44                	jg     10004a0a <NIDesktop::handleMouse(int, int, int, int)+0x6cc>
100049c6:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
100049cd:	75 3b                	jne    10004a0a <NIDesktop::handleMouse(int, int, int, int)+0x6cc>
100049cf:	f6 85 88 01 00 00 01 	test   BYTE PTR [ebp+0x188],0x1
100049d6:	75 32                	jne    10004a0a <NIDesktop::handleMouse(int, int, int, int)+0x6cc>
100049d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
100049db:	c7 43 10 00 04 00 00 	mov    DWORD PTR [ebx+0x10],0x400
100049e2:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	100049e4: R_386_32	movingWin
100049e8:	50                   	push   eax
100049e9:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	100049eb: R_386_32	movingType
100049f3:	50                   	push   eax
100049f4:	89 15 b4 8d 03 10    	mov    DWORD PTR ds:0x10038db4,edx	100049f6: R_386_32	.bss
100049fa:	55                   	push   ebp
100049fb:	89 0d b0 8d 03 10    	mov    DWORD PTR ds:0x10038db0,ecx	100049fd: R_386_32	.bss
10004a01:	53                   	push   ebx
10004a02:	e8 fc ff ff ff       	call   10004a03 <NIDesktop::handleMouse(int, int, int, int)+0x6c5>	10004a03: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004a07:	83 c4 10             	add    esp,0x10
10004a0a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10004a0d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
10004a13:	89 ce                	mov    esi,ecx
10004a15:	8d 50 f2             	lea    edx,[eax-0xe]
10004a18:	2b b5 64 01 00 00    	sub    esi,DWORD PTR [ebp+0x164]
10004a1e:	39 f2                	cmp    edx,esi
10004a20:	7f 62                	jg     10004a84 <NIDesktop::handleMouse(int, int, int, int)+0x746>
10004a22:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
10004a29:	75 59                	jne    10004a84 <NIDesktop::handleMouse(int, int, int, int)+0x746>
10004a2b:	f6 85 88 01 00 00 01 	test   BYTE PTR [ebp+0x188],0x1
10004a32:	75 50                	jne    10004a84 <NIDesktop::handleMouse(int, int, int, int)+0x746>
10004a34:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004a36: R_386_32	movingWin
10004a3b:	75 34                	jne    10004a71 <NIDesktop::handleMouse(int, int, int, int)+0x733>
10004a3d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004a40:	c7 43 10 00 05 00 00 	mov    DWORD PTR [ebx+0x10],0x500
10004a47:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10004a49: R_386_32	movingWin
10004a4d:	50                   	push   eax
10004a4e:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	10004a50: R_386_32	movingType
10004a58:	50                   	push   eax
10004a59:	89 0d b4 8d 03 10    	mov    DWORD PTR ds:0x10038db4,ecx	10004a5b: R_386_32	.bss
10004a5f:	55                   	push   ebp
10004a60:	89 15 b0 8d 03 10    	mov    DWORD PTR ds:0x10038db0,edx	10004a62: R_386_32	.bss
10004a66:	53                   	push   ebx
10004a67:	e8 fc ff ff ff       	call   10004a68 <NIDesktop::handleMouse(int, int, int, int)+0x72a>	10004a68: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004a6c:	83 c4 10             	add    esp,0x10
10004a6f:	eb 13                	jmp    10004a84 <NIDesktop::handleMouse(int, int, int, int)+0x746>
10004a71:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	10004a73: R_386_32	movingType
10004a7b:	c7 43 10 00 03 00 00 	mov    DWORD PTR [ebx+0x10],0x300
10004a82:	eb 51                	jmp    10004ad5 <NIDesktop::handleMouse(int, int, int, int)+0x797>
10004a84:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004a86: R_386_32	movingWin
10004a8b:	75 48                	jne    10004ad5 <NIDesktop::handleMouse(int, int, int, int)+0x797>
10004a8d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004a90:	2b 95 68 01 00 00    	sub    edx,DWORD PTR [ebp+0x168]
10004a96:	83 fa 18             	cmp    edx,0x18
10004a99:	7f 3a                	jg     10004ad5 <NIDesktop::handleMouse(int, int, int, int)+0x797>
10004a9b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
10004aa2:	75 31                	jne    10004ad5 <NIDesktop::handleMouse(int, int, int, int)+0x797>
10004aa4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10004aa7:	2b 8d 64 01 00 00    	sub    ecx,DWORD PTR [ebp+0x164]
10004aad:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10004aaf: R_386_32	movingWin
10004ab3:	50                   	push   eax
10004ab4:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10004ab6: R_386_32	movingType
10004abe:	50                   	push   eax
10004abf:	89 0d b4 8d 03 10    	mov    DWORD PTR ds:0x10038db4,ecx	10004ac1: R_386_32	.bss
10004ac5:	55                   	push   ebp
10004ac6:	89 15 b0 8d 03 10    	mov    DWORD PTR ds:0x10038db0,edx	10004ac8: R_386_32	.bss
10004acc:	53                   	push   ebx
10004acd:	e8 fc ff ff ff       	call   10004ace <NIDesktop::handleMouse(int, int, int, int)+0x790>	10004ace: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004ad2:	83 c4 10             	add    esp,0x10
10004ad5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004ad8:	83 ec 0c             	sub    esp,0xc
10004adb:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004ae1:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004ae3:	6a 00                	push   0x0
10004ae5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
10004ae8:	05 00 00 00 00       	add    eax,0x0	10004ae9: R_386_32	___mouse_data
10004aed:	50                   	push   eax
10004aee:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004af1:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004af4:	52                   	push   edx
10004af5:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10004af8:	8b 84 24 9c 00 00 00 	mov    eax,DWORD PTR [esp+0x9c]
10004aff:	a3 b8 8d 03 10       	mov    ds:0x10038db8,eax	10004b00: R_386_32	.bss
10004b04:	83 c4 7c             	add    esp,0x7c
10004b07:	5b                   	pop    ebx
10004b08:	5e                   	pop    esi
10004b09:	5f                   	pop    edi
10004b0a:	5d                   	pop    ebp
10004b0b:	c3                   	ret    
10004b0c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10004b10:	c7 44 24 40 01 00 00 80 	mov    DWORD PTR [esp+0x40],0x80000001
10004b18:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10004b1c:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004b1e: R_386_32	mouseDesktop
10004b22:	83 ec 0c             	sub    esp,0xc
10004b25:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
10004b28:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004b2a: R_386_32	movingWin
10004b32:	66 89 4c 24 50       	mov    WORD PTR [esp+0x50],cx
10004b37:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
10004b3a:	89 b0 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],esi
10004b40:	66 89 54 24 52       	mov    WORD PTR [esp+0x52],dx
10004b45:	89 b8 70 01 00 00    	mov    DWORD PTR [eax+0x170],edi
10004b4b:	50                   	push   eax
10004b4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004b50:	e8 fc ff ff ff       	call   10004b51 <NIDesktop::handleMouse(int, int, int, int)+0x813>	10004b51: R_386_PC32	NIWindow::rerender()
10004b55:	5a                   	pop    edx
10004b56:	59                   	pop    ecx
10004b57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004b5b:	50                   	push   eax
10004b5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004b60:	53                   	push   ebx
10004b61:	e8 fc ff ff ff       	call   10004b62 <NIDesktop::handleMouse(int, int, int, int)+0x824>	10004b62: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004b66:	5e                   	pop    esi
10004b67:	5f                   	pop    edi
10004b68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004b6c:	50                   	push   eax
10004b6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004b71:	53                   	push   ebx
10004b72:	e8 fc ff ff ff       	call   10004b73 <NIDesktop::handleMouse(int, int, int, int)+0x835>	10004b73: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004b77:	83 ec 0c             	sub    esp,0xc
10004b7a:	b9 05 00 00 00       	mov    ecx,0x5
10004b7f:	8d 74 24 58          	lea    esi,[esp+0x58]
10004b83:	89 e7                	mov    edi,esp
10004b85:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004b87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004b8b:	50                   	push   eax
10004b8c:	e8 fc ff ff ff       	call   10004b8d <NIDesktop::handleMouse(int, int, int, int)+0x84f>	10004b8d: R_386_PC32	NIWindow::postEvent(NiEvent)
10004b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10004b98:	e9 ab fc ff ff       	jmp    10004848 <NIDesktop::handleMouse(int, int, int, int)+0x50a>
10004b9d:	89 b2 64 01 00 00    	mov    DWORD PTR [edx+0x164],esi
10004ba3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
10004ba6:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004ba8: R_386_32	movingWin
10004bb0:	2b 0d b0 8d 03 10    	sub    ecx,DWORD PTR ds:0x10038db0	10004bb2: R_386_32	.bss
10004bb6:	89 8a 68 01 00 00    	mov    DWORD PTR [edx+0x168],ecx
10004bbc:	50                   	push   eax
10004bbd:	50                   	push   eax
10004bbe:	52                   	push   edx
10004bbf:	53                   	push   ebx
10004bc0:	e8 fc ff ff ff       	call   10004bc1 <NIDesktop::handleMouse(int, int, int, int)+0x883>	10004bc1: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004bc5:	83 c4 10             	add    esp,0x10
10004bc8:	e9 2a fa ff ff       	jmp    100045f7 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>

10004bcd <NiHandleMouse(int, int, int, int)>:
10004bcd:	83 ec 18             	sub    esp,0x18
10004bd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004bd4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004bd8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004bdc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004be0:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004be2: R_386_32	mouseDesktop
10004be6:	e8 fc ff ff ff       	call   10004be7 <NiHandleMouse(int, int, int, int)+0x1a>	10004be7: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
10004beb:	83 c4 2c             	add    esp,0x2c
10004bee:	c3                   	ret    

10004bef <drawVGAChar(int, int, int)>:
10004bef:	55                   	push   ebp
10004bf0:	57                   	push   edi
10004bf1:	56                   	push   esi
10004bf2:	53                   	push   ebx
10004bf3:	31 db                	xor    ebx,ebx
10004bf5:	83 ec 1c             	sub    esp,0x1c
10004bf8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10004bfc:	c1 e0 04             	shl    eax,0x4
10004bff:	89 04 24             	mov    DWORD PTR [esp],eax
10004c02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10004c06:	c1 e0 04             	shl    eax,0x4
10004c09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10004c0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004c11:	c1 e0 03             	shl    eax,0x3
10004c14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004c18:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004c1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10004c1f:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	10004c22: R_386_32	cp
10004c26:	8d 3c 19             	lea    edi,[ecx+ebx*1]
10004c29:	31 f6                	xor    esi,esi
10004c2b:	84 c0                	test   al,al
10004c2d:	79 22                	jns    10004c51 <drawVGAChar(int, int, int)+0x62>
10004c2f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10004c33:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004c35: R_386_32	screen
10004c39:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004c3b:	6a 00                	push   0x0
10004c3d:	57                   	push   edi
10004c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004c42:	8d 2c 06             	lea    ebp,[esi+eax*1]
10004c45:	55                   	push   ebp
10004c46:	52                   	push   edx
10004c47:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10004c4a:	83 c4 10             	add    esp,0x10
10004c4d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
10004c51:	d1 e0                	shl    eax,1
10004c53:	46                   	inc    esi
10004c54:	83 fe 08             	cmp    esi,0x8
10004c57:	75 d2                	jne    10004c2b <drawVGAChar(int, int, int)+0x3c>
10004c59:	43                   	inc    ebx
10004c5a:	83 fb 10             	cmp    ebx,0x10
10004c5d:	75 b9                	jne    10004c18 <drawVGAChar(int, int, int)+0x29>
10004c5f:	83 c4 1c             	add    esp,0x1c
10004c62:	5b                   	pop    ebx
10004c63:	5e                   	pop    esi
10004c64:	5f                   	pop    edi
10004c65:	5d                   	pop    ebp
10004c66:	c3                   	ret    

10004c67 <NiDisplayRAM(void*)>:
10004c67:	56                   	push   esi
10004c68:	53                   	push   ebx
10004c69:	83 ec 14             	sub    esp,0x14
10004c6c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c6d: R_386_32	irqDisableCounter
10004c71:	48                   	dec    eax
10004c72:	a3 00 00 00 00       	mov    ds:0x0,eax	10004c73: R_386_32	irqDisableCounter
10004c77:	75 01                	jne    10004c7a <NiDisplayRAM(void*)+0x13>
10004c79:	fb                   	sti    
10004c7a:	6b 05 00 00 00 00 64 	imul   eax,DWORD PTR ds:0x0,0x64	10004c7c: R_386_32	Phys::usedPages
10004c81:	31 db                	xor    ebx,ebx
10004c83:	99                   	cdq    
10004c84:	f7 3d 00 00 00 00    	idiv   DWORD PTR ds:0x0	10004c86: R_386_32	Phys::usablePages
10004c8a:	31 f6                	xor    esi,esi
10004c8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004c90:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004c92: R_386_32	screen
10004c96:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004c98:	68 ff ff ff 00       	push   0xffffff
10004c9d:	53                   	push   ebx
10004c9e:	56                   	push   esi
10004c9f:	46                   	inc    esi
10004ca0:	52                   	push   edx
10004ca1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10004ca4:	83 c4 10             	add    esp,0x10
10004ca7:	83 fe 60             	cmp    esi,0x60
10004caa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004cae:	75 dc                	jne    10004c8c <NiDisplayRAM(void*)+0x25>
10004cb0:	43                   	inc    ebx
10004cb1:	83 fb 10             	cmp    ebx,0x10
10004cb4:	75 d4                	jne    10004c8a <NiDisplayRAM(void*)+0x23>
10004cb6:	b9 0a 00 00 00       	mov    ecx,0xa
10004cbb:	52                   	push   edx
10004cbc:	99                   	cdq    
10004cbd:	f7 f9                	idiv   ecx
10004cbf:	89 d3                	mov    ebx,edx
10004cc1:	83 c0 30             	add    eax,0x30
10004cc4:	50                   	push   eax
10004cc5:	6a 00                	push   0x0
10004cc7:	6a 00                	push   0x0
10004cc9:	e8 fc ff ff ff       	call   10004cca <NiDisplayRAM(void*)+0x63>	10004cca: R_386_PC32	drawVGAChar(int, int, int)
10004cce:	8d 43 30             	lea    eax,[ebx+0x30]
10004cd1:	83 c4 0c             	add    esp,0xc
10004cd4:	50                   	push   eax
10004cd5:	6a 00                	push   0x0
10004cd7:	6a 01                	push   0x1
10004cd9:	e8 fc ff ff ff       	call   10004cda <NiDisplayRAM(void*)+0x73>	10004cda: R_386_PC32	drawVGAChar(int, int, int)
10004cde:	83 c4 0c             	add    esp,0xc
10004ce1:	6a 25                	push   0x25
10004ce3:	6a 00                	push   0x0
10004ce5:	6a 02                	push   0x2
10004ce7:	e8 fc ff ff ff       	call   10004ce8 <NiDisplayRAM(void*)+0x81>	10004ce8: R_386_PC32	drawVGAChar(int, int, int)
10004cec:	83 c4 0c             	add    esp,0xc
10004cef:	6a 20                	push   0x20
10004cf1:	6a 00                	push   0x0
10004cf3:	6a 03                	push   0x3
10004cf5:	e8 fc ff ff ff       	call   10004cf6 <NiDisplayRAM(void*)+0x8f>	10004cf6: R_386_PC32	drawVGAChar(int, int, int)
10004cfa:	83 c4 0c             	add    esp,0xc
10004cfd:	6a 52                	push   0x52
10004cff:	6a 00                	push   0x0
10004d01:	6a 04                	push   0x4
10004d03:	e8 fc ff ff ff       	call   10004d04 <NiDisplayRAM(void*)+0x9d>	10004d04: R_386_PC32	drawVGAChar(int, int, int)
10004d08:	83 c4 0c             	add    esp,0xc
10004d0b:	6a 41                	push   0x41
10004d0d:	6a 00                	push   0x0
10004d0f:	6a 05                	push   0x5
10004d11:	e8 fc ff ff ff       	call   10004d12 <NiDisplayRAM(void*)+0xab>	10004d12: R_386_PC32	drawVGAChar(int, int, int)
10004d16:	83 c4 0c             	add    esp,0xc
10004d19:	6a 4d                	push   0x4d
10004d1b:	6a 00                	push   0x0
10004d1d:	6a 06                	push   0x6
10004d1f:	e8 fc ff ff ff       	call   10004d20 <NiDisplayRAM(void*)+0xb9>	10004d20: R_386_PC32	drawVGAChar(int, int, int)
10004d24:	83 c4 0c             	add    esp,0xc
10004d27:	6a 20                	push   0x20
10004d29:	6a 00                	push   0x0
10004d2b:	6a 07                	push   0x7
10004d2d:	e8 fc ff ff ff       	call   10004d2e <NiDisplayRAM(void*)+0xc7>	10004d2e: R_386_PC32	drawVGAChar(int, int, int)
10004d32:	83 c4 0c             	add    esp,0xc
10004d35:	6a 75                	push   0x75
10004d37:	6a 00                	push   0x0
10004d39:	6a 08                	push   0x8
10004d3b:	e8 fc ff ff ff       	call   10004d3c <NiDisplayRAM(void*)+0xd5>	10004d3c: R_386_PC32	drawVGAChar(int, int, int)
10004d40:	83 c4 0c             	add    esp,0xc
10004d43:	6a 73                	push   0x73
10004d45:	6a 00                	push   0x0
10004d47:	6a 09                	push   0x9
10004d49:	e8 fc ff ff ff       	call   10004d4a <NiDisplayRAM(void*)+0xe3>	10004d4a: R_386_PC32	drawVGAChar(int, int, int)
10004d4e:	83 c4 0c             	add    esp,0xc
10004d51:	6a 65                	push   0x65
10004d53:	6a 00                	push   0x0
10004d55:	6a 0a                	push   0xa
10004d57:	e8 fc ff ff ff       	call   10004d58 <NiDisplayRAM(void*)+0xf1>	10004d58: R_386_PC32	drawVGAChar(int, int, int)
10004d5c:	83 c4 0c             	add    esp,0xc
10004d5f:	6a 64                	push   0x64
10004d61:	6a 00                	push   0x0
10004d63:	6a 0b                	push   0xb
10004d65:	e8 fc ff ff ff       	call   10004d66 <NiDisplayRAM(void*)+0xff>	10004d66: R_386_PC32	drawVGAChar(int, int, int)
10004d6a:	c7 04 24 c4 09 00 00 	mov    DWORD PTR [esp],0x9c4
10004d71:	e8 fc ff ff ff       	call   10004d72 <NiDisplayRAM(void*)+0x10b>	10004d72: R_386_PC32	milliTenthSleep(unsigned int)
10004d76:	83 c4 10             	add    esp,0x10
10004d79:	e9 fc fe ff ff       	jmp    10004c7a <NiDisplayRAM(void*)+0x13>

10004d7e <monikaBsod(char*)>:
10004d7e:	55                   	push   ebp
10004d7f:	57                   	push   edi
10004d80:	31 ff                	xor    edi,edi
10004d82:	56                   	push   esi
10004d83:	53                   	push   ebx
10004d84:	31 db                	xor    ebx,ebx
10004d86:	83 ec 24             	sub    esp,0x24
10004d89:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d8a: R_386_32	screen
10004d8e:	8b 10                	mov    edx,DWORD PTR [eax]
10004d90:	68 ff ff ff 00       	push   0xffffff
10004d95:	50                   	push   eax
10004d96:	ff 52 40             	call   DWORD PTR [edx+0x40]
10004d99:	83 c4 10             	add    esp,0x10
10004d9c:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	10004d9e: R_386_32	justMonika
10004da2:	8d 43 01             	lea    eax,[ebx+0x1]
10004da5:	84 c9                	test   cl,cl
10004da7:	79 0e                	jns    10004db7 <monikaBsod(char*)+0x39>
10004da9:	8d 51 80             	lea    edx,[ecx-0x80]
10004dac:	83 c3 02             	add    ebx,0x2
10004daf:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	10004db1: R_386_32	justMonika
10004db5:	eb 04                	jmp    10004dbb <monikaBsod(char*)+0x3d>
10004db7:	89 c3                	mov    ebx,eax
10004db9:	b2 01                	mov    dl,0x1
10004dbb:	0f b6 c1             	movzx  eax,cl
10004dbe:	83 e1 03             	and    ecx,0x3
10004dc1:	89 c6                	mov    esi,eax
10004dc3:	6b c9 55             	imul   ecx,ecx,0x55
10004dc6:	c1 fe 05             	sar    esi,0x5
10004dc9:	c1 f8 02             	sar    eax,0x2
10004dcc:	83 e6 03             	and    esi,0x3
10004dcf:	83 e0 07             	and    eax,0x7
10004dd2:	6b f6 55             	imul   esi,esi,0x55
10004dd5:	6b c0 24             	imul   eax,eax,0x24
10004dd8:	c1 e6 10             	shl    esi,0x10
10004ddb:	c1 e0 08             	shl    eax,0x8
10004dde:	09 f0                	or     eax,esi
10004de0:	31 f6                	xor    esi,esi
10004de2:	09 c8                	or     eax,ecx
10004de4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004de8:	0f b6 c2             	movzx  eax,dl
10004deb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004def:	8d 04 37             	lea    eax,[edi+esi*1]
10004df2:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10004df6:	7f 10                	jg     10004e08 <monikaBsod(char*)+0x8a>
10004df8:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
10004dfc:	81 ff ff af 04 00    	cmp    edi,0x4afff
10004e02:	7e 98                	jle    10004d9c <monikaBsod(char*)+0x1e>
10004e04:	31 db                	xor    ebx,ebx
10004e06:	eb 25                	jmp    10004e2d <monikaBsod(char*)+0xaf>
10004e08:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004e0a: R_386_32	screen
10004e0e:	b9 80 02 00 00       	mov    ecx,0x280
10004e13:	8b 2a                	mov    ebp,DWORD PTR [edx]
10004e15:	46                   	inc    esi
10004e16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10004e1a:	99                   	cdq    
10004e1b:	f7 f9                	idiv   ecx
10004e1d:	50                   	push   eax
10004e1e:	52                   	push   edx
10004e1f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004e21: R_386_32	screen
10004e25:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10004e28:	83 c4 10             	add    esp,0x10
10004e2b:	eb c2                	jmp    10004def <monikaBsod(char*)+0x71>
10004e2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004e31:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
10004e35:	84 c0                	test   al,al
10004e37:	74 1d                	je     10004e56 <monikaBsod(char*)+0xd8>
10004e39:	b9 19 00 00 00       	mov    ecx,0x19
10004e3e:	52                   	push   edx
10004e3f:	50                   	push   eax
10004e40:	89 d8                	mov    eax,ebx
10004e42:	43                   	inc    ebx
10004e43:	99                   	cdq    
10004e44:	f7 f9                	idiv   ecx
10004e46:	83 c0 0a             	add    eax,0xa
10004e49:	42                   	inc    edx
10004e4a:	50                   	push   eax
10004e4b:	52                   	push   edx
10004e4c:	e8 fc ff ff ff       	call   10004e4d <monikaBsod(char*)+0xcf>	10004e4d: R_386_PC32	drawVGAChar(int, int, int)
10004e51:	83 c4 10             	add    esp,0x10
10004e54:	eb d7                	jmp    10004e2d <monikaBsod(char*)+0xaf>
10004e56:	f4                   	hlt    
10004e57:	eb fd                	jmp    10004e56 <monikaBsod(char*)+0xd8>

10004e59 <NiInstallSysHooks()>:
10004e59:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004e5b: R_386_32	guiPanicHandler
	10004e5f: R_386_32	monikaBsod(char*)
10004e63:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10004e65: R_386_32	systemCallHandlers
	10004e69: R_386_32	NiSystemCallHandler(regs*)
10004e6d:	c3                   	ret    

10004e6e <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
10004e6e:	56                   	push   esi
10004e6f:	53                   	push   ebx
10004e70:	83 ec 10             	sub    esp,0x10
10004e73:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10004e77:	68 a7 5a 00 10       	push   0x10005aa7	10004e78: R_386_32	.text
10004e7c:	e8 fc ff ff ff       	call   10004e7d <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	10004e7d: R_386_PC32	Dbg::kprintf(char const*, ...)
10004e81:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
10004e88:	e8 fc ff ff ff       	call   10004e89 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x1b>	10004e89: R_386_PC32	malloc
10004e8d:	89 c6                	mov    esi,eax
10004e8f:	58                   	pop    eax
10004e90:	5a                   	pop    edx
10004e91:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10004e97:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10004e9d:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10004ea3:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10004ea9:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004eab: R_386_32	ctxt
10004eaf:	56                   	push   esi
10004eb0:	e8 fc ff ff ff       	call   10004eb1 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x43>	10004eb1: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10004eb5:	83 c4 18             	add    esp,0x18
10004eb8:	56                   	push   esi
10004eb9:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004ebb: R_386_32	desktop
10004ebf:	e8 fc ff ff ff       	call   10004ec0 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x52>	10004ec0: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004ec4:	59                   	pop    ecx
10004ec5:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004ec7: R_386_32	desktop
10004ecb:	e8 fc ff ff ff       	call   10004ecc <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	10004ecc: R_386_PC32	NIDesktop::completeRefresh()
10004ed0:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10004ed6:	89 34 24             	mov    DWORD PTR [esp],esi
10004ed9:	e8 fc ff ff ff       	call   10004eda <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x6c>	10004eda: R_386_PC32	NIWindow::drawBasicWindow()
10004ede:	83 c4 14             	add    esp,0x14
10004ee1:	31 c0                	xor    eax,eax
10004ee3:	31 d2                	xor    edx,edx
10004ee5:	5b                   	pop    ebx
10004ee6:	5e                   	pop    esi
10004ee7:	c3                   	ret    

10004ee8 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004ee8:	55                   	push   ebp
10004ee9:	57                   	push   edi
10004eea:	56                   	push   esi
10004eeb:	31 f6                	xor    esi,esi
10004eed:	53                   	push   ebx
10004eee:	83 ec 28             	sub    esp,0x28
10004ef1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10004ef5:	68 c2 5a 00 10       	push   0x10005ac2	10004ef6: R_386_32	.text
10004efa:	e8 fc ff ff ff       	call   10004efb <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x13>	10004efb: R_386_PC32	Dbg::kprintf(char const*, ...)
10004eff:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10004f05:	83 c4 10             	add    esp,0x10
10004f08:	31 c0                	xor    eax,eax
10004f0a:	39 b3 70 01 00 00    	cmp    DWORD PTR [ebx+0x170],esi
10004f10:	7e 33                	jle    10004f45 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x5d>
10004f12:	31 ff                	xor    edi,edi
10004f14:	39 bb 6c 01 00 00    	cmp    DWORD PTR [ebx+0x16c],edi
10004f1a:	7e 26                	jle    10004f42 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x5a>
10004f1c:	8b 95 b8 00 00 00    	mov    edx,DWORD PTR [ebp+0xb8]
10004f22:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
10004f25:	83 fa ff             	cmp    edx,0xffffffff
10004f28:	74 14                	je     10004f3e <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x56>
10004f2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004f2e:	52                   	push   edx
10004f2f:	56                   	push   esi
10004f30:	57                   	push   edi
10004f31:	53                   	push   ebx
10004f32:	e8 fc ff ff ff       	call   10004f33 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x4b>	10004f33: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004f37:	83 c4 10             	add    esp,0x10
10004f3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004f3e:	40                   	inc    eax
10004f3f:	47                   	inc    edi
10004f40:	eb d2                	jmp    10004f14 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x2c>
10004f42:	46                   	inc    esi
10004f43:	eb c5                	jmp    10004f0a <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x22>
10004f45:	50                   	push   eax
10004f46:	50                   	push   eax
10004f47:	53                   	push   ebx
10004f48:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004f4a: R_386_32	desktop
10004f4e:	e8 fc ff ff ff       	call   10004f4f <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x67>	10004f4f: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004f53:	83 c4 2c             	add    esp,0x2c
10004f56:	31 c0                	xor    eax,eax
10004f58:	5b                   	pop    ebx
10004f59:	31 d2                	xor    edx,edx
10004f5b:	5e                   	pop    esi
10004f5c:	5f                   	pop    edi
10004f5d:	5d                   	pop    ebp
10004f5e:	c3                   	ret    

10004f5f <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004f5f:	53                   	push   ebx
10004f60:	83 ec 14             	sub    esp,0x14
10004f63:	68 e4 5a 00 10       	push   0x10005ae4	10004f64: R_386_32	.text
10004f68:	e8 fc ff ff ff       	call   10004f69 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0xa>	10004f69: R_386_PC32	Dbg::kprintf(char const*, ...)
10004f6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004f71:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10004f77:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004f7a:	e8 fc ff ff ff       	call   10004f7b <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x1c>	10004f7b: R_386_PC32	NIWindow::request()
10004f7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004f82:	e8 fc ff ff ff       	call   10004f83 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x24>	10004f83: R_386_PC32	NIWindow::drawBasicWindow()
10004f87:	31 c0                	xor    eax,eax
10004f89:	31 d2                	xor    edx,edx
10004f8b:	83 c4 18             	add    esp,0x18
10004f8e:	5b                   	pop    ebx
10004f8f:	c3                   	ret    

10004f90 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)>:
10004f90:	55                   	push   ebp
10004f91:	57                   	push   edi
10004f92:	56                   	push   esi
10004f93:	53                   	push   ebx
10004f94:	83 ec 38             	sub    esp,0x38
10004f97:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10004f9b:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10004fa1:	53                   	push   ebx
10004fa2:	e8 fc ff ff ff       	call   10004fa3 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x13>	10004fa3: R_386_PC32	NIWindow::getEventCount()
10004fa7:	83 c4 10             	add    esp,0x10
10004faa:	85 c0                	test   eax,eax
10004fac:	74 54                	je     10005002 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x72>
10004fae:	89 e6                	mov    esi,esp
10004fb0:	8d bd bc 00 00 00    	lea    edi,[ebp+0xbc]
10004fb6:	50                   	push   eax
10004fb7:	50                   	push   eax
10004fb8:	53                   	push   ebx
10004fb9:	56                   	push   esi
10004fba:	e8 fc ff ff ff       	call   10004fbb <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x2b>	10004fbb: R_386_PC32	NIWindow::grabEvent()
10004fbf:	b9 05 00 00 00       	mov    ecx,0x5
10004fc4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004fc6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
10004fcc:	89 85 a4 00 00 00    	mov    DWORD PTR [ebp+0xa4],eax
10004fd2:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10004fd8:	89 85 a8 00 00 00    	mov    DWORD PTR [ebp+0xa8],eax
10004fde:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
10004fe4:	89 85 ac 00 00 00    	mov    DWORD PTR [ebp+0xac],eax
10004fea:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10004ff0:	89 85 b0 00 00 00    	mov    DWORD PTR [ebp+0xb0],eax
10004ff6:	53                   	push   ebx
10004ff7:	e8 fc ff ff ff       	call   10004ff8 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x68>	10004ff8: R_386_PC32	NIWindow::getEventCount()
10004ffc:	83 c4 10             	add    esp,0x10
10004fff:	99                   	cdq    
10005000:	eb 05                	jmp    10005007 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x77>
10005002:	83 c8 ff             	or     eax,0xffffffff
10005005:	89 c2                	mov    edx,eax
10005007:	83 c4 2c             	add    esp,0x2c
1000500a:	5b                   	pop    ebx
1000500b:	5e                   	pop    esi
1000500c:	5f                   	pop    edi
1000500d:	5d                   	pop    ebp
1000500e:	c3                   	ret    

1000500f <NiSystemCallHandler(regs*)>:
1000500f:	53                   	push   ebx
10005010:	83 ec 14             	sub    esp,0x14
10005013:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10005017:	68 03 5b 00 10       	push   0x10005b03	10005018: R_386_32	.text
1000501c:	e8 fc ff ff ff       	call   1000501d <NiSystemCallHandler(regs*)+0xe>	1000501d: R_386_PC32	Dbg::kprintf(char const*, ...)
10005021:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10005024:	83 c4 10             	add    esp,0x10
10005027:	83 f8 04             	cmp    eax,0x4
1000502a:	74 28                	je     10005054 <NiSystemCallHandler(regs*)+0x45>
1000502c:	77 06                	ja     10005034 <NiSystemCallHandler(regs*)+0x25>
1000502e:	85 c0                	test   eax,eax
10005030:	74 13                	je     10005045 <NiSystemCallHandler(regs*)+0x36>
10005032:	eb 0a                	jmp    1000503e <NiSystemCallHandler(regs*)+0x2f>
10005034:	83 f8 05             	cmp    eax,0x5
10005037:	74 2a                	je     10005063 <NiSystemCallHandler(regs*)+0x54>
10005039:	83 f8 06             	cmp    eax,0x6
1000503c:	74 34                	je     10005072 <NiSystemCallHandler(regs*)+0x63>
1000503e:	83 c8 ff             	or     eax,0xffffffff
10005041:	89 c2                	mov    edx,eax
10005043:	eb 3d                	jmp    10005082 <NiSystemCallHandler(regs*)+0x73>
10005045:	50                   	push   eax
10005046:	50                   	push   eax
10005047:	ff 73 24             	push   DWORD PTR [ebx+0x24]
1000504a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
1000504d:	e8 fc ff ff ff       	call   1000504e <NiSystemCallHandler(regs*)+0x3f>	1000504e: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
10005052:	eb 2b                	jmp    1000507f <NiSystemCallHandler(regs*)+0x70>
10005054:	50                   	push   eax
10005055:	50                   	push   eax
10005056:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10005059:	ff 73 28             	push   DWORD PTR [ebx+0x28]
1000505c:	e8 fc ff ff ff       	call   1000505d <NiSystemCallHandler(regs*)+0x4e>	1000505d: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
10005061:	eb 1c                	jmp    1000507f <NiSystemCallHandler(regs*)+0x70>
10005063:	50                   	push   eax
10005064:	50                   	push   eax
10005065:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10005068:	ff 73 28             	push   DWORD PTR [ebx+0x28]
1000506b:	e8 fc ff ff ff       	call   1000506c <NiSystemCallHandler(regs*)+0x5d>	1000506c: R_386_PC32	NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)
10005070:	eb 0d                	jmp    1000507f <NiSystemCallHandler(regs*)+0x70>
10005072:	50                   	push   eax
10005073:	50                   	push   eax
10005074:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10005077:	ff 73 28             	push   DWORD PTR [ebx+0x28]
1000507a:	e8 fc ff ff ff       	call   1000507b <NiSystemCallHandler(regs*)+0x6c>	1000507b: R_386_PC32	NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)
1000507f:	83 c4 10             	add    esp,0x10
10005082:	83 c4 08             	add    esp,0x8
10005085:	5b                   	pop    ebx
10005086:	c3                   	ret    
10005087:	90                   	nop

10005088 <NIWindow::postEvent(NiEvent)>:
10005088:	57                   	push   edi
10005089:	b9 05 00 00 00       	mov    ecx,0x5
1000508e:	56                   	push   esi
1000508f:	53                   	push   ebx
10005090:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10005094:	8d 74 24 14          	lea    esi,[esp+0x14]
10005098:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
1000509b:	6b d0 14             	imul   edx,eax,0x14
1000509e:	40                   	inc    eax
1000509f:	8d 7c 13 18          	lea    edi,[ebx+edx*1+0x18]
100050a3:	99                   	cdq    
100050a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100050a6:	b9 10 00 00 00       	mov    ecx,0x10
100050ab:	ff 43 0c             	inc    DWORD PTR [ebx+0xc]
100050ae:	f7 f9                	idiv   ecx
100050b0:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
100050b3:	5b                   	pop    ebx
100050b4:	5e                   	pop    esi
100050b5:	5f                   	pop    edi
100050b6:	c3                   	ret    
100050b7:	90                   	nop

100050b8 <NIWindow::getEventCount()>:
100050b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100050bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100050bf:	c3                   	ret    

100050c0 <NIWindow::grabEvent()>:
100050c0:	57                   	push   edi
100050c1:	b9 05 00 00 00       	mov    ecx,0x5
100050c6:	56                   	push   esi
100050c7:	53                   	push   ebx
100050c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100050cc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100050d0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
100050d3:	6b d0 14             	imul   edx,eax,0x14
100050d6:	40                   	inc    eax
100050d7:	8d 74 13 18          	lea    esi,[ebx+edx*1+0x18]
100050db:	99                   	cdq    
100050dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100050de:	ff 4b 0c             	dec    DWORD PTR [ebx+0xc]
100050e1:	b9 10 00 00 00       	mov    ecx,0x10
100050e6:	f7 f9                	idiv   ecx
100050e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100050ec:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
100050ef:	5b                   	pop    ebx
100050f0:	5e                   	pop    esi
100050f1:	5f                   	pop    edi
100050f2:	c2 04 00             	ret    0x4
100050f5:	90                   	nop

100050f6 <NIWindow::invalidate()>:
100050f6:	53                   	push   ebx
100050f7:	83 ec 08             	sub    esp,0x8
100050fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100050fe:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
10005105:	74 28                	je     1000512f <NIWindow::invalidate()+0x39>
10005107:	83 bb 60 01 00 00 00 	cmp    DWORD PTR [ebx+0x160],0x0
1000510e:	74 1f                	je     1000512f <NIWindow::invalidate()+0x39>
10005110:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10005113:	85 c0                	test   eax,eax
10005115:	74 18                	je     1000512f <NIWindow::invalidate()+0x39>
10005117:	83 ec 0c             	sub    esp,0xc
1000511a:	50                   	push   eax
1000511b:	e8 fc ff ff ff       	call   1000511c <NIWindow::invalidate()+0x26>	1000511c: R_386_PC32	free
10005120:	59                   	pop    ecx
10005121:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
10005127:	e8 fc ff ff ff       	call   10005128 <NIWindow::invalidate()+0x32>	10005128: R_386_PC32	free
1000512c:	83 c4 10             	add    esp,0x10
1000512f:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
10005139:	c7 83 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x15c],0x0
10005143:	c6 83 58 01 00 00 00 	mov    BYTE PTR [ebx+0x158],0x0
1000514a:	83 c4 08             	add    esp,0x8
1000514d:	5b                   	pop    ebx
1000514e:	c3                   	ret    
1000514f:	90                   	nop

10005150 <NIWindow::putpixel(int, int, unsigned int)>:
10005150:	56                   	push   esi
10005151:	53                   	push   ebx
10005152:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10005156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000515a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
1000515d:	0f af 83 6c 01 00 00 	imul   eax,DWORD PTR [ebx+0x16c]
10005164:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10005168:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
1000516c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000516f:	83 fe 04             	cmp    esi,0x4
10005172:	75 05                	jne    10005179 <NIWindow::putpixel(int, int, unsigned int)+0x29>
10005174:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
10005177:	eb 0e                	jmp    10005187 <NIWindow::putpixel(int, int, unsigned int)+0x37>
10005179:	83 fe 02             	cmp    esi,0x2
1000517c:	75 06                	jne    10005184 <NIWindow::putpixel(int, int, unsigned int)+0x34>
1000517e:	66 89 0c 42          	mov    WORD PTR [edx+eax*2],cx
10005182:	eb 03                	jmp    10005187 <NIWindow::putpixel(int, int, unsigned int)+0x37>
10005184:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
10005187:	5b                   	pop    ebx
10005188:	5e                   	pop    esi
10005189:	c3                   	ret    

1000518a <NIWindow::drawBasicWindow()>:
1000518a:	55                   	push   ebp
1000518b:	57                   	push   edi
1000518c:	56                   	push   esi
1000518d:	31 f6                	xor    esi,esi
1000518f:	53                   	push   ebx
10005190:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
10005194:	39 b5 70 01 00 00    	cmp    DWORD PTR [ebp+0x170],esi
1000519a:	7e 31                	jle    100051cd <NIWindow::drawBasicWindow()+0x43>
1000519c:	31 db                	xor    ebx,ebx
1000519e:	83 fe 19             	cmp    esi,0x19
100051a1:	0f 9e c3             	setle  bl
100051a4:	31 ff                	xor    edi,edi
100051a6:	4b                   	dec    ebx
100051a7:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
100051ad:	81 c3 ff ff ff 00    	add    ebx,0xffffff
100051b3:	39 bd 6c 01 00 00    	cmp    DWORD PTR [ebp+0x16c],edi
100051b9:	7e 0f                	jle    100051ca <NIWindow::drawBasicWindow()+0x40>
100051bb:	53                   	push   ebx
100051bc:	56                   	push   esi
100051bd:	57                   	push   edi
100051be:	47                   	inc    edi
100051bf:	55                   	push   ebp
100051c0:	e8 fc ff ff ff       	call   100051c1 <NIWindow::drawBasicWindow()+0x37>	100051c1: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100051c5:	83 c4 10             	add    esp,0x10
100051c8:	eb e9                	jmp    100051b3 <NIWindow::drawBasicWindow()+0x29>
100051ca:	46                   	inc    esi
100051cb:	eb c7                	jmp    10005194 <NIWindow::drawBasicWindow()+0xa>
100051cd:	5b                   	pop    ebx
100051ce:	5e                   	pop    esi
100051cf:	5f                   	pop    edi
100051d0:	5d                   	pop    ebp
100051d1:	c3                   	ret    

100051d2 <NIWindow::rerender()>:
100051d2:	57                   	push   edi
100051d3:	56                   	push   esi
100051d4:	53                   	push   ebx
100051d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100051d9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
100051e0:	74 0c                	je     100051ee <NIWindow::rerender()+0x1c>
100051e2:	83 ec 0c             	sub    esp,0xc
100051e5:	53                   	push   ebx
100051e6:	e8 fc ff ff ff       	call   100051e7 <NIWindow::rerender()+0x15>	100051e7: R_386_PC32	NIWindow::invalidate()
100051eb:	83 c4 10             	add    esp,0x10
100051ee:	8b b3 70 01 00 00    	mov    esi,DWORD PTR [ebx+0x170]
100051f4:	83 ec 0c             	sub    esp,0xc
100051f7:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
100051fd:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10005204:	50                   	push   eax
10005205:	e8 fc ff ff ff       	call   10005206 <NIWindow::rerender()+0x34>	10005206: R_386_PC32	malloc
1000520a:	0f af b3 6c 01 00 00 	imul   esi,DWORD PTR [ebx+0x16c]
10005211:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10005217:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
1000521b:	89 34 24             	mov    DWORD PTR [esp],esi
1000521e:	e8 fc ff ff ff       	call   1000521f <NIWindow::rerender()+0x4d>	1000521f: R_386_PC32	malloc
10005223:	89 f1                	mov    ecx,esi
10005225:	89 c2                	mov    edx,eax
10005227:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
1000522a:	89 d7                	mov    edi,edx
1000522c:	31 c0                	xor    eax,eax
1000522e:	83 c4 10             	add    esp,0x10
10005231:	f3 aa                	rep stos BYTE PTR es:[edi],al
10005233:	31 c0                	xor    eax,eax
10005235:	39 83 5c 01 00 00    	cmp    DWORD PTR [ebx+0x15c],eax
1000523b:	7e 7f                	jle    100052bc <NIWindow::rerender()+0xea>
1000523d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10005244:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
1000524a:	01 d6                	add    esi,edx
1000524c:	83 f8 06             	cmp    eax,0x6
1000524f:	7f 1e                	jg     1000526f <NIWindow::rerender()+0x9d>
10005251:	8b 0c 85 00 00 00 00 	mov    ecx,DWORD PTR [eax*4+0x0]	10005254: R_386_32	curveLookup7
10005258:	66 89 0e             	mov    WORD PTR [esi],cx
1000525b:	8b 8b 60 01 00 00    	mov    ecx,DWORD PTR [ebx+0x160]
10005261:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10005264: R_386_32	curveLookup7
10005268:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
1000526d:	eb 47                	jmp    100052b6 <NIWindow::rerender()+0xe4>
1000526f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
10005275:	8d 79 fa             	lea    edi,[ecx-0x6]
10005278:	39 c7                	cmp    edi,eax
1000527a:	7f 28                	jg     100052a4 <NIWindow::rerender()+0xd2>
1000527c:	29 c1                	sub    ecx,eax
1000527e:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10005281: R_386_32	curveLookup7
10005285:	66 89 0e             	mov    WORD PTR [esi],cx
10005288:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
1000528e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10005294:	29 c1                	sub    ecx,eax
10005296:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10005299: R_386_32	curveLookup7
1000529d:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
100052a2:	eb 12                	jmp    100052b6 <NIWindow::rerender()+0xe4>
100052a4:	66 c7 06 00 00       	mov    WORD PTR [esi],0x0
100052a9:	8b 8b 60 01 00 00    	mov    ecx,DWORD PTR [ebx+0x160]
100052af:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
100052b6:	40                   	inc    eax
100052b7:	e9 79 ff ff ff       	jmp    10005235 <NIWindow::rerender()+0x63>
100052bc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
100052c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
100052c7:	5b                   	pop    ebx
100052c8:	5e                   	pop    esi
100052c9:	5f                   	pop    edi
100052ca:	e9 bb fe ff ff       	jmp    1000518a <NIWindow::drawBasicWindow()>
100052cf:	90                   	nop

100052d0 <NIWindow::changeContext(NIContext*, int, int)>:
100052d0:	55                   	push   ebp
100052d1:	57                   	push   edi
100052d2:	56                   	push   esi
100052d3:	53                   	push   ebx
100052d4:	83 ec 18             	sub    esp,0x18
100052d7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100052db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
100052df:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
100052e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100052e7:	53                   	push   ebx
100052e8:	e8 fc ff ff ff       	call   100052e9 <NIWindow::changeContext(NIContext*, int, int)+0x19>	100052e9: R_386_PC32	NIWindow::invalidate()
100052ed:	89 33                	mov    DWORD PTR [ebx],esi
100052ef:	89 ab 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ebp
100052f5:	89 bb 68 01 00 00    	mov    DWORD PTR [ebx+0x168],edi
100052fb:	83 c4 10             	add    esp,0x10
100052fe:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
10005304:	83 f8 08             	cmp    eax,0x8
10005307:	7f 09                	jg     10005312 <NIWindow::changeContext(NIContext*, int, int)+0x42>
10005309:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
10005310:	eb 15                	jmp    10005327 <NIWindow::changeContext(NIContext*, int, int)+0x57>
10005312:	83 f8 10             	cmp    eax,0x10
10005315:	7f 09                	jg     10005320 <NIWindow::changeContext(NIContext*, int, int)+0x50>
10005317:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
1000531e:	eb 07                	jmp    10005327 <NIWindow::changeContext(NIContext*, int, int)+0x57>
10005320:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
10005327:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
1000532b:	83 c4 0c             	add    esp,0xc
1000532e:	5b                   	pop    ebx
1000532f:	5e                   	pop    esi
10005330:	5f                   	pop    edi
10005331:	5d                   	pop    ebp
10005332:	e9 9b fe ff ff       	jmp    100051d2 <NIWindow::rerender()>
10005337:	90                   	nop

10005338 <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
10005338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000533c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10005340:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
10005347:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
1000534d:	c7 80 88 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x188],0x0
10005357:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000535b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
10005362:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10005368:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
10005372:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
1000537c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10005383:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
1000538a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10005391:	e9 3a ff ff ff       	jmp    100052d0 <NIWindow::changeContext(NIContext*, int, int)>

10005396 <NIWindow::request()>:
10005396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000539a:	80 b8 58 01 00 00 00 	cmp    BYTE PTR [eax+0x158],0x0
100053a1:	75 05                	jne    100053a8 <NIWindow::request()+0x12>
100053a3:	e9 2a fe ff ff       	jmp    100051d2 <NIWindow::rerender()>
100053a8:	c3                   	ret    
100053a9:	90                   	nop

100053aa <NIWindow::SHADOW_TEST()>:
100053aa:	55                   	push   ebp
100053ab:	57                   	push   edi
100053ac:	56                   	push   esi
100053ad:	53                   	push   ebx
100053ae:	83 ec 28             	sub    esp,0x28
100053b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
100053b5:	53                   	push   ebx
100053b6:	e8 fc ff ff ff       	call   100053b7 <NIWindow::SHADOW_TEST()+0xd>	100053b7: R_386_PC32	NIWindow::request()
100053bb:	83 c4 10             	add    esp,0x10
100053be:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
100053c4:	39 83 5c 01 00 00    	cmp    DWORD PTR [ebx+0x15c],eax
100053ca:	74 10                	je     100053dc <NIWindow::SHADOW_TEST()+0x32>
100053cc:	83 ec 0c             	sub    esp,0xc
100053cf:	68 18 5b 00 10       	push   0x10005b18	100053d0: R_386_32	.text
100053d4:	e8 fc ff ff ff       	call   100053d5 <NIWindow::SHADOW_TEST()+0x2b>	100053d5: R_386_PC32	KePanic(char const*)
100053d9:	83 c4 10             	add    esp,0x10
100053dc:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
100053e0:	0f 85 3a 01 00 00    	jne    10005520 <NIWindow::SHADOW_TEST()+0x176>
100053e6:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
100053ee:	31 ff                	xor    edi,edi
100053f0:	39 bb 70 01 00 00    	cmp    DWORD PTR [ebx+0x170],edi
100053f6:	0f 8e 24 01 00 00    	jle    10005520 <NIWindow::SHADOW_TEST()+0x176>
100053fc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
10005402:	8d 04 b8             	lea    eax,[eax+edi*4]
10005405:	0f b7 30             	movzx  esi,WORD PTR [eax]
10005408:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
1000540c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
10005410:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10005414:	89 34 24             	mov    DWORD PTR [esp],esi
10005417:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
1000541d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
10005423:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
10005427:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
1000542a:	0f 8e da 00 00 00    	jle    1000550a <NIWindow::SHADOW_TEST()+0x160>
10005430:	83 ff 05             	cmp    edi,0x5
10005433:	7e 1f                	jle    10005454 <NIWindow::SHADOW_TEST()+0xaa>
10005435:	8d 41 fb             	lea    eax,[ecx-0x5]
10005438:	39 f8                	cmp    eax,edi
1000543a:	7e 18                	jle    10005454 <NIWindow::SHADOW_TEST()+0xaa>
1000543c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10005440:	83 c0 05             	add    eax,0x5
10005443:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10005446:	7d 0c                	jge    10005454 <NIWindow::SHADOW_TEST()+0xaa>
10005448:	8d 45 fb             	lea    eax,[ebp-0x5]
1000544b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
1000544e:	0f 8f ae 00 00 00    	jg     10005502 <NIWindow::SHADOW_TEST()+0x158>
10005454:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
10005458:	be ea 01 00 00       	mov    esi,0x1ea
1000545d:	29 f9                	sub    ecx,edi
1000545f:	89 f0                	mov    eax,esi
10005461:	83 c1 04             	add    ecx,0x4
10005464:	99                   	cdq    
10005465:	f7 f9                	idiv   ecx
10005467:	89 c1                	mov    ecx,eax
10005469:	89 f0                	mov    eax,esi
1000546b:	99                   	cdq    
1000546c:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10005470:	83 f8 0a             	cmp    eax,0xa
10005473:	7d 05                	jge    1000547a <NIWindow::SHADOW_TEST()+0xd0>
10005475:	b8 0a 00 00 00       	mov    eax,0xa
1000547a:	39 c1                	cmp    ecx,eax
1000547c:	7d 02                	jge    10005480 <NIWindow::SHADOW_TEST()+0xd6>
1000547e:	89 c1                	mov    ecx,eax
10005480:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
10005483:	b8 ea 01 00 00       	mov    eax,0x1ea
10005488:	83 c5 04             	add    ebp,0x4
1000548b:	99                   	cdq    
1000548c:	f7 fd                	idiv   ebp
1000548e:	89 c6                	mov    esi,eax
10005490:	83 f8 0a             	cmp    eax,0xa
10005493:	7d 05                	jge    1000549a <NIWindow::SHADOW_TEST()+0xf0>
10005495:	be 0a 00 00 00       	mov    esi,0xa
1000549a:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000549d:	8d 68 05             	lea    ebp,[eax+0x5]
100054a0:	b8 ea 01 00 00       	mov    eax,0x1ea
100054a5:	99                   	cdq    
100054a6:	f7 fd                	idiv   ebp
100054a8:	39 c6                	cmp    esi,eax
100054aa:	7d 02                	jge    100054ae <NIWindow::SHADOW_TEST()+0x104>
100054ac:	89 c6                	mov    esi,eax
100054ae:	89 f0                	mov    eax,esi
100054b0:	89 ca                	mov    edx,ecx
100054b2:	0f af c6             	imul   eax,esi
100054b5:	0f af d1             	imul   edx,ecx
100054b8:	0f af f1             	imul   esi,ecx
100054bb:	01 d0                	add    eax,edx
100054bd:	8d 04 c6             	lea    eax,[esi+eax*8]
100054c0:	c1 f8 08             	sar    eax,0x8
100054c3:	83 f8 66             	cmp    eax,0x66
100054c6:	7e 4c                	jle    10005514 <NIWindow::SHADOW_TEST()+0x16a>
100054c8:	8d 50 9a             	lea    edx,[eax-0x66]
100054cb:	d1 fa                	sar    edx,1
100054cd:	8d 42 66             	lea    eax,[edx+0x66]
100054d0:	83 f8 73             	cmp    eax,0x73
100054d3:	7e 3f                	jle    10005514 <NIWindow::SHADOW_TEST()+0x16a>
100054d5:	83 ea 0d             	sub    edx,0xd
100054d8:	c1 fa 02             	sar    edx,0x2
100054db:	8d 42 73             	lea    eax,[edx+0x73]
100054de:	83 f8 7f             	cmp    eax,0x7f
100054e1:	7f 1f                	jg     10005502 <NIWindow::SHADOW_TEST()+0x158>
100054e3:	50                   	push   eax
100054e4:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
100054ea:	01 f8                	add    eax,edi
100054ec:	50                   	push   eax
100054ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100054f1:	03 83 64 01 00 00    	add    eax,DWORD PTR [ebx+0x164]
100054f7:	50                   	push   eax
100054f8:	ff 33                	push   DWORD PTR [ebx]
100054fa:	e8 fc ff ff ff       	call   100054fb <NIWindow::SHADOW_TEST()+0x151>	100054fb: R_386_PC32	NIContext::drvDarken4(int, int, int)
100054ff:	83 c4 10             	add    esp,0x10
10005502:	ff 04 24             	inc    DWORD PTR [esp]
10005505:	e9 0d ff ff ff       	jmp    10005417 <NIWindow::SHADOW_TEST()+0x6d>
1000550a:	47                   	inc    edi
1000550b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
1000550f:	e9 dc fe ff ff       	jmp    100053f0 <NIWindow::SHADOW_TEST()+0x46>
10005514:	83 f8 0a             	cmp    eax,0xa
10005517:	7d ca                	jge    100054e3 <NIWindow::SHADOW_TEST()+0x139>
10005519:	b8 0a 00 00 00       	mov    eax,0xa
1000551e:	eb c3                	jmp    100054e3 <NIWindow::SHADOW_TEST()+0x139>
10005520:	83 c4 1c             	add    esp,0x1c
10005523:	5b                   	pop    ebx
10005524:	5e                   	pop    esi
10005525:	5f                   	pop    edi
10005526:	5d                   	pop    ebp
10005527:	c3                   	ret    

10005528 <NIWindow::realdraw()>:
10005528:	55                   	push   ebp
10005529:	57                   	push   edi
1000552a:	56                   	push   esi
1000552b:	53                   	push   ebx
1000552c:	83 ec 18             	sub    esp,0x18
1000552f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10005533:	53                   	push   ebx
10005534:	e8 fc ff ff ff       	call   10005535 <NIWindow::realdraw()+0xd>	10005535: R_386_PC32	NIWindow::request()
10005539:	83 c4 10             	add    esp,0x10
1000553c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10005542:	39 83 5c 01 00 00    	cmp    DWORD PTR [ebx+0x15c],eax
10005548:	74 10                	je     1000555a <NIWindow::realdraw()+0x32>
1000554a:	83 ec 0c             	sub    esp,0xc
1000554d:	68 18 5b 00 10       	push   0x10005b18	1000554e: R_386_32	.text
10005552:	e8 fc ff ff ff       	call   10005553 <NIWindow::realdraw()+0x2b>	10005553: R_386_PC32	KePanic(char const*)
10005557:	83 c4 10             	add    esp,0x10
1000555a:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
1000555e:	75 55                	jne    100055b5 <NIWindow::realdraw()+0x8d>
10005560:	31 f6                	xor    esi,esi
10005562:	39 b3 70 01 00 00    	cmp    DWORD PTR [ebx+0x170],esi
10005568:	7e 4b                	jle    100055b5 <NIWindow::realdraw()+0x8d>
1000556a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
10005570:	8d 04 b0             	lea    eax,[eax+esi*4]
10005573:	0f b7 28             	movzx  ebp,WORD PTR [eax]
10005576:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
1000557a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
10005580:	89 c2                	mov    edx,eax
10005582:	29 fa                	sub    edx,edi
10005584:	39 ea                	cmp    edx,ebp
10005586:	7e 2a                	jle    100055b2 <NIWindow::realdraw()+0x8a>
10005588:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000558b:	0f af c6             	imul   eax,esi
1000558e:	01 e8                	add    eax,ebp
10005590:	ff 34 82             	push   DWORD PTR [edx+eax*4]
10005593:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10005599:	01 f0                	add    eax,esi
1000559b:	50                   	push   eax
1000559c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
100055a2:	01 e8                	add    eax,ebp
100055a4:	45                   	inc    ebp
100055a5:	50                   	push   eax
100055a6:	ff 33                	push   DWORD PTR [ebx]
100055a8:	e8 fc ff ff ff       	call   100055a9 <NIWindow::realdraw()+0x81>	100055a9: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
100055ad:	83 c4 10             	add    esp,0x10
100055b0:	eb c8                	jmp    1000557a <NIWindow::realdraw()+0x52>
100055b2:	46                   	inc    esi
100055b3:	eb ad                	jmp    10005562 <NIWindow::realdraw()+0x3a>
100055b5:	83 c4 0c             	add    esp,0xc
100055b8:	5b                   	pop    ebx
100055b9:	5e                   	pop    esi
100055ba:	5f                   	pop    edi
100055bb:	5d                   	pop    ebp
100055bc:	c3                   	ret    
100055bd:	90                   	nop

100055be <List<NIWindow*>::insertAtHead(NIWindow*)>:
100055be:	53                   	push   ebx
100055bf:	83 ec 14             	sub    esp,0x14
100055c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100055c6:	6a 0c                	push   0xc
100055c8:	e8 fc ff ff ff       	call   100055c9 <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	100055c9: R_386_PC32	malloc
100055cd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
100055d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100055d8:	89 10                	mov    DWORD PTR [eax],edx
100055da:	83 c4 10             	add    esp,0x10
100055dd:	8b 13                	mov    edx,DWORD PTR [ebx]
100055df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100055e2:	85 d2                	test   edx,edx
100055e4:	74 05                	je     100055eb <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
100055e6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
100055e9:	eb 03                	jmp    100055ee <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
100055eb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100055ee:	89 03                	mov    DWORD PTR [ebx],eax
100055f0:	83 c4 08             	add    esp,0x8
100055f3:	5b                   	pop    ebx
100055f4:	c3                   	ret    
100055f5:	90                   	nop

100055f6 <List<NIWindow*>::deleteElement(NIWindow*&)>:
100055f6:	57                   	push   edi
100055f7:	56                   	push   esi
100055f8:	53                   	push   ebx
100055f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100055fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10005601:	8b 19                	mov    ebx,DWORD PTR [ecx]
10005603:	85 db                	test   ebx,ebx
10005605:	74 5e                	je     10005665 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10005607:	8b 30                	mov    esi,DWORD PTR [eax]
10005609:	89 da                	mov    edx,ebx
1000560b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
1000560e:	8b 3a                	mov    edi,DWORD PTR [edx]
10005610:	85 c0                	test   eax,eax
10005612:	74 08                	je     1000561c <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10005614:	39 f7                	cmp    edi,esi
10005616:	73 04                	jae    1000561c <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10005618:	89 c2                	mov    edx,eax
1000561a:	eb ef                	jmp    1000560b <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
1000561c:	39 f7                	cmp    edi,esi
1000561e:	75 45                	jne    10005665 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10005620:	39 d3                	cmp    ebx,edx
10005622:	75 18                	jne    1000563c <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
10005624:	89 01                	mov    DWORD PTR [ecx],eax
10005626:	85 c0                	test   eax,eax
10005628:	75 09                	jne    10005633 <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
1000562a:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
10005631:	eb 1e                	jmp    10005651 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10005633:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
1000563a:	eb 15                	jmp    10005651 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
1000563c:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
1000563f:	85 c0                	test   eax,eax
10005641:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10005644:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10005647:	74 05                	je     1000564e <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
10005649:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
1000564c:	eb 03                	jmp    10005651 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
1000564e:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
10005651:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
10005659:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
1000565d:	5b                   	pop    ebx
1000565e:	5e                   	pop    esi
1000565f:	5f                   	pop    edi
10005660:	e9 fc ff ff ff       	jmp    10005661 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	10005661: R_386_PC32	operator delete(void*, unsigned long)
10005665:	5b                   	pop    ebx
10005666:	5e                   	pop    esi
10005667:	5f                   	pop    edi
10005668:	c3                   	ret    
10005669:	43                   	inc    ebx
1000566a:	3a 2f                	cmp    ch,BYTE PTR [edi]
1000566c:	42                   	inc    edx
1000566d:	61                   	popa   
1000566e:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000566f:	61                   	popa   
10005670:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005671:	61                   	popa   
10005672:	2f                   	das    
10005673:	49                   	dec    ecx
10005674:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
10005677:	73 2f                	jae    100056a8 <List<NIWindow*>::deleteElement(NIWindow*&)+0xb2>
10005679:	4f                   	dec    edi
1000567a:	66 66 69 63 65 2f 6e 	data16 imul sp,WORD PTR [ebx+0x65],0x6e2f
10005681:	65 77 2e             	gs ja  100056b2 <List<NIWindow*>::deleteElement(NIWindow*&)+0xbc>
10005684:	74 67                	je     100056ed <List<NIWindow*>::deleteElement(NIWindow*&)+0xf7>
10005686:	61                   	popa   
10005687:	00 46 53             	add    BYTE PTR [esi+0x53],al
1000568a:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10005690:	00 74 67 61          	add    BYTE PTR [edi+eiz*2+0x61],dh
10005694:	6c                   	ins    BYTE PTR es:[edi],dx
10005695:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10005697:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
1000569d:	00 62 72             	add    BYTE PTR [edx+0x72],ah
100056a0:	20 3d 20 25 64 2c    	and    BYTE PTR ds:0x2c642520,bh
100056a6:	20 66 73             	and    BYTE PTR [esi+0x73],ah
100056a9:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
100056af:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
100056b2:	2f                   	das    
100056b3:	42                   	inc    edx
100056b4:	61                   	popa   
100056b5:	6e                   	outs   dx,BYTE PTR ds:[esi]
100056b6:	61                   	popa   
100056b7:	6e                   	outs   dx,BYTE PTR ds:[esi]
100056b8:	61                   	popa   
100056b9:	2f                   	das    
100056ba:	49                   	dec    ecx
100056bb:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
100056be:	73 2f                	jae    100056ef <List<NIWindow*>::deleteElement(NIWindow*&)+0xf9>
100056c0:	4f                   	dec    edi
100056c1:	66 66 69 63 65 2f 6f 	data16 imul sp,WORD PTR [ebx+0x65],0x6f2f
100056c8:	70 65                	jo     1000572f <List<NIWindow*>::deleteElement(NIWindow*&)+0x139>
100056ca:	6e                   	outs   dx,BYTE PTR ds:[esi]
100056cb:	2e 74 67             	cs je  10005735 <List<NIWindow*>::deleteElement(NIWindow*&)+0x13f>
100056ce:	61                   	popa   
100056cf:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
100056d2:	4e                   	dec    esi
100056d3:	43                   	inc    ebx
100056d4:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
100056d7:	4e                   	dec    esi
100056d8:	32 00                	xor    al,BYTE PTR [eax]
100056da:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
100056dd:	53                   	push   ebx
100056de:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
100056e1:	43                   	inc    ebx
100056e2:	6f                   	outs   dx,DWORD PTR ds:[esi]
100056e3:	6e                   	outs   dx,BYTE PTR ds:[esi]
100056e4:	74 65                	je     1000574b <List<NIWindow*>::deleteElement(NIWindow*&)+0x155>
100056e6:	78 74                	js     1000575c <List<NIWindow*>::deleteElement(NIWindow*&)+0x166>
100056e8:	3a 3a                	cmp    bh,BYTE PTR [edx]
100056ea:	64 72 76             	fs jb  10005763 <List<NIWindow*>::deleteElement(NIWindow*&)+0x16d>
100056ed:	52                   	push   edx
100056ee:	65 6e                	outs   dx,BYTE PTR gs:[esi]
100056f0:	64 65 72 54          	fs gs jb 10005748 <List<NIWindow*>::deleteElement(NIWindow*&)+0x152>
100056f4:	54                   	push   esp
100056f5:	46                   	inc    esi
100056f6:	34 00                	xor    al,0x0
100056f8:	43                   	inc    ebx
100056f9:	3a 2f                	cmp    ch,BYTE PTR [edi]
100056fb:	42                   	inc    edx
100056fc:	61                   	popa   
100056fd:	6e                   	outs   dx,BYTE PTR ds:[esi]
100056fe:	61                   	popa   
100056ff:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005700:	61                   	popa   
10005701:	2f                   	das    
10005702:	46                   	inc    esi
10005703:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005704:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005705:	74 73                	je     1000577a <List<NIWindow*>::deleteElement(NIWindow*&)+0x184>
10005707:	2f                   	das    
10005708:	53                   	push   ebx
10005709:	46                   	inc    esi
1000570a:	4e                   	dec    esi
1000570b:	00 43 41             	add    BYTE PTR [ebx+0x41],al
1000570e:	4e                   	dec    esi
1000570f:	4e                   	dec    esi
10005710:	4f                   	dec    edi
10005711:	54                   	push   esp
10005712:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10005716:	44                   	inc    esp
10005717:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
1000571a:	4e                   	dec    esi
1000571b:	54                   	push   esp
1000571c:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
10005720:	45                   	inc    ebp
10005721:	43                   	inc    ebx
10005722:	54                   	push   esp
10005723:	4f                   	dec    edi
10005724:	52                   	push   edx
10005725:	59                   	pop    ecx
10005726:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005729:	2f                   	das    
1000572a:	42                   	inc    edx
1000572b:	61                   	popa   
1000572c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000572d:	61                   	popa   
1000572e:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000572f:	61                   	popa   
10005730:	2f                   	das    
10005731:	46                   	inc    esi
10005732:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005733:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005734:	74 73                	je     100057a9 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1b3>
10005736:	2f                   	das    
10005737:	53                   	push   ebx
10005738:	46                   	inc    esi
10005739:	4e                   	dec    esi
1000573a:	2f                   	das    
1000573b:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
1000573e:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000573f:	74 20                	je     10005761 <List<NIWindow*>::deleteElement(NIWindow*&)+0x16b>
10005741:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
10005748:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
1000574f:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
10005753:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
10005759:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000575a:	74 3a                	je     10005796 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1a0>
1000575c:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10005762:	53                   	push   ebx
10005763:	46                   	inc    esi
10005764:	4e                   	dec    esi
10005765:	5f                   	pop    edi
10005766:	52                   	push   edx
10005767:	45                   	inc    ebp
10005768:	53                   	push   ebx
10005769:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
1000576f:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
10005772:	6d                   	ins    DWORD PTR es:[edi],dx
10005773:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005774:	72 79                	jb     100057ef <List<NIWindow*>::deleteElement(NIWindow*&)+0x1f9>
10005776:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
10005779:	6c                   	ins    BYTE PTR es:[edi],dx
1000577a:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000577b:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
1000577e:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
10005785:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005786:	72 00                	jb     10005788 <List<NIWindow*>::deleteElement(NIWindow*&)+0x192>
10005788:	42                   	inc    edx
10005789:	61                   	popa   
1000578a:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
1000578e:	6c                   	ins    BYTE PTR es:[edi],dx
1000578f:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
10005793:	72 6d                	jb     10005802 <_ssfn__compute_huffman_codes::length_dezigzag+0x2>
10005795:	61                   	popa   
10005796:	74 00                	je     10005798 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1a2>
10005798:	4e                   	dec    esi
10005799:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000579a:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
1000579d:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000579e:	74 20                	je     100057c0 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1ca>
100057a0:	66 61                	popaw  
100057a2:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
100057a5:	66 6f                	outs   dx,WORD PTR ds:[esi]
100057a7:	75 6e                	jne    10005817 <_ssfn__compute_huffman_codes::length_dezigzag+0x17>
100057a9:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
100057ad:	76 61                	jbe    10005810 <_ssfn__compute_huffman_codes::length_dezigzag+0x10>
100057af:	6c                   	ins    BYTE PTR es:[edi],dx
100057b0:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
100057b8:	20 76 61             	and    BYTE PTR [esi+0x61],dh
100057bb:	6c                   	ins    BYTE PTR es:[edi],dx
100057bc:	75 65                	jne    10005823 <_ssfn__zdist_extra+0x3>
100057be:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
100057c1:	76 61                	jbe    10005824 <_ssfn__zdist_extra+0x4>
100057c3:	6c                   	ins    BYTE PTR es:[edi],dx
100057c4:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
100057cc:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
100057cf:	76 61                	jbe    10005832 <_ssfn__zdist_extra+0x12>
100057d1:	6c                   	ins    BYTE PTR es:[edi],dx
100057d2:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
100057da:	47                   	inc    edi
100057db:	6c                   	ins    BYTE PTR es:[edi],dx
100057dc:	79 70                	jns    1000584e <_ssfn__zdist_extra+0x2e>
100057de:	68 20 6e 6f 74       	push   0x746f6e20
100057e3:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
100057e6:	75 6e                	jne    10005856 <_ssfn__zdist_extra+0x36>
100057e8:	64 00 66 90          	add    BYTE PTR fs:[esi-0x70],ah
100057ec:	66 90                	xchg   ax,ax
100057ee:	66 90                	xchg   ax,ax
100057f0:	66 90                	xchg   ax,ax
100057f2:	66 90                	xchg   ax,ax
100057f4:	66 90                	xchg   ax,ax
100057f6:	66 90                	xchg   ax,ax
100057f8:	66 90                	xchg   ax,ax
100057fa:	66 90                	xchg   ax,ax
100057fc:	66 90                	xchg   ax,ax
100057fe:	66 90                	xchg   ax,ax

10005800 <_ssfn__compute_huffman_codes::length_dezigzag>:
10005800:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10005810:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

10005820 <_ssfn__zdist_extra>:
	...
10005830:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
10005840:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
10005850:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
10005860:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
10005870:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
10005880:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
10005890:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

100058a0 <_ssfn__zdist_base>:
100058a0:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
100058b0:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
100058c0:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
100058d0:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
100058e0:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
100058f0:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10005900:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10005910:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

10005920 <_ssfn__zlength_extra>:
	...
10005940:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
10005950:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
10005960:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
10005970:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
10005980:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

100059a0 <_ssfn__zlength_base>:
100059a0:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
100059b0:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
100059c0:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
100059d0:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
100059e0:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
100059f0:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10005a00:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10005a10:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
10005a20:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
10005a30:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
10005a40:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
10005a50:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
10005a60:	32 0a 00 43 55 52 53 4f 52 53 3a 20 25 64 0a 00     2..CURSORS: %d..
10005a70:	4e 52 4d 4c 00 57 41 49 54 00 54 4c 44 52 00 54     NRML.WAIT.TLDR.T
10005a80:	45 58 54 00 56 45 52 54 00 48 4f 52 5a 00 48 41     EXT.VERT.HORZ.HA
10005a90:	4e 44 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a 20     ND.CURSOR LOAD: 
10005aa0:	42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b 43 6f 6d     BAD 3..NiLinkCom
10005ab0:	6d 61 6e 64 43 72 65 61 74 65 57 69 6e 64 6f 77     mandCreateWindow
10005ac0:	0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e 64 52     ..NiLinkCommandR
10005ad0:	65 73 75 70 70 6c 79 46 72 61 6d 65 62 75 66 66     esupplyFramebuff
10005ae0:	65 72 0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e     er..NiLinkComman
10005af0:	64 43 6c 65 61 72 46 72 61 6d 65 62 75 66 66 65     dClearFramebuffe
10005b00:	72 0a 00 4e 69 53 79 73 74 65 6d 43 61 6c 6c 48     r..NiSystemCallH
10005b10:	61 6e 64 6c 65 72 0a 00 41 53 53 45 52 54 49 4f     andler..ASSERTIO
10005b20:	4e 20 46 41 49 4c 55 52 45 20 28 41 29 2e 00        N FAILURE (A)..
