
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 2c             	sub    esp,0x2c
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	6a 14                	push   0x14
10000069:	e8 fc ff ff ff       	call   1000006a <NiMain(void*)+0x6a>	1000006a: R_386_PC32	malloc
1000006e:	89 c6                	mov    esi,eax
10000070:	58                   	pop    eax
10000071:	5a                   	pop    edx
10000072:	53                   	push   ebx
10000073:	56                   	push   esi
10000074:	e8 fc ff ff ff       	call   10000075 <NiMain(void*)+0x75>	10000075: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
10000079:	68 80 00 00 00       	push   0x80
1000007e:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000080: R_386_32	desktop
10000084:	6a 00                	push   0x0
10000086:	68 00 00 00 00       	push   0x0	10000087: R_386_32	NiDisplayRAM(void*)
1000008b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000008d: R_386_32	kernelProcess
10000091:	e8 fc ff ff ff       	call   10000092 <NiMain(void*)+0x92>	10000092: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000096:	83 c4 14             	add    esp,0x14
10000099:	68 8c 01 00 00       	push   0x18c
1000009e:	e8 fc ff ff ff       	call   1000009f <NiMain(void*)+0x9f>	1000009f: R_386_PC32	malloc
100000a3:	59                   	pop    ecx
100000a4:	89 c5                	mov    ebp,eax
100000a6:	5b                   	pop    ebx
100000a7:	6a 01                	push   0x1
100000a9:	6a 01                	push   0x1
100000ab:	6a 00                	push   0x0
100000ad:	6a 00                	push   0x0
100000af:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000b1: R_386_32	ctxt
100000b5:	50                   	push   eax
100000b6:	e8 fc ff ff ff       	call   100000b7 <NiMain(void*)+0xb7>	100000b7: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000bb:	83 c4 14             	add    esp,0x14
100000be:	68 8c 01 00 00       	push   0x18c
100000c3:	e8 fc ff ff ff       	call   100000c4 <NiMain(void*)+0xc4>	100000c4: R_386_PC32	malloc
100000c8:	5e                   	pop    esi
100000c9:	89 c3                	mov    ebx,eax
100000cb:	5f                   	pop    edi
100000cc:	68 40 01 00 00       	push   0x140
100000d1:	68 90 01 00 00       	push   0x190
100000d6:	6a 32                	push   0x32
100000d8:	6a 32                	push   0x32
100000da:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000dc: R_386_32	ctxt
100000e0:	50                   	push   eax
100000e1:	e8 fc ff ff ff       	call   100000e2 <NiMain(void*)+0xe2>	100000e2: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000e6:	83 c4 14             	add    esp,0x14
100000e9:	68 8c 01 00 00       	push   0x18c
100000ee:	e8 fc ff ff ff       	call   100000ef <NiMain(void*)+0xef>	100000ef: R_386_PC32	malloc
100000f3:	89 c7                	mov    edi,eax
100000f5:	58                   	pop    eax
100000f6:	5a                   	pop    edx
100000f7:	68 7c 01 00 00       	push   0x17c
100000fc:	68 f4 01 00 00       	push   0x1f4
10000101:	68 96 00 00 00       	push   0x96
10000106:	68 c8 00 00 00       	push   0xc8
1000010b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000010d: R_386_32	ctxt
10000111:	57                   	push   edi
10000112:	e8 fc ff ff ff       	call   10000113 <NiMain(void*)+0x113>	10000113: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10000117:	83 c4 14             	add    esp,0x14
1000011a:	68 8c 01 00 00       	push   0x18c
1000011f:	e8 fc ff ff ff       	call   10000120 <NiMain(void*)+0x120>	10000120: R_386_PC32	malloc
10000124:	59                   	pop    ecx
10000125:	89 c6                	mov    esi,eax
10000127:	58                   	pop    eax
10000128:	68 af 00 00 00       	push   0xaf
1000012d:	68 0e 01 00 00       	push   0x10e
10000132:	68 90 01 00 00       	push   0x190
10000137:	6a 7d                	push   0x7d
10000139:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000013b: R_386_32	ctxt
1000013f:	56                   	push   esi
10000140:	e8 fc ff ff ff       	call   10000141 <NiMain(void*)+0x141>	10000141: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10000145:	83 c4 18             	add    esp,0x18
10000148:	83 8e 88 01 00 00 01 	or     DWORD PTR [esi+0x188],0x1
1000014f:	55                   	push   ebp
10000150:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000152: R_386_32	desktop
10000156:	e8 fc ff ff ff       	call   10000157 <NiMain(void*)+0x157>	10000157: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000015b:	58                   	pop    eax
1000015c:	5a                   	pop    edx
1000015d:	53                   	push   ebx
1000015e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000160: R_386_32	desktop
10000164:	e8 fc ff ff ff       	call   10000165 <NiMain(void*)+0x165>	10000165: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000169:	59                   	pop    ecx
1000016a:	5d                   	pop    ebp
1000016b:	57                   	push   edi
1000016c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000016e: R_386_32	desktop
10000172:	e8 fc ff ff ff       	call   10000173 <NiMain(void*)+0x173>	10000173: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000177:	58                   	pop    eax
10000178:	5a                   	pop    edx
10000179:	56                   	push   esi
1000017a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000017c: R_386_32	desktop
10000180:	e8 fc ff ff ff       	call   10000181 <NiMain(void*)+0x181>	10000181: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000185:	59                   	pop    ecx
10000186:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000188: R_386_32	desktop
1000018c:	e8 fc ff ff ff       	call   1000018d <NiMain(void*)+0x18d>	1000018d: R_386_PC32	NIDesktop::completeRefresh()
10000191:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10000198:	e8 fc ff ff ff       	call   10000199 <NiMain(void*)+0x199>	10000199: R_386_PC32	malloc
1000019d:	83 c4 0c             	add    esp,0xc
100001a0:	89 c5                	mov    ebp,eax
100001a2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100001a4: R_386_32	kernelProcess
100001a8:	68 67 56 00 10       	push   0x10005667	100001a9: R_386_32	.text
100001ad:	50                   	push   eax
100001ae:	e8 fc ff ff ff       	call   100001af <NiMain(void*)+0x1af>	100001af: R_386_PC32	File::File(char const*, Process*)
100001b3:	5e                   	pop    esi
100001b4:	5f                   	pop    edi
100001b5:	6a 01                	push   0x1
100001b7:	55                   	push   ebp
100001b8:	e8 fc ff ff ff       	call   100001b9 <NiMain(void*)+0x1b9>	100001b9: R_386_PC32	File::open(FileOpenMode)
100001bd:	5a                   	pop    edx
100001be:	59                   	pop    ecx
100001bf:	50                   	push   eax
100001c0:	68 86 56 00 10       	push   0x10005686	100001c1: R_386_32	.text
100001c5:	e8 fc ff ff ff       	call   100001c6 <NiMain(void*)+0x1c6>	100001c6: R_386_PC32	Dbg::kprintf(char const*, ...)
100001ca:	83 c4 0c             	add    esp,0xc
100001cd:	8d 44 24 17          	lea    eax,[esp+0x17]
100001d1:	50                   	push   eax
100001d2:	8d 44 24 20          	lea    eax,[esp+0x20]
100001d6:	50                   	push   eax
100001d7:	55                   	push   ebp
100001d8:	e8 fc ff ff ff       	call   100001d9 <NiMain(void*)+0x1d9>	100001d9: R_386_PC32	File::stat(unsigned long long*, bool*)
100001dd:	5e                   	pop    esi
100001de:	5f                   	pop    edi
100001df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100001e3:	68 8f 56 00 10       	push   0x1000568f	100001e4: R_386_32	.text
100001e8:	e8 fc ff ff ff       	call   100001e9 <NiMain(void*)+0x1e9>	100001e9: R_386_PC32	Dbg::kprintf(char const*, ...)
100001ed:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100001f1:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100001f5:	89 34 24             	mov    DWORD PTR [esp],esi
100001f8:	e8 fc ff ff ff       	call   100001f9 <NiMain(void*)+0x1f9>	100001f9: R_386_PC32	malloc
100001fd:	89 c1                	mov    ecx,eax
100001ff:	58                   	pop    eax
10000200:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000203:	8d 54 24 20          	lea    edx,[esp+0x20]
10000207:	52                   	push   edx
10000208:	51                   	push   ecx
10000209:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
1000020d:	57                   	push   edi
1000020e:	56                   	push   esi
1000020f:	55                   	push   ebp
10000210:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10000213:	83 c4 1c             	add    esp,0x1c
10000216:	50                   	push   eax
10000217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000021b:	68 9c 56 00 10       	push   0x1000569c	1000021c: R_386_32	.text
10000220:	e8 fc ff ff ff       	call   10000221 <NiMain(void*)+0x221>	10000221: R_386_PC32	Dbg::kprintf(char const*, ...)
10000225:	5a                   	pop    edx
10000226:	a1 00 00 00 00       	mov    eax,ds:0x0	10000227: R_386_32	screen
1000022b:	8b 30                	mov    esi,DWORD PTR [eax]
1000022d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000231:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10000235:	51                   	push   ecx
10000236:	6a 4b                	push   0x4b
10000238:	6a 35                	push   0x35
1000023a:	50                   	push   eax
1000023b:	ff 56 2c             	call   DWORD PTR [esi+0x2c]
1000023e:	83 c4 14             	add    esp,0x14
10000241:	55                   	push   ebp
10000242:	e8 fc ff ff ff       	call   10000243 <NiMain(void*)+0x243>	10000243: R_386_PC32	File::close()
10000247:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000024a:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000024d:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000250:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10000257:	e8 fc ff ff ff       	call   10000258 <NiMain(void*)+0x258>	10000258: R_386_PC32	malloc
1000025c:	83 c4 0c             	add    esp,0xc
1000025f:	89 c5                	mov    ebp,eax
10000261:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000263: R_386_32	kernelProcess
10000267:	68 ae 56 00 10       	push   0x100056ae	10000268: R_386_32	.text
1000026c:	50                   	push   eax
1000026d:	e8 fc ff ff ff       	call   1000026e <NiMain(void*)+0x26e>	1000026e: R_386_PC32	File::File(char const*, Process*)
10000272:	59                   	pop    ecx
10000273:	5e                   	pop    esi
10000274:	6a 01                	push   0x1
10000276:	55                   	push   ebp
10000277:	e8 fc ff ff ff       	call   10000278 <NiMain(void*)+0x278>	10000278: R_386_PC32	File::open(FileOpenMode)
1000027c:	83 c4 0c             	add    esp,0xc
1000027f:	8d 44 24 17          	lea    eax,[esp+0x17]
10000283:	50                   	push   eax
10000284:	8d 44 24 20          	lea    eax,[esp+0x20]
10000288:	50                   	push   eax
10000289:	55                   	push   ebp
1000028a:	e8 fc ff ff ff       	call   1000028b <NiMain(void*)+0x28b>	1000028b: R_386_PC32	File::stat(unsigned long long*, bool*)
1000028f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000293:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10000297:	89 34 24             	mov    DWORD PTR [esp],esi
1000029a:	e8 fc ff ff ff       	call   1000029b <NiMain(void*)+0x29b>	1000029b: R_386_PC32	malloc
1000029f:	89 c1                	mov    ecx,eax
100002a1:	58                   	pop    eax
100002a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100002a5:	8d 54 24 20          	lea    edx,[esp+0x20]
100002a9:	52                   	push   edx
100002aa:	51                   	push   ecx
100002ab:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
100002af:	57                   	push   edi
100002b0:	56                   	push   esi
100002b1:	55                   	push   ebp
100002b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100002b5:	83 c4 14             	add    esp,0x14
100002b8:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	100002ba: R_386_32	screen
100002be:	8b 3e                	mov    edi,DWORD PTR [esi]
100002c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100002c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100002c8:	51                   	push   ecx
100002c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
100002cf:	83 c0 19             	add    eax,0x19
100002d2:	50                   	push   eax
100002d3:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
100002d9:	83 c0 13             	add    eax,0x13
100002dc:	50                   	push   eax
100002dd:	56                   	push   esi
100002de:	ff 57 2c             	call   DWORD PTR [edi+0x2c]
100002e1:	83 c4 14             	add    esp,0x14
100002e4:	55                   	push   ebp
100002e5:	e8 fc ff ff ff       	call   100002e6 <NiMain(void*)+0x2e6>	100002e6: R_386_PC32	File::close()
100002ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100002ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
100002f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
100002f3:	83 c4 10             	add    esp,0x10
100002f6:	fa                   	cli    
100002f7:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100002f9: R_386_32	irqDisableCounter
100002fd:	e8 fc ff ff ff       	call   100002fe <NiMain(void*)+0x2fe>	100002fe: R_386_PC32	schedule()
10000302:	a1 00 00 00 00       	mov    eax,ds:0x0	10000303: R_386_32	irqDisableCounter
10000307:	48                   	dec    eax
10000308:	a3 00 00 00 00       	mov    ds:0x0,eax	10000309: R_386_32	irqDisableCounter
1000030d:	75 e7                	jne    100002f6 <NiMain(void*)+0x2f6>
1000030f:	fb                   	sti    
10000310:	eb e4                	jmp    100002f6 <NiMain(void*)+0x2f6>
10000312:	66 90                	xchg   ax,ax

10000314 <NiBegin(void*)>:
10000314:	83 ec 18             	sub    esp,0x18
10000317:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000031b:	e8 fc ff ff ff       	call   1000031c <NiBegin(void*)+0x8>	1000031c: R_386_PC32	NiMain(void*)

10000320 <_ssfn__bitreverse16>:
10000320:	89 c2                	mov    edx,eax
10000322:	01 c0                	add    eax,eax
10000324:	d1 fa                	sar    edx,1
10000326:	25 aa aa 00 00       	and    eax,0xaaaa
1000032b:	81 e2 55 55 00 00    	and    edx,0x5555
10000331:	09 c2                	or     edx,eax
10000333:	89 d0                	mov    eax,edx
10000335:	c1 e2 02             	shl    edx,0x2
10000338:	c1 f8 02             	sar    eax,0x2
1000033b:	81 e2 cc cc 00 00    	and    edx,0xcccc
10000341:	25 33 33 00 00       	and    eax,0x3333
10000346:	09 d0                	or     eax,edx
10000348:	89 c2                	mov    edx,eax
1000034a:	c1 e0 04             	shl    eax,0x4
1000034d:	c1 fa 04             	sar    edx,0x4
10000350:	25 f0 f0 00 00       	and    eax,0xf0f0
10000355:	81 e2 0f 0f 00 00    	and    edx,0xf0f
1000035b:	09 c2                	or     edx,eax
1000035d:	89 d1                	mov    ecx,edx
1000035f:	c1 e2 08             	shl    edx,0x8
10000362:	c1 f9 08             	sar    ecx,0x8
10000365:	0f b7 c2             	movzx  eax,dx
10000368:	09 c8                	or     eax,ecx
1000036a:	c3                   	ret    

1000036b <_ssfn__zhuffman_decode>:
1000036b:	55                   	push   ebp
1000036c:	57                   	push   edi
1000036d:	56                   	push   esi
1000036e:	53                   	push   ebx
1000036f:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
10000373:	7f 1d                	jg     10000392 <_ssfn__zhuffman_decode+0x27>
10000375:	8b 18                	mov    ebx,DWORD PTR [eax]
10000377:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000037a:	89 08                	mov    DWORD PTR [eax],ecx
1000037c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
1000037f:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000382:	d3 e3                	shl    ebx,cl
10000384:	83 c1 08             	add    ecx,0x8
10000387:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000038a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
1000038d:	83 f9 18             	cmp    ecx,0x18
10000390:	eb e1                	jmp    10000373 <_ssfn__zhuffman_decode+0x8>
10000392:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
10000395:	89 f9                	mov    ecx,edi
10000397:	81 e1 ff 01 00 00    	and    ecx,0x1ff
1000039d:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
100003a1:	89 cb                	mov    ebx,ecx
100003a3:	85 c9                	test   ecx,ecx
100003a5:	74 15                	je     100003bc <_ssfn__zhuffman_decode+0x51>
100003a7:	c1 f9 09             	sar    ecx,0x9
100003aa:	89 da                	mov    edx,ebx
100003ac:	d3 ef                	shr    edi,cl
100003ae:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
100003b1:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
100003b4:	81 e2 ff 01 00 00    	and    edx,0x1ff
100003ba:	eb 58                	jmp    10000414 <_ssfn__zhuffman_decode+0xa9>
100003bc:	89 d5                	mov    ebp,edx
100003be:	89 c3                	mov    ebx,eax
100003c0:	be 0a 00 00 00       	mov    esi,0xa
100003c5:	89 f8                	mov    eax,edi
100003c7:	e8 54 ff ff ff       	call   10000320 <_ssfn__bitreverse16>
100003cc:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
100003d3:	7c 03                	jl     100003d8 <_ssfn__zhuffman_decode+0x6d>
100003d5:	46                   	inc    esi
100003d6:	eb f4                	jmp    100003cc <_ssfn__zhuffman_decode+0x61>
100003d8:	83 ca ff             	or     edx,0xffffffff
100003db:	83 fe 10             	cmp    esi,0x10
100003de:	74 34                	je     10000414 <_ssfn__zhuffman_decode+0xa9>
100003e0:	8d 14 36             	lea    edx,[esi+esi*1]
100003e3:	b9 10 00 00 00       	mov    ecx,0x10
100003e8:	01 ea                	add    edx,ebp
100003ea:	29 f1                	sub    ecx,esi
100003ec:	d3 f8                	sar    eax,cl
100003ee:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
100003f5:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
100003fc:	29 c8                	sub    eax,ecx
100003fe:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
10000401:	89 f1                	mov    ecx,esi
10000403:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
1000040a:	d3 ef                	shr    edi,cl
1000040c:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
1000040f:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
10000414:	5b                   	pop    ebx
10000415:	89 d0                	mov    eax,edx
10000417:	5e                   	pop    esi
10000418:	5f                   	pop    edi
10000419:	5d                   	pop    ebp
1000041a:	c3                   	ret    

1000041b <_ssfn__zexpand>:
1000041b:	55                   	push   ebp
1000041c:	57                   	push   edi
1000041d:	56                   	push   esi
1000041e:	53                   	push   ebx
1000041f:	83 ec 0c             	sub    esp,0xc
10000422:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10000425:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
10000428:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
1000042b:	29 f9                	sub    ecx,edi
1000042d:	83 f9 08             	cmp    ecx,0x8
10000430:	74 04                	je     10000436 <_ssfn__zexpand+0x1b>
10000432:	31 c0                	xor    eax,eax
10000434:	eb 3c                	jmp    10000472 <_ssfn__zexpand+0x57>
10000436:	80 3f 53             	cmp    BYTE PTR [edi],0x53
10000439:	75 f7                	jne    10000432 <_ssfn__zexpand+0x17>
1000043b:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
1000043f:	75 f1                	jne    10000432 <_ssfn__zexpand+0x17>
10000441:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
10000445:	75 eb                	jne    10000432 <_ssfn__zexpand+0x17>
10000447:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
1000044a:	89 c3                	mov    ebx,eax
1000044c:	89 d6                	mov    esi,edx
1000044e:	50                   	push   eax
1000044f:	50                   	push   eax
10000450:	55                   	push   ebp
10000451:	57                   	push   edi
10000452:	e8 fc ff ff ff       	call   10000453 <_ssfn__zexpand+0x38>	10000453: R_386_PC32	realloc
10000457:	83 c4 10             	add    esp,0x10
1000045a:	85 c0                	test   eax,eax
1000045c:	74 d4                	je     10000432 <_ssfn__zexpand+0x17>
1000045e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000461:	29 fe                	sub    esi,edi
10000463:	01 c6                	add    esi,eax
10000465:	01 e8                	add    eax,ebp
10000467:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
1000046a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
1000046d:	b8 01 00 00 00       	mov    eax,0x1
10000472:	83 c4 0c             	add    esp,0xc
10000475:	5b                   	pop    ebx
10000476:	5e                   	pop    esi
10000477:	5f                   	pop    edi
10000478:	5d                   	pop    ebp
10000479:	c3                   	ret    

1000047a <_ssfn__zbuild_huffman>:
1000047a:	55                   	push   ebp
1000047b:	57                   	push   edi
1000047c:	56                   	push   esi
1000047d:	53                   	push   ebx
1000047e:	89 c3                	mov    ebx,eax
10000480:	81 ec a0 00 00 00    	sub    esp,0xa0
10000486:	31 c0                	xor    eax,eax
10000488:	89 0c 24             	mov    DWORD PTR [esp],ecx
1000048b:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
1000048f:	b9 11 00 00 00       	mov    ecx,0x11
10000494:	89 ef                	mov    edi,ebp
10000496:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
1000049a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000049c:	b9 00 01 00 00       	mov    ecx,0x100
100004a1:	89 df                	mov    edi,ebx
100004a3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100004a5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
100004a8:	7d 0f                	jge    100004b9 <_ssfn__zbuild_huffman+0x3f>
100004aa:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
100004ae:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
100004b2:	40                   	inc    eax
100004b3:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
100004b7:	eb ec                	jmp    100004a5 <_ssfn__zbuild_huffman+0x2b>
100004b9:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
100004c1:	b9 01 00 00 00       	mov    ecx,0x1
100004c6:	b8 01 00 00 00       	mov    eax,0x1
100004cb:	89 c7                	mov    edi,eax
100004cd:	d3 e7                	shl    edi,cl
100004cf:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
100004d3:	0f 8f 10 01 00 00    	jg     100005e9 <_ssfn__zbuild_huffman+0x16f>
100004d9:	41                   	inc    ecx
100004da:	83 f9 10             	cmp    ecx,0x10
100004dd:	75 ec                	jne    100004cb <_ssfn__zbuild_huffman+0x51>
100004df:	31 ff                	xor    edi,edi
100004e1:	31 f6                	xor    esi,esi
100004e3:	b8 01 00 00 00       	mov    eax,0x1
100004e8:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
100004ec:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
100004f0:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
100004f8:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
10000500:	01 ef                	add    edi,ebp
10000502:	85 ed                	test   ebp,ebp
10000504:	74 11                	je     10000517 <_ssfn__zbuild_huffman+0x9d>
10000506:	ba 01 00 00 00       	mov    edx,0x1
1000050b:	88 c1                	mov    cl,al
1000050d:	d3 e2                	shl    edx,cl
1000050f:	39 fa                	cmp    edx,edi
10000511:	0f 8c d2 00 00 00    	jl     100005e9 <_ssfn__zbuild_huffman+0x16f>
10000517:	89 fa                	mov    edx,edi
10000519:	b9 10 00 00 00       	mov    ecx,0x10
1000051e:	01 ff                	add    edi,edi
10000520:	29 c1                	sub    ecx,eax
10000522:	01 ee                	add    esi,ebp
10000524:	d3 e2                	shl    edx,cl
10000526:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
1000052d:	40                   	inc    eax
1000052e:	83 f8 10             	cmp    eax,0x10
10000531:	75 b5                	jne    100004e8 <_ssfn__zbuild_huffman+0x6e>
10000533:	8b 04 24             	mov    eax,DWORD PTR [esp]
10000536:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
10000540:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000544:	31 ff                	xor    edi,edi
10000546:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
1000054a:	0f 8d 9d 00 00 00    	jge    100005ed <_ssfn__zbuild_huffman+0x173>
10000550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000554:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
10000558:	89 f2                	mov    edx,esi
1000055a:	85 f6                	test   esi,esi
1000055c:	0f 84 81 00 00 00    	je     100005e3 <_ssfn__zbuild_huffman+0x169>
10000562:	8d 0c 36             	lea    ecx,[esi+esi*1]
10000565:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
10000569:	8d 04 19             	lea    eax,[ecx+ebx*1]
1000056c:	89 e9                	mov    ecx,ebp
1000056e:	89 04 24             	mov    DWORD PTR [esp],eax
10000571:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
10000578:	29 c1                	sub    ecx,eax
1000057a:	89 c8                	mov    eax,ecx
1000057c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000057f:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
10000586:	01 c8                	add    eax,ecx
10000588:	83 fe 09             	cmp    esi,0x9
1000058b:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
10000592:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
1000059a:	7f 42                	jg     100005de <_ssfn__zbuild_huffman+0x164>
1000059c:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
100005a0:	89 e8                	mov    eax,ebp
100005a2:	e8 79 fd ff ff       	call   10000320 <_ssfn__bitreverse16>
100005a7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
100005ab:	b9 10 00 00 00       	mov    ecx,0x10
100005b0:	29 f1                	sub    ecx,esi
100005b2:	d3 f8                	sar    eax,cl
100005b4:	88 d1                	mov    cl,dl
100005b6:	89 04 24             	mov    DWORD PTR [esp],eax
100005b9:	89 f2                	mov    edx,esi
100005bb:	b8 01 00 00 00       	mov    eax,0x1
100005c0:	c1 e2 09             	shl    edx,0x9
100005c3:	d3 e0                	shl    eax,cl
100005c5:	09 fa                	or     edx,edi
100005c7:	89 c1                	mov    ecx,eax
100005c9:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
100005d0:	7f 0c                	jg     100005de <_ssfn__zbuild_huffman+0x164>
100005d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
100005d5:	01 0c 24             	add    DWORD PTR [esp],ecx
100005d8:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
100005dc:	eb eb                	jmp    100005c9 <_ssfn__zbuild_huffman+0x14f>
100005de:	45                   	inc    ebp
100005df:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
100005e3:	47                   	inc    edi
100005e4:	e9 5d ff ff ff       	jmp    10000546 <_ssfn__zbuild_huffman+0xcc>
100005e9:	31 c0                	xor    eax,eax
100005eb:	eb 05                	jmp    100005f2 <_ssfn__zbuild_huffman+0x178>
100005ed:	b8 01 00 00 00       	mov    eax,0x1
100005f2:	81 c4 a0 00 00 00    	add    esp,0xa0
100005f8:	5b                   	pop    ebx
100005f9:	5e                   	pop    esi
100005fa:	5f                   	pop    edi
100005fb:	5d                   	pop    ebp
100005fc:	c3                   	ret    

100005fd <_ssfn_fc.part.1>:
100005fd:	55                   	push   ebp
100005fe:	57                   	push   edi
100005ff:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
10000605:	56                   	push   esi
10000606:	53                   	push   ebx
10000607:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
1000060d:	83 ec 0c             	sub    esp,0xc
10000610:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10000613:	74 5d                	je     10000672 <_ssfn_fc.part.1+0x75>
10000615:	31 f6                	xor    esi,esi
10000617:	8b 03                	mov    eax,DWORD PTR [ebx]
10000619:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
1000061d:	74 35                	je     10000654 <_ssfn_fc.part.1+0x57>
1000061f:	31 ed                	xor    ebp,ebp
10000621:	8b 03                	mov    eax,DWORD PTR [ebx]
10000623:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
10000626:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
10000629:	85 c0                	test   eax,eax
1000062b:	74 0c                	je     10000639 <_ssfn_fc.part.1+0x3c>
1000062d:	83 ec 0c             	sub    esp,0xc
10000630:	50                   	push   eax
10000631:	e8 fc ff ff ff       	call   10000632 <_ssfn_fc.part.1+0x35>	10000632: R_386_PC32	free
10000636:	83 c4 10             	add    esp,0x10
10000639:	83 c5 04             	add    ebp,0x4
1000063c:	81 fd 00 04 00 00    	cmp    ebp,0x400
10000642:	75 dd                	jne    10000621 <_ssfn_fc.part.1+0x24>
10000644:	83 ec 0c             	sub    esp,0xc
10000647:	8b 03                	mov    eax,DWORD PTR [ebx]
10000649:	ff 34 30             	push   DWORD PTR [eax+esi*1]
1000064c:	e8 fc ff ff ff       	call   1000064d <_ssfn_fc.part.1+0x50>	1000064d: R_386_PC32	free
10000651:	83 c4 10             	add    esp,0x10
10000654:	83 c6 04             	add    esi,0x4
10000657:	81 fe 00 04 00 00    	cmp    esi,0x400
1000065d:	75 b8                	jne    10000617 <_ssfn_fc.part.1+0x1a>
1000065f:	83 ec 0c             	sub    esp,0xc
10000662:	ff 33                	push   DWORD PTR [ebx]
10000664:	e8 fc ff ff ff       	call   10000665 <_ssfn_fc.part.1+0x68>	10000665: R_386_PC32	free
10000669:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
1000066f:	83 c4 10             	add    esp,0x10
10000672:	83 c3 04             	add    ebx,0x4
10000675:	39 fb                	cmp    ebx,edi
10000677:	75 97                	jne    10000610 <_ssfn_fc.part.1+0x13>
10000679:	83 c4 0c             	add    esp,0xc
1000067c:	5b                   	pop    ebx
1000067d:	5e                   	pop    esi
1000067e:	5f                   	pop    edi
1000067f:	5d                   	pop    ebp
10000680:	c3                   	ret    

10000681 <_ssfn_l>:
10000681:	57                   	push   edi
10000682:	56                   	push   esi
10000683:	53                   	push   ebx
10000684:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000688:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000068c:	39 ce                	cmp    esi,ecx
1000068e:	89 f3                	mov    ebx,esi
10000690:	0f 9d c1             	setge  cl
10000693:	c1 eb 1f             	shr    ebx,0x1f
10000696:	09 d9                	or     ecx,ebx
10000698:	89 fb                	mov    ebx,edi
1000069a:	c1 eb 1f             	shr    ebx,0x1f
1000069d:	08 d9                	or     cl,bl
1000069f:	0f 85 e9 00 00 00    	jne    1000078e <_ssfn_l+0x10d>
100006a5:	39 d7                	cmp    edi,edx
100006a7:	0f 8d e1 00 00 00    	jge    1000078e <_ssfn_l+0x10d>
100006ad:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
100006b3:	8d 51 08             	lea    edx,[ecx+0x8]
100006b6:	8d 4f 08             	lea    ecx,[edi+0x8]
100006b9:	c1 fa 04             	sar    edx,0x4
100006bc:	c1 f9 04             	sar    ecx,0x4
100006bf:	39 ca                	cmp    edx,ecx
100006c1:	75 1a                	jne    100006dd <_ssfn_l+0x5c>
100006c3:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
100006c9:	8d 4e 08             	lea    ecx,[esi+0x8]
100006cc:	83 c2 08             	add    edx,0x8
100006cf:	c1 f9 04             	sar    ecx,0x4
100006d2:	c1 fa 04             	sar    edx,0x4
100006d5:	39 ca                	cmp    edx,ecx
100006d7:	0f 84 b1 00 00 00    	je     1000078e <_ssfn_l+0x10d>
100006dd:	89 c3                	mov    ebx,eax
100006df:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
100006e5:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
100006eb:	7f 3e                	jg     1000072b <_ssfn_l+0xaa>
100006ed:	05 00 02 00 00       	add    eax,0x200
100006f2:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
100006f8:	52                   	push   edx
100006f9:	01 c0                	add    eax,eax
100006fb:	52                   	push   edx
100006fc:	50                   	push   eax
100006fd:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
10000703:	e8 fc ff ff ff       	call   10000704 <_ssfn_l+0x83>	10000704: R_386_PC32	realloc
10000708:	83 c4 10             	add    esp,0x10
1000070b:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
10000711:	85 c0                	test   eax,eax
10000713:	75 16                	jne    1000072b <_ssfn_l+0xaa>
10000715:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
1000071f:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
10000729:	eb 63                	jmp    1000078e <_ssfn_l+0x10d>
1000072b:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
10000732:	75 26                	jne    1000075a <_ssfn_l+0xd9>
10000734:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000073a:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
10000740:	66 89 10             	mov    WORD PTR [eax],dx
10000743:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000749:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
1000074f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
10000753:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
1000075a:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000760:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000766:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
1000076a:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000770:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000776:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
1000077b:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10000781:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000788:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
1000078e:	5b                   	pop    ebx
1000078f:	5e                   	pop    esi
10000790:	5f                   	pop    edi
10000791:	c3                   	ret    

10000792 <_ssfn_b>:
10000792:	55                   	push   ebp
10000793:	57                   	push   edi
10000794:	56                   	push   esi
10000795:	53                   	push   ebx
10000796:	83 ec 4c             	sub    esp,0x4c
10000799:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000079d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
100007a1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100007a5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
100007a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100007ad:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
100007b1:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100007b5:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
100007b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100007bd:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
100007c1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100007c5:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
100007c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100007cd:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100007d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100007d5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100007dc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100007e0:	83 f8 04             	cmp    eax,0x4
100007e3:	75 28                	jne    1000080d <_ssfn_b+0x7b>
100007e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100007e9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100007ed:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100007f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
100007f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100007f9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
100007fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10000801:	83 c4 4c             	add    esp,0x4c
10000804:	5b                   	pop    ebx
10000805:	5e                   	pop    esi
10000806:	5f                   	pop    edi
10000807:	5d                   	pop    ebp
10000808:	e9 74 fe ff ff       	jmp    10000681 <_ssfn_l>
1000080d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000811:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
10000815:	75 0e                	jne    10000825 <_ssfn_b+0x93>
10000817:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
1000081b:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
1000081f:	0f 84 19 01 00 00    	je     1000093e <_ssfn_b+0x1ac>
10000825:	be 02 00 00 00       	mov    esi,0x2
1000082a:	89 d8                	mov    eax,ebx
1000082c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000830:	99                   	cdq    
10000831:	f7 fe                	idiv   esi
10000833:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10000837:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000083b:	89 e8                	mov    eax,ebp
1000083d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000841:	99                   	cdq    
10000842:	f7 fe                	idiv   esi
10000844:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
10000848:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000084c:	89 f8                	mov    eax,edi
1000084e:	29 d8                	sub    eax,ebx
10000850:	99                   	cdq    
10000851:	f7 fe                	idiv   esi
10000853:	01 c3                	add    ebx,eax
10000855:	89 c8                	mov    eax,ecx
10000857:	29 e8                	sub    eax,ebp
10000859:	99                   	cdq    
1000085a:	f7 fe                	idiv   esi
1000085c:	01 e8                	add    eax,ebp
1000085e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000866:	29 f8                	sub    eax,edi
10000868:	99                   	cdq    
10000869:	f7 fe                	idiv   esi
1000086b:	01 f8                	add    eax,edi
1000086d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000871:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10000875:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000879:	29 c8                	sub    eax,ecx
1000087b:	99                   	cdq    
1000087c:	f7 fe                	idiv   esi
1000087e:	01 c8                	add    eax,ecx
10000880:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10000884:	89 d8                	mov    eax,ebx
10000886:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
1000088a:	99                   	cdq    
1000088b:	f7 fe                	idiv   esi
1000088d:	8d 0c 38             	lea    ecx,[eax+edi*1]
10000890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000894:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10000898:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
1000089c:	99                   	cdq    
1000089d:	f7 fe                	idiv   esi
1000089f:	8d 2c 38             	lea    ebp,[eax+edi*1]
100008a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100008a6:	29 d8                	sub    eax,ebx
100008a8:	99                   	cdq    
100008a9:	f7 fe                	idiv   esi
100008ab:	83 ec 0c             	sub    esp,0xc
100008ae:	01 d8                	add    eax,ebx
100008b0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100008b4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100008b8:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
100008bc:	99                   	cdq    
100008bd:	f7 fe                	idiv   esi
100008bf:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
100008c3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100008c7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100008cb:	29 c8                	sub    eax,ecx
100008cd:	99                   	cdq    
100008ce:	f7 fe                	idiv   esi
100008d0:	8d 1c 08             	lea    ebx,[eax+ecx*1]
100008d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100008d7:	29 e8                	sub    eax,ebp
100008d9:	99                   	cdq    
100008da:	f7 fe                	idiv   esi
100008dc:	8d 34 28             	lea    esi,[eax+ebp*1]
100008df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100008e3:	8d 78 01             	lea    edi,[eax+0x1]
100008e6:	57                   	push   edi
100008e7:	56                   	push   esi
100008e8:	53                   	push   ebx
100008e9:	55                   	push   ebp
100008ea:	51                   	push   ecx
100008eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100008ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100008f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100008f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100008fb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100008ff:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
10000903:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000907:	e8 86 fe ff ff       	call   10000792 <_ssfn_b>
1000090c:	83 c4 24             	add    esp,0x24
1000090f:	57                   	push   edi
10000910:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000914:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000918:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
1000091c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000920:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
10000924:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
10000928:	56                   	push   esi
10000929:	53                   	push   ebx
1000092a:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
1000092e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
10000932:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000936:	e8 57 fe ff ff       	call   10000792 <_ssfn_b>
1000093b:	83 c4 30             	add    esp,0x30
1000093e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10000943:	0f 85 9c fe ff ff    	jne    100007e5 <_ssfn_b+0x53>
10000949:	83 c4 4c             	add    esp,0x4c
1000094c:	5b                   	pop    ebx
1000094d:	5e                   	pop    esi
1000094e:	5f                   	pop    edi
1000094f:	5d                   	pop    ebp
10000950:	c3                   	ret    

10000951 <_ssfn__zreceive>:
10000951:	56                   	push   esi
10000952:	53                   	push   ebx
10000953:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
10000956:	7d 1d                	jge    10000975 <_ssfn__zreceive+0x24>
10000958:	8b 18                	mov    ebx,DWORD PTR [eax]
1000095a:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000095d:	89 08                	mov    DWORD PTR [eax],ecx
1000095f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000962:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000965:	d3 e3                	shl    ebx,cl
10000967:	83 c1 08             	add    ecx,0x8
1000096a:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000096d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000970:	83 f9 18             	cmp    ecx,0x18
10000973:	7e e3                	jle    10000958 <_ssfn__zreceive+0x7>
10000975:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
10000978:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
1000097b:	89 f3                	mov    ebx,esi
1000097d:	88 d1                	mov    cl,dl
1000097f:	d3 eb                	shr    ebx,cl
10000981:	88 d1                	mov    cl,dl
10000983:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10000986:	bb 01 00 00 00       	mov    ebx,0x1
1000098b:	d3 e3                	shl    ebx,cl
1000098d:	8d 43 ff             	lea    eax,[ebx-0x1]
10000990:	5b                   	pop    ebx
10000991:	21 f0                	and    eax,esi
10000993:	5e                   	pop    esi
10000994:	c3                   	ret    

10000995 <ssfn_utf8>:
10000995:	56                   	push   esi
10000996:	53                   	push   ebx
10000997:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000099b:	8b 11                	mov    edx,DWORD PTR [ecx]
1000099d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
100009a0:	89 f0                	mov    eax,esi
100009a2:	84 c0                	test   al,al
100009a4:	0f be d8             	movsx  ebx,al
100009a7:	78 04                	js     100009ad <ssfn_utf8+0x18>
100009a9:	89 d8                	mov    eax,ebx
100009ab:	eb 7d                	jmp    10000a2a <ssfn_utf8+0x95>
100009ad:	f7 c6 20 00 00 00    	test   esi,0x20
100009b3:	75 14                	jne    100009c9 <ssfn_utf8+0x34>
100009b5:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
100009b8:	c1 e3 06             	shl    ebx,0x6
100009bb:	83 e0 3f             	and    eax,0x3f
100009be:	81 e3 c0 07 00 00    	and    ebx,0x7c0
100009c4:	42                   	inc    edx
100009c5:	09 d8                	or     eax,ebx
100009c7:	eb 5f                	jmp    10000a28 <ssfn_utf8+0x93>
100009c9:	f7 c6 10 00 00 00    	test   esi,0x10
100009cf:	75 20                	jne    100009f1 <ssfn_utf8+0x5c>
100009d1:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100009d5:	c1 e3 0c             	shl    ebx,0xc
100009d8:	c1 e0 06             	shl    eax,0x6
100009db:	0f b7 db             	movzx  ebx,bx
100009de:	25 c0 0f 00 00       	and    eax,0xfc0
100009e3:	83 c2 02             	add    edx,0x2
100009e6:	09 d8                	or     eax,ebx
100009e8:	8a 1a                	mov    bl,BYTE PTR [edx]
100009ea:	83 e3 3f             	and    ebx,0x3f
100009ed:	09 d8                	or     eax,ebx
100009ef:	eb 37                	jmp    10000a28 <ssfn_utf8+0x93>
100009f1:	31 c0                	xor    eax,eax
100009f3:	83 e6 08             	and    esi,0x8
100009f6:	75 32                	jne    10000a2a <ssfn_utf8+0x95>
100009f8:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100009fc:	c1 e3 12             	shl    ebx,0x12
100009ff:	c1 e0 0c             	shl    eax,0xc
10000a02:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
10000a08:	25 00 f0 03 00       	and    eax,0x3f000
10000a0d:	83 c2 03             	add    edx,0x3
10000a10:	09 d8                	or     eax,ebx
10000a12:	8a 1a                	mov    bl,BYTE PTR [edx]
10000a14:	83 e3 3f             	and    ebx,0x3f
10000a17:	09 d8                	or     eax,ebx
10000a19:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
10000a1d:	c1 e3 06             	shl    ebx,0x6
10000a20:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
10000a26:	09 d8                	or     eax,ebx
10000a28:	89 11                	mov    DWORD PTR [ecx],edx
10000a2a:	ff 01                	inc    DWORD PTR [ecx]
10000a2c:	5b                   	pop    ebx
10000a2d:	5e                   	pop    esi
10000a2e:	c3                   	ret    

10000a2f <_ssfn_c>:
10000a2f:	55                   	push   ebp
10000a30:	57                   	push   edi
10000a31:	56                   	push   esi
10000a32:	53                   	push   ebx
10000a33:	83 ec 14             	sub    esp,0x14
10000a36:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
10000a3c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000a40:	85 c0                	test   eax,eax
10000a42:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
10000a48:	0f 84 e6 00 00 00    	je     10000b34 <_ssfn_c+0x105>
10000a4e:	31 ff                	xor    edi,edi
10000a50:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
10000a54:	0f 84 f3 00 00 00    	je     10000b4d <_ssfn_c+0x11e>
10000a5a:	85 d2                	test   edx,edx
10000a5c:	0f 84 eb 00 00 00    	je     10000b4d <_ssfn_c+0x11e>
10000a62:	80 3a 00             	cmp    BYTE PTR [edx],0x0
10000a65:	0f 84 e2 00 00 00    	je     10000b4d <_ssfn_c+0x11e>
10000a6b:	89 d6                	mov    esi,edx
10000a6d:	89 cd                	mov    ebp,ecx
10000a6f:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000a72:	89 c3                	mov    ebx,eax
10000a74:	85 d2                	test   edx,edx
10000a76:	74 38                	je     10000ab0 <_ssfn_c+0x81>
10000a78:	8d 0c 13             	lea    ecx,[ebx+edx*1]
10000a7b:	31 c0                	xor    eax,eax
10000a7d:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000a80:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000a83:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
10000a87:	66 85 d2             	test   dx,dx
10000a8a:	74 24                	je     10000ab0 <_ssfn_c+0x81>
10000a8c:	01 da                	add    edx,ebx
10000a8e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000a92:	8a 0a                	mov    cl,BYTE PTR [edx]
10000a94:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000a98:	84 c9                	test   cl,cl
10000a9a:	0f 84 9e 00 00 00    	je     10000b3e <_ssfn_c+0x10f>
10000aa0:	3a 0f                	cmp    cl,BYTE PTR [edi]
10000aa2:	0f 85 90 00 00 00    	jne    10000b38 <_ssfn_c+0x109>
10000aa8:	47                   	inc    edi
10000aa9:	42                   	inc    edx
10000aaa:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10000aae:	eb e2                	jmp    10000a92 <_ssfn_c+0x63>
10000ab0:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000ab4:	8d 44 24 10          	lea    eax,[esp+0x10]
10000ab8:	50                   	push   eax
10000ab9:	e8 fc ff ff ff       	call   10000aba <_ssfn_c+0x8b>	10000aba: R_386_PC32	ssfn_utf8
10000abe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000ac2:	29 f2                	sub    edx,esi
10000ac4:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
10000ac7:	5a                   	pop    edx
10000ac8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000acc:	89 06                	mov    DWORD PTR [esi],eax
10000ace:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
10000ad1:	89 df                	mov    edi,ebx
10000ad3:	31 db                	xor    ebx,ebx
10000ad5:	8a 17                	mov    dl,BYTE PTR [edi]
10000ad7:	80 fa ff             	cmp    dl,0xff
10000ada:	75 08                	jne    10000ae4 <_ssfn_c+0xb5>
10000adc:	81 c3 ff ff 00 00    	add    ebx,0xffff
10000ae2:	eb 2a                	jmp    10000b0e <_ssfn_c+0xdf>
10000ae4:	88 d1                	mov    cl,dl
10000ae6:	83 e1 c0             	and    ecx,0xffffffc0
10000ae9:	80 f9 c0             	cmp    cl,0xc0
10000aec:	75 16                	jne    10000b04 <_ssfn_c+0xd5>
10000aee:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000af2:	c1 e2 08             	shl    edx,0x8
10000af5:	83 c7 02             	add    edi,0x2
10000af8:	81 e2 00 3f 00 00    	and    edx,0x3f00
10000afe:	09 ca                	or     edx,ecx
10000b00:	01 d3                	add    ebx,edx
10000b02:	eb 27                	jmp    10000b2b <_ssfn_c+0xfc>
10000b04:	80 f9 80             	cmp    cl,0x80
10000b07:	75 08                	jne    10000b11 <_ssfn_c+0xe2>
10000b09:	83 e2 3f             	and    edx,0x3f
10000b0c:	01 d3                	add    ebx,edx
10000b0e:	47                   	inc    edi
10000b0f:	eb 1a                	jmp    10000b2b <_ssfn_c+0xfc>
10000b11:	39 d8                	cmp    eax,ebx
10000b13:	74 38                	je     10000b4d <_ssfn_c+0x11e>
10000b15:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000b19:	83 e2 40             	and    edx,0x40
10000b1c:	80 fa 01             	cmp    dl,0x1
10000b1f:	19 d2                	sbb    edx,edx
10000b21:	83 c2 06             	add    edx,0x6
10000b24:	0f af d1             	imul   edx,ecx
10000b27:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
10000b2b:	43                   	inc    ebx
10000b2c:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
10000b32:	76 a1                	jbe    10000ad5 <_ssfn_c+0xa6>
10000b34:	31 ff                	xor    edi,edi
10000b36:	eb 15                	jmp    10000b4d <_ssfn_c+0x11e>
10000b38:	40                   	inc    eax
10000b39:	e9 42 ff ff ff       	jmp    10000a80 <_ssfn_c+0x51>
10000b3e:	29 f7                	sub    edi,esi
10000b40:	05 00 f0 00 00       	add    eax,0xf000
10000b45:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
10000b48:	e9 7b ff ff ff       	jmp    10000ac8 <_ssfn_c+0x99>
10000b4d:	83 c4 14             	add    esp,0x14
10000b50:	89 f8                	mov    eax,edi
10000b52:	5b                   	pop    ebx
10000b53:	5e                   	pop    esi
10000b54:	5f                   	pop    edi
10000b55:	5d                   	pop    ebp
10000b56:	c3                   	ret    

10000b57 <_ssfn_zlib_decode>:
10000b57:	55                   	push   ebp
10000b58:	57                   	push   edi
10000b59:	56                   	push   esi
10000b5a:	53                   	push   ebx
10000b5b:	81 ec c8 19 00 00    	sub    esp,0x19c8
10000b61:	6a 08                	push   0x8
10000b63:	e8 fc ff ff ff       	call   10000b64 <_ssfn_zlib_decode+0xd>	10000b64: R_386_PC32	malloc
10000b68:	83 c4 10             	add    esp,0x10
10000b6b:	89 c2                	mov    edx,eax
10000b6d:	85 c0                	test   eax,eax
10000b6f:	0f 84 eb 04 00 00    	je     10001060 <_ssfn_zlib_decode+0x509>
10000b75:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
10000b7c:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
10000b83:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
10000b8a:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
10000b91:	31 c0                	xor    eax,eax
10000b93:	83 c2 08             	add    edx,0x8
10000b96:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
10000b9d:	c6 80 60 5c 03 10 08 	mov    BYTE PTR [eax+0x10035c60],0x8	10000b9f: R_386_32	.bss
10000ba4:	40                   	inc    eax
10000ba5:	3d 90 00 00 00       	cmp    eax,0x90
10000baa:	75 f1                	jne    10000b9d <_ssfn_zlib_decode+0x46>
10000bac:	c6 80 60 5c 03 10 09 	mov    BYTE PTR [eax+0x10035c60],0x9	10000bae: R_386_32	.bss
10000bb3:	40                   	inc    eax
10000bb4:	3d 00 01 00 00       	cmp    eax,0x100
10000bb9:	75 f1                	jne    10000bac <_ssfn_zlib_decode+0x55>
10000bbb:	c6 80 60 5c 03 10 07 	mov    BYTE PTR [eax+0x10035c60],0x7	10000bbd: R_386_32	.bss
10000bc2:	40                   	inc    eax
10000bc3:	3d 18 01 00 00       	cmp    eax,0x118
10000bc8:	75 f1                	jne    10000bbb <_ssfn_zlib_decode+0x64>
10000bca:	c7 05 78 5d 03 10 08 08 08 08 	mov    DWORD PTR ds:0x10035d78,0x8080808	10000bcc: R_386_32	.bss
10000bd4:	c7 05 7c 5d 03 10 08 08 08 08 	mov    DWORD PTR ds:0x10035d7c,0x8080808	10000bd6: R_386_32	.bss
10000bde:	31 c0                	xor    eax,eax
10000be0:	c6 80 40 5c 03 10 05 	mov    BYTE PTR [eax+0x10035c40],0x5	10000be2: R_386_32	.bss
10000be7:	40                   	inc    eax
10000be8:	83 f8 20             	cmp    eax,0x20
10000beb:	75 f3                	jne    10000be0 <_ssfn_zlib_decode+0x89>
10000bed:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
10000bf8:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
10000c03:	ba 01 00 00 00       	mov    edx,0x1
10000c08:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c0f:	e8 3d fd ff ff       	call   10000951 <_ssfn__zreceive>
10000c14:	ba 02 00 00 00       	mov    edx,0x2
10000c19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000c1d:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c24:	e8 28 fd ff ff       	call   10000951 <_ssfn__zreceive>
10000c29:	89 c6                	mov    esi,eax
10000c2b:	85 c0                	test   eax,eax
10000c2d:	0f 85 09 01 00 00    	jne    10000d3c <_ssfn_zlib_decode+0x1e5>
10000c33:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000c3a:	83 e2 07             	and    edx,0x7
10000c3d:	74 0c                	je     10000c4b <_ssfn_zlib_decode+0xf4>
10000c3f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c46:	e8 06 fd ff ff       	call   10000951 <_ssfn__zreceive>
10000c4b:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000c52:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000c59:	31 c0                	xor    eax,eax
10000c5b:	31 db                	xor    ebx,ebx
10000c5d:	85 d2                	test   edx,edx
10000c5f:	7f 14                	jg     10000c75 <_ssfn_zlib_decode+0x11e>
10000c61:	84 db                	test   bl,bl
10000c63:	74 22                	je     10000c87 <_ssfn_zlib_decode+0x130>
10000c65:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000c6c:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000c73:	eb 12                	jmp    10000c87 <_ssfn_zlib_decode+0x130>
10000c75:	40                   	inc    eax
10000c76:	83 ea 08             	sub    edx,0x8
10000c79:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000c80:	b3 01                	mov    bl,0x1
10000c82:	c1 e9 08             	shr    ecx,0x8
10000c85:	eb d6                	jmp    10000c5d <_ssfn_zlib_decode+0x106>
10000c87:	83 f8 04             	cmp    eax,0x4
10000c8a:	74 1d                	je     10000ca9 <_ssfn_zlib_decode+0x152>
10000c8c:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000c93:	40                   	inc    eax
10000c94:	8d 4a 01             	lea    ecx,[edx+0x1]
10000c97:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000c9e:	8a 12                	mov    dl,BYTE PTR [edx]
10000ca0:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000ca7:	eb de                	jmp    10000c87 <_ssfn_zlib_decode+0x130>
10000ca9:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000cb1:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000cb9:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000cc1:	c1 e3 08             	shl    ebx,0x8
10000cc4:	01 c3                	add    ebx,eax
10000cc6:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000cce:	c1 e0 08             	shl    eax,0x8
10000cd1:	01 d0                	add    eax,edx
10000cd3:	89 da                	mov    edx,ebx
10000cd5:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000cdb:	39 d0                	cmp    eax,edx
10000cdd:	0f 85 69 03 00 00    	jne    1000104c <_ssfn_zlib_decode+0x4f5>
10000ce3:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000cea:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000ced:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000cf4:	73 14                	jae    10000d0a <_ssfn_zlib_decode+0x1b3>
10000cf6:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000cfd:	e8 19 f7 ff ff       	call   1000041b <_ssfn__zexpand>
10000d02:	85 c0                	test   eax,eax
10000d04:	0f 84 42 03 00 00    	je     1000104c <_ssfn_zlib_decode+0x4f5>
10000d0a:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000d11:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000d18:	39 f3                	cmp    ebx,esi
10000d1a:	74 09                	je     10000d25 <_ssfn_zlib_decode+0x1ce>
10000d1c:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000d1f:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000d22:	46                   	inc    esi
10000d23:	eb e5                	jmp    10000d0a <_ssfn_zlib_decode+0x1b3>
10000d25:	01 da                	add    edx,ebx
10000d27:	01 c3                	add    ebx,eax
10000d29:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000d30:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000d37:	e9 fc 02 00 00       	jmp    10001038 <_ssfn_zlib_decode+0x4e1>
10000d3c:	83 f8 03             	cmp    eax,0x3
10000d3f:	0f 84 07 03 00 00    	je     1000104c <_ssfn_zlib_decode+0x4f5>
10000d45:	4e                   	dec    esi
10000d46:	75 2d                	jne    10000d75 <_ssfn_zlib_decode+0x21e>
10000d48:	b9 20 01 00 00       	mov    ecx,0x120
10000d4d:	ba 60 5c 03 10       	mov    edx,0x10035c60	10000d4e: R_386_32	.bss
10000d52:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000d59:	e8 1c f7 ff ff       	call   1000047a <_ssfn__zbuild_huffman>
10000d5e:	85 c0                	test   eax,eax
10000d60:	0f 84 e6 02 00 00    	je     1000104c <_ssfn_zlib_decode+0x4f5>
10000d66:	b9 20 00 00 00       	mov    ecx,0x20
10000d6b:	ba 40 5c 03 10       	mov    edx,0x10035c40	10000d6c: R_386_32	.bss
10000d70:	e9 78 01 00 00       	jmp    10000eed <_ssfn_zlib_decode+0x396>
10000d75:	ba 05 00 00 00       	mov    edx,0x5
10000d7a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d81:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000d85:	e8 c7 fb ff ff       	call   10000951 <_ssfn__zreceive>
10000d8a:	89 df                	mov    edi,ebx
10000d8c:	ba 05 00 00 00       	mov    edx,0x5
10000d91:	89 c5                	mov    ebp,eax
10000d93:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d9a:	e8 b2 fb ff ff       	call   10000951 <_ssfn__zreceive>
10000d9f:	ba 04 00 00 00       	mov    edx,0x4
10000da4:	89 c6                	mov    esi,eax
10000da6:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dad:	e8 9f fb ff ff       	call   10000951 <_ssfn__zreceive>
10000db2:	b9 13 00 00 00       	mov    ecx,0x13
10000db7:	83 c0 04             	add    eax,0x4
10000dba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000dbe:	31 c0                	xor    eax,eax
10000dc0:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000dc2:	31 ff                	xor    edi,edi
10000dc4:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000dc8:	7e 1f                	jle    10000de9 <_ssfn_zlib_decode+0x292>
10000dca:	ba 03 00 00 00       	mov    edx,0x3
10000dcf:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dd6:	47                   	inc    edi
10000dd7:	e8 75 fb ff ff       	call   10000951 <_ssfn__zreceive>
10000ddc:	0f b6 97 ff 57 00 10 	movzx  edx,BYTE PTR [edi+0x100057ff]	10000ddf: R_386_32	.text
10000de3:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000de7:	eb db                	jmp    10000dc4 <_ssfn_zlib_decode+0x26d>
10000de9:	b9 13 00 00 00       	mov    ecx,0x13
10000dee:	89 da                	mov    edx,ebx
10000df0:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000df7:	e8 7e f6 ff ff       	call   1000047a <_ssfn__zbuild_huffman>
10000dfc:	85 c0                	test   eax,eax
10000dfe:	0f 84 48 02 00 00    	je     1000104c <_ssfn_zlib_decode+0x4f5>
10000e04:	8d 46 01             	lea    eax,[esi+0x1]
10000e07:	81 c5 01 01 00 00    	add    ebp,0x101
10000e0d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000e11:	31 f6                	xor    esi,esi
10000e13:	01 e8                	add    eax,ebp
10000e15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000e19:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000e1d:	0f 8e 9f 00 00 00    	jle    10000ec2 <_ssfn_zlib_decode+0x36b>
10000e23:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000e2a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e31:	e8 35 f5 ff ff       	call   1000036b <_ssfn__zhuffman_decode>
10000e36:	83 f8 12             	cmp    eax,0x12
10000e39:	0f 87 0d 02 00 00    	ja     1000104c <_ssfn_zlib_decode+0x4f5>
10000e3f:	83 f8 0f             	cmp    eax,0xf
10000e42:	7f 07                	jg     10000e4b <_ssfn_zlib_decode+0x2f4>
10000e44:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000e48:	46                   	inc    esi
10000e49:	eb ce                	jmp    10000e19 <_ssfn_zlib_decode+0x2c2>
10000e4b:	83 f8 10             	cmp    eax,0x10
10000e4e:	75 22                	jne    10000e72 <_ssfn_zlib_decode+0x31b>
10000e50:	ba 02 00 00 00       	mov    edx,0x2
10000e55:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e5c:	e8 f0 fa ff ff       	call   10000951 <_ssfn__zreceive>
10000e61:	85 f6                	test   esi,esi
10000e63:	8d 58 03             	lea    ebx,[eax+0x3]
10000e66:	0f 84 e0 01 00 00    	je     1000104c <_ssfn_zlib_decode+0x4f5>
10000e6c:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000e70:	eb 31                	jmp    10000ea3 <_ssfn_zlib_decode+0x34c>
10000e72:	83 f8 11             	cmp    eax,0x11
10000e75:	75 16                	jne    10000e8d <_ssfn_zlib_decode+0x336>
10000e77:	ba 03 00 00 00       	mov    edx,0x3
10000e7c:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e83:	e8 c9 fa ff ff       	call   10000951 <_ssfn__zreceive>
10000e88:	8d 58 03             	lea    ebx,[eax+0x3]
10000e8b:	eb 14                	jmp    10000ea1 <_ssfn_zlib_decode+0x34a>
10000e8d:	ba 07 00 00 00       	mov    edx,0x7
10000e92:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e99:	e8 b3 fa ff ff       	call   10000951 <_ssfn__zreceive>
10000e9e:	8d 58 0b             	lea    ebx,[eax+0xb]
10000ea1:	31 c0                	xor    eax,eax
10000ea3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000ea7:	29 f2                	sub    edx,esi
10000ea9:	39 da                	cmp    edx,ebx
10000eab:	0f 8c 9b 01 00 00    	jl     1000104c <_ssfn_zlib_decode+0x4f5>
10000eb1:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000eb5:	89 d9                	mov    ecx,ebx
10000eb7:	89 d7                	mov    edi,edx
10000eb9:	01 de                	add    esi,ebx
10000ebb:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000ebd:	e9 57 ff ff ff       	jmp    10000e19 <_ssfn_zlib_decode+0x2c2>
10000ec2:	0f 85 84 01 00 00    	jne    1000104c <_ssfn_zlib_decode+0x4f5>
10000ec8:	89 e9                	mov    ecx,ebp
10000eca:	8d 54 24 25          	lea    edx,[esp+0x25]
10000ece:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000ed5:	e8 a0 f5 ff ff       	call   1000047a <_ssfn__zbuild_huffman>
10000eda:	85 c0                	test   eax,eax
10000edc:	0f 84 6a 01 00 00    	je     1000104c <_ssfn_zlib_decode+0x4f5>
10000ee2:	8d 44 24 25          	lea    eax,[esp+0x25]
10000ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000eea:	8d 14 28             	lea    edx,[eax+ebp*1]
10000eed:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000ef4:	e8 81 f5 ff ff       	call   1000047a <_ssfn__zbuild_huffman>
10000ef9:	85 c0                	test   eax,eax
10000efb:	0f 84 4b 01 00 00    	je     1000104c <_ssfn_zlib_decode+0x4f5>
10000f01:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000f08:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000f0f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000f16:	e8 50 f4 ff ff       	call   1000036b <_ssfn__zhuffman_decode>
10000f1b:	89 c3                	mov    ebx,eax
10000f1d:	3d ff 00 00 00       	cmp    eax,0xff
10000f22:	7f 34                	jg     10000f58 <_ssfn_zlib_decode+0x401>
10000f24:	85 c0                	test   eax,eax
10000f26:	0f 88 20 01 00 00    	js     1000104c <_ssfn_zlib_decode+0x4f5>
10000f2c:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000f33:	77 1d                	ja     10000f52 <_ssfn_zlib_decode+0x3fb>
10000f35:	89 ea                	mov    edx,ebp
10000f37:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000f3e:	e8 d8 f4 ff ff       	call   1000041b <_ssfn__zexpand>
10000f43:	85 c0                	test   eax,eax
10000f45:	0f 84 01 01 00 00    	je     1000104c <_ssfn_zlib_decode+0x4f5>
10000f4b:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000f52:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000f55:	45                   	inc    ebp
10000f56:	eb b0                	jmp    10000f08 <_ssfn_zlib_decode+0x3b1>
10000f58:	3d 00 01 00 00       	cmp    eax,0x100
10000f5d:	75 0c                	jne    10000f6b <_ssfn_zlib_decode+0x414>
10000f5f:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000f66:	e9 cd 00 00 00       	jmp    10001038 <_ssfn_zlib_decode+0x4e1>
10000f6b:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000f71:	8b 14 85 20 59 00 10 	mov    edx,DWORD PTR [eax*4+0x10005920]	10000f74: R_386_32	.text
10000f78:	8b 1c 85 a0 59 00 10 	mov    ebx,DWORD PTR [eax*4+0x100059a0]	10000f7b: R_386_32	.text
10000f7f:	85 d2                	test   edx,edx
10000f81:	74 0e                	je     10000f91 <_ssfn_zlib_decode+0x43a>
10000f83:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000f8a:	e8 c2 f9 ff ff       	call   10000951 <_ssfn__zreceive>
10000f8f:	01 c3                	add    ebx,eax
10000f91:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000f98:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000f9f:	e8 c7 f3 ff ff       	call   1000036b <_ssfn__zhuffman_decode>
10000fa4:	85 c0                	test   eax,eax
10000fa6:	0f 88 a0 00 00 00    	js     1000104c <_ssfn_zlib_decode+0x4f5>
10000fac:	8b 14 85 20 58 00 10 	mov    edx,DWORD PTR [eax*4+0x10005820]	10000faf: R_386_32	.text
10000fb3:	8b 3c 85 a0 58 00 10 	mov    edi,DWORD PTR [eax*4+0x100058a0]	10000fb6: R_386_32	.text
10000fba:	85 d2                	test   edx,edx
10000fbc:	74 0e                	je     10000fcc <_ssfn_zlib_decode+0x475>
10000fbe:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000fc5:	e8 87 f9 ff ff       	call   10000951 <_ssfn__zreceive>
10000fca:	01 c7                	add    edi,eax
10000fcc:	89 e8                	mov    eax,ebp
10000fce:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000fd5:	39 f8                	cmp    eax,edi
10000fd7:	7c 73                	jl     1000104c <_ssfn_zlib_decode+0x4f5>
10000fd9:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000fdd:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000fe4:	73 19                	jae    10000fff <_ssfn_zlib_decode+0x4a8>
10000fe6:	89 ea                	mov    edx,ebp
10000fe8:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000fef:	e8 27 f4 ff ff       	call   1000041b <_ssfn__zexpand>
10000ff4:	85 c0                	test   eax,eax
10000ff6:	74 54                	je     1000104c <_ssfn_zlib_decode+0x4f5>
10000ff8:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000fff:	89 ee                	mov    esi,ebp
10001001:	29 fe                	sub    esi,edi
10001003:	4f                   	dec    edi
10001004:	75 19                	jne    1000101f <_ssfn_zlib_decode+0x4c8>
10001006:	85 db                	test   ebx,ebx
10001008:	0f 84 fa fe ff ff    	je     10000f08 <_ssfn_zlib_decode+0x3b1>
1000100e:	8a 06                	mov    al,BYTE PTR [esi]
10001010:	01 eb                	add    ebx,ebp
10001012:	45                   	inc    ebp
10001013:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10001016:	39 dd                	cmp    ebp,ebx
10001018:	75 f8                	jne    10001012 <_ssfn_zlib_decode+0x4bb>
1000101a:	e9 e9 fe ff ff       	jmp    10000f08 <_ssfn_zlib_decode+0x3b1>
1000101f:	85 db                	test   ebx,ebx
10001021:	0f 84 e1 fe ff ff    	je     10000f08 <_ssfn_zlib_decode+0x3b1>
10001027:	8d 04 1e             	lea    eax,[esi+ebx*1]
1000102a:	89 ef                	mov    edi,ebp
1000102c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000102d:	39 f0                	cmp    eax,esi
1000102f:	75 fb                	jne    1000102c <_ssfn_zlib_decode+0x4d5>
10001031:	01 dd                	add    ebp,ebx
10001033:	e9 d0 fe ff ff       	jmp    10000f08 <_ssfn_zlib_decode+0x3b1>
10001038:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
1000103d:	0f 84 c0 fb ff ff    	je     10000c03 <_ssfn_zlib_decode+0xac>
10001043:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
1000104a:	eb 14                	jmp    10001060 <_ssfn_zlib_decode+0x509>
1000104c:	83 ec 0c             	sub    esp,0xc
1000104f:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10001056:	e8 fc ff ff ff       	call   10001057 <_ssfn_zlib_decode+0x500>	10001057: R_386_PC32	free
1000105b:	83 c4 10             	add    esp,0x10
1000105e:	31 c0                	xor    eax,eax
10001060:	81 c4 bc 19 00 00    	add    esp,0x19bc
10001066:	5b                   	pop    ebx
10001067:	5e                   	pop    esi
10001068:	5f                   	pop    edi
10001069:	5d                   	pop    ebp
1000106a:	c3                   	ret    

1000106b <ssfn_load>:
1000106b:	55                   	push   ebp
1000106c:	57                   	push   edi
1000106d:	56                   	push   esi
1000106e:	53                   	push   ebx
1000106f:	83 ec 1c             	sub    esp,0x1c
10001072:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10001076:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
1000107a:	85 ff                	test   edi,edi
1000107c:	0f 84 d0 01 00 00    	je     10001252 <ssfn_load+0x1e7>
10001082:	85 f6                	test   esi,esi
10001084:	0f 84 c8 01 00 00    	je     10001252 <ssfn_load+0x1e7>
1000108a:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
1000108d:	0f 85 a8 00 00 00    	jne    1000113b <ssfn_load+0xd0>
10001093:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10001097:	0f 85 9e 00 00 00    	jne    1000113b <ssfn_load+0xd0>
1000109d:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
100010a1:	74 0a                	je     100010ad <ssfn_load+0x42>
100010a3:	bd fe ff ff ff       	mov    ebp,0xfffffffe
100010a8:	e9 aa 01 00 00       	jmp    10001257 <ssfn_load+0x1ec>
100010ad:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
100010b0:	a8 04                	test   al,0x4
100010b2:	75 05                	jne    100010b9 <ssfn_load+0x4e>
100010b4:	83 c6 0a             	add    esi,0xa
100010b7:	eb 08                	jmp    100010c1 <ssfn_load+0x56>
100010b9:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
100010bd:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
100010c1:	a8 08                	test   al,0x8
100010c3:	74 07                	je     100010cc <ssfn_load+0x61>
100010c5:	46                   	inc    esi
100010c6:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
100010ca:	eb f7                	jmp    100010c3 <ssfn_load+0x58>
100010cc:	a8 10                	test   al,0x10
100010ce:	74 07                	je     100010d7 <ssfn_load+0x6c>
100010d0:	46                   	inc    esi
100010d1:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
100010d5:	eb f7                	jmp    100010ce <ssfn_load+0x63>
100010d7:	83 ec 0c             	sub    esp,0xc
100010da:	56                   	push   esi
100010db:	e8 fc ff ff ff       	call   100010dc <ssfn_load+0x71>	100010dc: R_386_PC32	_ssfn_zlib_decode
100010e0:	83 c4 10             	add    esp,0x10
100010e3:	89 c6                	mov    esi,eax
100010e5:	85 c0                	test   eax,eax
100010e7:	74 ba                	je     100010a3 <ssfn_load+0x38>
100010e9:	50                   	push   eax
100010ea:	50                   	push   eax
100010eb:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
100010f1:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
100010f8:	50                   	push   eax
100010f9:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
100010ff:	e8 fc ff ff ff       	call   10001100 <ssfn_load+0x95>	10001100: R_386_PC32	realloc
10001104:	83 c4 10             	add    esp,0x10
10001107:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
1000110d:	85 c0                	test   eax,eax
1000110f:	75 0f                	jne    10001120 <ssfn_load+0xb5>
10001111:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
1000111b:	e9 1a 01 00 00       	jmp    1000123a <ssfn_load+0x1cf>
10001120:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10001126:	8d 4a 01             	lea    ecx,[edx+0x1]
10001129:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
1000112f:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10001132:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10001135:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
1000113b:	50                   	push   eax
1000113c:	6a 04                	push   0x4
1000113e:	68 ce 56 00 10       	push   0x100056ce	1000113f: R_386_32	.text
10001143:	56                   	push   esi
10001144:	e8 fc ff ff ff       	call   10001145 <ssfn_load+0xda>	10001145: R_386_PC32	memcmp
10001149:	83 c4 10             	add    esp,0x10
1000114c:	89 c5                	mov    ebp,eax
1000114e:	85 c0                	test   eax,eax
10001150:	75 29                	jne    1000117b <ssfn_load+0x110>
10001152:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10001155:	01 f3                	add    ebx,esi
10001157:	83 c6 08             	add    esi,0x8
1000115a:	39 de                	cmp    esi,ebx
1000115c:	0f 83 f5 00 00 00    	jae    10001257 <ssfn_load+0x1ec>
10001162:	50                   	push   eax
10001163:	50                   	push   eax
10001164:	56                   	push   esi
10001165:	57                   	push   edi
10001166:	e8 fc ff ff ff       	call   10001167 <ssfn_load+0xfc>	10001167: R_386_PC32	ssfn_load
1000116b:	83 c4 10             	add    esp,0x10
1000116e:	85 c0                	test   eax,eax
10001170:	0f 85 e1 00 00 00    	jne    10001257 <ssfn_load+0x1ec>
10001176:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10001179:	eb df                	jmp    1000115a <ssfn_load+0xef>
1000117b:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
1000117e:	83 e0 0f             	and    eax,0xf
10001181:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10001185:	53                   	push   ebx
10001186:	6a 04                	push   0x4
10001188:	68 d3 56 00 10       	push   0x100056d3	10001189: R_386_32	.text
1000118d:	56                   	push   esi
1000118e:	e8 fc ff ff ff       	call   1000118f <ssfn_load+0x124>	1000118f: R_386_PC32	memcmp
10001193:	83 c4 10             	add    esp,0x10
10001196:	89 c5                	mov    ebp,eax
10001198:	85 c0                	test   eax,eax
1000119a:	0f 85 03 ff ff ff    	jne    100010a3 <ssfn_load+0x38>
100011a0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
100011a3:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
100011a7:	51                   	push   ecx
100011a8:	6a 04                	push   0x4
100011aa:	68 d8 56 00 10       	push   0x100056d8	100011ab: R_386_32	.text
100011af:	50                   	push   eax
100011b0:	e8 fc ff ff ff       	call   100011b1 <ssfn_load+0x146>	100011b1: R_386_PC32	memcmp
100011b5:	83 c4 10             	add    esp,0x10
100011b8:	85 c0                	test   eax,eax
100011ba:	0f 85 e3 fe ff ff    	jne    100010a3 <ssfn_load+0x38>
100011c0:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
100011c5:	0f 87 d8 fe ff ff    	ja     100010a3 <ssfn_load+0x38>
100011cb:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
100011cf:	39 cb                	cmp    ebx,ecx
100011d1:	0f 86 cc fe ff ff    	jbe    100010a3 <ssfn_load+0x38>
100011d7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
100011da:	39 c3                	cmp    ebx,eax
100011dc:	0f 86 c1 fe ff ff    	jbe    100010a3 <ssfn_load+0x38>
100011e2:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
100011e5:	0f 86 b8 fe ff ff    	jbe    100010a3 <ssfn_load+0x38>
100011eb:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
100011ee:	0f 86 af fe ff ff    	jbe    100010a3 <ssfn_load+0x38>
100011f4:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
100011f7:	0f 86 a6 fe ff ff    	jbe    100010a3 <ssfn_load+0x38>
100011fd:	39 c1                	cmp    ecx,eax
100011ff:	0f 83 9e fe ff ff    	jae    100010a3 <ssfn_load+0x38>
10001205:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
1000120a:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
1000120d:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
10001213:	40                   	inc    eax
10001214:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
1000121a:	52                   	push   edx
1000121b:	c1 e0 02             	shl    eax,0x2
1000121e:	52                   	push   edx
1000121f:	50                   	push   eax
10001220:	ff 33                	push   DWORD PTR [ebx]
10001222:	e8 fc ff ff ff       	call   10001223 <ssfn_load+0x1b8>	10001223: R_386_PC32	realloc
10001227:	83 c4 10             	add    esp,0x10
1000122a:	89 03                	mov    DWORD PTR [ebx],eax
1000122c:	85 c0                	test   eax,eax
1000122e:	75 0f                	jne    1000123f <ssfn_load+0x1d4>
10001230:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
1000123a:	83 cd ff             	or     ebp,0xffffffff
1000123d:	eb 18                	jmp    10001257 <ssfn_load+0x1ec>
1000123f:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
10001245:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
10001249:	89 f8                	mov    eax,edi
1000124b:	e8 ad f3 ff ff       	call   100005fd <_ssfn_fc.part.1>
10001250:	eb 05                	jmp    10001257 <ssfn_load+0x1ec>
10001252:	bd fc ff ff ff       	mov    ebp,0xfffffffc
10001257:	83 c4 1c             	add    esp,0x1c
1000125a:	89 e8                	mov    eax,ebp
1000125c:	5b                   	pop    ebx
1000125d:	5e                   	pop    esi
1000125e:	5f                   	pop    edi
1000125f:	5d                   	pop    ebp
10001260:	c3                   	ret    

10001261 <ssfn_free>:
10001261:	57                   	push   edi
10001262:	56                   	push   esi
10001263:	53                   	push   ebx
10001264:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001268:	85 db                	test   ebx,ebx
1000126a:	74 7e                	je     100012ea <ssfn_free+0x89>
1000126c:	89 d8                	mov    eax,ebx
1000126e:	e8 8a f3 ff ff       	call   100005fd <_ssfn_fc.part.1>
10001273:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
1000127a:	74 32                	je     100012ae <ssfn_free+0x4d>
1000127c:	31 f6                	xor    esi,esi
1000127e:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
10001284:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
1000128a:	7e 16                	jle    100012a2 <ssfn_free+0x41>
1000128c:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
1000128f:	85 c0                	test   eax,eax
10001291:	74 0c                	je     1000129f <ssfn_free+0x3e>
10001293:	83 ec 0c             	sub    esp,0xc
10001296:	50                   	push   eax
10001297:	e8 fc ff ff ff       	call   10001298 <ssfn_free+0x37>	10001298: R_386_PC32	free
1000129c:	83 c4 10             	add    esp,0x10
1000129f:	46                   	inc    esi
100012a0:	eb dc                	jmp    1000127e <ssfn_free+0x1d>
100012a2:	83 ec 0c             	sub    esp,0xc
100012a5:	50                   	push   eax
100012a6:	e8 fc ff ff ff       	call   100012a7 <ssfn_free+0x46>	100012a7: R_386_PC32	free
100012ab:	83 c4 10             	add    esp,0x10
100012ae:	31 f6                	xor    esi,esi
100012b0:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
100012b3:	85 c0                	test   eax,eax
100012b5:	74 0c                	je     100012c3 <ssfn_free+0x62>
100012b7:	83 ec 0c             	sub    esp,0xc
100012ba:	50                   	push   eax
100012bb:	e8 fc ff ff ff       	call   100012bc <ssfn_free+0x5b>	100012bc: R_386_PC32	free
100012c0:	83 c4 10             	add    esp,0x10
100012c3:	46                   	inc    esi
100012c4:	83 fe 05             	cmp    esi,0x5
100012c7:	75 e7                	jne    100012b0 <ssfn_free+0x4f>
100012c9:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100012cf:	85 c0                	test   eax,eax
100012d1:	74 0c                	je     100012df <ssfn_free+0x7e>
100012d3:	83 ec 0c             	sub    esp,0xc
100012d6:	50                   	push   eax
100012d7:	e8 fc ff ff ff       	call   100012d8 <ssfn_free+0x77>	100012d8: R_386_PC32	free
100012dc:	83 c4 10             	add    esp,0x10
100012df:	b9 72 3d 00 00       	mov    ecx,0x3d72
100012e4:	31 c0                	xor    eax,eax
100012e6:	89 df                	mov    edi,ebx
100012e8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100012ea:	5b                   	pop    ebx
100012eb:	5e                   	pop    esi
100012ec:	5f                   	pop    edi
100012ed:	c3                   	ret    

100012ee <ssfn_mem>:
100012ee:	55                   	push   ebp
100012ef:	31 c0                	xor    eax,eax
100012f1:	57                   	push   edi
100012f2:	56                   	push   esi
100012f3:	53                   	push   ebx
100012f4:	83 ec 08             	sub    esp,0x8
100012f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100012fb:	85 d2                	test   edx,edx
100012fd:	0f 84 8e 00 00 00    	je     10001391 <ssfn_mem+0xa3>
10001303:	b8 c8 f5 00 00       	mov    eax,0xf5c8
10001308:	31 c9                	xor    ecx,ecx
1000130a:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
10001311:	41                   	inc    ecx
10001312:	8d 04 98             	lea    eax,[eax+ebx*4]
10001315:	83 f9 05             	cmp    ecx,0x5
10001318:	75 f0                	jne    1000130a <ssfn_mem+0x1c>
1000131a:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
10001320:	31 c9                	xor    ecx,ecx
10001322:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
10001329:	89 34 24             	mov    DWORD PTR [esp],esi
1000132c:	85 f6                	test   esi,esi
1000132e:	74 48                	je     10001378 <ssfn_mem+0x8a>
10001330:	31 db                	xor    ebx,ebx
10001332:	8b 34 24             	mov    esi,DWORD PTR [esp]
10001335:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
10001338:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
1000133c:	85 ff                	test   edi,edi
1000133e:	74 2a                	je     1000136a <ssfn_mem+0x7c>
10001340:	31 f6                	xor    esi,esi
10001342:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
10001346:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10001349:	85 ed                	test   ebp,ebp
1000134b:	74 0f                	je     1000135c <ssfn_mem+0x6e>
1000134d:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
10001351:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
10001355:	0f af fd             	imul   edi,ebp
10001358:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
1000135c:	46                   	inc    esi
1000135d:	81 fe 00 01 00 00    	cmp    esi,0x100
10001363:	75 dd                	jne    10001342 <ssfn_mem+0x54>
10001365:	05 00 04 00 00       	add    eax,0x400
1000136a:	43                   	inc    ebx
1000136b:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001371:	75 bf                	jne    10001332 <ssfn_mem+0x44>
10001373:	05 00 04 00 00       	add    eax,0x400
10001378:	41                   	inc    ecx
10001379:	83 f9 11             	cmp    ecx,0x11
1000137c:	75 a4                	jne    10001322 <ssfn_mem+0x34>
1000137e:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
10001385:	74 0a                	je     10001391 <ssfn_mem+0xa3>
10001387:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
1000138d:	01 d2                	add    edx,edx
1000138f:	01 d0                	add    eax,edx
10001391:	83 c4 08             	add    esp,0x8
10001394:	5b                   	pop    ebx
10001395:	5e                   	pop    esi
10001396:	5f                   	pop    edi
10001397:	5d                   	pop    ebp
10001398:	c3                   	ret    

10001399 <ssfn_select>:
10001399:	55                   	push   ebp
1000139a:	57                   	push   edi
1000139b:	56                   	push   esi
1000139c:	53                   	push   ebx
1000139d:	83 ec 1c             	sub    esp,0x1c
100013a0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100013a4:	85 db                	test   ebx,ebx
100013a6:	75 0a                	jne    100013b2 <ssfn_select+0x19>
100013a8:	be fc ff ff ff       	mov    esi,0xfffffffc
100013ad:	e9 13 01 00 00       	jmp    100014c5 <ssfn_select+0x12c>
100013b2:	89 d8                	mov    eax,ebx
100013b4:	e8 44 f2 ff ff       	call   100005fd <_ssfn_fc.part.1>
100013b9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100013bd:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
100013c3:	0f 85 e9 00 00 00    	jne    100014b2 <ssfn_select+0x119>
100013c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100013cd:	83 e8 08             	sub    eax,0x8
100013d0:	3d b8 00 00 00       	cmp    eax,0xb8
100013d5:	0f 87 de 00 00 00    	ja     100014b9 <ssfn_select+0x120>
100013db:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
100013e3:	75 76                	jne    1000145b <ssfn_select+0xc2>
100013e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
100013ea:	74 bc                	je     100013a8 <ssfn_select+0xf>
100013ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100013f0:	80 38 00             	cmp    BYTE PTR [eax],0x0
100013f3:	74 b3                	je     100013a8 <ssfn_select+0xf>
100013f5:	31 ed                	xor    ebp,ebp
100013f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100013fb:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
100013ff:	74 03                	je     10001404 <ssfn_select+0x6b>
10001401:	45                   	inc    ebp
10001402:	eb f3                	jmp    100013f7 <ssfn_select+0x5e>
10001404:	8d 43 14             	lea    eax,[ebx+0x14]
10001407:	89 df                	mov    edi,ebx
10001409:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000140d:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
10001413:	31 d2                	xor    edx,edx
10001415:	89 04 24             	mov    DWORD PTR [esp],eax
10001418:	39 14 24             	cmp    DWORD PTR [esp],edx
1000141b:	7e 33                	jle    10001450 <ssfn_select+0xb7>
1000141d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10001421:	8b 07                	mov    eax,DWORD PTR [edi]
10001423:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
10001426:	50                   	push   eax
10001427:	8d 41 20             	lea    eax,[ecx+0x20]
1000142a:	55                   	push   ebp
1000142b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
1000142f:	50                   	push   eax
10001430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
10001434:	e8 fc ff ff ff       	call   10001435 <ssfn_select+0x9c>	10001435: R_386_PC32	memcmp
10001439:	83 c4 10             	add    esp,0x10
1000143c:	85 c0                	test   eax,eax
1000143e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10001442:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10001446:	75 05                	jne    1000144d <ssfn_select+0xb4>
10001448:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
1000144b:	eb 34                	jmp    10001481 <ssfn_select+0xe8>
1000144d:	42                   	inc    edx
1000144e:	eb c8                	jmp    10001418 <ssfn_select+0x7f>
10001450:	83 c7 04             	add    edi,0x4
10001453:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10001457:	75 b4                	jne    1000140d <ssfn_select+0x74>
10001459:	eb 65                	jmp    100014c0 <ssfn_select+0x127>
1000145b:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
10001463:	74 15                	je     1000147a <ssfn_select+0xe1>
10001465:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
1000146a:	7f 54                	jg     100014c0 <ssfn_select+0x127>
1000146c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001470:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
10001478:	74 46                	je     100014c0 <ssfn_select+0x127>
1000147a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10001481:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001485:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
1000148c:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
10001492:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
1000149c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100014a0:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
100014a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100014aa:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
100014b0:	eb 13                	jmp    100014c5 <ssfn_select+0x12c>
100014b2:	be fb ff ff ff       	mov    esi,0xfffffffb
100014b7:	eb 0c                	jmp    100014c5 <ssfn_select+0x12c>
100014b9:	be fa ff ff ff       	mov    esi,0xfffffffa
100014be:	eb 05                	jmp    100014c5 <ssfn_select+0x12c>
100014c0:	be fd ff ff ff       	mov    esi,0xfffffffd
100014c5:	83 c4 1c             	add    esp,0x1c
100014c8:	89 f0                	mov    eax,esi
100014ca:	5b                   	pop    ebx
100014cb:	5e                   	pop    esi
100014cc:	5f                   	pop    edi
100014cd:	5d                   	pop    ebp
100014ce:	c3                   	ret    

100014cf <ssfn_render>:
100014cf:	55                   	push   ebp
100014d0:	57                   	push   edi
100014d1:	56                   	push   esi
100014d2:	53                   	push   ebx
100014d3:	81 ec dc 05 01 00    	sub    esp,0x105dc
100014d9:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
100014e0:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
100014eb:	85 ed                	test   ebp,ebp
100014ed:	0f 94 c2             	sete   dl
100014f0:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
100014f8:	0f 94 c0             	sete   al
100014fb:	08 c2                	or     dl,al
100014fd:	74 0a                	je     10001509 <ssfn_render+0x3a>
100014ff:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
10001504:	e9 14 1e 00 00       	jmp    1000331d <ssfn_render+0x1e4e>
10001509:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
10001510:	31 c9                	xor    ecx,ecx
10001512:	8a 00                	mov    al,BYTE PTR [eax]
10001514:	84 c0                	test   al,al
10001516:	0f 84 01 1e 00 00    	je     1000331d <ssfn_render+0x1e4e>
1000151c:	3c 0d                	cmp    al,0xd
1000151e:	75 0f                	jne    1000152f <ssfn_render+0x60>
10001520:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10001527:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
1000152d:	eb 31                	jmp    10001560 <ssfn_render+0x91>
1000152f:	3c 0a                	cmp    al,0xa
10001531:	75 37                	jne    1000156a <ssfn_render+0x9b>
10001533:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000153a:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10001540:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
10001543:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
10001549:	85 c0                	test   eax,eax
1000154b:	75 06                	jne    10001553 <ssfn_render+0x84>
1000154d:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
10001553:	01 d0                	add    eax,edx
10001555:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000155c:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10001560:	b9 01 00 00 00       	mov    ecx,0x1
10001565:	e9 b3 1d 00 00       	jmp    1000331d <ssfn_render+0x1e4e>
1000156a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000156d:	85 c0                	test   eax,eax
1000156f:	74 3e                	je     100015af <ssfn_render+0xe0>
10001571:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10001574:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
1000157b:	56                   	push   esi
1000157c:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001583:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000158a:	e8 a0 f4 ff ff       	call   10000a2f <_ssfn_c>
1000158f:	5b                   	pop    ebx
10001590:	85 c0                	test   eax,eax
10001592:	0f 85 71 02 00 00    	jne    10001809 <ssfn_render+0x33a>
10001598:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
1000159e:	81 e2 00 01 00 00    	and    edx,0x100
100015a4:	0f 84 fd 01 00 00    	je     100017a7 <ssfn_render+0x2d8>
100015aa:	e9 1d 02 00 00       	jmp    100017cc <ssfn_render+0x2fd>
100015af:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
100015b5:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
100015bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100015c0:	3d fd 00 00 00       	cmp    eax,0xfd
100015c5:	7f 08                	jg     100015cf <ssfn_render+0x100>
100015c7:	89 c3                	mov    ebx,eax
100015c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100015cd:	eb 3f                	jmp    1000160e <ssfn_render+0x13f>
100015cf:	31 db                	xor    ebx,ebx
100015d1:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100015d9:	eb 33                	jmp    1000160e <ssfn_render+0x13f>
100015db:	85 c0                	test   eax,eax
100015dd:	0f 84 64 01 00 00    	je     10001747 <ssfn_render+0x278>
100015e3:	43                   	inc    ebx
100015e4:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
100015e8:	7e 28                	jle    10001612 <ssfn_render+0x143>
100015ea:	85 c0                	test   eax,eax
100015ec:	0f 85 17 02 00 00    	jne    10001809 <ssfn_render+0x33a>
100015f2:	31 db                	xor    ebx,ebx
100015f4:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100015fc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
10001604:	74 92                	je     10001598 <ssfn_render+0xc9>
10001606:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
1000160e:	31 c0                	xor    eax,eax
10001610:	eb d2                	jmp    100015e4 <ssfn_render+0x115>
10001612:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
10001616:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
1000161d:	74 bc                	je     100015db <ssfn_render+0x10c>
1000161f:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000162a:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001631:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
10001638:	7e 50                	jle    1000168a <ssfn_render+0x1bb>
1000163a:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
1000163d:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
10001641:	c1 fa 04             	sar    edx,0x4
10001644:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
1000164a:	80 e2 03             	and    dl,0x3
1000164d:	75 32                	jne    10001681 <ssfn_render+0x1b2>
1000164f:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
10001653:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001659:	75 26                	jne    10001681 <ssfn_render+0x1b2>
1000165b:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
10001662:	50                   	push   eax
10001663:	89 f8                	mov    eax,edi
10001665:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000166c:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001673:	e8 b7 f3 ff ff       	call   10000a2f <_ssfn_c>
10001678:	59                   	pop    ecx
10001679:	85 c0                	test   eax,eax
1000167b:	0f 85 04 01 00 00    	jne    10001785 <ssfn_render+0x2b6>
10001681:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001688:	eb a0                	jmp    1000162a <ssfn_render+0x15b>
1000168a:	85 c0                	test   eax,eax
1000168c:	0f 85 51 ff ff ff    	jne    100015e3 <ssfn_render+0x114>
10001692:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000169d:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100016a4:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100016ab:	0f 8e f9 1b 00 00    	jle    100032aa <ssfn_render+0x1ddb>
100016b1:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100016b4:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
100016b8:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
100016be:	74 09                	je     100016c9 <ssfn_render+0x1fa>
100016c0:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100016c7:	eb d4                	jmp    1000169d <ssfn_render+0x1ce>
100016c9:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100016d0:	57                   	push   edi
100016d1:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100016d8:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100016df:	e8 4b f3 ff ff       	call   10000a2f <_ssfn_c>
100016e4:	5a                   	pop    edx
100016e5:	85 c0                	test   eax,eax
100016e7:	74 d7                	je     100016c0 <ssfn_render+0x1f1>
100016e9:	e9 97 00 00 00       	jmp    10001785 <ssfn_render+0x2b6>
100016ee:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100016f1:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
100016f5:	c1 fa 04             	sar    edx,0x4
100016f8:	31 ca                	xor    edx,ecx
100016fa:	80 e2 03             	and    dl,0x3
100016fd:	0f 84 b7 1b 00 00    	je     100032ba <ssfn_render+0x1deb>
10001703:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000170a:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001711:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
10001717:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
1000171e:	7f ce                	jg     100016ee <ssfn_render+0x21f>
10001720:	83 e1 03             	and    ecx,0x3
10001723:	83 f9 03             	cmp    ecx,0x3
10001726:	75 1f                	jne    10001747 <ssfn_render+0x278>
10001728:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001733:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000173a:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001741:	0f 8f 9c 1b 00 00    	jg     100032e3 <ssfn_render+0x1e14>
10001747:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001752:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001759:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001760:	7e 3e                	jle    100017a0 <ssfn_render+0x2d1>
10001762:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001765:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
1000176c:	57                   	push   edi
1000176d:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001774:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000177b:	e8 af f2 ff ff       	call   10000a2f <_ssfn_c>
10001780:	5a                   	pop    edx
10001781:	85 c0                	test   eax,eax
10001783:	74 12                	je     10001797 <ssfn_render+0x2c8>
10001785:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000178c:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
1000178f:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
10001792:	e9 4c fe ff ff       	jmp    100015e3 <ssfn_render+0x114>
10001797:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000179e:	eb b2                	jmp    10001752 <ssfn_render+0x283>
100017a0:	31 c0                	xor    eax,eax
100017a2:	e9 3c fe ff ff       	jmp    100015e3 <ssfn_render+0x114>
100017a7:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
100017ad:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
100017b8:	81 fb fd 00 00 00    	cmp    ebx,0xfd
100017be:	7f 16                	jg     100017d6 <ssfn_render+0x307>
100017c0:	89 da                	mov    edx,ebx
100017c2:	31 c0                	xor    eax,eax
100017c4:	39 da                	cmp    edx,ebx
100017c6:	7e 15                	jle    100017dd <ssfn_render+0x30e>
100017c8:	85 c0                	test   eax,eax
100017ca:	75 3d                	jne    10001809 <ssfn_render+0x33a>
100017cc:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
100017d1:	e9 47 1b 00 00       	jmp    1000331d <ssfn_render+0x1e4e>
100017d6:	bb 04 00 00 00       	mov    ebx,0x4
100017db:	eb e5                	jmp    100017c2 <ssfn_render+0x2f3>
100017dd:	85 c0                	test   eax,eax
100017df:	75 28                	jne    10001809 <ssfn_render+0x33a>
100017e1:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
100017e9:	74 1b                	je     10001806 <ssfn_render+0x337>
100017eb:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
100017ef:	8b 09                	mov    ecx,DWORD PTR [ecx]
100017f1:	85 c9                	test   ecx,ecx
100017f3:	74 11                	je     10001806 <ssfn_render+0x337>
100017f5:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
100017f8:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
100017fc:	78 08                	js     10001806 <ssfn_render+0x337>
100017fe:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
10001801:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
10001804:	01 c8                	add    eax,ecx
10001806:	42                   	inc    edx
10001807:	eb bb                	jmp    100017c4 <ssfn_render+0x2f5>
10001809:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
1000180c:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
10001811:	85 d2                	test   edx,edx
10001813:	0f 84 04 1b 00 00    	je     1000331d <ssfn_render+0x1e4e>
10001819:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
1000181d:	0f 84 fa 1a 00 00    	je     1000331d <ssfn_render+0x1e4e>
10001823:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
10001829:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
1000182d:	85 ff                	test   edi,edi
1000182f:	0f 84 e8 1a 00 00    	je     1000331d <ssfn_render+0x1e4e>
10001835:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
1000183c:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10001840:	c1 ef 10             	shr    edi,0x10
10001843:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10001847:	83 ff 10             	cmp    edi,0x10
1000184a:	0f 87 af fc ff ff    	ja     100014ff <ssfn_render+0x30>
10001850:	8d 70 06             	lea    esi,[eax+0x6]
10001853:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
10001859:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
1000185d:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
10001863:	89 f7                	mov    edi,esi
10001865:	81 e7 00 02 00 00    	and    edi,0x200
1000186b:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
1000186f:	75 34                	jne    100018a5 <ssfn_render+0x3d6>
10001871:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001875:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
1000187c:	85 c9                	test   ecx,ecx
1000187e:	74 25                	je     100018a5 <ssfn_render+0x3d6>
10001880:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001884:	0f b6 ff             	movzx  edi,bh
10001887:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000188a:	85 c9                	test   ecx,ecx
1000188c:	74 17                	je     100018a5 <ssfn_render+0x3d6>
1000188e:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
10001893:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
10001896:	85 c9                	test   ecx,ecx
10001898:	74 0b                	je     100018a5 <ssfn_render+0x3d6>
1000189a:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
100018a0:	e9 25 0d 00 00       	jmp    100025ca <ssfn_render+0x10fb>
100018a5:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
100018a9:	f7 c6 40 00 00 00    	test   esi,0x40
100018af:	75 1a                	jne    100018cb <ssfn_render+0x3fc>
100018b1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
100018b5:	7e 10                	jle    100018c7 <ssfn_render+0x3f8>
100018b7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100018bb:	83 c7 04             	add    edi,0x4
100018be:	83 e7 fc             	and    edi,0xfffffffc
100018c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100018c5:	eb 04                	jmp    100018cb <ssfn_render+0x3fc>
100018c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100018cb:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
100018d0:	f7 c6 02 00 00 00    	test   esi,0x2
100018d6:	74 14                	je     100018ec <ssfn_render+0x41d>
100018d8:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
100018db:	c0 eb 05             	shr    bl,0x5
100018de:	89 df                	mov    edi,ebx
100018e0:	83 f7 01             	xor    edi,0x1
100018e3:	83 e7 01             	and    edi,0x1
100018e6:	89 fb                	mov    ebx,edi
100018e8:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
100018ec:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
100018f1:	83 e6 01             	and    esi,0x1
100018f4:	74 10                	je     10001906 <ssfn_render+0x437>
100018f6:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
100018fa:	75 0a                	jne    10001906 <ssfn_render+0x437>
100018fc:	8d 51 40             	lea    edx,[ecx+0x40]
100018ff:	c1 fa 06             	sar    edx,0x6
10001902:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
10001906:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
1000190a:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000190f:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10001913:	99                   	cdq    
10001914:	f7 f9                	idiv   ecx
10001916:	89 c1                	mov    ecx,eax
10001918:	31 c0                	xor    eax,eax
1000191a:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
1000191f:	74 0c                	je     1000192d <ssfn_render+0x45e>
10001921:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001925:	be 04 00 00 00       	mov    esi,0x4
1000192a:	99                   	cdq    
1000192b:	f7 fe                	idiv   esi
1000192d:	01 c8                	add    eax,ecx
1000192f:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
10001934:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
10001939:	01 f0                	add    eax,esi
1000193b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
1000193f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001943:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001947:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
1000194c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001950:	3d ff f4 00 00       	cmp    eax,0xf4ff
10001955:	0f 8f c2 19 00 00    	jg     1000331d <ssfn_render+0x1e4e>
1000195b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
10001960:	0f 85 f0 00 00 00    	jne    10001a56 <ssfn_render+0x587>
10001966:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000196a:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
1000196e:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
10001975:	75 2f                	jne    100019a6 <ssfn_render+0x4d7>
10001977:	83 ec 0c             	sub    esp,0xc
1000197a:	68 00 04 00 00       	push   0x400
1000197f:	e8 fc ff ff ff       	call   10001980 <ssfn_render+0x4b1>	10001980: R_386_PC32	malloc
10001984:	83 c4 10             	add    esp,0x10
10001987:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
1000198d:	85 c0                	test   eax,eax
1000198f:	75 08                	jne    10001999 <ssfn_render+0x4ca>
10001991:	83 c9 ff             	or     ecx,0xffffffff
10001994:	e9 84 19 00 00       	jmp    1000331d <ssfn_render+0x1e4e>
10001999:	89 c7                	mov    edi,eax
1000199b:	b9 00 01 00 00       	mov    ecx,0x100
100019a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100019a4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100019a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100019aa:	0f b6 dc             	movzx  ebx,ah
100019ad:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
100019b3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
100019b6:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
100019b9:	75 3a                	jne    100019f5 <ssfn_render+0x526>
100019bb:	83 ec 0c             	sub    esp,0xc
100019be:	68 00 04 00 00       	push   0x400
100019c3:	e8 fc ff ff ff       	call   100019c4 <ssfn_render+0x4f5>	100019c4: R_386_PC32	malloc
100019c8:	89 03                	mov    DWORD PTR [ebx],eax
100019ca:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
100019d1:	83 c4 10             	add    esp,0x10
100019d4:	89 c2                	mov    edx,eax
100019d6:	0f b6 c4             	movzx  eax,ah
100019d9:	c1 ea 10             	shr    edx,0x10
100019dc:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100019e3:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
100019e6:	85 d2                	test   edx,edx
100019e8:	74 a7                	je     10001991 <ssfn_render+0x4c2>
100019ea:	b9 00 01 00 00       	mov    ecx,0x100
100019ef:	31 c0                	xor    eax,eax
100019f1:	89 d7                	mov    edi,edx
100019f3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100019f5:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
100019fc:	83 ec 0c             	sub    esp,0xc
100019ff:	0f b6 cc             	movzx  ecx,ah
10001a02:	89 c2                	mov    edx,eax
10001a04:	0f b6 c0             	movzx  eax,al
10001a07:	c1 ea 10             	shr    edx,0x10
10001a0a:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001a11:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
10001a14:	8d 1c 82             	lea    ebx,[edx+eax*4]
10001a17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001a1b:	83 c0 08             	add    eax,0x8
10001a1e:	50                   	push   eax
10001a1f:	e8 fc ff ff ff       	call   10001a20 <ssfn_render+0x551>	10001a20: R_386_PC32	malloc
10001a24:	89 03                	mov    DWORD PTR [ebx],eax
10001a26:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001a2c:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10001a33:	83 c4 10             	add    esp,0x10
10001a36:	89 c2                	mov    edx,eax
10001a38:	0f b6 cc             	movzx  ecx,ah
10001a3b:	c1 ea 10             	shr    edx,0x10
10001a3e:	0f b6 c0             	movzx  eax,al
10001a41:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001a48:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
10001a4b:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
10001a4f:	75 0e                	jne    10001a5f <ssfn_render+0x590>
10001a51:	e9 3b ff ff ff       	jmp    10001991 <ssfn_render+0x4c2>
10001a56:	8d 45 1c             	lea    eax,[ebp+0x1c]
10001a59:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001a5f:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10001a65:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10001a69:	74 2a                	je     10001a95 <ssfn_render+0x5c6>
10001a6b:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001a70:	74 23                	je     10001a95 <ssfn_render+0x5c6>
10001a72:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001a75:	bb 04 00 00 00       	mov    ebx,0x4
10001a7a:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10001a7e:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10001a82:	89 cf                	mov    edi,ecx
10001a84:	29 c7                	sub    edi,eax
10001a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001a8a:	0f af c7             	imul   eax,edi
10001a8d:	99                   	cdq    
10001a8e:	f7 fb                	idiv   ebx
10001a90:	99                   	cdq    
10001a91:	f7 f9                	idiv   ecx
10001a93:	eb 02                	jmp    10001a97 <ssfn_render+0x5c8>
10001a95:	31 c0                	xor    eax,eax
10001a97:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001a9d:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10001aa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001aa5:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
10001aad:	66 89 32             	mov    WORD PTR [edx],si
10001ab0:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
10001ab5:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001abb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
10001abe:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001ac4:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001aca:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
10001acd:	01 c3                	add    ebx,eax
10001acf:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
10001ad2:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001ad8:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001ade:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
10001ae1:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
10001ae4:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
10001aea:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001af0:	8a 12                	mov    dl,BYTE PTR [edx]
10001af2:	83 e2 3f             	and    edx,0x3f
10001af5:	01 d0                	add    eax,edx
10001af7:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
10001afa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10001afe:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001b04:	8d 50 08             	lea    edx,[eax+0x8]
10001b07:	b0 ff                	mov    al,0xff
10001b09:	89 d7                	mov    edi,edx
10001b0b:	f3 aa                	rep stos BYTE PTR es:[edi],al
10001b0d:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001b13:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
10001b17:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001b1d:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
10001b21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001b25:	c1 e0 04             	shl    eax,0x4
10001b28:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10001b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001b30:	c1 e0 04             	shl    eax,0x4
10001b33:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10001b37:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001b3d:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
10001b41:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
10001b45:	0f 8e 4d 0a 00 00    	jle    10002598 <ssfn_render+0x10c9>
10001b4b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001b4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001b53:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
10001b56:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10001b59:	8a 12                	mov    dl,BYTE PTR [edx]
10001b5b:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
10001b5f:	83 e2 40             	and    edx,0x40
10001b62:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
10001b66:	88 c2                	mov    dl,al
10001b68:	21 ca                	and    edx,ecx
10001b6a:	fe c2                	inc    dl
10001b6c:	75 14                	jne    10001b82 <ssfn_render+0x6b3>
10001b6e:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
10001b73:	19 c0                	sbb    eax,eax
10001b75:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
10001b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001b7d:	e9 09 0a 00 00       	jmp    1000258b <ssfn_render+0x10bc>
10001b82:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10001b86:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10001b89:	c1 e0 04             	shl    eax,0x4
10001b8c:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
10001b90:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b95:	99                   	cdq    
10001b96:	f7 fe                	idiv   esi
10001b98:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001b9c:	0f b6 c1             	movzx  eax,cl
10001b9f:	c1 e0 04             	shl    eax,0x4
10001ba2:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001ba7:	99                   	cdq    
10001ba8:	f7 fe                	idiv   esi
10001baa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001bae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001bb2:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
10001bb6:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10001bba:	c1 e2 10             	shl    edx,0x10
10001bbd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
10001bc2:	74 0e                	je     10001bd2 <ssfn_render+0x703>
10001bc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001bc8:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
10001bcd:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
10001bd0:	eb 0c                	jmp    10001bde <ssfn_render+0x70f>
10001bd2:	c1 e0 08             	shl    eax,0x8
10001bd5:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
10001bda:	09 d0                	or     eax,edx
10001bdc:	09 c3                	or     ebx,eax
10001bde:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
10001be1:	8a 01                	mov    al,BYTE PTR [ecx]
10001be3:	84 c0                	test   al,al
10001be5:	0f 88 17 05 00 00    	js     10002102 <ssfn_render+0xc33>
10001beb:	89 c7                	mov    edi,eax
10001bed:	83 e7 3f             	and    edi,0x3f
10001bf0:	a8 40                	test   al,0x40
10001bf2:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10001bf6:	74 10                	je     10001c08 <ssfn_render+0x739>
10001bf8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10001bfc:	89 f8                	mov    eax,edi
10001bfe:	41                   	inc    ecx
10001bff:	c1 e0 08             	shl    eax,0x8
10001c02:	09 c2                	or     edx,eax
10001c04:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
10001c08:	8d 41 01             	lea    eax,[ecx+0x1]
10001c0b:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001c15:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001c19:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001c24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001c28:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001c2c:	83 c0 04             	add    eax,0x4
10001c2f:	c1 f8 02             	sar    eax,0x2
10001c32:	01 c7                	add    edi,eax
10001c34:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001c3b:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001c3f:	0f 8f d7 01 00 00    	jg     10001e1c <ssfn_render+0x94d>
10001c45:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c48:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001c4c:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001c50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001c54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001c58:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001c5b:	c1 e0 04             	shl    eax,0x4
10001c5e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001c63:	99                   	cdq    
10001c64:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001c68:	01 c6                	add    esi,eax
10001c6a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001c6e:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001c72:	c1 e0 04             	shl    eax,0x4
10001c75:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001c7a:	99                   	cdq    
10001c7b:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001c7f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001c83:	01 c3                	add    ebx,eax
10001c85:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001c89:	89 c8                	mov    eax,ecx
10001c8b:	01 c9                	add    ecx,ecx
10001c8d:	c1 f8 02             	sar    eax,0x2
10001c90:	83 e1 06             	and    ecx,0x6
10001c93:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001c97:	d3 f8                	sar    eax,cl
10001c99:	83 e0 03             	and    eax,0x3
10001c9c:	89 c1                	mov    ecx,eax
10001c9e:	83 f8 02             	cmp    eax,0x2
10001ca1:	74 4a                	je     10001ced <ssfn_render+0x81e>
10001ca3:	83 f8 03             	cmp    eax,0x3
10001ca6:	0f 84 e4 00 00 00    	je     10001d90 <ssfn_render+0x8c1>
10001cac:	49                   	dec    ecx
10001cad:	74 20                	je     10001ccf <ssfn_render+0x800>
10001caf:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001cb5:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001cbb:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001cc1:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001cc7:	83 c7 02             	add    edi,0x2
10001cca:	e9 41 01 00 00       	jmp    10001e10 <ssfn_render+0x941>
10001ccf:	83 c7 02             	add    edi,0x2
10001cd2:	50                   	push   eax
10001cd3:	50                   	push   eax
10001cd4:	89 e8                	mov    eax,ebp
10001cd6:	53                   	push   ebx
10001cd7:	56                   	push   esi
10001cd8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001cdc:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001ce0:	e8 9c e9 ff ff       	call   10000681 <_ssfn_l>
10001ce5:	83 c4 10             	add    esp,0x10
10001ce8:	e9 23 01 00 00       	jmp    10001e10 <ssfn_render+0x941>
10001ced:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001cf1:	83 c7 04             	add    edi,0x4
10001cf4:	c1 e0 04             	shl    eax,0x4
10001cf7:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001cfc:	99                   	cdq    
10001cfd:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001d01:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001d05:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001d09:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001d0d:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001d11:	c1 e0 04             	shl    eax,0x4
10001d14:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001d19:	99                   	cdq    
10001d1a:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001d1e:	83 ec 0c             	sub    esp,0xc
10001d21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001d25:	6a 00                	push   0x0
10001d27:	53                   	push   ebx
10001d28:	56                   	push   esi
10001d29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001d2d:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001d31:	99                   	cdq    
10001d32:	f7 f9                	idiv   ecx
10001d34:	01 d8                	add    eax,ebx
10001d36:	50                   	push   eax
10001d37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001d3b:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001d3f:	99                   	cdq    
10001d40:	f7 f9                	idiv   ecx
10001d42:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001d46:	50                   	push   eax
10001d47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001d4b:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001d4f:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001d55:	99                   	cdq    
10001d56:	f7 f9                	idiv   ecx
10001d58:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001d5e:	50                   	push   eax
10001d5f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001d63:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001d69:	99                   	cdq    
10001d6a:	f7 f9                	idiv   ecx
10001d6c:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001d72:	50                   	push   eax
10001d73:	89 e8                	mov    eax,ebp
10001d75:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001d7b:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001d81:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001d85:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001d89:	e8 04 ea ff ff       	call   10000792 <_ssfn_b>
10001d8e:	eb 7d                	jmp    10001e0d <ssfn_render+0x93e>
10001d90:	83 ec 0c             	sub    esp,0xc
10001d93:	83 c7 06             	add    edi,0x6
10001d96:	6a 00                	push   0x0
10001d98:	53                   	push   ebx
10001d99:	56                   	push   esi
10001d9a:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001d9e:	c1 e0 04             	shl    eax,0x4
10001da1:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001da6:	99                   	cdq    
10001da7:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001dab:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001daf:	50                   	push   eax
10001db0:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001db4:	c1 e0 04             	shl    eax,0x4
10001db7:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001dbc:	99                   	cdq    
10001dbd:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001dc1:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001dc5:	50                   	push   eax
10001dc6:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001dca:	c1 e0 04             	shl    eax,0x4
10001dcd:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001dd2:	99                   	cdq    
10001dd3:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001dd7:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001ddb:	50                   	push   eax
10001ddc:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001de0:	c1 e0 04             	shl    eax,0x4
10001de3:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001de8:	99                   	cdq    
10001de9:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001ded:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001df1:	50                   	push   eax
10001df2:	89 e8                	mov    eax,ebp
10001df4:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001dfa:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001e00:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001e04:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001e08:	e8 85 e9 ff ff       	call   10000792 <_ssfn_b>
10001e0d:	83 c4 30             	add    esp,0x30
10001e10:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001e17:	e9 18 fe ff ff       	jmp    10001c34 <ssfn_render+0x765>
10001e1c:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001e22:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001e28:	75 0e                	jne    10001e38 <ssfn_render+0x969>
10001e2a:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001e30:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001e36:	74 2e                	je     10001e66 <ssfn_render+0x997>
10001e38:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001e3e:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001e44:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001e48:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001e4e:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001e54:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001e5a:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001e5f:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001e66:	b3 fe                	mov    bl,0xfe
10001e68:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001e6f:	0f 8e 16 07 00 00    	jle    1000258b <ssfn_render+0x10bc>
10001e75:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001e7d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001e85:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001e8d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001e95:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001e9d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001ea1:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001ea5:	0f 8d de 06 00 00    	jge    10002589 <ssfn_render+0x10ba>
10001eab:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001eb1:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001ebc:	83 e8 03             	sub    eax,0x3
10001ebf:	31 f6                	xor    esi,esi
10001ec1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001ec5:	89 f8                	mov    eax,edi
10001ec7:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001ecb:	c1 f8 02             	sar    eax,0x2
10001ece:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001ed2:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001ed9:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001edd:	0f 8e 16 01 00 00    	jle    10001ff9 <ssfn_render+0xb2a>
10001ee3:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001ee9:	8d 47 01             	lea    eax,[edi+0x1]
10001eec:	01 c0                	add    eax,eax
10001eee:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001ef2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001ef6:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001efb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001eff:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001f03:	7d 0c                	jge    10001f11 <ssfn_render+0xa42>
10001f05:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001f09:	0f 8f db 00 00 00    	jg     10001fea <ssfn_render+0xb1b>
10001f0f:	eb 0a                	jmp    10001f1b <ssfn_render+0xa4c>
10001f11:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001f15:	0f 8e cf 00 00 00    	jle    10001fea <ssfn_render+0xb1b>
10001f1b:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001f20:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001f24:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001f29:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001f2d:	89 d8                	mov    eax,ebx
10001f2f:	c1 fa 04             	sar    edx,0x4
10001f32:	c1 f8 04             	sar    eax,0x4
10001f35:	39 c2                	cmp    edx,eax
10001f37:	75 0a                	jne    10001f43 <ssfn_render+0xa74>
10001f39:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001f3d:	01 c8                	add    eax,ecx
10001f3f:	d1 f8                	sar    eax,1
10001f41:	eb 1a                	jmp    10001f5d <ssfn_render+0xa8e>
10001f43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001f47:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001f4b:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001f4f:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001f53:	0f af c1             	imul   eax,ecx
10001f56:	99                   	cdq    
10001f57:	f7 fb                	idiv   ebx
10001f59:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001f5d:	c1 f8 04             	sar    eax,0x4
10001f60:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001f65:	74 04                	je     10001f6b <ssfn_render+0xa9c>
10001f67:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001f6b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001f70:	75 3f                	jne    10001fb1 <ssfn_render+0xae2>
10001f72:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001f77:	74 38                	je     10001fb1 <ssfn_render+0xae2>
10001f79:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001f7d:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001f83:	f7 db                	neg    ebx
10001f85:	01 c2                	add    edx,eax
10001f87:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001f8b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001f8f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001f93:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001f97:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001f9b:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001f9f:	74 10                	je     10001fb1 <ssfn_render+0xae2>
10001fa1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001fa5:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001fa9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001fad:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001fb1:	31 d2                	xor    edx,edx
10001fb3:	39 f2                	cmp    edx,esi
10001fb5:	75 0b                	jne    10001fc2 <ssfn_render+0xaf3>
10001fb7:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001fbf:	46                   	inc    esi
10001fc0:	eb 28                	jmp    10001fea <ssfn_render+0xb1b>
10001fc2:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001fca:	39 c1                	cmp    ecx,eax
10001fcc:	7d 03                	jge    10001fd1 <ssfn_render+0xb02>
10001fce:	42                   	inc    edx
10001fcf:	eb e2                	jmp    10001fb3 <ssfn_render+0xae4>
10001fd1:	89 f1                	mov    ecx,esi
10001fd3:	49                   	dec    ecx
10001fd4:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001fdc:	39 d1                	cmp    ecx,edx
10001fde:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001fe6:	7f eb                	jg     10001fd3 <ssfn_render+0xb04>
10001fe8:	eb cd                	jmp    10001fb7 <ssfn_render+0xae8>
10001fea:	8d 47 02             	lea    eax,[edi+0x2]
10001fed:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001ff4:	e9 d9 fe ff ff       	jmp    10001ed2 <ssfn_render+0xa03>
10001ff9:	83 fe 01             	cmp    esi,0x1
10001ffc:	7e 1f                	jle    1000201d <ssfn_render+0xb4e>
10001ffe:	f7 c6 01 00 00 00    	test   esi,0x1
10002004:	74 24                	je     1000202a <ssfn_render+0xb5b>
10002006:	8d 46 ff             	lea    eax,[esi-0x1]
10002009:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10002011:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10002019:	89 c6                	mov    esi,eax
1000201b:	eb 0d                	jmp    1000202a <ssfn_render+0xb5b>
1000201d:	85 f6                	test   esi,esi
1000201f:	0f 84 c7 00 00 00    	je     100020ec <ssfn_render+0xc1d>
10002025:	be 01 00 00 00       	mov    esi,0x1
1000202a:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002030:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10002034:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10002038:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
1000203c:	39 d1                	cmp    ecx,edx
1000203e:	7d 0b                	jge    1000204b <ssfn_render+0xb7c>
10002040:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10002044:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10002048:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
1000204b:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10002056:	31 c0                	xor    eax,eax
10002058:	31 d2                	xor    edx,edx
1000205a:	8d 4e ff             	lea    ecx,[esi-0x1]
1000205d:	39 d1                	cmp    ecx,edx
1000205f:	7e 7d                	jle    100020de <ssfn_render+0xc0f>
10002061:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10002069:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10002071:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10002075:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002079:	79 02                	jns    1000207d <ssfn_render+0xbae>
1000207b:	31 c0                	xor    eax,eax
1000207d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10002081:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10002085:	39 cf                	cmp    edi,ecx
10002087:	7e 04                	jle    1000208d <ssfn_render+0xbbe>
10002089:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
1000208d:	85 d2                	test   edx,edx
1000208f:	74 12                	je     100020a3 <ssfn_render+0xbd4>
10002091:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10002099:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
1000209d:	39 c8                	cmp    eax,ecx
1000209f:	7d 02                	jge    100020a3 <ssfn_render+0xbd4>
100020a1:	89 c8                	mov    eax,ecx
100020a3:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
100020a7:	7d 2b                	jge    100020d4 <ssfn_render+0xc05>
100020a9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
100020ad:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
100020b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
100020b6:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
100020ba:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
100020be:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
100020c2:	75 05                	jne    100020c9 <ssfn_render+0xbfa>
100020c4:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
100020c9:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
100020cd:	40                   	inc    eax
100020ce:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
100020d2:	eb cf                	jmp    100020a3 <ssfn_render+0xbd4>
100020d4:	83 c2 02             	add    edx,0x2
100020d7:	b0 01                	mov    al,0x1
100020d9:	e9 7c ff ff ff       	jmp    1000205a <ssfn_render+0xb8b>
100020de:	83 e6 fe             	and    esi,0xfffffffe
100020e1:	84 c0                	test   al,al
100020e3:	74 07                	je     100020ec <ssfn_render+0xc1d>
100020e5:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
100020ec:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100020f0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
100020f4:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
100020f8:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
100020fd:	e9 9b fd ff ff       	jmp    10001e9d <ssfn_render+0x9ce>
10002102:	88 c2                	mov    dl,al
10002104:	80 e2 60             	and    dl,0x60
10002107:	0f 85 95 02 00 00    	jne    100023a2 <ssfn_render+0xed3>
1000210d:	83 e0 1f             	and    eax,0x1f
10002110:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10002114:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
1000211b:	c1 fb 04             	sar    ebx,0x4
1000211e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002122:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10002126:	40                   	inc    eax
10002127:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000212b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000212f:	c1 f8 04             	sar    eax,0x4
10002132:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002136:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000213a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
1000213f:	99                   	cdq    
10002140:	f7 fe                	idiv   esi
10002142:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002146:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000214a:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
1000214f:	99                   	cdq    
10002150:	f7 fe                	idiv   esi
10002152:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002156:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000215c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002160:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002164:	8d 14 3b             	lea    edx,[ebx+edi*1]
10002167:	39 d6                	cmp    esi,edx
10002169:	7d 0a                	jge    10002175 <ssfn_render+0xca6>
1000216b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000216f:	8d 14 3b             	lea    edx,[ebx+edi*1]
10002172:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002179:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10002181:	0f af c3             	imul   eax,ebx
10002184:	31 ff                	xor    edi,edi
10002186:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
1000218a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000218e:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002192:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10002196:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000219a:	29 d8                	sub    eax,ebx
1000219c:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
100021a0:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
100021a4:	0f 8d b1 00 00 00    	jge    1000225b <ssfn_render+0xd8c>
100021aa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100021ae:	99                   	cdq    
100021af:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
100021b3:	89 c6                	mov    esi,eax
100021b5:	31 c0                	xor    eax,eax
100021b7:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100021bc:	74 0e                	je     100021cc <ssfn_render+0xcfd>
100021be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
100021c2:	bb 04 00 00 00       	mov    ebx,0x4
100021c7:	29 f8                	sub    eax,edi
100021c9:	99                   	cdq    
100021ca:	f7 fb                	idiv   ebx
100021cc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
100021d0:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100021db:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
100021df:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
100021e4:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100021eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100021ef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100021f3:	39 d8                	cmp    eax,ebx
100021f5:	7d 4e                	jge    10002245 <ssfn_render+0xd76>
100021f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100021fb:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
10002200:	99                   	cdq    
10002201:	f7 fb                	idiv   ebx
10002203:	8d 14 06             	lea    edx,[esi+eax*1]
10002206:	83 e0 07             	and    eax,0x7
10002209:	c1 fa 03             	sar    edx,0x3
1000220c:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
10002211:	0f a3 c2             	bt     edx,eax
10002214:	72 0e                	jb     10002224 <ssfn_render+0xd55>
10002216:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
1000221a:	43                   	inc    ebx
1000221b:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
10002222:	eb c0                	jmp    100021e4 <ssfn_render+0xd15>
10002224:	31 c0                	xor    eax,eax
10002226:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
1000222a:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
1000222e:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002234:	40                   	inc    eax
10002235:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
10002239:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
1000223d:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
10002241:	7d e3                	jge    10002226 <ssfn_render+0xd57>
10002243:	eb d1                	jmp    10002216 <ssfn_render+0xd47>
10002245:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002249:	47                   	inc    edi
1000224a:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
1000224e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10002252:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
10002256:	e9 45 ff ff ff       	jmp    100021a0 <ssfn_render+0xcd1>
1000225b:	b3 fe                	mov    bl,0xfe
1000225d:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
10002264:	0f 85 21 03 00 00    	jne    1000258b <ssfn_render+0x10bc>
1000226a:	31 c0                	xor    eax,eax
1000226c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002270:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
10002275:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10002279:	0f 95 c0             	setne  al
1000227c:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002280:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002284:	4f                   	dec    edi
10002285:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10002289:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
10002291:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002295:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000229c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
100022a0:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
100022a4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100022a8:	31 c0                	xor    eax,eax
100022aa:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100022ad:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100022b1:	83 c1 04             	add    ecx,0x4
100022b4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
100022b8:	0f 8d c0 02 00 00    	jge    1000257e <ssfn_render+0x10af>
100022be:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100022c2:	8d 77 01             	lea    esi,[edi+0x1]
100022c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100022c9:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
100022cd:	4f                   	dec    edi
100022ce:	be 01 00 00 00       	mov    esi,0x1
100022d3:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100022d7:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
100022db:	7e 63                	jle    10002340 <ssfn_render+0xe71>
100022dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100022e1:	b9 01 00 00 00       	mov    ecx,0x1
100022e6:	89 ca                	mov    edx,ecx
100022e8:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
100022ec:	7e 45                	jle    10002333 <ssfn_render+0xe64>
100022ee:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100022f4:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
100022f9:	75 34                	jne    1000232f <ssfn_render+0xe60>
100022fb:	89 c7                	mov    edi,eax
100022fd:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10002301:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
10002305:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
10002309:	74 0c                	je     10002317 <ssfn_render+0xe48>
1000230b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000230f:	01 d7                	add    edi,edx
10002311:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
10002315:	75 18                	jne    1000232f <ssfn_render+0xe60>
10002317:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
1000231b:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
1000231f:	74 06                	je     10002327 <ssfn_render+0xe58>
10002321:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
10002325:	75 08                	jne    1000232f <ssfn_render+0xe60>
10002327:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
1000232b:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
1000232f:	41                   	inc    ecx
10002330:	40                   	inc    eax
10002331:	eb b3                	jmp    100022e6 <ssfn_render+0xe17>
10002333:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002337:	46                   	inc    esi
10002338:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
1000233c:	b0 01                	mov    al,0x1
1000233e:	eb 97                	jmp    100022d7 <ssfn_render+0xe08>
10002340:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
10002344:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10002348:	bb 01 00 00 00       	mov    ebx,0x1
1000234d:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002351:	7e 3d                	jle    10002390 <ssfn_render+0xec1>
10002353:	b8 01 00 00 00       	mov    eax,0x1
10002358:	89 c2                	mov    edx,eax
1000235a:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
1000235e:	7e 23                	jle    10002383 <ssfn_render+0xeb4>
10002360:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10002364:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
1000236a:	8d 14 07             	lea    edx,[edi+eax*1]
1000236d:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
10002372:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002376:	75 08                	jne    10002380 <ssfn_render+0xeb1>
10002378:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
1000237c:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10002380:	40                   	inc    eax
10002381:	eb d5                	jmp    10002358 <ssfn_render+0xe89>
10002383:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002387:	43                   	inc    ebx
10002388:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
1000238c:	b0 01                	mov    al,0x1
1000238e:	eb bd                	jmp    1000234d <ssfn_render+0xe7e>
10002390:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
10002393:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002397:	01 c9                	add    ecx,ecx
10002399:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
1000239d:	e9 08 ff ff ff       	jmp    100022aa <ssfn_render+0xddb>
100023a2:	b3 fe                	mov    bl,0xfe
100023a4:	80 fa 20             	cmp    dl,0x20
100023a7:	0f 85 de 01 00 00    	jne    1000258b <ssfn_render+0x10bc>
100023ad:	89 c3                	mov    ebx,eax
100023af:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
100023b3:	c1 e3 08             	shl    ebx,0x8
100023b6:	81 e3 00 1f 00 00    	and    ebx,0x1f00
100023bc:	09 c3                	or     ebx,eax
100023be:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
100023c2:	43                   	inc    ebx
100023c3:	40                   	inc    eax
100023c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100023c8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
100023cc:	40                   	inc    eax
100023cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100023d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100023d5:	c1 f8 04             	sar    eax,0x4
100023d8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100023dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100023e0:	c1 f8 04             	sar    eax,0x4
100023e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100023e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100023eb:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
100023f0:	99                   	cdq    
100023f1:	f7 fe                	idiv   esi
100023f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100023f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100023fb:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10002400:	99                   	cdq    
10002401:	f7 fe                	idiv   esi
10002403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10002407:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000240b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002411:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
10002415:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002419:	39 d6                	cmp    esi,edx
1000241b:	7d 0b                	jge    10002428 <ssfn_render+0xf59>
1000241d:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
10002421:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
10002425:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002428:	83 c1 04             	add    ecx,0x4
1000242b:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10002436:	8d 04 19             	lea    eax,[ecx+ebx*1]
10002439:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000243d:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
10002441:	72 35                	jb     10002478 <ssfn_render+0xfa9>
10002443:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10002447:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
1000244b:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002450:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
10002454:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
10002458:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000245f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
10002463:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
1000246b:	31 d2                	xor    edx,edx
1000246d:	31 ff                	xor    edi,edi
1000246f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
10002473:	e9 cc 00 00 00       	jmp    10002544 <ssfn_render+0x1075>
10002478:	8a 11                	mov    dl,BYTE PTR [ecx]
1000247a:	89 d0                	mov    eax,edx
1000247c:	83 e0 7f             	and    eax,0x7f
1000247f:	84 d2                	test   dl,dl
10002481:	8d 78 01             	lea    edi,[eax+0x1]
10002484:	78 09                	js     1000248f <ssfn_render+0xfc0>
10002486:	41                   	inc    ecx
10002487:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000248b:	89 ca                	mov    edx,ecx
1000248d:	eb 3d                	jmp    100024cc <ssfn_render+0xffd>
1000248f:	48                   	dec    eax
10002490:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002497:	83 f8 fe             	cmp    eax,0xfffffffe
1000249a:	74 16                	je     100024b2 <ssfn_render+0xfe3>
1000249c:	8d 5a 01             	lea    ebx,[edx+0x1]
1000249f:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
100024a6:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
100024a9:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
100024b0:	eb dd                	jmp    1000248f <ssfn_render+0xfc0>
100024b2:	83 c1 02             	add    ecx,0x2
100024b5:	eb 86                	jmp    1000243d <ssfn_render+0xf6e>
100024b7:	42                   	inc    edx
100024b8:	8d 73 01             	lea    esi,[ebx+0x1]
100024bb:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
100024c2:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
100024c5:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
100024cc:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
100024d0:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
100024d7:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
100024dc:	75 d9                	jne    100024b7 <ssfn_render+0xfe8>
100024de:	01 f9                	add    ecx,edi
100024e0:	e9 58 ff ff ff       	jmp    1000243d <ssfn_render+0xf6e>
100024e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100024e9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100024ed:	99                   	cdq    
100024ee:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100024f2:	0f af c8             	imul   ecx,eax
100024f5:	31 c0                	xor    eax,eax
100024f7:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100024fc:	74 0e                	je     1000250c <ssfn_render+0x103d>
100024fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002502:	bb 04 00 00 00       	mov    ebx,0x4
10002507:	29 f8                	sub    eax,edi
10002509:	99                   	cdq    
1000250a:	f7 fb                	idiv   ebx
1000250c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002510:	31 db                	xor    ebx,ebx
10002512:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002516:	31 f6                	xor    esi,esi
10002518:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
1000251f:	01 c1                	add    ecx,eax
10002521:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
10002525:	7f 30                	jg     10002557 <ssfn_render+0x1088>
10002527:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000252b:	85 c0                	test   eax,eax
1000252d:	79 02                	jns    10002531 <ssfn_render+0x1062>
1000252f:	31 c0                	xor    eax,eax
10002531:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002535:	47                   	inc    edi
10002536:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
1000253a:	b2 01                	mov    dl,0x1
1000253c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
10002540:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
10002544:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002548:	7c 9b                	jl     100024e5 <ssfn_render+0x1016>
1000254a:	84 d2                	test   dl,dl
1000254c:	74 3b                	je     10002589 <ssfn_render+0x10ba>
1000254e:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10002555:	eb 32                	jmp    10002589 <ssfn_render+0x10ba>
10002557:	89 d8                	mov    eax,ebx
10002559:	99                   	cdq    
1000255a:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
1000255e:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
10002565:	3c ff                	cmp    al,0xff
10002567:	74 0e                	je     10002577 <ssfn_render+0x10a8>
10002569:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000256d:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002573:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
10002577:	46                   	inc    esi
10002578:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
1000257c:	eb a3                	jmp    10002521 <ssfn_render+0x1052>
1000257e:	84 c0                	test   al,al
10002580:	74 07                	je     10002589 <ssfn_render+0x10ba>
10002582:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
10002589:	b3 fe                	mov    bl,0xfe
1000258b:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
1000258f:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
10002593:	e9 9f f5 ff ff       	jmp    10001b37 <ssfn_render+0x668>
10002598:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000259e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
100025a1:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
100025a4:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
100025a7:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100025ad:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
100025b1:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
100025b5:	89 f0                	mov    eax,esi
100025b7:	89 d9                	mov    ecx,ebx
100025b9:	43                   	inc    ebx
100025ba:	39 de                	cmp    esi,ebx
100025bc:	7e 08                	jle    100025c6 <ssfn_render+0x10f7>
100025be:	48                   	dec    eax
100025bf:	29 c8                	sub    eax,ecx
100025c1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
100025c4:	eb 04                	jmp    100025ca <ssfn_render+0x10fb>
100025c6:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
100025ca:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
100025d2:	0f 84 c9 0c 00 00    	je     100032a1 <ssfn_render+0x1dd2>
100025d8:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
100025de:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100025e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100025e8:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100025eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100025ef:	0f ba e0 0c          	bt     eax,0xc
100025f3:	72 22                	jb     10002617 <ssfn_render+0x1148>
100025f5:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
100025f8:	83 e0 0f             	and    eax,0xf
100025fb:	3c 03                	cmp    al,0x3
100025fd:	74 18                	je     10002617 <ssfn_render+0x1148>
100025ff:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
10002603:	84 c9                	test   cl,cl
10002605:	74 10                	je     10002617 <ssfn_render+0x1148>
10002607:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
1000260b:	0f af d7             	imul   edx,edi
1000260e:	89 d0                	mov    eax,edx
10002610:	99                   	cdq    
10002611:	f7 f9                	idiv   ecx
10002613:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002617:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000261b:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
10002621:	7d 06                	jge    10002629 <ssfn_render+0x115a>
10002623:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
10002629:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
1000262f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
10002633:	0f b7 13             	movzx  edx,WORD PTR [ebx]
10002636:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
1000263b:	89 d0                	mov    eax,edx
1000263d:	99                   	cdq    
1000263e:	f7 f9                	idiv   ecx
10002640:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
10002644:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002648:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
1000264b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
1000264f:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
10002653:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002657:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
1000265c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002660:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002665:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002669:	99                   	cdq    
1000266a:	f7 f9                	idiv   ecx
1000266c:	31 d2                	xor    edx,edx
1000266e:	83 ff 10             	cmp    edi,0x10
10002671:	0f 9f c2             	setg   dl
10002674:	42                   	inc    edx
10002675:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10002679:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
1000267d:	7d 08                	jge    10002687 <ssfn_render+0x11b8>
1000267f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002683:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10002687:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
1000268b:	39 c2                	cmp    edx,eax
1000268d:	7d 04                	jge    10002693 <ssfn_render+0x11c4>
1000268f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002693:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10002698:	74 4c                	je     100026e6 <ssfn_render+0x1217>
1000269a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000269e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100026a3:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100026a7:	99                   	cdq    
100026a8:	f7 f9                	idiv   ecx
100026aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100026ae:	81 e2 00 08 00 00    	and    edx,0x800
100026b4:	74 04                	je     100026ba <ssfn_render+0x11eb>
100026b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100026ba:	01 d0                	add    eax,edx
100026bc:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100026c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100026c6:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
100026ca:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
100026ce:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100026d3:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100026d7:	99                   	cdq    
100026d8:	f7 f9                	idiv   ecx
100026da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100026de:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
100026e4:	eb 22                	jmp    10002708 <ssfn_render+0x1239>
100026e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100026ea:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
100026f4:	d1 f8                	sar    eax,1
100026f6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
100026fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002702:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
10002708:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000270f:	8b 18                	mov    ebx,DWORD PTR [eax]
10002711:	85 db                	test   ebx,ebx
10002713:	0f 84 2e 09 00 00    	je     10003047 <ssfn_render+0x1b78>
10002719:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
1000271d:	89 d1                	mov    ecx,edx
1000271f:	89 d0                	mov    eax,edx
10002721:	66 c1 f9 0b          	sar    cx,0xb
10002725:	c1 f8 1f             	sar    eax,0x1f
10002728:	31 c2                	xor    edx,eax
1000272a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
1000272e:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
10002732:	88 c8                	mov    al,cl
10002734:	83 e0 10             	and    eax,0x10
10002737:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
1000273b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000273f:	83 c0 40             	add    eax,0x40
10002742:	c1 f8 06             	sar    eax,0x6
10002745:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
1000274c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002750:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002754:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
10002758:	7d 08                	jge    10002762 <ssfn_render+0x1293>
1000275a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000275e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002762:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002765:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
1000276d:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002771:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10002779:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
1000277d:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002782:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002786:	99                   	cdq    
10002787:	f7 f9                	idiv   ecx
10002789:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
1000278d:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002794:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10002797:	0f b6 f4             	movzx  esi,ah
1000279a:	89 c2                	mov    edx,eax
1000279c:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
100027a0:	c1 ea 10             	shr    edx,0x10
100027a3:	0f b6 fa             	movzx  edi,dl
100027a6:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
100027aa:	0f b6 f8             	movzx  edi,al
100027ad:	c1 e8 18             	shr    eax,0x18
100027b0:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
100027b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100027b8:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100027bf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
100027c2:	0f b6 fc             	movzx  edi,ah
100027c5:	89 c2                	mov    edx,eax
100027c7:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
100027ce:	c1 ea 10             	shr    edx,0x10
100027d1:	0f b6 c0             	movzx  eax,al
100027d4:	0f b6 f2             	movzx  esi,dl
100027d7:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100027de:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100027e5:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
100027e9:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100027f0:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100027f7:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
100027fb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
100027ff:	0f af c2             	imul   eax,edx
10002802:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002806:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
1000280a:	8d 04 90             	lea    eax,[eax+edx*4]
1000280d:	01 d8                	add    eax,ebx
1000280f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
10002816:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
1000281a:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
10002821:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002826:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
1000282d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10002831:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
10002835:	0f 8d e2 04 00 00    	jge    10002d1d <ssfn_render+0x184e>
1000283b:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002842:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002849:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
1000284d:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
10002851:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002855:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002859:	39 d0                	cmp    eax,edx
1000285b:	0f 8d bc 04 00 00    	jge    10002d1d <ssfn_render+0x184e>
10002861:	85 c0                	test   eax,eax
10002863:	0f 88 94 04 00 00    	js     10002cfd <ssfn_render+0x182e>
10002869:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000286f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10002873:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10002877:	c1 e1 08             	shl    ecx,0x8
1000287a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10002882:	89 c8                	mov    eax,ecx
10002884:	0f af c3             	imul   eax,ebx
10002887:	99                   	cdq    
10002888:	f7 fe                	idiv   esi
1000288a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002891:	c1 f8 08             	sar    eax,0x8
10002894:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
1000289b:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
100028a1:	0f af c3             	imul   eax,ebx
100028a4:	99                   	cdq    
100028a5:	f7 fe                	idiv   esi
100028a7:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
100028ab:	c1 f8 08             	sar    eax,0x8
100028ae:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
100028b5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
100028b9:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
100028c0:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
100028c7:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100028ce:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
100028d2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
100028d6:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100028da:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100028de:	0f 8d 19 04 00 00    	jge    10002cfd <ssfn_render+0x182e>
100028e4:	85 c0                	test   eax,eax
100028e6:	0f 88 ff 03 00 00    	js     10002ceb <ssfn_render+0x181c>
100028ec:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100028f3:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
100028f7:	75 42                	jne    1000293b <ssfn_render+0x146c>
100028f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100028fd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002904:	b9 10 00 00 00       	mov    ecx,0x10
10002909:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
1000290c:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002913:	89 c2                	mov    edx,eax
10002915:	0f b6 fc             	movzx  edi,ah
10002918:	d3 ea                	shr    edx,cl
1000291a:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10002921:	0f b6 f2             	movzx  esi,dl
10002924:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002928:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
1000292f:	d3 e8                	shr    eax,cl
10002931:	0f b6 c0             	movzx  eax,al
10002934:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
1000293b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002941:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10002945:	0f b7 18             	movzx  ebx,WORD PTR [eax]
10002948:	c1 e1 08             	shl    ecx,0x8
1000294b:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
1000294f:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10002957:	89 c8                	mov    eax,ecx
10002959:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
10002961:	0f af c3             	imul   eax,ebx
10002964:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
1000296c:	99                   	cdq    
1000296d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10002975:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002979:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10002981:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
10002988:	c1 f8 08             	sar    eax,0x8
1000298b:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10002992:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002998:	0f af c3             	imul   eax,ebx
1000299b:	99                   	cdq    
1000299c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
100029a0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
100029a4:	c1 f8 08             	sar    eax,0x8
100029a7:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
100029ae:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
100029b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100029b9:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
100029bd:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
100029c1:	0f 8d 3b 02 00 00    	jge    10002c02 <ssfn_render+0x1733>
100029c7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
100029cb:	c1 fa 08             	sar    edx,0x8
100029ce:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
100029d5:	75 25                	jne    100029fc <ssfn_render+0x152d>
100029d7:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
100029dc:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
100029e3:	b8 00 01 00 00       	mov    eax,0x100
100029e8:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
100029f0:	29 c8                	sub    eax,ecx
100029f2:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100029f6:	39 c7                	cmp    edi,eax
100029f8:	7e 1c                	jle    10002a16 <ssfn_render+0x1547>
100029fa:	eb 16                	jmp    10002a12 <ssfn_render+0x1543>
100029fc:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
10002a04:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
10002a0b:	75 09                	jne    10002a16 <ssfn_render+0x1547>
10002a0d:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
10002a12:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002a16:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
10002a1a:	0f b7 00             	movzx  eax,WORD PTR [eax]
10002a1d:	0f af c2             	imul   eax,edx
10002a20:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
10002a27:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
10002a2c:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10002a31:	c1 f8 08             	sar    eax,0x8
10002a34:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
10002a3b:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
10002a42:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002a46:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10002a4a:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
10002a4e:	0f 8d a1 01 00 00    	jge    10002bf5 <ssfn_render+0x1726>
10002a54:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002a58:	c1 f8 08             	sar    eax,0x8
10002a5b:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
10002a62:	75 3b                	jne    10002a9f <ssfn_render+0x15d0>
10002a64:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
10002a69:	ba 00 01 00 00       	mov    edx,0x100
10002a6e:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
10002a76:	29 ca                	sub    edx,ecx
10002a78:	89 f1                	mov    ecx,esi
10002a7a:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
10002a81:	39 d1                	cmp    ecx,edx
10002a83:	7c 0e                	jl     10002a93 <ssfn_render+0x15c4>
10002a85:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002a89:	81 fa 00 01 00 00    	cmp    edx,0x100
10002a8f:	74 22                	je     10002ab3 <ssfn_render+0x15e4>
10002a91:	89 d1                	mov    ecx,edx
10002a93:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
10002a98:	89 cf                	mov    edi,ecx
10002a9a:	c1 ff 08             	sar    edi,0x8
10002a9d:	eb 14                	jmp    10002ab3 <ssfn_render+0x15e4>
10002a9f:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
10002aa6:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
10002aad:	74 04                	je     10002ab3 <ssfn_render+0x15e4>
10002aaf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002ab3:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
10002ab7:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
10002abb:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
10002ac2:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
10002ac7:	81 fa ff 00 00 00    	cmp    edx,0xff
10002acd:	75 37                	jne    10002b06 <ssfn_render+0x1637>
10002acf:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10002ad6:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
10002ade:	0f af c7             	imul   eax,edi
10002ae1:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002ae5:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10002aec:	0f af c7             	imul   eax,edi
10002aef:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002af3:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10002afa:	0f af c7             	imul   eax,edi
10002afd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002b01:	e9 e2 00 00 00       	jmp    10002be8 <ssfn_render+0x1719>
10002b06:	81 fa fe 00 00 00    	cmp    edx,0xfe
10002b0c:	74 2d                	je     10002b3b <ssfn_render+0x166c>
10002b0e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002b11:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
10002b14:	85 c9                	test   ecx,ecx
10002b16:	74 23                	je     10002b3b <ssfn_render+0x166c>
10002b18:	01 c8                	add    eax,ecx
10002b1a:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
10002b1d:	89 d9                	mov    ecx,ebx
10002b1f:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
10002b26:	c1 e9 10             	shr    ecx,0x10
10002b29:	0f b6 f7             	movzx  esi,bh
10002b2c:	0f b6 c1             	movzx  eax,cl
10002b2f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10002b33:	0f b6 c3             	movzx  eax,bl
10002b36:	c1 eb 18             	shr    ebx,0x18
10002b39:	eb 14                	jmp    10002b4f <ssfn_render+0x1680>
10002b3b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002b3f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002b43:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10002b47:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
10002b4b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002b4f:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002b55:	75 25                	jne    10002b7c <ssfn_render+0x16ad>
10002b57:	0f af c7             	imul   eax,edi
10002b5a:	0f af f7             	imul   esi,edi
10002b5d:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002b61:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002b65:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
10002b6b:	0f af cf             	imul   ecx,edi
10002b6e:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
10002b72:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
10002b76:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
10002b7a:	eb 6c                	jmp    10002be8 <ssfn_render+0x1719>
10002b7c:	0f af f3             	imul   esi,ebx
10002b7f:	0f af c3             	imul   eax,ebx
10002b82:	b9 ff 00 00 00       	mov    ecx,0xff
10002b87:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
10002b8e:	29 d9                	sub    ecx,ebx
10002b90:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
10002b94:	0f af d1             	imul   edx,ecx
10002b97:	b9 ff 00 00 00       	mov    ecx,0xff
10002b9c:	01 d0                	add    eax,edx
10002b9e:	0f af c7             	imul   eax,edi
10002ba1:	99                   	cdq    
10002ba2:	f7 f9                	idiv   ecx
10002ba4:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002ba8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002bac:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
10002bb4:	01 f0                	add    eax,esi
10002bb6:	89 ce                	mov    esi,ecx
10002bb8:	0f af c7             	imul   eax,edi
10002bbb:	99                   	cdq    
10002bbc:	f7 f9                	idiv   ecx
10002bbe:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002bc2:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002bc6:	0f af cb             	imul   ecx,ebx
10002bc9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002bcd:	0f af df             	imul   ebx,edi
10002bd0:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
10002bd8:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
10002bdc:	01 c8                	add    eax,ecx
10002bde:	0f af c7             	imul   eax,edi
10002be1:	99                   	cdq    
10002be2:	f7 fe                	idiv   esi
10002be4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002be8:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
10002bf0:	e9 51 fe ff ff       	jmp    10002a46 <ssfn_render+0x1577>
10002bf5:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
10002bfd:	e9 b7 fd ff ff       	jmp    100029b9 <ssfn_render+0x14ea>
10002c02:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002c07:	74 30                	je     10002c39 <ssfn_render+0x176a>
10002c09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002c0d:	31 d2                	xor    edx,edx
10002c0f:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002c13:	31 d2                	xor    edx,edx
10002c15:	89 c1                	mov    ecx,eax
10002c17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002c1b:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002c1f:	31 d2                	xor    edx,edx
10002c21:	89 c6                	mov    esi,eax
10002c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002c27:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002c2b:	31 d2                	xor    edx,edx
10002c2d:	89 c3                	mov    ebx,eax
10002c2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002c33:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002c37:	eb 1c                	jmp    10002c55 <ssfn_render+0x1786>
10002c39:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002c3d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002c41:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002c45:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002c49:	c1 e9 08             	shr    ecx,0x8
10002c4c:	c1 ee 08             	shr    esi,0x8
10002c4f:	c1 eb 08             	shr    ebx,0x8
10002c52:	c1 e8 08             	shr    eax,0x8
10002c55:	83 f8 0f             	cmp    eax,0xf
10002c58:	0f 86 8d 00 00 00    	jbe    10002ceb <ssfn_render+0x181c>
10002c5e:	89 ca                	mov    edx,ecx
10002c60:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002c66:	76 05                	jbe    10002c6d <ssfn_render+0x179e>
10002c68:	ba ff 00 00 00       	mov    edx,0xff
10002c6d:	b9 10 00 00 00       	mov    ecx,0x10
10002c72:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002c79:	d3 e2                	shl    edx,cl
10002c7b:	3d ff 00 00 00       	cmp    eax,0xff
10002c80:	89 d1                	mov    ecx,edx
10002c82:	76 05                	jbe    10002c89 <ssfn_render+0x17ba>
10002c84:	b8 ff 00 00 00       	mov    eax,0xff
10002c89:	c1 e0 18             	shl    eax,0x18
10002c8c:	09 c8                	or     eax,ecx
10002c8e:	81 fe ff 00 00 00    	cmp    esi,0xff
10002c94:	76 05                	jbe    10002c9b <ssfn_render+0x17cc>
10002c96:	be ff 00 00 00       	mov    esi,0xff
10002c9b:	c1 e6 08             	shl    esi,0x8
10002c9e:	09 f0                	or     eax,esi
10002ca0:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002ca6:	76 05                	jbe    10002cad <ssfn_render+0x17de>
10002ca8:	bb ff 00 00 00       	mov    ebx,0xff
10002cad:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002cb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002cb5:	d3 e3                	shl    ebx,cl
10002cb7:	09 c3                	or     ebx,eax
10002cb9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002cc0:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002cc3:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002cc7:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002ccb:	75 1e                	jne    10002ceb <ssfn_render+0x181c>
10002ccd:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002cd4:	7e 07                	jle    10002cdd <ssfn_render+0x180e>
10002cd6:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002cdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002ce1:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002ce5:	7d 04                	jge    10002ceb <ssfn_render+0x181c>
10002ce7:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002ceb:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002cf3:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002cf7:	0f 85 ca fb ff ff    	jne    100028c7 <ssfn_render+0x13f8>
10002cfd:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d04:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002d08:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002d0c:	25 fc ff 00 00       	and    eax,0xfffc
10002d11:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002d18:	e9 10 fb ff ff       	jmp    1000282d <ssfn_render+0x135e>
10002d1d:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002d24:	0f 84 90 01 00 00    	je     10002eba <ssfn_render+0x19eb>
10002d2a:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002d32:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002d39:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002d3d:	40                   	inc    eax
10002d3e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002d42:	29 c7                	sub    edi,eax
10002d44:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002d48:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002d4c:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002d50:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d54:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002d58:	7e 09                	jle    10002d63 <ssfn_render+0x1894>
10002d5a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002d5e:	40                   	inc    eax
10002d5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d63:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002d6a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d71:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002d75:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002d79:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002d7d:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002d81:	0f af c2             	imul   eax,edx
10002d84:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002d88:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002d8c:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002d90:	03 07                	add    eax,DWORD PTR [edi]
10002d92:	89 c7                	mov    edi,eax
10002d94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002d98:	c1 e0 18             	shl    eax,0x18
10002d9b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002d9f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002da3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002da7:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002dac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002db0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002db4:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002db8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002dbc:	0f 8e f8 00 00 00    	jle    10002eba <ssfn_render+0x19eb>
10002dc2:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002dc9:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002dd0:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002dd4:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002dd8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002ddc:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002de0:	39 d0                	cmp    eax,edx
10002de2:	0f 8d d2 00 00 00    	jge    10002eba <ssfn_render+0x19eb>
10002de8:	31 db                	xor    ebx,ebx
10002dea:	85 c0                	test   eax,eax
10002dec:	79 23                	jns    10002e11 <ssfn_render+0x1942>
10002dee:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002df5:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002df9:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002dfd:	25 fc ff 00 00       	and    eax,0xfffc
10002e02:	01 c7                	add    edi,eax
10002e04:	eb aa                	jmp    10002db0 <ssfn_render+0x18e1>
10002e06:	85 c0                	test   eax,eax
10002e08:	79 20                	jns    10002e2a <ssfn_render+0x195b>
10002e0a:	43                   	inc    ebx
10002e0b:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002e0f:	7c dd                	jl     10002dee <ssfn_render+0x191f>
10002e11:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e18:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002e1c:	01 d8                	add    eax,ebx
10002e1e:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002e22:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002e26:	7c de                	jl     10002e06 <ssfn_render+0x1937>
10002e28:	eb c4                	jmp    10002dee <ssfn_render+0x191f>
10002e2a:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002e2e:	7e 06                	jle    10002e36 <ssfn_render+0x1967>
10002e30:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002e34:	7f d4                	jg     10002e0a <ssfn_render+0x193b>
10002e36:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002e39:	b8 10 00 00 00       	mov    eax,0x10
10002e3e:	0f b6 f6             	movzx  esi,dh
10002e41:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002e45:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002e49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002e4d:	89 d0                	mov    eax,edx
10002e4f:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002e53:	d3 e8                	shr    eax,cl
10002e55:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e59:	0f b6 c0             	movzx  eax,al
10002e5c:	d3 ea                	shr    edx,cl
10002e5e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002e62:	0f b6 f2             	movzx  esi,dl
10002e65:	29 c1                	sub    ecx,eax
10002e67:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002e6b:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002e70:	29 f2                	sub    edx,esi
10002e72:	c1 f9 08             	sar    ecx,0x8
10002e75:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e7a:	01 c8                	add    eax,ecx
10002e7c:	c1 fa 08             	sar    edx,0x8
10002e7f:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002e83:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002e87:	d3 e0                	shl    eax,cl
10002e89:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002e8d:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002e91:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002e95:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e99:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e9e:	d3 e6                	shl    esi,cl
10002ea0:	c1 fa 08             	sar    edx,0x8
10002ea3:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002ea7:	c1 e2 08             	shl    edx,0x8
10002eaa:	09 d0                	or     eax,edx
10002eac:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002eb0:	09 c6                	or     esi,eax
10002eb2:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002eb5:	e9 50 ff ff ff       	jmp    10002e0a <ssfn_render+0x193b>
10002eba:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002ec1:	0f 84 80 01 00 00    	je     10003047 <ssfn_render+0x1b78>
10002ec7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002ecb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002ecf:	d1 fa                	sar    edx,1
10002ed1:	40                   	inc    eax
10002ed2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002ed6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002eda:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002ede:	7e 09                	jle    10002ee9 <ssfn_render+0x1a1a>
10002ee0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002ee4:	40                   	inc    eax
10002ee5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002ee9:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002ef0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ef7:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002efb:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002eff:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002f03:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002f07:	01 d0                	add    eax,edx
10002f09:	0f af c1             	imul   eax,ecx
10002f0c:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002f10:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002f14:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002f18:	03 03                	add    eax,DWORD PTR [ebx]
10002f1a:	89 c7                	mov    edi,eax
10002f1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002f20:	c1 e0 18             	shl    eax,0x18
10002f23:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002f27:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002f2f:	01 d0                	add    eax,edx
10002f31:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002f35:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002f3a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002f3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002f42:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002f46:	0f 8e fb 00 00 00    	jle    10003047 <ssfn_render+0x1b78>
10002f4c:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002f53:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002f57:	01 d8                	add    eax,ebx
10002f59:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002f60:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002f64:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002f68:	39 d0                	cmp    eax,edx
10002f6a:	0f 8d d7 00 00 00    	jge    10003047 <ssfn_render+0x1b78>
10002f70:	31 f6                	xor    esi,esi
10002f72:	85 c0                	test   eax,eax
10002f74:	0f 89 ad 00 00 00    	jns    10003027 <ssfn_render+0x1b58>
10002f7a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002f81:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002f85:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002f89:	25 fc ff 00 00       	and    eax,0xfffc
10002f8e:	01 c7                	add    edi,eax
10002f90:	eb ac                	jmp    10002f3e <ssfn_render+0x1a6f>
10002f92:	85 c0                	test   eax,eax
10002f94:	0f 88 82 00 00 00    	js     1000301c <ssfn_render+0x1b4d>
10002f9a:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002f9d:	b8 10 00 00 00       	mov    eax,0x10
10002fa2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002fa6:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002faa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002fae:	89 d8                	mov    eax,ebx
10002fb0:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002fb4:	d3 e8                	shr    eax,cl
10002fb6:	0f b6 cf             	movzx  ecx,bh
10002fb9:	0f b6 c0             	movzx  eax,al
10002fbc:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002fc0:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002fc4:	d3 eb                	shr    ebx,cl
10002fc6:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002fca:	0f b6 db             	movzx  ebx,bl
10002fcd:	29 c1                	sub    ecx,eax
10002fcf:	29 da                	sub    edx,ebx
10002fd1:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002fd6:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002fdb:	c1 f9 08             	sar    ecx,0x8
10002fde:	c1 fa 08             	sar    edx,0x8
10002fe1:	01 c8                	add    eax,ecx
10002fe3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002fe7:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002feb:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002fef:	d3 e0                	shl    eax,cl
10002ff1:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002ff5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002ff9:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002ffe:	c1 fa 08             	sar    edx,0x8
10003001:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10003005:	c1 e2 08             	shl    edx,0x8
10003008:	09 d0                	or     eax,edx
1000300a:	8d 14 19             	lea    edx,[ecx+ebx*1]
1000300d:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10003011:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10003015:	d3 e2                	shl    edx,cl
10003017:	09 c2                	or     edx,eax
10003019:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
1000301c:	46                   	inc    esi
1000301d:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10003021:	0f 8c 53 ff ff ff    	jl     10002f7a <ssfn_render+0x1aab>
10003027:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000302e:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10003032:	01 f0                	add    eax,esi
10003034:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10003038:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
1000303c:	0f 8c 50 ff ff ff    	jl     10002f92 <ssfn_render+0x1ac3>
10003042:	e9 33 ff ff ff       	jmp    10002f7a <ssfn_render+0x1aab>
10003047:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
1000304e:	74 04                	je     10003054 <ssfn_render+0x1b85>
10003050:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10003054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003058:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000305c:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10003062:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10003069:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
1000306d:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10003074:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003077:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
1000307b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10003081:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10003085:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000308a:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000308e:	99                   	cdq    
1000308f:	f7 f9                	idiv   ecx
10003091:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10003095:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
1000309b:	25 80 00 00 00       	and    eax,0x80
100030a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100030a4:	0f 85 f7 01 00 00    	jne    100032a1 <ssfn_render+0x1dd2>
100030aa:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100030ad:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
100030b1:	0f 84 ea 01 00 00    	je     100032a1 <ssfn_render+0x1dd2>
100030b7:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
100030be:	83 ec 0c             	sub    esp,0xc
100030c1:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
100030c8:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
100030cf:	51                   	push   ecx
100030d0:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
100030d7:	e8 53 d9 ff ff       	call   10000a2f <_ssfn_c>
100030dc:	83 c4 10             	add    esp,0x10
100030df:	85 c0                	test   eax,eax
100030e1:	0f 84 ba 01 00 00    	je     100032a1 <ssfn_render+0x1dd2>
100030e7:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
100030ef:	0f 86 ac 01 00 00    	jbe    100032a1 <ssfn_render+0x1dd2>
100030f5:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
100030fb:	8d 48 06             	lea    ecx,[eax+0x6]
100030fe:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10003104:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10003108:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
1000310c:	0f 8e 8f 01 00 00    	jle    100032a1 <ssfn_render+0x1dd2>
10003112:	8a 19                	mov    bl,BYTE PTR [ecx]
10003114:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10003118:	8a 18                	mov    bl,BYTE PTR [eax]
1000311a:	83 e3 40             	and    ebx,0x40
1000311d:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10003122:	75 14                	jne    10003138 <ssfn_render+0x1c69>
10003124:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10003128:	75 0e                	jne    10003138 <ssfn_render+0x1c69>
1000312a:	80 fb 01             	cmp    bl,0x1
1000312d:	19 c0                	sbb    eax,eax
1000312f:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10003133:	e9 60 01 00 00       	jmp    10003298 <ssfn_render+0x1dc9>
10003138:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
1000313c:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10003140:	c1 e6 10             	shl    esi,0x10
10003143:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10003147:	84 db                	test   bl,bl
10003149:	74 08                	je     10003153 <ssfn_render+0x1c84>
1000314b:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
1000314e:	83 c1 06             	add    ecx,0x6
10003151:	eb 0c                	jmp    1000315f <ssfn_render+0x1c90>
10003153:	c1 e2 08             	shl    edx,0x8
10003156:	83 c1 05             	add    ecx,0x5
10003159:	89 d0                	mov    eax,edx
1000315b:	09 f0                	or     eax,esi
1000315d:	09 c7                	or     edi,eax
1000315f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003162:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003166:	01 f8                	add    eax,edi
10003168:	8a 10                	mov    dl,BYTE PTR [eax]
1000316a:	88 d3                	mov    bl,dl
1000316c:	83 e3 e0             	and    ebx,0xffffffe0
1000316f:	80 fb c0             	cmp    bl,0xc0
10003172:	0f 85 20 01 00 00    	jne    10003298 <ssfn_render+0x1dc9>
10003178:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
1000317c:	c1 e2 08             	shl    edx,0x8
1000317f:	83 c0 02             	add    eax,0x2
10003182:	81 e2 00 1f 00 00    	and    edx,0x1f00
10003188:	09 da                	or     edx,ebx
1000318a:	8d 72 01             	lea    esi,[edx+0x1]
1000318d:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003191:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
10003198:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
1000319c:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
100031a1:	0f 84 f1 00 00 00    	je     10003298 <ssfn_render+0x1dc9>
100031a7:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
100031ab:	0f b7 10             	movzx  edx,WORD PTR [eax]
100031ae:	c1 e3 10             	shl    ebx,0x10
100031b1:	81 e3 00 00 0f 00    	and    ebx,0xf0000
100031b7:	09 d3                	or     ebx,edx
100031b9:	39 de                	cmp    esi,ebx
100031bb:	0f 82 cf 00 00 00    	jb     10003290 <ssfn_render+0x1dc1>
100031c1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
100031c4:	89 d7                	mov    edi,edx
100031c6:	c1 e7 10             	shl    edi,0x10
100031c9:	81 e7 00 00 0f 00    	and    edi,0xf0000
100031cf:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
100031d3:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
100031d7:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
100031db:	39 fe                	cmp    esi,edi
100031dd:	0f 87 ad 00 00 00    	ja     10003290 <ssfn_render+0x1dc1>
100031e3:	29 de                	sub    esi,ebx
100031e5:	c0 ea 04             	shr    dl,0x4
100031e8:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
100031ef:	0f b6 d2             	movzx  edx,dl
100031f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100031f6:	89 d3                	mov    ebx,edx
100031f8:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
100031fc:	c1 e3 10             	shl    ebx,0x10
100031ff:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10003202:	09 da                	or     edx,ebx
10003204:	c0 e8 04             	shr    al,0x4
10003207:	c1 e0 18             	shl    eax,0x18
1000320a:	09 c2                	or     edx,eax
1000320c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003210:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
10003213:	01 c2                	add    edx,eax
10003215:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003218:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
1000321c:	39 d7                	cmp    edi,edx
1000321e:	76 78                	jbe    10003298 <ssfn_render+0x1dc9>
10003220:	8a 1a                	mov    bl,BYTE PTR [edx]
10003222:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
10003229:	89 de                	mov    esi,ebx
1000322b:	83 e6 7f             	and    esi,0x7f
1000322e:	39 c6                	cmp    esi,eax
10003230:	73 1d                	jae    1000324f <ssfn_render+0x1d80>
10003232:	48                   	dec    eax
10003233:	bb 02 00 00 00       	mov    ebx,0x2
10003238:	29 f0                	sub    eax,esi
1000323a:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
10003241:	0f b6 02             	movzx  eax,BYTE PTR [edx]
10003244:	84 c0                	test   al,al
10003246:	78 03                	js     1000324b <ssfn_render+0x1d7c>
10003248:	8d 58 02             	lea    ebx,[eax+0x2]
1000324b:	01 da                	add    edx,ebx
1000324d:	eb cd                	jmp    1000321c <ssfn_render+0x1d4d>
1000324f:	be 01 00 00 00       	mov    esi,0x1
10003254:	84 db                	test   bl,bl
10003256:	78 03                	js     1000325b <ssfn_render+0x1d8c>
10003258:	8d 70 01             	lea    esi,[eax+0x1]
1000325b:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
1000325f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003263:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10003268:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
1000326c:	99                   	cdq    
1000326d:	f7 fb                	idiv   ebx
1000326f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10003274:	74 0d                	je     10003283 <ssfn_render+0x1db4>
10003276:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000327d:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10003281:	eb 15                	jmp    10003298 <ssfn_render+0x1dc9>
10003283:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
1000328a:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
1000328e:	eb 08                	jmp    10003298 <ssfn_render+0x1dc9>
10003290:	83 c0 08             	add    eax,0x8
10003293:	e9 00 ff ff ff       	jmp    10003198 <ssfn_render+0x1cc9>
10003298:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
1000329c:	e9 5d fe ff ff       	jmp    100030fe <ssfn_render+0x1c2f>
100032a1:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
100032a8:	eb 73                	jmp    1000331d <ssfn_render+0x1e4e>
100032aa:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100032b5:	e9 50 e4 ff ff       	jmp    1000170a <ssfn_render+0x23b>
100032ba:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100032c1:	57                   	push   edi
100032c2:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100032c9:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100032d0:	e8 5a d7 ff ff       	call   10000a2f <_ssfn_c>
100032d5:	5f                   	pop    edi
100032d6:	85 c0                	test   eax,eax
100032d8:	0f 84 25 e4 ff ff    	je     10001703 <ssfn_render+0x234>
100032de:	e9 a2 e4 ff ff       	jmp    10001785 <ssfn_render+0x2b6>
100032e3:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100032e6:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
100032ea:	75 0c                	jne    100032f8 <ssfn_render+0x1e29>
100032ec:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100032f3:	e9 3b e4 ff ff       	jmp    10001733 <ssfn_render+0x264>
100032f8:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100032ff:	57                   	push   edi
10003300:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10003307:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000330e:	e8 1c d7 ff ff       	call   10000a2f <_ssfn_c>
10003313:	59                   	pop    ecx
10003314:	85 c0                	test   eax,eax
10003316:	74 d4                	je     100032ec <ssfn_render+0x1e1d>
10003318:	e9 68 e4 ff ff       	jmp    10001785 <ssfn_render+0x2b6>
1000331d:	81 c4 dc 05 01 00    	add    esp,0x105dc
10003323:	89 c8                	mov    eax,ecx
10003325:	5b                   	pop    ebx
10003326:	5e                   	pop    esi
10003327:	5f                   	pop    edi
10003328:	5d                   	pop    ebp
10003329:	c3                   	ret    

1000332a <ssfn_bbox>:
1000332a:	55                   	push   ebp
1000332b:	57                   	push   edi
1000332c:	56                   	push   esi
1000332d:	53                   	push   ebx
1000332e:	83 ec 3c             	sub    esp,0x3c
10003331:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
10003336:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
1000333a:	0f 94 c0             	sete   al
1000333d:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
10003342:	0f 94 c2             	sete   dl
10003345:	09 d0                	or     eax,edx
10003347:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
1000334c:	0f 94 c2             	sete   dl
1000334f:	09 d0                	or     eax,edx
10003351:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
10003356:	0f 94 c2             	sete   dl
10003359:	09 d0                	or     eax,edx
1000335b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003360:	0f 94 c2             	sete   dl
10003363:	08 d0                	or     al,dl
10003365:	0f 85 7c 01 00 00    	jne    100034e7 <ssfn_bbox+0x1bd>
1000336b:	85 db                	test   ebx,ebx
1000336d:	0f 84 74 01 00 00    	je     100034e7 <ssfn_bbox+0x1bd>
10003373:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003377:	31 f6                	xor    esi,esi
10003379:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000337f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003383:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003389:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
1000338d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003393:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003397:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000339d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100033a1:	80 38 00             	cmp    BYTE PTR [eax],0x0
100033a4:	0f 84 42 01 00 00    	je     100034ec <ssfn_bbox+0x1c2>
100033aa:	8d 54 24 18          	lea    edx,[esp+0x18]
100033ae:	b9 06 00 00 00       	mov    ecx,0x6
100033b3:	89 d7                	mov    edi,edx
100033b5:	89 f0                	mov    eax,esi
100033b7:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100033c1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100033c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100033cb:	31 ff                	xor    edi,edi
100033cd:	bd 01 00 00 00       	mov    ebp,0x1
100033d2:	50                   	push   eax
100033d3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100033d7:	8d 44 24 20          	lea    eax,[esp+0x20]
100033db:	50                   	push   eax
100033dc:	53                   	push   ebx
100033dd:	e8 fc ff ff ff       	call   100033de <ssfn_bbox+0xb4>	100033de: R_386_PC32	ssfn_render
100033e2:	83 c4 10             	add    esp,0x10
100033e5:	89 c6                	mov    esi,eax
100033e7:	85 c0                	test   eax,eax
100033e9:	74 6f                	je     1000345a <ssfn_bbox+0x130>
100033eb:	0f 88 fb 00 00 00    	js     100034ec <ssfn_bbox+0x1c2>
100033f1:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100033f7:	85 c0                	test   eax,eax
100033f9:	0f 84 ed 00 00 00    	je     100034ec <ssfn_bbox+0x1c2>
100033ff:	85 ed                	test   ebp,ebp
10003401:	74 0b                	je     1000340e <ssfn_bbox+0xe4>
10003403:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
10003409:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
1000340e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003412:	74 12                	je     10003426 <ssfn_bbox+0xfc>
10003414:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
1000341a:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
1000341e:	7d 2f                	jge    1000344f <ssfn_bbox+0x125>
10003420:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003424:	eb 29                	jmp    1000344f <ssfn_bbox+0x125>
10003426:	0f b7 08             	movzx  ecx,WORD PTR [eax]
10003429:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
1000342e:	39 cd                	cmp    ebp,ecx
10003430:	7d 05                	jge    10003437 <ssfn_bbox+0x10d>
10003432:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
10003437:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
1000343b:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
10003440:	84 d2                	test   dl,dl
10003442:	75 04                	jne    10003448 <ssfn_bbox+0x11e>
10003444:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
10003448:	01 ca                	add    edx,ecx
1000344a:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
1000344f:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10003453:	31 ed                	xor    ebp,ebp
10003455:	e9 78 ff ff ff       	jmp    100033d2 <ssfn_bbox+0xa8>
1000345a:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10003461:	74 23                	je     10003486 <ssfn_bbox+0x15c>
10003463:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003466:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
1000346a:	75 1a                	jne    10003486 <ssfn_bbox+0x15c>
1000346c:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
10003472:	b9 04 00 00 00       	mov    ecx,0x4
10003477:	99                   	cdq    
10003478:	f7 f9                	idiv   ecx
1000347a:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
1000347f:	29 f8                	sub    eax,edi
10003481:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
10003486:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
1000348c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003490:	74 29                	je     100034bb <ssfn_bbox+0x191>
10003492:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003497:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000349b:	89 01                	mov    DWORD PTR [ecx],eax
1000349d:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100034a1:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
100034a7:	89 01                	mov    DWORD PTR [ecx],eax
100034a9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100034ad:	89 38                	mov    DWORD PTR [eax],edi
100034af:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100034b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100034b7:	89 38                	mov    DWORD PTR [eax],edi
100034b9:	eb 31                	jmp    100034ec <ssfn_bbox+0x1c2>
100034bb:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
100034c0:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
100034c4:	89 07                	mov    DWORD PTR [edi],eax
100034c6:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
100034cb:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
100034cf:	89 07                	mov    DWORD PTR [edi],eax
100034d1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100034d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100034db:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100034df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100034e5:	eb 05                	jmp    100034ec <ssfn_bbox+0x1c2>
100034e7:	be fc ff ff ff       	mov    esi,0xfffffffc
100034ec:	83 c4 3c             	add    esp,0x3c
100034ef:	89 f0                	mov    eax,esi
100034f1:	5b                   	pop    ebx
100034f2:	5e                   	pop    esi
100034f3:	5f                   	pop    edi
100034f4:	5d                   	pop    ebp
100034f5:	c3                   	ret    

100034f6 <ssfn_text>:
100034f6:	55                   	push   ebp
100034f7:	57                   	push   edi
100034f8:	56                   	push   esi
100034f9:	53                   	push   ebx
100034fa:	83 ec 1c             	sub    esp,0x1c
100034fd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10003501:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
10003505:	85 f6                	test   esi,esi
10003507:	0f 84 b2 00 00 00    	je     100035bf <ssfn_text+0xc9>
1000350d:	85 ed                	test   ebp,ebp
1000350f:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
10003514:	0f 84 a5 00 00 00    	je     100035bf <ssfn_text+0xc9>
1000351a:	83 ec 0c             	sub    esp,0xc
1000351d:	6a 18                	push   0x18
1000351f:	e8 fc ff ff ff       	call   10003520 <ssfn_text+0x2a>	10003520: R_386_PC32	malloc
10003524:	83 c4 10             	add    esp,0x10
10003527:	89 c3                	mov    ebx,eax
10003529:	85 c0                	test   eax,eax
1000352b:	0f 84 8e 00 00 00    	je     100035bf <ssfn_text+0xc9>
10003531:	31 c0                	xor    eax,eax
10003533:	b9 06 00 00 00       	mov    ecx,0x6
10003538:	89 df                	mov    edi,ebx
1000353a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
1000353d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000353f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003543:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10003546:	74 79                	je     100035c1 <ssfn_text+0xcb>
10003548:	8d 43 0c             	lea    eax,[ebx+0xc]
1000354b:	52                   	push   edx
1000354c:	52                   	push   edx
1000354d:	50                   	push   eax
1000354e:	8d 43 0a             	lea    eax,[ebx+0xa]
10003551:	50                   	push   eax
10003552:	8d 43 06             	lea    eax,[ebx+0x6]
10003555:	50                   	push   eax
10003556:	8d 43 04             	lea    eax,[ebx+0x4]
10003559:	50                   	push   eax
1000355a:	56                   	push   esi
1000355b:	55                   	push   ebp
1000355c:	e8 fc ff ff ff       	call   1000355d <ssfn_text+0x67>	1000355d: R_386_PC32	ssfn_bbox
10003561:	83 c4 20             	add    esp,0x20
10003564:	85 c0                	test   eax,eax
10003566:	75 59                	jne    100035c1 <ssfn_text+0xcb>
10003568:	83 ec 0c             	sub    esp,0xc
1000356b:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
1000356f:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10003573:	0f af c8             	imul   ecx,eax
10003576:	c1 e1 02             	shl    ecx,0x2
10003579:	51                   	push   ecx
1000357a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000357e:	e8 fc ff ff ff       	call   1000357f <ssfn_text+0x89>	1000357f: R_386_PC32	malloc
10003583:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003587:	89 c7                	mov    edi,eax
10003589:	89 03                	mov    DWORD PTR [ebx],eax
1000358b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
1000358f:	83 c4 10             	add    esp,0x10
10003592:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003594:	50                   	push   eax
10003595:	56                   	push   esi
10003596:	53                   	push   ebx
10003597:	55                   	push   ebp
10003598:	e8 fc ff ff ff       	call   10003599 <ssfn_text+0xa3>	10003599: R_386_PC32	ssfn_render
1000359d:	83 c4 10             	add    esp,0x10
100035a0:	85 c0                	test   eax,eax
100035a2:	7e 04                	jle    100035a8 <ssfn_text+0xb2>
100035a4:	01 c6                	add    esi,eax
100035a6:	eb ec                	jmp    10003594 <ssfn_text+0x9e>
100035a8:	74 17                	je     100035c1 <ssfn_text+0xcb>
100035aa:	83 ec 0c             	sub    esp,0xc
100035ad:	ff 33                	push   DWORD PTR [ebx]
100035af:	e8 fc ff ff ff       	call   100035b0 <ssfn_text+0xba>	100035b0: R_386_PC32	free
100035b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
100035b7:	e8 fc ff ff ff       	call   100035b8 <ssfn_text+0xc2>	100035b8: R_386_PC32	free
100035bc:	83 c4 10             	add    esp,0x10
100035bf:	31 db                	xor    ebx,ebx
100035c1:	83 c4 1c             	add    esp,0x1c
100035c4:	89 d8                	mov    eax,ebx
100035c6:	5b                   	pop    ebx
100035c7:	5e                   	pop    esi
100035c8:	5f                   	pop    edi
100035c9:	5d                   	pop    ebp
100035ca:	c3                   	ret    
100035cb:	90                   	nop

100035cc <NIContext::drvPutpixel4(int, int, unsigned int)>:
100035cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100035d0:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100035d6:	8b 10                	mov    edx,DWORD PTR [eax]
100035d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100035dc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
100035df:	90                   	nop

100035e0 <NIContext::drvDarken4(int, int, int)>:
100035e0:	55                   	push   ebp
100035e1:	57                   	push   edi
100035e2:	56                   	push   esi
100035e3:	53                   	push   ebx
100035e4:	83 ec 20             	sub    esp,0x20
100035e7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
100035eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100035ef:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100035f3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
100035f7:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
100035fd:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10003601:	8b 10                	mov    edx,DWORD PTR [eax]
10003603:	56                   	push   esi
10003604:	53                   	push   ebx
10003605:	50                   	push   eax
10003606:	ff 52 34             	call   DWORD PTR [edx+0x34]
10003609:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000360d:	89 c2                	mov    edx,eax
1000360f:	0f b6 ec             	movzx  ebp,ah
10003612:	c1 ea 10             	shr    edx,0x10
10003615:	0f af e9             	imul   ebp,ecx
10003618:	0f b6 d2             	movzx  edx,dl
1000361b:	0f b6 c0             	movzx  eax,al
1000361e:	0f af d1             	imul   edx,ecx
10003621:	0f af c1             	imul   eax,ecx
10003624:	c1 ea 07             	shr    edx,0x7
10003627:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
1000362d:	c1 e8 07             	shr    eax,0x7
10003630:	8b 39                	mov    edi,DWORD PTR [ecx]
10003632:	c1 e2 10             	shl    edx,0x10
10003635:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
10003639:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
1000363d:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10003641:	c1 ed 07             	shr    ebp,0x7
10003644:	c1 e5 08             	shl    ebp,0x8
10003647:	09 ea                	or     edx,ebp
10003649:	09 c2                	or     edx,eax
1000364b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
1000364f:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
10003652:	83 c4 2c             	add    esp,0x2c
10003655:	5b                   	pop    ebx
10003656:	5e                   	pop    esi
10003657:	5f                   	pop    edi
10003658:	5d                   	pop    ebp
10003659:	ff e0                	jmp    eax
1000365b:	90                   	nop

1000365c <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
1000365c:	55                   	push   ebp
1000365d:	b9 00 40 00 00       	mov    ecx,0x4000
10003662:	57                   	push   edi
10003663:	b0 ff                	mov    al,0xff
10003665:	56                   	push   esi
10003666:	53                   	push   ebx
10003667:	83 ec 3c             	sub    esp,0x3c
1000366a:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
1000366e:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10003672:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10003675:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
10003679:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000367b:	85 db                	test   ebx,ebx
1000367d:	75 10                	jne    1000368f <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
1000367f:	83 ec 0c             	sub    esp,0xc
10003682:	68 dd 56 00 10       	push   0x100056dd	10003683: R_386_32	.text
10003687:	e8 fc ff ff ff       	call   10003688 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	10003688: R_386_PC32	KePanic(char const*)
1000368c:	83 c4 10             	add    esp,0x10
1000368f:	50                   	push   eax
10003690:	50                   	push   eax
10003691:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003695:	50                   	push   eax
10003696:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000369a:	50                   	push   eax
1000369b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000369f:	50                   	push   eax
100036a0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100036a4:	50                   	push   eax
100036a5:	56                   	push   esi
100036a6:	68 00 00 00 00       	push   0x0	100036a7: R_386_32	ssfn_ctx
100036ab:	e8 fc ff ff ff       	call   100036ac <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	100036ac: R_386_PC32	ssfn_bbox
100036b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100036b3:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
100036bb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100036bf:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
100036c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100036cb:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
100036d0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100036d4:	0d 00 00 00 ff       	or     eax,0xff000000
100036d9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100036dd:	83 c4 1c             	add    esp,0x1c
100036e0:	56                   	push   esi
100036e1:	8d 44 24 20          	lea    eax,[esp+0x20]
100036e5:	50                   	push   eax
100036e6:	68 00 00 00 00       	push   0x0	100036e7: R_386_32	ssfn_ctx
100036eb:	e8 fc ff ff ff       	call   100036ec <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	100036ec: R_386_PC32	ssfn_render
100036f0:	83 c4 10             	add    esp,0x10
100036f3:	89 03                	mov    DWORD PTR [ebx],eax
100036f5:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
100036f9:	31 db                	xor    ebx,ebx
100036fb:	89 f0                	mov    eax,esi
100036fd:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
10003701:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10003705:	7e 3f                	jle    10003746 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
10003707:	31 ff                	xor    edi,edi
10003709:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000370e:	39 f8                	cmp    eax,edi
10003710:	7e 2c                	jle    1000373e <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
10003712:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003715:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10003718:	83 f8 ff             	cmp    eax,0xffffffff
1000371b:	74 1d                	je     1000373a <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
1000371d:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
10003723:	25 ff ff ff 00       	and    eax,0xffffff
10003728:	8b 0a                	mov    ecx,DWORD PTR [edx]
1000372a:	50                   	push   eax
1000372b:	56                   	push   esi
1000372c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003730:	01 f8                	add    eax,edi
10003732:	50                   	push   eax
10003733:	52                   	push   edx
10003734:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10003737:	83 c4 10             	add    esp,0x10
1000373a:	43                   	inc    ebx
1000373b:	47                   	inc    edi
1000373c:	eb cb                	jmp    10003709 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
1000373e:	29 c3                	sub    ebx,eax
10003740:	46                   	inc    esi
10003741:	83 c3 40             	add    ebx,0x40
10003744:	eb b5                	jmp    100036fb <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
10003746:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000374b:	83 c4 3c             	add    esp,0x3c
1000374e:	5b                   	pop    ebx
1000374f:	5e                   	pop    esi
10003750:	5f                   	pop    edi
10003751:	5d                   	pop    ebp
10003752:	c3                   	ret    
10003753:	90                   	nop

10003754 <NIContext::~NIContext()>:
10003754:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10003758: R_386_32	ssfn_ctx
1000375c:	e9 00 db ff ff       	jmp    10001261 <ssfn_free>
10003761:	90                   	nop

10003762 <NIContext::NIContext(Video*, int, int, int, int)>:
10003762:	55                   	push   ebp
10003763:	ba 00 00 00 00       	mov    edx,0x0	10003764: R_386_32	ssfn_ctx
10003768:	57                   	push   edi
10003769:	b9 72 3d 00 00       	mov    ecx,0x3d72
1000376e:	56                   	push   esi
1000376f:	89 d7                	mov    edi,edx
10003771:	53                   	push   ebx
10003772:	81 ec 48 02 00 00    	sub    esp,0x248
10003778:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
1000377f:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
10003786:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
1000378c:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
10003793:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
10003799:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
100037a0:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
100037a6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
100037ad:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
100037b3:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
100037ba:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
100037c0:	31 c0                	xor    eax,eax
100037c2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100037c4:	68 00 40 00 00       	push   0x4000
100037c9:	e8 fc ff ff ff       	call   100037ca <NIContext::NIContext(Video*, int, int, int, int)+0x68>	100037ca: R_386_PC32	malloc
100037ce:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
100037d8:	89 03                	mov    DWORD PTR [ebx],eax
100037da:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100037e1:	e8 fc ff ff ff       	call   100037e2 <NIContext::NIContext(Video*, int, int, int, int)+0x80>	100037e2: R_386_PC32	malloc
100037e6:	83 c4 0c             	add    esp,0xc
100037e9:	89 c6                	mov    esi,eax
100037eb:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100037ed: R_386_32	kernelProcess
100037f1:	68 f6 56 00 10       	push   0x100056f6	100037f2: R_386_32	.text
100037f6:	50                   	push   eax
100037f7:	e8 fc ff ff ff       	call   100037f8 <NIContext::NIContext(Video*, int, int, int, int)+0x96>	100037f8: R_386_PC32	Directory::Directory(char const*, Process*)
100037fc:	83 c4 10             	add    esp,0x10
100037ff:	85 f6                	test   esi,esi
10003801:	75 10                	jne    10003813 <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
10003803:	83 ec 0c             	sub    esp,0xc
10003806:	68 0a 57 00 10       	push   0x1000570a	10003807: R_386_32	.text
1000380b:	e8 fc ff ff ff       	call   1000380c <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	1000380c: R_386_PC32	KePanic(char const*)
10003810:	83 c4 10             	add    esp,0x10
10003813:	83 ec 0c             	sub    esp,0xc
10003816:	56                   	push   esi
10003817:	e8 fc ff ff ff       	call   10003818 <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	10003818: R_386_PC32	Directory::open()
1000381c:	83 c4 10             	add    esp,0x10
1000381f:	85 c0                	test   eax,eax
10003821:	75 e0                	jne    10003803 <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
10003823:	83 ec 0c             	sub    esp,0xc
10003826:	8b 06                	mov    eax,DWORD PTR [esi]
10003828:	8d 4c 24 20          	lea    ecx,[esp+0x20]
1000382c:	51                   	push   ecx
1000382d:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
10003834:	52                   	push   edx
10003835:	6a 00                	push   0x0
10003837:	68 10 01 00 00       	push   0x110
1000383c:	56                   	push   esi
1000383d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003840:	83 c4 20             	add    esp,0x20
10003843:	85 c0                	test   eax,eax
10003845:	0f 85 a0 01 00 00    	jne    100039eb <NIContext::NIContext(Video*, int, int, int, int)+0x289>
1000384b:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
10003853:	0f 85 92 01 00 00    	jne    100039eb <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003859:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
10003860:	83 c9 ff             	or     ecx,0xffffffff
10003863:	83 ec 0c             	sub    esp,0xc
10003866:	89 ef                	mov    edi,ebp
10003868:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
1000386a:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
10003870:	89 ca                	mov    edx,ecx
10003872:	f7 d2                	not    edx
10003874:	52                   	push   edx
10003875:	e8 fc ff ff ff       	call   10003876 <NIContext::NIContext(Video*, int, int, int, int)+0x114>	10003876: R_386_PC32	malloc
1000387a:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
1000387e:	47                   	inc    edi
1000387f:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
10003885:	5a                   	pop    edx
10003886:	59                   	pop    ecx
10003887:	55                   	push   ebp
10003888:	50                   	push   eax
10003889:	e8 fc ff ff ff       	call   1000388a <NIContext::NIContext(Video*, int, int, int, int)+0x128>	1000388a: R_386_PC32	strcpy
1000388e:	5f                   	pop    edi
1000388f:	58                   	pop    eax
10003890:	68 25 57 00 10       	push   0x10005725	10003891: R_386_32	.text
10003895:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
10003899:	57                   	push   edi
1000389a:	e8 fc ff ff ff       	call   1000389b <NIContext::NIContext(Video*, int, int, int, int)+0x139>	1000389b: R_386_PC32	strcpy
1000389f:	58                   	pop    eax
100038a0:	5a                   	pop    edx
100038a1:	55                   	push   ebp
100038a2:	57                   	push   edi
100038a3:	e8 fc ff ff ff       	call   100038a4 <NIContext::NIContext(Video*, int, int, int, int)+0x142>	100038a4: R_386_PC32	strcat
100038a8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100038af:	e8 fc ff ff ff       	call   100038b0 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	100038b0: R_386_PC32	malloc
100038b4:	83 c4 0c             	add    esp,0xc
100038b7:	89 c5                	mov    ebp,eax
100038b9:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100038bb: R_386_32	kernelProcess
100038bf:	57                   	push   edi
100038c0:	50                   	push   eax
100038c1:	e8 fc ff ff ff       	call   100038c2 <NIContext::NIContext(Video*, int, int, int, int)+0x160>	100038c2: R_386_PC32	File::File(char const*, Process*)
100038c6:	83 c4 10             	add    esp,0x10
100038c9:	85 ed                	test   ebp,ebp
100038cb:	0f 84 52 ff ff ff    	je     10003823 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
100038d1:	50                   	push   eax
100038d2:	50                   	push   eax
100038d3:	6a 01                	push   0x1
100038d5:	55                   	push   ebp
100038d6:	e8 fc ff ff ff       	call   100038d7 <NIContext::NIContext(Video*, int, int, int, int)+0x175>	100038d7: R_386_PC32	File::open(FileOpenMode)
100038db:	83 c4 10             	add    esp,0x10
100038de:	85 c0                	test   eax,eax
100038e0:	74 0c                	je     100038ee <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
100038e2:	83 ec 0c             	sub    esp,0xc
100038e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100038e8:	55                   	push   ebp
100038e9:	e9 b4 00 00 00       	jmp    100039a2 <NIContext::NIContext(Video*, int, int, int, int)+0x240>
100038ee:	50                   	push   eax
100038ef:	8d 44 24 17          	lea    eax,[esp+0x17]
100038f3:	50                   	push   eax
100038f4:	8d 44 24 20          	lea    eax,[esp+0x20]
100038f8:	50                   	push   eax
100038f9:	55                   	push   ebp
100038fa:	e8 fc ff ff ff       	call   100038fb <NIContext::NIContext(Video*, int, int, int, int)+0x199>	100038fb: R_386_PC32	File::stat(unsigned long long*, bool*)
100038ff:	83 c4 10             	add    esp,0x10
10003902:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
10003907:	74 0e                	je     10003917 <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
10003909:	83 ec 0c             	sub    esp,0xc
1000390c:	55                   	push   ebp
1000390d:	e8 fc ff ff ff       	call   1000390e <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	1000390e: R_386_PC32	File::close()
10003912:	e9 85 00 00 00       	jmp    1000399c <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
10003917:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000391b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
1000391f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003923:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10003927:	83 ec 0c             	sub    esp,0xc
1000392a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000392e:	e8 fc ff ff ff       	call   1000392f <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	1000392f: R_386_PC32	malloc
10003933:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003937:	58                   	pop    eax
10003938:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000393b:	8d 54 24 20          	lea    edx,[esp+0x20]
1000393f:	52                   	push   edx
10003940:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10003944:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003948:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000394c:	55                   	push   ebp
1000394d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003950:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003954:	83 c4 1c             	add    esp,0x1c
10003957:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000395b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000395f:	68 3a 57 00 10       	push   0x1000573a	10003960: R_386_32	.text
10003964:	e8 fc ff ff ff       	call   10003965 <NIContext::NIContext(Video*, int, int, int, int)+0x203>	10003965: R_386_PC32	Dbg::kprintf(char const*, ...)
10003969:	83 c4 10             	add    esp,0x10
1000396c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003970:	85 c0                	test   eax,eax
10003972:	75 15                	jne    10003989 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003978:	89 c1                	mov    ecx,eax
1000397a:	c1 f9 1f             	sar    ecx,0x1f
1000397d:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10003981:	75 06                	jne    10003989 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003983:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10003987:	74 24                	je     100039ad <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
10003989:	83 ec 0c             	sub    esp,0xc
1000398c:	55                   	push   ebp
1000398d:	e8 fc ff ff ff       	call   1000398e <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	1000398e: R_386_PC32	File::close()
10003992:	58                   	pop    eax
10003993:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10003997:	e8 fc ff ff ff       	call   10003998 <NIContext::NIContext(Video*, int, int, int, int)+0x236>	10003998: R_386_PC32	free
1000399c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000399f:	89 2c 24             	mov    DWORD PTR [esp],ebp
100039a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
100039a5:	83 c4 10             	add    esp,0x10
100039a8:	e9 76 fe ff ff       	jmp    10003823 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
100039ad:	50                   	push   eax
100039ae:	50                   	push   eax
100039af:	57                   	push   edi
100039b0:	68 4e 57 00 10       	push   0x1000574e	100039b1: R_386_32	.text
100039b5:	e8 fc ff ff ff       	call   100039b6 <NIContext::NIContext(Video*, int, int, int, int)+0x254>	100039b6: R_386_PC32	Dbg::kprintf(char const*, ...)
100039ba:	5a                   	pop    edx
100039bb:	59                   	pop    ecx
100039bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
100039c0:	68 00 00 00 00       	push   0x0	100039c1: R_386_32	ssfn_ctx
100039c5:	e8 fc ff ff ff       	call   100039c6 <NIContext::NIContext(Video*, int, int, int, int)+0x264>	100039c6: R_386_PC32	ssfn_load
100039ca:	5b                   	pop    ebx
100039cb:	5f                   	pop    edi
100039cc:	50                   	push   eax
100039cd:	68 5f 57 00 10       	push   0x1000575f	100039ce: R_386_32	.text
100039d2:	e8 fc ff ff ff       	call   100039d3 <NIContext::NIContext(Video*, int, int, int, int)+0x271>	100039d3: R_386_PC32	Dbg::kprintf(char const*, ...)
100039d7:	89 2c 24             	mov    DWORD PTR [esp],ebp
100039da:	e8 fc ff ff ff       	call   100039db <NIContext::NIContext(Video*, int, int, int, int)+0x279>	100039db: R_386_PC32	File::close()
100039df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100039e2:	89 2c 24             	mov    DWORD PTR [esp],ebp
100039e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
100039e8:	83 c4 10             	add    esp,0x10
100039eb:	83 ec 0c             	sub    esp,0xc
100039ee:	56                   	push   esi
100039ef:	e8 fc ff ff ff       	call   100039f0 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	100039f0: R_386_PC32	Directory::close()
100039f4:	8b 06                	mov    eax,DWORD PTR [esi]
100039f6:	89 34 24             	mov    DWORD PTR [esp],esi
100039f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
100039fc:	b8 00 00 00 00       	mov    eax,0x0	100039fd: R_386_32	ssfn_ctx
10003a01:	e8 f7 cb ff ff       	call   100005fd <_ssfn_fc.part.1>
10003a06:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	10003a08: R_386_32	ssfn_ctx
10003a10:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	10003a12: R_386_32	ssfn_ctx
10003a1a:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	10003a1c: R_386_32	ssfn_ctx
10003a24:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	10003a26: R_386_32	ssfn_ctx
10003a2e:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	10003a30: R_386_32	ssfn_ctx
10003a38:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	10003a3a: R_386_32	ssfn_ctx
10003a42:	81 c4 4c 02 00 00    	add    esp,0x24c
10003a48:	5b                   	pop    ebx
10003a49:	5e                   	pop    esi
10003a4a:	5f                   	pop    edi
10003a4b:	5d                   	pop    ebp
10003a4c:	c3                   	ret    
10003a4d:	90                   	nop

10003a4e <NiCreateEvent(NIWindow*, int, bool)>:
10003a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003a52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003a56:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10003a59:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
10003a5f:	81 e2 00 00 00 80    	and    edx,0x80000000
10003a65:	09 ca                	or     edx,ecx
10003a67:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10003a6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10003a6e:	c1 e1 07             	shl    ecx,0x7
10003a71:	8a 50 07             	mov    dl,BYTE PTR [eax+0x7]
10003a74:	83 e2 7f             	and    edx,0x7f
10003a77:	09 ca                	or     edx,ecx
10003a79:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10003a7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10003a80:	89 10                	mov    DWORD PTR [eax],edx
10003a82:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003a84: R_386_32	mouseDesktop
10003a88:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
10003a8b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
10003a8e:	66 89 48 08          	mov    WORD PTR [eax+0x8],cx
10003a92:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
10003a96:	c2 04 00             	ret    0x4

10003a99 <NiLoadCursors()>:
10003a99:	55                   	push   ebp
10003a9a:	57                   	push   edi
10003a9b:	56                   	push   esi
10003a9c:	53                   	push   ebx
10003a9d:	83 ec 38             	sub    esp,0x38
10003aa0:	68 14 01 00 00       	push   0x114
10003aa5:	e8 fc ff ff ff       	call   10003aa6 <NiLoadCursors()+0xd>	10003aa6: R_386_PC32	malloc
10003aaa:	83 c4 0c             	add    esp,0xc
10003aad:	89 c5                	mov    ebp,eax
10003aaf:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10003ab1: R_386_32	kernelProcess
10003ab5:	68 1c 5a 00 10       	push   0x10005a1c	10003ab6: R_386_32	.text
10003aba:	50                   	push   eax
10003abb:	e8 fc ff ff ff       	call   10003abc <NiLoadCursors()+0x23>	10003abc: R_386_PC32	File::File(char const*, Process*)
10003ac0:	58                   	pop    eax
10003ac1:	5a                   	pop    edx
10003ac2:	6a 01                	push   0x1
10003ac4:	55                   	push   ebp
10003ac5:	e8 fc ff ff ff       	call   10003ac6 <NiLoadCursors()+0x2d>	10003ac6: R_386_PC32	File::open(FileOpenMode)
10003aca:	83 c4 10             	add    esp,0x10
10003acd:	85 c0                	test   eax,eax
10003acf:	74 0a                	je     10003adb <NiLoadCursors()+0x42>
10003ad1:	83 ec 0c             	sub    esp,0xc
10003ad4:	68 3b 5a 00 10       	push   0x10005a3b	10003ad5: R_386_32	.text
10003ad9:	eb 4c                	jmp    10003b27 <NiLoadCursors()+0x8e>
10003adb:	53                   	push   ebx
10003adc:	8d 44 24 17          	lea    eax,[esp+0x17]
10003ae0:	50                   	push   eax
10003ae1:	8d 44 24 20          	lea    eax,[esp+0x20]
10003ae5:	50                   	push   eax
10003ae6:	55                   	push   ebp
10003ae7:	e8 fc ff ff ff       	call   10003ae8 <NiLoadCursors()+0x4f>	10003ae8: R_386_PC32	File::stat(unsigned long long*, bool*)
10003aec:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10003af0:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10003af4:	89 34 24             	mov    DWORD PTR [esp],esi
10003af7:	e8 fc ff ff ff       	call   10003af8 <NiLoadCursors()+0x5f>	10003af8: R_386_PC32	malloc
10003afc:	89 c3                	mov    ebx,eax
10003afe:	58                   	pop    eax
10003aff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003b02:	8d 54 24 20          	lea    edx,[esp+0x20]
10003b06:	52                   	push   edx
10003b07:	53                   	push   ebx
10003b08:	57                   	push   edi
10003b09:	56                   	push   esi
10003b0a:	55                   	push   ebp
10003b0b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003b0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003b12:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10003b16:	83 c4 20             	add    esp,0x20
10003b19:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10003b1d:	74 12                	je     10003b31 <NiLoadCursors()+0x98>
10003b1f:	83 ec 0c             	sub    esp,0xc
10003b22:	68 4f 5a 00 10       	push   0x10005a4f	10003b23: R_386_32	.text
10003b27:	e8 fc ff ff ff       	call   10003b28 <NiLoadCursors()+0x8f>	10003b28: R_386_PC32	Dbg::kprintf(char const*, ...)
10003b2c:	e9 3d 01 00 00       	jmp    10003c6e <NiLoadCursors()+0x1d5>
10003b31:	6a 00                	push   0x0
10003b33:	31 ed                	xor    ebp,ebp
10003b35:	68 04 01 00 00       	push   0x104
10003b3a:	52                   	push   edx
10003b3b:	50                   	push   eax
10003b3c:	e8 fc ff ff ff       	call   10003b3d <NiLoadCursors()+0xa4>	10003b3d: R_386_PC32	__udivdi3
10003b41:	5a                   	pop    edx
10003b42:	59                   	pop    ecx
10003b43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003b47:	50                   	push   eax
10003b48:	68 63 5a 00 10       	push   0x10005a63	10003b49: R_386_32	.text
10003b4d:	e8 fc ff ff ff       	call   10003b4e <NiLoadCursors()+0xb5>	10003b4e: R_386_PC32	Dbg::kprintf(char const*, ...)
10003b52:	89 1c 24             	mov    DWORD PTR [esp],ebx
10003b55:	e8 fc ff ff ff       	call   10003b56 <NiLoadCursors()+0xbd>	10003b56: R_386_PC32	Dbg::kprintf(char const*, ...)
10003b5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10003b5e:	8d 04 83             	lea    eax,[ebx+eax*4]
10003b61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003b65:	83 c4 10             	add    esp,0x10
10003b68:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
10003b6c:	0f 8d f3 00 00 00    	jge    10003c65 <NiLoadCursors()+0x1cc>
10003b72:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10003b75:	50                   	push   eax
10003b76:	6a 04                	push   0x4
10003b78:	68 70 5a 00 10       	push   0x10005a70	10003b79: R_386_32	.text
10003b7d:	56                   	push   esi
10003b7e:	e8 fc ff ff ff       	call   10003b7f <NiLoadCursors()+0xe6>	10003b7f: R_386_PC32	memcmp
10003b83:	83 c4 10             	add    esp,0x10
10003b86:	85 c0                	test   eax,eax
10003b88:	0f 84 b8 00 00 00    	je     10003c46 <NiLoadCursors()+0x1ad>
10003b8e:	50                   	push   eax
10003b8f:	6a 04                	push   0x4
10003b91:	68 75 5a 00 10       	push   0x10005a75	10003b92: R_386_32	.text
10003b96:	56                   	push   esi
10003b97:	e8 fc ff ff ff       	call   10003b98 <NiLoadCursors()+0xff>	10003b98: R_386_PC32	memcmp
10003b9c:	83 c4 10             	add    esp,0x10
10003b9f:	85 c0                	test   eax,eax
10003ba1:	74 7b                	je     10003c1e <NiLoadCursors()+0x185>
10003ba3:	50                   	push   eax
10003ba4:	6a 04                	push   0x4
10003ba6:	68 7a 5a 00 10       	push   0x10005a7a	10003ba7: R_386_32	.text
10003bab:	56                   	push   esi
10003bac:	e8 fc ff ff ff       	call   10003bad <NiLoadCursors()+0x114>	10003bad: R_386_PC32	memcmp
10003bb1:	83 c4 10             	add    esp,0x10
10003bb4:	85 c0                	test   eax,eax
10003bb6:	74 6d                	je     10003c25 <NiLoadCursors()+0x18c>
10003bb8:	57                   	push   edi
10003bb9:	6a 04                	push   0x4
10003bbb:	68 7f 5a 00 10       	push   0x10005a7f	10003bbc: R_386_32	.text
10003bc0:	56                   	push   esi
10003bc1:	e8 fc ff ff ff       	call   10003bc2 <NiLoadCursors()+0x129>	10003bc2: R_386_PC32	memcmp
10003bc6:	83 c4 10             	add    esp,0x10
10003bc9:	85 c0                	test   eax,eax
10003bcb:	74 5f                	je     10003c2c <NiLoadCursors()+0x193>
10003bcd:	51                   	push   ecx
10003bce:	6a 04                	push   0x4
10003bd0:	68 84 5a 00 10       	push   0x10005a84	10003bd1: R_386_32	.text
10003bd5:	56                   	push   esi
10003bd6:	e8 fc ff ff ff       	call   10003bd7 <NiLoadCursors()+0x13e>	10003bd7: R_386_PC32	memcmp
10003bdb:	83 c4 10             	add    esp,0x10
10003bde:	85 c0                	test   eax,eax
10003be0:	74 51                	je     10003c33 <NiLoadCursors()+0x19a>
10003be2:	52                   	push   edx
10003be3:	6a 04                	push   0x4
10003be5:	68 89 5a 00 10       	push   0x10005a89	10003be6: R_386_32	.text
10003bea:	56                   	push   esi
10003beb:	e8 fc ff ff ff       	call   10003bec <NiLoadCursors()+0x153>	10003bec: R_386_PC32	memcmp
10003bf0:	83 c4 10             	add    esp,0x10
10003bf3:	85 c0                	test   eax,eax
10003bf5:	74 43                	je     10003c3a <NiLoadCursors()+0x1a1>
10003bf7:	50                   	push   eax
10003bf8:	6a 04                	push   0x4
10003bfa:	68 8e 5a 00 10       	push   0x10005a8e	10003bfb: R_386_32	.text
10003bff:	56                   	push   esi
10003c00:	e8 fc ff ff ff       	call   10003c01 <NiLoadCursors()+0x168>	10003c01: R_386_PC32	memcmp
10003c05:	83 c4 10             	add    esp,0x10
10003c08:	85 c0                	test   eax,eax
10003c0a:	74 35                	je     10003c41 <NiLoadCursors()+0x1a8>
10003c0c:	83 ec 0c             	sub    esp,0xc
10003c0f:	68 93 5a 00 10       	push   0x10005a93	10003c10: R_386_32	.text
10003c14:	e8 fc ff ff ff       	call   10003c15 <NiLoadCursors()+0x17c>	10003c15: R_386_PC32	Dbg::kprintf(char const*, ...)
10003c19:	83 c4 10             	add    esp,0x10
10003c1c:	eb 47                	jmp    10003c65 <NiLoadCursors()+0x1cc>
10003c1e:	b8 00 02 00 00       	mov    eax,0x200
10003c23:	eb 21                	jmp    10003c46 <NiLoadCursors()+0x1ad>
10003c25:	b8 00 03 00 00       	mov    eax,0x300
10003c2a:	eb 1a                	jmp    10003c46 <NiLoadCursors()+0x1ad>
10003c2c:	b8 00 01 00 00       	mov    eax,0x100
10003c31:	eb 13                	jmp    10003c46 <NiLoadCursors()+0x1ad>
10003c33:	b8 00 04 00 00       	mov    eax,0x400
10003c38:	eb 0c                	jmp    10003c46 <NiLoadCursors()+0x1ad>
10003c3a:	b8 00 05 00 00       	mov    eax,0x500
10003c3f:	eb 05                	jmp    10003c46 <NiLoadCursors()+0x1ad>
10003c41:	b8 00 06 00 00       	mov    eax,0x600
10003c46:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003c48: R_386_32	___mouse_data
10003c4c:	b9 00 01 00 00       	mov    ecx,0x100
10003c51:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003c55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003c57:	45                   	inc    ebp
10003c58:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003c60:	e9 03 ff ff ff       	jmp    10003b68 <NiLoadCursors()+0xcf>
10003c65:	83 ec 0c             	sub    esp,0xc
10003c68:	53                   	push   ebx
10003c69:	e8 fc ff ff ff       	call   10003c6a <NiLoadCursors()+0x1d1>	10003c6a: R_386_PC32	free
10003c6e:	83 c4 10             	add    esp,0x10
10003c71:	83 c4 2c             	add    esp,0x2c
10003c74:	5b                   	pop    ebx
10003c75:	5e                   	pop    esi
10003c76:	5f                   	pop    edi
10003c77:	5d                   	pop    ebp
10003c78:	c3                   	ret    
10003c79:	90                   	nop

10003c7a <NIDesktop::NIDesktop(NIContext*)>:
10003c7a:	53                   	push   ebx
10003c7b:	83 ec 14             	sub    esp,0x14
10003c7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10003c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003c86:	c7 43 08 1e 00 00 00 	mov    DWORD PTR [ebx+0x8],0x1e
10003c8d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003c90:	c7 43 0c 1e 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1e
10003c97:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10003c9e:	6a 08                	push   0x8
10003ca0:	e8 fc ff ff ff       	call   10003ca1 <NIDesktop::NIDesktop(NIContext*)+0x27>	10003ca1: R_386_PC32	malloc
10003ca5:	89 03                	mov    DWORD PTR [ebx],eax
10003ca7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003cae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003cb4:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10003cb6: R_386_32	mouseDesktop
10003cba:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003cbc: R_386_32	guiMouseHandler
	10003cc0: R_386_32	NiHandleMouse(int, int, int, int)
10003cc4:	83 c4 18             	add    esp,0x18
10003cc7:	5b                   	pop    ebx
10003cc8:	c3                   	ret    
10003cc9:	90                   	nop

10003cca <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003cca:	53                   	push   ebx
10003ccb:	83 ec 08             	sub    esp,0x8
10003cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003cd2:	8b 00                	mov    eax,DWORD PTR [eax]
10003cd4:	8b 18                	mov    ebx,DWORD PTR [eax]
10003cd6:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10003cda:	74 1d                	je     10003cf9 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2f>
10003cdc:	8b 03                	mov    eax,DWORD PTR [ebx]
10003cde:	85 c0                	test   eax,eax
10003ce0:	74 12                	je     10003cf4 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003ce2:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10003ce6:	74 0c                	je     10003cf4 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003ce8:	83 ec 0c             	sub    esp,0xc
10003ceb:	50                   	push   eax
10003cec:	e8 fc ff ff ff       	call   10003ced <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x23>	10003ced: R_386_PC32	NIWindow::invalidate()
10003cf1:	83 c4 10             	add    esp,0x10
10003cf4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
10003cf7:	eb dd                	jmp    10003cd6 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xc>
10003cf9:	83 c4 08             	add    esp,0x8
10003cfc:	5b                   	pop    ebx
10003cfd:	c3                   	ret    

10003cfe <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003cfe:	57                   	push   edi
10003cff:	56                   	push   esi
10003d00:	53                   	push   ebx
10003d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003d05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003d09:	8b 00                	mov    eax,DWORD PTR [eax]
10003d0b:	8b 00                	mov    eax,DWORD PTR [eax]
10003d0d:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003d10:	85 db                	test   ebx,ebx
10003d12:	74 52                	je     10003d66 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x68>
10003d14:	8b 00                	mov    eax,DWORD PTR [eax]
10003d16:	85 c0                	test   eax,eax
10003d18:	74 4e                	je     10003d68 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6a>
10003d1a:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
10003d20:	39 ca                	cmp    edx,ecx
10003d22:	7e 04                	jle    10003d28 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x2a>
10003d24:	89 d8                	mov    eax,ebx
10003d26:	eb e5                	jmp    10003d0d <NIDesktop::getTopmostWindowAtPixel(int, int)+0xf>
10003d28:	8b b0 70 01 00 00    	mov    esi,DWORD PTR [eax+0x170]
10003d2e:	01 d6                	add    esi,edx
10003d30:	39 ce                	cmp    esi,ecx
10003d32:	7e f0                	jle    10003d24 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10003d34:	89 ce                	mov    esi,ecx
10003d36:	29 d6                	sub    esi,edx
10003d38:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
10003d3e:	8d 34 b2             	lea    esi,[edx+esi*4]
10003d41:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
10003d47:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003d4a:	01 d7                	add    edi,edx
10003d4c:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003d50:	7f d2                	jg     10003d24 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10003d52:	03 90 6c 01 00 00    	add    edx,DWORD PTR [eax+0x16c]
10003d58:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003d5c:	29 f2                	sub    edx,esi
10003d5e:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003d62:	7e c0                	jle    10003d24 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10003d64:	eb 02                	jmp    10003d68 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6a>
10003d66:	31 c0                	xor    eax,eax
10003d68:	5b                   	pop    ebx
10003d69:	5e                   	pop    esi
10003d6a:	5f                   	pop    edi
10003d6b:	c3                   	ret    

10003d6c <NIDesktop::renderScanline(int, int, int)>:
10003d6c:	55                   	push   ebp
10003d6d:	57                   	push   edi
10003d6e:	56                   	push   esi
10003d6f:	53                   	push   ebx
10003d70:	83 ec 2c             	sub    esp,0x2c
10003d73:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10003d77:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10003d7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003d7f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003d83:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003d87:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003d89: R_386_32	render
10003d8d:	31 c0                	xor    eax,eax
10003d8f:	89 d7                	mov    edi,edx
10003d91:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003d93:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003d97:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003d9b:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003d9d: R_386_32	shadow
10003da1:	b0 80                	mov    al,0x80
10003da3:	89 d7                	mov    edi,edx
10003da5:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003da7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003dab:	8b 00                	mov    eax,DWORD PTR [eax]
10003dad:	8b 00                	mov    eax,DWORD PTR [eax]
10003daf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003db3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003db7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003dbb:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003dbd: R_386_32	movingWin
10003dc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003dc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003dc8:	85 c0                	test   eax,eax
10003dca:	75 09                	jne    10003dd5 <NIDesktop::renderScanline(int, int, int)+0x69>
10003dcc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003dd0:	e9 31 03 00 00       	jmp    10004106 <NIDesktop::renderScanline(int, int, int)+0x39a>
10003dd5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003dd9:	8b 1f                	mov    ebx,DWORD PTR [edi]
10003ddb:	85 db                	test   ebx,ebx
10003ddd:	74 ed                	je     10003dcc <NIDesktop::renderScanline(int, int, int)+0x60>
10003ddf:	39 da                	cmp    edx,ebx
10003de1:	75 06                	jne    10003de9 <NIDesktop::renderScanline(int, int, int)+0x7d>
10003de3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003de7:	eb d8                	jmp    10003dc1 <NIDesktop::renderScanline(int, int, int)+0x55>
10003de9:	83 ec 0c             	sub    esp,0xc
10003dec:	53                   	push   ebx
10003ded:	e8 fc ff ff ff       	call   10003dee <NIDesktop::renderScanline(int, int, int)+0x82>	10003dee: R_386_PC32	NIWindow::request()
10003df2:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10003df8:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
10003dfe:	83 c4 10             	add    esp,0x10
10003e01:	01 c2                	add    edx,eax
10003e03:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003e07:	0f 8e bf 00 00 00    	jle    10003ecc <NIDesktop::renderScanline(int, int, int)+0x160>
10003e0d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
10003e14:	0f 85 b2 00 00 00    	jne    10003ecc <NIDesktop::renderScanline(int, int, int)+0x160>
10003e1a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003e1e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
10003e24:	83 c0 06             	add    eax,0x6
10003e27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003e2b:	8b 8b 64 01 00 00    	mov    ecx,DWORD PTR [ebx+0x164]
10003e31:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
10003e37:	01 c8                	add    eax,ecx
10003e39:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003e3d:	39 d0                	cmp    eax,edx
10003e3f:	0f 8e 63 01 00 00    	jle    10003fa8 <NIDesktop::renderScanline(int, int, int)+0x23c>
10003e45:	3b 54 24 48          	cmp    edx,DWORD PTR [esp+0x48]
10003e49:	7c 7b                	jl     10003ec6 <NIDesktop::renderScanline(int, int, int)+0x15a>
10003e4b:	3b 54 24 4c          	cmp    edx,DWORD PTR [esp+0x4c]
10003e4f:	0f 8f 53 01 00 00    	jg     10003fa8 <NIDesktop::renderScanline(int, int, int)+0x23c>
10003e55:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
10003e5b:	89 d5                	mov    ebp,edx
10003e5d:	6b fe fc             	imul   edi,esi,0xfffffffc
10003e60:	29 cd                	sub    ebp,ecx
10003e62:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003e66:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
10003e6a:	39 f0                	cmp    eax,esi
10003e6c:	7c 20                	jl     10003e8e <NIDesktop::renderScanline(int, int, int)+0x122>
10003e6e:	8d 0c 87             	lea    ecx,[edi+eax*4]
10003e71:	03 8b 60 01 00 00    	add    ecx,DWORD PTR [ebx+0x160]
10003e77:	0f b7 29             	movzx  ebp,WORD PTR [ecx]
10003e7a:	3b 6c 24 18          	cmp    ebp,DWORD PTR [esp+0x18]
10003e7e:	7f 0e                	jg     10003e8e <NIDesktop::renderScanline(int, int, int)+0x122>
10003e80:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
10003e84:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
10003e88:	29 cd                	sub    ebp,ecx
10003e8a:	39 d5                	cmp    ebp,edx
10003e8c:	7d 07                	jge    10003e95 <NIDesktop::renderScanline(int, int, int)+0x129>
10003e8e:	40                   	inc    eax
10003e8f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
10003e93:	75 d5                	jne    10003e6a <NIDesktop::renderScanline(int, int, int)+0xfe>
10003e95:	2b 44 24 44          	sub    eax,DWORD PTR [esp+0x44]
10003e99:	48                   	dec    eax
10003e9a:	83 f8 03             	cmp    eax,0x3
10003e9d:	77 27                	ja     10003ec6 <NIDesktop::renderScanline(int, int, int)+0x15a>
10003e9f:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003ea1: R_386_32	render
10003ea6:	75 1e                	jne    10003ec6 <NIDesktop::renderScanline(int, int, int)+0x15a>
10003ea8:	8d 0c c5 65 00 00 00 	lea    ecx,[eax*8+0x65]
10003eaf:	0f b6 82 00 00 00 00 	movzx  eax,BYTE PTR [edx+0x0]	10003eb2: R_386_32	shadow
10003eb6:	0f af c1             	imul   eax,ecx
10003eb9:	d1 f9                	sar    ecx,1
10003ebb:	c1 f8 08             	sar    eax,0x8
10003ebe:	01 c1                	add    ecx,eax
10003ec0:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	10003ec2: R_386_32	shadow
10003ec6:	42                   	inc    edx
10003ec7:	e9 5f ff ff ff       	jmp    10003e2b <NIDesktop::renderScanline(int, int, int)+0xbf>
10003ecc:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003ed0:	0f 8d d2 00 00 00    	jge    10003fa8 <NIDesktop::renderScanline(int, int, int)+0x23c>
10003ed6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
10003edd:	0f 85 c5 00 00 00    	jne    10003fa8 <NIDesktop::renderScanline(int, int, int)+0x23c>
10003ee3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10003ee7:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
10003eed:	8d 77 fa             	lea    esi,[edi-0x6]
10003ef0:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003ef4:	8b 8b 64 01 00 00    	mov    ecx,DWORD PTR [ebx+0x164]
10003efa:	8b b3 6c 01 00 00    	mov    esi,DWORD PTR [ebx+0x16c]
10003f00:	01 ce                	add    esi,ecx
10003f02:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10003f06:	39 c6                	cmp    esi,eax
10003f08:	0f 8e 9a 00 00 00    	jle    10003fa8 <NIDesktop::renderScanline(int, int, int)+0x23c>
10003f0e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003f12:	0f 8c 8a 00 00 00    	jl     10003fa2 <NIDesktop::renderScanline(int, int, int)+0x236>
10003f18:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003f1c:	0f 8f 86 00 00 00    	jg     10003fa8 <NIDesktop::renderScanline(int, int, int)+0x23c>
10003f22:	89 c7                	mov    edi,eax
10003f24:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003f28:	29 cf                	sub    edi,ecx
10003f2a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003f2e:	4a                   	dec    edx
10003f2f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10003f33:	29 d1                	sub    ecx,edx
10003f35:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
10003f39:	74 3b                	je     10003f76 <NIDesktop::renderScanline(int, int, int)+0x20a>
10003f3b:	8b bb 68 01 00 00    	mov    edi,DWORD PTR [ebx+0x168]
10003f41:	8b b3 70 01 00 00    	mov    esi,DWORD PTR [ebx+0x170]
10003f47:	8d 2c 37             	lea    ebp,[edi+esi*1]
10003f4a:	39 d5                	cmp    ebp,edx
10003f4c:	7e e0                	jle    10003f2e <NIDesktop::renderScanline(int, int, int)+0x1c2>
10003f4e:	89 d5                	mov    ebp,edx
10003f50:	29 fd                	sub    ebp,edi
10003f52:	39 ee                	cmp    esi,ebp
10003f54:	7e 20                	jle    10003f76 <NIDesktop::renderScanline(int, int, int)+0x20a>
10003f56:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10003f5c:	8d 34 ae             	lea    esi,[esi+ebp*4]
10003f5f:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003f62:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10003f66:	7f c6                	jg     10003f2e <NIDesktop::renderScanline(int, int, int)+0x1c2>
10003f68:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003f6c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10003f70:	29 f7                	sub    edi,esi
10003f72:	39 c7                	cmp    edi,eax
10003f74:	7c b8                	jl     10003f2e <NIDesktop::renderScanline(int, int, int)+0x1c2>
10003f76:	83 f9 04             	cmp    ecx,0x4
10003f79:	77 27                	ja     10003fa2 <NIDesktop::renderScanline(int, int, int)+0x236>
10003f7b:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003f7d: R_386_32	render
10003f82:	75 1e                	jne    10003fa2 <NIDesktop::renderScanline(int, int, int)+0x236>
10003f84:	8d 0c cd 5d 00 00 00 	lea    ecx,[ecx*8+0x5d]
10003f8b:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10003f8e: R_386_32	shadow
10003f92:	0f af d1             	imul   edx,ecx
10003f95:	d1 f9                	sar    ecx,1
10003f97:	c1 fa 08             	sar    edx,0x8
10003f9a:	01 d1                	add    ecx,edx
10003f9c:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	10003f9e: R_386_32	shadow
10003fa2:	40                   	inc    eax
10003fa3:	e9 4c ff ff ff       	jmp    10003ef4 <NIDesktop::renderScanline(int, int, int)+0x188>
10003fa8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10003fae:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003fb2:	0f 8f 27 01 00 00    	jg     100040df <NIDesktop::renderScanline(int, int, int)+0x373>
10003fb8:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
10003fbe:	01 c2                	add    edx,eax
10003fc0:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003fc4:	0f 8e 15 01 00 00    	jle    100040df <NIDesktop::renderScanline(int, int, int)+0x373>
10003fca:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003fce:	29 c2                	sub    edx,eax
10003fd0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
10003fd6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
10003fdd:	8d 14 90             	lea    edx,[eax+edx*4]
10003fe0:	0f b7 02             	movzx  eax,WORD PTR [edx]
10003fe3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003fe7:	0f b7 42 02          	movzx  eax,WORD PTR [edx+0x2]
10003feb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003fef:	74 0f                	je     10004000 <NIDesktop::renderScanline(int, int, int)+0x294>
10003ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003ff5:	03 83 64 01 00 00    	add    eax,DWORD PTR [ebx+0x164]
10003ffb:	e9 81 00 00 00       	jmp    10004081 <NIDesktop::renderScanline(int, int, int)+0x315>
10004000:	31 c9                	xor    ecx,ecx
10004002:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
10004008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000400c:	8d 6c 02 fc          	lea    ebp,[edx+eax*1-0x4]
10004010:	03 93 6c 01 00 00    	add    edx,DWORD PTR [ebx+0x16c]
10004016:	01 cd                	add    ebp,ecx
10004018:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
1000401c:	01 ca                	add    edx,ecx
1000401e:	80 bd 00 00 00 00 00 	cmp    BYTE PTR [ebp+0x0],0x0	10004020: R_386_32	render
10004025:	75 1f                	jne    10004046 <NIDesktop::renderScanline(int, int, int)+0x2da>
10004027:	0f b6 b5 00 00 00 00 	movzx  esi,BYTE PTR [ebp+0x0]	1000402a: R_386_32	shadow
1000402e:	6b f9 f8             	imul   edi,ecx,0xfffffff8
10004031:	83 c7 7d             	add    edi,0x7d
10004034:	0f af f7             	imul   esi,edi
10004037:	d1 ff                	sar    edi,1
10004039:	c1 fe 08             	sar    esi,0x8
1000403c:	01 f7                	add    edi,esi
1000403e:	89 f8                	mov    eax,edi
10004040:	88 85 00 00 00 00    	mov    BYTE PTR [ebp+0x0],al	10004042: R_386_32	shadow
10004046:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10004048: R_386_32	render
1000404d:	75 20                	jne    1000406f <NIDesktop::renderScanline(int, int, int)+0x303>
1000404f:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
10004056:	0f b6 b2 00 00 00 00 	movzx  esi,BYTE PTR [edx+0x0]	10004059: R_386_32	shadow
1000405d:	0f af f7             	imul   esi,edi
10004060:	d1 ff                	sar    edi,1
10004062:	c1 fe 08             	sar    esi,0x8
10004065:	01 f7                	add    edi,esi
10004067:	89 f8                	mov    eax,edi
10004069:	88 82 00 00 00 00    	mov    BYTE PTR [edx+0x0],al	1000406b: R_386_32	shadow
1000406f:	41                   	inc    ecx
10004070:	83 f9 04             	cmp    ecx,0x4
10004073:	75 8d                	jne    10004002 <NIDesktop::renderScanline(int, int, int)+0x296>
10004075:	e9 77 ff ff ff       	jmp    10003ff1 <NIDesktop::renderScanline(int, int, int)+0x285>
1000407a:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
1000407e:	7d 17                	jge    10004097 <NIDesktop::renderScanline(int, int, int)+0x32b>
10004080:	40                   	inc    eax
10004081:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10004087:	03 93 64 01 00 00    	add    edx,DWORD PTR [ebx+0x164]
1000408d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10004091:	39 c2                	cmp    edx,eax
10004093:	7f e5                	jg     1000407a <NIDesktop::renderScanline(int, int, int)+0x30e>
10004095:	eb 48                	jmp    100040df <NIDesktop::renderScanline(int, int, int)+0x373>
10004097:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
1000409b:	7f 42                	jg     100040df <NIDesktop::renderScanline(int, int, int)+0x373>
1000409d:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	1000409f: R_386_32	render
100040a4:	75 da                	jne    10004080 <NIDesktop::renderScanline(int, int, int)+0x314>
100040a6:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	100040a8: R_386_32	render
100040ad:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
100040b1:	8b 8b 6c 01 00 00    	mov    ecx,DWORD PTR [ebx+0x16c]
100040b7:	2b 93 68 01 00 00    	sub    edx,DWORD PTR [ebx+0x168]
100040bd:	0f af ca             	imul   ecx,edx
100040c0:	89 c2                	mov    edx,eax
100040c2:	2b 93 64 01 00 00    	sub    edx,DWORD PTR [ebx+0x164]
100040c8:	01 ca                	add    edx,ecx
100040ca:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
100040cd:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
100040d1:	8b 14 91             	mov    edx,DWORD PTR [ecx+edx*4]
100040d4:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100040d7: R_386_32	renderData
100040db:	75 a3                	jne    10004080 <NIDesktop::renderScanline(int, int, int)+0x314>
100040dd:	eb 47                	jmp    10004126 <NIDesktop::renderScanline(int, int, int)+0x3ba>
100040df:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
100040e6:	0f 85 e0 fc ff ff    	jne    10003dcc <NIDesktop::renderScanline(int, int, int)+0x60>
100040ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100040f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100040f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100040f7:	e9 bf fc ff ff       	jmp    10003dbb <NIDesktop::renderScanline(int, int, int)+0x4f>
100040fc:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	100040fe: R_386_32	render
10004103:	74 09                	je     1000410e <NIDesktop::renderScanline(int, int, int)+0x3a2>
10004105:	40                   	inc    eax
10004106:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
1000410a:	7c f0                	jl     100040fc <NIDesktop::renderScanline(int, int, int)+0x390>
1000410c:	eb 18                	jmp    10004126 <NIDesktop::renderScanline(int, int, int)+0x3ba>
1000410e:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10004110: R_386_32	render
10004115:	c7 04 85 00 00 00 00 ff 80 55 00 	mov    DWORD PTR [eax*4+0x0],0x5580ff	10004118: R_386_32	renderData
10004120:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10004124:	75 df                	jne    10004105 <NIDesktop::renderScanline(int, int, int)+0x399>
10004126:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000412a:	8b 00                	mov    eax,DWORD PTR [eax]
1000412c:	8b 00                	mov    eax,DWORD PTR [eax]
1000412e:	85 c0                	test   eax,eax
10004130:	74 61                	je     10004193 <NIDesktop::renderScanline(int, int, int)+0x427>
10004132:	8b 00                	mov    eax,DWORD PTR [eax]
10004134:	85 c0                	test   eax,eax
10004136:	74 5b                	je     10004193 <NIDesktop::renderScanline(int, int, int)+0x427>
10004138:	80 b8 74 01 00 00 00 	cmp    BYTE PTR [eax+0x174],0x0
1000413f:	75 52                	jne    10004193 <NIDesktop::renderScanline(int, int, int)+0x427>
10004141:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10004145:	3b 5c 24 4c          	cmp    ebx,DWORD PTR [esp+0x4c]
10004149:	7d 48                	jge    10004193 <NIDesktop::renderScanline(int, int, int)+0x427>
1000414b:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	1000414d: R_386_32	shadow
10004151:	3c 80                	cmp    al,0x80
10004153:	74 3b                	je     10004190 <NIDesktop::renderScanline(int, int, int)+0x424>
10004155:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	10004158: R_386_32	renderData
1000415c:	0f b6 f0             	movzx  esi,al
1000415f:	89 d1                	mov    ecx,edx
10004161:	0f b6 c6             	movzx  eax,dh
10004164:	c1 e9 10             	shr    ecx,0x10
10004167:	0f af c6             	imul   eax,esi
1000416a:	0f b6 c9             	movzx  ecx,cl
1000416d:	0f b6 d2             	movzx  edx,dl
10004170:	0f af ce             	imul   ecx,esi
10004173:	0f af d6             	imul   edx,esi
10004176:	c1 e9 07             	shr    ecx,0x7
10004179:	c1 e8 07             	shr    eax,0x7
1000417c:	c1 e1 10             	shl    ecx,0x10
1000417f:	c1 e0 08             	shl    eax,0x8
10004182:	c1 ea 07             	shr    edx,0x7
10004185:	09 c1                	or     ecx,eax
10004187:	09 ca                	or     edx,ecx
10004189:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	1000418c: R_386_32	renderData
10004190:	43                   	inc    ebx
10004191:	eb b2                	jmp    10004145 <NIDesktop::renderScanline(int, int, int)+0x3d9>
10004193:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10004197:	83 ec 0c             	sub    esp,0xc
1000419a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000419d:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100041a3:	8b 10                	mov    edx,DWORD PTR [eax]
100041a5:	68 00 00 00 00       	push   0x0	100041a6: R_386_32	renderData
100041aa:	6a 00                	push   0x0
100041ac:	6a 01                	push   0x1
100041ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100041b2:	6a 00                	push   0x0
100041b4:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
100041b8:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
100041bc:	ff 74 24 70          	push   DWORD PTR [esp+0x70]
100041c0:	50                   	push   eax
100041c1:	ff 52 38             	call   DWORD PTR [edx+0x38]
100041c4:	83 c4 5c             	add    esp,0x5c
100041c7:	5b                   	pop    ebx
100041c8:	5e                   	pop    esi
100041c9:	5f                   	pop    edi
100041ca:	5d                   	pop    ebp
100041cb:	c3                   	ret    

100041cc <NIDesktop::rangeRefresh(int, int, int, int)>:
100041cc:	53                   	push   ebx
100041cd:	83 ec 08             	sub    esp,0x8
100041d0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100041d4:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
100041d8:	7d 18                	jge    100041f2 <NIDesktop::rangeRefresh(int, int, int, int)+0x26>
100041da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100041de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100041e2:	53                   	push   ebx
100041e3:	43                   	inc    ebx
100041e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100041e8:	e8 fc ff ff ff       	call   100041e9 <NIDesktop::rangeRefresh(int, int, int, int)+0x1d>	100041e9: R_386_PC32	NIDesktop::renderScanline(int, int, int)
100041ed:	83 c4 10             	add    esp,0x10
100041f0:	eb e2                	jmp    100041d4 <NIDesktop::rangeRefresh(int, int, int, int)+0x8>
100041f2:	83 c4 08             	add    esp,0x8
100041f5:	5b                   	pop    ebx
100041f6:	c3                   	ret    
100041f7:	90                   	nop

100041f8 <NIDesktop::refreshWindowBounds(NIWindow*)>:
100041f8:	55                   	push   ebp
100041f9:	ba 05 00 00 00       	mov    edx,0x5
100041fe:	57                   	push   edi
100041ff:	56                   	push   esi
10004200:	53                   	push   ebx
10004201:	83 ec 0c             	sub    esp,0xc
10004204:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10004208:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
1000420e:	83 f8 05             	cmp    eax,0x5
10004211:	7c 02                	jl     10004215 <NIDesktop::refreshWindowBounds(NIWindow*)+0x1d>
10004213:	89 c2                	mov    edx,eax
10004215:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10004219:	03 83 70 01 00 00    	add    eax,DWORD PTR [ebx+0x170]
1000421f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
10004222:	83 ea 05             	sub    edx,0x5
10004225:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
1000422b:	8d 70 05             	lea    esi,[eax+0x5]
1000422e:	8d 69 fb             	lea    ebp,[ecx-0x5]
10004231:	39 c5                	cmp    ebp,eax
10004233:	7f 03                	jg     10004238 <NIDesktop::refreshWindowBounds(NIWindow*)+0x40>
10004235:	8d 71 ff             	lea    esi,[ecx-0x1]
10004238:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
1000423e:	89 c1                	mov    ecx,eax
10004240:	83 f8 05             	cmp    eax,0x5
10004243:	7d 05                	jge    1000424a <NIDesktop::refreshWindowBounds(NIWindow*)+0x52>
10004245:	b9 05 00 00 00       	mov    ecx,0x5
1000424a:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
10004250:	83 e9 05             	sub    ecx,0x5
10004253:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
10004259:	8d 58 05             	lea    ebx,[eax+0x5]
1000425c:	8d 6f fb             	lea    ebp,[edi-0x5]
1000425f:	39 c5                	cmp    ebp,eax
10004261:	7f 03                	jg     10004266 <NIDesktop::refreshWindowBounds(NIWindow*)+0x6e>
10004263:	8d 5f ff             	lea    ebx,[edi-0x1]
10004266:	83 ec 0c             	sub    esp,0xc
10004269:	53                   	push   ebx
1000426a:	51                   	push   ecx
1000426b:	56                   	push   esi
1000426c:	52                   	push   edx
1000426d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10004271:	e8 fc ff ff ff       	call   10004272 <NIDesktop::refreshWindowBounds(NIWindow*)+0x7a>	10004272: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004276:	83 c4 2c             	add    esp,0x2c
10004279:	5b                   	pop    ebx
1000427a:	5e                   	pop    esi
1000427b:	5f                   	pop    edi
1000427c:	5d                   	pop    ebp
1000427d:	c3                   	ret    

1000427e <NIDesktop::completeRefresh()>:
1000427e:	56                   	push   esi
1000427f:	53                   	push   ebx
10004280:	31 f6                	xor    esi,esi
10004282:	50                   	push   eax
10004283:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004287:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000428a:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
10004290:	7e 15                	jle    100042a7 <NIDesktop::completeRefresh()+0x29>
10004292:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
10004298:	6a 00                	push   0x0
1000429a:	56                   	push   esi
1000429b:	46                   	inc    esi
1000429c:	53                   	push   ebx
1000429d:	e8 fc ff ff ff       	call   1000429e <NIDesktop::completeRefresh()+0x20>	1000429e: R_386_PC32	NIDesktop::renderScanline(int, int, int)
100042a2:	83 c4 10             	add    esp,0x10
100042a5:	eb e0                	jmp    10004287 <NIDesktop::completeRefresh()+0x9>
100042a7:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
100042ad:	83 ec 0c             	sub    esp,0xc
100042b0:	8b 0a                	mov    ecx,DWORD PTR [edx]
100042b2:	6a 00                	push   0x0
100042b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
100042b7:	05 00 00 00 00       	add    eax,0x0	100042b8: R_386_32	___mouse_data
100042bc:	50                   	push   eax
100042bd:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100042c0:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100042c3:	52                   	push   edx
100042c4:	ff 51 30             	call   DWORD PTR [ecx+0x30]
100042c7:	83 c4 24             	add    esp,0x24
100042ca:	5b                   	pop    ebx
100042cb:	5e                   	pop    esi
100042cc:	c3                   	ret    
100042cd:	90                   	nop

100042ce <NIDesktop::addWindow(NIWindow*)>:
100042ce:	56                   	push   esi
100042cf:	53                   	push   ebx
100042d0:	83 ec 0c             	sub    esp,0xc
100042d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100042d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
100042db:	56                   	push   esi
100042dc:	ff 33                	push   DWORD PTR [ebx]
100042de:	e8 fc ff ff ff       	call   100042df <NIDesktop::addWindow(NIWindow*)+0x11>	100042df: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100042e3:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100042e7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100042eb:	83 c4 14             	add    esp,0x14
100042ee:	5b                   	pop    ebx
100042ef:	5e                   	pop    esi
100042f0:	e9 03 ff ff ff       	jmp    100041f8 <NIDesktop::refreshWindowBounds(NIWindow*)>
100042f5:	90                   	nop

100042f6 <NIDesktop::raiseWindow(NIWindow*)>:
100042f6:	53                   	push   ebx
100042f7:	83 ec 10             	sub    esp,0x10
100042fa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100042fe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10004302:	50                   	push   eax
10004303:	ff 33                	push   DWORD PTR [ebx]
10004305:	e8 fc ff ff ff       	call   10004306 <NIDesktop::raiseWindow(NIWindow*)+0x10>	10004306: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
1000430a:	58                   	pop    eax
1000430b:	5a                   	pop    edx
1000430c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004310:	ff 33                	push   DWORD PTR [ebx]
10004312:	e8 fc ff ff ff       	call   10004313 <NIDesktop::raiseWindow(NIWindow*)+0x1d>	10004313: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
10004317:	59                   	pop    ecx
10004318:	58                   	pop    eax
10004319:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000431d:	53                   	push   ebx
1000431e:	e8 fc ff ff ff       	call   1000431f <NIDesktop::raiseWindow(NIWindow*)+0x29>	1000431f: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004323:	83 c4 18             	add    esp,0x18
10004326:	5b                   	pop    ebx
10004327:	c3                   	ret    

10004328 <NIDesktop::deleteWindow(NIWindow*)>:
10004328:	53                   	push   ebx
10004329:	83 ec 10             	sub    esp,0x10
1000432c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004330:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10004334:	50                   	push   eax
10004335:	ff 33                	push   DWORD PTR [ebx]
10004337:	e8 fc ff ff ff       	call   10004338 <NIDesktop::deleteWindow(NIWindow*)+0x10>	10004338: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
1000433c:	58                   	pop    eax
1000433d:	5a                   	pop    edx
1000433e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004342:	53                   	push   ebx
10004343:	e8 fc ff ff ff       	call   10004344 <NIDesktop::deleteWindow(NIWindow*)+0x1c>	10004344: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004348:	83 c4 18             	add    esp,0x18
1000434b:	5b                   	pop    ebx
1000434c:	c3                   	ret    
1000434d:	90                   	nop

1000434e <NIDesktop::handleMouse(int, int, int, int)>:
1000434e:	55                   	push   ebp
1000434f:	57                   	push   edi
10004350:	56                   	push   esi
10004351:	53                   	push   ebx
10004352:	83 ec 68             	sub    esp,0x68
10004355:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
10004359:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000435c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000435f:	8d 4a 20             	lea    ecx,[edx+0x20]
10004362:	51                   	push   ecx
10004363:	52                   	push   edx
10004364:	8d 50 20             	lea    edx,[eax+0x20]
10004367:	52                   	push   edx
10004368:	50                   	push   eax
10004369:	53                   	push   ebx
1000436a:	e8 fc ff ff ff       	call   1000436b <NIDesktop::handleMouse(int, int, int, int)+0x1d>	1000436b: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000436f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004372:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10004376:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004379:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
1000437d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004381:	03 94 24 94 00 00 00 	add    edx,DWORD PTR [esp+0x94]
10004388:	03 84 24 98 00 00 00 	add    eax,DWORD PTR [esp+0x98]
1000438f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
10004392:	83 c4 20             	add    esp,0x20
10004395:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10004398:	85 d2                	test   edx,edx
1000439a:	79 07                	jns    100043a3 <NIDesktop::handleMouse(int, int, int, int)+0x55>
1000439c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
100043a3:	85 c0                	test   eax,eax
100043a5:	79 07                	jns    100043ae <NIDesktop::handleMouse(int, int, int, int)+0x60>
100043a7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
100043ae:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100043b1:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
100043b7:	3b 43 08             	cmp    eax,DWORD PTR [ebx+0x8]
100043ba:	7f 04                	jg     100043c0 <NIDesktop::handleMouse(int, int, int, int)+0x72>
100043bc:	48                   	dec    eax
100043bd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
100043c0:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
100043c6:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
100043c9:	7f 04                	jg     100043cf <NIDesktop::handleMouse(int, int, int, int)+0x81>
100043cb:	48                   	dec    eax
100043cc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
100043cf:	50                   	push   eax
100043d0:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100043d3:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100043d6:	53                   	push   ebx
100043d7:	e8 fc ff ff ff       	call   100043d8 <NIDesktop::handleMouse(int, int, int, int)+0x8a>	100043d8: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
100043dc:	83 c4 10             	add    esp,0x10
100043df:	89 c5                	mov    ebp,eax
100043e1:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100043e5:	83 e0 01             	and    eax,0x1
100043e8:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100043ea: R_386_32	movingWin
100043ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100043f3:	0f 84 0e 02 00 00    	je     10004607 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
100043f9:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	100043fb: R_386_32	movingType
10004400:	0f 85 01 02 00 00    	jne    10004607 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
10004406:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
1000440b:	85 c0                	test   eax,eax
1000440d:	75 0c                	jne    1000441b <NIDesktop::handleMouse(int, int, int, int)+0xcd>
1000440f:	a0 b8 8d 03 10       	mov    al,ds:0x10038db8	10004410: R_386_32	.bss
10004414:	83 e0 01             	and    eax,0x1
10004417:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
1000441b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
10004423:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004425: R_386_32	movingWin
10004429:	8b 82 70 01 00 00    	mov    eax,DWORD PTR [edx+0x170]
1000442f:	8d 48 ff             	lea    ecx,[eax-0x1]
10004432:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
10004436:	0f 8e b6 00 00 00    	jle    100044f2 <NIDesktop::handleMouse(int, int, int, int)+0x1a4>
1000443c:	be 01 00 00 00       	mov    esi,0x1
10004441:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004443: R_386_32	movingWin
10004447:	8b 92 6c 01 00 00    	mov    edx,DWORD PTR [edx+0x16c]
1000444d:	4a                   	dec    edx
1000444e:	39 f2                	cmp    edx,esi
10004450:	0f 8e 93 00 00 00    	jle    100044e9 <NIDesktop::handleMouse(int, int, int, int)+0x19b>
10004456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000445a:	8d 14 30             	lea    edx,[eax+esi*1]
1000445d:	89 c1                	mov    ecx,eax
1000445f:	83 e2 1f             	and    edx,0x1f
10004462:	83 e1 03             	and    ecx,0x3
10004465:	09 ca                	or     edx,ecx
10004467:	75 7a                	jne    100044e3 <NIDesktop::handleMouse(int, int, int, int)+0x195>
10004469:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000446d:	2b 15 b4 8d 03 10    	sub    edx,DWORD PTR ds:0x10038db4	1000446f: R_386_32	.bss
10004473:	01 f2                	add    edx,esi
10004475:	78 2d                	js     100044a4 <NIDesktop::handleMouse(int, int, int, int)+0x156>
10004477:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
1000447a:	3b 91 0c 04 00 00    	cmp    edx,DWORD PTR [ecx+0x40c]
10004480:	7d 22                	jge    100044a4 <NIDesktop::handleMouse(int, int, int, int)+0x156>
10004482:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004486:	8d 7a 01             	lea    edi,[edx+0x1]
10004489:	83 ec 0c             	sub    esp,0xc
1000448c:	2b 0d b0 8d 03 10    	sub    ecx,DWORD PTR ds:0x10038db0	1000448e: R_386_32	.bss
10004492:	57                   	push   edi
10004493:	01 c1                	add    ecx,eax
10004495:	52                   	push   edx
10004496:	8d 51 01             	lea    edx,[ecx+0x1]
10004499:	52                   	push   edx
1000449a:	51                   	push   ecx
1000449b:	53                   	push   ebx
1000449c:	e8 fc ff ff ff       	call   1000449d <NIDesktop::handleMouse(int, int, int, int)+0x14f>	1000449d: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100044a1:	83 c4 20             	add    esp,0x20
100044a4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
100044a9:	75 38                	jne    100044e3 <NIDesktop::handleMouse(int, int, int, int)+0x195>
100044ab:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
100044ae:	01 f2                	add    edx,esi
100044b0:	2b 15 b4 8d 03 10    	sub    edx,DWORD PTR ds:0x10038db4	100044b2: R_386_32	.bss
100044b6:	78 2b                	js     100044e3 <NIDesktop::handleMouse(int, int, int, int)+0x195>
100044b8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
100044bb:	3b 91 0c 04 00 00    	cmp    edx,DWORD PTR [ecx+0x40c]
100044c1:	7d 20                	jge    100044e3 <NIDesktop::handleMouse(int, int, int, int)+0x195>
100044c3:	8b b9 08 04 00 00    	mov    edi,DWORD PTR [ecx+0x408]
100044c9:	8b 07                	mov    eax,DWORD PTR [edi]
100044cb:	6a 00                	push   0x0
100044cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100044d1:	03 4b 0c             	add    ecx,DWORD PTR [ebx+0xc]
100044d4:	2b 0d b0 8d 03 10    	sub    ecx,DWORD PTR ds:0x10038db0	100044d6: R_386_32	.bss
100044da:	51                   	push   ecx
100044db:	52                   	push   edx
100044dc:	57                   	push   edi
100044dd:	ff 50 24             	call   DWORD PTR [eax+0x24]
100044e0:	83 c4 10             	add    esp,0x10
100044e3:	46                   	inc    esi
100044e4:	e9 58 ff ff ff       	jmp    10004441 <NIDesktop::handleMouse(int, int, int, int)+0xf3>
100044e9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
100044ed:	e9 31 ff ff ff       	jmp    10004423 <NIDesktop::handleMouse(int, int, int, int)+0xd5>
100044f2:	8b 0d b4 8d 03 10    	mov    ecx,DWORD PTR ds:0x10038db4	100044f4: R_386_32	.bss
100044f8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
100044fb:	29 ce                	sub    esi,ecx
100044fd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10004502:	0f 85 93 06 00 00    	jne    10004b9b <NIDesktop::handleMouse(int, int, int, int)+0x84d>
10004508:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
1000450c:	85 f6                	test   esi,esi
1000450e:	79 08                	jns    10004518 <NIDesktop::handleMouse(int, int, int, int)+0x1ca>
10004510:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
10004518:	8b ba 6c 01 00 00    	mov    edi,DWORD PTR [edx+0x16c]
1000451e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004521:	01 fe                	add    esi,edi
10004523:	8b 92 0c 04 00 00    	mov    edx,DWORD PTR [edx+0x40c]
10004529:	39 d6                	cmp    esi,edx
1000452b:	7d 06                	jge    10004533 <NIDesktop::handleMouse(int, int, int, int)+0x1e5>
1000452d:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
10004531:	eb 0c                	jmp    1000453f <NIDesktop::handleMouse(int, int, int, int)+0x1f1>
10004533:	89 d6                	mov    esi,edx
10004535:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
10004539:	0f 88 c8 00 00 00    	js     10004607 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
1000453f:	85 f6                	test   esi,esi
10004541:	0f 84 c0 00 00 00    	je     10004607 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
10004547:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000454b:	29 c8                	sub    eax,ecx
1000454d:	89 c1                	mov    ecx,eax
1000454f:	79 02                	jns    10004553 <NIDesktop::handleMouse(int, int, int, int)+0x205>
10004551:	31 c0                	xor    eax,eax
10004553:	01 cf                	add    edi,ecx
10004555:	39 fa                	cmp    edx,edi
10004557:	7e 04                	jle    1000455d <NIDesktop::handleMouse(int, int, int, int)+0x20f>
10004559:	29 c7                	sub    edi,eax
1000455b:	eb 08                	jmp    10004565 <NIDesktop::handleMouse(int, int, int, int)+0x217>
1000455d:	89 d7                	mov    edi,edx
1000455f:	29 c7                	sub    edi,eax
10004561:	79 02                	jns    10004565 <NIDesktop::handleMouse(int, int, int, int)+0x217>
10004563:	31 ff                	xor    edi,edi
10004565:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10004569:	01 c7                	add    edi,eax
1000456b:	83 ec 0c             	sub    esp,0xc
1000456e:	2b 15 b0 8d 03 10    	sub    edx,DWORD PTR ds:0x10038db0	10004570: R_386_32	.bss
10004574:	57                   	push   edi
10004575:	8d 4a 01             	lea    ecx,[edx+0x1]
10004578:	50                   	push   eax
10004579:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000457d:	51                   	push   ecx
1000457e:	52                   	push   edx
1000457f:	53                   	push   ebx
10004580:	e8 fc ff ff ff       	call   10004581 <NIDesktop::handleMouse(int, int, int, int)+0x233>	10004581: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004585:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
10004589:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000458b: R_386_32	movingWin
1000458f:	83 c4 14             	add    esp,0x14
10004592:	2b 15 b0 8d 03 10    	sub    edx,DWORD PTR ds:0x10038db0	10004594: R_386_32	.bss
10004598:	03 91 70 01 00 00    	add    edx,DWORD PTR [ecx+0x170]
1000459e:	57                   	push   edi
1000459f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100045a3:	50                   	push   eax
100045a4:	52                   	push   edx
100045a5:	4a                   	dec    edx
100045a6:	52                   	push   edx
100045a7:	53                   	push   ebx
100045a8:	e8 fc ff ff ff       	call   100045a9 <NIDesktop::handleMouse(int, int, int, int)+0x25b>	100045a9: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100045ad:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100045b0:	83 c4 18             	add    esp,0x18
100045b3:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
100045b9:	8b 39                	mov    edi,DWORD PTR [ecx]
100045bb:	6a 00                	push   0x0
100045bd:	6a 01                	push   0x1
100045bf:	56                   	push   esi
100045c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100045c3:	2b 15 b0 8d 03 10    	sub    edx,DWORD PTR ds:0x10038db0	100045c5: R_386_32	.bss
100045c9:	52                   	push   edx
100045ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100045ce:	51                   	push   ecx
100045cf:	ff 57 28             	call   DWORD PTR [edi+0x28]
100045d2:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100045d5:	83 c4 18             	add    esp,0x18
100045d8:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
100045de:	8b 39                	mov    edi,DWORD PTR [ecx]
100045e0:	6a 00                	push   0x0
100045e2:	6a 01                	push   0x1
100045e4:	56                   	push   esi
100045e5:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	100045e7: R_386_32	movingWin
100045eb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100045ee:	2b 15 b0 8d 03 10    	sub    edx,DWORD PTR ds:0x10038db0	100045f0: R_386_32	.bss
100045f4:	03 96 70 01 00 00    	add    edx,DWORD PTR [esi+0x170]
100045fa:	4a                   	dec    edx
100045fb:	52                   	push   edx
100045fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10004600:	51                   	push   ecx
10004601:	ff 57 28             	call   DWORD PTR [edi+0x28]
10004604:	83 c4 20             	add    esp,0x20
10004607:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004609: R_386_32	movingWin
1000460d:	85 c9                	test   ecx,ecx
1000460f:	0f 84 46 02 00 00    	je     1000485b <NIDesktop::handleMouse(int, int, int, int)+0x50d>
10004615:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10004617: R_386_32	movingType
1000461b:	8d 56 fe             	lea    edx,[esi-0x2]
1000461e:	83 fa 02             	cmp    edx,0x2
10004621:	0f 87 34 02 00 00    	ja     1000485b <NIDesktop::handleMouse(int, int, int, int)+0x50d>
10004627:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
1000462c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
10004631:	75 0c                	jne    1000463f <NIDesktop::handleMouse(int, int, int, int)+0x2f1>
10004633:	a0 b8 8d 03 10       	mov    al,ds:0x10038db8	10004634: R_386_32	.bss
10004638:	83 e0 01             	and    eax,0x1
1000463b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
1000463f:	8b 91 6c 01 00 00    	mov    edx,DWORD PTR [ecx+0x16c]
10004645:	a1 b4 8d 03 10       	mov    eax,ds:0x10038db4	10004646: R_386_32	.bss
1000464a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
1000464e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
10004654:	01 d7                	add    edi,edx
10004656:	29 c7                	sub    edi,eax
10004658:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
1000465c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10004660:	01 cf                	add    edi,ecx
10004662:	2b 3d b0 8d 03 10    	sub    edi,DWORD PTR ds:0x10038db0	10004664: R_386_32	.bss
10004668:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
1000466c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
1000466f:	01 d7                	add    edi,edx
10004671:	29 c7                	sub    edi,eax
10004673:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10004677:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
1000467a:	01 cf                	add    edi,ecx
1000467c:	2b 3d b0 8d 03 10    	sub    edi,DWORD PTR ds:0x10038db0	1000467e: R_386_32	.bss
10004682:	83 fe 03             	cmp    esi,0x3
10004685:	74 0d                	je     10004694 <NIDesktop::handleMouse(int, int, int, int)+0x346>
10004687:	83 fe 04             	cmp    esi,0x4
1000468a:	75 10                	jne    1000469c <NIDesktop::handleMouse(int, int, int, int)+0x34e>
1000468c:	89 cf                	mov    edi,ecx
1000468e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10004692:	eb 08                	jmp    1000469c <NIDesktop::handleMouse(int, int, int, int)+0x34e>
10004694:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10004698:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
1000469c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100046a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100046a4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
100046a8:	7d 08                	jge    100046b2 <NIDesktop::handleMouse(int, int, int, int)+0x364>
100046aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100046ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100046b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100046b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100046ba:	39 f8                	cmp    eax,edi
100046bc:	7d 04                	jge    100046c2 <NIDesktop::handleMouse(int, int, int, int)+0x374>
100046be:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
100046c2:	b8 01 00 00 00       	mov    eax,0x1
100046c7:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
100046cb:	0f 8d c9 00 00 00    	jge    1000479a <NIDesktop::handleMouse(int, int, int, int)+0x44c>
100046d1:	be 01 00 00 00       	mov    esi,0x1
100046d6:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
100046da:	0f 8d b4 00 00 00    	jge    10004794 <NIDesktop::handleMouse(int, int, int, int)+0x446>
100046e0:	8d 14 30             	lea    edx,[eax+esi*1]
100046e3:	89 c1                	mov    ecx,eax
100046e5:	83 e2 1f             	and    edx,0x1f
100046e8:	83 e1 03             	and    ecx,0x3
100046eb:	09 ca                	or     edx,ecx
100046ed:	0f 85 9b 00 00 00    	jne    1000478e <NIDesktop::handleMouse(int, int, int, int)+0x440>
100046f3:	83 ec 0c             	sub    esp,0xc
100046f6:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100046f8: R_386_32	movingWin
100046fc:	8b 8a 64 01 00 00    	mov    ecx,DWORD PTR [edx+0x164]
10004702:	8b 92 68 01 00 00    	mov    edx,DWORD PTR [edx+0x168]
10004708:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
1000470c:	8d 54 31 01          	lea    edx,[ecx+esi*1+0x1]
10004710:	01 f1                	add    ecx,esi
10004712:	52                   	push   edx
10004713:	51                   	push   ecx
10004714:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
10004718:	8d 4c 01 01          	lea    ecx,[ecx+eax*1+0x1]
1000471c:	51                   	push   ecx
1000471d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10004721:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10004725:	01 c2                	add    edx,eax
10004727:	52                   	push   edx
10004728:	53                   	push   ebx
10004729:	e8 fc ff ff ff       	call   1000472a <NIDesktop::handleMouse(int, int, int, int)+0x3dc>	1000472a: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000472e:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10004732:	83 c4 20             	add    esp,0x20
10004735:	83 f1 01             	xor    ecx,0x1
10004738:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000473c:	39 c7                	cmp    edi,eax
1000473e:	0f 9f c2             	setg   dl
10004741:	84 d1                	test   cl,dl
10004743:	74 49                	je     1000478e <NIDesktop::handleMouse(int, int, int, int)+0x440>
10004745:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
10004749:	7d 43                	jge    1000478e <NIDesktop::handleMouse(int, int, int, int)+0x440>
1000474b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000474e:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10004754:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004756: R_386_32	movingWin
1000475a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000475e:	8b 09                	mov    ecx,DWORD PTR [ecx]
10004760:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
10004764:	6a 00                	push   0x0
10004766:	89 c1                	mov    ecx,eax
10004768:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000476c:	03 8a 68 01 00 00    	add    ecx,DWORD PTR [edx+0x168]
10004772:	51                   	push   ecx
10004773:	8b 8a 64 01 00 00    	mov    ecx,DWORD PTR [edx+0x164]
10004779:	01 f1                	add    ecx,esi
1000477b:	51                   	push   ecx
1000477c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004780:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10004784:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004787:	83 c4 10             	add    esp,0x10
1000478a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000478e:	46                   	inc    esi
1000478f:	e9 42 ff ff ff       	jmp    100046d6 <NIDesktop::handleMouse(int, int, int, int)+0x388>
10004794:	40                   	inc    eax
10004795:	e9 2d ff ff ff       	jmp    100046c7 <NIDesktop::handleMouse(int, int, int, int)+0x379>
1000479a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000479b: R_386_32	movingWin
1000479f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
100047a4:	0f 85 60 03 00 00    	jne    10004b0a <NIDesktop::handleMouse(int, int, int, int)+0x7bc>
100047aa:	8b 88 64 01 00 00    	mov    ecx,DWORD PTR [eax+0x164]
100047b0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
100047b6:	83 ec 0c             	sub    esp,0xc
100047b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100047bd:	8d 34 01             	lea    esi,[ecx+eax*1]
100047c0:	56                   	push   esi
100047c1:	51                   	push   ecx
100047c2:	8d 4a 01             	lea    ecx,[edx+0x1]
100047c5:	51                   	push   ecx
100047c6:	52                   	push   edx
100047c7:	53                   	push   ebx
100047c8:	e8 fc ff ff ff       	call   100047c9 <NIDesktop::handleMouse(int, int, int, int)+0x47b>	100047c9: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100047cd:	83 c4 18             	add    esp,0x18
100047d0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100047d3:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100047d5: R_386_32	movingWin
100047d9:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
100047df:	8b 32                	mov    esi,DWORD PTR [edx]
100047e1:	6a 00                	push   0x0
100047e3:	6a 01                	push   0x1
100047e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100047e9:	ff b1 68 01 00 00    	push   DWORD PTR [ecx+0x168]
100047ef:	ff b1 64 01 00 00    	push   DWORD PTR [ecx+0x164]
100047f5:	52                   	push   edx
100047f6:	ff 56 28             	call   DWORD PTR [esi+0x28]
100047f9:	83 c4 14             	add    esp,0x14
100047fc:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100047fe: R_386_32	movingWin
10004802:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004806:	8b 8a 68 01 00 00    	mov    ecx,DWORD PTR [edx+0x168]
1000480c:	8b b2 64 01 00 00    	mov    esi,DWORD PTR [edx+0x164]
10004812:	8d 14 06             	lea    edx,[esi+eax*1]
10004815:	52                   	push   edx
10004816:	56                   	push   esi
10004817:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
1000481b:	8d 54 01 01          	lea    edx,[ecx+eax*1+0x1]
1000481f:	52                   	push   edx
10004820:	03 4c 24 28          	add    ecx,DWORD PTR [esp+0x28]
10004824:	51                   	push   ecx
10004825:	53                   	push   ebx
10004826:	e8 fc ff ff ff       	call   10004827 <NIDesktop::handleMouse(int, int, int, int)+0x4d9>	10004827: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000482b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000482e:	83 c4 18             	add    esp,0x18
10004831:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
10004837:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004839: R_386_32	movingWin
1000483d:	8b 32                	mov    esi,DWORD PTR [edx]
1000483f:	6a 00                	push   0x0
10004841:	6a 01                	push   0x1
10004843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004847:	03 b9 68 01 00 00    	add    edi,DWORD PTR [ecx+0x168]
1000484d:	57                   	push   edi
1000484e:	ff b1 64 01 00 00    	push   DWORD PTR [ecx+0x164]
10004854:	52                   	push   edx
10004855:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004858:	83 c4 20             	add    esp,0x20
1000485b:	85 ed                	test   ebp,ebp
1000485d:	0f 84 70 02 00 00    	je     10004ad3 <NIDesktop::handleMouse(int, int, int, int)+0x785>
10004863:	f6 44 24 7c 01       	test   BYTE PTR [esp+0x7c],0x1
10004868:	0f 84 65 02 00 00    	je     10004ad3 <NIDesktop::handleMouse(int, int, int, int)+0x785>
1000486e:	8b 15 b8 8d 03 10    	mov    edx,DWORD PTR ds:0x10038db8	10004870: R_386_32	.bss
10004874:	83 e2 01             	and    edx,0x1
10004877:	0f 85 34 01 00 00    	jne    100049b1 <NIDesktop::handleMouse(int, int, int, int)+0x663>
1000487d:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	1000487f: R_386_32	milliTenthsSinceBoot
10004883:	8b 3d 04 00 00 00    	mov    edi,DWORD PTR ds:0x4	10004885: R_386_32	milliTenthsSinceBoot
10004889:	2b 35 a8 8d 03 10    	sub    esi,DWORD PTR ds:0x10038da8	1000488b: R_386_32	.bss
1000488f:	b9 b7 0b 00 00       	mov    ecx,0xbb7
10004894:	1b 3d ac 8d 03 10    	sbb    edi,DWORD PTR ds:0x10038dac	10004896: R_386_32	.bss
1000489a:	39 f1                	cmp    ecx,esi
1000489c:	19 fa                	sbb    edx,edi
1000489e:	0f 82 de 00 00 00    	jb     10004982 <NIDesktop::handleMouse(int, int, int, int)+0x634>
100048a4:	8b 8d 68 01 00 00    	mov    ecx,DWORD PTR [ebp+0x168]
100048aa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100048ad:	29 ca                	sub    edx,ecx
100048af:	83 fa 18             	cmp    edx,0x18
100048b2:	0f 8f ca 00 00 00    	jg     10004982 <NIDesktop::handleMouse(int, int, int, int)+0x634>
100048b8:	f6 85 88 01 00 00 01 	test   BYTE PTR [ebp+0x188],0x1
100048bf:	0f 85 bd 00 00 00    	jne    10004982 <NIDesktop::handleMouse(int, int, int, int)+0x634>
100048c5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
100048cc:	74 3e                	je     1000490c <NIDesktop::handleMouse(int, int, int, int)+0x5be>
100048ce:	8b 95 78 01 00 00    	mov    edx,DWORD PTR [ebp+0x178]
100048d4:	89 95 64 01 00 00    	mov    DWORD PTR [ebp+0x164],edx
100048da:	8b 95 7c 01 00 00    	mov    edx,DWORD PTR [ebp+0x17c]
100048e0:	89 95 68 01 00 00    	mov    DWORD PTR [ebp+0x168],edx
100048e6:	8b 95 80 01 00 00    	mov    edx,DWORD PTR [ebp+0x180]
100048ec:	89 95 6c 01 00 00    	mov    DWORD PTR [ebp+0x16c],edx
100048f2:	8b 95 84 01 00 00    	mov    edx,DWORD PTR [ebp+0x184]
100048f8:	89 95 70 01 00 00    	mov    DWORD PTR [ebp+0x170],edx
100048fe:	50                   	push   eax
100048ff:	50                   	push   eax
10004900:	55                   	push   ebp
10004901:	53                   	push   ebx
10004902:	e8 fc ff ff ff       	call   10004903 <NIDesktop::handleMouse(int, int, int, int)+0x5b5>	10004903: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
10004907:	83 c4 10             	add    esp,0x10
1000490a:	eb 5c                	jmp    10004968 <NIDesktop::handleMouse(int, int, int, int)+0x61a>
1000490c:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
10004912:	c7 85 68 01 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x168],0x0
1000491c:	8b 95 64 01 00 00    	mov    edx,DWORD PTR [ebp+0x164]
10004922:	c7 85 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x164],0x0
1000492c:	89 95 78 01 00 00    	mov    DWORD PTR [ebp+0x178],edx
10004932:	8b 95 6c 01 00 00    	mov    edx,DWORD PTR [ebp+0x16c]
10004938:	89 95 80 01 00 00    	mov    DWORD PTR [ebp+0x180],edx
1000493e:	8b 95 70 01 00 00    	mov    edx,DWORD PTR [ebp+0x170]
10004944:	89 95 84 01 00 00    	mov    DWORD PTR [ebp+0x184],edx
1000494a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000494d:	8b 92 0c 04 00 00    	mov    edx,DWORD PTR [edx+0x40c]
10004953:	89 95 6c 01 00 00    	mov    DWORD PTR [ebp+0x16c],edx
10004959:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
1000495c:	8b 92 10 04 00 00    	mov    edx,DWORD PTR [edx+0x410]
10004962:	89 95 70 01 00 00    	mov    DWORD PTR [ebp+0x170],edx
10004968:	83 ec 0c             	sub    esp,0xc
1000496b:	80 b5 74 01 00 00 01 	xor    BYTE PTR [ebp+0x174],0x1
10004972:	55                   	push   ebp
10004973:	e8 fc ff ff ff       	call   10004974 <NIDesktop::handleMouse(int, int, int, int)+0x626>	10004974: R_386_PC32	NIWindow::rerender()
10004978:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000497b:	e8 fc ff ff ff       	call   1000497c <NIDesktop::handleMouse(int, int, int, int)+0x62e>	1000497c: R_386_PC32	NIDesktop::completeRefresh()
10004980:	eb 11                	jmp    10004993 <NIDesktop::handleMouse(int, int, int, int)+0x645>
10004982:	8b 13                	mov    edx,DWORD PTR [ebx]
10004984:	8b 12                	mov    edx,DWORD PTR [edx]
10004986:	39 2a                	cmp    DWORD PTR [edx],ebp
10004988:	74 0c                	je     10004996 <NIDesktop::handleMouse(int, int, int, int)+0x648>
1000498a:	50                   	push   eax
1000498b:	50                   	push   eax
1000498c:	55                   	push   ebp
1000498d:	53                   	push   ebx
1000498e:	e8 fc ff ff ff       	call   1000498f <NIDesktop::handleMouse(int, int, int, int)+0x641>	1000498f: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
10004993:	83 c4 10             	add    esp,0x10
10004996:	a1 00 00 00 00       	mov    eax,ds:0x0	10004997: R_386_32	milliTenthsSinceBoot
1000499b:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	1000499d: R_386_32	milliTenthsSinceBoot
100049a1:	a3 a8 8d 03 10       	mov    ds:0x10038da8,eax	100049a2: R_386_32	.bss
100049a6:	89 15 ac 8d 03 10    	mov    DWORD PTR ds:0x10038dac,edx	100049a8: R_386_32	.bss
100049ac:	e9 22 01 00 00       	jmp    10004ad3 <NIDesktop::handleMouse(int, int, int, int)+0x785>
100049b1:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100049b3: R_386_32	movingWin
100049b8:	0f 85 15 01 00 00    	jne    10004ad3 <NIDesktop::handleMouse(int, int, int, int)+0x785>
100049be:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
100049c1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
100049c7:	89 ce                	mov    esi,ecx
100049c9:	8d 50 f2             	lea    edx,[eax-0xe]
100049cc:	2b b5 68 01 00 00    	sub    esi,DWORD PTR [ebp+0x168]
100049d2:	39 f2                	cmp    edx,esi
100049d4:	7f 3b                	jg     10004a11 <NIDesktop::handleMouse(int, int, int, int)+0x6c3>
100049d6:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
100049dd:	75 32                	jne    10004a11 <NIDesktop::handleMouse(int, int, int, int)+0x6c3>
100049df:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
100049e2:	c7 43 10 00 04 00 00 	mov    DWORD PTR [ebx+0x10],0x400
100049e9:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	100049eb: R_386_32	movingWin
100049ef:	50                   	push   eax
100049f0:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	100049f2: R_386_32	movingType
100049fa:	50                   	push   eax
100049fb:	89 15 b4 8d 03 10    	mov    DWORD PTR ds:0x10038db4,edx	100049fd: R_386_32	.bss
10004a01:	55                   	push   ebp
10004a02:	89 0d b0 8d 03 10    	mov    DWORD PTR ds:0x10038db0,ecx	10004a04: R_386_32	.bss
10004a08:	53                   	push   ebx
10004a09:	e8 fc ff ff ff       	call   10004a0a <NIDesktop::handleMouse(int, int, int, int)+0x6bc>	10004a0a: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004a0e:	83 c4 10             	add    esp,0x10
10004a11:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10004a14:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
10004a1a:	89 ce                	mov    esi,ecx
10004a1c:	8d 50 f2             	lea    edx,[eax-0xe]
10004a1f:	2b b5 64 01 00 00    	sub    esi,DWORD PTR [ebp+0x164]
10004a25:	39 f2                	cmp    edx,esi
10004a27:	7f 59                	jg     10004a82 <NIDesktop::handleMouse(int, int, int, int)+0x734>
10004a29:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
10004a30:	75 50                	jne    10004a82 <NIDesktop::handleMouse(int, int, int, int)+0x734>
10004a32:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004a34: R_386_32	movingWin
10004a39:	75 34                	jne    10004a6f <NIDesktop::handleMouse(int, int, int, int)+0x721>
10004a3b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004a3e:	c7 43 10 00 05 00 00 	mov    DWORD PTR [ebx+0x10],0x500
10004a45:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10004a47: R_386_32	movingWin
10004a4b:	50                   	push   eax
10004a4c:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	10004a4e: R_386_32	movingType
10004a56:	50                   	push   eax
10004a57:	89 0d b4 8d 03 10    	mov    DWORD PTR ds:0x10038db4,ecx	10004a59: R_386_32	.bss
10004a5d:	55                   	push   ebp
10004a5e:	89 15 b0 8d 03 10    	mov    DWORD PTR ds:0x10038db0,edx	10004a60: R_386_32	.bss
10004a64:	53                   	push   ebx
10004a65:	e8 fc ff ff ff       	call   10004a66 <NIDesktop::handleMouse(int, int, int, int)+0x718>	10004a66: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004a6a:	83 c4 10             	add    esp,0x10
10004a6d:	eb 13                	jmp    10004a82 <NIDesktop::handleMouse(int, int, int, int)+0x734>
10004a6f:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	10004a71: R_386_32	movingType
10004a79:	c7 43 10 00 03 00 00 	mov    DWORD PTR [ebx+0x10],0x300
10004a80:	eb 51                	jmp    10004ad3 <NIDesktop::handleMouse(int, int, int, int)+0x785>
10004a82:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004a84: R_386_32	movingWin
10004a89:	75 48                	jne    10004ad3 <NIDesktop::handleMouse(int, int, int, int)+0x785>
10004a8b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004a8e:	2b 95 68 01 00 00    	sub    edx,DWORD PTR [ebp+0x168]
10004a94:	83 fa 18             	cmp    edx,0x18
10004a97:	7f 3a                	jg     10004ad3 <NIDesktop::handleMouse(int, int, int, int)+0x785>
10004a99:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
10004aa0:	75 31                	jne    10004ad3 <NIDesktop::handleMouse(int, int, int, int)+0x785>
10004aa2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10004aa5:	2b 8d 64 01 00 00    	sub    ecx,DWORD PTR [ebp+0x164]
10004aab:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10004aad: R_386_32	movingWin
10004ab1:	50                   	push   eax
10004ab2:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10004ab4: R_386_32	movingType
10004abc:	50                   	push   eax
10004abd:	89 0d b4 8d 03 10    	mov    DWORD PTR ds:0x10038db4,ecx	10004abf: R_386_32	.bss
10004ac3:	55                   	push   ebp
10004ac4:	89 15 b0 8d 03 10    	mov    DWORD PTR ds:0x10038db0,edx	10004ac6: R_386_32	.bss
10004aca:	53                   	push   ebx
10004acb:	e8 fc ff ff ff       	call   10004acc <NIDesktop::handleMouse(int, int, int, int)+0x77e>	10004acc: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004ad0:	83 c4 10             	add    esp,0x10
10004ad3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004ad6:	83 ec 0c             	sub    esp,0xc
10004ad9:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004adf:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004ae1:	6a 00                	push   0x0
10004ae3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
10004ae6:	05 00 00 00 00       	add    eax,0x0	10004ae7: R_386_32	___mouse_data
10004aeb:	50                   	push   eax
10004aec:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004aef:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004af2:	52                   	push   edx
10004af3:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10004af6:	8b 84 24 9c 00 00 00 	mov    eax,DWORD PTR [esp+0x9c]
10004afd:	a3 b8 8d 03 10       	mov    ds:0x10038db8,eax	10004afe: R_386_32	.bss
10004b02:	83 c4 7c             	add    esp,0x7c
10004b05:	5b                   	pop    ebx
10004b06:	5e                   	pop    esi
10004b07:	5f                   	pop    edi
10004b08:	5d                   	pop    ebp
10004b09:	c3                   	ret    
10004b0a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10004b0e:	c7 44 24 40 01 00 00 80 	mov    DWORD PTR [esp+0x40],0x80000001
10004b16:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10004b1a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004b1c: R_386_32	mouseDesktop
10004b20:	83 ec 0c             	sub    esp,0xc
10004b23:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
10004b26:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004b28: R_386_32	movingWin
10004b30:	66 89 4c 24 50       	mov    WORD PTR [esp+0x50],cx
10004b35:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
10004b38:	89 b0 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],esi
10004b3e:	66 89 54 24 52       	mov    WORD PTR [esp+0x52],dx
10004b43:	89 b8 70 01 00 00    	mov    DWORD PTR [eax+0x170],edi
10004b49:	50                   	push   eax
10004b4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004b4e:	e8 fc ff ff ff       	call   10004b4f <NIDesktop::handleMouse(int, int, int, int)+0x801>	10004b4f: R_386_PC32	NIWindow::rerender()
10004b53:	5a                   	pop    edx
10004b54:	59                   	pop    ecx
10004b55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004b59:	50                   	push   eax
10004b5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004b5e:	53                   	push   ebx
10004b5f:	e8 fc ff ff ff       	call   10004b60 <NIDesktop::handleMouse(int, int, int, int)+0x812>	10004b60: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004b64:	5e                   	pop    esi
10004b65:	5f                   	pop    edi
10004b66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004b6a:	50                   	push   eax
10004b6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004b6f:	53                   	push   ebx
10004b70:	e8 fc ff ff ff       	call   10004b71 <NIDesktop::handleMouse(int, int, int, int)+0x823>	10004b71: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004b75:	83 ec 0c             	sub    esp,0xc
10004b78:	b9 05 00 00 00       	mov    ecx,0x5
10004b7d:	8d 74 24 58          	lea    esi,[esp+0x58]
10004b81:	89 e7                	mov    edi,esp
10004b83:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004b85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004b89:	50                   	push   eax
10004b8a:	e8 fc ff ff ff       	call   10004b8b <NIDesktop::handleMouse(int, int, int, int)+0x83d>	10004b8b: R_386_PC32	NIWindow::postEvent(NiEvent)
10004b8f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10004b96:	e9 bd fc ff ff       	jmp    10004858 <NIDesktop::handleMouse(int, int, int, int)+0x50a>
10004b9b:	89 b2 64 01 00 00    	mov    DWORD PTR [edx+0x164],esi
10004ba1:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
10004ba4:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004ba6: R_386_32	movingWin
10004bae:	2b 0d b0 8d 03 10    	sub    ecx,DWORD PTR ds:0x10038db0	10004bb0: R_386_32	.bss
10004bb4:	89 8a 68 01 00 00    	mov    DWORD PTR [edx+0x168],ecx
10004bba:	50                   	push   eax
10004bbb:	50                   	push   eax
10004bbc:	52                   	push   edx
10004bbd:	53                   	push   ebx
10004bbe:	e8 fc ff ff ff       	call   10004bbf <NIDesktop::handleMouse(int, int, int, int)+0x871>	10004bbf: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004bc3:	83 c4 10             	add    esp,0x10
10004bc6:	e9 3c fa ff ff       	jmp    10004607 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>

10004bcb <NiHandleMouse(int, int, int, int)>:
10004bcb:	83 ec 18             	sub    esp,0x18
10004bce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004bd2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004bd6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004bda:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004bde:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004be0: R_386_32	mouseDesktop
10004be4:	e8 fc ff ff ff       	call   10004be5 <NiHandleMouse(int, int, int, int)+0x1a>	10004be5: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
10004be9:	83 c4 2c             	add    esp,0x2c
10004bec:	c3                   	ret    

10004bed <drawVGAChar(int, int, int)>:
10004bed:	55                   	push   ebp
10004bee:	57                   	push   edi
10004bef:	56                   	push   esi
10004bf0:	53                   	push   ebx
10004bf1:	31 db                	xor    ebx,ebx
10004bf3:	83 ec 1c             	sub    esp,0x1c
10004bf6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10004bfa:	c1 e0 04             	shl    eax,0x4
10004bfd:	89 04 24             	mov    DWORD PTR [esp],eax
10004c00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10004c04:	c1 e0 04             	shl    eax,0x4
10004c07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10004c0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004c0f:	c1 e0 03             	shl    eax,0x3
10004c12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004c16:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004c19:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10004c1d:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	10004c20: R_386_32	cp
10004c24:	8d 3c 19             	lea    edi,[ecx+ebx*1]
10004c27:	31 f6                	xor    esi,esi
10004c29:	84 c0                	test   al,al
10004c2b:	79 22                	jns    10004c4f <drawVGAChar(int, int, int)+0x62>
10004c2d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10004c31:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004c33: R_386_32	screen
10004c37:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004c39:	6a 00                	push   0x0
10004c3b:	57                   	push   edi
10004c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004c40:	8d 2c 06             	lea    ebp,[esi+eax*1]
10004c43:	55                   	push   ebp
10004c44:	52                   	push   edx
10004c45:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10004c48:	83 c4 10             	add    esp,0x10
10004c4b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
10004c4f:	d1 e0                	shl    eax,1
10004c51:	46                   	inc    esi
10004c52:	83 fe 08             	cmp    esi,0x8
10004c55:	75 d2                	jne    10004c29 <drawVGAChar(int, int, int)+0x3c>
10004c57:	43                   	inc    ebx
10004c58:	83 fb 10             	cmp    ebx,0x10
10004c5b:	75 b9                	jne    10004c16 <drawVGAChar(int, int, int)+0x29>
10004c5d:	83 c4 1c             	add    esp,0x1c
10004c60:	5b                   	pop    ebx
10004c61:	5e                   	pop    esi
10004c62:	5f                   	pop    edi
10004c63:	5d                   	pop    ebp
10004c64:	c3                   	ret    

10004c65 <NiDisplayRAM(void*)>:
10004c65:	56                   	push   esi
10004c66:	53                   	push   ebx
10004c67:	83 ec 14             	sub    esp,0x14
10004c6a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c6b: R_386_32	irqDisableCounter
10004c6f:	48                   	dec    eax
10004c70:	a3 00 00 00 00       	mov    ds:0x0,eax	10004c71: R_386_32	irqDisableCounter
10004c75:	75 01                	jne    10004c78 <NiDisplayRAM(void*)+0x13>
10004c77:	fb                   	sti    
10004c78:	6b 05 00 00 00 00 64 	imul   eax,DWORD PTR ds:0x0,0x64	10004c7a: R_386_32	Phys::usedPages
10004c7f:	31 db                	xor    ebx,ebx
10004c81:	99                   	cdq    
10004c82:	f7 3d 00 00 00 00    	idiv   DWORD PTR ds:0x0	10004c84: R_386_32	Phys::usablePages
10004c88:	31 f6                	xor    esi,esi
10004c8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004c8e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004c90: R_386_32	screen
10004c94:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004c96:	68 ff ff ff 00       	push   0xffffff
10004c9b:	53                   	push   ebx
10004c9c:	56                   	push   esi
10004c9d:	46                   	inc    esi
10004c9e:	52                   	push   edx
10004c9f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10004ca2:	83 c4 10             	add    esp,0x10
10004ca5:	83 fe 60             	cmp    esi,0x60
10004ca8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004cac:	75 dc                	jne    10004c8a <NiDisplayRAM(void*)+0x25>
10004cae:	43                   	inc    ebx
10004caf:	83 fb 10             	cmp    ebx,0x10
10004cb2:	75 d4                	jne    10004c88 <NiDisplayRAM(void*)+0x23>
10004cb4:	b9 0a 00 00 00       	mov    ecx,0xa
10004cb9:	52                   	push   edx
10004cba:	99                   	cdq    
10004cbb:	f7 f9                	idiv   ecx
10004cbd:	89 d3                	mov    ebx,edx
10004cbf:	83 c0 30             	add    eax,0x30
10004cc2:	50                   	push   eax
10004cc3:	6a 00                	push   0x0
10004cc5:	6a 00                	push   0x0
10004cc7:	e8 fc ff ff ff       	call   10004cc8 <NiDisplayRAM(void*)+0x63>	10004cc8: R_386_PC32	drawVGAChar(int, int, int)
10004ccc:	8d 43 30             	lea    eax,[ebx+0x30]
10004ccf:	83 c4 0c             	add    esp,0xc
10004cd2:	50                   	push   eax
10004cd3:	6a 00                	push   0x0
10004cd5:	6a 01                	push   0x1
10004cd7:	e8 fc ff ff ff       	call   10004cd8 <NiDisplayRAM(void*)+0x73>	10004cd8: R_386_PC32	drawVGAChar(int, int, int)
10004cdc:	83 c4 0c             	add    esp,0xc
10004cdf:	6a 25                	push   0x25
10004ce1:	6a 00                	push   0x0
10004ce3:	6a 02                	push   0x2
10004ce5:	e8 fc ff ff ff       	call   10004ce6 <NiDisplayRAM(void*)+0x81>	10004ce6: R_386_PC32	drawVGAChar(int, int, int)
10004cea:	83 c4 0c             	add    esp,0xc
10004ced:	6a 20                	push   0x20
10004cef:	6a 00                	push   0x0
10004cf1:	6a 03                	push   0x3
10004cf3:	e8 fc ff ff ff       	call   10004cf4 <NiDisplayRAM(void*)+0x8f>	10004cf4: R_386_PC32	drawVGAChar(int, int, int)
10004cf8:	83 c4 0c             	add    esp,0xc
10004cfb:	6a 52                	push   0x52
10004cfd:	6a 00                	push   0x0
10004cff:	6a 04                	push   0x4
10004d01:	e8 fc ff ff ff       	call   10004d02 <NiDisplayRAM(void*)+0x9d>	10004d02: R_386_PC32	drawVGAChar(int, int, int)
10004d06:	83 c4 0c             	add    esp,0xc
10004d09:	6a 41                	push   0x41
10004d0b:	6a 00                	push   0x0
10004d0d:	6a 05                	push   0x5
10004d0f:	e8 fc ff ff ff       	call   10004d10 <NiDisplayRAM(void*)+0xab>	10004d10: R_386_PC32	drawVGAChar(int, int, int)
10004d14:	83 c4 0c             	add    esp,0xc
10004d17:	6a 4d                	push   0x4d
10004d19:	6a 00                	push   0x0
10004d1b:	6a 06                	push   0x6
10004d1d:	e8 fc ff ff ff       	call   10004d1e <NiDisplayRAM(void*)+0xb9>	10004d1e: R_386_PC32	drawVGAChar(int, int, int)
10004d22:	83 c4 0c             	add    esp,0xc
10004d25:	6a 20                	push   0x20
10004d27:	6a 00                	push   0x0
10004d29:	6a 07                	push   0x7
10004d2b:	e8 fc ff ff ff       	call   10004d2c <NiDisplayRAM(void*)+0xc7>	10004d2c: R_386_PC32	drawVGAChar(int, int, int)
10004d30:	83 c4 0c             	add    esp,0xc
10004d33:	6a 75                	push   0x75
10004d35:	6a 00                	push   0x0
10004d37:	6a 08                	push   0x8
10004d39:	e8 fc ff ff ff       	call   10004d3a <NiDisplayRAM(void*)+0xd5>	10004d3a: R_386_PC32	drawVGAChar(int, int, int)
10004d3e:	83 c4 0c             	add    esp,0xc
10004d41:	6a 73                	push   0x73
10004d43:	6a 00                	push   0x0
10004d45:	6a 09                	push   0x9
10004d47:	e8 fc ff ff ff       	call   10004d48 <NiDisplayRAM(void*)+0xe3>	10004d48: R_386_PC32	drawVGAChar(int, int, int)
10004d4c:	83 c4 0c             	add    esp,0xc
10004d4f:	6a 65                	push   0x65
10004d51:	6a 00                	push   0x0
10004d53:	6a 0a                	push   0xa
10004d55:	e8 fc ff ff ff       	call   10004d56 <NiDisplayRAM(void*)+0xf1>	10004d56: R_386_PC32	drawVGAChar(int, int, int)
10004d5a:	83 c4 0c             	add    esp,0xc
10004d5d:	6a 64                	push   0x64
10004d5f:	6a 00                	push   0x0
10004d61:	6a 0b                	push   0xb
10004d63:	e8 fc ff ff ff       	call   10004d64 <NiDisplayRAM(void*)+0xff>	10004d64: R_386_PC32	drawVGAChar(int, int, int)
10004d68:	c7 04 24 c4 09 00 00 	mov    DWORD PTR [esp],0x9c4
10004d6f:	e8 fc ff ff ff       	call   10004d70 <NiDisplayRAM(void*)+0x10b>	10004d70: R_386_PC32	milliTenthSleep(unsigned int)
10004d74:	83 c4 10             	add    esp,0x10
10004d77:	e9 fc fe ff ff       	jmp    10004c78 <NiDisplayRAM(void*)+0x13>

10004d7c <monikaBsod(char*)>:
10004d7c:	55                   	push   ebp
10004d7d:	57                   	push   edi
10004d7e:	31 ff                	xor    edi,edi
10004d80:	56                   	push   esi
10004d81:	53                   	push   ebx
10004d82:	31 db                	xor    ebx,ebx
10004d84:	83 ec 24             	sub    esp,0x24
10004d87:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d88: R_386_32	screen
10004d8c:	8b 10                	mov    edx,DWORD PTR [eax]
10004d8e:	68 ff ff ff 00       	push   0xffffff
10004d93:	50                   	push   eax
10004d94:	ff 52 40             	call   DWORD PTR [edx+0x40]
10004d97:	83 c4 10             	add    esp,0x10
10004d9a:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	10004d9c: R_386_32	justMonika
10004da0:	8d 43 01             	lea    eax,[ebx+0x1]
10004da3:	84 c9                	test   cl,cl
10004da5:	79 0e                	jns    10004db5 <monikaBsod(char*)+0x39>
10004da7:	8d 51 80             	lea    edx,[ecx-0x80]
10004daa:	83 c3 02             	add    ebx,0x2
10004dad:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	10004daf: R_386_32	justMonika
10004db3:	eb 04                	jmp    10004db9 <monikaBsod(char*)+0x3d>
10004db5:	89 c3                	mov    ebx,eax
10004db7:	b2 01                	mov    dl,0x1
10004db9:	0f b6 c1             	movzx  eax,cl
10004dbc:	83 e1 03             	and    ecx,0x3
10004dbf:	89 c6                	mov    esi,eax
10004dc1:	6b c9 55             	imul   ecx,ecx,0x55
10004dc4:	c1 fe 05             	sar    esi,0x5
10004dc7:	c1 f8 02             	sar    eax,0x2
10004dca:	83 e6 03             	and    esi,0x3
10004dcd:	83 e0 07             	and    eax,0x7
10004dd0:	6b f6 55             	imul   esi,esi,0x55
10004dd3:	6b c0 24             	imul   eax,eax,0x24
10004dd6:	c1 e6 10             	shl    esi,0x10
10004dd9:	c1 e0 08             	shl    eax,0x8
10004ddc:	09 f0                	or     eax,esi
10004dde:	31 f6                	xor    esi,esi
10004de0:	09 c8                	or     eax,ecx
10004de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004de6:	0f b6 c2             	movzx  eax,dl
10004de9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004ded:	8d 04 37             	lea    eax,[edi+esi*1]
10004df0:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10004df4:	7f 10                	jg     10004e06 <monikaBsod(char*)+0x8a>
10004df6:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
10004dfa:	81 ff ff af 04 00    	cmp    edi,0x4afff
10004e00:	7e 98                	jle    10004d9a <monikaBsod(char*)+0x1e>
10004e02:	31 db                	xor    ebx,ebx
10004e04:	eb 25                	jmp    10004e2b <monikaBsod(char*)+0xaf>
10004e06:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004e08: R_386_32	screen
10004e0c:	b9 80 02 00 00       	mov    ecx,0x280
10004e11:	8b 2a                	mov    ebp,DWORD PTR [edx]
10004e13:	46                   	inc    esi
10004e14:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10004e18:	99                   	cdq    
10004e19:	f7 f9                	idiv   ecx
10004e1b:	50                   	push   eax
10004e1c:	52                   	push   edx
10004e1d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004e1f: R_386_32	screen
10004e23:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10004e26:	83 c4 10             	add    esp,0x10
10004e29:	eb c2                	jmp    10004ded <monikaBsod(char*)+0x71>
10004e2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004e2f:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
10004e33:	84 c0                	test   al,al
10004e35:	74 1d                	je     10004e54 <monikaBsod(char*)+0xd8>
10004e37:	b9 19 00 00 00       	mov    ecx,0x19
10004e3c:	52                   	push   edx
10004e3d:	50                   	push   eax
10004e3e:	89 d8                	mov    eax,ebx
10004e40:	43                   	inc    ebx
10004e41:	99                   	cdq    
10004e42:	f7 f9                	idiv   ecx
10004e44:	83 c0 0a             	add    eax,0xa
10004e47:	42                   	inc    edx
10004e48:	50                   	push   eax
10004e49:	52                   	push   edx
10004e4a:	e8 fc ff ff ff       	call   10004e4b <monikaBsod(char*)+0xcf>	10004e4b: R_386_PC32	drawVGAChar(int, int, int)
10004e4f:	83 c4 10             	add    esp,0x10
10004e52:	eb d7                	jmp    10004e2b <monikaBsod(char*)+0xaf>
10004e54:	f4                   	hlt    
10004e55:	eb fd                	jmp    10004e54 <monikaBsod(char*)+0xd8>

10004e57 <NiInstallSysHooks()>:
10004e57:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004e59: R_386_32	guiPanicHandler
	10004e5d: R_386_32	monikaBsod(char*)
10004e61:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10004e63: R_386_32	systemCallHandlers
	10004e67: R_386_32	NiSystemCallHandler(regs*)
10004e6b:	c3                   	ret    

10004e6c <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
10004e6c:	56                   	push   esi
10004e6d:	53                   	push   ebx
10004e6e:	83 ec 10             	sub    esp,0x10
10004e71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10004e75:	68 a7 5a 00 10       	push   0x10005aa7	10004e76: R_386_32	.text
10004e7a:	e8 fc ff ff ff       	call   10004e7b <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	10004e7b: R_386_PC32	Dbg::kprintf(char const*, ...)
10004e7f:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
10004e86:	e8 fc ff ff ff       	call   10004e87 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x1b>	10004e87: R_386_PC32	malloc
10004e8b:	89 c6                	mov    esi,eax
10004e8d:	58                   	pop    eax
10004e8e:	5a                   	pop    edx
10004e8f:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10004e95:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10004e9b:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10004ea1:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10004ea7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004ea9: R_386_32	ctxt
10004ead:	56                   	push   esi
10004eae:	e8 fc ff ff ff       	call   10004eaf <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x43>	10004eaf: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10004eb3:	83 c4 18             	add    esp,0x18
10004eb6:	56                   	push   esi
10004eb7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004eb9: R_386_32	desktop
10004ebd:	e8 fc ff ff ff       	call   10004ebe <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x52>	10004ebe: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004ec2:	59                   	pop    ecx
10004ec3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004ec5: R_386_32	desktop
10004ec9:	e8 fc ff ff ff       	call   10004eca <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	10004eca: R_386_PC32	NIDesktop::completeRefresh()
10004ece:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10004ed4:	89 34 24             	mov    DWORD PTR [esp],esi
10004ed7:	e8 fc ff ff ff       	call   10004ed8 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x6c>	10004ed8: R_386_PC32	NIWindow::drawBasicWindow()
10004edc:	83 c4 14             	add    esp,0x14
10004edf:	31 c0                	xor    eax,eax
10004ee1:	31 d2                	xor    edx,edx
10004ee3:	5b                   	pop    ebx
10004ee4:	5e                   	pop    esi
10004ee5:	c3                   	ret    

10004ee6 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004ee6:	55                   	push   ebp
10004ee7:	57                   	push   edi
10004ee8:	56                   	push   esi
10004ee9:	31 f6                	xor    esi,esi
10004eeb:	53                   	push   ebx
10004eec:	83 ec 28             	sub    esp,0x28
10004eef:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10004ef3:	68 c2 5a 00 10       	push   0x10005ac2	10004ef4: R_386_32	.text
10004ef8:	e8 fc ff ff ff       	call   10004ef9 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x13>	10004ef9: R_386_PC32	Dbg::kprintf(char const*, ...)
10004efd:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10004f03:	83 c4 10             	add    esp,0x10
10004f06:	31 c0                	xor    eax,eax
10004f08:	39 b3 70 01 00 00    	cmp    DWORD PTR [ebx+0x170],esi
10004f0e:	7e 33                	jle    10004f43 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x5d>
10004f10:	31 ff                	xor    edi,edi
10004f12:	39 bb 6c 01 00 00    	cmp    DWORD PTR [ebx+0x16c],edi
10004f18:	7e 26                	jle    10004f40 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x5a>
10004f1a:	8b 95 b8 00 00 00    	mov    edx,DWORD PTR [ebp+0xb8]
10004f20:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
10004f23:	83 fa ff             	cmp    edx,0xffffffff
10004f26:	74 14                	je     10004f3c <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x56>
10004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004f2c:	52                   	push   edx
10004f2d:	56                   	push   esi
10004f2e:	57                   	push   edi
10004f2f:	53                   	push   ebx
10004f30:	e8 fc ff ff ff       	call   10004f31 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x4b>	10004f31: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004f35:	83 c4 10             	add    esp,0x10
10004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004f3c:	40                   	inc    eax
10004f3d:	47                   	inc    edi
10004f3e:	eb d2                	jmp    10004f12 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x2c>
10004f40:	46                   	inc    esi
10004f41:	eb c5                	jmp    10004f08 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x22>
10004f43:	50                   	push   eax
10004f44:	50                   	push   eax
10004f45:	53                   	push   ebx
10004f46:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004f48: R_386_32	desktop
10004f4c:	e8 fc ff ff ff       	call   10004f4d <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x67>	10004f4d: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004f51:	83 c4 2c             	add    esp,0x2c
10004f54:	31 c0                	xor    eax,eax
10004f56:	5b                   	pop    ebx
10004f57:	31 d2                	xor    edx,edx
10004f59:	5e                   	pop    esi
10004f5a:	5f                   	pop    edi
10004f5b:	5d                   	pop    ebp
10004f5c:	c3                   	ret    

10004f5d <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004f5d:	53                   	push   ebx
10004f5e:	83 ec 14             	sub    esp,0x14
10004f61:	68 e4 5a 00 10       	push   0x10005ae4	10004f62: R_386_32	.text
10004f66:	e8 fc ff ff ff       	call   10004f67 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0xa>	10004f67: R_386_PC32	Dbg::kprintf(char const*, ...)
10004f6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004f6f:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10004f75:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004f78:	e8 fc ff ff ff       	call   10004f79 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x1c>	10004f79: R_386_PC32	NIWindow::request()
10004f7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004f80:	e8 fc ff ff ff       	call   10004f81 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x24>	10004f81: R_386_PC32	NIWindow::drawBasicWindow()
10004f85:	31 c0                	xor    eax,eax
10004f87:	31 d2                	xor    edx,edx
10004f89:	83 c4 18             	add    esp,0x18
10004f8c:	5b                   	pop    ebx
10004f8d:	c3                   	ret    

10004f8e <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)>:
10004f8e:	55                   	push   ebp
10004f8f:	57                   	push   edi
10004f90:	56                   	push   esi
10004f91:	53                   	push   ebx
10004f92:	83 ec 38             	sub    esp,0x38
10004f95:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10004f99:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10004f9f:	53                   	push   ebx
10004fa0:	e8 fc ff ff ff       	call   10004fa1 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x13>	10004fa1: R_386_PC32	NIWindow::getEventCount()
10004fa5:	83 c4 10             	add    esp,0x10
10004fa8:	85 c0                	test   eax,eax
10004faa:	74 54                	je     10005000 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x72>
10004fac:	89 e6                	mov    esi,esp
10004fae:	8d bd bc 00 00 00    	lea    edi,[ebp+0xbc]
10004fb4:	50                   	push   eax
10004fb5:	50                   	push   eax
10004fb6:	53                   	push   ebx
10004fb7:	56                   	push   esi
10004fb8:	e8 fc ff ff ff       	call   10004fb9 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x2b>	10004fb9: R_386_PC32	NIWindow::grabEvent()
10004fbd:	b9 05 00 00 00       	mov    ecx,0x5
10004fc2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004fc4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
10004fca:	89 85 a4 00 00 00    	mov    DWORD PTR [ebp+0xa4],eax
10004fd0:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10004fd6:	89 85 a8 00 00 00    	mov    DWORD PTR [ebp+0xa8],eax
10004fdc:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
10004fe2:	89 85 ac 00 00 00    	mov    DWORD PTR [ebp+0xac],eax
10004fe8:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10004fee:	89 85 b0 00 00 00    	mov    DWORD PTR [ebp+0xb0],eax
10004ff4:	53                   	push   ebx
10004ff5:	e8 fc ff ff ff       	call   10004ff6 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x68>	10004ff6: R_386_PC32	NIWindow::getEventCount()
10004ffa:	83 c4 10             	add    esp,0x10
10004ffd:	99                   	cdq    
10004ffe:	eb 05                	jmp    10005005 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x77>
10005000:	83 c8 ff             	or     eax,0xffffffff
10005003:	89 c2                	mov    edx,eax
10005005:	83 c4 2c             	add    esp,0x2c
10005008:	5b                   	pop    ebx
10005009:	5e                   	pop    esi
1000500a:	5f                   	pop    edi
1000500b:	5d                   	pop    ebp
1000500c:	c3                   	ret    

1000500d <NiSystemCallHandler(regs*)>:
1000500d:	53                   	push   ebx
1000500e:	83 ec 14             	sub    esp,0x14
10005011:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10005015:	68 03 5b 00 10       	push   0x10005b03	10005016: R_386_32	.text
1000501a:	e8 fc ff ff ff       	call   1000501b <NiSystemCallHandler(regs*)+0xe>	1000501b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000501f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10005022:	83 c4 10             	add    esp,0x10
10005025:	83 f8 04             	cmp    eax,0x4
10005028:	74 28                	je     10005052 <NiSystemCallHandler(regs*)+0x45>
1000502a:	77 06                	ja     10005032 <NiSystemCallHandler(regs*)+0x25>
1000502c:	85 c0                	test   eax,eax
1000502e:	74 13                	je     10005043 <NiSystemCallHandler(regs*)+0x36>
10005030:	eb 0a                	jmp    1000503c <NiSystemCallHandler(regs*)+0x2f>
10005032:	83 f8 05             	cmp    eax,0x5
10005035:	74 2a                	je     10005061 <NiSystemCallHandler(regs*)+0x54>
10005037:	83 f8 06             	cmp    eax,0x6
1000503a:	74 34                	je     10005070 <NiSystemCallHandler(regs*)+0x63>
1000503c:	83 c8 ff             	or     eax,0xffffffff
1000503f:	89 c2                	mov    edx,eax
10005041:	eb 3d                	jmp    10005080 <NiSystemCallHandler(regs*)+0x73>
10005043:	50                   	push   eax
10005044:	50                   	push   eax
10005045:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10005048:	ff 73 28             	push   DWORD PTR [ebx+0x28]
1000504b:	e8 fc ff ff ff       	call   1000504c <NiSystemCallHandler(regs*)+0x3f>	1000504c: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
10005050:	eb 2b                	jmp    1000507d <NiSystemCallHandler(regs*)+0x70>
10005052:	50                   	push   eax
10005053:	50                   	push   eax
10005054:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10005057:	ff 73 28             	push   DWORD PTR [ebx+0x28]
1000505a:	e8 fc ff ff ff       	call   1000505b <NiSystemCallHandler(regs*)+0x4e>	1000505b: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
1000505f:	eb 1c                	jmp    1000507d <NiSystemCallHandler(regs*)+0x70>
10005061:	50                   	push   eax
10005062:	50                   	push   eax
10005063:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10005066:	ff 73 28             	push   DWORD PTR [ebx+0x28]
10005069:	e8 fc ff ff ff       	call   1000506a <NiSystemCallHandler(regs*)+0x5d>	1000506a: R_386_PC32	NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)
1000506e:	eb 0d                	jmp    1000507d <NiSystemCallHandler(regs*)+0x70>
10005070:	50                   	push   eax
10005071:	50                   	push   eax
10005072:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10005075:	ff 73 28             	push   DWORD PTR [ebx+0x28]
10005078:	e8 fc ff ff ff       	call   10005079 <NiSystemCallHandler(regs*)+0x6c>	10005079: R_386_PC32	NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)
1000507d:	83 c4 10             	add    esp,0x10
10005080:	83 c4 08             	add    esp,0x8
10005083:	5b                   	pop    ebx
10005084:	c3                   	ret    
10005085:	90                   	nop

10005086 <NIWindow::postEvent(NiEvent)>:
10005086:	57                   	push   edi
10005087:	b9 05 00 00 00       	mov    ecx,0x5
1000508c:	56                   	push   esi
1000508d:	53                   	push   ebx
1000508e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10005092:	8d 74 24 14          	lea    esi,[esp+0x14]
10005096:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
10005099:	6b d0 14             	imul   edx,eax,0x14
1000509c:	40                   	inc    eax
1000509d:	8d 7c 13 18          	lea    edi,[ebx+edx*1+0x18]
100050a1:	99                   	cdq    
100050a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100050a4:	b9 10 00 00 00       	mov    ecx,0x10
100050a9:	ff 43 0c             	inc    DWORD PTR [ebx+0xc]
100050ac:	f7 f9                	idiv   ecx
100050ae:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
100050b1:	5b                   	pop    ebx
100050b2:	5e                   	pop    esi
100050b3:	5f                   	pop    edi
100050b4:	c3                   	ret    
100050b5:	90                   	nop

100050b6 <NIWindow::getEventCount()>:
100050b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100050ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100050bd:	c3                   	ret    

100050be <NIWindow::grabEvent()>:
100050be:	57                   	push   edi
100050bf:	b9 05 00 00 00       	mov    ecx,0x5
100050c4:	56                   	push   esi
100050c5:	53                   	push   ebx
100050c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100050ca:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100050ce:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
100050d1:	6b d0 14             	imul   edx,eax,0x14
100050d4:	40                   	inc    eax
100050d5:	8d 74 13 18          	lea    esi,[ebx+edx*1+0x18]
100050d9:	99                   	cdq    
100050da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100050dc:	ff 4b 0c             	dec    DWORD PTR [ebx+0xc]
100050df:	b9 10 00 00 00       	mov    ecx,0x10
100050e4:	f7 f9                	idiv   ecx
100050e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100050ea:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
100050ed:	5b                   	pop    ebx
100050ee:	5e                   	pop    esi
100050ef:	5f                   	pop    edi
100050f0:	c2 04 00             	ret    0x4
100050f3:	90                   	nop

100050f4 <NIWindow::invalidate()>:
100050f4:	53                   	push   ebx
100050f5:	83 ec 08             	sub    esp,0x8
100050f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100050fc:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
10005103:	74 28                	je     1000512d <NIWindow::invalidate()+0x39>
10005105:	83 bb 60 01 00 00 00 	cmp    DWORD PTR [ebx+0x160],0x0
1000510c:	74 1f                	je     1000512d <NIWindow::invalidate()+0x39>
1000510e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10005111:	85 c0                	test   eax,eax
10005113:	74 18                	je     1000512d <NIWindow::invalidate()+0x39>
10005115:	83 ec 0c             	sub    esp,0xc
10005118:	50                   	push   eax
10005119:	e8 fc ff ff ff       	call   1000511a <NIWindow::invalidate()+0x26>	1000511a: R_386_PC32	free
1000511e:	59                   	pop    ecx
1000511f:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
10005125:	e8 fc ff ff ff       	call   10005126 <NIWindow::invalidate()+0x32>	10005126: R_386_PC32	free
1000512a:	83 c4 10             	add    esp,0x10
1000512d:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
10005137:	c7 83 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x15c],0x0
10005141:	c6 83 58 01 00 00 00 	mov    BYTE PTR [ebx+0x158],0x0
10005148:	83 c4 08             	add    esp,0x8
1000514b:	5b                   	pop    ebx
1000514c:	c3                   	ret    
1000514d:	90                   	nop

1000514e <NIWindow::putpixel(int, int, unsigned int)>:
1000514e:	56                   	push   esi
1000514f:	53                   	push   ebx
10005150:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10005154:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10005158:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
1000515b:	0f af 83 6c 01 00 00 	imul   eax,DWORD PTR [ebx+0x16c]
10005162:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10005166:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
1000516a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000516d:	83 fe 04             	cmp    esi,0x4
10005170:	75 05                	jne    10005177 <NIWindow::putpixel(int, int, unsigned int)+0x29>
10005172:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
10005175:	eb 0e                	jmp    10005185 <NIWindow::putpixel(int, int, unsigned int)+0x37>
10005177:	83 fe 02             	cmp    esi,0x2
1000517a:	75 06                	jne    10005182 <NIWindow::putpixel(int, int, unsigned int)+0x34>
1000517c:	66 89 0c 42          	mov    WORD PTR [edx+eax*2],cx
10005180:	eb 03                	jmp    10005185 <NIWindow::putpixel(int, int, unsigned int)+0x37>
10005182:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
10005185:	5b                   	pop    ebx
10005186:	5e                   	pop    esi
10005187:	c3                   	ret    

10005188 <NIWindow::drawBasicWindow()>:
10005188:	55                   	push   ebp
10005189:	57                   	push   edi
1000518a:	56                   	push   esi
1000518b:	31 f6                	xor    esi,esi
1000518d:	53                   	push   ebx
1000518e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
10005192:	39 b5 70 01 00 00    	cmp    DWORD PTR [ebp+0x170],esi
10005198:	7e 31                	jle    100051cb <NIWindow::drawBasicWindow()+0x43>
1000519a:	31 db                	xor    ebx,ebx
1000519c:	83 fe 19             	cmp    esi,0x19
1000519f:	0f 9e c3             	setle  bl
100051a2:	31 ff                	xor    edi,edi
100051a4:	4b                   	dec    ebx
100051a5:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
100051ab:	81 c3 ff ff ff 00    	add    ebx,0xffffff
100051b1:	39 bd 6c 01 00 00    	cmp    DWORD PTR [ebp+0x16c],edi
100051b7:	7e 0f                	jle    100051c8 <NIWindow::drawBasicWindow()+0x40>
100051b9:	53                   	push   ebx
100051ba:	56                   	push   esi
100051bb:	57                   	push   edi
100051bc:	47                   	inc    edi
100051bd:	55                   	push   ebp
100051be:	e8 fc ff ff ff       	call   100051bf <NIWindow::drawBasicWindow()+0x37>	100051bf: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100051c3:	83 c4 10             	add    esp,0x10
100051c6:	eb e9                	jmp    100051b1 <NIWindow::drawBasicWindow()+0x29>
100051c8:	46                   	inc    esi
100051c9:	eb c7                	jmp    10005192 <NIWindow::drawBasicWindow()+0xa>
100051cb:	5b                   	pop    ebx
100051cc:	5e                   	pop    esi
100051cd:	5f                   	pop    edi
100051ce:	5d                   	pop    ebp
100051cf:	c3                   	ret    

100051d0 <NIWindow::rerender()>:
100051d0:	57                   	push   edi
100051d1:	56                   	push   esi
100051d2:	53                   	push   ebx
100051d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100051d7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
100051de:	74 0c                	je     100051ec <NIWindow::rerender()+0x1c>
100051e0:	83 ec 0c             	sub    esp,0xc
100051e3:	53                   	push   ebx
100051e4:	e8 fc ff ff ff       	call   100051e5 <NIWindow::rerender()+0x15>	100051e5: R_386_PC32	NIWindow::invalidate()
100051e9:	83 c4 10             	add    esp,0x10
100051ec:	8b b3 70 01 00 00    	mov    esi,DWORD PTR [ebx+0x170]
100051f2:	83 ec 0c             	sub    esp,0xc
100051f5:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
100051fb:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10005202:	50                   	push   eax
10005203:	e8 fc ff ff ff       	call   10005204 <NIWindow::rerender()+0x34>	10005204: R_386_PC32	malloc
10005208:	0f af b3 6c 01 00 00 	imul   esi,DWORD PTR [ebx+0x16c]
1000520f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10005215:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
10005219:	89 34 24             	mov    DWORD PTR [esp],esi
1000521c:	e8 fc ff ff ff       	call   1000521d <NIWindow::rerender()+0x4d>	1000521d: R_386_PC32	malloc
10005221:	89 f1                	mov    ecx,esi
10005223:	89 c2                	mov    edx,eax
10005225:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10005228:	89 d7                	mov    edi,edx
1000522a:	31 c0                	xor    eax,eax
1000522c:	83 c4 10             	add    esp,0x10
1000522f:	f3 aa                	rep stos BYTE PTR es:[edi],al
10005231:	31 c0                	xor    eax,eax
10005233:	39 83 5c 01 00 00    	cmp    DWORD PTR [ebx+0x15c],eax
10005239:	7e 7f                	jle    100052ba <NIWindow::rerender()+0xea>
1000523b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10005242:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10005248:	01 d6                	add    esi,edx
1000524a:	83 f8 06             	cmp    eax,0x6
1000524d:	7f 1e                	jg     1000526d <NIWindow::rerender()+0x9d>
1000524f:	8b 0c 85 00 00 00 00 	mov    ecx,DWORD PTR [eax*4+0x0]	10005252: R_386_32	curveLookup7
10005256:	66 89 0e             	mov    WORD PTR [esi],cx
10005259:	8b 8b 60 01 00 00    	mov    ecx,DWORD PTR [ebx+0x160]
1000525f:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10005262: R_386_32	curveLookup7
10005266:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
1000526b:	eb 47                	jmp    100052b4 <NIWindow::rerender()+0xe4>
1000526d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
10005273:	8d 79 fa             	lea    edi,[ecx-0x6]
10005276:	39 c7                	cmp    edi,eax
10005278:	7f 28                	jg     100052a2 <NIWindow::rerender()+0xd2>
1000527a:	29 c1                	sub    ecx,eax
1000527c:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	1000527f: R_386_32	curveLookup7
10005283:	66 89 0e             	mov    WORD PTR [esi],cx
10005286:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
1000528c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10005292:	29 c1                	sub    ecx,eax
10005294:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10005297: R_386_32	curveLookup7
1000529b:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
100052a0:	eb 12                	jmp    100052b4 <NIWindow::rerender()+0xe4>
100052a2:	66 c7 06 00 00       	mov    WORD PTR [esi],0x0
100052a7:	8b 8b 60 01 00 00    	mov    ecx,DWORD PTR [ebx+0x160]
100052ad:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
100052b4:	40                   	inc    eax
100052b5:	e9 79 ff ff ff       	jmp    10005233 <NIWindow::rerender()+0x63>
100052ba:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
100052c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
100052c5:	5b                   	pop    ebx
100052c6:	5e                   	pop    esi
100052c7:	5f                   	pop    edi
100052c8:	e9 bb fe ff ff       	jmp    10005188 <NIWindow::drawBasicWindow()>
100052cd:	90                   	nop

100052ce <NIWindow::changeContext(NIContext*, int, int)>:
100052ce:	55                   	push   ebp
100052cf:	57                   	push   edi
100052d0:	56                   	push   esi
100052d1:	53                   	push   ebx
100052d2:	83 ec 18             	sub    esp,0x18
100052d5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100052d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
100052dd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
100052e1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100052e5:	53                   	push   ebx
100052e6:	e8 fc ff ff ff       	call   100052e7 <NIWindow::changeContext(NIContext*, int, int)+0x19>	100052e7: R_386_PC32	NIWindow::invalidate()
100052eb:	89 33                	mov    DWORD PTR [ebx],esi
100052ed:	89 ab 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ebp
100052f3:	89 bb 68 01 00 00    	mov    DWORD PTR [ebx+0x168],edi
100052f9:	83 c4 10             	add    esp,0x10
100052fc:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
10005302:	83 f8 08             	cmp    eax,0x8
10005305:	7f 09                	jg     10005310 <NIWindow::changeContext(NIContext*, int, int)+0x42>
10005307:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
1000530e:	eb 15                	jmp    10005325 <NIWindow::changeContext(NIContext*, int, int)+0x57>
10005310:	83 f8 10             	cmp    eax,0x10
10005313:	7f 09                	jg     1000531e <NIWindow::changeContext(NIContext*, int, int)+0x50>
10005315:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
1000531c:	eb 07                	jmp    10005325 <NIWindow::changeContext(NIContext*, int, int)+0x57>
1000531e:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
10005325:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10005329:	83 c4 0c             	add    esp,0xc
1000532c:	5b                   	pop    ebx
1000532d:	5e                   	pop    esi
1000532e:	5f                   	pop    edi
1000532f:	5d                   	pop    ebp
10005330:	e9 9b fe ff ff       	jmp    100051d0 <NIWindow::rerender()>
10005335:	90                   	nop

10005336 <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
10005336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000533a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000533e:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
10005345:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
1000534b:	c7 80 88 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x188],0x0
10005355:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10005359:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
10005360:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10005366:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
10005370:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
1000537a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10005381:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10005388:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
1000538f:	e9 3a ff ff ff       	jmp    100052ce <NIWindow::changeContext(NIContext*, int, int)>

10005394 <NIWindow::request()>:
10005394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10005398:	80 b8 58 01 00 00 00 	cmp    BYTE PTR [eax+0x158],0x0
1000539f:	75 05                	jne    100053a6 <NIWindow::request()+0x12>
100053a1:	e9 2a fe ff ff       	jmp    100051d0 <NIWindow::rerender()>
100053a6:	c3                   	ret    
100053a7:	90                   	nop

100053a8 <NIWindow::SHADOW_TEST()>:
100053a8:	55                   	push   ebp
100053a9:	57                   	push   edi
100053aa:	56                   	push   esi
100053ab:	53                   	push   ebx
100053ac:	83 ec 28             	sub    esp,0x28
100053af:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
100053b3:	53                   	push   ebx
100053b4:	e8 fc ff ff ff       	call   100053b5 <NIWindow::SHADOW_TEST()+0xd>	100053b5: R_386_PC32	NIWindow::request()
100053b9:	83 c4 10             	add    esp,0x10
100053bc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
100053c2:	39 83 5c 01 00 00    	cmp    DWORD PTR [ebx+0x15c],eax
100053c8:	74 10                	je     100053da <NIWindow::SHADOW_TEST()+0x32>
100053ca:	83 ec 0c             	sub    esp,0xc
100053cd:	68 18 5b 00 10       	push   0x10005b18	100053ce: R_386_32	.text
100053d2:	e8 fc ff ff ff       	call   100053d3 <NIWindow::SHADOW_TEST()+0x2b>	100053d3: R_386_PC32	KePanic(char const*)
100053d7:	83 c4 10             	add    esp,0x10
100053da:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
100053de:	0f 85 3a 01 00 00    	jne    1000551e <NIWindow::SHADOW_TEST()+0x176>
100053e4:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
100053ec:	31 ff                	xor    edi,edi
100053ee:	39 bb 70 01 00 00    	cmp    DWORD PTR [ebx+0x170],edi
100053f4:	0f 8e 24 01 00 00    	jle    1000551e <NIWindow::SHADOW_TEST()+0x176>
100053fa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
10005400:	8d 04 b8             	lea    eax,[eax+edi*4]
10005403:	0f b7 30             	movzx  esi,WORD PTR [eax]
10005406:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
1000540a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
1000540e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10005412:	89 34 24             	mov    DWORD PTR [esp],esi
10005415:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
1000541b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
10005421:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
10005425:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
10005428:	0f 8e da 00 00 00    	jle    10005508 <NIWindow::SHADOW_TEST()+0x160>
1000542e:	83 ff 05             	cmp    edi,0x5
10005431:	7e 1f                	jle    10005452 <NIWindow::SHADOW_TEST()+0xaa>
10005433:	8d 41 fb             	lea    eax,[ecx-0x5]
10005436:	39 f8                	cmp    eax,edi
10005438:	7e 18                	jle    10005452 <NIWindow::SHADOW_TEST()+0xaa>
1000543a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000543e:	83 c0 05             	add    eax,0x5
10005441:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10005444:	7d 0c                	jge    10005452 <NIWindow::SHADOW_TEST()+0xaa>
10005446:	8d 45 fb             	lea    eax,[ebp-0x5]
10005449:	3b 04 24             	cmp    eax,DWORD PTR [esp]
1000544c:	0f 8f ae 00 00 00    	jg     10005500 <NIWindow::SHADOW_TEST()+0x158>
10005452:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
10005456:	be ea 01 00 00       	mov    esi,0x1ea
1000545b:	29 f9                	sub    ecx,edi
1000545d:	89 f0                	mov    eax,esi
1000545f:	83 c1 04             	add    ecx,0x4
10005462:	99                   	cdq    
10005463:	f7 f9                	idiv   ecx
10005465:	89 c1                	mov    ecx,eax
10005467:	89 f0                	mov    eax,esi
10005469:	99                   	cdq    
1000546a:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
1000546e:	83 f8 0a             	cmp    eax,0xa
10005471:	7d 05                	jge    10005478 <NIWindow::SHADOW_TEST()+0xd0>
10005473:	b8 0a 00 00 00       	mov    eax,0xa
10005478:	39 c1                	cmp    ecx,eax
1000547a:	7d 02                	jge    1000547e <NIWindow::SHADOW_TEST()+0xd6>
1000547c:	89 c1                	mov    ecx,eax
1000547e:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
10005481:	b8 ea 01 00 00       	mov    eax,0x1ea
10005486:	83 c5 04             	add    ebp,0x4
10005489:	99                   	cdq    
1000548a:	f7 fd                	idiv   ebp
1000548c:	89 c6                	mov    esi,eax
1000548e:	83 f8 0a             	cmp    eax,0xa
10005491:	7d 05                	jge    10005498 <NIWindow::SHADOW_TEST()+0xf0>
10005493:	be 0a 00 00 00       	mov    esi,0xa
10005498:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000549b:	8d 68 05             	lea    ebp,[eax+0x5]
1000549e:	b8 ea 01 00 00       	mov    eax,0x1ea
100054a3:	99                   	cdq    
100054a4:	f7 fd                	idiv   ebp
100054a6:	39 c6                	cmp    esi,eax
100054a8:	7d 02                	jge    100054ac <NIWindow::SHADOW_TEST()+0x104>
100054aa:	89 c6                	mov    esi,eax
100054ac:	89 f0                	mov    eax,esi
100054ae:	89 ca                	mov    edx,ecx
100054b0:	0f af c6             	imul   eax,esi
100054b3:	0f af d1             	imul   edx,ecx
100054b6:	0f af f1             	imul   esi,ecx
100054b9:	01 d0                	add    eax,edx
100054bb:	8d 04 c6             	lea    eax,[esi+eax*8]
100054be:	c1 f8 08             	sar    eax,0x8
100054c1:	83 f8 66             	cmp    eax,0x66
100054c4:	7e 4c                	jle    10005512 <NIWindow::SHADOW_TEST()+0x16a>
100054c6:	8d 50 9a             	lea    edx,[eax-0x66]
100054c9:	d1 fa                	sar    edx,1
100054cb:	8d 42 66             	lea    eax,[edx+0x66]
100054ce:	83 f8 73             	cmp    eax,0x73
100054d1:	7e 3f                	jle    10005512 <NIWindow::SHADOW_TEST()+0x16a>
100054d3:	83 ea 0d             	sub    edx,0xd
100054d6:	c1 fa 02             	sar    edx,0x2
100054d9:	8d 42 73             	lea    eax,[edx+0x73]
100054dc:	83 f8 7f             	cmp    eax,0x7f
100054df:	7f 1f                	jg     10005500 <NIWindow::SHADOW_TEST()+0x158>
100054e1:	50                   	push   eax
100054e2:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
100054e8:	01 f8                	add    eax,edi
100054ea:	50                   	push   eax
100054eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100054ef:	03 83 64 01 00 00    	add    eax,DWORD PTR [ebx+0x164]
100054f5:	50                   	push   eax
100054f6:	ff 33                	push   DWORD PTR [ebx]
100054f8:	e8 fc ff ff ff       	call   100054f9 <NIWindow::SHADOW_TEST()+0x151>	100054f9: R_386_PC32	NIContext::drvDarken4(int, int, int)
100054fd:	83 c4 10             	add    esp,0x10
10005500:	ff 04 24             	inc    DWORD PTR [esp]
10005503:	e9 0d ff ff ff       	jmp    10005415 <NIWindow::SHADOW_TEST()+0x6d>
10005508:	47                   	inc    edi
10005509:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
1000550d:	e9 dc fe ff ff       	jmp    100053ee <NIWindow::SHADOW_TEST()+0x46>
10005512:	83 f8 0a             	cmp    eax,0xa
10005515:	7d ca                	jge    100054e1 <NIWindow::SHADOW_TEST()+0x139>
10005517:	b8 0a 00 00 00       	mov    eax,0xa
1000551c:	eb c3                	jmp    100054e1 <NIWindow::SHADOW_TEST()+0x139>
1000551e:	83 c4 1c             	add    esp,0x1c
10005521:	5b                   	pop    ebx
10005522:	5e                   	pop    esi
10005523:	5f                   	pop    edi
10005524:	5d                   	pop    ebp
10005525:	c3                   	ret    

10005526 <NIWindow::realdraw()>:
10005526:	55                   	push   ebp
10005527:	57                   	push   edi
10005528:	56                   	push   esi
10005529:	53                   	push   ebx
1000552a:	83 ec 18             	sub    esp,0x18
1000552d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10005531:	53                   	push   ebx
10005532:	e8 fc ff ff ff       	call   10005533 <NIWindow::realdraw()+0xd>	10005533: R_386_PC32	NIWindow::request()
10005537:	83 c4 10             	add    esp,0x10
1000553a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10005540:	39 83 5c 01 00 00    	cmp    DWORD PTR [ebx+0x15c],eax
10005546:	74 10                	je     10005558 <NIWindow::realdraw()+0x32>
10005548:	83 ec 0c             	sub    esp,0xc
1000554b:	68 18 5b 00 10       	push   0x10005b18	1000554c: R_386_32	.text
10005550:	e8 fc ff ff ff       	call   10005551 <NIWindow::realdraw()+0x2b>	10005551: R_386_PC32	KePanic(char const*)
10005555:	83 c4 10             	add    esp,0x10
10005558:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
1000555c:	75 55                	jne    100055b3 <NIWindow::realdraw()+0x8d>
1000555e:	31 f6                	xor    esi,esi
10005560:	39 b3 70 01 00 00    	cmp    DWORD PTR [ebx+0x170],esi
10005566:	7e 4b                	jle    100055b3 <NIWindow::realdraw()+0x8d>
10005568:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
1000556e:	8d 04 b0             	lea    eax,[eax+esi*4]
10005571:	0f b7 28             	movzx  ebp,WORD PTR [eax]
10005574:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
10005578:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
1000557e:	89 c2                	mov    edx,eax
10005580:	29 fa                	sub    edx,edi
10005582:	39 ea                	cmp    edx,ebp
10005584:	7e 2a                	jle    100055b0 <NIWindow::realdraw()+0x8a>
10005586:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005589:	0f af c6             	imul   eax,esi
1000558c:	01 e8                	add    eax,ebp
1000558e:	ff 34 82             	push   DWORD PTR [edx+eax*4]
10005591:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10005597:	01 f0                	add    eax,esi
10005599:	50                   	push   eax
1000559a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
100055a0:	01 e8                	add    eax,ebp
100055a2:	45                   	inc    ebp
100055a3:	50                   	push   eax
100055a4:	ff 33                	push   DWORD PTR [ebx]
100055a6:	e8 fc ff ff ff       	call   100055a7 <NIWindow::realdraw()+0x81>	100055a7: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
100055ab:	83 c4 10             	add    esp,0x10
100055ae:	eb c8                	jmp    10005578 <NIWindow::realdraw()+0x52>
100055b0:	46                   	inc    esi
100055b1:	eb ad                	jmp    10005560 <NIWindow::realdraw()+0x3a>
100055b3:	83 c4 0c             	add    esp,0xc
100055b6:	5b                   	pop    ebx
100055b7:	5e                   	pop    esi
100055b8:	5f                   	pop    edi
100055b9:	5d                   	pop    ebp
100055ba:	c3                   	ret    
100055bb:	90                   	nop

100055bc <List<NIWindow*>::insertAtHead(NIWindow*)>:
100055bc:	53                   	push   ebx
100055bd:	83 ec 14             	sub    esp,0x14
100055c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100055c4:	6a 0c                	push   0xc
100055c6:	e8 fc ff ff ff       	call   100055c7 <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	100055c7: R_386_PC32	malloc
100055cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
100055cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100055d6:	89 10                	mov    DWORD PTR [eax],edx
100055d8:	83 c4 10             	add    esp,0x10
100055db:	8b 13                	mov    edx,DWORD PTR [ebx]
100055dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100055e0:	85 d2                	test   edx,edx
100055e2:	74 05                	je     100055e9 <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
100055e4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
100055e7:	eb 03                	jmp    100055ec <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
100055e9:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100055ec:	89 03                	mov    DWORD PTR [ebx],eax
100055ee:	83 c4 08             	add    esp,0x8
100055f1:	5b                   	pop    ebx
100055f2:	c3                   	ret    
100055f3:	90                   	nop

100055f4 <List<NIWindow*>::deleteElement(NIWindow*&)>:
100055f4:	57                   	push   edi
100055f5:	56                   	push   esi
100055f6:	53                   	push   ebx
100055f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100055fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100055ff:	8b 19                	mov    ebx,DWORD PTR [ecx]
10005601:	85 db                	test   ebx,ebx
10005603:	74 5e                	je     10005663 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10005605:	8b 30                	mov    esi,DWORD PTR [eax]
10005607:	89 da                	mov    edx,ebx
10005609:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
1000560c:	8b 3a                	mov    edi,DWORD PTR [edx]
1000560e:	85 c0                	test   eax,eax
10005610:	74 08                	je     1000561a <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10005612:	39 f7                	cmp    edi,esi
10005614:	73 04                	jae    1000561a <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10005616:	89 c2                	mov    edx,eax
10005618:	eb ef                	jmp    10005609 <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
1000561a:	39 f7                	cmp    edi,esi
1000561c:	75 45                	jne    10005663 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
1000561e:	39 d3                	cmp    ebx,edx
10005620:	75 18                	jne    1000563a <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
10005622:	89 01                	mov    DWORD PTR [ecx],eax
10005624:	85 c0                	test   eax,eax
10005626:	75 09                	jne    10005631 <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
10005628:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
1000562f:	eb 1e                	jmp    1000564f <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10005631:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10005638:	eb 15                	jmp    1000564f <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
1000563a:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
1000563d:	85 c0                	test   eax,eax
1000563f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10005642:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10005645:	74 05                	je     1000564c <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
10005647:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
1000564a:	eb 03                	jmp    1000564f <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
1000564c:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
1000564f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
10005657:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
1000565b:	5b                   	pop    ebx
1000565c:	5e                   	pop    esi
1000565d:	5f                   	pop    edi
1000565e:	e9 fc ff ff ff       	jmp    1000565f <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	1000565f: R_386_PC32	operator delete(void*, unsigned long)
10005663:	5b                   	pop    ebx
10005664:	5e                   	pop    esi
10005665:	5f                   	pop    edi
10005666:	c3                   	ret    
10005667:	43                   	inc    ebx
10005668:	3a 2f                	cmp    ch,BYTE PTR [edi]
1000566a:	42                   	inc    edx
1000566b:	61                   	popa   
1000566c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000566d:	61                   	popa   
1000566e:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000566f:	61                   	popa   
10005670:	2f                   	das    
10005671:	49                   	dec    ecx
10005672:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
10005675:	73 2f                	jae    100056a6 <List<NIWindow*>::deleteElement(NIWindow*&)+0xb2>
10005677:	4f                   	dec    edi
10005678:	66 66 69 63 65 2f 6e 	data16 imul sp,WORD PTR [ebx+0x65],0x6e2f
1000567f:	65 77 2e             	gs ja  100056b0 <List<NIWindow*>::deleteElement(NIWindow*&)+0xbc>
10005682:	74 67                	je     100056eb <List<NIWindow*>::deleteElement(NIWindow*&)+0xf7>
10005684:	61                   	popa   
10005685:	00 46 53             	add    BYTE PTR [esi+0x53],al
10005688:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
1000568e:	00 74 67 61          	add    BYTE PTR [edi+eiz*2+0x61],dh
10005692:	6c                   	ins    BYTE PTR es:[edi],dx
10005693:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10005695:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
1000569b:	00 62 72             	add    BYTE PTR [edx+0x72],ah
1000569e:	20 3d 20 25 64 2c    	and    BYTE PTR ds:0x2c642520,bh
100056a4:	20 66 73             	and    BYTE PTR [esi+0x73],ah
100056a7:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
100056ad:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
100056b0:	2f                   	das    
100056b1:	42                   	inc    edx
100056b2:	61                   	popa   
100056b3:	6e                   	outs   dx,BYTE PTR ds:[esi]
100056b4:	61                   	popa   
100056b5:	6e                   	outs   dx,BYTE PTR ds:[esi]
100056b6:	61                   	popa   
100056b7:	2f                   	das    
100056b8:	49                   	dec    ecx
100056b9:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
100056bc:	73 2f                	jae    100056ed <List<NIWindow*>::deleteElement(NIWindow*&)+0xf9>
100056be:	4f                   	dec    edi
100056bf:	66 66 69 63 65 2f 6f 	data16 imul sp,WORD PTR [ebx+0x65],0x6f2f
100056c6:	70 65                	jo     1000572d <List<NIWindow*>::deleteElement(NIWindow*&)+0x139>
100056c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
100056c9:	2e 74 67             	cs je  10005733 <List<NIWindow*>::deleteElement(NIWindow*&)+0x13f>
100056cc:	61                   	popa   
100056cd:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
100056d0:	4e                   	dec    esi
100056d1:	43                   	inc    ebx
100056d2:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
100056d5:	4e                   	dec    esi
100056d6:	32 00                	xor    al,BYTE PTR [eax]
100056d8:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
100056db:	53                   	push   ebx
100056dc:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
100056df:	43                   	inc    ebx
100056e0:	6f                   	outs   dx,DWORD PTR ds:[esi]
100056e1:	6e                   	outs   dx,BYTE PTR ds:[esi]
100056e2:	74 65                	je     10005749 <List<NIWindow*>::deleteElement(NIWindow*&)+0x155>
100056e4:	78 74                	js     1000575a <List<NIWindow*>::deleteElement(NIWindow*&)+0x166>
100056e6:	3a 3a                	cmp    bh,BYTE PTR [edx]
100056e8:	64 72 76             	fs jb  10005761 <List<NIWindow*>::deleteElement(NIWindow*&)+0x16d>
100056eb:	52                   	push   edx
100056ec:	65 6e                	outs   dx,BYTE PTR gs:[esi]
100056ee:	64 65 72 54          	fs gs jb 10005746 <List<NIWindow*>::deleteElement(NIWindow*&)+0x152>
100056f2:	54                   	push   esp
100056f3:	46                   	inc    esi
100056f4:	34 00                	xor    al,0x0
100056f6:	43                   	inc    ebx
100056f7:	3a 2f                	cmp    ch,BYTE PTR [edi]
100056f9:	42                   	inc    edx
100056fa:	61                   	popa   
100056fb:	6e                   	outs   dx,BYTE PTR ds:[esi]
100056fc:	61                   	popa   
100056fd:	6e                   	outs   dx,BYTE PTR ds:[esi]
100056fe:	61                   	popa   
100056ff:	2f                   	das    
10005700:	46                   	inc    esi
10005701:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005702:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005703:	74 73                	je     10005778 <List<NIWindow*>::deleteElement(NIWindow*&)+0x184>
10005705:	2f                   	das    
10005706:	53                   	push   ebx
10005707:	46                   	inc    esi
10005708:	4e                   	dec    esi
10005709:	00 43 41             	add    BYTE PTR [ebx+0x41],al
1000570c:	4e                   	dec    esi
1000570d:	4e                   	dec    esi
1000570e:	4f                   	dec    edi
1000570f:	54                   	push   esp
10005710:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10005714:	44                   	inc    esp
10005715:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10005718:	4e                   	dec    esi
10005719:	54                   	push   esp
1000571a:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
1000571e:	45                   	inc    ebp
1000571f:	43                   	inc    ebx
10005720:	54                   	push   esp
10005721:	4f                   	dec    edi
10005722:	52                   	push   edx
10005723:	59                   	pop    ecx
10005724:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005727:	2f                   	das    
10005728:	42                   	inc    edx
10005729:	61                   	popa   
1000572a:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000572b:	61                   	popa   
1000572c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000572d:	61                   	popa   
1000572e:	2f                   	das    
1000572f:	46                   	inc    esi
10005730:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005731:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005732:	74 73                	je     100057a7 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1b3>
10005734:	2f                   	das    
10005735:	53                   	push   ebx
10005736:	46                   	inc    esi
10005737:	4e                   	dec    esi
10005738:	2f                   	das    
10005739:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
1000573c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000573d:	74 20                	je     1000575f <List<NIWindow*>::deleteElement(NIWindow*&)+0x16b>
1000573f:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
10005746:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
1000574d:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
10005751:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
10005757:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005758:	74 3a                	je     10005794 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1a0>
1000575a:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10005760:	53                   	push   ebx
10005761:	46                   	inc    esi
10005762:	4e                   	dec    esi
10005763:	5f                   	pop    edi
10005764:	52                   	push   edx
10005765:	45                   	inc    ebp
10005766:	53                   	push   ebx
10005767:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
1000576d:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
10005770:	6d                   	ins    DWORD PTR es:[edi],dx
10005771:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005772:	72 79                	jb     100057ed <List<NIWindow*>::deleteElement(NIWindow*&)+0x1f9>
10005774:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
10005777:	6c                   	ins    BYTE PTR es:[edi],dx
10005778:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005779:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
1000577c:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
10005783:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005784:	72 00                	jb     10005786 <List<NIWindow*>::deleteElement(NIWindow*&)+0x192>
10005786:	42                   	inc    edx
10005787:	61                   	popa   
10005788:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
1000578c:	6c                   	ins    BYTE PTR es:[edi],dx
1000578d:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
10005791:	72 6d                	jb     10005800 <_ssfn__compute_huffman_codes::length_dezigzag>
10005793:	61                   	popa   
10005794:	74 00                	je     10005796 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1a2>
10005796:	4e                   	dec    esi
10005797:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005798:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
1000579b:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000579c:	74 20                	je     100057be <List<NIWindow*>::deleteElement(NIWindow*&)+0x1ca>
1000579e:	66 61                	popaw  
100057a0:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
100057a3:	66 6f                	outs   dx,WORD PTR ds:[esi]
100057a5:	75 6e                	jne    10005815 <_ssfn__compute_huffman_codes::length_dezigzag+0x15>
100057a7:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
100057ab:	76 61                	jbe    1000580e <_ssfn__compute_huffman_codes::length_dezigzag+0xe>
100057ad:	6c                   	ins    BYTE PTR es:[edi],dx
100057ae:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
100057b6:	20 76 61             	and    BYTE PTR [esi+0x61],dh
100057b9:	6c                   	ins    BYTE PTR es:[edi],dx
100057ba:	75 65                	jne    10005821 <_ssfn__zdist_extra+0x1>
100057bc:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
100057bf:	76 61                	jbe    10005822 <_ssfn__zdist_extra+0x2>
100057c1:	6c                   	ins    BYTE PTR es:[edi],dx
100057c2:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
100057ca:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
100057cd:	76 61                	jbe    10005830 <_ssfn__zdist_extra+0x10>
100057cf:	6c                   	ins    BYTE PTR es:[edi],dx
100057d0:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
100057d8:	47                   	inc    edi
100057d9:	6c                   	ins    BYTE PTR es:[edi],dx
100057da:	79 70                	jns    1000584c <_ssfn__zdist_extra+0x2c>
100057dc:	68 20 6e 6f 74       	push   0x746f6e20
100057e1:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
100057e4:	75 6e                	jne    10005854 <_ssfn__zdist_extra+0x34>
100057e6:	64 00 66 90          	add    BYTE PTR fs:[esi-0x70],ah
100057ea:	66 90                	xchg   ax,ax
100057ec:	66 90                	xchg   ax,ax
100057ee:	66 90                	xchg   ax,ax
100057f0:	66 90                	xchg   ax,ax
100057f2:	66 90                	xchg   ax,ax
100057f4:	66 90                	xchg   ax,ax
100057f6:	66 90                	xchg   ax,ax
100057f8:	66 90                	xchg   ax,ax
100057fa:	66 90                	xchg   ax,ax
100057fc:	66 90                	xchg   ax,ax
100057fe:	66 90                	xchg   ax,ax

10005800 <_ssfn__compute_huffman_codes::length_dezigzag>:
10005800:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10005810:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

10005820 <_ssfn__zdist_extra>:
	...
10005830:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
10005840:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
10005850:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
10005860:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
10005870:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
10005880:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
10005890:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

100058a0 <_ssfn__zdist_base>:
100058a0:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
100058b0:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
100058c0:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
100058d0:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
100058e0:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
100058f0:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10005900:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10005910:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

10005920 <_ssfn__zlength_extra>:
	...
10005940:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
10005950:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
10005960:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
10005970:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
10005980:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

100059a0 <_ssfn__zlength_base>:
100059a0:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
100059b0:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
100059c0:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
100059d0:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
100059e0:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
100059f0:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10005a00:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10005a10:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
10005a20:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
10005a30:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
10005a40:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
10005a50:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
10005a60:	32 0a 00 43 55 52 53 4f 52 53 3a 20 25 64 0a 00     2..CURSORS: %d..
10005a70:	4e 52 4d 4c 00 57 41 49 54 00 54 4c 44 52 00 54     NRML.WAIT.TLDR.T
10005a80:	45 58 54 00 56 45 52 54 00 48 4f 52 5a 00 48 41     EXT.VERT.HORZ.HA
10005a90:	4e 44 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a 20     ND.CURSOR LOAD: 
10005aa0:	42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b 43 6f 6d     BAD 3..NiLinkCom
10005ab0:	6d 61 6e 64 43 72 65 61 74 65 57 69 6e 64 6f 77     mandCreateWindow
10005ac0:	0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e 64 52     ..NiLinkCommandR
10005ad0:	65 73 75 70 70 6c 79 46 72 61 6d 65 62 75 66 66     esupplyFramebuff
10005ae0:	65 72 0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e     er..NiLinkComman
10005af0:	64 43 6c 65 61 72 46 72 61 6d 65 62 75 66 66 65     dClearFramebuffe
10005b00:	72 0a 00 4e 69 53 79 73 74 65 6d 43 61 6c 6c 48     r..NiSystemCallH
10005b10:	61 6e 64 6c 65 72 0a 00 41 53 53 45 52 54 49 4f     andler..ASSERTIO
10005b20:	4e 20 46 41 49 4c 55 52 45 20 28 41 29 2e 00        N FAILURE (A)..
