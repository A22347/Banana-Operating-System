
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	57                   	push   edi
10000001:	56                   	push   esi
10000002:	53                   	push   ebx
10000003:	83 ec 0c             	sub    esp,0xc
10000006:	68 17 0e 00 10       	push   0x10000e17	10000007: R_386_32	.text
1000000b:	e8 fc ff ff ff       	call   1000000c <start(void*)+0xc>	1000000c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000010:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10000017:	e8 fc ff ff ff       	call   10000018 <start(void*)+0x18>	10000018: R_386_PC32	operator new(unsigned long)
1000001c:	89 c3                	mov    ebx,eax
1000001e:	58                   	pop    eax
1000001f:	5a                   	pop    edx
10000020:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000022: R_386_32	screen
10000026:	53                   	push   ebx
10000027:	e8 fc ff ff ff       	call   10000028 <start(void*)+0x28>	10000028: R_386_PC32	Context::Context(Video*)
1000002c:	c7 04 24 24 00 00 00 	mov    DWORD PTR [esp],0x24
10000033:	e8 fc ff ff ff       	call   10000034 <start(void*)+0x34>	10000034: R_386_PC32	operator new(unsigned long)
10000038:	89 c6                	mov    esi,eax
1000003a:	59                   	pop    ecx
1000003b:	5f                   	pop    edi
1000003c:	53                   	push   ebx
1000003d:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10000040:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10000043:	6a 00                	push   0x0
10000045:	6a 00                	push   0x0
10000047:	50                   	push   eax
10000048:	e8 fc ff ff ff       	call   10000049 <start(void*)+0x49>	10000049: R_386_PC32	Region::Region(int, int, int, int, Context*)
1000004d:	83 c4 14             	add    esp,0x14
10000050:	6a 20                	push   0x20
10000052:	e8 fc ff ff ff       	call   10000053 <start(void*)+0x53>	10000053: R_386_PC32	operator new(unsigned long)
10000057:	5a                   	pop    edx
10000058:	59                   	pop    ecx
10000059:	6a 06                	push   0x6
1000005b:	50                   	push   eax
1000005c:	e8 fc ff ff ff       	call   1000005d <start(void*)+0x5d>	1000005d: R_386_PC32	Brush::Brush(BrushType)
10000061:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000068:	e8 fc ff ff ff       	call   10000069 <start(void*)+0x69>	10000069: R_386_PC32	operator new(unsigned long)
1000006d:	5f                   	pop    edi
1000006e:	5a                   	pop    edx
1000006f:	6a 07                	push   0x7
10000071:	50                   	push   eax
10000072:	e8 fc ff ff ff       	call   10000073 <start(void*)+0x73>	10000073: R_386_PC32	Brush::Brush(BrushType)
10000077:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000007e:	e8 fc ff ff ff       	call   1000007f <start(void*)+0x7f>	1000007f: R_386_PC32	operator new(unsigned long)
10000083:	59                   	pop    ecx
10000084:	5f                   	pop    edi
10000085:	6a 08                	push   0x8
10000087:	50                   	push   eax
10000088:	e8 fc ff ff ff       	call   10000089 <start(void*)+0x89>	10000089: R_386_PC32	Brush::Brush(BrushType)
1000008d:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000094:	e8 fc ff ff ff       	call   10000095 <start(void*)+0x95>	10000095: R_386_PC32	operator new(unsigned long)
10000099:	5a                   	pop    edx
1000009a:	59                   	pop    ecx
1000009b:	6a 0a                	push   0xa
1000009d:	50                   	push   eax
1000009e:	e8 fc ff ff ff       	call   1000009f <start(void*)+0x9f>	1000009f: R_386_PC32	Brush::Brush(BrushType)
100000a3:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000aa:	e8 fc ff ff ff       	call   100000ab <start(void*)+0xab>	100000ab: R_386_PC32	operator new(unsigned long)
100000af:	5f                   	pop    edi
100000b0:	5a                   	pop    edx
100000b1:	6a 09                	push   0x9
100000b3:	50                   	push   eax
100000b4:	e8 fc ff ff ff       	call   100000b5 <start(void*)+0xb5>	100000b5: R_386_PC32	Brush::Brush(BrushType)
100000b9:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000c0:	e8 fc ff ff ff       	call   100000c1 <start(void*)+0xc1>	100000c1: R_386_PC32	operator new(unsigned long)
100000c5:	59                   	pop    ecx
100000c6:	5f                   	pop    edi
100000c7:	6a 0b                	push   0xb
100000c9:	50                   	push   eax
100000ca:	e8 fc ff ff ff       	call   100000cb <start(void*)+0xcb>	100000cb: R_386_PC32	Brush::Brush(BrushType)
100000cf:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000d6:	e8 fc ff ff ff       	call   100000d7 <start(void*)+0xd7>	100000d7: R_386_PC32	operator new(unsigned long)
100000db:	5a                   	pop    edx
100000dc:	59                   	pop    ecx
100000dd:	6a 0c                	push   0xc
100000df:	50                   	push   eax
100000e0:	e8 fc ff ff ff       	call   100000e1 <start(void*)+0xe1>	100000e1: R_386_PC32	Brush::Brush(BrushType)
100000e5:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000ec:	e8 fc ff ff ff       	call   100000ed <start(void*)+0xed>	100000ed: R_386_PC32	operator new(unsigned long)
100000f1:	5f                   	pop    edi
100000f2:	5a                   	pop    edx
100000f3:	6a 0d                	push   0xd
100000f5:	50                   	push   eax
100000f6:	e8 fc ff ff ff       	call   100000f7 <start(void*)+0xf7>	100000f7: R_386_PC32	Brush::Brush(BrushType)
100000fb:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000102:	e8 fc ff ff ff       	call   10000103 <start(void*)+0x103>	10000103: R_386_PC32	operator new(unsigned long)
10000107:	59                   	pop    ecx
10000108:	5f                   	pop    edi
10000109:	6a 0e                	push   0xe
1000010b:	50                   	push   eax
1000010c:	e8 fc ff ff ff       	call   1000010d <start(void*)+0x10d>	1000010d: R_386_PC32	Brush::Brush(BrushType)
10000111:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000118:	e8 fc ff ff ff       	call   10000119 <start(void*)+0x119>	10000119: R_386_PC32	operator new(unsigned long)
1000011d:	5a                   	pop    edx
1000011e:	59                   	pop    ecx
1000011f:	6a 00                	push   0x0
10000121:	50                   	push   eax
10000122:	e8 fc ff ff ff       	call   10000123 <start(void*)+0x123>	10000123: R_386_PC32	Brush::Brush(BrushType)
10000127:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000012e:	e8 fc ff ff ff       	call   1000012f <start(void*)+0x12f>	1000012f: R_386_PC32	operator new(unsigned long)
10000133:	5f                   	pop    edi
10000134:	5a                   	pop    edx
10000135:	6a 04                	push   0x4
10000137:	50                   	push   eax
10000138:	e8 fc ff ff ff       	call   10000139 <start(void*)+0x139>	10000139: R_386_PC32	Brush::Brush(BrushType)
1000013d:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000144:	e8 fc ff ff ff       	call   10000145 <start(void*)+0x145>	10000145: R_386_PC32	operator new(unsigned long)
10000149:	59                   	pop    ecx
1000014a:	5f                   	pop    edi
1000014b:	6a 0f                	push   0xf
1000014d:	50                   	push   eax
1000014e:	e8 fc ff ff ff       	call   1000014f <start(void*)+0x14f>	1000014f: R_386_PC32	Brush::Brush(BrushType)
10000153:	c7 04 24 24 00 00 00 	mov    DWORD PTR [esp],0x24
1000015a:	e8 fc ff ff ff       	call   1000015b <start(void*)+0x15b>	1000015b: R_386_PC32	operator new(unsigned long)
1000015f:	89 c7                	mov    edi,eax
10000161:	58                   	pop    eax
10000162:	5a                   	pop    edx
10000163:	53                   	push   ebx
10000164:	68 c8 00 00 00       	push   0xc8
10000169:	68 2c 01 00 00       	push   0x12c
1000016e:	6a 0a                	push   0xa
10000170:	6a 0a                	push   0xa
10000172:	57                   	push   edi
10000173:	e8 fc ff ff ff       	call   10000174 <start(void*)+0x174>	10000174: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000178:	83 c4 18             	add    esp,0x18
1000017b:	57                   	push   edi
1000017c:	56                   	push   esi
1000017d:	e8 fc ff ff ff       	call   1000017e <start(void*)+0x17e>	1000017e: R_386_PC32	GDO::addChild(GDO*)
10000182:	c7 04 24 24 00 00 00 	mov    DWORD PTR [esp],0x24
10000189:	e8 fc ff ff ff       	call   1000018a <start(void*)+0x18a>	1000018a: R_386_PC32	operator new(unsigned long)
1000018e:	89 c7                	mov    edi,eax
10000190:	59                   	pop    ecx
10000191:	58                   	pop    eax
10000192:	53                   	push   ebx
10000193:	68 2c 01 00 00       	push   0x12c
10000198:	68 c8 00 00 00       	push   0xc8
1000019d:	6a 64                	push   0x64
1000019f:	68 c8 00 00 00       	push   0xc8
100001a4:	57                   	push   edi
100001a5:	e8 fc ff ff ff       	call   100001a6 <start(void*)+0x1a6>	100001a6: R_386_PC32	Region::Region(int, int, int, int, Context*)
100001aa:	83 c4 18             	add    esp,0x18
100001ad:	57                   	push   edi
100001ae:	56                   	push   esi
100001af:	e8 fc ff ff ff       	call   100001b0 <start(void*)+0x1b0>	100001b0: R_386_PC32	GDO::addChild(GDO*)
100001b4:	89 34 24             	mov    DWORD PTR [esp],esi
100001b7:	e8 fc ff ff ff       	call   100001b8 <start(void*)+0x1b8>	100001b8: R_386_PC32	GDO::update()
100001bc:	83 c4 10             	add    esp,0x10
100001bf:	83 ec 0c             	sub    esp,0xc
100001c2:	6a 02                	push   0x2
100001c4:	e8 fc ff ff ff       	call   100001c5 <start(void*)+0x1c5>	100001c5: R_386_PC32	blockTask(TaskState)
100001c9:	eb f1                	jmp    100001bc <start(void*)+0x1bc>

100001cb <begin(void*)>:
100001cb:	83 ec 18             	sub    esp,0x18
100001ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100001d2:	e8 fc ff ff ff       	call   100001d3 <begin(void*)+0x8>	100001d3: R_386_PC32	start(void*)
100001d7:	90                   	nop

100001d8 <Brush::Brush(unsigned int, unsigned int)>:
100001d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100001dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100001e0:	89 10                	mov    DWORD PTR [eax],edx
100001e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100001e6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100001e9:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
100001f0:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
100001f7:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
100001fe:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
10000205:	c3                   	ret    

10000206 <Brush::Brush(BrushType)>:
10000206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000020a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000210:	c7 40 04 ff ff ff ff 	mov    DWORD PTR [eax+0x4],0xffffffff
10000217:	c6 40 10 ff          	mov    BYTE PTR [eax+0x10],0xff
1000021b:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
10000222:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
10000229:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10000230:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10000237:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000023b:	8d 51 ff             	lea    edx,[ecx-0x1]
1000023e:	83 fa 0e             	cmp    edx,0xe
10000241:	0f 87 ae 00 00 00    	ja     100002f5 <Brush::Brush(BrushType)+0xef>
10000247:	ff 24 95 2c 0e 00 10 	jmp    DWORD PTR [edx*4+0x10000e2c]	1000024a: R_386_32	.text
1000024e:	c7 00 aa aa aa 00    	mov    DWORD PTR [eax],0xaaaaaa
10000254:	c3                   	ret    
10000255:	c7 00 80 80 80 00    	mov    DWORD PTR [eax],0x808080
1000025b:	c3                   	ret    
1000025c:	c7 00 55 55 55 00    	mov    DWORD PTR [eax],0x555555
10000262:	c3                   	ret    
10000263:	c7 00 ff ff ff 00    	mov    DWORD PTR [eax],0xffffff
10000269:	c3                   	ret    
1000026a:	c6 40 10 00          	mov    BYTE PTR [eax+0x10],0x0
1000026e:	c3                   	ret    
1000026f:	c7 40 10 01 08 04 02 	mov    DWORD PTR [eax+0x10],0x2040801
10000276:	eb 6f                	jmp    100002e7 <Brush::Brush(BrushType)+0xe1>
10000278:	c7 40 10 01 02 04 08 	mov    DWORD PTR [eax+0x10],0x8040201
1000027f:	eb 66                	jmp    100002e7 <Brush::Brush(BrushType)+0xe1>
10000281:	c7 40 10 01 01 01 0f 	mov    DWORD PTR [eax+0x10],0xf010101
10000288:	eb 5d                	jmp    100002e7 <Brush::Brush(BrushType)+0xe1>
1000028a:	c7 40 10 08 14 22 01 	mov    DWORD PTR [eax+0x10],0x1221408
10000291:	66 c7 40 14 22 14    	mov    WORD PTR [eax+0x14],0x1422
10000297:	c7 40 18 06 00 00 00 	mov    DWORD PTR [eax+0x18],0x6
1000029e:	c7 40 1c 06 00 00 00 	mov    DWORD PTR [eax+0x1c],0x6
100002a5:	c3                   	ret    
100002a6:	c7 40 10 00 00 00 01 	mov    DWORD PTR [eax+0x10],0x1000000
100002ad:	eb 3f                	jmp    100002ee <Brush::Brush(BrushType)+0xe8>
100002af:	c6 40 10 02          	mov    BYTE PTR [eax+0x10],0x2
100002b3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
100002ba:	c3                   	ret    
100002bb:	66 c7 40 10 02 01    	mov    WORD PTR [eax+0x10],0x102
100002c1:	eb 0e                	jmp    100002d1 <Brush::Brush(BrushType)+0xcb>
100002c3:	66 c7 40 10 02 00    	mov    WORD PTR [eax+0x10],0x2
100002c9:	eb 06                	jmp    100002d1 <Brush::Brush(BrushType)+0xcb>
100002cb:	66 c7 40 10 03 02    	mov    WORD PTR [eax+0x10],0x203
100002d1:	c7 40 18 02 00 00 00 	mov    DWORD PTR [eax+0x18],0x2
100002d8:	c7 40 1c 02 00 00 00 	mov    DWORD PTR [eax+0x1c],0x2
100002df:	c3                   	ret    
100002e0:	c7 40 10 0c 0c 03 03 	mov    DWORD PTR [eax+0x10],0x3030c0c
100002e7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
100002ee:	c7 40 1c 04 00 00 00 	mov    DWORD PTR [eax+0x1c],0x4
100002f5:	c3                   	ret    

100002f6 <CRect::CRect()>:
100002f6:	c3                   	ret    
100002f7:	90                   	nop

100002f8 <CRect::CRect(int, int, int, int)>:
100002f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100002fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000300:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10000303:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000307:	89 10                	mov    DWORD PTR [eax],edx
10000309:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000030d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10000310:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000314:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000317:	c3                   	ret    

10000318 <Context::Context(Video*)>:
10000318:	53                   	push   ebx
10000319:	83 ec 14             	sub    esp,0x14
1000031c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000324:	89 03                	mov    DWORD PTR [ebx],eax
10000326:	50                   	push   eax
10000327:	e8 fc ff ff ff       	call   10000328 <Context::Context(Video*)+0x10>	10000328: R_386_PC32	Video::getWidth()
1000032c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000032f:	58                   	pop    eax
10000330:	ff 33                	push   DWORD PTR [ebx]
10000332:	e8 fc ff ff ff       	call   10000333 <Context::Context(Video*)+0x1b>	10000333: R_386_PC32	Video::getHeight()
10000337:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
1000033a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
10000341:	e8 fc ff ff ff       	call   10000342 <Context::Context(Video*)+0x2a>	10000342: R_386_PC32	malloc
10000346:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000034d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000353:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10000356:	83 c4 18             	add    esp,0x18
10000359:	5b                   	pop    ebx
1000035a:	c3                   	ret    
1000035b:	90                   	nop

1000035c <Context::clippedRect(int, int, int, int, CRect*, Brush*)>:
1000035c:	c3                   	ret    
1000035d:	90                   	nop

1000035e <Context::clippedRect(int, int, int, int, CRect*, unsigned int)>:
1000035e:	55                   	push   ebp
1000035f:	57                   	push   edi
10000360:	56                   	push   esi
10000361:	53                   	push   ebx
10000362:	83 ec 1c             	sub    esp,0x1c
10000365:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
10000369:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
1000036d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10000371:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10000375:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
10000379:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
1000037d:	01 f1                	add    ecx,esi
1000037f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10000383:	01 c3                	add    ebx,eax
10000385:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000389:	8b 1a                	mov    ebx,DWORD PTR [edx]
1000038b:	39 f3                	cmp    ebx,esi
1000038d:	7d 02                	jge    10000391 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x33>
1000038f:	89 f3                	mov    ebx,esi
10000391:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
10000394:	39 c6                	cmp    esi,eax
10000396:	7d 02                	jge    1000039a <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x3c>
10000398:	89 c6                	mov    esi,eax
1000039a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
1000039d:	40                   	inc    eax
1000039e:	39 c8                	cmp    eax,ecx
100003a0:	7e 02                	jle    100003a4 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x46>
100003a2:	89 c8                	mov    eax,ecx
100003a4:	29 d8                	sub    eax,ebx
100003a6:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
100003a9:	42                   	inc    edx
100003aa:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
100003ae:	7e 04                	jle    100003b4 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x56>
100003b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100003b4:	29 f2                	sub    edx,esi
100003b6:	83 ec 0c             	sub    esp,0xc
100003b9:	52                   	push   edx
100003ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
100003be:	50                   	push   eax
100003bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100003c3:	56                   	push   esi
100003c4:	53                   	push   ebx
100003c5:	68 68 0e 00 10       	push   0x10000e68	100003c6: R_386_32	.text
100003ca:	e8 fc ff ff ff       	call   100003cb <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x6d>	100003cb: R_386_PC32	Dbg::kprintf(char const*, ...)
100003cf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
100003d2:	8b 29                	mov    ebp,DWORD PTR [ecx]
100003d4:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
100003d8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
100003dc:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
100003e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100003e4:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
100003e8:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
100003ec:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
100003f0:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
100003f4:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
100003f7:	83 c4 3c             	add    esp,0x3c
100003fa:	5b                   	pop    ebx
100003fb:	5e                   	pop    esi
100003fc:	5f                   	pop    edi
100003fd:	5d                   	pop    ebp
100003fe:	ff e0                	jmp    eax

10000400 <Context::fillRect(int, int, int, int, Brush*)>:
10000400:	c3                   	ret    
10000401:	90                   	nop

10000402 <Context::fillRect(int, int, int, int, unsigned int)>:
10000402:	55                   	push   ebp
10000403:	57                   	push   edi
10000404:	56                   	push   esi
10000405:	53                   	push   ebx
10000406:	83 ec 2c             	sub    esp,0x2c
10000409:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
1000040d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10000411:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
10000415:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10000419:	01 d8                	add    eax,ebx
1000041b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000041f:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10000423:	01 fa                	add    edx,edi
10000425:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
10000428:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
1000042b:	85 db                	test   ebx,ebx
1000042d:	79 02                	jns    10000431 <Context::fillRect(int, int, int, int, unsigned int)+0x2f>
1000042f:	31 db                	xor    ebx,ebx
10000431:	85 ff                	test   edi,edi
10000433:	79 02                	jns    10000437 <Context::fillRect(int, int, int, int, unsigned int)+0x35>
10000435:	31 ff                	xor    edi,edi
10000437:	89 e9                	mov    ecx,ebp
10000439:	3b 6c 24 04          	cmp    ebp,DWORD PTR [esp+0x4]
1000043d:	7e 04                	jle    10000443 <Context::fillRect(int, int, int, int, unsigned int)+0x41>
1000043f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000443:	29 d9                	sub    ecx,ebx
10000445:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
10000449:	89 c1                	mov    ecx,eax
1000044b:	39 d0                	cmp    eax,edx
1000044d:	7e 02                	jle    10000451 <Context::fillRect(int, int, int, int, unsigned int)+0x4f>
1000044f:	89 d1                	mov    ecx,edx
10000451:	29 f9                	sub    ecx,edi
10000453:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
10000457:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
1000045a:	8b 0a                	mov    ecx,DWORD PTR [edx]
1000045c:	31 d2                	xor    edx,edx
1000045e:	85 c9                	test   ecx,ecx
10000460:	74 06                	je     10000468 <Context::fillRect(int, int, int, int, unsigned int)+0x66>
10000462:	42                   	inc    edx
10000463:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10000466:	eb f6                	jmp    1000045e <Context::fillRect(int, int, int, int, unsigned int)+0x5c>
10000468:	85 d2                	test   edx,edx
1000046a:	0f 84 91 00 00 00    	je     10000501 <Context::fillRect(int, int, int, int, unsigned int)+0xff>
10000470:	31 ed                	xor    ebp,ebp
10000472:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
10000475:	8b 10                	mov    edx,DWORD PTR [eax]
10000477:	31 c0                	xor    eax,eax
10000479:	85 d2                	test   edx,edx
1000047b:	74 06                	je     10000483 <Context::fillRect(int, int, int, int, unsigned int)+0x81>
1000047d:	40                   	inc    eax
1000047e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
10000481:	eb f6                	jmp    10000479 <Context::fillRect(int, int, int, int, unsigned int)+0x77>
10000483:	39 c5                	cmp    ebp,eax
10000485:	0f 8d af 00 00 00    	jge    1000053a <Context::fillRect(int, int, int, int, unsigned int)+0x138>
1000048b:	52                   	push   edx
1000048c:	52                   	push   edx
1000048d:	55                   	push   ebp
1000048e:	68 80 0e 00 10       	push   0x10000e80	1000048f: R_386_32	.text
10000493:	e8 fc ff ff ff       	call   10000494 <Context::fillRect(int, int, int, int, unsigned int)+0x92>	10000494: R_386_PC32	Dbg::kprintf(char const*, ...)
10000498:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
1000049b:	8b 00                	mov    eax,DWORD PTR [eax]
1000049d:	83 c4 10             	add    esp,0x10
100004a0:	89 c1                	mov    ecx,eax
100004a2:	31 d2                	xor    edx,edx
100004a4:	85 c9                	test   ecx,ecx
100004a6:	74 06                	je     100004ae <Context::fillRect(int, int, int, int, unsigned int)+0xac>
100004a8:	42                   	inc    edx
100004a9:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
100004ac:	eb f6                	jmp    100004a4 <Context::fillRect(int, int, int, int, unsigned int)+0xa2>
100004ae:	39 d5                	cmp    ebp,edx
100004b0:	7f 0c                	jg     100004be <Context::fillRect(int, int, int, int, unsigned int)+0xbc>
100004b2:	89 ea                	mov    edx,ebp
100004b4:	85 d2                	test   edx,edx
100004b6:	74 06                	je     100004be <Context::fillRect(int, int, int, int, unsigned int)+0xbc>
100004b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100004bb:	4a                   	dec    edx
100004bc:	eb f6                	jmp    100004b4 <Context::fillRect(int, int, int, int, unsigned int)+0xb2>
100004be:	8b 00                	mov    eax,DWORD PTR [eax]
100004c0:	83 ec 0c             	sub    esp,0xc
100004c3:	ff 70 04             	push   DWORD PTR [eax+0x4]
100004c6:	ff 30                	push   DWORD PTR [eax]
100004c8:	ff 70 0c             	push   DWORD PTR [eax+0xc]
100004cb:	ff 70 08             	push   DWORD PTR [eax+0x8]
100004ce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100004d2:	68 9d 0e 00 10       	push   0x10000e9d	100004d3: R_386_32	.text
100004d7:	e8 fc ff ff ff       	call   100004d8 <Context::fillRect(int, int, int, int, unsigned int)+0xd6>	100004d8: R_386_PC32	Dbg::kprintf(char const*, ...)
100004dc:	83 c4 1c             	add    esp,0x1c
100004df:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100004e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100004e7:	50                   	push   eax
100004e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100004ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100004f0:	57                   	push   edi
100004f1:	53                   	push   ebx
100004f2:	56                   	push   esi
100004f3:	e8 fc ff ff ff       	call   100004f4 <Context::fillRect(int, int, int, int, unsigned int)+0xf2>	100004f4: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
100004f8:	45                   	inc    ebp
100004f9:	83 c4 20             	add    esp,0x20
100004fc:	e9 71 ff ff ff       	jmp    10000472 <Context::fillRect(int, int, int, int, unsigned int)+0x70>
10000501:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
10000509:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10000511:	48                   	dec    eax
10000512:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000516:	8d 45 ff             	lea    eax,[ebp-0x1]
10000519:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000051d:	50                   	push   eax
1000051e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10000522:	8d 44 24 18          	lea    eax,[esp+0x18]
10000526:	50                   	push   eax
10000527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000052b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000052f:	57                   	push   edi
10000530:	53                   	push   ebx
10000531:	56                   	push   esi
10000532:	e8 fc ff ff ff       	call   10000533 <Context::fillRect(int, int, int, int, unsigned int)+0x131>	10000533: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
10000537:	83 c4 20             	add    esp,0x20
1000053a:	83 ec 0c             	sub    esp,0xc
1000053d:	68 b1 0e 00 10       	push   0x10000eb1	1000053e: R_386_32	.text
10000542:	e8 fc ff ff ff       	call   10000543 <Context::fillRect(int, int, int, int, unsigned int)+0x141>	10000543: R_386_PC32	Dbg::kprintf(char const*, ...)
10000547:	83 c4 3c             	add    esp,0x3c
1000054a:	5b                   	pop    ebx
1000054b:	5e                   	pop    esi
1000054c:	5f                   	pop    edi
1000054d:	5d                   	pop    ebp
1000054e:	c3                   	ret    
1000054f:	90                   	nop

10000550 <Context::drawHorizontalLine(int, int, int, unsigned int)>:
10000550:	83 ec 14             	sub    esp,0x14
10000553:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000557:	6a 01                	push   0x1
10000559:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000055d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000561:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000565:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000569:	e8 fc ff ff ff       	call   1000056a <Context::drawHorizontalLine(int, int, int, unsigned int)+0x1a>	1000056a: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
1000056e:	83 c4 2c             	add    esp,0x2c
10000571:	c3                   	ret    

10000572 <Context::drawVerticalLine(int, int, int, unsigned int)>:
10000572:	83 ec 14             	sub    esp,0x14
10000575:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000579:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000057d:	6a 01                	push   0x1
1000057f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000583:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000587:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000058b:	e8 fc ff ff ff       	call   1000058c <Context::drawVerticalLine(int, int, int, unsigned int)+0x1a>	1000058c: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10000590:	83 c4 2c             	add    esp,0x2c
10000593:	c3                   	ret    

10000594 <Context::drawRect(int, int, int, int, unsigned int)>:
10000594:	55                   	push   ebp
10000595:	57                   	push   edi
10000596:	56                   	push   esi
10000597:	53                   	push   ebx
10000598:	83 ec 28             	sub    esp,0x28
1000059b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
1000059f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
100005a3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
100005a7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
100005ab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100005af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100005b3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
100005b7:	57                   	push   edi
100005b8:	55                   	push   ebp
100005b9:	52                   	push   edx
100005ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
100005be:	56                   	push   esi
100005bf:	53                   	push   ebx
100005c0:	e8 fc ff ff ff       	call   100005c1 <Context::drawRect(int, int, int, int, unsigned int)+0x2d>	100005c1: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
100005c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100005c9:	8d 48 fe             	lea    ecx,[eax-0x2]
100005cc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
100005d0:	8d 42 01             	lea    eax,[edx+0x1]
100005d3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
100005d7:	83 c4 14             	add    esp,0x14
100005da:	57                   	push   edi
100005db:	51                   	push   ecx
100005dc:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100005e0:	50                   	push   eax
100005e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100005e5:	56                   	push   esi
100005e6:	53                   	push   ebx
100005e7:	e8 fc ff ff ff       	call   100005e8 <Context::drawRect(int, int, int, int, unsigned int)+0x54>	100005e8: R_386_PC32	Context::drawVerticalLine(int, int, int, unsigned int)
100005ec:	83 c4 14             	add    esp,0x14
100005ef:	57                   	push   edi
100005f0:	55                   	push   ebp
100005f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100005f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100005f9:	8d 54 02 ff          	lea    edx,[edx+eax*1-0x1]
100005fd:	52                   	push   edx
100005fe:	56                   	push   esi
100005ff:	53                   	push   ebx
10000600:	e8 fc ff ff ff       	call   10000601 <Context::drawRect(int, int, int, int, unsigned int)+0x6d>	10000601: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
10000605:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
10000609:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
1000060d:	89 4c 24 5c          	mov    DWORD PTR [esp+0x5c],ecx
10000611:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10000615:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10000619:	8d 44 2e ff          	lea    eax,[esi+ebp*1-0x1]
1000061d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10000621:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
10000625:	83 c4 3c             	add    esp,0x3c
10000628:	5b                   	pop    ebx
10000629:	5e                   	pop    esi
1000062a:	5f                   	pop    edi
1000062b:	5d                   	pop    ebp
1000062c:	e9 41 ff ff ff       	jmp    10000572 <Context::drawVerticalLine(int, int, int, unsigned int)>
10000631:	90                   	nop

10000632 <CRect::split(CRect*)>:
10000632:	55                   	push   ebp
10000633:	57                   	push   edi
10000634:	56                   	push   esi
10000635:	53                   	push   ebx
10000636:	83 ec 28             	sub    esp,0x28
10000639:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
1000063d:	6a 08                	push   0x8
1000063f:	e8 fc ff ff ff       	call   10000640 <CRect::split(CRect*)+0xe>	10000640: R_386_PC32	malloc
10000644:	89 c3                	mov    ebx,eax
10000646:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000064d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000653:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
10000657:	8b 6a 08             	mov    ebp,DWORD PTR [edx+0x8]
1000065a:	8b 3a                	mov    edi,DWORD PTR [edx]
1000065c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
1000065f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000663:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
10000666:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000066a:	8b 16                	mov    edx,DWORD PTR [esi]
1000066c:	83 c4 10             	add    esp,0x10
1000066f:	39 d7                	cmp    edi,edx
10000671:	7f 36                	jg     100006a9 <CRect::split(CRect*)+0x77>
10000673:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
10000677:	7c 30                	jl     100006a9 <CRect::split(CRect*)+0x77>
10000679:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000067d:	83 ec 0c             	sub    esp,0xc
10000680:	6a 10                	push   0x10
10000682:	e8 fc ff ff ff       	call   10000683 <CRect::split(CRect*)+0x51>	10000683: R_386_PC32	malloc
10000687:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
1000068a:	89 38                	mov    DWORD PTR [eax],edi
1000068c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10000690:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
10000693:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10000697:	4a                   	dec    edx
10000698:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000069b:	59                   	pop    ecx
1000069c:	5f                   	pop    edi
1000069d:	50                   	push   eax
1000069e:	53                   	push   ebx
1000069f:	e8 fc ff ff ff       	call   100006a0 <CRect::split(CRect*)+0x6e>	100006a0: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100006a4:	8b 3e                	mov    edi,DWORD PTR [esi]
100006a6:	83 c4 10             	add    esp,0x10
100006a9:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
100006ac:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
100006b0:	7c 35                	jl     100006e7 <CRect::split(CRect*)+0xb5>
100006b2:	39 d5                	cmp    ebp,edx
100006b4:	7f 31                	jg     100006e7 <CRect::split(CRect*)+0xb5>
100006b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100006ba:	83 ec 0c             	sub    esp,0xc
100006bd:	6a 10                	push   0x10
100006bf:	e8 fc ff ff ff       	call   100006c0 <CRect::split(CRect*)+0x8e>	100006c0: R_386_PC32	malloc
100006c4:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
100006c7:	89 38                	mov    DWORD PTR [eax],edi
100006c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100006cd:	4a                   	dec    edx
100006ce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100006d5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
100006d8:	5d                   	pop    ebp
100006d9:	5a                   	pop    edx
100006da:	50                   	push   eax
100006db:	53                   	push   ebx
100006dc:	e8 fc ff ff ff       	call   100006dd <CRect::split(CRect*)+0xab>	100006dd: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100006e1:	8b 6e 08             	mov    ebp,DWORD PTR [esi+0x8]
100006e4:	83 c4 10             	add    esp,0x10
100006e7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
100006ea:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
100006ee:	7c 3d                	jl     1000072d <CRect::split(CRect*)+0xfb>
100006f0:	39 fa                	cmp    edx,edi
100006f2:	7c 39                	jl     1000072d <CRect::split(CRect*)+0xfb>
100006f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	6a 10                	push   0x10
100006fd:	e8 fc ff ff ff       	call   100006fe <CRect::split(CRect*)+0xcc>	100006fe: R_386_PC32	malloc
10000702:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
10000705:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10000709:	42                   	inc    edx
1000070a:	89 10                	mov    DWORD PTR [eax],edx
1000070c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10000710:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
10000713:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10000717:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
1000071a:	5a                   	pop    edx
1000071b:	59                   	pop    ecx
1000071c:	50                   	push   eax
1000071d:	53                   	push   ebx
1000071e:	e8 fc ff ff ff       	call   1000071f <CRect::split(CRect*)+0xed>	1000071f: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10000723:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000726:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000072a:	83 c4 10             	add    esp,0x10
1000072d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
10000730:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000734:	7c 2e                	jl     10000764 <CRect::split(CRect*)+0x132>
10000736:	39 ee                	cmp    esi,ebp
10000738:	7c 2a                	jl     10000764 <CRect::split(CRect*)+0x132>
1000073a:	83 ec 0c             	sub    esp,0xc
1000073d:	6a 10                	push   0x10
1000073f:	e8 fc ff ff ff       	call   10000740 <CRect::split(CRect*)+0x10e>	10000740: R_386_PC32	malloc
10000744:	46                   	inc    esi
10000745:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
10000748:	89 38                	mov    DWORD PTR [eax],edi
1000074a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
1000074e:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
10000751:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10000755:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000758:	5a                   	pop    edx
10000759:	59                   	pop    ecx
1000075a:	50                   	push   eax
1000075b:	53                   	push   ebx
1000075c:	e8 fc ff ff ff       	call   1000075d <CRect::split(CRect*)+0x12b>	1000075d: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10000761:	83 c4 10             	add    esp,0x10
10000764:	89 d8                	mov    eax,ebx
10000766:	83 c4 1c             	add    esp,0x1c
10000769:	5b                   	pop    ebx
1000076a:	5e                   	pop    esi
1000076b:	5f                   	pop    edi
1000076c:	5d                   	pop    ebp
1000076d:	c3                   	ret    

1000076e <Context::clearClipRects()>:
1000076e:	53                   	push   ebx
1000076f:	83 ec 14             	sub    esp,0x14
10000772:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000776:	68 b7 0e 00 10       	push   0x10000eb7	10000777: R_386_32	.text
1000077b:	e8 fc ff ff ff       	call   1000077c <Context::clearClipRects()+0xe>	1000077c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000780:	83 c4 10             	add    esp,0x10
10000783:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10000786:	8b 08                	mov    ecx,DWORD PTR [eax]
10000788:	89 ca                	mov    edx,ecx
1000078a:	31 c0                	xor    eax,eax
1000078c:	85 d2                	test   edx,edx
1000078e:	74 06                	je     10000796 <Context::clearClipRects()+0x28>
10000790:	40                   	inc    eax
10000791:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
10000794:	eb f6                	jmp    1000078c <Context::clearClipRects()+0x1e>
10000796:	85 c0                	test   eax,eax
10000798:	74 16                	je     100007b0 <Context::clearClipRects()+0x42>
1000079a:	52                   	push   edx
1000079b:	52                   	push   edx
1000079c:	6a 10                	push   0x10
1000079e:	ff 31                	push   DWORD PTR [ecx]
100007a0:	e8 fc ff ff ff       	call   100007a1 <Context::clearClipRects()+0x33>	100007a1: R_386_PC32	operator delete(void*, unsigned long)
100007a5:	59                   	pop    ecx
100007a6:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100007a9:	e8 fc ff ff ff       	call   100007aa <Context::clearClipRects()+0x3c>	100007aa: R_386_PC32	List<CRect*>::deleteHead()
100007ae:	eb d0                	jmp    10000780 <Context::clearClipRects()+0x12>
100007b0:	50                   	push   eax
100007b1:	50                   	push   eax
100007b2:	6a 00                	push   0x0
100007b4:	68 cd 0e 00 10       	push   0x10000ecd	100007b5: R_386_32	.text
100007b9:	e8 fc ff ff ff       	call   100007ba <Context::clearClipRects()+0x4c>	100007ba: R_386_PC32	Dbg::kprintf(char const*, ...)
100007be:	83 c4 18             	add    esp,0x18
100007c1:	5b                   	pop    ebx
100007c2:	c3                   	ret    
100007c3:	90                   	nop

100007c4 <Context::subClipRect(CRect*)>:
100007c4:	55                   	push   ebp
100007c5:	57                   	push   edi
100007c6:	56                   	push   esi
100007c7:	53                   	push   ebx
100007c8:	83 ec 0c             	sub    esp,0xc
100007cb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100007cf:	31 ff                	xor    edi,edi
100007d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100007d5:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
100007d8:	8b 31                	mov    esi,DWORD PTR [ecx]
100007da:	89 f5                	mov    ebp,esi
100007dc:	31 c0                	xor    eax,eax
100007de:	85 ed                	test   ebp,ebp
100007e0:	74 06                	je     100007e8 <Context::subClipRect(CRect*)+0x24>
100007e2:	40                   	inc    eax
100007e3:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
100007e6:	eb f6                	jmp    100007de <Context::subClipRect(CRect*)+0x1a>
100007e8:	39 c7                	cmp    edi,eax
100007ea:	0f 8d 04 01 00 00    	jge    100008f4 <Context::subClipRect(CRect*)+0x130>
100007f0:	89 f0                	mov    eax,esi
100007f2:	31 ed                	xor    ebp,ebp
100007f4:	85 c0                	test   eax,eax
100007f6:	74 06                	je     100007fe <Context::subClipRect(CRect*)+0x3a>
100007f8:	45                   	inc    ebp
100007f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100007fc:	eb f6                	jmp    100007f4 <Context::subClipRect(CRect*)+0x30>
100007fe:	89 f0                	mov    eax,esi
10000800:	39 ef                	cmp    edi,ebp
10000802:	7f 0c                	jg     10000810 <Context::subClipRect(CRect*)+0x4c>
10000804:	89 fd                	mov    ebp,edi
10000806:	85 ed                	test   ebp,ebp
10000808:	74 06                	je     10000810 <Context::subClipRect(CRect*)+0x4c>
1000080a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000080d:	4d                   	dec    ebp
1000080e:	eb f6                	jmp    10000806 <Context::subClipRect(CRect*)+0x42>
10000810:	8b 28                	mov    ebp,DWORD PTR [eax]
10000812:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10000815:	39 55 00             	cmp    DWORD PTR [ebp+0x0],edx
10000818:	7f 17                	jg     10000831 <Context::subClipRect(CRect*)+0x6d>
1000081a:	8b 13                	mov    edx,DWORD PTR [ebx]
1000081c:	39 55 04             	cmp    DWORD PTR [ebp+0x4],edx
1000081f:	7c 10                	jl     10000831 <Context::subClipRect(CRect*)+0x6d>
10000821:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10000824:	39 55 08             	cmp    DWORD PTR [ebp+0x8],edx
10000827:	7f 08                	jg     10000831 <Context::subClipRect(CRect*)+0x6d>
10000829:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000082c:	39 55 0c             	cmp    DWORD PTR [ebp+0xc],edx
1000082f:	7d 03                	jge    10000834 <Context::subClipRect(CRect*)+0x70>
10000831:	47                   	inc    edi
10000832:	eb 9d                	jmp    100007d1 <Context::subClipRect(CRect*)+0xd>
10000834:	39 c6                	cmp    esi,eax
10000836:	75 07                	jne    1000083f <Context::subClipRect(CRect*)+0x7b>
10000838:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
1000083b:	89 11                	mov    DWORD PTR [ecx],edx
1000083d:	eb 19                	jmp    10000858 <Context::subClipRect(CRect*)+0x94>
1000083f:	3b 41 04             	cmp    eax,DWORD PTR [ecx+0x4]
10000842:	75 08                	jne    1000084c <Context::subClipRect(CRect*)+0x88>
10000844:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
10000847:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
1000084a:	eb 0c                	jmp    10000858 <Context::subClipRect(CRect*)+0x94>
1000084c:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
1000084f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10000852:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
10000855:	89 72 08             	mov    DWORD PTR [edx+0x8],esi
10000858:	8b 11                	mov    edx,DWORD PTR [ecx]
1000085a:	85 d2                	test   edx,edx
1000085c:	74 13                	je     10000871 <Context::subClipRect(CRect*)+0xad>
1000085e:	c7 42 08 00 00 00 00 	mov    DWORD PTR [edx+0x8],0x0
10000865:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10000868:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
1000086f:	eb 07                	jmp    10000878 <Context::subClipRect(CRect*)+0xb4>
10000871:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
10000878:	52                   	push   edx
10000879:	52                   	push   edx
1000087a:	6a 0c                	push   0xc
1000087c:	50                   	push   eax
1000087d:	e8 fc ff ff ff       	call   1000087e <Context::subClipRect(CRect*)+0xba>	1000087e: R_386_PC32	operator delete(void*, unsigned long)
10000882:	59                   	pop    ecx
10000883:	5e                   	pop    esi
10000884:	53                   	push   ebx
10000885:	55                   	push   ebp
10000886:	e8 fc ff ff ff       	call   10000887 <Context::subClipRect(CRect*)+0xc3>	10000887: R_386_PC32	CRect::split(CRect*)
1000088b:	89 c6                	mov    esi,eax
1000088d:	5f                   	pop    edi
1000088e:	58                   	pop    eax
1000088f:	6a 10                	push   0x10
10000891:	55                   	push   ebp
10000892:	e8 fc ff ff ff       	call   10000893 <Context::subClipRect(CRect*)+0xcf>	10000893: R_386_PC32	operator delete(void*, unsigned long)
10000897:	83 c4 10             	add    esp,0x10
1000089a:	8b 06                	mov    eax,DWORD PTR [esi]
1000089c:	89 c1                	mov    ecx,eax
1000089e:	31 ff                	xor    edi,edi
100008a0:	85 c9                	test   ecx,ecx
100008a2:	74 06                	je     100008aa <Context::subClipRect(CRect*)+0xe6>
100008a4:	47                   	inc    edi
100008a5:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
100008a8:	eb f6                	jmp    100008a0 <Context::subClipRect(CRect*)+0xdc>
100008aa:	85 ff                	test   edi,edi
100008ac:	74 1c                	je     100008ca <Context::subClipRect(CRect*)+0x106>
100008ae:	8b 28                	mov    ebp,DWORD PTR [eax]
100008b0:	83 ec 0c             	sub    esp,0xc
100008b3:	56                   	push   esi
100008b4:	e8 fc ff ff ff       	call   100008b5 <Context::subClipRect(CRect*)+0xf1>	100008b5: R_386_PC32	List<CRect*>::deleteHead()
100008b9:	59                   	pop    ecx
100008ba:	5f                   	pop    edi
100008bb:	55                   	push   ebp
100008bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100008c0:	ff 70 0c             	push   DWORD PTR [eax+0xc]
100008c3:	e8 fc ff ff ff       	call   100008c4 <Context::subClipRect(CRect*)+0x100>	100008c4: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100008c8:	eb cd                	jmp    10000897 <Context::subClipRect(CRect*)+0xd3>
100008ca:	85 c0                	test   eax,eax
100008cc:	74 14                	je     100008e2 <Context::subClipRect(CRect*)+0x11e>
100008ce:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
100008d1:	52                   	push   edx
100008d2:	52                   	push   edx
100008d3:	6a 0c                	push   0xc
100008d5:	50                   	push   eax
100008d6:	e8 fc ff ff ff       	call   100008d7 <Context::subClipRect(CRect*)+0x113>	100008d7: R_386_PC32	operator delete(void*, unsigned long)
100008db:	89 e8                	mov    eax,ebp
100008dd:	83 c4 10             	add    esp,0x10
100008e0:	eb e8                	jmp    100008ca <Context::subClipRect(CRect*)+0x106>
100008e2:	50                   	push   eax
100008e3:	50                   	push   eax
100008e4:	6a 08                	push   0x8
100008e6:	56                   	push   esi
100008e7:	e8 fc ff ff ff       	call   100008e8 <Context::subClipRect(CRect*)+0x124>	100008e8: R_386_PC32	operator delete(void*, unsigned long)
100008ec:	83 c4 10             	add    esp,0x10
100008ef:	e9 dd fe ff ff       	jmp    100007d1 <Context::subClipRect(CRect*)+0xd>
100008f4:	83 c4 0c             	add    esp,0xc
100008f7:	5b                   	pop    ebx
100008f8:	5e                   	pop    esi
100008f9:	5f                   	pop    edi
100008fa:	5d                   	pop    ebp
100008fb:	c3                   	ret    

100008fc <Context::addClipRect(CRect*)>:
100008fc:	56                   	push   esi
100008fd:	53                   	push   ebx
100008fe:	83 ec 0c             	sub    esp,0xc
10000901:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10000905:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10000909:	56                   	push   esi
1000090a:	53                   	push   ebx
1000090b:	e8 fc ff ff ff       	call   1000090c <Context::addClipRect(CRect*)+0x10>	1000090c: R_386_PC32	Context::subClipRect(CRect*)
10000910:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
10000914:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10000917:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000091b:	83 c4 14             	add    esp,0x14
1000091e:	5b                   	pop    ebx
1000091f:	5e                   	pop    esi
10000920:	e9 fc ff ff ff       	jmp    10000921 <Context::addClipRect(CRect*)+0x25>	10000921: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10000925:	90                   	nop

10000926 <GDO::resetNext()>:
10000926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000092a:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
10000931:	c3                   	ret    

10000932 <GDO::GDO(GDOType, Context*)>:
10000932:	53                   	push   ebx
10000933:	83 ec 08             	sub    esp,0x8
10000936:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000093a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000093e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10000942:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
10000945:	88 03                	mov    BYTE PTR [ebx],al
10000947:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
1000094e:	84 c0                	test   al,al
10000950:	75 26                	jne    10000978 <GDO::GDO(GDOType, Context*)+0x46>
10000952:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
10000959:	83 ec 0c             	sub    esp,0xc
1000095c:	6a 40                	push   0x40
1000095e:	e8 fc ff ff ff       	call   1000095f <GDO::GDO(GDOType, Context*)+0x2d>	1000095f: R_386_PC32	malloc
10000963:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
10000966:	83 c4 10             	add    esp,0x10
10000969:	31 d2                	xor    edx,edx
1000096b:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
10000972:	42                   	inc    edx
10000973:	83 fa 10             	cmp    edx,0x10
10000976:	75 f3                	jne    1000096b <GDO::GDO(GDOType, Context*)+0x39>
10000978:	83 c4 08             	add    esp,0x8
1000097b:	5b                   	pop    ebx
1000097c:	c3                   	ret    
1000097d:	90                   	nop

1000097e <GDO::~GDO()>:
1000097e:	c3                   	ret    
1000097f:	90                   	nop

10000980 <GDO::getChild(int)>:
10000980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000984:	31 c0                	xor    eax,eax
10000986:	81 fa ff 00 00 00    	cmp    edx,0xff
1000098c:	7f 1b                	jg     100009a9 <GDO::getChild(int)+0x29>
1000098e:	89 d1                	mov    ecx,edx
10000990:	c1 e9 04             	shr    ecx,0x4
10000993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000997:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
1000099a:	8b 0c 88             	mov    ecx,DWORD PTR [eax+ecx*4]
1000099d:	31 c0                	xor    eax,eax
1000099f:	85 c9                	test   ecx,ecx
100009a1:	74 06                	je     100009a9 <GDO::getChild(int)+0x29>
100009a3:	83 e2 0f             	and    edx,0xf
100009a6:	8b 04 91             	mov    eax,DWORD PTR [ecx+edx*4]
100009a9:	c3                   	ret    

100009aa <GDO::hasNext()>:
100009aa:	56                   	push   esi
100009ab:	53                   	push   ebx
100009ac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100009b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
100009b3:	3d ff 00 00 00       	cmp    eax,0xff
100009b8:	7f 18                	jg     100009d2 <GDO::hasNext()+0x28>
100009ba:	8d 70 01             	lea    esi,[eax+0x1]
100009bd:	50                   	push   eax
100009be:	53                   	push   ebx
100009bf:	e8 fc ff ff ff       	call   100009c0 <GDO::hasNext()+0x16>	100009c0: R_386_PC32	GDO::getChild(int)
100009c4:	5a                   	pop    edx
100009c5:	59                   	pop    ecx
100009c6:	85 c0                	test   eax,eax
100009c8:	75 04                	jne    100009ce <GDO::hasNext()+0x24>
100009ca:	89 f0                	mov    eax,esi
100009cc:	eb e5                	jmp    100009b3 <GDO::hasNext()+0x9>
100009ce:	b0 01                	mov    al,0x1
100009d0:	eb 02                	jmp    100009d4 <GDO::hasNext()+0x2a>
100009d2:	31 c0                	xor    eax,eax
100009d4:	5b                   	pop    ebx
100009d5:	5e                   	pop    esi
100009d6:	c3                   	ret    
100009d7:	90                   	nop

100009d8 <GDO::getNext()>:
100009d8:	53                   	push   ebx
100009d9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
100009dd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
100009e0:	3d ff 00 00 00       	cmp    eax,0xff
100009e5:	7f 15                	jg     100009fc <GDO::getNext()+0x24>
100009e7:	8d 50 01             	lea    edx,[eax+0x1]
100009ea:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
100009ed:	50                   	push   eax
100009ee:	53                   	push   ebx
100009ef:	e8 fc ff ff ff       	call   100009f0 <GDO::getNext()+0x18>	100009f0: R_386_PC32	GDO::getChild(int)
100009f4:	5a                   	pop    edx
100009f5:	59                   	pop    ecx
100009f6:	85 c0                	test   eax,eax
100009f8:	74 e3                	je     100009dd <GDO::getNext()+0x5>
100009fa:	eb 02                	jmp    100009fe <GDO::getNext()+0x26>
100009fc:	31 c0                	xor    eax,eax
100009fe:	5b                   	pop    ebx
100009ff:	c3                   	ret    

10000a00 <GDO::update()>:
10000a00:	55                   	push   ebp
10000a01:	57                   	push   edi
10000a02:	56                   	push   esi
10000a03:	53                   	push   ebx
10000a04:	83 ec 0c             	sub    esp,0xc
10000a07:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10000a0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
10000a0e:	74 14                	je     10000a24 <GDO::update()+0x24>
10000a10:	c7 44 24 20 f7 0e 00 10 	mov    DWORD PTR [esp+0x20],0x10000ef7	10000a14: R_386_32	.text
10000a18:	83 c4 0c             	add    esp,0xc
10000a1b:	5b                   	pop    ebx
10000a1c:	5e                   	pop    esi
10000a1d:	5f                   	pop    edi
10000a1e:	5d                   	pop    ebp
10000a1f:	e9 fc ff ff ff       	jmp    10000a20 <GDO::update()+0x20>	10000a20: R_386_PC32	Krnl::panic(char const*)
10000a24:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000a27:	52                   	push   edx
10000a28:	52                   	push   edx
10000a29:	68 fe 67 22 00       	push   0x2267fe
10000a2e:	ff 70 08             	push   DWORD PTR [eax+0x8]
10000a31:	ff 70 04             	push   DWORD PTR [eax+0x4]
10000a34:	6a 00                	push   0x0
10000a36:	6a 00                	push   0x0
10000a38:	50                   	push   eax
10000a39:	e8 fc ff ff ff       	call   10000a3a <GDO::update()+0x3a>	10000a3a: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10000a3e:	83 c4 14             	add    esp,0x14
10000a41:	ff 76 04             	push   DWORD PTR [esi+0x4]
10000a44:	e8 fc ff ff ff       	call   10000a45 <GDO::update()+0x45>	10000a45: R_386_PC32	Context::clearClipRects()
10000a49:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
10000a50:	83 c4 10             	add    esp,0x10
10000a53:	83 ec 0c             	sub    esp,0xc
10000a56:	56                   	push   esi
10000a57:	e8 fc ff ff ff       	call   10000a58 <GDO::update()+0x58>	10000a58: R_386_PC32	GDO::hasNext()
10000a5c:	83 c4 10             	add    esp,0x10
10000a5f:	84 c0                	test   al,al
10000a61:	74 76                	je     10000ad9 <GDO::update()+0xd9>
10000a63:	83 ec 0c             	sub    esp,0xc
10000a66:	56                   	push   esi
10000a67:	e8 fc ff ff ff       	call   10000a68 <GDO::update()+0x68>	10000a68: R_386_PC32	GDO::getNext()
10000a6c:	89 c3                	mov    ebx,eax
10000a6e:	83 c4 10             	add    esp,0x10
10000a71:	85 c0                	test   eax,eax
10000a73:	74 de                	je     10000a53 <GDO::update()+0x53>
10000a75:	80 38 00             	cmp    BYTE PTR [eax],0x0
10000a78:	75 d9                	jne    10000a53 <GDO::update()+0x53>
10000a7a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
10000a7d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
10000a80:	83 ec 0c             	sub    esp,0xc
10000a83:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10000a86:	01 c8                	add    eax,ecx
10000a88:	48                   	dec    eax
10000a89:	50                   	push   eax
10000a8a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10000a8d:	01 d0                	add    eax,edx
10000a8f:	48                   	dec    eax
10000a90:	50                   	push   eax
10000a91:	51                   	push   ecx
10000a92:	52                   	push   edx
10000a93:	68 11 0f 00 10       	push   0x10000f11	10000a94: R_386_32	.text
10000a98:	e8 fc ff ff ff       	call   10000a99 <GDO::update()+0x99>	10000a99: R_386_PC32	Dbg::kprintf(char const*, ...)
10000a9d:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
10000aa0:	83 c4 14             	add    esp,0x14
10000aa3:	6a 10                	push   0x10
10000aa5:	e8 fc ff ff ff       	call   10000aa6 <GDO::update()+0xa6>	10000aa6: R_386_PC32	malloc
10000aaa:	89 c7                	mov    edi,eax
10000aac:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10000aaf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10000ab2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
10000ab5:	01 ca                	add    edx,ecx
10000ab7:	4a                   	dec    edx
10000ab8:	89 14 24             	mov    DWORD PTR [esp],edx
10000abb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
10000abe:	01 c2                	add    edx,eax
10000ac0:	4a                   	dec    edx
10000ac1:	52                   	push   edx
10000ac2:	51                   	push   ecx
10000ac3:	50                   	push   eax
10000ac4:	57                   	push   edi
10000ac5:	e8 fc ff ff ff       	call   10000ac6 <GDO::update()+0xc6>	10000ac6: R_386_PC32	CRect::CRect(int, int, int, int)
10000aca:	83 c4 18             	add    esp,0x18
10000acd:	57                   	push   edi
10000ace:	55                   	push   ebp
10000acf:	e8 fc ff ff ff       	call   10000ad0 <GDO::update()+0xd0>	10000ad0: R_386_PC32	Context::addClipRect(CRect*)
10000ad4:	e9 77 ff ff ff       	jmp    10000a50 <GDO::update()+0x50>
10000ad9:	31 ff                	xor    edi,edi
10000adb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000ade:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000ae1:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae3:	89 c1                	mov    ecx,eax
10000ae5:	31 d2                	xor    edx,edx
10000ae7:	85 c9                	test   ecx,ecx
10000ae9:	74 06                	je     10000af1 <GDO::update()+0xf1>
10000aeb:	42                   	inc    edx
10000aec:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10000aef:	eb f6                	jmp    10000ae7 <GDO::update()+0xe7>
10000af1:	39 d7                	cmp    edi,edx
10000af3:	7d 70                	jge    10000b65 <GDO::update()+0x165>
10000af5:	89 c1                	mov    ecx,eax
10000af7:	31 d2                	xor    edx,edx
10000af9:	85 c9                	test   ecx,ecx
10000afb:	74 06                	je     10000b03 <GDO::update()+0x103>
10000afd:	42                   	inc    edx
10000afe:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10000b01:	eb f6                	jmp    10000af9 <GDO::update()+0xf9>
10000b03:	39 d7                	cmp    edi,edx
10000b05:	7f 0c                	jg     10000b13 <GDO::update()+0x113>
10000b07:	89 fa                	mov    edx,edi
10000b09:	85 d2                	test   edx,edx
10000b0b:	74 06                	je     10000b13 <GDO::update()+0x113>
10000b0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000b10:	4a                   	dec    edx
10000b11:	eb f6                	jmp    10000b09 <GDO::update()+0x109>
10000b13:	8b 18                	mov    ebx,DWORD PTR [eax]
10000b15:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10000b18:	8b 13                	mov    edx,DWORD PTR [ebx]
10000b1a:	83 ec 0c             	sub    esp,0xc
10000b1d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10000b20:	29 c8                	sub    eax,ecx
10000b22:	40                   	inc    eax
10000b23:	50                   	push   eax
10000b24:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000b27:	29 d0                	sub    eax,edx
10000b29:	40                   	inc    eax
10000b2a:	50                   	push   eax
10000b2b:	51                   	push   ecx
10000b2c:	52                   	push   edx
10000b2d:	68 27 0f 00 10       	push   0x10000f27	10000b2e: R_386_32	.text
10000b32:	e8 fc ff ff ff       	call   10000b33 <GDO::update()+0x133>	10000b33: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b37:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10000b3a:	8b 13                	mov    edx,DWORD PTR [ebx]
10000b3c:	83 c4 18             	add    esp,0x18
10000b3f:	68 00 00 ff 00       	push   0xff0000
10000b44:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10000b47:	29 c8                	sub    eax,ecx
10000b49:	40                   	inc    eax
10000b4a:	50                   	push   eax
10000b4b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000b4e:	29 d0                	sub    eax,edx
10000b50:	40                   	inc    eax
10000b51:	50                   	push   eax
10000b52:	51                   	push   ecx
10000b53:	52                   	push   edx
10000b54:	ff 76 04             	push   DWORD PTR [esi+0x4]
10000b57:	e8 fc ff ff ff       	call   10000b58 <GDO::update()+0x158>	10000b58: R_386_PC32	Context::drawRect(int, int, int, int, unsigned int)
10000b5c:	47                   	inc    edi
10000b5d:	83 c4 20             	add    esp,0x20
10000b60:	e9 76 ff ff ff       	jmp    10000adb <GDO::update()+0xdb>
10000b65:	83 c4 0c             	add    esp,0xc
10000b68:	5b                   	pop    ebx
10000b69:	5e                   	pop    esi
10000b6a:	5f                   	pop    edi
10000b6b:	5d                   	pop    ebp
10000b6c:	c3                   	ret    
10000b6d:	90                   	nop

10000b6e <GDO::indexOf(GDO*)>:
10000b6e:	56                   	push   esi
10000b6f:	53                   	push   ebx
10000b70:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10000b74:	31 db                	xor    ebx,ebx
10000b76:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
10000b79:	8d 50 01             	lea    edx,[eax+0x1]
10000b7c:	89 56 1c             	mov    DWORD PTR [esi+0x1c],edx
10000b7f:	50                   	push   eax
10000b80:	56                   	push   esi
10000b81:	e8 fc ff ff ff       	call   10000b82 <GDO::indexOf(GDO*)+0x14>	10000b82: R_386_PC32	GDO::getChild(int)
10000b86:	5a                   	pop    edx
10000b87:	59                   	pop    ecx
10000b88:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10000b8c:	74 0c                	je     10000b9a <GDO::indexOf(GDO*)+0x2c>
10000b8e:	43                   	inc    ebx
10000b8f:	81 fb 00 01 00 00    	cmp    ebx,0x100
10000b95:	75 df                	jne    10000b76 <GDO::indexOf(GDO*)+0x8>
10000b97:	83 cb ff             	or     ebx,0xffffffff
10000b9a:	89 d8                	mov    eax,ebx
10000b9c:	5b                   	pop    ebx
10000b9d:	5e                   	pop    esi
10000b9e:	c3                   	ret    
10000b9f:	90                   	nop

10000ba0 <GDO::addChild(GDO*)>:
10000ba0:	55                   	push   ebp
10000ba1:	57                   	push   edi
10000ba2:	56                   	push   esi
10000ba3:	53                   	push   ebx
10000ba4:	83 ec 1c             	sub    esp,0x1c
10000ba7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000bab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000baf:	8b 68 18             	mov    ebp,DWORD PTR [eax+0x18]
10000bb2:	31 c9                	xor    ecx,ecx
10000bb4:	83 cb ff             	or     ebx,0xffffffff
10000bb7:	8b 54 8d 00          	mov    edx,DWORD PTR [ebp+ecx*4+0x0]
10000bbb:	85 d2                	test   edx,edx
10000bbd:	74 1b                	je     10000bda <GDO::addChild(GDO*)+0x3a>
10000bbf:	31 c0                	xor    eax,eax
10000bc1:	83 3a 00             	cmp    DWORD PTR [edx],0x0
10000bc4:	75 09                	jne    10000bcf <GDO::addChild(GDO*)+0x2f>
10000bc6:	89 32                	mov    DWORD PTR [edx],esi
10000bc8:	c1 e1 04             	shl    ecx,0x4
10000bcb:	01 c8                	add    eax,ecx
10000bcd:	eb 5a                	jmp    10000c29 <GDO::addChild(GDO*)+0x89>
10000bcf:	40                   	inc    eax
10000bd0:	83 c2 04             	add    edx,0x4
10000bd3:	83 f8 10             	cmp    eax,0x10
10000bd6:	75 e9                	jne    10000bc1 <GDO::addChild(GDO*)+0x21>
10000bd8:	eb 02                	jmp    10000bdc <GDO::addChild(GDO*)+0x3c>
10000bda:	89 cb                	mov    ebx,ecx
10000bdc:	41                   	inc    ecx
10000bdd:	83 f9 10             	cmp    ecx,0x10
10000be0:	75 d5                	jne    10000bb7 <GDO::addChild(GDO*)+0x17>
10000be2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10000be6:	85 db                	test   ebx,ebx
10000be8:	74 2c                	je     10000c16 <GDO::addChild(GDO*)+0x76>
10000bea:	8d 6c 9d 00          	lea    ebp,[ebp+ebx*4+0x0]
10000bee:	83 ec 0c             	sub    esp,0xc
10000bf1:	6a 40                	push   0x40
10000bf3:	e8 fc ff ff ff       	call   10000bf4 <GDO::addChild(GDO*)+0x54>	10000bf4: R_386_PC32	malloc
10000bf8:	89 c2                	mov    edx,eax
10000bfa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
10000bfd:	31 c0                	xor    eax,eax
10000bff:	89 d7                	mov    edi,edx
10000c01:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10000c05:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000c07:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000c0a:	89 30                	mov    DWORD PTR [eax],esi
10000c0c:	89 d8                	mov    eax,ebx
10000c0e:	c1 e0 04             	shl    eax,0x4
10000c11:	83 c4 10             	add    esp,0x10
10000c14:	eb 13                	jmp    10000c29 <GDO::addChild(GDO*)+0x89>
10000c16:	83 ec 0c             	sub    esp,0xc
10000c19:	68 3d 0f 00 10       	push   0x10000f3d	10000c1a: R_386_32	.text
10000c1e:	e8 fc ff ff ff       	call   10000c1f <GDO::addChild(GDO*)+0x7f>	10000c1f: R_386_PC32	Krnl::panic(char const*)
10000c23:	83 c4 10             	add    esp,0x10
10000c26:	83 c8 ff             	or     eax,0xffffffff
10000c29:	83 c4 1c             	add    esp,0x1c
10000c2c:	5b                   	pop    ebx
10000c2d:	5e                   	pop    esi
10000c2e:	5f                   	pop    edi
10000c2f:	5d                   	pop    ebp
10000c30:	c3                   	ret    
10000c31:	90                   	nop

10000c32 <GDO::removeChild(int)>:
10000c32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000c36:	31 c0                	xor    eax,eax
10000c38:	81 fa ff 00 00 00    	cmp    edx,0xff
10000c3e:	7f 27                	jg     10000c67 <GDO::removeChild(int)+0x35>
10000c40:	89 d1                	mov    ecx,edx
10000c42:	c1 e9 04             	shr    ecx,0x4
10000c45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000c49:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10000c4c:	8b 0c 88             	mov    ecx,DWORD PTR [eax+ecx*4]
10000c4f:	31 c0                	xor    eax,eax
10000c51:	85 c9                	test   ecx,ecx
10000c53:	74 12                	je     10000c67 <GDO::removeChild(int)+0x35>
10000c55:	83 e2 0f             	and    edx,0xf
10000c58:	8d 14 91             	lea    edx,[ecx+edx*4]
10000c5b:	83 3a 00             	cmp    DWORD PTR [edx],0x0
10000c5e:	0f 95 c0             	setne  al
10000c61:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
10000c67:	c3                   	ret    

10000c68 <GDO::removeChild(GDO*)>:
10000c68:	53                   	push   ebx
10000c69:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
10000c6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10000c71:	53                   	push   ebx
10000c72:	e8 fc ff ff ff       	call   10000c73 <GDO::removeChild(GDO*)+0xb>	10000c73: R_386_PC32	GDO::indexOf(GDO*)
10000c77:	5a                   	pop    edx
10000c78:	59                   	pop    ecx
10000c79:	83 f8 ff             	cmp    eax,0xffffffff
10000c7c:	74 0b                	je     10000c89 <GDO::removeChild(GDO*)+0x21>
10000c7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000c82:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000c86:	5b                   	pop    ebx
10000c87:	eb a9                	jmp    10000c32 <GDO::removeChild(int)>
10000c89:	31 c0                	xor    eax,eax
10000c8b:	5b                   	pop    ebx
10000c8c:	c3                   	ret    
10000c8d:	90                   	nop

10000c8e <rectDrawFunc(GDO*)>:
10000c8e:	83 ec 14             	sub    esp,0x14
10000c91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10000c95:	ff 70 18             	push   DWORD PTR [eax+0x18]
10000c98:	ff 70 14             	push   DWORD PTR [eax+0x14]
10000c9b:	ff 70 10             	push   DWORD PTR [eax+0x10]
10000c9e:	ff 70 0c             	push   DWORD PTR [eax+0xc]
10000ca1:	ff 70 08             	push   DWORD PTR [eax+0x8]
10000ca4:	ff 70 04             	push   DWORD PTR [eax+0x4]
10000ca7:	e8 fc ff ff ff       	call   10000ca8 <rectDrawFunc(GDO*)+0x1a>	10000ca8: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10000cac:	83 c4 2c             	add    esp,0x2c
10000caf:	c3                   	ret    

10000cb0 <rectPtnDrawFunc(GDO*)>:
10000cb0:	83 ec 14             	sub    esp,0x14
10000cb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10000cb7:	ff 70 18             	push   DWORD PTR [eax+0x18]
10000cba:	ff 70 14             	push   DWORD PTR [eax+0x14]
10000cbd:	ff 70 10             	push   DWORD PTR [eax+0x10]
10000cc0:	ff 70 0c             	push   DWORD PTR [eax+0xc]
10000cc3:	ff 70 08             	push   DWORD PTR [eax+0x8]
10000cc6:	ff 70 04             	push   DWORD PTR [eax+0x4]
10000cc9:	e8 fc ff ff ff       	call   10000cca <rectPtnDrawFunc(GDO*)+0x1a>	10000cca: R_386_PC32	Context::fillRect(int, int, int, int, Brush*)
10000cce:	83 c4 2c             	add    esp,0x2c
10000cd1:	c3                   	ret    

10000cd2 <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)>:
10000cd2:	53                   	push   ebx
10000cd3:	83 ec 0c             	sub    esp,0xc
10000cd6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10000cda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000cde:	6a 01                	push   0x1
10000ce0:	53                   	push   ebx
10000ce1:	e8 fc ff ff ff       	call   10000ce2 <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)+0x10>	10000ce2: R_386_PC32	GDO::GDO(GDOType, Context*)
10000ce6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10000cea:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10000ced:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000cf1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10000cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10000cf8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000cfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000cff:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10000d02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000d06:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
10000d09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0	10000d0c: R_386_32	rectPtnDrawFunc(GDO*)
10000d10:	83 c4 18             	add    esp,0x18
10000d13:	5b                   	pop    ebx
10000d14:	c3                   	ret    
10000d15:	90                   	nop

10000d16 <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)>:
10000d16:	53                   	push   ebx
10000d17:	83 ec 0c             	sub    esp,0xc
10000d1a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10000d1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000d22:	6a 01                	push   0x1
10000d24:	53                   	push   ebx
10000d25:	e8 fc ff ff ff       	call   10000d26 <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)+0x10>	10000d26: R_386_PC32	GDO::GDO(GDOType, Context*)
10000d2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10000d2e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10000d31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000d35:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10000d38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10000d3c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000d3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000d43:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10000d46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000d4a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
10000d4d:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0	10000d50: R_386_32	rectDrawFunc(GDO*)
10000d54:	83 c4 18             	add    esp,0x18
10000d57:	5b                   	pop    ebx
10000d58:	c3                   	ret    
10000d59:	90                   	nop

10000d5a <regnDrawFunc(GDO*)>:
10000d5a:	c3                   	ret    
10000d5b:	90                   	nop

10000d5c <Region::Region(int, int, int, int, Context*)>:
10000d5c:	53                   	push   ebx
10000d5d:	83 ec 0c             	sub    esp,0xc
10000d60:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10000d64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000d68:	6a 00                	push   0x0
10000d6a:	53                   	push   ebx
10000d6b:	e8 fc ff ff ff       	call   10000d6c <Region::Region(int, int, int, int, Context*)+0x10>	10000d6c: R_386_PC32	GDO::GDO(GDOType, Context*)
10000d70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10000d74:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10000d77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000d7b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10000d7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10000d82:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000d85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000d89:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10000d8c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0	10000d8f: R_386_32	regnDrawFunc(GDO*)
10000d93:	83 c4 18             	add    esp,0x18
10000d96:	5b                   	pop    ebx
10000d97:	c3                   	ret    

10000d98 <List<CRect*>::insertAtTail(CRect*)>:
10000d98:	53                   	push   ebx
10000d99:	83 ec 14             	sub    esp,0x14
10000d9c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000da0:	68 e3 0e 00 10       	push   0x10000ee3	10000da1: R_386_32	.text
10000da5:	e8 fc ff ff ff       	call   10000da6 <List<CRect*>::insertAtTail(CRect*)+0xe>	10000da6: R_386_PC32	Dbg::kprintf(char const*, ...)
10000daa:	c7 04 24 0c 00 00 00 	mov    DWORD PTR [esp],0xc
10000db1:	e8 fc ff ff ff       	call   10000db2 <List<CRect*>::insertAtTail(CRect*)+0x1a>	10000db2: R_386_PC32	malloc
10000db6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10000dba:	89 10                	mov    DWORD PTR [eax],edx
10000dbc:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10000dbf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10000dc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000dc9:	83 c4 10             	add    esp,0x10
10000dcc:	85 d2                	test   edx,edx
10000dce:	74 05                	je     10000dd5 <List<CRect*>::insertAtTail(CRect*)+0x3d>
10000dd0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
10000dd3:	eb 02                	jmp    10000dd7 <List<CRect*>::insertAtTail(CRect*)+0x3f>
10000dd5:	89 03                	mov    DWORD PTR [ebx],eax
10000dd7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10000dda:	83 c4 08             	add    esp,0x8
10000ddd:	5b                   	pop    ebx
10000dde:	c3                   	ret    
10000ddf:	90                   	nop

10000de0 <List<CRect*>::deleteHead()>:
10000de0:	56                   	push   esi
10000de1:	53                   	push   ebx
10000de2:	51                   	push   ecx
10000de3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10000de7:	8b 06                	mov    eax,DWORD PTR [esi]
10000de9:	85 c0                	test   eax,eax
10000deb:	74 26                	je     10000e13 <List<CRect*>::deleteHead()+0x33>
10000ded:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10000df0:	52                   	push   edx
10000df1:	52                   	push   edx
10000df2:	6a 0c                	push   0xc
10000df4:	50                   	push   eax
10000df5:	e8 fc ff ff ff       	call   10000df6 <List<CRect*>::deleteHead()+0x16>	10000df6: R_386_PC32	operator delete(void*, unsigned long)
10000dfa:	89 1e                	mov    DWORD PTR [esi],ebx
10000dfc:	83 c4 10             	add    esp,0x10
10000dff:	85 db                	test   ebx,ebx
10000e01:	75 09                	jne    10000e0c <List<CRect*>::deleteHead()+0x2c>
10000e03:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10000e0a:	eb 07                	jmp    10000e13 <List<CRect*>::deleteHead()+0x33>
10000e0c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10000e13:	58                   	pop    eax
10000e14:	5b                   	pop    ebx
10000e15:	5e                   	pop    esi
10000e16:	c3                   	ret    
10000e17:	43                   	inc    ebx
10000e18:	4c                   	dec    esp
10000e19:	49                   	dec    ecx
10000e1a:	50                   	push   eax
10000e1b:	44                   	inc    esp
10000e1c:	52                   	push   edx
10000e1d:	41                   	inc    ecx
10000e1e:	57                   	push   edi
10000e1f:	20 53 54             	and    BYTE PTR [ebx+0x54],dl
10000e22:	41                   	inc    ecx
10000e23:	52                   	push   edx
10000e24:	54                   	push   esp
10000e25:	45                   	inc    ebp
10000e26:	44                   	inc    esp
10000e27:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000e2a:	66 90                	xchg   ax,ax
10000e2c:	4e                   	dec    esi	10000e2c: R_386_32	.text
10000e2d:	02 00                	add    al,BYTE PTR [eax]
10000e2f:	10 55 02             	adc    BYTE PTR [ebp+0x2],dl	10000e30: R_386_32	.text
10000e32:	00 10                	add    BYTE PTR [eax],dl
10000e34:	5c                   	pop    esp	10000e34: R_386_32	.text
10000e35:	02 00                	add    al,BYTE PTR [eax]
10000e37:	10 63 02             	adc    BYTE PTR [ebx+0x2],ah	10000e38: R_386_32	.text
10000e3a:	00 10                	add    BYTE PTR [eax],dl
10000e3c:	6a 02                	push   0x2	10000e3c: R_386_32	.text
10000e3e:	00 10                	add    BYTE PTR [eax],dl
10000e40:	6f                   	outs   dx,DWORD PTR ds:[esi]	10000e40: R_386_32	.text
10000e41:	02 00                	add    al,BYTE PTR [eax]
10000e43:	10 78 02             	adc    BYTE PTR [eax+0x2],bh	10000e44: R_386_32	.text
10000e46:	00 10                	add    BYTE PTR [eax],dl
10000e48:	81 02 00 10 8a 02    	add    DWORD PTR [edx],0x28a1000	10000e48: R_386_32	.text
	10000e4c: R_386_32	.text
10000e4e:	00 10                	add    BYTE PTR [eax],dl
10000e50:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]	10000e50: R_386_32	.text
10000e51:	02 00                	add    al,BYTE PTR [eax]
10000e53:	10 af 02 00 10 bb    	adc    BYTE PTR [edi-0x44effffe],ch	10000e54: R_386_32	.text
	10000e58: R_386_32	.text
10000e59:	02 00                	add    al,BYTE PTR [eax]
10000e5b:	10 c3                	adc    bl,al	10000e5c: R_386_32	.text
10000e5d:	02 00                	add    al,BYTE PTR [eax]
10000e5f:	10 cb                	adc    bl,cl	10000e60: R_386_32	.text
10000e61:	02 00                	add    al,BYTE PTR [eax]
10000e63:	10 e0                	adc    al,ah	10000e64: R_386_32	.text
10000e65:	02 00                	add    al,BYTE PTR [eax]
10000e67:	10 63 6c             	adc    BYTE PTR [ebx+0x6c],ah
10000e6a:	69 70 70 65 64 20 25 	imul   esi,DWORD PTR [eax+0x70],0x25206465
10000e71:	64 2c 20             	fs sub al,0x20
10000e74:	25 64 2c 20 25       	and    eax,0x25202c64
10000e79:	64 2c 20             	fs sub al,0x20
10000e7c:	25 64 0a 00 66       	and    eax,0x66000a64
10000e81:	69 6c 6c 72 65 63 74 20 	imul   ebp,DWORD PTR [esp+ebp*2+0x72],0x20746365
10000e89:	66 6f                	outs   dx,WORD PTR ds:[esi]
10000e8b:	75 6e                	jne    10000efb <List<CRect*>::deleteHead()+0x11b>
10000e8d:	64 20 63 6c          	and    BYTE PTR fs:[ebx+0x6c],ah
10000e91:	69 70 72 65 63 74 2e 	imul   esi,DWORD PTR [eax+0x72],0x2e746365
10000e98:	20 25 64 0a 00 2d    	and    BYTE PTR ds:0x2d000a64,ah
10000e9e:	2d 3e 20 25 64       	sub    eax,0x6425203e
10000ea3:	2c 20                	sub    al,0x20
10000ea5:	25 64 2c 20 25       	and    eax,0x25202c64
10000eaa:	64 2c 20             	fs sub al,0x20
10000ead:	25 64 0a 00 2e       	and    eax,0x2e000a64
10000eb2:	2e 2e 0a 0a          	cs or  cl,BYTE PTR cs:[edx]
10000eb6:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
10000eb9:	65 61                	gs popa 
10000ebb:	72 69                	jb     10000f26 <List<CRect*>::deleteHead()+0x146>
10000ebd:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000ebe:	67 20 63 6c          	and    BYTE PTR [bp+di+0x6c],ah
10000ec2:	69 70 20 72 65 63 74 	imul   esi,DWORD PTR [eax+0x20],0x74636572
10000ec9:	73 2e                	jae    10000ef9 <List<CRect*>::deleteHead()+0x119>
10000ecb:	0a 00                	or     al,BYTE PTR [eax]
10000ecd:	43                   	inc    ebx
10000ece:	6c                   	ins    BYTE PTR es:[edi],dx
10000ecf:	65 61                	gs popa 
10000ed1:	72 65                	jb     10000f38 <List<CRect*>::deleteHead()+0x158>
10000ed3:	64 2e 20 6c 65 6e    	fs and BYTE PTR cs:[ebp+eiz*2+0x6e],ch
10000ed9:	67 74 68             	addr16 je 10000f44 <List<CRect*>::deleteHead()+0x164>
10000edc:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10000ee2:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
10000ee5:	73 65                	jae    10000f4c <List<CRect*>::deleteHead()+0x16c>
10000ee7:	72 74                	jb     10000f5d <List<CRect*>::deleteHead()+0x17d>
10000ee9:	69 6e 67 20 61 74 20 	imul   ebp,DWORD PTR [esi+0x67],0x20746120
10000ef0:	74 61                	je     10000f53 <List<CRect*>::deleteHead()+0x173>
10000ef2:	69 6c 2e 0a 00 47 44 4f 	imul   ebp,DWORD PTR [esi+ebp*1+0xa],0x4f444700
10000efa:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000efc:	75 70                	jne    10000f6e <_DYNAMIC+0xe>
10000efe:	64 61                	fs popa 
10000f00:	74 65                	je     10000f67 <_DYNAMIC+0x7>
10000f02:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
10000f05:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10000f08:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000f09:	2d 72 65 67 69       	sub    eax,0x69676572
10000f0e:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000f0f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000f10:	00 52 52             	add    BYTE PTR [edx+0x52],dl
10000f13:	52                   	push   edx
10000f14:	52                   	push   edx
10000f15:	3a 20                	cmp    ah,BYTE PTR [eax]
10000f17:	25 64 2c 20 25       	and    eax,0x25202c64
10000f1c:	64 2c 20             	fs sub al,0x20
10000f1f:	25 64 2c 20 25       	and    eax,0x25202c64
10000f24:	64 0a 00             	or     al,BYTE PTR fs:[eax]
10000f27:	52                   	push   edx
10000f28:	45                   	inc    ebp
10000f29:	43                   	inc    ebx
10000f2a:	54                   	push   esp
10000f2b:	3a 20                	cmp    ah,BYTE PTR [eax]
10000f2d:	25 64 2c 20 25       	and    eax,0x25202c64
10000f32:	64 2c 20             	fs sub al,0x20
10000f35:	25 64 2c 20 25       	and    eax,0x25202c64
10000f3a:	64 0a 00             	or     al,BYTE PTR fs:[eax]
10000f3d:	47                   	inc    edi
10000f3e:	44                   	inc    esp
10000f3f:	4f                   	dec    edi
10000f40:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000f42:	61                   	popa   
10000f43:	64 64 43             	fs fs inc ebx
10000f46:	68 69 6c 64 20       	push   0x20646c69
10000f4b:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000f4c:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000f4d:	20 6d 6f             	and    BYTE PTR [ebp+0x6f],ch
10000f50:	72 65                	jb     10000fb7 <_DYNAMIC+0x57>
10000f52:	20 73 6c             	and    BYTE PTR [ebx+0x6c],dh
10000f55:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000f56:	74 73                	je     10000fcb <_DYNAMIC+0x6b>
10000f58:	20 6c 65 66          	and    BYTE PTR [ebp+eiz*2+0x66],ch
10000f5c:	74 21                	je     10000f7f <_DYNAMIC+0x1f>
	...
