
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 48             	sub    esp,0x48
10000007:	68 4f 2b 00 10       	push   0x10002b4f	10000008: R_386_32	.text
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000011:	e8 fc ff ff ff       	call   10000012 <start(void*)+0x12>	10000012: R_386_PC32	legacyFontInit()
10000016:	e8 fc ff ff ff       	call   10000017 <start(void*)+0x17>	10000017: R_386_PC32	setupCursor()
1000001b:	c7 04 24 1c 00 00 00 	mov    DWORD PTR [esp],0x1c
10000022:	e8 fc ff ff ff       	call   10000023 <start(void*)+0x23>	10000023: R_386_PC32	operator new(unsigned long)
10000027:	89 c3                	mov    ebx,eax
10000029:	58                   	pop    eax
1000002a:	5a                   	pop    edx
1000002b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000002d: R_386_32	screen
10000031:	53                   	push   ebx
10000032:	e8 fc ff ff ff       	call   10000033 <start(void*)+0x33>	10000033: R_386_PC32	Context::Context(Video*)
10000037:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000003e:	e8 fc ff ff ff       	call   1000003f <start(void*)+0x3f>	1000003f: R_386_PC32	operator new(unsigned long)
10000043:	89 c6                	mov    esi,eax
10000045:	59                   	pop    ecx
10000046:	5f                   	pop    edi
10000047:	53                   	push   ebx
10000048:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000004b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000004e:	6a 00                	push   0x0
10000050:	6a 00                	push   0x0
10000052:	50                   	push   eax
10000053:	e8 fc ff ff ff       	call   10000054 <start(void*)+0x54>	10000054: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000058:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
1000005f:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000061: R_386_32	rootRgn
10000065:	83 c4 14             	add    esp,0x14
10000068:	6a 58                	push   0x58
1000006a:	e8 fc ff ff ff       	call   1000006b <start(void*)+0x6b>	1000006b: R_386_PC32	operator new(unsigned long)
1000006f:	89 c7                	mov    edi,eax
10000071:	83 c4 0c             	add    esp,0xc
10000074:	53                   	push   ebx
10000075:	68 aa aa 00 00       	push   0xaaaa
1000007a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000007d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10000080:	6a 00                	push   0x0
10000082:	6a 00                	push   0x0
10000084:	50                   	push   eax
10000085:	e8 fc ff ff ff       	call   10000086 <start(void*)+0x86>	10000086: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
1000008a:	83 c4 18             	add    esp,0x18
1000008d:	57                   	push   edi
1000008e:	56                   	push   esi
1000008f:	e8 fc ff ff ff       	call   10000090 <start(void*)+0x90>	10000090: R_386_PC32	GDO::addChild(GDO*)
10000094:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000009b:	e8 fc ff ff ff       	call   1000009c <start(void*)+0x9c>	1000009c: R_386_PC32	operator new(unsigned long)
100000a0:	89 c1                	mov    ecx,eax
100000a2:	5d                   	pop    ebp
100000a3:	58                   	pop    eax
100000a4:	6a 06                	push   0x6
100000a6:	51                   	push   ecx
100000a7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
100000ab:	e8 fc ff ff ff       	call   100000ac <start(void*)+0xac>	100000ac: R_386_PC32	Brush::Brush(BrushType)
100000b0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000b7:	e8 fc ff ff ff       	call   100000b8 <start(void*)+0xb8>	100000b8: R_386_PC32	operator new(unsigned long)
100000bc:	89 c2                	mov    edx,eax
100000be:	58                   	pop    eax
100000bf:	59                   	pop    ecx
100000c0:	6a 07                	push   0x7
100000c2:	52                   	push   edx
100000c3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
100000c7:	e8 fc ff ff ff       	call   100000c8 <start(void*)+0xc8>	100000c8: R_386_PC32	Brush::Brush(BrushType)
100000cc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000d3:	e8 fc ff ff ff       	call   100000d4 <start(void*)+0xd4>	100000d4: R_386_PC32	operator new(unsigned long)
100000d8:	89 c5                	mov    ebp,eax
100000da:	5f                   	pop    edi
100000db:	58                   	pop    eax
100000dc:	6a 08                	push   0x8
100000de:	55                   	push   ebp
100000df:	e8 fc ff ff ff       	call   100000e0 <start(void*)+0xe0>	100000e0: R_386_PC32	Brush::Brush(BrushType)
100000e4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100000eb:	e8 fc ff ff ff       	call   100000ec <start(void*)+0xec>	100000ec: R_386_PC32	operator new(unsigned long)
100000f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100000f4:	58                   	pop    eax
100000f5:	5a                   	pop    edx
100000f6:	6a 0a                	push   0xa
100000f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100000fc:	e8 fc ff ff ff       	call   100000fd <start(void*)+0xfd>	100000fd: R_386_PC32	Brush::Brush(BrushType)
10000101:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000108:	e8 fc ff ff ff       	call   10000109 <start(void*)+0x109>	10000109: R_386_PC32	operator new(unsigned long)
1000010d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000111:	59                   	pop    ecx
10000112:	5f                   	pop    edi
10000113:	6a 09                	push   0x9
10000115:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000119:	e8 fc ff ff ff       	call   1000011a <start(void*)+0x11a>	1000011a: R_386_PC32	Brush::Brush(BrushType)
1000011e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000125:	e8 fc ff ff ff       	call   10000126 <start(void*)+0x126>	10000126: R_386_PC32	operator new(unsigned long)
1000012a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000012e:	58                   	pop    eax
1000012f:	5a                   	pop    edx
10000130:	6a 0b                	push   0xb
10000132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000136:	e8 fc ff ff ff       	call   10000137 <start(void*)+0x137>	10000137: R_386_PC32	Brush::Brush(BrushType)
1000013b:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000142:	e8 fc ff ff ff       	call   10000143 <start(void*)+0x143>	10000143: R_386_PC32	operator new(unsigned long)
10000147:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000014b:	59                   	pop    ecx
1000014c:	5f                   	pop    edi
1000014d:	6a 0c                	push   0xc
1000014f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10000153:	e8 fc ff ff ff       	call   10000154 <start(void*)+0x154>	10000154: R_386_PC32	Brush::Brush(BrushType)
10000158:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000015f:	e8 fc ff ff ff       	call   10000160 <start(void*)+0x160>	10000160: R_386_PC32	operator new(unsigned long)
10000164:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10000168:	58                   	pop    eax
10000169:	5a                   	pop    edx
1000016a:	6a 0d                	push   0xd
1000016c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000170:	e8 fc ff ff ff       	call   10000171 <start(void*)+0x171>	10000171: R_386_PC32	Brush::Brush(BrushType)
10000175:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
1000017c:	e8 fc ff ff ff       	call   1000017d <start(void*)+0x17d>	1000017d: R_386_PC32	operator new(unsigned long)
10000181:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10000185:	59                   	pop    ecx
10000186:	5f                   	pop    edi
10000187:	6a 0e                	push   0xe
10000189:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000018d:	e8 fc ff ff ff       	call   1000018e <start(void*)+0x18e>	1000018e: R_386_PC32	Brush::Brush(BrushType)
10000192:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
10000199:	e8 fc ff ff ff       	call   1000019a <start(void*)+0x19a>	1000019a: R_386_PC32	operator new(unsigned long)
1000019e:	89 c7                	mov    edi,eax
100001a0:	58                   	pop    eax
100001a1:	5a                   	pop    edx
100001a2:	6a 00                	push   0x0
100001a4:	57                   	push   edi
100001a5:	e8 fc ff ff ff       	call   100001a6 <start(void*)+0x1a6>	100001a6: R_386_PC32	Brush::Brush(BrushType)
100001aa:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001b1:	e8 fc ff ff ff       	call   100001b2 <start(void*)+0x1b2>	100001b2: R_386_PC32	operator new(unsigned long)
100001b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100001ba:	59                   	pop    ecx
100001bb:	58                   	pop    eax
100001bc:	6a 04                	push   0x4
100001be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100001c2:	e8 fc ff ff ff       	call   100001c3 <start(void*)+0x1c3>	100001c3: R_386_PC32	Brush::Brush(BrushType)
100001c7:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100001ce:	e8 fc ff ff ff       	call   100001cf <start(void*)+0x1cf>	100001cf: R_386_PC32	operator new(unsigned long)
100001d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100001d7:	58                   	pop    eax
100001d8:	5a                   	pop    edx
100001d9:	6a 0f                	push   0xf
100001db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
100001df:	e8 fc ff ff ff       	call   100001e0 <start(void*)+0x1e0>	100001e0: R_386_PC32	Brush::Brush(BrushType)
100001e4:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100001eb:	e8 fc ff ff ff       	call   100001ec <start(void*)+0x1ec>	100001ec: R_386_PC32	operator new(unsigned long)
100001f0:	83 c4 0c             	add    esp,0xc
100001f3:	53                   	push   ebx
100001f4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100001f8:	51                   	push   ecx
100001f9:	6a 64                	push   0x64
100001fb:	6a 64                	push   0x64
100001fd:	6a 32                	push   0x32
100001ff:	6a 32                	push   0x32
10000201:	50                   	push   eax
10000202:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000206:	e8 fc ff ff ff       	call   10000207 <start(void*)+0x207>	10000207: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000020b:	83 c4 18             	add    esp,0x18
1000020e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000212:	50                   	push   eax
10000213:	56                   	push   esi
10000214:	e8 fc ff ff ff       	call   10000215 <start(void*)+0x215>	10000215: R_386_PC32	GDO::addChild(GDO*)
10000219:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000220:	e8 fc ff ff ff       	call   10000221 <start(void*)+0x221>	10000221: R_386_PC32	operator new(unsigned long)
10000225:	83 c4 0c             	add    esp,0xc
10000228:	53                   	push   ebx
10000229:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
1000022d:	52                   	push   edx
1000022e:	6a 64                	push   0x64
10000230:	6a 64                	push   0x64
10000232:	6a 32                	push   0x32
10000234:	68 c8 00 00 00       	push   0xc8
10000239:	50                   	push   eax
1000023a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000023e:	e8 fc ff ff ff       	call   1000023f <start(void*)+0x23f>	1000023f: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000243:	83 c4 18             	add    esp,0x18
10000246:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000024a:	50                   	push   eax
1000024b:	56                   	push   esi
1000024c:	e8 fc ff ff ff       	call   1000024d <start(void*)+0x24d>	1000024d: R_386_PC32	GDO::addChild(GDO*)
10000251:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000258:	e8 fc ff ff ff       	call   10000259 <start(void*)+0x259>	10000259: R_386_PC32	operator new(unsigned long)
1000025d:	83 c4 0c             	add    esp,0xc
10000260:	53                   	push   ebx
10000261:	55                   	push   ebp
10000262:	6a 64                	push   0x64
10000264:	6a 64                	push   0x64
10000266:	6a 32                	push   0x32
10000268:	68 5e 01 00 00       	push   0x15e
1000026d:	50                   	push   eax
1000026e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000272:	e8 fc ff ff ff       	call   10000273 <start(void*)+0x273>	10000273: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000277:	83 c4 18             	add    esp,0x18
1000027a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000027e:	50                   	push   eax
1000027f:	56                   	push   esi
10000280:	e8 fc ff ff ff       	call   10000281 <start(void*)+0x281>	10000281: R_386_PC32	GDO::addChild(GDO*)
10000285:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000028c:	e8 fc ff ff ff       	call   1000028d <start(void*)+0x28d>	1000028d: R_386_PC32	operator new(unsigned long)
10000291:	89 c5                	mov    ebp,eax
10000293:	83 c4 0c             	add    esp,0xc
10000296:	53                   	push   ebx
10000297:	57                   	push   edi
10000298:	6a 64                	push   0x64
1000029a:	6a 64                	push   0x64
1000029c:	6a 32                	push   0x32
1000029e:	68 f4 01 00 00       	push   0x1f4
100002a3:	50                   	push   eax
100002a4:	e8 fc ff ff ff       	call   100002a5 <start(void*)+0x2a5>	100002a5: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100002a9:	83 c4 18             	add    esp,0x18
100002ac:	55                   	push   ebp
100002ad:	56                   	push   esi
100002ae:	e8 fc ff ff ff       	call   100002af <start(void*)+0x2af>	100002af: R_386_PC32	GDO::addChild(GDO*)
100002b3:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100002ba:	e8 fc ff ff ff       	call   100002bb <start(void*)+0x2bb>	100002bb: R_386_PC32	operator new(unsigned long)
100002bf:	89 c7                	mov    edi,eax
100002c1:	83 c4 0c             	add    esp,0xc
100002c4:	53                   	push   ebx
100002c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100002c9:	6a 64                	push   0x64
100002cb:	6a 64                	push   0x64
100002cd:	68 c8 00 00 00       	push   0xc8
100002d2:	6a 32                	push   0x32
100002d4:	50                   	push   eax
100002d5:	e8 fc ff ff ff       	call   100002d6 <start(void*)+0x2d6>	100002d6: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100002da:	83 c4 18             	add    esp,0x18
100002dd:	57                   	push   edi
100002de:	56                   	push   esi
100002df:	e8 fc ff ff ff       	call   100002e0 <start(void*)+0x2e0>	100002e0: R_386_PC32	GDO::addChild(GDO*)
100002e4:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100002eb:	e8 fc ff ff ff       	call   100002ec <start(void*)+0x2ec>	100002ec: R_386_PC32	operator new(unsigned long)
100002f0:	89 c7                	mov    edi,eax
100002f2:	83 c4 0c             	add    esp,0xc
100002f5:	53                   	push   ebx
100002f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100002fa:	6a 64                	push   0x64
100002fc:	6a 64                	push   0x64
100002fe:	68 c8 00 00 00       	push   0xc8
10000303:	68 c8 00 00 00       	push   0xc8
10000308:	50                   	push   eax
10000309:	e8 fc ff ff ff       	call   1000030a <start(void*)+0x30a>	1000030a: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000030e:	83 c4 18             	add    esp,0x18
10000311:	57                   	push   edi
10000312:	56                   	push   esi
10000313:	e8 fc ff ff ff       	call   10000314 <start(void*)+0x314>	10000314: R_386_PC32	GDO::addChild(GDO*)
10000318:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000031f:	e8 fc ff ff ff       	call   10000320 <start(void*)+0x320>	10000320: R_386_PC32	operator new(unsigned long)
10000324:	89 c7                	mov    edi,eax
10000326:	83 c4 0c             	add    esp,0xc
10000329:	53                   	push   ebx
1000032a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000032e:	6a 64                	push   0x64
10000330:	6a 64                	push   0x64
10000332:	68 c8 00 00 00       	push   0xc8
10000337:	68 5e 01 00 00       	push   0x15e
1000033c:	50                   	push   eax
1000033d:	e8 fc ff ff ff       	call   1000033e <start(void*)+0x33e>	1000033e: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000342:	83 c4 18             	add    esp,0x18
10000345:	57                   	push   edi
10000346:	56                   	push   esi
10000347:	e8 fc ff ff ff       	call   10000348 <start(void*)+0x348>	10000348: R_386_PC32	GDO::addChild(GDO*)
1000034c:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000353:	e8 fc ff ff ff       	call   10000354 <start(void*)+0x354>	10000354: R_386_PC32	operator new(unsigned long)
10000358:	89 c7                	mov    edi,eax
1000035a:	83 c4 0c             	add    esp,0xc
1000035d:	53                   	push   ebx
1000035e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000362:	6a 64                	push   0x64
10000364:	6a 64                	push   0x64
10000366:	68 c8 00 00 00       	push   0xc8
1000036b:	68 f4 01 00 00       	push   0x1f4
10000370:	50                   	push   eax
10000371:	e8 fc ff ff ff       	call   10000372 <start(void*)+0x372>	10000372: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000376:	83 c4 18             	add    esp,0x18
10000379:	57                   	push   edi
1000037a:	56                   	push   esi
1000037b:	e8 fc ff ff ff       	call   1000037c <start(void*)+0x37c>	1000037c: R_386_PC32	GDO::addChild(GDO*)
10000380:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000387:	e8 fc ff ff ff       	call   10000388 <start(void*)+0x388>	10000388: R_386_PC32	operator new(unsigned long)
1000038c:	89 c7                	mov    edi,eax
1000038e:	83 c4 0c             	add    esp,0xc
10000391:	53                   	push   ebx
10000392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000396:	6a 64                	push   0x64
10000398:	6a 64                	push   0x64
1000039a:	68 5e 01 00 00       	push   0x15e
1000039f:	6a 32                	push   0x32
100003a1:	50                   	push   eax
100003a2:	e8 fc ff ff ff       	call   100003a3 <start(void*)+0x3a3>	100003a3: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100003a7:	83 c4 18             	add    esp,0x18
100003aa:	57                   	push   edi
100003ab:	56                   	push   esi
100003ac:	e8 fc ff ff ff       	call   100003ad <start(void*)+0x3ad>	100003ad: R_386_PC32	GDO::addChild(GDO*)
100003b1:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100003b8:	e8 fc ff ff ff       	call   100003b9 <start(void*)+0x3b9>	100003b9: R_386_PC32	operator new(unsigned long)
100003bd:	89 c7                	mov    edi,eax
100003bf:	83 c4 0c             	add    esp,0xc
100003c2:	53                   	push   ebx
100003c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100003c7:	6a 64                	push   0x64
100003c9:	6a 64                	push   0x64
100003cb:	68 5e 01 00 00       	push   0x15e
100003d0:	68 c8 00 00 00       	push   0xc8
100003d5:	50                   	push   eax
100003d6:	e8 fc ff ff ff       	call   100003d7 <start(void*)+0x3d7>	100003d7: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
100003db:	83 c4 18             	add    esp,0x18
100003de:	57                   	push   edi
100003df:	56                   	push   esi
100003e0:	e8 fc ff ff ff       	call   100003e1 <start(void*)+0x3e1>	100003e1: R_386_PC32	GDO::addChild(GDO*)
100003e5:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100003ec:	e8 fc ff ff ff       	call   100003ed <start(void*)+0x3ed>	100003ed: R_386_PC32	operator new(unsigned long)
100003f1:	89 c7                	mov    edi,eax
100003f3:	83 c4 0c             	add    esp,0xc
100003f6:	53                   	push   ebx
100003f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100003fb:	6a 64                	push   0x64
100003fd:	6a 64                	push   0x64
100003ff:	68 5e 01 00 00       	push   0x15e
10000404:	68 5e 01 00 00       	push   0x15e
10000409:	50                   	push   eax
1000040a:	e8 fc ff ff ff       	call   1000040b <start(void*)+0x40b>	1000040b: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
1000040f:	83 c4 18             	add    esp,0x18
10000412:	57                   	push   edi
10000413:	56                   	push   esi
10000414:	e8 fc ff ff ff       	call   10000415 <start(void*)+0x415>	10000415: R_386_PC32	GDO::addChild(GDO*)
10000419:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000420:	e8 fc ff ff ff       	call   10000421 <start(void*)+0x421>	10000421: R_386_PC32	operator new(unsigned long)
10000425:	89 c7                	mov    edi,eax
10000427:	83 c4 0c             	add    esp,0xc
1000042a:	53                   	push   ebx
1000042b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000042f:	6a 64                	push   0x64
10000431:	6a 64                	push   0x64
10000433:	68 5e 01 00 00       	push   0x15e
10000438:	68 f4 01 00 00       	push   0x1f4
1000043d:	50                   	push   eax
1000043e:	e8 fc ff ff ff       	call   1000043f <start(void*)+0x43f>	1000043f: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000443:	83 c4 18             	add    esp,0x18
10000446:	57                   	push   edi
10000447:	56                   	push   esi
10000448:	e8 fc ff ff ff       	call   10000449 <start(void*)+0x449>	10000449: R_386_PC32	GDO::addChild(GDO*)
1000044d:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000454:	e8 fc ff ff ff       	call   10000455 <start(void*)+0x455>	10000455: R_386_PC32	operator new(unsigned long)
10000459:	89 c5                	mov    ebp,eax
1000045b:	59                   	pop    ecx
1000045c:	5f                   	pop    edi
1000045d:	53                   	push   ebx
1000045e:	68 c8 00 00 00       	push   0xc8
10000463:	68 2c 01 00 00       	push   0x12c
10000468:	6a 0a                	push   0xa
1000046a:	6a 0a                	push   0xa
1000046c:	50                   	push   eax
1000046d:	e8 fc ff ff ff       	call   1000046e <start(void*)+0x46e>	1000046e: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000472:	83 c4 18             	add    esp,0x18
10000475:	55                   	push   ebp
10000476:	56                   	push   esi
10000477:	e8 fc ff ff ff       	call   10000478 <start(void*)+0x478>	10000478: R_386_PC32	GDO::addChild(GDO*)
1000047c:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000483:	e8 fc ff ff ff       	call   10000484 <start(void*)+0x484>	10000484: R_386_PC32	operator new(unsigned long)
10000488:	89 c7                	mov    edi,eax
1000048a:	83 c4 0c             	add    esp,0xc
1000048d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
10000490:	68 ff 00 00 00       	push   0xff
10000495:	68 c8 00 00 00       	push   0xc8
1000049a:	68 2c 01 00 00       	push   0x12c
1000049f:	6a 00                	push   0x0
100004a1:	6a 00                	push   0x0
100004a3:	50                   	push   eax
100004a4:	e8 fc ff ff ff       	call   100004a5 <start(void*)+0x4a5>	100004a5: R_386_PC32	Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)
100004a9:	83 c4 18             	add    esp,0x18
100004ac:	57                   	push   edi
100004ad:	55                   	push   ebp
100004ae:	e8 fc ff ff ff       	call   100004af <start(void*)+0x4af>	100004af: R_386_PC32	GDO::addChild(GDO*)
100004b3:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100004ba:	e8 fc ff ff ff       	call   100004bb <start(void*)+0x4bb>	100004bb: R_386_PC32	operator new(unsigned long)
100004bf:	89 c1                	mov    ecx,eax
100004c1:	58                   	pop    eax
100004c2:	5a                   	pop    edx
100004c3:	6a 09                	push   0x9
100004c5:	51                   	push   ecx
100004c6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
100004ca:	e8 fc ff ff ff       	call   100004cb <start(void*)+0x4cb>	100004cb: R_386_PC32	Brush::Brush(BrushType)
100004cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100004d3:	c7 41 04 00 ff 00 00 	mov    DWORD PTR [ecx+0x4],0xff00
100004da:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100004de:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
100004e5:	e8 fc ff ff ff       	call   100004e6 <start(void*)+0x4e6>	100004e6: R_386_PC32	operator new(unsigned long)
100004ea:	59                   	pop    ecx
100004eb:	5f                   	pop    edi
100004ec:	6a 07                	push   0x7
100004ee:	50                   	push   eax
100004ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100004f3:	e8 fc ff ff ff       	call   100004f4 <start(void*)+0x4f4>	100004f4: R_386_PC32	Brush::Brush(BrushType)
100004f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100004fc:	c7 42 04 00 88 ff 00 	mov    DWORD PTR [edx+0x4],0xff8800
10000503:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000050a:	e8 fc ff ff ff       	call   1000050b <start(void*)+0x50b>	1000050b: R_386_PC32	operator new(unsigned long)
1000050f:	89 c7                	mov    edi,eax
10000511:	58                   	pop    eax
10000512:	5a                   	pop    edx
10000513:	ff 75 04             	push   DWORD PTR [ebp+0x4]
10000516:	6a 78                	push   0x78
10000518:	68 c8 00 00 00       	push   0xc8
1000051d:	6a 32                	push   0x32
1000051f:	6a 32                	push   0x32
10000521:	57                   	push   edi
10000522:	e8 fc ff ff ff       	call   10000523 <start(void*)+0x523>	10000523: R_386_PC32	Region::Region(int, int, int, int, Context*)
10000527:	83 c4 18             	add    esp,0x18
1000052a:	57                   	push   edi
1000052b:	55                   	push   ebp
1000052c:	e8 fc ff ff ff       	call   1000052d <start(void*)+0x52d>	1000052d: R_386_PC32	GDO::addChild(GDO*)
10000531:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000538:	e8 fc ff ff ff       	call   10000539 <start(void*)+0x539>	10000539: R_386_PC32	operator new(unsigned long)
1000053d:	89 c5                	mov    ebp,eax
1000053f:	83 c4 0c             	add    esp,0xc
10000542:	ff 77 04             	push   DWORD PTR [edi+0x4]
10000545:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10000549:	51                   	push   ecx
1000054a:	6a 46                	push   0x46
1000054c:	6a 46                	push   0x46
1000054e:	6a 00                	push   0x0
10000550:	6a 00                	push   0x0
10000552:	50                   	push   eax
10000553:	e8 fc ff ff ff       	call   10000554 <start(void*)+0x554>	10000554: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000558:	83 c4 18             	add    esp,0x18
1000055b:	55                   	push   ebp
1000055c:	57                   	push   edi
1000055d:	e8 fc ff ff ff       	call   1000055e <start(void*)+0x55e>	1000055e: R_386_PC32	GDO::addChild(GDO*)
10000562:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000569:	e8 fc ff ff ff       	call   1000056a <start(void*)+0x56a>	1000056a: R_386_PC32	operator new(unsigned long)
1000056e:	89 c5                	mov    ebp,eax
10000570:	83 c4 0c             	add    esp,0xc
10000573:	ff 77 04             	push   DWORD PTR [edi+0x4]
10000576:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000057a:	52                   	push   edx
1000057b:	6a 46                	push   0x46
1000057d:	6a 55                	push   0x55
1000057f:	6a 14                	push   0x14
10000581:	6a 64                	push   0x64
10000583:	50                   	push   eax
10000584:	e8 fc ff ff ff       	call   10000585 <start(void*)+0x585>	10000585: R_386_PC32	Rectangle::Rectangle(int, int, int, int, Brush*, Context*)
10000589:	83 c4 18             	add    esp,0x18
1000058c:	55                   	push   ebp
1000058d:	57                   	push   edi
1000058e:	e8 fc ff ff ff       	call   1000058f <start(void*)+0x58f>	1000058f: R_386_PC32	GDO::addChild(GDO*)
10000593:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
1000059a:	e8 fc ff ff ff       	call   1000059b <start(void*)+0x59b>	1000059b: R_386_PC32	getLegacyFont(LegacyFontType)
1000059f:	89 c5                	mov    ebp,eax
100005a1:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100005a8:	e8 fc ff ff ff       	call   100005a9 <start(void*)+0x5a9>	100005a9: R_386_PC32	operator new(unsigned long)
100005ad:	89 c7                	mov    edi,eax
100005af:	83 c4 0c             	add    esp,0xc
100005b2:	53                   	push   ebx
100005b3:	6a 00                	push   0x0
100005b5:	68 c2 01 00 00       	push   0x1c2
100005ba:	6a 32                	push   0x32
100005bc:	68 62 2b 00 10       	push   0x10002b62	100005bd: R_386_32	.text
100005c1:	55                   	push   ebp
100005c2:	50                   	push   eax
100005c3:	e8 fc ff ff ff       	call   100005c4 <start(void*)+0x5c4>	100005c4: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
100005c8:	83 c4 18             	add    esp,0x18
100005cb:	57                   	push   edi
100005cc:	56                   	push   esi
100005cd:	e8 fc ff ff ff       	call   100005ce <start(void*)+0x5ce>	100005ce: R_386_PC32	GDO::addChild(GDO*)
100005d2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
100005d9:	e8 fc ff ff ff       	call   100005da <start(void*)+0x5da>	100005da: R_386_PC32	getLegacyFont(LegacyFontType)
100005de:	89 c5                	mov    ebp,eax
100005e0:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100005e7:	e8 fc ff ff ff       	call   100005e8 <start(void*)+0x5e8>	100005e8: R_386_PC32	operator new(unsigned long)
100005ec:	89 c7                	mov    edi,eax
100005ee:	83 c4 0c             	add    esp,0xc
100005f1:	53                   	push   ebx
100005f2:	6a 00                	push   0x0
100005f4:	68 c2 01 00 00       	push   0x1c2
100005f9:	68 96 00 00 00       	push   0x96
100005fe:	68 73 2b 00 10       	push   0x10002b73	100005ff: R_386_32	.text
10000603:	55                   	push   ebp
10000604:	50                   	push   eax
10000605:	e8 fc ff ff ff       	call   10000606 <start(void*)+0x606>	10000606: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
1000060a:	83 c4 18             	add    esp,0x18
1000060d:	57                   	push   edi
1000060e:	56                   	push   esi
1000060f:	e8 fc ff ff ff       	call   10000610 <start(void*)+0x610>	10000610: R_386_PC32	GDO::addChild(GDO*)
10000614:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
1000061b:	e8 fc ff ff ff       	call   1000061c <start(void*)+0x61c>	1000061c: R_386_PC32	getLegacyFont(LegacyFontType)
10000620:	89 c5                	mov    ebp,eax
10000622:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
10000629:	e8 fc ff ff ff       	call   1000062a <start(void*)+0x62a>	1000062a: R_386_PC32	operator new(unsigned long)
1000062e:	89 c7                	mov    edi,eax
10000630:	83 c4 0c             	add    esp,0xc
10000633:	53                   	push   ebx
10000634:	6a 00                	push   0x0
10000636:	68 c2 01 00 00       	push   0x1c2
1000063b:	68 04 01 00 00       	push   0x104
10000640:	68 84 2b 00 10       	push   0x10002b84	10000641: R_386_32	.text
10000645:	55                   	push   ebp
10000646:	50                   	push   eax
10000647:	e8 fc ff ff ff       	call   10000648 <start(void*)+0x648>	10000648: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
1000064c:	83 c4 18             	add    esp,0x18
1000064f:	57                   	push   edi
10000650:	56                   	push   esi
10000651:	e8 fc ff ff ff       	call   10000652 <start(void*)+0x652>	10000652: R_386_PC32	GDO::addChild(GDO*)
10000656:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
1000065d:	e8 fc ff ff ff       	call   1000065e <start(void*)+0x65e>	1000065e: R_386_PC32	getLegacyFont(LegacyFontType)
10000662:	89 c5                	mov    ebp,eax
10000664:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
1000066b:	e8 fc ff ff ff       	call   1000066c <start(void*)+0x66c>	1000066c: R_386_PC32	operator new(unsigned long)
10000670:	89 c7                	mov    edi,eax
10000672:	83 c4 0c             	add    esp,0xc
10000675:	53                   	push   ebx
10000676:	6a 00                	push   0x0
10000678:	68 c2 01 00 00       	push   0x1c2
1000067d:	68 5e 01 00 00       	push   0x15e
10000682:	68 93 2b 00 10       	push   0x10002b93	10000683: R_386_32	.text
10000687:	55                   	push   ebp
10000688:	50                   	push   eax
10000689:	e8 fc ff ff ff       	call   1000068a <start(void*)+0x68a>	1000068a: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
1000068e:	83 c4 18             	add    esp,0x18
10000691:	57                   	push   edi
10000692:	56                   	push   esi
10000693:	e8 fc ff ff ff       	call   10000694 <start(void*)+0x694>	10000694: R_386_PC32	GDO::addChild(GDO*)
10000698:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
1000069f:	e8 fc ff ff ff       	call   100006a0 <start(void*)+0x6a0>	100006a0: R_386_PC32	getLegacyFont(LegacyFontType)
100006a4:	89 c5                	mov    ebp,eax
100006a6:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100006ad:	e8 fc ff ff ff       	call   100006ae <start(void*)+0x6ae>	100006ae: R_386_PC32	operator new(unsigned long)
100006b2:	89 c7                	mov    edi,eax
100006b4:	83 c4 0c             	add    esp,0xc
100006b7:	53                   	push   ebx
100006b8:	6a 00                	push   0x0
100006ba:	68 c2 01 00 00       	push   0x1c2
100006bf:	68 c2 01 00 00       	push   0x1c2
100006c4:	68 a9 2b 00 10       	push   0x10002ba9	100006c5: R_386_32	.text
100006c9:	55                   	push   ebp
100006ca:	50                   	push   eax
100006cb:	e8 fc ff ff ff       	call   100006cc <start(void*)+0x6cc>	100006cc: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
100006d0:	83 c4 18             	add    esp,0x18
100006d3:	57                   	push   edi
100006d4:	56                   	push   esi
100006d5:	e8 fc ff ff ff       	call   100006d6 <start(void*)+0x6d6>	100006d6: R_386_PC32	GDO::addChild(GDO*)
100006da:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
100006e1:	e8 fc ff ff ff       	call   100006e2 <start(void*)+0x6e2>	100006e2: R_386_PC32	getLegacyFont(LegacyFontType)
100006e6:	89 c5                	mov    ebp,eax
100006e8:	c7 04 24 58 00 00 00 	mov    DWORD PTR [esp],0x58
100006ef:	e8 fc ff ff ff       	call   100006f0 <start(void*)+0x6f0>	100006f0: R_386_PC32	operator new(unsigned long)
100006f4:	89 c7                	mov    edi,eax
100006f6:	83 c4 0c             	add    esp,0xc
100006f9:	53                   	push   ebx
100006fa:	6a 00                	push   0x0
100006fc:	68 d1 01 00 00       	push   0x1d1
10000701:	68 5e 01 00 00       	push   0x15e
10000706:	68 c4 2b 00 10       	push   0x10002bc4	10000707: R_386_32	.text
1000070b:	55                   	push   ebp
1000070c:	50                   	push   eax
1000070d:	e8 fc ff ff ff       	call   1000070e <start(void*)+0x70e>	1000070e: R_386_PC32	LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)
10000712:	83 c4 18             	add    esp,0x18
10000715:	57                   	push   edi
10000716:	56                   	push   esi
10000717:	e8 fc ff ff ff       	call   10000718 <start(void*)+0x718>	10000718: R_386_PC32	GDO::addChild(GDO*)
1000071c:	83 c4 0c             	add    esp,0xc
1000071f:	6a 01                	push   0x1
10000721:	6a 00                	push   0x0
10000723:	56                   	push   esi
10000724:	e8 fc ff ff ff       	call   10000725 <start(void*)+0x725>	10000725: R_386_PC32	GDO::update(List<CRect*>*, bool)
10000729:	e8 fc ff ff ff       	call   1000072a <start(void*)+0x72a>	1000072a: R_386_PC32	startMouse()
1000072e:	83 c4 0c             	add    esp,0xc
10000731:	6a 00                	push   0x0
10000733:	68 c8 00 00 00       	push   0xc8
10000738:	68 2c 01 00 00       	push   0x12c
1000073d:	e8 fc ff ff ff       	call   1000073e <start(void*)+0x73e>	1000073e: R_386_PC32	processMouse(int, int, int)
10000742:	83 c4 10             	add    esp,0x10
10000745:	83 ec 0c             	sub    esp,0xc
10000748:	6a 02                	push   0x2
1000074a:	e8 fc ff ff ff       	call   1000074b <start(void*)+0x74b>	1000074b: R_386_PC32	blockTask(TaskState)
1000074f:	eb f1                	jmp    10000742 <start(void*)+0x742>

10000751 <begin(void*)>:
10000751:	83 ec 18             	sub    esp,0x18
10000754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000758:	e8 fc ff ff ff       	call   10000759 <begin(void*)+0x8>	10000759: R_386_PC32	start(void*)
1000075d:	90                   	nop

1000075e <Brush::Brush(unsigned int, unsigned int)>:
1000075e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000762:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000766:	89 10                	mov    DWORD PTR [eax],edx
10000768:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
1000076c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000076f:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
10000776:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
1000077d:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
10000784:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
1000078b:	c3                   	ret    

1000078c <Brush::Brush(BrushType)>:
1000078c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000790:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000796:	c7 40 04 ff ff ff ff 	mov    DWORD PTR [eax+0x4],0xffffffff
1000079d:	c6 40 10 ff          	mov    BYTE PTR [eax+0x10],0xff
100007a1:	c7 40 18 01 00 00 00 	mov    DWORD PTR [eax+0x18],0x1
100007a8:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [eax+0x1c],0x1
100007af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100007b6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
100007bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100007c1:	8d 51 ff             	lea    edx,[ecx-0x1]
100007c4:	83 fa 0e             	cmp    edx,0xe
100007c7:	0f 87 ae 00 00 00    	ja     1000087b <Brush::Brush(BrushType)+0xef>
100007cd:	ff 24 95 f0 2b 00 10 	jmp    DWORD PTR [edx*4+0x10002bf0]	100007d0: R_386_32	.text
100007d4:	c7 00 aa aa aa 00    	mov    DWORD PTR [eax],0xaaaaaa
100007da:	c3                   	ret    
100007db:	c7 00 80 80 80 00    	mov    DWORD PTR [eax],0x808080
100007e1:	c3                   	ret    
100007e2:	c7 00 55 55 55 00    	mov    DWORD PTR [eax],0x555555
100007e8:	c3                   	ret    
100007e9:	c7 00 ff ff ff 00    	mov    DWORD PTR [eax],0xffffff
100007ef:	c3                   	ret    
100007f0:	c6 40 10 00          	mov    BYTE PTR [eax+0x10],0x0
100007f4:	c3                   	ret    
100007f5:	c7 40 10 01 08 04 02 	mov    DWORD PTR [eax+0x10],0x2040801
100007fc:	eb 6f                	jmp    1000086d <Brush::Brush(BrushType)+0xe1>
100007fe:	c7 40 10 01 02 04 08 	mov    DWORD PTR [eax+0x10],0x8040201
10000805:	eb 66                	jmp    1000086d <Brush::Brush(BrushType)+0xe1>
10000807:	c7 40 10 01 01 01 0f 	mov    DWORD PTR [eax+0x10],0xf010101
1000080e:	eb 5d                	jmp    1000086d <Brush::Brush(BrushType)+0xe1>
10000810:	c7 40 10 08 14 22 01 	mov    DWORD PTR [eax+0x10],0x1221408
10000817:	66 c7 40 14 22 14    	mov    WORD PTR [eax+0x14],0x1422
1000081d:	c7 40 18 06 00 00 00 	mov    DWORD PTR [eax+0x18],0x6
10000824:	c7 40 1c 06 00 00 00 	mov    DWORD PTR [eax+0x1c],0x6
1000082b:	c3                   	ret    
1000082c:	c7 40 10 00 00 00 01 	mov    DWORD PTR [eax+0x10],0x1000000
10000833:	eb 3f                	jmp    10000874 <Brush::Brush(BrushType)+0xe8>
10000835:	c6 40 10 02          	mov    BYTE PTR [eax+0x10],0x2
10000839:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
10000840:	c3                   	ret    
10000841:	66 c7 40 10 02 01    	mov    WORD PTR [eax+0x10],0x102
10000847:	eb 0e                	jmp    10000857 <Brush::Brush(BrushType)+0xcb>
10000849:	66 c7 40 10 02 00    	mov    WORD PTR [eax+0x10],0x2
1000084f:	eb 06                	jmp    10000857 <Brush::Brush(BrushType)+0xcb>
10000851:	66 c7 40 10 03 02    	mov    WORD PTR [eax+0x10],0x203
10000857:	c7 40 18 02 00 00 00 	mov    DWORD PTR [eax+0x18],0x2
1000085e:	c7 40 1c 02 00 00 00 	mov    DWORD PTR [eax+0x1c],0x2
10000865:	c3                   	ret    
10000866:	c7 40 10 0c 0c 03 03 	mov    DWORD PTR [eax+0x10],0x3030c0c
1000086d:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
10000874:	c7 40 1c 04 00 00 00 	mov    DWORD PTR [eax+0x1c],0x4
1000087b:	c3                   	ret    

1000087c <List<CRect*>::length() [clone .isra.0]>:
1000087c:	31 d2                	xor    edx,edx
1000087e:	85 c0                	test   eax,eax
10000880:	74 06                	je     10000888 <List<CRect*>::length() [clone .isra.0]+0xc>
10000882:	42                   	inc    edx
10000883:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000886:	eb f6                	jmp    1000087e <List<CRect*>::length() [clone .isra.0]+0x2>
10000888:	89 d0                	mov    eax,edx
1000088a:	c3                   	ret    
1000088b:	90                   	nop

1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>:
1000088c:	53                   	push   ebx
1000088d:	89 c1                	mov    ecx,eax
1000088f:	89 d3                	mov    ebx,edx
10000891:	e8 e6 ff ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10000896:	39 d8                	cmp    eax,ebx
10000898:	7c 0a                	jl     100008a4 <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0x18>
1000089a:	85 db                	test   ebx,ebx
1000089c:	74 06                	je     100008a4 <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0x18>
1000089e:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
100008a1:	4b                   	dec    ebx
100008a2:	eb f6                	jmp    1000089a <List<CRect*>::getDesiredElement(int) [clone .isra.1]+0xe>
100008a4:	89 c8                	mov    eax,ecx
100008a6:	5b                   	pop    ebx
100008a7:	c3                   	ret    

100008a8 <CRect::CRect()>:
100008a8:	c3                   	ret    
100008a9:	90                   	nop

100008aa <CRect::CRect(int, int, int, int)>:
100008aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100008ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100008b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
100008b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100008b9:	89 10                	mov    DWORD PTR [eax],edx
100008bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100008bf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100008c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100008c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100008c9:	c3                   	ret    

100008ca <CRect::intersect(CRect*)>:
100008ca:	55                   	push   ebp
100008cb:	57                   	push   edi
100008cc:	56                   	push   esi
100008cd:	53                   	push   ebx
100008ce:	83 ec 1c             	sub    esp,0x1c
100008d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
100008d5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
100008d9:	8b 0f                	mov    ecx,DWORD PTR [edi]
100008db:	8b 75 04             	mov    esi,DWORD PTR [ebp+0x4]
100008de:	31 c0                	xor    eax,eax
100008e0:	39 f1                	cmp    ecx,esi
100008e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100008e6:	7f 7f                	jg     10000967 <CRect::intersect(CRect*)+0x9d>
100008e8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
100008eb:	89 04 24             	mov    DWORD PTR [esp],eax
100008ee:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
100008f1:	31 c0                	xor    eax,eax
100008f3:	39 14 24             	cmp    DWORD PTR [esp],edx
100008f6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
100008fa:	7c 6b                	jl     10000967 <CRect::intersect(CRect*)+0x9d>
100008fc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
100008ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000903:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
10000906:	31 c0                	xor    eax,eax
10000908:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
1000090c:	7f 59                	jg     10000967 <CRect::intersect(CRect*)+0x9d>
1000090e:	8b 7f 0c             	mov    edi,DWORD PTR [edi+0xc]
10000911:	8b 6d 08             	mov    ebp,DWORD PTR [ebp+0x8]
10000914:	39 ef                	cmp    edi,ebp
10000916:	7c 4f                	jl     10000967 <CRect::intersect(CRect*)+0x9d>
10000918:	83 ec 0c             	sub    esp,0xc
1000091b:	6a 10                	push   0x10
1000091d:	e8 fc ff ff ff       	call   1000091e <CRect::intersect(CRect*)+0x54>	1000091e: R_386_PC32	malloc
10000922:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10000926:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
10000929:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000092d:	89 08                	mov    DWORD PTR [eax],ecx
1000092f:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
10000932:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000936:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000939:	83 c4 10             	add    esp,0x10
1000093c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000940:	39 d1                	cmp    ecx,edx
10000942:	7f 02                	jg     10000946 <CRect::intersect(CRect*)+0x7c>
10000944:	89 10                	mov    DWORD PTR [eax],edx
10000946:	39 6c 24 04          	cmp    DWORD PTR [esp+0x4],ebp
1000094a:	7f 03                	jg     1000094f <CRect::intersect(CRect*)+0x85>
1000094c:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
1000094f:	3b 30                	cmp    esi,DWORD PTR [eax]
10000951:	7c 08                	jl     1000095b <CRect::intersect(CRect*)+0x91>
10000953:	3b 34 24             	cmp    esi,DWORD PTR [esp]
10000956:	7f 03                	jg     1000095b <CRect::intersect(CRect*)+0x91>
10000958:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
1000095b:	3b 58 08             	cmp    ebx,DWORD PTR [eax+0x8]
1000095e:	7c 07                	jl     10000967 <CRect::intersect(CRect*)+0x9d>
10000960:	39 fb                	cmp    ebx,edi
10000962:	7f 03                	jg     10000967 <CRect::intersect(CRect*)+0x9d>
10000964:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
10000967:	83 c4 1c             	add    esp,0x1c
1000096a:	5b                   	pop    ebx
1000096b:	5e                   	pop    esi
1000096c:	5f                   	pop    edi
1000096d:	5d                   	pop    ebp
1000096e:	c3                   	ret    
1000096f:	90                   	nop

10000970 <Context::Context(Video*)>:
10000970:	53                   	push   ebx
10000971:	83 ec 14             	sub    esp,0x14
10000974:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000097c:	89 03                	mov    DWORD PTR [ebx],eax
1000097e:	50                   	push   eax
1000097f:	e8 fc ff ff ff       	call   10000980 <Context::Context(Video*)+0x10>	10000980: R_386_PC32	Video::getWidth()
10000984:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10000987:	58                   	pop    eax
10000988:	ff 33                	push   DWORD PTR [ebx]
1000098a:	e8 fc ff ff ff       	call   1000098b <Context::Context(Video*)+0x1b>	1000098b: R_386_PC32	Video::getHeight()
1000098f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10000992:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
10000999:	e8 fc ff ff ff       	call   1000099a <Context::Context(Video*)+0x2a>	1000099a: R_386_PC32	malloc
1000099e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100009a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100009ab:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
100009ae:	c6 43 14 00          	mov    BYTE PTR [ebx+0x14],0x0
100009b2:	83 c4 18             	add    esp,0x18
100009b5:	5b                   	pop    ebx
100009b6:	c3                   	ret    
100009b7:	90                   	nop

100009b8 <Context::clippedRect(int, int, int, int, CRect*, Brush*)>:
100009b8:	55                   	push   ebp
100009b9:	57                   	push   edi
100009ba:	56                   	push   esi
100009bb:	53                   	push   ebx
100009bc:	83 ec 2c             	sub    esp,0x2c
100009bf:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100009c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
100009c7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
100009cb:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
100009cf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
100009d3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
100009d7:	01 f9                	add    ecx,edi
100009d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
100009dd:	01 f0                	add    eax,esi
100009df:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
100009e2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
100009e6:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
100009e9:	01 fe                	add    esi,edi
100009eb:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
100009ef:	03 4d 0c             	add    ecx,DWORD PTR [ebp+0xc]
100009f2:	01 f8                	add    eax,edi
100009f4:	8b 32                	mov    esi,DWORD PTR [edx]
100009f6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
100009fa:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
100009fe:	7d 08                	jge    10000a08 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x50>
10000a00:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10000a04:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10000a08:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
10000a0b:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
10000a0f:	7d 04                	jge    10000a15 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x5d>
10000a11:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10000a15:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
10000a18:	47                   	inc    edi
10000a19:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10000a1d:	39 cf                	cmp    edi,ecx
10000a1f:	7e 04                	jle    10000a25 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x6d>
10000a21:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10000a25:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
10000a28:	8d 4a 01             	lea    ecx,[edx+0x1]
10000a2b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
10000a2f:	39 c1                	cmp    ecx,eax
10000a31:	7e 04                	jle    10000a37 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x7f>
10000a33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000a37:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
10000a3b:	7d 62                	jge    10000a9f <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe7>
10000a3d:	89 f0                	mov    eax,esi
10000a3f:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000a43:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
10000a46:	99                   	cdq    
10000a47:	f7 7b 1c             	idiv   DWORD PTR [ebx+0x1c]
10000a4a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000a4e:	0f b6 44 13 10       	movzx  eax,BYTE PTR [ebx+edx*1+0x10]
10000a53:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000a57:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
10000a5b:	7d 3f                	jge    10000a9c <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe4>
10000a5d:	89 f8                	mov    eax,edi
10000a5f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000a63:	03 43 08             	add    eax,DWORD PTR [ebx+0x8]
10000a66:	99                   	cdq    
10000a67:	f7 7b 18             	idiv   DWORD PTR [ebx+0x18]
10000a6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000a6e:	0f a3 d0             	bt     eax,edx
10000a71:	73 0f                	jae    10000a82 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xca>
10000a73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000a76:	8b 10                	mov    edx,DWORD PTR [eax]
10000a78:	ff 33                	push   DWORD PTR [ebx]
10000a7a:	56                   	push   esi
10000a7b:	57                   	push   edi
10000a7c:	50                   	push   eax
10000a7d:	ff 52 24             	call   DWORD PTR [edx+0x24]
10000a80:	eb 14                	jmp    10000a96 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xde>
10000a82:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10000a85:	83 fa ff             	cmp    edx,0xffffffff
10000a88:	74 0f                	je     10000a99 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0xe1>
10000a8a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10000a8d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a8f:	52                   	push   edx
10000a90:	56                   	push   esi
10000a91:	57                   	push   edi
10000a92:	50                   	push   eax
10000a93:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10000a96:	83 c4 10             	add    esp,0x10
10000a99:	47                   	inc    edi
10000a9a:	eb bb                	jmp    10000a57 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x9f>
10000a9c:	46                   	inc    esi
10000a9d:	eb 98                	jmp    10000a37 <Context::clippedRect(int, int, int, int, CRect*, Brush*)+0x7f>
10000a9f:	83 c4 2c             	add    esp,0x2c
10000aa2:	5b                   	pop    ebx
10000aa3:	5e                   	pop    esi
10000aa4:	5f                   	pop    edi
10000aa5:	5d                   	pop    ebp
10000aa6:	c3                   	ret    
10000aa7:	90                   	nop

10000aa8 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)>:
10000aa8:	55                   	push   ebp
10000aa9:	57                   	push   edi
10000aaa:	56                   	push   esi
10000aab:	53                   	push   ebx
10000aac:	83 ec 1c             	sub    esp,0x1c
10000aaf:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
10000ab3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000ab7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000aba:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000abe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000ac2:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10000ac5:	39 c2                	cmp    edx,eax
10000ac7:	0f 8c c9 00 00 00    	jl     10000b96 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000acd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10000ad1:	01 c5                	add    ebp,eax
10000ad3:	8b 19                	mov    ebx,DWORD PTR [ecx]
10000ad5:	39 dd                	cmp    ebp,ebx
10000ad7:	0f 8e b9 00 00 00    	jle    10000b96 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000add:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10000ae1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000ae5:	03 70 10             	add    esi,DWORD PTR [eax+0x10]
10000ae8:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
10000aeb:	39 f0                	cmp    eax,esi
10000aed:	0f 8c a3 00 00 00    	jl     10000b96 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000af3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000af7:	01 f7                	add    edi,esi
10000af9:	8b 49 08             	mov    ecx,DWORD PTR [ecx+0x8]
10000afc:	39 cf                	cmp    edi,ecx
10000afe:	0f 8e 92 00 00 00    	jle    10000b96 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b04:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000b0c:	3b 5c 24 04          	cmp    ebx,DWORD PTR [esp+0x4]
10000b10:	7e 08                	jle    10000b1a <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x72>
10000b12:	2b 5c 24 04          	sub    ebx,DWORD PTR [esp+0x4]
10000b16:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000b1a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10000b1e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
10000b22:	39 ea                	cmp    edx,ebp
10000b24:	7d 09                	jge    10000b2f <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x87>
10000b26:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
10000b2a:	42                   	inc    edx
10000b2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000b2f:	31 db                	xor    ebx,ebx
10000b31:	39 f1                	cmp    ecx,esi
10000b33:	7e 04                	jle    10000b39 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x91>
10000b35:	29 f1                	sub    ecx,esi
10000b37:	89 cb                	mov    ebx,ecx
10000b39:	39 f8                	cmp    eax,edi
10000b3b:	7d 07                	jge    10000b44 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0x9c>
10000b3d:	29 f0                	sub    eax,esi
10000b3f:	40                   	inc    eax
10000b40:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10000b44:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
10000b47:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
10000b4c:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
10000b50:	89 e8                	mov    eax,ebp
10000b52:	29 f0                	sub    eax,esi
10000b54:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
10000b58:	7e 3c                	jle    10000b96 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xee>
10000b5a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10000b5e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
10000b62:	7e 2b                	jle    10000b8f <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xe7>
10000b64:	0f b6 04 3b          	movzx  eax,BYTE PTR [ebx+edi*1]
10000b68:	8b 14 85 00 00 00 00 	mov    edx,DWORD PTR [eax*4+0x0]	10000b6b: R_386_32	palette256
10000b6f:	83 fa ff             	cmp    edx,0xffffffff
10000b72:	74 18                	je     10000b8c <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xe4>
10000b74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000b78:	8b 00                	mov    eax,DWORD PTR [eax]
10000b7a:	8b 08                	mov    ecx,DWORD PTR [eax]
10000b7c:	52                   	push   edx
10000b7d:	55                   	push   ebp
10000b7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000b82:	01 fa                	add    edx,edi
10000b84:	52                   	push   edx
10000b85:	50                   	push   eax
10000b86:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10000b89:	83 c4 10             	add    esp,0x10
10000b8c:	47                   	inc    edi
10000b8d:	eb cf                	jmp    10000b5e <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xb6>
10000b8f:	45                   	inc    ebp
10000b90:	03 5c 24 40          	add    ebx,DWORD PTR [esp+0x40]
10000b94:	eb ba                	jmp    10000b50 <Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)+0xa8>
10000b96:	83 c4 1c             	add    esp,0x1c
10000b99:	5b                   	pop    ebx
10000b9a:	5e                   	pop    esi
10000b9b:	5f                   	pop    edi
10000b9c:	5d                   	pop    ebp
10000b9d:	c3                   	ret    

10000b9e <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)>:
10000b9e:	55                   	push   ebp
10000b9f:	57                   	push   edi
10000ba0:	56                   	push   esi
10000ba1:	53                   	push   ebx
10000ba2:	83 ec 1c             	sub    esp,0x1c
10000ba5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
10000ba9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000bad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000bb0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000bb4:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
10000bb7:	39 c1                	cmp    ecx,eax
10000bb9:	0f 8c c1 00 00 00    	jl     10000c80 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000bbf:	89 c5                	mov    ebp,eax
10000bc1:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10000bc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000bc9:	8b 1e                	mov    ebx,DWORD PTR [esi]
10000bcb:	39 d8                	cmp    eax,ebx
10000bcd:	0f 8e ad 00 00 00    	jle    10000c80 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000bd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10000bd7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
10000bdb:	03 42 10             	add    eax,DWORD PTR [edx+0x10]
10000bde:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
10000be1:	39 c2                	cmp    edx,eax
10000be3:	0f 8c 97 00 00 00    	jl     10000c80 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000be9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000bed:	01 c7                	add    edi,eax
10000bef:	8b 76 08             	mov    esi,DWORD PTR [esi+0x8]
10000bf2:	39 f7                	cmp    edi,esi
10000bf4:	0f 8e 86 00 00 00    	jle    10000c80 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000bfa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000c02:	39 eb                	cmp    ebx,ebp
10000c04:	7e 06                	jle    10000c0c <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x6e>
10000c06:	29 eb                	sub    ebx,ebp
10000c08:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10000c0c:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
10000c10:	7d 07                	jge    10000c19 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x7b>
10000c12:	29 e9                	sub    ecx,ebp
10000c14:	41                   	inc    ecx
10000c15:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10000c19:	31 db                	xor    ebx,ebx
10000c1b:	39 c6                	cmp    esi,eax
10000c1d:	7e 04                	jle    10000c23 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x85>
10000c1f:	89 f3                	mov    ebx,esi
10000c21:	29 c3                	sub    ebx,eax
10000c23:	39 fa                	cmp    edx,edi
10000c25:	7d 07                	jge    10000c2e <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x90>
10000c27:	29 c2                	sub    edx,eax
10000c29:	42                   	inc    edx
10000c2a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
10000c2e:	01 d8                	add    eax,ebx
10000c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000c34:	39 5c 24 44          	cmp    DWORD PTR [esp+0x44],ebx
10000c38:	7e 46                	jle    10000c80 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xe2>
10000c3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000c3e:	0f b6 34 18          	movzx  esi,BYTE PTR [eax+ebx*1]
10000c42:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
10000c46:	d3 e6                	shl    esi,cl
10000c48:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10000c4c:	39 7c 24 40          	cmp    DWORD PTR [esp+0x40],edi
10000c50:	7e 27                	jle    10000c79 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xdb>
10000c52:	89 f0                	mov    eax,esi
10000c54:	84 c0                	test   al,al
10000c56:	79 1c                	jns    10000c74 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xd6>
10000c58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000c5c:	8b 00                	mov    eax,DWORD PTR [eax]
10000c5e:	8b 10                	mov    edx,DWORD PTR [eax]
10000c60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000c64:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10000c68:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
10000c6c:	51                   	push   ecx
10000c6d:	50                   	push   eax
10000c6e:	ff 52 24             	call   DWORD PTR [edx+0x24]
10000c71:	83 c4 10             	add    esp,0x10
10000c74:	d1 e6                	shl    esi,1
10000c76:	47                   	inc    edi
10000c77:	eb d3                	jmp    10000c4c <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0xae>
10000c79:	43                   	inc    ebx
10000c7a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
10000c7e:	eb b4                	jmp    10000c34 <Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)+0x96>
10000c80:	83 c4 1c             	add    esp,0x1c
10000c83:	5b                   	pop    ebx
10000c84:	5e                   	pop    esi
10000c85:	5f                   	pop    edi
10000c86:	5d                   	pop    ebp
10000c87:	c3                   	ret    

10000c88 <Context::drawBitmap8(unsigned char*, int, int, int, int)>:
10000c88:	55                   	push   ebp
10000c89:	57                   	push   edi
10000c8a:	56                   	push   esi
10000c8b:	53                   	push   ebx
10000c8c:	83 ec 1c             	sub    esp,0x1c
10000c8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10000c93:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
10000c97:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
10000c9b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000c9e:	8b 00                	mov    eax,DWORD PTR [eax]
10000ca0:	e8 d7 fb ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10000ca5:	85 c0                	test   eax,eax
10000ca7:	74 38                	je     10000ce1 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x59>
10000ca9:	31 f6                	xor    esi,esi
10000cab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000cae:	8b 08                	mov    ecx,DWORD PTR [eax]
10000cb0:	89 c8                	mov    eax,ecx
10000cb2:	e8 c5 fb ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10000cb7:	39 f0                	cmp    eax,esi
10000cb9:	7e 68                	jle    10000d23 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x9b>
10000cbb:	89 f2                	mov    edx,esi
10000cbd:	89 c8                	mov    eax,ecx
10000cbf:	e8 c8 fb ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000cc4:	52                   	push   edx
10000cc5:	ff 30                	push   DWORD PTR [eax]
10000cc7:	55                   	push   ebp
10000cc8:	57                   	push   edi
10000cc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000ccd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000cd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000cd5:	53                   	push   ebx
10000cd6:	e8 fc ff ff ff       	call   10000cd7 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x4f>	10000cd7: R_386_PC32	Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)
10000cdb:	46                   	inc    esi
10000cdc:	83 c4 20             	add    esp,0x20
10000cdf:	eb ca                	jmp    10000cab <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x23>
10000ce1:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10000ce5:	75 3c                	jne    10000d23 <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x9b>
10000ce7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000cef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10000cf9:	48                   	dec    eax
10000cfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000cfe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000d01:	48                   	dec    eax
10000d02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000d06:	50                   	push   eax
10000d07:	8d 44 24 04          	lea    eax,[esp+0x4]
10000d0b:	50                   	push   eax
10000d0c:	55                   	push   ebp
10000d0d:	57                   	push   edi
10000d0e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d12:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d16:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d1a:	53                   	push   ebx
10000d1b:	e8 fc ff ff ff       	call   10000d1c <Context::drawBitmap8(unsigned char*, int, int, int, int)+0x94>	10000d1c: R_386_PC32	Context::clippedBitmap8(unsigned char*, int, int, int, int, CRect*)
10000d20:	83 c4 20             	add    esp,0x20
10000d23:	83 c4 1c             	add    esp,0x1c
10000d26:	5b                   	pop    ebx
10000d27:	5e                   	pop    esi
10000d28:	5f                   	pop    edi
10000d29:	5d                   	pop    ebp
10000d2a:	c3                   	ret    
10000d2b:	90                   	nop

10000d2c <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)>:
10000d2c:	55                   	push   ebp
10000d2d:	57                   	push   edi
10000d2e:	56                   	push   esi
10000d2f:	53                   	push   ebx
10000d30:	83 ec 1c             	sub    esp,0x1c
10000d33:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10000d37:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10000d3b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
10000d3f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000d42:	8b 00                	mov    eax,DWORD PTR [eax]
10000d44:	e8 33 fb ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10000d49:	85 c0                	test   eax,eax
10000d4b:	74 3b                	je     10000d88 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x5c>
10000d4d:	31 f6                	xor    esi,esi
10000d4f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000d52:	8b 08                	mov    ecx,DWORD PTR [eax]
10000d54:	89 c8                	mov    eax,ecx
10000d56:	e8 21 fb ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10000d5b:	39 f0                	cmp    eax,esi
10000d5d:	7e 6e                	jle    10000dcd <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0xa1>
10000d5f:	89 f2                	mov    edx,esi
10000d61:	89 c8                	mov    eax,ecx
10000d63:	e8 24 fb ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000d68:	55                   	push   ebp
10000d69:	ff 30                	push   DWORD PTR [eax]
10000d6b:	57                   	push   edi
10000d6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d70:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d74:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d78:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000d7c:	53                   	push   ebx
10000d7d:	e8 fc ff ff ff       	call   10000d7e <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x52>	10000d7e: R_386_PC32	Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)
10000d82:	46                   	inc    esi
10000d83:	83 c4 20             	add    esp,0x20
10000d86:	eb c7                	jmp    10000d4f <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x23>
10000d88:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
10000d8c:	75 3f                	jne    10000dcd <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0xa1>
10000d8e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000d96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000d9d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10000da0:	48                   	dec    eax
10000da1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000da5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000da8:	48                   	dec    eax
10000da9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000dad:	55                   	push   ebp
10000dae:	8d 44 24 04          	lea    eax,[esp+0x4]
10000db2:	50                   	push   eax
10000db3:	57                   	push   edi
10000db4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000db8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dbc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dc0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000dc4:	53                   	push   ebx
10000dc5:	e8 fc ff ff ff       	call   10000dc6 <Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)+0x9a>	10000dc6: R_386_PC32	Context::clippedBitmap1(unsigned char*, int, int, int, int, CRect*, unsigned int)
10000dca:	83 c4 20             	add    esp,0x20
10000dcd:	83 c4 1c             	add    esp,0x1c
10000dd0:	5b                   	pop    ebx
10000dd1:	5e                   	pop    esi
10000dd2:	5f                   	pop    edi
10000dd3:	5d                   	pop    ebp
10000dd4:	c3                   	ret    

10000dd5 <drawEllipse(unsigned char*, int, int, int, int, bool)>:
10000dd5:	c3                   	ret    

10000dd6 <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)>:
10000dd6:	55                   	push   ebp
10000dd7:	57                   	push   edi
10000dd8:	56                   	push   esi
10000dd9:	53                   	push   ebx
10000dda:	83 ec 38             	sub    esp,0x38
10000ddd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10000de1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000de5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000de9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000ded:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10000df1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000df5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
10000df9:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
10000dfd:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
10000e01:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10000e05:	89 f1                	mov    ecx,esi
10000e07:	0f af cd             	imul   ecx,ebp
10000e0a:	51                   	push   ecx
10000e0b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
10000e0f:	e8 fc ff ff ff       	call   10000e10 <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)+0x3a>	10000e10: R_386_PC32	malloc
10000e14:	89 c3                	mov    ebx,eax
10000e16:	31 c0                	xor    eax,eax
10000e18:	89 df                	mov    edi,ebx
10000e1a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
10000e1e:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000e20:	a1 00 00 00 00       	mov    eax,ds:0x0	10000e21: R_386_32	palette256
10000e25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10000e29:	8b 3d fc 03 00 00    	mov    edi,DWORD PTR ds:0x3fc	10000e2b: R_386_32	palette256
10000e2f:	c7 05 00 00 00 00 ff ff ff ff 	mov    DWORD PTR ds:0x0,0xffffffff	10000e31: R_386_32	palette256
10000e39:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
10000e3d:	89 15 fc 03 00 00    	mov    DWORD PTR ds:0x3fc,edx	10000e3f: R_386_32	palette256
10000e43:	58                   	pop    eax
10000e44:	5a                   	pop    edx
10000e45:	55                   	push   ebp
10000e46:	56                   	push   esi
10000e47:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000e4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000e4f:	53                   	push   ebx
10000e50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000e54:	e8 fc ff ff ff       	call   10000e55 <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)+0x7f>	10000e55: R_386_PC32	Context::drawBitmap8(unsigned char*, int, int, int, int)
10000e59:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10000e5d:	a3 00 00 00 00       	mov    ds:0x0,eax	10000e5e: R_386_32	palette256
10000e62:	89 3d fc 03 00 00    	mov    DWORD PTR ds:0x3fc,edi	10000e64: R_386_32	palette256
10000e68:	89 5c 24 60          	mov    DWORD PTR [esp+0x60],ebx
10000e6c:	83 c4 4c             	add    esp,0x4c
10000e6f:	5b                   	pop    ebx
10000e70:	5e                   	pop    esi
10000e71:	5f                   	pop    edi
10000e72:	5d                   	pop    ebp
10000e73:	e9 fc ff ff ff       	jmp    10000e74 <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)+0x9e>	10000e74: R_386_PC32	free

10000e78 <Context::clippedEllipse(bool, int, int, int, int, CRect*, Brush*)>:
10000e78:	c7 44 24 20 00 00 ff 00 	mov    DWORD PTR [esp+0x20],0xff0000
10000e80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
10000e85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000e89:	e9 48 ff ff ff       	jmp    10000dd6 <Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)>

10000e8e <Context::clippedRect(int, int, int, int, CRect*, unsigned int)>:
10000e8e:	55                   	push   ebp
10000e8f:	57                   	push   edi
10000e90:	56                   	push   esi
10000e91:	53                   	push   ebx
10000e92:	83 ec 1c             	sub    esp,0x1c
10000e95:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
10000e99:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10000e9d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10000ea1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10000ea5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10000ea9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10000ead:	01 ca                	add    edx,ecx
10000eaf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10000eb3:	01 fe                	add    esi,edi
10000eb5:	03 4d 0c             	add    ecx,DWORD PTR [ebp+0xc]
10000eb8:	03 7d 10             	add    edi,DWORD PTR [ebp+0x10]
10000ebb:	03 55 0c             	add    edx,DWORD PTR [ebp+0xc]
10000ebe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000ec2:	03 75 10             	add    esi,DWORD PTR [ebp+0x10]
10000ec5:	8b 13                	mov    edx,DWORD PTR [ebx]
10000ec7:	39 ca                	cmp    edx,ecx
10000ec9:	7d 02                	jge    10000ecd <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x3f>
10000ecb:	89 ca                	mov    edx,ecx
10000ecd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10000ed0:	39 f9                	cmp    ecx,edi
10000ed2:	7d 02                	jge    10000ed6 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x48>
10000ed4:	89 f9                	mov    ecx,edi
10000ed6:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10000ed9:	8b 2f                	mov    ebp,DWORD PTR [edi]
10000edb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10000edf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10000ee2:	40                   	inc    eax
10000ee3:	39 f0                	cmp    eax,esi
10000ee5:	7e 02                	jle    10000ee9 <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x5b>
10000ee7:	89 f0                	mov    eax,esi
10000ee9:	29 c8                	sub    eax,ecx
10000eeb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10000eef:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10000ef2:	40                   	inc    eax
10000ef3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10000ef7:	7e 04                	jle    10000efd <Context::clippedRect(int, int, int, int, CRect*, unsigned int)+0x6f>
10000ef9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000efd:	29 d0                	sub    eax,edx
10000eff:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10000f03:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
10000f07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10000f0b:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10000f0f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
10000f12:	83 c4 1c             	add    esp,0x1c
10000f15:	5b                   	pop    ebx
10000f16:	5e                   	pop    esi
10000f17:	5f                   	pop    edi
10000f18:	5d                   	pop    ebp
10000f19:	ff e0                	jmp    eax
10000f1b:	90                   	nop

10000f1c <Context::fillRect(int, int, int, int, Brush*)>:
10000f1c:	55                   	push   ebp
10000f1d:	57                   	push   edi
10000f1e:	56                   	push   esi
10000f1f:	53                   	push   ebx
10000f20:	83 ec 2c             	sub    esp,0x2c
10000f23:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10000f27:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10000f2b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
10000f2f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10000f33:	01 d8                	add    eax,ebx
10000f35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000f39:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10000f3d:	01 fa                	add    edx,edi
10000f3f:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
10000f42:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
10000f45:	85 db                	test   ebx,ebx
10000f47:	79 02                	jns    10000f4b <Context::fillRect(int, int, int, int, Brush*)+0x2f>
10000f49:	31 db                	xor    ebx,ebx
10000f4b:	85 ff                	test   edi,edi
10000f4d:	79 02                	jns    10000f51 <Context::fillRect(int, int, int, int, Brush*)+0x35>
10000f4f:	31 ff                	xor    edi,edi
10000f51:	89 e8                	mov    eax,ebp
10000f53:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
10000f57:	7e 04                	jle    10000f5d <Context::fillRect(int, int, int, int, Brush*)+0x41>
10000f59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10000f5d:	29 d8                	sub    eax,ebx
10000f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000f63:	89 c8                	mov    eax,ecx
10000f65:	39 d1                	cmp    ecx,edx
10000f67:	7e 02                	jle    10000f6b <Context::fillRect(int, int, int, int, Brush*)+0x4f>
10000f69:	89 d0                	mov    eax,edx
10000f6b:	29 f8                	sub    eax,edi
10000f6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000f71:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10000f74:	8b 00                	mov    eax,DWORD PTR [eax]
10000f76:	e8 01 f9 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10000f7b:	85 c0                	test   eax,eax
10000f7d:	74 38                	je     10000fb7 <Context::fillRect(int, int, int, int, Brush*)+0x9b>
10000f7f:	31 ed                	xor    ebp,ebp
10000f81:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10000f84:	8b 08                	mov    ecx,DWORD PTR [eax]
10000f86:	89 c8                	mov    eax,ecx
10000f88:	e8 ef f8 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10000f8d:	39 e8                	cmp    eax,ebp
10000f8f:	7e 65                	jle    10000ff6 <Context::fillRect(int, int, int, int, Brush*)+0xda>
10000f91:	89 ea                	mov    edx,ebp
10000f93:	89 c8                	mov    eax,ecx
10000f95:	e8 f2 f8 ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10000f9a:	52                   	push   edx
10000f9b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10000f9f:	ff 30                	push   DWORD PTR [eax]
10000fa1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000fa5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000fa9:	57                   	push   edi
10000faa:	53                   	push   ebx
10000fab:	56                   	push   esi
10000fac:	e8 fc ff ff ff       	call   10000fad <Context::fillRect(int, int, int, int, Brush*)+0x91>	10000fad: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
10000fb1:	45                   	inc    ebp
10000fb2:	83 c4 20             	add    esp,0x20
10000fb5:	eb ca                	jmp    10000f81 <Context::fillRect(int, int, int, int, Brush*)+0x65>
10000fb7:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
10000fbb:	75 39                	jne    10000ff6 <Context::fillRect(int, int, int, int, Brush*)+0xda>
10000fbd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
10000fc5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10000fcd:	49                   	dec    ecx
10000fce:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10000fd2:	8d 45 ff             	lea    eax,[ebp-0x1]
10000fd5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000fd9:	50                   	push   eax
10000fda:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10000fde:	8d 44 24 18          	lea    eax,[esp+0x18]
10000fe2:	50                   	push   eax
10000fe3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000fe7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000feb:	57                   	push   edi
10000fec:	53                   	push   ebx
10000fed:	56                   	push   esi
10000fee:	e8 fc ff ff ff       	call   10000fef <Context::fillRect(int, int, int, int, Brush*)+0xd3>	10000fef: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, Brush*)
10000ff3:	83 c4 20             	add    esp,0x20
10000ff6:	83 c4 2c             	add    esp,0x2c
10000ff9:	5b                   	pop    ebx
10000ffa:	5e                   	pop    esi
10000ffb:	5f                   	pop    edi
10000ffc:	5d                   	pop    ebp
10000ffd:	c3                   	ret    

10000ffe <Context::fillRect(int, int, int, int, unsigned int)>:
10000ffe:	55                   	push   ebp
10000fff:	57                   	push   edi
10001000:	56                   	push   esi
10001001:	53                   	push   ebx
10001002:	83 ec 2c             	sub    esp,0x2c
10001005:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10001009:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
1000100d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
10001011:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001015:	01 d8                	add    eax,ebx
10001017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000101b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
1000101f:	01 fa                	add    edx,edi
10001021:	8b 6e 04             	mov    ebp,DWORD PTR [esi+0x4]
10001024:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
10001027:	85 db                	test   ebx,ebx
10001029:	79 02                	jns    1000102d <Context::fillRect(int, int, int, int, unsigned int)+0x2f>
1000102b:	31 db                	xor    ebx,ebx
1000102d:	85 ff                	test   edi,edi
1000102f:	79 02                	jns    10001033 <Context::fillRect(int, int, int, int, unsigned int)+0x35>
10001031:	31 ff                	xor    edi,edi
10001033:	89 e8                	mov    eax,ebp
10001035:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
10001039:	7e 04                	jle    1000103f <Context::fillRect(int, int, int, int, unsigned int)+0x41>
1000103b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000103f:	29 d8                	sub    eax,ebx
10001041:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001045:	89 c8                	mov    eax,ecx
10001047:	39 d1                	cmp    ecx,edx
10001049:	7e 02                	jle    1000104d <Context::fillRect(int, int, int, int, unsigned int)+0x4f>
1000104b:	89 d0                	mov    eax,edx
1000104d:	29 f8                	sub    eax,edi
1000104f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001053:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001056:	8b 00                	mov    eax,DWORD PTR [eax]
10001058:	e8 1f f8 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
1000105d:	85 c0                	test   eax,eax
1000105f:	74 38                	je     10001099 <Context::fillRect(int, int, int, int, unsigned int)+0x9b>
10001061:	31 ed                	xor    ebp,ebp
10001063:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001066:	8b 08                	mov    ecx,DWORD PTR [eax]
10001068:	89 c8                	mov    eax,ecx
1000106a:	e8 0d f8 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
1000106f:	39 e8                	cmp    eax,ebp
10001071:	7e 65                	jle    100010d8 <Context::fillRect(int, int, int, int, unsigned int)+0xda>
10001073:	89 ea                	mov    edx,ebp
10001075:	89 c8                	mov    eax,ecx
10001077:	e8 10 f8 ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
1000107c:	52                   	push   edx
1000107d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001081:	ff 30                	push   DWORD PTR [eax]
10001083:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001087:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000108b:	57                   	push   edi
1000108c:	53                   	push   ebx
1000108d:	56                   	push   esi
1000108e:	e8 fc ff ff ff       	call   1000108f <Context::fillRect(int, int, int, int, unsigned int)+0x91>	1000108f: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
10001093:	45                   	inc    ebp
10001094:	83 c4 20             	add    esp,0x20
10001097:	eb ca                	jmp    10001063 <Context::fillRect(int, int, int, int, unsigned int)+0x65>
10001099:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
1000109d:	75 39                	jne    100010d8 <Context::fillRect(int, int, int, int, unsigned int)+0xda>
1000109f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
100010a7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
100010af:	49                   	dec    ecx
100010b0:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100010b4:	8d 45 ff             	lea    eax,[ebp-0x1]
100010b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100010bb:	50                   	push   eax
100010bc:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100010c0:	8d 44 24 18          	lea    eax,[esp+0x18]
100010c4:	50                   	push   eax
100010c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100010c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100010cd:	57                   	push   edi
100010ce:	53                   	push   ebx
100010cf:	56                   	push   esi
100010d0:	e8 fc ff ff ff       	call   100010d1 <Context::fillRect(int, int, int, int, unsigned int)+0xd3>	100010d1: R_386_PC32	Context::clippedRect(int, int, int, int, CRect*, unsigned int)
100010d5:	83 c4 20             	add    esp,0x20
100010d8:	83 c4 2c             	add    esp,0x2c
100010db:	5b                   	pop    ebx
100010dc:	5e                   	pop    esi
100010dd:	5f                   	pop    edi
100010de:	5d                   	pop    ebp
100010df:	c3                   	ret    

100010e0 <Context::drawHorizontalLine(int, int, int, unsigned int)>:
100010e0:	83 ec 14             	sub    esp,0x14
100010e3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100010e7:	6a 01                	push   0x1
100010e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100010ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100010f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100010f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100010f9:	e8 fc ff ff ff       	call   100010fa <Context::drawHorizontalLine(int, int, int, unsigned int)+0x1a>	100010fa: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
100010fe:	83 c4 2c             	add    esp,0x2c
10001101:	c3                   	ret    

10001102 <Context::drawVerticalLine(int, int, int, unsigned int)>:
10001102:	83 ec 14             	sub    esp,0x14
10001105:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10001109:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000110d:	6a 01                	push   0x1
1000110f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001113:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001117:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000111b:	e8 fc ff ff ff       	call   1000111c <Context::drawVerticalLine(int, int, int, unsigned int)+0x1a>	1000111c: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
10001120:	83 c4 2c             	add    esp,0x2c
10001123:	c3                   	ret    

10001124 <Context::drawRect(int, int, int, int, unsigned int)>:
10001124:	55                   	push   ebp
10001125:	57                   	push   edi
10001126:	56                   	push   esi
10001127:	53                   	push   ebx
10001128:	83 ec 28             	sub    esp,0x28
1000112b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
1000112f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10001133:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10001137:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
1000113b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
1000113f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001143:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
10001147:	57                   	push   edi
10001148:	55                   	push   ebp
10001149:	52                   	push   edx
1000114a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
1000114e:	56                   	push   esi
1000114f:	53                   	push   ebx
10001150:	e8 fc ff ff ff       	call   10001151 <Context::drawRect(int, int, int, int, unsigned int)+0x2d>	10001151: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
10001155:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001159:	8d 48 fe             	lea    ecx,[eax-0x2]
1000115c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10001160:	8d 42 01             	lea    eax,[edx+0x1]
10001163:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
10001167:	83 c4 14             	add    esp,0x14
1000116a:	57                   	push   edi
1000116b:	51                   	push   ecx
1000116c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10001170:	50                   	push   eax
10001171:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001175:	56                   	push   esi
10001176:	53                   	push   ebx
10001177:	e8 fc ff ff ff       	call   10001178 <Context::drawRect(int, int, int, int, unsigned int)+0x54>	10001178: R_386_PC32	Context::drawVerticalLine(int, int, int, unsigned int)
1000117c:	83 c4 14             	add    esp,0x14
1000117f:	57                   	push   edi
10001180:	55                   	push   ebp
10001181:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001185:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001189:	8d 54 02 ff          	lea    edx,[edx+eax*1-0x1]
1000118d:	52                   	push   edx
1000118e:	56                   	push   esi
1000118f:	53                   	push   ebx
10001190:	e8 fc ff ff ff       	call   10001191 <Context::drawRect(int, int, int, int, unsigned int)+0x6d>	10001191: R_386_PC32	Context::drawHorizontalLine(int, int, int, unsigned int)
10001195:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
10001199:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
1000119d:	89 4c 24 5c          	mov    DWORD PTR [esp+0x5c],ecx
100011a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100011a5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
100011a9:	8d 44 2e ff          	lea    eax,[esi+ebp*1-0x1]
100011ad:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100011b1:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
100011b5:	83 c4 3c             	add    esp,0x3c
100011b8:	5b                   	pop    ebx
100011b9:	5e                   	pop    esi
100011ba:	5f                   	pop    edi
100011bb:	5d                   	pop    ebp
100011bc:	e9 41 ff ff ff       	jmp    10001102 <Context::drawVerticalLine(int, int, int, unsigned int)>
100011c1:	90                   	nop

100011c2 <Context::ellipse(bool, int, int, int, int, unsigned int)>:
100011c2:	55                   	push   ebp
100011c3:	57                   	push   edi
100011c4:	56                   	push   esi
100011c5:	53                   	push   ebx
100011c6:	83 ec 1c             	sub    esp,0x1c
100011c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
100011cd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
100011d1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100011d5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
100011d9:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
100011dd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100011e1:	01 dd                	add    ebp,ebx
100011e3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
100011e7:	01 fa                	add    edx,edi
100011e9:	85 db                	test   ebx,ebx
100011eb:	79 02                	jns    100011ef <Context::ellipse(bool, int, int, int, int, unsigned int)+0x2d>
100011ed:	31 db                	xor    ebx,ebx
100011ef:	85 ff                	test   edi,edi
100011f1:	79 02                	jns    100011f5 <Context::ellipse(bool, int, int, int, int, unsigned int)+0x33>
100011f3:	31 ff                	xor    edi,edi
100011f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
100011f8:	39 e8                	cmp    eax,ebp
100011fa:	7e 02                	jle    100011fe <Context::ellipse(bool, int, int, int, int, unsigned int)+0x3c>
100011fc:	89 e8                	mov    eax,ebp
100011fe:	29 d8                	sub    eax,ebx
10001200:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001204:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
10001207:	39 d0                	cmp    eax,edx
10001209:	7e 02                	jle    1000120d <Context::ellipse(bool, int, int, int, int, unsigned int)+0x4b>
1000120b:	89 d0                	mov    eax,edx
1000120d:	29 f8                	sub    eax,edi
1000120f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001213:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10001216:	8b 00                	mov    eax,DWORD PTR [eax]
10001218:	e8 5f f6 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
1000121d:	85 c0                	test   eax,eax
1000121f:	74 44                	je     10001265 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xa3>
10001221:	31 ed                	xor    ebp,ebp
10001223:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10001228:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000122c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
1000122f:	8b 08                	mov    ecx,DWORD PTR [eax]
10001231:	89 c8                	mov    eax,ecx
10001233:	e8 44 f6 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10001238:	39 e8                	cmp    eax,ebp
1000123a:	7e 4c                	jle    10001288 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xc6>
1000123c:	89 ea                	mov    edx,ebp
1000123e:	89 c8                	mov    eax,ecx
10001240:	e8 47 f6 ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001245:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10001249:	ff 30                	push   DWORD PTR [eax]
1000124b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000124f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001253:	57                   	push   edi
10001254:	53                   	push   ebx
10001255:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10001259:	56                   	push   esi
1000125a:	e8 fc ff ff ff       	call   1000125b <Context::ellipse(bool, int, int, int, int, unsigned int)+0x99>	1000125b: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
1000125f:	45                   	inc    ebp
10001260:	83 c4 20             	add    esp,0x20
10001263:	eb c7                	jmp    1000122c <Context::ellipse(bool, int, int, int, int, unsigned int)+0x6a>
10001265:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
10001269:	75 1d                	jne    10001288 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xc6>
1000126b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
1000126f:	6a 00                	push   0x0
10001271:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001275:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001279:	57                   	push   edi
1000127a:	53                   	push   ebx
1000127b:	0f b6 c9             	movzx  ecx,cl
1000127e:	51                   	push   ecx
1000127f:	56                   	push   esi
10001280:	e8 fc ff ff ff       	call   10001281 <Context::ellipse(bool, int, int, int, int, unsigned int)+0xbf>	10001281: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
10001285:	83 c4 20             	add    esp,0x20
10001288:	83 c4 1c             	add    esp,0x1c
1000128b:	5b                   	pop    ebx
1000128c:	5e                   	pop    esi
1000128d:	5f                   	pop    edi
1000128e:	5d                   	pop    ebp
1000128f:	c3                   	ret    

10001290 <Context::ellipse(bool, int, int, int, int, Brush*)>:
10001290:	55                   	push   ebp
10001291:	57                   	push   edi
10001292:	56                   	push   esi
10001293:	53                   	push   ebx
10001294:	83 ec 1c             	sub    esp,0x1c
10001297:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
1000129b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
1000129f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100012a3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100012a7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
100012ab:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100012af:	01 dd                	add    ebp,ebx
100012b1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
100012b5:	01 f2                	add    edx,esi
100012b7:	85 db                	test   ebx,ebx
100012b9:	79 02                	jns    100012bd <Context::ellipse(bool, int, int, int, int, Brush*)+0x2d>
100012bb:	31 db                	xor    ebx,ebx
100012bd:	85 f6                	test   esi,esi
100012bf:	79 02                	jns    100012c3 <Context::ellipse(bool, int, int, int, int, Brush*)+0x33>
100012c1:	31 f6                	xor    esi,esi
100012c3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
100012c6:	39 e8                	cmp    eax,ebp
100012c8:	7e 02                	jle    100012cc <Context::ellipse(bool, int, int, int, int, Brush*)+0x3c>
100012ca:	89 e8                	mov    eax,ebp
100012cc:	29 d8                	sub    eax,ebx
100012ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100012d2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
100012d5:	39 d0                	cmp    eax,edx
100012d7:	7e 02                	jle    100012db <Context::ellipse(bool, int, int, int, int, Brush*)+0x4b>
100012d9:	89 d0                	mov    eax,edx
100012db:	29 f0                	sub    eax,esi
100012dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100012e1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
100012e4:	8b 00                	mov    eax,DWORD PTR [eax]
100012e6:	e8 91 f5 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
100012eb:	85 c0                	test   eax,eax
100012ed:	74 45                	je     10001334 <Context::ellipse(bool, int, int, int, int, Brush*)+0xa4>
100012ef:	31 ed                	xor    ebp,ebp
100012f1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
100012f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100012fa:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
100012fd:	8b 08                	mov    ecx,DWORD PTR [eax]
100012ff:	89 c8                	mov    eax,ecx
10001301:	e8 76 f5 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10001306:	39 e8                	cmp    eax,ebp
10001308:	7e 4e                	jle    10001358 <Context::ellipse(bool, int, int, int, int, Brush*)+0xc8>
1000130a:	89 ea                	mov    edx,ebp
1000130c:	89 c8                	mov    eax,ecx
1000130e:	e8 79 f5 ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001313:	68 00 00 ff 00       	push   0xff0000
10001318:	ff 30                	push   DWORD PTR [eax]
1000131a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000131e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001322:	56                   	push   esi
10001323:	53                   	push   ebx
10001324:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10001328:	57                   	push   edi
10001329:	e8 fc ff ff ff       	call   1000132a <Context::ellipse(bool, int, int, int, int, Brush*)+0x9a>	1000132a: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
1000132e:	45                   	inc    ebp
1000132f:	83 c4 20             	add    esp,0x20
10001332:	eb c6                	jmp    100012fa <Context::ellipse(bool, int, int, int, int, Brush*)+0x6a>
10001334:	80 7f 14 00          	cmp    BYTE PTR [edi+0x14],0x0
10001338:	75 1e                	jne    10001358 <Context::ellipse(bool, int, int, int, int, Brush*)+0xc8>
1000133a:	68 00 00 ff 00       	push   0xff0000
1000133f:	6a 00                	push   0x0
10001341:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001345:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001349:	56                   	push   esi
1000134a:	53                   	push   ebx
1000134b:	0f b6 c9             	movzx  ecx,cl
1000134e:	51                   	push   ecx
1000134f:	57                   	push   edi
10001350:	e8 fc ff ff ff       	call   10001351 <Context::ellipse(bool, int, int, int, int, Brush*)+0xc1>	10001351: R_386_PC32	Context::clippedEllipse(bool, int, int, int, int, CRect*, unsigned int)
10001355:	83 c4 20             	add    esp,0x20
10001358:	83 c4 1c             	add    esp,0x1c
1000135b:	5b                   	pop    ebx
1000135c:	5e                   	pop    esi
1000135d:	5f                   	pop    edi
1000135e:	5d                   	pop    ebp
1000135f:	c3                   	ret    

10001360 <CRect::split(CRect*)>:
10001360:	55                   	push   ebp
10001361:	57                   	push   edi
10001362:	56                   	push   esi
10001363:	53                   	push   ebx
10001364:	83 ec 28             	sub    esp,0x28
10001367:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
1000136b:	6a 08                	push   0x8
1000136d:	e8 fc ff ff ff       	call   1000136e <CRect::split(CRect*)+0xe>	1000136e: R_386_PC32	malloc
10001372:	89 c3                	mov    ebx,eax
10001374:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000137b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10001381:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
10001385:	8b 6a 08             	mov    ebp,DWORD PTR [edx+0x8]
10001388:	8b 3a                	mov    edi,DWORD PTR [edx]
1000138a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
1000138d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001391:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
10001394:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001398:	8b 16                	mov    edx,DWORD PTR [esi]
1000139a:	83 c4 10             	add    esp,0x10
1000139d:	39 d7                	cmp    edi,edx
1000139f:	7f 36                	jg     100013d7 <CRect::split(CRect*)+0x77>
100013a1:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
100013a5:	7c 30                	jl     100013d7 <CRect::split(CRect*)+0x77>
100013a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100013ab:	83 ec 0c             	sub    esp,0xc
100013ae:	6a 10                	push   0x10
100013b0:	e8 fc ff ff ff       	call   100013b1 <CRect::split(CRect*)+0x51>	100013b1: R_386_PC32	malloc
100013b5:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
100013b8:	89 38                	mov    DWORD PTR [eax],edi
100013ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100013be:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
100013c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100013c5:	4a                   	dec    edx
100013c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100013c9:	59                   	pop    ecx
100013ca:	5f                   	pop    edi
100013cb:	50                   	push   eax
100013cc:	53                   	push   ebx
100013cd:	e8 fc ff ff ff       	call   100013ce <CRect::split(CRect*)+0x6e>	100013ce: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100013d2:	8b 3e                	mov    edi,DWORD PTR [esi]
100013d4:	83 c4 10             	add    esp,0x10
100013d7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
100013da:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
100013de:	7c 35                	jl     10001415 <CRect::split(CRect*)+0xb5>
100013e0:	39 d5                	cmp    ebp,edx
100013e2:	7f 31                	jg     10001415 <CRect::split(CRect*)+0xb5>
100013e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100013e8:	83 ec 0c             	sub    esp,0xc
100013eb:	6a 10                	push   0x10
100013ed:	e8 fc ff ff ff       	call   100013ee <CRect::split(CRect*)+0x8e>	100013ee: R_386_PC32	malloc
100013f2:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
100013f5:	89 38                	mov    DWORD PTR [eax],edi
100013f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100013fb:	4a                   	dec    edx
100013fc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100013ff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10001403:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10001406:	5d                   	pop    ebp
10001407:	5a                   	pop    edx
10001408:	50                   	push   eax
10001409:	53                   	push   ebx
1000140a:	e8 fc ff ff ff       	call   1000140b <CRect::split(CRect*)+0xab>	1000140b: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000140f:	8b 6e 08             	mov    ebp,DWORD PTR [esi+0x8]
10001412:	83 c4 10             	add    esp,0x10
10001415:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
10001418:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
1000141c:	7c 3d                	jl     1000145b <CRect::split(CRect*)+0xfb>
1000141e:	39 fa                	cmp    edx,edi
10001420:	7c 39                	jl     1000145b <CRect::split(CRect*)+0xfb>
10001422:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10001426:	83 ec 0c             	sub    esp,0xc
10001429:	6a 10                	push   0x10
1000142b:	e8 fc ff ff ff       	call   1000142c <CRect::split(CRect*)+0xcc>	1000142c: R_386_PC32	malloc
10001430:	89 68 08             	mov    DWORD PTR [eax+0x8],ebp
10001433:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10001437:	42                   	inc    edx
10001438:	89 10                	mov    DWORD PTR [eax],edx
1000143a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
1000143e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
10001441:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10001445:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10001448:	5a                   	pop    edx
10001449:	59                   	pop    ecx
1000144a:	50                   	push   eax
1000144b:	53                   	push   ebx
1000144c:	e8 fc ff ff ff       	call   1000144d <CRect::split(CRect*)+0xed>	1000144d: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
10001451:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10001454:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001458:	83 c4 10             	add    esp,0x10
1000145b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
1000145e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10001462:	7c 2e                	jl     10001492 <CRect::split(CRect*)+0x132>
10001464:	39 ee                	cmp    esi,ebp
10001466:	7c 2a                	jl     10001492 <CRect::split(CRect*)+0x132>
10001468:	83 ec 0c             	sub    esp,0xc
1000146b:	6a 10                	push   0x10
1000146d:	e8 fc ff ff ff       	call   1000146e <CRect::split(CRect*)+0x10e>	1000146e: R_386_PC32	malloc
10001472:	46                   	inc    esi
10001473:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
10001476:	89 38                	mov    DWORD PTR [eax],edi
10001478:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
1000147c:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
1000147f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10001483:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10001486:	5a                   	pop    edx
10001487:	59                   	pop    ecx
10001488:	50                   	push   eax
10001489:	53                   	push   ebx
1000148a:	e8 fc ff ff ff       	call   1000148b <CRect::split(CRect*)+0x12b>	1000148b: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	89 d8                	mov    eax,ebx
10001494:	83 c4 1c             	add    esp,0x1c
10001497:	5b                   	pop    ebx
10001498:	5e                   	pop    esi
10001499:	5f                   	pop    edi
1000149a:	5d                   	pop    ebp
1000149b:	c3                   	ret    

1000149c <Context::clearClipRects()>:
1000149c:	53                   	push   ebx
1000149d:	83 ec 08             	sub    esp,0x8
100014a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100014a4:	c6 43 14 00          	mov    BYTE PTR [ebx+0x14],0x0
100014a8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
100014ab:	8b 08                	mov    ecx,DWORD PTR [eax]
100014ad:	89 c8                	mov    eax,ecx
100014af:	e8 c8 f3 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
100014b4:	85 c0                	test   eax,eax
100014b6:	74 19                	je     100014d1 <Context::clearClipRects()+0x35>
100014b8:	50                   	push   eax
100014b9:	50                   	push   eax
100014ba:	6a 10                	push   0x10
100014bc:	ff 31                	push   DWORD PTR [ecx]
100014be:	e8 fc ff ff ff       	call   100014bf <Context::clearClipRects()+0x23>	100014bf: R_386_PC32	operator delete(void*, unsigned long)
100014c3:	58                   	pop    eax
100014c4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
100014c7:	e8 fc ff ff ff       	call   100014c8 <Context::clearClipRects()+0x2c>	100014c8: R_386_PC32	List<CRect*>::deleteHead()
100014cc:	83 c4 10             	add    esp,0x10
100014cf:	eb d7                	jmp    100014a8 <Context::clearClipRects()+0xc>
100014d1:	83 c4 08             	add    esp,0x8
100014d4:	5b                   	pop    ebx
100014d5:	c3                   	ret    

100014d6 <Context::subClipRect(CRect*)>:
100014d6:	55                   	push   ebp
100014d7:	57                   	push   edi
100014d8:	56                   	push   esi
100014d9:	53                   	push   ebx
100014da:	83 ec 1c             	sub    esp,0x1c
100014dd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100014e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100014e5:	c6 40 14 01          	mov    BYTE PTR [eax+0x14],0x1
100014e9:	31 db                	xor    ebx,ebx
100014eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100014ef:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
100014f2:	8b 29                	mov    ebp,DWORD PTR [ecx]
100014f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100014f8:	89 e8                	mov    eax,ebp
100014fa:	e8 7d f3 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
100014ff:	39 d8                	cmp    eax,ebx
10001501:	0f 8e d4 00 00 00    	jle    100015db <Context::subClipRect(CRect*)+0x105>
10001507:	89 da                	mov    edx,ebx
10001509:	89 e8                	mov    eax,ebp
1000150b:	e8 7c f3 ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001510:	8b 38                	mov    edi,DWORD PTR [eax]
10001512:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
10001515:	39 17                	cmp    DWORD PTR [edi],edx
10001517:	7f 1b                	jg     10001534 <Context::subClipRect(CRect*)+0x5e>
10001519:	8b 16                	mov    edx,DWORD PTR [esi]
1000151b:	39 57 04             	cmp    DWORD PTR [edi+0x4],edx
1000151e:	7c 14                	jl     10001534 <Context::subClipRect(CRect*)+0x5e>
10001520:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
10001523:	39 57 08             	cmp    DWORD PTR [edi+0x8],edx
10001526:	7f 0c                	jg     10001534 <Context::subClipRect(CRect*)+0x5e>
10001528:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
1000152b:	39 57 0c             	cmp    DWORD PTR [edi+0xc],edx
1000152e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10001532:	7d 03                	jge    10001537 <Context::subClipRect(CRect*)+0x61>
10001534:	43                   	inc    ebx
10001535:	eb b4                	jmp    100014eb <Context::subClipRect(CRect*)+0x15>
10001537:	39 e8                	cmp    eax,ebp
10001539:	75 07                	jne    10001542 <Context::subClipRect(CRect*)+0x6c>
1000153b:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
1000153e:	89 19                	mov    DWORD PTR [ecx],ebx
10001540:	eb 19                	jmp    1000155b <Context::subClipRect(CRect*)+0x85>
10001542:	3b 41 04             	cmp    eax,DWORD PTR [ecx+0x4]
10001545:	75 08                	jne    1000154f <Context::subClipRect(CRect*)+0x79>
10001547:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
1000154a:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
1000154d:	eb 0c                	jmp    1000155b <Context::subClipRect(CRect*)+0x85>
1000154f:	8b 68 08             	mov    ebp,DWORD PTR [eax+0x8]
10001552:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10001555:	89 5d 04             	mov    DWORD PTR [ebp+0x4],ebx
10001558:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
1000155b:	8b 19                	mov    ebx,DWORD PTR [ecx]
1000155d:	85 db                	test   ebx,ebx
1000155f:	74 0a                	je     1000156b <Context::subClipRect(CRect*)+0x95>
10001561:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10001568:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
1000156b:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
10001572:	55                   	push   ebp
10001573:	55                   	push   ebp
10001574:	6a 0c                	push   0xc
10001576:	50                   	push   eax
10001577:	e8 fc ff ff ff       	call   10001578 <Context::subClipRect(CRect*)+0xa2>	10001578: R_386_PC32	operator delete(void*, unsigned long)
1000157c:	58                   	pop    eax
1000157d:	5a                   	pop    edx
1000157e:	56                   	push   esi
1000157f:	57                   	push   edi
10001580:	e8 fc ff ff ff       	call   10001581 <Context::subClipRect(CRect*)+0xab>	10001581: R_386_PC32	CRect::split(CRect*)
10001585:	89 c5                	mov    ebp,eax
10001587:	59                   	pop    ecx
10001588:	5b                   	pop    ebx
10001589:	6a 10                	push   0x10
1000158b:	57                   	push   edi
1000158c:	e8 fc ff ff ff       	call   1000158d <Context::subClipRect(CRect*)+0xb7>	1000158d: R_386_PC32	operator delete(void*, unsigned long)
10001591:	83 c4 10             	add    esp,0x10
10001594:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
10001597:	89 c8                	mov    eax,ecx
10001599:	e8 de f2 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
1000159e:	89 c3                	mov    ebx,eax
100015a0:	85 c0                	test   eax,eax
100015a2:	74 1c                	je     100015c0 <Context::subClipRect(CRect*)+0xea>
100015a4:	8b 19                	mov    ebx,DWORD PTR [ecx]
100015a6:	83 ec 0c             	sub    esp,0xc
100015a9:	55                   	push   ebp
100015aa:	e8 fc ff ff ff       	call   100015ab <Context::subClipRect(CRect*)+0xd5>	100015ab: R_386_PC32	List<CRect*>::deleteHead()
100015af:	59                   	pop    ecx
100015b0:	5f                   	pop    edi
100015b1:	53                   	push   ebx
100015b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100015b6:	ff 70 18             	push   DWORD PTR [eax+0x18]
100015b9:	e8 fc ff ff ff       	call   100015ba <Context::subClipRect(CRect*)+0xe4>	100015ba: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
100015be:	eb d1                	jmp    10001591 <Context::subClipRect(CRect*)+0xbb>
100015c0:	83 ec 0c             	sub    esp,0xc
100015c3:	55                   	push   ebp
100015c4:	e8 fc ff ff ff       	call   100015c5 <Context::subClipRect(CRect*)+0xef>	100015c5: R_386_PC32	List<CRect*>::~List()
100015c9:	58                   	pop    eax
100015ca:	5a                   	pop    edx
100015cb:	6a 08                	push   0x8
100015cd:	55                   	push   ebp
100015ce:	e8 fc ff ff ff       	call   100015cf <Context::subClipRect(CRect*)+0xf9>	100015cf: R_386_PC32	operator delete(void*, unsigned long)
100015d3:	83 c4 10             	add    esp,0x10
100015d6:	e9 10 ff ff ff       	jmp    100014eb <Context::subClipRect(CRect*)+0x15>
100015db:	83 c4 1c             	add    esp,0x1c
100015de:	5b                   	pop    ebx
100015df:	5e                   	pop    esi
100015e0:	5f                   	pop    edi
100015e1:	5d                   	pop    ebp
100015e2:	c3                   	ret    
100015e3:	90                   	nop

100015e4 <Context::addClipRect(CRect*)>:
100015e4:	56                   	push   esi
100015e5:	53                   	push   ebx
100015e6:	83 ec 0c             	sub    esp,0xc
100015e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100015ed:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
100015f1:	56                   	push   esi
100015f2:	53                   	push   ebx
100015f3:	e8 fc ff ff ff       	call   100015f4 <Context::addClipRect(CRect*)+0x10>	100015f4: R_386_PC32	Context::subClipRect(CRect*)
100015f8:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100015fc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
100015ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001603:	83 c4 14             	add    esp,0x14
10001606:	5b                   	pop    ebx
10001607:	5e                   	pop    esi
10001608:	e9 fc ff ff ff       	jmp    10001609 <Context::addClipRect(CRect*)+0x25>	10001609: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000160d:	90                   	nop

1000160e <Context::intersectClipRect(CRect*)>:
1000160e:	55                   	push   ebp
1000160f:	57                   	push   edi
10001610:	56                   	push   esi
10001611:	53                   	push   ebx
10001612:	83 ec 28             	sub    esp,0x28
10001615:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001619:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
1000161d:	c6 46 14 01          	mov    BYTE PTR [esi+0x14],0x1
10001621:	6a 08                	push   0x8
10001623:	e8 fc ff ff ff       	call   10001624 <Context::intersectClipRect(CRect*)+0x16>	10001624: R_386_PC32	malloc
10001628:	89 c7                	mov    edi,eax
1000162a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001631:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10001637:	83 c4 10             	add    esp,0x10
1000163a:	31 db                	xor    ebx,ebx
1000163c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
1000163f:	8b 08                	mov    ecx,DWORD PTR [eax]
10001641:	89 c8                	mov    eax,ecx
10001643:	e8 34 f2 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
10001648:	39 d8                	cmp    eax,ebx
1000164a:	7e 59                	jle    100016a5 <Context::intersectClipRect(CRect*)+0x97>
1000164c:	89 da                	mov    edx,ebx
1000164e:	89 c8                	mov    eax,ecx
10001650:	e8 37 f2 ff ff       	call   1000088c <List<CRect*>::getDesiredElement(int) [clone .isra.1]>
10001655:	51                   	push   ecx
10001656:	51                   	push   ecx
10001657:	55                   	push   ebp
10001658:	ff 30                	push   DWORD PTR [eax]
1000165a:	e8 fc ff ff ff       	call   1000165b <Context::intersectClipRect(CRect*)+0x4d>	1000165b: R_386_PC32	CRect::intersect(CRect*)
1000165f:	83 c4 10             	add    esp,0x10
10001662:	85 c0                	test   eax,eax
10001664:	74 0c                	je     10001672 <Context::intersectClipRect(CRect*)+0x64>
10001666:	52                   	push   edx
10001667:	52                   	push   edx
10001668:	50                   	push   eax
10001669:	57                   	push   edi
1000166a:	e8 fc ff ff ff       	call   1000166b <Context::intersectClipRect(CRect*)+0x5d>	1000166b: R_386_PC32	List<CRect*>::insertAtTail(CRect*)
1000166f:	83 c4 10             	add    esp,0x10
10001672:	43                   	inc    ebx
10001673:	eb c7                	jmp    1000163c <Context::intersectClipRect(CRect*)+0x2e>
10001675:	85 c0                	test   eax,eax
10001677:	74 43                	je     100016bc <Context::intersectClipRect(CRect*)+0xae>
10001679:	85 c9                	test   ecx,ecx
1000167b:	74 f8                	je     10001675 <Context::intersectClipRect(CRect*)+0x67>
1000167d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10001680:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
10001683:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001687:	51                   	push   ecx
10001688:	51                   	push   ecx
10001689:	6a 0c                	push   0xc
1000168b:	52                   	push   edx
1000168c:	e8 fc ff ff ff       	call   1000168d <Context::intersectClipRect(CRect*)+0x7f>	1000168d: R_386_PC32	operator delete(void*, unsigned long)
10001691:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001695:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10001698:	83 c4 10             	add    esp,0x10
1000169b:	85 c0                	test   eax,eax
1000169d:	75 14                	jne    100016b3 <Context::intersectClipRect(CRect*)+0xa5>
1000169f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
100016a5:	8b 5e 18             	mov    ebx,DWORD PTR [esi+0x18]
100016a8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100016aa:	89 c8                	mov    eax,ecx
100016ac:	e8 cb f1 ff ff       	call   1000087c <List<CRect*>::length() [clone .isra.0]>
100016b1:	eb c2                	jmp    10001675 <Context::intersectClipRect(CRect*)+0x67>
100016b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100016ba:	eb e9                	jmp    100016a5 <Context::intersectClipRect(CRect*)+0x97>
100016bc:	83 ec 0c             	sub    esp,0xc
100016bf:	53                   	push   ebx
100016c0:	e8 fc ff ff ff       	call   100016c1 <Context::intersectClipRect(CRect*)+0xb3>	100016c1: R_386_PC32	List<CRect*>::~List()
100016c5:	58                   	pop    eax
100016c6:	5a                   	pop    edx
100016c7:	6a 08                	push   0x8
100016c9:	53                   	push   ebx
100016ca:	e8 fc ff ff ff       	call   100016cb <Context::intersectClipRect(CRect*)+0xbd>	100016cb: R_386_PC32	operator delete(void*, unsigned long)
100016cf:	89 7e 18             	mov    DWORD PTR [esi+0x18],edi
100016d2:	c7 44 24 44 10 00 00 00 	mov    DWORD PTR [esp+0x44],0x10
100016da:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
100016de:	83 c4 2c             	add    esp,0x2c
100016e1:	5b                   	pop    ebx
100016e2:	5e                   	pop    esi
100016e3:	5f                   	pop    edi
100016e4:	5d                   	pop    ebp
100016e5:	e9 fc ff ff ff       	jmp    100016e6 <Context::intersectClipRect(CRect*)+0xd8>	100016e6: R_386_PC32	operator delete(void*, unsigned long)

100016ea <startMouse()>:
100016ea:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100016ec: R_386_32	guiMouseHandler
	100016f0: R_386_32	handleMouse
100016f4:	c3                   	ret    

100016f5 <setupCursor()>:
100016f5:	55                   	push   ebp
100016f6:	57                   	push   edi
100016f7:	56                   	push   esi
100016f8:	53                   	push   ebx
100016f9:	83 ec 38             	sub    esp,0x38
100016fc:	c7 05 00 00 00 00 2c 01 00 00 	mov    DWORD PTR ds:0x0,0x12c	100016fe: R_386_32	krnlMouseX
10001706:	c7 05 00 00 00 00 c8 00 00 00 	mov    DWORD PTR ds:0x0,0xc8	10001708: R_386_32	krnlMouseY
10001710:	c7 05 04 00 00 00 2c 01 00 00 	mov    DWORD PTR ds:0x4,0x12c	10001712: R_386_32	rootRgn
1000171a:	c7 05 08 00 00 00 c8 00 00 00 	mov    DWORD PTR ds:0x8,0xc8	1000171c: R_386_32	rootRgn
10001724:	c7 05 0c 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xc,0x0	10001726: R_386_32	rootRgn
1000172e:	68 14 01 00 00       	push   0x114
10001733:	e8 fc ff ff ff       	call   10001734 <setupCursor()+0x3f>	10001734: R_386_PC32	malloc
10001738:	89 c5                	mov    ebp,eax
1000173a:	83 c4 0c             	add    esp,0xc
1000173d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000173f: R_386_32	kernelProcess
10001743:	68 2c 2c 00 10       	push   0x10002c2c	10001744: R_386_32	.text
10001748:	50                   	push   eax
10001749:	e8 fc ff ff ff       	call   1000174a <setupCursor()+0x55>	1000174a: R_386_PC32	File::File(char const*, Process*)
1000174e:	58                   	pop    eax
1000174f:	5a                   	pop    edx
10001750:	6a 01                	push   0x1
10001752:	55                   	push   ebp
10001753:	e8 fc ff ff ff       	call   10001754 <setupCursor()+0x5f>	10001754: R_386_PC32	File::open(FileOpenMode)
10001758:	83 c4 10             	add    esp,0x10
1000175b:	85 c0                	test   eax,eax
1000175d:	74 0a                	je     10001769 <setupCursor()+0x74>
1000175f:	83 ec 0c             	sub    esp,0xc
10001762:	68 4b 2c 00 10       	push   0x10002c4b	10001763: R_386_32	.text
10001767:	eb 4c                	jmp    100017b5 <setupCursor()+0xc0>
10001769:	53                   	push   ebx
1000176a:	8d 44 24 17          	lea    eax,[esp+0x17]
1000176e:	50                   	push   eax
1000176f:	8d 44 24 20          	lea    eax,[esp+0x20]
10001773:	50                   	push   eax
10001774:	55                   	push   ebp
10001775:	e8 fc ff ff ff       	call   10001776 <setupCursor()+0x81>	10001776: R_386_PC32	File::stat(unsigned long long*, bool*)
1000177a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
1000177e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10001782:	89 34 24             	mov    DWORD PTR [esp],esi
10001785:	e8 fc ff ff ff       	call   10001786 <setupCursor()+0x91>	10001786: R_386_PC32	malloc
1000178a:	89 c3                	mov    ebx,eax
1000178c:	58                   	pop    eax
1000178d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10001790:	8d 54 24 20          	lea    edx,[esp+0x20]
10001794:	52                   	push   edx
10001795:	53                   	push   ebx
10001796:	57                   	push   edi
10001797:	56                   	push   esi
10001798:	55                   	push   ebp
10001799:	ff 50 0c             	call   DWORD PTR [eax+0xc]
1000179c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100017a0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
100017a4:	83 c4 20             	add    esp,0x20
100017a7:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
100017ab:	74 12                	je     100017bf <setupCursor()+0xca>
100017ad:	83 ec 0c             	sub    esp,0xc
100017b0:	68 5f 2c 00 10       	push   0x10002c5f	100017b1: R_386_32	.text
100017b5:	e8 fc ff ff ff       	call   100017b6 <setupCursor()+0xc1>	100017b6: R_386_PC32	Dbg::kprintf(char const*, ...)
100017ba:	e9 3d 01 00 00       	jmp    100018fc <setupCursor()+0x207>
100017bf:	6a 00                	push   0x0
100017c1:	68 04 01 00 00       	push   0x104
100017c6:	52                   	push   edx
100017c7:	50                   	push   eax
100017c8:	e8 fc ff ff ff       	call   100017c9 <setupCursor()+0xd4>	100017c9: R_386_PC32	__udivdi3
100017cd:	5a                   	pop    edx
100017ce:	59                   	pop    ecx
100017cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100017d3:	50                   	push   eax
100017d4:	68 73 2c 00 10       	push   0x10002c73	100017d5: R_386_32	.text
100017d9:	e8 fc ff ff ff       	call   100017da <setupCursor()+0xe5>	100017da: R_386_PC32	Dbg::kprintf(char const*, ...)
100017de:	89 1c 24             	mov    DWORD PTR [esp],ebx
100017e1:	e8 fc ff ff ff       	call   100017e2 <setupCursor()+0xed>	100017e2: R_386_PC32	Dbg::kprintf(char const*, ...)
100017e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100017ea:	8d 04 83             	lea    eax,[ebx+eax*4]
100017ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100017f1:	83 c4 10             	add    esp,0x10
100017f4:	31 ed                	xor    ebp,ebp
100017f6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
100017fa:	0f 8d f3 00 00 00    	jge    100018f3 <setupCursor()+0x1fe>
10001800:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10001803:	50                   	push   eax
10001804:	6a 04                	push   0x4
10001806:	68 80 2c 00 10       	push   0x10002c80	10001807: R_386_32	.text
1000180b:	56                   	push   esi
1000180c:	e8 fc ff ff ff       	call   1000180d <setupCursor()+0x118>	1000180d: R_386_PC32	memcmp
10001811:	83 c4 10             	add    esp,0x10
10001814:	85 c0                	test   eax,eax
10001816:	0f 84 b8 00 00 00    	je     100018d4 <setupCursor()+0x1df>
1000181c:	50                   	push   eax
1000181d:	6a 04                	push   0x4
1000181f:	68 85 2c 00 10       	push   0x10002c85	10001820: R_386_32	.text
10001824:	56                   	push   esi
10001825:	e8 fc ff ff ff       	call   10001826 <setupCursor()+0x131>	10001826: R_386_PC32	memcmp
1000182a:	83 c4 10             	add    esp,0x10
1000182d:	85 c0                	test   eax,eax
1000182f:	74 7b                	je     100018ac <setupCursor()+0x1b7>
10001831:	50                   	push   eax
10001832:	6a 04                	push   0x4
10001834:	68 8a 2c 00 10       	push   0x10002c8a	10001835: R_386_32	.text
10001839:	56                   	push   esi
1000183a:	e8 fc ff ff ff       	call   1000183b <setupCursor()+0x146>	1000183b: R_386_PC32	memcmp
1000183f:	83 c4 10             	add    esp,0x10
10001842:	85 c0                	test   eax,eax
10001844:	74 6d                	je     100018b3 <setupCursor()+0x1be>
10001846:	57                   	push   edi
10001847:	6a 04                	push   0x4
10001849:	68 8f 2c 00 10       	push   0x10002c8f	1000184a: R_386_32	.text
1000184e:	56                   	push   esi
1000184f:	e8 fc ff ff ff       	call   10001850 <setupCursor()+0x15b>	10001850: R_386_PC32	memcmp
10001854:	83 c4 10             	add    esp,0x10
10001857:	85 c0                	test   eax,eax
10001859:	74 5f                	je     100018ba <setupCursor()+0x1c5>
1000185b:	51                   	push   ecx
1000185c:	6a 04                	push   0x4
1000185e:	68 94 2c 00 10       	push   0x10002c94	1000185f: R_386_32	.text
10001863:	56                   	push   esi
10001864:	e8 fc ff ff ff       	call   10001865 <setupCursor()+0x170>	10001865: R_386_PC32	memcmp
10001869:	83 c4 10             	add    esp,0x10
1000186c:	85 c0                	test   eax,eax
1000186e:	74 51                	je     100018c1 <setupCursor()+0x1cc>
10001870:	52                   	push   edx
10001871:	6a 04                	push   0x4
10001873:	68 99 2c 00 10       	push   0x10002c99	10001874: R_386_32	.text
10001878:	56                   	push   esi
10001879:	e8 fc ff ff ff       	call   1000187a <setupCursor()+0x185>	1000187a: R_386_PC32	memcmp
1000187e:	83 c4 10             	add    esp,0x10
10001881:	85 c0                	test   eax,eax
10001883:	74 43                	je     100018c8 <setupCursor()+0x1d3>
10001885:	50                   	push   eax
10001886:	6a 04                	push   0x4
10001888:	68 9e 2c 00 10       	push   0x10002c9e	10001889: R_386_32	.text
1000188d:	56                   	push   esi
1000188e:	e8 fc ff ff ff       	call   1000188f <setupCursor()+0x19a>	1000188f: R_386_PC32	memcmp
10001893:	83 c4 10             	add    esp,0x10
10001896:	85 c0                	test   eax,eax
10001898:	74 35                	je     100018cf <setupCursor()+0x1da>
1000189a:	83 ec 0c             	sub    esp,0xc
1000189d:	68 a3 2c 00 10       	push   0x10002ca3	1000189e: R_386_32	.text
100018a2:	e8 fc ff ff ff       	call   100018a3 <setupCursor()+0x1ae>	100018a3: R_386_PC32	Dbg::kprintf(char const*, ...)
100018a7:	83 c4 10             	add    esp,0x10
100018aa:	eb 47                	jmp    100018f3 <setupCursor()+0x1fe>
100018ac:	b8 00 02 00 00       	mov    eax,0x200
100018b1:	eb 21                	jmp    100018d4 <setupCursor()+0x1df>
100018b3:	b8 00 03 00 00       	mov    eax,0x300
100018b8:	eb 1a                	jmp    100018d4 <setupCursor()+0x1df>
100018ba:	b8 00 01 00 00       	mov    eax,0x100
100018bf:	eb 13                	jmp    100018d4 <setupCursor()+0x1df>
100018c1:	b8 00 04 00 00       	mov    eax,0x400
100018c6:	eb 0c                	jmp    100018d4 <setupCursor()+0x1df>
100018c8:	b8 00 05 00 00       	mov    eax,0x500
100018cd:	eb 05                	jmp    100018d4 <setupCursor()+0x1df>
100018cf:	b8 00 06 00 00       	mov    eax,0x600
100018d4:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	100018d6: R_386_32	mouse_data
100018da:	b9 00 01 00 00       	mov    ecx,0x100
100018df:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
100018e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100018e5:	45                   	inc    ebp
100018e6:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
100018ee:	e9 03 ff ff ff       	jmp    100017f6 <setupCursor()+0x101>
100018f3:	83 ec 0c             	sub    esp,0xc
100018f6:	53                   	push   ebx
100018f7:	e8 fc ff ff ff       	call   100018f8 <setupCursor()+0x203>	100018f8: R_386_PC32	free
100018fc:	83 c4 10             	add    esp,0x10
100018ff:	83 c4 2c             	add    esp,0x2c
10001902:	5b                   	pop    ebx
10001903:	5e                   	pop    esi
10001904:	5f                   	pop    edi
10001905:	5d                   	pop    ebp
10001906:	c3                   	ret    

10001907 <processMouse(int, int, int)>:
10001907:	55                   	push   ebp
10001908:	57                   	push   edi
10001909:	56                   	push   esi
1000190a:	53                   	push   ebx
1000190b:	83 ec 0c             	sub    esp,0xc
1000190e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10001912:	81 7c 24 20 7d 02 00 00 	cmp    DWORD PTR [esp+0x20],0x27d
1000191a:	7e 15                	jle    10001931 <processMouse(int, int, int)+0x2a>
1000191c:	83 fe 02             	cmp    esi,0x2
1000191f:	7f 10                	jg     10001931 <processMouse(int, int, int)+0x2a>
10001921:	83 ec 0c             	sub    esp,0xc
10001924:	68 b7 2c 00 10       	push   0x10002cb7	10001925: R_386_32	.text
10001929:	e8 fc ff ff ff       	call   1000192a <processMouse(int, int, int)+0x23>	1000192a: R_386_PC32	Krnl::panic(char const*)
1000192e:	83 c4 10             	add    esp,0x10
10001931:	e8 fc ff ff ff       	call   10001932 <processMouse(int, int, int)+0x2b>	10001932: R_386_PC32	Krnl::userIOReceived()
10001936:	83 ec 0c             	sub    esp,0xc
10001939:	6a 08                	push   0x8
1000193b:	e8 fc ff ff ff       	call   1000193c <processMouse(int, int, int)+0x35>	1000193c: R_386_PC32	malloc
10001940:	89 c3                	mov    ebx,eax
10001942:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001949:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000194f:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10001956:	e8 fc ff ff ff       	call   10001957 <processMouse(int, int, int)+0x50>	10001957: R_386_PC32	malloc
1000195b:	89 c7                	mov    edi,eax
1000195d:	8b 0d 04 00 00 00    	mov    ecx,DWORD PTR ds:0x4	1000195f: R_386_32	rootRgn
10001963:	a1 08 00 00 00       	mov    eax,ds:0x8	10001964: R_386_32	rootRgn
10001968:	8d 69 1f             	lea    ebp,[ecx+0x1f]
1000196b:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000196e:	8d 68 1f             	lea    ebp,[eax+0x1f]
10001971:	55                   	push   ebp
10001972:	51                   	push   ecx
10001973:	50                   	push   eax
10001974:	57                   	push   edi
10001975:	e8 fc ff ff ff       	call   10001976 <processMouse(int, int, int)+0x6f>	10001976: R_386_PC32	CRect::CRect(int, int, int, int)
1000197a:	83 c4 14             	add    esp,0x14
1000197d:	6a 0c                	push   0xc
1000197f:	e8 fc ff ff ff       	call   10001980 <processMouse(int, int, int)+0x79>	10001980: R_386_PC32	malloc
10001984:	89 38                	mov    DWORD PTR [eax],edi
10001986:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
10001989:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
1000198c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001993:	83 c4 10             	add    esp,0x10
10001996:	85 c9                	test   ecx,ecx
10001998:	74 05                	je     1000199f <processMouse(int, int, int)+0x98>
1000199a:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
1000199d:	eb 02                	jmp    100019a1 <processMouse(int, int, int)+0x9a>
1000199f:	89 03                	mov    DWORD PTR [ebx],eax
100019a1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100019a4:	55                   	push   ebp
100019a5:	6a 01                	push   0x1
100019a7:	53                   	push   ebx
100019a8:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100019aa: R_386_32	rootRgn
100019ae:	e8 fc ff ff ff       	call   100019af <processMouse(int, int, int)+0xa8>	100019af: R_386_PC32	GDO::update(List<CRect*>*, bool)
100019b3:	8b 03                	mov    eax,DWORD PTR [ebx]
100019b5:	83 c4 10             	add    esp,0x10
100019b8:	85 c0                	test   eax,eax
100019ba:	74 26                	je     100019e2 <processMouse(int, int, int)+0xdb>
100019bc:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
100019bf:	51                   	push   ecx
100019c0:	51                   	push   ecx
100019c1:	6a 0c                	push   0xc
100019c3:	50                   	push   eax
100019c4:	e8 fc ff ff ff       	call   100019c5 <processMouse(int, int, int)+0xbe>	100019c5: R_386_PC32	operator delete(void*, unsigned long)
100019c9:	89 2b                	mov    DWORD PTR [ebx],ebp
100019cb:	83 c4 10             	add    esp,0x10
100019ce:	85 ed                	test   ebp,ebp
100019d0:	75 09                	jne    100019db <processMouse(int, int, int)+0xd4>
100019d2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
100019d9:	eb 07                	jmp    100019e2 <processMouse(int, int, int)+0xdb>
100019db:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
100019e2:	8b 03                	mov    eax,DWORD PTR [ebx]
100019e4:	85 c0                	test   eax,eax
100019e6:	74 14                	je     100019fc <processMouse(int, int, int)+0xf5>
100019e8:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
100019eb:	52                   	push   edx
100019ec:	52                   	push   edx
100019ed:	6a 0c                	push   0xc
100019ef:	50                   	push   eax
100019f0:	e8 fc ff ff ff       	call   100019f1 <processMouse(int, int, int)+0xea>	100019f1: R_386_PC32	operator delete(void*, unsigned long)
100019f5:	89 e8                	mov    eax,ebp
100019f7:	83 c4 10             	add    esp,0x10
100019fa:	eb e8                	jmp    100019e4 <processMouse(int, int, int)+0xdd>
100019fc:	50                   	push   eax
100019fd:	50                   	push   eax
100019fe:	6a 08                	push   0x8
10001a00:	53                   	push   ebx
10001a01:	e8 fc ff ff ff       	call   10001a02 <processMouse(int, int, int)+0xfb>	10001a02: R_386_PC32	operator delete(void*, unsigned long)
10001a06:	5a                   	pop    edx
10001a07:	59                   	pop    ecx
10001a08:	6a 10                	push   0x10
10001a0a:	57                   	push   edi
10001a0b:	e8 fc ff ff ff       	call   10001a0c <processMouse(int, int, int)+0x105>	10001a0c: R_386_PC32	operator delete(void*, unsigned long)
10001a10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001a14:	a3 04 00 00 00       	mov    ds:0x4,eax	10001a15: R_386_32	rootRgn
10001a19:	89 35 08 00 00 00    	mov    DWORD PTR ds:0x8,esi	10001a1b: R_386_32	rootRgn
10001a1f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a20: R_386_32	rootRgn
10001a24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10001a27:	8b 10                	mov    edx,DWORD PTR [eax]
10001a29:	8b 0a                	mov    ecx,DWORD PTR [edx]
10001a2b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10001a32:	a1 0c 00 00 00       	mov    eax,ds:0xc	10001a33: R_386_32	rootRgn
10001a37:	05 00 00 00 00       	add    eax,0x0	10001a38: R_386_32	mouse_data
10001a3c:	50                   	push   eax
10001a3d:	56                   	push   esi
10001a3e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
10001a42:	52                   	push   edx
10001a43:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10001a46:	83 c4 2c             	add    esp,0x2c
10001a49:	5b                   	pop    ebx
10001a4a:	5e                   	pop    esi
10001a4b:	5f                   	pop    edi
10001a4c:	5d                   	pop    ebp
10001a4d:	c3                   	ret    

10001a4e <handleMouse>:
10001a4e:	53                   	push   ebx
10001a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001a53:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10001a55: R_386_32	krnlMouseX
10001a59:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
10001a5d:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	10001a5f: R_386_32	krnlMouseX
10001a63:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10001a65: R_386_32	krnlMouseY
10001a69:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
10001a6d:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001a6f: R_386_32	krnlMouseY
10001a73:	85 c9                	test   ecx,ecx
10001a75:	7f 0a                	jg     10001a81 <handleMouse+0x33>
10001a77:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10001a79: R_386_32	krnlMouseX
10001a81:	85 d2                	test   edx,edx
10001a83:	7f 0a                	jg     10001a8f <handleMouse+0x41>
10001a85:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10001a87: R_386_32	krnlMouseY
10001a8f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10001a91: R_386_32	rootRgn
10001a95:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
10001a98:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
10001a9b:	8d 5a ff             	lea    ebx,[edx-0x1]
10001a9e:	3b 1d 00 00 00 00    	cmp    ebx,DWORD PTR ds:0x0	10001aa0: R_386_32	krnlMouseX
10001aa4:	7f 09                	jg     10001aaf <handleMouse+0x61>
10001aa6:	83 ea 02             	sub    edx,0x2
10001aa9:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001aab: R_386_32	krnlMouseX
10001aaf:	8b 51 08             	mov    edx,DWORD PTR [ecx+0x8]
10001ab2:	8d 4a ff             	lea    ecx,[edx-0x1]
10001ab5:	3b 0d 00 00 00 00    	cmp    ecx,DWORD PTR ds:0x0	10001ab7: R_386_32	krnlMouseY
10001abb:	7f 09                	jg     10001ac6 <handleMouse+0x78>
10001abd:	83 ea 02             	sub    edx,0x2
10001ac0:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10001ac2: R_386_32	krnlMouseY
10001ac6:	83 e0 01             	and    eax,0x1
10001ac9:	a3 00 00 00 00       	mov    ds:0x0,eax	10001aca: R_386_32	krnlButtons
10001ace:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001ad2:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ad3: R_386_32	krnlMouseY
10001ad7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001adb:	a1 00 00 00 00       	mov    eax,ds:0x0	10001adc: R_386_32	krnlMouseX
10001ae0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001ae4:	5b                   	pop    ebx
10001ae5:	e9 1d fe ff ff       	jmp    10001907 <processMouse(int, int, int)>

10001aea <elpsDrawFunc(GDO*)>:
10001aea:	83 ec 10             	sub    esp,0x10
10001aed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001af1:	ff 70 50             	push   DWORD PTR [eax+0x50]
10001af4:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10001af7:	ff 70 48             	push   DWORD PTR [eax+0x48]
10001afa:	ff 70 44             	push   DWORD PTR [eax+0x44]
10001afd:	ff 70 40             	push   DWORD PTR [eax+0x40]
10001b00:	6a 01                	push   0x1
10001b02:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001b05:	e8 fc ff ff ff       	call   10001b06 <elpsDrawFunc(GDO*)+0x1c>	10001b06: R_386_PC32	Context::ellipse(bool, int, int, int, int, unsigned int)
10001b0a:	83 c4 2c             	add    esp,0x2c
10001b0d:	c3                   	ret    

10001b0e <elpsPtnDrawFunc(GDO*)>:
10001b0e:	83 ec 10             	sub    esp,0x10
10001b11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001b15:	ff 70 50             	push   DWORD PTR [eax+0x50]
10001b18:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
10001b1b:	ff 70 48             	push   DWORD PTR [eax+0x48]
10001b1e:	ff 70 44             	push   DWORD PTR [eax+0x44]
10001b21:	ff 70 40             	push   DWORD PTR [eax+0x40]
10001b24:	6a 01                	push   0x1
10001b26:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001b29:	e8 fc ff ff ff       	call   10001b2a <elpsPtnDrawFunc(GDO*)+0x1c>	10001b2a: R_386_PC32	Context::ellipse(bool, int, int, int, int, Brush*)
10001b2e:	83 c4 2c             	add    esp,0x2c
10001b31:	c3                   	ret    

10001b32 <Ellipse::Ellipse(int, int, int, int, Brush*, Context*)>:
10001b32:	53                   	push   ebx
10001b33:	83 ec 0c             	sub    esp,0xc
10001b36:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001b3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001b3e:	6a 03                	push   0x3
10001b40:	53                   	push   ebx
10001b41:	e8 fc ff ff ff       	call   10001b42 <Ellipse::Ellipse(int, int, int, int, Brush*, Context*)+0x10>	10001b42: R_386_PC32	GDO::GDO(GDOType, Context*)
10001b46:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001b4a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10001b4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001b51:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10001b54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001b58:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10001b5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001b5f:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10001b62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001b66:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10001b69:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10001b6c: R_386_32	elpsPtnDrawFunc(GDO*)
10001b70:	83 c4 18             	add    esp,0x18
10001b73:	5b                   	pop    ebx
10001b74:	c3                   	ret    
10001b75:	90                   	nop

10001b76 <Ellipse::Ellipse(int, int, int, int, unsigned int, Context*)>:
10001b76:	53                   	push   ebx
10001b77:	83 ec 0c             	sub    esp,0xc
10001b7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001b7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001b82:	6a 01                	push   0x1
10001b84:	53                   	push   ebx
10001b85:	e8 fc ff ff ff       	call   10001b86 <Ellipse::Ellipse(int, int, int, int, unsigned int, Context*)+0x10>	10001b86: R_386_PC32	GDO::GDO(GDOType, Context*)
10001b8a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001b8e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10001b91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001b95:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
10001b98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001b9c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10001b9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001ba3:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10001ba6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001baa:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10001bad:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10001bb0: R_386_32	elpsDrawFunc(GDO*)
10001bb4:	83 c4 18             	add    esp,0x18
10001bb7:	5b                   	pop    ebx
10001bb8:	c3                   	ret    
10001bb9:	90                   	nop

10001bba <GDO::resetNext()>:
10001bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001bbe:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
10001bc5:	c3                   	ret    

10001bc6 <GDO::GDO(GDOType, Context*)>:
10001bc6:	53                   	push   ebx
10001bc7:	83 ec 08             	sub    esp,0x8
10001bca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001bce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001bd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001bd6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
10001bd9:	88 03                	mov    BYTE PTR [ebx],al
10001bdb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
10001be2:	84 c0                	test   al,al
10001be4:	75 45                	jne    10001c2b <GDO::GDO(GDOType, Context*)+0x65>
10001be6:	83 ec 0c             	sub    esp,0xc
10001be9:	68 d1 2c 00 10       	push   0x10002cd1	10001bea: R_386_32	.text
10001bee:	e8 fc ff ff ff       	call   10001bef <GDO::GDO(GDOType, Context*)+0x29>	10001bef: R_386_PC32	Dbg::kprintf(char const*, ...)
10001bf3:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001bfa:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10001c01:	e8 fc ff ff ff       	call   10001c02 <GDO::GDO(GDOType, Context*)+0x3c>	10001c02: R_386_PC32	malloc
10001c06:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10001c09:	59                   	pop    ecx
10001c0a:	5a                   	pop    edx
10001c0b:	50                   	push   eax
10001c0c:	68 ec 2c 00 10       	push   0x10002cec	10001c0d: R_386_32	.text
10001c11:	e8 fc ff ff ff       	call   10001c12 <GDO::GDO(GDOType, Context*)+0x4c>	10001c12: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c16:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10001c19:	83 c4 10             	add    esp,0x10
10001c1c:	31 c0                	xor    eax,eax
10001c1e:	c7 04 82 00 00 00 00 	mov    DWORD PTR [edx+eax*4],0x0
10001c25:	40                   	inc    eax
10001c26:	83 f8 10             	cmp    eax,0x10
10001c29:	75 f3                	jne    10001c1e <GDO::GDO(GDOType, Context*)+0x58>
10001c2b:	83 c4 08             	add    esp,0x8
10001c2e:	5b                   	pop    ebx
10001c2f:	c3                   	ret    

10001c30 <GDO::~GDO()>:
10001c30:	c3                   	ret    
10001c31:	90                   	nop

10001c32 <GDO::getChild(int)>:
10001c32:	56                   	push   esi
10001c33:	53                   	push   ebx
10001c34:	51                   	push   ecx
10001c35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001c39:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001c3d:	81 fb ff 00 00 00    	cmp    ebx,0xff
10001c43:	7e 04                	jle    10001c49 <GDO::getChild(int)+0x17>
10001c45:	31 c0                	xor    eax,eax
10001c47:	eb 2b                	jmp    10001c74 <GDO::getChild(int)+0x42>
10001c49:	83 7e 0c 00          	cmp    DWORD PTR [esi+0xc],0x0
10001c4d:	75 10                	jne    10001c5f <GDO::getChild(int)+0x2d>
10001c4f:	83 ec 0c             	sub    esp,0xc
10001c52:	68 fd 2c 00 10       	push   0x10002cfd	10001c53: R_386_32	.text
10001c57:	e8 fc ff ff ff       	call   10001c58 <GDO::getChild(int)+0x26>	10001c58: R_386_PC32	Krnl::panic(char const*)
10001c5c:	83 c4 10             	add    esp,0x10
10001c5f:	89 da                	mov    edx,ebx
10001c61:	c1 ea 04             	shr    edx,0x4
10001c64:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
10001c67:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10001c6a:	85 c0                	test   eax,eax
10001c6c:	74 d7                	je     10001c45 <GDO::getChild(int)+0x13>
10001c6e:	83 e3 0f             	and    ebx,0xf
10001c71:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10001c74:	5a                   	pop    edx
10001c75:	5b                   	pop    ebx
10001c76:	5e                   	pop    esi
10001c77:	c3                   	ret    

10001c78 <GDO::hasNext()>:
10001c78:	56                   	push   esi
10001c79:	53                   	push   ebx
10001c7a:	53                   	push   ebx
10001c7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001c7f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
10001c82:	3d ff 00 00 00       	cmp    eax,0xff
10001c87:	7f 1b                	jg     10001ca4 <GDO::hasNext()+0x2c>
10001c89:	8d 70 01             	lea    esi,[eax+0x1]
10001c8c:	51                   	push   ecx
10001c8d:	51                   	push   ecx
10001c8e:	50                   	push   eax
10001c8f:	53                   	push   ebx
10001c90:	e8 fc ff ff ff       	call   10001c91 <GDO::hasNext()+0x19>	10001c91: R_386_PC32	GDO::getChild(int)
10001c95:	83 c4 10             	add    esp,0x10
10001c98:	85 c0                	test   eax,eax
10001c9a:	75 04                	jne    10001ca0 <GDO::hasNext()+0x28>
10001c9c:	89 f0                	mov    eax,esi
10001c9e:	eb e2                	jmp    10001c82 <GDO::hasNext()+0xa>
10001ca0:	b0 01                	mov    al,0x1
10001ca2:	eb 02                	jmp    10001ca6 <GDO::hasNext()+0x2e>
10001ca4:	31 c0                	xor    eax,eax
10001ca6:	5a                   	pop    edx
10001ca7:	5b                   	pop    ebx
10001ca8:	5e                   	pop    esi
10001ca9:	c3                   	ret    

10001caa <GDO::getNext()>:
10001caa:	53                   	push   ebx
10001cab:	83 ec 08             	sub    esp,0x8
10001cae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001cb2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
10001cb5:	3d ff 00 00 00       	cmp    eax,0xff
10001cba:	7f 18                	jg     10001cd4 <GDO::getNext()+0x2a>
10001cbc:	8d 50 01             	lea    edx,[eax+0x1]
10001cbf:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
10001cc2:	52                   	push   edx
10001cc3:	52                   	push   edx
10001cc4:	50                   	push   eax
10001cc5:	53                   	push   ebx
10001cc6:	e8 fc ff ff ff       	call   10001cc7 <GDO::getNext()+0x1d>	10001cc7: R_386_PC32	GDO::getChild(int)
10001ccb:	83 c4 10             	add    esp,0x10
10001cce:	85 c0                	test   eax,eax
10001cd0:	74 e0                	je     10001cb2 <GDO::getNext()+0x8>
10001cd2:	eb 02                	jmp    10001cd6 <GDO::getNext()+0x2c>
10001cd4:	31 c0                	xor    eax,eax
10001cd6:	83 c4 08             	add    esp,0x8
10001cd9:	5b                   	pop    ebx
10001cda:	c3                   	ret    
10001cdb:	90                   	nop

10001cdc <GDO::indexOf(GDO*)>:
10001cdc:	56                   	push   esi
10001cdd:	53                   	push   ebx
10001cde:	53                   	push   ebx
10001cdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001ce3:	31 db                	xor    ebx,ebx
10001ce5:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
10001ce8:	8d 50 01             	lea    edx,[eax+0x1]
10001ceb:	89 56 3c             	mov    DWORD PTR [esi+0x3c],edx
10001cee:	51                   	push   ecx
10001cef:	51                   	push   ecx
10001cf0:	50                   	push   eax
10001cf1:	56                   	push   esi
10001cf2:	e8 fc ff ff ff       	call   10001cf3 <GDO::indexOf(GDO*)+0x17>	10001cf3: R_386_PC32	GDO::getChild(int)
10001cf7:	83 c4 10             	add    esp,0x10
10001cfa:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10001cfe:	74 0c                	je     10001d0c <GDO::indexOf(GDO*)+0x30>
10001d00:	43                   	inc    ebx
10001d01:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001d07:	75 dc                	jne    10001ce5 <GDO::indexOf(GDO*)+0x9>
10001d09:	83 cb ff             	or     ebx,0xffffffff
10001d0c:	89 d8                	mov    eax,ebx
10001d0e:	5a                   	pop    edx
10001d0f:	5b                   	pop    ebx
10001d10:	5e                   	pop    esi
10001d11:	c3                   	ret    

10001d12 <GDO::screenX()>:
10001d12:	56                   	push   esi
10001d13:	53                   	push   ebx
10001d14:	51                   	push   ecx
10001d15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001d19:	31 f6                	xor    esi,esi
10001d1b:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10001d1e:	74 10                	je     10001d30 <GDO::screenX()+0x1e>
10001d20:	83 ec 0c             	sub    esp,0xc
10001d23:	68 16 2d 00 10       	push   0x10002d16	10001d24: R_386_32	.text
10001d28:	e8 fc ff ff ff       	call   10001d29 <GDO::screenX()+0x17>	10001d29: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d2d:	83 c4 10             	add    esp,0x10
10001d30:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10001d33:	85 c0                	test   eax,eax
10001d35:	74 1f                	je     10001d56 <GDO::screenX()+0x44>
10001d37:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001d3a:	74 10                	je     10001d4c <GDO::screenX()+0x3a>
10001d3c:	83 ec 0c             	sub    esp,0xc
10001d3f:	68 0a 2d 00 10       	push   0x10002d0a	10001d40: R_386_32	.text
10001d44:	e8 fc ff ff ff       	call   10001d45 <GDO::screenX()+0x33>	10001d45: R_386_PC32	Krnl::panic(char const*)
10001d49:	83 c4 10             	add    esp,0x10
10001d4c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
10001d4f:	8b 5b 08             	mov    ebx,DWORD PTR [ebx+0x8]
10001d52:	01 c6                	add    esi,eax
10001d54:	eb c5                	jmp    10001d1b <GDO::screenX()+0x9>
10001d56:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
10001d59:	01 f0                	add    eax,esi
10001d5b:	5a                   	pop    edx
10001d5c:	5b                   	pop    ebx
10001d5d:	5e                   	pop    esi
10001d5e:	c3                   	ret    
10001d5f:	90                   	nop

10001d60 <GDO::screenY()>:
10001d60:	56                   	push   esi
10001d61:	53                   	push   ebx
10001d62:	51                   	push   ecx
10001d63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001d67:	31 f6                	xor    esi,esi
10001d69:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10001d6c:	74 10                	je     10001d7e <GDO::screenY()+0x1e>
10001d6e:	83 ec 0c             	sub    esp,0xc
10001d71:	68 3d 2d 00 10       	push   0x10002d3d	10001d72: R_386_32	.text
10001d76:	e8 fc ff ff ff       	call   10001d77 <GDO::screenY()+0x17>	10001d77: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d7b:	83 c4 10             	add    esp,0x10
10001d7e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10001d81:	85 c0                	test   eax,eax
10001d83:	74 1f                	je     10001da4 <GDO::screenY()+0x44>
10001d85:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001d88:	74 10                	je     10001d9a <GDO::screenY()+0x3a>
10001d8a:	83 ec 0c             	sub    esp,0xc
10001d8d:	68 31 2d 00 10       	push   0x10002d31	10001d8e: R_386_32	.text
10001d92:	e8 fc ff ff ff       	call   10001d93 <GDO::screenY()+0x33>	10001d93: R_386_PC32	Krnl::panic(char const*)
10001d97:	83 c4 10             	add    esp,0x10
10001d9a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
10001d9d:	8b 5b 08             	mov    ebx,DWORD PTR [ebx+0x8]
10001da0:	01 c6                	add    esi,eax
10001da2:	eb c5                	jmp    10001d69 <GDO::screenY()+0x9>
10001da4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
10001da7:	01 f0                	add    eax,esi
10001da9:	5a                   	pop    edx
10001daa:	5b                   	pop    ebx
10001dab:	5e                   	pop    esi
10001dac:	c3                   	ret    
10001dad:	90                   	nop

10001dae <GDO::update(List<CRect*>*, bool)>:
10001dae:	55                   	push   ebp
10001daf:	57                   	push   edi
10001db0:	56                   	push   esi
10001db1:	53                   	push   ebx
10001db2:	83 ec 2c             	sub    esp,0x2c
10001db5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10001db9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001dbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001dc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10001dc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001dc9:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
10001dcc:	74 14                	je     10001de2 <GDO::update(List<CRect*>*, bool)+0x34>
10001dce:	c7 44 24 40 58 2d 00 10 	mov    DWORD PTR [esp+0x40],0x10002d58	10001dd2: R_386_32	.text
10001dd6:	83 c4 2c             	add    esp,0x2c
10001dd9:	5b                   	pop    ebx
10001dda:	5e                   	pop    esi
10001ddb:	5f                   	pop    edi
10001ddc:	5d                   	pop    ebp
10001ddd:	e9 fc ff ff ff       	jmp    10001dde <GDO::update(List<CRect*>*, bool)+0x30>	10001dde: R_386_PC32	Krnl::panic(char const*)
10001de2:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10001de6:	0f 84 02 02 00 00    	je     10001fee <GDO::update(List<CRect*>*, bool)+0x240>
10001dec:	56                   	push   esi
10001ded:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001df1:	6a 00                	push   0x0
10001df3:	53                   	push   ebx
10001df4:	e8 fc ff ff ff       	call   10001df5 <GDO::update(List<CRect*>*, bool)+0x47>	10001df5: R_386_PC32	Region::applyBoundClipping(int, List<CRect*>*)
10001df9:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001dfc:	e8 fc ff ff ff       	call   10001dfd <GDO::update(List<CRect*>*, bool)+0x4f>	10001dfd: R_386_PC32	GDO::screenX()
10001e01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001e05:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001e08:	e8 fc ff ff ff       	call   10001e09 <GDO::update(List<CRect*>*, bool)+0x5b>	10001e09: R_386_PC32	GDO::screenY()
10001e0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10001e11:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10001e14:	c6 40 14 00          	mov    BYTE PTR [eax+0x14],0x0
10001e18:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001e1f:	83 c4 10             	add    esp,0x10
10001e22:	83 ec 0c             	sub    esp,0xc
10001e25:	53                   	push   ebx
10001e26:	e8 fc ff ff ff       	call   10001e27 <GDO::update(List<CRect*>*, bool)+0x79>	10001e27: R_386_PC32	GDO::hasNext()
10001e2b:	83 c4 10             	add    esp,0x10
10001e2e:	84 c0                	test   al,al
10001e30:	74 6c                	je     10001e9e <GDO::update(List<CRect*>*, bool)+0xf0>
10001e32:	83 ec 0c             	sub    esp,0xc
10001e35:	53                   	push   ebx
10001e36:	e8 fc ff ff ff       	call   10001e37 <GDO::update(List<CRect*>*, bool)+0x89>	10001e37: R_386_PC32	GDO::getNext()
10001e3b:	89 c6                	mov    esi,eax
10001e3d:	83 c4 10             	add    esp,0x10
10001e40:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001e43:	75 dd                	jne    10001e22 <GDO::update(List<CRect*>*, bool)+0x74>
10001e45:	83 ec 0c             	sub    esp,0xc
10001e48:	50                   	push   eax
10001e49:	e8 fc ff ff ff       	call   10001e4a <GDO::update(List<CRect*>*, bool)+0x9c>	10001e4a: R_386_PC32	GDO::screenX()
10001e4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001e52:	89 34 24             	mov    DWORD PTR [esp],esi
10001e55:	e8 fc ff ff ff       	call   10001e56 <GDO::update(List<CRect*>*, bool)+0xa8>	10001e56: R_386_PC32	GDO::screenY()
10001e5a:	89 c5                	mov    ebp,eax
10001e5c:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10001e63:	e8 fc ff ff ff       	call   10001e64 <GDO::update(List<CRect*>*, bool)+0xb6>	10001e64: R_386_PC32	malloc
10001e68:	89 c7                	mov    edi,eax
10001e6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
10001e6e:	8b 46 34             	mov    eax,DWORD PTR [esi+0x34]
10001e71:	01 d0                	add    eax,edx
10001e73:	48                   	dec    eax
10001e74:	89 04 24             	mov    DWORD PTR [esp],eax
10001e77:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
10001e7a:	01 e8                	add    eax,ebp
10001e7c:	48                   	dec    eax
10001e7d:	50                   	push   eax
10001e7e:	52                   	push   edx
10001e7f:	55                   	push   ebp
10001e80:	57                   	push   edi
10001e81:	e8 fc ff ff ff       	call   10001e82 <GDO::update(List<CRect*>*, bool)+0xd4>	10001e82: R_386_PC32	CRect::CRect(int, int, int, int)
10001e86:	83 c4 18             	add    esp,0x18
10001e89:	57                   	push   edi
10001e8a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10001e8d:	e8 fc ff ff ff       	call   10001e8e <GDO::update(List<CRect*>*, bool)+0xe0>	10001e8e: R_386_PC32	Context::subClipRect(CRect*)
10001e92:	5a                   	pop    edx
10001e93:	59                   	pop    ecx
10001e94:	6a 10                	push   0x10
10001e96:	57                   	push   edi
10001e97:	e8 fc ff ff ff       	call   10001e98 <GDO::update(List<CRect*>*, bool)+0xea>	10001e98: R_386_PC32	operator delete(void*, unsigned long)
10001e9c:	eb 81                	jmp    10001e1f <GDO::update(List<CRect*>*, bool)+0x71>
10001e9e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10001ea1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10001ea5:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
10001ea8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10001eac:	89 78 10             	mov    DWORD PTR [eax+0x10],edi
10001eaf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001eb6:	83 ec 0c             	sub    esp,0xc
10001eb9:	53                   	push   ebx
10001eba:	e8 fc ff ff ff       	call   10001ebb <GDO::update(List<CRect*>*, bool)+0x10d>	10001ebb: R_386_PC32	GDO::hasNext()
10001ebf:	83 c4 10             	add    esp,0x10
10001ec2:	84 c0                	test   al,al
10001ec4:	74 23                	je     10001ee9 <GDO::update(List<CRect*>*, bool)+0x13b>
10001ec6:	83 ec 0c             	sub    esp,0xc
10001ec9:	53                   	push   ebx
10001eca:	e8 fc ff ff ff       	call   10001ecb <GDO::update(List<CRect*>*, bool)+0x11d>	10001ecb: R_386_PC32	GDO::getNext()
10001ecf:	83 c4 10             	add    esp,0x10
10001ed2:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001ed5:	74 df                	je     10001eb6 <GDO::update(List<CRect*>*, bool)+0x108>
10001ed7:	8b 50 54             	mov    edx,DWORD PTR [eax+0x54]
10001eda:	85 d2                	test   edx,edx
10001edc:	74 d8                	je     10001eb6 <GDO::update(List<CRect*>*, bool)+0x108>
10001ede:	83 ec 0c             	sub    esp,0xc
10001ee1:	50                   	push   eax
10001ee2:	ff d2                	call   edx
10001ee4:	83 c4 10             	add    esp,0x10
10001ee7:	eb cd                	jmp    10001eb6 <GDO::update(List<CRect*>*, bool)+0x108>
10001ee9:	83 ec 0c             	sub    esp,0xc
10001eec:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10001eef:	e8 fc ff ff ff       	call   10001ef0 <GDO::update(List<CRect*>*, bool)+0x142>	10001ef0: R_386_PC32	Context::clearClipRects()
10001ef4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10001ef7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10001efe:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10001f05:	83 c4 10             	add    esp,0x10
10001f08:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10001f0d:	0f 84 db 00 00 00    	je     10001fee <GDO::update(List<CRect*>*, bool)+0x240>
10001f13:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
10001f1a:	83 ec 0c             	sub    esp,0xc
10001f1d:	53                   	push   ebx
10001f1e:	e8 fc ff ff ff       	call   10001f1f <GDO::update(List<CRect*>*, bool)+0x171>	10001f1f: R_386_PC32	GDO::hasNext()
10001f23:	83 c4 10             	add    esp,0x10
10001f26:	84 c0                	test   al,al
10001f28:	0f 84 c0 00 00 00    	je     10001fee <GDO::update(List<CRect*>*, bool)+0x240>
10001f2e:	83 ec 0c             	sub    esp,0xc
10001f31:	53                   	push   ebx
10001f32:	e8 fc ff ff ff       	call   10001f33 <GDO::update(List<CRect*>*, bool)+0x185>	10001f33: R_386_PC32	GDO::getNext()
10001f37:	89 c7                	mov    edi,eax
10001f39:	83 c4 10             	add    esp,0x10
10001f3c:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001f3f:	75 d9                	jne    10001f1a <GDO::update(List<CRect*>*, bool)+0x16c>
10001f41:	31 f6                	xor    esi,esi
10001f43:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10001f48:	75 3b                	jne    10001f85 <GDO::update(List<CRect*>*, bool)+0x1d7>
10001f4a:	50                   	push   eax
10001f4b:	6a 01                	push   0x1
10001f4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10001f51:	57                   	push   edi
10001f52:	e8 fc ff ff ff       	call   10001f53 <GDO::update(List<CRect*>*, bool)+0x1a5>	10001f53: R_386_PC32	GDO::update(List<CRect*>*, bool)
10001f57:	83 c4 10             	add    esp,0x10
10001f5a:	eb be                	jmp    10001f1a <GDO::update(List<CRect*>*, bool)+0x16c>
10001f5c:	8b 28                	mov    ebp,DWORD PTR [eax]
10001f5e:	83 ec 0c             	sub    esp,0xc
10001f61:	57                   	push   edi
10001f62:	e8 fc ff ff ff       	call   10001f63 <GDO::update(List<CRect*>*, bool)+0x1b5>	10001f63: R_386_PC32	GDO::screenX()
10001f67:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001f6b:	89 3c 24             	mov    DWORD PTR [esp],edi
10001f6e:	e8 fc ff ff ff       	call   10001f6f <GDO::update(List<CRect*>*, bool)+0x1c1>	10001f6f: R_386_PC32	GDO::screenY()
10001f73:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001f77:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
10001f7a:	01 d1                	add    ecx,edx
10001f7c:	83 c4 10             	add    esp,0x10
10001f7f:	3b 4d 00             	cmp    ecx,DWORD PTR [ebp+0x0]
10001f82:	7f 37                	jg     10001fbb <GDO::update(List<CRect*>*, bool)+0x20d>
10001f84:	46                   	inc    esi
10001f85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f89:	8b 00                	mov    eax,DWORD PTR [eax]
10001f8b:	89 c1                	mov    ecx,eax
10001f8d:	31 d2                	xor    edx,edx
10001f8f:	85 c9                	test   ecx,ecx
10001f91:	74 06                	je     10001f99 <GDO::update(List<CRect*>*, bool)+0x1eb>
10001f93:	42                   	inc    edx
10001f94:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10001f97:	eb f6                	jmp    10001f8f <GDO::update(List<CRect*>*, bool)+0x1e1>
10001f99:	39 d6                	cmp    esi,edx
10001f9b:	7d 32                	jge    10001fcf <GDO::update(List<CRect*>*, bool)+0x221>
10001f9d:	89 c1                	mov    ecx,eax
10001f9f:	31 d2                	xor    edx,edx
10001fa1:	85 c9                	test   ecx,ecx
10001fa3:	74 06                	je     10001fab <GDO::update(List<CRect*>*, bool)+0x1fd>
10001fa5:	42                   	inc    edx
10001fa6:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
10001fa9:	eb f6                	jmp    10001fa1 <GDO::update(List<CRect*>*, bool)+0x1f3>
10001fab:	39 d6                	cmp    esi,edx
10001fad:	7f ad                	jg     10001f5c <GDO::update(List<CRect*>*, bool)+0x1ae>
10001faf:	89 f2                	mov    edx,esi
10001fb1:	85 d2                	test   edx,edx
10001fb3:	74 a7                	je     10001f5c <GDO::update(List<CRect*>*, bool)+0x1ae>
10001fb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10001fb8:	4a                   	dec    edx
10001fb9:	eb f6                	jmp    10001fb1 <GDO::update(List<CRect*>*, bool)+0x203>
10001fbb:	39 55 04             	cmp    DWORD PTR [ebp+0x4],edx
10001fbe:	7c c4                	jl     10001f84 <GDO::update(List<CRect*>*, bool)+0x1d6>
10001fc0:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
10001fc3:	01 c2                	add    edx,eax
10001fc5:	3b 55 08             	cmp    edx,DWORD PTR [ebp+0x8]
10001fc8:	7e ba                	jle    10001f84 <GDO::update(List<CRect*>*, bool)+0x1d6>
10001fca:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10001fcd:	7c b5                	jl     10001f84 <GDO::update(List<CRect*>*, bool)+0x1d6>
10001fcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001fd3:	8b 10                	mov    edx,DWORD PTR [eax]
10001fd5:	31 c0                	xor    eax,eax
10001fd7:	85 d2                	test   edx,edx
10001fd9:	74 06                	je     10001fe1 <GDO::update(List<CRect*>*, bool)+0x233>
10001fdb:	40                   	inc    eax
10001fdc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
10001fdf:	eb f6                	jmp    10001fd7 <GDO::update(List<CRect*>*, bool)+0x229>
10001fe1:	39 c6                	cmp    esi,eax
10001fe3:	0f 85 61 ff ff ff    	jne    10001f4a <GDO::update(List<CRect*>*, bool)+0x19c>
10001fe9:	e9 2c ff ff ff       	jmp    10001f1a <GDO::update(List<CRect*>*, bool)+0x16c>
10001fee:	83 c4 2c             	add    esp,0x2c
10001ff1:	5b                   	pop    ebx
10001ff2:	5e                   	pop    esi
10001ff3:	5f                   	pop    edi
10001ff4:	5d                   	pop    ebp
10001ff5:	c3                   	ret    

10001ff6 <GDO::addChild(GDO*)>:
10001ff6:	55                   	push   ebp
10001ff7:	57                   	push   edi
10001ff8:	56                   	push   esi
10001ff9:	53                   	push   ebx
10001ffa:	83 ec 1c             	sub    esp,0x1c
10001ffd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
10002001:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10002005:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
10002009:	74 17                	je     10002022 <GDO::addChild(GDO*)+0x2c>
1000200b:	83 ec 0c             	sub    esp,0xc
1000200e:	68 74 2d 00 10       	push   0x10002d74	1000200f: R_386_32	.text
10002013:	e8 fc ff ff ff       	call   10002014 <GDO::addChild(GDO*)+0x1e>	10002014: R_386_PC32	Krnl::panic(char const*)
10002018:	83 c4 10             	add    esp,0x10
1000201b:	31 db                	xor    ebx,ebx
1000201d:	e9 8c 00 00 00       	jmp    100020ae <GDO::addChild(GDO*)+0xb8>
10002022:	89 6e 08             	mov    DWORD PTR [esi+0x8],ebp
10002025:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10002028:	31 c9                	xor    ecx,ecx
1000202a:	83 cb ff             	or     ebx,0xffffffff
1000202d:	8b 04 8a             	mov    eax,DWORD PTR [edx+ecx*4]
10002030:	85 c0                	test   eax,eax
10002032:	74 1c                	je     10002050 <GDO::addChild(GDO*)+0x5a>
10002034:	31 ff                	xor    edi,edi
10002036:	83 38 00             	cmp    DWORD PTR [eax],0x0
10002039:	75 0a                	jne    10002045 <GDO::addChild(GDO*)+0x4f>
1000203b:	89 30                	mov    DWORD PTR [eax],esi
1000203d:	c1 e1 04             	shl    ecx,0x4
10002040:	8d 1c 39             	lea    ebx,[ecx+edi*1]
10002043:	eb 69                	jmp    100020ae <GDO::addChild(GDO*)+0xb8>
10002045:	47                   	inc    edi
10002046:	83 c0 04             	add    eax,0x4
10002049:	83 ff 10             	cmp    edi,0x10
1000204c:	75 e8                	jne    10002036 <GDO::addChild(GDO*)+0x40>
1000204e:	eb 07                	jmp    10002057 <GDO::addChild(GDO*)+0x61>
10002050:	83 fb ff             	cmp    ebx,0xffffffff
10002053:	75 02                	jne    10002057 <GDO::addChild(GDO*)+0x61>
10002055:	89 cb                	mov    ebx,ecx
10002057:	41                   	inc    ecx
10002058:	83 f9 10             	cmp    ecx,0x10
1000205b:	75 d0                	jne    1000202d <GDO::addChild(GDO*)+0x37>
1000205d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10002061:	83 fb ff             	cmp    ebx,0xffffffff
10002064:	74 38                	je     1000209e <GDO::addChild(GDO*)+0xa8>
10002066:	50                   	push   eax
10002067:	50                   	push   eax
10002068:	53                   	push   ebx
10002069:	68 90 2d 00 10       	push   0x10002d90	1000206a: R_386_32	.text
1000206e:	e8 fc ff ff ff       	call   1000206f <GDO::addChild(GDO*)+0x79>	1000206f: R_386_PC32	Dbg::kprintf(char const*, ...)
10002073:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002076:	8d 2c 98             	lea    ebp,[eax+ebx*4]
10002079:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10002080:	e8 fc ff ff ff       	call   10002081 <GDO::addChild(GDO*)+0x8b>	10002081: R_386_PC32	malloc
10002085:	89 c2                	mov    edx,eax
10002087:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
1000208a:	31 c0                	xor    eax,eax
1000208c:	89 d7                	mov    edi,edx
1000208e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10002092:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10002094:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10002097:	89 30                	mov    DWORD PTR [eax],esi
10002099:	c1 e3 04             	shl    ebx,0x4
1000209c:	eb 0d                	jmp    100020ab <GDO::addChild(GDO*)+0xb5>
1000209e:	83 ec 0c             	sub    esp,0xc
100020a1:	68 aa 2d 00 10       	push   0x10002daa	100020a2: R_386_32	.text
100020a6:	e8 fc ff ff ff       	call   100020a7 <GDO::addChild(GDO*)+0xb1>	100020a7: R_386_PC32	Krnl::panic(char const*)
100020ab:	83 c4 10             	add    esp,0x10
100020ae:	89 d8                	mov    eax,ebx
100020b0:	83 c4 1c             	add    esp,0x1c
100020b3:	5b                   	pop    ebx
100020b4:	5e                   	pop    esi
100020b5:	5f                   	pop    edi
100020b6:	5d                   	pop    ebp
100020b7:	c3                   	ret    

100020b8 <GDO::removeChild(int)>:
100020b8:	53                   	push   ebx
100020b9:	83 ec 08             	sub    esp,0x8
100020bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100020c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100020c4:	80 39 00             	cmp    BYTE PTR [ecx],0x0
100020c7:	74 14                	je     100020dd <GDO::removeChild(int)+0x25>
100020c9:	83 ec 0c             	sub    esp,0xc
100020cc:	68 cc 2d 00 10       	push   0x10002dcc	100020cd: R_386_32	.text
100020d1:	e8 fc ff ff ff       	call   100020d2 <GDO::removeChild(int)+0x1a>	100020d2: R_386_PC32	Krnl::panic(char const*)
100020d6:	83 c4 10             	add    esp,0x10
100020d9:	31 c0                	xor    eax,eax
100020db:	eb 2d                	jmp    1000210a <GDO::removeChild(int)+0x52>
100020dd:	31 c0                	xor    eax,eax
100020df:	81 fa ff 00 00 00    	cmp    edx,0xff
100020e5:	7f 23                	jg     1000210a <GDO::removeChild(int)+0x52>
100020e7:	89 d3                	mov    ebx,edx
100020e9:	c1 eb 04             	shr    ebx,0x4
100020ec:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
100020ef:	8b 0c 98             	mov    ecx,DWORD PTR [eax+ebx*4]
100020f2:	31 c0                	xor    eax,eax
100020f4:	85 c9                	test   ecx,ecx
100020f6:	74 12                	je     1000210a <GDO::removeChild(int)+0x52>
100020f8:	83 e2 0f             	and    edx,0xf
100020fb:	8d 14 91             	lea    edx,[ecx+edx*4]
100020fe:	83 3a 00             	cmp    DWORD PTR [edx],0x0
10002101:	0f 95 c0             	setne  al
10002104:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
1000210a:	83 c4 08             	add    esp,0x8
1000210d:	5b                   	pop    ebx
1000210e:	c3                   	ret    
1000210f:	90                   	nop

10002110 <GDO::removeChild(GDO*)>:
10002110:	53                   	push   ebx
10002111:	83 ec 10             	sub    esp,0x10
10002114:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10002118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000211c:	53                   	push   ebx
1000211d:	e8 fc ff ff ff       	call   1000211e <GDO::removeChild(GDO*)+0xe>	1000211e: R_386_PC32	GDO::indexOf(GDO*)
10002122:	83 c4 10             	add    esp,0x10
10002125:	83 f8 ff             	cmp    eax,0xffffffff
10002128:	74 0e                	je     10002138 <GDO::removeChild(GDO*)+0x28>
1000212a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000212e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10002132:	83 c4 08             	add    esp,0x8
10002135:	5b                   	pop    ebx
10002136:	eb 80                	jmp    100020b8 <GDO::removeChild(int)>
10002138:	31 c0                	xor    eax,eax
1000213a:	83 c4 08             	add    esp,0x8
1000213d:	5b                   	pop    ebx
1000213e:	c3                   	ret    
1000213f:	90                   	nop

10002140 <legacyDraw(GDO*)>:
10002140:	55                   	push   ebp
10002141:	57                   	push   edi
10002142:	56                   	push   esi
10002143:	53                   	push   ebx
10002144:	83 ec 1c             	sub    esp,0x1c
10002147:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
1000214b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
1000214e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
10002151:	31 f6                	xor    esi,esi
10002153:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10002156:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
1000215a:	84 c0                	test   al,al
1000215c:	74 45                	je     100021a3 <legacyDraw(GDO*)+0x63>
1000215e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
10002161:	69 ca ff 00 00 00    	imul   ecx,edx,0xff
10002167:	0f b6 8c 08 00 00 00 00 	movzx  ecx,BYTE PTR [eax+ecx*1+0x0]	1000216b: R_386_32	FontWidths
1000216f:	83 ec 04             	sub    esp,0x4
10002172:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10002175:	6a 0e                	push   0xe
10002177:	51                   	push   ecx
10002178:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000217c:	55                   	push   ebp
1000217d:	57                   	push   edi
1000217e:	6b c0 0e             	imul   eax,eax,0xe
10002181:	69 d2 f2 0d 00 00    	imul   edx,edx,0xdf2
10002187:	8d 84 10 00 00 00 00 	lea    eax,[eax+edx*1+0x0]	1000218a: R_386_32	Fonts
1000218e:	50                   	push   eax
1000218f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002192:	e8 fc ff ff ff       	call   10002193 <legacyDraw(GDO*)+0x53>	10002193: R_386_PC32	Context::drawBitmap1(unsigned char*, int, int, int, int, unsigned int)
10002197:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
1000219b:	01 cf                	add    edi,ecx
1000219d:	46                   	inc    esi
1000219e:	83 c4 20             	add    esp,0x20
100021a1:	eb b0                	jmp    10002153 <legacyDraw(GDO*)+0x13>
100021a3:	83 c4 1c             	add    esp,0x1c
100021a6:	5b                   	pop    ebx
100021a7:	5e                   	pop    esi
100021a8:	5f                   	pop    edi
100021a9:	5d                   	pop    ebp
100021aa:	c3                   	ret    

100021ab <reverse(unsigned char)>:
100021ab:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
100021af:	c3                   	ret    

100021b0 <loadFontWithName(char*)>:
100021b0:	55                   	push   ebp
100021b1:	57                   	push   edi
100021b2:	56                   	push   esi
100021b3:	53                   	push   ebx
100021b4:	83 ec 34             	sub    esp,0x34
100021b7:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
100021bb:	53                   	push   ebx
100021bc:	68 eb 2d 00 10       	push   0x10002deb	100021bd: R_386_32	.text
100021c1:	e8 fc ff ff ff       	call   100021c2 <loadFontWithName(char*)+0x12>	100021c2: R_386_PC32	Dbg::kprintf(char const*, ...)
100021c6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100021cd:	e8 fc ff ff ff       	call   100021ce <loadFontWithName(char*)+0x1e>	100021ce: R_386_PC32	malloc
100021d2:	89 c6                	mov    esi,eax
100021d4:	83 c4 0c             	add    esp,0xc
100021d7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100021d9: R_386_32	kernelProcess
100021dd:	53                   	push   ebx
100021de:	50                   	push   eax
100021df:	e8 fc ff ff ff       	call   100021e0 <loadFontWithName(char*)+0x30>	100021e0: R_386_PC32	File::File(char const*, Process*)
100021e4:	59                   	pop    ecx
100021e5:	5f                   	pop    edi
100021e6:	6a 01                	push   0x1
100021e8:	56                   	push   esi
100021e9:	e8 fc ff ff ff       	call   100021ea <loadFontWithName(char*)+0x3a>	100021ea: R_386_PC32	File::open(FileOpenMode)
100021ee:	83 c4 10             	add    esp,0x10
100021f1:	85 c0                	test   eax,eax
100021f3:	74 10                	je     10002205 <loadFontWithName(char*)+0x55>
100021f5:	83 ec 0c             	sub    esp,0xc
100021f8:	68 0f 2e 00 10       	push   0x10002e0f	100021f9: R_386_32	.text
100021fd:	e8 fc ff ff ff       	call   100021fe <loadFontWithName(char*)+0x4e>	100021fe: R_386_PC32	Krnl::panic(char const*)
10002202:	83 c4 10             	add    esp,0x10
10002205:	83 ec 0c             	sub    esp,0xc
10002208:	8b 06                	mov    eax,DWORD PTR [esi]
1000220a:	8d 54 24 28          	lea    edx,[esp+0x28]
1000220e:	52                   	push   edx
1000220f:	68 00 00 00 00       	push   0x0	10002210: R_386_32	FONT
10002214:	6a 00                	push   0x0
10002216:	68 10 10 00 00       	push   0x1010
1000221b:	56                   	push   esi
1000221c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
1000221f:	83 c4 14             	add    esp,0x14
10002222:	56                   	push   esi
10002223:	e8 fc ff ff ff       	call   10002224 <loadFontWithName(char*)+0x74>	10002224: R_386_PC32	File::close()
10002228:	8b 06                	mov    eax,DWORD PTR [esi]
1000222a:	89 34 24             	mov    DWORD PTR [esp],esi
1000222d:	ff 50 08             	call   DWORD PTR [eax+0x8]
10002230:	a1 00 00 00 00       	mov    eax,ds:0x0	10002231: R_386_32	nextfont_
10002235:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002239:	69 f8 f2 0d 00 00    	imul   edi,eax,0xdf2
1000223f:	83 c4 10             	add    esp,0x10
10002242:	b8 00 02 00 00       	mov    eax,0x200
10002247:	69 74 24 0c ff 00 00 00 	imul   esi,DWORD PTR [esp+0xc],0xff
1000224f:	81 c6 00 00 00 00    	add    esi,0x0	10002251: R_386_32	FontWidths
10002255:	0f be 90 10 00 00 00 	movsx  edx,BYTE PTR [eax+0x10]	10002258: R_386_32	FONT
1000225c:	8a 88 1f 00 00 00    	mov    cl,BYTE PTR [eax+0x1f]	1000225e: R_386_32	FONT
10002262:	88 0c 16             	mov    BYTE PTR [esi+edx*1],cl
10002265:	6b d2 0e             	imul   edx,edx,0xe
10002268:	01 fa                	add    edx,edi
1000226a:	31 ed                	xor    ebp,ebp
1000226c:	8a 8c 28 11 00 00 00 	mov    cl,BYTE PTR [eax+ebp*1+0x11]	1000226f: R_386_32	FONT
10002273:	88 8c 2a 00 00 00 00 	mov    BYTE PTR [edx+ebp*1+0x0],cl	10002276: R_386_32	Fonts
1000227a:	45                   	inc    ebp
1000227b:	83 fd 0e             	cmp    ebp,0xe
1000227e:	75 ec                	jne    1000226c <loadFontWithName(char*)+0xbc>
10002280:	83 c0 10             	add    eax,0x10
10002283:	3d 00 08 00 00       	cmp    eax,0x800
10002288:	75 cb                	jne    10002255 <loadFontWithName(char*)+0xa5>
1000228a:	43                   	inc    ebx
1000228b:	80 7b ff 00          	cmp    BYTE PTR [ebx-0x1],0x0
1000228f:	75 f9                	jne    1000228a <loadFontWithName(char*)+0xda>
10002291:	8a 03                	mov    al,BYTE PTR [ebx]
10002293:	3c 2f                	cmp    al,0x2f
10002295:	74 07                	je     1000229e <loadFontWithName(char*)+0xee>
10002297:	3c 5c                	cmp    al,0x5c
10002299:	74 03                	je     1000229e <loadFontWithName(char*)+0xee>
1000229b:	4b                   	dec    ebx
1000229c:	eb f3                	jmp    10002291 <loadFontWithName(char*)+0xe1>
1000229e:	31 d2                	xor    edx,edx
100022a0:	69 7c 24 0c ff 00 00 00 	imul   edi,DWORD PTR [esp+0xc],0xff
100022a8:	81 c7 00 00 00 00    	add    edi,0x0	100022aa: R_386_32	FontNames
100022ae:	8a 44 13 01          	mov    al,BYTE PTR [ebx+edx*1+0x1]
100022b2:	3c 2e                	cmp    al,0x2e
100022b4:	0f b7 f2             	movzx  esi,dx
100022b7:	74 13                	je     100022cc <loadFontWithName(char*)+0x11c>
100022b9:	8d 68 9f             	lea    ebp,[eax-0x61]
100022bc:	89 e9                	mov    ecx,ebp
100022be:	80 f9 19             	cmp    cl,0x19
100022c1:	77 03                	ja     100022c6 <loadFontWithName(char*)+0x116>
100022c3:	83 e8 20             	sub    eax,0x20
100022c6:	88 04 37             	mov    BYTE PTR [edi+esi*1],al
100022c9:	42                   	inc    edx
100022ca:	eb e2                	jmp    100022ae <loadFontWithName(char*)+0xfe>
100022cc:	69 44 24 0c ff 00 00 00 	imul   eax,DWORD PTR [esp+0xc],0xff
100022d4:	c6 84 30 00 00 00 00 00 	mov    BYTE PTR [eax+esi*1+0x0],0x0	100022d7: R_386_32	FontNames
100022dc:	05 00 00 00 00       	add    eax,0x0	100022dd: R_386_32	FontNames
100022e1:	52                   	push   edx
100022e2:	50                   	push   eax
100022e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100022e7:	68 21 2e 00 10       	push   0x10002e21	100022e8: R_386_32	.text
100022ec:	e8 fc ff ff ff       	call   100022ed <loadFontWithName(char*)+0x13d>	100022ed: R_386_PC32	Dbg::kprintf(char const*, ...)
100022f1:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100022f3: R_386_32	nextfont_
100022f7:	83 c4 3c             	add    esp,0x3c
100022fa:	5b                   	pop    ebx
100022fb:	5e                   	pop    esi
100022fc:	5f                   	pop    edi
100022fd:	5d                   	pop    ebp
100022fe:	c3                   	ret    

100022ff <loadbuiltinfonts()>:
100022ff:	56                   	push   esi
10002300:	53                   	push   ebx
10002301:	52                   	push   edx
10002302:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002304: R_386_32	nextfont_
1000230c:	bb 00 00 00 00       	mov    ebx,0x0	1000230d: R_386_32	FontWidths
10002311:	ba f2 0d 00 00       	mov    edx,0xdf2
10002316:	8d 82 0e f2 ff ff    	lea    eax,[edx-0xdf2]
1000231c:	89 de                	mov    esi,ebx
1000231e:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10002320: R_386_32	Fonts
10002325:	b9 01 00 00 00       	mov    ecx,0x1
1000232a:	c6 84 08 00 00 00 00 66 	mov    BYTE PTR [eax+ecx*1+0x0],0x66	1000232d: R_386_32	Fonts
10002332:	41                   	inc    ecx
10002333:	83 f9 0d             	cmp    ecx,0xd
10002336:	75 f2                	jne    1000232a <loadbuiltinfonts()+0x2b>
10002338:	c6 80 0d 00 00 00 00 	mov    BYTE PTR [eax+0xd],0x0	1000233a: R_386_32	Fonts
1000233f:	c6 06 08             	mov    BYTE PTR [esi],0x8
10002342:	46                   	inc    esi
10002343:	83 c0 0e             	add    eax,0xe
10002346:	39 d0                	cmp    eax,edx
10002348:	75 d4                	jne    1000231e <loadbuiltinfonts()+0x1f>
1000234a:	8d 90 f2 0d 00 00    	lea    edx,[eax+0xdf2]
10002350:	81 c3 ff 00 00 00    	add    ebx,0xff
10002356:	81 fa 90 6f 00 00    	cmp    edx,0x6f90
1000235c:	75 b8                	jne    10002316 <loadbuiltinfonts()+0x17>
1000235e:	b8 00 02 00 00       	mov    eax,0x200
10002363:	0f be 90 10 00 00 00 	movsx  edx,BYTE PTR [eax+0x10]	10002366: R_386_32	FONT
1000236a:	8a 88 1f 00 00 00    	mov    cl,BYTE PTR [eax+0x1f]	1000236c: R_386_32	FONT
10002370:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	10002372: R_386_32	FontWidths
10002376:	6b ca 0e             	imul   ecx,edx,0xe
10002379:	31 d2                	xor    edx,edx
1000237b:	8a 9c 10 11 00 00 00 	mov    bl,BYTE PTR [eax+edx*1+0x11]	1000237e: R_386_32	FONT
10002382:	88 9c 11 00 00 00 00 	mov    BYTE PTR [ecx+edx*1+0x0],bl	10002385: R_386_32	Fonts
10002389:	42                   	inc    edx
1000238a:	83 fa 0e             	cmp    edx,0xe
1000238d:	75 ec                	jne    1000237b <loadbuiltinfonts()+0x7c>
1000238f:	83 c0 10             	add    eax,0x10
10002392:	3d 00 08 00 00       	cmp    eax,0x800
10002397:	75 ca                	jne    10002363 <loadbuiltinfonts()+0x64>
10002399:	50                   	push   eax
1000239a:	50                   	push   eax
1000239b:	68 35 2e 00 10       	push   0x10002e35	1000239c: R_386_32	.text
100023a0:	68 00 00 00 00       	push   0x0	100023a1: R_386_32	FontNames
100023a5:	e8 fc ff ff ff       	call   100023a6 <loadbuiltinfonts()+0xa7>	100023a6: R_386_PC32	strcpy
100023aa:	83 c4 0c             	add    esp,0xc
100023ad:	68 00 00 00 00       	push   0x0	100023ae: R_386_32	FontNames
100023b2:	6a 00                	push   0x0
100023b4:	68 21 2e 00 10       	push   0x10002e21	100023b5: R_386_32	.text
100023b9:	e8 fc ff ff ff       	call   100023ba <loadbuiltinfonts()+0xbb>	100023ba: R_386_PC32	Dbg::kprintf(char const*, ...)
100023be:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100023c0: R_386_32	nextfont_
100023c8:	83 c4 14             	add    esp,0x14
100023cb:	5b                   	pop    ebx
100023cc:	5e                   	pop    esi
100023cd:	c3                   	ret    

100023ce <loadfonts()>:
100023ce:	57                   	push   edi
100023cf:	56                   	push   esi
100023d0:	53                   	push   ebx
100023d1:	81 ec 1c 02 00 00    	sub    esp,0x21c
100023d7:	68 14 01 00 00       	push   0x114
100023dc:	e8 fc ff ff ff       	call   100023dd <loadfonts()+0xf>	100023dd: R_386_PC32	malloc
100023e1:	89 c3                	mov    ebx,eax
100023e3:	83 c4 0c             	add    esp,0xc
100023e6:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100023e8: R_386_32	kernelProcess
100023ec:	68 3c 2e 00 10       	push   0x10002e3c	100023ed: R_386_32	.text
100023f1:	50                   	push   eax
100023f2:	e8 fc ff ff ff       	call   100023f3 <loadfonts()+0x25>	100023f3: R_386_PC32	Directory::Directory(char const*, Process*)
100023f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
100023fa:	e8 fc ff ff ff       	call   100023fb <loadfonts()+0x2d>	100023fb: R_386_PC32	Directory::open()
100023ff:	83 c4 10             	add    esp,0x10
10002402:	51                   	push   ecx
10002403:	51                   	push   ecx
10002404:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
1000240b:	50                   	push   eax
1000240c:	53                   	push   ebx
1000240d:	e8 fc ff ff ff       	call   1000240e <loadfonts()+0x40>	1000240e: R_386_PC32	Directory::read(dirent*)
10002412:	89 c6                	mov    esi,eax
10002414:	5f                   	pop    edi
10002415:	58                   	pop    eax
10002416:	56                   	push   esi
10002417:	68 53 2e 00 10       	push   0x10002e53	10002418: R_386_32	.text
1000241c:	e8 fc ff ff ff       	call   1000241d <loadfonts()+0x4f>	1000241d: R_386_PC32	Dbg::kprintf(char const*, ...)
10002421:	83 c4 10             	add    esp,0x10
10002424:	85 f6                	test   esi,esi
10002426:	75 4c                	jne    10002474 <loadfonts()+0xa6>
10002428:	80 bc 24 10 01 00 00 00 	cmp    BYTE PTR [esp+0x110],0x0
10002430:	74 42                	je     10002474 <loadfonts()+0xa6>
10002432:	f6 84 24 0c 01 00 00 02 	test   BYTE PTR [esp+0x10c],0x2
1000243a:	75 c6                	jne    10002402 <loadfonts()+0x34>
1000243c:	50                   	push   eax
1000243d:	50                   	push   eax
1000243e:	68 67 2e 00 10       	push   0x10002e67	1000243f: R_386_32	.text
10002443:	8d 74 24 0c          	lea    esi,[esp+0xc]
10002447:	56                   	push   esi
10002448:	e8 fc ff ff ff       	call   10002449 <loadfonts()+0x7b>	10002449: R_386_PC32	strcpy
1000244d:	5a                   	pop    edx
1000244e:	59                   	pop    ecx
1000244f:	8d bc 24 18 01 00 00 	lea    edi,[esp+0x118]
10002456:	57                   	push   edi
10002457:	56                   	push   esi
10002458:	e8 fc ff ff ff       	call   10002459 <loadfonts()+0x8b>	10002459: R_386_PC32	strcat
1000245d:	58                   	pop    eax
1000245e:	5a                   	pop    edx
1000245f:	57                   	push   edi
10002460:	68 7f 2e 00 10       	push   0x10002e7f	10002461: R_386_32	.text
10002465:	e8 fc ff ff ff       	call   10002466 <loadfonts()+0x98>	10002466: R_386_PC32	Dbg::kprintf(char const*, ...)
1000246a:	89 34 24             	mov    DWORD PTR [esp],esi
1000246d:	e8 fc ff ff ff       	call   1000246e <loadfonts()+0xa0>	1000246e: R_386_PC32	loadFontWithName(char*)
10002472:	eb 8b                	jmp    100023ff <loadfonts()+0x31>
10002474:	83 ec 0c             	sub    esp,0xc
10002477:	53                   	push   ebx
10002478:	e8 fc ff ff ff       	call   10002479 <loadfonts()+0xab>	10002479: R_386_PC32	Directory::close()
1000247d:	83 c4 10             	add    esp,0x10
10002480:	85 db                	test   ebx,ebx
10002482:	74 0c                	je     10002490 <loadfonts()+0xc2>
10002484:	83 ec 0c             	sub    esp,0xc
10002487:	8b 03                	mov    eax,DWORD PTR [ebx]
10002489:	53                   	push   ebx
1000248a:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000248d:	83 c4 10             	add    esp,0x10
10002490:	81 c4 10 02 00 00    	add    esp,0x210
10002496:	5b                   	pop    ebx
10002497:	5e                   	pop    esi
10002498:	5f                   	pop    edi
10002499:	c3                   	ret    

1000249a <getLegacyFont(char const*)>:
1000249a:	57                   	push   edi
1000249b:	56                   	push   esi
1000249c:	53                   	push   ebx
1000249d:	81 ec 08 01 00 00    	sub    esp,0x108
100024a3:	8b b4 24 18 01 00 00 	mov    esi,DWORD PTR [esp+0x118]
100024aa:	68 8d 2e 00 10       	push   0x10002e8d	100024ab: R_386_32	.text
100024af:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
100024b3:	53                   	push   ebx
100024b4:	e8 fc ff ff ff       	call   100024b5 <getLegacyFont(char const*)+0x1b>	100024b5: R_386_PC32	strcpy
100024b9:	59                   	pop    ecx
100024ba:	5f                   	pop    edi
100024bb:	56                   	push   esi
100024bc:	53                   	push   ebx
100024bd:	e8 fc ff ff ff       	call   100024be <getLegacyFont(char const*)+0x24>	100024be: R_386_PC32	strcat
100024c2:	58                   	pop    eax
100024c3:	5a                   	pop    edx
100024c4:	68 a5 2e 00 10       	push   0x10002ea5	100024c5: R_386_32	.text
100024c9:	53                   	push   ebx
100024ca:	e8 fc ff ff ff       	call   100024cb <getLegacyFont(char const*)+0x31>	100024cb: R_386_PC32	strcat
100024cf:	83 c4 10             	add    esp,0x10
100024d2:	31 db                	xor    ebx,ebx
100024d4:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	100024d6: R_386_32	nextfont_
100024da:	39 df                	cmp    edi,ebx
100024dc:	7e 3b                	jle    10002519 <getLegacyFont(char const*)+0x7f>
100024de:	69 fb ff 00 00 00    	imul   edi,ebx,0xff
100024e4:	81 c7 00 00 00 00    	add    edi,0x0	100024e6: R_386_32	FontNames
100024ea:	50                   	push   eax
100024eb:	56                   	push   esi
100024ec:	57                   	push   edi
100024ed:	68 aa 2e 00 10       	push   0x10002eaa	100024ee: R_386_32	.text
100024f2:	e8 fc ff ff ff       	call   100024f3 <getLegacyFont(char const*)+0x59>	100024f3: R_386_PC32	Dbg::kprintf(char const*, ...)
100024f7:	58                   	pop    eax
100024f8:	5a                   	pop    edx
100024f9:	56                   	push   esi
100024fa:	57                   	push   edi
100024fb:	e8 fc ff ff ff       	call   100024fc <getLegacyFont(char const*)+0x62>	100024fc: R_386_PC32	strcmp
10002500:	83 c4 10             	add    esp,0x10
10002503:	85 c0                	test   eax,eax
10002505:	75 0f                	jne    10002516 <getLegacyFont(char const*)+0x7c>
10002507:	51                   	push   ecx
10002508:	53                   	push   ebx
10002509:	56                   	push   esi
1000250a:	68 b5 2e 00 10       	push   0x10002eb5	1000250b: R_386_32	.text
1000250f:	e8 fc ff ff ff       	call   10002510 <getLegacyFont(char const*)+0x76>	10002510: R_386_PC32	Dbg::kprintf(char const*, ...)
10002514:	eb 43                	jmp    10002559 <getLegacyFont(char const*)+0xbf>
10002516:	43                   	inc    ebx
10002517:	eb bb                	jmp    100024d4 <getLegacyFont(char const*)+0x3a>
10002519:	83 ec 0c             	sub    esp,0xc
1000251c:	56                   	push   esi
1000251d:	e8 fc ff ff ff       	call   1000251e <getLegacyFont(char const*)+0x84>	1000251e: R_386_PC32	loadFontWithName(char*)
10002522:	a1 00 00 00 00       	mov    eax,ds:0x0	10002523: R_386_32	nextfont_
10002527:	83 c4 10             	add    esp,0x10
1000252a:	39 c7                	cmp    edi,eax
1000252c:	75 15                	jne    10002543 <getLegacyFont(char const*)+0xa9>
1000252e:	83 ec 0c             	sub    esp,0xc
10002531:	68 d9 2e 00 10       	push   0x10002ed9	10002532: R_386_32	.text
10002536:	e8 fc ff ff ff       	call   10002537 <getLegacyFont(char const*)+0x9d>	10002537: R_386_PC32	Dbg::kprintf(char const*, ...)
1000253b:	83 c4 10             	add    esp,0x10
1000253e:	83 cb ff             	or     ebx,0xffffffff
10002541:	eb 19                	jmp    1000255c <getLegacyFont(char const*)+0xc2>
10002543:	52                   	push   edx
10002544:	48                   	dec    eax
10002545:	50                   	push   eax
10002546:	56                   	push   esi
10002547:	68 f6 2e 00 10       	push   0x10002ef6	10002548: R_386_32	.text
1000254c:	e8 fc ff ff ff       	call   1000254d <getLegacyFont(char const*)+0xb3>	1000254d: R_386_PC32	Dbg::kprintf(char const*, ...)
10002551:	a1 00 00 00 00       	mov    eax,ds:0x0	10002552: R_386_32	nextfont_
10002556:	8d 58 ff             	lea    ebx,[eax-0x1]
10002559:	83 c4 10             	add    esp,0x10
1000255c:	89 d8                	mov    eax,ebx
1000255e:	81 c4 00 01 00 00    	add    esp,0x100
10002564:	5b                   	pop    ebx
10002565:	5e                   	pop    esi
10002566:	5f                   	pop    edi
10002567:	c3                   	ret    

10002568 <getLegacyFont(LegacyFontType)>:
10002568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000256c:	83 f8 05             	cmp    eax,0x5
1000256f:	77 46                	ja     100025b7 <getLegacyFont(LegacyFontType)+0x4f>
10002571:	ff 24 85 40 2f 00 10 	jmp    DWORD PTR [eax*4+0x10002f40]	10002574: R_386_32	.text
10002578:	c7 44 24 04 35 2e 00 10 	mov    DWORD PTR [esp+0x4],0x10002e35	1000257c: R_386_32	.text
10002580:	eb 30                	jmp    100025b2 <getLegacyFont(LegacyFontType)+0x4a>
10002582:	c7 44 24 04 17 2f 00 10 	mov    DWORD PTR [esp+0x4],0x10002f17	10002586: R_386_32	.text
1000258a:	eb 26                	jmp    100025b2 <getLegacyFont(LegacyFontType)+0x4a>
1000258c:	c7 44 24 04 1f 2f 00 10 	mov    DWORD PTR [esp+0x4],0x10002f1f	10002590: R_386_32	.text
10002594:	eb 1c                	jmp    100025b2 <getLegacyFont(LegacyFontType)+0x4a>
10002596:	c7 44 24 04 28 2f 00 10 	mov    DWORD PTR [esp+0x4],0x10002f28	1000259a: R_386_32	.text
1000259e:	eb 12                	jmp    100025b2 <getLegacyFont(LegacyFontType)+0x4a>
100025a0:	c7 44 24 04 30 2f 00 10 	mov    DWORD PTR [esp+0x4],0x10002f30	100025a4: R_386_32	.text
100025a8:	eb 08                	jmp    100025b2 <getLegacyFont(LegacyFontType)+0x4a>
100025aa:	c7 44 24 04 36 2f 00 10 	mov    DWORD PTR [esp+0x4],0x10002f36	100025ae: R_386_32	.text
100025b2:	e9 e3 fe ff ff       	jmp    1000249a <getLegacyFont(char const*)>
100025b7:	83 c8 ff             	or     eax,0xffffffff
100025ba:	c3                   	ret    
100025bb:	90                   	nop

100025bc <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)>:
100025bc:	57                   	push   edi
100025bd:	53                   	push   ebx
100025be:	83 ec 08             	sub    esp,0x8
100025c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100025c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100025c9:	6a 02                	push   0x2
100025cb:	53                   	push   ebx
100025cc:	e8 fc ff ff ff       	call   100025cd <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x11>	100025cd: R_386_PC32	GDO::GDO(GDOType, Context*)
100025d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100025d5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100025d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100025dc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
100025df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100025e3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
100025e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100025e7: R_386_32	System
100025eb:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
100025ee:	83 c9 ff             	or     ecx,0xffffffff
100025f1:	31 c0                	xor    eax,eax
100025f3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
100025f7:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
100025f9:	89 ca                	mov    edx,ecx
100025fb:	f7 d2                	not    edx
100025fd:	89 14 24             	mov    DWORD PTR [esp],edx
10002600:	e8 fc ff ff ff       	call   10002601 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x45>	10002601: R_386_PC32	malloc
10002605:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
10002608:	5a                   	pop    edx
10002609:	59                   	pop    ecx
1000260a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000260e:	50                   	push   eax
1000260f:	e8 fc ff ff ff       	call   10002610 <LegacyTextObject::LegacyTextObject(char const*, int, int, unsigned int, Context*)+0x54>	10002610: R_386_PC32	strcpy
10002614:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002617: R_386_32	legacyDraw(GDO*)
1000261b:	83 c4 14             	add    esp,0x14
1000261e:	5b                   	pop    ebx
1000261f:	5f                   	pop    edi
10002620:	c3                   	ret    
10002621:	90                   	nop

10002622 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)>:
10002622:	57                   	push   edi
10002623:	53                   	push   ebx
10002624:	83 ec 08             	sub    esp,0x8
10002627:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000262b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000262f:	6a 02                	push   0x2
10002631:	53                   	push   ebx
10002632:	e8 fc ff ff ff       	call   10002633 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x11>	10002633: R_386_PC32	GDO::GDO(GDOType, Context*)
10002637:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000263b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000263e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002642:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10002645:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002649:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
1000264c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002650:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
10002653:	83 c9 ff             	or     ecx,0xffffffff
10002656:	31 c0                	xor    eax,eax
10002658:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
1000265c:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
1000265e:	89 ca                	mov    edx,ecx
10002660:	f7 d2                	not    edx
10002662:	89 14 24             	mov    DWORD PTR [esp],edx
10002665:	e8 fc ff ff ff       	call   10002666 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x44>	10002666: R_386_PC32	malloc
1000266a:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
1000266d:	5a                   	pop    edx
1000266e:	59                   	pop    ecx
1000266f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10002673:	50                   	push   eax
10002674:	e8 fc ff ff ff       	call   10002675 <LegacyTextObject::LegacyTextObject(int, char const*, int, int, unsigned int, Context*)+0x53>	10002675: R_386_PC32	strcpy
10002679:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	1000267c: R_386_32	legacyDraw(GDO*)
10002680:	83 c4 14             	add    esp,0x14
10002683:	5b                   	pop    ebx
10002684:	5f                   	pop    edi
10002685:	c3                   	ret    

10002686 <legacyFontInit()>:
10002686:	83 ec 0c             	sub    esp,0xc
10002689:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000268b: R_386_32	nextfont_
10002693:	e8 fc ff ff ff       	call   10002694 <legacyFontInit()+0xe>	10002694: R_386_PC32	loadbuiltinfonts()
10002698:	e8 fc ff ff ff       	call   10002699 <legacyFontInit()+0x13>	10002699: R_386_PC32	loadfonts()
1000269d:	83 ec 0c             	sub    esp,0xc
100026a0:	68 35 2e 00 10       	push   0x10002e35	100026a1: R_386_32	.text
100026a5:	e8 fc ff ff ff       	call   100026a6 <legacyFontInit()+0x20>	100026a6: R_386_PC32	getLegacyFont(char const*)
100026aa:	a3 00 00 00 00       	mov    ds:0x0,eax	100026ab: R_386_32	System
100026af:	83 c4 1c             	add    esp,0x1c
100026b2:	c3                   	ret    
100026b3:	90                   	nop

100026b4 <rectDrawFunc(GDO*)>:
100026b4:	83 ec 14             	sub    esp,0x14
100026b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100026bb:	ff 70 50             	push   DWORD PTR [eax+0x50]
100026be:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
100026c1:	ff 70 48             	push   DWORD PTR [eax+0x48]
100026c4:	ff 70 44             	push   DWORD PTR [eax+0x44]
100026c7:	ff 70 40             	push   DWORD PTR [eax+0x40]
100026ca:	ff 70 04             	push   DWORD PTR [eax+0x4]
100026cd:	e8 fc ff ff ff       	call   100026ce <rectDrawFunc(GDO*)+0x1a>	100026ce: R_386_PC32	Context::fillRect(int, int, int, int, unsigned int)
100026d2:	83 c4 2c             	add    esp,0x2c
100026d5:	c3                   	ret    

100026d6 <rectPtnDrawFunc(GDO*)>:
100026d6:	83 ec 14             	sub    esp,0x14
100026d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100026dd:	ff 70 50             	push   DWORD PTR [eax+0x50]
100026e0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
100026e3:	ff 70 48             	push   DWORD PTR [eax+0x48]
100026e6:	ff 70 44             	push   DWORD PTR [eax+0x44]
100026e9:	ff 70 40             	push   DWORD PTR [eax+0x40]
100026ec:	ff 70 04             	push   DWORD PTR [eax+0x4]
100026ef:	e8 fc ff ff ff       	call   100026f0 <rectPtnDrawFunc(GDO*)+0x1a>	100026f0: R_386_PC32	Context::fillRect(int, int, int, int, Brush*)
100026f4:	83 c4 2c             	add    esp,0x2c
100026f7:	c3                   	ret    

100026f8 <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)>:
100026f8:	53                   	push   ebx
100026f9:	83 ec 0c             	sub    esp,0xc
100026fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002700:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002704:	6a 01                	push   0x1
10002706:	53                   	push   ebx
10002707:	e8 fc ff ff ff       	call   10002708 <Rectangle::Rectangle(int, int, int, int, Brush*, Context*)+0x10>	10002708: R_386_PC32	GDO::GDO(GDOType, Context*)
1000270c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002710:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10002713:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10002717:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
1000271a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000271e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10002721:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002725:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
10002728:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000272c:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
1000272f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002732: R_386_32	rectPtnDrawFunc(GDO*)
10002736:	83 c4 18             	add    esp,0x18
10002739:	5b                   	pop    ebx
1000273a:	c3                   	ret    
1000273b:	90                   	nop

1000273c <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)>:
1000273c:	53                   	push   ebx
1000273d:	83 ec 0c             	sub    esp,0xc
10002740:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002744:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002748:	6a 01                	push   0x1
1000274a:	53                   	push   ebx
1000274b:	e8 fc ff ff ff       	call   1000274c <Rectangle::Rectangle(int, int, int, int, unsigned int, Context*)+0x10>	1000274c: R_386_PC32	GDO::GDO(GDOType, Context*)
10002750:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002754:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
10002757:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000275b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
1000275e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002762:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
10002765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002769:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
1000276c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002770:	89 43 50             	mov    DWORD PTR [ebx+0x50],eax
10002773:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	10002776: R_386_32	rectDrawFunc(GDO*)
1000277a:	83 c4 18             	add    esp,0x18
1000277d:	5b                   	pop    ebx
1000277e:	c3                   	ret    
1000277f:	90                   	nop

10002780 <regnDrawFunc(GDO*)>:
10002780:	c3                   	ret    
10002781:	90                   	nop

10002782 <Region::Region(int, int, int, int, Context*)>:
10002782:	53                   	push   ebx
10002783:	83 ec 0c             	sub    esp,0xc
10002786:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000278a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000278e:	6a 00                	push   0x0
10002790:	53                   	push   ebx
10002791:	e8 fc ff ff ff       	call   10002792 <Region::Region(int, int, int, int, Context*)+0x10>	10002792: R_386_PC32	GDO::GDO(GDOType, Context*)
10002796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
1000279a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
1000279d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100027a1:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
100027a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100027a8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
100027ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100027af:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
100027b2:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0	100027b5: R_386_32	regnDrawFunc(GDO*)
100027b9:	83 c4 18             	add    esp,0x18
100027bc:	5b                   	pop    ebx
100027bd:	c3                   	ret    

100027be <Region::getRegionsAbove(Region*)>:
100027be:	55                   	push   ebp
100027bf:	57                   	push   edi
100027c0:	56                   	push   esi
100027c1:	53                   	push   ebx
100027c2:	83 ec 28             	sub    esp,0x28
100027c5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
100027c9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100027cd:	6a 08                	push   0x8
100027cf:	e8 fc ff ff ff       	call   100027d0 <Region::getRegionsAbove(Region*)+0x12>	100027d0: R_386_PC32	malloc
100027d4:	89 c3                	mov    ebx,eax
100027d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100027dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100027e3:	89 3c 24             	mov    DWORD PTR [esp],edi
100027e6:	e8 fc ff ff ff       	call   100027e7 <Region::getRegionsAbove(Region*)+0x29>	100027e7: R_386_PC32	GDO::resetNext()
100027eb:	83 c4 10             	add    esp,0x10
100027ee:	83 ec 0c             	sub    esp,0xc
100027f1:	57                   	push   edi
100027f2:	e8 fc ff ff ff       	call   100027f3 <Region::getRegionsAbove(Region*)+0x35>	100027f3: R_386_PC32	GDO::hasNext()
100027f7:	83 c4 10             	add    esp,0x10
100027fa:	84 c0                	test   al,al
100027fc:	74 10                	je     1000280e <Region::getRegionsAbove(Region*)+0x50>
100027fe:	83 ec 0c             	sub    esp,0xc
10002801:	57                   	push   edi
10002802:	e8 fc ff ff ff       	call   10002803 <Region::getRegionsAbove(Region*)+0x45>	10002803: R_386_PC32	GDO::getNext()
10002807:	83 c4 10             	add    esp,0x10
1000280a:	39 e8                	cmp    eax,ebp
1000280c:	75 e0                	jne    100027ee <Region::getRegionsAbove(Region*)+0x30>
1000280e:	83 ec 0c             	sub    esp,0xc
10002811:	57                   	push   edi
10002812:	e8 fc ff ff ff       	call   10002813 <Region::getRegionsAbove(Region*)+0x55>	10002813: R_386_PC32	GDO::hasNext()
10002817:	83 c4 10             	add    esp,0x10
1000281a:	84 c0                	test   al,al
1000281c:	74 7b                	je     10002899 <Region::getRegionsAbove(Region*)+0xdb>
1000281e:	83 ec 0c             	sub    esp,0xc
10002821:	57                   	push   edi
10002822:	e8 fc ff ff ff       	call   10002823 <Region::getRegionsAbove(Region*)+0x65>	10002823: R_386_PC32	GDO::getNext()
10002827:	89 c6                	mov    esi,eax
10002829:	83 c4 10             	add    esp,0x10
1000282c:	85 c0                	test   eax,eax
1000282e:	74 de                	je     1000280e <Region::getRegionsAbove(Region*)+0x50>
10002830:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
10002833:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10002837:	8b 56 2c             	mov    edx,DWORD PTR [esi+0x2c]
1000283a:	03 45 34             	add    eax,DWORD PTR [ebp+0x34]
1000283d:	39 d0                	cmp    eax,edx
1000283f:	7e cd                	jle    1000280e <Region::getRegionsAbove(Region*)+0x50>
10002841:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
10002844:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
10002847:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000284b:	8b 45 38             	mov    eax,DWORD PTR [ebp+0x38]
1000284e:	01 c8                	add    eax,ecx
10002850:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10002854:	7e b8                	jle    1000280e <Region::getRegionsAbove(Region*)+0x50>
10002856:	03 56 34             	add    edx,DWORD PTR [esi+0x34]
10002859:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
1000285d:	7d af                	jge    1000280e <Region::getRegionsAbove(Region*)+0x50>
1000285f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002863:	03 46 38             	add    eax,DWORD PTR [esi+0x38]
10002866:	39 c1                	cmp    ecx,eax
10002868:	7d a4                	jge    1000280e <Region::getRegionsAbove(Region*)+0x50>
1000286a:	83 ec 0c             	sub    esp,0xc
1000286d:	6a 0c                	push   0xc
1000286f:	e8 fc ff ff ff       	call   10002870 <Region::getRegionsAbove(Region*)+0xb2>	10002870: R_386_PC32	malloc
10002874:	89 30                	mov    DWORD PTR [eax],esi
10002876:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10002879:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
1000287c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10002883:	83 c4 10             	add    esp,0x10
10002886:	85 d2                	test   edx,edx
10002888:	74 05                	je     1000288f <Region::getRegionsAbove(Region*)+0xd1>
1000288a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
1000288d:	eb 02                	jmp    10002891 <Region::getRegionsAbove(Region*)+0xd3>
1000288f:	89 03                	mov    DWORD PTR [ebx],eax
10002891:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10002894:	e9 75 ff ff ff       	jmp    1000280e <Region::getRegionsAbove(Region*)+0x50>
10002899:	89 d8                	mov    eax,ebx
1000289b:	83 c4 1c             	add    esp,0x1c
1000289e:	5b                   	pop    ebx
1000289f:	5e                   	pop    esi
100028a0:	5f                   	pop    edi
100028a1:	5d                   	pop    ebp
100028a2:	c3                   	ret    
100028a3:	90                   	nop

100028a4 <Region::applyBoundClipping(int, List<CRect*>*)>:
100028a4:	55                   	push   ebp
100028a5:	57                   	push   edi
100028a6:	56                   	push   esi
100028a7:	53                   	push   ebx
100028a8:	83 ec 1c             	sub    esp,0x1c
100028ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100028af:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
100028b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
100028b7:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
100028bb:	0f 84 ef 01 00 00    	je     10002ab0 <Region::applyBoundClipping(int, List<CRect*>*)+0x20c>
100028c1:	83 ec 0c             	sub    esp,0xc
100028c4:	53                   	push   ebx
100028c5:	e8 fc ff ff ff       	call   100028c6 <Region::applyBoundClipping(int, List<CRect*>*)+0x22>	100028c6: R_386_PC32	GDO::screenX()
100028ca:	89 c5                	mov    ebp,eax
100028cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
100028cf:	e8 fc ff ff ff       	call   100028d0 <Region::applyBoundClipping(int, List<CRect*>*)+0x2c>	100028d0: R_386_PC32	GDO::screenY()
100028d4:	89 c6                	mov    esi,eax
100028d6:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
100028dd:	e8 fc ff ff ff       	call   100028de <Region::applyBoundClipping(int, List<CRect*>*)+0x3a>	100028de: R_386_PC32	malloc
100028e2:	89 c7                	mov    edi,eax
100028e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
100028e7:	01 e8                	add    eax,ebp
100028e9:	48                   	dec    eax
100028ea:	89 04 24             	mov    DWORD PTR [esp],eax
100028ed:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
100028f0:	01 f0                	add    eax,esi
100028f2:	48                   	dec    eax
100028f3:	50                   	push   eax
100028f4:	55                   	push   ebp
100028f5:	56                   	push   esi
100028f6:	57                   	push   edi
100028f7:	e8 fc ff ff ff       	call   100028f8 <Region::applyBoundClipping(int, List<CRect*>*)+0x54>	100028f8: R_386_PC32	CRect::CRect(int, int, int, int)
100028fc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
100028ff:	83 c4 20             	add    esp,0x20
10002902:	85 c0                	test   eax,eax
10002904:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10002908:	0f 85 ab 00 00 00    	jne    100029b9 <Region::applyBoundClipping(int, List<CRect*>*)+0x115>
1000290e:	85 d2                	test   edx,edx
10002910:	0f 84 8c 00 00 00    	je     100029a2 <Region::applyBoundClipping(int, List<CRect*>*)+0xfe>
10002916:	31 f6                	xor    esi,esi
10002918:	8b 02                	mov    eax,DWORD PTR [edx]
1000291a:	89 c5                	mov    ebp,eax
1000291c:	31 c9                	xor    ecx,ecx
1000291e:	85 ed                	test   ebp,ebp
10002920:	74 06                	je     10002928 <Region::applyBoundClipping(int, List<CRect*>*)+0x84>
10002922:	41                   	inc    ecx
10002923:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10002926:	eb f6                	jmp    1000291e <Region::applyBoundClipping(int, List<CRect*>*)+0x7a>
10002928:	39 ce                	cmp    esi,ecx
1000292a:	7d 5f                	jge    1000298b <Region::applyBoundClipping(int, List<CRect*>*)+0xe7>
1000292c:	89 c5                	mov    ebp,eax
1000292e:	31 c9                	xor    ecx,ecx
10002930:	85 ed                	test   ebp,ebp
10002932:	74 06                	je     1000293a <Region::applyBoundClipping(int, List<CRect*>*)+0x96>
10002934:	41                   	inc    ecx
10002935:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10002938:	eb f6                	jmp    10002930 <Region::applyBoundClipping(int, List<CRect*>*)+0x8c>
1000293a:	39 ce                	cmp    esi,ecx
1000293c:	7f 0c                	jg     1000294a <Region::applyBoundClipping(int, List<CRect*>*)+0xa6>
1000293e:	89 f1                	mov    ecx,esi
10002940:	85 c9                	test   ecx,ecx
10002942:	74 06                	je     1000294a <Region::applyBoundClipping(int, List<CRect*>*)+0xa6>
10002944:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10002947:	49                   	dec    ecx
10002948:	eb f6                	jmp    10002940 <Region::applyBoundClipping(int, List<CRect*>*)+0x9c>
1000294a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000294e:	8b 28                	mov    ebp,DWORD PTR [eax]
10002950:	83 ec 0c             	sub    esp,0xc
10002953:	6a 10                	push   0x10
10002955:	e8 fc ff ff ff       	call   10002956 <Region::applyBoundClipping(int, List<CRect*>*)+0xb2>	10002956: R_386_PC32	malloc
1000295a:	59                   	pop    ecx
1000295b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
1000295e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10002961:	ff 75 00             	push   DWORD PTR [ebp+0x0]
10002964:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002967:	50                   	push   eax
10002968:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000296c:	e8 fc ff ff ff       	call   1000296d <Region::applyBoundClipping(int, List<CRect*>*)+0xc9>	1000296d: R_386_PC32	CRect::CRect(int, int, int, int)
10002971:	83 c4 18             	add    esp,0x18
10002974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002978:	50                   	push   eax
10002979:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000297c:	e8 fc ff ff ff       	call   1000297d <Region::applyBoundClipping(int, List<CRect*>*)+0xd9>	1000297d: R_386_PC32	Context::addClipRect(CRect*)
10002981:	46                   	inc    esi
10002982:	83 c4 10             	add    esp,0x10
10002985:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002989:	eb 8d                	jmp    10002918 <Region::applyBoundClipping(int, List<CRect*>*)+0x74>
1000298b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
1000298f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10002992:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002996:	83 c4 1c             	add    esp,0x1c
10002999:	5b                   	pop    ebx
1000299a:	5e                   	pop    esi
1000299b:	5f                   	pop    edi
1000299c:	5d                   	pop    ebp
1000299d:	e9 fc ff ff ff       	jmp    1000299e <Region::applyBoundClipping(int, List<CRect*>*)+0xfa>	1000299e: R_386_PC32	Context::intersectClipRect(CRect*)
100029a2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
100029a6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100029a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100029ad:	83 c4 1c             	add    esp,0x1c
100029b0:	5b                   	pop    ebx
100029b1:	5e                   	pop    esi
100029b2:	5f                   	pop    edi
100029b3:	5d                   	pop    ebp
100029b4:	e9 fc ff ff ff       	jmp    100029b5 <Region::applyBoundClipping(int, List<CRect*>*)+0x111>	100029b5: R_386_PC32	Context::addClipRect(CRect*)
100029b9:	51                   	push   ecx
100029ba:	52                   	push   edx
100029bb:	6a 01                	push   0x1
100029bd:	50                   	push   eax
100029be:	e8 fc ff ff ff       	call   100029bf <Region::applyBoundClipping(int, List<CRect*>*)+0x11b>	100029bf: R_386_PC32	Region::applyBoundClipping(int, List<CRect*>*)
100029c3:	5e                   	pop    esi
100029c4:	5d                   	pop    ebp
100029c5:	57                   	push   edi
100029c6:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100029c9:	e8 fc ff ff ff       	call   100029ca <Region::applyBoundClipping(int, List<CRect*>*)+0x126>	100029ca: R_386_PC32	Context::intersectClipRect(CRect*)
100029ce:	58                   	pop    eax
100029cf:	5a                   	pop    edx
100029d0:	53                   	push   ebx
100029d1:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100029d4:	e8 fc ff ff ff       	call   100029d5 <Region::applyBoundClipping(int, List<CRect*>*)+0x131>	100029d5: R_386_PC32	Region::getRegionsAbove(Region*)
100029d9:	89 c6                	mov    esi,eax
100029db:	83 c4 10             	add    esp,0x10
100029de:	8b 06                	mov    eax,DWORD PTR [esi]
100029e0:	89 c1                	mov    ecx,eax
100029e2:	31 d2                	xor    edx,edx
100029e4:	85 c9                	test   ecx,ecx
100029e6:	74 06                	je     100029ee <Region::applyBoundClipping(int, List<CRect*>*)+0x14a>
100029e8:	42                   	inc    edx
100029e9:	8b 49 04             	mov    ecx,DWORD PTR [ecx+0x4]
100029ec:	eb f6                	jmp    100029e4 <Region::applyBoundClipping(int, List<CRect*>*)+0x140>
100029ee:	85 d2                	test   edx,edx
100029f0:	0f 84 8a 00 00 00    	je     10002a80 <Region::applyBoundClipping(int, List<CRect*>*)+0x1dc>
100029f6:	8b 38                	mov    edi,DWORD PTR [eax]
100029f8:	8b 68 04             	mov    ebp,DWORD PTR [eax+0x4]
100029fb:	52                   	push   edx
100029fc:	52                   	push   edx
100029fd:	6a 0c                	push   0xc
100029ff:	50                   	push   eax
10002a00:	e8 fc ff ff ff       	call   10002a01 <Region::applyBoundClipping(int, List<CRect*>*)+0x15d>	10002a01: R_386_PC32	operator delete(void*, unsigned long)
10002a05:	89 2e                	mov    DWORD PTR [esi],ebp
10002a07:	83 c4 10             	add    esp,0x10
10002a0a:	85 ed                	test   ebp,ebp
10002a0c:	75 09                	jne    10002a17 <Region::applyBoundClipping(int, List<CRect*>*)+0x173>
10002a0e:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10002a15:	eb 07                	jmp    10002a1e <Region::applyBoundClipping(int, List<CRect*>*)+0x17a>
10002a17:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
10002a1e:	83 ec 0c             	sub    esp,0xc
10002a21:	57                   	push   edi
10002a22:	e8 fc ff ff ff       	call   10002a23 <Region::applyBoundClipping(int, List<CRect*>*)+0x17f>	10002a23: R_386_PC32	GDO::screenX()
10002a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002a2b:	89 3c 24             	mov    DWORD PTR [esp],edi
10002a2e:	e8 fc ff ff ff       	call   10002a2f <Region::applyBoundClipping(int, List<CRect*>*)+0x18b>	10002a2f: R_386_PC32	GDO::screenY()
10002a33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002a37:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
10002a3e:	e8 fc ff ff ff       	call   10002a3f <Region::applyBoundClipping(int, List<CRect*>*)+0x19b>	10002a3f: R_386_PC32	malloc
10002a43:	89 c5                	mov    ebp,eax
10002a45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10002a49:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
10002a4c:	01 c8                	add    eax,ecx
10002a4e:	48                   	dec    eax
10002a4f:	89 04 24             	mov    DWORD PTR [esp],eax
10002a52:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10002a56:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
10002a59:	01 d0                	add    eax,edx
10002a5b:	48                   	dec    eax
10002a5c:	50                   	push   eax
10002a5d:	51                   	push   ecx
10002a5e:	52                   	push   edx
10002a5f:	55                   	push   ebp
10002a60:	e8 fc ff ff ff       	call   10002a61 <Region::applyBoundClipping(int, List<CRect*>*)+0x1bd>	10002a61: R_386_PC32	CRect::CRect(int, int, int, int)
10002a65:	83 c4 18             	add    esp,0x18
10002a68:	55                   	push   ebp
10002a69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10002a6c:	e8 fc ff ff ff       	call   10002a6d <Region::applyBoundClipping(int, List<CRect*>*)+0x1c9>	10002a6d: R_386_PC32	Context::subClipRect(CRect*)
10002a71:	59                   	pop    ecx
10002a72:	5f                   	pop    edi
10002a73:	6a 10                	push   0x10
10002a75:	55                   	push   ebp
10002a76:	e8 fc ff ff ff       	call   10002a77 <Region::applyBoundClipping(int, List<CRect*>*)+0x1d3>	10002a77: R_386_PC32	operator delete(void*, unsigned long)
10002a7b:	e9 5b ff ff ff       	jmp    100029db <Region::applyBoundClipping(int, List<CRect*>*)+0x137>
10002a80:	85 c0                	test   eax,eax
10002a82:	74 14                	je     10002a98 <Region::applyBoundClipping(int, List<CRect*>*)+0x1f4>
10002a84:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002a87:	52                   	push   edx
10002a88:	52                   	push   edx
10002a89:	6a 0c                	push   0xc
10002a8b:	50                   	push   eax
10002a8c:	e8 fc ff ff ff       	call   10002a8d <Region::applyBoundClipping(int, List<CRect*>*)+0x1e9>	10002a8d: R_386_PC32	operator delete(void*, unsigned long)
10002a91:	89 d8                	mov    eax,ebx
10002a93:	83 c4 10             	add    esp,0x10
10002a96:	eb e8                	jmp    10002a80 <Region::applyBoundClipping(int, List<CRect*>*)+0x1dc>
10002a98:	c7 44 24 34 08 00 00 00 	mov    DWORD PTR [esp+0x34],0x8
10002aa0:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
10002aa4:	83 c4 1c             	add    esp,0x1c
10002aa7:	5b                   	pop    ebx
10002aa8:	5e                   	pop    esi
10002aa9:	5f                   	pop    edi
10002aaa:	5d                   	pop    ebp
10002aab:	e9 fc ff ff ff       	jmp    10002aac <Region::applyBoundClipping(int, List<CRect*>*)+0x208>	10002aac: R_386_PC32	operator delete(void*, unsigned long)
10002ab0:	83 c4 1c             	add    esp,0x1c
10002ab3:	5b                   	pop    ebx
10002ab4:	5e                   	pop    esi
10002ab5:	5f                   	pop    edi
10002ab6:	5d                   	pop    ebp
10002ab7:	c3                   	ret    

10002ab8 <List<CRect*>::insertAtTail(CRect*)>:
10002ab8:	53                   	push   ebx
10002ab9:	83 ec 14             	sub    esp,0x14
10002abc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10002ac0:	6a 0c                	push   0xc
10002ac2:	e8 fc ff ff ff       	call   10002ac3 <List<CRect*>::insertAtTail(CRect*)+0xb>	10002ac3: R_386_PC32	malloc
10002ac7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10002acb:	89 10                	mov    DWORD PTR [eax],edx
10002acd:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10002ad0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10002ad3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10002ada:	83 c4 10             	add    esp,0x10
10002add:	85 d2                	test   edx,edx
10002adf:	74 05                	je     10002ae6 <List<CRect*>::insertAtTail(CRect*)+0x2e>
10002ae1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
10002ae4:	eb 02                	jmp    10002ae8 <List<CRect*>::insertAtTail(CRect*)+0x30>
10002ae6:	89 03                	mov    DWORD PTR [ebx],eax
10002ae8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10002aeb:	83 c4 08             	add    esp,0x8
10002aee:	5b                   	pop    ebx
10002aef:	c3                   	ret    

10002af0 <List<CRect*>::deleteHead()>:
10002af0:	56                   	push   esi
10002af1:	53                   	push   ebx
10002af2:	51                   	push   ecx
10002af3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002af7:	8b 06                	mov    eax,DWORD PTR [esi]
10002af9:	85 c0                	test   eax,eax
10002afb:	74 26                	je     10002b23 <List<CRect*>::deleteHead()+0x33>
10002afd:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002b00:	52                   	push   edx
10002b01:	52                   	push   edx
10002b02:	6a 0c                	push   0xc
10002b04:	50                   	push   eax
10002b05:	e8 fc ff ff ff       	call   10002b06 <List<CRect*>::deleteHead()+0x16>	10002b06: R_386_PC32	operator delete(void*, unsigned long)
10002b0a:	89 1e                	mov    DWORD PTR [esi],ebx
10002b0c:	83 c4 10             	add    esp,0x10
10002b0f:	85 db                	test   ebx,ebx
10002b11:	75 09                	jne    10002b1c <List<CRect*>::deleteHead()+0x2c>
10002b13:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
10002b1a:	eb 07                	jmp    10002b23 <List<CRect*>::deleteHead()+0x33>
10002b1c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10002b23:	58                   	pop    eax
10002b24:	5b                   	pop    ebx
10002b25:	5e                   	pop    esi
10002b26:	c3                   	ret    
10002b27:	90                   	nop

10002b28 <List<CRect*>::~List()>:
10002b28:	53                   	push   ebx
10002b29:	83 ec 08             	sub    esp,0x8
10002b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002b30:	8b 00                	mov    eax,DWORD PTR [eax]
10002b32:	85 c0                	test   eax,eax
10002b34:	74 14                	je     10002b4a <List<CRect*>::~List()+0x22>
10002b36:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10002b39:	51                   	push   ecx
10002b3a:	51                   	push   ecx
10002b3b:	6a 0c                	push   0xc
10002b3d:	50                   	push   eax
10002b3e:	e8 fc ff ff ff       	call   10002b3f <List<CRect*>::~List()+0x17>	10002b3f: R_386_PC32	operator delete(void*, unsigned long)
10002b43:	89 d8                	mov    eax,ebx
10002b45:	83 c4 10             	add    esp,0x10
10002b48:	eb e8                	jmp    10002b32 <List<CRect*>::~List()+0xa>
10002b4a:	83 c4 08             	add    esp,0x8
10002b4d:	5b                   	pop    ebx
10002b4e:	c3                   	ret    
10002b4f:	43                   	inc    ebx
10002b50:	4c                   	dec    esp
10002b51:	49                   	dec    ecx
10002b52:	50                   	push   eax
10002b53:	44                   	inc    esp
10002b54:	52                   	push   edx
10002b55:	41                   	inc    ecx
10002b56:	57                   	push   edi
10002b57:	20 53 54             	and    BYTE PTR [ebx+0x54],dl
10002b5a:	41                   	inc    ecx
10002b5b:	52                   	push   edx
10002b5c:	54                   	push   esp
10002b5d:	45                   	inc    ebp
10002b5e:	44                   	inc    esp
10002b5f:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002b62:	54                   	push   esp
10002b63:	68 65 20 53 79       	push   0x79532065
10002b68:	73 74                	jae    10002bde <List<CRect*>::~List()+0xb6>
10002b6a:	65 6d                	gs ins DWORD PTR es:[edi],dx
10002b6c:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10002b6f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002b70:	74 21                	je     10002b93 <List<CRect*>::~List()+0x6b>
10002b72:	00 54 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dl
10002b76:	65 73 20             	gs jae 10002b99 <List<CRect*>::~List()+0x71>
10002b79:	4e                   	dec    esi
10002b7a:	65 77 20             	gs ja  10002b9d <List<CRect*>::~List()+0x75>
10002b7d:	52                   	push   edx
10002b7e:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002b7f:	6d                   	ins    DWORD PTR es:[edi],dx
10002b80:	61                   	popa   
10002b81:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002b82:	21 00                	and    DWORD PTR [eax],eax
10002b84:	43                   	inc    ebx
10002b85:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002b86:	6d                   	ins    DWORD PTR es:[edi],dx
10002b87:	69 63 20 53 61 6e 73 	imul   esp,DWORD PTR [ebx+0x20],0x736e6153
10002b8e:	21 20                	and    DWORD PTR [eax],esp
10002b90:	3a 29                	cmp    ch,BYTE PTR [ecx]
10002b92:	00 41 72             	add    BYTE PTR [ecx+0x72],al
10002b95:	69 61 6c 20 69 73 20 	imul   esp,DWORD PTR [ecx+0x6c],0x20736920
10002b9c:	73 6f                	jae    10002c0d <List<CRect*>::~List()+0xe5>
10002b9e:	20 62 6f             	and    BYTE PTR [edx+0x6f],ah
10002ba1:	72 69                	jb     10002c0c <List<CRect*>::~List()+0xe4>
10002ba3:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002ba4:	67 2e 2e 2e 00 43 6f 	cs cs add BYTE PTR cs:[bp+di+0x6f],al
10002bab:	75 72                	jne    10002c1f <List<CRect*>::~List()+0xf7>
10002bad:	69 65 72 20 66 6f 72 	imul   esp,DWORD PTR [ebp+0x72],0x726f6620
10002bb4:	20 70 72             	and    BYTE PTR [eax+0x72],dh
10002bb7:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002bb8:	67 72 61             	addr16 jb 10002c1c <List<CRect*>::~List()+0xf4>
10002bbb:	6d                   	ins    DWORD PTR es:[edi],dx
10002bbc:	6d                   	ins    DWORD PTR es:[edi],dx
10002bbd:	69 6e 67 2e 2e 2e 00 	imul   ebp,DWORD PTR [esi+0x67],0x2e2e2e
10002bc4:	50                   	push   eax
10002bc5:	55                   	push   ebp
10002bc6:	54                   	push   esp
10002bc7:	20 4d 4f             	and    BYTE PTR [ebp+0x4f],cl
10002bca:	55                   	push   ebp
10002bcb:	53                   	push   ebx
10002bcc:	45                   	inc    ebp
10002bcd:	20 49 4e             	and    BYTE PTR [ecx+0x4e],cl
10002bd0:	20 54 4f 50          	and    BYTE PTR [edi+ecx*2+0x50],dl
10002bd4:	20 52 49             	and    BYTE PTR [edx+0x49],dl
10002bd7:	47                   	inc    edi
10002bd8:	48                   	dec    eax
10002bd9:	54                   	push   esp
10002bda:	20 43 4f             	and    BYTE PTR [ebx+0x4f],al
10002bdd:	52                   	push   edx
10002bde:	4e                   	dec    esi
10002bdf:	45                   	inc    ebp
10002be0:	52                   	push   edx
10002be1:	20 54 4f 20          	and    BYTE PTR [edi+ecx*2+0x20],dl
10002be5:	54                   	push   esp
10002be6:	45                   	inc    ebp
10002be7:	53                   	push   ebx
10002be8:	54                   	push   esp
10002be9:	20 42 53             	and    BYTE PTR [edx+0x53],al
10002bec:	4f                   	dec    edi
10002bed:	44                   	inc    esp
10002bee:	00 90 d4 07 00 10    	add    BYTE PTR [eax+0x100007d4],dl	10002bf0: R_386_32	.text
10002bf4:	db 07                	fild   DWORD PTR [edi]	10002bf4: R_386_32	.text
10002bf6:	00 10                	add    BYTE PTR [eax],dl
10002bf8:	e2 07                	loop   10002c01 <List<CRect*>::~List()+0xd9>	10002bf8: R_386_32	.text
10002bfa:	00 10                	add    BYTE PTR [eax],dl
10002bfc:	e9 07 00 10 f0       	jmp    102c08 <start(void*)-0xfefd3f8>	10002bfc: R_386_32	.text
	10002c00: R_386_32	.text
10002c01:	07                   	pop    es
10002c02:	00 10                	add    BYTE PTR [eax],dl
10002c04:	f5                   	cmc    	10002c04: R_386_32	.text
10002c05:	07                   	pop    es
10002c06:	00 10                	add    BYTE PTR [eax],dl
10002c08:	fe 07                	inc    BYTE PTR [edi]	10002c08: R_386_32	.text
10002c0a:	00 10                	add    BYTE PTR [eax],dl
10002c0c:	07                   	pop    es	10002c0c: R_386_32	.text
10002c0d:	08 00                	or     BYTE PTR [eax],al
10002c0f:	10 10                	adc    BYTE PTR [eax],dl	10002c10: R_386_32	.text
10002c11:	08 00                	or     BYTE PTR [eax],al
10002c13:	10 2c 08             	adc    BYTE PTR [eax+ecx*1],ch	10002c14: R_386_32	.text
10002c16:	00 10                	add    BYTE PTR [eax],dl
10002c18:	35 08 00 10 41       	xor    eax,0x41100008	10002c18: R_386_32	.text
	10002c1c: R_386_32	.text
10002c1d:	08 00                	or     BYTE PTR [eax],al
10002c1f:	10 49 08             	adc    BYTE PTR [ecx+0x8],cl	10002c20: R_386_32	.text
10002c22:	00 10                	add    BYTE PTR [eax],dl
10002c24:	51                   	push   ecx	10002c24: R_386_32	.text
10002c25:	08 00                	or     BYTE PTR [eax],al
10002c27:	10 66 08             	adc    BYTE PTR [esi+0x8],ah	10002c28: R_386_32	.text
10002c2a:	00 10                	add    BYTE PTR [eax],dl
10002c2c:	43                   	inc    ebx
10002c2d:	3a 2f                	cmp    ch,BYTE PTR [edi]
10002c2f:	42                   	inc    edx
10002c30:	61                   	popa   
10002c31:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002c32:	61                   	popa   
10002c33:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002c34:	61                   	popa   
10002c35:	2f                   	das    
10002c36:	43                   	inc    ebx
10002c37:	75 72                	jne    10002cab <List<CRect*>::~List()+0x183>
10002c39:	73 6f                	jae    10002caa <List<CRect*>::~List()+0x182>
10002c3b:	72 73                	jb     10002cb0 <List<CRect*>::~List()+0x188>
10002c3d:	2f                   	das    
10002c3e:	53                   	push   ebx
10002c3f:	54                   	push   esp
10002c40:	41                   	inc    ecx
10002c41:	4e                   	dec    esi
10002c42:	44                   	inc    esp
10002c43:	41                   	inc    ecx
10002c44:	52                   	push   edx
10002c45:	44                   	inc    esp
10002c46:	2e 43                	cs inc ebx
10002c48:	55                   	push   ebp
10002c49:	52                   	push   edx
10002c4a:	00 43 55             	add    BYTE PTR [ebx+0x55],al
10002c4d:	52                   	push   edx
10002c4e:	53                   	push   ebx
10002c4f:	4f                   	dec    edi
10002c50:	52                   	push   edx
10002c51:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002c55:	44                   	inc    esp
10002c56:	3a 20                	cmp    ah,BYTE PTR [eax]
10002c58:	42                   	inc    edx
10002c59:	41                   	inc    ecx
10002c5a:	44                   	inc    esp
10002c5b:	20 31                	and    BYTE PTR [ecx],dh
10002c5d:	0a 00                	or     al,BYTE PTR [eax]
10002c5f:	43                   	inc    ebx
10002c60:	55                   	push   ebp
10002c61:	52                   	push   edx
10002c62:	53                   	push   ebx
10002c63:	4f                   	dec    edi
10002c64:	52                   	push   edx
10002c65:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002c69:	44                   	inc    esp
10002c6a:	3a 20                	cmp    ah,BYTE PTR [eax]
10002c6c:	42                   	inc    edx
10002c6d:	41                   	inc    ecx
10002c6e:	44                   	inc    esp
10002c6f:	20 32                	and    BYTE PTR [edx],dh
10002c71:	0a 00                	or     al,BYTE PTR [eax]
10002c73:	43                   	inc    ebx
10002c74:	55                   	push   ebp
10002c75:	52                   	push   edx
10002c76:	53                   	push   ebx
10002c77:	4f                   	dec    edi
10002c78:	52                   	push   edx
10002c79:	53                   	push   ebx
10002c7a:	3a 20                	cmp    ah,BYTE PTR [eax]
10002c7c:	25 64 0a 00 4e       	and    eax,0x4e000a64
10002c81:	52                   	push   edx
10002c82:	4d                   	dec    ebp
10002c83:	4c                   	dec    esp
10002c84:	00 57 41             	add    BYTE PTR [edi+0x41],dl
10002c87:	49                   	dec    ecx
10002c88:	54                   	push   esp
10002c89:	00 54 4c 44          	add    BYTE PTR [esp+ecx*2+0x44],dl
10002c8d:	52                   	push   edx
10002c8e:	00 54 45 58          	add    BYTE PTR [ebp+eax*2+0x58],dl
10002c92:	54                   	push   esp
10002c93:	00 56 45             	add    BYTE PTR [esi+0x45],dl
10002c96:	52                   	push   edx
10002c97:	54                   	push   esp
10002c98:	00 48 4f             	add    BYTE PTR [eax+0x4f],cl
10002c9b:	52                   	push   edx
10002c9c:	5a                   	pop    edx
10002c9d:	00 48 41             	add    BYTE PTR [eax+0x41],cl
10002ca0:	4e                   	dec    esi
10002ca1:	44                   	inc    esp
10002ca2:	00 43 55             	add    BYTE PTR [ebx+0x55],al
10002ca5:	52                   	push   edx
10002ca6:	53                   	push   ebx
10002ca7:	4f                   	dec    edi
10002ca8:	52                   	push   edx
10002ca9:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002cad:	44                   	inc    esp
10002cae:	3a 20                	cmp    ah,BYTE PTR [eax]
10002cb0:	42                   	inc    edx
10002cb1:	41                   	inc    ecx
10002cb2:	44                   	inc    esp
10002cb3:	20 33                	and    BYTE PTR [ebx],dh
10002cb5:	0a 00                	or     al,BYTE PTR [eax]
10002cb7:	54                   	push   esp
10002cb8:	45                   	inc    ebp
10002cb9:	53                   	push   ebx
10002cba:	54                   	push   esp
10002cbb:	49                   	dec    ecx
10002cbc:	4e                   	dec    esi
10002cbd:	47                   	inc    edi
10002cbe:	20 54 48 45          	and    BYTE PTR [eax+ecx*2+0x45],dl
10002cc2:	20 50 41             	and    BYTE PTR [eax+0x41],dl
10002cc5:	4e                   	dec    esi
10002cc6:	49                   	dec    ecx
10002cc7:	43                   	inc    ebx
10002cc8:	20 48 41             	and    BYTE PTR [eax+0x41],cl
10002ccb:	4e                   	dec    esi
10002ccc:	44                   	inc    esp
10002ccd:	4c                   	dec    esp
10002cce:	45                   	inc    ebp
10002ccf:	52                   	push   edx
10002cd0:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
10002cd3:	6c                   	ins    BYTE PTR es:[edi],dx
10002cd4:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002cd5:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
10002cd8:	69 6e 67 20 74 68 65 	imul   ebp,DWORD PTR [esi+0x67],0x65687420
10002cdf:	20 63 68             	and    BYTE PTR [ebx+0x68],ah
10002ce2:	69 6c 64 20 64 69 6d 2e 	imul   ebp,DWORD PTR [esp+eiz*2+0x20],0x2e6d6964
10002cea:	0a 00                	or     al,BYTE PTR [eax]
10002cec:	63 68 69             	arpl   WORD PTR [eax+0x69],bp
10002cef:	6c                   	ins    BYTE PTR es:[edi],dx
10002cf0:	64 44                	fs inc esp
10002cf2:	69 6d 20 3d 20 30 78 	imul   ebp,DWORD PTR [ebp+0x20],0x7830203d
10002cf9:	25 58 0a 00 4e       	and    eax,0x4e000a58
10002cfe:	4f                   	dec    edi
10002cff:	20 43 48             	and    BYTE PTR [ebx+0x48],al
10002d02:	49                   	dec    ecx
10002d03:	4c                   	dec    esp
10002d04:	44                   	inc    esp
10002d05:	20 44 49 4d          	and    BYTE PTR [ecx+ecx*2+0x4d],al
10002d09:	00 70 72             	add    BYTE PTR [eax+0x72],dh
10002d0c:	65 2d 65 6d 70 74    	gs sub eax,0x74706d65
10002d12:	69 76 65 20 47 44 4f 	imul   esi,DWORD PTR [esi+0x65],0x4f444720
10002d19:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002d1b:	73 63                	jae    10002d80 <List<CRect*>::~List()+0x258>
10002d1d:	72 65                	jb     10002d84 <List<CRect*>::~List()+0x25c>
10002d1f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10002d21:	58                   	pop    eax
10002d22:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
10002d25:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002d28:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d29:	2d 72 65 67 69       	sub    eax,0x69676572
10002d2e:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002d2f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d30:	00 70 72             	add    BYTE PTR [eax+0x72],dh
10002d33:	65 2d 65 6d 70 74    	gs sub eax,0x74706d65
10002d39:	69 76 65 20 47 44 4f 	imul   esi,DWORD PTR [esi+0x65],0x4f444720
10002d40:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002d42:	73 63                	jae    10002da7 <List<CRect*>::~List()+0x27f>
10002d44:	72 65                	jb     10002dab <List<CRect*>::~List()+0x283>
10002d46:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10002d48:	59                   	pop    ecx
10002d49:	20 6f 6e             	and    BYTE PTR [edi+0x6e],ch
10002d4c:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002d4f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d50:	2d 72 65 67 69       	sub    eax,0x69676572
10002d55:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002d56:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d57:	00 55 50             	add    BYTE PTR [ebp+0x50],dl
10002d5a:	44                   	inc    esp
10002d5b:	41                   	inc    ecx
10002d5c:	54                   	push   esp
10002d5d:	45                   	inc    ebp
10002d5e:	20 43 41             	and    BYTE PTR [ebx+0x41],al
10002d61:	4c                   	dec    esp
10002d62:	4c                   	dec    esp
10002d63:	45                   	inc    ebp
10002d64:	44                   	inc    esp
10002d65:	20 4f 4e             	and    BYTE PTR [edi+0x4e],cl
10002d68:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10002d6b:	4e                   	dec    esi
10002d6c:	2d 52 45 47 49       	sub    eax,0x49474552
10002d71:	4f                   	dec    edi
10002d72:	4e                   	dec    esi
10002d73:	00 47 44             	add    BYTE PTR [edi+0x44],al
10002d76:	4f                   	dec    edi
10002d77:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002d79:	61                   	popa   
10002d7a:	64 64 43             	fs fs inc ebx
10002d7d:	68 69 6c 64 20       	push   0x20646c69
10002d82:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002d83:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d84:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002d87:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d88:	2d 72 65 67 69       	sub    eax,0x69676572
10002d8d:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002d8e:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002d8f:	00 43 52             	add    BYTE PTR [ebx+0x52],al
10002d92:	45                   	inc    ebp
10002d93:	41                   	inc    ecx
10002d94:	54                   	push   esp
10002d95:	49                   	dec    ecx
10002d96:	4e                   	dec    esi
10002d97:	47                   	inc    edi
10002d98:	20 41 20             	and    BYTE PTR [ecx+0x20],al
10002d9b:	4e                   	dec    esi
10002d9c:	45                   	inc    ebp
10002d9d:	57                   	push   edi
10002d9e:	20 44 49 4d          	and    BYTE PTR [ecx+ecx*2+0x4d],al
10002da2:	20 41 54             	and    BYTE PTR [ecx+0x54],al
10002da5:	20 25 64 0a 00 47    	and    BYTE PTR ds:0x47000a64,ah
10002dab:	44                   	inc    esp
10002dac:	4f                   	dec    edi
10002dad:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002daf:	61                   	popa   
10002db0:	64 64 43             	fs fs inc ebx
10002db3:	68 69 6c 64 20       	push   0x20646c69
10002db8:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002db9:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002dba:	20 6d 6f             	and    BYTE PTR [ebp+0x6f],ch
10002dbd:	72 65                	jb     10002e24 <List<CRect*>::~List()+0x2fc>
10002dbf:	20 73 6c             	and    BYTE PTR [ebx+0x6c],dh
10002dc2:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002dc3:	74 73                	je     10002e38 <List<CRect*>::~List()+0x310>
10002dc5:	20 6c 65 66          	and    BYTE PTR [ebp+eiz*2+0x66],ch
10002dc9:	74 21                	je     10002dec <List<CRect*>::~List()+0x2c4>
10002dcb:	00 47 44             	add    BYTE PTR [edi+0x44],al
10002dce:	4f                   	dec    edi
10002dcf:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002dd1:	72 65                	jb     10002e38 <List<CRect*>::~List()+0x310>
10002dd3:	6d                   	ins    DWORD PTR es:[edi],dx
10002dd4:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002dd5:	76 65                	jbe    10002e3c <List<CRect*>::~List()+0x314>
10002dd7:	43                   	inc    ebx
10002dd8:	68 69 6c 64 20       	push   0x20646c69
10002ddd:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002dde:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002ddf:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10002de2:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002de3:	2d 72 65 67 69       	sub    eax,0x69676572
10002de8:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002de9:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002dea:	00 4c 4f 41          	add    BYTE PTR [edi+ecx*2+0x41],cl
10002dee:	44                   	inc    esp
10002def:	49                   	dec    ecx
10002df0:	4e                   	dec    esi
10002df1:	47                   	inc    edi
10002df2:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10002df6:	41                   	inc    ecx
10002df7:	43                   	inc    ebx
10002df8:	59                   	pop    ecx
10002df9:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002dfc:	4e                   	dec    esi
10002dfd:	54                   	push   esp
10002dfe:	20 57 49             	and    BYTE PTR [edi+0x49],dl
10002e01:	54                   	push   esp
10002e02:	48                   	dec    eax
10002e03:	20 4e 41             	and    BYTE PTR [esi+0x41],cl
10002e06:	4d                   	dec    ebp
10002e07:	45                   	inc    ebp
10002e08:	20 27                	and    BYTE PTR [edi],ah
10002e0a:	25 73 27 0a 00       	and    eax,0xa2773
10002e0f:	43                   	inc    ebx
10002e10:	41                   	inc    ecx
10002e11:	4e                   	dec    esi
10002e12:	4e                   	dec    esi
10002e13:	4f                   	dec    edi
10002e14:	54                   	push   esp
10002e15:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002e19:	44                   	inc    esp
10002e1a:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002e1d:	4e                   	dec    esi
10002e1e:	54                   	push   esp
10002e1f:	53                   	push   ebx
10002e20:	00 46 6f             	add    BYTE PTR [esi+0x6f],al
10002e23:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e24:	74 4e                	je     10002e74 <List<CRect*>::~List()+0x34c>
10002e26:	61                   	popa   
10002e27:	6d                   	ins    DWORD PTR es:[edi],dx
10002e28:	65 73 5b             	gs jae 10002e86 <List<CRect*>::~List()+0x35e>
10002e2b:	25 64 5d 20 3d       	and    eax,0x3d205d64
10002e30:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10002e36:	59                   	pop    ecx
10002e37:	53                   	push   ebx
10002e38:	54                   	push   esp
10002e39:	45                   	inc    ebp
10002e3a:	4d                   	dec    ebp
10002e3b:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10002e3e:	2f                   	das    
10002e3f:	42                   	inc    edx
10002e40:	41                   	inc    ecx
10002e41:	4e                   	dec    esi
10002e42:	41                   	inc    ecx
10002e43:	4e                   	dec    esi
10002e44:	41                   	inc    ecx
10002e45:	2f                   	das    
10002e46:	46                   	inc    esi
10002e47:	4f                   	dec    edi
10002e48:	4e                   	dec    esi
10002e49:	54                   	push   esp
10002e4a:	53                   	push   ebx
10002e4b:	2f                   	das    
10002e4c:	4c                   	dec    esp
10002e4d:	45                   	inc    ebp
10002e4e:	47                   	inc    edi
10002e4f:	41                   	inc    ecx
10002e50:	43                   	inc    ebx
10002e51:	59                   	pop    ecx
10002e52:	00 64 69 72          	add    BYTE PTR [ecx+ebp*2+0x72],ah
10002e56:	2d 3e 72 65 61       	sub    eax,0x6165723e
10002e5b:	64 2e 20 73 74       	fs and BYTE PTR cs:[ebx+0x74],dh
10002e60:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10002e66:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10002e69:	2f                   	das    
10002e6a:	42                   	inc    edx
10002e6b:	41                   	inc    ecx
10002e6c:	4e                   	dec    esi
10002e6d:	41                   	inc    ecx
10002e6e:	4e                   	dec    esi
10002e6f:	41                   	inc    ecx
10002e70:	2f                   	das    
10002e71:	46                   	inc    esi
10002e72:	4f                   	dec    edi
10002e73:	4e                   	dec    esi
10002e74:	54                   	push   esp
10002e75:	53                   	push   ebx
10002e76:	2f                   	das    
10002e77:	4c                   	dec    esp
10002e78:	45                   	inc    ebp
10002e79:	47                   	inc    edi
10002e7a:	41                   	inc    ecx
10002e7b:	43                   	inc    ebx
10002e7c:	59                   	pop    ecx
10002e7d:	2f                   	das    
10002e7e:	00 64 70 20          	add    BYTE PTR [eax+esi*2+0x20],ah
10002e82:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e83:	61                   	popa   
10002e84:	6d                   	ins    DWORD PTR es:[edi],dx
10002e85:	65 20 3d 20 25 73 0a 	and    BYTE PTR gs:0xa732520,bh
10002e8c:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10002e8f:	2f                   	das    
10002e90:	42                   	inc    edx
10002e91:	61                   	popa   
10002e92:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e93:	61                   	popa   
10002e94:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e95:	61                   	popa   
10002e96:	2f                   	das    
10002e97:	46                   	inc    esi
10002e98:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002e99:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002e9a:	74 73                	je     10002f0f <List<CRect*>::~List()+0x3e7>
10002e9c:	2f                   	das    
10002e9d:	4c                   	dec    esp
10002e9e:	65 67 61             	gs addr16 popa 
10002ea1:	63 79 2f             	arpl   WORD PTR [ecx+0x2f],di
10002ea4:	00 2e                	add    BYTE PTR [esi],ch
10002ea6:	46                   	inc    esi
10002ea7:	4e                   	dec    esi
10002ea8:	54                   	push   esp
10002ea9:	00 25 73 20 76 73    	add    BYTE PTR ds:0x73762073,ah
10002eaf:	2e 20 25 73 0a 00 46 	and    BYTE PTR cs:0x46000a73,ah
10002eb6:	4f                   	dec    edi
10002eb7:	55                   	push   ebp
10002eb8:	4e                   	dec    esi
10002eb9:	44                   	inc    esp
10002eba:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10002ebe:	41                   	inc    ecx
10002ebf:	43                   	inc    ebx
10002ec0:	59                   	pop    ecx
10002ec1:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002ec4:	4e                   	dec    esi
10002ec5:	54                   	push   esp
10002ec6:	20 27                	and    BYTE PTR [edi],ah
10002ec8:	25 73 27 20 57       	and    eax,0x57202773
10002ecd:	49                   	dec    ecx
10002ece:	54                   	push   esp
10002ecf:	48                   	dec    eax
10002ed0:	20 49 44             	and    BYTE PTR [ecx+0x44],cl
10002ed3:	20 25 64 2e 0a 00    	and    BYTE PTR ds:0xa2e64,ah
10002ed9:	43                   	inc    ebx
10002eda:	4f                   	dec    edi
10002edb:	55                   	push   ebp
10002edc:	4c                   	dec    esp
10002edd:	44                   	inc    esp
10002ede:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10002ee1:	54                   	push   esp
10002ee2:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10002ee6:	44                   	inc    esp
10002ee7:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10002eeb:	41                   	inc    ecx
10002eec:	43                   	inc    ebx
10002eed:	59                   	pop    ecx
10002eee:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002ef1:	4e                   	dec    esi
10002ef2:	54                   	push   esp
10002ef3:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002ef6:	4c                   	dec    esp
10002ef7:	4f                   	dec    edi
10002ef8:	41                   	inc    ecx
10002ef9:	44                   	inc    esp
10002efa:	45                   	inc    ebp
10002efb:	44                   	inc    esp
10002efc:	20 4c 45 47          	and    BYTE PTR [ebp+eax*2+0x47],cl
10002f00:	41                   	inc    ecx
10002f01:	43                   	inc    ebx
10002f02:	59                   	pop    ecx
10002f03:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10002f06:	4e                   	dec    esi
10002f07:	54                   	push   esp
10002f08:	20 25 73 20 54 4f    	and    BYTE PTR ds:0x4f542073,ah
10002f0e:	20 49 44             	and    BYTE PTR [ecx+0x44],cl
10002f11:	20 25 64 2e 0a 00    	and    BYTE PTR ds:0xa2e64,ah
10002f17:	43                   	inc    ebx
10002f18:	4f                   	dec    edi
10002f19:	55                   	push   ebp
10002f1a:	52                   	push   edx
10002f1b:	49                   	dec    ecx
10002f1c:	45                   	inc    ebp
10002f1d:	52                   	push   edx
10002f1e:	00 43 4f             	add    BYTE PTR [ebx+0x4f],al
10002f21:	55                   	push   ebp
10002f22:	52                   	push   edx
10002f23:	49                   	dec    ecx
10002f24:	45                   	inc    ebp
10002f25:	52                   	push   edx
10002f26:	58                   	pop    eax
10002f27:	00 54 49 4d          	add    BYTE PTR [ecx+ecx*2+0x4d],dl
10002f2b:	45                   	inc    ebp
10002f2c:	53                   	push   ebx
10002f2d:	4e                   	dec    esi
10002f2e:	52                   	push   edx
10002f2f:	00 41 52             	add    BYTE PTR [ecx+0x52],al
10002f32:	49                   	dec    ecx
10002f33:	41                   	inc    ecx
10002f34:	4c                   	dec    esp
10002f35:	00 43 4f             	add    BYTE PTR [ebx+0x4f],al
10002f38:	4d                   	dec    ebp
10002f39:	49                   	dec    ecx
10002f3a:	43                   	inc    ebx
10002f3b:	53                   	push   ebx
10002f3c:	41                   	inc    ecx
10002f3d:	4e                   	dec    esi
10002f3e:	00 90 78 25 00 10    	add    BYTE PTR [eax+0x10002578],dl	10002f40: R_386_32	.text
10002f44:	82 25 00 10 8c 25 00 	and    BYTE PTR ds:0x258c1000,0x0	10002f44: R_386_32	.text
	10002f48: R_386_32	.text
10002f4b:	10 96 25 00 10 a0    	adc    BYTE PTR [esi-0x5fefffdb],dl	10002f4c: R_386_32	.text
	10002f50: R_386_32	.text
10002f51:	25 00 10 aa 25       	and    eax,0x25aa1000	10002f54: R_386_32	.text
10002f56:	00 10                	add    BYTE PTR [eax],dl
