
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 2c             	sub    esp,0x2c
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	6a 14                	push   0x14
10000069:	e8 fc ff ff ff       	call   1000006a <NiMain(void*)+0x6a>	1000006a: R_386_PC32	malloc
1000006e:	89 c6                	mov    esi,eax
10000070:	58                   	pop    eax
10000071:	5a                   	pop    edx
10000072:	53                   	push   ebx
10000073:	56                   	push   esi
10000074:	e8 fc ff ff ff       	call   10000075 <NiMain(void*)+0x75>	10000075: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
10000079:	68 80 00 00 00       	push   0x80
1000007e:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000080: R_386_32	desktop
10000084:	6a 00                	push   0x0
10000086:	68 00 00 00 00       	push   0x0	10000087: R_386_32	NiDisplayRAM(void*)
1000008b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000008d: R_386_32	kernelProcess
10000091:	e8 fc ff ff ff       	call   10000092 <NiMain(void*)+0x92>	10000092: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000096:	83 c4 14             	add    esp,0x14
10000099:	68 8c 01 00 00       	push   0x18c
1000009e:	e8 fc ff ff ff       	call   1000009f <NiMain(void*)+0x9f>	1000009f: R_386_PC32	malloc
100000a3:	59                   	pop    ecx
100000a4:	89 c5                	mov    ebp,eax
100000a6:	5b                   	pop    ebx
100000a7:	6a 01                	push   0x1
100000a9:	6a 01                	push   0x1
100000ab:	6a 00                	push   0x0
100000ad:	6a 00                	push   0x0
100000af:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000b1: R_386_32	ctxt
100000b5:	50                   	push   eax
100000b6:	e8 fc ff ff ff       	call   100000b7 <NiMain(void*)+0xb7>	100000b7: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000bb:	83 c4 14             	add    esp,0x14
100000be:	68 8c 01 00 00       	push   0x18c
100000c3:	e8 fc ff ff ff       	call   100000c4 <NiMain(void*)+0xc4>	100000c4: R_386_PC32	malloc
100000c8:	5e                   	pop    esi
100000c9:	89 c7                	mov    edi,eax
100000cb:	58                   	pop    eax
100000cc:	68 40 01 00 00       	push   0x140
100000d1:	68 90 01 00 00       	push   0x190
100000d6:	6a 32                	push   0x32
100000d8:	6a 32                	push   0x32
100000da:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000dc: R_386_32	ctxt
100000e0:	57                   	push   edi
100000e1:	e8 fc ff ff ff       	call   100000e2 <NiMain(void*)+0xe2>	100000e2: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000e6:	83 c4 14             	add    esp,0x14
100000e9:	68 8c 01 00 00       	push   0x18c
100000ee:	e8 fc ff ff ff       	call   100000ef <NiMain(void*)+0xef>	100000ef: R_386_PC32	malloc
100000f3:	89 c6                	mov    esi,eax
100000f5:	58                   	pop    eax
100000f6:	5a                   	pop    edx
100000f7:	68 7c 01 00 00       	push   0x17c
100000fc:	68 f4 01 00 00       	push   0x1f4
10000101:	68 96 00 00 00       	push   0x96
10000106:	68 c8 00 00 00       	push   0xc8
1000010b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000010d: R_386_32	ctxt
10000111:	56                   	push   esi
10000112:	e8 fc ff ff ff       	call   10000113 <NiMain(void*)+0x113>	10000113: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10000117:	83 c4 14             	add    esp,0x14
1000011a:	68 8c 01 00 00       	push   0x18c
1000011f:	e8 fc ff ff ff       	call   10000120 <NiMain(void*)+0x120>	10000120: R_386_PC32	malloc
10000124:	59                   	pop    ecx
10000125:	89 c3                	mov    ebx,eax
10000127:	58                   	pop    eax
10000128:	68 af 00 00 00       	push   0xaf
1000012d:	68 0e 01 00 00       	push   0x10e
10000132:	68 90 01 00 00       	push   0x190
10000137:	6a 7d                	push   0x7d
10000139:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000013b: R_386_32	ctxt
1000013f:	53                   	push   ebx
10000140:	e8 fc ff ff ff       	call   10000141 <NiMain(void*)+0x141>	10000141: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10000145:	83 c4 18             	add    esp,0x18
10000148:	83 8b 88 01 00 00 01 	or     DWORD PTR [ebx+0x188],0x1
1000014f:	55                   	push   ebp
10000150:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000152: R_386_32	desktop
10000156:	e8 fc ff ff ff       	call   10000157 <NiMain(void*)+0x157>	10000157: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000015b:	58                   	pop    eax
1000015c:	5a                   	pop    edx
1000015d:	57                   	push   edi
1000015e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000160: R_386_32	desktop
10000164:	e8 fc ff ff ff       	call   10000165 <NiMain(void*)+0x165>	10000165: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000169:	59                   	pop    ecx
1000016a:	5f                   	pop    edi
1000016b:	56                   	push   esi
1000016c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000016e: R_386_32	desktop
10000172:	e8 fc ff ff ff       	call   10000173 <NiMain(void*)+0x173>	10000173: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000177:	5d                   	pop    ebp
10000178:	58                   	pop    eax
10000179:	53                   	push   ebx
1000017a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000017c: R_386_32	desktop
10000180:	e8 fc ff ff ff       	call   10000181 <NiMain(void*)+0x181>	10000181: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000185:	58                   	pop    eax
10000186:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000188: R_386_32	desktop
1000018c:	e8 fc ff ff ff       	call   1000018d <NiMain(void*)+0x18d>	1000018d: R_386_PC32	NIDesktop::completeRefresh()
10000191:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10000198:	e8 fc ff ff ff       	call   10000199 <NiMain(void*)+0x199>	10000199: R_386_PC32	malloc
1000019d:	83 c4 0c             	add    esp,0xc
100001a0:	89 c7                	mov    edi,eax
100001a2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100001a4: R_386_32	kernelProcess
100001a8:	68 29 5b 00 10       	push   0x10005b29	100001a9: R_386_32	.text
100001ad:	50                   	push   eax
100001ae:	e8 fc ff ff ff       	call   100001af <NiMain(void*)+0x1af>	100001af: R_386_PC32	File::File(char const*, Process*)
100001b3:	58                   	pop    eax
100001b4:	5a                   	pop    edx
100001b5:	6a 01                	push   0x1
100001b7:	57                   	push   edi
100001b8:	e8 fc ff ff ff       	call   100001b9 <NiMain(void*)+0x1b9>	100001b9: R_386_PC32	File::open(FileOpenMode)
100001bd:	59                   	pop    ecx
100001be:	5b                   	pop    ebx
100001bf:	50                   	push   eax
100001c0:	68 48 5b 00 10       	push   0x10005b48	100001c1: R_386_32	.text
100001c5:	e8 fc ff ff ff       	call   100001c6 <NiMain(void*)+0x1c6>	100001c6: R_386_PC32	Dbg::kprintf(char const*, ...)
100001ca:	83 c4 0c             	add    esp,0xc
100001cd:	8d 5c 24 17          	lea    ebx,[esp+0x17]
100001d1:	53                   	push   ebx
100001d2:	8d 6c 24 20          	lea    ebp,[esp+0x20]
100001d6:	55                   	push   ebp
100001d7:	57                   	push   edi
100001d8:	e8 fc ff ff ff       	call   100001d9 <NiMain(void*)+0x1d9>	100001d9: R_386_PC32	File::stat(unsigned long long*, bool*)
100001dd:	5e                   	pop    esi
100001de:	58                   	pop    eax
100001df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100001e3:	68 51 5b 00 10       	push   0x10005b51	100001e4: R_386_32	.text
100001e8:	e8 fc ff ff ff       	call   100001e9 <NiMain(void*)+0x1e9>	100001e9: R_386_PC32	Dbg::kprintf(char const*, ...)
100001ed:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
100001f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100001f5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
100001f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100001fd:	58                   	pop    eax
100001fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10000202:	e8 fc ff ff ff       	call   10000203 <NiMain(void*)+0x203>	10000203: R_386_PC32	malloc
10000207:	89 c1                	mov    ecx,eax
10000209:	58                   	pop    eax
1000020a:	8b 07                	mov    eax,DWORD PTR [edi]
1000020c:	8d 54 24 20          	lea    edx,[esp+0x20]
10000210:	52                   	push   edx
10000211:	51                   	push   ecx
10000212:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
10000216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000021a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000021e:	57                   	push   edi
1000021f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10000222:	83 c4 1c             	add    esp,0x1c
10000225:	50                   	push   eax
10000226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000022a:	68 5e 5b 00 10       	push   0x10005b5e	1000022b: R_386_32	.text
1000022f:	e8 fc ff ff ff       	call   10000230 <NiMain(void*)+0x230>	10000230: R_386_PC32	Dbg::kprintf(char const*, ...)
10000234:	5a                   	pop    edx
10000235:	a1 00 00 00 00       	mov    eax,ds:0x0	10000236: R_386_32	screen
1000023a:	8b 30                	mov    esi,DWORD PTR [eax]
1000023c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000240:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10000244:	51                   	push   ecx
10000245:	6a 50                	push   0x50
10000247:	6a 3c                	push   0x3c
10000249:	50                   	push   eax
1000024a:	ff 56 2c             	call   DWORD PTR [esi+0x2c]
1000024d:	83 c4 14             	add    esp,0x14
10000250:	57                   	push   edi
10000251:	e8 fc ff ff ff       	call   10000252 <NiMain(void*)+0x252>	10000252: R_386_PC32	File::close()
10000256:	8b 07                	mov    eax,DWORD PTR [edi]
10000258:	89 3c 24             	mov    DWORD PTR [esp],edi
1000025b:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000025e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10000265:	e8 fc ff ff ff       	call   10000266 <NiMain(void*)+0x266>	10000266: R_386_PC32	malloc
1000026a:	83 c4 0c             	add    esp,0xc
1000026d:	89 c7                	mov    edi,eax
1000026f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000271: R_386_32	kernelProcess
10000275:	68 70 5b 00 10       	push   0x10005b70	10000276: R_386_32	.text
1000027a:	50                   	push   eax
1000027b:	e8 fc ff ff ff       	call   1000027c <NiMain(void*)+0x27c>	1000027c: R_386_PC32	File::File(char const*, Process*)
10000280:	59                   	pop    ecx
10000281:	5e                   	pop    esi
10000282:	6a 01                	push   0x1
10000284:	57                   	push   edi
10000285:	e8 fc ff ff ff       	call   10000286 <NiMain(void*)+0x286>	10000286: R_386_PC32	File::open(FileOpenMode)
1000028a:	83 c4 0c             	add    esp,0xc
1000028d:	53                   	push   ebx
1000028e:	55                   	push   ebp
1000028f:	57                   	push   edi
10000290:	e8 fc ff ff ff       	call   10000291 <NiMain(void*)+0x291>	10000291: R_386_PC32	File::stat(unsigned long long*, bool*)
10000295:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
10000299:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000029d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
100002a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100002a5:	58                   	pop    eax
100002a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
100002aa:	e8 fc ff ff ff       	call   100002ab <NiMain(void*)+0x2ab>	100002ab: R_386_PC32	malloc
100002af:	89 c1                	mov    ecx,eax
100002b1:	58                   	pop    eax
100002b2:	8b 07                	mov    eax,DWORD PTR [edi]
100002b4:	8d 54 24 20          	lea    edx,[esp+0x20]
100002b8:	52                   	push   edx
100002b9:	51                   	push   ecx
100002ba:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
100002be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100002c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100002c6:	57                   	push   edi
100002c7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100002ca:	83 c4 14             	add    esp,0x14
100002cd:	a1 00 00 00 00       	mov    eax,ds:0x0	100002ce: R_386_32	screen
100002d2:	8b 30                	mov    esi,DWORD PTR [eax]
100002d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100002d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100002dc:	51                   	push   ecx
100002dd:	6a 50                	push   0x50
100002df:	6a 54                	push   0x54
100002e1:	50                   	push   eax
100002e2:	ff 56 2c             	call   DWORD PTR [esi+0x2c]
100002e5:	83 c4 14             	add    esp,0x14
100002e8:	57                   	push   edi
100002e9:	e8 fc ff ff ff       	call   100002ea <NiMain(void*)+0x2ea>	100002ea: R_386_PC32	File::close()
100002ee:	8b 07                	mov    eax,DWORD PTR [edi]
100002f0:	89 3c 24             	mov    DWORD PTR [esp],edi
100002f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
100002f6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100002fd:	e8 fc ff ff ff       	call   100002fe <NiMain(void*)+0x2fe>	100002fe: R_386_PC32	malloc
10000302:	83 c4 0c             	add    esp,0xc
10000305:	89 c7                	mov    edi,eax
10000307:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000309: R_386_32	kernelProcess
1000030d:	68 90 5b 00 10       	push   0x10005b90	1000030e: R_386_32	.text
10000312:	50                   	push   eax
10000313:	e8 fc ff ff ff       	call   10000314 <NiMain(void*)+0x314>	10000314: R_386_PC32	File::File(char const*, Process*)
10000318:	58                   	pop    eax
10000319:	5a                   	pop    edx
1000031a:	6a 01                	push   0x1
1000031c:	57                   	push   edi
1000031d:	e8 fc ff ff ff       	call   1000031e <NiMain(void*)+0x31e>	1000031e: R_386_PC32	File::open(FileOpenMode)
10000322:	83 c4 0c             	add    esp,0xc
10000325:	53                   	push   ebx
10000326:	55                   	push   ebp
10000327:	57                   	push   edi
10000328:	e8 fc ff ff ff       	call   10000329 <NiMain(void*)+0x329>	10000329: R_386_PC32	File::stat(unsigned long long*, bool*)
1000032d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
10000331:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000335:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10000339:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000033d:	59                   	pop    ecx
1000033e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10000342:	e8 fc ff ff ff       	call   10000343 <NiMain(void*)+0x343>	10000343: R_386_PC32	malloc
10000347:	5e                   	pop    esi
10000348:	89 c1                	mov    ecx,eax
1000034a:	8d 54 24 20          	lea    edx,[esp+0x20]
1000034e:	8b 07                	mov    eax,DWORD PTR [edi]
10000350:	52                   	push   edx
10000351:	51                   	push   ecx
10000352:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
10000356:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000035a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000035e:	57                   	push   edi
1000035f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10000362:	83 c4 14             	add    esp,0x14
10000365:	a1 00 00 00 00       	mov    eax,ds:0x0	10000366: R_386_32	screen
1000036a:	8b 30                	mov    esi,DWORD PTR [eax]
1000036c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000370:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10000374:	51                   	push   ecx
10000375:	6a 50                	push   0x50
10000377:	6a 6c                	push   0x6c
10000379:	50                   	push   eax
1000037a:	ff 56 2c             	call   DWORD PTR [esi+0x2c]
1000037d:	83 c4 14             	add    esp,0x14
10000380:	57                   	push   edi
10000381:	e8 fc ff ff ff       	call   10000382 <NiMain(void*)+0x382>	10000382: R_386_PC32	File::close()
10000386:	8b 07                	mov    eax,DWORD PTR [edi]
10000388:	89 3c 24             	mov    DWORD PTR [esp],edi
1000038b:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000038e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10000395:	e8 fc ff ff ff       	call   10000396 <NiMain(void*)+0x396>	10000396: R_386_PC32	malloc
1000039a:	83 c4 0c             	add    esp,0xc
1000039d:	89 c7                	mov    edi,eax
1000039f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100003a1: R_386_32	kernelProcess
100003a5:	68 b1 5b 00 10       	push   0x10005bb1	100003a6: R_386_32	.text
100003aa:	50                   	push   eax
100003ab:	e8 fc ff ff ff       	call   100003ac <NiMain(void*)+0x3ac>	100003ac: R_386_PC32	File::File(char const*, Process*)
100003b0:	58                   	pop    eax
100003b1:	5a                   	pop    edx
100003b2:	6a 01                	push   0x1
100003b4:	57                   	push   edi
100003b5:	e8 fc ff ff ff       	call   100003b6 <NiMain(void*)+0x3b6>	100003b6: R_386_PC32	File::open(FileOpenMode)
100003ba:	83 c4 0c             	add    esp,0xc
100003bd:	53                   	push   ebx
100003be:	55                   	push   ebp
100003bf:	57                   	push   edi
100003c0:	e8 fc ff ff ff       	call   100003c1 <NiMain(void*)+0x3c1>	100003c1: R_386_PC32	File::stat(unsigned long long*, bool*)
100003c5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
100003c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100003cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
100003d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100003d5:	59                   	pop    ecx
100003d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
100003da:	e8 fc ff ff ff       	call   100003db <NiMain(void*)+0x3db>	100003db: R_386_PC32	malloc
100003df:	5e                   	pop    esi
100003e0:	89 c1                	mov    ecx,eax
100003e2:	8d 54 24 20          	lea    edx,[esp+0x20]
100003e6:	8b 07                	mov    eax,DWORD PTR [edi]
100003e8:	52                   	push   edx
100003e9:	51                   	push   ecx
100003ea:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
100003ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100003f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100003f6:	57                   	push   edi
100003f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100003fa:	83 c4 14             	add    esp,0x14
100003fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100003fe: R_386_32	screen
10000402:	8b 30                	mov    esi,DWORD PTR [eax]
10000404:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000408:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000040c:	51                   	push   ecx
1000040d:	6a 50                	push   0x50
1000040f:	68 9c 00 00 00       	push   0x9c
10000414:	50                   	push   eax
10000415:	ff 56 2c             	call   DWORD PTR [esi+0x2c]
10000418:	83 c4 14             	add    esp,0x14
1000041b:	57                   	push   edi
1000041c:	e8 fc ff ff ff       	call   1000041d <NiMain(void*)+0x41d>	1000041d: R_386_PC32	File::close()
10000421:	8b 07                	mov    eax,DWORD PTR [edi]
10000423:	89 3c 24             	mov    DWORD PTR [esp],edi
10000426:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000429:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10000430:	e8 fc ff ff ff       	call   10000431 <NiMain(void*)+0x431>	10000431: R_386_PC32	malloc
10000435:	83 c4 0c             	add    esp,0xc
10000438:	89 c7                	mov    edi,eax
1000043a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000043c: R_386_32	kernelProcess
10000440:	68 d1 5b 00 10       	push   0x10005bd1	10000441: R_386_32	.text
10000445:	50                   	push   eax
10000446:	e8 fc ff ff ff       	call   10000447 <NiMain(void*)+0x447>	10000447: R_386_PC32	File::File(char const*, Process*)
1000044b:	58                   	pop    eax
1000044c:	5a                   	pop    edx
1000044d:	6a 01                	push   0x1
1000044f:	57                   	push   edi
10000450:	e8 fc ff ff ff       	call   10000451 <NiMain(void*)+0x451>	10000451: R_386_PC32	File::open(FileOpenMode)
10000455:	83 c4 0c             	add    esp,0xc
10000458:	53                   	push   ebx
10000459:	55                   	push   ebp
1000045a:	57                   	push   edi
1000045b:	e8 fc ff ff ff       	call   1000045c <NiMain(void*)+0x45c>	1000045c: R_386_PC32	File::stat(unsigned long long*, bool*)
10000460:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
10000464:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
1000046c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000470:	59                   	pop    ecx
10000471:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10000475:	e8 fc ff ff ff       	call   10000476 <NiMain(void*)+0x476>	10000476: R_386_PC32	malloc
1000047a:	5e                   	pop    esi
1000047b:	89 c1                	mov    ecx,eax
1000047d:	8d 54 24 20          	lea    edx,[esp+0x20]
10000481:	8b 07                	mov    eax,DWORD PTR [edi]
10000483:	52                   	push   edx
10000484:	51                   	push   ecx
10000485:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
10000489:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000048d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000491:	57                   	push   edi
10000492:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10000495:	83 c4 14             	add    esp,0x14
10000498:	a1 00 00 00 00       	mov    eax,ds:0x0	10000499: R_386_32	screen
1000049d:	8b 30                	mov    esi,DWORD PTR [eax]
1000049f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100004a3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100004a7:	51                   	push   ecx
100004a8:	6a 50                	push   0x50
100004aa:	68 b4 00 00 00       	push   0xb4
100004af:	50                   	push   eax
100004b0:	ff 56 2c             	call   DWORD PTR [esi+0x2c]
100004b3:	83 c4 14             	add    esp,0x14
100004b6:	57                   	push   edi
100004b7:	e8 fc ff ff ff       	call   100004b8 <NiMain(void*)+0x4b8>	100004b8: R_386_PC32	File::close()
100004bc:	8b 07                	mov    eax,DWORD PTR [edi]
100004be:	89 3c 24             	mov    DWORD PTR [esp],edi
100004c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
100004c4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100004cb:	e8 fc ff ff ff       	call   100004cc <NiMain(void*)+0x4cc>	100004cc: R_386_PC32	malloc
100004d0:	83 c4 0c             	add    esp,0xc
100004d3:	89 c7                	mov    edi,eax
100004d5:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100004d7: R_386_32	kernelProcess
100004db:	68 f2 5b 00 10       	push   0x10005bf2	100004dc: R_386_32	.text
100004e0:	50                   	push   eax
100004e1:	e8 fc ff ff ff       	call   100004e2 <NiMain(void*)+0x4e2>	100004e2: R_386_PC32	File::File(char const*, Process*)
100004e6:	58                   	pop    eax
100004e7:	5a                   	pop    edx
100004e8:	6a 01                	push   0x1
100004ea:	57                   	push   edi
100004eb:	e8 fc ff ff ff       	call   100004ec <NiMain(void*)+0x4ec>	100004ec: R_386_PC32	File::open(FileOpenMode)
100004f0:	83 c4 0c             	add    esp,0xc
100004f3:	53                   	push   ebx
100004f4:	55                   	push   ebp
100004f5:	57                   	push   edi
100004f6:	e8 fc ff ff ff       	call   100004f7 <NiMain(void*)+0x4f7>	100004f7: R_386_PC32	File::stat(unsigned long long*, bool*)
100004fb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
100004ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000503:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10000507:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000050b:	59                   	pop    ecx
1000050c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10000510:	e8 fc ff ff ff       	call   10000511 <NiMain(void*)+0x511>	10000511: R_386_PC32	malloc
10000515:	5e                   	pop    esi
10000516:	89 c1                	mov    ecx,eax
10000518:	8d 54 24 20          	lea    edx,[esp+0x20]
1000051c:	8b 07                	mov    eax,DWORD PTR [edi]
1000051e:	52                   	push   edx
1000051f:	51                   	push   ecx
10000520:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
10000524:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000528:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000052c:	57                   	push   edi
1000052d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10000530:	83 c4 14             	add    esp,0x14
10000533:	a1 00 00 00 00       	mov    eax,ds:0x0	10000534: R_386_32	screen
10000538:	8b 30                	mov    esi,DWORD PTR [eax]
1000053a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
1000053e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10000542:	51                   	push   ecx
10000543:	6a 50                	push   0x50
10000545:	68 e4 00 00 00       	push   0xe4
1000054a:	50                   	push   eax
1000054b:	ff 56 2c             	call   DWORD PTR [esi+0x2c]
1000054e:	83 c4 14             	add    esp,0x14
10000551:	57                   	push   edi
10000552:	e8 fc ff ff ff       	call   10000553 <NiMain(void*)+0x553>	10000553: R_386_PC32	File::close()
10000557:	8b 07                	mov    eax,DWORD PTR [edi]
10000559:	89 3c 24             	mov    DWORD PTR [esp],edi
1000055c:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000055f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10000566:	e8 fc ff ff ff       	call   10000567 <NiMain(void*)+0x567>	10000567: R_386_PC32	malloc
1000056b:	83 c4 0c             	add    esp,0xc
1000056e:	89 c7                	mov    edi,eax
10000570:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000572: R_386_32	kernelProcess
10000576:	68 12 5c 00 10       	push   0x10005c12	10000577: R_386_32	.text
1000057b:	50                   	push   eax
1000057c:	e8 fc ff ff ff       	call   1000057d <NiMain(void*)+0x57d>	1000057d: R_386_PC32	File::File(char const*, Process*)
10000581:	58                   	pop    eax
10000582:	5a                   	pop    edx
10000583:	6a 01                	push   0x1
10000585:	57                   	push   edi
10000586:	e8 fc ff ff ff       	call   10000587 <NiMain(void*)+0x587>	10000587: R_386_PC32	File::open(FileOpenMode)
1000058b:	83 c4 0c             	add    esp,0xc
1000058e:	53                   	push   ebx
1000058f:	55                   	push   ebp
10000590:	57                   	push   edi
10000591:	e8 fc ff ff ff       	call   10000592 <NiMain(void*)+0x592>	10000592: R_386_PC32	File::stat(unsigned long long*, bool*)
10000596:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
1000059a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000059e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
100005a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100005a6:	59                   	pop    ecx
100005a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
100005ab:	e8 fc ff ff ff       	call   100005ac <NiMain(void*)+0x5ac>	100005ac: R_386_PC32	malloc
100005b0:	5e                   	pop    esi
100005b1:	89 c1                	mov    ecx,eax
100005b3:	8d 54 24 20          	lea    edx,[esp+0x20]
100005b7:	8b 07                	mov    eax,DWORD PTR [edi]
100005b9:	52                   	push   edx
100005ba:	51                   	push   ecx
100005bb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
100005bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100005c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100005c7:	57                   	push   edi
100005c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100005cb:	83 c4 14             	add    esp,0x14
100005ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100005cf: R_386_32	screen
100005d3:	8b 30                	mov    esi,DWORD PTR [eax]
100005d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100005d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100005dd:	51                   	push   ecx
100005de:	6a 50                	push   0x50
100005e0:	68 fc 00 00 00       	push   0xfc
100005e5:	50                   	push   eax
100005e6:	ff 56 2c             	call   DWORD PTR [esi+0x2c]
100005e9:	83 c4 14             	add    esp,0x14
100005ec:	57                   	push   edi
100005ed:	e8 fc ff ff ff       	call   100005ee <NiMain(void*)+0x5ee>	100005ee: R_386_PC32	File::close()
100005f2:	8b 07                	mov    eax,DWORD PTR [edi]
100005f4:	89 3c 24             	mov    DWORD PTR [esp],edi
100005f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
100005fa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10000601:	e8 fc ff ff ff       	call   10000602 <NiMain(void*)+0x602>	10000602: R_386_PC32	malloc
10000606:	83 c4 0c             	add    esp,0xc
10000609:	89 c7                	mov    edi,eax
1000060b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000060d: R_386_32	kernelProcess
10000611:	68 32 5c 00 10       	push   0x10005c32	10000612: R_386_32	.text
10000616:	50                   	push   eax
10000617:	e8 fc ff ff ff       	call   10000618 <NiMain(void*)+0x618>	10000618: R_386_PC32	File::File(char const*, Process*)
1000061c:	58                   	pop    eax
1000061d:	5a                   	pop    edx
1000061e:	6a 01                	push   0x1
10000620:	57                   	push   edi
10000621:	e8 fc ff ff ff       	call   10000622 <NiMain(void*)+0x622>	10000622: R_386_PC32	File::open(FileOpenMode)
10000626:	83 c4 0c             	add    esp,0xc
10000629:	53                   	push   ebx
1000062a:	55                   	push   ebp
1000062b:	57                   	push   edi
1000062c:	e8 fc ff ff ff       	call   1000062d <NiMain(void*)+0x62d>	1000062d: R_386_PC32	File::stat(unsigned long long*, bool*)
10000631:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
10000635:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000639:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
1000063d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000641:	59                   	pop    ecx
10000642:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10000646:	e8 fc ff ff ff       	call   10000647 <NiMain(void*)+0x647>	10000647: R_386_PC32	malloc
1000064b:	5e                   	pop    esi
1000064c:	89 c1                	mov    ecx,eax
1000064e:	8d 54 24 20          	lea    edx,[esp+0x20]
10000652:	8b 07                	mov    eax,DWORD PTR [edi]
10000654:	52                   	push   edx
10000655:	51                   	push   ecx
10000656:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
1000065a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000065e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000662:	57                   	push   edi
10000663:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10000666:	83 c4 14             	add    esp,0x14
10000669:	a1 00 00 00 00       	mov    eax,ds:0x0	1000066a: R_386_32	screen
1000066e:	8b 30                	mov    esi,DWORD PTR [eax]
10000670:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000674:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10000678:	51                   	push   ecx
10000679:	6a 50                	push   0x50
1000067b:	68 2c 01 00 00       	push   0x12c
10000680:	50                   	push   eax
10000681:	ff 56 2c             	call   DWORD PTR [esi+0x2c]
10000684:	83 c4 14             	add    esp,0x14
10000687:	57                   	push   edi
10000688:	e8 fc ff ff ff       	call   10000689 <NiMain(void*)+0x689>	10000689: R_386_PC32	File::close()
1000068d:	8b 07                	mov    eax,DWORD PTR [edi]
1000068f:	89 3c 24             	mov    DWORD PTR [esp],edi
10000692:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000695:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
1000069c:	e8 fc ff ff ff       	call   1000069d <NiMain(void*)+0x69d>	1000069d: R_386_PC32	malloc
100006a1:	83 c4 0c             	add    esp,0xc
100006a4:	89 c7                	mov    edi,eax
100006a6:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100006a8: R_386_32	kernelProcess
100006ac:	68 52 5c 00 10       	push   0x10005c52	100006ad: R_386_32	.text
100006b1:	50                   	push   eax
100006b2:	e8 fc ff ff ff       	call   100006b3 <NiMain(void*)+0x6b3>	100006b3: R_386_PC32	File::File(char const*, Process*)
100006b7:	58                   	pop    eax
100006b8:	5a                   	pop    edx
100006b9:	6a 01                	push   0x1
100006bb:	57                   	push   edi
100006bc:	e8 fc ff ff ff       	call   100006bd <NiMain(void*)+0x6bd>	100006bd: R_386_PC32	File::open(FileOpenMode)
100006c1:	83 c4 0c             	add    esp,0xc
100006c4:	53                   	push   ebx
100006c5:	55                   	push   ebp
100006c6:	57                   	push   edi
100006c7:	e8 fc ff ff ff       	call   100006c8 <NiMain(void*)+0x6c8>	100006c8: R_386_PC32	File::stat(unsigned long long*, bool*)
100006cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
100006d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100006d4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
100006d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100006dc:	59                   	pop    ecx
100006dd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
100006e1:	e8 fc ff ff ff       	call   100006e2 <NiMain(void*)+0x6e2>	100006e2: R_386_PC32	malloc
100006e6:	5e                   	pop    esi
100006e7:	89 c1                	mov    ecx,eax
100006e9:	8d 54 24 20          	lea    edx,[esp+0x20]
100006ed:	8b 07                	mov    eax,DWORD PTR [edi]
100006ef:	52                   	push   edx
100006f0:	51                   	push   ecx
100006f1:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
100006f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100006f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100006fd:	57                   	push   edi
100006fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10000701:	83 c4 14             	add    esp,0x14
10000704:	a1 00 00 00 00       	mov    eax,ds:0x0	10000705: R_386_32	screen
10000709:	8b 30                	mov    esi,DWORD PTR [eax]
1000070b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
1000070f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10000713:	51                   	push   ecx
10000714:	6a 50                	push   0x50
10000716:	68 44 01 00 00       	push   0x144
1000071b:	50                   	push   eax
1000071c:	ff 56 2c             	call   DWORD PTR [esi+0x2c]
1000071f:	83 c4 14             	add    esp,0x14
10000722:	57                   	push   edi
10000723:	e8 fc ff ff ff       	call   10000724 <NiMain(void*)+0x724>	10000724: R_386_PC32	File::close()
10000728:	8b 07                	mov    eax,DWORD PTR [edi]
1000072a:	89 3c 24             	mov    DWORD PTR [esp],edi
1000072d:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000730:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10000737:	e8 fc ff ff ff       	call   10000738 <NiMain(void*)+0x738>	10000738: R_386_PC32	malloc
1000073c:	83 c4 0c             	add    esp,0xc
1000073f:	89 c6                	mov    esi,eax
10000741:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000743: R_386_32	kernelProcess
10000747:	68 74 5c 00 10       	push   0x10005c74	10000748: R_386_32	.text
1000074c:	50                   	push   eax
1000074d:	e8 fc ff ff ff       	call   1000074e <NiMain(void*)+0x74e>	1000074e: R_386_PC32	File::File(char const*, Process*)
10000752:	5f                   	pop    edi
10000753:	58                   	pop    eax
10000754:	6a 01                	push   0x1
10000756:	56                   	push   esi
10000757:	e8 fc ff ff ff       	call   10000758 <NiMain(void*)+0x758>	10000758: R_386_PC32	File::open(FileOpenMode)
1000075c:	83 c4 0c             	add    esp,0xc
1000075f:	53                   	push   ebx
10000760:	55                   	push   ebp
10000761:	56                   	push   esi
10000762:	e8 fc ff ff ff       	call   10000763 <NiMain(void*)+0x763>	10000763: R_386_PC32	File::stat(unsigned long long*, bool*)
10000767:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
1000076b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
1000076f:	89 3c 24             	mov    DWORD PTR [esp],edi
10000772:	e8 fc ff ff ff       	call   10000773 <NiMain(void*)+0x773>	10000773: R_386_PC32	malloc
10000777:	89 c3                	mov    ebx,eax
10000779:	58                   	pop    eax
1000077a:	8b 06                	mov    eax,DWORD PTR [esi]
1000077c:	8d 54 24 20          	lea    edx,[esp+0x20]
10000780:	52                   	push   edx
10000781:	53                   	push   ebx
10000782:	55                   	push   ebp
10000783:	57                   	push   edi
10000784:	56                   	push   esi
10000785:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10000788:	83 c4 14             	add    esp,0x14
1000078b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000078c: R_386_32	screen
10000790:	8b 08                	mov    ecx,DWORD PTR [eax]
10000792:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000796:	53                   	push   ebx
10000797:	6a 50                	push   0x50
10000799:	68 5c 01 00 00       	push   0x15c
1000079e:	50                   	push   eax
1000079f:	ff 51 2c             	call   DWORD PTR [ecx+0x2c]
100007a2:	83 c4 14             	add    esp,0x14
100007a5:	56                   	push   esi
100007a6:	e8 fc ff ff ff       	call   100007a7 <NiMain(void*)+0x7a7>	100007a7: R_386_PC32	File::close()
100007ab:	8b 06                	mov    eax,DWORD PTR [esi]
100007ad:	89 34 24             	mov    DWORD PTR [esp],esi
100007b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
100007b3:	83 c4 10             	add    esp,0x10
100007b6:	83 ec 0c             	sub    esp,0xc
100007b9:	6a 02                	push   0x2
100007bb:	e8 fc ff ff ff       	call   100007bc <NiMain(void*)+0x7bc>	100007bc: R_386_PC32	blockTask(TaskState)
100007c0:	eb f1                	jmp    100007b3 <NiMain(void*)+0x7b3>
100007c2:	66 90                	xchg   ax,ax

100007c4 <NiBegin(void*)>:
100007c4:	83 ec 18             	sub    esp,0x18
100007c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007cb:	e8 fc ff ff ff       	call   100007cc <NiBegin(void*)+0x8>	100007cc: R_386_PC32	NiMain(void*)

100007d0 <_ssfn__bitreverse16>:
100007d0:	89 c2                	mov    edx,eax
100007d2:	01 c0                	add    eax,eax
100007d4:	d1 fa                	sar    edx,1
100007d6:	25 aa aa 00 00       	and    eax,0xaaaa
100007db:	81 e2 55 55 00 00    	and    edx,0x5555
100007e1:	09 c2                	or     edx,eax
100007e3:	89 d0                	mov    eax,edx
100007e5:	c1 e2 02             	shl    edx,0x2
100007e8:	c1 f8 02             	sar    eax,0x2
100007eb:	81 e2 cc cc 00 00    	and    edx,0xcccc
100007f1:	25 33 33 00 00       	and    eax,0x3333
100007f6:	09 d0                	or     eax,edx
100007f8:	89 c2                	mov    edx,eax
100007fa:	c1 e0 04             	shl    eax,0x4
100007fd:	c1 fa 04             	sar    edx,0x4
10000800:	25 f0 f0 00 00       	and    eax,0xf0f0
10000805:	81 e2 0f 0f 00 00    	and    edx,0xf0f
1000080b:	09 c2                	or     edx,eax
1000080d:	89 d1                	mov    ecx,edx
1000080f:	c1 e2 08             	shl    edx,0x8
10000812:	c1 f9 08             	sar    ecx,0x8
10000815:	0f b7 c2             	movzx  eax,dx
10000818:	09 c8                	or     eax,ecx
1000081a:	c3                   	ret    

1000081b <_ssfn__zhuffman_decode>:
1000081b:	55                   	push   ebp
1000081c:	57                   	push   edi
1000081d:	56                   	push   esi
1000081e:	53                   	push   ebx
1000081f:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
10000823:	7f 1d                	jg     10000842 <_ssfn__zhuffman_decode+0x27>
10000825:	8b 18                	mov    ebx,DWORD PTR [eax]
10000827:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000082a:	89 08                	mov    DWORD PTR [eax],ecx
1000082c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
1000082f:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000832:	d3 e3                	shl    ebx,cl
10000834:	83 c1 08             	add    ecx,0x8
10000837:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000083a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
1000083d:	83 f9 18             	cmp    ecx,0x18
10000840:	eb e1                	jmp    10000823 <_ssfn__zhuffman_decode+0x8>
10000842:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
10000845:	89 f9                	mov    ecx,edi
10000847:	81 e1 ff 01 00 00    	and    ecx,0x1ff
1000084d:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
10000851:	89 cb                	mov    ebx,ecx
10000853:	85 c9                	test   ecx,ecx
10000855:	74 15                	je     1000086c <_ssfn__zhuffman_decode+0x51>
10000857:	c1 f9 09             	sar    ecx,0x9
1000085a:	89 da                	mov    edx,ebx
1000085c:	d3 ef                	shr    edi,cl
1000085e:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
10000861:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10000864:	81 e2 ff 01 00 00    	and    edx,0x1ff
1000086a:	eb 58                	jmp    100008c4 <_ssfn__zhuffman_decode+0xa9>
1000086c:	89 d5                	mov    ebp,edx
1000086e:	89 c3                	mov    ebx,eax
10000870:	be 0a 00 00 00       	mov    esi,0xa
10000875:	89 f8                	mov    eax,edi
10000877:	e8 54 ff ff ff       	call   100007d0 <_ssfn__bitreverse16>
1000087c:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
10000883:	7c 03                	jl     10000888 <_ssfn__zhuffman_decode+0x6d>
10000885:	46                   	inc    esi
10000886:	eb f4                	jmp    1000087c <_ssfn__zhuffman_decode+0x61>
10000888:	83 ca ff             	or     edx,0xffffffff
1000088b:	83 fe 10             	cmp    esi,0x10
1000088e:	74 34                	je     100008c4 <_ssfn__zhuffman_decode+0xa9>
10000890:	8d 14 36             	lea    edx,[esi+esi*1]
10000893:	b9 10 00 00 00       	mov    ecx,0x10
10000898:	01 ea                	add    edx,ebp
1000089a:	29 f1                	sub    ecx,esi
1000089c:	d3 f8                	sar    eax,cl
1000089e:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
100008a5:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
100008ac:	29 c8                	sub    eax,ecx
100008ae:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
100008b1:	89 f1                	mov    ecx,esi
100008b3:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
100008ba:	d3 ef                	shr    edi,cl
100008bc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
100008bf:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
100008c4:	5b                   	pop    ebx
100008c5:	89 d0                	mov    eax,edx
100008c7:	5e                   	pop    esi
100008c8:	5f                   	pop    edi
100008c9:	5d                   	pop    ebp
100008ca:	c3                   	ret    

100008cb <_ssfn__zexpand>:
100008cb:	55                   	push   ebp
100008cc:	57                   	push   edi
100008cd:	56                   	push   esi
100008ce:	53                   	push   ebx
100008cf:	83 ec 0c             	sub    esp,0xc
100008d2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100008d5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
100008d8:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
100008db:	29 f9                	sub    ecx,edi
100008dd:	83 f9 08             	cmp    ecx,0x8
100008e0:	74 04                	je     100008e6 <_ssfn__zexpand+0x1b>
100008e2:	31 c0                	xor    eax,eax
100008e4:	eb 3c                	jmp    10000922 <_ssfn__zexpand+0x57>
100008e6:	80 3f 53             	cmp    BYTE PTR [edi],0x53
100008e9:	75 f7                	jne    100008e2 <_ssfn__zexpand+0x17>
100008eb:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
100008ef:	75 f1                	jne    100008e2 <_ssfn__zexpand+0x17>
100008f1:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
100008f5:	75 eb                	jne    100008e2 <_ssfn__zexpand+0x17>
100008f7:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
100008fa:	89 c3                	mov    ebx,eax
100008fc:	89 d6                	mov    esi,edx
100008fe:	50                   	push   eax
100008ff:	50                   	push   eax
10000900:	55                   	push   ebp
10000901:	57                   	push   edi
10000902:	e8 fc ff ff ff       	call   10000903 <_ssfn__zexpand+0x38>	10000903: R_386_PC32	realloc
10000907:	83 c4 10             	add    esp,0x10
1000090a:	85 c0                	test   eax,eax
1000090c:	74 d4                	je     100008e2 <_ssfn__zexpand+0x17>
1000090e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000911:	29 fe                	sub    esi,edi
10000913:	01 c6                	add    esi,eax
10000915:	01 e8                	add    eax,ebp
10000917:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
1000091a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
1000091d:	b8 01 00 00 00       	mov    eax,0x1
10000922:	83 c4 0c             	add    esp,0xc
10000925:	5b                   	pop    ebx
10000926:	5e                   	pop    esi
10000927:	5f                   	pop    edi
10000928:	5d                   	pop    ebp
10000929:	c3                   	ret    

1000092a <_ssfn__zbuild_huffman>:
1000092a:	55                   	push   ebp
1000092b:	57                   	push   edi
1000092c:	56                   	push   esi
1000092d:	53                   	push   ebx
1000092e:	89 c3                	mov    ebx,eax
10000930:	81 ec a0 00 00 00    	sub    esp,0xa0
10000936:	31 c0                	xor    eax,eax
10000938:	89 0c 24             	mov    DWORD PTR [esp],ecx
1000093b:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
1000093f:	b9 11 00 00 00       	mov    ecx,0x11
10000944:	89 ef                	mov    edi,ebp
10000946:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
1000094a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000094c:	b9 00 01 00 00       	mov    ecx,0x100
10000951:	89 df                	mov    edi,ebx
10000953:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000955:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10000958:	7d 0f                	jge    10000969 <_ssfn__zbuild_huffman+0x3f>
1000095a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
1000095e:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
10000962:	40                   	inc    eax
10000963:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
10000967:	eb ec                	jmp    10000955 <_ssfn__zbuild_huffman+0x2b>
10000969:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
10000971:	b9 01 00 00 00       	mov    ecx,0x1
10000976:	b8 01 00 00 00       	mov    eax,0x1
1000097b:	89 c7                	mov    edi,eax
1000097d:	d3 e7                	shl    edi,cl
1000097f:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
10000983:	0f 8f 10 01 00 00    	jg     10000a99 <_ssfn__zbuild_huffman+0x16f>
10000989:	41                   	inc    ecx
1000098a:	83 f9 10             	cmp    ecx,0x10
1000098d:	75 ec                	jne    1000097b <_ssfn__zbuild_huffman+0x51>
1000098f:	31 ff                	xor    edi,edi
10000991:	31 f6                	xor    esi,esi
10000993:	b8 01 00 00 00       	mov    eax,0x1
10000998:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
1000099c:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
100009a0:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
100009a8:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
100009b0:	01 ef                	add    edi,ebp
100009b2:	85 ed                	test   ebp,ebp
100009b4:	74 11                	je     100009c7 <_ssfn__zbuild_huffman+0x9d>
100009b6:	ba 01 00 00 00       	mov    edx,0x1
100009bb:	88 c1                	mov    cl,al
100009bd:	d3 e2                	shl    edx,cl
100009bf:	39 fa                	cmp    edx,edi
100009c1:	0f 8c d2 00 00 00    	jl     10000a99 <_ssfn__zbuild_huffman+0x16f>
100009c7:	89 fa                	mov    edx,edi
100009c9:	b9 10 00 00 00       	mov    ecx,0x10
100009ce:	01 ff                	add    edi,edi
100009d0:	29 c1                	sub    ecx,eax
100009d2:	01 ee                	add    esi,ebp
100009d4:	d3 e2                	shl    edx,cl
100009d6:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
100009dd:	40                   	inc    eax
100009de:	83 f8 10             	cmp    eax,0x10
100009e1:	75 b5                	jne    10000998 <_ssfn__zbuild_huffman+0x6e>
100009e3:	8b 04 24             	mov    eax,DWORD PTR [esp]
100009e6:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
100009f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100009f4:	31 ff                	xor    edi,edi
100009f6:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
100009fa:	0f 8d 9d 00 00 00    	jge    10000a9d <_ssfn__zbuild_huffman+0x173>
10000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000a04:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
10000a08:	89 f2                	mov    edx,esi
10000a0a:	85 f6                	test   esi,esi
10000a0c:	0f 84 81 00 00 00    	je     10000a93 <_ssfn__zbuild_huffman+0x169>
10000a12:	8d 0c 36             	lea    ecx,[esi+esi*1]
10000a15:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
10000a19:	8d 04 19             	lea    eax,[ecx+ebx*1]
10000a1c:	89 e9                	mov    ecx,ebp
10000a1e:	89 04 24             	mov    DWORD PTR [esp],eax
10000a21:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
10000a28:	29 c1                	sub    ecx,eax
10000a2a:	89 c8                	mov    eax,ecx
10000a2c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000a2f:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
10000a36:	01 c8                	add    eax,ecx
10000a38:	83 fe 09             	cmp    esi,0x9
10000a3b:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
10000a42:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
10000a4a:	7f 42                	jg     10000a8e <_ssfn__zbuild_huffman+0x164>
10000a4c:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10000a50:	89 e8                	mov    eax,ebp
10000a52:	e8 79 fd ff ff       	call   100007d0 <_ssfn__bitreverse16>
10000a57:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
10000a5b:	b9 10 00 00 00       	mov    ecx,0x10
10000a60:	29 f1                	sub    ecx,esi
10000a62:	d3 f8                	sar    eax,cl
10000a64:	88 d1                	mov    cl,dl
10000a66:	89 04 24             	mov    DWORD PTR [esp],eax
10000a69:	89 f2                	mov    edx,esi
10000a6b:	b8 01 00 00 00       	mov    eax,0x1
10000a70:	c1 e2 09             	shl    edx,0x9
10000a73:	d3 e0                	shl    eax,cl
10000a75:	09 fa                	or     edx,edi
10000a77:	89 c1                	mov    ecx,eax
10000a79:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
10000a80:	7f 0c                	jg     10000a8e <_ssfn__zbuild_huffman+0x164>
10000a82:	8b 04 24             	mov    eax,DWORD PTR [esp]
10000a85:	01 0c 24             	add    DWORD PTR [esp],ecx
10000a88:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
10000a8c:	eb eb                	jmp    10000a79 <_ssfn__zbuild_huffman+0x14f>
10000a8e:	45                   	inc    ebp
10000a8f:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
10000a93:	47                   	inc    edi
10000a94:	e9 5d ff ff ff       	jmp    100009f6 <_ssfn__zbuild_huffman+0xcc>
10000a99:	31 c0                	xor    eax,eax
10000a9b:	eb 05                	jmp    10000aa2 <_ssfn__zbuild_huffman+0x178>
10000a9d:	b8 01 00 00 00       	mov    eax,0x1
10000aa2:	81 c4 a0 00 00 00    	add    esp,0xa0
10000aa8:	5b                   	pop    ebx
10000aa9:	5e                   	pop    esi
10000aaa:	5f                   	pop    edi
10000aab:	5d                   	pop    ebp
10000aac:	c3                   	ret    

10000aad <_ssfn_fc.part.1>:
10000aad:	55                   	push   ebp
10000aae:	57                   	push   edi
10000aaf:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
10000ab5:	56                   	push   esi
10000ab6:	53                   	push   ebx
10000ab7:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
10000abd:	83 ec 0c             	sub    esp,0xc
10000ac0:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10000ac3:	74 5d                	je     10000b22 <_ssfn_fc.part.1+0x75>
10000ac5:	31 f6                	xor    esi,esi
10000ac7:	8b 03                	mov    eax,DWORD PTR [ebx]
10000ac9:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
10000acd:	74 35                	je     10000b04 <_ssfn_fc.part.1+0x57>
10000acf:	31 ed                	xor    ebp,ebp
10000ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
10000ad3:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
10000ad6:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
10000ad9:	85 c0                	test   eax,eax
10000adb:	74 0c                	je     10000ae9 <_ssfn_fc.part.1+0x3c>
10000add:	83 ec 0c             	sub    esp,0xc
10000ae0:	50                   	push   eax
10000ae1:	e8 fc ff ff ff       	call   10000ae2 <_ssfn_fc.part.1+0x35>	10000ae2: R_386_PC32	free
10000ae6:	83 c4 10             	add    esp,0x10
10000ae9:	83 c5 04             	add    ebp,0x4
10000aec:	81 fd 00 04 00 00    	cmp    ebp,0x400
10000af2:	75 dd                	jne    10000ad1 <_ssfn_fc.part.1+0x24>
10000af4:	83 ec 0c             	sub    esp,0xc
10000af7:	8b 03                	mov    eax,DWORD PTR [ebx]
10000af9:	ff 34 30             	push   DWORD PTR [eax+esi*1]
10000afc:	e8 fc ff ff ff       	call   10000afd <_ssfn_fc.part.1+0x50>	10000afd: R_386_PC32	free
10000b01:	83 c4 10             	add    esp,0x10
10000b04:	83 c6 04             	add    esi,0x4
10000b07:	81 fe 00 04 00 00    	cmp    esi,0x400
10000b0d:	75 b8                	jne    10000ac7 <_ssfn_fc.part.1+0x1a>
10000b0f:	83 ec 0c             	sub    esp,0xc
10000b12:	ff 33                	push   DWORD PTR [ebx]
10000b14:	e8 fc ff ff ff       	call   10000b15 <_ssfn_fc.part.1+0x68>	10000b15: R_386_PC32	free
10000b19:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
10000b1f:	83 c4 10             	add    esp,0x10
10000b22:	83 c3 04             	add    ebx,0x4
10000b25:	39 fb                	cmp    ebx,edi
10000b27:	75 97                	jne    10000ac0 <_ssfn_fc.part.1+0x13>
10000b29:	83 c4 0c             	add    esp,0xc
10000b2c:	5b                   	pop    ebx
10000b2d:	5e                   	pop    esi
10000b2e:	5f                   	pop    edi
10000b2f:	5d                   	pop    ebp
10000b30:	c3                   	ret    

10000b31 <_ssfn_l>:
10000b31:	57                   	push   edi
10000b32:	56                   	push   esi
10000b33:	53                   	push   ebx
10000b34:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000b38:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000b3c:	39 ce                	cmp    esi,ecx
10000b3e:	89 f3                	mov    ebx,esi
10000b40:	0f 9d c1             	setge  cl
10000b43:	c1 eb 1f             	shr    ebx,0x1f
10000b46:	09 d9                	or     ecx,ebx
10000b48:	89 fb                	mov    ebx,edi
10000b4a:	c1 eb 1f             	shr    ebx,0x1f
10000b4d:	08 d9                	or     cl,bl
10000b4f:	0f 85 e9 00 00 00    	jne    10000c3e <_ssfn_l+0x10d>
10000b55:	39 d7                	cmp    edi,edx
10000b57:	0f 8d e1 00 00 00    	jge    10000c3e <_ssfn_l+0x10d>
10000b5d:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
10000b63:	8d 51 08             	lea    edx,[ecx+0x8]
10000b66:	8d 4f 08             	lea    ecx,[edi+0x8]
10000b69:	c1 fa 04             	sar    edx,0x4
10000b6c:	c1 f9 04             	sar    ecx,0x4
10000b6f:	39 ca                	cmp    edx,ecx
10000b71:	75 1a                	jne    10000b8d <_ssfn_l+0x5c>
10000b73:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
10000b79:	8d 4e 08             	lea    ecx,[esi+0x8]
10000b7c:	83 c2 08             	add    edx,0x8
10000b7f:	c1 f9 04             	sar    ecx,0x4
10000b82:	c1 fa 04             	sar    edx,0x4
10000b85:	39 ca                	cmp    edx,ecx
10000b87:	0f 84 b1 00 00 00    	je     10000c3e <_ssfn_l+0x10d>
10000b8d:	89 c3                	mov    ebx,eax
10000b8f:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
10000b95:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
10000b9b:	7f 3e                	jg     10000bdb <_ssfn_l+0xaa>
10000b9d:	05 00 02 00 00       	add    eax,0x200
10000ba2:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
10000ba8:	52                   	push   edx
10000ba9:	01 c0                	add    eax,eax
10000bab:	52                   	push   edx
10000bac:	50                   	push   eax
10000bad:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
10000bb3:	e8 fc ff ff ff       	call   10000bb4 <_ssfn_l+0x83>	10000bb4: R_386_PC32	realloc
10000bb8:	83 c4 10             	add    esp,0x10
10000bbb:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
10000bc1:	85 c0                	test   eax,eax
10000bc3:	75 16                	jne    10000bdb <_ssfn_l+0xaa>
10000bc5:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
10000bcf:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
10000bd9:	eb 63                	jmp    10000c3e <_ssfn_l+0x10d>
10000bdb:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
10000be2:	75 26                	jne    10000c0a <_ssfn_l+0xd9>
10000be4:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000bea:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
10000bf0:	66 89 10             	mov    WORD PTR [eax],dx
10000bf3:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000bf9:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
10000bff:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
10000c03:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000c0a:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000c10:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000c16:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
10000c1a:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000c20:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000c26:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
10000c2b:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10000c31:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000c38:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
10000c3e:	5b                   	pop    ebx
10000c3f:	5e                   	pop    esi
10000c40:	5f                   	pop    edi
10000c41:	c3                   	ret    

10000c42 <_ssfn_b>:
10000c42:	55                   	push   ebp
10000c43:	57                   	push   edi
10000c44:	56                   	push   esi
10000c45:	53                   	push   ebx
10000c46:	83 ec 4c             	sub    esp,0x4c
10000c49:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10000c4d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10000c51:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10000c55:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10000c59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000c5d:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
10000c61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10000c65:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
10000c69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000c6d:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
10000c71:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10000c75:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
10000c79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000c7d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10000c81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000c85:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10000c8c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10000c90:	83 f8 04             	cmp    eax,0x4
10000c93:	75 28                	jne    10000cbd <_ssfn_b+0x7b>
10000c95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000c99:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
10000c9d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10000ca1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10000ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000ca9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
10000cad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10000cb1:	83 c4 4c             	add    esp,0x4c
10000cb4:	5b                   	pop    ebx
10000cb5:	5e                   	pop    esi
10000cb6:	5f                   	pop    edi
10000cb7:	5d                   	pop    ebp
10000cb8:	e9 74 fe ff ff       	jmp    10000b31 <_ssfn_l>
10000cbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000cc1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
10000cc5:	75 0e                	jne    10000cd5 <_ssfn_b+0x93>
10000cc7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000ccb:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
10000ccf:	0f 84 19 01 00 00    	je     10000dee <_ssfn_b+0x1ac>
10000cd5:	be 02 00 00 00       	mov    esi,0x2
10000cda:	89 d8                	mov    eax,ebx
10000cdc:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000ce0:	99                   	cdq    
10000ce1:	f7 fe                	idiv   esi
10000ce3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10000ce7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000ceb:	89 e8                	mov    eax,ebp
10000ced:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000cf1:	99                   	cdq    
10000cf2:	f7 fe                	idiv   esi
10000cf4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
10000cf8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000cfc:	89 f8                	mov    eax,edi
10000cfe:	29 d8                	sub    eax,ebx
10000d00:	99                   	cdq    
10000d01:	f7 fe                	idiv   esi
10000d03:	01 c3                	add    ebx,eax
10000d05:	89 c8                	mov    eax,ecx
10000d07:	29 e8                	sub    eax,ebp
10000d09:	99                   	cdq    
10000d0a:	f7 fe                	idiv   esi
10000d0c:	01 e8                	add    eax,ebp
10000d0e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000d16:	29 f8                	sub    eax,edi
10000d18:	99                   	cdq    
10000d19:	f7 fe                	idiv   esi
10000d1b:	01 f8                	add    eax,edi
10000d1d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000d21:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10000d25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000d29:	29 c8                	sub    eax,ecx
10000d2b:	99                   	cdq    
10000d2c:	f7 fe                	idiv   esi
10000d2e:	01 c8                	add    eax,ecx
10000d30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10000d34:	89 d8                	mov    eax,ebx
10000d36:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
10000d3a:	99                   	cdq    
10000d3b:	f7 fe                	idiv   esi
10000d3d:	8d 0c 38             	lea    ecx,[eax+edi*1]
10000d40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000d44:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10000d48:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10000d4c:	99                   	cdq    
10000d4d:	f7 fe                	idiv   esi
10000d4f:	8d 2c 38             	lea    ebp,[eax+edi*1]
10000d52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000d56:	29 d8                	sub    eax,ebx
10000d58:	99                   	cdq    
10000d59:	f7 fe                	idiv   esi
10000d5b:	83 ec 0c             	sub    esp,0xc
10000d5e:	01 d8                	add    eax,ebx
10000d60:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10000d68:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10000d6c:	99                   	cdq    
10000d6d:	f7 fe                	idiv   esi
10000d6f:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10000d73:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10000d77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10000d7b:	29 c8                	sub    eax,ecx
10000d7d:	99                   	cdq    
10000d7e:	f7 fe                	idiv   esi
10000d80:	8d 1c 08             	lea    ebx,[eax+ecx*1]
10000d83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10000d87:	29 e8                	sub    eax,ebp
10000d89:	99                   	cdq    
10000d8a:	f7 fe                	idiv   esi
10000d8c:	8d 34 28             	lea    esi,[eax+ebp*1]
10000d8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10000d93:	8d 78 01             	lea    edi,[eax+0x1]
10000d96:	57                   	push   edi
10000d97:	56                   	push   esi
10000d98:	53                   	push   ebx
10000d99:	55                   	push   ebp
10000d9a:	51                   	push   ecx
10000d9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000d9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000da3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
10000da7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
10000dab:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10000daf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
10000db3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000db7:	e8 86 fe ff ff       	call   10000c42 <_ssfn_b>
10000dbc:	83 c4 24             	add    esp,0x24
10000dbf:	57                   	push   edi
10000dc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000dc4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000dc8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000dcc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000dd0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
10000dd4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
10000dd8:	56                   	push   esi
10000dd9:	53                   	push   ebx
10000dda:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10000dde:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
10000de2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000de6:	e8 57 fe ff ff       	call   10000c42 <_ssfn_b>
10000deb:	83 c4 30             	add    esp,0x30
10000dee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10000df3:	0f 85 9c fe ff ff    	jne    10000c95 <_ssfn_b+0x53>
10000df9:	83 c4 4c             	add    esp,0x4c
10000dfc:	5b                   	pop    ebx
10000dfd:	5e                   	pop    esi
10000dfe:	5f                   	pop    edi
10000dff:	5d                   	pop    ebp
10000e00:	c3                   	ret    

10000e01 <_ssfn__zreceive>:
10000e01:	56                   	push   esi
10000e02:	53                   	push   ebx
10000e03:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
10000e06:	7d 1d                	jge    10000e25 <_ssfn__zreceive+0x24>
10000e08:	8b 18                	mov    ebx,DWORD PTR [eax]
10000e0a:	8d 4b 01             	lea    ecx,[ebx+0x1]
10000e0d:	89 08                	mov    DWORD PTR [eax],ecx
10000e0f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000e12:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000e15:	d3 e3                	shl    ebx,cl
10000e17:	83 c1 08             	add    ecx,0x8
10000e1a:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
10000e1d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000e20:	83 f9 18             	cmp    ecx,0x18
10000e23:	7e e3                	jle    10000e08 <_ssfn__zreceive+0x7>
10000e25:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
10000e28:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
10000e2b:	89 f3                	mov    ebx,esi
10000e2d:	88 d1                	mov    cl,dl
10000e2f:	d3 eb                	shr    ebx,cl
10000e31:	88 d1                	mov    cl,dl
10000e33:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10000e36:	bb 01 00 00 00       	mov    ebx,0x1
10000e3b:	d3 e3                	shl    ebx,cl
10000e3d:	8d 43 ff             	lea    eax,[ebx-0x1]
10000e40:	5b                   	pop    ebx
10000e41:	21 f0                	and    eax,esi
10000e43:	5e                   	pop    esi
10000e44:	c3                   	ret    

10000e45 <ssfn_utf8>:
10000e45:	56                   	push   esi
10000e46:	53                   	push   ebx
10000e47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10000e4b:	8b 11                	mov    edx,DWORD PTR [ecx]
10000e4d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
10000e50:	89 f0                	mov    eax,esi
10000e52:	84 c0                	test   al,al
10000e54:	0f be d8             	movsx  ebx,al
10000e57:	78 04                	js     10000e5d <ssfn_utf8+0x18>
10000e59:	89 d8                	mov    eax,ebx
10000e5b:	eb 7d                	jmp    10000eda <ssfn_utf8+0x95>
10000e5d:	f7 c6 20 00 00 00    	test   esi,0x20
10000e63:	75 14                	jne    10000e79 <ssfn_utf8+0x34>
10000e65:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
10000e68:	c1 e3 06             	shl    ebx,0x6
10000e6b:	83 e0 3f             	and    eax,0x3f
10000e6e:	81 e3 c0 07 00 00    	and    ebx,0x7c0
10000e74:	42                   	inc    edx
10000e75:	09 d8                	or     eax,ebx
10000e77:	eb 5f                	jmp    10000ed8 <ssfn_utf8+0x93>
10000e79:	f7 c6 10 00 00 00    	test   esi,0x10
10000e7f:	75 20                	jne    10000ea1 <ssfn_utf8+0x5c>
10000e81:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10000e85:	c1 e3 0c             	shl    ebx,0xc
10000e88:	c1 e0 06             	shl    eax,0x6
10000e8b:	0f b7 db             	movzx  ebx,bx
10000e8e:	25 c0 0f 00 00       	and    eax,0xfc0
10000e93:	83 c2 02             	add    edx,0x2
10000e96:	09 d8                	or     eax,ebx
10000e98:	8a 1a                	mov    bl,BYTE PTR [edx]
10000e9a:	83 e3 3f             	and    ebx,0x3f
10000e9d:	09 d8                	or     eax,ebx
10000e9f:	eb 37                	jmp    10000ed8 <ssfn_utf8+0x93>
10000ea1:	31 c0                	xor    eax,eax
10000ea3:	83 e6 08             	and    esi,0x8
10000ea6:	75 32                	jne    10000eda <ssfn_utf8+0x95>
10000ea8:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10000eac:	c1 e3 12             	shl    ebx,0x12
10000eaf:	c1 e0 0c             	shl    eax,0xc
10000eb2:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
10000eb8:	25 00 f0 03 00       	and    eax,0x3f000
10000ebd:	83 c2 03             	add    edx,0x3
10000ec0:	09 d8                	or     eax,ebx
10000ec2:	8a 1a                	mov    bl,BYTE PTR [edx]
10000ec4:	83 e3 3f             	and    ebx,0x3f
10000ec7:	09 d8                	or     eax,ebx
10000ec9:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
10000ecd:	c1 e3 06             	shl    ebx,0x6
10000ed0:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
10000ed6:	09 d8                	or     eax,ebx
10000ed8:	89 11                	mov    DWORD PTR [ecx],edx
10000eda:	ff 01                	inc    DWORD PTR [ecx]
10000edc:	5b                   	pop    ebx
10000edd:	5e                   	pop    esi
10000ede:	c3                   	ret    

10000edf <_ssfn_c>:
10000edf:	55                   	push   ebp
10000ee0:	57                   	push   edi
10000ee1:	56                   	push   esi
10000ee2:	53                   	push   ebx
10000ee3:	83 ec 14             	sub    esp,0x14
10000ee6:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
10000eec:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000ef0:	85 c0                	test   eax,eax
10000ef2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
10000ef8:	0f 84 e6 00 00 00    	je     10000fe4 <_ssfn_c+0x105>
10000efe:	31 ff                	xor    edi,edi
10000f00:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
10000f04:	0f 84 f3 00 00 00    	je     10000ffd <_ssfn_c+0x11e>
10000f0a:	85 d2                	test   edx,edx
10000f0c:	0f 84 eb 00 00 00    	je     10000ffd <_ssfn_c+0x11e>
10000f12:	80 3a 00             	cmp    BYTE PTR [edx],0x0
10000f15:	0f 84 e2 00 00 00    	je     10000ffd <_ssfn_c+0x11e>
10000f1b:	89 d6                	mov    esi,edx
10000f1d:	89 cd                	mov    ebp,ecx
10000f1f:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000f22:	89 c3                	mov    ebx,eax
10000f24:	85 d2                	test   edx,edx
10000f26:	74 38                	je     10000f60 <_ssfn_c+0x81>
10000f28:	8d 0c 13             	lea    ecx,[ebx+edx*1]
10000f2b:	31 c0                	xor    eax,eax
10000f2d:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000f30:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000f33:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
10000f37:	66 85 d2             	test   dx,dx
10000f3a:	74 24                	je     10000f60 <_ssfn_c+0x81>
10000f3c:	01 da                	add    edx,ebx
10000f3e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000f42:	8a 0a                	mov    cl,BYTE PTR [edx]
10000f44:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000f48:	84 c9                	test   cl,cl
10000f4a:	0f 84 9e 00 00 00    	je     10000fee <_ssfn_c+0x10f>
10000f50:	3a 0f                	cmp    cl,BYTE PTR [edi]
10000f52:	0f 85 90 00 00 00    	jne    10000fe8 <_ssfn_c+0x109>
10000f58:	47                   	inc    edi
10000f59:	42                   	inc    edx
10000f5a:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10000f5e:	eb e2                	jmp    10000f42 <_ssfn_c+0x63>
10000f60:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000f64:	8d 44 24 10          	lea    eax,[esp+0x10]
10000f68:	50                   	push   eax
10000f69:	e8 fc ff ff ff       	call   10000f6a <_ssfn_c+0x8b>	10000f6a: R_386_PC32	ssfn_utf8
10000f6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000f72:	29 f2                	sub    edx,esi
10000f74:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
10000f77:	5a                   	pop    edx
10000f78:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000f7c:	89 06                	mov    DWORD PTR [esi],eax
10000f7e:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
10000f81:	89 df                	mov    edi,ebx
10000f83:	31 db                	xor    ebx,ebx
10000f85:	8a 17                	mov    dl,BYTE PTR [edi]
10000f87:	80 fa ff             	cmp    dl,0xff
10000f8a:	75 08                	jne    10000f94 <_ssfn_c+0xb5>
10000f8c:	81 c3 ff ff 00 00    	add    ebx,0xffff
10000f92:	eb 2a                	jmp    10000fbe <_ssfn_c+0xdf>
10000f94:	88 d1                	mov    cl,dl
10000f96:	83 e1 c0             	and    ecx,0xffffffc0
10000f99:	80 f9 c0             	cmp    cl,0xc0
10000f9c:	75 16                	jne    10000fb4 <_ssfn_c+0xd5>
10000f9e:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000fa2:	c1 e2 08             	shl    edx,0x8
10000fa5:	83 c7 02             	add    edi,0x2
10000fa8:	81 e2 00 3f 00 00    	and    edx,0x3f00
10000fae:	09 ca                	or     edx,ecx
10000fb0:	01 d3                	add    ebx,edx
10000fb2:	eb 27                	jmp    10000fdb <_ssfn_c+0xfc>
10000fb4:	80 f9 80             	cmp    cl,0x80
10000fb7:	75 08                	jne    10000fc1 <_ssfn_c+0xe2>
10000fb9:	83 e2 3f             	and    edx,0x3f
10000fbc:	01 d3                	add    ebx,edx
10000fbe:	47                   	inc    edi
10000fbf:	eb 1a                	jmp    10000fdb <_ssfn_c+0xfc>
10000fc1:	39 d8                	cmp    eax,ebx
10000fc3:	74 38                	je     10000ffd <_ssfn_c+0x11e>
10000fc5:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000fc9:	83 e2 40             	and    edx,0x40
10000fcc:	80 fa 01             	cmp    dl,0x1
10000fcf:	19 d2                	sbb    edx,edx
10000fd1:	83 c2 06             	add    edx,0x6
10000fd4:	0f af d1             	imul   edx,ecx
10000fd7:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
10000fdb:	43                   	inc    ebx
10000fdc:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
10000fe2:	76 a1                	jbe    10000f85 <_ssfn_c+0xa6>
10000fe4:	31 ff                	xor    edi,edi
10000fe6:	eb 15                	jmp    10000ffd <_ssfn_c+0x11e>
10000fe8:	40                   	inc    eax
10000fe9:	e9 42 ff ff ff       	jmp    10000f30 <_ssfn_c+0x51>
10000fee:	29 f7                	sub    edi,esi
10000ff0:	05 00 f0 00 00       	add    eax,0xf000
10000ff5:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
10000ff8:	e9 7b ff ff ff       	jmp    10000f78 <_ssfn_c+0x99>
10000ffd:	83 c4 14             	add    esp,0x14
10001000:	89 f8                	mov    eax,edi
10001002:	5b                   	pop    ebx
10001003:	5e                   	pop    esi
10001004:	5f                   	pop    edi
10001005:	5d                   	pop    ebp
10001006:	c3                   	ret    

10001007 <_ssfn_zlib_decode>:
10001007:	55                   	push   ebp
10001008:	57                   	push   edi
10001009:	56                   	push   esi
1000100a:	53                   	push   ebx
1000100b:	81 ec c8 19 00 00    	sub    esp,0x19c8
10001011:	6a 08                	push   0x8
10001013:	e8 fc ff ff ff       	call   10001014 <_ssfn_zlib_decode+0xd>	10001014: R_386_PC32	malloc
10001018:	83 c4 10             	add    esp,0x10
1000101b:	89 c2                	mov    edx,eax
1000101d:	85 c0                	test   eax,eax
1000101f:	0f 84 eb 04 00 00    	je     10001510 <_ssfn_zlib_decode+0x509>
10001025:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
1000102c:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
10001033:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
1000103a:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
10001041:	31 c0                	xor    eax,eax
10001043:	83 c2 08             	add    edx,0x8
10001046:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
1000104d:	c6 80 20 62 03 10 08 	mov    BYTE PTR [eax+0x10036220],0x8	1000104f: R_386_32	.bss
10001054:	40                   	inc    eax
10001055:	3d 90 00 00 00       	cmp    eax,0x90
1000105a:	75 f1                	jne    1000104d <_ssfn_zlib_decode+0x46>
1000105c:	c6 80 20 62 03 10 09 	mov    BYTE PTR [eax+0x10036220],0x9	1000105e: R_386_32	.bss
10001063:	40                   	inc    eax
10001064:	3d 00 01 00 00       	cmp    eax,0x100
10001069:	75 f1                	jne    1000105c <_ssfn_zlib_decode+0x55>
1000106b:	c6 80 20 62 03 10 07 	mov    BYTE PTR [eax+0x10036220],0x7	1000106d: R_386_32	.bss
10001072:	40                   	inc    eax
10001073:	3d 18 01 00 00       	cmp    eax,0x118
10001078:	75 f1                	jne    1000106b <_ssfn_zlib_decode+0x64>
1000107a:	c7 05 38 63 03 10 08 08 08 08 	mov    DWORD PTR ds:0x10036338,0x8080808	1000107c: R_386_32	.bss
10001084:	c7 05 3c 63 03 10 08 08 08 08 	mov    DWORD PTR ds:0x1003633c,0x8080808	10001086: R_386_32	.bss
1000108e:	31 c0                	xor    eax,eax
10001090:	c6 80 00 62 03 10 05 	mov    BYTE PTR [eax+0x10036200],0x5	10001092: R_386_32	.bss
10001097:	40                   	inc    eax
10001098:	83 f8 20             	cmp    eax,0x20
1000109b:	75 f3                	jne    10001090 <_ssfn_zlib_decode+0x89>
1000109d:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
100010a8:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
100010b3:	ba 01 00 00 00       	mov    edx,0x1
100010b8:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
100010bf:	e8 3d fd ff ff       	call   10000e01 <_ssfn__zreceive>
100010c4:	ba 02 00 00 00       	mov    edx,0x2
100010c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100010cd:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
100010d4:	e8 28 fd ff ff       	call   10000e01 <_ssfn__zreceive>
100010d9:	89 c6                	mov    esi,eax
100010db:	85 c0                	test   eax,eax
100010dd:	0f 85 09 01 00 00    	jne    100011ec <_ssfn_zlib_decode+0x1e5>
100010e3:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
100010ea:	83 e2 07             	and    edx,0x7
100010ed:	74 0c                	je     100010fb <_ssfn_zlib_decode+0xf4>
100010ef:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
100010f6:	e8 06 fd ff ff       	call   10000e01 <_ssfn__zreceive>
100010fb:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10001102:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10001109:	31 c0                	xor    eax,eax
1000110b:	31 db                	xor    ebx,ebx
1000110d:	85 d2                	test   edx,edx
1000110f:	7f 14                	jg     10001125 <_ssfn_zlib_decode+0x11e>
10001111:	84 db                	test   bl,bl
10001113:	74 22                	je     10001137 <_ssfn_zlib_decode+0x130>
10001115:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
1000111c:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10001123:	eb 12                	jmp    10001137 <_ssfn_zlib_decode+0x130>
10001125:	40                   	inc    eax
10001126:	83 ea 08             	sub    edx,0x8
10001129:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10001130:	b3 01                	mov    bl,0x1
10001132:	c1 e9 08             	shr    ecx,0x8
10001135:	eb d6                	jmp    1000110d <_ssfn_zlib_decode+0x106>
10001137:	83 f8 04             	cmp    eax,0x4
1000113a:	74 1d                	je     10001159 <_ssfn_zlib_decode+0x152>
1000113c:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10001143:	40                   	inc    eax
10001144:	8d 4a 01             	lea    ecx,[edx+0x1]
10001147:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
1000114e:	8a 12                	mov    dl,BYTE PTR [edx]
10001150:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10001157:	eb de                	jmp    10001137 <_ssfn_zlib_decode+0x130>
10001159:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10001161:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10001169:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10001171:	c1 e3 08             	shl    ebx,0x8
10001174:	01 c3                	add    ebx,eax
10001176:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
1000117e:	c1 e0 08             	shl    eax,0x8
10001181:	01 d0                	add    eax,edx
10001183:	89 da                	mov    edx,ebx
10001185:	81 f2 ff ff 00 00    	xor    edx,0xffff
1000118b:	39 d0                	cmp    eax,edx
1000118d:	0f 85 69 03 00 00    	jne    100014fc <_ssfn_zlib_decode+0x4f5>
10001193:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
1000119a:	8d 04 1a             	lea    eax,[edx+ebx*1]
1000119d:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
100011a4:	73 14                	jae    100011ba <_ssfn_zlib_decode+0x1b3>
100011a6:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
100011ad:	e8 19 f7 ff ff       	call   100008cb <_ssfn__zexpand>
100011b2:	85 c0                	test   eax,eax
100011b4:	0f 84 42 03 00 00    	je     100014fc <_ssfn_zlib_decode+0x4f5>
100011ba:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
100011c1:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
100011c8:	39 f3                	cmp    ebx,esi
100011ca:	74 09                	je     100011d5 <_ssfn_zlib_decode+0x1ce>
100011cc:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
100011cf:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
100011d2:	46                   	inc    esi
100011d3:	eb e5                	jmp    100011ba <_ssfn_zlib_decode+0x1b3>
100011d5:	01 da                	add    edx,ebx
100011d7:	01 c3                	add    ebx,eax
100011d9:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
100011e0:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
100011e7:	e9 fc 02 00 00       	jmp    100014e8 <_ssfn_zlib_decode+0x4e1>
100011ec:	83 f8 03             	cmp    eax,0x3
100011ef:	0f 84 07 03 00 00    	je     100014fc <_ssfn_zlib_decode+0x4f5>
100011f5:	4e                   	dec    esi
100011f6:	75 2d                	jne    10001225 <_ssfn_zlib_decode+0x21e>
100011f8:	b9 20 01 00 00       	mov    ecx,0x120
100011fd:	ba 20 62 03 10       	mov    edx,0x10036220	100011fe: R_386_32	.bss
10001202:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10001209:	e8 1c f7 ff ff       	call   1000092a <_ssfn__zbuild_huffman>
1000120e:	85 c0                	test   eax,eax
10001210:	0f 84 e6 02 00 00    	je     100014fc <_ssfn_zlib_decode+0x4f5>
10001216:	b9 20 00 00 00       	mov    ecx,0x20
1000121b:	ba 00 62 03 10       	mov    edx,0x10036200	1000121c: R_386_32	.bss
10001220:	e9 78 01 00 00       	jmp    1000139d <_ssfn_zlib_decode+0x396>
10001225:	ba 05 00 00 00       	mov    edx,0x5
1000122a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10001231:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10001235:	e8 c7 fb ff ff       	call   10000e01 <_ssfn__zreceive>
1000123a:	89 df                	mov    edi,ebx
1000123c:	ba 05 00 00 00       	mov    edx,0x5
10001241:	89 c5                	mov    ebp,eax
10001243:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
1000124a:	e8 b2 fb ff ff       	call   10000e01 <_ssfn__zreceive>
1000124f:	ba 04 00 00 00       	mov    edx,0x4
10001254:	89 c6                	mov    esi,eax
10001256:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
1000125d:	e8 9f fb ff ff       	call   10000e01 <_ssfn__zreceive>
10001262:	b9 13 00 00 00       	mov    ecx,0x13
10001267:	83 c0 04             	add    eax,0x4
1000126a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000126e:	31 c0                	xor    eax,eax
10001270:	f3 aa                	rep stos BYTE PTR es:[edi],al
10001272:	31 ff                	xor    edi,edi
10001274:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10001278:	7e 1f                	jle    10001299 <_ssfn_zlib_decode+0x292>
1000127a:	ba 03 00 00 00       	mov    edx,0x3
1000127f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10001286:	47                   	inc    edi
10001287:	e8 75 fb ff ff       	call   10000e01 <_ssfn__zreceive>
1000128c:	0f b6 97 bf 5d 00 10 	movzx  edx,BYTE PTR [edi+0x10005dbf]	1000128f: R_386_32	.text
10001293:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10001297:	eb db                	jmp    10001274 <_ssfn_zlib_decode+0x26d>
10001299:	b9 13 00 00 00       	mov    ecx,0x13
1000129e:	89 da                	mov    edx,ebx
100012a0:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
100012a7:	e8 7e f6 ff ff       	call   1000092a <_ssfn__zbuild_huffman>
100012ac:	85 c0                	test   eax,eax
100012ae:	0f 84 48 02 00 00    	je     100014fc <_ssfn_zlib_decode+0x4f5>
100012b4:	8d 46 01             	lea    eax,[esi+0x1]
100012b7:	81 c5 01 01 00 00    	add    ebp,0x101
100012bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100012c1:	31 f6                	xor    esi,esi
100012c3:	01 e8                	add    eax,ebp
100012c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100012c9:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
100012cd:	0f 8e 9f 00 00 00    	jle    10001372 <_ssfn_zlib_decode+0x36b>
100012d3:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
100012da:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
100012e1:	e8 35 f5 ff ff       	call   1000081b <_ssfn__zhuffman_decode>
100012e6:	83 f8 12             	cmp    eax,0x12
100012e9:	0f 87 0d 02 00 00    	ja     100014fc <_ssfn_zlib_decode+0x4f5>
100012ef:	83 f8 0f             	cmp    eax,0xf
100012f2:	7f 07                	jg     100012fb <_ssfn_zlib_decode+0x2f4>
100012f4:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
100012f8:	46                   	inc    esi
100012f9:	eb ce                	jmp    100012c9 <_ssfn_zlib_decode+0x2c2>
100012fb:	83 f8 10             	cmp    eax,0x10
100012fe:	75 22                	jne    10001322 <_ssfn_zlib_decode+0x31b>
10001300:	ba 02 00 00 00       	mov    edx,0x2
10001305:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
1000130c:	e8 f0 fa ff ff       	call   10000e01 <_ssfn__zreceive>
10001311:	85 f6                	test   esi,esi
10001313:	8d 58 03             	lea    ebx,[eax+0x3]
10001316:	0f 84 e0 01 00 00    	je     100014fc <_ssfn_zlib_decode+0x4f5>
1000131c:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10001320:	eb 31                	jmp    10001353 <_ssfn_zlib_decode+0x34c>
10001322:	83 f8 11             	cmp    eax,0x11
10001325:	75 16                	jne    1000133d <_ssfn_zlib_decode+0x336>
10001327:	ba 03 00 00 00       	mov    edx,0x3
1000132c:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10001333:	e8 c9 fa ff ff       	call   10000e01 <_ssfn__zreceive>
10001338:	8d 58 03             	lea    ebx,[eax+0x3]
1000133b:	eb 14                	jmp    10001351 <_ssfn_zlib_decode+0x34a>
1000133d:	ba 07 00 00 00       	mov    edx,0x7
10001342:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10001349:	e8 b3 fa ff ff       	call   10000e01 <_ssfn__zreceive>
1000134e:	8d 58 0b             	lea    ebx,[eax+0xb]
10001351:	31 c0                	xor    eax,eax
10001353:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10001357:	29 f2                	sub    edx,esi
10001359:	39 da                	cmp    edx,ebx
1000135b:	0f 8c 9b 01 00 00    	jl     100014fc <_ssfn_zlib_decode+0x4f5>
10001361:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10001365:	89 d9                	mov    ecx,ebx
10001367:	89 d7                	mov    edi,edx
10001369:	01 de                	add    esi,ebx
1000136b:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000136d:	e9 57 ff ff ff       	jmp    100012c9 <_ssfn_zlib_decode+0x2c2>
10001372:	0f 85 84 01 00 00    	jne    100014fc <_ssfn_zlib_decode+0x4f5>
10001378:	89 e9                	mov    ecx,ebp
1000137a:	8d 54 24 25          	lea    edx,[esp+0x25]
1000137e:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10001385:	e8 a0 f5 ff ff       	call   1000092a <_ssfn__zbuild_huffman>
1000138a:	85 c0                	test   eax,eax
1000138c:	0f 84 6a 01 00 00    	je     100014fc <_ssfn_zlib_decode+0x4f5>
10001392:	8d 44 24 25          	lea    eax,[esp+0x25]
10001396:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
1000139a:	8d 14 28             	lea    edx,[eax+ebp*1]
1000139d:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
100013a4:	e8 81 f5 ff ff       	call   1000092a <_ssfn__zbuild_huffman>
100013a9:	85 c0                	test   eax,eax
100013ab:	0f 84 4b 01 00 00    	je     100014fc <_ssfn_zlib_decode+0x4f5>
100013b1:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
100013b8:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
100013bf:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
100013c6:	e8 50 f4 ff ff       	call   1000081b <_ssfn__zhuffman_decode>
100013cb:	89 c3                	mov    ebx,eax
100013cd:	3d ff 00 00 00       	cmp    eax,0xff
100013d2:	7f 34                	jg     10001408 <_ssfn_zlib_decode+0x401>
100013d4:	85 c0                	test   eax,eax
100013d6:	0f 88 20 01 00 00    	js     100014fc <_ssfn_zlib_decode+0x4f5>
100013dc:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
100013e3:	77 1d                	ja     10001402 <_ssfn_zlib_decode+0x3fb>
100013e5:	89 ea                	mov    edx,ebp
100013e7:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
100013ee:	e8 d8 f4 ff ff       	call   100008cb <_ssfn__zexpand>
100013f3:	85 c0                	test   eax,eax
100013f5:	0f 84 01 01 00 00    	je     100014fc <_ssfn_zlib_decode+0x4f5>
100013fb:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10001402:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10001405:	45                   	inc    ebp
10001406:	eb b0                	jmp    100013b8 <_ssfn_zlib_decode+0x3b1>
10001408:	3d 00 01 00 00       	cmp    eax,0x100
1000140d:	75 0c                	jne    1000141b <_ssfn_zlib_decode+0x414>
1000140f:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10001416:	e9 cd 00 00 00       	jmp    100014e8 <_ssfn_zlib_decode+0x4e1>
1000141b:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10001421:	8b 14 85 e0 5e 00 10 	mov    edx,DWORD PTR [eax*4+0x10005ee0]	10001424: R_386_32	.text
10001428:	8b 1c 85 60 5f 00 10 	mov    ebx,DWORD PTR [eax*4+0x10005f60]	1000142b: R_386_32	.text
1000142f:	85 d2                	test   edx,edx
10001431:	74 0e                	je     10001441 <_ssfn_zlib_decode+0x43a>
10001433:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
1000143a:	e8 c2 f9 ff ff       	call   10000e01 <_ssfn__zreceive>
1000143f:	01 c3                	add    ebx,eax
10001441:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10001448:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
1000144f:	e8 c7 f3 ff ff       	call   1000081b <_ssfn__zhuffman_decode>
10001454:	85 c0                	test   eax,eax
10001456:	0f 88 a0 00 00 00    	js     100014fc <_ssfn_zlib_decode+0x4f5>
1000145c:	8b 14 85 e0 5d 00 10 	mov    edx,DWORD PTR [eax*4+0x10005de0]	1000145f: R_386_32	.text
10001463:	8b 3c 85 60 5e 00 10 	mov    edi,DWORD PTR [eax*4+0x10005e60]	10001466: R_386_32	.text
1000146a:	85 d2                	test   edx,edx
1000146c:	74 0e                	je     1000147c <_ssfn_zlib_decode+0x475>
1000146e:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10001475:	e8 87 f9 ff ff       	call   10000e01 <_ssfn__zreceive>
1000147a:	01 c7                	add    edi,eax
1000147c:	89 e8                	mov    eax,ebp
1000147e:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10001485:	39 f8                	cmp    eax,edi
10001487:	7c 73                	jl     100014fc <_ssfn_zlib_decode+0x4f5>
10001489:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
1000148d:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10001494:	73 19                	jae    100014af <_ssfn_zlib_decode+0x4a8>
10001496:	89 ea                	mov    edx,ebp
10001498:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
1000149f:	e8 27 f4 ff ff       	call   100008cb <_ssfn__zexpand>
100014a4:	85 c0                	test   eax,eax
100014a6:	74 54                	je     100014fc <_ssfn_zlib_decode+0x4f5>
100014a8:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
100014af:	89 ee                	mov    esi,ebp
100014b1:	29 fe                	sub    esi,edi
100014b3:	4f                   	dec    edi
100014b4:	75 19                	jne    100014cf <_ssfn_zlib_decode+0x4c8>
100014b6:	85 db                	test   ebx,ebx
100014b8:	0f 84 fa fe ff ff    	je     100013b8 <_ssfn_zlib_decode+0x3b1>
100014be:	8a 06                	mov    al,BYTE PTR [esi]
100014c0:	01 eb                	add    ebx,ebp
100014c2:	45                   	inc    ebp
100014c3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
100014c6:	39 dd                	cmp    ebp,ebx
100014c8:	75 f8                	jne    100014c2 <_ssfn_zlib_decode+0x4bb>
100014ca:	e9 e9 fe ff ff       	jmp    100013b8 <_ssfn_zlib_decode+0x3b1>
100014cf:	85 db                	test   ebx,ebx
100014d1:	0f 84 e1 fe ff ff    	je     100013b8 <_ssfn_zlib_decode+0x3b1>
100014d7:	8d 04 1e             	lea    eax,[esi+ebx*1]
100014da:	89 ef                	mov    edi,ebp
100014dc:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
100014dd:	39 f0                	cmp    eax,esi
100014df:	75 fb                	jne    100014dc <_ssfn_zlib_decode+0x4d5>
100014e1:	01 dd                	add    ebp,ebx
100014e3:	e9 d0 fe ff ff       	jmp    100013b8 <_ssfn_zlib_decode+0x3b1>
100014e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100014ed:	0f 84 c0 fb ff ff    	je     100010b3 <_ssfn_zlib_decode+0xac>
100014f3:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
100014fa:	eb 14                	jmp    10001510 <_ssfn_zlib_decode+0x509>
100014fc:	83 ec 0c             	sub    esp,0xc
100014ff:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10001506:	e8 fc ff ff ff       	call   10001507 <_ssfn_zlib_decode+0x500>	10001507: R_386_PC32	free
1000150b:	83 c4 10             	add    esp,0x10
1000150e:	31 c0                	xor    eax,eax
10001510:	81 c4 bc 19 00 00    	add    esp,0x19bc
10001516:	5b                   	pop    ebx
10001517:	5e                   	pop    esi
10001518:	5f                   	pop    edi
10001519:	5d                   	pop    ebp
1000151a:	c3                   	ret    

1000151b <ssfn_load>:
1000151b:	55                   	push   ebp
1000151c:	57                   	push   edi
1000151d:	56                   	push   esi
1000151e:	53                   	push   ebx
1000151f:	83 ec 1c             	sub    esp,0x1c
10001522:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10001526:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
1000152a:	85 ff                	test   edi,edi
1000152c:	0f 84 d0 01 00 00    	je     10001702 <ssfn_load+0x1e7>
10001532:	85 f6                	test   esi,esi
10001534:	0f 84 c8 01 00 00    	je     10001702 <ssfn_load+0x1e7>
1000153a:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
1000153d:	0f 85 a8 00 00 00    	jne    100015eb <ssfn_load+0xd0>
10001543:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10001547:	0f 85 9e 00 00 00    	jne    100015eb <ssfn_load+0xd0>
1000154d:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10001551:	74 0a                	je     1000155d <ssfn_load+0x42>
10001553:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10001558:	e9 aa 01 00 00       	jmp    10001707 <ssfn_load+0x1ec>
1000155d:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
10001560:	a8 04                	test   al,0x4
10001562:	75 05                	jne    10001569 <ssfn_load+0x4e>
10001564:	83 c6 0a             	add    esi,0xa
10001567:	eb 08                	jmp    10001571 <ssfn_load+0x56>
10001569:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
1000156d:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10001571:	a8 08                	test   al,0x8
10001573:	74 07                	je     1000157c <ssfn_load+0x61>
10001575:	46                   	inc    esi
10001576:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
1000157a:	eb f7                	jmp    10001573 <ssfn_load+0x58>
1000157c:	a8 10                	test   al,0x10
1000157e:	74 07                	je     10001587 <ssfn_load+0x6c>
10001580:	46                   	inc    esi
10001581:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10001585:	eb f7                	jmp    1000157e <ssfn_load+0x63>
10001587:	83 ec 0c             	sub    esp,0xc
1000158a:	56                   	push   esi
1000158b:	e8 fc ff ff ff       	call   1000158c <ssfn_load+0x71>	1000158c: R_386_PC32	_ssfn_zlib_decode
10001590:	83 c4 10             	add    esp,0x10
10001593:	89 c6                	mov    esi,eax
10001595:	85 c0                	test   eax,eax
10001597:	74 ba                	je     10001553 <ssfn_load+0x38>
10001599:	50                   	push   eax
1000159a:	50                   	push   eax
1000159b:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
100015a1:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
100015a8:	50                   	push   eax
100015a9:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
100015af:	e8 fc ff ff ff       	call   100015b0 <ssfn_load+0x95>	100015b0: R_386_PC32	realloc
100015b4:	83 c4 10             	add    esp,0x10
100015b7:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
100015bd:	85 c0                	test   eax,eax
100015bf:	75 0f                	jne    100015d0 <ssfn_load+0xb5>
100015c1:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
100015cb:	e9 1a 01 00 00       	jmp    100016ea <ssfn_load+0x1cf>
100015d0:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
100015d6:	8d 4a 01             	lea    ecx,[edx+0x1]
100015d9:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
100015df:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
100015e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
100015e5:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
100015eb:	50                   	push   eax
100015ec:	6a 04                	push   0x4
100015ee:	68 99 5c 00 10       	push   0x10005c99	100015ef: R_386_32	.text
100015f3:	56                   	push   esi
100015f4:	e8 fc ff ff ff       	call   100015f5 <ssfn_load+0xda>	100015f5: R_386_PC32	memcmp
100015f9:	83 c4 10             	add    esp,0x10
100015fc:	89 c5                	mov    ebp,eax
100015fe:	85 c0                	test   eax,eax
10001600:	75 29                	jne    1000162b <ssfn_load+0x110>
10001602:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10001605:	01 f3                	add    ebx,esi
10001607:	83 c6 08             	add    esi,0x8
1000160a:	39 de                	cmp    esi,ebx
1000160c:	0f 83 f5 00 00 00    	jae    10001707 <ssfn_load+0x1ec>
10001612:	50                   	push   eax
10001613:	50                   	push   eax
10001614:	56                   	push   esi
10001615:	57                   	push   edi
10001616:	e8 fc ff ff ff       	call   10001617 <ssfn_load+0xfc>	10001617: R_386_PC32	ssfn_load
1000161b:	83 c4 10             	add    esp,0x10
1000161e:	85 c0                	test   eax,eax
10001620:	0f 85 e1 00 00 00    	jne    10001707 <ssfn_load+0x1ec>
10001626:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10001629:	eb df                	jmp    1000160a <ssfn_load+0xef>
1000162b:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
1000162e:	83 e0 0f             	and    eax,0xf
10001631:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10001635:	53                   	push   ebx
10001636:	6a 04                	push   0x4
10001638:	68 9e 5c 00 10       	push   0x10005c9e	10001639: R_386_32	.text
1000163d:	56                   	push   esi
1000163e:	e8 fc ff ff ff       	call   1000163f <ssfn_load+0x124>	1000163f: R_386_PC32	memcmp
10001643:	83 c4 10             	add    esp,0x10
10001646:	89 c5                	mov    ebp,eax
10001648:	85 c0                	test   eax,eax
1000164a:	0f 85 03 ff ff ff    	jne    10001553 <ssfn_load+0x38>
10001650:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10001653:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
10001657:	51                   	push   ecx
10001658:	6a 04                	push   0x4
1000165a:	68 a3 5c 00 10       	push   0x10005ca3	1000165b: R_386_32	.text
1000165f:	50                   	push   eax
10001660:	e8 fc ff ff ff       	call   10001661 <ssfn_load+0x146>	10001661: R_386_PC32	memcmp
10001665:	83 c4 10             	add    esp,0x10
10001668:	85 c0                	test   eax,eax
1000166a:	0f 85 e3 fe ff ff    	jne    10001553 <ssfn_load+0x38>
10001670:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
10001675:	0f 87 d8 fe ff ff    	ja     10001553 <ssfn_load+0x38>
1000167b:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
1000167f:	39 cb                	cmp    ebx,ecx
10001681:	0f 86 cc fe ff ff    	jbe    10001553 <ssfn_load+0x38>
10001687:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
1000168a:	39 c3                	cmp    ebx,eax
1000168c:	0f 86 c1 fe ff ff    	jbe    10001553 <ssfn_load+0x38>
10001692:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
10001695:	0f 86 b8 fe ff ff    	jbe    10001553 <ssfn_load+0x38>
1000169b:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
1000169e:	0f 86 af fe ff ff    	jbe    10001553 <ssfn_load+0x38>
100016a4:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
100016a7:	0f 86 a6 fe ff ff    	jbe    10001553 <ssfn_load+0x38>
100016ad:	39 c1                	cmp    ecx,eax
100016af:	0f 83 9e fe ff ff    	jae    10001553 <ssfn_load+0x38>
100016b5:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
100016ba:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
100016bd:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
100016c3:	40                   	inc    eax
100016c4:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
100016ca:	52                   	push   edx
100016cb:	c1 e0 02             	shl    eax,0x2
100016ce:	52                   	push   edx
100016cf:	50                   	push   eax
100016d0:	ff 33                	push   DWORD PTR [ebx]
100016d2:	e8 fc ff ff ff       	call   100016d3 <ssfn_load+0x1b8>	100016d3: R_386_PC32	realloc
100016d7:	83 c4 10             	add    esp,0x10
100016da:	89 03                	mov    DWORD PTR [ebx],eax
100016dc:	85 c0                	test   eax,eax
100016de:	75 0f                	jne    100016ef <ssfn_load+0x1d4>
100016e0:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
100016ea:	83 cd ff             	or     ebp,0xffffffff
100016ed:	eb 18                	jmp    10001707 <ssfn_load+0x1ec>
100016ef:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
100016f5:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
100016f9:	89 f8                	mov    eax,edi
100016fb:	e8 ad f3 ff ff       	call   10000aad <_ssfn_fc.part.1>
10001700:	eb 05                	jmp    10001707 <ssfn_load+0x1ec>
10001702:	bd fc ff ff ff       	mov    ebp,0xfffffffc
10001707:	83 c4 1c             	add    esp,0x1c
1000170a:	89 e8                	mov    eax,ebp
1000170c:	5b                   	pop    ebx
1000170d:	5e                   	pop    esi
1000170e:	5f                   	pop    edi
1000170f:	5d                   	pop    ebp
10001710:	c3                   	ret    

10001711 <ssfn_free>:
10001711:	57                   	push   edi
10001712:	56                   	push   esi
10001713:	53                   	push   ebx
10001714:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001718:	85 db                	test   ebx,ebx
1000171a:	74 7e                	je     1000179a <ssfn_free+0x89>
1000171c:	89 d8                	mov    eax,ebx
1000171e:	e8 8a f3 ff ff       	call   10000aad <_ssfn_fc.part.1>
10001723:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
1000172a:	74 32                	je     1000175e <ssfn_free+0x4d>
1000172c:	31 f6                	xor    esi,esi
1000172e:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
10001734:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
1000173a:	7e 16                	jle    10001752 <ssfn_free+0x41>
1000173c:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
1000173f:	85 c0                	test   eax,eax
10001741:	74 0c                	je     1000174f <ssfn_free+0x3e>
10001743:	83 ec 0c             	sub    esp,0xc
10001746:	50                   	push   eax
10001747:	e8 fc ff ff ff       	call   10001748 <ssfn_free+0x37>	10001748: R_386_PC32	free
1000174c:	83 c4 10             	add    esp,0x10
1000174f:	46                   	inc    esi
10001750:	eb dc                	jmp    1000172e <ssfn_free+0x1d>
10001752:	83 ec 0c             	sub    esp,0xc
10001755:	50                   	push   eax
10001756:	e8 fc ff ff ff       	call   10001757 <ssfn_free+0x46>	10001757: R_386_PC32	free
1000175b:	83 c4 10             	add    esp,0x10
1000175e:	31 f6                	xor    esi,esi
10001760:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
10001763:	85 c0                	test   eax,eax
10001765:	74 0c                	je     10001773 <ssfn_free+0x62>
10001767:	83 ec 0c             	sub    esp,0xc
1000176a:	50                   	push   eax
1000176b:	e8 fc ff ff ff       	call   1000176c <ssfn_free+0x5b>	1000176c: R_386_PC32	free
10001770:	83 c4 10             	add    esp,0x10
10001773:	46                   	inc    esi
10001774:	83 fe 05             	cmp    esi,0x5
10001777:	75 e7                	jne    10001760 <ssfn_free+0x4f>
10001779:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000177f:	85 c0                	test   eax,eax
10001781:	74 0c                	je     1000178f <ssfn_free+0x7e>
10001783:	83 ec 0c             	sub    esp,0xc
10001786:	50                   	push   eax
10001787:	e8 fc ff ff ff       	call   10001788 <ssfn_free+0x77>	10001788: R_386_PC32	free
1000178c:	83 c4 10             	add    esp,0x10
1000178f:	b9 72 3d 00 00       	mov    ecx,0x3d72
10001794:	31 c0                	xor    eax,eax
10001796:	89 df                	mov    edi,ebx
10001798:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000179a:	5b                   	pop    ebx
1000179b:	5e                   	pop    esi
1000179c:	5f                   	pop    edi
1000179d:	c3                   	ret    

1000179e <ssfn_mem>:
1000179e:	55                   	push   ebp
1000179f:	31 c0                	xor    eax,eax
100017a1:	57                   	push   edi
100017a2:	56                   	push   esi
100017a3:	53                   	push   ebx
100017a4:	83 ec 08             	sub    esp,0x8
100017a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100017ab:	85 d2                	test   edx,edx
100017ad:	0f 84 8e 00 00 00    	je     10001841 <ssfn_mem+0xa3>
100017b3:	b8 c8 f5 00 00       	mov    eax,0xf5c8
100017b8:	31 c9                	xor    ecx,ecx
100017ba:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
100017c1:	41                   	inc    ecx
100017c2:	8d 04 98             	lea    eax,[eax+ebx*4]
100017c5:	83 f9 05             	cmp    ecx,0x5
100017c8:	75 f0                	jne    100017ba <ssfn_mem+0x1c>
100017ca:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
100017d0:	31 c9                	xor    ecx,ecx
100017d2:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
100017d9:	89 34 24             	mov    DWORD PTR [esp],esi
100017dc:	85 f6                	test   esi,esi
100017de:	74 48                	je     10001828 <ssfn_mem+0x8a>
100017e0:	31 db                	xor    ebx,ebx
100017e2:	8b 34 24             	mov    esi,DWORD PTR [esp]
100017e5:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
100017e8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
100017ec:	85 ff                	test   edi,edi
100017ee:	74 2a                	je     1000181a <ssfn_mem+0x7c>
100017f0:	31 f6                	xor    esi,esi
100017f2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
100017f6:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
100017f9:	85 ed                	test   ebp,ebp
100017fb:	74 0f                	je     1000180c <ssfn_mem+0x6e>
100017fd:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
10001801:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
10001805:	0f af fd             	imul   edi,ebp
10001808:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
1000180c:	46                   	inc    esi
1000180d:	81 fe 00 01 00 00    	cmp    esi,0x100
10001813:	75 dd                	jne    100017f2 <ssfn_mem+0x54>
10001815:	05 00 04 00 00       	add    eax,0x400
1000181a:	43                   	inc    ebx
1000181b:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001821:	75 bf                	jne    100017e2 <ssfn_mem+0x44>
10001823:	05 00 04 00 00       	add    eax,0x400
10001828:	41                   	inc    ecx
10001829:	83 f9 11             	cmp    ecx,0x11
1000182c:	75 a4                	jne    100017d2 <ssfn_mem+0x34>
1000182e:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
10001835:	74 0a                	je     10001841 <ssfn_mem+0xa3>
10001837:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
1000183d:	01 d2                	add    edx,edx
1000183f:	01 d0                	add    eax,edx
10001841:	83 c4 08             	add    esp,0x8
10001844:	5b                   	pop    ebx
10001845:	5e                   	pop    esi
10001846:	5f                   	pop    edi
10001847:	5d                   	pop    ebp
10001848:	c3                   	ret    

10001849 <ssfn_select>:
10001849:	55                   	push   ebp
1000184a:	57                   	push   edi
1000184b:	56                   	push   esi
1000184c:	53                   	push   ebx
1000184d:	83 ec 1c             	sub    esp,0x1c
10001850:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10001854:	85 db                	test   ebx,ebx
10001856:	75 0a                	jne    10001862 <ssfn_select+0x19>
10001858:	be fc ff ff ff       	mov    esi,0xfffffffc
1000185d:	e9 13 01 00 00       	jmp    10001975 <ssfn_select+0x12c>
10001862:	89 d8                	mov    eax,ebx
10001864:	e8 44 f2 ff ff       	call   10000aad <_ssfn_fc.part.1>
10001869:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
1000186d:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
10001873:	0f 85 e9 00 00 00    	jne    10001962 <ssfn_select+0x119>
10001879:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000187d:	83 e8 08             	sub    eax,0x8
10001880:	3d b8 00 00 00       	cmp    eax,0xb8
10001885:	0f 87 de 00 00 00    	ja     10001969 <ssfn_select+0x120>
1000188b:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
10001893:	75 76                	jne    1000190b <ssfn_select+0xc2>
10001895:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
1000189a:	74 bc                	je     10001858 <ssfn_select+0xf>
1000189c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100018a0:	80 38 00             	cmp    BYTE PTR [eax],0x0
100018a3:	74 b3                	je     10001858 <ssfn_select+0xf>
100018a5:	31 ed                	xor    ebp,ebp
100018a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100018ab:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
100018af:	74 03                	je     100018b4 <ssfn_select+0x6b>
100018b1:	45                   	inc    ebp
100018b2:	eb f3                	jmp    100018a7 <ssfn_select+0x5e>
100018b4:	8d 43 14             	lea    eax,[ebx+0x14]
100018b7:	89 df                	mov    edi,ebx
100018b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100018bd:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
100018c3:	31 d2                	xor    edx,edx
100018c5:	89 04 24             	mov    DWORD PTR [esp],eax
100018c8:	39 14 24             	cmp    DWORD PTR [esp],edx
100018cb:	7e 33                	jle    10001900 <ssfn_select+0xb7>
100018cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100018d1:	8b 07                	mov    eax,DWORD PTR [edi]
100018d3:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
100018d6:	50                   	push   eax
100018d7:	8d 41 20             	lea    eax,[ecx+0x20]
100018da:	55                   	push   ebp
100018db:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100018df:	50                   	push   eax
100018e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
100018e4:	e8 fc ff ff ff       	call   100018e5 <ssfn_select+0x9c>	100018e5: R_386_PC32	memcmp
100018e9:	83 c4 10             	add    esp,0x10
100018ec:	85 c0                	test   eax,eax
100018ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100018f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100018f6:	75 05                	jne    100018fd <ssfn_select+0xb4>
100018f8:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
100018fb:	eb 34                	jmp    10001931 <ssfn_select+0xe8>
100018fd:	42                   	inc    edx
100018fe:	eb c8                	jmp    100018c8 <ssfn_select+0x7f>
10001900:	83 c7 04             	add    edi,0x4
10001903:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10001907:	75 b4                	jne    100018bd <ssfn_select+0x74>
10001909:	eb 65                	jmp    10001970 <ssfn_select+0x127>
1000190b:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
10001913:	74 15                	je     1000192a <ssfn_select+0xe1>
10001915:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
1000191a:	7f 54                	jg     10001970 <ssfn_select+0x127>
1000191c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001920:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
10001928:	74 46                	je     10001970 <ssfn_select+0x127>
1000192a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10001931:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001935:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
1000193c:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
10001942:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
1000194c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001950:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
10001956:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000195a:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
10001960:	eb 13                	jmp    10001975 <ssfn_select+0x12c>
10001962:	be fb ff ff ff       	mov    esi,0xfffffffb
10001967:	eb 0c                	jmp    10001975 <ssfn_select+0x12c>
10001969:	be fa ff ff ff       	mov    esi,0xfffffffa
1000196e:	eb 05                	jmp    10001975 <ssfn_select+0x12c>
10001970:	be fd ff ff ff       	mov    esi,0xfffffffd
10001975:	83 c4 1c             	add    esp,0x1c
10001978:	89 f0                	mov    eax,esi
1000197a:	5b                   	pop    ebx
1000197b:	5e                   	pop    esi
1000197c:	5f                   	pop    edi
1000197d:	5d                   	pop    ebp
1000197e:	c3                   	ret    

1000197f <ssfn_render>:
1000197f:	55                   	push   ebp
10001980:	57                   	push   edi
10001981:	56                   	push   esi
10001982:	53                   	push   ebx
10001983:	81 ec dc 05 01 00    	sub    esp,0x105dc
10001989:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
10001990:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
1000199b:	85 ed                	test   ebp,ebp
1000199d:	0f 94 c2             	sete   dl
100019a0:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
100019a8:	0f 94 c0             	sete   al
100019ab:	08 c2                	or     dl,al
100019ad:	74 0a                	je     100019b9 <ssfn_render+0x3a>
100019af:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
100019b4:	e9 14 1e 00 00       	jmp    100037cd <ssfn_render+0x1e4e>
100019b9:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
100019c0:	31 c9                	xor    ecx,ecx
100019c2:	8a 00                	mov    al,BYTE PTR [eax]
100019c4:	84 c0                	test   al,al
100019c6:	0f 84 01 1e 00 00    	je     100037cd <ssfn_render+0x1e4e>
100019cc:	3c 0d                	cmp    al,0xd
100019ce:	75 0f                	jne    100019df <ssfn_render+0x60>
100019d0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100019d7:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100019dd:	eb 31                	jmp    10001a10 <ssfn_render+0x91>
100019df:	3c 0a                	cmp    al,0xa
100019e1:	75 37                	jne    10001a1a <ssfn_render+0x9b>
100019e3:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100019ea:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100019f0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
100019f3:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
100019f9:	85 c0                	test   eax,eax
100019fb:	75 06                	jne    10001a03 <ssfn_render+0x84>
100019fd:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
10001a03:	01 d0                	add    eax,edx
10001a05:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10001a0c:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10001a10:	b9 01 00 00 00       	mov    ecx,0x1
10001a15:	e9 b3 1d 00 00       	jmp    100037cd <ssfn_render+0x1e4e>
10001a1a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001a1d:	85 c0                	test   eax,eax
10001a1f:	74 3e                	je     10001a5f <ssfn_render+0xe0>
10001a21:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10001a24:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
10001a2b:	56                   	push   esi
10001a2c:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001a33:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001a3a:	e8 a0 f4 ff ff       	call   10000edf <_ssfn_c>
10001a3f:	5b                   	pop    ebx
10001a40:	85 c0                	test   eax,eax
10001a42:	0f 85 71 02 00 00    	jne    10001cb9 <ssfn_render+0x33a>
10001a48:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
10001a4e:	81 e2 00 01 00 00    	and    edx,0x100
10001a54:	0f 84 fd 01 00 00    	je     10001c57 <ssfn_render+0x2d8>
10001a5a:	e9 1d 02 00 00       	jmp    10001c7c <ssfn_render+0x2fd>
10001a5f:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
10001a65:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
10001a6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001a70:	3d fd 00 00 00       	cmp    eax,0xfd
10001a75:	7f 08                	jg     10001a7f <ssfn_render+0x100>
10001a77:	89 c3                	mov    ebx,eax
10001a79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001a7d:	eb 3f                	jmp    10001abe <ssfn_render+0x13f>
10001a7f:	31 db                	xor    ebx,ebx
10001a81:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
10001a89:	eb 33                	jmp    10001abe <ssfn_render+0x13f>
10001a8b:	85 c0                	test   eax,eax
10001a8d:	0f 84 64 01 00 00    	je     10001bf7 <ssfn_render+0x278>
10001a93:	43                   	inc    ebx
10001a94:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
10001a98:	7e 28                	jle    10001ac2 <ssfn_render+0x143>
10001a9a:	85 c0                	test   eax,eax
10001a9c:	0f 85 17 02 00 00    	jne    10001cb9 <ssfn_render+0x33a>
10001aa2:	31 db                	xor    ebx,ebx
10001aa4:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
10001aac:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
10001ab4:	74 92                	je     10001a48 <ssfn_render+0xc9>
10001ab6:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
10001abe:	31 c0                	xor    eax,eax
10001ac0:	eb d2                	jmp    10001a94 <ssfn_render+0x115>
10001ac2:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
10001ac6:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
10001acd:	74 bc                	je     10001a8b <ssfn_render+0x10c>
10001acf:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001ada:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001ae1:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
10001ae8:	7e 50                	jle    10001b3a <ssfn_render+0x1bb>
10001aea:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
10001aed:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
10001af1:	c1 fa 04             	sar    edx,0x4
10001af4:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
10001afa:	80 e2 03             	and    dl,0x3
10001afd:	75 32                	jne    10001b31 <ssfn_render+0x1b2>
10001aff:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
10001b03:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001b09:	75 26                	jne    10001b31 <ssfn_render+0x1b2>
10001b0b:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
10001b12:	50                   	push   eax
10001b13:	89 f8                	mov    eax,edi
10001b15:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001b1c:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001b23:	e8 b7 f3 ff ff       	call   10000edf <_ssfn_c>
10001b28:	59                   	pop    ecx
10001b29:	85 c0                	test   eax,eax
10001b2b:	0f 85 04 01 00 00    	jne    10001c35 <ssfn_render+0x2b6>
10001b31:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001b38:	eb a0                	jmp    10001ada <ssfn_render+0x15b>
10001b3a:	85 c0                	test   eax,eax
10001b3c:	0f 85 51 ff ff ff    	jne    10001a93 <ssfn_render+0x114>
10001b42:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001b4d:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001b54:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001b5b:	0f 8e f9 1b 00 00    	jle    1000375a <ssfn_render+0x1ddb>
10001b61:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001b64:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
10001b68:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001b6e:	74 09                	je     10001b79 <ssfn_render+0x1fa>
10001b70:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001b77:	eb d4                	jmp    10001b4d <ssfn_render+0x1ce>
10001b79:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001b80:	57                   	push   edi
10001b81:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001b88:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001b8f:	e8 4b f3 ff ff       	call   10000edf <_ssfn_c>
10001b94:	5a                   	pop    edx
10001b95:	85 c0                	test   eax,eax
10001b97:	74 d7                	je     10001b70 <ssfn_render+0x1f1>
10001b99:	e9 97 00 00 00       	jmp    10001c35 <ssfn_render+0x2b6>
10001b9e:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001ba1:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
10001ba5:	c1 fa 04             	sar    edx,0x4
10001ba8:	31 ca                	xor    edx,ecx
10001baa:	80 e2 03             	and    dl,0x3
10001bad:	0f 84 b7 1b 00 00    	je     1000376a <ssfn_render+0x1deb>
10001bb3:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001bba:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001bc1:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
10001bc7:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001bce:	7f ce                	jg     10001b9e <ssfn_render+0x21f>
10001bd0:	83 e1 03             	and    ecx,0x3
10001bd3:	83 f9 03             	cmp    ecx,0x3
10001bd6:	75 1f                	jne    10001bf7 <ssfn_render+0x278>
10001bd8:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001be3:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001bea:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001bf1:	0f 8f 9c 1b 00 00    	jg     10003793 <ssfn_render+0x1e14>
10001bf7:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001c02:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001c09:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001c10:	7e 3e                	jle    10001c50 <ssfn_render+0x2d1>
10001c12:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001c15:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001c1c:	57                   	push   edi
10001c1d:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001c24:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001c2b:	e8 af f2 ff ff       	call   10000edf <_ssfn_c>
10001c30:	5a                   	pop    edx
10001c31:	85 c0                	test   eax,eax
10001c33:	74 12                	je     10001c47 <ssfn_render+0x2c8>
10001c35:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001c3c:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
10001c3f:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
10001c42:	e9 4c fe ff ff       	jmp    10001a93 <ssfn_render+0x114>
10001c47:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001c4e:	eb b2                	jmp    10001c02 <ssfn_render+0x283>
10001c50:	31 c0                	xor    eax,eax
10001c52:	e9 3c fe ff ff       	jmp    10001a93 <ssfn_render+0x114>
10001c57:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
10001c5d:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
10001c68:	81 fb fd 00 00 00    	cmp    ebx,0xfd
10001c6e:	7f 16                	jg     10001c86 <ssfn_render+0x307>
10001c70:	89 da                	mov    edx,ebx
10001c72:	31 c0                	xor    eax,eax
10001c74:	39 da                	cmp    edx,ebx
10001c76:	7e 15                	jle    10001c8d <ssfn_render+0x30e>
10001c78:	85 c0                	test   eax,eax
10001c7a:	75 3d                	jne    10001cb9 <ssfn_render+0x33a>
10001c7c:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
10001c81:	e9 47 1b 00 00       	jmp    100037cd <ssfn_render+0x1e4e>
10001c86:	bb 04 00 00 00       	mov    ebx,0x4
10001c8b:	eb e5                	jmp    10001c72 <ssfn_render+0x2f3>
10001c8d:	85 c0                	test   eax,eax
10001c8f:	75 28                	jne    10001cb9 <ssfn_render+0x33a>
10001c91:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
10001c99:	74 1b                	je     10001cb6 <ssfn_render+0x337>
10001c9b:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
10001c9f:	8b 09                	mov    ecx,DWORD PTR [ecx]
10001ca1:	85 c9                	test   ecx,ecx
10001ca3:	74 11                	je     10001cb6 <ssfn_render+0x337>
10001ca5:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
10001ca8:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
10001cac:	78 08                	js     10001cb6 <ssfn_render+0x337>
10001cae:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
10001cb1:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
10001cb4:	01 c8                	add    eax,ecx
10001cb6:	42                   	inc    edx
10001cb7:	eb bb                	jmp    10001c74 <ssfn_render+0x2f5>
10001cb9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001cbc:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
10001cc1:	85 d2                	test   edx,edx
10001cc3:	0f 84 04 1b 00 00    	je     100037cd <ssfn_render+0x1e4e>
10001cc9:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
10001ccd:	0f 84 fa 1a 00 00    	je     100037cd <ssfn_render+0x1e4e>
10001cd3:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
10001cd9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001cdd:	85 ff                	test   edi,edi
10001cdf:	0f 84 e8 1a 00 00    	je     100037cd <ssfn_render+0x1e4e>
10001ce5:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
10001cec:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10001cf0:	c1 ef 10             	shr    edi,0x10
10001cf3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10001cf7:	83 ff 10             	cmp    edi,0x10
10001cfa:	0f 87 af fc ff ff    	ja     100019af <ssfn_render+0x30>
10001d00:	8d 70 06             	lea    esi,[eax+0x6]
10001d03:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
10001d09:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10001d0d:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
10001d13:	89 f7                	mov    edi,esi
10001d15:	81 e7 00 02 00 00    	and    edi,0x200
10001d1b:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10001d1f:	75 34                	jne    10001d55 <ssfn_render+0x3d6>
10001d21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001d25:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
10001d2c:	85 c9                	test   ecx,ecx
10001d2e:	74 25                	je     10001d55 <ssfn_render+0x3d6>
10001d30:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001d34:	0f b6 ff             	movzx  edi,bh
10001d37:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
10001d3a:	85 c9                	test   ecx,ecx
10001d3c:	74 17                	je     10001d55 <ssfn_render+0x3d6>
10001d3e:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
10001d43:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
10001d46:	85 c9                	test   ecx,ecx
10001d48:	74 0b                	je     10001d55 <ssfn_render+0x3d6>
10001d4a:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
10001d50:	e9 25 0d 00 00       	jmp    10002a7a <ssfn_render+0x10fb>
10001d55:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
10001d59:	f7 c6 40 00 00 00    	test   esi,0x40
10001d5f:	75 1a                	jne    10001d7b <ssfn_render+0x3fc>
10001d61:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
10001d65:	7e 10                	jle    10001d77 <ssfn_render+0x3f8>
10001d67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001d6b:	83 c7 04             	add    edi,0x4
10001d6e:	83 e7 fc             	and    edi,0xfffffffc
10001d71:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001d75:	eb 04                	jmp    10001d7b <ssfn_render+0x3fc>
10001d77:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10001d7b:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
10001d80:	f7 c6 02 00 00 00    	test   esi,0x2
10001d86:	74 14                	je     10001d9c <ssfn_render+0x41d>
10001d88:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
10001d8b:	c0 eb 05             	shr    bl,0x5
10001d8e:	89 df                	mov    edi,ebx
10001d90:	83 f7 01             	xor    edi,0x1
10001d93:	83 e7 01             	and    edi,0x1
10001d96:	89 fb                	mov    ebx,edi
10001d98:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
10001d9c:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
10001da1:	83 e6 01             	and    esi,0x1
10001da4:	74 10                	je     10001db6 <ssfn_render+0x437>
10001da6:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
10001daa:	75 0a                	jne    10001db6 <ssfn_render+0x437>
10001dac:	8d 51 40             	lea    edx,[ecx+0x40]
10001daf:	c1 fa 06             	sar    edx,0x6
10001db2:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
10001db6:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
10001dba:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001dbf:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10001dc3:	99                   	cdq    
10001dc4:	f7 f9                	idiv   ecx
10001dc6:	89 c1                	mov    ecx,eax
10001dc8:	31 c0                	xor    eax,eax
10001dca:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001dcf:	74 0c                	je     10001ddd <ssfn_render+0x45e>
10001dd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001dd5:	be 04 00 00 00       	mov    esi,0x4
10001dda:	99                   	cdq    
10001ddb:	f7 fe                	idiv   esi
10001ddd:	01 c8                	add    eax,ecx
10001ddf:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
10001de4:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
10001de9:	01 f0                	add    eax,esi
10001deb:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
10001def:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001df7:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
10001dfc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001e00:	3d ff f4 00 00       	cmp    eax,0xf4ff
10001e05:	0f 8f c2 19 00 00    	jg     100037cd <ssfn_render+0x1e4e>
10001e0b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
10001e10:	0f 85 f0 00 00 00    	jne    10001f06 <ssfn_render+0x587>
10001e16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001e1a:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
10001e1e:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
10001e25:	75 2f                	jne    10001e56 <ssfn_render+0x4d7>
10001e27:	83 ec 0c             	sub    esp,0xc
10001e2a:	68 00 04 00 00       	push   0x400
10001e2f:	e8 fc ff ff ff       	call   10001e30 <ssfn_render+0x4b1>	10001e30: R_386_PC32	malloc
10001e34:	83 c4 10             	add    esp,0x10
10001e37:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
10001e3d:	85 c0                	test   eax,eax
10001e3f:	75 08                	jne    10001e49 <ssfn_render+0x4ca>
10001e41:	83 c9 ff             	or     ecx,0xffffffff
10001e44:	e9 84 19 00 00       	jmp    100037cd <ssfn_render+0x1e4e>
10001e49:	89 c7                	mov    edi,eax
10001e4b:	b9 00 01 00 00       	mov    ecx,0x100
10001e50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001e54:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10001e56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001e5a:	0f b6 dc             	movzx  ebx,ah
10001e5d:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
10001e63:	8d 1c 98             	lea    ebx,[eax+ebx*4]
10001e66:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10001e69:	75 3a                	jne    10001ea5 <ssfn_render+0x526>
10001e6b:	83 ec 0c             	sub    esp,0xc
10001e6e:	68 00 04 00 00       	push   0x400
10001e73:	e8 fc ff ff ff       	call   10001e74 <ssfn_render+0x4f5>	10001e74: R_386_PC32	malloc
10001e78:	89 03                	mov    DWORD PTR [ebx],eax
10001e7a:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10001e81:	83 c4 10             	add    esp,0x10
10001e84:	89 c2                	mov    edx,eax
10001e86:	0f b6 c4             	movzx  eax,ah
10001e89:	c1 ea 10             	shr    edx,0x10
10001e8c:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001e93:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
10001e96:	85 d2                	test   edx,edx
10001e98:	74 a7                	je     10001e41 <ssfn_render+0x4c2>
10001e9a:	b9 00 01 00 00       	mov    ecx,0x100
10001e9f:	31 c0                	xor    eax,eax
10001ea1:	89 d7                	mov    edi,edx
10001ea3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10001ea5:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
10001eac:	83 ec 0c             	sub    esp,0xc
10001eaf:	0f b6 cc             	movzx  ecx,ah
10001eb2:	89 c2                	mov    edx,eax
10001eb4:	0f b6 c0             	movzx  eax,al
10001eb7:	c1 ea 10             	shr    edx,0x10
10001eba:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001ec1:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
10001ec4:	8d 1c 82             	lea    ebx,[edx+eax*4]
10001ec7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001ecb:	83 c0 08             	add    eax,0x8
10001ece:	50                   	push   eax
10001ecf:	e8 fc ff ff ff       	call   10001ed0 <ssfn_render+0x551>	10001ed0: R_386_PC32	malloc
10001ed4:	89 03                	mov    DWORD PTR [ebx],eax
10001ed6:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001edc:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10001ee3:	83 c4 10             	add    esp,0x10
10001ee6:	89 c2                	mov    edx,eax
10001ee8:	0f b6 cc             	movzx  ecx,ah
10001eeb:	c1 ea 10             	shr    edx,0x10
10001eee:	0f b6 c0             	movzx  eax,al
10001ef1:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001ef8:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
10001efb:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
10001eff:	75 0e                	jne    10001f0f <ssfn_render+0x590>
10001f01:	e9 3b ff ff ff       	jmp    10001e41 <ssfn_render+0x4c2>
10001f06:	8d 45 1c             	lea    eax,[ebp+0x1c]
10001f09:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001f0f:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10001f15:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10001f19:	74 2a                	je     10001f45 <ssfn_render+0x5c6>
10001f1b:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001f20:	74 23                	je     10001f45 <ssfn_render+0x5c6>
10001f22:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001f25:	bb 04 00 00 00       	mov    ebx,0x4
10001f2a:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10001f2e:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10001f32:	89 cf                	mov    edi,ecx
10001f34:	29 c7                	sub    edi,eax
10001f36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f3a:	0f af c7             	imul   eax,edi
10001f3d:	99                   	cdq    
10001f3e:	f7 fb                	idiv   ebx
10001f40:	99                   	cdq    
10001f41:	f7 f9                	idiv   ecx
10001f43:	eb 02                	jmp    10001f47 <ssfn_render+0x5c8>
10001f45:	31 c0                	xor    eax,eax
10001f47:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001f4d:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10001f51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001f55:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
10001f5d:	66 89 32             	mov    WORD PTR [edx],si
10001f60:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
10001f65:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001f6b:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
10001f6e:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001f74:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001f7a:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
10001f7d:	01 c3                	add    ebx,eax
10001f7f:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
10001f82:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001f88:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001f8e:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
10001f91:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
10001f94:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
10001f9a:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001fa0:	8a 12                	mov    dl,BYTE PTR [edx]
10001fa2:	83 e2 3f             	and    edx,0x3f
10001fa5:	01 d0                	add    eax,edx
10001fa7:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
10001faa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10001fae:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001fb4:	8d 50 08             	lea    edx,[eax+0x8]
10001fb7:	b0 ff                	mov    al,0xff
10001fb9:	89 d7                	mov    edi,edx
10001fbb:	f3 aa                	rep stos BYTE PTR es:[edi],al
10001fbd:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001fc3:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
10001fc7:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001fcd:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
10001fd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001fd5:	c1 e0 04             	shl    eax,0x4
10001fd8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10001fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001fe0:	c1 e0 04             	shl    eax,0x4
10001fe3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10001fe7:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001fed:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
10001ff1:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
10001ff5:	0f 8e 4d 0a 00 00    	jle    10002a48 <ssfn_render+0x10c9>
10001ffb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001fff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002003:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
10002006:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10002009:	8a 12                	mov    dl,BYTE PTR [edx]
1000200b:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
1000200f:	83 e2 40             	and    edx,0x40
10002012:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
10002016:	88 c2                	mov    dl,al
10002018:	21 ca                	and    edx,ecx
1000201a:	fe c2                	inc    dl
1000201c:	75 14                	jne    10002032 <ssfn_render+0x6b3>
1000201e:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
10002023:	19 c0                	sbb    eax,eax
10002025:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
10002029:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000202d:	e9 09 0a 00 00       	jmp    10002a3b <ssfn_render+0x10bc>
10002032:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10002036:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10002039:	c1 e0 04             	shl    eax,0x4
1000203c:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
10002040:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002045:	99                   	cdq    
10002046:	f7 fe                	idiv   esi
10002048:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000204c:	0f b6 c1             	movzx  eax,cl
1000204f:	c1 e0 04             	shl    eax,0x4
10002052:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002057:	99                   	cdq    
10002058:	f7 fe                	idiv   esi
1000205a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000205e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002062:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
10002066:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
1000206a:	c1 e2 10             	shl    edx,0x10
1000206d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
10002072:	74 0e                	je     10002082 <ssfn_render+0x703>
10002074:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002078:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
1000207d:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
10002080:	eb 0c                	jmp    1000208e <ssfn_render+0x70f>
10002082:	c1 e0 08             	shl    eax,0x8
10002085:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
1000208a:	09 d0                	or     eax,edx
1000208c:	09 c3                	or     ebx,eax
1000208e:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
10002091:	8a 01                	mov    al,BYTE PTR [ecx]
10002093:	84 c0                	test   al,al
10002095:	0f 88 17 05 00 00    	js     100025b2 <ssfn_render+0xc33>
1000209b:	89 c7                	mov    edi,eax
1000209d:	83 e7 3f             	and    edi,0x3f
100020a0:	a8 40                	test   al,0x40
100020a2:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
100020a6:	74 10                	je     100020b8 <ssfn_render+0x739>
100020a8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
100020ac:	89 f8                	mov    eax,edi
100020ae:	41                   	inc    ecx
100020af:	c1 e0 08             	shl    eax,0x8
100020b2:	09 c2                	or     edx,eax
100020b4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
100020b8:	8d 41 01             	lea    eax,[ecx+0x1]
100020bb:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
100020c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100020c9:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100020d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100020d8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
100020dc:	83 c0 04             	add    eax,0x4
100020df:	c1 f8 02             	sar    eax,0x2
100020e2:	01 c7                	add    edi,eax
100020e4:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
100020eb:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
100020ef:	0f 8f d7 01 00 00    	jg     100022cc <ssfn_render+0x94d>
100020f5:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100020f8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
100020fc:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10002100:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10002104:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002108:	0f b6 07             	movzx  eax,BYTE PTR [edi]
1000210b:	c1 e0 04             	shl    eax,0x4
1000210e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002113:	99                   	cdq    
10002114:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002118:	01 c6                	add    esi,eax
1000211a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000211e:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10002122:	c1 e0 04             	shl    eax,0x4
10002125:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000212a:	99                   	cdq    
1000212b:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
1000212f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10002133:	01 c3                	add    ebx,eax
10002135:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10002139:	89 c8                	mov    eax,ecx
1000213b:	01 c9                	add    ecx,ecx
1000213d:	c1 f8 02             	sar    eax,0x2
10002140:	83 e1 06             	and    ecx,0x6
10002143:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10002147:	d3 f8                	sar    eax,cl
10002149:	83 e0 03             	and    eax,0x3
1000214c:	89 c1                	mov    ecx,eax
1000214e:	83 f8 02             	cmp    eax,0x2
10002151:	74 4a                	je     1000219d <ssfn_render+0x81e>
10002153:	83 f8 03             	cmp    eax,0x3
10002156:	0f 84 e4 00 00 00    	je     10002240 <ssfn_render+0x8c1>
1000215c:	49                   	dec    ecx
1000215d:	74 20                	je     1000217f <ssfn_render+0x800>
1000215f:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10002165:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
1000216b:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10002171:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10002177:	83 c7 02             	add    edi,0x2
1000217a:	e9 41 01 00 00       	jmp    100022c0 <ssfn_render+0x941>
1000217f:	83 c7 02             	add    edi,0x2
10002182:	50                   	push   eax
10002183:	50                   	push   eax
10002184:	89 e8                	mov    eax,ebp
10002186:	53                   	push   ebx
10002187:	56                   	push   esi
10002188:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
1000218c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10002190:	e8 9c e9 ff ff       	call   10000b31 <_ssfn_l>
10002195:	83 c4 10             	add    esp,0x10
10002198:	e9 23 01 00 00       	jmp    100022c0 <ssfn_render+0x941>
1000219d:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
100021a1:	83 c7 04             	add    edi,0x4
100021a4:	c1 e0 04             	shl    eax,0x4
100021a7:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100021ac:	99                   	cdq    
100021ad:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
100021b1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100021b5:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
100021b9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100021bd:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
100021c1:	c1 e0 04             	shl    eax,0x4
100021c4:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100021c9:	99                   	cdq    
100021ca:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
100021ce:	83 ec 0c             	sub    esp,0xc
100021d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100021d5:	6a 00                	push   0x0
100021d7:	53                   	push   ebx
100021d8:	56                   	push   esi
100021d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100021dd:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
100021e1:	99                   	cdq    
100021e2:	f7 f9                	idiv   ecx
100021e4:	01 d8                	add    eax,ebx
100021e6:	50                   	push   eax
100021e7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100021eb:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
100021ef:	99                   	cdq    
100021f0:	f7 f9                	idiv   ecx
100021f2:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
100021f6:	50                   	push   eax
100021f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100021fb:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
100021ff:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10002205:	99                   	cdq    
10002206:	f7 f9                	idiv   ecx
10002208:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
1000220e:	50                   	push   eax
1000220f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10002213:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10002219:	99                   	cdq    
1000221a:	f7 f9                	idiv   ecx
1000221c:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10002222:	50                   	push   eax
10002223:	89 e8                	mov    eax,ebp
10002225:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
1000222b:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10002231:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10002235:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10002239:	e8 04 ea ff ff       	call   10000c42 <_ssfn_b>
1000223e:	eb 7d                	jmp    100022bd <ssfn_render+0x93e>
10002240:	83 ec 0c             	sub    esp,0xc
10002243:	83 c7 06             	add    edi,0x6
10002246:	6a 00                	push   0x0
10002248:	53                   	push   ebx
10002249:	56                   	push   esi
1000224a:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
1000224e:	c1 e0 04             	shl    eax,0x4
10002251:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10002256:	99                   	cdq    
10002257:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
1000225b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
1000225f:	50                   	push   eax
10002260:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10002264:	c1 e0 04             	shl    eax,0x4
10002267:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
1000226c:	99                   	cdq    
1000226d:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10002271:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10002275:	50                   	push   eax
10002276:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
1000227a:	c1 e0 04             	shl    eax,0x4
1000227d:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10002282:	99                   	cdq    
10002283:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10002287:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
1000228b:	50                   	push   eax
1000228c:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10002290:	c1 e0 04             	shl    eax,0x4
10002293:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10002298:	99                   	cdq    
10002299:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
1000229d:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
100022a1:	50                   	push   eax
100022a2:	89 e8                	mov    eax,ebp
100022a4:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
100022aa:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
100022b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
100022b4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
100022b8:	e8 85 e9 ff ff       	call   10000c42 <_ssfn_b>
100022bd:	83 c4 30             	add    esp,0x30
100022c0:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100022c7:	e9 18 fe ff ff       	jmp    100020e4 <ssfn_render+0x765>
100022cc:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
100022d2:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
100022d8:	75 0e                	jne    100022e8 <ssfn_render+0x969>
100022da:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
100022e0:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
100022e6:	74 2e                	je     10002316 <ssfn_render+0x997>
100022e8:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
100022ee:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
100022f4:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
100022f8:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
100022fe:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10002304:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
1000230a:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
1000230f:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10002316:	b3 fe                	mov    bl,0xfe
10002318:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
1000231f:	0f 8e 16 07 00 00    	jle    10002a3b <ssfn_render+0x10bc>
10002325:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
1000232d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10002335:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
1000233d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10002345:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
1000234d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002351:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10002355:	0f 8d de 06 00 00    	jge    10002a39 <ssfn_render+0x10ba>
1000235b:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10002361:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000236c:	83 e8 03             	sub    eax,0x3
1000236f:	31 f6                	xor    esi,esi
10002371:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10002375:	89 f8                	mov    eax,edi
10002377:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
1000237b:	c1 f8 02             	sar    eax,0x2
1000237e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10002382:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10002389:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
1000238d:	0f 8e 16 01 00 00    	jle    100024a9 <ssfn_render+0xb2a>
10002393:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10002399:	8d 47 01             	lea    eax,[edi+0x1]
1000239c:	01 c0                	add    eax,eax
1000239e:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
100023a2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
100023a6:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
100023ab:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
100023af:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
100023b3:	7d 0c                	jge    100023c1 <ssfn_render+0xa42>
100023b5:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
100023b9:	0f 8f db 00 00 00    	jg     1000249a <ssfn_render+0xb1b>
100023bf:	eb 0a                	jmp    100023cb <ssfn_render+0xa4c>
100023c1:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
100023c5:	0f 8e cf 00 00 00    	jle    1000249a <ssfn_render+0xb1b>
100023cb:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
100023d0:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
100023d4:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
100023d9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
100023dd:	89 d8                	mov    eax,ebx
100023df:	c1 fa 04             	sar    edx,0x4
100023e2:	c1 f8 04             	sar    eax,0x4
100023e5:	39 c2                	cmp    edx,eax
100023e7:	75 0a                	jne    100023f3 <ssfn_render+0xa74>
100023e9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100023ed:	01 c8                	add    eax,ecx
100023ef:	d1 f8                	sar    eax,1
100023f1:	eb 1a                	jmp    1000240d <ssfn_render+0xa8e>
100023f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100023f7:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
100023fb:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
100023ff:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10002403:	0f af c1             	imul   eax,ecx
10002406:	99                   	cdq    
10002407:	f7 fb                	idiv   ebx
10002409:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
1000240d:	c1 f8 04             	sar    eax,0x4
10002410:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10002415:	74 04                	je     1000241b <ssfn_render+0xa9c>
10002417:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
1000241b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10002420:	75 3f                	jne    10002461 <ssfn_render+0xae2>
10002422:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10002427:	74 38                	je     10002461 <ssfn_render+0xae2>
10002429:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
1000242d:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10002433:	f7 db                	neg    ebx
10002435:	01 c2                	add    edx,eax
10002437:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
1000243b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
1000243f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10002443:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10002447:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
1000244b:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
1000244f:	74 10                	je     10002461 <ssfn_render+0xae2>
10002451:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10002455:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10002459:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
1000245d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10002461:	31 d2                	xor    edx,edx
10002463:	39 f2                	cmp    edx,esi
10002465:	75 0b                	jne    10002472 <ssfn_render+0xaf3>
10002467:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
1000246f:	46                   	inc    esi
10002470:	eb 28                	jmp    1000249a <ssfn_render+0xb1b>
10002472:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
1000247a:	39 c1                	cmp    ecx,eax
1000247c:	7d 03                	jge    10002481 <ssfn_render+0xb02>
1000247e:	42                   	inc    edx
1000247f:	eb e2                	jmp    10002463 <ssfn_render+0xae4>
10002481:	89 f1                	mov    ecx,esi
10002483:	49                   	dec    ecx
10002484:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
1000248c:	39 d1                	cmp    ecx,edx
1000248e:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10002496:	7f eb                	jg     10002483 <ssfn_render+0xb04>
10002498:	eb cd                	jmp    10002467 <ssfn_render+0xae8>
1000249a:	8d 47 02             	lea    eax,[edi+0x2]
1000249d:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
100024a4:	e9 d9 fe ff ff       	jmp    10002382 <ssfn_render+0xa03>
100024a9:	83 fe 01             	cmp    esi,0x1
100024ac:	7e 1f                	jle    100024cd <ssfn_render+0xb4e>
100024ae:	f7 c6 01 00 00 00    	test   esi,0x1
100024b4:	74 24                	je     100024da <ssfn_render+0xb5b>
100024b6:	8d 46 ff             	lea    eax,[esi-0x1]
100024b9:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
100024c1:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
100024c9:	89 c6                	mov    esi,eax
100024cb:	eb 0d                	jmp    100024da <ssfn_render+0xb5b>
100024cd:	85 f6                	test   esi,esi
100024cf:	0f 84 c7 00 00 00    	je     1000259c <ssfn_render+0xc1d>
100024d5:	be 01 00 00 00       	mov    esi,0x1
100024da:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100024e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100024e4:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
100024e8:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
100024ec:	39 d1                	cmp    ecx,edx
100024ee:	7d 0b                	jge    100024fb <ssfn_render+0xb7c>
100024f0:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
100024f4:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
100024f8:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
100024fb:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10002506:	31 c0                	xor    eax,eax
10002508:	31 d2                	xor    edx,edx
1000250a:	8d 4e ff             	lea    ecx,[esi-0x1]
1000250d:	39 d1                	cmp    ecx,edx
1000250f:	7e 7d                	jle    1000258e <ssfn_render+0xc0f>
10002511:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10002519:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10002521:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10002525:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002529:	79 02                	jns    1000252d <ssfn_render+0xbae>
1000252b:	31 c0                	xor    eax,eax
1000252d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10002531:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10002535:	39 cf                	cmp    edi,ecx
10002537:	7e 04                	jle    1000253d <ssfn_render+0xbbe>
10002539:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
1000253d:	85 d2                	test   edx,edx
1000253f:	74 12                	je     10002553 <ssfn_render+0xbd4>
10002541:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10002549:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
1000254d:	39 c8                	cmp    eax,ecx
1000254f:	7d 02                	jge    10002553 <ssfn_render+0xbd4>
10002551:	89 c8                	mov    eax,ecx
10002553:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10002557:	7d 2b                	jge    10002584 <ssfn_render+0xc05>
10002559:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
1000255d:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10002563:	8d 3c 01             	lea    edi,[ecx+eax*1]
10002566:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
1000256a:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
1000256e:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10002572:	75 05                	jne    10002579 <ssfn_render+0xbfa>
10002574:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
10002579:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
1000257d:	40                   	inc    eax
1000257e:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10002582:	eb cf                	jmp    10002553 <ssfn_render+0xbd4>
10002584:	83 c2 02             	add    edx,0x2
10002587:	b0 01                	mov    al,0x1
10002589:	e9 7c ff ff ff       	jmp    1000250a <ssfn_render+0xb8b>
1000258e:	83 e6 fe             	and    esi,0xfffffffe
10002591:	84 c0                	test   al,al
10002593:	74 07                	je     1000259c <ssfn_render+0xc1d>
10002595:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
1000259c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100025a0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
100025a4:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
100025a8:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
100025ad:	e9 9b fd ff ff       	jmp    1000234d <ssfn_render+0x9ce>
100025b2:	88 c2                	mov    dl,al
100025b4:	80 e2 60             	and    dl,0x60
100025b7:	0f 85 95 02 00 00    	jne    10002852 <ssfn_render+0xed3>
100025bd:	83 e0 1f             	and    eax,0x1f
100025c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100025c4:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
100025cb:	c1 fb 04             	sar    ebx,0x4
100025ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100025d2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
100025d6:	40                   	inc    eax
100025d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100025db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100025df:	c1 f8 04             	sar    eax,0x4
100025e2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100025e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100025ea:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
100025ef:	99                   	cdq    
100025f0:	f7 fe                	idiv   esi
100025f2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100025f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100025fa:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
100025ff:	99                   	cdq    
10002600:	f7 fe                	idiv   esi
10002602:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002606:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000260c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002610:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002614:	8d 14 3b             	lea    edx,[ebx+edi*1]
10002617:	39 d6                	cmp    esi,edx
10002619:	7d 0a                	jge    10002625 <ssfn_render+0xca6>
1000261b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000261f:	8d 14 3b             	lea    edx,[ebx+edi*1]
10002622:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002629:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10002631:	0f af c3             	imul   eax,ebx
10002634:	31 ff                	xor    edi,edi
10002636:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
1000263a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000263e:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002642:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10002646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000264a:	29 d8                	sub    eax,ebx
1000264c:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10002650:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
10002654:	0f 8d b1 00 00 00    	jge    1000270b <ssfn_render+0xd8c>
1000265a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000265e:	99                   	cdq    
1000265f:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002663:	89 c6                	mov    esi,eax
10002665:	31 c0                	xor    eax,eax
10002667:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
1000266c:	74 0e                	je     1000267c <ssfn_render+0xcfd>
1000266e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10002672:	bb 04 00 00 00       	mov    ebx,0x4
10002677:	29 f8                	sub    eax,edi
10002679:	99                   	cdq    
1000267a:	f7 fb                	idiv   ebx
1000267c:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10002680:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000268b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
1000268f:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
10002694:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000269b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
1000269f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100026a3:	39 d8                	cmp    eax,ebx
100026a5:	7d 4e                	jge    100026f5 <ssfn_render+0xd76>
100026a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100026ab:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
100026b0:	99                   	cdq    
100026b1:	f7 fb                	idiv   ebx
100026b3:	8d 14 06             	lea    edx,[esi+eax*1]
100026b6:	83 e0 07             	and    eax,0x7
100026b9:	c1 fa 03             	sar    edx,0x3
100026bc:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
100026c1:	0f a3 c2             	bt     edx,eax
100026c4:	72 0e                	jb     100026d4 <ssfn_render+0xd55>
100026c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100026ca:	43                   	inc    ebx
100026cb:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
100026d2:	eb c0                	jmp    10002694 <ssfn_render+0xd15>
100026d4:	31 c0                	xor    eax,eax
100026d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100026da:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100026de:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
100026e4:	40                   	inc    eax
100026e5:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
100026e9:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
100026ed:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
100026f1:	7d e3                	jge    100026d6 <ssfn_render+0xd57>
100026f3:	eb d1                	jmp    100026c6 <ssfn_render+0xd47>
100026f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100026f9:	47                   	inc    edi
100026fa:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
100026fe:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10002702:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
10002706:	e9 45 ff ff ff       	jmp    10002650 <ssfn_render+0xcd1>
1000270b:	b3 fe                	mov    bl,0xfe
1000270d:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
10002714:	0f 85 21 03 00 00    	jne    10002a3b <ssfn_render+0x10bc>
1000271a:	31 c0                	xor    eax,eax
1000271c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002720:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
10002725:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10002729:	0f 95 c0             	setne  al
1000272c:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002730:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002734:	4f                   	dec    edi
10002735:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10002739:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
10002741:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002745:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000274c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002750:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
10002754:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002758:	31 c0                	xor    eax,eax
1000275a:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
1000275d:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002761:	83 c1 04             	add    ecx,0x4
10002764:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10002768:	0f 8d c0 02 00 00    	jge    10002a2e <ssfn_render+0x10af>
1000276e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10002772:	8d 77 01             	lea    esi,[edi+0x1]
10002775:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002779:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
1000277d:	4f                   	dec    edi
1000277e:	be 01 00 00 00       	mov    esi,0x1
10002783:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10002787:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
1000278b:	7e 63                	jle    100027f0 <ssfn_render+0xe71>
1000278d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002791:	b9 01 00 00 00       	mov    ecx,0x1
10002796:	89 ca                	mov    edx,ecx
10002798:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
1000279c:	7e 45                	jle    100027e3 <ssfn_render+0xe64>
1000279e:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100027a4:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
100027a9:	75 34                	jne    100027df <ssfn_render+0xe60>
100027ab:	89 c7                	mov    edi,eax
100027ad:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100027b1:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
100027b5:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
100027b9:	74 0c                	je     100027c7 <ssfn_render+0xe48>
100027bb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100027bf:	01 d7                	add    edi,edx
100027c1:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
100027c5:	75 18                	jne    100027df <ssfn_render+0xe60>
100027c7:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100027cb:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
100027cf:	74 06                	je     100027d7 <ssfn_render+0xe58>
100027d1:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
100027d5:	75 08                	jne    100027df <ssfn_render+0xe60>
100027d7:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
100027db:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
100027df:	41                   	inc    ecx
100027e0:	40                   	inc    eax
100027e1:	eb b3                	jmp    10002796 <ssfn_render+0xe17>
100027e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100027e7:	46                   	inc    esi
100027e8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
100027ec:	b0 01                	mov    al,0x1
100027ee:	eb 97                	jmp    10002787 <ssfn_render+0xe08>
100027f0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100027f4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
100027f8:	bb 01 00 00 00       	mov    ebx,0x1
100027fd:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002801:	7e 3d                	jle    10002840 <ssfn_render+0xec1>
10002803:	b8 01 00 00 00       	mov    eax,0x1
10002808:	89 c2                	mov    edx,eax
1000280a:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
1000280e:	7e 23                	jle    10002833 <ssfn_render+0xeb4>
10002810:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10002814:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
1000281a:	8d 14 07             	lea    edx,[edi+eax*1]
1000281d:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
10002822:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002826:	75 08                	jne    10002830 <ssfn_render+0xeb1>
10002828:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
1000282c:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10002830:	40                   	inc    eax
10002831:	eb d5                	jmp    10002808 <ssfn_render+0xe89>
10002833:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002837:	43                   	inc    ebx
10002838:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
1000283c:	b0 01                	mov    al,0x1
1000283e:	eb bd                	jmp    100027fd <ssfn_render+0xe7e>
10002840:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
10002843:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002847:	01 c9                	add    ecx,ecx
10002849:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
1000284d:	e9 08 ff ff ff       	jmp    1000275a <ssfn_render+0xddb>
10002852:	b3 fe                	mov    bl,0xfe
10002854:	80 fa 20             	cmp    dl,0x20
10002857:	0f 85 de 01 00 00    	jne    10002a3b <ssfn_render+0x10bc>
1000285d:	89 c3                	mov    ebx,eax
1000285f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10002863:	c1 e3 08             	shl    ebx,0x8
10002866:	81 e3 00 1f 00 00    	and    ebx,0x1f00
1000286c:	09 c3                	or     ebx,eax
1000286e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
10002872:	43                   	inc    ebx
10002873:	40                   	inc    eax
10002874:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002878:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
1000287c:	40                   	inc    eax
1000287d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10002881:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002885:	c1 f8 04             	sar    eax,0x4
10002888:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000288c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002890:	c1 f8 04             	sar    eax,0x4
10002893:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002897:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000289b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
100028a0:	99                   	cdq    
100028a1:	f7 fe                	idiv   esi
100028a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100028a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100028ab:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
100028b0:	99                   	cdq    
100028b1:	f7 fe                	idiv   esi
100028b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100028b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100028bb:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100028c1:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100028c5:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
100028c9:	39 d6                	cmp    esi,edx
100028cb:	7d 0b                	jge    100028d8 <ssfn_render+0xf59>
100028cd:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
100028d1:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100028d5:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
100028d8:	83 c1 04             	add    ecx,0x4
100028db:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100028e6:	8d 04 19             	lea    eax,[ecx+ebx*1]
100028e9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100028ed:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
100028f1:	72 35                	jb     10002928 <ssfn_render+0xfa9>
100028f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100028f7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100028fb:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002900:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
10002904:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
10002908:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000290f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
10002913:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
1000291b:	31 d2                	xor    edx,edx
1000291d:	31 ff                	xor    edi,edi
1000291f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
10002923:	e9 cc 00 00 00       	jmp    100029f4 <ssfn_render+0x1075>
10002928:	8a 11                	mov    dl,BYTE PTR [ecx]
1000292a:	89 d0                	mov    eax,edx
1000292c:	83 e0 7f             	and    eax,0x7f
1000292f:	84 d2                	test   dl,dl
10002931:	8d 78 01             	lea    edi,[eax+0x1]
10002934:	78 09                	js     1000293f <ssfn_render+0xfc0>
10002936:	41                   	inc    ecx
10002937:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000293b:	89 ca                	mov    edx,ecx
1000293d:	eb 3d                	jmp    1000297c <ssfn_render+0xffd>
1000293f:	48                   	dec    eax
10002940:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002947:	83 f8 fe             	cmp    eax,0xfffffffe
1000294a:	74 16                	je     10002962 <ssfn_render+0xfe3>
1000294c:	8d 5a 01             	lea    ebx,[edx+0x1]
1000294f:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
10002956:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
10002959:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
10002960:	eb dd                	jmp    1000293f <ssfn_render+0xfc0>
10002962:	83 c1 02             	add    ecx,0x2
10002965:	eb 86                	jmp    100028ed <ssfn_render+0xf6e>
10002967:	42                   	inc    edx
10002968:	8d 73 01             	lea    esi,[ebx+0x1]
1000296b:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10002972:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
10002975:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
1000297c:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
10002980:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
10002987:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
1000298c:	75 d9                	jne    10002967 <ssfn_render+0xfe8>
1000298e:	01 f9                	add    ecx,edi
10002990:	e9 58 ff ff ff       	jmp    100028ed <ssfn_render+0xf6e>
10002995:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002999:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
1000299d:	99                   	cdq    
1000299e:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100029a2:	0f af c8             	imul   ecx,eax
100029a5:	31 c0                	xor    eax,eax
100029a7:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100029ac:	74 0e                	je     100029bc <ssfn_render+0x103d>
100029ae:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100029b2:	bb 04 00 00 00       	mov    ebx,0x4
100029b7:	29 f8                	sub    eax,edi
100029b9:	99                   	cdq    
100029ba:	f7 fb                	idiv   ebx
100029bc:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
100029c0:	31 db                	xor    ebx,ebx
100029c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100029c6:	31 f6                	xor    esi,esi
100029c8:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
100029cf:	01 c1                	add    ecx,eax
100029d1:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
100029d5:	7f 30                	jg     10002a07 <ssfn_render+0x1088>
100029d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100029db:	85 c0                	test   eax,eax
100029dd:	79 02                	jns    100029e1 <ssfn_render+0x1062>
100029df:	31 c0                	xor    eax,eax
100029e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100029e5:	47                   	inc    edi
100029e6:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
100029ea:	b2 01                	mov    dl,0x1
100029ec:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
100029f0:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
100029f4:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
100029f8:	7c 9b                	jl     10002995 <ssfn_render+0x1016>
100029fa:	84 d2                	test   dl,dl
100029fc:	74 3b                	je     10002a39 <ssfn_render+0x10ba>
100029fe:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10002a05:	eb 32                	jmp    10002a39 <ssfn_render+0x10ba>
10002a07:	89 d8                	mov    eax,ebx
10002a09:	99                   	cdq    
10002a0a:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002a0e:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
10002a15:	3c ff                	cmp    al,0xff
10002a17:	74 0e                	je     10002a27 <ssfn_render+0x10a8>
10002a19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10002a1d:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002a23:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
10002a27:	46                   	inc    esi
10002a28:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
10002a2c:	eb a3                	jmp    100029d1 <ssfn_render+0x1052>
10002a2e:	84 c0                	test   al,al
10002a30:	74 07                	je     10002a39 <ssfn_render+0x10ba>
10002a32:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
10002a39:	b3 fe                	mov    bl,0xfe
10002a3b:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
10002a3f:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
10002a43:	e9 9f f5 ff ff       	jmp    10001fe7 <ssfn_render+0x668>
10002a48:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002a4e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10002a51:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
10002a54:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
10002a57:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10002a5d:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
10002a61:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
10002a65:	89 f0                	mov    eax,esi
10002a67:	89 d9                	mov    ecx,ebx
10002a69:	43                   	inc    ebx
10002a6a:	39 de                	cmp    esi,ebx
10002a6c:	7e 08                	jle    10002a76 <ssfn_render+0x10f7>
10002a6e:	48                   	dec    eax
10002a6f:	29 c8                	sub    eax,ecx
10002a71:	88 42 07             	mov    BYTE PTR [edx+0x7],al
10002a74:	eb 04                	jmp    10002a7a <ssfn_render+0x10fb>
10002a76:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
10002a7a:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
10002a82:	0f 84 c9 0c 00 00    	je     10003751 <ssfn_render+0x1dd2>
10002a88:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002a8e:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
10002a94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002a98:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
10002a9b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10002a9f:	0f ba e0 0c          	bt     eax,0xc
10002aa3:	72 22                	jb     10002ac7 <ssfn_render+0x1148>
10002aa5:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10002aa8:	83 e0 0f             	and    eax,0xf
10002aab:	3c 03                	cmp    al,0x3
10002aad:	74 18                	je     10002ac7 <ssfn_render+0x1148>
10002aaf:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
10002ab3:	84 c9                	test   cl,cl
10002ab5:	74 10                	je     10002ac7 <ssfn_render+0x1148>
10002ab7:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
10002abb:	0f af d7             	imul   edx,edi
10002abe:	89 d0                	mov    eax,edx
10002ac0:	99                   	cdq    
10002ac1:	f7 f9                	idiv   ecx
10002ac3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002ac7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002acb:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
10002ad1:	7d 06                	jge    10002ad9 <ssfn_render+0x115a>
10002ad3:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
10002ad9:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10002adf:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
10002ae3:	0f b7 13             	movzx  edx,WORD PTR [ebx]
10002ae6:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
10002aeb:	89 d0                	mov    eax,edx
10002aed:	99                   	cdq    
10002aee:	f7 f9                	idiv   ecx
10002af0:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
10002af4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002af8:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
10002afb:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
10002aff:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
10002b03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002b07:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
10002b0c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002b10:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002b15:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002b19:	99                   	cdq    
10002b1a:	f7 f9                	idiv   ecx
10002b1c:	31 d2                	xor    edx,edx
10002b1e:	83 ff 10             	cmp    edi,0x10
10002b21:	0f 9f c2             	setg   dl
10002b24:	42                   	inc    edx
10002b25:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10002b29:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
10002b2d:	7d 08                	jge    10002b37 <ssfn_render+0x11b8>
10002b2f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002b33:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10002b37:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
10002b3b:	39 c2                	cmp    edx,eax
10002b3d:	7d 04                	jge    10002b43 <ssfn_render+0x11c4>
10002b3f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002b43:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10002b48:	74 4c                	je     10002b96 <ssfn_render+0x1217>
10002b4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002b4e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002b53:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002b57:	99                   	cdq    
10002b58:	f7 f9                	idiv   ecx
10002b5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10002b5e:	81 e2 00 08 00 00    	and    edx,0x800
10002b64:	74 04                	je     10002b6a <ssfn_render+0x11eb>
10002b66:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10002b6a:	01 d0                	add    eax,edx
10002b6c:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
10002b72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002b76:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
10002b7a:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
10002b7e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002b83:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002b87:	99                   	cdq    
10002b88:	f7 f9                	idiv   ecx
10002b8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002b8e:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
10002b94:	eb 22                	jmp    10002bb8 <ssfn_render+0x1239>
10002b96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002b9a:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
10002ba4:	d1 f8                	sar    eax,1
10002ba6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
10002bae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002bb2:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
10002bb8:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bbf:	8b 18                	mov    ebx,DWORD PTR [eax]
10002bc1:	85 db                	test   ebx,ebx
10002bc3:	0f 84 2e 09 00 00    	je     100034f7 <ssfn_render+0x1b78>
10002bc9:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
10002bcd:	89 d1                	mov    ecx,edx
10002bcf:	89 d0                	mov    eax,edx
10002bd1:	66 c1 f9 0b          	sar    cx,0xb
10002bd5:	c1 f8 1f             	sar    eax,0x1f
10002bd8:	31 c2                	xor    edx,eax
10002bda:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
10002bde:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
10002be2:	88 c8                	mov    al,cl
10002be4:	83 e0 10             	and    eax,0x10
10002be7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
10002beb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002bef:	83 c0 40             	add    eax,0x40
10002bf2:	c1 f8 06             	sar    eax,0x6
10002bf5:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
10002bfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002c00:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002c04:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
10002c08:	7d 08                	jge    10002c12 <ssfn_render+0x1293>
10002c0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002c0e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002c12:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002c15:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
10002c1d:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002c21:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10002c29:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
10002c2d:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002c32:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002c36:	99                   	cdq    
10002c37:	f7 f9                	idiv   ecx
10002c39:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10002c3d:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c44:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10002c47:	0f b6 f4             	movzx  esi,ah
10002c4a:	89 c2                	mov    edx,eax
10002c4c:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
10002c50:	c1 ea 10             	shr    edx,0x10
10002c53:	0f b6 fa             	movzx  edi,dl
10002c56:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
10002c5a:	0f b6 f8             	movzx  edi,al
10002c5d:	c1 e8 18             	shr    eax,0x18
10002c60:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
10002c64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002c68:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c6f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10002c72:	0f b6 fc             	movzx  edi,ah
10002c75:	89 c2                	mov    edx,eax
10002c77:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10002c7e:	c1 ea 10             	shr    edx,0x10
10002c81:	0f b6 c0             	movzx  eax,al
10002c84:	0f b6 f2             	movzx  esi,dl
10002c87:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002c8e:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
10002c95:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002c99:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ca0:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
10002ca7:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002cab:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002caf:	0f af c2             	imul   eax,edx
10002cb2:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002cb6:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002cba:	8d 04 90             	lea    eax,[eax+edx*4]
10002cbd:	01 d8                	add    eax,ebx
10002cbf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
10002cc6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10002cca:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
10002cd1:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002cd6:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
10002cdd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10002ce1:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
10002ce5:	0f 8d e2 04 00 00    	jge    100031cd <ssfn_render+0x184e>
10002ceb:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002cf2:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002cf9:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002cfd:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
10002d01:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002d05:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002d09:	39 d0                	cmp    eax,edx
10002d0b:	0f 8d bc 04 00 00    	jge    100031cd <ssfn_render+0x184e>
10002d11:	85 c0                	test   eax,eax
10002d13:	0f 88 94 04 00 00    	js     100031ad <ssfn_render+0x182e>
10002d19:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002d1f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10002d23:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10002d27:	c1 e1 08             	shl    ecx,0x8
10002d2a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10002d32:	89 c8                	mov    eax,ecx
10002d34:	0f af c3             	imul   eax,ebx
10002d37:	99                   	cdq    
10002d38:	f7 fe                	idiv   esi
10002d3a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002d41:	c1 f8 08             	sar    eax,0x8
10002d44:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
10002d4b:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002d51:	0f af c3             	imul   eax,ebx
10002d54:	99                   	cdq    
10002d55:	f7 fe                	idiv   esi
10002d57:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10002d5b:	c1 f8 08             	sar    eax,0x8
10002d5e:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
10002d65:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002d69:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
10002d70:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
10002d77:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d7e:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002d82:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002d86:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002d8a:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002d8e:	0f 8d 19 04 00 00    	jge    100031ad <ssfn_render+0x182e>
10002d94:	85 c0                	test   eax,eax
10002d96:	0f 88 ff 03 00 00    	js     1000319b <ssfn_render+0x181c>
10002d9c:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002da3:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
10002da7:	75 42                	jne    10002deb <ssfn_render+0x146c>
10002da9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002dad:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002db4:	b9 10 00 00 00       	mov    ecx,0x10
10002db9:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10002dbc:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002dc3:	89 c2                	mov    edx,eax
10002dc5:	0f b6 fc             	movzx  edi,ah
10002dc8:	d3 ea                	shr    edx,cl
10002dca:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10002dd1:	0f b6 f2             	movzx  esi,dl
10002dd4:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002dd8:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
10002ddf:	d3 e8                	shr    eax,cl
10002de1:	0f b6 c0             	movzx  eax,al
10002de4:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
10002deb:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002df1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10002df5:	0f b7 18             	movzx  ebx,WORD PTR [eax]
10002df8:	c1 e1 08             	shl    ecx,0x8
10002dfb:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
10002dff:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10002e07:	89 c8                	mov    eax,ecx
10002e09:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
10002e11:	0f af c3             	imul   eax,ebx
10002e14:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
10002e1c:	99                   	cdq    
10002e1d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10002e25:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002e29:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10002e31:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
10002e38:	c1 f8 08             	sar    eax,0x8
10002e3b:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10002e42:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002e48:	0f af c3             	imul   eax,ebx
10002e4b:	99                   	cdq    
10002e4c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002e50:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002e54:	c1 f8 08             	sar    eax,0x8
10002e57:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
10002e5e:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
10002e65:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002e69:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10002e6d:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
10002e71:	0f 8d 3b 02 00 00    	jge    100030b2 <ssfn_render+0x1733>
10002e77:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
10002e7b:	c1 fa 08             	sar    edx,0x8
10002e7e:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
10002e85:	75 25                	jne    10002eac <ssfn_render+0x152d>
10002e87:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
10002e8c:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
10002e93:	b8 00 01 00 00       	mov    eax,0x100
10002e98:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
10002ea0:	29 c8                	sub    eax,ecx
10002ea2:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10002ea6:	39 c7                	cmp    edi,eax
10002ea8:	7e 1c                	jle    10002ec6 <ssfn_render+0x1547>
10002eaa:	eb 16                	jmp    10002ec2 <ssfn_render+0x1543>
10002eac:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
10002eb4:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
10002ebb:	75 09                	jne    10002ec6 <ssfn_render+0x1547>
10002ebd:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
10002ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002ec6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
10002eca:	0f b7 00             	movzx  eax,WORD PTR [eax]
10002ecd:	0f af c2             	imul   eax,edx
10002ed0:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
10002ed7:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
10002edc:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10002ee1:	c1 f8 08             	sar    eax,0x8
10002ee4:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
10002eeb:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
10002ef2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002ef6:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10002efa:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
10002efe:	0f 8d a1 01 00 00    	jge    100030a5 <ssfn_render+0x1726>
10002f04:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002f08:	c1 f8 08             	sar    eax,0x8
10002f0b:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
10002f12:	75 3b                	jne    10002f4f <ssfn_render+0x15d0>
10002f14:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
10002f19:	ba 00 01 00 00       	mov    edx,0x100
10002f1e:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
10002f26:	29 ca                	sub    edx,ecx
10002f28:	89 f1                	mov    ecx,esi
10002f2a:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
10002f31:	39 d1                	cmp    ecx,edx
10002f33:	7c 0e                	jl     10002f43 <ssfn_render+0x15c4>
10002f35:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002f39:	81 fa 00 01 00 00    	cmp    edx,0x100
10002f3f:	74 22                	je     10002f63 <ssfn_render+0x15e4>
10002f41:	89 d1                	mov    ecx,edx
10002f43:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
10002f48:	89 cf                	mov    edi,ecx
10002f4a:	c1 ff 08             	sar    edi,0x8
10002f4d:	eb 14                	jmp    10002f63 <ssfn_render+0x15e4>
10002f4f:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
10002f56:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
10002f5d:	74 04                	je     10002f63 <ssfn_render+0x15e4>
10002f5f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002f63:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
10002f67:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
10002f6b:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
10002f72:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
10002f77:	81 fa ff 00 00 00    	cmp    edx,0xff
10002f7d:	75 37                	jne    10002fb6 <ssfn_render+0x1637>
10002f7f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10002f86:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
10002f8e:	0f af c7             	imul   eax,edi
10002f91:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002f95:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10002f9c:	0f af c7             	imul   eax,edi
10002f9f:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002fa3:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10002faa:	0f af c7             	imul   eax,edi
10002fad:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002fb1:	e9 e2 00 00 00       	jmp    10003098 <ssfn_render+0x1719>
10002fb6:	81 fa fe 00 00 00    	cmp    edx,0xfe
10002fbc:	74 2d                	je     10002feb <ssfn_render+0x166c>
10002fbe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002fc1:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
10002fc4:	85 c9                	test   ecx,ecx
10002fc6:	74 23                	je     10002feb <ssfn_render+0x166c>
10002fc8:	01 c8                	add    eax,ecx
10002fca:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
10002fcd:	89 d9                	mov    ecx,ebx
10002fcf:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
10002fd6:	c1 e9 10             	shr    ecx,0x10
10002fd9:	0f b6 f7             	movzx  esi,bh
10002fdc:	0f b6 c1             	movzx  eax,cl
10002fdf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10002fe3:	0f b6 c3             	movzx  eax,bl
10002fe6:	c1 eb 18             	shr    ebx,0x18
10002fe9:	eb 14                	jmp    10002fff <ssfn_render+0x1680>
10002feb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002fef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002ff3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10002ff7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
10002ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002fff:	81 fb ff 00 00 00    	cmp    ebx,0xff
10003005:	75 25                	jne    1000302c <ssfn_render+0x16ad>
10003007:	0f af c7             	imul   eax,edi
1000300a:	0f af f7             	imul   esi,edi
1000300d:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10003011:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10003015:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
1000301b:	0f af cf             	imul   ecx,edi
1000301e:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
10003022:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
10003026:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
1000302a:	eb 6c                	jmp    10003098 <ssfn_render+0x1719>
1000302c:	0f af f3             	imul   esi,ebx
1000302f:	0f af c3             	imul   eax,ebx
10003032:	b9 ff 00 00 00       	mov    ecx,0xff
10003037:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
1000303e:	29 d9                	sub    ecx,ebx
10003040:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
10003044:	0f af d1             	imul   edx,ecx
10003047:	b9 ff 00 00 00       	mov    ecx,0xff
1000304c:	01 d0                	add    eax,edx
1000304e:	0f af c7             	imul   eax,edi
10003051:	99                   	cdq    
10003052:	f7 f9                	idiv   ecx
10003054:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10003058:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
1000305c:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
10003064:	01 f0                	add    eax,esi
10003066:	89 ce                	mov    esi,ecx
10003068:	0f af c7             	imul   eax,edi
1000306b:	99                   	cdq    
1000306c:	f7 f9                	idiv   ecx
1000306e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10003072:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10003076:	0f af cb             	imul   ecx,ebx
10003079:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
1000307d:	0f af df             	imul   ebx,edi
10003080:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
10003088:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
1000308c:	01 c8                	add    eax,ecx
1000308e:	0f af c7             	imul   eax,edi
10003091:	99                   	cdq    
10003092:	f7 fe                	idiv   esi
10003094:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10003098:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
100030a0:	e9 51 fe ff ff       	jmp    10002ef6 <ssfn_render+0x1577>
100030a5:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
100030ad:	e9 b7 fd ff ff       	jmp    10002e69 <ssfn_render+0x14ea>
100030b2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
100030b7:	74 30                	je     100030e9 <ssfn_render+0x176a>
100030b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100030bd:	31 d2                	xor    edx,edx
100030bf:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
100030c3:	31 d2                	xor    edx,edx
100030c5:	89 c1                	mov    ecx,eax
100030c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100030cb:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
100030cf:	31 d2                	xor    edx,edx
100030d1:	89 c6                	mov    esi,eax
100030d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100030d7:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
100030db:	31 d2                	xor    edx,edx
100030dd:	89 c3                	mov    ebx,eax
100030df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100030e3:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
100030e7:	eb 1c                	jmp    10003105 <ssfn_render+0x1786>
100030e9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
100030ed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
100030f1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
100030f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100030f9:	c1 e9 08             	shr    ecx,0x8
100030fc:	c1 ee 08             	shr    esi,0x8
100030ff:	c1 eb 08             	shr    ebx,0x8
10003102:	c1 e8 08             	shr    eax,0x8
10003105:	83 f8 0f             	cmp    eax,0xf
10003108:	0f 86 8d 00 00 00    	jbe    1000319b <ssfn_render+0x181c>
1000310e:	89 ca                	mov    edx,ecx
10003110:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10003116:	76 05                	jbe    1000311d <ssfn_render+0x179e>
10003118:	ba ff 00 00 00       	mov    edx,0xff
1000311d:	b9 10 00 00 00       	mov    ecx,0x10
10003122:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10003129:	d3 e2                	shl    edx,cl
1000312b:	3d ff 00 00 00       	cmp    eax,0xff
10003130:	89 d1                	mov    ecx,edx
10003132:	76 05                	jbe    10003139 <ssfn_render+0x17ba>
10003134:	b8 ff 00 00 00       	mov    eax,0xff
10003139:	c1 e0 18             	shl    eax,0x18
1000313c:	09 c8                	or     eax,ecx
1000313e:	81 fe ff 00 00 00    	cmp    esi,0xff
10003144:	76 05                	jbe    1000314b <ssfn_render+0x17cc>
10003146:	be ff 00 00 00       	mov    esi,0xff
1000314b:	c1 e6 08             	shl    esi,0x8
1000314e:	09 f0                	or     eax,esi
10003150:	81 fb ff 00 00 00    	cmp    ebx,0xff
10003156:	76 05                	jbe    1000315d <ssfn_render+0x17de>
10003158:	bb ff 00 00 00       	mov    ebx,0xff
1000315d:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10003161:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10003165:	d3 e3                	shl    ebx,cl
10003167:	09 c3                	or     ebx,eax
10003169:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10003170:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10003173:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10003177:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
1000317b:	75 1e                	jne    1000319b <ssfn_render+0x181c>
1000317d:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10003184:	7e 07                	jle    1000318d <ssfn_render+0x180e>
10003186:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
1000318d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003191:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10003195:	7d 04                	jge    1000319b <ssfn_render+0x181c>
10003197:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
1000319b:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
1000319f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100031a3:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
100031a7:	0f 85 ca fb ff ff    	jne    10002d77 <ssfn_render+0x13f8>
100031ad:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100031b4:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
100031b8:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
100031bc:	25 fc ff 00 00       	and    eax,0xfffc
100031c1:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
100031c8:	e9 10 fb ff ff       	jmp    10002cdd <ssfn_render+0x135e>
100031cd:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
100031d4:	0f 84 90 01 00 00    	je     1000336a <ssfn_render+0x19eb>
100031da:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
100031e2:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
100031e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100031ed:	40                   	inc    eax
100031ee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100031f2:	29 c7                	sub    edi,eax
100031f4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100031f8:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
100031fc:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10003200:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10003204:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10003208:	7e 09                	jle    10003213 <ssfn_render+0x1894>
1000320a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000320e:	40                   	inc    eax
1000320f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10003213:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000321a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10003221:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10003225:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10003229:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
1000322d:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10003231:	0f af c2             	imul   eax,edx
10003234:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10003238:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
1000323c:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10003240:	03 07                	add    eax,DWORD PTR [edi]
10003242:	89 c7                	mov    edi,eax
10003244:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003248:	c1 e0 18             	shl    eax,0x18
1000324b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000324f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003253:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003257:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
1000325c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10003260:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10003264:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10003268:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
1000326c:	0f 8e f8 00 00 00    	jle    1000336a <ssfn_render+0x19eb>
10003272:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10003279:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10003280:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10003284:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10003288:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
1000328c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10003290:	39 d0                	cmp    eax,edx
10003292:	0f 8d d2 00 00 00    	jge    1000336a <ssfn_render+0x19eb>
10003298:	31 db                	xor    ebx,ebx
1000329a:	85 c0                	test   eax,eax
1000329c:	79 23                	jns    100032c1 <ssfn_render+0x1942>
1000329e:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100032a5:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
100032a9:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
100032ad:	25 fc ff 00 00       	and    eax,0xfffc
100032b2:	01 c7                	add    edi,eax
100032b4:	eb aa                	jmp    10003260 <ssfn_render+0x18e1>
100032b6:	85 c0                	test   eax,eax
100032b8:	79 20                	jns    100032da <ssfn_render+0x195b>
100032ba:	43                   	inc    ebx
100032bb:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
100032bf:	7c dd                	jl     1000329e <ssfn_render+0x191f>
100032c1:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100032c8:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
100032cc:	01 d8                	add    eax,ebx
100032ce:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100032d2:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100032d6:	7c de                	jl     100032b6 <ssfn_render+0x1937>
100032d8:	eb c4                	jmp    1000329e <ssfn_render+0x191f>
100032da:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
100032de:	7e 06                	jle    100032e6 <ssfn_render+0x1967>
100032e0:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
100032e4:	7f d4                	jg     100032ba <ssfn_render+0x193b>
100032e6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
100032e9:	b8 10 00 00 00       	mov    eax,0x10
100032ee:	0f b6 f6             	movzx  esi,dh
100032f1:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
100032f5:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
100032f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100032fd:	89 d0                	mov    eax,edx
100032ff:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10003303:	d3 e8                	shr    eax,cl
10003305:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10003309:	0f b6 c0             	movzx  eax,al
1000330c:	d3 ea                	shr    edx,cl
1000330e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10003312:	0f b6 f2             	movzx  esi,dl
10003315:	29 c1                	sub    ecx,eax
10003317:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
1000331b:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10003320:	29 f2                	sub    edx,esi
10003322:	c1 f9 08             	sar    ecx,0x8
10003325:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
1000332a:	01 c8                	add    eax,ecx
1000332c:	c1 fa 08             	sar    edx,0x8
1000332f:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10003333:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10003337:	d3 e0                	shl    eax,cl
10003339:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
1000333d:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10003341:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10003345:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10003349:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
1000334e:	d3 e6                	shl    esi,cl
10003350:	c1 fa 08             	sar    edx,0x8
10003353:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10003357:	c1 e2 08             	shl    edx,0x8
1000335a:	09 d0                	or     eax,edx
1000335c:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10003360:	09 c6                	or     esi,eax
10003362:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10003365:	e9 50 ff ff ff       	jmp    100032ba <ssfn_render+0x193b>
1000336a:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10003371:	0f 84 80 01 00 00    	je     100034f7 <ssfn_render+0x1b78>
10003377:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
1000337b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000337f:	d1 fa                	sar    edx,1
10003381:	40                   	inc    eax
10003382:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10003386:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000338a:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
1000338e:	7e 09                	jle    10003399 <ssfn_render+0x1a1a>
10003390:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10003394:	40                   	inc    eax
10003395:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10003399:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
100033a0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100033a7:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
100033ab:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
100033af:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
100033b3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
100033b7:	01 d0                	add    eax,edx
100033b9:	0f af c1             	imul   eax,ecx
100033bc:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
100033c0:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
100033c4:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
100033c8:	03 03                	add    eax,DWORD PTR [ebx]
100033ca:	89 c7                	mov    edi,eax
100033cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100033d0:	c1 e0 18             	shl    eax,0x18
100033d3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100033d7:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
100033df:	01 d0                	add    eax,edx
100033e1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
100033e5:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
100033ea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
100033ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100033f2:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
100033f6:	0f 8e fb 00 00 00    	jle    100034f7 <ssfn_render+0x1b78>
100033fc:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10003403:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10003407:	01 d8                	add    eax,ebx
10003409:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10003410:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10003414:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10003418:	39 d0                	cmp    eax,edx
1000341a:	0f 8d d7 00 00 00    	jge    100034f7 <ssfn_render+0x1b78>
10003420:	31 f6                	xor    esi,esi
10003422:	85 c0                	test   eax,eax
10003424:	0f 89 ad 00 00 00    	jns    100034d7 <ssfn_render+0x1b58>
1000342a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10003431:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10003435:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10003439:	25 fc ff 00 00       	and    eax,0xfffc
1000343e:	01 c7                	add    edi,eax
10003440:	eb ac                	jmp    100033ee <ssfn_render+0x1a6f>
10003442:	85 c0                	test   eax,eax
10003444:	0f 88 82 00 00 00    	js     100034cc <ssfn_render+0x1b4d>
1000344a:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
1000344d:	b8 10 00 00 00       	mov    eax,0x10
10003452:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10003456:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
1000345a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000345e:	89 d8                	mov    eax,ebx
10003460:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10003464:	d3 e8                	shr    eax,cl
10003466:	0f b6 cf             	movzx  ecx,bh
10003469:	0f b6 c0             	movzx  eax,al
1000346c:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10003470:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10003474:	d3 eb                	shr    ebx,cl
10003476:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000347a:	0f b6 db             	movzx  ebx,bl
1000347d:	29 c1                	sub    ecx,eax
1000347f:	29 da                	sub    edx,ebx
10003481:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10003486:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
1000348b:	c1 f9 08             	sar    ecx,0x8
1000348e:	c1 fa 08             	sar    edx,0x8
10003491:	01 c8                	add    eax,ecx
10003493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10003497:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
1000349b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
1000349f:	d3 e0                	shl    eax,cl
100034a1:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
100034a5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
100034a9:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
100034ae:	c1 fa 08             	sar    edx,0x8
100034b1:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
100034b5:	c1 e2 08             	shl    edx,0x8
100034b8:	09 d0                	or     eax,edx
100034ba:	8d 14 19             	lea    edx,[ecx+ebx*1]
100034bd:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
100034c1:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
100034c5:	d3 e2                	shl    edx,cl
100034c7:	09 c2                	or     edx,eax
100034c9:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
100034cc:	46                   	inc    esi
100034cd:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
100034d1:	0f 8c 53 ff ff ff    	jl     1000342a <ssfn_render+0x1aab>
100034d7:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100034de:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
100034e2:	01 f0                	add    eax,esi
100034e4:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100034e8:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100034ec:	0f 8c 50 ff ff ff    	jl     10003442 <ssfn_render+0x1ac3>
100034f2:	e9 33 ff ff ff       	jmp    1000342a <ssfn_render+0x1aab>
100034f7:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
100034fe:	74 04                	je     10003504 <ssfn_render+0x1b85>
10003500:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10003504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003508:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000350c:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10003512:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10003519:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
1000351d:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10003524:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003527:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
1000352b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10003531:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10003535:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000353a:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000353e:	99                   	cdq    
1000353f:	f7 f9                	idiv   ecx
10003541:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10003545:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
1000354b:	25 80 00 00 00       	and    eax,0x80
10003550:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003554:	0f 85 f7 01 00 00    	jne    10003751 <ssfn_render+0x1dd2>
1000355a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000355d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10003561:	0f 84 ea 01 00 00    	je     10003751 <ssfn_render+0x1dd2>
10003567:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
1000356e:	83 ec 0c             	sub    esp,0xc
10003571:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
10003578:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
1000357f:	51                   	push   ecx
10003580:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
10003587:	e8 53 d9 ff ff       	call   10000edf <_ssfn_c>
1000358c:	83 c4 10             	add    esp,0x10
1000358f:	85 c0                	test   eax,eax
10003591:	0f 84 ba 01 00 00    	je     10003751 <ssfn_render+0x1dd2>
10003597:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
1000359f:	0f 86 ac 01 00 00    	jbe    10003751 <ssfn_render+0x1dd2>
100035a5:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
100035ab:	8d 48 06             	lea    ecx,[eax+0x6]
100035ae:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
100035b4:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
100035b8:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
100035bc:	0f 8e 8f 01 00 00    	jle    10003751 <ssfn_render+0x1dd2>
100035c2:	8a 19                	mov    bl,BYTE PTR [ecx]
100035c4:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
100035c8:	8a 18                	mov    bl,BYTE PTR [eax]
100035ca:	83 e3 40             	and    ebx,0x40
100035cd:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
100035d2:	75 14                	jne    100035e8 <ssfn_render+0x1c69>
100035d4:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
100035d8:	75 0e                	jne    100035e8 <ssfn_render+0x1c69>
100035da:	80 fb 01             	cmp    bl,0x1
100035dd:	19 c0                	sbb    eax,eax
100035df:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
100035e3:	e9 60 01 00 00       	jmp    10003748 <ssfn_render+0x1dc9>
100035e8:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
100035ec:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
100035f0:	c1 e6 10             	shl    esi,0x10
100035f3:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
100035f7:	84 db                	test   bl,bl
100035f9:	74 08                	je     10003603 <ssfn_render+0x1c84>
100035fb:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
100035fe:	83 c1 06             	add    ecx,0x6
10003601:	eb 0c                	jmp    1000360f <ssfn_render+0x1c90>
10003603:	c1 e2 08             	shl    edx,0x8
10003606:	83 c1 05             	add    ecx,0x5
10003609:	89 d0                	mov    eax,edx
1000360b:	09 f0                	or     eax,esi
1000360d:	09 c7                	or     edi,eax
1000360f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003612:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003616:	01 f8                	add    eax,edi
10003618:	8a 10                	mov    dl,BYTE PTR [eax]
1000361a:	88 d3                	mov    bl,dl
1000361c:	83 e3 e0             	and    ebx,0xffffffe0
1000361f:	80 fb c0             	cmp    bl,0xc0
10003622:	0f 85 20 01 00 00    	jne    10003748 <ssfn_render+0x1dc9>
10003628:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
1000362c:	c1 e2 08             	shl    edx,0x8
1000362f:	83 c0 02             	add    eax,0x2
10003632:	81 e2 00 1f 00 00    	and    edx,0x1f00
10003638:	09 da                	or     edx,ebx
1000363a:	8d 72 01             	lea    esi,[edx+0x1]
1000363d:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003641:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
10003648:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
1000364c:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10003651:	0f 84 f1 00 00 00    	je     10003748 <ssfn_render+0x1dc9>
10003657:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000365b:	0f b7 10             	movzx  edx,WORD PTR [eax]
1000365e:	c1 e3 10             	shl    ebx,0x10
10003661:	81 e3 00 00 0f 00    	and    ebx,0xf0000
10003667:	09 d3                	or     ebx,edx
10003669:	39 de                	cmp    esi,ebx
1000366b:	0f 82 cf 00 00 00    	jb     10003740 <ssfn_render+0x1dc1>
10003671:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
10003674:	89 d7                	mov    edi,edx
10003676:	c1 e7 10             	shl    edi,0x10
10003679:	81 e7 00 00 0f 00    	and    edi,0xf0000
1000367f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10003683:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
10003687:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
1000368b:	39 fe                	cmp    esi,edi
1000368d:	0f 87 ad 00 00 00    	ja     10003740 <ssfn_render+0x1dc1>
10003693:	29 de                	sub    esi,ebx
10003695:	c0 ea 04             	shr    dl,0x4
10003698:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
1000369f:	0f b6 d2             	movzx  edx,dl
100036a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100036a6:	89 d3                	mov    ebx,edx
100036a8:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
100036ac:	c1 e3 10             	shl    ebx,0x10
100036af:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100036b2:	09 da                	or     edx,ebx
100036b4:	c0 e8 04             	shr    al,0x4
100036b7:	c1 e0 18             	shl    eax,0x18
100036ba:	09 c2                	or     edx,eax
100036bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100036c0:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
100036c3:	01 c2                	add    edx,eax
100036c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100036c8:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
100036cc:	39 d7                	cmp    edi,edx
100036ce:	76 78                	jbe    10003748 <ssfn_render+0x1dc9>
100036d0:	8a 1a                	mov    bl,BYTE PTR [edx]
100036d2:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
100036d9:	89 de                	mov    esi,ebx
100036db:	83 e6 7f             	and    esi,0x7f
100036de:	39 c6                	cmp    esi,eax
100036e0:	73 1d                	jae    100036ff <ssfn_render+0x1d80>
100036e2:	48                   	dec    eax
100036e3:	bb 02 00 00 00       	mov    ebx,0x2
100036e8:	29 f0                	sub    eax,esi
100036ea:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
100036f1:	0f b6 02             	movzx  eax,BYTE PTR [edx]
100036f4:	84 c0                	test   al,al
100036f6:	78 03                	js     100036fb <ssfn_render+0x1d7c>
100036f8:	8d 58 02             	lea    ebx,[eax+0x2]
100036fb:	01 da                	add    edx,ebx
100036fd:	eb cd                	jmp    100036cc <ssfn_render+0x1d4d>
100036ff:	be 01 00 00 00       	mov    esi,0x1
10003704:	84 db                	test   bl,bl
10003706:	78 03                	js     1000370b <ssfn_render+0x1d8c>
10003708:	8d 70 01             	lea    esi,[eax+0x1]
1000370b:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
1000370f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003713:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10003718:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
1000371c:	99                   	cdq    
1000371d:	f7 fb                	idiv   ebx
1000371f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10003724:	74 0d                	je     10003733 <ssfn_render+0x1db4>
10003726:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000372d:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10003731:	eb 15                	jmp    10003748 <ssfn_render+0x1dc9>
10003733:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
1000373a:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
1000373e:	eb 08                	jmp    10003748 <ssfn_render+0x1dc9>
10003740:	83 c0 08             	add    eax,0x8
10003743:	e9 00 ff ff ff       	jmp    10003648 <ssfn_render+0x1cc9>
10003748:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
1000374c:	e9 5d fe ff ff       	jmp    100035ae <ssfn_render+0x1c2f>
10003751:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
10003758:	eb 73                	jmp    100037cd <ssfn_render+0x1e4e>
1000375a:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10003765:	e9 50 e4 ff ff       	jmp    10001bba <ssfn_render+0x23b>
1000376a:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10003771:	57                   	push   edi
10003772:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10003779:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10003780:	e8 5a d7 ff ff       	call   10000edf <_ssfn_c>
10003785:	5f                   	pop    edi
10003786:	85 c0                	test   eax,eax
10003788:	0f 84 25 e4 ff ff    	je     10001bb3 <ssfn_render+0x234>
1000378e:	e9 a2 e4 ff ff       	jmp    10001c35 <ssfn_render+0x2b6>
10003793:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10003796:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
1000379a:	75 0c                	jne    100037a8 <ssfn_render+0x1e29>
1000379c:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100037a3:	e9 3b e4 ff ff       	jmp    10001be3 <ssfn_render+0x264>
100037a8:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100037af:	57                   	push   edi
100037b0:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100037b7:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100037be:	e8 1c d7 ff ff       	call   10000edf <_ssfn_c>
100037c3:	59                   	pop    ecx
100037c4:	85 c0                	test   eax,eax
100037c6:	74 d4                	je     1000379c <ssfn_render+0x1e1d>
100037c8:	e9 68 e4 ff ff       	jmp    10001c35 <ssfn_render+0x2b6>
100037cd:	81 c4 dc 05 01 00    	add    esp,0x105dc
100037d3:	89 c8                	mov    eax,ecx
100037d5:	5b                   	pop    ebx
100037d6:	5e                   	pop    esi
100037d7:	5f                   	pop    edi
100037d8:	5d                   	pop    ebp
100037d9:	c3                   	ret    

100037da <ssfn_bbox>:
100037da:	55                   	push   ebp
100037db:	57                   	push   edi
100037dc:	56                   	push   esi
100037dd:	53                   	push   ebx
100037de:	83 ec 3c             	sub    esp,0x3c
100037e1:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
100037e6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
100037ea:	0f 94 c0             	sete   al
100037ed:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
100037f2:	0f 94 c2             	sete   dl
100037f5:	09 d0                	or     eax,edx
100037f7:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
100037fc:	0f 94 c2             	sete   dl
100037ff:	09 d0                	or     eax,edx
10003801:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
10003806:	0f 94 c2             	sete   dl
10003809:	09 d0                	or     eax,edx
1000380b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003810:	0f 94 c2             	sete   dl
10003813:	08 d0                	or     al,dl
10003815:	0f 85 7c 01 00 00    	jne    10003997 <ssfn_bbox+0x1bd>
1000381b:	85 db                	test   ebx,ebx
1000381d:	0f 84 74 01 00 00    	je     10003997 <ssfn_bbox+0x1bd>
10003823:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003827:	31 f6                	xor    esi,esi
10003829:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000382f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003833:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003839:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
1000383d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003843:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003847:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000384d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10003851:	80 38 00             	cmp    BYTE PTR [eax],0x0
10003854:	0f 84 42 01 00 00    	je     1000399c <ssfn_bbox+0x1c2>
1000385a:	8d 54 24 18          	lea    edx,[esp+0x18]
1000385e:	b9 06 00 00 00       	mov    ecx,0x6
10003863:	89 d7                	mov    edi,edx
10003865:	89 f0                	mov    eax,esi
10003867:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10003871:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003873:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
1000387b:	31 ff                	xor    edi,edi
1000387d:	bd 01 00 00 00       	mov    ebp,0x1
10003882:	50                   	push   eax
10003883:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10003887:	8d 44 24 20          	lea    eax,[esp+0x20]
1000388b:	50                   	push   eax
1000388c:	53                   	push   ebx
1000388d:	e8 fc ff ff ff       	call   1000388e <ssfn_bbox+0xb4>	1000388e: R_386_PC32	ssfn_render
10003892:	83 c4 10             	add    esp,0x10
10003895:	89 c6                	mov    esi,eax
10003897:	85 c0                	test   eax,eax
10003899:	74 6f                	je     1000390a <ssfn_bbox+0x130>
1000389b:	0f 88 fb 00 00 00    	js     1000399c <ssfn_bbox+0x1c2>
100038a1:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100038a7:	85 c0                	test   eax,eax
100038a9:	0f 84 ed 00 00 00    	je     1000399c <ssfn_bbox+0x1c2>
100038af:	85 ed                	test   ebp,ebp
100038b1:	74 0b                	je     100038be <ssfn_bbox+0xe4>
100038b3:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
100038b9:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
100038be:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100038c2:	74 12                	je     100038d6 <ssfn_bbox+0xfc>
100038c4:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
100038ca:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100038ce:	7d 2f                	jge    100038ff <ssfn_bbox+0x125>
100038d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100038d4:	eb 29                	jmp    100038ff <ssfn_bbox+0x125>
100038d6:	0f b7 08             	movzx  ecx,WORD PTR [eax]
100038d9:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
100038de:	39 cd                	cmp    ebp,ecx
100038e0:	7d 05                	jge    100038e7 <ssfn_bbox+0x10d>
100038e2:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
100038e7:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
100038eb:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
100038f0:	84 d2                	test   dl,dl
100038f2:	75 04                	jne    100038f8 <ssfn_bbox+0x11e>
100038f4:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
100038f8:	01 ca                	add    edx,ecx
100038fa:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
100038ff:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10003903:	31 ed                	xor    ebp,ebp
10003905:	e9 78 ff ff ff       	jmp    10003882 <ssfn_bbox+0xa8>
1000390a:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10003911:	74 23                	je     10003936 <ssfn_bbox+0x15c>
10003913:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003916:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
1000391a:	75 1a                	jne    10003936 <ssfn_bbox+0x15c>
1000391c:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
10003922:	b9 04 00 00 00       	mov    ecx,0x4
10003927:	99                   	cdq    
10003928:	f7 f9                	idiv   ecx
1000392a:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
1000392f:	29 f8                	sub    eax,edi
10003931:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
10003936:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
1000393c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003940:	74 29                	je     1000396b <ssfn_bbox+0x191>
10003942:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003947:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000394b:	89 01                	mov    DWORD PTR [ecx],eax
1000394d:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003951:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
10003957:	89 01                	mov    DWORD PTR [ecx],eax
10003959:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000395d:	89 38                	mov    DWORD PTR [eax],edi
1000395f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003963:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10003967:	89 38                	mov    DWORD PTR [eax],edi
10003969:	eb 31                	jmp    1000399c <ssfn_bbox+0x1c2>
1000396b:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
10003970:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
10003974:	89 07                	mov    DWORD PTR [edi],eax
10003976:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
1000397b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
1000397f:	89 07                	mov    DWORD PTR [edi],eax
10003981:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003985:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000398b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000398f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003995:	eb 05                	jmp    1000399c <ssfn_bbox+0x1c2>
10003997:	be fc ff ff ff       	mov    esi,0xfffffffc
1000399c:	83 c4 3c             	add    esp,0x3c
1000399f:	89 f0                	mov    eax,esi
100039a1:	5b                   	pop    ebx
100039a2:	5e                   	pop    esi
100039a3:	5f                   	pop    edi
100039a4:	5d                   	pop    ebp
100039a5:	c3                   	ret    

100039a6 <ssfn_text>:
100039a6:	55                   	push   ebp
100039a7:	57                   	push   edi
100039a8:	56                   	push   esi
100039a9:	53                   	push   ebx
100039aa:	83 ec 1c             	sub    esp,0x1c
100039ad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100039b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
100039b5:	85 f6                	test   esi,esi
100039b7:	0f 84 b2 00 00 00    	je     10003a6f <ssfn_text+0xc9>
100039bd:	85 ed                	test   ebp,ebp
100039bf:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
100039c4:	0f 84 a5 00 00 00    	je     10003a6f <ssfn_text+0xc9>
100039ca:	83 ec 0c             	sub    esp,0xc
100039cd:	6a 18                	push   0x18
100039cf:	e8 fc ff ff ff       	call   100039d0 <ssfn_text+0x2a>	100039d0: R_386_PC32	malloc
100039d4:	83 c4 10             	add    esp,0x10
100039d7:	89 c3                	mov    ebx,eax
100039d9:	85 c0                	test   eax,eax
100039db:	0f 84 8e 00 00 00    	je     10003a6f <ssfn_text+0xc9>
100039e1:	31 c0                	xor    eax,eax
100039e3:	b9 06 00 00 00       	mov    ecx,0x6
100039e8:	89 df                	mov    edi,ebx
100039ea:	80 3e 00             	cmp    BYTE PTR [esi],0x0
100039ed:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100039ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100039f3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100039f6:	74 79                	je     10003a71 <ssfn_text+0xcb>
100039f8:	8d 43 0c             	lea    eax,[ebx+0xc]
100039fb:	52                   	push   edx
100039fc:	52                   	push   edx
100039fd:	50                   	push   eax
100039fe:	8d 43 0a             	lea    eax,[ebx+0xa]
10003a01:	50                   	push   eax
10003a02:	8d 43 06             	lea    eax,[ebx+0x6]
10003a05:	50                   	push   eax
10003a06:	8d 43 04             	lea    eax,[ebx+0x4]
10003a09:	50                   	push   eax
10003a0a:	56                   	push   esi
10003a0b:	55                   	push   ebp
10003a0c:	e8 fc ff ff ff       	call   10003a0d <ssfn_text+0x67>	10003a0d: R_386_PC32	ssfn_bbox
10003a11:	83 c4 20             	add    esp,0x20
10003a14:	85 c0                	test   eax,eax
10003a16:	75 59                	jne    10003a71 <ssfn_text+0xcb>
10003a18:	83 ec 0c             	sub    esp,0xc
10003a1b:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
10003a1f:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10003a23:	0f af c8             	imul   ecx,eax
10003a26:	c1 e1 02             	shl    ecx,0x2
10003a29:	51                   	push   ecx
10003a2a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10003a2e:	e8 fc ff ff ff       	call   10003a2f <ssfn_text+0x89>	10003a2f: R_386_PC32	malloc
10003a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003a37:	89 c7                	mov    edi,eax
10003a39:	89 03                	mov    DWORD PTR [ebx],eax
10003a3b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
10003a3f:	83 c4 10             	add    esp,0x10
10003a42:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003a44:	50                   	push   eax
10003a45:	56                   	push   esi
10003a46:	53                   	push   ebx
10003a47:	55                   	push   ebp
10003a48:	e8 fc ff ff ff       	call   10003a49 <ssfn_text+0xa3>	10003a49: R_386_PC32	ssfn_render
10003a4d:	83 c4 10             	add    esp,0x10
10003a50:	85 c0                	test   eax,eax
10003a52:	7e 04                	jle    10003a58 <ssfn_text+0xb2>
10003a54:	01 c6                	add    esi,eax
10003a56:	eb ec                	jmp    10003a44 <ssfn_text+0x9e>
10003a58:	74 17                	je     10003a71 <ssfn_text+0xcb>
10003a5a:	83 ec 0c             	sub    esp,0xc
10003a5d:	ff 33                	push   DWORD PTR [ebx]
10003a5f:	e8 fc ff ff ff       	call   10003a60 <ssfn_text+0xba>	10003a60: R_386_PC32	free
10003a64:	89 1c 24             	mov    DWORD PTR [esp],ebx
10003a67:	e8 fc ff ff ff       	call   10003a68 <ssfn_text+0xc2>	10003a68: R_386_PC32	free
10003a6c:	83 c4 10             	add    esp,0x10
10003a6f:	31 db                	xor    ebx,ebx
10003a71:	83 c4 1c             	add    esp,0x1c
10003a74:	89 d8                	mov    eax,ebx
10003a76:	5b                   	pop    ebx
10003a77:	5e                   	pop    esi
10003a78:	5f                   	pop    edi
10003a79:	5d                   	pop    ebp
10003a7a:	c3                   	ret    
10003a7b:	90                   	nop

10003a7c <NIContext::drvPutpixel4(int, int, unsigned int)>:
10003a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003a80:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003a86:	8b 10                	mov    edx,DWORD PTR [eax]
10003a88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003a8c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
10003a8f:	90                   	nop

10003a90 <NIContext::drvDarken4(int, int, int)>:
10003a90:	55                   	push   ebp
10003a91:	57                   	push   edi
10003a92:	56                   	push   esi
10003a93:	53                   	push   ebx
10003a94:	83 ec 20             	sub    esp,0x20
10003a97:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10003a9b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
10003a9f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10003aa3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
10003aa7:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
10003aad:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10003ab1:	8b 10                	mov    edx,DWORD PTR [eax]
10003ab3:	56                   	push   esi
10003ab4:	53                   	push   ebx
10003ab5:	50                   	push   eax
10003ab6:	ff 52 34             	call   DWORD PTR [edx+0x34]
10003ab9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003abd:	89 c2                	mov    edx,eax
10003abf:	0f b6 ec             	movzx  ebp,ah
10003ac2:	c1 ea 10             	shr    edx,0x10
10003ac5:	0f af e9             	imul   ebp,ecx
10003ac8:	0f b6 d2             	movzx  edx,dl
10003acb:	0f b6 c0             	movzx  eax,al
10003ace:	0f af d1             	imul   edx,ecx
10003ad1:	0f af c1             	imul   eax,ecx
10003ad4:	c1 ea 07             	shr    edx,0x7
10003ad7:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
10003add:	c1 e8 07             	shr    eax,0x7
10003ae0:	8b 39                	mov    edi,DWORD PTR [ecx]
10003ae2:	c1 e2 10             	shl    edx,0x10
10003ae5:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
10003ae9:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
10003aed:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10003af1:	c1 ed 07             	shr    ebp,0x7
10003af4:	c1 e5 08             	shl    ebp,0x8
10003af7:	09 ea                	or     edx,ebp
10003af9:	09 c2                	or     edx,eax
10003afb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
10003aff:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
10003b02:	83 c4 2c             	add    esp,0x2c
10003b05:	5b                   	pop    ebx
10003b06:	5e                   	pop    esi
10003b07:	5f                   	pop    edi
10003b08:	5d                   	pop    ebp
10003b09:	ff e0                	jmp    eax
10003b0b:	90                   	nop

10003b0c <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
10003b0c:	55                   	push   ebp
10003b0d:	b9 00 40 00 00       	mov    ecx,0x4000
10003b12:	57                   	push   edi
10003b13:	b0 ff                	mov    al,0xff
10003b15:	56                   	push   esi
10003b16:	53                   	push   ebx
10003b17:	83 ec 3c             	sub    esp,0x3c
10003b1a:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10003b1e:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10003b22:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10003b25:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
10003b29:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003b2b:	85 db                	test   ebx,ebx
10003b2d:	75 10                	jne    10003b3f <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
10003b2f:	83 ec 0c             	sub    esp,0xc
10003b32:	68 a8 5c 00 10       	push   0x10005ca8	10003b33: R_386_32	.text
10003b37:	e8 fc ff ff ff       	call   10003b38 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	10003b38: R_386_PC32	KePanic(char const*)
10003b3c:	83 c4 10             	add    esp,0x10
10003b3f:	50                   	push   eax
10003b40:	50                   	push   eax
10003b41:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003b45:	50                   	push   eax
10003b46:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003b4a:	50                   	push   eax
10003b4b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003b4f:	50                   	push   eax
10003b50:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003b54:	50                   	push   eax
10003b55:	56                   	push   esi
10003b56:	68 00 00 00 00       	push   0x0	10003b57: R_386_32	ssfn_ctx
10003b5b:	e8 fc ff ff ff       	call   10003b5c <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	10003b5c: R_386_PC32	ssfn_bbox
10003b60:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003b63:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
10003b6b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10003b6f:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
10003b77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10003b7b:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
10003b80:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10003b84:	0d 00 00 00 ff       	or     eax,0xff000000
10003b89:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10003b8d:	83 c4 1c             	add    esp,0x1c
10003b90:	56                   	push   esi
10003b91:	8d 44 24 20          	lea    eax,[esp+0x20]
10003b95:	50                   	push   eax
10003b96:	68 00 00 00 00       	push   0x0	10003b97: R_386_32	ssfn_ctx
10003b9b:	e8 fc ff ff ff       	call   10003b9c <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	10003b9c: R_386_PC32	ssfn_render
10003ba0:	83 c4 10             	add    esp,0x10
10003ba3:	89 03                	mov    DWORD PTR [ebx],eax
10003ba5:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
10003ba9:	31 db                	xor    ebx,ebx
10003bab:	89 f0                	mov    eax,esi
10003bad:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
10003bb1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10003bb5:	7e 3f                	jle    10003bf6 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
10003bb7:	31 ff                	xor    edi,edi
10003bb9:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003bbe:	39 f8                	cmp    eax,edi
10003bc0:	7e 2c                	jle    10003bee <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
10003bc2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003bc5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10003bc8:	83 f8 ff             	cmp    eax,0xffffffff
10003bcb:	74 1d                	je     10003bea <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
10003bcd:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
10003bd3:	25 ff ff ff 00       	and    eax,0xffffff
10003bd8:	8b 0a                	mov    ecx,DWORD PTR [edx]
10003bda:	50                   	push   eax
10003bdb:	56                   	push   esi
10003bdc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003be0:	01 f8                	add    eax,edi
10003be2:	50                   	push   eax
10003be3:	52                   	push   edx
10003be4:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10003be7:	83 c4 10             	add    esp,0x10
10003bea:	43                   	inc    ebx
10003beb:	47                   	inc    edi
10003bec:	eb cb                	jmp    10003bb9 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
10003bee:	29 c3                	sub    ebx,eax
10003bf0:	46                   	inc    esi
10003bf1:	83 c3 40             	add    ebx,0x40
10003bf4:	eb b5                	jmp    10003bab <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
10003bf6:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003bfb:	83 c4 3c             	add    esp,0x3c
10003bfe:	5b                   	pop    ebx
10003bff:	5e                   	pop    esi
10003c00:	5f                   	pop    edi
10003c01:	5d                   	pop    ebp
10003c02:	c3                   	ret    
10003c03:	90                   	nop

10003c04 <NIContext::~NIContext()>:
10003c04:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10003c08: R_386_32	ssfn_ctx
10003c0c:	e9 00 db ff ff       	jmp    10001711 <ssfn_free>
10003c11:	90                   	nop

10003c12 <NIContext::NIContext(Video*, int, int, int, int)>:
10003c12:	55                   	push   ebp
10003c13:	ba 00 00 00 00       	mov    edx,0x0	10003c14: R_386_32	ssfn_ctx
10003c18:	57                   	push   edi
10003c19:	b9 72 3d 00 00       	mov    ecx,0x3d72
10003c1e:	56                   	push   esi
10003c1f:	89 d7                	mov    edi,edx
10003c21:	53                   	push   ebx
10003c22:	81 ec 48 02 00 00    	sub    esp,0x248
10003c28:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
10003c2f:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
10003c36:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
10003c3c:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
10003c43:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
10003c49:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
10003c50:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
10003c56:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
10003c5d:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
10003c63:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
10003c6a:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
10003c70:	31 c0                	xor    eax,eax
10003c72:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003c74:	68 00 40 00 00       	push   0x4000
10003c79:	e8 fc ff ff ff       	call   10003c7a <NIContext::NIContext(Video*, int, int, int, int)+0x68>	10003c7a: R_386_PC32	malloc
10003c7e:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
10003c88:	89 03                	mov    DWORD PTR [ebx],eax
10003c8a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10003c91:	e8 fc ff ff ff       	call   10003c92 <NIContext::NIContext(Video*, int, int, int, int)+0x80>	10003c92: R_386_PC32	malloc
10003c96:	83 c4 0c             	add    esp,0xc
10003c99:	89 c6                	mov    esi,eax
10003c9b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10003c9d: R_386_32	kernelProcess
10003ca1:	68 c1 5c 00 10       	push   0x10005cc1	10003ca2: R_386_32	.text
10003ca6:	50                   	push   eax
10003ca7:	e8 fc ff ff ff       	call   10003ca8 <NIContext::NIContext(Video*, int, int, int, int)+0x96>	10003ca8: R_386_PC32	Directory::Directory(char const*, Process*)
10003cac:	83 c4 10             	add    esp,0x10
10003caf:	85 f6                	test   esi,esi
10003cb1:	75 10                	jne    10003cc3 <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
10003cb3:	83 ec 0c             	sub    esp,0xc
10003cb6:	68 d5 5c 00 10       	push   0x10005cd5	10003cb7: R_386_32	.text
10003cbb:	e8 fc ff ff ff       	call   10003cbc <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	10003cbc: R_386_PC32	KePanic(char const*)
10003cc0:	83 c4 10             	add    esp,0x10
10003cc3:	83 ec 0c             	sub    esp,0xc
10003cc6:	56                   	push   esi
10003cc7:	e8 fc ff ff ff       	call   10003cc8 <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	10003cc8: R_386_PC32	Directory::open()
10003ccc:	83 c4 10             	add    esp,0x10
10003ccf:	85 c0                	test   eax,eax
10003cd1:	75 e0                	jne    10003cb3 <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
10003cd3:	83 ec 0c             	sub    esp,0xc
10003cd6:	8b 06                	mov    eax,DWORD PTR [esi]
10003cd8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
10003cdc:	51                   	push   ecx
10003cdd:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
10003ce4:	52                   	push   edx
10003ce5:	6a 00                	push   0x0
10003ce7:	68 10 01 00 00       	push   0x110
10003cec:	56                   	push   esi
10003ced:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003cf0:	83 c4 20             	add    esp,0x20
10003cf3:	85 c0                	test   eax,eax
10003cf5:	0f 85 a0 01 00 00    	jne    10003e9b <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003cfb:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
10003d03:	0f 85 92 01 00 00    	jne    10003e9b <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003d09:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
10003d10:	83 c9 ff             	or     ecx,0xffffffff
10003d13:	83 ec 0c             	sub    esp,0xc
10003d16:	89 ef                	mov    edi,ebp
10003d18:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
10003d1a:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
10003d20:	89 ca                	mov    edx,ecx
10003d22:	f7 d2                	not    edx
10003d24:	52                   	push   edx
10003d25:	e8 fc ff ff ff       	call   10003d26 <NIContext::NIContext(Video*, int, int, int, int)+0x114>	10003d26: R_386_PC32	malloc
10003d2a:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
10003d2e:	47                   	inc    edi
10003d2f:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
10003d35:	5a                   	pop    edx
10003d36:	59                   	pop    ecx
10003d37:	55                   	push   ebp
10003d38:	50                   	push   eax
10003d39:	e8 fc ff ff ff       	call   10003d3a <NIContext::NIContext(Video*, int, int, int, int)+0x128>	10003d3a: R_386_PC32	strcpy
10003d3e:	5f                   	pop    edi
10003d3f:	58                   	pop    eax
10003d40:	68 f0 5c 00 10       	push   0x10005cf0	10003d41: R_386_32	.text
10003d45:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
10003d49:	57                   	push   edi
10003d4a:	e8 fc ff ff ff       	call   10003d4b <NIContext::NIContext(Video*, int, int, int, int)+0x139>	10003d4b: R_386_PC32	strcpy
10003d4f:	58                   	pop    eax
10003d50:	5a                   	pop    edx
10003d51:	55                   	push   ebp
10003d52:	57                   	push   edi
10003d53:	e8 fc ff ff ff       	call   10003d54 <NIContext::NIContext(Video*, int, int, int, int)+0x142>	10003d54: R_386_PC32	strcat
10003d58:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10003d5f:	e8 fc ff ff ff       	call   10003d60 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	10003d60: R_386_PC32	malloc
10003d64:	83 c4 0c             	add    esp,0xc
10003d67:	89 c5                	mov    ebp,eax
10003d69:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10003d6b: R_386_32	kernelProcess
10003d6f:	57                   	push   edi
10003d70:	50                   	push   eax
10003d71:	e8 fc ff ff ff       	call   10003d72 <NIContext::NIContext(Video*, int, int, int, int)+0x160>	10003d72: R_386_PC32	File::File(char const*, Process*)
10003d76:	83 c4 10             	add    esp,0x10
10003d79:	85 ed                	test   ebp,ebp
10003d7b:	0f 84 52 ff ff ff    	je     10003cd3 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
10003d81:	50                   	push   eax
10003d82:	50                   	push   eax
10003d83:	6a 01                	push   0x1
10003d85:	55                   	push   ebp
10003d86:	e8 fc ff ff ff       	call   10003d87 <NIContext::NIContext(Video*, int, int, int, int)+0x175>	10003d87: R_386_PC32	File::open(FileOpenMode)
10003d8b:	83 c4 10             	add    esp,0x10
10003d8e:	85 c0                	test   eax,eax
10003d90:	74 0c                	je     10003d9e <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
10003d92:	83 ec 0c             	sub    esp,0xc
10003d95:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003d98:	55                   	push   ebp
10003d99:	e9 b4 00 00 00       	jmp    10003e52 <NIContext::NIContext(Video*, int, int, int, int)+0x240>
10003d9e:	50                   	push   eax
10003d9f:	8d 44 24 17          	lea    eax,[esp+0x17]
10003da3:	50                   	push   eax
10003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
10003da8:	50                   	push   eax
10003da9:	55                   	push   ebp
10003daa:	e8 fc ff ff ff       	call   10003dab <NIContext::NIContext(Video*, int, int, int, int)+0x199>	10003dab: R_386_PC32	File::stat(unsigned long long*, bool*)
10003daf:	83 c4 10             	add    esp,0x10
10003db2:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
10003db7:	74 0e                	je     10003dc7 <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
10003db9:	83 ec 0c             	sub    esp,0xc
10003dbc:	55                   	push   ebp
10003dbd:	e8 fc ff ff ff       	call   10003dbe <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	10003dbe: R_386_PC32	File::close()
10003dc2:	e9 85 00 00 00       	jmp    10003e4c <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
10003dc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10003dcb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10003dcf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003dd3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10003dd7:	83 ec 0c             	sub    esp,0xc
10003dda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10003dde:	e8 fc ff ff ff       	call   10003ddf <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	10003ddf: R_386_PC32	malloc
10003de3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003de7:	58                   	pop    eax
10003de8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003deb:	8d 54 24 20          	lea    edx,[esp+0x20]
10003def:	52                   	push   edx
10003df0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10003df4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003df8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003dfc:	55                   	push   ebp
10003dfd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003e00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003e04:	83 c4 1c             	add    esp,0x1c
10003e07:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003e0b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003e0f:	68 05 5d 00 10       	push   0x10005d05	10003e10: R_386_32	.text
10003e14:	e8 fc ff ff ff       	call   10003e15 <NIContext::NIContext(Video*, int, int, int, int)+0x203>	10003e15: R_386_PC32	Dbg::kprintf(char const*, ...)
10003e19:	83 c4 10             	add    esp,0x10
10003e1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003e20:	85 c0                	test   eax,eax
10003e22:	75 15                	jne    10003e39 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003e24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003e28:	89 c1                	mov    ecx,eax
10003e2a:	c1 f9 1f             	sar    ecx,0x1f
10003e2d:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10003e31:	75 06                	jne    10003e39 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003e33:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10003e37:	74 24                	je     10003e5d <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
10003e39:	83 ec 0c             	sub    esp,0xc
10003e3c:	55                   	push   ebp
10003e3d:	e8 fc ff ff ff       	call   10003e3e <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	10003e3e: R_386_PC32	File::close()
10003e42:	58                   	pop    eax
10003e43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10003e47:	e8 fc ff ff ff       	call   10003e48 <NIContext::NIContext(Video*, int, int, int, int)+0x236>	10003e48: R_386_PC32	free
10003e4c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003e4f:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003e52:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003e55:	83 c4 10             	add    esp,0x10
10003e58:	e9 76 fe ff ff       	jmp    10003cd3 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
10003e5d:	50                   	push   eax
10003e5e:	50                   	push   eax
10003e5f:	57                   	push   edi
10003e60:	68 19 5d 00 10       	push   0x10005d19	10003e61: R_386_32	.text
10003e65:	e8 fc ff ff ff       	call   10003e66 <NIContext::NIContext(Video*, int, int, int, int)+0x254>	10003e66: R_386_PC32	Dbg::kprintf(char const*, ...)
10003e6a:	5a                   	pop    edx
10003e6b:	59                   	pop    ecx
10003e6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10003e70:	68 00 00 00 00       	push   0x0	10003e71: R_386_32	ssfn_ctx
10003e75:	e8 fc ff ff ff       	call   10003e76 <NIContext::NIContext(Video*, int, int, int, int)+0x264>	10003e76: R_386_PC32	ssfn_load
10003e7a:	5b                   	pop    ebx
10003e7b:	5f                   	pop    edi
10003e7c:	50                   	push   eax
10003e7d:	68 2a 5d 00 10       	push   0x10005d2a	10003e7e: R_386_32	.text
10003e82:	e8 fc ff ff ff       	call   10003e83 <NIContext::NIContext(Video*, int, int, int, int)+0x271>	10003e83: R_386_PC32	Dbg::kprintf(char const*, ...)
10003e87:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003e8a:	e8 fc ff ff ff       	call   10003e8b <NIContext::NIContext(Video*, int, int, int, int)+0x279>	10003e8b: R_386_PC32	File::close()
10003e8f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003e92:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003e95:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003e98:	83 c4 10             	add    esp,0x10
10003e9b:	83 ec 0c             	sub    esp,0xc
10003e9e:	56                   	push   esi
10003e9f:	e8 fc ff ff ff       	call   10003ea0 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	10003ea0: R_386_PC32	Directory::close()
10003ea4:	8b 06                	mov    eax,DWORD PTR [esi]
10003ea6:	89 34 24             	mov    DWORD PTR [esp],esi
10003ea9:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003eac:	b8 00 00 00 00       	mov    eax,0x0	10003ead: R_386_32	ssfn_ctx
10003eb1:	e8 f7 cb ff ff       	call   10000aad <_ssfn_fc.part.1>
10003eb6:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	10003eb8: R_386_32	ssfn_ctx
10003ec0:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	10003ec2: R_386_32	ssfn_ctx
10003eca:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	10003ecc: R_386_32	ssfn_ctx
10003ed4:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	10003ed6: R_386_32	ssfn_ctx
10003ede:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	10003ee0: R_386_32	ssfn_ctx
10003ee8:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	10003eea: R_386_32	ssfn_ctx
10003ef2:	81 c4 4c 02 00 00    	add    esp,0x24c
10003ef8:	5b                   	pop    ebx
10003ef9:	5e                   	pop    esi
10003efa:	5f                   	pop    edi
10003efb:	5d                   	pop    ebp
10003efc:	c3                   	ret    
10003efd:	90                   	nop

10003efe <NiCreateEvent(NIWindow*, int, bool)>:
10003efe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003f02:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003f06:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10003f09:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
10003f0f:	81 e2 00 00 00 80    	and    edx,0x80000000
10003f15:	09 ca                	or     edx,ecx
10003f17:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10003f1b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10003f1e:	c1 e1 07             	shl    ecx,0x7
10003f21:	8a 50 07             	mov    dl,BYTE PTR [eax+0x7]
10003f24:	83 e2 7f             	and    edx,0x7f
10003f27:	09 ca                	or     edx,ecx
10003f29:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10003f2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10003f30:	89 10                	mov    DWORD PTR [eax],edx
10003f32:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003f34: R_386_32	mouseDesktop
10003f38:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
10003f3b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
10003f3e:	66 89 48 08          	mov    WORD PTR [eax+0x8],cx
10003f42:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
10003f46:	c2 04 00             	ret    0x4

10003f49 <NiLoadCursors()>:
10003f49:	55                   	push   ebp
10003f4a:	57                   	push   edi
10003f4b:	56                   	push   esi
10003f4c:	53                   	push   ebx
10003f4d:	83 ec 38             	sub    esp,0x38
10003f50:	68 14 01 00 00       	push   0x114
10003f55:	e8 fc ff ff ff       	call   10003f56 <NiLoadCursors()+0xd>	10003f56: R_386_PC32	malloc
10003f5a:	83 c4 0c             	add    esp,0xc
10003f5d:	89 c5                	mov    ebp,eax
10003f5f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10003f61: R_386_32	kernelProcess
10003f65:	68 dc 5f 00 10       	push   0x10005fdc	10003f66: R_386_32	.text
10003f6a:	50                   	push   eax
10003f6b:	e8 fc ff ff ff       	call   10003f6c <NiLoadCursors()+0x23>	10003f6c: R_386_PC32	File::File(char const*, Process*)
10003f70:	58                   	pop    eax
10003f71:	5a                   	pop    edx
10003f72:	6a 01                	push   0x1
10003f74:	55                   	push   ebp
10003f75:	e8 fc ff ff ff       	call   10003f76 <NiLoadCursors()+0x2d>	10003f76: R_386_PC32	File::open(FileOpenMode)
10003f7a:	83 c4 10             	add    esp,0x10
10003f7d:	85 c0                	test   eax,eax
10003f7f:	74 0a                	je     10003f8b <NiLoadCursors()+0x42>
10003f81:	83 ec 0c             	sub    esp,0xc
10003f84:	68 fb 5f 00 10       	push   0x10005ffb	10003f85: R_386_32	.text
10003f89:	eb 4c                	jmp    10003fd7 <NiLoadCursors()+0x8e>
10003f8b:	53                   	push   ebx
10003f8c:	8d 44 24 17          	lea    eax,[esp+0x17]
10003f90:	50                   	push   eax
10003f91:	8d 44 24 20          	lea    eax,[esp+0x20]
10003f95:	50                   	push   eax
10003f96:	55                   	push   ebp
10003f97:	e8 fc ff ff ff       	call   10003f98 <NiLoadCursors()+0x4f>	10003f98: R_386_PC32	File::stat(unsigned long long*, bool*)
10003f9c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10003fa0:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10003fa4:	89 34 24             	mov    DWORD PTR [esp],esi
10003fa7:	e8 fc ff ff ff       	call   10003fa8 <NiLoadCursors()+0x5f>	10003fa8: R_386_PC32	malloc
10003fac:	89 c3                	mov    ebx,eax
10003fae:	58                   	pop    eax
10003faf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003fb2:	8d 54 24 20          	lea    edx,[esp+0x20]
10003fb6:	52                   	push   edx
10003fb7:	53                   	push   ebx
10003fb8:	57                   	push   edi
10003fb9:	56                   	push   esi
10003fba:	55                   	push   ebp
10003fbb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003fbe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003fc2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10003fc6:	83 c4 20             	add    esp,0x20
10003fc9:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10003fcd:	74 12                	je     10003fe1 <NiLoadCursors()+0x98>
10003fcf:	83 ec 0c             	sub    esp,0xc
10003fd2:	68 0f 60 00 10       	push   0x1000600f	10003fd3: R_386_32	.text
10003fd7:	e8 fc ff ff ff       	call   10003fd8 <NiLoadCursors()+0x8f>	10003fd8: R_386_PC32	Dbg::kprintf(char const*, ...)
10003fdc:	e9 3d 01 00 00       	jmp    1000411e <NiLoadCursors()+0x1d5>
10003fe1:	6a 00                	push   0x0
10003fe3:	31 ed                	xor    ebp,ebp
10003fe5:	68 04 01 00 00       	push   0x104
10003fea:	52                   	push   edx
10003feb:	50                   	push   eax
10003fec:	e8 fc ff ff ff       	call   10003fed <NiLoadCursors()+0xa4>	10003fed: R_386_PC32	__udivdi3
10003ff1:	5a                   	pop    edx
10003ff2:	59                   	pop    ecx
10003ff3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003ff7:	50                   	push   eax
10003ff8:	68 23 60 00 10       	push   0x10006023	10003ff9: R_386_32	.text
10003ffd:	e8 fc ff ff ff       	call   10003ffe <NiLoadCursors()+0xb5>	10003ffe: R_386_PC32	Dbg::kprintf(char const*, ...)
10004002:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004005:	e8 fc ff ff ff       	call   10004006 <NiLoadCursors()+0xbd>	10004006: R_386_PC32	Dbg::kprintf(char const*, ...)
1000400a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000400e:	8d 04 83             	lea    eax,[ebx+eax*4]
10004011:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004015:	83 c4 10             	add    esp,0x10
10004018:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
1000401c:	0f 8d f3 00 00 00    	jge    10004115 <NiLoadCursors()+0x1cc>
10004022:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10004025:	50                   	push   eax
10004026:	6a 04                	push   0x4
10004028:	68 30 60 00 10       	push   0x10006030	10004029: R_386_32	.text
1000402d:	56                   	push   esi
1000402e:	e8 fc ff ff ff       	call   1000402f <NiLoadCursors()+0xe6>	1000402f: R_386_PC32	memcmp
10004033:	83 c4 10             	add    esp,0x10
10004036:	85 c0                	test   eax,eax
10004038:	0f 84 b8 00 00 00    	je     100040f6 <NiLoadCursors()+0x1ad>
1000403e:	50                   	push   eax
1000403f:	6a 04                	push   0x4
10004041:	68 35 60 00 10       	push   0x10006035	10004042: R_386_32	.text
10004046:	56                   	push   esi
10004047:	e8 fc ff ff ff       	call   10004048 <NiLoadCursors()+0xff>	10004048: R_386_PC32	memcmp
1000404c:	83 c4 10             	add    esp,0x10
1000404f:	85 c0                	test   eax,eax
10004051:	74 7b                	je     100040ce <NiLoadCursors()+0x185>
10004053:	50                   	push   eax
10004054:	6a 04                	push   0x4
10004056:	68 3a 60 00 10       	push   0x1000603a	10004057: R_386_32	.text
1000405b:	56                   	push   esi
1000405c:	e8 fc ff ff ff       	call   1000405d <NiLoadCursors()+0x114>	1000405d: R_386_PC32	memcmp
10004061:	83 c4 10             	add    esp,0x10
10004064:	85 c0                	test   eax,eax
10004066:	74 6d                	je     100040d5 <NiLoadCursors()+0x18c>
10004068:	57                   	push   edi
10004069:	6a 04                	push   0x4
1000406b:	68 3f 60 00 10       	push   0x1000603f	1000406c: R_386_32	.text
10004070:	56                   	push   esi
10004071:	e8 fc ff ff ff       	call   10004072 <NiLoadCursors()+0x129>	10004072: R_386_PC32	memcmp
10004076:	83 c4 10             	add    esp,0x10
10004079:	85 c0                	test   eax,eax
1000407b:	74 5f                	je     100040dc <NiLoadCursors()+0x193>
1000407d:	51                   	push   ecx
1000407e:	6a 04                	push   0x4
10004080:	68 44 60 00 10       	push   0x10006044	10004081: R_386_32	.text
10004085:	56                   	push   esi
10004086:	e8 fc ff ff ff       	call   10004087 <NiLoadCursors()+0x13e>	10004087: R_386_PC32	memcmp
1000408b:	83 c4 10             	add    esp,0x10
1000408e:	85 c0                	test   eax,eax
10004090:	74 51                	je     100040e3 <NiLoadCursors()+0x19a>
10004092:	52                   	push   edx
10004093:	6a 04                	push   0x4
10004095:	68 49 60 00 10       	push   0x10006049	10004096: R_386_32	.text
1000409a:	56                   	push   esi
1000409b:	e8 fc ff ff ff       	call   1000409c <NiLoadCursors()+0x153>	1000409c: R_386_PC32	memcmp
100040a0:	83 c4 10             	add    esp,0x10
100040a3:	85 c0                	test   eax,eax
100040a5:	74 43                	je     100040ea <NiLoadCursors()+0x1a1>
100040a7:	50                   	push   eax
100040a8:	6a 04                	push   0x4
100040aa:	68 4e 60 00 10       	push   0x1000604e	100040ab: R_386_32	.text
100040af:	56                   	push   esi
100040b0:	e8 fc ff ff ff       	call   100040b1 <NiLoadCursors()+0x168>	100040b1: R_386_PC32	memcmp
100040b5:	83 c4 10             	add    esp,0x10
100040b8:	85 c0                	test   eax,eax
100040ba:	74 35                	je     100040f1 <NiLoadCursors()+0x1a8>
100040bc:	83 ec 0c             	sub    esp,0xc
100040bf:	68 53 60 00 10       	push   0x10006053	100040c0: R_386_32	.text
100040c4:	e8 fc ff ff ff       	call   100040c5 <NiLoadCursors()+0x17c>	100040c5: R_386_PC32	Dbg::kprintf(char const*, ...)
100040c9:	83 c4 10             	add    esp,0x10
100040cc:	eb 47                	jmp    10004115 <NiLoadCursors()+0x1cc>
100040ce:	b8 00 02 00 00       	mov    eax,0x200
100040d3:	eb 21                	jmp    100040f6 <NiLoadCursors()+0x1ad>
100040d5:	b8 00 03 00 00       	mov    eax,0x300
100040da:	eb 1a                	jmp    100040f6 <NiLoadCursors()+0x1ad>
100040dc:	b8 00 01 00 00       	mov    eax,0x100
100040e1:	eb 13                	jmp    100040f6 <NiLoadCursors()+0x1ad>
100040e3:	b8 00 04 00 00       	mov    eax,0x400
100040e8:	eb 0c                	jmp    100040f6 <NiLoadCursors()+0x1ad>
100040ea:	b8 00 05 00 00       	mov    eax,0x500
100040ef:	eb 05                	jmp    100040f6 <NiLoadCursors()+0x1ad>
100040f1:	b8 00 06 00 00       	mov    eax,0x600
100040f6:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	100040f8: R_386_32	___mouse_data
100040fc:	b9 00 01 00 00       	mov    ecx,0x100
10004101:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10004105:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10004107:	45                   	inc    ebp
10004108:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10004110:	e9 03 ff ff ff       	jmp    10004018 <NiLoadCursors()+0xcf>
10004115:	83 ec 0c             	sub    esp,0xc
10004118:	53                   	push   ebx
10004119:	e8 fc ff ff ff       	call   1000411a <NiLoadCursors()+0x1d1>	1000411a: R_386_PC32	free
1000411e:	83 c4 10             	add    esp,0x10
10004121:	83 c4 2c             	add    esp,0x2c
10004124:	5b                   	pop    ebx
10004125:	5e                   	pop    esi
10004126:	5f                   	pop    edi
10004127:	5d                   	pop    ebp
10004128:	c3                   	ret    
10004129:	90                   	nop

1000412a <NIDesktop::NIDesktop(NIContext*)>:
1000412a:	53                   	push   ebx
1000412b:	83 ec 14             	sub    esp,0x14
1000412e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10004132:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004136:	c7 43 08 1e 00 00 00 	mov    DWORD PTR [ebx+0x8],0x1e
1000413d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10004140:	c7 43 0c 1e 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1e
10004147:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
1000414e:	6a 08                	push   0x8
10004150:	e8 fc ff ff ff       	call   10004151 <NIDesktop::NIDesktop(NIContext*)+0x27>	10004151: R_386_PC32	malloc
10004155:	89 03                	mov    DWORD PTR [ebx],eax
10004157:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000415e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10004164:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10004166: R_386_32	mouseDesktop
1000416a:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000416c: R_386_32	guiMouseHandler
	10004170: R_386_32	NiHandleMouse(int, int, int, int)
10004174:	83 c4 18             	add    esp,0x18
10004177:	5b                   	pop    ebx
10004178:	c3                   	ret    
10004179:	90                   	nop

1000417a <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
1000417a:	53                   	push   ebx
1000417b:	83 ec 08             	sub    esp,0x8
1000417e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004182:	8b 00                	mov    eax,DWORD PTR [eax]
10004184:	8b 18                	mov    ebx,DWORD PTR [eax]
10004186:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
1000418a:	74 1d                	je     100041a9 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2f>
1000418c:	8b 03                	mov    eax,DWORD PTR [ebx]
1000418e:	85 c0                	test   eax,eax
10004190:	74 12                	je     100041a4 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10004192:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10004196:	74 0c                	je     100041a4 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10004198:	83 ec 0c             	sub    esp,0xc
1000419b:	50                   	push   eax
1000419c:	e8 fc ff ff ff       	call   1000419d <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x23>	1000419d: R_386_PC32	NIWindow::invalidate()
100041a1:	83 c4 10             	add    esp,0x10
100041a4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
100041a7:	eb dd                	jmp    10004186 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xc>
100041a9:	83 c4 08             	add    esp,0x8
100041ac:	5b                   	pop    ebx
100041ad:	c3                   	ret    

100041ae <NIDesktop::getTopmostWindowAtPixel(int, int)>:
100041ae:	57                   	push   edi
100041af:	56                   	push   esi
100041b0:	53                   	push   ebx
100041b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100041b5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100041b9:	8b 00                	mov    eax,DWORD PTR [eax]
100041bb:	8b 00                	mov    eax,DWORD PTR [eax]
100041bd:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
100041c0:	85 db                	test   ebx,ebx
100041c2:	74 52                	je     10004216 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x68>
100041c4:	8b 00                	mov    eax,DWORD PTR [eax]
100041c6:	85 c0                	test   eax,eax
100041c8:	74 4e                	je     10004218 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6a>
100041ca:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
100041d0:	39 ca                	cmp    edx,ecx
100041d2:	7e 04                	jle    100041d8 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x2a>
100041d4:	89 d8                	mov    eax,ebx
100041d6:	eb e5                	jmp    100041bd <NIDesktop::getTopmostWindowAtPixel(int, int)+0xf>
100041d8:	8b b0 70 01 00 00    	mov    esi,DWORD PTR [eax+0x170]
100041de:	01 d6                	add    esi,edx
100041e0:	39 ce                	cmp    esi,ecx
100041e2:	7e f0                	jle    100041d4 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
100041e4:	89 ce                	mov    esi,ecx
100041e6:	29 d6                	sub    esi,edx
100041e8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
100041ee:	8d 34 b2             	lea    esi,[edx+esi*4]
100041f1:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
100041f7:	0f b7 3e             	movzx  edi,WORD PTR [esi]
100041fa:	01 d7                	add    edi,edx
100041fc:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10004200:	7f d2                	jg     100041d4 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10004202:	03 90 6c 01 00 00    	add    edx,DWORD PTR [eax+0x16c]
10004208:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
1000420c:	29 f2                	sub    edx,esi
1000420e:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10004212:	7e c0                	jle    100041d4 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x26>
10004214:	eb 02                	jmp    10004218 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6a>
10004216:	31 c0                	xor    eax,eax
10004218:	5b                   	pop    ebx
10004219:	5e                   	pop    esi
1000421a:	5f                   	pop    edi
1000421b:	c3                   	ret    

1000421c <NIDesktop::renderScanline(int, int, int)>:
1000421c:	55                   	push   ebp
1000421d:	57                   	push   edi
1000421e:	56                   	push   esi
1000421f:	53                   	push   ebx
10004220:	83 ec 2c             	sub    esp,0x2c
10004223:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10004227:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
1000422b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000422f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10004233:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10004237:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10004239: R_386_32	render
1000423d:	31 c0                	xor    eax,eax
1000423f:	89 d7                	mov    edi,edx
10004241:	f3 aa                	rep stos BYTE PTR es:[edi],al
10004243:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10004247:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000424b:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	1000424d: R_386_32	shadow
10004251:	b0 80                	mov    al,0x80
10004253:	89 d7                	mov    edi,edx
10004255:	f3 aa                	rep stos BYTE PTR es:[edi],al
10004257:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000425b:	8b 00                	mov    eax,DWORD PTR [eax]
1000425d:	8b 00                	mov    eax,DWORD PTR [eax]
1000425f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004263:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004267:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000426b:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000426d: R_386_32	movingWin
10004271:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004275:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10004278:	85 c0                	test   eax,eax
1000427a:	75 09                	jne    10004285 <NIDesktop::renderScanline(int, int, int)+0x69>
1000427c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10004280:	e9 31 03 00 00       	jmp    100045b6 <NIDesktop::renderScanline(int, int, int)+0x39a>
10004285:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004289:	8b 1f                	mov    ebx,DWORD PTR [edi]
1000428b:	85 db                	test   ebx,ebx
1000428d:	74 ed                	je     1000427c <NIDesktop::renderScanline(int, int, int)+0x60>
1000428f:	39 da                	cmp    edx,ebx
10004291:	75 06                	jne    10004299 <NIDesktop::renderScanline(int, int, int)+0x7d>
10004293:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004297:	eb d8                	jmp    10004271 <NIDesktop::renderScanline(int, int, int)+0x55>
10004299:	83 ec 0c             	sub    esp,0xc
1000429c:	53                   	push   ebx
1000429d:	e8 fc ff ff ff       	call   1000429e <NIDesktop::renderScanline(int, int, int)+0x82>	1000429e: R_386_PC32	NIWindow::request()
100042a2:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
100042a8:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
100042ae:	83 c4 10             	add    esp,0x10
100042b1:	01 c2                	add    edx,eax
100042b3:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
100042b7:	0f 8e bf 00 00 00    	jle    1000437c <NIDesktop::renderScanline(int, int, int)+0x160>
100042bd:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
100042c4:	0f 85 b2 00 00 00    	jne    1000437c <NIDesktop::renderScanline(int, int, int)+0x160>
100042ca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100042ce:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
100042d4:	83 c0 06             	add    eax,0x6
100042d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100042db:	8b 8b 64 01 00 00    	mov    ecx,DWORD PTR [ebx+0x164]
100042e1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
100042e7:	01 c8                	add    eax,ecx
100042e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100042ed:	39 d0                	cmp    eax,edx
100042ef:	0f 8e 63 01 00 00    	jle    10004458 <NIDesktop::renderScanline(int, int, int)+0x23c>
100042f5:	3b 54 24 48          	cmp    edx,DWORD PTR [esp+0x48]
100042f9:	7c 7b                	jl     10004376 <NIDesktop::renderScanline(int, int, int)+0x15a>
100042fb:	3b 54 24 4c          	cmp    edx,DWORD PTR [esp+0x4c]
100042ff:	0f 8f 53 01 00 00    	jg     10004458 <NIDesktop::renderScanline(int, int, int)+0x23c>
10004305:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
1000430b:	89 d5                	mov    ebp,edx
1000430d:	6b fe fc             	imul   edi,esi,0xfffffffc
10004310:	29 cd                	sub    ebp,ecx
10004312:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10004316:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
1000431a:	39 f0                	cmp    eax,esi
1000431c:	7c 20                	jl     1000433e <NIDesktop::renderScanline(int, int, int)+0x122>
1000431e:	8d 0c 87             	lea    ecx,[edi+eax*4]
10004321:	03 8b 60 01 00 00    	add    ecx,DWORD PTR [ebx+0x160]
10004327:	0f b7 29             	movzx  ebp,WORD PTR [ecx]
1000432a:	3b 6c 24 18          	cmp    ebp,DWORD PTR [esp+0x18]
1000432e:	7f 0e                	jg     1000433e <NIDesktop::renderScanline(int, int, int)+0x122>
10004330:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
10004334:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
10004338:	29 cd                	sub    ebp,ecx
1000433a:	39 d5                	cmp    ebp,edx
1000433c:	7d 07                	jge    10004345 <NIDesktop::renderScanline(int, int, int)+0x129>
1000433e:	40                   	inc    eax
1000433f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
10004343:	75 d5                	jne    1000431a <NIDesktop::renderScanline(int, int, int)+0xfe>
10004345:	2b 44 24 44          	sub    eax,DWORD PTR [esp+0x44]
10004349:	48                   	dec    eax
1000434a:	83 f8 03             	cmp    eax,0x3
1000434d:	77 27                	ja     10004376 <NIDesktop::renderScanline(int, int, int)+0x15a>
1000434f:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10004351: R_386_32	render
10004356:	75 1e                	jne    10004376 <NIDesktop::renderScanline(int, int, int)+0x15a>
10004358:	8d 0c c5 65 00 00 00 	lea    ecx,[eax*8+0x65]
1000435f:	0f b6 82 00 00 00 00 	movzx  eax,BYTE PTR [edx+0x0]	10004362: R_386_32	shadow
10004366:	0f af c1             	imul   eax,ecx
10004369:	d1 f9                	sar    ecx,1
1000436b:	c1 f8 08             	sar    eax,0x8
1000436e:	01 c1                	add    ecx,eax
10004370:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	10004372: R_386_32	shadow
10004376:	42                   	inc    edx
10004377:	e9 5f ff ff ff       	jmp    100042db <NIDesktop::renderScanline(int, int, int)+0xbf>
1000437c:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10004380:	0f 8d d2 00 00 00    	jge    10004458 <NIDesktop::renderScanline(int, int, int)+0x23c>
10004386:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
1000438d:	0f 85 c5 00 00 00    	jne    10004458 <NIDesktop::renderScanline(int, int, int)+0x23c>
10004393:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10004397:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
1000439d:	8d 77 fa             	lea    esi,[edi-0x6]
100043a0:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
100043a4:	8b 8b 64 01 00 00    	mov    ecx,DWORD PTR [ebx+0x164]
100043aa:	8b b3 6c 01 00 00    	mov    esi,DWORD PTR [ebx+0x16c]
100043b0:	01 ce                	add    esi,ecx
100043b2:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
100043b6:	39 c6                	cmp    esi,eax
100043b8:	0f 8e 9a 00 00 00    	jle    10004458 <NIDesktop::renderScanline(int, int, int)+0x23c>
100043be:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
100043c2:	0f 8c 8a 00 00 00    	jl     10004452 <NIDesktop::renderScanline(int, int, int)+0x236>
100043c8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
100043cc:	0f 8f 86 00 00 00    	jg     10004458 <NIDesktop::renderScanline(int, int, int)+0x23c>
100043d2:	89 c7                	mov    edi,eax
100043d4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
100043d8:	29 cf                	sub    edi,ecx
100043da:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
100043de:	4a                   	dec    edx
100043df:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
100043e3:	29 d1                	sub    ecx,edx
100043e5:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
100043e9:	74 3b                	je     10004426 <NIDesktop::renderScanline(int, int, int)+0x20a>
100043eb:	8b bb 68 01 00 00    	mov    edi,DWORD PTR [ebx+0x168]
100043f1:	8b b3 70 01 00 00    	mov    esi,DWORD PTR [ebx+0x170]
100043f7:	8d 2c 37             	lea    ebp,[edi+esi*1]
100043fa:	39 d5                	cmp    ebp,edx
100043fc:	7e e0                	jle    100043de <NIDesktop::renderScanline(int, int, int)+0x1c2>
100043fe:	89 d5                	mov    ebp,edx
10004400:	29 fd                	sub    ebp,edi
10004402:	39 ee                	cmp    esi,ebp
10004404:	7e 20                	jle    10004426 <NIDesktop::renderScanline(int, int, int)+0x20a>
10004406:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
1000440c:	8d 34 ae             	lea    esi,[esi+ebp*4]
1000440f:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10004412:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10004416:	7f c6                	jg     100043de <NIDesktop::renderScanline(int, int, int)+0x1c2>
10004418:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
1000441c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10004420:	29 f7                	sub    edi,esi
10004422:	39 c7                	cmp    edi,eax
10004424:	7c b8                	jl     100043de <NIDesktop::renderScanline(int, int, int)+0x1c2>
10004426:	83 f9 04             	cmp    ecx,0x4
10004429:	77 27                	ja     10004452 <NIDesktop::renderScanline(int, int, int)+0x236>
1000442b:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	1000442d: R_386_32	render
10004432:	75 1e                	jne    10004452 <NIDesktop::renderScanline(int, int, int)+0x236>
10004434:	8d 0c cd 5d 00 00 00 	lea    ecx,[ecx*8+0x5d]
1000443b:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	1000443e: R_386_32	shadow
10004442:	0f af d1             	imul   edx,ecx
10004445:	d1 f9                	sar    ecx,1
10004447:	c1 fa 08             	sar    edx,0x8
1000444a:	01 d1                	add    ecx,edx
1000444c:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	1000444e: R_386_32	shadow
10004452:	40                   	inc    eax
10004453:	e9 4c ff ff ff       	jmp    100043a4 <NIDesktop::renderScanline(int, int, int)+0x188>
10004458:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
1000445e:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10004462:	0f 8f 27 01 00 00    	jg     1000458f <NIDesktop::renderScanline(int, int, int)+0x373>
10004468:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
1000446e:	01 c2                	add    edx,eax
10004470:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10004474:	0f 8e 15 01 00 00    	jle    1000458f <NIDesktop::renderScanline(int, int, int)+0x373>
1000447a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
1000447e:	29 c2                	sub    edx,eax
10004480:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
10004486:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
1000448d:	8d 14 90             	lea    edx,[eax+edx*4]
10004490:	0f b7 02             	movzx  eax,WORD PTR [edx]
10004493:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10004497:	0f b7 42 02          	movzx  eax,WORD PTR [edx+0x2]
1000449b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000449f:	74 0f                	je     100044b0 <NIDesktop::renderScanline(int, int, int)+0x294>
100044a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100044a5:	03 83 64 01 00 00    	add    eax,DWORD PTR [ebx+0x164]
100044ab:	e9 81 00 00 00       	jmp    10004531 <NIDesktop::renderScanline(int, int, int)+0x315>
100044b0:	31 c9                	xor    ecx,ecx
100044b2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
100044b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100044bc:	8d 6c 02 fc          	lea    ebp,[edx+eax*1-0x4]
100044c0:	03 93 6c 01 00 00    	add    edx,DWORD PTR [ebx+0x16c]
100044c6:	01 cd                	add    ebp,ecx
100044c8:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
100044cc:	01 ca                	add    edx,ecx
100044ce:	80 bd 00 00 00 00 00 	cmp    BYTE PTR [ebp+0x0],0x0	100044d0: R_386_32	render
100044d5:	75 1f                	jne    100044f6 <NIDesktop::renderScanline(int, int, int)+0x2da>
100044d7:	0f b6 b5 00 00 00 00 	movzx  esi,BYTE PTR [ebp+0x0]	100044da: R_386_32	shadow
100044de:	6b f9 f8             	imul   edi,ecx,0xfffffff8
100044e1:	83 c7 7d             	add    edi,0x7d
100044e4:	0f af f7             	imul   esi,edi
100044e7:	d1 ff                	sar    edi,1
100044e9:	c1 fe 08             	sar    esi,0x8
100044ec:	01 f7                	add    edi,esi
100044ee:	89 f8                	mov    eax,edi
100044f0:	88 85 00 00 00 00    	mov    BYTE PTR [ebp+0x0],al	100044f2: R_386_32	shadow
100044f6:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	100044f8: R_386_32	render
100044fd:	75 20                	jne    1000451f <NIDesktop::renderScanline(int, int, int)+0x303>
100044ff:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
10004506:	0f b6 b2 00 00 00 00 	movzx  esi,BYTE PTR [edx+0x0]	10004509: R_386_32	shadow
1000450d:	0f af f7             	imul   esi,edi
10004510:	d1 ff                	sar    edi,1
10004512:	c1 fe 08             	sar    esi,0x8
10004515:	01 f7                	add    edi,esi
10004517:	89 f8                	mov    eax,edi
10004519:	88 82 00 00 00 00    	mov    BYTE PTR [edx+0x0],al	1000451b: R_386_32	shadow
1000451f:	41                   	inc    ecx
10004520:	83 f9 04             	cmp    ecx,0x4
10004523:	75 8d                	jne    100044b2 <NIDesktop::renderScanline(int, int, int)+0x296>
10004525:	e9 77 ff ff ff       	jmp    100044a1 <NIDesktop::renderScanline(int, int, int)+0x285>
1000452a:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
1000452e:	7d 17                	jge    10004547 <NIDesktop::renderScanline(int, int, int)+0x32b>
10004530:	40                   	inc    eax
10004531:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10004537:	03 93 64 01 00 00    	add    edx,DWORD PTR [ebx+0x164]
1000453d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10004541:	39 c2                	cmp    edx,eax
10004543:	7f e5                	jg     1000452a <NIDesktop::renderScanline(int, int, int)+0x30e>
10004545:	eb 48                	jmp    1000458f <NIDesktop::renderScanline(int, int, int)+0x373>
10004547:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
1000454b:	7f 42                	jg     1000458f <NIDesktop::renderScanline(int, int, int)+0x373>
1000454d:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	1000454f: R_386_32	render
10004554:	75 da                	jne    10004530 <NIDesktop::renderScanline(int, int, int)+0x314>
10004556:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10004558: R_386_32	render
1000455d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10004561:	8b 8b 6c 01 00 00    	mov    ecx,DWORD PTR [ebx+0x16c]
10004567:	2b 93 68 01 00 00    	sub    edx,DWORD PTR [ebx+0x168]
1000456d:	0f af ca             	imul   ecx,edx
10004570:	89 c2                	mov    edx,eax
10004572:	2b 93 64 01 00 00    	sub    edx,DWORD PTR [ebx+0x164]
10004578:	01 ca                	add    edx,ecx
1000457a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
1000457d:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10004581:	8b 14 91             	mov    edx,DWORD PTR [ecx+edx*4]
10004584:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	10004587: R_386_32	renderData
1000458b:	75 a3                	jne    10004530 <NIDesktop::renderScanline(int, int, int)+0x314>
1000458d:	eb 47                	jmp    100045d6 <NIDesktop::renderScanline(int, int, int)+0x3ba>
1000458f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
10004596:	0f 85 e0 fc ff ff    	jne    1000427c <NIDesktop::renderScanline(int, int, int)+0x60>
1000459c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100045a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100045a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100045a7:	e9 bf fc ff ff       	jmp    1000426b <NIDesktop::renderScanline(int, int, int)+0x4f>
100045ac:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	100045ae: R_386_32	render
100045b3:	74 09                	je     100045be <NIDesktop::renderScanline(int, int, int)+0x3a2>
100045b5:	40                   	inc    eax
100045b6:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
100045ba:	7c f0                	jl     100045ac <NIDesktop::renderScanline(int, int, int)+0x390>
100045bc:	eb 18                	jmp    100045d6 <NIDesktop::renderScanline(int, int, int)+0x3ba>
100045be:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	100045c0: R_386_32	render
100045c5:	c7 04 85 00 00 00 00 ff 80 55 00 	mov    DWORD PTR [eax*4+0x0],0x5580ff	100045c8: R_386_32	renderData
100045d0:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
100045d4:	75 df                	jne    100045b5 <NIDesktop::renderScanline(int, int, int)+0x399>
100045d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100045da:	8b 00                	mov    eax,DWORD PTR [eax]
100045dc:	8b 00                	mov    eax,DWORD PTR [eax]
100045de:	85 c0                	test   eax,eax
100045e0:	74 61                	je     10004643 <NIDesktop::renderScanline(int, int, int)+0x427>
100045e2:	8b 00                	mov    eax,DWORD PTR [eax]
100045e4:	85 c0                	test   eax,eax
100045e6:	74 5b                	je     10004643 <NIDesktop::renderScanline(int, int, int)+0x427>
100045e8:	80 b8 74 01 00 00 00 	cmp    BYTE PTR [eax+0x174],0x0
100045ef:	75 52                	jne    10004643 <NIDesktop::renderScanline(int, int, int)+0x427>
100045f1:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
100045f5:	3b 5c 24 4c          	cmp    ebx,DWORD PTR [esp+0x4c]
100045f9:	7d 48                	jge    10004643 <NIDesktop::renderScanline(int, int, int)+0x427>
100045fb:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	100045fd: R_386_32	shadow
10004601:	3c 80                	cmp    al,0x80
10004603:	74 3b                	je     10004640 <NIDesktop::renderScanline(int, int, int)+0x424>
10004605:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	10004608: R_386_32	renderData
1000460c:	0f b6 f0             	movzx  esi,al
1000460f:	89 d1                	mov    ecx,edx
10004611:	0f b6 c6             	movzx  eax,dh
10004614:	c1 e9 10             	shr    ecx,0x10
10004617:	0f af c6             	imul   eax,esi
1000461a:	0f b6 c9             	movzx  ecx,cl
1000461d:	0f b6 d2             	movzx  edx,dl
10004620:	0f af ce             	imul   ecx,esi
10004623:	0f af d6             	imul   edx,esi
10004626:	c1 e9 07             	shr    ecx,0x7
10004629:	c1 e8 07             	shr    eax,0x7
1000462c:	c1 e1 10             	shl    ecx,0x10
1000462f:	c1 e0 08             	shl    eax,0x8
10004632:	c1 ea 07             	shr    edx,0x7
10004635:	09 c1                	or     ecx,eax
10004637:	09 ca                	or     edx,ecx
10004639:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	1000463c: R_386_32	renderData
10004640:	43                   	inc    ebx
10004641:	eb b2                	jmp    100045f5 <NIDesktop::renderScanline(int, int, int)+0x3d9>
10004643:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10004647:	83 ec 0c             	sub    esp,0xc
1000464a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000464d:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004653:	8b 10                	mov    edx,DWORD PTR [eax]
10004655:	68 00 00 00 00       	push   0x0	10004656: R_386_32	renderData
1000465a:	6a 00                	push   0x0
1000465c:	6a 01                	push   0x1
1000465e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10004662:	6a 00                	push   0x0
10004664:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10004668:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
1000466c:	ff 74 24 70          	push   DWORD PTR [esp+0x70]
10004670:	50                   	push   eax
10004671:	ff 52 38             	call   DWORD PTR [edx+0x38]
10004674:	83 c4 5c             	add    esp,0x5c
10004677:	5b                   	pop    ebx
10004678:	5e                   	pop    esi
10004679:	5f                   	pop    edi
1000467a:	5d                   	pop    ebp
1000467b:	c3                   	ret    

1000467c <NIDesktop::rangeRefresh(int, int, int, int)>:
1000467c:	53                   	push   ebx
1000467d:	83 ec 08             	sub    esp,0x8
10004680:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10004684:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
10004688:	7d 18                	jge    100046a2 <NIDesktop::rangeRefresh(int, int, int, int)+0x26>
1000468a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000468e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10004692:	53                   	push   ebx
10004693:	43                   	inc    ebx
10004694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004698:	e8 fc ff ff ff       	call   10004699 <NIDesktop::rangeRefresh(int, int, int, int)+0x1d>	10004699: R_386_PC32	NIDesktop::renderScanline(int, int, int)
1000469d:	83 c4 10             	add    esp,0x10
100046a0:	eb e2                	jmp    10004684 <NIDesktop::rangeRefresh(int, int, int, int)+0x8>
100046a2:	83 c4 08             	add    esp,0x8
100046a5:	5b                   	pop    ebx
100046a6:	c3                   	ret    
100046a7:	90                   	nop

100046a8 <NIDesktop::refreshWindowBounds(NIWindow*)>:
100046a8:	55                   	push   ebp
100046a9:	ba 05 00 00 00       	mov    edx,0x5
100046ae:	57                   	push   edi
100046af:	56                   	push   esi
100046b0:	53                   	push   ebx
100046b1:	83 ec 0c             	sub    esp,0xc
100046b4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100046b8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
100046be:	83 f8 05             	cmp    eax,0x5
100046c1:	7c 02                	jl     100046c5 <NIDesktop::refreshWindowBounds(NIWindow*)+0x1d>
100046c3:	89 c2                	mov    edx,eax
100046c5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100046c9:	03 83 70 01 00 00    	add    eax,DWORD PTR [ebx+0x170]
100046cf:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
100046d2:	83 ea 05             	sub    edx,0x5
100046d5:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
100046db:	8d 70 05             	lea    esi,[eax+0x5]
100046de:	8d 69 fb             	lea    ebp,[ecx-0x5]
100046e1:	39 c5                	cmp    ebp,eax
100046e3:	7f 03                	jg     100046e8 <NIDesktop::refreshWindowBounds(NIWindow*)+0x40>
100046e5:	8d 71 ff             	lea    esi,[ecx-0x1]
100046e8:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
100046ee:	89 c1                	mov    ecx,eax
100046f0:	83 f8 05             	cmp    eax,0x5
100046f3:	7d 05                	jge    100046fa <NIDesktop::refreshWindowBounds(NIWindow*)+0x52>
100046f5:	b9 05 00 00 00       	mov    ecx,0x5
100046fa:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
10004700:	83 e9 05             	sub    ecx,0x5
10004703:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
10004709:	8d 58 05             	lea    ebx,[eax+0x5]
1000470c:	8d 6f fb             	lea    ebp,[edi-0x5]
1000470f:	39 c5                	cmp    ebp,eax
10004711:	7f 03                	jg     10004716 <NIDesktop::refreshWindowBounds(NIWindow*)+0x6e>
10004713:	8d 5f ff             	lea    ebx,[edi-0x1]
10004716:	83 ec 0c             	sub    esp,0xc
10004719:	53                   	push   ebx
1000471a:	51                   	push   ecx
1000471b:	56                   	push   esi
1000471c:	52                   	push   edx
1000471d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10004721:	e8 fc ff ff ff       	call   10004722 <NIDesktop::refreshWindowBounds(NIWindow*)+0x7a>	10004722: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004726:	83 c4 2c             	add    esp,0x2c
10004729:	5b                   	pop    ebx
1000472a:	5e                   	pop    esi
1000472b:	5f                   	pop    edi
1000472c:	5d                   	pop    ebp
1000472d:	c3                   	ret    

1000472e <NIDesktop::completeRefresh()>:
1000472e:	56                   	push   esi
1000472f:	53                   	push   ebx
10004730:	31 f6                	xor    esi,esi
10004732:	50                   	push   eax
10004733:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004737:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000473a:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
10004740:	7e 15                	jle    10004757 <NIDesktop::completeRefresh()+0x29>
10004742:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
10004748:	6a 00                	push   0x0
1000474a:	56                   	push   esi
1000474b:	46                   	inc    esi
1000474c:	53                   	push   ebx
1000474d:	e8 fc ff ff ff       	call   1000474e <NIDesktop::completeRefresh()+0x20>	1000474e: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10004752:	83 c4 10             	add    esp,0x10
10004755:	eb e0                	jmp    10004737 <NIDesktop::completeRefresh()+0x9>
10004757:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
1000475d:	83 ec 0c             	sub    esp,0xc
10004760:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004762:	6a 00                	push   0x0
10004764:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
10004767:	05 00 00 00 00       	add    eax,0x0	10004768: R_386_32	___mouse_data
1000476c:	50                   	push   eax
1000476d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004770:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004773:	52                   	push   edx
10004774:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10004777:	83 c4 24             	add    esp,0x24
1000477a:	5b                   	pop    ebx
1000477b:	5e                   	pop    esi
1000477c:	c3                   	ret    
1000477d:	90                   	nop

1000477e <NIDesktop::addWindow(NIWindow*)>:
1000477e:	56                   	push   esi
1000477f:	53                   	push   ebx
10004780:	83 ec 0c             	sub    esp,0xc
10004783:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004787:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
1000478b:	56                   	push   esi
1000478c:	ff 33                	push   DWORD PTR [ebx]
1000478e:	e8 fc ff ff ff       	call   1000478f <NIDesktop::addWindow(NIWindow*)+0x11>	1000478f: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
10004793:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
10004797:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
1000479b:	83 c4 14             	add    esp,0x14
1000479e:	5b                   	pop    ebx
1000479f:	5e                   	pop    esi
100047a0:	e9 03 ff ff ff       	jmp    100046a8 <NIDesktop::refreshWindowBounds(NIWindow*)>
100047a5:	90                   	nop

100047a6 <NIDesktop::raiseWindow(NIWindow*)>:
100047a6:	53                   	push   ebx
100047a7:	83 ec 10             	sub    esp,0x10
100047aa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100047ae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100047b2:	50                   	push   eax
100047b3:	ff 33                	push   DWORD PTR [ebx]
100047b5:	e8 fc ff ff ff       	call   100047b6 <NIDesktop::raiseWindow(NIWindow*)+0x10>	100047b6: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100047ba:	58                   	pop    eax
100047bb:	5a                   	pop    edx
100047bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100047c0:	ff 33                	push   DWORD PTR [ebx]
100047c2:	e8 fc ff ff ff       	call   100047c3 <NIDesktop::raiseWindow(NIWindow*)+0x1d>	100047c3: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100047c7:	59                   	pop    ecx
100047c8:	58                   	pop    eax
100047c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100047cd:	53                   	push   ebx
100047ce:	e8 fc ff ff ff       	call   100047cf <NIDesktop::raiseWindow(NIWindow*)+0x29>	100047cf: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
100047d3:	83 c4 18             	add    esp,0x18
100047d6:	5b                   	pop    ebx
100047d7:	c3                   	ret    

100047d8 <NIDesktop::deleteWindow(NIWindow*)>:
100047d8:	53                   	push   ebx
100047d9:	83 ec 10             	sub    esp,0x10
100047dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100047e0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100047e4:	50                   	push   eax
100047e5:	ff 33                	push   DWORD PTR [ebx]
100047e7:	e8 fc ff ff ff       	call   100047e8 <NIDesktop::deleteWindow(NIWindow*)+0x10>	100047e8: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100047ec:	58                   	pop    eax
100047ed:	5a                   	pop    edx
100047ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100047f2:	53                   	push   ebx
100047f3:	e8 fc ff ff ff       	call   100047f4 <NIDesktop::deleteWindow(NIWindow*)+0x1c>	100047f4: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
100047f8:	83 c4 18             	add    esp,0x18
100047fb:	5b                   	pop    ebx
100047fc:	c3                   	ret    
100047fd:	90                   	nop

100047fe <NIDesktop::handleMouse(int, int, int, int)>:
100047fe:	55                   	push   ebp
100047ff:	57                   	push   edi
10004800:	56                   	push   esi
10004801:	53                   	push   ebx
10004802:	83 ec 68             	sub    esp,0x68
10004805:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
10004809:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000480c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000480f:	8d 4a 20             	lea    ecx,[edx+0x20]
10004812:	51                   	push   ecx
10004813:	52                   	push   edx
10004814:	8d 50 20             	lea    edx,[eax+0x20]
10004817:	52                   	push   edx
10004818:	50                   	push   eax
10004819:	53                   	push   ebx
1000481a:	e8 fc ff ff ff       	call   1000481b <NIDesktop::handleMouse(int, int, int, int)+0x1d>	1000481b: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000481f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004822:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10004826:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004829:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
1000482d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004831:	03 94 24 94 00 00 00 	add    edx,DWORD PTR [esp+0x94]
10004838:	03 84 24 98 00 00 00 	add    eax,DWORD PTR [esp+0x98]
1000483f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
10004842:	83 c4 20             	add    esp,0x20
10004845:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10004848:	85 d2                	test   edx,edx
1000484a:	79 07                	jns    10004853 <NIDesktop::handleMouse(int, int, int, int)+0x55>
1000484c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10004853:	85 c0                	test   eax,eax
10004855:	79 07                	jns    1000485e <NIDesktop::handleMouse(int, int, int, int)+0x60>
10004857:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
1000485e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004861:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
10004867:	3b 43 08             	cmp    eax,DWORD PTR [ebx+0x8]
1000486a:	7f 04                	jg     10004870 <NIDesktop::handleMouse(int, int, int, int)+0x72>
1000486c:	48                   	dec    eax
1000486d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10004870:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
10004876:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
10004879:	7f 04                	jg     1000487f <NIDesktop::handleMouse(int, int, int, int)+0x81>
1000487b:	48                   	dec    eax
1000487c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
1000487f:	50                   	push   eax
10004880:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004883:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004886:	53                   	push   ebx
10004887:	e8 fc ff ff ff       	call   10004888 <NIDesktop::handleMouse(int, int, int, int)+0x8a>	10004888: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
1000488c:	83 c4 10             	add    esp,0x10
1000488f:	89 c5                	mov    ebp,eax
10004891:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10004895:	83 e0 01             	and    eax,0x1
10004898:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000489a: R_386_32	movingWin
1000489f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100048a3:	0f 84 0e 02 00 00    	je     10004ab7 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
100048a9:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	100048ab: R_386_32	movingType
100048b0:	0f 85 01 02 00 00    	jne    10004ab7 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
100048b6:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
100048bb:	85 c0                	test   eax,eax
100048bd:	75 0c                	jne    100048cb <NIDesktop::handleMouse(int, int, int, int)+0xcd>
100048bf:	a0 78 93 03 10       	mov    al,ds:0x10039378	100048c0: R_386_32	.bss
100048c4:	83 e0 01             	and    eax,0x1
100048c7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
100048cb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
100048d3:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100048d5: R_386_32	movingWin
100048d9:	8b 82 70 01 00 00    	mov    eax,DWORD PTR [edx+0x170]
100048df:	8d 48 ff             	lea    ecx,[eax-0x1]
100048e2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
100048e6:	0f 8e b6 00 00 00    	jle    100049a2 <NIDesktop::handleMouse(int, int, int, int)+0x1a4>
100048ec:	be 01 00 00 00       	mov    esi,0x1
100048f1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100048f3: R_386_32	movingWin
100048f7:	8b 92 6c 01 00 00    	mov    edx,DWORD PTR [edx+0x16c]
100048fd:	4a                   	dec    edx
100048fe:	39 f2                	cmp    edx,esi
10004900:	0f 8e 93 00 00 00    	jle    10004999 <NIDesktop::handleMouse(int, int, int, int)+0x19b>
10004906:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000490a:	8d 14 30             	lea    edx,[eax+esi*1]
1000490d:	89 c1                	mov    ecx,eax
1000490f:	83 e2 1f             	and    edx,0x1f
10004912:	83 e1 03             	and    ecx,0x3
10004915:	09 ca                	or     edx,ecx
10004917:	75 7a                	jne    10004993 <NIDesktop::handleMouse(int, int, int, int)+0x195>
10004919:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000491d:	2b 15 74 93 03 10    	sub    edx,DWORD PTR ds:0x10039374	1000491f: R_386_32	.bss
10004923:	01 f2                	add    edx,esi
10004925:	78 2d                	js     10004954 <NIDesktop::handleMouse(int, int, int, int)+0x156>
10004927:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
1000492a:	3b 91 0c 04 00 00    	cmp    edx,DWORD PTR [ecx+0x40c]
10004930:	7d 22                	jge    10004954 <NIDesktop::handleMouse(int, int, int, int)+0x156>
10004932:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004936:	8d 7a 01             	lea    edi,[edx+0x1]
10004939:	83 ec 0c             	sub    esp,0xc
1000493c:	2b 0d 70 93 03 10    	sub    ecx,DWORD PTR ds:0x10039370	1000493e: R_386_32	.bss
10004942:	57                   	push   edi
10004943:	01 c1                	add    ecx,eax
10004945:	52                   	push   edx
10004946:	8d 51 01             	lea    edx,[ecx+0x1]
10004949:	52                   	push   edx
1000494a:	51                   	push   ecx
1000494b:	53                   	push   ebx
1000494c:	e8 fc ff ff ff       	call   1000494d <NIDesktop::handleMouse(int, int, int, int)+0x14f>	1000494d: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004951:	83 c4 20             	add    esp,0x20
10004954:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10004959:	75 38                	jne    10004993 <NIDesktop::handleMouse(int, int, int, int)+0x195>
1000495b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000495e:	01 f2                	add    edx,esi
10004960:	2b 15 74 93 03 10    	sub    edx,DWORD PTR ds:0x10039374	10004962: R_386_32	.bss
10004966:	78 2b                	js     10004993 <NIDesktop::handleMouse(int, int, int, int)+0x195>
10004968:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
1000496b:	3b 91 0c 04 00 00    	cmp    edx,DWORD PTR [ecx+0x40c]
10004971:	7d 20                	jge    10004993 <NIDesktop::handleMouse(int, int, int, int)+0x195>
10004973:	8b b9 08 04 00 00    	mov    edi,DWORD PTR [ecx+0x408]
10004979:	8b 07                	mov    eax,DWORD PTR [edi]
1000497b:	6a 00                	push   0x0
1000497d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004981:	03 4b 0c             	add    ecx,DWORD PTR [ebx+0xc]
10004984:	2b 0d 70 93 03 10    	sub    ecx,DWORD PTR ds:0x10039370	10004986: R_386_32	.bss
1000498a:	51                   	push   ecx
1000498b:	52                   	push   edx
1000498c:	57                   	push   edi
1000498d:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004990:	83 c4 10             	add    esp,0x10
10004993:	46                   	inc    esi
10004994:	e9 58 ff ff ff       	jmp    100048f1 <NIDesktop::handleMouse(int, int, int, int)+0xf3>
10004999:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
1000499d:	e9 31 ff ff ff       	jmp    100048d3 <NIDesktop::handleMouse(int, int, int, int)+0xd5>
100049a2:	8b 0d 74 93 03 10    	mov    ecx,DWORD PTR ds:0x10039374	100049a4: R_386_32	.bss
100049a8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
100049ab:	29 ce                	sub    esi,ecx
100049ad:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
100049b2:	0f 85 a5 06 00 00    	jne    1000505d <NIDesktop::handleMouse(int, int, int, int)+0x85f>
100049b8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
100049bc:	85 f6                	test   esi,esi
100049be:	79 08                	jns    100049c8 <NIDesktop::handleMouse(int, int, int, int)+0x1ca>
100049c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100049c8:	8b ba 6c 01 00 00    	mov    edi,DWORD PTR [edx+0x16c]
100049ce:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
100049d1:	01 fe                	add    esi,edi
100049d3:	8b 92 0c 04 00 00    	mov    edx,DWORD PTR [edx+0x40c]
100049d9:	39 d6                	cmp    esi,edx
100049db:	7d 06                	jge    100049e3 <NIDesktop::handleMouse(int, int, int, int)+0x1e5>
100049dd:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
100049e1:	eb 0c                	jmp    100049ef <NIDesktop::handleMouse(int, int, int, int)+0x1f1>
100049e3:	89 d6                	mov    esi,edx
100049e5:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
100049e9:	0f 88 c8 00 00 00    	js     10004ab7 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
100049ef:	85 f6                	test   esi,esi
100049f1:	0f 84 c0 00 00 00    	je     10004ab7 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>
100049f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100049fb:	29 c8                	sub    eax,ecx
100049fd:	89 c1                	mov    ecx,eax
100049ff:	79 02                	jns    10004a03 <NIDesktop::handleMouse(int, int, int, int)+0x205>
10004a01:	31 c0                	xor    eax,eax
10004a03:	01 cf                	add    edi,ecx
10004a05:	39 fa                	cmp    edx,edi
10004a07:	7e 04                	jle    10004a0d <NIDesktop::handleMouse(int, int, int, int)+0x20f>
10004a09:	29 c7                	sub    edi,eax
10004a0b:	eb 08                	jmp    10004a15 <NIDesktop::handleMouse(int, int, int, int)+0x217>
10004a0d:	89 d7                	mov    edi,edx
10004a0f:	29 c7                	sub    edi,eax
10004a11:	79 02                	jns    10004a15 <NIDesktop::handleMouse(int, int, int, int)+0x217>
10004a13:	31 ff                	xor    edi,edi
10004a15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10004a19:	01 c7                	add    edi,eax
10004a1b:	83 ec 0c             	sub    esp,0xc
10004a1e:	2b 15 70 93 03 10    	sub    edx,DWORD PTR ds:0x10039370	10004a20: R_386_32	.bss
10004a24:	57                   	push   edi
10004a25:	8d 4a 01             	lea    ecx,[edx+0x1]
10004a28:	50                   	push   eax
10004a29:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10004a2d:	51                   	push   ecx
10004a2e:	52                   	push   edx
10004a2f:	53                   	push   ebx
10004a30:	e8 fc ff ff ff       	call   10004a31 <NIDesktop::handleMouse(int, int, int, int)+0x233>	10004a31: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004a35:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
10004a39:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004a3b: R_386_32	movingWin
10004a3f:	83 c4 14             	add    esp,0x14
10004a42:	2b 15 70 93 03 10    	sub    edx,DWORD PTR ds:0x10039370	10004a44: R_386_32	.bss
10004a48:	03 91 70 01 00 00    	add    edx,DWORD PTR [ecx+0x170]
10004a4e:	57                   	push   edi
10004a4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004a53:	50                   	push   eax
10004a54:	52                   	push   edx
10004a55:	4a                   	dec    edx
10004a56:	52                   	push   edx
10004a57:	53                   	push   ebx
10004a58:	e8 fc ff ff ff       	call   10004a59 <NIDesktop::handleMouse(int, int, int, int)+0x25b>	10004a59: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004a5d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004a60:	83 c4 18             	add    esp,0x18
10004a63:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10004a69:	8b 39                	mov    edi,DWORD PTR [ecx]
10004a6b:	6a 00                	push   0x0
10004a6d:	6a 01                	push   0x1
10004a6f:	56                   	push   esi
10004a70:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004a73:	2b 15 70 93 03 10    	sub    edx,DWORD PTR ds:0x10039370	10004a75: R_386_32	.bss
10004a79:	52                   	push   edx
10004a7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10004a7e:	51                   	push   ecx
10004a7f:	ff 57 28             	call   DWORD PTR [edi+0x28]
10004a82:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004a85:	83 c4 18             	add    esp,0x18
10004a88:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10004a8e:	8b 39                	mov    edi,DWORD PTR [ecx]
10004a90:	6a 00                	push   0x0
10004a92:	6a 01                	push   0x1
10004a94:	56                   	push   esi
10004a95:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10004a97: R_386_32	movingWin
10004a9b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004a9e:	2b 15 70 93 03 10    	sub    edx,DWORD PTR ds:0x10039370	10004aa0: R_386_32	.bss
10004aa4:	03 96 70 01 00 00    	add    edx,DWORD PTR [esi+0x170]
10004aaa:	4a                   	dec    edx
10004aab:	52                   	push   edx
10004aac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10004ab0:	51                   	push   ecx
10004ab1:	ff 57 28             	call   DWORD PTR [edi+0x28]
10004ab4:	83 c4 20             	add    esp,0x20
10004ab7:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004ab9: R_386_32	movingWin
10004abd:	85 c9                	test   ecx,ecx
10004abf:	0f 84 46 02 00 00    	je     10004d0b <NIDesktop::handleMouse(int, int, int, int)+0x50d>
10004ac5:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10004ac7: R_386_32	movingType
10004acb:	8d 56 fe             	lea    edx,[esi-0x2]
10004ace:	83 fa 02             	cmp    edx,0x2
10004ad1:	0f 87 34 02 00 00    	ja     10004d0b <NIDesktop::handleMouse(int, int, int, int)+0x50d>
10004ad7:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
10004adc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
10004ae1:	75 0c                	jne    10004aef <NIDesktop::handleMouse(int, int, int, int)+0x2f1>
10004ae3:	a0 78 93 03 10       	mov    al,ds:0x10039378	10004ae4: R_386_32	.bss
10004ae8:	83 e0 01             	and    eax,0x1
10004aeb:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
10004aef:	8b 91 6c 01 00 00    	mov    edx,DWORD PTR [ecx+0x16c]
10004af5:	a1 74 93 03 10       	mov    eax,ds:0x10039374	10004af6: R_386_32	.bss
10004afa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10004afe:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
10004b04:	01 d7                	add    edi,edx
10004b06:	29 c7                	sub    edi,eax
10004b08:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10004b0c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10004b10:	01 cf                	add    edi,ecx
10004b12:	2b 3d 70 93 03 10    	sub    edi,DWORD PTR ds:0x10039370	10004b14: R_386_32	.bss
10004b18:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10004b1c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
10004b1f:	01 d7                	add    edi,edx
10004b21:	29 c7                	sub    edi,eax
10004b23:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10004b27:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
10004b2a:	01 cf                	add    edi,ecx
10004b2c:	2b 3d 70 93 03 10    	sub    edi,DWORD PTR ds:0x10039370	10004b2e: R_386_32	.bss
10004b32:	83 fe 03             	cmp    esi,0x3
10004b35:	74 0d                	je     10004b44 <NIDesktop::handleMouse(int, int, int, int)+0x346>
10004b37:	83 fe 04             	cmp    esi,0x4
10004b3a:	75 10                	jne    10004b4c <NIDesktop::handleMouse(int, int, int, int)+0x34e>
10004b3c:	89 cf                	mov    edi,ecx
10004b3e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10004b42:	eb 08                	jmp    10004b4c <NIDesktop::handleMouse(int, int, int, int)+0x34e>
10004b44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10004b48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10004b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004b50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10004b54:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10004b58:	7d 08                	jge    10004b62 <NIDesktop::handleMouse(int, int, int, int)+0x364>
10004b5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004b5e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10004b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004b66:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10004b6a:	39 f8                	cmp    eax,edi
10004b6c:	7d 04                	jge    10004b72 <NIDesktop::handleMouse(int, int, int, int)+0x374>
10004b6e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
10004b72:	b8 01 00 00 00       	mov    eax,0x1
10004b77:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
10004b7b:	0f 8d c9 00 00 00    	jge    10004c4a <NIDesktop::handleMouse(int, int, int, int)+0x44c>
10004b81:	be 01 00 00 00       	mov    esi,0x1
10004b86:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
10004b8a:	0f 8d b4 00 00 00    	jge    10004c44 <NIDesktop::handleMouse(int, int, int, int)+0x446>
10004b90:	8d 14 30             	lea    edx,[eax+esi*1]
10004b93:	89 c1                	mov    ecx,eax
10004b95:	83 e2 1f             	and    edx,0x1f
10004b98:	83 e1 03             	and    ecx,0x3
10004b9b:	09 ca                	or     edx,ecx
10004b9d:	0f 85 9b 00 00 00    	jne    10004c3e <NIDesktop::handleMouse(int, int, int, int)+0x440>
10004ba3:	83 ec 0c             	sub    esp,0xc
10004ba6:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004ba8: R_386_32	movingWin
10004bac:	8b 8a 64 01 00 00    	mov    ecx,DWORD PTR [edx+0x164]
10004bb2:	8b 92 68 01 00 00    	mov    edx,DWORD PTR [edx+0x168]
10004bb8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10004bbc:	8d 54 31 01          	lea    edx,[ecx+esi*1+0x1]
10004bc0:	01 f1                	add    ecx,esi
10004bc2:	52                   	push   edx
10004bc3:	51                   	push   ecx
10004bc4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
10004bc8:	8d 4c 01 01          	lea    ecx,[ecx+eax*1+0x1]
10004bcc:	51                   	push   ecx
10004bcd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10004bd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10004bd5:	01 c2                	add    edx,eax
10004bd7:	52                   	push   edx
10004bd8:	53                   	push   ebx
10004bd9:	e8 fc ff ff ff       	call   10004bda <NIDesktop::handleMouse(int, int, int, int)+0x3dc>	10004bda: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004bde:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10004be2:	83 c4 20             	add    esp,0x20
10004be5:	83 f1 01             	xor    ecx,0x1
10004be8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004bec:	39 c7                	cmp    edi,eax
10004bee:	0f 9f c2             	setg   dl
10004bf1:	84 d1                	test   cl,dl
10004bf3:	74 49                	je     10004c3e <NIDesktop::handleMouse(int, int, int, int)+0x440>
10004bf5:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
10004bf9:	7d 43                	jge    10004c3e <NIDesktop::handleMouse(int, int, int, int)+0x440>
10004bfb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004bfe:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10004c04:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004c06: R_386_32	movingWin
10004c0a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10004c0e:	8b 09                	mov    ecx,DWORD PTR [ecx]
10004c10:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
10004c14:	6a 00                	push   0x0
10004c16:	89 c1                	mov    ecx,eax
10004c18:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004c1c:	03 8a 68 01 00 00    	add    ecx,DWORD PTR [edx+0x168]
10004c22:	51                   	push   ecx
10004c23:	8b 8a 64 01 00 00    	mov    ecx,DWORD PTR [edx+0x164]
10004c29:	01 f1                	add    ecx,esi
10004c2b:	51                   	push   ecx
10004c2c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004c30:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10004c34:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004c37:	83 c4 10             	add    esp,0x10
10004c3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10004c3e:	46                   	inc    esi
10004c3f:	e9 42 ff ff ff       	jmp    10004b86 <NIDesktop::handleMouse(int, int, int, int)+0x388>
10004c44:	40                   	inc    eax
10004c45:	e9 2d ff ff ff       	jmp    10004b77 <NIDesktop::handleMouse(int, int, int, int)+0x379>
10004c4a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c4b: R_386_32	movingWin
10004c4f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10004c54:	0f 85 72 03 00 00    	jne    10004fcc <NIDesktop::handleMouse(int, int, int, int)+0x7ce>
10004c5a:	8b 88 64 01 00 00    	mov    ecx,DWORD PTR [eax+0x164]
10004c60:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
10004c66:	83 ec 0c             	sub    esp,0xc
10004c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004c6d:	8d 34 01             	lea    esi,[ecx+eax*1]
10004c70:	56                   	push   esi
10004c71:	51                   	push   ecx
10004c72:	8d 4a 01             	lea    ecx,[edx+0x1]
10004c75:	51                   	push   ecx
10004c76:	52                   	push   edx
10004c77:	53                   	push   ebx
10004c78:	e8 fc ff ff ff       	call   10004c79 <NIDesktop::handleMouse(int, int, int, int)+0x47b>	10004c79: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004c7d:	83 c4 18             	add    esp,0x18
10004c80:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004c83:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004c85: R_386_32	movingWin
10004c89:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
10004c8f:	8b 32                	mov    esi,DWORD PTR [edx]
10004c91:	6a 00                	push   0x0
10004c93:	6a 01                	push   0x1
10004c95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004c99:	ff b1 68 01 00 00    	push   DWORD PTR [ecx+0x168]
10004c9f:	ff b1 64 01 00 00    	push   DWORD PTR [ecx+0x164]
10004ca5:	52                   	push   edx
10004ca6:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004ca9:	83 c4 14             	add    esp,0x14
10004cac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004cae: R_386_32	movingWin
10004cb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004cb6:	8b 8a 68 01 00 00    	mov    ecx,DWORD PTR [edx+0x168]
10004cbc:	8b b2 64 01 00 00    	mov    esi,DWORD PTR [edx+0x164]
10004cc2:	8d 14 06             	lea    edx,[esi+eax*1]
10004cc5:	52                   	push   edx
10004cc6:	56                   	push   esi
10004cc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004ccb:	8d 54 01 01          	lea    edx,[ecx+eax*1+0x1]
10004ccf:	52                   	push   edx
10004cd0:	03 4c 24 28          	add    ecx,DWORD PTR [esp+0x28]
10004cd4:	51                   	push   ecx
10004cd5:	53                   	push   ebx
10004cd6:	e8 fc ff ff ff       	call   10004cd7 <NIDesktop::handleMouse(int, int, int, int)+0x4d9>	10004cd7: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004cdb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004cde:	83 c4 18             	add    esp,0x18
10004ce1:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
10004ce7:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004ce9: R_386_32	movingWin
10004ced:	8b 32                	mov    esi,DWORD PTR [edx]
10004cef:	6a 00                	push   0x0
10004cf1:	6a 01                	push   0x1
10004cf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004cf7:	03 b9 68 01 00 00    	add    edi,DWORD PTR [ecx+0x168]
10004cfd:	57                   	push   edi
10004cfe:	ff b1 64 01 00 00    	push   DWORD PTR [ecx+0x164]
10004d04:	52                   	push   edx
10004d05:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004d08:	83 c4 20             	add    esp,0x20
10004d0b:	85 ed                	test   ebp,ebp
10004d0d:	0f 84 82 02 00 00    	je     10004f95 <NIDesktop::handleMouse(int, int, int, int)+0x797>
10004d13:	f6 44 24 7c 01       	test   BYTE PTR [esp+0x7c],0x1
10004d18:	0f 84 77 02 00 00    	je     10004f95 <NIDesktop::handleMouse(int, int, int, int)+0x797>
10004d1e:	8b 15 78 93 03 10    	mov    edx,DWORD PTR ds:0x10039378	10004d20: R_386_32	.bss
10004d24:	83 e2 01             	and    edx,0x1
10004d27:	0f 85 34 01 00 00    	jne    10004e61 <NIDesktop::handleMouse(int, int, int, int)+0x663>
10004d2d:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10004d2f: R_386_32	milliTenthsSinceBoot
10004d33:	8b 3d 04 00 00 00    	mov    edi,DWORD PTR ds:0x4	10004d35: R_386_32	milliTenthsSinceBoot
10004d39:	2b 35 68 93 03 10    	sub    esi,DWORD PTR ds:0x10039368	10004d3b: R_386_32	.bss
10004d3f:	b9 b7 0b 00 00       	mov    ecx,0xbb7
10004d44:	1b 3d 6c 93 03 10    	sbb    edi,DWORD PTR ds:0x1003936c	10004d46: R_386_32	.bss
10004d4a:	39 f1                	cmp    ecx,esi
10004d4c:	19 fa                	sbb    edx,edi
10004d4e:	0f 82 de 00 00 00    	jb     10004e32 <NIDesktop::handleMouse(int, int, int, int)+0x634>
10004d54:	8b 8d 68 01 00 00    	mov    ecx,DWORD PTR [ebp+0x168]
10004d5a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004d5d:	29 ca                	sub    edx,ecx
10004d5f:	83 fa 18             	cmp    edx,0x18
10004d62:	0f 8f ca 00 00 00    	jg     10004e32 <NIDesktop::handleMouse(int, int, int, int)+0x634>
10004d68:	f6 85 88 01 00 00 01 	test   BYTE PTR [ebp+0x188],0x1
10004d6f:	0f 85 bd 00 00 00    	jne    10004e32 <NIDesktop::handleMouse(int, int, int, int)+0x634>
10004d75:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
10004d7c:	74 3e                	je     10004dbc <NIDesktop::handleMouse(int, int, int, int)+0x5be>
10004d7e:	8b 95 78 01 00 00    	mov    edx,DWORD PTR [ebp+0x178]
10004d84:	89 95 64 01 00 00    	mov    DWORD PTR [ebp+0x164],edx
10004d8a:	8b 95 7c 01 00 00    	mov    edx,DWORD PTR [ebp+0x17c]
10004d90:	89 95 68 01 00 00    	mov    DWORD PTR [ebp+0x168],edx
10004d96:	8b 95 80 01 00 00    	mov    edx,DWORD PTR [ebp+0x180]
10004d9c:	89 95 6c 01 00 00    	mov    DWORD PTR [ebp+0x16c],edx
10004da2:	8b 95 84 01 00 00    	mov    edx,DWORD PTR [ebp+0x184]
10004da8:	89 95 70 01 00 00    	mov    DWORD PTR [ebp+0x170],edx
10004dae:	50                   	push   eax
10004daf:	50                   	push   eax
10004db0:	55                   	push   ebp
10004db1:	53                   	push   ebx
10004db2:	e8 fc ff ff ff       	call   10004db3 <NIDesktop::handleMouse(int, int, int, int)+0x5b5>	10004db3: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
10004db7:	83 c4 10             	add    esp,0x10
10004dba:	eb 5c                	jmp    10004e18 <NIDesktop::handleMouse(int, int, int, int)+0x61a>
10004dbc:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
10004dc2:	c7 85 68 01 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x168],0x0
10004dcc:	8b 95 64 01 00 00    	mov    edx,DWORD PTR [ebp+0x164]
10004dd2:	c7 85 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x164],0x0
10004ddc:	89 95 78 01 00 00    	mov    DWORD PTR [ebp+0x178],edx
10004de2:	8b 95 6c 01 00 00    	mov    edx,DWORD PTR [ebp+0x16c]
10004de8:	89 95 80 01 00 00    	mov    DWORD PTR [ebp+0x180],edx
10004dee:	8b 95 70 01 00 00    	mov    edx,DWORD PTR [ebp+0x170]
10004df4:	89 95 84 01 00 00    	mov    DWORD PTR [ebp+0x184],edx
10004dfa:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004dfd:	8b 92 0c 04 00 00    	mov    edx,DWORD PTR [edx+0x40c]
10004e03:	89 95 6c 01 00 00    	mov    DWORD PTR [ebp+0x16c],edx
10004e09:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004e0c:	8b 92 10 04 00 00    	mov    edx,DWORD PTR [edx+0x410]
10004e12:	89 95 70 01 00 00    	mov    DWORD PTR [ebp+0x170],edx
10004e18:	83 ec 0c             	sub    esp,0xc
10004e1b:	80 b5 74 01 00 00 01 	xor    BYTE PTR [ebp+0x174],0x1
10004e22:	55                   	push   ebp
10004e23:	e8 fc ff ff ff       	call   10004e24 <NIDesktop::handleMouse(int, int, int, int)+0x626>	10004e24: R_386_PC32	NIWindow::rerender()
10004e28:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004e2b:	e8 fc ff ff ff       	call   10004e2c <NIDesktop::handleMouse(int, int, int, int)+0x62e>	10004e2c: R_386_PC32	NIDesktop::completeRefresh()
10004e30:	eb 11                	jmp    10004e43 <NIDesktop::handleMouse(int, int, int, int)+0x645>
10004e32:	8b 13                	mov    edx,DWORD PTR [ebx]
10004e34:	8b 12                	mov    edx,DWORD PTR [edx]
10004e36:	39 2a                	cmp    DWORD PTR [edx],ebp
10004e38:	74 0c                	je     10004e46 <NIDesktop::handleMouse(int, int, int, int)+0x648>
10004e3a:	50                   	push   eax
10004e3b:	50                   	push   eax
10004e3c:	55                   	push   ebp
10004e3d:	53                   	push   ebx
10004e3e:	e8 fc ff ff ff       	call   10004e3f <NIDesktop::handleMouse(int, int, int, int)+0x641>	10004e3f: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
10004e43:	83 c4 10             	add    esp,0x10
10004e46:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e47: R_386_32	milliTenthsSinceBoot
10004e4b:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10004e4d: R_386_32	milliTenthsSinceBoot
10004e51:	a3 68 93 03 10       	mov    ds:0x10039368,eax	10004e52: R_386_32	.bss
10004e56:	89 15 6c 93 03 10    	mov    DWORD PTR ds:0x1003936c,edx	10004e58: R_386_32	.bss
10004e5c:	e9 34 01 00 00       	jmp    10004f95 <NIDesktop::handleMouse(int, int, int, int)+0x797>
10004e61:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004e63: R_386_32	movingWin
10004e68:	0f 85 27 01 00 00    	jne    10004f95 <NIDesktop::handleMouse(int, int, int, int)+0x797>
10004e6e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
10004e71:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
10004e77:	89 ce                	mov    esi,ecx
10004e79:	8d 50 f2             	lea    edx,[eax-0xe]
10004e7c:	2b b5 68 01 00 00    	sub    esi,DWORD PTR [ebp+0x168]
10004e82:	39 f2                	cmp    edx,esi
10004e84:	7f 44                	jg     10004eca <NIDesktop::handleMouse(int, int, int, int)+0x6cc>
10004e86:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
10004e8d:	75 3b                	jne    10004eca <NIDesktop::handleMouse(int, int, int, int)+0x6cc>
10004e8f:	f6 85 88 01 00 00 01 	test   BYTE PTR [ebp+0x188],0x1
10004e96:	75 32                	jne    10004eca <NIDesktop::handleMouse(int, int, int, int)+0x6cc>
10004e98:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004e9b:	c7 43 10 00 04 00 00 	mov    DWORD PTR [ebx+0x10],0x400
10004ea2:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10004ea4: R_386_32	movingWin
10004ea8:	50                   	push   eax
10004ea9:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	10004eab: R_386_32	movingType
10004eb3:	50                   	push   eax
10004eb4:	89 15 74 93 03 10    	mov    DWORD PTR ds:0x10039374,edx	10004eb6: R_386_32	.bss
10004eba:	55                   	push   ebp
10004ebb:	89 0d 70 93 03 10    	mov    DWORD PTR ds:0x10039370,ecx	10004ebd: R_386_32	.bss
10004ec1:	53                   	push   ebx
10004ec2:	e8 fc ff ff ff       	call   10004ec3 <NIDesktop::handleMouse(int, int, int, int)+0x6c5>	10004ec3: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004ec7:	83 c4 10             	add    esp,0x10
10004eca:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10004ecd:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
10004ed3:	89 ce                	mov    esi,ecx
10004ed5:	8d 50 f2             	lea    edx,[eax-0xe]
10004ed8:	2b b5 64 01 00 00    	sub    esi,DWORD PTR [ebp+0x164]
10004ede:	39 f2                	cmp    edx,esi
10004ee0:	7f 62                	jg     10004f44 <NIDesktop::handleMouse(int, int, int, int)+0x746>
10004ee2:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
10004ee9:	75 59                	jne    10004f44 <NIDesktop::handleMouse(int, int, int, int)+0x746>
10004eeb:	f6 85 88 01 00 00 01 	test   BYTE PTR [ebp+0x188],0x1
10004ef2:	75 50                	jne    10004f44 <NIDesktop::handleMouse(int, int, int, int)+0x746>
10004ef4:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004ef6: R_386_32	movingWin
10004efb:	75 34                	jne    10004f31 <NIDesktop::handleMouse(int, int, int, int)+0x733>
10004efd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004f00:	c7 43 10 00 05 00 00 	mov    DWORD PTR [ebx+0x10],0x500
10004f07:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10004f09: R_386_32	movingWin
10004f0d:	50                   	push   eax
10004f0e:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	10004f10: R_386_32	movingType
10004f18:	50                   	push   eax
10004f19:	89 0d 74 93 03 10    	mov    DWORD PTR ds:0x10039374,ecx	10004f1b: R_386_32	.bss
10004f1f:	55                   	push   ebp
10004f20:	89 15 70 93 03 10    	mov    DWORD PTR ds:0x10039370,edx	10004f22: R_386_32	.bss
10004f26:	53                   	push   ebx
10004f27:	e8 fc ff ff ff       	call   10004f28 <NIDesktop::handleMouse(int, int, int, int)+0x72a>	10004f28: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004f2c:	83 c4 10             	add    esp,0x10
10004f2f:	eb 13                	jmp    10004f44 <NIDesktop::handleMouse(int, int, int, int)+0x746>
10004f31:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	10004f33: R_386_32	movingType
10004f3b:	c7 43 10 00 03 00 00 	mov    DWORD PTR [ebx+0x10],0x300
10004f42:	eb 51                	jmp    10004f95 <NIDesktop::handleMouse(int, int, int, int)+0x797>
10004f44:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004f46: R_386_32	movingWin
10004f4b:	75 48                	jne    10004f95 <NIDesktop::handleMouse(int, int, int, int)+0x797>
10004f4d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004f50:	2b 95 68 01 00 00    	sub    edx,DWORD PTR [ebp+0x168]
10004f56:	83 fa 18             	cmp    edx,0x18
10004f59:	7f 3a                	jg     10004f95 <NIDesktop::handleMouse(int, int, int, int)+0x797>
10004f5b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
10004f62:	75 31                	jne    10004f95 <NIDesktop::handleMouse(int, int, int, int)+0x797>
10004f64:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10004f67:	2b 8d 64 01 00 00    	sub    ecx,DWORD PTR [ebp+0x164]
10004f6d:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10004f6f: R_386_32	movingWin
10004f73:	50                   	push   eax
10004f74:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10004f76: R_386_32	movingType
10004f7e:	50                   	push   eax
10004f7f:	89 0d 74 93 03 10    	mov    DWORD PTR ds:0x10039374,ecx	10004f81: R_386_32	.bss
10004f85:	55                   	push   ebp
10004f86:	89 15 70 93 03 10    	mov    DWORD PTR ds:0x10039370,edx	10004f88: R_386_32	.bss
10004f8c:	53                   	push   ebx
10004f8d:	e8 fc ff ff ff       	call   10004f8e <NIDesktop::handleMouse(int, int, int, int)+0x790>	10004f8e: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004f92:	83 c4 10             	add    esp,0x10
10004f95:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004f98:	83 ec 0c             	sub    esp,0xc
10004f9b:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004fa1:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004fa3:	6a 00                	push   0x0
10004fa5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
10004fa8:	05 00 00 00 00       	add    eax,0x0	10004fa9: R_386_32	___mouse_data
10004fad:	50                   	push   eax
10004fae:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004fb1:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004fb4:	52                   	push   edx
10004fb5:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10004fb8:	8b 84 24 9c 00 00 00 	mov    eax,DWORD PTR [esp+0x9c]
10004fbf:	a3 78 93 03 10       	mov    ds:0x10039378,eax	10004fc0: R_386_32	.bss
10004fc4:	83 c4 7c             	add    esp,0x7c
10004fc7:	5b                   	pop    ebx
10004fc8:	5e                   	pop    esi
10004fc9:	5f                   	pop    edi
10004fca:	5d                   	pop    ebp
10004fcb:	c3                   	ret    
10004fcc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10004fd0:	c7 44 24 40 01 00 00 80 	mov    DWORD PTR [esp+0x40],0x80000001
10004fd8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10004fdc:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004fde: R_386_32	mouseDesktop
10004fe2:	83 ec 0c             	sub    esp,0xc
10004fe5:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
10004fe8:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004fea: R_386_32	movingWin
10004ff2:	66 89 4c 24 50       	mov    WORD PTR [esp+0x50],cx
10004ff7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
10004ffa:	89 b0 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],esi
10005000:	66 89 54 24 52       	mov    WORD PTR [esp+0x52],dx
10005005:	89 b8 70 01 00 00    	mov    DWORD PTR [eax+0x170],edi
1000500b:	50                   	push   eax
1000500c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10005010:	e8 fc ff ff ff       	call   10005011 <NIDesktop::handleMouse(int, int, int, int)+0x813>	10005011: R_386_PC32	NIWindow::rerender()
10005015:	5a                   	pop    edx
10005016:	59                   	pop    ecx
10005017:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000501b:	50                   	push   eax
1000501c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005020:	53                   	push   ebx
10005021:	e8 fc ff ff ff       	call   10005022 <NIDesktop::handleMouse(int, int, int, int)+0x824>	10005022: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10005026:	5e                   	pop    esi
10005027:	5f                   	pop    edi
10005028:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000502c:	50                   	push   eax
1000502d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005031:	53                   	push   ebx
10005032:	e8 fc ff ff ff       	call   10005033 <NIDesktop::handleMouse(int, int, int, int)+0x835>	10005033: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10005037:	83 ec 0c             	sub    esp,0xc
1000503a:	b9 05 00 00 00       	mov    ecx,0x5
1000503f:	8d 74 24 58          	lea    esi,[esp+0x58]
10005043:	89 e7                	mov    edi,esp
10005045:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005047:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000504b:	50                   	push   eax
1000504c:	e8 fc ff ff ff       	call   1000504d <NIDesktop::handleMouse(int, int, int, int)+0x84f>	1000504d: R_386_PC32	NIWindow::postEvent(NiEvent)
10005051:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10005058:	e9 ab fc ff ff       	jmp    10004d08 <NIDesktop::handleMouse(int, int, int, int)+0x50a>
1000505d:	89 b2 64 01 00 00    	mov    DWORD PTR [edx+0x164],esi
10005063:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
10005066:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005068: R_386_32	movingWin
10005070:	2b 0d 70 93 03 10    	sub    ecx,DWORD PTR ds:0x10039370	10005072: R_386_32	.bss
10005076:	89 8a 68 01 00 00    	mov    DWORD PTR [edx+0x168],ecx
1000507c:	50                   	push   eax
1000507d:	50                   	push   eax
1000507e:	52                   	push   edx
1000507f:	53                   	push   ebx
10005080:	e8 fc ff ff ff       	call   10005081 <NIDesktop::handleMouse(int, int, int, int)+0x883>	10005081: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10005085:	83 c4 10             	add    esp,0x10
10005088:	e9 2a fa ff ff       	jmp    10004ab7 <NIDesktop::handleMouse(int, int, int, int)+0x2b9>

1000508d <NiHandleMouse(int, int, int, int)>:
1000508d:	83 ec 18             	sub    esp,0x18
10005090:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10005094:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10005098:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000509c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100050a0:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100050a2: R_386_32	mouseDesktop
100050a6:	e8 fc ff ff ff       	call   100050a7 <NiHandleMouse(int, int, int, int)+0x1a>	100050a7: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
100050ab:	83 c4 2c             	add    esp,0x2c
100050ae:	c3                   	ret    

100050af <drawVGAChar(int, int, int)>:
100050af:	55                   	push   ebp
100050b0:	57                   	push   edi
100050b1:	56                   	push   esi
100050b2:	53                   	push   ebx
100050b3:	31 db                	xor    ebx,ebx
100050b5:	83 ec 1c             	sub    esp,0x1c
100050b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100050bc:	c1 e0 04             	shl    eax,0x4
100050bf:	89 04 24             	mov    DWORD PTR [esp],eax
100050c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100050c6:	c1 e0 04             	shl    eax,0x4
100050c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100050cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100050d1:	c1 e0 03             	shl    eax,0x3
100050d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100050d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
100050db:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
100050df:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	100050e2: R_386_32	cp
100050e6:	8d 3c 19             	lea    edi,[ecx+ebx*1]
100050e9:	31 f6                	xor    esi,esi
100050eb:	84 c0                	test   al,al
100050ed:	79 22                	jns    10005111 <drawVGAChar(int, int, int)+0x62>
100050ef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100050f3:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100050f5: R_386_32	screen
100050f9:	8b 0a                	mov    ecx,DWORD PTR [edx]
100050fb:	6a 00                	push   0x0
100050fd:	57                   	push   edi
100050fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10005102:	8d 2c 06             	lea    ebp,[esi+eax*1]
10005105:	55                   	push   ebp
10005106:	52                   	push   edx
10005107:	ff 51 24             	call   DWORD PTR [ecx+0x24]
1000510a:	83 c4 10             	add    esp,0x10
1000510d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
10005111:	d1 e0                	shl    eax,1
10005113:	46                   	inc    esi
10005114:	83 fe 08             	cmp    esi,0x8
10005117:	75 d2                	jne    100050eb <drawVGAChar(int, int, int)+0x3c>
10005119:	43                   	inc    ebx
1000511a:	83 fb 10             	cmp    ebx,0x10
1000511d:	75 b9                	jne    100050d8 <drawVGAChar(int, int, int)+0x29>
1000511f:	83 c4 1c             	add    esp,0x1c
10005122:	5b                   	pop    ebx
10005123:	5e                   	pop    esi
10005124:	5f                   	pop    edi
10005125:	5d                   	pop    ebp
10005126:	c3                   	ret    

10005127 <NiDisplayRAM(void*)>:
10005127:	56                   	push   esi
10005128:	53                   	push   ebx
10005129:	83 ec 14             	sub    esp,0x14
1000512c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000512d: R_386_32	irqDisableCounter
10005131:	48                   	dec    eax
10005132:	a3 00 00 00 00       	mov    ds:0x0,eax	10005133: R_386_32	irqDisableCounter
10005137:	75 01                	jne    1000513a <NiDisplayRAM(void*)+0x13>
10005139:	fb                   	sti    
1000513a:	6b 05 00 00 00 00 64 	imul   eax,DWORD PTR ds:0x0,0x64	1000513c: R_386_32	Phys::usedPages
10005141:	31 db                	xor    ebx,ebx
10005143:	99                   	cdq    
10005144:	f7 3d 00 00 00 00    	idiv   DWORD PTR ds:0x0	10005146: R_386_32	Phys::usablePages
1000514a:	31 f6                	xor    esi,esi
1000514c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10005150:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005152: R_386_32	screen
10005156:	8b 0a                	mov    ecx,DWORD PTR [edx]
10005158:	68 ff ff ff 00       	push   0xffffff
1000515d:	53                   	push   ebx
1000515e:	56                   	push   esi
1000515f:	46                   	inc    esi
10005160:	52                   	push   edx
10005161:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10005164:	83 c4 10             	add    esp,0x10
10005167:	83 fe 60             	cmp    esi,0x60
1000516a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000516e:	75 dc                	jne    1000514c <NiDisplayRAM(void*)+0x25>
10005170:	43                   	inc    ebx
10005171:	83 fb 10             	cmp    ebx,0x10
10005174:	75 d4                	jne    1000514a <NiDisplayRAM(void*)+0x23>
10005176:	b9 0a 00 00 00       	mov    ecx,0xa
1000517b:	52                   	push   edx
1000517c:	99                   	cdq    
1000517d:	f7 f9                	idiv   ecx
1000517f:	89 d3                	mov    ebx,edx
10005181:	83 c0 30             	add    eax,0x30
10005184:	50                   	push   eax
10005185:	6a 00                	push   0x0
10005187:	6a 00                	push   0x0
10005189:	e8 fc ff ff ff       	call   1000518a <NiDisplayRAM(void*)+0x63>	1000518a: R_386_PC32	drawVGAChar(int, int, int)
1000518e:	8d 43 30             	lea    eax,[ebx+0x30]
10005191:	83 c4 0c             	add    esp,0xc
10005194:	50                   	push   eax
10005195:	6a 00                	push   0x0
10005197:	6a 01                	push   0x1
10005199:	e8 fc ff ff ff       	call   1000519a <NiDisplayRAM(void*)+0x73>	1000519a: R_386_PC32	drawVGAChar(int, int, int)
1000519e:	83 c4 0c             	add    esp,0xc
100051a1:	6a 25                	push   0x25
100051a3:	6a 00                	push   0x0
100051a5:	6a 02                	push   0x2
100051a7:	e8 fc ff ff ff       	call   100051a8 <NiDisplayRAM(void*)+0x81>	100051a8: R_386_PC32	drawVGAChar(int, int, int)
100051ac:	83 c4 0c             	add    esp,0xc
100051af:	6a 20                	push   0x20
100051b1:	6a 00                	push   0x0
100051b3:	6a 03                	push   0x3
100051b5:	e8 fc ff ff ff       	call   100051b6 <NiDisplayRAM(void*)+0x8f>	100051b6: R_386_PC32	drawVGAChar(int, int, int)
100051ba:	83 c4 0c             	add    esp,0xc
100051bd:	6a 52                	push   0x52
100051bf:	6a 00                	push   0x0
100051c1:	6a 04                	push   0x4
100051c3:	e8 fc ff ff ff       	call   100051c4 <NiDisplayRAM(void*)+0x9d>	100051c4: R_386_PC32	drawVGAChar(int, int, int)
100051c8:	83 c4 0c             	add    esp,0xc
100051cb:	6a 41                	push   0x41
100051cd:	6a 00                	push   0x0
100051cf:	6a 05                	push   0x5
100051d1:	e8 fc ff ff ff       	call   100051d2 <NiDisplayRAM(void*)+0xab>	100051d2: R_386_PC32	drawVGAChar(int, int, int)
100051d6:	83 c4 0c             	add    esp,0xc
100051d9:	6a 4d                	push   0x4d
100051db:	6a 00                	push   0x0
100051dd:	6a 06                	push   0x6
100051df:	e8 fc ff ff ff       	call   100051e0 <NiDisplayRAM(void*)+0xb9>	100051e0: R_386_PC32	drawVGAChar(int, int, int)
100051e4:	83 c4 0c             	add    esp,0xc
100051e7:	6a 20                	push   0x20
100051e9:	6a 00                	push   0x0
100051eb:	6a 07                	push   0x7
100051ed:	e8 fc ff ff ff       	call   100051ee <NiDisplayRAM(void*)+0xc7>	100051ee: R_386_PC32	drawVGAChar(int, int, int)
100051f2:	83 c4 0c             	add    esp,0xc
100051f5:	6a 75                	push   0x75
100051f7:	6a 00                	push   0x0
100051f9:	6a 08                	push   0x8
100051fb:	e8 fc ff ff ff       	call   100051fc <NiDisplayRAM(void*)+0xd5>	100051fc: R_386_PC32	drawVGAChar(int, int, int)
10005200:	83 c4 0c             	add    esp,0xc
10005203:	6a 73                	push   0x73
10005205:	6a 00                	push   0x0
10005207:	6a 09                	push   0x9
10005209:	e8 fc ff ff ff       	call   1000520a <NiDisplayRAM(void*)+0xe3>	1000520a: R_386_PC32	drawVGAChar(int, int, int)
1000520e:	83 c4 0c             	add    esp,0xc
10005211:	6a 65                	push   0x65
10005213:	6a 00                	push   0x0
10005215:	6a 0a                	push   0xa
10005217:	e8 fc ff ff ff       	call   10005218 <NiDisplayRAM(void*)+0xf1>	10005218: R_386_PC32	drawVGAChar(int, int, int)
1000521c:	83 c4 0c             	add    esp,0xc
1000521f:	6a 64                	push   0x64
10005221:	6a 00                	push   0x0
10005223:	6a 0b                	push   0xb
10005225:	e8 fc ff ff ff       	call   10005226 <NiDisplayRAM(void*)+0xff>	10005226: R_386_PC32	drawVGAChar(int, int, int)
1000522a:	c7 04 24 c4 09 00 00 	mov    DWORD PTR [esp],0x9c4
10005231:	e8 fc ff ff ff       	call   10005232 <NiDisplayRAM(void*)+0x10b>	10005232: R_386_PC32	milliTenthSleep(unsigned int)
10005236:	83 c4 10             	add    esp,0x10
10005239:	e9 fc fe ff ff       	jmp    1000513a <NiDisplayRAM(void*)+0x13>

1000523e <monikaBsod(char*)>:
1000523e:	55                   	push   ebp
1000523f:	57                   	push   edi
10005240:	31 ff                	xor    edi,edi
10005242:	56                   	push   esi
10005243:	53                   	push   ebx
10005244:	31 db                	xor    ebx,ebx
10005246:	83 ec 24             	sub    esp,0x24
10005249:	a1 00 00 00 00       	mov    eax,ds:0x0	1000524a: R_386_32	screen
1000524e:	8b 10                	mov    edx,DWORD PTR [eax]
10005250:	68 ff ff ff 00       	push   0xffffff
10005255:	50                   	push   eax
10005256:	ff 52 40             	call   DWORD PTR [edx+0x40]
10005259:	83 c4 10             	add    esp,0x10
1000525c:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	1000525e: R_386_32	justMonika
10005262:	8d 43 01             	lea    eax,[ebx+0x1]
10005265:	84 c9                	test   cl,cl
10005267:	79 0e                	jns    10005277 <monikaBsod(char*)+0x39>
10005269:	8d 51 80             	lea    edx,[ecx-0x80]
1000526c:	83 c3 02             	add    ebx,0x2
1000526f:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	10005271: R_386_32	justMonika
10005275:	eb 04                	jmp    1000527b <monikaBsod(char*)+0x3d>
10005277:	89 c3                	mov    ebx,eax
10005279:	b2 01                	mov    dl,0x1
1000527b:	0f b6 c1             	movzx  eax,cl
1000527e:	83 e1 03             	and    ecx,0x3
10005281:	89 c6                	mov    esi,eax
10005283:	6b c9 55             	imul   ecx,ecx,0x55
10005286:	c1 fe 05             	sar    esi,0x5
10005289:	c1 f8 02             	sar    eax,0x2
1000528c:	83 e6 03             	and    esi,0x3
1000528f:	83 e0 07             	and    eax,0x7
10005292:	6b f6 55             	imul   esi,esi,0x55
10005295:	6b c0 24             	imul   eax,eax,0x24
10005298:	c1 e6 10             	shl    esi,0x10
1000529b:	c1 e0 08             	shl    eax,0x8
1000529e:	09 f0                	or     eax,esi
100052a0:	31 f6                	xor    esi,esi
100052a2:	09 c8                	or     eax,ecx
100052a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100052a8:	0f b6 c2             	movzx  eax,dl
100052ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100052af:	8d 04 37             	lea    eax,[edi+esi*1]
100052b2:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
100052b6:	7f 10                	jg     100052c8 <monikaBsod(char*)+0x8a>
100052b8:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
100052bc:	81 ff ff af 04 00    	cmp    edi,0x4afff
100052c2:	7e 98                	jle    1000525c <monikaBsod(char*)+0x1e>
100052c4:	31 db                	xor    ebx,ebx
100052c6:	eb 25                	jmp    100052ed <monikaBsod(char*)+0xaf>
100052c8:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100052ca: R_386_32	screen
100052ce:	b9 80 02 00 00       	mov    ecx,0x280
100052d3:	8b 2a                	mov    ebp,DWORD PTR [edx]
100052d5:	46                   	inc    esi
100052d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
100052da:	99                   	cdq    
100052db:	f7 f9                	idiv   ecx
100052dd:	50                   	push   eax
100052de:	52                   	push   edx
100052df:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100052e1: R_386_32	screen
100052e5:	ff 55 24             	call   DWORD PTR [ebp+0x24]
100052e8:	83 c4 10             	add    esp,0x10
100052eb:	eb c2                	jmp    100052af <monikaBsod(char*)+0x71>
100052ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100052f1:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
100052f5:	84 c0                	test   al,al
100052f7:	74 1d                	je     10005316 <monikaBsod(char*)+0xd8>
100052f9:	b9 19 00 00 00       	mov    ecx,0x19
100052fe:	52                   	push   edx
100052ff:	50                   	push   eax
10005300:	89 d8                	mov    eax,ebx
10005302:	43                   	inc    ebx
10005303:	99                   	cdq    
10005304:	f7 f9                	idiv   ecx
10005306:	83 c0 0a             	add    eax,0xa
10005309:	42                   	inc    edx
1000530a:	50                   	push   eax
1000530b:	52                   	push   edx
1000530c:	e8 fc ff ff ff       	call   1000530d <monikaBsod(char*)+0xcf>	1000530d: R_386_PC32	drawVGAChar(int, int, int)
10005311:	83 c4 10             	add    esp,0x10
10005314:	eb d7                	jmp    100052ed <monikaBsod(char*)+0xaf>
10005316:	f4                   	hlt    
10005317:	eb fd                	jmp    10005316 <monikaBsod(char*)+0xd8>

10005319 <NiInstallSysHooks()>:
10005319:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000531b: R_386_32	guiPanicHandler
	1000531f: R_386_32	monikaBsod(char*)
10005323:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10005325: R_386_32	systemCallHandlers
	10005329: R_386_32	NiSystemCallHandler(regs*)
1000532d:	c3                   	ret    

1000532e <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
1000532e:	56                   	push   esi
1000532f:	53                   	push   ebx
10005330:	83 ec 10             	sub    esp,0x10
10005333:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10005337:	68 67 60 00 10       	push   0x10006067	10005338: R_386_32	.text
1000533c:	e8 fc ff ff ff       	call   1000533d <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	1000533d: R_386_PC32	Dbg::kprintf(char const*, ...)
10005341:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
10005348:	e8 fc ff ff ff       	call   10005349 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x1b>	10005349: R_386_PC32	malloc
1000534d:	89 c6                	mov    esi,eax
1000534f:	58                   	pop    eax
10005350:	5a                   	pop    edx
10005351:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10005357:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
1000535d:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10005363:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10005369:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000536b: R_386_32	ctxt
1000536f:	56                   	push   esi
10005370:	e8 fc ff ff ff       	call   10005371 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x43>	10005371: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10005375:	83 c4 18             	add    esp,0x18
10005378:	56                   	push   esi
10005379:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000537b: R_386_32	desktop
1000537f:	e8 fc ff ff ff       	call   10005380 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x52>	10005380: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10005384:	59                   	pop    ecx
10005385:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005387: R_386_32	desktop
1000538b:	e8 fc ff ff ff       	call   1000538c <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	1000538c: R_386_PC32	NIDesktop::completeRefresh()
10005390:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10005396:	89 34 24             	mov    DWORD PTR [esp],esi
10005399:	e8 fc ff ff ff       	call   1000539a <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x6c>	1000539a: R_386_PC32	NIWindow::drawBasicWindow()
1000539e:	83 c4 14             	add    esp,0x14
100053a1:	31 c0                	xor    eax,eax
100053a3:	31 d2                	xor    edx,edx
100053a5:	5b                   	pop    ebx
100053a6:	5e                   	pop    esi
100053a7:	c3                   	ret    

100053a8 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
100053a8:	55                   	push   ebp
100053a9:	57                   	push   edi
100053aa:	56                   	push   esi
100053ab:	31 f6                	xor    esi,esi
100053ad:	53                   	push   ebx
100053ae:	83 ec 28             	sub    esp,0x28
100053b1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
100053b5:	68 82 60 00 10       	push   0x10006082	100053b6: R_386_32	.text
100053ba:	e8 fc ff ff ff       	call   100053bb <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x13>	100053bb: R_386_PC32	Dbg::kprintf(char const*, ...)
100053bf:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
100053c5:	83 c4 10             	add    esp,0x10
100053c8:	31 c0                	xor    eax,eax
100053ca:	39 b3 70 01 00 00    	cmp    DWORD PTR [ebx+0x170],esi
100053d0:	7e 33                	jle    10005405 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x5d>
100053d2:	31 ff                	xor    edi,edi
100053d4:	39 bb 6c 01 00 00    	cmp    DWORD PTR [ebx+0x16c],edi
100053da:	7e 26                	jle    10005402 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x5a>
100053dc:	8b 95 b8 00 00 00    	mov    edx,DWORD PTR [ebp+0xb8]
100053e2:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
100053e5:	83 fa ff             	cmp    edx,0xffffffff
100053e8:	74 14                	je     100053fe <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x56>
100053ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100053ee:	52                   	push   edx
100053ef:	56                   	push   esi
100053f0:	57                   	push   edi
100053f1:	53                   	push   ebx
100053f2:	e8 fc ff ff ff       	call   100053f3 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x4b>	100053f3: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100053f7:	83 c4 10             	add    esp,0x10
100053fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100053fe:	40                   	inc    eax
100053ff:	47                   	inc    edi
10005400:	eb d2                	jmp    100053d4 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x2c>
10005402:	46                   	inc    esi
10005403:	eb c5                	jmp    100053ca <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x22>
10005405:	50                   	push   eax
10005406:	50                   	push   eax
10005407:	53                   	push   ebx
10005408:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000540a: R_386_32	desktop
1000540e:	e8 fc ff ff ff       	call   1000540f <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x67>	1000540f: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10005413:	83 c4 2c             	add    esp,0x2c
10005416:	31 c0                	xor    eax,eax
10005418:	5b                   	pop    ebx
10005419:	31 d2                	xor    edx,edx
1000541b:	5e                   	pop    esi
1000541c:	5f                   	pop    edi
1000541d:	5d                   	pop    ebp
1000541e:	c3                   	ret    

1000541f <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
1000541f:	53                   	push   ebx
10005420:	83 ec 14             	sub    esp,0x14
10005423:	68 a4 60 00 10       	push   0x100060a4	10005424: R_386_32	.text
10005428:	e8 fc ff ff ff       	call   10005429 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0xa>	10005429: R_386_PC32	Dbg::kprintf(char const*, ...)
1000542d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10005431:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10005437:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000543a:	e8 fc ff ff ff       	call   1000543b <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x1c>	1000543b: R_386_PC32	NIWindow::request()
1000543f:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005442:	e8 fc ff ff ff       	call   10005443 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x24>	10005443: R_386_PC32	NIWindow::drawBasicWindow()
10005447:	31 c0                	xor    eax,eax
10005449:	31 d2                	xor    edx,edx
1000544b:	83 c4 18             	add    esp,0x18
1000544e:	5b                   	pop    ebx
1000544f:	c3                   	ret    

10005450 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)>:
10005450:	55                   	push   ebp
10005451:	57                   	push   edi
10005452:	56                   	push   esi
10005453:	53                   	push   ebx
10005454:	83 ec 38             	sub    esp,0x38
10005457:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
1000545b:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10005461:	53                   	push   ebx
10005462:	e8 fc ff ff ff       	call   10005463 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x13>	10005463: R_386_PC32	NIWindow::getEventCount()
10005467:	83 c4 10             	add    esp,0x10
1000546a:	85 c0                	test   eax,eax
1000546c:	74 54                	je     100054c2 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x72>
1000546e:	89 e6                	mov    esi,esp
10005470:	8d bd bc 00 00 00    	lea    edi,[ebp+0xbc]
10005476:	50                   	push   eax
10005477:	50                   	push   eax
10005478:	53                   	push   ebx
10005479:	56                   	push   esi
1000547a:	e8 fc ff ff ff       	call   1000547b <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x2b>	1000547b: R_386_PC32	NIWindow::grabEvent()
1000547f:	b9 05 00 00 00       	mov    ecx,0x5
10005484:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005486:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
1000548c:	89 85 a4 00 00 00    	mov    DWORD PTR [ebp+0xa4],eax
10005492:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10005498:	89 85 a8 00 00 00    	mov    DWORD PTR [ebp+0xa8],eax
1000549e:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
100054a4:	89 85 ac 00 00 00    	mov    DWORD PTR [ebp+0xac],eax
100054aa:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
100054b0:	89 85 b0 00 00 00    	mov    DWORD PTR [ebp+0xb0],eax
100054b6:	53                   	push   ebx
100054b7:	e8 fc ff ff ff       	call   100054b8 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x68>	100054b8: R_386_PC32	NIWindow::getEventCount()
100054bc:	83 c4 10             	add    esp,0x10
100054bf:	99                   	cdq    
100054c0:	eb 05                	jmp    100054c7 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x77>
100054c2:	83 c8 ff             	or     eax,0xffffffff
100054c5:	89 c2                	mov    edx,eax
100054c7:	83 c4 2c             	add    esp,0x2c
100054ca:	5b                   	pop    ebx
100054cb:	5e                   	pop    esi
100054cc:	5f                   	pop    edi
100054cd:	5d                   	pop    ebp
100054ce:	c3                   	ret    

100054cf <NiSystemCallHandler(regs*)>:
100054cf:	53                   	push   ebx
100054d0:	83 ec 14             	sub    esp,0x14
100054d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100054d7:	68 c3 60 00 10       	push   0x100060c3	100054d8: R_386_32	.text
100054dc:	e8 fc ff ff ff       	call   100054dd <NiSystemCallHandler(regs*)+0xe>	100054dd: R_386_PC32	Dbg::kprintf(char const*, ...)
100054e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
100054e4:	83 c4 10             	add    esp,0x10
100054e7:	83 f8 04             	cmp    eax,0x4
100054ea:	74 28                	je     10005514 <NiSystemCallHandler(regs*)+0x45>
100054ec:	77 06                	ja     100054f4 <NiSystemCallHandler(regs*)+0x25>
100054ee:	85 c0                	test   eax,eax
100054f0:	74 13                	je     10005505 <NiSystemCallHandler(regs*)+0x36>
100054f2:	eb 0a                	jmp    100054fe <NiSystemCallHandler(regs*)+0x2f>
100054f4:	83 f8 05             	cmp    eax,0x5
100054f7:	74 2a                	je     10005523 <NiSystemCallHandler(regs*)+0x54>
100054f9:	83 f8 06             	cmp    eax,0x6
100054fc:	74 34                	je     10005532 <NiSystemCallHandler(regs*)+0x63>
100054fe:	83 c8 ff             	or     eax,0xffffffff
10005501:	89 c2                	mov    edx,eax
10005503:	eb 3d                	jmp    10005542 <NiSystemCallHandler(regs*)+0x73>
10005505:	50                   	push   eax
10005506:	50                   	push   eax
10005507:	ff 73 24             	push   DWORD PTR [ebx+0x24]
1000550a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
1000550d:	e8 fc ff ff ff       	call   1000550e <NiSystemCallHandler(regs*)+0x3f>	1000550e: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
10005512:	eb 2b                	jmp    1000553f <NiSystemCallHandler(regs*)+0x70>
10005514:	50                   	push   eax
10005515:	50                   	push   eax
10005516:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10005519:	ff 73 28             	push   DWORD PTR [ebx+0x28]
1000551c:	e8 fc ff ff ff       	call   1000551d <NiSystemCallHandler(regs*)+0x4e>	1000551d: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
10005521:	eb 1c                	jmp    1000553f <NiSystemCallHandler(regs*)+0x70>
10005523:	50                   	push   eax
10005524:	50                   	push   eax
10005525:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10005528:	ff 73 28             	push   DWORD PTR [ebx+0x28]
1000552b:	e8 fc ff ff ff       	call   1000552c <NiSystemCallHandler(regs*)+0x5d>	1000552c: R_386_PC32	NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)
10005530:	eb 0d                	jmp    1000553f <NiSystemCallHandler(regs*)+0x70>
10005532:	50                   	push   eax
10005533:	50                   	push   eax
10005534:	ff 73 24             	push   DWORD PTR [ebx+0x24]
10005537:	ff 73 28             	push   DWORD PTR [ebx+0x28]
1000553a:	e8 fc ff ff ff       	call   1000553b <NiSystemCallHandler(regs*)+0x6c>	1000553b: R_386_PC32	NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)
1000553f:	83 c4 10             	add    esp,0x10
10005542:	83 c4 08             	add    esp,0x8
10005545:	5b                   	pop    ebx
10005546:	c3                   	ret    
10005547:	90                   	nop

10005548 <NIWindow::postEvent(NiEvent)>:
10005548:	57                   	push   edi
10005549:	b9 05 00 00 00       	mov    ecx,0x5
1000554e:	56                   	push   esi
1000554f:	53                   	push   ebx
10005550:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10005554:	8d 74 24 14          	lea    esi,[esp+0x14]
10005558:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
1000555b:	6b d0 14             	imul   edx,eax,0x14
1000555e:	40                   	inc    eax
1000555f:	8d 7c 13 18          	lea    edi,[ebx+edx*1+0x18]
10005563:	99                   	cdq    
10005564:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005566:	b9 10 00 00 00       	mov    ecx,0x10
1000556b:	ff 43 0c             	inc    DWORD PTR [ebx+0xc]
1000556e:	f7 f9                	idiv   ecx
10005570:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
10005573:	5b                   	pop    ebx
10005574:	5e                   	pop    esi
10005575:	5f                   	pop    edi
10005576:	c3                   	ret    
10005577:	90                   	nop

10005578 <NIWindow::getEventCount()>:
10005578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000557c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
1000557f:	c3                   	ret    

10005580 <NIWindow::grabEvent()>:
10005580:	57                   	push   edi
10005581:	b9 05 00 00 00       	mov    ecx,0x5
10005586:	56                   	push   esi
10005587:	53                   	push   ebx
10005588:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000558c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10005590:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10005593:	6b d0 14             	imul   edx,eax,0x14
10005596:	40                   	inc    eax
10005597:	8d 74 13 18          	lea    esi,[ebx+edx*1+0x18]
1000559b:	99                   	cdq    
1000559c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000559e:	ff 4b 0c             	dec    DWORD PTR [ebx+0xc]
100055a1:	b9 10 00 00 00       	mov    ecx,0x10
100055a6:	f7 f9                	idiv   ecx
100055a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100055ac:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
100055af:	5b                   	pop    ebx
100055b0:	5e                   	pop    esi
100055b1:	5f                   	pop    edi
100055b2:	c2 04 00             	ret    0x4
100055b5:	90                   	nop

100055b6 <NIWindow::invalidate()>:
100055b6:	53                   	push   ebx
100055b7:	83 ec 08             	sub    esp,0x8
100055ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100055be:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
100055c5:	74 28                	je     100055ef <NIWindow::invalidate()+0x39>
100055c7:	83 bb 60 01 00 00 00 	cmp    DWORD PTR [ebx+0x160],0x0
100055ce:	74 1f                	je     100055ef <NIWindow::invalidate()+0x39>
100055d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
100055d3:	85 c0                	test   eax,eax
100055d5:	74 18                	je     100055ef <NIWindow::invalidate()+0x39>
100055d7:	83 ec 0c             	sub    esp,0xc
100055da:	50                   	push   eax
100055db:	e8 fc ff ff ff       	call   100055dc <NIWindow::invalidate()+0x26>	100055dc: R_386_PC32	free
100055e0:	59                   	pop    ecx
100055e1:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
100055e7:	e8 fc ff ff ff       	call   100055e8 <NIWindow::invalidate()+0x32>	100055e8: R_386_PC32	free
100055ec:	83 c4 10             	add    esp,0x10
100055ef:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
100055f9:	c7 83 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x15c],0x0
10005603:	c6 83 58 01 00 00 00 	mov    BYTE PTR [ebx+0x158],0x0
1000560a:	83 c4 08             	add    esp,0x8
1000560d:	5b                   	pop    ebx
1000560e:	c3                   	ret    
1000560f:	90                   	nop

10005610 <NIWindow::putpixel(int, int, unsigned int)>:
10005610:	56                   	push   esi
10005611:	53                   	push   ebx
10005612:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10005616:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000561a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
1000561d:	0f af 83 6c 01 00 00 	imul   eax,DWORD PTR [ebx+0x16c]
10005624:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10005628:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
1000562c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000562f:	83 fe 04             	cmp    esi,0x4
10005632:	75 05                	jne    10005639 <NIWindow::putpixel(int, int, unsigned int)+0x29>
10005634:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
10005637:	eb 0e                	jmp    10005647 <NIWindow::putpixel(int, int, unsigned int)+0x37>
10005639:	83 fe 02             	cmp    esi,0x2
1000563c:	75 06                	jne    10005644 <NIWindow::putpixel(int, int, unsigned int)+0x34>
1000563e:	66 89 0c 42          	mov    WORD PTR [edx+eax*2],cx
10005642:	eb 03                	jmp    10005647 <NIWindow::putpixel(int, int, unsigned int)+0x37>
10005644:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
10005647:	5b                   	pop    ebx
10005648:	5e                   	pop    esi
10005649:	c3                   	ret    

1000564a <NIWindow::drawBasicWindow()>:
1000564a:	55                   	push   ebp
1000564b:	57                   	push   edi
1000564c:	56                   	push   esi
1000564d:	31 f6                	xor    esi,esi
1000564f:	53                   	push   ebx
10005650:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
10005654:	39 b5 70 01 00 00    	cmp    DWORD PTR [ebp+0x170],esi
1000565a:	7e 31                	jle    1000568d <NIWindow::drawBasicWindow()+0x43>
1000565c:	31 db                	xor    ebx,ebx
1000565e:	83 fe 19             	cmp    esi,0x19
10005661:	0f 9e c3             	setle  bl
10005664:	31 ff                	xor    edi,edi
10005666:	4b                   	dec    ebx
10005667:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
1000566d:	81 c3 ff ff ff 00    	add    ebx,0xffffff
10005673:	39 bd 6c 01 00 00    	cmp    DWORD PTR [ebp+0x16c],edi
10005679:	7e 0f                	jle    1000568a <NIWindow::drawBasicWindow()+0x40>
1000567b:	53                   	push   ebx
1000567c:	56                   	push   esi
1000567d:	57                   	push   edi
1000567e:	47                   	inc    edi
1000567f:	55                   	push   ebp
10005680:	e8 fc ff ff ff       	call   10005681 <NIWindow::drawBasicWindow()+0x37>	10005681: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10005685:	83 c4 10             	add    esp,0x10
10005688:	eb e9                	jmp    10005673 <NIWindow::drawBasicWindow()+0x29>
1000568a:	46                   	inc    esi
1000568b:	eb c7                	jmp    10005654 <NIWindow::drawBasicWindow()+0xa>
1000568d:	5b                   	pop    ebx
1000568e:	5e                   	pop    esi
1000568f:	5f                   	pop    edi
10005690:	5d                   	pop    ebp
10005691:	c3                   	ret    

10005692 <NIWindow::rerender()>:
10005692:	57                   	push   edi
10005693:	56                   	push   esi
10005694:	53                   	push   ebx
10005695:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10005699:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
100056a0:	74 0c                	je     100056ae <NIWindow::rerender()+0x1c>
100056a2:	83 ec 0c             	sub    esp,0xc
100056a5:	53                   	push   ebx
100056a6:	e8 fc ff ff ff       	call   100056a7 <NIWindow::rerender()+0x15>	100056a7: R_386_PC32	NIWindow::invalidate()
100056ab:	83 c4 10             	add    esp,0x10
100056ae:	8b b3 70 01 00 00    	mov    esi,DWORD PTR [ebx+0x170]
100056b4:	83 ec 0c             	sub    esp,0xc
100056b7:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
100056bd:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
100056c4:	50                   	push   eax
100056c5:	e8 fc ff ff ff       	call   100056c6 <NIWindow::rerender()+0x34>	100056c6: R_386_PC32	malloc
100056ca:	0f af b3 6c 01 00 00 	imul   esi,DWORD PTR [ebx+0x16c]
100056d1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
100056d7:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
100056db:	89 34 24             	mov    DWORD PTR [esp],esi
100056de:	e8 fc ff ff ff       	call   100056df <NIWindow::rerender()+0x4d>	100056df: R_386_PC32	malloc
100056e3:	89 f1                	mov    ecx,esi
100056e5:	89 c2                	mov    edx,eax
100056e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
100056ea:	89 d7                	mov    edi,edx
100056ec:	31 c0                	xor    eax,eax
100056ee:	83 c4 10             	add    esp,0x10
100056f1:	f3 aa                	rep stos BYTE PTR es:[edi],al
100056f3:	31 c0                	xor    eax,eax
100056f5:	39 83 5c 01 00 00    	cmp    DWORD PTR [ebx+0x15c],eax
100056fb:	7e 7f                	jle    1000577c <NIWindow::rerender()+0xea>
100056fd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10005704:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
1000570a:	01 d6                	add    esi,edx
1000570c:	83 f8 06             	cmp    eax,0x6
1000570f:	7f 1e                	jg     1000572f <NIWindow::rerender()+0x9d>
10005711:	8b 0c 85 00 00 00 00 	mov    ecx,DWORD PTR [eax*4+0x0]	10005714: R_386_32	curveLookup7
10005718:	66 89 0e             	mov    WORD PTR [esi],cx
1000571b:	8b 8b 60 01 00 00    	mov    ecx,DWORD PTR [ebx+0x160]
10005721:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10005724: R_386_32	curveLookup7
10005728:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
1000572d:	eb 47                	jmp    10005776 <NIWindow::rerender()+0xe4>
1000572f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
10005735:	8d 79 fa             	lea    edi,[ecx-0x6]
10005738:	39 c7                	cmp    edi,eax
1000573a:	7f 28                	jg     10005764 <NIWindow::rerender()+0xd2>
1000573c:	29 c1                	sub    ecx,eax
1000573e:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10005741: R_386_32	curveLookup7
10005745:	66 89 0e             	mov    WORD PTR [esi],cx
10005748:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
1000574e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10005754:	29 c1                	sub    ecx,eax
10005756:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10005759: R_386_32	curveLookup7
1000575d:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
10005762:	eb 12                	jmp    10005776 <NIWindow::rerender()+0xe4>
10005764:	66 c7 06 00 00       	mov    WORD PTR [esi],0x0
10005769:	8b 8b 60 01 00 00    	mov    ecx,DWORD PTR [ebx+0x160]
1000576f:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
10005776:	40                   	inc    eax
10005777:	e9 79 ff ff ff       	jmp    100056f5 <NIWindow::rerender()+0x63>
1000577c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
10005783:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10005787:	5b                   	pop    ebx
10005788:	5e                   	pop    esi
10005789:	5f                   	pop    edi
1000578a:	e9 bb fe ff ff       	jmp    1000564a <NIWindow::drawBasicWindow()>
1000578f:	90                   	nop

10005790 <NIWindow::changeContext(NIContext*, int, int)>:
10005790:	55                   	push   ebp
10005791:	57                   	push   edi
10005792:	56                   	push   esi
10005793:	53                   	push   ebx
10005794:	83 ec 18             	sub    esp,0x18
10005797:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
1000579b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
1000579f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
100057a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100057a7:	53                   	push   ebx
100057a8:	e8 fc ff ff ff       	call   100057a9 <NIWindow::changeContext(NIContext*, int, int)+0x19>	100057a9: R_386_PC32	NIWindow::invalidate()
100057ad:	89 33                	mov    DWORD PTR [ebx],esi
100057af:	89 ab 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ebp
100057b5:	89 bb 68 01 00 00    	mov    DWORD PTR [ebx+0x168],edi
100057bb:	83 c4 10             	add    esp,0x10
100057be:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
100057c4:	83 f8 08             	cmp    eax,0x8
100057c7:	7f 09                	jg     100057d2 <NIWindow::changeContext(NIContext*, int, int)+0x42>
100057c9:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
100057d0:	eb 15                	jmp    100057e7 <NIWindow::changeContext(NIContext*, int, int)+0x57>
100057d2:	83 f8 10             	cmp    eax,0x10
100057d5:	7f 09                	jg     100057e0 <NIWindow::changeContext(NIContext*, int, int)+0x50>
100057d7:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
100057de:	eb 07                	jmp    100057e7 <NIWindow::changeContext(NIContext*, int, int)+0x57>
100057e0:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
100057e7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100057eb:	83 c4 0c             	add    esp,0xc
100057ee:	5b                   	pop    ebx
100057ef:	5e                   	pop    esi
100057f0:	5f                   	pop    edi
100057f1:	5d                   	pop    ebp
100057f2:	e9 9b fe ff ff       	jmp    10005692 <NIWindow::rerender()>
100057f7:	90                   	nop

100057f8 <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
100057f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100057fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10005800:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
10005807:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
1000580d:	c7 80 88 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x188],0x0
10005817:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000581b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
10005822:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10005828:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
10005832:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
1000583c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10005843:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
1000584a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10005851:	e9 3a ff ff ff       	jmp    10005790 <NIWindow::changeContext(NIContext*, int, int)>

10005856 <NIWindow::request()>:
10005856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000585a:	80 b8 58 01 00 00 00 	cmp    BYTE PTR [eax+0x158],0x0
10005861:	75 05                	jne    10005868 <NIWindow::request()+0x12>
10005863:	e9 2a fe ff ff       	jmp    10005692 <NIWindow::rerender()>
10005868:	c3                   	ret    
10005869:	90                   	nop

1000586a <NIWindow::SHADOW_TEST()>:
1000586a:	55                   	push   ebp
1000586b:	57                   	push   edi
1000586c:	56                   	push   esi
1000586d:	53                   	push   ebx
1000586e:	83 ec 28             	sub    esp,0x28
10005871:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10005875:	53                   	push   ebx
10005876:	e8 fc ff ff ff       	call   10005877 <NIWindow::SHADOW_TEST()+0xd>	10005877: R_386_PC32	NIWindow::request()
1000587b:	83 c4 10             	add    esp,0x10
1000587e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10005884:	39 83 5c 01 00 00    	cmp    DWORD PTR [ebx+0x15c],eax
1000588a:	74 10                	je     1000589c <NIWindow::SHADOW_TEST()+0x32>
1000588c:	83 ec 0c             	sub    esp,0xc
1000588f:	68 d8 60 00 10       	push   0x100060d8	10005890: R_386_32	.text
10005894:	e8 fc ff ff ff       	call   10005895 <NIWindow::SHADOW_TEST()+0x2b>	10005895: R_386_PC32	KePanic(char const*)
10005899:	83 c4 10             	add    esp,0x10
1000589c:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
100058a0:	0f 85 3a 01 00 00    	jne    100059e0 <NIWindow::SHADOW_TEST()+0x176>
100058a6:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
100058ae:	31 ff                	xor    edi,edi
100058b0:	39 bb 70 01 00 00    	cmp    DWORD PTR [ebx+0x170],edi
100058b6:	0f 8e 24 01 00 00    	jle    100059e0 <NIWindow::SHADOW_TEST()+0x176>
100058bc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
100058c2:	8d 04 b8             	lea    eax,[eax+edi*4]
100058c5:	0f b7 30             	movzx  esi,WORD PTR [eax]
100058c8:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
100058cc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
100058d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100058d4:	89 34 24             	mov    DWORD PTR [esp],esi
100058d7:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
100058dd:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
100058e3:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
100058e7:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
100058ea:	0f 8e da 00 00 00    	jle    100059ca <NIWindow::SHADOW_TEST()+0x160>
100058f0:	83 ff 05             	cmp    edi,0x5
100058f3:	7e 1f                	jle    10005914 <NIWindow::SHADOW_TEST()+0xaa>
100058f5:	8d 41 fb             	lea    eax,[ecx-0x5]
100058f8:	39 f8                	cmp    eax,edi
100058fa:	7e 18                	jle    10005914 <NIWindow::SHADOW_TEST()+0xaa>
100058fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10005900:	83 c0 05             	add    eax,0x5
10005903:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10005906:	7d 0c                	jge    10005914 <NIWindow::SHADOW_TEST()+0xaa>
10005908:	8d 45 fb             	lea    eax,[ebp-0x5]
1000590b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
1000590e:	0f 8f ae 00 00 00    	jg     100059c2 <NIWindow::SHADOW_TEST()+0x158>
10005914:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
10005918:	be ea 01 00 00       	mov    esi,0x1ea
1000591d:	29 f9                	sub    ecx,edi
1000591f:	89 f0                	mov    eax,esi
10005921:	83 c1 04             	add    ecx,0x4
10005924:	99                   	cdq    
10005925:	f7 f9                	idiv   ecx
10005927:	89 c1                	mov    ecx,eax
10005929:	89 f0                	mov    eax,esi
1000592b:	99                   	cdq    
1000592c:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10005930:	83 f8 0a             	cmp    eax,0xa
10005933:	7d 05                	jge    1000593a <NIWindow::SHADOW_TEST()+0xd0>
10005935:	b8 0a 00 00 00       	mov    eax,0xa
1000593a:	39 c1                	cmp    ecx,eax
1000593c:	7d 02                	jge    10005940 <NIWindow::SHADOW_TEST()+0xd6>
1000593e:	89 c1                	mov    ecx,eax
10005940:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
10005943:	b8 ea 01 00 00       	mov    eax,0x1ea
10005948:	83 c5 04             	add    ebp,0x4
1000594b:	99                   	cdq    
1000594c:	f7 fd                	idiv   ebp
1000594e:	89 c6                	mov    esi,eax
10005950:	83 f8 0a             	cmp    eax,0xa
10005953:	7d 05                	jge    1000595a <NIWindow::SHADOW_TEST()+0xf0>
10005955:	be 0a 00 00 00       	mov    esi,0xa
1000595a:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000595d:	8d 68 05             	lea    ebp,[eax+0x5]
10005960:	b8 ea 01 00 00       	mov    eax,0x1ea
10005965:	99                   	cdq    
10005966:	f7 fd                	idiv   ebp
10005968:	39 c6                	cmp    esi,eax
1000596a:	7d 02                	jge    1000596e <NIWindow::SHADOW_TEST()+0x104>
1000596c:	89 c6                	mov    esi,eax
1000596e:	89 f0                	mov    eax,esi
10005970:	89 ca                	mov    edx,ecx
10005972:	0f af c6             	imul   eax,esi
10005975:	0f af d1             	imul   edx,ecx
10005978:	0f af f1             	imul   esi,ecx
1000597b:	01 d0                	add    eax,edx
1000597d:	8d 04 c6             	lea    eax,[esi+eax*8]
10005980:	c1 f8 08             	sar    eax,0x8
10005983:	83 f8 66             	cmp    eax,0x66
10005986:	7e 4c                	jle    100059d4 <NIWindow::SHADOW_TEST()+0x16a>
10005988:	8d 50 9a             	lea    edx,[eax-0x66]
1000598b:	d1 fa                	sar    edx,1
1000598d:	8d 42 66             	lea    eax,[edx+0x66]
10005990:	83 f8 73             	cmp    eax,0x73
10005993:	7e 3f                	jle    100059d4 <NIWindow::SHADOW_TEST()+0x16a>
10005995:	83 ea 0d             	sub    edx,0xd
10005998:	c1 fa 02             	sar    edx,0x2
1000599b:	8d 42 73             	lea    eax,[edx+0x73]
1000599e:	83 f8 7f             	cmp    eax,0x7f
100059a1:	7f 1f                	jg     100059c2 <NIWindow::SHADOW_TEST()+0x158>
100059a3:	50                   	push   eax
100059a4:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
100059aa:	01 f8                	add    eax,edi
100059ac:	50                   	push   eax
100059ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100059b1:	03 83 64 01 00 00    	add    eax,DWORD PTR [ebx+0x164]
100059b7:	50                   	push   eax
100059b8:	ff 33                	push   DWORD PTR [ebx]
100059ba:	e8 fc ff ff ff       	call   100059bb <NIWindow::SHADOW_TEST()+0x151>	100059bb: R_386_PC32	NIContext::drvDarken4(int, int, int)
100059bf:	83 c4 10             	add    esp,0x10
100059c2:	ff 04 24             	inc    DWORD PTR [esp]
100059c5:	e9 0d ff ff ff       	jmp    100058d7 <NIWindow::SHADOW_TEST()+0x6d>
100059ca:	47                   	inc    edi
100059cb:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
100059cf:	e9 dc fe ff ff       	jmp    100058b0 <NIWindow::SHADOW_TEST()+0x46>
100059d4:	83 f8 0a             	cmp    eax,0xa
100059d7:	7d ca                	jge    100059a3 <NIWindow::SHADOW_TEST()+0x139>
100059d9:	b8 0a 00 00 00       	mov    eax,0xa
100059de:	eb c3                	jmp    100059a3 <NIWindow::SHADOW_TEST()+0x139>
100059e0:	83 c4 1c             	add    esp,0x1c
100059e3:	5b                   	pop    ebx
100059e4:	5e                   	pop    esi
100059e5:	5f                   	pop    edi
100059e6:	5d                   	pop    ebp
100059e7:	c3                   	ret    

100059e8 <NIWindow::realdraw()>:
100059e8:	55                   	push   ebp
100059e9:	57                   	push   edi
100059ea:	56                   	push   esi
100059eb:	53                   	push   ebx
100059ec:	83 ec 18             	sub    esp,0x18
100059ef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100059f3:	53                   	push   ebx
100059f4:	e8 fc ff ff ff       	call   100059f5 <NIWindow::realdraw()+0xd>	100059f5: R_386_PC32	NIWindow::request()
100059f9:	83 c4 10             	add    esp,0x10
100059fc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10005a02:	39 83 5c 01 00 00    	cmp    DWORD PTR [ebx+0x15c],eax
10005a08:	74 10                	je     10005a1a <NIWindow::realdraw()+0x32>
10005a0a:	83 ec 0c             	sub    esp,0xc
10005a0d:	68 d8 60 00 10       	push   0x100060d8	10005a0e: R_386_32	.text
10005a12:	e8 fc ff ff ff       	call   10005a13 <NIWindow::realdraw()+0x2b>	10005a13: R_386_PC32	KePanic(char const*)
10005a17:	83 c4 10             	add    esp,0x10
10005a1a:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10005a1e:	75 55                	jne    10005a75 <NIWindow::realdraw()+0x8d>
10005a20:	31 f6                	xor    esi,esi
10005a22:	39 b3 70 01 00 00    	cmp    DWORD PTR [ebx+0x170],esi
10005a28:	7e 4b                	jle    10005a75 <NIWindow::realdraw()+0x8d>
10005a2a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
10005a30:	8d 04 b0             	lea    eax,[eax+esi*4]
10005a33:	0f b7 28             	movzx  ebp,WORD PTR [eax]
10005a36:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
10005a3a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
10005a40:	89 c2                	mov    edx,eax
10005a42:	29 fa                	sub    edx,edi
10005a44:	39 ea                	cmp    edx,ebp
10005a46:	7e 2a                	jle    10005a72 <NIWindow::realdraw()+0x8a>
10005a48:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005a4b:	0f af c6             	imul   eax,esi
10005a4e:	01 e8                	add    eax,ebp
10005a50:	ff 34 82             	push   DWORD PTR [edx+eax*4]
10005a53:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
10005a59:	01 f0                	add    eax,esi
10005a5b:	50                   	push   eax
10005a5c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
10005a62:	01 e8                	add    eax,ebp
10005a64:	45                   	inc    ebp
10005a65:	50                   	push   eax
10005a66:	ff 33                	push   DWORD PTR [ebx]
10005a68:	e8 fc ff ff ff       	call   10005a69 <NIWindow::realdraw()+0x81>	10005a69: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
10005a6d:	83 c4 10             	add    esp,0x10
10005a70:	eb c8                	jmp    10005a3a <NIWindow::realdraw()+0x52>
10005a72:	46                   	inc    esi
10005a73:	eb ad                	jmp    10005a22 <NIWindow::realdraw()+0x3a>
10005a75:	83 c4 0c             	add    esp,0xc
10005a78:	5b                   	pop    ebx
10005a79:	5e                   	pop    esi
10005a7a:	5f                   	pop    edi
10005a7b:	5d                   	pop    ebp
10005a7c:	c3                   	ret    
10005a7d:	90                   	nop

10005a7e <List<NIWindow*>::insertAtHead(NIWindow*)>:
10005a7e:	53                   	push   ebx
10005a7f:	83 ec 14             	sub    esp,0x14
10005a82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10005a86:	6a 0c                	push   0xc
10005a88:	e8 fc ff ff ff       	call   10005a89 <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	10005a89: R_386_PC32	malloc
10005a8d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10005a91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10005a98:	89 10                	mov    DWORD PTR [eax],edx
10005a9a:	83 c4 10             	add    esp,0x10
10005a9d:	8b 13                	mov    edx,DWORD PTR [ebx]
10005a9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10005aa2:	85 d2                	test   edx,edx
10005aa4:	74 05                	je     10005aab <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
10005aa6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10005aa9:	eb 03                	jmp    10005aae <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
10005aab:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10005aae:	89 03                	mov    DWORD PTR [ebx],eax
10005ab0:	83 c4 08             	add    esp,0x8
10005ab3:	5b                   	pop    ebx
10005ab4:	c3                   	ret    
10005ab5:	90                   	nop

10005ab6 <List<NIWindow*>::deleteElement(NIWindow*&)>:
10005ab6:	57                   	push   edi
10005ab7:	56                   	push   esi
10005ab8:	53                   	push   ebx
10005ab9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10005abd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10005ac1:	8b 19                	mov    ebx,DWORD PTR [ecx]
10005ac3:	85 db                	test   ebx,ebx
10005ac5:	74 5e                	je     10005b25 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10005ac7:	8b 30                	mov    esi,DWORD PTR [eax]
10005ac9:	89 da                	mov    edx,ebx
10005acb:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
10005ace:	8b 3a                	mov    edi,DWORD PTR [edx]
10005ad0:	85 c0                	test   eax,eax
10005ad2:	74 08                	je     10005adc <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10005ad4:	39 f7                	cmp    edi,esi
10005ad6:	73 04                	jae    10005adc <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10005ad8:	89 c2                	mov    edx,eax
10005ada:	eb ef                	jmp    10005acb <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
10005adc:	39 f7                	cmp    edi,esi
10005ade:	75 45                	jne    10005b25 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10005ae0:	39 d3                	cmp    ebx,edx
10005ae2:	75 18                	jne    10005afc <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
10005ae4:	89 01                	mov    DWORD PTR [ecx],eax
10005ae6:	85 c0                	test   eax,eax
10005ae8:	75 09                	jne    10005af3 <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
10005aea:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
10005af1:	eb 1e                	jmp    10005b11 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10005af3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10005afa:	eb 15                	jmp    10005b11 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10005afc:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10005aff:	85 c0                	test   eax,eax
10005b01:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10005b04:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10005b07:	74 05                	je     10005b0e <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
10005b09:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10005b0c:	eb 03                	jmp    10005b11 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10005b0e:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
10005b11:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
10005b19:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10005b1d:	5b                   	pop    ebx
10005b1e:	5e                   	pop    esi
10005b1f:	5f                   	pop    edi
10005b20:	e9 fc ff ff ff       	jmp    10005b21 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	10005b21: R_386_PC32	operator delete(void*, unsigned long)
10005b25:	5b                   	pop    ebx
10005b26:	5e                   	pop    esi
10005b27:	5f                   	pop    edi
10005b28:	c3                   	ret    
10005b29:	43                   	inc    ebx
10005b2a:	3a 2f                	cmp    ch,BYTE PTR [edi]
10005b2c:	42                   	inc    edx
10005b2d:	61                   	popa   
10005b2e:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005b2f:	61                   	popa   
10005b30:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005b31:	61                   	popa   
10005b32:	2f                   	das    
10005b33:	49                   	dec    ecx
10005b34:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
10005b37:	73 2f                	jae    10005b68 <List<NIWindow*>::deleteElement(NIWindow*&)+0xb2>
10005b39:	4f                   	dec    edi
10005b3a:	66 66 69 63 65 2f 6e 	data16 imul sp,WORD PTR [ebx+0x65],0x6e2f
10005b41:	65 77 2e             	gs ja  10005b72 <List<NIWindow*>::deleteElement(NIWindow*&)+0xbc>
10005b44:	74 67                	je     10005bad <List<NIWindow*>::deleteElement(NIWindow*&)+0xf7>
10005b46:	61                   	popa   
10005b47:	00 46 53             	add    BYTE PTR [esi+0x53],al
10005b4a:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10005b50:	00 74 67 61          	add    BYTE PTR [edi+eiz*2+0x61],dh
10005b54:	6c                   	ins    BYTE PTR es:[edi],dx
10005b55:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10005b57:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10005b5d:	00 62 72             	add    BYTE PTR [edx+0x72],ah
10005b60:	20 3d 20 25 64 2c    	and    BYTE PTR ds:0x2c642520,bh
10005b66:	20 66 73             	and    BYTE PTR [esi+0x73],ah
10005b69:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10005b6f:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005b72:	2f                   	das    
10005b73:	42                   	inc    edx
10005b74:	61                   	popa   
10005b75:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005b76:	61                   	popa   
10005b77:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005b78:	61                   	popa   
10005b79:	2f                   	das    
10005b7a:	49                   	dec    ecx
10005b7b:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
10005b7e:	73 2f                	jae    10005baf <List<NIWindow*>::deleteElement(NIWindow*&)+0xf9>
10005b80:	4f                   	dec    edi
10005b81:	66 66 69 63 65 2f 6f 	data16 imul sp,WORD PTR [ebx+0x65],0x6f2f
10005b88:	70 65                	jo     10005bef <List<NIWindow*>::deleteElement(NIWindow*&)+0x139>
10005b8a:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005b8b:	2e 74 67             	cs je  10005bf5 <List<NIWindow*>::deleteElement(NIWindow*&)+0x13f>
10005b8e:	61                   	popa   
10005b8f:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005b92:	2f                   	das    
10005b93:	42                   	inc    edx
10005b94:	61                   	popa   
10005b95:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005b96:	61                   	popa   
10005b97:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005b98:	61                   	popa   
10005b99:	2f                   	das    
10005b9a:	49                   	dec    ecx
10005b9b:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
10005b9e:	73 2f                	jae    10005bcf <List<NIWindow*>::deleteElement(NIWindow*&)+0x119>
10005ba0:	4f                   	dec    edi
10005ba1:	66 66 69 63 65 2f 70 	data16 imul sp,WORD PTR [ebx+0x65],0x702f
10005ba8:	72 69                	jb     10005c13 <List<NIWindow*>::deleteElement(NIWindow*&)+0x15d>
10005baa:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005bab:	74 2e                	je     10005bdb <List<NIWindow*>::deleteElement(NIWindow*&)+0x125>
10005bad:	74 67                	je     10005c16 <List<NIWindow*>::deleteElement(NIWindow*&)+0x160>
10005baf:	61                   	popa   
10005bb0:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005bb3:	2f                   	das    
10005bb4:	42                   	inc    edx
10005bb5:	61                   	popa   
10005bb6:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005bb7:	61                   	popa   
10005bb8:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005bb9:	61                   	popa   
10005bba:	2f                   	das    
10005bbb:	49                   	dec    ecx
10005bbc:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
10005bbf:	73 2f                	jae    10005bf0 <List<NIWindow*>::deleteElement(NIWindow*&)+0x13a>
10005bc1:	4f                   	dec    edi
10005bc2:	66 66 69 63 65 2f 63 	data16 imul sp,WORD PTR [ebx+0x65],0x632f
10005bc9:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005bca:	70 79                	jo     10005c45 <List<NIWindow*>::deleteElement(NIWindow*&)+0x18f>
10005bcc:	2e 74 67             	cs je  10005c36 <List<NIWindow*>::deleteElement(NIWindow*&)+0x180>
10005bcf:	61                   	popa   
10005bd0:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005bd3:	2f                   	das    
10005bd4:	42                   	inc    edx
10005bd5:	61                   	popa   
10005bd6:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005bd7:	61                   	popa   
10005bd8:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005bd9:	61                   	popa   
10005bda:	2f                   	das    
10005bdb:	49                   	dec    ecx
10005bdc:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
10005bdf:	73 2f                	jae    10005c10 <List<NIWindow*>::deleteElement(NIWindow*&)+0x15a>
10005be1:	4f                   	dec    edi
10005be2:	66 66 69 63 65 2f 70 	data16 imul sp,WORD PTR [ebx+0x65],0x702f
10005be9:	61                   	popa   
10005bea:	73 74                	jae    10005c60 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1aa>
10005bec:	65 2e 74 67          	gs cs je 10005c57 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1a1>
10005bf0:	61                   	popa   
10005bf1:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005bf4:	2f                   	das    
10005bf5:	42                   	inc    edx
10005bf6:	61                   	popa   
10005bf7:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005bf8:	61                   	popa   
10005bf9:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005bfa:	61                   	popa   
10005bfb:	2f                   	das    
10005bfc:	49                   	dec    ecx
10005bfd:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
10005c00:	73 2f                	jae    10005c31 <List<NIWindow*>::deleteElement(NIWindow*&)+0x17b>
10005c02:	4f                   	dec    edi
10005c03:	66 66 69 63 65 2f 75 	data16 imul sp,WORD PTR [ebx+0x65],0x752f
10005c0a:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005c0b:	64 6f                	outs   dx,DWORD PTR fs:[esi]
10005c0d:	2e 74 67             	cs je  10005c77 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1c1>
10005c10:	61                   	popa   
10005c11:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005c14:	2f                   	das    
10005c15:	42                   	inc    edx
10005c16:	61                   	popa   
10005c17:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005c18:	61                   	popa   
10005c19:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005c1a:	61                   	popa   
10005c1b:	2f                   	das    
10005c1c:	49                   	dec    ecx
10005c1d:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
10005c20:	73 2f                	jae    10005c51 <List<NIWindow*>::deleteElement(NIWindow*&)+0x19b>
10005c22:	4f                   	dec    edi
10005c23:	66 66 69 63 65 2f 72 	data16 imul sp,WORD PTR [ebx+0x65],0x722f
10005c2a:	65 64 6f             	gs outs dx,DWORD PTR fs:[esi]
10005c2d:	2e 74 67             	cs je  10005c97 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1e1>
10005c30:	61                   	popa   
10005c31:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005c34:	2f                   	das    
10005c35:	42                   	inc    edx
10005c36:	61                   	popa   
10005c37:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005c38:	61                   	popa   
10005c39:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005c3a:	61                   	popa   
10005c3b:	2f                   	das    
10005c3c:	49                   	dec    ecx
10005c3d:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
10005c40:	73 2f                	jae    10005c71 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1bb>
10005c42:	4f                   	dec    edi
10005c43:	66 66 69 63 65 2f 62 	data16 imul sp,WORD PTR [ebx+0x65],0x622f
10005c4a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005c4b:	6c                   	ins    BYTE PTR es:[edi],dx
10005c4c:	64 2e 74 67          	fs cs je 10005cb7 <List<NIWindow*>::deleteElement(NIWindow*&)+0x201>
10005c50:	61                   	popa   
10005c51:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005c54:	2f                   	das    
10005c55:	42                   	inc    edx
10005c56:	61                   	popa   
10005c57:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005c58:	61                   	popa   
10005c59:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005c5a:	61                   	popa   
10005c5b:	2f                   	das    
10005c5c:	49                   	dec    ecx
10005c5d:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
10005c60:	73 2f                	jae    10005c91 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1db>
10005c62:	4f                   	dec    edi
10005c63:	66 66 69 63 65 2f 69 	data16 imul sp,WORD PTR [ebx+0x65],0x692f
10005c6a:	74 61                	je     10005ccd <List<NIWindow*>::deleteElement(NIWindow*&)+0x217>
10005c6c:	6c                   	ins    BYTE PTR es:[edi],dx
10005c6d:	69 63 2e 74 67 61 00 	imul   esp,DWORD PTR [ebx+0x2e],0x616774
10005c74:	43                   	inc    ebx
10005c75:	3a 2f                	cmp    ch,BYTE PTR [edi]
10005c77:	42                   	inc    edx
10005c78:	61                   	popa   
10005c79:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005c7a:	61                   	popa   
10005c7b:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005c7c:	61                   	popa   
10005c7d:	2f                   	das    
10005c7e:	49                   	dec    ecx
10005c7f:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
10005c82:	73 2f                	jae    10005cb3 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1fd>
10005c84:	4f                   	dec    edi
10005c85:	66 66 69 63 65 2f 75 	data16 imul sp,WORD PTR [ebx+0x65],0x752f
10005c8c:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005c8d:	64 65 72 6c          	fs gs jb 10005cfd <List<NIWindow*>::deleteElement(NIWindow*&)+0x247>
10005c91:	69 6e 65 2e 74 67 61 	imul   ebp,DWORD PTR [esi+0x65],0x6167742e
10005c98:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10005c9b:	4e                   	dec    esi
10005c9c:	43                   	inc    ebx
10005c9d:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10005ca0:	4e                   	dec    esi
10005ca1:	32 00                	xor    al,BYTE PTR [eax]
10005ca3:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
10005ca6:	53                   	push   ebx
10005ca7:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
10005caa:	43                   	inc    ebx
10005cab:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005cac:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005cad:	74 65                	je     10005d14 <List<NIWindow*>::deleteElement(NIWindow*&)+0x25e>
10005caf:	78 74                	js     10005d25 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26f>
10005cb1:	3a 3a                	cmp    bh,BYTE PTR [edx]
10005cb3:	64 72 76             	fs jb  10005d2c <List<NIWindow*>::deleteElement(NIWindow*&)+0x276>
10005cb6:	52                   	push   edx
10005cb7:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10005cb9:	64 65 72 54          	fs gs jb 10005d11 <List<NIWindow*>::deleteElement(NIWindow*&)+0x25b>
10005cbd:	54                   	push   esp
10005cbe:	46                   	inc    esi
10005cbf:	34 00                	xor    al,0x0
10005cc1:	43                   	inc    ebx
10005cc2:	3a 2f                	cmp    ch,BYTE PTR [edi]
10005cc4:	42                   	inc    edx
10005cc5:	61                   	popa   
10005cc6:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005cc7:	61                   	popa   
10005cc8:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005cc9:	61                   	popa   
10005cca:	2f                   	das    
10005ccb:	46                   	inc    esi
10005ccc:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005ccd:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005cce:	74 73                	je     10005d43 <List<NIWindow*>::deleteElement(NIWindow*&)+0x28d>
10005cd0:	2f                   	das    
10005cd1:	53                   	push   ebx
10005cd2:	46                   	inc    esi
10005cd3:	4e                   	dec    esi
10005cd4:	00 43 41             	add    BYTE PTR [ebx+0x41],al
10005cd7:	4e                   	dec    esi
10005cd8:	4e                   	dec    esi
10005cd9:	4f                   	dec    edi
10005cda:	54                   	push   esp
10005cdb:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10005cdf:	44                   	inc    esp
10005ce0:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10005ce3:	4e                   	dec    esi
10005ce4:	54                   	push   esp
10005ce5:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
10005ce9:	45                   	inc    ebp
10005cea:	43                   	inc    ebx
10005ceb:	54                   	push   esp
10005cec:	4f                   	dec    edi
10005ced:	52                   	push   edx
10005cee:	59                   	pop    ecx
10005cef:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10005cf2:	2f                   	das    
10005cf3:	42                   	inc    edx
10005cf4:	61                   	popa   
10005cf5:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005cf6:	61                   	popa   
10005cf7:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005cf8:	61                   	popa   
10005cf9:	2f                   	das    
10005cfa:	46                   	inc    esi
10005cfb:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005cfc:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005cfd:	74 73                	je     10005d72 <List<NIWindow*>::deleteElement(NIWindow*&)+0x2bc>
10005cff:	2f                   	das    
10005d00:	53                   	push   ebx
10005d01:	46                   	inc    esi
10005d02:	4e                   	dec    esi
10005d03:	2f                   	das    
10005d04:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
10005d07:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005d08:	74 20                	je     10005d2a <List<NIWindow*>::deleteElement(NIWindow*&)+0x274>
10005d0a:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
10005d11:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
10005d18:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
10005d1c:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
10005d22:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005d23:	74 3a                	je     10005d5f <List<NIWindow*>::deleteElement(NIWindow*&)+0x2a9>
10005d25:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10005d2b:	53                   	push   ebx
10005d2c:	46                   	inc    esi
10005d2d:	4e                   	dec    esi
10005d2e:	5f                   	pop    edi
10005d2f:	52                   	push   edx
10005d30:	45                   	inc    ebp
10005d31:	53                   	push   ebx
10005d32:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10005d38:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
10005d3b:	6d                   	ins    DWORD PTR es:[edi],dx
10005d3c:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005d3d:	72 79                	jb     10005db8 <List<NIWindow*>::deleteElement(NIWindow*&)+0x302>
10005d3f:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
10005d42:	6c                   	ins    BYTE PTR es:[edi],dx
10005d43:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005d44:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
10005d47:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
10005d4e:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005d4f:	72 00                	jb     10005d51 <List<NIWindow*>::deleteElement(NIWindow*&)+0x29b>
10005d51:	42                   	inc    edx
10005d52:	61                   	popa   
10005d53:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
10005d57:	6c                   	ins    BYTE PTR es:[edi],dx
10005d58:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
10005d5c:	72 6d                	jb     10005dcb <_ssfn__compute_huffman_codes::length_dezigzag+0xb>
10005d5e:	61                   	popa   
10005d5f:	74 00                	je     10005d61 <List<NIWindow*>::deleteElement(NIWindow*&)+0x2ab>
10005d61:	4e                   	dec    esi
10005d62:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005d63:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10005d66:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005d67:	74 20                	je     10005d89 <List<NIWindow*>::deleteElement(NIWindow*&)+0x2d3>
10005d69:	66 61                	popaw  
10005d6b:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
10005d6e:	66 6f                	outs   dx,WORD PTR ds:[esi]
10005d70:	75 6e                	jne    10005de0 <_ssfn__zdist_extra>
10005d72:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
10005d76:	76 61                	jbe    10005dd9 <_ssfn__compute_huffman_codes::length_dezigzag+0x19>
10005d78:	6c                   	ins    BYTE PTR es:[edi],dx
10005d79:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
10005d81:	20 76 61             	and    BYTE PTR [esi+0x61],dh
10005d84:	6c                   	ins    BYTE PTR es:[edi],dx
10005d85:	75 65                	jne    10005dec <_ssfn__zdist_extra+0xc>
10005d87:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005d8a:	76 61                	jbe    10005ded <_ssfn__zdist_extra+0xd>
10005d8c:	6c                   	ins    BYTE PTR es:[edi],dx
10005d8d:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
10005d95:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005d98:	76 61                	jbe    10005dfb <_ssfn__zdist_extra+0x1b>
10005d9a:	6c                   	ins    BYTE PTR es:[edi],dx
10005d9b:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
10005da3:	47                   	inc    edi
10005da4:	6c                   	ins    BYTE PTR es:[edi],dx
10005da5:	79 70                	jns    10005e17 <_ssfn__zdist_extra+0x37>
10005da7:	68 20 6e 6f 74       	push   0x746f6e20
10005dac:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10005daf:	75 6e                	jne    10005e1f <_ssfn__zdist_extra+0x3f>
10005db1:	64 00 66 90          	add    BYTE PTR fs:[esi-0x70],ah
10005db5:	66 90                	xchg   ax,ax
10005db7:	66 90                	xchg   ax,ax
10005db9:	66 90                	xchg   ax,ax
10005dbb:	66 90                	xchg   ax,ax
10005dbd:	66 90                	xchg   ax,ax
10005dbf:	90                   	nop

10005dc0 <_ssfn__compute_huffman_codes::length_dezigzag>:
10005dc0:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10005dd0:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

10005de0 <_ssfn__zdist_extra>:
	...
10005df0:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
10005e00:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
10005e10:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
10005e20:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
10005e30:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
10005e40:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
10005e50:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

10005e60 <_ssfn__zdist_base>:
10005e60:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
10005e70:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
10005e80:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
10005e90:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
10005ea0:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
10005eb0:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10005ec0:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10005ed0:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

10005ee0 <_ssfn__zlength_extra>:
	...
10005f00:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
10005f10:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
10005f20:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
10005f30:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
10005f40:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

10005f60 <_ssfn__zlength_base>:
10005f60:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
10005f70:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
10005f80:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
10005f90:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
10005fa0:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
10005fb0:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10005fc0:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10005fd0:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
10005fe0:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
10005ff0:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
10006000:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
10006010:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
10006020:	32 0a 00 43 55 52 53 4f 52 53 3a 20 25 64 0a 00     2..CURSORS: %d..
10006030:	4e 52 4d 4c 00 57 41 49 54 00 54 4c 44 52 00 54     NRML.WAIT.TLDR.T
10006040:	45 58 54 00 56 45 52 54 00 48 4f 52 5a 00 48 41     EXT.VERT.HORZ.HA
10006050:	4e 44 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a 20     ND.CURSOR LOAD: 
10006060:	42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b 43 6f 6d     BAD 3..NiLinkCom
10006070:	6d 61 6e 64 43 72 65 61 74 65 57 69 6e 64 6f 77     mandCreateWindow
10006080:	0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e 64 52     ..NiLinkCommandR
10006090:	65 73 75 70 70 6c 79 46 72 61 6d 65 62 75 66 66     esupplyFramebuff
100060a0:	65 72 0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e     er..NiLinkComman
100060b0:	64 43 6c 65 61 72 46 72 61 6d 65 62 75 66 66 65     dClearFramebuffe
100060c0:	72 0a 00 4e 69 53 79 73 74 65 6d 43 61 6c 6c 48     r..NiSystemCallH
100060d0:	61 6e 64 6c 65 72 0a 00 41 53 53 45 52 54 49 4f     andler..ASSERTIO
100060e0:	4e 20 46 41 49 4c 55 52 45 20 28 41 29 2e 00        N FAILURE (A)..
