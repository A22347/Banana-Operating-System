
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 0c             	sub    esp,0xc
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	6a 14                	push   0x14
10000069:	e8 fc ff ff ff       	call   1000006a <NiMain(void*)+0x6a>	1000006a: R_386_PC32	malloc
1000006e:	89 c6                	mov    esi,eax
10000070:	58                   	pop    eax
10000071:	5a                   	pop    edx
10000072:	53                   	push   ebx
10000073:	56                   	push   esi
10000074:	e8 fc ff ff ff       	call   10000075 <NiMain(void*)+0x75>	10000075: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
10000079:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10000080:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000082: R_386_32	desktop
10000086:	e8 fc ff ff ff       	call   10000087 <NiMain(void*)+0x87>	10000087: R_386_PC32	malloc
1000008b:	59                   	pop    ecx
1000008c:	89 c5                	mov    ebp,eax
1000008e:	5b                   	pop    ebx
1000008f:	6a 01                	push   0x1
10000091:	6a 01                	push   0x1
10000093:	6a 00                	push   0x0
10000095:	6a 00                	push   0x0
10000097:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000099: R_386_32	ctxt
1000009d:	50                   	push   eax
1000009e:	e8 fc ff ff ff       	call   1000009f <NiMain(void*)+0x9f>	1000009f: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000a3:	83 c4 14             	add    esp,0x14
100000a6:	6a 40                	push   0x40
100000a8:	e8 fc ff ff ff       	call   100000a9 <NiMain(void*)+0xa9>	100000a9: R_386_PC32	malloc
100000ad:	5e                   	pop    esi
100000ae:	89 c7                	mov    edi,eax
100000b0:	58                   	pop    eax
100000b1:	68 40 01 00 00       	push   0x140
100000b6:	68 90 01 00 00       	push   0x190
100000bb:	6a 32                	push   0x32
100000bd:	6a 32                	push   0x32
100000bf:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000c1: R_386_32	ctxt
100000c5:	57                   	push   edi
100000c6:	e8 fc ff ff ff       	call   100000c7 <NiMain(void*)+0xc7>	100000c7: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000cb:	83 c4 14             	add    esp,0x14
100000ce:	6a 40                	push   0x40
100000d0:	e8 fc ff ff ff       	call   100000d1 <NiMain(void*)+0xd1>	100000d1: R_386_PC32	malloc
100000d5:	89 c6                	mov    esi,eax
100000d7:	58                   	pop    eax
100000d8:	5a                   	pop    edx
100000d9:	68 7c 01 00 00       	push   0x17c
100000de:	68 f4 01 00 00       	push   0x1f4
100000e3:	68 96 00 00 00       	push   0x96
100000e8:	68 c8 00 00 00       	push   0xc8
100000ed:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000ef: R_386_32	ctxt
100000f3:	56                   	push   esi
100000f4:	e8 fc ff ff ff       	call   100000f5 <NiMain(void*)+0xf5>	100000f5: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000f9:	83 c4 14             	add    esp,0x14
100000fc:	6a 40                	push   0x40
100000fe:	e8 fc ff ff ff       	call   100000ff <NiMain(void*)+0xff>	100000ff: R_386_PC32	malloc
10000103:	59                   	pop    ecx
10000104:	89 c3                	mov    ebx,eax
10000106:	58                   	pop    eax
10000107:	68 af 00 00 00       	push   0xaf
1000010c:	68 0e 01 00 00       	push   0x10e
10000111:	68 90 01 00 00       	push   0x190
10000116:	6a 7d                	push   0x7d
10000118:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000011a: R_386_32	ctxt
1000011e:	53                   	push   ebx
1000011f:	e8 fc ff ff ff       	call   10000120 <NiMain(void*)+0x120>	10000120: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10000124:	83 c4 18             	add    esp,0x18
10000127:	83 4b 3c 01          	or     DWORD PTR [ebx+0x3c],0x1
1000012b:	55                   	push   ebp
1000012c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000012e: R_386_32	desktop
10000132:	e8 fc ff ff ff       	call   10000133 <NiMain(void*)+0x133>	10000133: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000137:	58                   	pop    eax
10000138:	5a                   	pop    edx
10000139:	57                   	push   edi
1000013a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000013c: R_386_32	desktop
10000140:	e8 fc ff ff ff       	call   10000141 <NiMain(void*)+0x141>	10000141: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000145:	59                   	pop    ecx
10000146:	5f                   	pop    edi
10000147:	56                   	push   esi
10000148:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000014a: R_386_32	desktop
1000014e:	e8 fc ff ff ff       	call   1000014f <NiMain(void*)+0x14f>	1000014f: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000153:	5d                   	pop    ebp
10000154:	58                   	pop    eax
10000155:	53                   	push   ebx
10000156:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000158: R_386_32	desktop
1000015c:	e8 fc ff ff ff       	call   1000015d <NiMain(void*)+0x15d>	1000015d: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10000161:	58                   	pop    eax
10000162:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000164: R_386_32	desktop
10000168:	e8 fc ff ff ff       	call   10000169 <NiMain(void*)+0x169>	10000169: R_386_PC32	NIDesktop::completeRefresh()
1000016d:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
10000174:	e8 fc ff ff ff       	call   10000175 <NiMain(void*)+0x175>	10000175: R_386_PC32	malloc
10000179:	6a 00                	push   0x0
1000017b:	89 c3                	mov    ebx,eax
1000017d:	6a 00                	push   0x0
1000017f:	68 49 50 00 10       	push   0x10005049	10000180: R_386_32	.text
10000184:	50                   	push   eax
10000185:	e8 fc ff ff ff       	call   10000186 <NiMain(void*)+0x186>	10000186: R_386_PC32	Process::Process(char const*, Process*, char**)
1000018a:	83 c4 14             	add    esp,0x14
1000018d:	53                   	push   ebx
1000018e:	e8 fc ff ff ff       	call   1000018f <NiMain(void*)+0x18f>	1000018f: R_386_PC32	Process::createUserThread()
10000193:	83 c4 10             	add    esp,0x10
10000196:	83 ec 0c             	sub    esp,0xc
10000199:	6a 02                	push   0x2
1000019b:	e8 fc ff ff ff       	call   1000019c <NiMain(void*)+0x19c>	1000019c: R_386_PC32	blockTask(TaskState)
100001a0:	eb f1                	jmp    10000193 <NiMain(void*)+0x193>
100001a2:	66 90                	xchg   ax,ax

100001a4 <NiBegin(void*)>:
100001a4:	83 ec 18             	sub    esp,0x18
100001a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100001ab:	e8 fc ff ff ff       	call   100001ac <NiBegin(void*)+0x8>	100001ac: R_386_PC32	NiMain(void*)

100001b0 <_ssfn__bitreverse16>:
100001b0:	89 c2                	mov    edx,eax
100001b2:	01 c0                	add    eax,eax
100001b4:	d1 fa                	sar    edx,1
100001b6:	25 aa aa 00 00       	and    eax,0xaaaa
100001bb:	81 e2 55 55 00 00    	and    edx,0x5555
100001c1:	09 c2                	or     edx,eax
100001c3:	89 d0                	mov    eax,edx
100001c5:	c1 e2 02             	shl    edx,0x2
100001c8:	c1 f8 02             	sar    eax,0x2
100001cb:	81 e2 cc cc 00 00    	and    edx,0xcccc
100001d1:	25 33 33 00 00       	and    eax,0x3333
100001d6:	09 d0                	or     eax,edx
100001d8:	89 c2                	mov    edx,eax
100001da:	c1 e0 04             	shl    eax,0x4
100001dd:	c1 fa 04             	sar    edx,0x4
100001e0:	25 f0 f0 00 00       	and    eax,0xf0f0
100001e5:	81 e2 0f 0f 00 00    	and    edx,0xf0f
100001eb:	09 c2                	or     edx,eax
100001ed:	89 d1                	mov    ecx,edx
100001ef:	c1 e2 08             	shl    edx,0x8
100001f2:	c1 f9 08             	sar    ecx,0x8
100001f5:	0f b7 c2             	movzx  eax,dx
100001f8:	09 c8                	or     eax,ecx
100001fa:	c3                   	ret    

100001fb <_ssfn__zhuffman_decode>:
100001fb:	55                   	push   ebp
100001fc:	57                   	push   edi
100001fd:	56                   	push   esi
100001fe:	53                   	push   ebx
100001ff:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
10000203:	7f 1d                	jg     10000222 <_ssfn__zhuffman_decode+0x27>
10000205:	8b 18                	mov    ebx,DWORD PTR [eax]
10000207:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000020a:	89 08                	mov    DWORD PTR [eax],ecx
1000020c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
1000020f:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000212:	d3 e3                	shl    ebx,cl
10000214:	83 c1 08             	add    ecx,0x8
10000217:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000021a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
1000021d:	83 f9 18             	cmp    ecx,0x18
10000220:	eb e1                	jmp    10000203 <_ssfn__zhuffman_decode+0x8>
10000222:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
10000225:	89 f9                	mov    ecx,edi
10000227:	81 e1 ff 01 00 00    	and    ecx,0x1ff
1000022d:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
10000231:	89 cb                	mov    ebx,ecx
10000233:	85 c9                	test   ecx,ecx
10000235:	74 15                	je     1000024c <_ssfn__zhuffman_decode+0x51>
10000237:	c1 f9 09             	sar    ecx,0x9
1000023a:	89 da                	mov    edx,ebx
1000023c:	d3 ef                	shr    edi,cl
1000023e:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
10000241:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10000244:	81 e2 ff 01 00 00    	and    edx,0x1ff
1000024a:	eb 58                	jmp    100002a4 <_ssfn__zhuffman_decode+0xa9>
1000024c:	89 d5                	mov    ebp,edx
1000024e:	89 c3                	mov    ebx,eax
10000250:	be 0a 00 00 00       	mov    esi,0xa
10000255:	89 f8                	mov    eax,edi
10000257:	e8 54 ff ff ff       	call   100001b0 <_ssfn__bitreverse16>
1000025c:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
10000263:	7c 03                	jl     10000268 <_ssfn__zhuffman_decode+0x6d>
10000265:	46                   	inc    esi
10000266:	eb f4                	jmp    1000025c <_ssfn__zhuffman_decode+0x61>
10000268:	83 ca ff             	or     edx,0xffffffff
1000026b:	83 fe 10             	cmp    esi,0x10
1000026e:	74 34                	je     100002a4 <_ssfn__zhuffman_decode+0xa9>
10000270:	8d 14 36             	lea    edx,[esi+esi*1]
10000273:	b9 10 00 00 00       	mov    ecx,0x10
10000278:	01 ea                	add    edx,ebp
1000027a:	29 f1                	sub    ecx,esi
1000027c:	d3 f8                	sar    eax,cl
1000027e:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
10000285:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
1000028c:	29 c8                	sub    eax,ecx
1000028e:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
10000291:	89 f1                	mov    ecx,esi
10000293:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
1000029a:	d3 ef                	shr    edi,cl
1000029c:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
1000029f:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
100002a4:	5b                   	pop    ebx
100002a5:	89 d0                	mov    eax,edx
100002a7:	5e                   	pop    esi
100002a8:	5f                   	pop    edi
100002a9:	5d                   	pop    ebp
100002aa:	c3                   	ret    

100002ab <_ssfn__zexpand>:
100002ab:	55                   	push   ebp
100002ac:	57                   	push   edi
100002ad:	56                   	push   esi
100002ae:	53                   	push   ebx
100002af:	83 ec 0c             	sub    esp,0xc
100002b2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100002b5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
100002b8:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
100002bb:	29 f9                	sub    ecx,edi
100002bd:	83 f9 08             	cmp    ecx,0x8
100002c0:	74 04                	je     100002c6 <_ssfn__zexpand+0x1b>
100002c2:	31 c0                	xor    eax,eax
100002c4:	eb 3c                	jmp    10000302 <_ssfn__zexpand+0x57>
100002c6:	80 3f 53             	cmp    BYTE PTR [edi],0x53
100002c9:	75 f7                	jne    100002c2 <_ssfn__zexpand+0x17>
100002cb:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
100002cf:	75 f1                	jne    100002c2 <_ssfn__zexpand+0x17>
100002d1:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
100002d5:	75 eb                	jne    100002c2 <_ssfn__zexpand+0x17>
100002d7:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
100002da:	89 c3                	mov    ebx,eax
100002dc:	89 d6                	mov    esi,edx
100002de:	50                   	push   eax
100002df:	50                   	push   eax
100002e0:	55                   	push   ebp
100002e1:	57                   	push   edi
100002e2:	e8 fc ff ff ff       	call   100002e3 <_ssfn__zexpand+0x38>	100002e3: R_386_PC32	realloc
100002e7:	83 c4 10             	add    esp,0x10
100002ea:	85 c0                	test   eax,eax
100002ec:	74 d4                	je     100002c2 <_ssfn__zexpand+0x17>
100002ee:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100002f1:	29 fe                	sub    esi,edi
100002f3:	01 c6                	add    esi,eax
100002f5:	01 e8                	add    eax,ebp
100002f7:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
100002fa:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
100002fd:	b8 01 00 00 00       	mov    eax,0x1
10000302:	83 c4 0c             	add    esp,0xc
10000305:	5b                   	pop    ebx
10000306:	5e                   	pop    esi
10000307:	5f                   	pop    edi
10000308:	5d                   	pop    ebp
10000309:	c3                   	ret    

1000030a <_ssfn__zbuild_huffman>:
1000030a:	55                   	push   ebp
1000030b:	57                   	push   edi
1000030c:	56                   	push   esi
1000030d:	53                   	push   ebx
1000030e:	89 c3                	mov    ebx,eax
10000310:	81 ec a0 00 00 00    	sub    esp,0xa0
10000316:	31 c0                	xor    eax,eax
10000318:	89 0c 24             	mov    DWORD PTR [esp],ecx
1000031b:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
1000031f:	b9 11 00 00 00       	mov    ecx,0x11
10000324:	89 ef                	mov    edi,ebp
10000326:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
1000032a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000032c:	b9 00 01 00 00       	mov    ecx,0x100
10000331:	89 df                	mov    edi,ebx
10000333:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000335:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10000338:	7d 0f                	jge    10000349 <_ssfn__zbuild_huffman+0x3f>
1000033a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
1000033e:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
10000342:	40                   	inc    eax
10000343:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
10000347:	eb ec                	jmp    10000335 <_ssfn__zbuild_huffman+0x2b>
10000349:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
10000351:	b9 01 00 00 00       	mov    ecx,0x1
10000356:	b8 01 00 00 00       	mov    eax,0x1
1000035b:	89 c7                	mov    edi,eax
1000035d:	d3 e7                	shl    edi,cl
1000035f:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
10000363:	0f 8f 10 01 00 00    	jg     10000479 <_ssfn__zbuild_huffman+0x16f>
10000369:	41                   	inc    ecx
1000036a:	83 f9 10             	cmp    ecx,0x10
1000036d:	75 ec                	jne    1000035b <_ssfn__zbuild_huffman+0x51>
1000036f:	31 ff                	xor    edi,edi
10000371:	31 f6                	xor    esi,esi
10000373:	b8 01 00 00 00       	mov    eax,0x1
10000378:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
1000037c:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
10000380:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
10000388:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
10000390:	01 ef                	add    edi,ebp
10000392:	85 ed                	test   ebp,ebp
10000394:	74 11                	je     100003a7 <_ssfn__zbuild_huffman+0x9d>
10000396:	ba 01 00 00 00       	mov    edx,0x1
1000039b:	88 c1                	mov    cl,al
1000039d:	d3 e2                	shl    edx,cl
1000039f:	39 fa                	cmp    edx,edi
100003a1:	0f 8c d2 00 00 00    	jl     10000479 <_ssfn__zbuild_huffman+0x16f>
100003a7:	89 fa                	mov    edx,edi
100003a9:	b9 10 00 00 00       	mov    ecx,0x10
100003ae:	01 ff                	add    edi,edi
100003b0:	29 c1                	sub    ecx,eax
100003b2:	01 ee                	add    esi,ebp
100003b4:	d3 e2                	shl    edx,cl
100003b6:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
100003bd:	40                   	inc    eax
100003be:	83 f8 10             	cmp    eax,0x10
100003c1:	75 b5                	jne    10000378 <_ssfn__zbuild_huffman+0x6e>
100003c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
100003c6:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
100003d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100003d4:	31 ff                	xor    edi,edi
100003d6:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
100003da:	0f 8d 9d 00 00 00    	jge    1000047d <_ssfn__zbuild_huffman+0x173>
100003e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100003e4:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
100003e8:	89 f2                	mov    edx,esi
100003ea:	85 f6                	test   esi,esi
100003ec:	0f 84 81 00 00 00    	je     10000473 <_ssfn__zbuild_huffman+0x169>
100003f2:	8d 0c 36             	lea    ecx,[esi+esi*1]
100003f5:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
100003f9:	8d 04 19             	lea    eax,[ecx+ebx*1]
100003fc:	89 e9                	mov    ecx,ebp
100003fe:	89 04 24             	mov    DWORD PTR [esp],eax
10000401:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
10000408:	29 c1                	sub    ecx,eax
1000040a:	89 c8                	mov    eax,ecx
1000040c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000040f:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
10000416:	01 c8                	add    eax,ecx
10000418:	83 fe 09             	cmp    esi,0x9
1000041b:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
10000422:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
1000042a:	7f 42                	jg     1000046e <_ssfn__zbuild_huffman+0x164>
1000042c:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10000430:	89 e8                	mov    eax,ebp
10000432:	e8 79 fd ff ff       	call   100001b0 <_ssfn__bitreverse16>
10000437:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
1000043b:	b9 10 00 00 00       	mov    ecx,0x10
10000440:	29 f1                	sub    ecx,esi
10000442:	d3 f8                	sar    eax,cl
10000444:	88 d1                	mov    cl,dl
10000446:	89 04 24             	mov    DWORD PTR [esp],eax
10000449:	89 f2                	mov    edx,esi
1000044b:	b8 01 00 00 00       	mov    eax,0x1
10000450:	c1 e2 09             	shl    edx,0x9
10000453:	d3 e0                	shl    eax,cl
10000455:	09 fa                	or     edx,edi
10000457:	89 c1                	mov    ecx,eax
10000459:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
10000460:	7f 0c                	jg     1000046e <_ssfn__zbuild_huffman+0x164>
10000462:	8b 04 24             	mov    eax,DWORD PTR [esp]
10000465:	01 0c 24             	add    DWORD PTR [esp],ecx
10000468:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
1000046c:	eb eb                	jmp    10000459 <_ssfn__zbuild_huffman+0x14f>
1000046e:	45                   	inc    ebp
1000046f:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
10000473:	47                   	inc    edi
10000474:	e9 5d ff ff ff       	jmp    100003d6 <_ssfn__zbuild_huffman+0xcc>
10000479:	31 c0                	xor    eax,eax
1000047b:	eb 05                	jmp    10000482 <_ssfn__zbuild_huffman+0x178>
1000047d:	b8 01 00 00 00       	mov    eax,0x1
10000482:	81 c4 a0 00 00 00    	add    esp,0xa0
10000488:	5b                   	pop    ebx
10000489:	5e                   	pop    esi
1000048a:	5f                   	pop    edi
1000048b:	5d                   	pop    ebp
1000048c:	c3                   	ret    

1000048d <_ssfn_fc.part.1>:
1000048d:	55                   	push   ebp
1000048e:	57                   	push   edi
1000048f:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
10000495:	56                   	push   esi
10000496:	53                   	push   ebx
10000497:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
1000049d:	83 ec 0c             	sub    esp,0xc
100004a0:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
100004a3:	74 5d                	je     10000502 <_ssfn_fc.part.1+0x75>
100004a5:	31 f6                	xor    esi,esi
100004a7:	8b 03                	mov    eax,DWORD PTR [ebx]
100004a9:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
100004ad:	74 35                	je     100004e4 <_ssfn_fc.part.1+0x57>
100004af:	31 ed                	xor    ebp,ebp
100004b1:	8b 03                	mov    eax,DWORD PTR [ebx]
100004b3:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
100004b6:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
100004b9:	85 c0                	test   eax,eax
100004bb:	74 0c                	je     100004c9 <_ssfn_fc.part.1+0x3c>
100004bd:	83 ec 0c             	sub    esp,0xc
100004c0:	50                   	push   eax
100004c1:	e8 fc ff ff ff       	call   100004c2 <_ssfn_fc.part.1+0x35>	100004c2: R_386_PC32	free
100004c6:	83 c4 10             	add    esp,0x10
100004c9:	83 c5 04             	add    ebp,0x4
100004cc:	81 fd 00 04 00 00    	cmp    ebp,0x400
100004d2:	75 dd                	jne    100004b1 <_ssfn_fc.part.1+0x24>
100004d4:	83 ec 0c             	sub    esp,0xc
100004d7:	8b 03                	mov    eax,DWORD PTR [ebx]
100004d9:	ff 34 30             	push   DWORD PTR [eax+esi*1]
100004dc:	e8 fc ff ff ff       	call   100004dd <_ssfn_fc.part.1+0x50>	100004dd: R_386_PC32	free
100004e1:	83 c4 10             	add    esp,0x10
100004e4:	83 c6 04             	add    esi,0x4
100004e7:	81 fe 00 04 00 00    	cmp    esi,0x400
100004ed:	75 b8                	jne    100004a7 <_ssfn_fc.part.1+0x1a>
100004ef:	83 ec 0c             	sub    esp,0xc
100004f2:	ff 33                	push   DWORD PTR [ebx]
100004f4:	e8 fc ff ff ff       	call   100004f5 <_ssfn_fc.part.1+0x68>	100004f5: R_386_PC32	free
100004f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
100004ff:	83 c4 10             	add    esp,0x10
10000502:	83 c3 04             	add    ebx,0x4
10000505:	39 fb                	cmp    ebx,edi
10000507:	75 97                	jne    100004a0 <_ssfn_fc.part.1+0x13>
10000509:	83 c4 0c             	add    esp,0xc
1000050c:	5b                   	pop    ebx
1000050d:	5e                   	pop    esi
1000050e:	5f                   	pop    edi
1000050f:	5d                   	pop    ebp
10000510:	c3                   	ret    

10000511 <_ssfn_l>:
10000511:	57                   	push   edi
10000512:	56                   	push   esi
10000513:	53                   	push   ebx
10000514:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000518:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000051c:	39 ce                	cmp    esi,ecx
1000051e:	89 f3                	mov    ebx,esi
10000520:	0f 9d c1             	setge  cl
10000523:	c1 eb 1f             	shr    ebx,0x1f
10000526:	09 d9                	or     ecx,ebx
10000528:	89 fb                	mov    ebx,edi
1000052a:	c1 eb 1f             	shr    ebx,0x1f
1000052d:	08 d9                	or     cl,bl
1000052f:	0f 85 e9 00 00 00    	jne    1000061e <_ssfn_l+0x10d>
10000535:	39 d7                	cmp    edi,edx
10000537:	0f 8d e1 00 00 00    	jge    1000061e <_ssfn_l+0x10d>
1000053d:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
10000543:	8d 51 08             	lea    edx,[ecx+0x8]
10000546:	8d 4f 08             	lea    ecx,[edi+0x8]
10000549:	c1 fa 04             	sar    edx,0x4
1000054c:	c1 f9 04             	sar    ecx,0x4
1000054f:	39 ca                	cmp    edx,ecx
10000551:	75 1a                	jne    1000056d <_ssfn_l+0x5c>
10000553:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
10000559:	8d 4e 08             	lea    ecx,[esi+0x8]
1000055c:	83 c2 08             	add    edx,0x8
1000055f:	c1 f9 04             	sar    ecx,0x4
10000562:	c1 fa 04             	sar    edx,0x4
10000565:	39 ca                	cmp    edx,ecx
10000567:	0f 84 b1 00 00 00    	je     1000061e <_ssfn_l+0x10d>
1000056d:	89 c3                	mov    ebx,eax
1000056f:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
10000575:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
1000057b:	7f 3e                	jg     100005bb <_ssfn_l+0xaa>
1000057d:	05 00 02 00 00       	add    eax,0x200
10000582:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
10000588:	52                   	push   edx
10000589:	01 c0                	add    eax,eax
1000058b:	52                   	push   edx
1000058c:	50                   	push   eax
1000058d:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
10000593:	e8 fc ff ff ff       	call   10000594 <_ssfn_l+0x83>	10000594: R_386_PC32	realloc
10000598:	83 c4 10             	add    esp,0x10
1000059b:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
100005a1:	85 c0                	test   eax,eax
100005a3:	75 16                	jne    100005bb <_ssfn_l+0xaa>
100005a5:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
100005af:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
100005b9:	eb 63                	jmp    1000061e <_ssfn_l+0x10d>
100005bb:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
100005c2:	75 26                	jne    100005ea <_ssfn_l+0xd9>
100005c4:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005ca:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
100005d0:	66 89 10             	mov    WORD PTR [eax],dx
100005d3:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005d9:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
100005df:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
100005e3:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
100005ea:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
100005f0:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100005f6:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
100005fa:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000600:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000606:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
1000060b:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10000611:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000618:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
1000061e:	5b                   	pop    ebx
1000061f:	5e                   	pop    esi
10000620:	5f                   	pop    edi
10000621:	c3                   	ret    

10000622 <_ssfn_b>:
10000622:	55                   	push   ebp
10000623:	57                   	push   edi
10000624:	56                   	push   esi
10000625:	53                   	push   ebx
10000626:	83 ec 4c             	sub    esp,0x4c
10000629:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000062d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10000631:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10000635:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10000639:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000063d:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
10000641:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10000645:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
10000649:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000064d:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
10000651:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10000655:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
10000659:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000065d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10000661:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000665:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
1000066c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10000670:	83 f8 04             	cmp    eax,0x4
10000673:	75 28                	jne    1000069d <_ssfn_b+0x7b>
10000675:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000679:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
1000067d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10000681:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10000685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000689:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
1000068d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10000691:	83 c4 4c             	add    esp,0x4c
10000694:	5b                   	pop    ebx
10000695:	5e                   	pop    esi
10000696:	5f                   	pop    edi
10000697:	5d                   	pop    ebp
10000698:	e9 74 fe ff ff       	jmp    10000511 <_ssfn_l>
1000069d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100006a1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
100006a5:	75 0e                	jne    100006b5 <_ssfn_b+0x93>
100006a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
100006ab:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
100006af:	0f 84 19 01 00 00    	je     100007ce <_ssfn_b+0x1ac>
100006b5:	be 02 00 00 00       	mov    esi,0x2
100006ba:	89 d8                	mov    eax,ebx
100006bc:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
100006c0:	99                   	cdq    
100006c1:	f7 fe                	idiv   esi
100006c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
100006c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100006cb:	89 e8                	mov    eax,ebp
100006cd:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
100006d1:	99                   	cdq    
100006d2:	f7 fe                	idiv   esi
100006d4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
100006d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100006dc:	89 f8                	mov    eax,edi
100006de:	29 d8                	sub    eax,ebx
100006e0:	99                   	cdq    
100006e1:	f7 fe                	idiv   esi
100006e3:	01 c3                	add    ebx,eax
100006e5:	89 c8                	mov    eax,ecx
100006e7:	29 e8                	sub    eax,ebp
100006e9:	99                   	cdq    
100006ea:	f7 fe                	idiv   esi
100006ec:	01 e8                	add    eax,ebp
100006ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100006f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100006f6:	29 f8                	sub    eax,edi
100006f8:	99                   	cdq    
100006f9:	f7 fe                	idiv   esi
100006fb:	01 f8                	add    eax,edi
100006fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000701:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10000705:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000709:	29 c8                	sub    eax,ecx
1000070b:	99                   	cdq    
1000070c:	f7 fe                	idiv   esi
1000070e:	01 c8                	add    eax,ecx
10000710:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10000714:	89 d8                	mov    eax,ebx
10000716:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
1000071a:	99                   	cdq    
1000071b:	f7 fe                	idiv   esi
1000071d:	8d 0c 38             	lea    ecx,[eax+edi*1]
10000720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000724:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10000728:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
1000072c:	99                   	cdq    
1000072d:	f7 fe                	idiv   esi
1000072f:	8d 2c 38             	lea    ebp,[eax+edi*1]
10000732:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000736:	29 d8                	sub    eax,ebx
10000738:	99                   	cdq    
10000739:	f7 fe                	idiv   esi
1000073b:	83 ec 0c             	sub    esp,0xc
1000073e:	01 d8                	add    eax,ebx
10000740:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10000744:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10000748:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
1000074c:	99                   	cdq    
1000074d:	f7 fe                	idiv   esi
1000074f:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10000753:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10000757:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000075b:	29 c8                	sub    eax,ecx
1000075d:	99                   	cdq    
1000075e:	f7 fe                	idiv   esi
10000760:	8d 1c 08             	lea    ebx,[eax+ecx*1]
10000763:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10000767:	29 e8                	sub    eax,ebp
10000769:	99                   	cdq    
1000076a:	f7 fe                	idiv   esi
1000076c:	8d 34 28             	lea    esi,[eax+ebp*1]
1000076f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10000773:	8d 78 01             	lea    edi,[eax+0x1]
10000776:	57                   	push   edi
10000777:	56                   	push   esi
10000778:	53                   	push   ebx
10000779:	55                   	push   ebp
1000077a:	51                   	push   ecx
1000077b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
1000077f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000783:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
10000787:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000078b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
1000078f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
10000793:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000797:	e8 86 fe ff ff       	call   10000622 <_ssfn_b>
1000079c:	83 c4 24             	add    esp,0x24
1000079f:	57                   	push   edi
100007a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100007a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100007a8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100007ac:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100007b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
100007b4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
100007b8:	56                   	push   esi
100007b9:	53                   	push   ebx
100007ba:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100007be:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100007c2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100007c6:	e8 57 fe ff ff       	call   10000622 <_ssfn_b>
100007cb:	83 c4 30             	add    esp,0x30
100007ce:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
100007d3:	0f 85 9c fe ff ff    	jne    10000675 <_ssfn_b+0x53>
100007d9:	83 c4 4c             	add    esp,0x4c
100007dc:	5b                   	pop    ebx
100007dd:	5e                   	pop    esi
100007de:	5f                   	pop    edi
100007df:	5d                   	pop    ebp
100007e0:	c3                   	ret    

100007e1 <_ssfn__zreceive>:
100007e1:	56                   	push   esi
100007e2:	53                   	push   ebx
100007e3:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
100007e6:	7d 1d                	jge    10000805 <_ssfn__zreceive+0x24>
100007e8:	8b 18                	mov    ebx,DWORD PTR [eax]
100007ea:	8d 4b 01             	lea    ecx,[ebx+0x1]
100007ed:	89 08                	mov    DWORD PTR [eax],ecx
100007ef:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
100007f2:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
100007f5:	d3 e3                	shl    ebx,cl
100007f7:	83 c1 08             	add    ecx,0x8
100007fa:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
100007fd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000800:	83 f9 18             	cmp    ecx,0x18
10000803:	7e e3                	jle    100007e8 <_ssfn__zreceive+0x7>
10000805:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
10000808:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
1000080b:	89 f3                	mov    ebx,esi
1000080d:	88 d1                	mov    cl,dl
1000080f:	d3 eb                	shr    ebx,cl
10000811:	88 d1                	mov    cl,dl
10000813:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10000816:	bb 01 00 00 00       	mov    ebx,0x1
1000081b:	d3 e3                	shl    ebx,cl
1000081d:	8d 43 ff             	lea    eax,[ebx-0x1]
10000820:	5b                   	pop    ebx
10000821:	21 f0                	and    eax,esi
10000823:	5e                   	pop    esi
10000824:	c3                   	ret    

10000825 <ssfn_utf8>:
10000825:	56                   	push   esi
10000826:	53                   	push   ebx
10000827:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000082b:	8b 11                	mov    edx,DWORD PTR [ecx]
1000082d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
10000830:	89 f0                	mov    eax,esi
10000832:	84 c0                	test   al,al
10000834:	0f be d8             	movsx  ebx,al
10000837:	78 04                	js     1000083d <ssfn_utf8+0x18>
10000839:	89 d8                	mov    eax,ebx
1000083b:	eb 7d                	jmp    100008ba <ssfn_utf8+0x95>
1000083d:	f7 c6 20 00 00 00    	test   esi,0x20
10000843:	75 14                	jne    10000859 <ssfn_utf8+0x34>
10000845:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
10000848:	c1 e3 06             	shl    ebx,0x6
1000084b:	83 e0 3f             	and    eax,0x3f
1000084e:	81 e3 c0 07 00 00    	and    ebx,0x7c0
10000854:	42                   	inc    edx
10000855:	09 d8                	or     eax,ebx
10000857:	eb 5f                	jmp    100008b8 <ssfn_utf8+0x93>
10000859:	f7 c6 10 00 00 00    	test   esi,0x10
1000085f:	75 20                	jne    10000881 <ssfn_utf8+0x5c>
10000861:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10000865:	c1 e3 0c             	shl    ebx,0xc
10000868:	c1 e0 06             	shl    eax,0x6
1000086b:	0f b7 db             	movzx  ebx,bx
1000086e:	25 c0 0f 00 00       	and    eax,0xfc0
10000873:	83 c2 02             	add    edx,0x2
10000876:	09 d8                	or     eax,ebx
10000878:	8a 1a                	mov    bl,BYTE PTR [edx]
1000087a:	83 e3 3f             	and    ebx,0x3f
1000087d:	09 d8                	or     eax,ebx
1000087f:	eb 37                	jmp    100008b8 <ssfn_utf8+0x93>
10000881:	31 c0                	xor    eax,eax
10000883:	83 e6 08             	and    esi,0x8
10000886:	75 32                	jne    100008ba <ssfn_utf8+0x95>
10000888:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
1000088c:	c1 e3 12             	shl    ebx,0x12
1000088f:	c1 e0 0c             	shl    eax,0xc
10000892:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
10000898:	25 00 f0 03 00       	and    eax,0x3f000
1000089d:	83 c2 03             	add    edx,0x3
100008a0:	09 d8                	or     eax,ebx
100008a2:	8a 1a                	mov    bl,BYTE PTR [edx]
100008a4:	83 e3 3f             	and    ebx,0x3f
100008a7:	09 d8                	or     eax,ebx
100008a9:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
100008ad:	c1 e3 06             	shl    ebx,0x6
100008b0:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
100008b6:	09 d8                	or     eax,ebx
100008b8:	89 11                	mov    DWORD PTR [ecx],edx
100008ba:	ff 01                	inc    DWORD PTR [ecx]
100008bc:	5b                   	pop    ebx
100008bd:	5e                   	pop    esi
100008be:	c3                   	ret    

100008bf <_ssfn_c>:
100008bf:	55                   	push   ebp
100008c0:	57                   	push   edi
100008c1:	56                   	push   esi
100008c2:	53                   	push   ebx
100008c3:	83 ec 14             	sub    esp,0x14
100008c6:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
100008cc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100008d0:	85 c0                	test   eax,eax
100008d2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
100008d8:	0f 84 e6 00 00 00    	je     100009c4 <_ssfn_c+0x105>
100008de:	31 ff                	xor    edi,edi
100008e0:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
100008e4:	0f 84 f3 00 00 00    	je     100009dd <_ssfn_c+0x11e>
100008ea:	85 d2                	test   edx,edx
100008ec:	0f 84 eb 00 00 00    	je     100009dd <_ssfn_c+0x11e>
100008f2:	80 3a 00             	cmp    BYTE PTR [edx],0x0
100008f5:	0f 84 e2 00 00 00    	je     100009dd <_ssfn_c+0x11e>
100008fb:	89 d6                	mov    esi,edx
100008fd:	89 cd                	mov    ebp,ecx
100008ff:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000902:	89 c3                	mov    ebx,eax
10000904:	85 d2                	test   edx,edx
10000906:	74 38                	je     10000940 <_ssfn_c+0x81>
10000908:	8d 0c 13             	lea    ecx,[ebx+edx*1]
1000090b:	31 c0                	xor    eax,eax
1000090d:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000910:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000913:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
10000917:	66 85 d2             	test   dx,dx
1000091a:	74 24                	je     10000940 <_ssfn_c+0x81>
1000091c:	01 da                	add    edx,ebx
1000091e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000922:	8a 0a                	mov    cl,BYTE PTR [edx]
10000924:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000928:	84 c9                	test   cl,cl
1000092a:	0f 84 9e 00 00 00    	je     100009ce <_ssfn_c+0x10f>
10000930:	3a 0f                	cmp    cl,BYTE PTR [edi]
10000932:	0f 85 90 00 00 00    	jne    100009c8 <_ssfn_c+0x109>
10000938:	47                   	inc    edi
10000939:	42                   	inc    edx
1000093a:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
1000093e:	eb e2                	jmp    10000922 <_ssfn_c+0x63>
10000940:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000944:	8d 44 24 10          	lea    eax,[esp+0x10]
10000948:	50                   	push   eax
10000949:	e8 fc ff ff ff       	call   1000094a <_ssfn_c+0x8b>	1000094a: R_386_PC32	ssfn_utf8
1000094e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000952:	29 f2                	sub    edx,esi
10000954:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
10000957:	5a                   	pop    edx
10000958:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
1000095c:	89 06                	mov    DWORD PTR [esi],eax
1000095e:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
10000961:	89 df                	mov    edi,ebx
10000963:	31 db                	xor    ebx,ebx
10000965:	8a 17                	mov    dl,BYTE PTR [edi]
10000967:	80 fa ff             	cmp    dl,0xff
1000096a:	75 08                	jne    10000974 <_ssfn_c+0xb5>
1000096c:	81 c3 ff ff 00 00    	add    ebx,0xffff
10000972:	eb 2a                	jmp    1000099e <_ssfn_c+0xdf>
10000974:	88 d1                	mov    cl,dl
10000976:	83 e1 c0             	and    ecx,0xffffffc0
10000979:	80 f9 c0             	cmp    cl,0xc0
1000097c:	75 16                	jne    10000994 <_ssfn_c+0xd5>
1000097e:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000982:	c1 e2 08             	shl    edx,0x8
10000985:	83 c7 02             	add    edi,0x2
10000988:	81 e2 00 3f 00 00    	and    edx,0x3f00
1000098e:	09 ca                	or     edx,ecx
10000990:	01 d3                	add    ebx,edx
10000992:	eb 27                	jmp    100009bb <_ssfn_c+0xfc>
10000994:	80 f9 80             	cmp    cl,0x80
10000997:	75 08                	jne    100009a1 <_ssfn_c+0xe2>
10000999:	83 e2 3f             	and    edx,0x3f
1000099c:	01 d3                	add    ebx,edx
1000099e:	47                   	inc    edi
1000099f:	eb 1a                	jmp    100009bb <_ssfn_c+0xfc>
100009a1:	39 d8                	cmp    eax,ebx
100009a3:	74 38                	je     100009dd <_ssfn_c+0x11e>
100009a5:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100009a9:	83 e2 40             	and    edx,0x40
100009ac:	80 fa 01             	cmp    dl,0x1
100009af:	19 d2                	sbb    edx,edx
100009b1:	83 c2 06             	add    edx,0x6
100009b4:	0f af d1             	imul   edx,ecx
100009b7:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
100009bb:	43                   	inc    ebx
100009bc:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
100009c2:	76 a1                	jbe    10000965 <_ssfn_c+0xa6>
100009c4:	31 ff                	xor    edi,edi
100009c6:	eb 15                	jmp    100009dd <_ssfn_c+0x11e>
100009c8:	40                   	inc    eax
100009c9:	e9 42 ff ff ff       	jmp    10000910 <_ssfn_c+0x51>
100009ce:	29 f7                	sub    edi,esi
100009d0:	05 00 f0 00 00       	add    eax,0xf000
100009d5:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
100009d8:	e9 7b ff ff ff       	jmp    10000958 <_ssfn_c+0x99>
100009dd:	83 c4 14             	add    esp,0x14
100009e0:	89 f8                	mov    eax,edi
100009e2:	5b                   	pop    ebx
100009e3:	5e                   	pop    esi
100009e4:	5f                   	pop    edi
100009e5:	5d                   	pop    ebp
100009e6:	c3                   	ret    

100009e7 <_ssfn_zlib_decode>:
100009e7:	55                   	push   ebp
100009e8:	57                   	push   edi
100009e9:	56                   	push   esi
100009ea:	53                   	push   ebx
100009eb:	81 ec c8 19 00 00    	sub    esp,0x19c8
100009f1:	6a 08                	push   0x8
100009f3:	e8 fc ff ff ff       	call   100009f4 <_ssfn_zlib_decode+0xd>	100009f4: R_386_PC32	malloc
100009f8:	83 c4 10             	add    esp,0x10
100009fb:	89 c2                	mov    edx,eax
100009fd:	85 c0                	test   eax,eax
100009ff:	0f 84 eb 04 00 00    	je     10000ef0 <_ssfn_zlib_decode+0x509>
10000a05:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
10000a0c:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
10000a13:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
10000a1a:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
10000a21:	31 c0                	xor    eax,eax
10000a23:	83 c2 08             	add    edx,0x8
10000a26:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
10000a2d:	c6 80 00 56 03 10 08 	mov    BYTE PTR [eax+0x10035600],0x8	10000a2f: R_386_32	.bss
10000a34:	40                   	inc    eax
10000a35:	3d 90 00 00 00       	cmp    eax,0x90
10000a3a:	75 f1                	jne    10000a2d <_ssfn_zlib_decode+0x46>
10000a3c:	c6 80 00 56 03 10 09 	mov    BYTE PTR [eax+0x10035600],0x9	10000a3e: R_386_32	.bss
10000a43:	40                   	inc    eax
10000a44:	3d 00 01 00 00       	cmp    eax,0x100
10000a49:	75 f1                	jne    10000a3c <_ssfn_zlib_decode+0x55>
10000a4b:	c6 80 00 56 03 10 07 	mov    BYTE PTR [eax+0x10035600],0x7	10000a4d: R_386_32	.bss
10000a52:	40                   	inc    eax
10000a53:	3d 18 01 00 00       	cmp    eax,0x118
10000a58:	75 f1                	jne    10000a4b <_ssfn_zlib_decode+0x64>
10000a5a:	c7 05 18 57 03 10 08 08 08 08 	mov    DWORD PTR ds:0x10035718,0x8080808	10000a5c: R_386_32	.bss
10000a64:	c7 05 1c 57 03 10 08 08 08 08 	mov    DWORD PTR ds:0x1003571c,0x8080808	10000a66: R_386_32	.bss
10000a6e:	31 c0                	xor    eax,eax
10000a70:	c6 80 e0 55 03 10 05 	mov    BYTE PTR [eax+0x100355e0],0x5	10000a72: R_386_32	.bss
10000a77:	40                   	inc    eax
10000a78:	83 f8 20             	cmp    eax,0x20
10000a7b:	75 f3                	jne    10000a70 <_ssfn_zlib_decode+0x89>
10000a7d:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
10000a88:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
10000a93:	ba 01 00 00 00       	mov    edx,0x1
10000a98:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a9f:	e8 3d fd ff ff       	call   100007e1 <_ssfn__zreceive>
10000aa4:	ba 02 00 00 00       	mov    edx,0x2
10000aa9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000aad:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ab4:	e8 28 fd ff ff       	call   100007e1 <_ssfn__zreceive>
10000ab9:	89 c6                	mov    esi,eax
10000abb:	85 c0                	test   eax,eax
10000abd:	0f 85 09 01 00 00    	jne    10000bcc <_ssfn_zlib_decode+0x1e5>
10000ac3:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000aca:	83 e2 07             	and    edx,0x7
10000acd:	74 0c                	je     10000adb <_ssfn_zlib_decode+0xf4>
10000acf:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ad6:	e8 06 fd ff ff       	call   100007e1 <_ssfn__zreceive>
10000adb:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000ae2:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000ae9:	31 c0                	xor    eax,eax
10000aeb:	31 db                	xor    ebx,ebx
10000aed:	85 d2                	test   edx,edx
10000aef:	7f 14                	jg     10000b05 <_ssfn_zlib_decode+0x11e>
10000af1:	84 db                	test   bl,bl
10000af3:	74 22                	je     10000b17 <_ssfn_zlib_decode+0x130>
10000af5:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000afc:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000b03:	eb 12                	jmp    10000b17 <_ssfn_zlib_decode+0x130>
10000b05:	40                   	inc    eax
10000b06:	83 ea 08             	sub    edx,0x8
10000b09:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000b10:	b3 01                	mov    bl,0x1
10000b12:	c1 e9 08             	shr    ecx,0x8
10000b15:	eb d6                	jmp    10000aed <_ssfn_zlib_decode+0x106>
10000b17:	83 f8 04             	cmp    eax,0x4
10000b1a:	74 1d                	je     10000b39 <_ssfn_zlib_decode+0x152>
10000b1c:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000b23:	40                   	inc    eax
10000b24:	8d 4a 01             	lea    ecx,[edx+0x1]
10000b27:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000b2e:	8a 12                	mov    dl,BYTE PTR [edx]
10000b30:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000b37:	eb de                	jmp    10000b17 <_ssfn_zlib_decode+0x130>
10000b39:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000b41:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000b49:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000b51:	c1 e3 08             	shl    ebx,0x8
10000b54:	01 c3                	add    ebx,eax
10000b56:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000b5e:	c1 e0 08             	shl    eax,0x8
10000b61:	01 d0                	add    eax,edx
10000b63:	89 da                	mov    edx,ebx
10000b65:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000b6b:	39 d0                	cmp    eax,edx
10000b6d:	0f 85 69 03 00 00    	jne    10000edc <_ssfn_zlib_decode+0x4f5>
10000b73:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000b7a:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000b7d:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000b84:	73 14                	jae    10000b9a <_ssfn_zlib_decode+0x1b3>
10000b86:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b8d:	e8 19 f7 ff ff       	call   100002ab <_ssfn__zexpand>
10000b92:	85 c0                	test   eax,eax
10000b94:	0f 84 42 03 00 00    	je     10000edc <_ssfn_zlib_decode+0x4f5>
10000b9a:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000ba1:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000ba8:	39 f3                	cmp    ebx,esi
10000baa:	74 09                	je     10000bb5 <_ssfn_zlib_decode+0x1ce>
10000bac:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000baf:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000bb2:	46                   	inc    esi
10000bb3:	eb e5                	jmp    10000b9a <_ssfn_zlib_decode+0x1b3>
10000bb5:	01 da                	add    edx,ebx
10000bb7:	01 c3                	add    ebx,eax
10000bb9:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000bc0:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000bc7:	e9 fc 02 00 00       	jmp    10000ec8 <_ssfn_zlib_decode+0x4e1>
10000bcc:	83 f8 03             	cmp    eax,0x3
10000bcf:	0f 84 07 03 00 00    	je     10000edc <_ssfn_zlib_decode+0x4f5>
10000bd5:	4e                   	dec    esi
10000bd6:	75 2d                	jne    10000c05 <_ssfn_zlib_decode+0x21e>
10000bd8:	b9 20 01 00 00       	mov    ecx,0x120
10000bdd:	ba 00 56 03 10       	mov    edx,0x10035600	10000bde: R_386_32	.bss
10000be2:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000be9:	e8 1c f7 ff ff       	call   1000030a <_ssfn__zbuild_huffman>
10000bee:	85 c0                	test   eax,eax
10000bf0:	0f 84 e6 02 00 00    	je     10000edc <_ssfn_zlib_decode+0x4f5>
10000bf6:	b9 20 00 00 00       	mov    ecx,0x20
10000bfb:	ba e0 55 03 10       	mov    edx,0x100355e0	10000bfc: R_386_32	.bss
10000c00:	e9 78 01 00 00       	jmp    10000d7d <_ssfn_zlib_decode+0x396>
10000c05:	ba 05 00 00 00       	mov    edx,0x5
10000c0a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c11:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000c15:	e8 c7 fb ff ff       	call   100007e1 <_ssfn__zreceive>
10000c1a:	89 df                	mov    edi,ebx
10000c1c:	ba 05 00 00 00       	mov    edx,0x5
10000c21:	89 c5                	mov    ebp,eax
10000c23:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c2a:	e8 b2 fb ff ff       	call   100007e1 <_ssfn__zreceive>
10000c2f:	ba 04 00 00 00       	mov    edx,0x4
10000c34:	89 c6                	mov    esi,eax
10000c36:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c3d:	e8 9f fb ff ff       	call   100007e1 <_ssfn__zreceive>
10000c42:	b9 13 00 00 00       	mov    ecx,0x13
10000c47:	83 c0 04             	add    eax,0x4
10000c4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000c4e:	31 c0                	xor    eax,eax
10000c50:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000c52:	31 ff                	xor    edi,edi
10000c54:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000c58:	7e 1f                	jle    10000c79 <_ssfn_zlib_decode+0x292>
10000c5a:	ba 03 00 00 00       	mov    edx,0x3
10000c5f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c66:	47                   	inc    edi
10000c67:	e8 75 fb ff ff       	call   100007e1 <_ssfn__zreceive>
10000c6c:	0f b6 97 7f 51 00 10 	movzx  edx,BYTE PTR [edi+0x1000517f]	10000c6f: R_386_32	.text
10000c73:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000c77:	eb db                	jmp    10000c54 <_ssfn_zlib_decode+0x26d>
10000c79:	b9 13 00 00 00       	mov    ecx,0x13
10000c7e:	89 da                	mov    edx,ebx
10000c80:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000c87:	e8 7e f6 ff ff       	call   1000030a <_ssfn__zbuild_huffman>
10000c8c:	85 c0                	test   eax,eax
10000c8e:	0f 84 48 02 00 00    	je     10000edc <_ssfn_zlib_decode+0x4f5>
10000c94:	8d 46 01             	lea    eax,[esi+0x1]
10000c97:	81 c5 01 01 00 00    	add    ebp,0x101
10000c9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000ca1:	31 f6                	xor    esi,esi
10000ca3:	01 e8                	add    eax,ebp
10000ca5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000ca9:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000cad:	0f 8e 9f 00 00 00    	jle    10000d52 <_ssfn_zlib_decode+0x36b>
10000cb3:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000cba:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000cc1:	e8 35 f5 ff ff       	call   100001fb <_ssfn__zhuffman_decode>
10000cc6:	83 f8 12             	cmp    eax,0x12
10000cc9:	0f 87 0d 02 00 00    	ja     10000edc <_ssfn_zlib_decode+0x4f5>
10000ccf:	83 f8 0f             	cmp    eax,0xf
10000cd2:	7f 07                	jg     10000cdb <_ssfn_zlib_decode+0x2f4>
10000cd4:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000cd8:	46                   	inc    esi
10000cd9:	eb ce                	jmp    10000ca9 <_ssfn_zlib_decode+0x2c2>
10000cdb:	83 f8 10             	cmp    eax,0x10
10000cde:	75 22                	jne    10000d02 <_ssfn_zlib_decode+0x31b>
10000ce0:	ba 02 00 00 00       	mov    edx,0x2
10000ce5:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000cec:	e8 f0 fa ff ff       	call   100007e1 <_ssfn__zreceive>
10000cf1:	85 f6                	test   esi,esi
10000cf3:	8d 58 03             	lea    ebx,[eax+0x3]
10000cf6:	0f 84 e0 01 00 00    	je     10000edc <_ssfn_zlib_decode+0x4f5>
10000cfc:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000d00:	eb 31                	jmp    10000d33 <_ssfn_zlib_decode+0x34c>
10000d02:	83 f8 11             	cmp    eax,0x11
10000d05:	75 16                	jne    10000d1d <_ssfn_zlib_decode+0x336>
10000d07:	ba 03 00 00 00       	mov    edx,0x3
10000d0c:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d13:	e8 c9 fa ff ff       	call   100007e1 <_ssfn__zreceive>
10000d18:	8d 58 03             	lea    ebx,[eax+0x3]
10000d1b:	eb 14                	jmp    10000d31 <_ssfn_zlib_decode+0x34a>
10000d1d:	ba 07 00 00 00       	mov    edx,0x7
10000d22:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d29:	e8 b3 fa ff ff       	call   100007e1 <_ssfn__zreceive>
10000d2e:	8d 58 0b             	lea    ebx,[eax+0xb]
10000d31:	31 c0                	xor    eax,eax
10000d33:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000d37:	29 f2                	sub    edx,esi
10000d39:	39 da                	cmp    edx,ebx
10000d3b:	0f 8c 9b 01 00 00    	jl     10000edc <_ssfn_zlib_decode+0x4f5>
10000d41:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000d45:	89 d9                	mov    ecx,ebx
10000d47:	89 d7                	mov    edi,edx
10000d49:	01 de                	add    esi,ebx
10000d4b:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000d4d:	e9 57 ff ff ff       	jmp    10000ca9 <_ssfn_zlib_decode+0x2c2>
10000d52:	0f 85 84 01 00 00    	jne    10000edc <_ssfn_zlib_decode+0x4f5>
10000d58:	89 e9                	mov    ecx,ebp
10000d5a:	8d 54 24 25          	lea    edx,[esp+0x25]
10000d5e:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000d65:	e8 a0 f5 ff ff       	call   1000030a <_ssfn__zbuild_huffman>
10000d6a:	85 c0                	test   eax,eax
10000d6c:	0f 84 6a 01 00 00    	je     10000edc <_ssfn_zlib_decode+0x4f5>
10000d72:	8d 44 24 25          	lea    eax,[esp+0x25]
10000d76:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000d7a:	8d 14 28             	lea    edx,[eax+ebp*1]
10000d7d:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000d84:	e8 81 f5 ff ff       	call   1000030a <_ssfn__zbuild_huffman>
10000d89:	85 c0                	test   eax,eax
10000d8b:	0f 84 4b 01 00 00    	je     10000edc <_ssfn_zlib_decode+0x4f5>
10000d91:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000d98:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000d9f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000da6:	e8 50 f4 ff ff       	call   100001fb <_ssfn__zhuffman_decode>
10000dab:	89 c3                	mov    ebx,eax
10000dad:	3d ff 00 00 00       	cmp    eax,0xff
10000db2:	7f 34                	jg     10000de8 <_ssfn_zlib_decode+0x401>
10000db4:	85 c0                	test   eax,eax
10000db6:	0f 88 20 01 00 00    	js     10000edc <_ssfn_zlib_decode+0x4f5>
10000dbc:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000dc3:	77 1d                	ja     10000de2 <_ssfn_zlib_decode+0x3fb>
10000dc5:	89 ea                	mov    edx,ebp
10000dc7:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dce:	e8 d8 f4 ff ff       	call   100002ab <_ssfn__zexpand>
10000dd3:	85 c0                	test   eax,eax
10000dd5:	0f 84 01 01 00 00    	je     10000edc <_ssfn_zlib_decode+0x4f5>
10000ddb:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000de2:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000de5:	45                   	inc    ebp
10000de6:	eb b0                	jmp    10000d98 <_ssfn_zlib_decode+0x3b1>
10000de8:	3d 00 01 00 00       	cmp    eax,0x100
10000ded:	75 0c                	jne    10000dfb <_ssfn_zlib_decode+0x414>
10000def:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000df6:	e9 cd 00 00 00       	jmp    10000ec8 <_ssfn_zlib_decode+0x4e1>
10000dfb:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000e01:	8b 14 85 a0 52 00 10 	mov    edx,DWORD PTR [eax*4+0x100052a0]	10000e04: R_386_32	.text
10000e08:	8b 1c 85 20 53 00 10 	mov    ebx,DWORD PTR [eax*4+0x10005320]	10000e0b: R_386_32	.text
10000e0f:	85 d2                	test   edx,edx
10000e11:	74 0e                	je     10000e21 <_ssfn_zlib_decode+0x43a>
10000e13:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e1a:	e8 c2 f9 ff ff       	call   100007e1 <_ssfn__zreceive>
10000e1f:	01 c3                	add    ebx,eax
10000e21:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000e28:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e2f:	e8 c7 f3 ff ff       	call   100001fb <_ssfn__zhuffman_decode>
10000e34:	85 c0                	test   eax,eax
10000e36:	0f 88 a0 00 00 00    	js     10000edc <_ssfn_zlib_decode+0x4f5>
10000e3c:	8b 14 85 a0 51 00 10 	mov    edx,DWORD PTR [eax*4+0x100051a0]	10000e3f: R_386_32	.text
10000e43:	8b 3c 85 20 52 00 10 	mov    edi,DWORD PTR [eax*4+0x10005220]	10000e46: R_386_32	.text
10000e4a:	85 d2                	test   edx,edx
10000e4c:	74 0e                	je     10000e5c <_ssfn_zlib_decode+0x475>
10000e4e:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e55:	e8 87 f9 ff ff       	call   100007e1 <_ssfn__zreceive>
10000e5a:	01 c7                	add    edi,eax
10000e5c:	89 e8                	mov    eax,ebp
10000e5e:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000e65:	39 f8                	cmp    eax,edi
10000e67:	7c 73                	jl     10000edc <_ssfn_zlib_decode+0x4f5>
10000e69:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000e6d:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000e74:	73 19                	jae    10000e8f <_ssfn_zlib_decode+0x4a8>
10000e76:	89 ea                	mov    edx,ebp
10000e78:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e7f:	e8 27 f4 ff ff       	call   100002ab <_ssfn__zexpand>
10000e84:	85 c0                	test   eax,eax
10000e86:	74 54                	je     10000edc <_ssfn_zlib_decode+0x4f5>
10000e88:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000e8f:	89 ee                	mov    esi,ebp
10000e91:	29 fe                	sub    esi,edi
10000e93:	4f                   	dec    edi
10000e94:	75 19                	jne    10000eaf <_ssfn_zlib_decode+0x4c8>
10000e96:	85 db                	test   ebx,ebx
10000e98:	0f 84 fa fe ff ff    	je     10000d98 <_ssfn_zlib_decode+0x3b1>
10000e9e:	8a 06                	mov    al,BYTE PTR [esi]
10000ea0:	01 eb                	add    ebx,ebp
10000ea2:	45                   	inc    ebp
10000ea3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000ea6:	39 dd                	cmp    ebp,ebx
10000ea8:	75 f8                	jne    10000ea2 <_ssfn_zlib_decode+0x4bb>
10000eaa:	e9 e9 fe ff ff       	jmp    10000d98 <_ssfn_zlib_decode+0x3b1>
10000eaf:	85 db                	test   ebx,ebx
10000eb1:	0f 84 e1 fe ff ff    	je     10000d98 <_ssfn_zlib_decode+0x3b1>
10000eb7:	8d 04 1e             	lea    eax,[esi+ebx*1]
10000eba:	89 ef                	mov    edi,ebp
10000ebc:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000ebd:	39 f0                	cmp    eax,esi
10000ebf:	75 fb                	jne    10000ebc <_ssfn_zlib_decode+0x4d5>
10000ec1:	01 dd                	add    ebp,ebx
10000ec3:	e9 d0 fe ff ff       	jmp    10000d98 <_ssfn_zlib_decode+0x3b1>
10000ec8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10000ecd:	0f 84 c0 fb ff ff    	je     10000a93 <_ssfn_zlib_decode+0xac>
10000ed3:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
10000eda:	eb 14                	jmp    10000ef0 <_ssfn_zlib_decode+0x509>
10000edc:	83 ec 0c             	sub    esp,0xc
10000edf:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10000ee6:	e8 fc ff ff ff       	call   10000ee7 <_ssfn_zlib_decode+0x500>	10000ee7: R_386_PC32	free
10000eeb:	83 c4 10             	add    esp,0x10
10000eee:	31 c0                	xor    eax,eax
10000ef0:	81 c4 bc 19 00 00    	add    esp,0x19bc
10000ef6:	5b                   	pop    ebx
10000ef7:	5e                   	pop    esi
10000ef8:	5f                   	pop    edi
10000ef9:	5d                   	pop    ebp
10000efa:	c3                   	ret    

10000efb <ssfn_load>:
10000efb:	55                   	push   ebp
10000efc:	57                   	push   edi
10000efd:	56                   	push   esi
10000efe:	53                   	push   ebx
10000eff:	83 ec 1c             	sub    esp,0x1c
10000f02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000f06:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000f0a:	85 ff                	test   edi,edi
10000f0c:	0f 84 d0 01 00 00    	je     100010e2 <ssfn_load+0x1e7>
10000f12:	85 f6                	test   esi,esi
10000f14:	0f 84 c8 01 00 00    	je     100010e2 <ssfn_load+0x1e7>
10000f1a:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
10000f1d:	0f 85 a8 00 00 00    	jne    10000fcb <ssfn_load+0xd0>
10000f23:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10000f27:	0f 85 9e 00 00 00    	jne    10000fcb <ssfn_load+0xd0>
10000f2d:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10000f31:	74 0a                	je     10000f3d <ssfn_load+0x42>
10000f33:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10000f38:	e9 aa 01 00 00       	jmp    100010e7 <ssfn_load+0x1ec>
10000f3d:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
10000f40:	a8 04                	test   al,0x4
10000f42:	75 05                	jne    10000f49 <ssfn_load+0x4e>
10000f44:	83 c6 0a             	add    esi,0xa
10000f47:	eb 08                	jmp    10000f51 <ssfn_load+0x56>
10000f49:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
10000f4d:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10000f51:	a8 08                	test   al,0x8
10000f53:	74 07                	je     10000f5c <ssfn_load+0x61>
10000f55:	46                   	inc    esi
10000f56:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f5a:	eb f7                	jmp    10000f53 <ssfn_load+0x58>
10000f5c:	a8 10                	test   al,0x10
10000f5e:	74 07                	je     10000f67 <ssfn_load+0x6c>
10000f60:	46                   	inc    esi
10000f61:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000f65:	eb f7                	jmp    10000f5e <ssfn_load+0x63>
10000f67:	83 ec 0c             	sub    esp,0xc
10000f6a:	56                   	push   esi
10000f6b:	e8 fc ff ff ff       	call   10000f6c <ssfn_load+0x71>	10000f6c: R_386_PC32	_ssfn_zlib_decode
10000f70:	83 c4 10             	add    esp,0x10
10000f73:	89 c6                	mov    esi,eax
10000f75:	85 c0                	test   eax,eax
10000f77:	74 ba                	je     10000f33 <ssfn_load+0x38>
10000f79:	50                   	push   eax
10000f7a:	50                   	push   eax
10000f7b:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10000f81:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10000f88:	50                   	push   eax
10000f89:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
10000f8f:	e8 fc ff ff ff       	call   10000f90 <ssfn_load+0x95>	10000f90: R_386_PC32	realloc
10000f94:	83 c4 10             	add    esp,0x10
10000f97:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
10000f9d:	85 c0                	test   eax,eax
10000f9f:	75 0f                	jne    10000fb0 <ssfn_load+0xb5>
10000fa1:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10000fab:	e9 1a 01 00 00       	jmp    100010ca <ssfn_load+0x1cf>
10000fb0:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10000fb6:	8d 4a 01             	lea    ecx,[edx+0x1]
10000fb9:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
10000fbf:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10000fc2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000fc5:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10000fcb:	50                   	push   eax
10000fcc:	6a 04                	push   0x4
10000fce:	68 65 50 00 10       	push   0x10005065	10000fcf: R_386_32	.text
10000fd3:	56                   	push   esi
10000fd4:	e8 fc ff ff ff       	call   10000fd5 <ssfn_load+0xda>	10000fd5: R_386_PC32	memcmp
10000fd9:	83 c4 10             	add    esp,0x10
10000fdc:	89 c5                	mov    ebp,eax
10000fde:	85 c0                	test   eax,eax
10000fe0:	75 29                	jne    1000100b <ssfn_load+0x110>
10000fe2:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10000fe5:	01 f3                	add    ebx,esi
10000fe7:	83 c6 08             	add    esi,0x8
10000fea:	39 de                	cmp    esi,ebx
10000fec:	0f 83 f5 00 00 00    	jae    100010e7 <ssfn_load+0x1ec>
10000ff2:	50                   	push   eax
10000ff3:	50                   	push   eax
10000ff4:	56                   	push   esi
10000ff5:	57                   	push   edi
10000ff6:	e8 fc ff ff ff       	call   10000ff7 <ssfn_load+0xfc>	10000ff7: R_386_PC32	ssfn_load
10000ffb:	83 c4 10             	add    esp,0x10
10000ffe:	85 c0                	test   eax,eax
10001000:	0f 85 e1 00 00 00    	jne    100010e7 <ssfn_load+0x1ec>
10001006:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10001009:	eb df                	jmp    10000fea <ssfn_load+0xef>
1000100b:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
1000100e:	83 e0 0f             	and    eax,0xf
10001011:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10001015:	53                   	push   ebx
10001016:	6a 04                	push   0x4
10001018:	68 6a 50 00 10       	push   0x1000506a	10001019: R_386_32	.text
1000101d:	56                   	push   esi
1000101e:	e8 fc ff ff ff       	call   1000101f <ssfn_load+0x124>	1000101f: R_386_PC32	memcmp
10001023:	83 c4 10             	add    esp,0x10
10001026:	89 c5                	mov    ebp,eax
10001028:	85 c0                	test   eax,eax
1000102a:	0f 85 03 ff ff ff    	jne    10000f33 <ssfn_load+0x38>
10001030:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10001033:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
10001037:	51                   	push   ecx
10001038:	6a 04                	push   0x4
1000103a:	68 6f 50 00 10       	push   0x1000506f	1000103b: R_386_32	.text
1000103f:	50                   	push   eax
10001040:	e8 fc ff ff ff       	call   10001041 <ssfn_load+0x146>	10001041: R_386_PC32	memcmp
10001045:	83 c4 10             	add    esp,0x10
10001048:	85 c0                	test   eax,eax
1000104a:	0f 85 e3 fe ff ff    	jne    10000f33 <ssfn_load+0x38>
10001050:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
10001055:	0f 87 d8 fe ff ff    	ja     10000f33 <ssfn_load+0x38>
1000105b:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
1000105f:	39 cb                	cmp    ebx,ecx
10001061:	0f 86 cc fe ff ff    	jbe    10000f33 <ssfn_load+0x38>
10001067:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
1000106a:	39 c3                	cmp    ebx,eax
1000106c:	0f 86 c1 fe ff ff    	jbe    10000f33 <ssfn_load+0x38>
10001072:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
10001075:	0f 86 b8 fe ff ff    	jbe    10000f33 <ssfn_load+0x38>
1000107b:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
1000107e:	0f 86 af fe ff ff    	jbe    10000f33 <ssfn_load+0x38>
10001084:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
10001087:	0f 86 a6 fe ff ff    	jbe    10000f33 <ssfn_load+0x38>
1000108d:	39 c1                	cmp    ecx,eax
1000108f:	0f 83 9e fe ff ff    	jae    10000f33 <ssfn_load+0x38>
10001095:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
1000109a:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
1000109d:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
100010a3:	40                   	inc    eax
100010a4:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
100010aa:	52                   	push   edx
100010ab:	c1 e0 02             	shl    eax,0x2
100010ae:	52                   	push   edx
100010af:	50                   	push   eax
100010b0:	ff 33                	push   DWORD PTR [ebx]
100010b2:	e8 fc ff ff ff       	call   100010b3 <ssfn_load+0x1b8>	100010b3: R_386_PC32	realloc
100010b7:	83 c4 10             	add    esp,0x10
100010ba:	89 03                	mov    DWORD PTR [ebx],eax
100010bc:	85 c0                	test   eax,eax
100010be:	75 0f                	jne    100010cf <ssfn_load+0x1d4>
100010c0:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
100010ca:	83 cd ff             	or     ebp,0xffffffff
100010cd:	eb 18                	jmp    100010e7 <ssfn_load+0x1ec>
100010cf:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
100010d5:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
100010d9:	89 f8                	mov    eax,edi
100010db:	e8 ad f3 ff ff       	call   1000048d <_ssfn_fc.part.1>
100010e0:	eb 05                	jmp    100010e7 <ssfn_load+0x1ec>
100010e2:	bd fc ff ff ff       	mov    ebp,0xfffffffc
100010e7:	83 c4 1c             	add    esp,0x1c
100010ea:	89 e8                	mov    eax,ebp
100010ec:	5b                   	pop    ebx
100010ed:	5e                   	pop    esi
100010ee:	5f                   	pop    edi
100010ef:	5d                   	pop    ebp
100010f0:	c3                   	ret    

100010f1 <ssfn_free>:
100010f1:	57                   	push   edi
100010f2:	56                   	push   esi
100010f3:	53                   	push   ebx
100010f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100010f8:	85 db                	test   ebx,ebx
100010fa:	74 7e                	je     1000117a <ssfn_free+0x89>
100010fc:	89 d8                	mov    eax,ebx
100010fe:	e8 8a f3 ff ff       	call   1000048d <_ssfn_fc.part.1>
10001103:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
1000110a:	74 32                	je     1000113e <ssfn_free+0x4d>
1000110c:	31 f6                	xor    esi,esi
1000110e:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
10001114:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
1000111a:	7e 16                	jle    10001132 <ssfn_free+0x41>
1000111c:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
1000111f:	85 c0                	test   eax,eax
10001121:	74 0c                	je     1000112f <ssfn_free+0x3e>
10001123:	83 ec 0c             	sub    esp,0xc
10001126:	50                   	push   eax
10001127:	e8 fc ff ff ff       	call   10001128 <ssfn_free+0x37>	10001128: R_386_PC32	free
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	46                   	inc    esi
10001130:	eb dc                	jmp    1000110e <ssfn_free+0x1d>
10001132:	83 ec 0c             	sub    esp,0xc
10001135:	50                   	push   eax
10001136:	e8 fc ff ff ff       	call   10001137 <ssfn_free+0x46>	10001137: R_386_PC32	free
1000113b:	83 c4 10             	add    esp,0x10
1000113e:	31 f6                	xor    esi,esi
10001140:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
10001143:	85 c0                	test   eax,eax
10001145:	74 0c                	je     10001153 <ssfn_free+0x62>
10001147:	83 ec 0c             	sub    esp,0xc
1000114a:	50                   	push   eax
1000114b:	e8 fc ff ff ff       	call   1000114c <ssfn_free+0x5b>	1000114c: R_386_PC32	free
10001150:	83 c4 10             	add    esp,0x10
10001153:	46                   	inc    esi
10001154:	83 fe 05             	cmp    esi,0x5
10001157:	75 e7                	jne    10001140 <ssfn_free+0x4f>
10001159:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000115f:	85 c0                	test   eax,eax
10001161:	74 0c                	je     1000116f <ssfn_free+0x7e>
10001163:	83 ec 0c             	sub    esp,0xc
10001166:	50                   	push   eax
10001167:	e8 fc ff ff ff       	call   10001168 <ssfn_free+0x77>	10001168: R_386_PC32	free
1000116c:	83 c4 10             	add    esp,0x10
1000116f:	b9 72 3d 00 00       	mov    ecx,0x3d72
10001174:	31 c0                	xor    eax,eax
10001176:	89 df                	mov    edi,ebx
10001178:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000117a:	5b                   	pop    ebx
1000117b:	5e                   	pop    esi
1000117c:	5f                   	pop    edi
1000117d:	c3                   	ret    

1000117e <ssfn_mem>:
1000117e:	55                   	push   ebp
1000117f:	31 c0                	xor    eax,eax
10001181:	57                   	push   edi
10001182:	56                   	push   esi
10001183:	53                   	push   ebx
10001184:	83 ec 08             	sub    esp,0x8
10001187:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
1000118b:	85 d2                	test   edx,edx
1000118d:	0f 84 8e 00 00 00    	je     10001221 <ssfn_mem+0xa3>
10001193:	b8 c8 f5 00 00       	mov    eax,0xf5c8
10001198:	31 c9                	xor    ecx,ecx
1000119a:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
100011a1:	41                   	inc    ecx
100011a2:	8d 04 98             	lea    eax,[eax+ebx*4]
100011a5:	83 f9 05             	cmp    ecx,0x5
100011a8:	75 f0                	jne    1000119a <ssfn_mem+0x1c>
100011aa:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
100011b0:	31 c9                	xor    ecx,ecx
100011b2:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
100011b9:	89 34 24             	mov    DWORD PTR [esp],esi
100011bc:	85 f6                	test   esi,esi
100011be:	74 48                	je     10001208 <ssfn_mem+0x8a>
100011c0:	31 db                	xor    ebx,ebx
100011c2:	8b 34 24             	mov    esi,DWORD PTR [esp]
100011c5:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
100011c8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
100011cc:	85 ff                	test   edi,edi
100011ce:	74 2a                	je     100011fa <ssfn_mem+0x7c>
100011d0:	31 f6                	xor    esi,esi
100011d2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
100011d6:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
100011d9:	85 ed                	test   ebp,ebp
100011db:	74 0f                	je     100011ec <ssfn_mem+0x6e>
100011dd:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
100011e1:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
100011e5:	0f af fd             	imul   edi,ebp
100011e8:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
100011ec:	46                   	inc    esi
100011ed:	81 fe 00 01 00 00    	cmp    esi,0x100
100011f3:	75 dd                	jne    100011d2 <ssfn_mem+0x54>
100011f5:	05 00 04 00 00       	add    eax,0x400
100011fa:	43                   	inc    ebx
100011fb:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001201:	75 bf                	jne    100011c2 <ssfn_mem+0x44>
10001203:	05 00 04 00 00       	add    eax,0x400
10001208:	41                   	inc    ecx
10001209:	83 f9 11             	cmp    ecx,0x11
1000120c:	75 a4                	jne    100011b2 <ssfn_mem+0x34>
1000120e:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
10001215:	74 0a                	je     10001221 <ssfn_mem+0xa3>
10001217:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
1000121d:	01 d2                	add    edx,edx
1000121f:	01 d0                	add    eax,edx
10001221:	83 c4 08             	add    esp,0x8
10001224:	5b                   	pop    ebx
10001225:	5e                   	pop    esi
10001226:	5f                   	pop    edi
10001227:	5d                   	pop    ebp
10001228:	c3                   	ret    

10001229 <ssfn_select>:
10001229:	55                   	push   ebp
1000122a:	57                   	push   edi
1000122b:	56                   	push   esi
1000122c:	53                   	push   ebx
1000122d:	83 ec 1c             	sub    esp,0x1c
10001230:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10001234:	85 db                	test   ebx,ebx
10001236:	75 0a                	jne    10001242 <ssfn_select+0x19>
10001238:	be fc ff ff ff       	mov    esi,0xfffffffc
1000123d:	e9 13 01 00 00       	jmp    10001355 <ssfn_select+0x12c>
10001242:	89 d8                	mov    eax,ebx
10001244:	e8 44 f2 ff ff       	call   1000048d <_ssfn_fc.part.1>
10001249:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
1000124d:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
10001253:	0f 85 e9 00 00 00    	jne    10001342 <ssfn_select+0x119>
10001259:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000125d:	83 e8 08             	sub    eax,0x8
10001260:	3d b8 00 00 00       	cmp    eax,0xb8
10001265:	0f 87 de 00 00 00    	ja     10001349 <ssfn_select+0x120>
1000126b:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
10001273:	75 76                	jne    100012eb <ssfn_select+0xc2>
10001275:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
1000127a:	74 bc                	je     10001238 <ssfn_select+0xf>
1000127c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001280:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001283:	74 b3                	je     10001238 <ssfn_select+0xf>
10001285:	31 ed                	xor    ebp,ebp
10001287:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000128b:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
1000128f:	74 03                	je     10001294 <ssfn_select+0x6b>
10001291:	45                   	inc    ebp
10001292:	eb f3                	jmp    10001287 <ssfn_select+0x5e>
10001294:	8d 43 14             	lea    eax,[ebx+0x14]
10001297:	89 df                	mov    edi,ebx
10001299:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000129d:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
100012a3:	31 d2                	xor    edx,edx
100012a5:	89 04 24             	mov    DWORD PTR [esp],eax
100012a8:	39 14 24             	cmp    DWORD PTR [esp],edx
100012ab:	7e 33                	jle    100012e0 <ssfn_select+0xb7>
100012ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100012b1:	8b 07                	mov    eax,DWORD PTR [edi]
100012b3:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
100012b6:	50                   	push   eax
100012b7:	8d 41 20             	lea    eax,[ecx+0x20]
100012ba:	55                   	push   ebp
100012bb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100012bf:	50                   	push   eax
100012c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
100012c4:	e8 fc ff ff ff       	call   100012c5 <ssfn_select+0x9c>	100012c5: R_386_PC32	memcmp
100012c9:	83 c4 10             	add    esp,0x10
100012cc:	85 c0                	test   eax,eax
100012ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100012d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100012d6:	75 05                	jne    100012dd <ssfn_select+0xb4>
100012d8:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
100012db:	eb 34                	jmp    10001311 <ssfn_select+0xe8>
100012dd:	42                   	inc    edx
100012de:	eb c8                	jmp    100012a8 <ssfn_select+0x7f>
100012e0:	83 c7 04             	add    edi,0x4
100012e3:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
100012e7:	75 b4                	jne    1000129d <ssfn_select+0x74>
100012e9:	eb 65                	jmp    10001350 <ssfn_select+0x127>
100012eb:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
100012f3:	74 15                	je     1000130a <ssfn_select+0xe1>
100012f5:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
100012fa:	7f 54                	jg     10001350 <ssfn_select+0x127>
100012fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001300:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
10001308:	74 46                	je     10001350 <ssfn_select+0x127>
1000130a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10001311:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001315:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
1000131c:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
10001322:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
1000132c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001330:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
10001336:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000133a:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
10001340:	eb 13                	jmp    10001355 <ssfn_select+0x12c>
10001342:	be fb ff ff ff       	mov    esi,0xfffffffb
10001347:	eb 0c                	jmp    10001355 <ssfn_select+0x12c>
10001349:	be fa ff ff ff       	mov    esi,0xfffffffa
1000134e:	eb 05                	jmp    10001355 <ssfn_select+0x12c>
10001350:	be fd ff ff ff       	mov    esi,0xfffffffd
10001355:	83 c4 1c             	add    esp,0x1c
10001358:	89 f0                	mov    eax,esi
1000135a:	5b                   	pop    ebx
1000135b:	5e                   	pop    esi
1000135c:	5f                   	pop    edi
1000135d:	5d                   	pop    ebp
1000135e:	c3                   	ret    

1000135f <ssfn_render>:
1000135f:	55                   	push   ebp
10001360:	57                   	push   edi
10001361:	56                   	push   esi
10001362:	53                   	push   ebx
10001363:	81 ec dc 05 01 00    	sub    esp,0x105dc
10001369:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
10001370:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
1000137b:	85 ed                	test   ebp,ebp
1000137d:	0f 94 c2             	sete   dl
10001380:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
10001388:	0f 94 c0             	sete   al
1000138b:	08 c2                	or     dl,al
1000138d:	74 0a                	je     10001399 <ssfn_render+0x3a>
1000138f:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
10001394:	e9 14 1e 00 00       	jmp    100031ad <ssfn_render+0x1e4e>
10001399:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
100013a0:	31 c9                	xor    ecx,ecx
100013a2:	8a 00                	mov    al,BYTE PTR [eax]
100013a4:	84 c0                	test   al,al
100013a6:	0f 84 01 1e 00 00    	je     100031ad <ssfn_render+0x1e4e>
100013ac:	3c 0d                	cmp    al,0xd
100013ae:	75 0f                	jne    100013bf <ssfn_render+0x60>
100013b0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100013b7:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100013bd:	eb 31                	jmp    100013f0 <ssfn_render+0x91>
100013bf:	3c 0a                	cmp    al,0xa
100013c1:	75 37                	jne    100013fa <ssfn_render+0x9b>
100013c3:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100013ca:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100013d0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
100013d3:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
100013d9:	85 c0                	test   eax,eax
100013db:	75 06                	jne    100013e3 <ssfn_render+0x84>
100013dd:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
100013e3:	01 d0                	add    eax,edx
100013e5:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100013ec:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
100013f0:	b9 01 00 00 00       	mov    ecx,0x1
100013f5:	e9 b3 1d 00 00       	jmp    100031ad <ssfn_render+0x1e4e>
100013fa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100013fd:	85 c0                	test   eax,eax
100013ff:	74 3e                	je     1000143f <ssfn_render+0xe0>
10001401:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10001404:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
1000140b:	56                   	push   esi
1000140c:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001413:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000141a:	e8 a0 f4 ff ff       	call   100008bf <_ssfn_c>
1000141f:	5b                   	pop    ebx
10001420:	85 c0                	test   eax,eax
10001422:	0f 85 71 02 00 00    	jne    10001699 <ssfn_render+0x33a>
10001428:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
1000142e:	81 e2 00 01 00 00    	and    edx,0x100
10001434:	0f 84 fd 01 00 00    	je     10001637 <ssfn_render+0x2d8>
1000143a:	e9 1d 02 00 00       	jmp    1000165c <ssfn_render+0x2fd>
1000143f:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
10001445:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
1000144c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001450:	3d fd 00 00 00       	cmp    eax,0xfd
10001455:	7f 08                	jg     1000145f <ssfn_render+0x100>
10001457:	89 c3                	mov    ebx,eax
10001459:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000145d:	eb 3f                	jmp    1000149e <ssfn_render+0x13f>
1000145f:	31 db                	xor    ebx,ebx
10001461:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
10001469:	eb 33                	jmp    1000149e <ssfn_render+0x13f>
1000146b:	85 c0                	test   eax,eax
1000146d:	0f 84 64 01 00 00    	je     100015d7 <ssfn_render+0x278>
10001473:	43                   	inc    ebx
10001474:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
10001478:	7e 28                	jle    100014a2 <ssfn_render+0x143>
1000147a:	85 c0                	test   eax,eax
1000147c:	0f 85 17 02 00 00    	jne    10001699 <ssfn_render+0x33a>
10001482:	31 db                	xor    ebx,ebx
10001484:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
1000148c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
10001494:	74 92                	je     10001428 <ssfn_render+0xc9>
10001496:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
1000149e:	31 c0                	xor    eax,eax
100014a0:	eb d2                	jmp    10001474 <ssfn_render+0x115>
100014a2:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
100014a6:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
100014ad:	74 bc                	je     1000146b <ssfn_render+0x10c>
100014af:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100014ba:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
100014c1:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
100014c8:	7e 50                	jle    1000151a <ssfn_render+0x1bb>
100014ca:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
100014cd:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
100014d1:	c1 fa 04             	sar    edx,0x4
100014d4:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
100014da:	80 e2 03             	and    dl,0x3
100014dd:	75 32                	jne    10001511 <ssfn_render+0x1b2>
100014df:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
100014e3:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
100014e9:	75 26                	jne    10001511 <ssfn_render+0x1b2>
100014eb:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
100014f2:	50                   	push   eax
100014f3:	89 f8                	mov    eax,edi
100014f5:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100014fc:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001503:	e8 b7 f3 ff ff       	call   100008bf <_ssfn_c>
10001508:	59                   	pop    ecx
10001509:	85 c0                	test   eax,eax
1000150b:	0f 85 04 01 00 00    	jne    10001615 <ssfn_render+0x2b6>
10001511:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001518:	eb a0                	jmp    100014ba <ssfn_render+0x15b>
1000151a:	85 c0                	test   eax,eax
1000151c:	0f 85 51 ff ff ff    	jne    10001473 <ssfn_render+0x114>
10001522:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000152d:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001534:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
1000153b:	0f 8e f9 1b 00 00    	jle    1000313a <ssfn_render+0x1ddb>
10001541:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001544:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
10001548:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
1000154e:	74 09                	je     10001559 <ssfn_render+0x1fa>
10001550:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001557:	eb d4                	jmp    1000152d <ssfn_render+0x1ce>
10001559:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001560:	57                   	push   edi
10001561:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001568:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000156f:	e8 4b f3 ff ff       	call   100008bf <_ssfn_c>
10001574:	5a                   	pop    edx
10001575:	85 c0                	test   eax,eax
10001577:	74 d7                	je     10001550 <ssfn_render+0x1f1>
10001579:	e9 97 00 00 00       	jmp    10001615 <ssfn_render+0x2b6>
1000157e:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001581:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
10001585:	c1 fa 04             	sar    edx,0x4
10001588:	31 ca                	xor    edx,ecx
1000158a:	80 e2 03             	and    dl,0x3
1000158d:	0f 84 b7 1b 00 00    	je     1000314a <ssfn_render+0x1deb>
10001593:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000159a:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015a1:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
100015a7:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015ae:	7f ce                	jg     1000157e <ssfn_render+0x21f>
100015b0:	83 e1 03             	and    ecx,0x3
100015b3:	83 f9 03             	cmp    ecx,0x3
100015b6:	75 1f                	jne    100015d7 <ssfn_render+0x278>
100015b8:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100015c3:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015ca:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015d1:	0f 8f 9c 1b 00 00    	jg     10003173 <ssfn_render+0x1e14>
100015d7:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100015e2:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100015e9:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100015f0:	7e 3e                	jle    10001630 <ssfn_render+0x2d1>
100015f2:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100015f5:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100015fc:	57                   	push   edi
100015fd:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001604:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000160b:	e8 af f2 ff ff       	call   100008bf <_ssfn_c>
10001610:	5a                   	pop    edx
10001611:	85 c0                	test   eax,eax
10001613:	74 12                	je     10001627 <ssfn_render+0x2c8>
10001615:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000161c:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
1000161f:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
10001622:	e9 4c fe ff ff       	jmp    10001473 <ssfn_render+0x114>
10001627:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000162e:	eb b2                	jmp    100015e2 <ssfn_render+0x283>
10001630:	31 c0                	xor    eax,eax
10001632:	e9 3c fe ff ff       	jmp    10001473 <ssfn_render+0x114>
10001637:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
1000163d:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
10001648:	81 fb fd 00 00 00    	cmp    ebx,0xfd
1000164e:	7f 16                	jg     10001666 <ssfn_render+0x307>
10001650:	89 da                	mov    edx,ebx
10001652:	31 c0                	xor    eax,eax
10001654:	39 da                	cmp    edx,ebx
10001656:	7e 15                	jle    1000166d <ssfn_render+0x30e>
10001658:	85 c0                	test   eax,eax
1000165a:	75 3d                	jne    10001699 <ssfn_render+0x33a>
1000165c:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
10001661:	e9 47 1b 00 00       	jmp    100031ad <ssfn_render+0x1e4e>
10001666:	bb 04 00 00 00       	mov    ebx,0x4
1000166b:	eb e5                	jmp    10001652 <ssfn_render+0x2f3>
1000166d:	85 c0                	test   eax,eax
1000166f:	75 28                	jne    10001699 <ssfn_render+0x33a>
10001671:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
10001679:	74 1b                	je     10001696 <ssfn_render+0x337>
1000167b:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
1000167f:	8b 09                	mov    ecx,DWORD PTR [ecx]
10001681:	85 c9                	test   ecx,ecx
10001683:	74 11                	je     10001696 <ssfn_render+0x337>
10001685:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
10001688:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
1000168c:	78 08                	js     10001696 <ssfn_render+0x337>
1000168e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
10001691:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
10001694:	01 c8                	add    eax,ecx
10001696:	42                   	inc    edx
10001697:	eb bb                	jmp    10001654 <ssfn_render+0x2f5>
10001699:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
1000169c:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
100016a1:	85 d2                	test   edx,edx
100016a3:	0f 84 04 1b 00 00    	je     100031ad <ssfn_render+0x1e4e>
100016a9:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
100016ad:	0f 84 fa 1a 00 00    	je     100031ad <ssfn_render+0x1e4e>
100016b3:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100016b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100016bd:	85 ff                	test   edi,edi
100016bf:	0f 84 e8 1a 00 00    	je     100031ad <ssfn_render+0x1e4e>
100016c5:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
100016cc:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
100016d0:	c1 ef 10             	shr    edi,0x10
100016d3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
100016d7:	83 ff 10             	cmp    edi,0x10
100016da:	0f 87 af fc ff ff    	ja     1000138f <ssfn_render+0x30>
100016e0:	8d 70 06             	lea    esi,[eax+0x6]
100016e3:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
100016e9:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
100016ed:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
100016f3:	89 f7                	mov    edi,esi
100016f5:	81 e7 00 02 00 00    	and    edi,0x200
100016fb:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100016ff:	75 34                	jne    10001735 <ssfn_render+0x3d6>
10001701:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001705:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
1000170c:	85 c9                	test   ecx,ecx
1000170e:	74 25                	je     10001735 <ssfn_render+0x3d6>
10001710:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001714:	0f b6 ff             	movzx  edi,bh
10001717:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000171a:	85 c9                	test   ecx,ecx
1000171c:	74 17                	je     10001735 <ssfn_render+0x3d6>
1000171e:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
10001723:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
10001726:	85 c9                	test   ecx,ecx
10001728:	74 0b                	je     10001735 <ssfn_render+0x3d6>
1000172a:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
10001730:	e9 25 0d 00 00       	jmp    1000245a <ssfn_render+0x10fb>
10001735:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
10001739:	f7 c6 40 00 00 00    	test   esi,0x40
1000173f:	75 1a                	jne    1000175b <ssfn_render+0x3fc>
10001741:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
10001745:	7e 10                	jle    10001757 <ssfn_render+0x3f8>
10001747:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000174b:	83 c7 04             	add    edi,0x4
1000174e:	83 e7 fc             	and    edi,0xfffffffc
10001751:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001755:	eb 04                	jmp    1000175b <ssfn_render+0x3fc>
10001757:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000175b:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
10001760:	f7 c6 02 00 00 00    	test   esi,0x2
10001766:	74 14                	je     1000177c <ssfn_render+0x41d>
10001768:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
1000176b:	c0 eb 05             	shr    bl,0x5
1000176e:	89 df                	mov    edi,ebx
10001770:	83 f7 01             	xor    edi,0x1
10001773:	83 e7 01             	and    edi,0x1
10001776:	89 fb                	mov    ebx,edi
10001778:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
1000177c:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
10001781:	83 e6 01             	and    esi,0x1
10001784:	74 10                	je     10001796 <ssfn_render+0x437>
10001786:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
1000178a:	75 0a                	jne    10001796 <ssfn_render+0x437>
1000178c:	8d 51 40             	lea    edx,[ecx+0x40]
1000178f:	c1 fa 06             	sar    edx,0x6
10001792:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
10001796:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
1000179a:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000179f:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100017a3:	99                   	cdq    
100017a4:	f7 f9                	idiv   ecx
100017a6:	89 c1                	mov    ecx,eax
100017a8:	31 c0                	xor    eax,eax
100017aa:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100017af:	74 0c                	je     100017bd <ssfn_render+0x45e>
100017b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100017b5:	be 04 00 00 00       	mov    esi,0x4
100017ba:	99                   	cdq    
100017bb:	f7 fe                	idiv   esi
100017bd:	01 c8                	add    eax,ecx
100017bf:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
100017c4:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
100017c9:	01 f0                	add    eax,esi
100017cb:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100017cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100017d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100017d7:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
100017dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100017e0:	3d ff f4 00 00       	cmp    eax,0xf4ff
100017e5:	0f 8f c2 19 00 00    	jg     100031ad <ssfn_render+0x1e4e>
100017eb:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
100017f0:	0f 85 f0 00 00 00    	jne    100018e6 <ssfn_render+0x587>
100017f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100017fa:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
100017fe:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
10001805:	75 2f                	jne    10001836 <ssfn_render+0x4d7>
10001807:	83 ec 0c             	sub    esp,0xc
1000180a:	68 00 04 00 00       	push   0x400
1000180f:	e8 fc ff ff ff       	call   10001810 <ssfn_render+0x4b1>	10001810: R_386_PC32	malloc
10001814:	83 c4 10             	add    esp,0x10
10001817:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
1000181d:	85 c0                	test   eax,eax
1000181f:	75 08                	jne    10001829 <ssfn_render+0x4ca>
10001821:	83 c9 ff             	or     ecx,0xffffffff
10001824:	e9 84 19 00 00       	jmp    100031ad <ssfn_render+0x1e4e>
10001829:	89 c7                	mov    edi,eax
1000182b:	b9 00 01 00 00       	mov    ecx,0x100
10001830:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001834:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10001836:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000183a:	0f b6 dc             	movzx  ebx,ah
1000183d:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
10001843:	8d 1c 98             	lea    ebx,[eax+ebx*4]
10001846:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10001849:	75 3a                	jne    10001885 <ssfn_render+0x526>
1000184b:	83 ec 0c             	sub    esp,0xc
1000184e:	68 00 04 00 00       	push   0x400
10001853:	e8 fc ff ff ff       	call   10001854 <ssfn_render+0x4f5>	10001854: R_386_PC32	malloc
10001858:	89 03                	mov    DWORD PTR [ebx],eax
1000185a:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10001861:	83 c4 10             	add    esp,0x10
10001864:	89 c2                	mov    edx,eax
10001866:	0f b6 c4             	movzx  eax,ah
10001869:	c1 ea 10             	shr    edx,0x10
1000186c:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001873:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
10001876:	85 d2                	test   edx,edx
10001878:	74 a7                	je     10001821 <ssfn_render+0x4c2>
1000187a:	b9 00 01 00 00       	mov    ecx,0x100
1000187f:	31 c0                	xor    eax,eax
10001881:	89 d7                	mov    edi,edx
10001883:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10001885:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
1000188c:	83 ec 0c             	sub    esp,0xc
1000188f:	0f b6 cc             	movzx  ecx,ah
10001892:	89 c2                	mov    edx,eax
10001894:	0f b6 c0             	movzx  eax,al
10001897:	c1 ea 10             	shr    edx,0x10
1000189a:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100018a1:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
100018a4:	8d 1c 82             	lea    ebx,[edx+eax*4]
100018a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100018ab:	83 c0 08             	add    eax,0x8
100018ae:	50                   	push   eax
100018af:	e8 fc ff ff ff       	call   100018b0 <ssfn_render+0x551>	100018b0: R_386_PC32	malloc
100018b4:	89 03                	mov    DWORD PTR [ebx],eax
100018b6:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
100018bc:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
100018c3:	83 c4 10             	add    esp,0x10
100018c6:	89 c2                	mov    edx,eax
100018c8:	0f b6 cc             	movzx  ecx,ah
100018cb:	c1 ea 10             	shr    edx,0x10
100018ce:	0f b6 c0             	movzx  eax,al
100018d1:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100018d8:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
100018db:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
100018df:	75 0e                	jne    100018ef <ssfn_render+0x590>
100018e1:	e9 3b ff ff ff       	jmp    10001821 <ssfn_render+0x4c2>
100018e6:	8d 45 1c             	lea    eax,[ebp+0x1c]
100018e9:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
100018ef:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
100018f5:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100018f9:	74 2a                	je     10001925 <ssfn_render+0x5c6>
100018fb:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001900:	74 23                	je     10001925 <ssfn_render+0x5c6>
10001902:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001905:	bb 04 00 00 00       	mov    ebx,0x4
1000190a:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
1000190e:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10001912:	89 cf                	mov    edi,ecx
10001914:	29 c7                	sub    edi,eax
10001916:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000191a:	0f af c7             	imul   eax,edi
1000191d:	99                   	cdq    
1000191e:	f7 fb                	idiv   ebx
10001920:	99                   	cdq    
10001921:	f7 f9                	idiv   ecx
10001923:	eb 02                	jmp    10001927 <ssfn_render+0x5c8>
10001925:	31 c0                	xor    eax,eax
10001927:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000192d:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10001931:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001935:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
1000193d:	66 89 32             	mov    WORD PTR [edx],si
10001940:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
10001945:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000194b:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
1000194e:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10001954:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000195a:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
1000195d:	01 c3                	add    ebx,eax
1000195f:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
10001962:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001968:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
1000196e:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
10001971:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
10001974:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
1000197a:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001980:	8a 12                	mov    dl,BYTE PTR [edx]
10001982:	83 e2 3f             	and    edx,0x3f
10001985:	01 d0                	add    eax,edx
10001987:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
1000198a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
1000198e:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001994:	8d 50 08             	lea    edx,[eax+0x8]
10001997:	b0 ff                	mov    al,0xff
10001999:	89 d7                	mov    edi,edx
1000199b:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000199d:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019a3:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
100019a7:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100019ad:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
100019b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100019b5:	c1 e0 04             	shl    eax,0x4
100019b8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
100019bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100019c0:	c1 e0 04             	shl    eax,0x4
100019c3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
100019c7:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100019cd:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
100019d1:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
100019d5:	0f 8e 4d 0a 00 00    	jle    10002428 <ssfn_render+0x10c9>
100019db:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
100019df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100019e3:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
100019e6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
100019e9:	8a 12                	mov    dl,BYTE PTR [edx]
100019eb:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
100019ef:	83 e2 40             	and    edx,0x40
100019f2:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
100019f6:	88 c2                	mov    dl,al
100019f8:	21 ca                	and    edx,ecx
100019fa:	fe c2                	inc    dl
100019fc:	75 14                	jne    10001a12 <ssfn_render+0x6b3>
100019fe:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
10001a03:	19 c0                	sbb    eax,eax
10001a05:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
10001a09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001a0d:	e9 09 0a 00 00       	jmp    1000241b <ssfn_render+0x10bc>
10001a12:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10001a16:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10001a19:	c1 e0 04             	shl    eax,0x4
10001a1c:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
10001a20:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a25:	99                   	cdq    
10001a26:	f7 fe                	idiv   esi
10001a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001a2c:	0f b6 c1             	movzx  eax,cl
10001a2f:	c1 e0 04             	shl    eax,0x4
10001a32:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a37:	99                   	cdq    
10001a38:	f7 fe                	idiv   esi
10001a3a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001a3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a42:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
10001a46:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10001a4a:	c1 e2 10             	shl    edx,0x10
10001a4d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
10001a52:	74 0e                	je     10001a62 <ssfn_render+0x703>
10001a54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001a58:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
10001a5d:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
10001a60:	eb 0c                	jmp    10001a6e <ssfn_render+0x70f>
10001a62:	c1 e0 08             	shl    eax,0x8
10001a65:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
10001a6a:	09 d0                	or     eax,edx
10001a6c:	09 c3                	or     ebx,eax
10001a6e:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
10001a71:	8a 01                	mov    al,BYTE PTR [ecx]
10001a73:	84 c0                	test   al,al
10001a75:	0f 88 17 05 00 00    	js     10001f92 <ssfn_render+0xc33>
10001a7b:	89 c7                	mov    edi,eax
10001a7d:	83 e7 3f             	and    edi,0x3f
10001a80:	a8 40                	test   al,0x40
10001a82:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10001a86:	74 10                	je     10001a98 <ssfn_render+0x739>
10001a88:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10001a8c:	89 f8                	mov    eax,edi
10001a8e:	41                   	inc    ecx
10001a8f:	c1 e0 08             	shl    eax,0x8
10001a92:	09 c2                	or     edx,eax
10001a94:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
10001a98:	8d 41 01             	lea    eax,[ecx+0x1]
10001a9b:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001aa5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001aa9:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001ab4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001ab8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001abc:	83 c0 04             	add    eax,0x4
10001abf:	c1 f8 02             	sar    eax,0x2
10001ac2:	01 c7                	add    edi,eax
10001ac4:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001acb:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001acf:	0f 8f d7 01 00 00    	jg     10001cac <ssfn_render+0x94d>
10001ad5:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001ad8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001adc:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001ae0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001ae4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001ae8:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001aeb:	c1 e0 04             	shl    eax,0x4
10001aee:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001af3:	99                   	cdq    
10001af4:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001af8:	01 c6                	add    esi,eax
10001afa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001afe:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001b02:	c1 e0 04             	shl    eax,0x4
10001b05:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b0a:	99                   	cdq    
10001b0b:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b0f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001b13:	01 c3                	add    ebx,eax
10001b15:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001b19:	89 c8                	mov    eax,ecx
10001b1b:	01 c9                	add    ecx,ecx
10001b1d:	c1 f8 02             	sar    eax,0x2
10001b20:	83 e1 06             	and    ecx,0x6
10001b23:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001b27:	d3 f8                	sar    eax,cl
10001b29:	83 e0 03             	and    eax,0x3
10001b2c:	89 c1                	mov    ecx,eax
10001b2e:	83 f8 02             	cmp    eax,0x2
10001b31:	74 4a                	je     10001b7d <ssfn_render+0x81e>
10001b33:	83 f8 03             	cmp    eax,0x3
10001b36:	0f 84 e4 00 00 00    	je     10001c20 <ssfn_render+0x8c1>
10001b3c:	49                   	dec    ecx
10001b3d:	74 20                	je     10001b5f <ssfn_render+0x800>
10001b3f:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001b45:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001b4b:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001b51:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001b57:	83 c7 02             	add    edi,0x2
10001b5a:	e9 41 01 00 00       	jmp    10001ca0 <ssfn_render+0x941>
10001b5f:	83 c7 02             	add    edi,0x2
10001b62:	50                   	push   eax
10001b63:	50                   	push   eax
10001b64:	89 e8                	mov    eax,ebp
10001b66:	53                   	push   ebx
10001b67:	56                   	push   esi
10001b68:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001b6c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001b70:	e8 9c e9 ff ff       	call   10000511 <_ssfn_l>
10001b75:	83 c4 10             	add    esp,0x10
10001b78:	e9 23 01 00 00       	jmp    10001ca0 <ssfn_render+0x941>
10001b7d:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001b81:	83 c7 04             	add    edi,0x4
10001b84:	c1 e0 04             	shl    eax,0x4
10001b87:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b8c:	99                   	cdq    
10001b8d:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b91:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001b95:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001b99:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001b9d:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001ba1:	c1 e0 04             	shl    eax,0x4
10001ba4:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001ba9:	99                   	cdq    
10001baa:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001bae:	83 ec 0c             	sub    esp,0xc
10001bb1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001bb5:	6a 00                	push   0x0
10001bb7:	53                   	push   ebx
10001bb8:	56                   	push   esi
10001bb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001bbd:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001bc1:	99                   	cdq    
10001bc2:	f7 f9                	idiv   ecx
10001bc4:	01 d8                	add    eax,ebx
10001bc6:	50                   	push   eax
10001bc7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001bcb:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001bcf:	99                   	cdq    
10001bd0:	f7 f9                	idiv   ecx
10001bd2:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001bd6:	50                   	push   eax
10001bd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001bdb:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001bdf:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001be5:	99                   	cdq    
10001be6:	f7 f9                	idiv   ecx
10001be8:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001bee:	50                   	push   eax
10001bef:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001bf3:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001bf9:	99                   	cdq    
10001bfa:	f7 f9                	idiv   ecx
10001bfc:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001c02:	50                   	push   eax
10001c03:	89 e8                	mov    eax,ebp
10001c05:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001c0b:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001c11:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001c15:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001c19:	e8 04 ea ff ff       	call   10000622 <_ssfn_b>
10001c1e:	eb 7d                	jmp    10001c9d <ssfn_render+0x93e>
10001c20:	83 ec 0c             	sub    esp,0xc
10001c23:	83 c7 06             	add    edi,0x6
10001c26:	6a 00                	push   0x0
10001c28:	53                   	push   ebx
10001c29:	56                   	push   esi
10001c2a:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001c2e:	c1 e0 04             	shl    eax,0x4
10001c31:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001c36:	99                   	cdq    
10001c37:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001c3b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001c3f:	50                   	push   eax
10001c40:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001c44:	c1 e0 04             	shl    eax,0x4
10001c47:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001c4c:	99                   	cdq    
10001c4d:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001c51:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001c55:	50                   	push   eax
10001c56:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001c5a:	c1 e0 04             	shl    eax,0x4
10001c5d:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001c62:	99                   	cdq    
10001c63:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001c67:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001c6b:	50                   	push   eax
10001c6c:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001c70:	c1 e0 04             	shl    eax,0x4
10001c73:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001c78:	99                   	cdq    
10001c79:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001c7d:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001c81:	50                   	push   eax
10001c82:	89 e8                	mov    eax,ebp
10001c84:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001c8a:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001c90:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001c94:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001c98:	e8 85 e9 ff ff       	call   10000622 <_ssfn_b>
10001c9d:	83 c4 30             	add    esp,0x30
10001ca0:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001ca7:	e9 18 fe ff ff       	jmp    10001ac4 <ssfn_render+0x765>
10001cac:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001cb2:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001cb8:	75 0e                	jne    10001cc8 <ssfn_render+0x969>
10001cba:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001cc0:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001cc6:	74 2e                	je     10001cf6 <ssfn_render+0x997>
10001cc8:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001cce:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001cd4:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001cd8:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001cde:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001ce4:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001cea:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001cef:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001cf6:	b3 fe                	mov    bl,0xfe
10001cf8:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001cff:	0f 8e 16 07 00 00    	jle    1000241b <ssfn_render+0x10bc>
10001d05:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001d0d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001d15:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001d1d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001d25:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001d2d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001d31:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001d35:	0f 8d de 06 00 00    	jge    10002419 <ssfn_render+0x10ba>
10001d3b:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001d41:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001d4c:	83 e8 03             	sub    eax,0x3
10001d4f:	31 f6                	xor    esi,esi
10001d51:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001d55:	89 f8                	mov    eax,edi
10001d57:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001d5b:	c1 f8 02             	sar    eax,0x2
10001d5e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001d62:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001d69:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001d6d:	0f 8e 16 01 00 00    	jle    10001e89 <ssfn_render+0xb2a>
10001d73:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001d79:	8d 47 01             	lea    eax,[edi+0x1]
10001d7c:	01 c0                	add    eax,eax
10001d7e:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001d82:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001d86:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001d8b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001d8f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001d93:	7d 0c                	jge    10001da1 <ssfn_render+0xa42>
10001d95:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001d99:	0f 8f db 00 00 00    	jg     10001e7a <ssfn_render+0xb1b>
10001d9f:	eb 0a                	jmp    10001dab <ssfn_render+0xa4c>
10001da1:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001da5:	0f 8e cf 00 00 00    	jle    10001e7a <ssfn_render+0xb1b>
10001dab:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001db0:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001db4:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001db9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001dbd:	89 d8                	mov    eax,ebx
10001dbf:	c1 fa 04             	sar    edx,0x4
10001dc2:	c1 f8 04             	sar    eax,0x4
10001dc5:	39 c2                	cmp    edx,eax
10001dc7:	75 0a                	jne    10001dd3 <ssfn_render+0xa74>
10001dc9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001dcd:	01 c8                	add    eax,ecx
10001dcf:	d1 f8                	sar    eax,1
10001dd1:	eb 1a                	jmp    10001ded <ssfn_render+0xa8e>
10001dd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001dd7:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001ddb:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001ddf:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001de3:	0f af c1             	imul   eax,ecx
10001de6:	99                   	cdq    
10001de7:	f7 fb                	idiv   ebx
10001de9:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001ded:	c1 f8 04             	sar    eax,0x4
10001df0:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001df5:	74 04                	je     10001dfb <ssfn_render+0xa9c>
10001df7:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001dfb:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001e00:	75 3f                	jne    10001e41 <ssfn_render+0xae2>
10001e02:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001e07:	74 38                	je     10001e41 <ssfn_render+0xae2>
10001e09:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e0d:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001e13:	f7 db                	neg    ebx
10001e15:	01 c2                	add    edx,eax
10001e17:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001e1b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001e1f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e23:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001e27:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001e2b:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001e2f:	74 10                	je     10001e41 <ssfn_render+0xae2>
10001e31:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001e35:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001e39:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001e3d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001e41:	31 d2                	xor    edx,edx
10001e43:	39 f2                	cmp    edx,esi
10001e45:	75 0b                	jne    10001e52 <ssfn_render+0xaf3>
10001e47:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001e4f:	46                   	inc    esi
10001e50:	eb 28                	jmp    10001e7a <ssfn_render+0xb1b>
10001e52:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001e5a:	39 c1                	cmp    ecx,eax
10001e5c:	7d 03                	jge    10001e61 <ssfn_render+0xb02>
10001e5e:	42                   	inc    edx
10001e5f:	eb e2                	jmp    10001e43 <ssfn_render+0xae4>
10001e61:	89 f1                	mov    ecx,esi
10001e63:	49                   	dec    ecx
10001e64:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001e6c:	39 d1                	cmp    ecx,edx
10001e6e:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001e76:	7f eb                	jg     10001e63 <ssfn_render+0xb04>
10001e78:	eb cd                	jmp    10001e47 <ssfn_render+0xae8>
10001e7a:	8d 47 02             	lea    eax,[edi+0x2]
10001e7d:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001e84:	e9 d9 fe ff ff       	jmp    10001d62 <ssfn_render+0xa03>
10001e89:	83 fe 01             	cmp    esi,0x1
10001e8c:	7e 1f                	jle    10001ead <ssfn_render+0xb4e>
10001e8e:	f7 c6 01 00 00 00    	test   esi,0x1
10001e94:	74 24                	je     10001eba <ssfn_render+0xb5b>
10001e96:	8d 46 ff             	lea    eax,[esi-0x1]
10001e99:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10001ea1:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10001ea9:	89 c6                	mov    esi,eax
10001eab:	eb 0d                	jmp    10001eba <ssfn_render+0xb5b>
10001ead:	85 f6                	test   esi,esi
10001eaf:	0f 84 c7 00 00 00    	je     10001f7c <ssfn_render+0xc1d>
10001eb5:	be 01 00 00 00       	mov    esi,0x1
10001eba:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001ec0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001ec4:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10001ec8:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001ecc:	39 d1                	cmp    ecx,edx
10001ece:	7d 0b                	jge    10001edb <ssfn_render+0xb7c>
10001ed0:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10001ed4:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001ed8:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001edb:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001ee6:	31 c0                	xor    eax,eax
10001ee8:	31 d2                	xor    edx,edx
10001eea:	8d 4e ff             	lea    ecx,[esi-0x1]
10001eed:	39 d1                	cmp    ecx,edx
10001eef:	7e 7d                	jle    10001f6e <ssfn_render+0xc0f>
10001ef1:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10001ef9:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10001f01:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001f05:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001f09:	79 02                	jns    10001f0d <ssfn_render+0xbae>
10001f0b:	31 c0                	xor    eax,eax
10001f0d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001f11:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10001f15:	39 cf                	cmp    edi,ecx
10001f17:	7e 04                	jle    10001f1d <ssfn_render+0xbbe>
10001f19:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001f1d:	85 d2                	test   edx,edx
10001f1f:	74 12                	je     10001f33 <ssfn_render+0xbd4>
10001f21:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10001f29:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001f2d:	39 c8                	cmp    eax,ecx
10001f2f:	7d 02                	jge    10001f33 <ssfn_render+0xbd4>
10001f31:	89 c8                	mov    eax,ecx
10001f33:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10001f37:	7d 2b                	jge    10001f64 <ssfn_render+0xc05>
10001f39:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001f3d:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10001f43:	8d 3c 01             	lea    edi,[ecx+eax*1]
10001f46:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10001f4a:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
10001f4e:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10001f52:	75 05                	jne    10001f59 <ssfn_render+0xbfa>
10001f54:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
10001f59:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
10001f5d:	40                   	inc    eax
10001f5e:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10001f62:	eb cf                	jmp    10001f33 <ssfn_render+0xbd4>
10001f64:	83 c2 02             	add    edx,0x2
10001f67:	b0 01                	mov    al,0x1
10001f69:	e9 7c ff ff ff       	jmp    10001eea <ssfn_render+0xb8b>
10001f6e:	83 e6 fe             	and    esi,0xfffffffe
10001f71:	84 c0                	test   al,al
10001f73:	74 07                	je     10001f7c <ssfn_render+0xc1d>
10001f75:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10001f7c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001f80:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
10001f84:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
10001f88:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
10001f8d:	e9 9b fd ff ff       	jmp    10001d2d <ssfn_render+0x9ce>
10001f92:	88 c2                	mov    dl,al
10001f94:	80 e2 60             	and    dl,0x60
10001f97:	0f 85 95 02 00 00    	jne    10002232 <ssfn_render+0xed3>
10001f9d:	83 e0 1f             	and    eax,0x1f
10001fa0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001fa4:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10001fab:	c1 fb 04             	sar    ebx,0x4
10001fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10001fb2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10001fb6:	40                   	inc    eax
10001fb7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001fbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001fbf:	c1 f8 04             	sar    eax,0x4
10001fc2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001fc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001fca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001fcf:	99                   	cdq    
10001fd0:	f7 fe                	idiv   esi
10001fd2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001fd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001fda:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10001fdf:	99                   	cdq    
10001fe0:	f7 fe                	idiv   esi
10001fe2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001fe6:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001fec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001ff0:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10001ff4:	8d 14 3b             	lea    edx,[ebx+edi*1]
10001ff7:	39 d6                	cmp    esi,edx
10001ff9:	7d 0a                	jge    10002005 <ssfn_render+0xca6>
10001ffb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001fff:	8d 14 3b             	lea    edx,[ebx+edi*1]
10002002:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002009:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10002011:	0f af c3             	imul   eax,ebx
10002014:	31 ff                	xor    edi,edi
10002016:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
1000201a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000201e:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002022:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10002026:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000202a:	29 d8                	sub    eax,ebx
1000202c:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10002030:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
10002034:	0f 8d b1 00 00 00    	jge    100020eb <ssfn_render+0xd8c>
1000203a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000203e:	99                   	cdq    
1000203f:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002043:	89 c6                	mov    esi,eax
10002045:	31 c0                	xor    eax,eax
10002047:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
1000204c:	74 0e                	je     1000205c <ssfn_render+0xcfd>
1000204e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10002052:	bb 04 00 00 00       	mov    ebx,0x4
10002057:	29 f8                	sub    eax,edi
10002059:	99                   	cdq    
1000205a:	f7 fb                	idiv   ebx
1000205c:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10002060:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000206b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
1000206f:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
10002074:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000207b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
1000207f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002083:	39 d8                	cmp    eax,ebx
10002085:	7d 4e                	jge    100020d5 <ssfn_render+0xd76>
10002087:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000208b:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
10002090:	99                   	cdq    
10002091:	f7 fb                	idiv   ebx
10002093:	8d 14 06             	lea    edx,[esi+eax*1]
10002096:	83 e0 07             	and    eax,0x7
10002099:	c1 fa 03             	sar    edx,0x3
1000209c:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
100020a1:	0f a3 c2             	bt     edx,eax
100020a4:	72 0e                	jb     100020b4 <ssfn_render+0xd55>
100020a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100020aa:	43                   	inc    ebx
100020ab:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
100020b2:	eb c0                	jmp    10002074 <ssfn_render+0xd15>
100020b4:	31 c0                	xor    eax,eax
100020b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
100020ba:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100020be:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
100020c4:	40                   	inc    eax
100020c5:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
100020c9:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
100020cd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
100020d1:	7d e3                	jge    100020b6 <ssfn_render+0xd57>
100020d3:	eb d1                	jmp    100020a6 <ssfn_render+0xd47>
100020d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100020d9:	47                   	inc    edi
100020da:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
100020de:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100020e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
100020e6:	e9 45 ff ff ff       	jmp    10002030 <ssfn_render+0xcd1>
100020eb:	b3 fe                	mov    bl,0xfe
100020ed:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
100020f4:	0f 85 21 03 00 00    	jne    1000241b <ssfn_render+0x10bc>
100020fa:	31 c0                	xor    eax,eax
100020fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002100:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
10002105:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10002109:	0f 95 c0             	setne  al
1000210c:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002114:	4f                   	dec    edi
10002115:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10002119:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
10002121:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002125:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000212c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002130:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
10002134:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002138:	31 c0                	xor    eax,eax
1000213a:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
1000213d:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002141:	83 c1 04             	add    ecx,0x4
10002144:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10002148:	0f 8d c0 02 00 00    	jge    1000240e <ssfn_render+0x10af>
1000214e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10002152:	8d 77 01             	lea    esi,[edi+0x1]
10002155:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002159:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
1000215d:	4f                   	dec    edi
1000215e:	be 01 00 00 00       	mov    esi,0x1
10002163:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10002167:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
1000216b:	7e 63                	jle    100021d0 <ssfn_render+0xe71>
1000216d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002171:	b9 01 00 00 00       	mov    ecx,0x1
10002176:	89 ca                	mov    edx,ecx
10002178:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
1000217c:	7e 45                	jle    100021c3 <ssfn_render+0xe64>
1000217e:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10002184:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
10002189:	75 34                	jne    100021bf <ssfn_render+0xe60>
1000218b:	89 c7                	mov    edi,eax
1000218d:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10002191:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
10002195:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
10002199:	74 0c                	je     100021a7 <ssfn_render+0xe48>
1000219b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000219f:	01 d7                	add    edi,edx
100021a1:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
100021a5:	75 18                	jne    100021bf <ssfn_render+0xe60>
100021a7:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100021ab:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
100021af:	74 06                	je     100021b7 <ssfn_render+0xe58>
100021b1:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
100021b5:	75 08                	jne    100021bf <ssfn_render+0xe60>
100021b7:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
100021bb:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
100021bf:	41                   	inc    ecx
100021c0:	40                   	inc    eax
100021c1:	eb b3                	jmp    10002176 <ssfn_render+0xe17>
100021c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100021c7:	46                   	inc    esi
100021c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
100021cc:	b0 01                	mov    al,0x1
100021ce:	eb 97                	jmp    10002167 <ssfn_render+0xe08>
100021d0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100021d4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
100021d8:	bb 01 00 00 00       	mov    ebx,0x1
100021dd:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
100021e1:	7e 3d                	jle    10002220 <ssfn_render+0xec1>
100021e3:	b8 01 00 00 00       	mov    eax,0x1
100021e8:	89 c2                	mov    edx,eax
100021ea:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
100021ee:	7e 23                	jle    10002213 <ssfn_render+0xeb4>
100021f0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
100021f4:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
100021fa:	8d 14 07             	lea    edx,[edi+eax*1]
100021fd:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
10002202:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002206:	75 08                	jne    10002210 <ssfn_render+0xeb1>
10002208:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
1000220c:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10002210:	40                   	inc    eax
10002211:	eb d5                	jmp    100021e8 <ssfn_render+0xe89>
10002213:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002217:	43                   	inc    ebx
10002218:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
1000221c:	b0 01                	mov    al,0x1
1000221e:	eb bd                	jmp    100021dd <ssfn_render+0xe7e>
10002220:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
10002223:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002227:	01 c9                	add    ecx,ecx
10002229:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
1000222d:	e9 08 ff ff ff       	jmp    1000213a <ssfn_render+0xddb>
10002232:	b3 fe                	mov    bl,0xfe
10002234:	80 fa 20             	cmp    dl,0x20
10002237:	0f 85 de 01 00 00    	jne    1000241b <ssfn_render+0x10bc>
1000223d:	89 c3                	mov    ebx,eax
1000223f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10002243:	c1 e3 08             	shl    ebx,0x8
10002246:	81 e3 00 1f 00 00    	and    ebx,0x1f00
1000224c:	09 c3                	or     ebx,eax
1000224e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
10002252:	43                   	inc    ebx
10002253:	40                   	inc    eax
10002254:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002258:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
1000225c:	40                   	inc    eax
1000225d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10002261:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002265:	c1 f8 04             	sar    eax,0x4
10002268:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000226c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002270:	c1 f8 04             	sar    eax,0x4
10002273:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002277:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000227b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10002280:	99                   	cdq    
10002281:	f7 fe                	idiv   esi
10002283:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002287:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000228b:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10002290:	99                   	cdq    
10002291:	f7 fe                	idiv   esi
10002293:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10002297:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000229b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100022a1:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100022a5:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
100022a9:	39 d6                	cmp    esi,edx
100022ab:	7d 0b                	jge    100022b8 <ssfn_render+0xf59>
100022ad:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
100022b1:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
100022b5:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
100022b8:	83 c1 04             	add    ecx,0x4
100022bb:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100022c6:	8d 04 19             	lea    eax,[ecx+ebx*1]
100022c9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100022cd:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
100022d1:	72 35                	jb     10002308 <ssfn_render+0xfa9>
100022d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100022d7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100022db:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
100022e0:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
100022e4:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
100022e8:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100022ef:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
100022f3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
100022fb:	31 d2                	xor    edx,edx
100022fd:	31 ff                	xor    edi,edi
100022ff:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
10002303:	e9 cc 00 00 00       	jmp    100023d4 <ssfn_render+0x1075>
10002308:	8a 11                	mov    dl,BYTE PTR [ecx]
1000230a:	89 d0                	mov    eax,edx
1000230c:	83 e0 7f             	and    eax,0x7f
1000230f:	84 d2                	test   dl,dl
10002311:	8d 78 01             	lea    edi,[eax+0x1]
10002314:	78 09                	js     1000231f <ssfn_render+0xfc0>
10002316:	41                   	inc    ecx
10002317:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000231b:	89 ca                	mov    edx,ecx
1000231d:	eb 3d                	jmp    1000235c <ssfn_render+0xffd>
1000231f:	48                   	dec    eax
10002320:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002327:	83 f8 fe             	cmp    eax,0xfffffffe
1000232a:	74 16                	je     10002342 <ssfn_render+0xfe3>
1000232c:	8d 5a 01             	lea    ebx,[edx+0x1]
1000232f:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
10002336:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
10002339:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
10002340:	eb dd                	jmp    1000231f <ssfn_render+0xfc0>
10002342:	83 c1 02             	add    ecx,0x2
10002345:	eb 86                	jmp    100022cd <ssfn_render+0xf6e>
10002347:	42                   	inc    edx
10002348:	8d 73 01             	lea    esi,[ebx+0x1]
1000234b:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10002352:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
10002355:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
1000235c:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
10002360:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
10002367:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
1000236c:	75 d9                	jne    10002347 <ssfn_render+0xfe8>
1000236e:	01 f9                	add    ecx,edi
10002370:	e9 58 ff ff ff       	jmp    100022cd <ssfn_render+0xf6e>
10002375:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002379:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
1000237d:	99                   	cdq    
1000237e:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
10002382:	0f af c8             	imul   ecx,eax
10002385:	31 c0                	xor    eax,eax
10002387:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
1000238c:	74 0e                	je     1000239c <ssfn_render+0x103d>
1000238e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002392:	bb 04 00 00 00       	mov    ebx,0x4
10002397:	29 f8                	sub    eax,edi
10002399:	99                   	cdq    
1000239a:	f7 fb                	idiv   ebx
1000239c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
100023a0:	31 db                	xor    ebx,ebx
100023a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100023a6:	31 f6                	xor    esi,esi
100023a8:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
100023af:	01 c1                	add    ecx,eax
100023b1:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
100023b5:	7f 30                	jg     100023e7 <ssfn_render+0x1088>
100023b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100023bb:	85 c0                	test   eax,eax
100023bd:	79 02                	jns    100023c1 <ssfn_render+0x1062>
100023bf:	31 c0                	xor    eax,eax
100023c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100023c5:	47                   	inc    edi
100023c6:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
100023ca:	b2 01                	mov    dl,0x1
100023cc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
100023d0:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
100023d4:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
100023d8:	7c 9b                	jl     10002375 <ssfn_render+0x1016>
100023da:	84 d2                	test   dl,dl
100023dc:	74 3b                	je     10002419 <ssfn_render+0x10ba>
100023de:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
100023e5:	eb 32                	jmp    10002419 <ssfn_render+0x10ba>
100023e7:	89 d8                	mov    eax,ebx
100023e9:	99                   	cdq    
100023ea:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
100023ee:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
100023f5:	3c ff                	cmp    al,0xff
100023f7:	74 0e                	je     10002407 <ssfn_render+0x10a8>
100023f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100023fd:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002403:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
10002407:	46                   	inc    esi
10002408:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
1000240c:	eb a3                	jmp    100023b1 <ssfn_render+0x1052>
1000240e:	84 c0                	test   al,al
10002410:	74 07                	je     10002419 <ssfn_render+0x10ba>
10002412:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
10002419:	b3 fe                	mov    bl,0xfe
1000241b:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
1000241f:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
10002423:	e9 9f f5 ff ff       	jmp    100019c7 <ssfn_render+0x668>
10002428:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000242e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10002431:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
10002434:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
10002437:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000243d:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
10002441:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
10002445:	89 f0                	mov    eax,esi
10002447:	89 d9                	mov    ecx,ebx
10002449:	43                   	inc    ebx
1000244a:	39 de                	cmp    esi,ebx
1000244c:	7e 08                	jle    10002456 <ssfn_render+0x10f7>
1000244e:	48                   	dec    eax
1000244f:	29 c8                	sub    eax,ecx
10002451:	88 42 07             	mov    BYTE PTR [edx+0x7],al
10002454:	eb 04                	jmp    1000245a <ssfn_render+0x10fb>
10002456:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
1000245a:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
10002462:	0f 84 c9 0c 00 00    	je     10003131 <ssfn_render+0x1dd2>
10002468:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
1000246e:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
10002474:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002478:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
1000247b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
1000247f:	0f ba e0 0c          	bt     eax,0xc
10002483:	72 22                	jb     100024a7 <ssfn_render+0x1148>
10002485:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10002488:	83 e0 0f             	and    eax,0xf
1000248b:	3c 03                	cmp    al,0x3
1000248d:	74 18                	je     100024a7 <ssfn_render+0x1148>
1000248f:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
10002493:	84 c9                	test   cl,cl
10002495:	74 10                	je     100024a7 <ssfn_render+0x1148>
10002497:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
1000249b:	0f af d7             	imul   edx,edi
1000249e:	89 d0                	mov    eax,edx
100024a0:	99                   	cdq    
100024a1:	f7 f9                	idiv   ecx
100024a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100024a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100024ab:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
100024b1:	7d 06                	jge    100024b9 <ssfn_render+0x115a>
100024b3:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
100024b9:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
100024bf:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
100024c3:	0f b7 13             	movzx  edx,WORD PTR [ebx]
100024c6:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
100024cb:	89 d0                	mov    eax,edx
100024cd:	99                   	cdq    
100024ce:	f7 f9                	idiv   ecx
100024d0:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
100024d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100024d8:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
100024db:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
100024df:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
100024e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100024e7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
100024ec:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100024f0:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100024f5:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100024f9:	99                   	cdq    
100024fa:	f7 f9                	idiv   ecx
100024fc:	31 d2                	xor    edx,edx
100024fe:	83 ff 10             	cmp    edi,0x10
10002501:	0f 9f c2             	setg   dl
10002504:	42                   	inc    edx
10002505:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10002509:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
1000250d:	7d 08                	jge    10002517 <ssfn_render+0x11b8>
1000250f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002513:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10002517:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
1000251b:	39 c2                	cmp    edx,eax
1000251d:	7d 04                	jge    10002523 <ssfn_render+0x11c4>
1000251f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002523:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10002528:	74 4c                	je     10002576 <ssfn_render+0x1217>
1000252a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000252e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002533:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002537:	99                   	cdq    
10002538:	f7 f9                	idiv   ecx
1000253a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000253e:	81 e2 00 08 00 00    	and    edx,0x800
10002544:	74 04                	je     1000254a <ssfn_render+0x11eb>
10002546:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000254a:	01 d0                	add    eax,edx
1000254c:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
10002552:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002556:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
1000255a:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
1000255e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002563:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002567:	99                   	cdq    
10002568:	f7 f9                	idiv   ecx
1000256a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000256e:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
10002574:	eb 22                	jmp    10002598 <ssfn_render+0x1239>
10002576:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000257a:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
10002584:	d1 f8                	sar    eax,1
10002586:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
1000258e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002592:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
10002598:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000259f:	8b 18                	mov    ebx,DWORD PTR [eax]
100025a1:	85 db                	test   ebx,ebx
100025a3:	0f 84 2e 09 00 00    	je     10002ed7 <ssfn_render+0x1b78>
100025a9:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
100025ad:	89 d1                	mov    ecx,edx
100025af:	89 d0                	mov    eax,edx
100025b1:	66 c1 f9 0b          	sar    cx,0xb
100025b5:	c1 f8 1f             	sar    eax,0x1f
100025b8:	31 c2                	xor    edx,eax
100025ba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
100025be:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
100025c2:	88 c8                	mov    al,cl
100025c4:	83 e0 10             	and    eax,0x10
100025c7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
100025cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100025cf:	83 c0 40             	add    eax,0x40
100025d2:	c1 f8 06             	sar    eax,0x6
100025d5:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
100025dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100025e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
100025e4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
100025e8:	7d 08                	jge    100025f2 <ssfn_render+0x1293>
100025ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100025ee:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
100025f2:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100025f5:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
100025fd:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002601:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10002609:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
1000260d:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002612:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002616:	99                   	cdq    
10002617:	f7 f9                	idiv   ecx
10002619:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
1000261d:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002624:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10002627:	0f b6 f4             	movzx  esi,ah
1000262a:	89 c2                	mov    edx,eax
1000262c:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
10002630:	c1 ea 10             	shr    edx,0x10
10002633:	0f b6 fa             	movzx  edi,dl
10002636:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
1000263a:	0f b6 f8             	movzx  edi,al
1000263d:	c1 e8 18             	shr    eax,0x18
10002640:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
10002644:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002648:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000264f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10002652:	0f b6 fc             	movzx  edi,ah
10002655:	89 c2                	mov    edx,eax
10002657:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
1000265e:	c1 ea 10             	shr    edx,0x10
10002661:	0f b6 c0             	movzx  eax,al
10002664:	0f b6 f2             	movzx  esi,dl
10002667:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000266e:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
10002675:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002679:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002680:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
10002687:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
1000268b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
1000268f:	0f af c2             	imul   eax,edx
10002692:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002696:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
1000269a:	8d 04 90             	lea    eax,[eax+edx*4]
1000269d:	01 d8                	add    eax,ebx
1000269f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
100026a6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
100026aa:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
100026b1:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
100026b6:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
100026bd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100026c1:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
100026c5:	0f 8d e2 04 00 00    	jge    10002bad <ssfn_render+0x184e>
100026cb:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026d2:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100026d9:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
100026dd:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
100026e1:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
100026e5:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
100026e9:	39 d0                	cmp    eax,edx
100026eb:	0f 8d bc 04 00 00    	jge    10002bad <ssfn_render+0x184e>
100026f1:	85 c0                	test   eax,eax
100026f3:	0f 88 94 04 00 00    	js     10002b8d <ssfn_render+0x182e>
100026f9:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100026ff:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10002703:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10002707:	c1 e1 08             	shl    ecx,0x8
1000270a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10002712:	89 c8                	mov    eax,ecx
10002714:	0f af c3             	imul   eax,ebx
10002717:	99                   	cdq    
10002718:	f7 fe                	idiv   esi
1000271a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002721:	c1 f8 08             	sar    eax,0x8
10002724:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
1000272b:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002731:	0f af c3             	imul   eax,ebx
10002734:	99                   	cdq    
10002735:	f7 fe                	idiv   esi
10002737:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
1000273b:	c1 f8 08             	sar    eax,0x8
1000273e:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
10002745:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002749:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
10002750:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
10002757:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000275e:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002762:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002766:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
1000276a:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
1000276e:	0f 8d 19 04 00 00    	jge    10002b8d <ssfn_render+0x182e>
10002774:	85 c0                	test   eax,eax
10002776:	0f 88 ff 03 00 00    	js     10002b7b <ssfn_render+0x181c>
1000277c:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002783:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
10002787:	75 42                	jne    100027cb <ssfn_render+0x146c>
10002789:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000278d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002794:	b9 10 00 00 00       	mov    ecx,0x10
10002799:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
1000279c:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
100027a3:	89 c2                	mov    edx,eax
100027a5:	0f b6 fc             	movzx  edi,ah
100027a8:	d3 ea                	shr    edx,cl
100027aa:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
100027b1:	0f b6 f2             	movzx  esi,dl
100027b4:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
100027b8:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100027bf:	d3 e8                	shr    eax,cl
100027c1:	0f b6 c0             	movzx  eax,al
100027c4:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100027cb:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100027d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100027d5:	0f b7 18             	movzx  ebx,WORD PTR [eax]
100027d8:	c1 e1 08             	shl    ecx,0x8
100027db:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
100027df:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
100027e7:	89 c8                	mov    eax,ecx
100027e9:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
100027f1:	0f af c3             	imul   eax,ebx
100027f4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
100027fc:	99                   	cdq    
100027fd:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10002805:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002809:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10002811:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
10002818:	c1 f8 08             	sar    eax,0x8
1000281b:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10002822:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002828:	0f af c3             	imul   eax,ebx
1000282b:	99                   	cdq    
1000282c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002830:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002834:	c1 f8 08             	sar    eax,0x8
10002837:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
1000283e:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
10002845:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002849:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
1000284d:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
10002851:	0f 8d 3b 02 00 00    	jge    10002a92 <ssfn_render+0x1733>
10002857:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
1000285b:	c1 fa 08             	sar    edx,0x8
1000285e:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
10002865:	75 25                	jne    1000288c <ssfn_render+0x152d>
10002867:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
1000286c:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
10002873:	b8 00 01 00 00       	mov    eax,0x100
10002878:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
10002880:	29 c8                	sub    eax,ecx
10002882:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10002886:	39 c7                	cmp    edi,eax
10002888:	7e 1c                	jle    100028a6 <ssfn_render+0x1547>
1000288a:	eb 16                	jmp    100028a2 <ssfn_render+0x1543>
1000288c:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
10002894:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
1000289b:	75 09                	jne    100028a6 <ssfn_render+0x1547>
1000289d:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
100028a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100028a6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
100028aa:	0f b7 00             	movzx  eax,WORD PTR [eax]
100028ad:	0f af c2             	imul   eax,edx
100028b0:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
100028b7:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
100028bc:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
100028c1:	c1 f8 08             	sar    eax,0x8
100028c4:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
100028cb:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
100028d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100028d6:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
100028da:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
100028de:	0f 8d a1 01 00 00    	jge    10002a85 <ssfn_render+0x1726>
100028e4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100028e8:	c1 f8 08             	sar    eax,0x8
100028eb:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
100028f2:	75 3b                	jne    1000292f <ssfn_render+0x15d0>
100028f4:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
100028f9:	ba 00 01 00 00       	mov    edx,0x100
100028fe:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
10002906:	29 ca                	sub    edx,ecx
10002908:	89 f1                	mov    ecx,esi
1000290a:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
10002911:	39 d1                	cmp    ecx,edx
10002913:	7c 0e                	jl     10002923 <ssfn_render+0x15c4>
10002915:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002919:	81 fa 00 01 00 00    	cmp    edx,0x100
1000291f:	74 22                	je     10002943 <ssfn_render+0x15e4>
10002921:	89 d1                	mov    ecx,edx
10002923:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
10002928:	89 cf                	mov    edi,ecx
1000292a:	c1 ff 08             	sar    edi,0x8
1000292d:	eb 14                	jmp    10002943 <ssfn_render+0x15e4>
1000292f:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
10002936:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
1000293d:	74 04                	je     10002943 <ssfn_render+0x15e4>
1000293f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002943:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
10002947:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
1000294b:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
10002952:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
10002957:	81 fa ff 00 00 00    	cmp    edx,0xff
1000295d:	75 37                	jne    10002996 <ssfn_render+0x1637>
1000295f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10002966:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
1000296e:	0f af c7             	imul   eax,edi
10002971:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002975:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
1000297c:	0f af c7             	imul   eax,edi
1000297f:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002983:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
1000298a:	0f af c7             	imul   eax,edi
1000298d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002991:	e9 e2 00 00 00       	jmp    10002a78 <ssfn_render+0x1719>
10002996:	81 fa fe 00 00 00    	cmp    edx,0xfe
1000299c:	74 2d                	je     100029cb <ssfn_render+0x166c>
1000299e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100029a1:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
100029a4:	85 c9                	test   ecx,ecx
100029a6:	74 23                	je     100029cb <ssfn_render+0x166c>
100029a8:	01 c8                	add    eax,ecx
100029aa:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
100029ad:	89 d9                	mov    ecx,ebx
100029af:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
100029b6:	c1 e9 10             	shr    ecx,0x10
100029b9:	0f b6 f7             	movzx  esi,bh
100029bc:	0f b6 c1             	movzx  eax,cl
100029bf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100029c3:	0f b6 c3             	movzx  eax,bl
100029c6:	c1 eb 18             	shr    ebx,0x18
100029c9:	eb 14                	jmp    100029df <ssfn_render+0x1680>
100029cb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100029cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100029d3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100029d7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
100029db:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100029df:	81 fb ff 00 00 00    	cmp    ebx,0xff
100029e5:	75 25                	jne    10002a0c <ssfn_render+0x16ad>
100029e7:	0f af c7             	imul   eax,edi
100029ea:	0f af f7             	imul   esi,edi
100029ed:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
100029f1:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
100029f5:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
100029fb:	0f af cf             	imul   ecx,edi
100029fe:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
10002a02:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
10002a06:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
10002a0a:	eb 6c                	jmp    10002a78 <ssfn_render+0x1719>
10002a0c:	0f af f3             	imul   esi,ebx
10002a0f:	0f af c3             	imul   eax,ebx
10002a12:	b9 ff 00 00 00       	mov    ecx,0xff
10002a17:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
10002a1e:	29 d9                	sub    ecx,ebx
10002a20:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
10002a24:	0f af d1             	imul   edx,ecx
10002a27:	b9 ff 00 00 00       	mov    ecx,0xff
10002a2c:	01 d0                	add    eax,edx
10002a2e:	0f af c7             	imul   eax,edi
10002a31:	99                   	cdq    
10002a32:	f7 f9                	idiv   ecx
10002a34:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002a38:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a3c:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
10002a44:	01 f0                	add    eax,esi
10002a46:	89 ce                	mov    esi,ecx
10002a48:	0f af c7             	imul   eax,edi
10002a4b:	99                   	cdq    
10002a4c:	f7 f9                	idiv   ecx
10002a4e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002a52:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002a56:	0f af cb             	imul   ecx,ebx
10002a59:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10002a5d:	0f af df             	imul   ebx,edi
10002a60:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
10002a68:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
10002a6c:	01 c8                	add    eax,ecx
10002a6e:	0f af c7             	imul   eax,edi
10002a71:	99                   	cdq    
10002a72:	f7 fe                	idiv   esi
10002a74:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002a78:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
10002a80:	e9 51 fe ff ff       	jmp    100028d6 <ssfn_render+0x1577>
10002a85:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
10002a8d:	e9 b7 fd ff ff       	jmp    10002849 <ssfn_render+0x14ea>
10002a92:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002a97:	74 30                	je     10002ac9 <ssfn_render+0x176a>
10002a99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002a9d:	31 d2                	xor    edx,edx
10002a9f:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002aa3:	31 d2                	xor    edx,edx
10002aa5:	89 c1                	mov    ecx,eax
10002aa7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002aab:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002aaf:	31 d2                	xor    edx,edx
10002ab1:	89 c6                	mov    esi,eax
10002ab3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002ab7:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002abb:	31 d2                	xor    edx,edx
10002abd:	89 c3                	mov    ebx,eax
10002abf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002ac3:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002ac7:	eb 1c                	jmp    10002ae5 <ssfn_render+0x1786>
10002ac9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002acd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002ad1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002ad5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002ad9:	c1 e9 08             	shr    ecx,0x8
10002adc:	c1 ee 08             	shr    esi,0x8
10002adf:	c1 eb 08             	shr    ebx,0x8
10002ae2:	c1 e8 08             	shr    eax,0x8
10002ae5:	83 f8 0f             	cmp    eax,0xf
10002ae8:	0f 86 8d 00 00 00    	jbe    10002b7b <ssfn_render+0x181c>
10002aee:	89 ca                	mov    edx,ecx
10002af0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002af6:	76 05                	jbe    10002afd <ssfn_render+0x179e>
10002af8:	ba ff 00 00 00       	mov    edx,0xff
10002afd:	b9 10 00 00 00       	mov    ecx,0x10
10002b02:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002b09:	d3 e2                	shl    edx,cl
10002b0b:	3d ff 00 00 00       	cmp    eax,0xff
10002b10:	89 d1                	mov    ecx,edx
10002b12:	76 05                	jbe    10002b19 <ssfn_render+0x17ba>
10002b14:	b8 ff 00 00 00       	mov    eax,0xff
10002b19:	c1 e0 18             	shl    eax,0x18
10002b1c:	09 c8                	or     eax,ecx
10002b1e:	81 fe ff 00 00 00    	cmp    esi,0xff
10002b24:	76 05                	jbe    10002b2b <ssfn_render+0x17cc>
10002b26:	be ff 00 00 00       	mov    esi,0xff
10002b2b:	c1 e6 08             	shl    esi,0x8
10002b2e:	09 f0                	or     eax,esi
10002b30:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002b36:	76 05                	jbe    10002b3d <ssfn_render+0x17de>
10002b38:	bb ff 00 00 00       	mov    ebx,0xff
10002b3d:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002b41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002b45:	d3 e3                	shl    ebx,cl
10002b47:	09 c3                	or     ebx,eax
10002b49:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002b50:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002b53:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002b57:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002b5b:	75 1e                	jne    10002b7b <ssfn_render+0x181c>
10002b5d:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002b64:	7e 07                	jle    10002b6d <ssfn_render+0x180e>
10002b66:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002b6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002b71:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002b75:	7d 04                	jge    10002b7b <ssfn_render+0x181c>
10002b77:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002b7b:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002b83:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002b87:	0f 85 ca fb ff ff    	jne    10002757 <ssfn_render+0x13f8>
10002b8d:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002b94:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002b98:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002b9c:	25 fc ff 00 00       	and    eax,0xfffc
10002ba1:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002ba8:	e9 10 fb ff ff       	jmp    100026bd <ssfn_render+0x135e>
10002bad:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002bb4:	0f 84 90 01 00 00    	je     10002d4a <ssfn_render+0x19eb>
10002bba:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002bc2:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002bc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002bcd:	40                   	inc    eax
10002bce:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002bd2:	29 c7                	sub    edi,eax
10002bd4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002bd8:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002bdc:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002be0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002be4:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002be8:	7e 09                	jle    10002bf3 <ssfn_render+0x1894>
10002bea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002bee:	40                   	inc    eax
10002bef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002bf3:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002bfa:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c01:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002c05:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002c09:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002c0d:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002c11:	0f af c2             	imul   eax,edx
10002c14:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002c18:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002c1c:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002c20:	03 07                	add    eax,DWORD PTR [edi]
10002c22:	89 c7                	mov    edi,eax
10002c24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002c28:	c1 e0 18             	shl    eax,0x18
10002c2b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002c2f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002c33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002c37:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002c3c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002c40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002c44:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002c48:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002c4c:	0f 8e f8 00 00 00    	jle    10002d4a <ssfn_render+0x19eb>
10002c52:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c59:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002c60:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002c64:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002c68:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002c6c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002c70:	39 d0                	cmp    eax,edx
10002c72:	0f 8d d2 00 00 00    	jge    10002d4a <ssfn_render+0x19eb>
10002c78:	31 db                	xor    ebx,ebx
10002c7a:	85 c0                	test   eax,eax
10002c7c:	79 23                	jns    10002ca1 <ssfn_render+0x1942>
10002c7e:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c85:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002c89:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002c8d:	25 fc ff 00 00       	and    eax,0xfffc
10002c92:	01 c7                	add    edi,eax
10002c94:	eb aa                	jmp    10002c40 <ssfn_render+0x18e1>
10002c96:	85 c0                	test   eax,eax
10002c98:	79 20                	jns    10002cba <ssfn_render+0x195b>
10002c9a:	43                   	inc    ebx
10002c9b:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002c9f:	7c dd                	jl     10002c7e <ssfn_render+0x191f>
10002ca1:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ca8:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002cac:	01 d8                	add    eax,ebx
10002cae:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002cb2:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002cb6:	7c de                	jl     10002c96 <ssfn_render+0x1937>
10002cb8:	eb c4                	jmp    10002c7e <ssfn_render+0x191f>
10002cba:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002cbe:	7e 06                	jle    10002cc6 <ssfn_render+0x1967>
10002cc0:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002cc4:	7f d4                	jg     10002c9a <ssfn_render+0x193b>
10002cc6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002cc9:	b8 10 00 00 00       	mov    eax,0x10
10002cce:	0f b6 f6             	movzx  esi,dh
10002cd1:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002cd5:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002cd9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002cdd:	89 d0                	mov    eax,edx
10002cdf:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002ce3:	d3 e8                	shr    eax,cl
10002ce5:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002ce9:	0f b6 c0             	movzx  eax,al
10002cec:	d3 ea                	shr    edx,cl
10002cee:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002cf2:	0f b6 f2             	movzx  esi,dl
10002cf5:	29 c1                	sub    ecx,eax
10002cf7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002cfb:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002d00:	29 f2                	sub    edx,esi
10002d02:	c1 f9 08             	sar    ecx,0x8
10002d05:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002d0a:	01 c8                	add    eax,ecx
10002d0c:	c1 fa 08             	sar    edx,0x8
10002d0f:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002d13:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002d17:	d3 e0                	shl    eax,cl
10002d19:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002d1d:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002d21:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002d25:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002d29:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002d2e:	d3 e6                	shl    esi,cl
10002d30:	c1 fa 08             	sar    edx,0x8
10002d33:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002d37:	c1 e2 08             	shl    edx,0x8
10002d3a:	09 d0                	or     eax,edx
10002d3c:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002d40:	09 c6                	or     esi,eax
10002d42:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002d45:	e9 50 ff ff ff       	jmp    10002c9a <ssfn_render+0x193b>
10002d4a:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002d51:	0f 84 80 01 00 00    	je     10002ed7 <ssfn_render+0x1b78>
10002d57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002d5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002d5f:	d1 fa                	sar    edx,1
10002d61:	40                   	inc    eax
10002d62:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002d66:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d6a:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002d6e:	7e 09                	jle    10002d79 <ssfn_render+0x1a1a>
10002d70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002d74:	40                   	inc    eax
10002d75:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002d79:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002d80:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d87:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002d8b:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002d8f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002d93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002d97:	01 d0                	add    eax,edx
10002d99:	0f af c1             	imul   eax,ecx
10002d9c:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002da0:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002da4:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002da8:	03 03                	add    eax,DWORD PTR [ebx]
10002daa:	89 c7                	mov    edi,eax
10002dac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002db0:	c1 e0 18             	shl    eax,0x18
10002db3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002db7:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002dbf:	01 d0                	add    eax,edx
10002dc1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002dc5:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002dca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002dce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002dd2:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002dd6:	0f 8e fb 00 00 00    	jle    10002ed7 <ssfn_render+0x1b78>
10002ddc:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002de3:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002de7:	01 d8                	add    eax,ebx
10002de9:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002df0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002df4:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002df8:	39 d0                	cmp    eax,edx
10002dfa:	0f 8d d7 00 00 00    	jge    10002ed7 <ssfn_render+0x1b78>
10002e00:	31 f6                	xor    esi,esi
10002e02:	85 c0                	test   eax,eax
10002e04:	0f 89 ad 00 00 00    	jns    10002eb7 <ssfn_render+0x1b58>
10002e0a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e11:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002e15:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002e19:	25 fc ff 00 00       	and    eax,0xfffc
10002e1e:	01 c7                	add    edi,eax
10002e20:	eb ac                	jmp    10002dce <ssfn_render+0x1a6f>
10002e22:	85 c0                	test   eax,eax
10002e24:	0f 88 82 00 00 00    	js     10002eac <ssfn_render+0x1b4d>
10002e2a:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002e2d:	b8 10 00 00 00       	mov    eax,0x10
10002e32:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002e36:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002e3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002e3e:	89 d8                	mov    eax,ebx
10002e40:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002e44:	d3 e8                	shr    eax,cl
10002e46:	0f b6 cf             	movzx  ecx,bh
10002e49:	0f b6 c0             	movzx  eax,al
10002e4c:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002e50:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e54:	d3 eb                	shr    ebx,cl
10002e56:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002e5a:	0f b6 db             	movzx  ebx,bl
10002e5d:	29 c1                	sub    ecx,eax
10002e5f:	29 da                	sub    edx,ebx
10002e61:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002e66:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e6b:	c1 f9 08             	sar    ecx,0x8
10002e6e:	c1 fa 08             	sar    edx,0x8
10002e71:	01 c8                	add    eax,ecx
10002e73:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002e77:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002e7b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002e7f:	d3 e0                	shl    eax,cl
10002e81:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002e85:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002e89:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e8e:	c1 fa 08             	sar    edx,0x8
10002e91:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10002e95:	c1 e2 08             	shl    edx,0x8
10002e98:	09 d0                	or     eax,edx
10002e9a:	8d 14 19             	lea    edx,[ecx+ebx*1]
10002e9d:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10002ea1:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002ea5:	d3 e2                	shl    edx,cl
10002ea7:	09 c2                	or     edx,eax
10002ea9:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10002eac:	46                   	inc    esi
10002ead:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002eb1:	0f 8c 53 ff ff ff    	jl     10002e0a <ssfn_render+0x1aab>
10002eb7:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ebe:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002ec2:	01 f0                	add    eax,esi
10002ec4:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002ec8:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002ecc:	0f 8c 50 ff ff ff    	jl     10002e22 <ssfn_render+0x1ac3>
10002ed2:	e9 33 ff ff ff       	jmp    10002e0a <ssfn_render+0x1aab>
10002ed7:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10002ede:	74 04                	je     10002ee4 <ssfn_render+0x1b85>
10002ee0:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10002ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002ee8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002eec:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10002ef2:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ef9:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10002efd:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002f04:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f07:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002f0b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002f11:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10002f15:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002f1a:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002f1e:	99                   	cdq    
10002f1f:	f7 f9                	idiv   ecx
10002f21:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10002f25:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002f2b:	25 80 00 00 00       	and    eax,0x80
10002f30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002f34:	0f 85 f7 01 00 00    	jne    10003131 <ssfn_render+0x1dd2>
10002f3a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f3d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10002f41:	0f 84 ea 01 00 00    	je     10003131 <ssfn_render+0x1dd2>
10002f47:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
10002f4e:	83 ec 0c             	sub    esp,0xc
10002f51:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
10002f58:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10002f5f:	51                   	push   ecx
10002f60:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
10002f67:	e8 53 d9 ff ff       	call   100008bf <_ssfn_c>
10002f6c:	83 c4 10             	add    esp,0x10
10002f6f:	85 c0                	test   eax,eax
10002f71:	0f 84 ba 01 00 00    	je     10003131 <ssfn_render+0x1dd2>
10002f77:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
10002f7f:	0f 86 ac 01 00 00    	jbe    10003131 <ssfn_render+0x1dd2>
10002f85:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002f8b:	8d 48 06             	lea    ecx,[eax+0x6]
10002f8e:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002f94:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10002f98:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10002f9c:	0f 8e 8f 01 00 00    	jle    10003131 <ssfn_render+0x1dd2>
10002fa2:	8a 19                	mov    bl,BYTE PTR [ecx]
10002fa4:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10002fa8:	8a 18                	mov    bl,BYTE PTR [eax]
10002faa:	83 e3 40             	and    ebx,0x40
10002fad:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10002fb2:	75 14                	jne    10002fc8 <ssfn_render+0x1c69>
10002fb4:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10002fb8:	75 0e                	jne    10002fc8 <ssfn_render+0x1c69>
10002fba:	80 fb 01             	cmp    bl,0x1
10002fbd:	19 c0                	sbb    eax,eax
10002fbf:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10002fc3:	e9 60 01 00 00       	jmp    10003128 <ssfn_render+0x1dc9>
10002fc8:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10002fcc:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10002fd0:	c1 e6 10             	shl    esi,0x10
10002fd3:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10002fd7:	84 db                	test   bl,bl
10002fd9:	74 08                	je     10002fe3 <ssfn_render+0x1c84>
10002fdb:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10002fde:	83 c1 06             	add    ecx,0x6
10002fe1:	eb 0c                	jmp    10002fef <ssfn_render+0x1c90>
10002fe3:	c1 e2 08             	shl    edx,0x8
10002fe6:	83 c1 05             	add    ecx,0x5
10002fe9:	89 d0                	mov    eax,edx
10002feb:	09 f0                	or     eax,esi
10002fed:	09 c7                	or     edi,eax
10002fef:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002ff2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002ff6:	01 f8                	add    eax,edi
10002ff8:	8a 10                	mov    dl,BYTE PTR [eax]
10002ffa:	88 d3                	mov    bl,dl
10002ffc:	83 e3 e0             	and    ebx,0xffffffe0
10002fff:	80 fb c0             	cmp    bl,0xc0
10003002:	0f 85 20 01 00 00    	jne    10003128 <ssfn_render+0x1dc9>
10003008:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
1000300c:	c1 e2 08             	shl    edx,0x8
1000300f:	83 c0 02             	add    eax,0x2
10003012:	81 e2 00 1f 00 00    	and    edx,0x1f00
10003018:	09 da                	or     edx,ebx
1000301a:	8d 72 01             	lea    esi,[edx+0x1]
1000301d:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003021:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
10003028:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
1000302c:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10003031:	0f 84 f1 00 00 00    	je     10003128 <ssfn_render+0x1dc9>
10003037:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000303b:	0f b7 10             	movzx  edx,WORD PTR [eax]
1000303e:	c1 e3 10             	shl    ebx,0x10
10003041:	81 e3 00 00 0f 00    	and    ebx,0xf0000
10003047:	09 d3                	or     ebx,edx
10003049:	39 de                	cmp    esi,ebx
1000304b:	0f 82 cf 00 00 00    	jb     10003120 <ssfn_render+0x1dc1>
10003051:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
10003054:	89 d7                	mov    edi,edx
10003056:	c1 e7 10             	shl    edi,0x10
10003059:	81 e7 00 00 0f 00    	and    edi,0xf0000
1000305f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10003063:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
10003067:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
1000306b:	39 fe                	cmp    esi,edi
1000306d:	0f 87 ad 00 00 00    	ja     10003120 <ssfn_render+0x1dc1>
10003073:	29 de                	sub    esi,ebx
10003075:	c0 ea 04             	shr    dl,0x4
10003078:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
1000307f:	0f b6 d2             	movzx  edx,dl
10003082:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10003086:	89 d3                	mov    ebx,edx
10003088:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
1000308c:	c1 e3 10             	shl    ebx,0x10
1000308f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10003092:	09 da                	or     edx,ebx
10003094:	c0 e8 04             	shr    al,0x4
10003097:	c1 e0 18             	shl    eax,0x18
1000309a:	09 c2                	or     edx,eax
1000309c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100030a0:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
100030a3:	01 c2                	add    edx,eax
100030a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100030a8:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
100030ac:	39 d7                	cmp    edi,edx
100030ae:	76 78                	jbe    10003128 <ssfn_render+0x1dc9>
100030b0:	8a 1a                	mov    bl,BYTE PTR [edx]
100030b2:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
100030b9:	89 de                	mov    esi,ebx
100030bb:	83 e6 7f             	and    esi,0x7f
100030be:	39 c6                	cmp    esi,eax
100030c0:	73 1d                	jae    100030df <ssfn_render+0x1d80>
100030c2:	48                   	dec    eax
100030c3:	bb 02 00 00 00       	mov    ebx,0x2
100030c8:	29 f0                	sub    eax,esi
100030ca:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
100030d1:	0f b6 02             	movzx  eax,BYTE PTR [edx]
100030d4:	84 c0                	test   al,al
100030d6:	78 03                	js     100030db <ssfn_render+0x1d7c>
100030d8:	8d 58 02             	lea    ebx,[eax+0x2]
100030db:	01 da                	add    edx,ebx
100030dd:	eb cd                	jmp    100030ac <ssfn_render+0x1d4d>
100030df:	be 01 00 00 00       	mov    esi,0x1
100030e4:	84 db                	test   bl,bl
100030e6:	78 03                	js     100030eb <ssfn_render+0x1d8c>
100030e8:	8d 70 01             	lea    esi,[eax+0x1]
100030eb:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
100030ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100030f3:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100030f8:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
100030fc:	99                   	cdq    
100030fd:	f7 fb                	idiv   ebx
100030ff:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10003104:	74 0d                	je     10003113 <ssfn_render+0x1db4>
10003106:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000310d:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10003111:	eb 15                	jmp    10003128 <ssfn_render+0x1dc9>
10003113:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
1000311a:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
1000311e:	eb 08                	jmp    10003128 <ssfn_render+0x1dc9>
10003120:	83 c0 08             	add    eax,0x8
10003123:	e9 00 ff ff ff       	jmp    10003028 <ssfn_render+0x1cc9>
10003128:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
1000312c:	e9 5d fe ff ff       	jmp    10002f8e <ssfn_render+0x1c2f>
10003131:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
10003138:	eb 73                	jmp    100031ad <ssfn_render+0x1e4e>
1000313a:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10003145:	e9 50 e4 ff ff       	jmp    1000159a <ssfn_render+0x23b>
1000314a:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10003151:	57                   	push   edi
10003152:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10003159:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10003160:	e8 5a d7 ff ff       	call   100008bf <_ssfn_c>
10003165:	5f                   	pop    edi
10003166:	85 c0                	test   eax,eax
10003168:	0f 84 25 e4 ff ff    	je     10001593 <ssfn_render+0x234>
1000316e:	e9 a2 e4 ff ff       	jmp    10001615 <ssfn_render+0x2b6>
10003173:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10003176:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
1000317a:	75 0c                	jne    10003188 <ssfn_render+0x1e29>
1000317c:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10003183:	e9 3b e4 ff ff       	jmp    100015c3 <ssfn_render+0x264>
10003188:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
1000318f:	57                   	push   edi
10003190:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10003197:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000319e:	e8 1c d7 ff ff       	call   100008bf <_ssfn_c>
100031a3:	59                   	pop    ecx
100031a4:	85 c0                	test   eax,eax
100031a6:	74 d4                	je     1000317c <ssfn_render+0x1e1d>
100031a8:	e9 68 e4 ff ff       	jmp    10001615 <ssfn_render+0x2b6>
100031ad:	81 c4 dc 05 01 00    	add    esp,0x105dc
100031b3:	89 c8                	mov    eax,ecx
100031b5:	5b                   	pop    ebx
100031b6:	5e                   	pop    esi
100031b7:	5f                   	pop    edi
100031b8:	5d                   	pop    ebp
100031b9:	c3                   	ret    

100031ba <ssfn_bbox>:
100031ba:	55                   	push   ebp
100031bb:	57                   	push   edi
100031bc:	56                   	push   esi
100031bd:	53                   	push   ebx
100031be:	83 ec 3c             	sub    esp,0x3c
100031c1:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
100031c6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
100031ca:	0f 94 c0             	sete   al
100031cd:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
100031d2:	0f 94 c2             	sete   dl
100031d5:	09 d0                	or     eax,edx
100031d7:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
100031dc:	0f 94 c2             	sete   dl
100031df:	09 d0                	or     eax,edx
100031e1:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
100031e6:	0f 94 c2             	sete   dl
100031e9:	09 d0                	or     eax,edx
100031eb:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
100031f0:	0f 94 c2             	sete   dl
100031f3:	08 d0                	or     al,dl
100031f5:	0f 85 7c 01 00 00    	jne    10003377 <ssfn_bbox+0x1bd>
100031fb:	85 db                	test   ebx,ebx
100031fd:	0f 84 74 01 00 00    	je     10003377 <ssfn_bbox+0x1bd>
10003203:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003207:	31 f6                	xor    esi,esi
10003209:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000320f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003213:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003219:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
1000321d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003223:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003227:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000322d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10003231:	80 38 00             	cmp    BYTE PTR [eax],0x0
10003234:	0f 84 42 01 00 00    	je     1000337c <ssfn_bbox+0x1c2>
1000323a:	8d 54 24 18          	lea    edx,[esp+0x18]
1000323e:	b9 06 00 00 00       	mov    ecx,0x6
10003243:	89 d7                	mov    edi,edx
10003245:	89 f0                	mov    eax,esi
10003247:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10003251:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003253:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
1000325b:	31 ff                	xor    edi,edi
1000325d:	bd 01 00 00 00       	mov    ebp,0x1
10003262:	50                   	push   eax
10003263:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10003267:	8d 44 24 20          	lea    eax,[esp+0x20]
1000326b:	50                   	push   eax
1000326c:	53                   	push   ebx
1000326d:	e8 fc ff ff ff       	call   1000326e <ssfn_bbox+0xb4>	1000326e: R_386_PC32	ssfn_render
10003272:	83 c4 10             	add    esp,0x10
10003275:	89 c6                	mov    esi,eax
10003277:	85 c0                	test   eax,eax
10003279:	74 6f                	je     100032ea <ssfn_bbox+0x130>
1000327b:	0f 88 fb 00 00 00    	js     1000337c <ssfn_bbox+0x1c2>
10003281:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
10003287:	85 c0                	test   eax,eax
10003289:	0f 84 ed 00 00 00    	je     1000337c <ssfn_bbox+0x1c2>
1000328f:	85 ed                	test   ebp,ebp
10003291:	74 0b                	je     1000329e <ssfn_bbox+0xe4>
10003293:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
10003299:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
1000329e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100032a2:	74 12                	je     100032b6 <ssfn_bbox+0xfc>
100032a4:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
100032aa:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100032ae:	7d 2f                	jge    100032df <ssfn_bbox+0x125>
100032b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100032b4:	eb 29                	jmp    100032df <ssfn_bbox+0x125>
100032b6:	0f b7 08             	movzx  ecx,WORD PTR [eax]
100032b9:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
100032be:	39 cd                	cmp    ebp,ecx
100032c0:	7d 05                	jge    100032c7 <ssfn_bbox+0x10d>
100032c2:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
100032c7:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
100032cb:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
100032d0:	84 d2                	test   dl,dl
100032d2:	75 04                	jne    100032d8 <ssfn_bbox+0x11e>
100032d4:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
100032d8:	01 ca                	add    edx,ecx
100032da:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
100032df:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
100032e3:	31 ed                	xor    ebp,ebp
100032e5:	e9 78 ff ff ff       	jmp    10003262 <ssfn_bbox+0xa8>
100032ea:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
100032f1:	74 23                	je     10003316 <ssfn_bbox+0x15c>
100032f3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
100032f6:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
100032fa:	75 1a                	jne    10003316 <ssfn_bbox+0x15c>
100032fc:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
10003302:	b9 04 00 00 00       	mov    ecx,0x4
10003307:	99                   	cdq    
10003308:	f7 f9                	idiv   ecx
1000330a:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
1000330f:	29 f8                	sub    eax,edi
10003311:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
10003316:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
1000331c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003320:	74 29                	je     1000334b <ssfn_bbox+0x191>
10003322:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003327:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000332b:	89 01                	mov    DWORD PTR [ecx],eax
1000332d:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003331:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
10003337:	89 01                	mov    DWORD PTR [ecx],eax
10003339:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000333d:	89 38                	mov    DWORD PTR [eax],edi
1000333f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003343:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10003347:	89 38                	mov    DWORD PTR [eax],edi
10003349:	eb 31                	jmp    1000337c <ssfn_bbox+0x1c2>
1000334b:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
10003350:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
10003354:	89 07                	mov    DWORD PTR [edi],eax
10003356:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
1000335b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
1000335f:	89 07                	mov    DWORD PTR [edi],eax
10003361:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003365:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000336b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000336f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003375:	eb 05                	jmp    1000337c <ssfn_bbox+0x1c2>
10003377:	be fc ff ff ff       	mov    esi,0xfffffffc
1000337c:	83 c4 3c             	add    esp,0x3c
1000337f:	89 f0                	mov    eax,esi
10003381:	5b                   	pop    ebx
10003382:	5e                   	pop    esi
10003383:	5f                   	pop    edi
10003384:	5d                   	pop    ebp
10003385:	c3                   	ret    

10003386 <ssfn_text>:
10003386:	55                   	push   ebp
10003387:	57                   	push   edi
10003388:	56                   	push   esi
10003389:	53                   	push   ebx
1000338a:	83 ec 1c             	sub    esp,0x1c
1000338d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10003391:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
10003395:	85 f6                	test   esi,esi
10003397:	0f 84 b2 00 00 00    	je     1000344f <ssfn_text+0xc9>
1000339d:	85 ed                	test   ebp,ebp
1000339f:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
100033a4:	0f 84 a5 00 00 00    	je     1000344f <ssfn_text+0xc9>
100033aa:	83 ec 0c             	sub    esp,0xc
100033ad:	6a 18                	push   0x18
100033af:	e8 fc ff ff ff       	call   100033b0 <ssfn_text+0x2a>	100033b0: R_386_PC32	malloc
100033b4:	83 c4 10             	add    esp,0x10
100033b7:	89 c3                	mov    ebx,eax
100033b9:	85 c0                	test   eax,eax
100033bb:	0f 84 8e 00 00 00    	je     1000344f <ssfn_text+0xc9>
100033c1:	31 c0                	xor    eax,eax
100033c3:	b9 06 00 00 00       	mov    ecx,0x6
100033c8:	89 df                	mov    edi,ebx
100033ca:	80 3e 00             	cmp    BYTE PTR [esi],0x0
100033cd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100033cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100033d3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100033d6:	74 79                	je     10003451 <ssfn_text+0xcb>
100033d8:	8d 43 0c             	lea    eax,[ebx+0xc]
100033db:	52                   	push   edx
100033dc:	52                   	push   edx
100033dd:	50                   	push   eax
100033de:	8d 43 0a             	lea    eax,[ebx+0xa]
100033e1:	50                   	push   eax
100033e2:	8d 43 06             	lea    eax,[ebx+0x6]
100033e5:	50                   	push   eax
100033e6:	8d 43 04             	lea    eax,[ebx+0x4]
100033e9:	50                   	push   eax
100033ea:	56                   	push   esi
100033eb:	55                   	push   ebp
100033ec:	e8 fc ff ff ff       	call   100033ed <ssfn_text+0x67>	100033ed: R_386_PC32	ssfn_bbox
100033f1:	83 c4 20             	add    esp,0x20
100033f4:	85 c0                	test   eax,eax
100033f6:	75 59                	jne    10003451 <ssfn_text+0xcb>
100033f8:	83 ec 0c             	sub    esp,0xc
100033fb:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
100033ff:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10003403:	0f af c8             	imul   ecx,eax
10003406:	c1 e1 02             	shl    ecx,0x2
10003409:	51                   	push   ecx
1000340a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000340e:	e8 fc ff ff ff       	call   1000340f <ssfn_text+0x89>	1000340f: R_386_PC32	malloc
10003413:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003417:	89 c7                	mov    edi,eax
10003419:	89 03                	mov    DWORD PTR [ebx],eax
1000341b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
1000341f:	83 c4 10             	add    esp,0x10
10003422:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003424:	50                   	push   eax
10003425:	56                   	push   esi
10003426:	53                   	push   ebx
10003427:	55                   	push   ebp
10003428:	e8 fc ff ff ff       	call   10003429 <ssfn_text+0xa3>	10003429: R_386_PC32	ssfn_render
1000342d:	83 c4 10             	add    esp,0x10
10003430:	85 c0                	test   eax,eax
10003432:	7e 04                	jle    10003438 <ssfn_text+0xb2>
10003434:	01 c6                	add    esi,eax
10003436:	eb ec                	jmp    10003424 <ssfn_text+0x9e>
10003438:	74 17                	je     10003451 <ssfn_text+0xcb>
1000343a:	83 ec 0c             	sub    esp,0xc
1000343d:	ff 33                	push   DWORD PTR [ebx]
1000343f:	e8 fc ff ff ff       	call   10003440 <ssfn_text+0xba>	10003440: R_386_PC32	free
10003444:	89 1c 24             	mov    DWORD PTR [esp],ebx
10003447:	e8 fc ff ff ff       	call   10003448 <ssfn_text+0xc2>	10003448: R_386_PC32	free
1000344c:	83 c4 10             	add    esp,0x10
1000344f:	31 db                	xor    ebx,ebx
10003451:	83 c4 1c             	add    esp,0x1c
10003454:	89 d8                	mov    eax,ebx
10003456:	5b                   	pop    ebx
10003457:	5e                   	pop    esi
10003458:	5f                   	pop    edi
10003459:	5d                   	pop    ebp
1000345a:	c3                   	ret    
1000345b:	90                   	nop

1000345c <NIContext::drvPutpixel4(int, int, unsigned int)>:
1000345c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003460:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003466:	8b 10                	mov    edx,DWORD PTR [eax]
10003468:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000346c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
1000346f:	90                   	nop

10003470 <NIContext::drvDarken4(int, int, int)>:
10003470:	55                   	push   ebp
10003471:	57                   	push   edi
10003472:	56                   	push   esi
10003473:	53                   	push   ebx
10003474:	83 ec 20             	sub    esp,0x20
10003477:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
1000347b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
1000347f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10003483:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
10003487:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
1000348d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10003491:	8b 10                	mov    edx,DWORD PTR [eax]
10003493:	56                   	push   esi
10003494:	53                   	push   ebx
10003495:	50                   	push   eax
10003496:	ff 52 34             	call   DWORD PTR [edx+0x34]
10003499:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000349d:	89 c2                	mov    edx,eax
1000349f:	0f b6 ec             	movzx  ebp,ah
100034a2:	c1 ea 10             	shr    edx,0x10
100034a5:	0f af e9             	imul   ebp,ecx
100034a8:	0f b6 d2             	movzx  edx,dl
100034ab:	0f b6 c0             	movzx  eax,al
100034ae:	0f af d1             	imul   edx,ecx
100034b1:	0f af c1             	imul   eax,ecx
100034b4:	c1 ea 07             	shr    edx,0x7
100034b7:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
100034bd:	c1 e8 07             	shr    eax,0x7
100034c0:	8b 39                	mov    edi,DWORD PTR [ecx]
100034c2:	c1 e2 10             	shl    edx,0x10
100034c5:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
100034c9:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
100034cd:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
100034d1:	c1 ed 07             	shr    ebp,0x7
100034d4:	c1 e5 08             	shl    ebp,0x8
100034d7:	09 ea                	or     edx,ebp
100034d9:	09 c2                	or     edx,eax
100034db:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
100034df:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
100034e2:	83 c4 2c             	add    esp,0x2c
100034e5:	5b                   	pop    ebx
100034e6:	5e                   	pop    esi
100034e7:	5f                   	pop    edi
100034e8:	5d                   	pop    ebp
100034e9:	ff e0                	jmp    eax
100034eb:	90                   	nop

100034ec <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
100034ec:	55                   	push   ebp
100034ed:	b9 00 40 00 00       	mov    ecx,0x4000
100034f2:	57                   	push   edi
100034f3:	b0 ff                	mov    al,0xff
100034f5:	56                   	push   esi
100034f6:	53                   	push   ebx
100034f7:	83 ec 3c             	sub    esp,0x3c
100034fa:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
100034fe:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10003502:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10003505:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
10003509:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000350b:	85 db                	test   ebx,ebx
1000350d:	75 10                	jne    1000351f <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
1000350f:	83 ec 0c             	sub    esp,0xc
10003512:	68 74 50 00 10       	push   0x10005074	10003513: R_386_32	.text
10003517:	e8 fc ff ff ff       	call   10003518 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	10003518: R_386_PC32	KePanic(char const*)
1000351c:	83 c4 10             	add    esp,0x10
1000351f:	50                   	push   eax
10003520:	50                   	push   eax
10003521:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003525:	50                   	push   eax
10003526:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000352a:	50                   	push   eax
1000352b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000352f:	50                   	push   eax
10003530:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003534:	50                   	push   eax
10003535:	56                   	push   esi
10003536:	68 00 00 00 00       	push   0x0	10003537: R_386_32	ssfn_ctx
1000353b:	e8 fc ff ff ff       	call   1000353c <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	1000353c: R_386_PC32	ssfn_bbox
10003540:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003543:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
1000354b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000354f:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
10003557:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000355b:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
10003560:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10003564:	0d 00 00 00 ff       	or     eax,0xff000000
10003569:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000356d:	83 c4 1c             	add    esp,0x1c
10003570:	56                   	push   esi
10003571:	8d 44 24 20          	lea    eax,[esp+0x20]
10003575:	50                   	push   eax
10003576:	68 00 00 00 00       	push   0x0	10003577: R_386_32	ssfn_ctx
1000357b:	e8 fc ff ff ff       	call   1000357c <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	1000357c: R_386_PC32	ssfn_render
10003580:	83 c4 10             	add    esp,0x10
10003583:	89 03                	mov    DWORD PTR [ebx],eax
10003585:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
10003589:	31 db                	xor    ebx,ebx
1000358b:	89 f0                	mov    eax,esi
1000358d:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
10003591:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10003595:	7e 3f                	jle    100035d6 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
10003597:	31 ff                	xor    edi,edi
10003599:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000359e:	39 f8                	cmp    eax,edi
100035a0:	7e 2c                	jle    100035ce <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
100035a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100035a5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
100035a8:	83 f8 ff             	cmp    eax,0xffffffff
100035ab:	74 1d                	je     100035ca <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
100035ad:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
100035b3:	25 ff ff ff 00       	and    eax,0xffffff
100035b8:	8b 0a                	mov    ecx,DWORD PTR [edx]
100035ba:	50                   	push   eax
100035bb:	56                   	push   esi
100035bc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
100035c0:	01 f8                	add    eax,edi
100035c2:	50                   	push   eax
100035c3:	52                   	push   edx
100035c4:	ff 51 24             	call   DWORD PTR [ecx+0x24]
100035c7:	83 c4 10             	add    esp,0x10
100035ca:	43                   	inc    ebx
100035cb:	47                   	inc    edi
100035cc:	eb cb                	jmp    10003599 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
100035ce:	29 c3                	sub    ebx,eax
100035d0:	46                   	inc    esi
100035d1:	83 c3 40             	add    ebx,0x40
100035d4:	eb b5                	jmp    1000358b <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
100035d6:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100035db:	83 c4 3c             	add    esp,0x3c
100035de:	5b                   	pop    ebx
100035df:	5e                   	pop    esi
100035e0:	5f                   	pop    edi
100035e1:	5d                   	pop    ebp
100035e2:	c3                   	ret    
100035e3:	90                   	nop

100035e4 <NIContext::~NIContext()>:
100035e4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	100035e8: R_386_32	ssfn_ctx
100035ec:	e9 00 db ff ff       	jmp    100010f1 <ssfn_free>
100035f1:	90                   	nop

100035f2 <NIContext::NIContext(Video*, int, int, int, int)>:
100035f2:	55                   	push   ebp
100035f3:	ba 00 00 00 00       	mov    edx,0x0	100035f4: R_386_32	ssfn_ctx
100035f8:	57                   	push   edi
100035f9:	b9 72 3d 00 00       	mov    ecx,0x3d72
100035fe:	56                   	push   esi
100035ff:	89 d7                	mov    edi,edx
10003601:	53                   	push   ebx
10003602:	81 ec 48 02 00 00    	sub    esp,0x248
10003608:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
1000360f:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
10003616:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
1000361c:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
10003623:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
10003629:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
10003630:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
10003636:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
1000363d:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
10003643:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
1000364a:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
10003650:	31 c0                	xor    eax,eax
10003652:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003654:	68 00 40 00 00       	push   0x4000
10003659:	e8 fc ff ff ff       	call   1000365a <NIContext::NIContext(Video*, int, int, int, int)+0x68>	1000365a: R_386_PC32	malloc
1000365e:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
10003668:	89 03                	mov    DWORD PTR [ebx],eax
1000366a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10003671:	e8 fc ff ff ff       	call   10003672 <NIContext::NIContext(Video*, int, int, int, int)+0x80>	10003672: R_386_PC32	malloc
10003676:	83 c4 0c             	add    esp,0xc
10003679:	89 c6                	mov    esi,eax
1000367b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000367d: R_386_32	kernelProcess
10003681:	68 8d 50 00 10       	push   0x1000508d	10003682: R_386_32	.text
10003686:	50                   	push   eax
10003687:	e8 fc ff ff ff       	call   10003688 <NIContext::NIContext(Video*, int, int, int, int)+0x96>	10003688: R_386_PC32	Directory::Directory(char const*, Process*)
1000368c:	83 c4 10             	add    esp,0x10
1000368f:	85 f6                	test   esi,esi
10003691:	75 10                	jne    100036a3 <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
10003693:	83 ec 0c             	sub    esp,0xc
10003696:	68 a1 50 00 10       	push   0x100050a1	10003697: R_386_32	.text
1000369b:	e8 fc ff ff ff       	call   1000369c <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	1000369c: R_386_PC32	KePanic(char const*)
100036a0:	83 c4 10             	add    esp,0x10
100036a3:	83 ec 0c             	sub    esp,0xc
100036a6:	56                   	push   esi
100036a7:	e8 fc ff ff ff       	call   100036a8 <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	100036a8: R_386_PC32	Directory::open()
100036ac:	83 c4 10             	add    esp,0x10
100036af:	85 c0                	test   eax,eax
100036b1:	75 e0                	jne    10003693 <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
100036b3:	83 ec 0c             	sub    esp,0xc
100036b6:	8b 06                	mov    eax,DWORD PTR [esi]
100036b8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
100036bc:	51                   	push   ecx
100036bd:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
100036c4:	52                   	push   edx
100036c5:	6a 00                	push   0x0
100036c7:	68 10 01 00 00       	push   0x110
100036cc:	56                   	push   esi
100036cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100036d0:	83 c4 20             	add    esp,0x20
100036d3:	85 c0                	test   eax,eax
100036d5:	0f 85 a0 01 00 00    	jne    1000387b <NIContext::NIContext(Video*, int, int, int, int)+0x289>
100036db:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
100036e3:	0f 85 92 01 00 00    	jne    1000387b <NIContext::NIContext(Video*, int, int, int, int)+0x289>
100036e9:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
100036f0:	83 c9 ff             	or     ecx,0xffffffff
100036f3:	83 ec 0c             	sub    esp,0xc
100036f6:	89 ef                	mov    edi,ebp
100036f8:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
100036fa:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
10003700:	89 ca                	mov    edx,ecx
10003702:	f7 d2                	not    edx
10003704:	52                   	push   edx
10003705:	e8 fc ff ff ff       	call   10003706 <NIContext::NIContext(Video*, int, int, int, int)+0x114>	10003706: R_386_PC32	malloc
1000370a:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
1000370e:	47                   	inc    edi
1000370f:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
10003715:	5a                   	pop    edx
10003716:	59                   	pop    ecx
10003717:	55                   	push   ebp
10003718:	50                   	push   eax
10003719:	e8 fc ff ff ff       	call   1000371a <NIContext::NIContext(Video*, int, int, int, int)+0x128>	1000371a: R_386_PC32	strcpy
1000371e:	5f                   	pop    edi
1000371f:	58                   	pop    eax
10003720:	68 bc 50 00 10       	push   0x100050bc	10003721: R_386_32	.text
10003725:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
10003729:	57                   	push   edi
1000372a:	e8 fc ff ff ff       	call   1000372b <NIContext::NIContext(Video*, int, int, int, int)+0x139>	1000372b: R_386_PC32	strcpy
1000372f:	58                   	pop    eax
10003730:	5a                   	pop    edx
10003731:	55                   	push   ebp
10003732:	57                   	push   edi
10003733:	e8 fc ff ff ff       	call   10003734 <NIContext::NIContext(Video*, int, int, int, int)+0x142>	10003734: R_386_PC32	strcat
10003738:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
1000373f:	e8 fc ff ff ff       	call   10003740 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	10003740: R_386_PC32	malloc
10003744:	83 c4 0c             	add    esp,0xc
10003747:	89 c5                	mov    ebp,eax
10003749:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000374b: R_386_32	kernelProcess
1000374f:	57                   	push   edi
10003750:	50                   	push   eax
10003751:	e8 fc ff ff ff       	call   10003752 <NIContext::NIContext(Video*, int, int, int, int)+0x160>	10003752: R_386_PC32	File::File(char const*, Process*)
10003756:	83 c4 10             	add    esp,0x10
10003759:	85 ed                	test   ebp,ebp
1000375b:	0f 84 52 ff ff ff    	je     100036b3 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
10003761:	50                   	push   eax
10003762:	50                   	push   eax
10003763:	6a 01                	push   0x1
10003765:	55                   	push   ebp
10003766:	e8 fc ff ff ff       	call   10003767 <NIContext::NIContext(Video*, int, int, int, int)+0x175>	10003767: R_386_PC32	File::open(FileOpenMode)
1000376b:	83 c4 10             	add    esp,0x10
1000376e:	85 c0                	test   eax,eax
10003770:	74 0c                	je     1000377e <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
10003772:	83 ec 0c             	sub    esp,0xc
10003775:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003778:	55                   	push   ebp
10003779:	e9 b4 00 00 00       	jmp    10003832 <NIContext::NIContext(Video*, int, int, int, int)+0x240>
1000377e:	50                   	push   eax
1000377f:	8d 44 24 17          	lea    eax,[esp+0x17]
10003783:	50                   	push   eax
10003784:	8d 44 24 20          	lea    eax,[esp+0x20]
10003788:	50                   	push   eax
10003789:	55                   	push   ebp
1000378a:	e8 fc ff ff ff       	call   1000378b <NIContext::NIContext(Video*, int, int, int, int)+0x199>	1000378b: R_386_PC32	File::stat(unsigned long long*, bool*)
1000378f:	83 c4 10             	add    esp,0x10
10003792:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
10003797:	74 0e                	je     100037a7 <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
10003799:	83 ec 0c             	sub    esp,0xc
1000379c:	55                   	push   ebp
1000379d:	e8 fc ff ff ff       	call   1000379e <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	1000379e: R_386_PC32	File::close()
100037a2:	e9 85 00 00 00       	jmp    1000382c <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
100037a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100037ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100037af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100037b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
100037b7:	83 ec 0c             	sub    esp,0xc
100037ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100037be:	e8 fc ff ff ff       	call   100037bf <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	100037bf: R_386_PC32	malloc
100037c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100037c7:	58                   	pop    eax
100037c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037cb:	8d 54 24 20          	lea    edx,[esp+0x20]
100037cf:	52                   	push   edx
100037d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100037d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037dc:	55                   	push   ebp
100037dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100037e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100037e4:	83 c4 1c             	add    esp,0x1c
100037e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100037ef:	68 d1 50 00 10       	push   0x100050d1	100037f0: R_386_32	.text
100037f4:	e8 fc ff ff ff       	call   100037f5 <NIContext::NIContext(Video*, int, int, int, int)+0x203>	100037f5: R_386_PC32	Dbg::kprintf(char const*, ...)
100037f9:	83 c4 10             	add    esp,0x10
100037fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003800:	85 c0                	test   eax,eax
10003802:	75 15                	jne    10003819 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003804:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003808:	89 c1                	mov    ecx,eax
1000380a:	c1 f9 1f             	sar    ecx,0x1f
1000380d:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10003811:	75 06                	jne    10003819 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003813:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10003817:	74 24                	je     1000383d <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
10003819:	83 ec 0c             	sub    esp,0xc
1000381c:	55                   	push   ebp
1000381d:	e8 fc ff ff ff       	call   1000381e <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	1000381e: R_386_PC32	File::close()
10003822:	58                   	pop    eax
10003823:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10003827:	e8 fc ff ff ff       	call   10003828 <NIContext::NIContext(Video*, int, int, int, int)+0x236>	10003828: R_386_PC32	free
1000382c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000382f:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003832:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003835:	83 c4 10             	add    esp,0x10
10003838:	e9 76 fe ff ff       	jmp    100036b3 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
1000383d:	50                   	push   eax
1000383e:	50                   	push   eax
1000383f:	57                   	push   edi
10003840:	68 e5 50 00 10       	push   0x100050e5	10003841: R_386_32	.text
10003845:	e8 fc ff ff ff       	call   10003846 <NIContext::NIContext(Video*, int, int, int, int)+0x254>	10003846: R_386_PC32	Dbg::kprintf(char const*, ...)
1000384a:	5a                   	pop    edx
1000384b:	59                   	pop    ecx
1000384c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10003850:	68 00 00 00 00       	push   0x0	10003851: R_386_32	ssfn_ctx
10003855:	e8 fc ff ff ff       	call   10003856 <NIContext::NIContext(Video*, int, int, int, int)+0x264>	10003856: R_386_PC32	ssfn_load
1000385a:	5b                   	pop    ebx
1000385b:	5f                   	pop    edi
1000385c:	50                   	push   eax
1000385d:	68 f6 50 00 10       	push   0x100050f6	1000385e: R_386_32	.text
10003862:	e8 fc ff ff ff       	call   10003863 <NIContext::NIContext(Video*, int, int, int, int)+0x271>	10003863: R_386_PC32	Dbg::kprintf(char const*, ...)
10003867:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000386a:	e8 fc ff ff ff       	call   1000386b <NIContext::NIContext(Video*, int, int, int, int)+0x279>	1000386b: R_386_PC32	File::close()
1000386f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003872:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003875:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003878:	83 c4 10             	add    esp,0x10
1000387b:	83 ec 0c             	sub    esp,0xc
1000387e:	56                   	push   esi
1000387f:	e8 fc ff ff ff       	call   10003880 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	10003880: R_386_PC32	Directory::close()
10003884:	8b 06                	mov    eax,DWORD PTR [esi]
10003886:	89 34 24             	mov    DWORD PTR [esp],esi
10003889:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000388c:	b8 00 00 00 00       	mov    eax,0x0	1000388d: R_386_32	ssfn_ctx
10003891:	e8 f7 cb ff ff       	call   1000048d <_ssfn_fc.part.1>
10003896:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	10003898: R_386_32	ssfn_ctx
100038a0:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	100038a2: R_386_32	ssfn_ctx
100038aa:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	100038ac: R_386_32	ssfn_ctx
100038b4:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	100038b6: R_386_32	ssfn_ctx
100038be:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	100038c0: R_386_32	ssfn_ctx
100038c8:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	100038ca: R_386_32	ssfn_ctx
100038d2:	81 c4 4c 02 00 00    	add    esp,0x24c
100038d8:	5b                   	pop    ebx
100038d9:	5e                   	pop    esi
100038da:	5f                   	pop    edi
100038db:	5d                   	pop    ebp
100038dc:	c3                   	ret    
100038dd:	90                   	nop

100038de <NiLoadCursors()>:
100038de:	55                   	push   ebp
100038df:	57                   	push   edi
100038e0:	56                   	push   esi
100038e1:	53                   	push   ebx
100038e2:	83 ec 38             	sub    esp,0x38
100038e5:	68 14 01 00 00       	push   0x114
100038ea:	e8 fc ff ff ff       	call   100038eb <NiLoadCursors()+0xd>	100038eb: R_386_PC32	malloc
100038ef:	83 c4 0c             	add    esp,0xc
100038f2:	89 c5                	mov    ebp,eax
100038f4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100038f6: R_386_32	kernelProcess
100038fa:	68 9c 53 00 10       	push   0x1000539c	100038fb: R_386_32	.text
100038ff:	50                   	push   eax
10003900:	e8 fc ff ff ff       	call   10003901 <NiLoadCursors()+0x23>	10003901: R_386_PC32	File::File(char const*, Process*)
10003905:	58                   	pop    eax
10003906:	5a                   	pop    edx
10003907:	6a 01                	push   0x1
10003909:	55                   	push   ebp
1000390a:	e8 fc ff ff ff       	call   1000390b <NiLoadCursors()+0x2d>	1000390b: R_386_PC32	File::open(FileOpenMode)
1000390f:	83 c4 10             	add    esp,0x10
10003912:	85 c0                	test   eax,eax
10003914:	74 0a                	je     10003920 <NiLoadCursors()+0x42>
10003916:	83 ec 0c             	sub    esp,0xc
10003919:	68 bb 53 00 10       	push   0x100053bb	1000391a: R_386_32	.text
1000391e:	eb 4c                	jmp    1000396c <NiLoadCursors()+0x8e>
10003920:	53                   	push   ebx
10003921:	8d 44 24 17          	lea    eax,[esp+0x17]
10003925:	50                   	push   eax
10003926:	8d 44 24 20          	lea    eax,[esp+0x20]
1000392a:	50                   	push   eax
1000392b:	55                   	push   ebp
1000392c:	e8 fc ff ff ff       	call   1000392d <NiLoadCursors()+0x4f>	1000392d: R_386_PC32	File::stat(unsigned long long*, bool*)
10003931:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10003935:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10003939:	89 34 24             	mov    DWORD PTR [esp],esi
1000393c:	e8 fc ff ff ff       	call   1000393d <NiLoadCursors()+0x5f>	1000393d: R_386_PC32	malloc
10003941:	89 c3                	mov    ebx,eax
10003943:	58                   	pop    eax
10003944:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003947:	8d 54 24 20          	lea    edx,[esp+0x20]
1000394b:	52                   	push   edx
1000394c:	53                   	push   ebx
1000394d:	57                   	push   edi
1000394e:	56                   	push   esi
1000394f:	55                   	push   ebp
10003950:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003953:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003957:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
1000395b:	83 c4 20             	add    esp,0x20
1000395e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10003962:	74 12                	je     10003976 <NiLoadCursors()+0x98>
10003964:	83 ec 0c             	sub    esp,0xc
10003967:	68 cf 53 00 10       	push   0x100053cf	10003968: R_386_32	.text
1000396c:	e8 fc ff ff ff       	call   1000396d <NiLoadCursors()+0x8f>	1000396d: R_386_PC32	Dbg::kprintf(char const*, ...)
10003971:	e9 3d 01 00 00       	jmp    10003ab3 <NiLoadCursors()+0x1d5>
10003976:	6a 00                	push   0x0
10003978:	31 ed                	xor    ebp,ebp
1000397a:	68 04 01 00 00       	push   0x104
1000397f:	52                   	push   edx
10003980:	50                   	push   eax
10003981:	e8 fc ff ff ff       	call   10003982 <NiLoadCursors()+0xa4>	10003982: R_386_PC32	__udivdi3
10003986:	5a                   	pop    edx
10003987:	59                   	pop    ecx
10003988:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000398c:	50                   	push   eax
1000398d:	68 e3 53 00 10       	push   0x100053e3	1000398e: R_386_32	.text
10003992:	e8 fc ff ff ff       	call   10003993 <NiLoadCursors()+0xb5>	10003993: R_386_PC32	Dbg::kprintf(char const*, ...)
10003997:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000399a:	e8 fc ff ff ff       	call   1000399b <NiLoadCursors()+0xbd>	1000399b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000399f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100039a3:	8d 04 83             	lea    eax,[ebx+eax*4]
100039a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100039aa:	83 c4 10             	add    esp,0x10
100039ad:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
100039b1:	0f 8d f3 00 00 00    	jge    10003aaa <NiLoadCursors()+0x1cc>
100039b7:	8d 34 ab             	lea    esi,[ebx+ebp*4]
100039ba:	50                   	push   eax
100039bb:	6a 04                	push   0x4
100039bd:	68 f0 53 00 10       	push   0x100053f0	100039be: R_386_32	.text
100039c2:	56                   	push   esi
100039c3:	e8 fc ff ff ff       	call   100039c4 <NiLoadCursors()+0xe6>	100039c4: R_386_PC32	memcmp
100039c8:	83 c4 10             	add    esp,0x10
100039cb:	85 c0                	test   eax,eax
100039cd:	0f 84 b8 00 00 00    	je     10003a8b <NiLoadCursors()+0x1ad>
100039d3:	50                   	push   eax
100039d4:	6a 04                	push   0x4
100039d6:	68 f5 53 00 10       	push   0x100053f5	100039d7: R_386_32	.text
100039db:	56                   	push   esi
100039dc:	e8 fc ff ff ff       	call   100039dd <NiLoadCursors()+0xff>	100039dd: R_386_PC32	memcmp
100039e1:	83 c4 10             	add    esp,0x10
100039e4:	85 c0                	test   eax,eax
100039e6:	74 7b                	je     10003a63 <NiLoadCursors()+0x185>
100039e8:	50                   	push   eax
100039e9:	6a 04                	push   0x4
100039eb:	68 fa 53 00 10       	push   0x100053fa	100039ec: R_386_32	.text
100039f0:	56                   	push   esi
100039f1:	e8 fc ff ff ff       	call   100039f2 <NiLoadCursors()+0x114>	100039f2: R_386_PC32	memcmp
100039f6:	83 c4 10             	add    esp,0x10
100039f9:	85 c0                	test   eax,eax
100039fb:	74 6d                	je     10003a6a <NiLoadCursors()+0x18c>
100039fd:	57                   	push   edi
100039fe:	6a 04                	push   0x4
10003a00:	68 ff 53 00 10       	push   0x100053ff	10003a01: R_386_32	.text
10003a05:	56                   	push   esi
10003a06:	e8 fc ff ff ff       	call   10003a07 <NiLoadCursors()+0x129>	10003a07: R_386_PC32	memcmp
10003a0b:	83 c4 10             	add    esp,0x10
10003a0e:	85 c0                	test   eax,eax
10003a10:	74 5f                	je     10003a71 <NiLoadCursors()+0x193>
10003a12:	51                   	push   ecx
10003a13:	6a 04                	push   0x4
10003a15:	68 04 54 00 10       	push   0x10005404	10003a16: R_386_32	.text
10003a1a:	56                   	push   esi
10003a1b:	e8 fc ff ff ff       	call   10003a1c <NiLoadCursors()+0x13e>	10003a1c: R_386_PC32	memcmp
10003a20:	83 c4 10             	add    esp,0x10
10003a23:	85 c0                	test   eax,eax
10003a25:	74 51                	je     10003a78 <NiLoadCursors()+0x19a>
10003a27:	52                   	push   edx
10003a28:	6a 04                	push   0x4
10003a2a:	68 09 54 00 10       	push   0x10005409	10003a2b: R_386_32	.text
10003a2f:	56                   	push   esi
10003a30:	e8 fc ff ff ff       	call   10003a31 <NiLoadCursors()+0x153>	10003a31: R_386_PC32	memcmp
10003a35:	83 c4 10             	add    esp,0x10
10003a38:	85 c0                	test   eax,eax
10003a3a:	74 43                	je     10003a7f <NiLoadCursors()+0x1a1>
10003a3c:	50                   	push   eax
10003a3d:	6a 04                	push   0x4
10003a3f:	68 0e 54 00 10       	push   0x1000540e	10003a40: R_386_32	.text
10003a44:	56                   	push   esi
10003a45:	e8 fc ff ff ff       	call   10003a46 <NiLoadCursors()+0x168>	10003a46: R_386_PC32	memcmp
10003a4a:	83 c4 10             	add    esp,0x10
10003a4d:	85 c0                	test   eax,eax
10003a4f:	74 35                	je     10003a86 <NiLoadCursors()+0x1a8>
10003a51:	83 ec 0c             	sub    esp,0xc
10003a54:	68 13 54 00 10       	push   0x10005413	10003a55: R_386_32	.text
10003a59:	e8 fc ff ff ff       	call   10003a5a <NiLoadCursors()+0x17c>	10003a5a: R_386_PC32	Dbg::kprintf(char const*, ...)
10003a5e:	83 c4 10             	add    esp,0x10
10003a61:	eb 47                	jmp    10003aaa <NiLoadCursors()+0x1cc>
10003a63:	b8 00 02 00 00       	mov    eax,0x200
10003a68:	eb 21                	jmp    10003a8b <NiLoadCursors()+0x1ad>
10003a6a:	b8 00 03 00 00       	mov    eax,0x300
10003a6f:	eb 1a                	jmp    10003a8b <NiLoadCursors()+0x1ad>
10003a71:	b8 00 01 00 00       	mov    eax,0x100
10003a76:	eb 13                	jmp    10003a8b <NiLoadCursors()+0x1ad>
10003a78:	b8 00 04 00 00       	mov    eax,0x400
10003a7d:	eb 0c                	jmp    10003a8b <NiLoadCursors()+0x1ad>
10003a7f:	b8 00 05 00 00       	mov    eax,0x500
10003a84:	eb 05                	jmp    10003a8b <NiLoadCursors()+0x1ad>
10003a86:	b8 00 06 00 00       	mov    eax,0x600
10003a8b:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003a8d: R_386_32	___mouse_data
10003a91:	b9 00 01 00 00       	mov    ecx,0x100
10003a96:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003a9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003a9c:	45                   	inc    ebp
10003a9d:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003aa5:	e9 03 ff ff ff       	jmp    100039ad <NiLoadCursors()+0xcf>
10003aaa:	83 ec 0c             	sub    esp,0xc
10003aad:	53                   	push   ebx
10003aae:	e8 fc ff ff ff       	call   10003aaf <NiLoadCursors()+0x1d1>	10003aaf: R_386_PC32	free
10003ab3:	83 c4 10             	add    esp,0x10
10003ab6:	83 c4 2c             	add    esp,0x2c
10003ab9:	5b                   	pop    ebx
10003aba:	5e                   	pop    esi
10003abb:	5f                   	pop    edi
10003abc:	5d                   	pop    ebp
10003abd:	c3                   	ret    

10003abe <NIDesktop::NIDesktop(NIContext*)>:
10003abe:	53                   	push   ebx
10003abf:	83 ec 14             	sub    esp,0x14
10003ac2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10003ac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003aca:	c7 43 08 1e 00 00 00 	mov    DWORD PTR [ebx+0x8],0x1e
10003ad1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003ad4:	c7 43 0c 1e 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1e
10003adb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10003ae2:	6a 08                	push   0x8
10003ae4:	e8 fc ff ff ff       	call   10003ae5 <NIDesktop::NIDesktop(NIContext*)+0x27>	10003ae5: R_386_PC32	malloc
10003ae9:	89 03                	mov    DWORD PTR [ebx],eax
10003aeb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003af2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003af8:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10003afa: R_386_32	mouseDesktop
10003afe:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003b00: R_386_32	guiMouseHandler
	10003b04: R_386_32	NiHandleMouse(int, int, int, int)
10003b08:	83 c4 18             	add    esp,0x18
10003b0b:	5b                   	pop    ebx
10003b0c:	c3                   	ret    
10003b0d:	90                   	nop

10003b0e <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003b0e:	53                   	push   ebx
10003b0f:	83 ec 08             	sub    esp,0x8
10003b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003b16:	8b 00                	mov    eax,DWORD PTR [eax]
10003b18:	8b 18                	mov    ebx,DWORD PTR [eax]
10003b1a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
10003b1e:	74 1d                	je     10003b3d <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2f>
10003b20:	8b 03                	mov    eax,DWORD PTR [ebx]
10003b22:	85 c0                	test   eax,eax
10003b24:	74 12                	je     10003b38 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003b26:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10003b2a:	74 0c                	je     10003b38 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x2a>
10003b2c:	83 ec 0c             	sub    esp,0xc
10003b2f:	50                   	push   eax
10003b30:	e8 fc ff ff ff       	call   10003b31 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x23>	10003b31: R_386_PC32	NIWindow::invalidate()
10003b35:	83 c4 10             	add    esp,0x10
10003b38:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
10003b3b:	eb dd                	jmp    10003b1a <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xc>
10003b3d:	83 c4 08             	add    esp,0x8
10003b40:	5b                   	pop    ebx
10003b41:	c3                   	ret    

10003b42 <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003b42:	57                   	push   edi
10003b43:	56                   	push   esi
10003b44:	53                   	push   ebx
10003b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003b49:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003b4d:	8b 00                	mov    eax,DWORD PTR [eax]
10003b4f:	8b 00                	mov    eax,DWORD PTR [eax]
10003b51:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003b54:	85 db                	test   ebx,ebx
10003b56:	74 43                	je     10003b9b <NIDesktop::getTopmostWindowAtPixel(int, int)+0x59>
10003b58:	8b 00                	mov    eax,DWORD PTR [eax]
10003b5a:	85 c0                	test   eax,eax
10003b5c:	74 3f                	je     10003b9d <NIDesktop::getTopmostWindowAtPixel(int, int)+0x5b>
10003b5e:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10003b61:	39 ca                	cmp    edx,ecx
10003b63:	7e 04                	jle    10003b69 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003b65:	89 d8                	mov    eax,ebx
10003b67:	eb e8                	jmp    10003b51 <NIDesktop::getTopmostWindowAtPixel(int, int)+0xf>
10003b69:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
10003b6c:	01 d6                	add    esi,edx
10003b6e:	39 ce                	cmp    esi,ecx
10003b70:	7e f3                	jle    10003b65 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003b72:	89 ce                	mov    esi,ecx
10003b74:	29 d6                	sub    esi,edx
10003b76:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10003b79:	8d 34 b2             	lea    esi,[edx+esi*4]
10003b7c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
10003b7f:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003b82:	01 d7                	add    edi,edx
10003b84:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003b88:	7f db                	jg     10003b65 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003b8a:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
10003b8d:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003b91:	29 f2                	sub    edx,esi
10003b93:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003b97:	7e cc                	jle    10003b65 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x23>
10003b99:	eb 02                	jmp    10003b9d <NIDesktop::getTopmostWindowAtPixel(int, int)+0x5b>
10003b9b:	31 c0                	xor    eax,eax
10003b9d:	5b                   	pop    ebx
10003b9e:	5e                   	pop    esi
10003b9f:	5f                   	pop    edi
10003ba0:	c3                   	ret    
10003ba1:	90                   	nop

10003ba2 <NIDesktop::renderScanline(int, int, int)>:
10003ba2:	55                   	push   ebp
10003ba3:	57                   	push   edi
10003ba4:	56                   	push   esi
10003ba5:	53                   	push   ebx
10003ba6:	83 ec 2c             	sub    esp,0x2c
10003ba9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10003bad:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10003bb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003bb5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003bb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003bbd:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003bbf: R_386_32	render
10003bc3:	31 c0                	xor    eax,eax
10003bc5:	89 d7                	mov    edi,edx
10003bc7:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003bc9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003bcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003bd1:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003bd3: R_386_32	shadow
10003bd7:	b0 80                	mov    al,0x80
10003bd9:	89 d7                	mov    edi,edx
10003bdb:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003bdd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003be1:	8b 00                	mov    eax,DWORD PTR [eax]
10003be3:	8b 00                	mov    eax,DWORD PTR [eax]
10003be5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003be9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003bed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003bf1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003bf3: R_386_32	movingWin
10003bf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003bfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003bfe:	85 c0                	test   eax,eax
10003c00:	75 09                	jne    10003c0b <NIDesktop::renderScanline(int, int, int)+0x69>
10003c02:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10003c06:	e9 cf 02 00 00       	jmp    10003eda <NIDesktop::renderScanline(int, int, int)+0x338>
10003c0b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003c0f:	8b 1f                	mov    ebx,DWORD PTR [edi]
10003c11:	85 db                	test   ebx,ebx
10003c13:	74 ed                	je     10003c02 <NIDesktop::renderScanline(int, int, int)+0x60>
10003c15:	39 da                	cmp    edx,ebx
10003c17:	75 06                	jne    10003c1f <NIDesktop::renderScanline(int, int, int)+0x7d>
10003c19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003c1d:	eb d8                	jmp    10003bf7 <NIDesktop::renderScanline(int, int, int)+0x55>
10003c1f:	83 ec 0c             	sub    esp,0xc
10003c22:	53                   	push   ebx
10003c23:	e8 fc ff ff ff       	call   10003c24 <NIDesktop::renderScanline(int, int, int)+0x82>	10003c24: R_386_PC32	NIWindow::request()
10003c28:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003c2b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
10003c2e:	83 c4 10             	add    esp,0x10
10003c31:	01 c2                	add    edx,eax
10003c33:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003c37:	0f 8e ad 00 00 00    	jle    10003cea <NIDesktop::renderScanline(int, int, int)+0x148>
10003c3d:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003c41:	0f 85 a3 00 00 00    	jne    10003cea <NIDesktop::renderScanline(int, int, int)+0x148>
10003c47:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003c4b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10003c4e:	83 c0 06             	add    eax,0x6
10003c51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003c55:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
10003c58:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10003c5b:	01 c8                	add    eax,ecx
10003c5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003c61:	39 d0                	cmp    eax,edx
10003c63:	0f 8e 40 01 00 00    	jle    10003da9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003c69:	3b 54 24 48          	cmp    edx,DWORD PTR [esp+0x48]
10003c6d:	7c 75                	jl     10003ce4 <NIDesktop::renderScanline(int, int, int)+0x142>
10003c6f:	3b 54 24 4c          	cmp    edx,DWORD PTR [esp+0x4c]
10003c73:	0f 8f 30 01 00 00    	jg     10003da9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003c79:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
10003c7c:	89 d5                	mov    ebp,edx
10003c7e:	6b fe fc             	imul   edi,esi,0xfffffffc
10003c81:	29 cd                	sub    ebp,ecx
10003c83:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10003c87:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
10003c8b:	39 f0                	cmp    eax,esi
10003c8d:	7c 1d                	jl     10003cac <NIDesktop::renderScanline(int, int, int)+0x10a>
10003c8f:	8d 0c 87             	lea    ecx,[edi+eax*4]
10003c92:	03 4b 14             	add    ecx,DWORD PTR [ebx+0x14]
10003c95:	0f b7 29             	movzx  ebp,WORD PTR [ecx]
10003c98:	3b 6c 24 18          	cmp    ebp,DWORD PTR [esp+0x18]
10003c9c:	7f 0e                	jg     10003cac <NIDesktop::renderScanline(int, int, int)+0x10a>
10003c9e:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
10003ca2:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
10003ca6:	29 cd                	sub    ebp,ecx
10003ca8:	39 d5                	cmp    ebp,edx
10003caa:	7d 07                	jge    10003cb3 <NIDesktop::renderScanline(int, int, int)+0x111>
10003cac:	40                   	inc    eax
10003cad:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
10003cb1:	75 d8                	jne    10003c8b <NIDesktop::renderScanline(int, int, int)+0xe9>
10003cb3:	2b 44 24 44          	sub    eax,DWORD PTR [esp+0x44]
10003cb7:	48                   	dec    eax
10003cb8:	83 f8 03             	cmp    eax,0x3
10003cbb:	77 27                	ja     10003ce4 <NIDesktop::renderScanline(int, int, int)+0x142>
10003cbd:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003cbf: R_386_32	render
10003cc4:	75 1e                	jne    10003ce4 <NIDesktop::renderScanline(int, int, int)+0x142>
10003cc6:	8d 0c c5 65 00 00 00 	lea    ecx,[eax*8+0x65]
10003ccd:	0f b6 82 00 00 00 00 	movzx  eax,BYTE PTR [edx+0x0]	10003cd0: R_386_32	shadow
10003cd4:	0f af c1             	imul   eax,ecx
10003cd7:	d1 f9                	sar    ecx,1
10003cd9:	c1 f8 08             	sar    eax,0x8
10003cdc:	01 c1                	add    ecx,eax
10003cde:	88 8a 00 00 00 00    	mov    BYTE PTR [edx+0x0],cl	10003ce0: R_386_32	shadow
10003ce4:	42                   	inc    edx
10003ce5:	e9 6b ff ff ff       	jmp    10003c55 <NIDesktop::renderScanline(int, int, int)+0xb3>
10003cea:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003cee:	0f 8d b5 00 00 00    	jge    10003da9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003cf4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003cf8:	0f 85 ab 00 00 00    	jne    10003da9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003cfe:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10003d02:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003d05:	8d 77 fa             	lea    esi,[edi-0x6]
10003d08:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10003d0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
10003d0f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
10003d12:	01 ce                	add    esi,ecx
10003d14:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10003d18:	39 c6                	cmp    esi,eax
10003d1a:	0f 8e 89 00 00 00    	jle    10003da9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d20:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003d24:	7c 7d                	jl     10003da3 <NIDesktop::renderScanline(int, int, int)+0x201>
10003d26:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003d2a:	7f 7d                	jg     10003da9 <NIDesktop::renderScanline(int, int, int)+0x207>
10003d2c:	89 c7                	mov    edi,eax
10003d2e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003d32:	29 cf                	sub    edi,ecx
10003d34:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003d38:	4a                   	dec    edx
10003d39:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10003d3d:	29 d1                	sub    ecx,edx
10003d3f:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
10003d43:	74 32                	je     10003d77 <NIDesktop::renderScanline(int, int, int)+0x1d5>
10003d45:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
10003d48:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10003d4b:	8d 2c 37             	lea    ebp,[edi+esi*1]
10003d4e:	39 d5                	cmp    ebp,edx
10003d50:	7e e6                	jle    10003d38 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d52:	89 d5                	mov    ebp,edx
10003d54:	29 fd                	sub    ebp,edi
10003d56:	39 ee                	cmp    esi,ebp
10003d58:	7e 1d                	jle    10003d77 <NIDesktop::renderScanline(int, int, int)+0x1d5>
10003d5a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10003d5d:	8d 34 ae             	lea    esi,[esi+ebp*4]
10003d60:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003d63:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10003d67:	7f cf                	jg     10003d38 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d69:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003d6d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10003d71:	29 f7                	sub    edi,esi
10003d73:	39 c7                	cmp    edi,eax
10003d75:	7c c1                	jl     10003d38 <NIDesktop::renderScanline(int, int, int)+0x196>
10003d77:	83 f9 04             	cmp    ecx,0x4
10003d7a:	77 27                	ja     10003da3 <NIDesktop::renderScanline(int, int, int)+0x201>
10003d7c:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003d7e: R_386_32	render
10003d83:	75 1e                	jne    10003da3 <NIDesktop::renderScanline(int, int, int)+0x201>
10003d85:	8d 0c cd 5d 00 00 00 	lea    ecx,[ecx*8+0x5d]
10003d8c:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10003d8f: R_386_32	shadow
10003d93:	0f af d1             	imul   edx,ecx
10003d96:	d1 f9                	sar    ecx,1
10003d98:	c1 fa 08             	sar    edx,0x8
10003d9b:	01 d1                	add    ecx,edx
10003d9d:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	10003d9f: R_386_32	shadow
10003da3:	40                   	inc    eax
10003da4:	e9 63 ff ff ff       	jmp    10003d0c <NIDesktop::renderScanline(int, int, int)+0x16a>
10003da9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003dac:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
10003db0:	0f 8f 00 01 00 00    	jg     10003eb6 <NIDesktop::renderScanline(int, int, int)+0x314>
10003db6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
10003db9:	01 c2                	add    edx,eax
10003dbb:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
10003dbf:	0f 8e f1 00 00 00    	jle    10003eb6 <NIDesktop::renderScanline(int, int, int)+0x314>
10003dc5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003dc9:	29 c2                	sub    edx,eax
10003dcb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10003dce:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003dd2:	8d 14 90             	lea    edx,[eax+edx*4]
10003dd5:	0f b7 02             	movzx  eax,WORD PTR [edx]
10003dd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003ddc:	0f b7 42 02          	movzx  eax,WORD PTR [edx+0x2]
10003de0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003de4:	74 09                	je     10003def <NIDesktop::renderScanline(int, int, int)+0x24d>
10003de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003dea:	03 43 18             	add    eax,DWORD PTR [ebx+0x18]
10003ded:	eb 78                	jmp    10003e67 <NIDesktop::renderScanline(int, int, int)+0x2c5>
10003def:	31 c9                	xor    ecx,ecx
10003df1:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10003df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003df8:	8d 6c 02 fc          	lea    ebp,[edx+eax*1-0x4]
10003dfc:	03 53 20             	add    edx,DWORD PTR [ebx+0x20]
10003dff:	01 cd                	add    ebp,ecx
10003e01:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003e05:	01 ca                	add    edx,ecx
10003e07:	80 bd 00 00 00 00 00 	cmp    BYTE PTR [ebp+0x0],0x0	10003e09: R_386_32	render
10003e0e:	75 1f                	jne    10003e2f <NIDesktop::renderScanline(int, int, int)+0x28d>
10003e10:	0f b6 b5 00 00 00 00 	movzx  esi,BYTE PTR [ebp+0x0]	10003e13: R_386_32	shadow
10003e17:	6b f9 f8             	imul   edi,ecx,0xfffffff8
10003e1a:	83 c7 7d             	add    edi,0x7d
10003e1d:	0f af f7             	imul   esi,edi
10003e20:	d1 ff                	sar    edi,1
10003e22:	c1 fe 08             	sar    esi,0x8
10003e25:	01 f7                	add    edi,esi
10003e27:	89 f8                	mov    eax,edi
10003e29:	88 85 00 00 00 00    	mov    BYTE PTR [ebp+0x0],al	10003e2b: R_386_32	shadow
10003e2f:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10003e31: R_386_32	render
10003e36:	75 20                	jne    10003e58 <NIDesktop::renderScanline(int, int, int)+0x2b6>
10003e38:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
10003e3f:	0f b6 b2 00 00 00 00 	movzx  esi,BYTE PTR [edx+0x0]	10003e42: R_386_32	shadow
10003e46:	0f af f7             	imul   esi,edi
10003e49:	d1 ff                	sar    edi,1
10003e4b:	c1 fe 08             	sar    esi,0x8
10003e4e:	01 f7                	add    edi,esi
10003e50:	89 f8                	mov    eax,edi
10003e52:	88 82 00 00 00 00    	mov    BYTE PTR [edx+0x0],al	10003e54: R_386_32	shadow
10003e58:	41                   	inc    ecx
10003e59:	83 f9 04             	cmp    ecx,0x4
10003e5c:	75 93                	jne    10003df1 <NIDesktop::renderScanline(int, int, int)+0x24f>
10003e5e:	eb 86                	jmp    10003de6 <NIDesktop::renderScanline(int, int, int)+0x244>
10003e60:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003e64:	7d 11                	jge    10003e77 <NIDesktop::renderScanline(int, int, int)+0x2d5>
10003e66:	40                   	inc    eax
10003e67:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
10003e6a:	03 53 18             	add    edx,DWORD PTR [ebx+0x18]
10003e6d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
10003e71:	39 c2                	cmp    edx,eax
10003e73:	7f eb                	jg     10003e60 <NIDesktop::renderScanline(int, int, int)+0x2be>
10003e75:	eb 3f                	jmp    10003eb6 <NIDesktop::renderScanline(int, int, int)+0x314>
10003e77:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003e7b:	7f 39                	jg     10003eb6 <NIDesktop::renderScanline(int, int, int)+0x314>
10003e7d:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003e7f: R_386_32	render
10003e84:	75 e0                	jne    10003e66 <NIDesktop::renderScanline(int, int, int)+0x2c4>
10003e86:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003e88: R_386_32	render
10003e8d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10003e91:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
10003e94:	2b 53 1c             	sub    edx,DWORD PTR [ebx+0x1c]
10003e97:	0f af ca             	imul   ecx,edx
10003e9a:	89 c2                	mov    edx,eax
10003e9c:	2b 53 18             	sub    edx,DWORD PTR [ebx+0x18]
10003e9f:	01 ca                	add    edx,ecx
10003ea1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10003ea4:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003ea8:	8b 14 91             	mov    edx,DWORD PTR [ecx+edx*4]
10003eab:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	10003eae: R_386_32	renderData
10003eb2:	75 b2                	jne    10003e66 <NIDesktop::renderScanline(int, int, int)+0x2c4>
10003eb4:	eb 44                	jmp    10003efa <NIDesktop::renderScanline(int, int, int)+0x358>
10003eb6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
10003eba:	0f 85 42 fd ff ff    	jne    10003c02 <NIDesktop::renderScanline(int, int, int)+0x60>
10003ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003ec4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003ec7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003ecb:	e9 21 fd ff ff       	jmp    10003bf1 <NIDesktop::renderScanline(int, int, int)+0x4f>
10003ed0:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10003ed2: R_386_32	render
10003ed7:	74 09                	je     10003ee2 <NIDesktop::renderScanline(int, int, int)+0x340>
10003ed9:	40                   	inc    eax
10003eda:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10003ede:	7c f0                	jl     10003ed0 <NIDesktop::renderScanline(int, int, int)+0x32e>
10003ee0:	eb 18                	jmp    10003efa <NIDesktop::renderScanline(int, int, int)+0x358>
10003ee2:	c6 80 00 00 00 00 01 	mov    BYTE PTR [eax+0x0],0x1	10003ee4: R_386_32	render
10003ee9:	c7 04 85 00 00 00 00 ff 80 55 00 	mov    DWORD PTR [eax*4+0x0],0x5580ff	10003eec: R_386_32	renderData
10003ef4:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
10003ef8:	75 df                	jne    10003ed9 <NIDesktop::renderScanline(int, int, int)+0x337>
10003efa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003efe:	8b 00                	mov    eax,DWORD PTR [eax]
10003f00:	8b 00                	mov    eax,DWORD PTR [eax]
10003f02:	85 c0                	test   eax,eax
10003f04:	74 5e                	je     10003f64 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f06:	8b 00                	mov    eax,DWORD PTR [eax]
10003f08:	85 c0                	test   eax,eax
10003f0a:	74 58                	je     10003f64 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f0c:	80 78 28 00          	cmp    BYTE PTR [eax+0x28],0x0
10003f10:	75 52                	jne    10003f64 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f12:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10003f16:	3b 5c 24 4c          	cmp    ebx,DWORD PTR [esp+0x4c]
10003f1a:	7d 48                	jge    10003f64 <NIDesktop::renderScanline(int, int, int)+0x3c2>
10003f1c:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	10003f1e: R_386_32	shadow
10003f22:	3c 80                	cmp    al,0x80
10003f24:	74 3b                	je     10003f61 <NIDesktop::renderScanline(int, int, int)+0x3bf>
10003f26:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	10003f29: R_386_32	renderData
10003f2d:	0f b6 f0             	movzx  esi,al
10003f30:	89 d1                	mov    ecx,edx
10003f32:	0f b6 c6             	movzx  eax,dh
10003f35:	c1 e9 10             	shr    ecx,0x10
10003f38:	0f af c6             	imul   eax,esi
10003f3b:	0f b6 c9             	movzx  ecx,cl
10003f3e:	0f b6 d2             	movzx  edx,dl
10003f41:	0f af ce             	imul   ecx,esi
10003f44:	0f af d6             	imul   edx,esi
10003f47:	c1 e9 07             	shr    ecx,0x7
10003f4a:	c1 e8 07             	shr    eax,0x7
10003f4d:	c1 e1 10             	shl    ecx,0x10
10003f50:	c1 e0 08             	shl    eax,0x8
10003f53:	c1 ea 07             	shr    edx,0x7
10003f56:	09 c1                	or     ecx,eax
10003f58:	09 ca                	or     edx,ecx
10003f5a:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	10003f5d: R_386_32	renderData
10003f61:	43                   	inc    ebx
10003f62:	eb b2                	jmp    10003f16 <NIDesktop::renderScanline(int, int, int)+0x374>
10003f64:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003f68:	83 ec 0c             	sub    esp,0xc
10003f6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003f6e:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003f74:	8b 10                	mov    edx,DWORD PTR [eax]
10003f76:	68 00 00 00 00       	push   0x0	10003f77: R_386_32	renderData
10003f7b:	6a 00                	push   0x0
10003f7d:	6a 01                	push   0x1
10003f7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10003f83:	6a 00                	push   0x0
10003f85:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10003f89:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10003f8d:	ff 74 24 70          	push   DWORD PTR [esp+0x70]
10003f91:	50                   	push   eax
10003f92:	ff 52 38             	call   DWORD PTR [edx+0x38]
10003f95:	83 c4 5c             	add    esp,0x5c
10003f98:	5b                   	pop    ebx
10003f99:	5e                   	pop    esi
10003f9a:	5f                   	pop    edi
10003f9b:	5d                   	pop    ebp
10003f9c:	c3                   	ret    
10003f9d:	90                   	nop

10003f9e <NIDesktop::rangeRefresh(int, int, int, int)>:
10003f9e:	53                   	push   ebx
10003f9f:	83 ec 08             	sub    esp,0x8
10003fa2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10003fa6:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
10003faa:	7d 18                	jge    10003fc4 <NIDesktop::rangeRefresh(int, int, int, int)+0x26>
10003fac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003fb0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003fb4:	53                   	push   ebx
10003fb5:	43                   	inc    ebx
10003fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003fba:	e8 fc ff ff ff       	call   10003fbb <NIDesktop::rangeRefresh(int, int, int, int)+0x1d>	10003fbb: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10003fbf:	83 c4 10             	add    esp,0x10
10003fc2:	eb e2                	jmp    10003fa6 <NIDesktop::rangeRefresh(int, int, int, int)+0x8>
10003fc4:	83 c4 08             	add    esp,0x8
10003fc7:	5b                   	pop    ebx
10003fc8:	c3                   	ret    
10003fc9:	90                   	nop

10003fca <NIDesktop::refreshWindowBounds(NIWindow*)>:
10003fca:	55                   	push   ebp
10003fcb:	ba 05 00 00 00       	mov    edx,0x5
10003fd0:	57                   	push   edi
10003fd1:	56                   	push   esi
10003fd2:	53                   	push   ebx
10003fd3:	83 ec 0c             	sub    esp,0xc
10003fd6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10003fda:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10003fdd:	83 f8 05             	cmp    eax,0x5
10003fe0:	7c 02                	jl     10003fe4 <NIDesktop::refreshWindowBounds(NIWindow*)+0x1a>
10003fe2:	89 c2                	mov    edx,eax
10003fe4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10003fe8:	03 43 24             	add    eax,DWORD PTR [ebx+0x24]
10003feb:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
10003fee:	83 ea 05             	sub    edx,0x5
10003ff1:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
10003ff7:	8d 70 05             	lea    esi,[eax+0x5]
10003ffa:	8d 69 fb             	lea    ebp,[ecx-0x5]
10003ffd:	39 c5                	cmp    ebp,eax
10003fff:	7f 03                	jg     10004004 <NIDesktop::refreshWindowBounds(NIWindow*)+0x3a>
10004001:	8d 71 ff             	lea    esi,[ecx-0x1]
10004004:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10004007:	89 c1                	mov    ecx,eax
10004009:	83 f8 05             	cmp    eax,0x5
1000400c:	7d 05                	jge    10004013 <NIDesktop::refreshWindowBounds(NIWindow*)+0x49>
1000400e:	b9 05 00 00 00       	mov    ecx,0x5
10004013:	03 43 20             	add    eax,DWORD PTR [ebx+0x20]
10004016:	83 e9 05             	sub    ecx,0x5
10004019:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
1000401f:	8d 58 05             	lea    ebx,[eax+0x5]
10004022:	8d 6f fb             	lea    ebp,[edi-0x5]
10004025:	39 c5                	cmp    ebp,eax
10004027:	7f 03                	jg     1000402c <NIDesktop::refreshWindowBounds(NIWindow*)+0x62>
10004029:	8d 5f ff             	lea    ebx,[edi-0x1]
1000402c:	83 ec 0c             	sub    esp,0xc
1000402f:	53                   	push   ebx
10004030:	51                   	push   ecx
10004031:	56                   	push   esi
10004032:	52                   	push   edx
10004033:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10004037:	e8 fc ff ff ff       	call   10004038 <NIDesktop::refreshWindowBounds(NIWindow*)+0x6e>	10004038: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000403c:	83 c4 2c             	add    esp,0x2c
1000403f:	5b                   	pop    ebx
10004040:	5e                   	pop    esi
10004041:	5f                   	pop    edi
10004042:	5d                   	pop    ebp
10004043:	c3                   	ret    

10004044 <NIDesktop::completeRefresh()>:
10004044:	56                   	push   esi
10004045:	53                   	push   ebx
10004046:	31 f6                	xor    esi,esi
10004048:	50                   	push   eax
10004049:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000404d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004050:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
10004056:	7e 15                	jle    1000406d <NIDesktop::completeRefresh()+0x29>
10004058:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
1000405e:	6a 00                	push   0x0
10004060:	56                   	push   esi
10004061:	46                   	inc    esi
10004062:	53                   	push   ebx
10004063:	e8 fc ff ff ff       	call   10004064 <NIDesktop::completeRefresh()+0x20>	10004064: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10004068:	83 c4 10             	add    esp,0x10
1000406b:	eb e0                	jmp    1000404d <NIDesktop::completeRefresh()+0x9>
1000406d:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004073:	83 ec 0c             	sub    esp,0xc
10004076:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004078:	6a 00                	push   0x0
1000407a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
1000407d:	05 00 00 00 00       	add    eax,0x0	1000407e: R_386_32	___mouse_data
10004082:	50                   	push   eax
10004083:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004086:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004089:	52                   	push   edx
1000408a:	ff 51 30             	call   DWORD PTR [ecx+0x30]
1000408d:	83 c4 24             	add    esp,0x24
10004090:	5b                   	pop    ebx
10004091:	5e                   	pop    esi
10004092:	c3                   	ret    
10004093:	90                   	nop

10004094 <NIDesktop::addWindow(NIWindow*)>:
10004094:	56                   	push   esi
10004095:	53                   	push   ebx
10004096:	83 ec 0c             	sub    esp,0xc
10004099:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000409d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
100040a1:	56                   	push   esi
100040a2:	ff 33                	push   DWORD PTR [ebx]
100040a4:	e8 fc ff ff ff       	call   100040a5 <NIDesktop::addWindow(NIWindow*)+0x11>	100040a5: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100040a9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
100040ad:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100040b1:	83 c4 14             	add    esp,0x14
100040b4:	5b                   	pop    ebx
100040b5:	5e                   	pop    esi
100040b6:	e9 0f ff ff ff       	jmp    10003fca <NIDesktop::refreshWindowBounds(NIWindow*)>
100040bb:	90                   	nop

100040bc <NIDesktop::raiseWindow(NIWindow*)>:
100040bc:	53                   	push   ebx
100040bd:	83 ec 10             	sub    esp,0x10
100040c0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100040c4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100040c8:	50                   	push   eax
100040c9:	ff 33                	push   DWORD PTR [ebx]
100040cb:	e8 fc ff ff ff       	call   100040cc <NIDesktop::raiseWindow(NIWindow*)+0x10>	100040cc: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100040d0:	58                   	pop    eax
100040d1:	5a                   	pop    edx
100040d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100040d6:	ff 33                	push   DWORD PTR [ebx]
100040d8:	e8 fc ff ff ff       	call   100040d9 <NIDesktop::raiseWindow(NIWindow*)+0x1d>	100040d9: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100040dd:	59                   	pop    ecx
100040de:	58                   	pop    eax
100040df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100040e3:	53                   	push   ebx
100040e4:	e8 fc ff ff ff       	call   100040e5 <NIDesktop::raiseWindow(NIWindow*)+0x29>	100040e5: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
100040e9:	83 c4 18             	add    esp,0x18
100040ec:	5b                   	pop    ebx
100040ed:	c3                   	ret    

100040ee <NIDesktop::deleteWindow(NIWindow*)>:
100040ee:	53                   	push   ebx
100040ef:	83 ec 10             	sub    esp,0x10
100040f2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100040f6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100040fa:	50                   	push   eax
100040fb:	ff 33                	push   DWORD PTR [ebx]
100040fd:	e8 fc ff ff ff       	call   100040fe <NIDesktop::deleteWindow(NIWindow*)+0x10>	100040fe: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
10004102:	58                   	pop    eax
10004103:	5a                   	pop    edx
10004104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004108:	53                   	push   ebx
10004109:	e8 fc ff ff ff       	call   1000410a <NIDesktop::deleteWindow(NIWindow*)+0x1c>	1000410a: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
1000410e:	83 c4 18             	add    esp,0x18
10004111:	5b                   	pop    ebx
10004112:	c3                   	ret    
10004113:	90                   	nop

10004114 <NIDesktop::handleMouse(int, int, int, int)>:
10004114:	55                   	push   ebp
10004115:	57                   	push   edi
10004116:	56                   	push   esi
10004117:	53                   	push   ebx
10004118:	83 ec 38             	sub    esp,0x38
1000411b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000411f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004122:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004125:	8d 4a 20             	lea    ecx,[edx+0x20]
10004128:	51                   	push   ecx
10004129:	52                   	push   edx
1000412a:	8d 50 20             	lea    edx,[eax+0x20]
1000412d:	52                   	push   edx
1000412e:	50                   	push   eax
1000412f:	53                   	push   ebx
10004130:	e8 fc ff ff ff       	call   10004131 <NIDesktop::handleMouse(int, int, int, int)+0x1d>	10004131: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004135:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004138:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000413c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000413f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10004143:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10004147:	03 54 24 64          	add    edx,DWORD PTR [esp+0x64]
1000414b:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
1000414f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
10004152:	83 c4 20             	add    esp,0x20
10004155:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10004158:	85 d2                	test   edx,edx
1000415a:	79 07                	jns    10004163 <NIDesktop::handleMouse(int, int, int, int)+0x4f>
1000415c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10004163:	85 c0                	test   eax,eax
10004165:	79 07                	jns    1000416e <NIDesktop::handleMouse(int, int, int, int)+0x5a>
10004167:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
1000416e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004171:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
10004177:	3b 43 08             	cmp    eax,DWORD PTR [ebx+0x8]
1000417a:	7f 04                	jg     10004180 <NIDesktop::handleMouse(int, int, int, int)+0x6c>
1000417c:	48                   	dec    eax
1000417d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10004180:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
10004186:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
10004189:	7f 04                	jg     1000418f <NIDesktop::handleMouse(int, int, int, int)+0x7b>
1000418b:	48                   	dec    eax
1000418c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
1000418f:	50                   	push   eax
10004190:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
10004193:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004196:	53                   	push   ebx
10004197:	e8 fc ff ff ff       	call   10004198 <NIDesktop::handleMouse(int, int, int, int)+0x84>	10004198: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
1000419c:	83 c4 10             	add    esp,0x10
1000419f:	89 c6                	mov    esi,eax
100041a1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100041a5:	83 e0 01             	and    eax,0x1
100041a8:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100041aa: R_386_32	movingWin
100041af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100041b3:	0f 84 f0 01 00 00    	je     100043a9 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100041b9:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	100041bb: R_386_32	movingType
100041c0:	0f 85 e3 01 00 00    	jne    100043a9 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100041c6:	c6 04 24 00          	mov    BYTE PTR [esp],0x0
100041ca:	85 c0                	test   eax,eax
100041cc:	75 0b                	jne    100041d9 <NIDesktop::handleMouse(int, int, int, int)+0xc5>
100041ce:	a0 58 87 03 10       	mov    al,ds:0x10038758	100041cf: R_386_32	.bss
100041d3:	83 e0 01             	and    eax,0x1
100041d6:	88 04 24             	mov    BYTE PTR [esp],al
100041d9:	bd 01 00 00 00       	mov    ebp,0x1
100041de:	a1 00 00 00 00       	mov    eax,ds:0x0	100041df: R_386_32	movingWin
100041e3:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
100041e6:	8d 51 ff             	lea    edx,[ecx-0x1]
100041e9:	39 ea                	cmp    edx,ebp
100041eb:	0f 8e b1 00 00 00    	jle    100042a2 <NIDesktop::handleMouse(int, int, int, int)+0x18e>
100041f1:	bf 01 00 00 00       	mov    edi,0x1
100041f6:	a1 00 00 00 00       	mov    eax,ds:0x0	100041f7: R_386_32	movingWin
100041fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
100041fe:	48                   	dec    eax
100041ff:	39 f8                	cmp    eax,edi
10004201:	0f 8e 95 00 00 00    	jle    1000429c <NIDesktop::handleMouse(int, int, int, int)+0x188>
10004207:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
1000420b:	89 ea                	mov    edx,ebp
1000420d:	83 e0 1f             	and    eax,0x1f
10004210:	83 e2 03             	and    edx,0x3
10004213:	09 d0                	or     eax,edx
10004215:	75 7f                	jne    10004296 <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004217:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000421b:	2b 05 54 87 03 10    	sub    eax,DWORD PTR ds:0x10038754	1000421d: R_386_32	.bss
10004221:	01 f8                	add    eax,edi
10004223:	78 2d                	js     10004252 <NIDesktop::handleMouse(int, int, int, int)+0x13e>
10004225:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004228:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
1000422e:	7d 22                	jge    10004252 <NIDesktop::handleMouse(int, int, int, int)+0x13e>
10004230:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10004234:	8d 48 01             	lea    ecx,[eax+0x1]
10004237:	83 ec 0c             	sub    esp,0xc
1000423a:	2b 15 50 87 03 10    	sub    edx,DWORD PTR ds:0x10038750	1000423c: R_386_32	.bss
10004240:	51                   	push   ecx
10004241:	01 ea                	add    edx,ebp
10004243:	50                   	push   eax
10004244:	8d 42 01             	lea    eax,[edx+0x1]
10004247:	50                   	push   eax
10004248:	52                   	push   edx
10004249:	53                   	push   ebx
1000424a:	e8 fc ff ff ff       	call   1000424b <NIDesktop::handleMouse(int, int, int, int)+0x137>	1000424b: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000424f:	83 c4 20             	add    esp,0x20
10004252:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
10004256:	75 3e                	jne    10004296 <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004258:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
1000425b:	01 f8                	add    eax,edi
1000425d:	2b 05 54 87 03 10    	sub    eax,DWORD PTR ds:0x10038754	1000425f: R_386_32	.bss
10004263:	78 31                	js     10004296 <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004265:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10004268:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
1000426e:	7d 26                	jge    10004296 <NIDesktop::handleMouse(int, int, int, int)+0x182>
10004270:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10004276:	8b 11                	mov    edx,DWORD PTR [ecx]
10004278:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
1000427c:	6a 00                	push   0x0
1000427e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004281:	01 ea                	add    edx,ebp
10004283:	2b 15 50 87 03 10    	sub    edx,DWORD PTR ds:0x10038750	10004285: R_386_32	.bss
10004289:	52                   	push   edx
1000428a:	50                   	push   eax
1000428b:	51                   	push   ecx
1000428c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004290:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004293:	83 c4 10             	add    esp,0x10
10004296:	47                   	inc    edi
10004297:	e9 5a ff ff ff       	jmp    100041f6 <NIDesktop::handleMouse(int, int, int, int)+0xe2>
1000429c:	45                   	inc    ebp
1000429d:	e9 3c ff ff ff       	jmp    100041de <NIDesktop::handleMouse(int, int, int, int)+0xca>
100042a2:	8b 15 54 87 03 10    	mov    edx,DWORD PTR ds:0x10038754	100042a4: R_386_32	.bss
100042a8:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
100042ab:	29 d7                	sub    edi,edx
100042ad:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
100042b1:	0f 85 a9 05 00 00    	jne    10004860 <NIDesktop::handleMouse(int, int, int, int)+0x74c>
100042b7:	89 3c 24             	mov    DWORD PTR [esp],edi
100042ba:	85 ff                	test   edi,edi
100042bc:	79 07                	jns    100042c5 <NIDesktop::handleMouse(int, int, int, int)+0x1b1>
100042be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100042c5:	8b 68 20             	mov    ebp,DWORD PTR [eax+0x20]
100042c8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100042cb:	01 ef                	add    edi,ebp
100042cd:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
100042d3:	39 c7                	cmp    edi,eax
100042d5:	7d 05                	jge    100042dc <NIDesktop::handleMouse(int, int, int, int)+0x1c8>
100042d7:	2b 3c 24             	sub    edi,DWORD PTR [esp]
100042da:	eb 0b                	jmp    100042e7 <NIDesktop::handleMouse(int, int, int, int)+0x1d3>
100042dc:	89 c7                	mov    edi,eax
100042de:	2b 3c 24             	sub    edi,DWORD PTR [esp]
100042e1:	0f 88 c2 00 00 00    	js     100043a9 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100042e7:	85 ff                	test   edi,edi
100042e9:	0f 84 ba 00 00 00    	je     100043a9 <NIDesktop::handleMouse(int, int, int, int)+0x295>
100042ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100042f3:	29 d1                	sub    ecx,edx
100042f5:	89 ca                	mov    edx,ecx
100042f7:	79 02                	jns    100042fb <NIDesktop::handleMouse(int, int, int, int)+0x1e7>
100042f9:	31 d2                	xor    edx,edx
100042fb:	01 cd                	add    ebp,ecx
100042fd:	39 e8                	cmp    eax,ebp
100042ff:	7e 04                	jle    10004305 <NIDesktop::handleMouse(int, int, int, int)+0x1f1>
10004301:	29 d5                	sub    ebp,edx
10004303:	eb 08                	jmp    1000430d <NIDesktop::handleMouse(int, int, int, int)+0x1f9>
10004305:	29 d0                	sub    eax,edx
10004307:	89 c5                	mov    ebp,eax
10004309:	79 02                	jns    1000430d <NIDesktop::handleMouse(int, int, int, int)+0x1f9>
1000430b:	31 ed                	xor    ebp,ebp
1000430d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004311:	01 d5                	add    ebp,edx
10004313:	83 ec 0c             	sub    esp,0xc
10004316:	2b 05 50 87 03 10    	sub    eax,DWORD PTR ds:0x10038750	10004318: R_386_32	.bss
1000431c:	55                   	push   ebp
1000431d:	8d 48 01             	lea    ecx,[eax+0x1]
10004320:	52                   	push   edx
10004321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
10004325:	51                   	push   ecx
10004326:	50                   	push   eax
10004327:	53                   	push   ebx
10004328:	e8 fc ff ff ff       	call   10004329 <NIDesktop::handleMouse(int, int, int, int)+0x215>	10004329: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
1000432d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004331:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004333: R_386_32	movingWin
10004337:	83 c4 14             	add    esp,0x14
1000433a:	2b 05 50 87 03 10    	sub    eax,DWORD PTR ds:0x10038750	1000433c: R_386_32	.bss
10004340:	03 41 24             	add    eax,DWORD PTR [ecx+0x24]
10004343:	55                   	push   ebp
10004344:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10004348:	52                   	push   edx
10004349:	50                   	push   eax
1000434a:	48                   	dec    eax
1000434b:	50                   	push   eax
1000434c:	53                   	push   ebx
1000434d:	e8 fc ff ff ff       	call   1000434e <NIDesktop::handleMouse(int, int, int, int)+0x23a>	1000434e: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004352:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004355:	83 c4 18             	add    esp,0x18
10004358:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
1000435e:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004360:	6a 00                	push   0x0
10004362:	6a 01                	push   0x1
10004364:	57                   	push   edi
10004365:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004368:	2b 05 50 87 03 10    	sub    eax,DWORD PTR ds:0x10038750	1000436a: R_386_32	.bss
1000436e:	50                   	push   eax
1000436f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10004373:	52                   	push   edx
10004374:	ff 51 28             	call   DWORD PTR [ecx+0x28]
10004377:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000437a:	83 c4 18             	add    esp,0x18
1000437d:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004383:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004385:	6a 00                	push   0x0
10004387:	6a 01                	push   0x1
10004389:	57                   	push   edi
1000438a:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	1000438c: R_386_32	movingWin
10004390:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004393:	2b 05 50 87 03 10    	sub    eax,DWORD PTR ds:0x10038750	10004395: R_386_32	.bss
10004399:	03 47 24             	add    eax,DWORD PTR [edi+0x24]
1000439c:	48                   	dec    eax
1000439d:	50                   	push   eax
1000439e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100043a2:	52                   	push   edx
100043a3:	ff 51 28             	call   DWORD PTR [ecx+0x28]
100043a6:	83 c4 20             	add    esp,0x20
100043a9:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100043ab: R_386_32	movingWin
100043af:	85 d2                	test   edx,edx
100043b1:	0f 84 28 02 00 00    	je     100045df <NIDesktop::handleMouse(int, int, int, int)+0x4cb>
100043b7:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100043b9: R_386_32	movingType
100043bd:	8d 41 fe             	lea    eax,[ecx-0x2]
100043c0:	83 f8 02             	cmp    eax,0x2
100043c3:	0f 87 16 02 00 00    	ja     100045df <NIDesktop::handleMouse(int, int, int, int)+0x4cb>
100043c9:	c6 44 24 10 00       	mov    BYTE PTR [esp+0x10],0x0
100043ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100043d3:	75 0c                	jne    100043e1 <NIDesktop::handleMouse(int, int, int, int)+0x2cd>
100043d5:	a0 58 87 03 10       	mov    al,ds:0x10038758	100043d6: R_386_32	.bss
100043da:	83 e0 01             	and    eax,0x1
100043dd:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
100043e1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
100043e4:	8b 2d 54 87 03 10    	mov    ebp,DWORD PTR ds:0x10038754	100043e6: R_386_32	.bss
100043ea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100043ee:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
100043f1:	01 c7                	add    edi,eax
100043f3:	29 ef                	sub    edi,ebp
100043f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100043f9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
100043fd:	01 d7                	add    edi,edx
100043ff:	2b 3d 50 87 03 10    	sub    edi,DWORD PTR ds:0x10038750	10004401: R_386_32	.bss
10004405:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10004409:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
1000440c:	01 c7                	add    edi,eax
1000440e:	29 ef                	sub    edi,ebp
10004410:	89 fd                	mov    ebp,edi
10004412:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
10004415:	01 d7                	add    edi,edx
10004417:	2b 3d 50 87 03 10    	sub    edi,DWORD PTR ds:0x10038750	10004419: R_386_32	.bss
1000441d:	83 f9 03             	cmp    ecx,0x3
10004420:	89 3c 24             	mov    DWORD PTR [esp],edi
10004423:	74 0e                	je     10004433 <NIDesktop::handleMouse(int, int, int, int)+0x31f>
10004425:	83 f9 04             	cmp    ecx,0x4
10004428:	75 0f                	jne    10004439 <NIDesktop::handleMouse(int, int, int, int)+0x325>
1000442a:	89 14 24             	mov    DWORD PTR [esp],edx
1000442d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10004431:	eb 06                	jmp    10004439 <NIDesktop::handleMouse(int, int, int, int)+0x325>
10004433:	89 c5                	mov    ebp,eax
10004435:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000443d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004441:	39 e8                	cmp    eax,ebp
10004443:	7d 04                	jge    10004449 <NIDesktop::handleMouse(int, int, int, int)+0x335>
10004445:	89 6c 24 14          	mov    DWORD PTR [esp+0x14],ebp
10004449:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000444d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004451:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004454:	7d 07                	jge    1000445d <NIDesktop::handleMouse(int, int, int, int)+0x349>
10004456:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004459:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000445d:	bf 01 00 00 00       	mov    edi,0x1
10004462:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10004466:	0f 8d ab 00 00 00    	jge    10004517 <NIDesktop::handleMouse(int, int, int, int)+0x403>
1000446c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
10004474:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10004478:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
1000447c:	0f 8d 8f 00 00 00    	jge    10004511 <NIDesktop::handleMouse(int, int, int, int)+0x3fd>
10004482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004486:	89 fa                	mov    edx,edi
10004488:	01 f8                	add    eax,edi
1000448a:	83 e2 03             	and    edx,0x3
1000448d:	83 e0 1f             	and    eax,0x1f
10004490:	09 d0                	or     eax,edx
10004492:	75 74                	jne    10004508 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
10004494:	83 ec 0c             	sub    esp,0xc
10004497:	a1 00 00 00 00       	mov    eax,ds:0x0	10004498: R_386_32	movingWin
1000449c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100044a0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
100044a3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
100044a6:	8d 4c 0a 01          	lea    ecx,[edx+ecx*1+0x1]
100044aa:	51                   	push   ecx
100044ab:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
100044af:	52                   	push   edx
100044b0:	8d 54 38 01          	lea    edx,[eax+edi*1+0x1]
100044b4:	01 f8                	add    eax,edi
100044b6:	52                   	push   edx
100044b7:	50                   	push   eax
100044b8:	53                   	push   ebx
100044b9:	e8 fc ff ff ff       	call   100044ba <NIDesktop::handleMouse(int, int, int, int)+0x3a6>	100044ba: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
100044be:	8a 54 24 30          	mov    dl,BYTE PTR [esp+0x30]
100044c2:	83 c4 20             	add    esp,0x20
100044c5:	83 f2 01             	xor    edx,0x1
100044c8:	39 3c 24             	cmp    DWORD PTR [esp],edi
100044cb:	0f 9f c0             	setg   al
100044ce:	84 c2                	test   dl,al
100044d0:	74 36                	je     10004508 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
100044d2:	39 6c 24 04          	cmp    DWORD PTR [esp+0x4],ebp
100044d6:	7d 30                	jge    10004508 <NIDesktop::handleMouse(int, int, int, int)+0x3f4>
100044d8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100044db:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100044e1:	8b 08                	mov    ecx,DWORD PTR [eax]
100044e3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100044e7:	6a 00                	push   0x0
100044e9:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100044eb: R_386_32	movingWin
100044ef:	8b 51 1c             	mov    edx,DWORD PTR [ecx+0x1c]
100044f2:	01 fa                	add    edx,edi
100044f4:	52                   	push   edx
100044f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100044f9:	03 51 18             	add    edx,DWORD PTR [ecx+0x18]
100044fc:	52                   	push   edx
100044fd:	50                   	push   eax
100044fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10004502:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004505:	83 c4 10             	add    esp,0x10
10004508:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
1000450c:	e9 63 ff ff ff       	jmp    10004474 <NIDesktop::handleMouse(int, int, int, int)+0x360>
10004511:	47                   	inc    edi
10004512:	e9 4b ff ff ff       	jmp    10004462 <NIDesktop::handleMouse(int, int, int, int)+0x34e>
10004517:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	10004519: R_386_32	movingWin
1000451d:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
10004522:	0f 85 fb 02 00 00    	jne    10004823 <NIDesktop::handleMouse(int, int, int, int)+0x70f>
10004528:	8b 57 18             	mov    edx,DWORD PTR [edi+0x18]
1000452b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
1000452e:	83 ec 0c             	sub    esp,0xc
10004531:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004535:	01 d1                	add    ecx,edx
10004537:	51                   	push   ecx
10004538:	52                   	push   edx
10004539:	8d 50 01             	lea    edx,[eax+0x1]
1000453c:	52                   	push   edx
1000453d:	50                   	push   eax
1000453e:	53                   	push   ebx
1000453f:	e8 fc ff ff ff       	call   10004540 <NIDesktop::handleMouse(int, int, int, int)+0x42c>	10004540: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004544:	83 c4 18             	add    esp,0x18
10004547:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000454a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000454c: R_386_32	movingWin
10004550:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004556:	8b 08                	mov    ecx,DWORD PTR [eax]
10004558:	6a 00                	push   0x0
1000455a:	6a 01                	push   0x1
1000455c:	55                   	push   ebp
1000455d:	ff 72 1c             	push   DWORD PTR [edx+0x1c]
10004560:	ff 72 18             	push   DWORD PTR [edx+0x18]
10004563:	50                   	push   eax
10004564:	ff 51 28             	call   DWORD PTR [ecx+0x28]
10004567:	83 c4 14             	add    esp,0x14
1000456a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000456b: R_386_32	movingWin
1000456f:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
10004572:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10004575:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10004579:	01 c8                	add    eax,ecx
1000457b:	50                   	push   eax
1000457c:	51                   	push   ecx
1000457d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004581:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
10004585:	50                   	push   eax
10004586:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
1000458a:	52                   	push   edx
1000458b:	53                   	push   ebx
1000458c:	e8 fc ff ff ff       	call   1000458d <NIDesktop::handleMouse(int, int, int, int)+0x479>	1000458d: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int)
10004591:	83 c4 18             	add    esp,0x18
10004594:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004597:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004599: R_386_32	movingWin
1000459d:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100045a3:	8b 08                	mov    ecx,DWORD PTR [eax]
100045a5:	6a 00                	push   0x0
100045a7:	6a 01                	push   0x1
100045a9:	55                   	push   ebp
100045aa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
100045ae:	03 7a 1c             	add    edi,DWORD PTR [edx+0x1c]
100045b1:	57                   	push   edi
100045b2:	ff 72 18             	push   DWORD PTR [edx+0x18]
100045b5:	50                   	push   eax
100045b6:	ff 51 28             	call   DWORD PTR [ecx+0x28]
100045b9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100045bc:	83 c4 14             	add    esp,0x14
100045bf:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
100045c5:	8b 0a                	mov    ecx,DWORD PTR [edx]
100045c7:	6a 00                	push   0x0
100045c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
100045cc:	05 00 00 00 00       	add    eax,0x0	100045cd: R_386_32	___mouse_data
100045d1:	50                   	push   eax
100045d2:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
100045d5:	ff 73 08             	push   DWORD PTR [ebx+0x8]
100045d8:	52                   	push   edx
100045d9:	ff 51 30             	call   DWORD PTR [ecx+0x30]
100045dc:	83 c4 20             	add    esp,0x20
100045df:	85 f6                	test   esi,esi
100045e1:	0f 84 08 02 00 00    	je     100047ef <NIDesktop::handleMouse(int, int, int, int)+0x6db>
100045e7:	f6 44 24 4c 01       	test   BYTE PTR [esp+0x4c],0x1
100045ec:	0f 84 fd 01 00 00    	je     100047ef <NIDesktop::handleMouse(int, int, int, int)+0x6db>
100045f2:	8b 0d 58 87 03 10    	mov    ecx,DWORD PTR ds:0x10038758	100045f4: R_386_32	.bss
100045f8:	83 e1 01             	and    ecx,0x1
100045fb:	0f 85 ea 00 00 00    	jne    100046eb <NIDesktop::handleMouse(int, int, int, int)+0x5d7>
10004601:	a1 00 00 00 00       	mov    eax,ds:0x0	10004602: R_386_32	milliTenthsSinceBoot
10004606:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10004608: R_386_32	milliTenthsSinceBoot
1000460c:	2b 05 48 87 03 10    	sub    eax,DWORD PTR ds:0x10038748	1000460e: R_386_32	.bss
10004612:	bf b7 0b 00 00       	mov    edi,0xbb7
10004617:	1b 15 4c 87 03 10    	sbb    edx,DWORD PTR ds:0x1003874c	10004619: R_386_32	.bss
1000461d:	39 c7                	cmp    edi,eax
1000461f:	19 d1                	sbb    ecx,edx
10004621:	0f 82 95 00 00 00    	jb     100046bc <NIDesktop::handleMouse(int, int, int, int)+0x5a8>
10004627:	8b 56 1c             	mov    edx,DWORD PTR [esi+0x1c]
1000462a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
1000462d:	29 d0                	sub    eax,edx
1000462f:	83 f8 18             	cmp    eax,0x18
10004632:	0f 8f 84 00 00 00    	jg     100046bc <NIDesktop::handleMouse(int, int, int, int)+0x5a8>
10004638:	f6 46 3c 01          	test   BYTE PTR [esi+0x3c],0x1
1000463c:	75 7e                	jne    100046bc <NIDesktop::handleMouse(int, int, int, int)+0x5a8>
1000463e:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
10004642:	74 26                	je     1000466a <NIDesktop::handleMouse(int, int, int, int)+0x556>
10004644:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
10004647:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
1000464a:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
1000464d:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
10004650:	8b 46 34             	mov    eax,DWORD PTR [esi+0x34]
10004653:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
10004656:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
10004659:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
1000465c:	50                   	push   eax
1000465d:	50                   	push   eax
1000465e:	56                   	push   esi
1000465f:	53                   	push   ebx
10004660:	e8 fc ff ff ff       	call   10004661 <NIDesktop::handleMouse(int, int, int, int)+0x54d>	10004661: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
10004665:	83 c4 10             	add    esp,0x10
10004668:	eb 3b                	jmp    100046a5 <NIDesktop::handleMouse(int, int, int, int)+0x591>
1000466a:	89 56 30             	mov    DWORD PTR [esi+0x30],edx
1000466d:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
10004674:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
10004677:	c7 46 18 00 00 00 00 	mov    DWORD PTR [esi+0x18],0x0
1000467e:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
10004681:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
10004684:	89 46 34             	mov    DWORD PTR [esi+0x34],eax
10004687:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
1000468a:	89 46 38             	mov    DWORD PTR [esi+0x38],eax
1000468d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10004690:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
10004696:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
10004699:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
1000469c:	8b 80 10 04 00 00    	mov    eax,DWORD PTR [eax+0x410]
100046a2:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
100046a5:	83 ec 0c             	sub    esp,0xc
100046a8:	80 76 28 01          	xor    BYTE PTR [esi+0x28],0x1
100046ac:	56                   	push   esi
100046ad:	e8 fc ff ff ff       	call   100046ae <NIDesktop::handleMouse(int, int, int, int)+0x59a>	100046ae: R_386_PC32	NIWindow::rerender()
100046b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
100046b5:	e8 fc ff ff ff       	call   100046b6 <NIDesktop::handleMouse(int, int, int, int)+0x5a2>	100046b6: R_386_PC32	NIDesktop::completeRefresh()
100046ba:	eb 11                	jmp    100046cd <NIDesktop::handleMouse(int, int, int, int)+0x5b9>
100046bc:	8b 03                	mov    eax,DWORD PTR [ebx]
100046be:	8b 00                	mov    eax,DWORD PTR [eax]
100046c0:	39 30                	cmp    DWORD PTR [eax],esi
100046c2:	74 0c                	je     100046d0 <NIDesktop::handleMouse(int, int, int, int)+0x5bc>
100046c4:	50                   	push   eax
100046c5:	50                   	push   eax
100046c6:	56                   	push   esi
100046c7:	53                   	push   ebx
100046c8:	e8 fc ff ff ff       	call   100046c9 <NIDesktop::handleMouse(int, int, int, int)+0x5b5>	100046c9: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
100046cd:	83 c4 10             	add    esp,0x10
100046d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100046d1: R_386_32	milliTenthsSinceBoot
100046d5:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	100046d7: R_386_32	milliTenthsSinceBoot
100046db:	a3 48 87 03 10       	mov    ds:0x10038748,eax	100046dc: R_386_32	.bss
100046e0:	89 15 4c 87 03 10    	mov    DWORD PTR ds:0x1003874c,edx	100046e2: R_386_32	.bss
100046e6:	e9 04 01 00 00       	jmp    100047ef <NIDesktop::handleMouse(int, int, int, int)+0x6db>
100046eb:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100046ed: R_386_32	movingWin
100046f2:	0f 85 f7 00 00 00    	jne    100047ef <NIDesktop::handleMouse(int, int, int, int)+0x6db>
100046f8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100046fb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
100046fe:	89 d1                	mov    ecx,edx
10004700:	83 e8 0e             	sub    eax,0xe
10004703:	2b 4e 1c             	sub    ecx,DWORD PTR [esi+0x1c]
10004706:	39 c8                	cmp    eax,ecx
10004708:	7f 37                	jg     10004741 <NIDesktop::handleMouse(int, int, int, int)+0x62d>
1000470a:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
1000470e:	75 31                	jne    10004741 <NIDesktop::handleMouse(int, int, int, int)+0x62d>
10004710:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10004713:	c7 43 10 00 04 00 00 	mov    DWORD PTR [ebx+0x10],0x400
1000471a:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	1000471c: R_386_32	movingWin
10004720:	55                   	push   ebp
10004721:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	10004723: R_386_32	movingType
1000472b:	55                   	push   ebp
1000472c:	a3 54 87 03 10       	mov    ds:0x10038754,eax	1000472d: R_386_32	.bss
10004731:	56                   	push   esi
10004732:	89 15 50 87 03 10    	mov    DWORD PTR ds:0x10038750,edx	10004734: R_386_32	.bss
10004738:	53                   	push   ebx
10004739:	e8 fc ff ff ff       	call   1000473a <NIDesktop::handleMouse(int, int, int, int)+0x626>	1000473a: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
1000473e:	83 c4 10             	add    esp,0x10
10004741:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004744:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
10004747:	89 d1                	mov    ecx,edx
10004749:	83 e8 0e             	sub    eax,0xe
1000474c:	2b 4e 18             	sub    ecx,DWORD PTR [esi+0x18]
1000474f:	39 c8                	cmp    eax,ecx
10004751:	7f 55                	jg     100047a8 <NIDesktop::handleMouse(int, int, int, int)+0x694>
10004753:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
10004757:	75 4f                	jne    100047a8 <NIDesktop::handleMouse(int, int, int, int)+0x694>
10004759:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000475b: R_386_32	movingWin
10004760:	75 33                	jne    10004795 <NIDesktop::handleMouse(int, int, int, int)+0x681>
10004762:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10004765:	c7 43 10 00 05 00 00 	mov    DWORD PTR [ebx+0x10],0x500
1000476c:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	1000476e: R_386_32	movingWin
10004772:	57                   	push   edi
10004773:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	10004775: R_386_32	movingType
1000477d:	57                   	push   edi
1000477e:	89 15 54 87 03 10    	mov    DWORD PTR ds:0x10038754,edx	10004780: R_386_32	.bss
10004784:	56                   	push   esi
10004785:	a3 50 87 03 10       	mov    ds:0x10038750,eax	10004786: R_386_32	.bss
1000478a:	53                   	push   ebx
1000478b:	e8 fc ff ff ff       	call   1000478c <NIDesktop::handleMouse(int, int, int, int)+0x678>	1000478c: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10004790:	83 c4 10             	add    esp,0x10
10004793:	eb 13                	jmp    100047a8 <NIDesktop::handleMouse(int, int, int, int)+0x694>
10004795:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	10004797: R_386_32	movingType
1000479f:	c7 43 10 00 03 00 00 	mov    DWORD PTR [ebx+0x10],0x300
100047a6:	eb 47                	jmp    100047ef <NIDesktop::handleMouse(int, int, int, int)+0x6db>
100047a8:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100047aa: R_386_32	movingWin
100047af:	75 3e                	jne    100047ef <NIDesktop::handleMouse(int, int, int, int)+0x6db>
100047b1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
100047b4:	2b 46 1c             	sub    eax,DWORD PTR [esi+0x1c]
100047b7:	83 f8 18             	cmp    eax,0x18
100047ba:	7f 33                	jg     100047ef <NIDesktop::handleMouse(int, int, int, int)+0x6db>
100047bc:	80 7e 28 00          	cmp    BYTE PTR [esi+0x28],0x0
100047c0:	75 2d                	jne    100047ef <NIDesktop::handleMouse(int, int, int, int)+0x6db>
100047c2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
100047c5:	2b 56 18             	sub    edx,DWORD PTR [esi+0x18]
100047c8:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	100047ca: R_386_32	movingWin
100047ce:	51                   	push   ecx
100047cf:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	100047d1: R_386_32	movingType
100047d9:	51                   	push   ecx
100047da:	89 15 54 87 03 10    	mov    DWORD PTR ds:0x10038754,edx	100047dc: R_386_32	.bss
100047e0:	56                   	push   esi
100047e1:	a3 50 87 03 10       	mov    ds:0x10038750,eax	100047e2: R_386_32	.bss
100047e6:	53                   	push   ebx
100047e7:	e8 fc ff ff ff       	call   100047e8 <NIDesktop::handleMouse(int, int, int, int)+0x6d4>	100047e8: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
100047ec:	83 c4 10             	add    esp,0x10
100047ef:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100047f2:	83 ec 0c             	sub    esp,0xc
100047f5:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
100047fb:	8b 0a                	mov    ecx,DWORD PTR [edx]
100047fd:	6a 00                	push   0x0
100047ff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
10004802:	05 00 00 00 00       	add    eax,0x0	10004803: R_386_32	___mouse_data
10004807:	50                   	push   eax
10004808:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
1000480b:	ff 73 08             	push   DWORD PTR [ebx+0x8]
1000480e:	52                   	push   edx
1000480f:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10004812:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
10004816:	a3 58 87 03 10       	mov    ds:0x10038758,eax	10004817: R_386_32	.bss
1000481b:	83 c4 4c             	add    esp,0x4c
1000481e:	5b                   	pop    ebx
1000481f:	5e                   	pop    esi
10004820:	5f                   	pop    edi
10004821:	5d                   	pop    ebp
10004822:	c3                   	ret    
10004823:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004826:	89 6f 20             	mov    DWORD PTR [edi+0x20],ebp
10004829:	83 ec 0c             	sub    esp,0xc
1000482c:	89 47 24             	mov    DWORD PTR [edi+0x24],eax
1000482f:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004831: R_386_32	movingWin
10004839:	57                   	push   edi
1000483a:	e8 fc ff ff ff       	call   1000483b <NIDesktop::handleMouse(int, int, int, int)+0x727>	1000483b: R_386_PC32	NIWindow::rerender()
1000483f:	59                   	pop    ecx
10004840:	5d                   	pop    ebp
10004841:	57                   	push   edi
10004842:	53                   	push   ebx
10004843:	e8 fc ff ff ff       	call   10004844 <NIDesktop::handleMouse(int, int, int, int)+0x730>	10004844: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004848:	58                   	pop    eax
10004849:	5a                   	pop    edx
1000484a:	57                   	push   edi
1000484b:	53                   	push   ebx
1000484c:	e8 fc ff ff ff       	call   1000484d <NIDesktop::handleMouse(int, int, int, int)+0x739>	1000484d: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004851:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10004858:	83 c4 10             	add    esp,0x10
1000485b:	e9 7f fd ff ff       	jmp    100045df <NIDesktop::handleMouse(int, int, int, int)+0x4cb>
10004860:	89 78 18             	mov    DWORD PTR [eax+0x18],edi
10004863:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004865: R_386_32	movingWin
1000486d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
10004870:	2b 15 50 87 03 10    	sub    edx,DWORD PTR ds:0x10038750	10004872: R_386_32	.bss
10004876:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
10004879:	52                   	push   edx
1000487a:	52                   	push   edx
1000487b:	50                   	push   eax
1000487c:	53                   	push   ebx
1000487d:	e8 fc ff ff ff       	call   1000487e <NIDesktop::handleMouse(int, int, int, int)+0x76a>	1000487e: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004882:	83 c4 10             	add    esp,0x10
10004885:	e9 1f fb ff ff       	jmp    100043a9 <NIDesktop::handleMouse(int, int, int, int)+0x295>

1000488a <NiHandleMouse(int, int, int, int)>:
1000488a:	83 ec 18             	sub    esp,0x18
1000488d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004891:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004895:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004899:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000489d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000489f: R_386_32	mouseDesktop
100048a3:	e8 fc ff ff ff       	call   100048a4 <NiHandleMouse(int, int, int, int)+0x1a>	100048a4: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
100048a8:	83 c4 2c             	add    esp,0x2c
100048ab:	c3                   	ret    

100048ac <drawVGAChar(int, int, int)>:
100048ac:	55                   	push   ebp
100048ad:	57                   	push   edi
100048ae:	56                   	push   esi
100048af:	53                   	push   ebx
100048b0:	31 db                	xor    ebx,ebx
100048b2:	83 ec 1c             	sub    esp,0x1c
100048b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100048b9:	c1 e0 04             	shl    eax,0x4
100048bc:	89 04 24             	mov    DWORD PTR [esp],eax
100048bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100048c3:	c1 e0 04             	shl    eax,0x4
100048c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100048ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100048ce:	c1 e0 03             	shl    eax,0x3
100048d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100048d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
100048d8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
100048dc:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	100048df: R_386_32	cp
100048e3:	8d 3c 19             	lea    edi,[ecx+ebx*1]
100048e6:	31 f6                	xor    esi,esi
100048e8:	84 c0                	test   al,al
100048ea:	79 22                	jns    1000490e <drawVGAChar(int, int, int)+0x62>
100048ec:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100048f0:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100048f2: R_386_32	screen
100048f6:	8b 0a                	mov    ecx,DWORD PTR [edx]
100048f8:	6a 00                	push   0x0
100048fa:	57                   	push   edi
100048fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100048ff:	8d 2c 06             	lea    ebp,[esi+eax*1]
10004902:	55                   	push   ebp
10004903:	52                   	push   edx
10004904:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10004907:	83 c4 10             	add    esp,0x10
1000490a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
1000490e:	d1 e0                	shl    eax,1
10004910:	46                   	inc    esi
10004911:	83 fe 08             	cmp    esi,0x8
10004914:	75 d2                	jne    100048e8 <drawVGAChar(int, int, int)+0x3c>
10004916:	43                   	inc    ebx
10004917:	83 fb 10             	cmp    ebx,0x10
1000491a:	75 b9                	jne    100048d5 <drawVGAChar(int, int, int)+0x29>
1000491c:	83 c4 1c             	add    esp,0x1c
1000491f:	5b                   	pop    ebx
10004920:	5e                   	pop    esi
10004921:	5f                   	pop    edi
10004922:	5d                   	pop    ebp
10004923:	c3                   	ret    

10004924 <monikaBsod(char*)>:
10004924:	55                   	push   ebp
10004925:	57                   	push   edi
10004926:	31 ff                	xor    edi,edi
10004928:	56                   	push   esi
10004929:	53                   	push   ebx
1000492a:	31 db                	xor    ebx,ebx
1000492c:	83 ec 24             	sub    esp,0x24
1000492f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004930: R_386_32	screen
10004934:	8b 10                	mov    edx,DWORD PTR [eax]
10004936:	68 ff ff ff 00       	push   0xffffff
1000493b:	50                   	push   eax
1000493c:	ff 52 40             	call   DWORD PTR [edx+0x40]
1000493f:	83 c4 10             	add    esp,0x10
10004942:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	10004944: R_386_32	justMonika
10004948:	8d 43 01             	lea    eax,[ebx+0x1]
1000494b:	84 c9                	test   cl,cl
1000494d:	79 0e                	jns    1000495d <monikaBsod(char*)+0x39>
1000494f:	8d 51 80             	lea    edx,[ecx-0x80]
10004952:	83 c3 02             	add    ebx,0x2
10004955:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	10004957: R_386_32	justMonika
1000495b:	eb 04                	jmp    10004961 <monikaBsod(char*)+0x3d>
1000495d:	89 c3                	mov    ebx,eax
1000495f:	b2 01                	mov    dl,0x1
10004961:	0f b6 c1             	movzx  eax,cl
10004964:	83 e1 03             	and    ecx,0x3
10004967:	89 c6                	mov    esi,eax
10004969:	6b c9 55             	imul   ecx,ecx,0x55
1000496c:	c1 fe 05             	sar    esi,0x5
1000496f:	c1 f8 02             	sar    eax,0x2
10004972:	83 e6 03             	and    esi,0x3
10004975:	83 e0 07             	and    eax,0x7
10004978:	6b f6 55             	imul   esi,esi,0x55
1000497b:	6b c0 24             	imul   eax,eax,0x24
1000497e:	c1 e6 10             	shl    esi,0x10
10004981:	c1 e0 08             	shl    eax,0x8
10004984:	09 f0                	or     eax,esi
10004986:	31 f6                	xor    esi,esi
10004988:	09 c8                	or     eax,ecx
1000498a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000498e:	0f b6 c2             	movzx  eax,dl
10004991:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004995:	8d 04 37             	lea    eax,[edi+esi*1]
10004998:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
1000499c:	7f 10                	jg     100049ae <monikaBsod(char*)+0x8a>
1000499e:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
100049a2:	81 ff ff af 04 00    	cmp    edi,0x4afff
100049a8:	7e 98                	jle    10004942 <monikaBsod(char*)+0x1e>
100049aa:	31 db                	xor    ebx,ebx
100049ac:	eb 25                	jmp    100049d3 <monikaBsod(char*)+0xaf>
100049ae:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100049b0: R_386_32	screen
100049b4:	b9 80 02 00 00       	mov    ecx,0x280
100049b9:	8b 2a                	mov    ebp,DWORD PTR [edx]
100049bb:	46                   	inc    esi
100049bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
100049c0:	99                   	cdq    
100049c1:	f7 f9                	idiv   ecx
100049c3:	50                   	push   eax
100049c4:	52                   	push   edx
100049c5:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100049c7: R_386_32	screen
100049cb:	ff 55 24             	call   DWORD PTR [ebp+0x24]
100049ce:	83 c4 10             	add    esp,0x10
100049d1:	eb c2                	jmp    10004995 <monikaBsod(char*)+0x71>
100049d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100049d7:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
100049db:	84 c0                	test   al,al
100049dd:	74 1d                	je     100049fc <monikaBsod(char*)+0xd8>
100049df:	b9 19 00 00 00       	mov    ecx,0x19
100049e4:	52                   	push   edx
100049e5:	50                   	push   eax
100049e6:	89 d8                	mov    eax,ebx
100049e8:	43                   	inc    ebx
100049e9:	99                   	cdq    
100049ea:	f7 f9                	idiv   ecx
100049ec:	83 c0 0a             	add    eax,0xa
100049ef:	42                   	inc    edx
100049f0:	50                   	push   eax
100049f1:	52                   	push   edx
100049f2:	e8 fc ff ff ff       	call   100049f3 <monikaBsod(char*)+0xcf>	100049f3: R_386_PC32	drawVGAChar(int, int, int)
100049f7:	83 c4 10             	add    esp,0x10
100049fa:	eb d7                	jmp    100049d3 <monikaBsod(char*)+0xaf>
100049fc:	f4                   	hlt    
100049fd:	eb fd                	jmp    100049fc <monikaBsod(char*)+0xd8>

100049ff <NiInstallSysHooks()>:
100049ff:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004a01: R_386_32	guiPanicHandler
	10004a05: R_386_32	monikaBsod(char*)
10004a09:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10004a0b: R_386_32	systemCallHandlers
	10004a0f: R_386_32	NiSystemCallHandler(regs*)
10004a13:	c3                   	ret    

10004a14 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
10004a14:	56                   	push   esi
10004a15:	53                   	push   ebx
10004a16:	83 ec 10             	sub    esp,0x10
10004a19:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10004a1d:	68 27 54 00 10       	push   0x10005427	10004a1e: R_386_32	.text
10004a22:	e8 fc ff ff ff       	call   10004a23 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	10004a23: R_386_PC32	Dbg::kprintf(char const*, ...)
10004a27:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
10004a2e:	e8 fc ff ff ff       	call   10004a2f <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x1b>	10004a2f: R_386_PC32	malloc
10004a33:	89 c6                	mov    esi,eax
10004a35:	58                   	pop    eax
10004a36:	5a                   	pop    edx
10004a37:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10004a3d:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10004a43:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10004a49:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10004a4f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004a51: R_386_32	ctxt
10004a55:	56                   	push   esi
10004a56:	e8 fc ff ff ff       	call   10004a57 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x43>	10004a57: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10004a5b:	83 c4 18             	add    esp,0x18
10004a5e:	56                   	push   esi
10004a5f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004a61: R_386_32	desktop
10004a65:	e8 fc ff ff ff       	call   10004a66 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x52>	10004a66: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10004a6a:	59                   	pop    ecx
10004a6b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004a6d: R_386_32	desktop
10004a71:	e8 fc ff ff ff       	call   10004a72 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	10004a72: R_386_PC32	NIDesktop::completeRefresh()
10004a76:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10004a7c:	89 34 24             	mov    DWORD PTR [esp],esi
10004a7f:	e8 fc ff ff ff       	call   10004a80 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x6c>	10004a80: R_386_PC32	NIWindow::drawBasicWindow()
10004a84:	83 c4 14             	add    esp,0x14
10004a87:	31 c0                	xor    eax,eax
10004a89:	31 d2                	xor    edx,edx
10004a8b:	5b                   	pop    ebx
10004a8c:	5e                   	pop    esi
10004a8d:	c3                   	ret    

10004a8e <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004a8e:	55                   	push   ebp
10004a8f:	57                   	push   edi
10004a90:	56                   	push   esi
10004a91:	31 f6                	xor    esi,esi
10004a93:	53                   	push   ebx
10004a94:	83 ec 28             	sub    esp,0x28
10004a97:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10004a9b:	68 42 54 00 10       	push   0x10005442	10004a9c: R_386_32	.text
10004aa0:	e8 fc ff ff ff       	call   10004aa1 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x13>	10004aa1: R_386_PC32	Dbg::kprintf(char const*, ...)
10004aa5:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10004aab:	83 c4 10             	add    esp,0x10
10004aae:	31 c0                	xor    eax,eax
10004ab0:	39 73 24             	cmp    DWORD PTR [ebx+0x24],esi
10004ab3:	7e 30                	jle    10004ae5 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x57>
10004ab5:	31 ff                	xor    edi,edi
10004ab7:	39 7b 20             	cmp    DWORD PTR [ebx+0x20],edi
10004aba:	7e 26                	jle    10004ae2 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x54>
10004abc:	8b 95 b8 00 00 00    	mov    edx,DWORD PTR [ebp+0xb8]
10004ac2:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
10004ac5:	83 fa ff             	cmp    edx,0xffffffff
10004ac8:	74 14                	je     10004ade <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x50>
10004aca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004ace:	52                   	push   edx
10004acf:	56                   	push   esi
10004ad0:	57                   	push   edi
10004ad1:	53                   	push   ebx
10004ad2:	e8 fc ff ff ff       	call   10004ad3 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x45>	10004ad3: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004ad7:	83 c4 10             	add    esp,0x10
10004ada:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004ade:	40                   	inc    eax
10004adf:	47                   	inc    edi
10004ae0:	eb d5                	jmp    10004ab7 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x29>
10004ae2:	46                   	inc    esi
10004ae3:	eb cb                	jmp    10004ab0 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x22>
10004ae5:	50                   	push   eax
10004ae6:	50                   	push   eax
10004ae7:	53                   	push   ebx
10004ae8:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004aea: R_386_32	desktop
10004aee:	e8 fc ff ff ff       	call   10004aef <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x61>	10004aef: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*)
10004af3:	83 c4 2c             	add    esp,0x2c
10004af6:	31 c0                	xor    eax,eax
10004af8:	5b                   	pop    ebx
10004af9:	31 d2                	xor    edx,edx
10004afb:	5e                   	pop    esi
10004afc:	5f                   	pop    edi
10004afd:	5d                   	pop    ebp
10004afe:	c3                   	ret    

10004aff <NiSystemCallHandler(regs*)>:
10004aff:	53                   	push   ebx
10004b00:	83 ec 08             	sub    esp,0x8
10004b03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004b07:	8b 59 20             	mov    ebx,DWORD PTR [ecx+0x20]
10004b0a:	83 fb 04             	cmp    ebx,0x4
10004b0d:	74 1d                	je     10004b2c <NiSystemCallHandler(regs*)+0x2d>
10004b0f:	83 fb 05             	cmp    ebx,0x5
10004b12:	74 2a                	je     10004b3e <NiSystemCallHandler(regs*)+0x3f>
10004b14:	83 c8 ff             	or     eax,0xffffffff
10004b17:	85 db                	test   ebx,ebx
10004b19:	89 c2                	mov    edx,eax
10004b1b:	75 44                	jne    10004b61 <NiSystemCallHandler(regs*)+0x62>
10004b1d:	50                   	push   eax
10004b1e:	50                   	push   eax
10004b1f:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10004b22:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10004b25:	e8 fc ff ff ff       	call   10004b26 <NiSystemCallHandler(regs*)+0x27>	10004b26: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
10004b2a:	eb 0d                	jmp    10004b39 <NiSystemCallHandler(regs*)+0x3a>
10004b2c:	50                   	push   eax
10004b2d:	50                   	push   eax
10004b2e:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10004b31:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10004b34:	e8 fc ff ff ff       	call   10004b35 <NiSystemCallHandler(regs*)+0x36>	10004b35: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
10004b39:	83 c4 10             	add    esp,0x10
10004b3c:	eb 23                	jmp    10004b61 <NiSystemCallHandler(regs*)+0x62>
10004b3e:	83 ec 0c             	sub    esp,0xc
10004b41:	8b 59 24             	mov    ebx,DWORD PTR [ecx+0x24]
10004b44:	68 64 54 00 10       	push   0x10005464	10004b45: R_386_32	.text
10004b49:	e8 fc ff ff ff       	call   10004b4a <NiSystemCallHandler(regs*)+0x4b>	10004b4a: R_386_PC32	Dbg::kprintf(char const*, ...)
10004b4e:	58                   	pop    eax
10004b4f:	ff b3 a0 00 00 00    	push   DWORD PTR [ebx+0xa0]
10004b55:	e8 fc ff ff ff       	call   10004b56 <NiSystemCallHandler(regs*)+0x57>	10004b56: R_386_PC32	NIWindow::drawBasicWindow()
10004b5a:	83 c4 10             	add    esp,0x10
10004b5d:	31 c0                	xor    eax,eax
10004b5f:	31 d2                	xor    edx,edx
10004b61:	83 c4 08             	add    esp,0x8
10004b64:	5b                   	pop    ebx
10004b65:	c3                   	ret    

10004b66 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10004b66:	83 ec 18             	sub    esp,0x18
10004b69:	68 64 54 00 10       	push   0x10005464	10004b6a: R_386_32	.text
10004b6e:	e8 fc ff ff ff       	call   10004b6f <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x9>	10004b6f: R_386_PC32	Dbg::kprintf(char const*, ...)
10004b73:	58                   	pop    eax
10004b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004b78:	ff b0 a0 00 00 00    	push   DWORD PTR [eax+0xa0]
10004b7e:	e8 fc ff ff ff       	call   10004b7f <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x19>	10004b7f: R_386_PC32	NIWindow::drawBasicWindow()
10004b83:	31 c0                	xor    eax,eax
10004b85:	31 d2                	xor    edx,edx
10004b87:	83 c4 1c             	add    esp,0x1c
10004b8a:	c3                   	ret    
10004b8b:	90                   	nop

10004b8c <NIWindow::invalidate()>:
10004b8c:	53                   	push   ebx
10004b8d:	83 ec 08             	sub    esp,0x8
10004b90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004b94:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
10004b98:	74 1d                	je     10004bb7 <NIWindow::invalidate()+0x2b>
10004b9a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
10004b9e:	74 17                	je     10004bb7 <NIWindow::invalidate()+0x2b>
10004ba0:	83 ec 0c             	sub    esp,0xc
10004ba3:	ff 73 08             	push   DWORD PTR [ebx+0x8]
10004ba6:	e8 fc ff ff ff       	call   10004ba7 <NIWindow::invalidate()+0x1b>	10004ba7: R_386_PC32	free
10004bab:	59                   	pop    ecx
10004bac:	ff 73 14             	push   DWORD PTR [ebx+0x14]
10004baf:	e8 fc ff ff ff       	call   10004bb0 <NIWindow::invalidate()+0x24>	10004bb0: R_386_PC32	free
10004bb4:	83 c4 10             	add    esp,0x10
10004bb7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10004bbe:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
10004bc5:	c6 43 0c 00          	mov    BYTE PTR [ebx+0xc],0x0
10004bc9:	83 c4 08             	add    esp,0x8
10004bcc:	5b                   	pop    ebx
10004bcd:	c3                   	ret    

10004bce <NIWindow::putpixel(int, int, unsigned int)>:
10004bce:	56                   	push   esi
10004bcf:	53                   	push   ebx
10004bd0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10004bd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004bd8:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
10004bdb:	0f af 43 20          	imul   eax,DWORD PTR [ebx+0x20]
10004bdf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004be3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10004be7:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004bea:	83 fe 04             	cmp    esi,0x4
10004bed:	75 05                	jne    10004bf4 <NIWindow::putpixel(int, int, unsigned int)+0x26>
10004bef:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
10004bf2:	eb 0e                	jmp    10004c02 <NIWindow::putpixel(int, int, unsigned int)+0x34>
10004bf4:	83 fe 02             	cmp    esi,0x2
10004bf7:	75 06                	jne    10004bff <NIWindow::putpixel(int, int, unsigned int)+0x31>
10004bf9:	66 89 0c 42          	mov    WORD PTR [edx+eax*2],cx
10004bfd:	eb 03                	jmp    10004c02 <NIWindow::putpixel(int, int, unsigned int)+0x34>
10004bff:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
10004c02:	5b                   	pop    ebx
10004c03:	5e                   	pop    esi
10004c04:	c3                   	ret    
10004c05:	90                   	nop

10004c06 <NIWindow::drawBasicWindow()>:
10004c06:	55                   	push   ebp
10004c07:	57                   	push   edi
10004c08:	56                   	push   esi
10004c09:	31 f6                	xor    esi,esi
10004c0b:	53                   	push   ebx
10004c0c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
10004c10:	39 75 24             	cmp    DWORD PTR [ebp+0x24],esi
10004c13:	7e 2e                	jle    10004c43 <NIWindow::drawBasicWindow()+0x3d>
10004c15:	31 db                	xor    ebx,ebx
10004c17:	83 fe 19             	cmp    esi,0x19
10004c1a:	0f 9e c3             	setle  bl
10004c1d:	31 ff                	xor    edi,edi
10004c1f:	4b                   	dec    ebx
10004c20:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
10004c26:	81 c3 ff ff ff 00    	add    ebx,0xffffff
10004c2c:	39 7d 20             	cmp    DWORD PTR [ebp+0x20],edi
10004c2f:	7e 0f                	jle    10004c40 <NIWindow::drawBasicWindow()+0x3a>
10004c31:	53                   	push   ebx
10004c32:	56                   	push   esi
10004c33:	57                   	push   edi
10004c34:	47                   	inc    edi
10004c35:	55                   	push   ebp
10004c36:	e8 fc ff ff ff       	call   10004c37 <NIWindow::drawBasicWindow()+0x31>	10004c37: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10004c3b:	83 c4 10             	add    esp,0x10
10004c3e:	eb ec                	jmp    10004c2c <NIWindow::drawBasicWindow()+0x26>
10004c40:	46                   	inc    esi
10004c41:	eb cd                	jmp    10004c10 <NIWindow::drawBasicWindow()+0xa>
10004c43:	5b                   	pop    ebx
10004c44:	5e                   	pop    esi
10004c45:	5f                   	pop    edi
10004c46:	5d                   	pop    ebp
10004c47:	c3                   	ret    

10004c48 <NIWindow::rerender()>:
10004c48:	57                   	push   edi
10004c49:	56                   	push   esi
10004c4a:	53                   	push   ebx
10004c4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10004c4f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
10004c53:	74 0c                	je     10004c61 <NIWindow::rerender()+0x19>
10004c55:	83 ec 0c             	sub    esp,0xc
10004c58:	53                   	push   ebx
10004c59:	e8 fc ff ff ff       	call   10004c5a <NIWindow::rerender()+0x12>	10004c5a: R_386_PC32	NIWindow::invalidate()
10004c5e:	83 c4 10             	add    esp,0x10
10004c61:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10004c64:	83 ec 0c             	sub    esp,0xc
10004c67:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
10004c6a:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10004c71:	50                   	push   eax
10004c72:	e8 fc ff ff ff       	call   10004c73 <NIWindow::rerender()+0x2b>	10004c73: R_386_PC32	malloc
10004c77:	0f af 73 20          	imul   esi,DWORD PTR [ebx+0x20]
10004c7b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10004c7e:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
10004c82:	89 34 24             	mov    DWORD PTR [esp],esi
10004c85:	e8 fc ff ff ff       	call   10004c86 <NIWindow::rerender()+0x3e>	10004c86: R_386_PC32	malloc
10004c8a:	83 c4 10             	add    esp,0x10
10004c8d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10004c90:	31 c0                	xor    eax,eax
10004c92:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004c95:	7e 6a                	jle    10004d01 <NIWindow::rerender()+0xb9>
10004c97:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004c9e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10004ca1:	01 d6                	add    esi,edx
10004ca3:	83 f8 06             	cmp    eax,0x6
10004ca6:	7f 1b                	jg     10004cc3 <NIWindow::rerender()+0x7b>
10004ca8:	8b 0c 85 00 00 00 00 	mov    ecx,DWORD PTR [eax*4+0x0]	10004cab: R_386_32	curveLookup7
10004caf:	66 89 0e             	mov    WORD PTR [esi],cx
10004cb2:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
10004cb5:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10004cb8: R_386_32	curveLookup7
10004cbc:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
10004cc1:	eb 3b                	jmp    10004cfe <NIWindow::rerender()+0xb6>
10004cc3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004cc6:	8d 79 fa             	lea    edi,[ecx-0x6]
10004cc9:	39 c7                	cmp    edi,eax
10004ccb:	7f 22                	jg     10004cef <NIWindow::rerender()+0xa7>
10004ccd:	29 c1                	sub    ecx,eax
10004ccf:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10004cd2: R_386_32	curveLookup7
10004cd6:	66 89 0e             	mov    WORD PTR [esi],cx
10004cd9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004cdc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10004cdf:	29 c1                	sub    ecx,eax
10004ce1:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10004ce4: R_386_32	curveLookup7
10004ce8:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
10004ced:	eb 0f                	jmp    10004cfe <NIWindow::rerender()+0xb6>
10004cef:	66 c7 06 00 00       	mov    WORD PTR [esi],0x0
10004cf4:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
10004cf7:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
10004cfe:	40                   	inc    eax
10004cff:	eb 91                	jmp    10004c92 <NIWindow::rerender()+0x4a>
10004d01:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
10004d05:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10004d09:	5b                   	pop    ebx
10004d0a:	5e                   	pop    esi
10004d0b:	5f                   	pop    edi
10004d0c:	e9 f5 fe ff ff       	jmp    10004c06 <NIWindow::drawBasicWindow()>
10004d11:	90                   	nop

10004d12 <NIWindow::changeContext(NIContext*, int, int)>:
10004d12:	55                   	push   ebp
10004d13:	57                   	push   edi
10004d14:	56                   	push   esi
10004d15:	53                   	push   ebx
10004d16:	83 ec 18             	sub    esp,0x18
10004d19:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10004d1d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
10004d21:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10004d25:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10004d29:	53                   	push   ebx
10004d2a:	e8 fc ff ff ff       	call   10004d2b <NIWindow::changeContext(NIContext*, int, int)+0x19>	10004d2b: R_386_PC32	NIWindow::invalidate()
10004d2f:	89 33                	mov    DWORD PTR [ebx],esi
10004d31:	89 6b 18             	mov    DWORD PTR [ebx+0x18],ebp
10004d34:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
10004d37:	83 c4 10             	add    esp,0x10
10004d3a:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
10004d40:	83 f8 08             	cmp    eax,0x8
10004d43:	7f 09                	jg     10004d4e <NIWindow::changeContext(NIContext*, int, int)+0x3c>
10004d45:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
10004d4c:	eb 15                	jmp    10004d63 <NIWindow::changeContext(NIContext*, int, int)+0x51>
10004d4e:	83 f8 10             	cmp    eax,0x10
10004d51:	7f 09                	jg     10004d5c <NIWindow::changeContext(NIContext*, int, int)+0x4a>
10004d53:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
10004d5a:	eb 07                	jmp    10004d63 <NIWindow::changeContext(NIContext*, int, int)+0x51>
10004d5c:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
10004d63:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10004d67:	83 c4 0c             	add    esp,0xc
10004d6a:	5b                   	pop    ebx
10004d6b:	5e                   	pop    esi
10004d6c:	5f                   	pop    edi
10004d6d:	5d                   	pop    ebp
10004d6e:	e9 d5 fe ff ff       	jmp    10004c48 <NIWindow::rerender()>
10004d73:	90                   	nop

10004d74 <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
10004d74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004d78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10004d7c:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
10004d80:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
10004d83:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
10004d8a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10004d8e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
10004d92:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
10004d95:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10004d9c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10004da3:	e9 6a ff ff ff       	jmp    10004d12 <NIWindow::changeContext(NIContext*, int, int)>

10004da8 <NIWindow::request()>:
10004da8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004dac:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
10004db0:	75 05                	jne    10004db7 <NIWindow::request()+0xf>
10004db2:	e9 91 fe ff ff       	jmp    10004c48 <NIWindow::rerender()>
10004db7:	c3                   	ret    

10004db8 <NIWindow::SHADOW_TEST()>:
10004db8:	55                   	push   ebp
10004db9:	57                   	push   edi
10004dba:	56                   	push   esi
10004dbb:	53                   	push   ebx
10004dbc:	83 ec 28             	sub    esp,0x28
10004dbf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10004dc3:	53                   	push   ebx
10004dc4:	e8 fc ff ff ff       	call   10004dc5 <NIWindow::SHADOW_TEST()+0xd>	10004dc5: R_386_PC32	NIWindow::request()
10004dc9:	83 c4 10             	add    esp,0x10
10004dcc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
10004dcf:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004dd2:	74 10                	je     10004de4 <NIWindow::SHADOW_TEST()+0x2c>
10004dd4:	83 ec 0c             	sub    esp,0xc
10004dd7:	68 83 54 00 10       	push   0x10005483	10004dd8: R_386_32	.text
10004ddc:	e8 fc ff ff ff       	call   10004ddd <NIWindow::SHADOW_TEST()+0x25>	10004ddd: R_386_PC32	KePanic(char const*)
10004de1:	83 c4 10             	add    esp,0x10
10004de4:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10004de8:	0f 85 28 01 00 00    	jne    10004f16 <NIWindow::SHADOW_TEST()+0x15e>
10004dee:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
10004df6:	31 ff                	xor    edi,edi
10004df8:	39 7b 24             	cmp    DWORD PTR [ebx+0x24],edi
10004dfb:	0f 8e 15 01 00 00    	jle    10004f16 <NIWindow::SHADOW_TEST()+0x15e>
10004e01:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10004e04:	8d 04 b8             	lea    eax,[eax+edi*4]
10004e07:	0f b7 30             	movzx  esi,WORD PTR [eax]
10004e0a:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
10004e0e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
10004e12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004e16:	89 34 24             	mov    DWORD PTR [esp],esi
10004e19:	8b 6b 20             	mov    ebp,DWORD PTR [ebx+0x20]
10004e1c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
10004e1f:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
10004e23:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
10004e26:	0f 8e d4 00 00 00    	jle    10004f00 <NIWindow::SHADOW_TEST()+0x148>
10004e2c:	83 ff 05             	cmp    edi,0x5
10004e2f:	7e 1f                	jle    10004e50 <NIWindow::SHADOW_TEST()+0x98>
10004e31:	8d 41 fb             	lea    eax,[ecx-0x5]
10004e34:	39 f8                	cmp    eax,edi
10004e36:	7e 18                	jle    10004e50 <NIWindow::SHADOW_TEST()+0x98>
10004e38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004e3c:	83 c0 05             	add    eax,0x5
10004e3f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004e42:	7d 0c                	jge    10004e50 <NIWindow::SHADOW_TEST()+0x98>
10004e44:	8d 45 fb             	lea    eax,[ebp-0x5]
10004e47:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10004e4a:	0f 8f a8 00 00 00    	jg     10004ef8 <NIWindow::SHADOW_TEST()+0x140>
10004e50:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
10004e54:	be ea 01 00 00       	mov    esi,0x1ea
10004e59:	29 f9                	sub    ecx,edi
10004e5b:	89 f0                	mov    eax,esi
10004e5d:	83 c1 04             	add    ecx,0x4
10004e60:	99                   	cdq    
10004e61:	f7 f9                	idiv   ecx
10004e63:	89 c1                	mov    ecx,eax
10004e65:	89 f0                	mov    eax,esi
10004e67:	99                   	cdq    
10004e68:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004e6c:	83 f8 0a             	cmp    eax,0xa
10004e6f:	7d 05                	jge    10004e76 <NIWindow::SHADOW_TEST()+0xbe>
10004e71:	b8 0a 00 00 00       	mov    eax,0xa
10004e76:	39 c1                	cmp    ecx,eax
10004e78:	7d 02                	jge    10004e7c <NIWindow::SHADOW_TEST()+0xc4>
10004e7a:	89 c1                	mov    ecx,eax
10004e7c:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
10004e7f:	b8 ea 01 00 00       	mov    eax,0x1ea
10004e84:	83 c5 04             	add    ebp,0x4
10004e87:	99                   	cdq    
10004e88:	f7 fd                	idiv   ebp
10004e8a:	89 c6                	mov    esi,eax
10004e8c:	83 f8 0a             	cmp    eax,0xa
10004e8f:	7d 05                	jge    10004e96 <NIWindow::SHADOW_TEST()+0xde>
10004e91:	be 0a 00 00 00       	mov    esi,0xa
10004e96:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004e99:	8d 68 05             	lea    ebp,[eax+0x5]
10004e9c:	b8 ea 01 00 00       	mov    eax,0x1ea
10004ea1:	99                   	cdq    
10004ea2:	f7 fd                	idiv   ebp
10004ea4:	39 c6                	cmp    esi,eax
10004ea6:	7d 02                	jge    10004eaa <NIWindow::SHADOW_TEST()+0xf2>
10004ea8:	89 c6                	mov    esi,eax
10004eaa:	89 f0                	mov    eax,esi
10004eac:	89 ca                	mov    edx,ecx
10004eae:	0f af c6             	imul   eax,esi
10004eb1:	0f af d1             	imul   edx,ecx
10004eb4:	0f af f1             	imul   esi,ecx
10004eb7:	01 d0                	add    eax,edx
10004eb9:	8d 04 c6             	lea    eax,[esi+eax*8]
10004ebc:	c1 f8 08             	sar    eax,0x8
10004ebf:	83 f8 66             	cmp    eax,0x66
10004ec2:	7e 46                	jle    10004f0a <NIWindow::SHADOW_TEST()+0x152>
10004ec4:	8d 50 9a             	lea    edx,[eax-0x66]
10004ec7:	d1 fa                	sar    edx,1
10004ec9:	8d 42 66             	lea    eax,[edx+0x66]
10004ecc:	83 f8 73             	cmp    eax,0x73
10004ecf:	7e 39                	jle    10004f0a <NIWindow::SHADOW_TEST()+0x152>
10004ed1:	83 ea 0d             	sub    edx,0xd
10004ed4:	c1 fa 02             	sar    edx,0x2
10004ed7:	8d 42 73             	lea    eax,[edx+0x73]
10004eda:	83 f8 7f             	cmp    eax,0x7f
10004edd:	7f 19                	jg     10004ef8 <NIWindow::SHADOW_TEST()+0x140>
10004edf:	50                   	push   eax
10004ee0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10004ee3:	01 f8                	add    eax,edi
10004ee5:	50                   	push   eax
10004ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004eea:	03 43 18             	add    eax,DWORD PTR [ebx+0x18]
10004eed:	50                   	push   eax
10004eee:	ff 33                	push   DWORD PTR [ebx]
10004ef0:	e8 fc ff ff ff       	call   10004ef1 <NIWindow::SHADOW_TEST()+0x139>	10004ef1: R_386_PC32	NIContext::drvDarken4(int, int, int)
10004ef5:	83 c4 10             	add    esp,0x10
10004ef8:	ff 04 24             	inc    DWORD PTR [esp]
10004efb:	e9 19 ff ff ff       	jmp    10004e19 <NIWindow::SHADOW_TEST()+0x61>
10004f00:	47                   	inc    edi
10004f01:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
10004f05:	e9 ee fe ff ff       	jmp    10004df8 <NIWindow::SHADOW_TEST()+0x40>
10004f0a:	83 f8 0a             	cmp    eax,0xa
10004f0d:	7d d0                	jge    10004edf <NIWindow::SHADOW_TEST()+0x127>
10004f0f:	b8 0a 00 00 00       	mov    eax,0xa
10004f14:	eb c9                	jmp    10004edf <NIWindow::SHADOW_TEST()+0x127>
10004f16:	83 c4 1c             	add    esp,0x1c
10004f19:	5b                   	pop    ebx
10004f1a:	5e                   	pop    esi
10004f1b:	5f                   	pop    edi
10004f1c:	5d                   	pop    ebp
10004f1d:	c3                   	ret    

10004f1e <NIWindow::realdraw()>:
10004f1e:	55                   	push   ebp
10004f1f:	57                   	push   edi
10004f20:	56                   	push   esi
10004f21:	53                   	push   ebx
10004f22:	83 ec 18             	sub    esp,0x18
10004f25:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10004f29:	53                   	push   ebx
10004f2a:	e8 fc ff ff ff       	call   10004f2b <NIWindow::realdraw()+0xd>	10004f2b: R_386_PC32	NIWindow::request()
10004f2f:	83 c4 10             	add    esp,0x10
10004f32:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
10004f35:	39 43 10             	cmp    DWORD PTR [ebx+0x10],eax
10004f38:	74 10                	je     10004f4a <NIWindow::realdraw()+0x2c>
10004f3a:	83 ec 0c             	sub    esp,0xc
10004f3d:	68 83 54 00 10       	push   0x10005483	10004f3e: R_386_32	.text
10004f42:	e8 fc ff ff ff       	call   10004f43 <NIWindow::realdraw()+0x25>	10004f43: R_386_PC32	KePanic(char const*)
10004f47:	83 c4 10             	add    esp,0x10
10004f4a:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10004f4e:	75 46                	jne    10004f96 <NIWindow::realdraw()+0x78>
10004f50:	31 f6                	xor    esi,esi
10004f52:	39 73 24             	cmp    DWORD PTR [ebx+0x24],esi
10004f55:	7e 3f                	jle    10004f96 <NIWindow::realdraw()+0x78>
10004f57:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10004f5a:	8d 04 b0             	lea    eax,[eax+esi*4]
10004f5d:	0f b7 28             	movzx  ebp,WORD PTR [eax]
10004f60:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
10004f64:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10004f67:	89 c2                	mov    edx,eax
10004f69:	29 fa                	sub    edx,edi
10004f6b:	39 ea                	cmp    edx,ebp
10004f6d:	7e 24                	jle    10004f93 <NIWindow::realdraw()+0x75>
10004f6f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10004f72:	0f af c6             	imul   eax,esi
10004f75:	01 e8                	add    eax,ebp
10004f77:	ff 34 82             	push   DWORD PTR [edx+eax*4]
10004f7a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
10004f7d:	01 f0                	add    eax,esi
10004f7f:	50                   	push   eax
10004f80:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10004f83:	01 e8                	add    eax,ebp
10004f85:	45                   	inc    ebp
10004f86:	50                   	push   eax
10004f87:	ff 33                	push   DWORD PTR [ebx]
10004f89:	e8 fc ff ff ff       	call   10004f8a <NIWindow::realdraw()+0x6c>	10004f8a: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
10004f8e:	83 c4 10             	add    esp,0x10
10004f91:	eb d1                	jmp    10004f64 <NIWindow::realdraw()+0x46>
10004f93:	46                   	inc    esi
10004f94:	eb bc                	jmp    10004f52 <NIWindow::realdraw()+0x34>
10004f96:	83 c4 0c             	add    esp,0xc
10004f99:	5b                   	pop    ebx
10004f9a:	5e                   	pop    esi
10004f9b:	5f                   	pop    edi
10004f9c:	5d                   	pop    ebp
10004f9d:	c3                   	ret    

10004f9e <List<NIWindow*>::insertAtHead(NIWindow*)>:
10004f9e:	53                   	push   ebx
10004f9f:	83 ec 14             	sub    esp,0x14
10004fa2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10004fa6:	6a 0c                	push   0xc
10004fa8:	e8 fc ff ff ff       	call   10004fa9 <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	10004fa9: R_386_PC32	malloc
10004fad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10004fb1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10004fb8:	89 10                	mov    DWORD PTR [eax],edx
10004fba:	83 c4 10             	add    esp,0x10
10004fbd:	8b 13                	mov    edx,DWORD PTR [ebx]
10004fbf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10004fc2:	85 d2                	test   edx,edx
10004fc4:	74 05                	je     10004fcb <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
10004fc6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10004fc9:	eb 03                	jmp    10004fce <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
10004fcb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10004fce:	89 03                	mov    DWORD PTR [ebx],eax
10004fd0:	83 c4 08             	add    esp,0x8
10004fd3:	5b                   	pop    ebx
10004fd4:	c3                   	ret    
10004fd5:	90                   	nop

10004fd6 <List<NIWindow*>::deleteElement(NIWindow*&)>:
10004fd6:	57                   	push   edi
10004fd7:	56                   	push   esi
10004fd8:	53                   	push   ebx
10004fd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004fdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004fe1:	8b 19                	mov    ebx,DWORD PTR [ecx]
10004fe3:	85 db                	test   ebx,ebx
10004fe5:	74 5e                	je     10005045 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10004fe7:	8b 30                	mov    esi,DWORD PTR [eax]
10004fe9:	89 da                	mov    edx,ebx
10004feb:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
10004fee:	8b 3a                	mov    edi,DWORD PTR [edx]
10004ff0:	85 c0                	test   eax,eax
10004ff2:	74 08                	je     10004ffc <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10004ff4:	39 f7                	cmp    edi,esi
10004ff6:	73 04                	jae    10004ffc <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10004ff8:	89 c2                	mov    edx,eax
10004ffa:	eb ef                	jmp    10004feb <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
10004ffc:	39 f7                	cmp    edi,esi
10004ffe:	75 45                	jne    10005045 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10005000:	39 d3                	cmp    ebx,edx
10005002:	75 18                	jne    1000501c <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
10005004:	89 01                	mov    DWORD PTR [ecx],eax
10005006:	85 c0                	test   eax,eax
10005008:	75 09                	jne    10005013 <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
1000500a:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
10005011:	eb 1e                	jmp    10005031 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10005013:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
1000501a:	eb 15                	jmp    10005031 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
1000501c:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
1000501f:	85 c0                	test   eax,eax
10005021:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10005024:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10005027:	74 05                	je     1000502e <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
10005029:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
1000502c:	eb 03                	jmp    10005031 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
1000502e:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
10005031:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
10005039:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
1000503d:	5b                   	pop    ebx
1000503e:	5e                   	pop    esi
1000503f:	5f                   	pop    edi
10005040:	e9 fc ff ff ff       	jmp    10005041 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	10005041: R_386_PC32	operator delete(void*, unsigned long)
10005045:	5b                   	pop    ebx
10005046:	5e                   	pop    esi
10005047:	5f                   	pop    edi
10005048:	c3                   	ret    
10005049:	43                   	inc    ebx
1000504a:	3a 2f                	cmp    ch,BYTE PTR [edi]
1000504c:	42                   	inc    edx
1000504d:	61                   	popa   
1000504e:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000504f:	61                   	popa   
10005050:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005051:	61                   	popa   
10005052:	2f                   	das    
10005053:	53                   	push   ebx
10005054:	79 73                	jns    100050c9 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005056:	74 65                	je     100050bd <List<NIWindow*>::deleteElement(NIWindow*&)+0xe7>
10005058:	6d                   	ins    DWORD PTR es:[edi],dx
10005059:	2f                   	das    
1000505a:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000505b:	65 77 67             	gs ja  100050c5 <List<NIWindow*>::deleteElement(NIWindow*&)+0xef>
1000505e:	75 69                	jne    100050c9 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005060:	2e 65 78 65          	cs gs js 100050c9 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10005064:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10005067:	4e                   	dec    esi
10005068:	43                   	inc    ebx
10005069:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
1000506c:	4e                   	dec    esi
1000506d:	32 00                	xor    al,BYTE PTR [eax]
1000506f:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
10005072:	53                   	push   ebx
10005073:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
10005076:	43                   	inc    ebx
10005077:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005078:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005079:	74 65                	je     100050e0 <List<NIWindow*>::deleteElement(NIWindow*&)+0x10a>
1000507b:	78 74                	js     100050f1 <List<NIWindow*>::deleteElement(NIWindow*&)+0x11b>
1000507d:	3a 3a                	cmp    bh,BYTE PTR [edx]
1000507f:	64 72 76             	fs jb  100050f8 <List<NIWindow*>::deleteElement(NIWindow*&)+0x122>
10005082:	52                   	push   edx
10005083:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10005085:	64 65 72 54          	fs gs jb 100050dd <List<NIWindow*>::deleteElement(NIWindow*&)+0x107>
10005089:	54                   	push   esp
1000508a:	46                   	inc    esi
1000508b:	34 00                	xor    al,0x0
1000508d:	43                   	inc    ebx
1000508e:	3a 2f                	cmp    ch,BYTE PTR [edi]
10005090:	42                   	inc    edx
10005091:	61                   	popa   
10005092:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005093:	61                   	popa   
10005094:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005095:	61                   	popa   
10005096:	2f                   	das    
10005097:	46                   	inc    esi
10005098:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005099:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000509a:	74 73                	je     1000510f <List<NIWindow*>::deleteElement(NIWindow*&)+0x139>
1000509c:	2f                   	das    
1000509d:	53                   	push   ebx
1000509e:	46                   	inc    esi
1000509f:	4e                   	dec    esi
100050a0:	00 43 41             	add    BYTE PTR [ebx+0x41],al
100050a3:	4e                   	dec    esi
100050a4:	4e                   	dec    esi
100050a5:	4f                   	dec    edi
100050a6:	54                   	push   esp
100050a7:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
100050ab:	44                   	inc    esp
100050ac:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
100050af:	4e                   	dec    esi
100050b0:	54                   	push   esp
100050b1:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
100050b5:	45                   	inc    ebp
100050b6:	43                   	inc    ebx
100050b7:	54                   	push   esp
100050b8:	4f                   	dec    edi
100050b9:	52                   	push   edx
100050ba:	59                   	pop    ecx
100050bb:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
100050be:	2f                   	das    
100050bf:	42                   	inc    edx
100050c0:	61                   	popa   
100050c1:	6e                   	outs   dx,BYTE PTR ds:[esi]
100050c2:	61                   	popa   
100050c3:	6e                   	outs   dx,BYTE PTR ds:[esi]
100050c4:	61                   	popa   
100050c5:	2f                   	das    
100050c6:	46                   	inc    esi
100050c7:	6f                   	outs   dx,DWORD PTR ds:[esi]
100050c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
100050c9:	74 73                	je     1000513e <List<NIWindow*>::deleteElement(NIWindow*&)+0x168>
100050cb:	2f                   	das    
100050cc:	53                   	push   ebx
100050cd:	46                   	inc    esi
100050ce:	4e                   	dec    esi
100050cf:	2f                   	das    
100050d0:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
100050d3:	6e                   	outs   dx,BYTE PTR ds:[esi]
100050d4:	74 20                	je     100050f6 <List<NIWindow*>::deleteElement(NIWindow*&)+0x120>
100050d6:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
100050dd:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
100050e4:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
100050e8:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
100050ee:	6e                   	outs   dx,BYTE PTR ds:[esi]
100050ef:	74 3a                	je     1000512b <List<NIWindow*>::deleteElement(NIWindow*&)+0x155>
100050f1:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
100050f7:	53                   	push   ebx
100050f8:	46                   	inc    esi
100050f9:	4e                   	dec    esi
100050fa:	5f                   	pop    edi
100050fb:	52                   	push   edx
100050fc:	45                   	inc    ebp
100050fd:	53                   	push   ebx
100050fe:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10005104:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
10005107:	6d                   	ins    DWORD PTR es:[edi],dx
10005108:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005109:	72 79                	jb     10005184 <_ssfn__compute_huffman_codes::length_dezigzag+0x4>
1000510b:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
1000510e:	6c                   	ins    BYTE PTR es:[edi],dx
1000510f:	6f                   	outs   dx,DWORD PTR ds:[esi]
10005110:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
10005113:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
1000511a:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000511b:	72 00                	jb     1000511d <List<NIWindow*>::deleteElement(NIWindow*&)+0x147>
1000511d:	42                   	inc    edx
1000511e:	61                   	popa   
1000511f:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
10005123:	6c                   	ins    BYTE PTR es:[edi],dx
10005124:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
10005128:	72 6d                	jb     10005197 <_ssfn__compute_huffman_codes::length_dezigzag+0x17>
1000512a:	61                   	popa   
1000512b:	74 00                	je     1000512d <List<NIWindow*>::deleteElement(NIWindow*&)+0x157>
1000512d:	4e                   	dec    esi
1000512e:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000512f:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10005132:	6e                   	outs   dx,BYTE PTR ds:[esi]
10005133:	74 20                	je     10005155 <List<NIWindow*>::deleteElement(NIWindow*&)+0x17f>
10005135:	66 61                	popaw  
10005137:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
1000513a:	66 6f                	outs   dx,WORD PTR ds:[esi]
1000513c:	75 6e                	jne    100051ac <_ssfn__zdist_extra+0xc>
1000513e:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
10005142:	76 61                	jbe    100051a5 <_ssfn__zdist_extra+0x5>
10005144:	6c                   	ins    BYTE PTR es:[edi],dx
10005145:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
1000514d:	20 76 61             	and    BYTE PTR [esi+0x61],dh
10005150:	6c                   	ins    BYTE PTR es:[edi],dx
10005151:	75 65                	jne    100051b8 <_ssfn__zdist_extra+0x18>
10005153:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005156:	76 61                	jbe    100051b9 <_ssfn__zdist_extra+0x19>
10005158:	6c                   	ins    BYTE PTR es:[edi],dx
10005159:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
10005161:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10005164:	76 61                	jbe    100051c7 <_ssfn__zdist_extra+0x27>
10005166:	6c                   	ins    BYTE PTR es:[edi],dx
10005167:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
1000516f:	47                   	inc    edi
10005170:	6c                   	ins    BYTE PTR es:[edi],dx
10005171:	79 70                	jns    100051e3 <_ssfn__zdist_extra+0x43>
10005173:	68 20 6e 6f 74       	push   0x746f6e20
10005178:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
1000517b:	75 6e                	jne    100051eb <_ssfn__zdist_extra+0x4b>
1000517d:	64                   	fs
1000517e:	00                   	.byte 0x0
1000517f:	90                   	nop

10005180 <_ssfn__compute_huffman_codes::length_dezigzag>:
10005180:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10005190:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

100051a0 <_ssfn__zdist_extra>:
	...
100051b0:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
100051c0:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
100051d0:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
100051e0:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
100051f0:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
10005200:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
10005210:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

10005220 <_ssfn__zdist_base>:
10005220:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
10005230:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
10005240:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
10005250:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
10005260:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
10005270:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10005280:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10005290:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

100052a0 <_ssfn__zlength_extra>:
	...
100052c0:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
100052d0:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
100052e0:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
100052f0:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
10005300:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

10005320 <_ssfn__zlength_base>:
10005320:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
10005330:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
10005340:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
10005350:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
10005360:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
10005370:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10005380:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10005390:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
100053a0:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
100053b0:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
100053c0:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
100053d0:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
100053e0:	32 0a 00 43 55 52 53 4f 52 53 3a 20 25 64 0a 00     2..CURSORS: %d..
100053f0:	4e 52 4d 4c 00 57 41 49 54 00 54 4c 44 52 00 54     NRML.WAIT.TLDR.T
10005400:	45 58 54 00 56 45 52 54 00 48 4f 52 5a 00 48 41     EXT.VERT.HORZ.HA
10005410:	4e 44 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a 20     ND.CURSOR LOAD: 
10005420:	42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b 43 6f 6d     BAD 3..NiLinkCom
10005430:	6d 61 6e 64 43 72 65 61 74 65 57 69 6e 64 6f 77     mandCreateWindow
10005440:	0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e 64 52     ..NiLinkCommandR
10005450:	65 73 75 70 70 6c 79 46 72 61 6d 65 62 75 66 66     esupplyFramebuff
10005460:	65 72 0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d 61 6e     er..NiLinkComman
10005470:	64 43 6c 65 61 72 46 72 61 6d 65 62 75 66 66 65     dClearFramebuffe
10005480:	72 0a 00 41 53 53 45 52 54 49 4f 4e 20 46 41 49     r..ASSERTION FAI
10005490:	4c 55 52 45 20 28 41 29 2e 00                       LURE (A)..
